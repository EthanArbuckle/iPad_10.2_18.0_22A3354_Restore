_QWORD *sub_20F336D8C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _BOOL4 v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE *v31;
  _BYTE *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _OWORD *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  int64_t v57;
  char *v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _BYTE __p[28];
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  char v68;
  void *v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  int v74;
  _QWORD *v75;
  char **v76;
  char **v77;
  char v78;
  char *v79;
  char *v80;
  _OWORD v81[2];
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;

  v10 = result;
  v86 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a3 + 16))
  {
    v12 = result[353];
    v13 = result[354];
    if (v12 != v13)
    {
      while (1)
      {
        v14 = *(_QWORD *)(v12 + 16);
        if (v14)
        {
          if (*(_QWORD *)(v14 + 160) == *(_QWORD *)a3)
            break;
        }
        v12 += 4472;
        if (v12 == v13)
          goto LABEL_63;
      }
    }
    if (v12 == v13 || !v12)
      goto LABEL_63;
  }
  else
  {
    v15 = *(_QWORD *)(*(_QWORD *)(result[352] + 16) + 424);
    if (!v15 || !*(_QWORD *)(*(_QWORD *)v15 + 64))
    {
LABEL_63:
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
      return result;
    }
    v12 = 0;
  }
  v72 = 0u;
  v73 = 0u;
  v74 = 733222228;
  kdebug_trace();
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v16 = *(_QWORD *)(a2 + 24);
  if (v16)
  {
    if (v16 >> 61)
      sub_20E867F44();
    v69 = operator new(8 * v16);
    v70 = (char *)v69;
    v71 = (char *)v69 + 8 * v16;
  }
  v60 = a4;
  v61 = a5;
  v62 = a3;
  v63 = a6;
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
  {
    if (*((_BYTE *)v10 + 2499))
    {
      v19 = i[5];
      v20 = *(_QWORD *)(v19 + 208);
      v21 = *(_QWORD *)(v19 + 216);
      if (v20 != v21)
      {
        v22 = v10[354];
        if (v10[353] != v22)
        {
LABEL_34:
          v28 = v10[353];
          while (1)
          {
            v29 = *(_QWORD *)(v28 + 16);
            if (v29)
            {
              if (*(_QWORD *)(v29 + 160) == *(_QWORD *)(v20 + 24))
                break;
            }
            v28 += 4472;
            if (v28 == v22)
            {
LABEL_33:
              v20 += 472;
              if (v20 == v21)
                goto LABEL_24;
              goto LABEL_34;
            }
          }
          if (v28 == v22)
            goto LABEL_33;
          continue;
        }
      }
    }
LABEL_24:
    sub_20FCCBC60(i + 2, (std::string *)__p);
    v23 = v10[353];
    v24 = v10[354];
    if (v23 == v24)
    {
      v26 = 1;
      if ((__p[23] & 0x80000000) != 0)
        goto LABEL_41;
    }
    else
    {
      do
      {
        v25 = sub_20EB07858(*(_QWORD **)(*(_QWORD *)(v23 + 192) + 8), (uint64_t)__p);
        v26 = v25 == 0;
        v23 += 4472;
        if (v25)
          v27 = 1;
        else
          v27 = v23 == v24;
      }
      while (!v27);
      if ((__p[23] & 0x80000000) != 0)
      {
LABEL_41:
        operator delete(*(void **)__p);
        if (!v26)
          continue;
        goto LABEL_42;
      }
    }
    if (!v26)
      continue;
LABEL_42:
    v30 = i + 3;
    v31 = v70;
    if (v70 >= v71)
    {
      v32 = v69;
      v33 = v70 - (_BYTE *)v69;
      v34 = (v70 - (_BYTE *)v69) >> 3;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        sub_20E867F44();
      v36 = v71 - (_BYTE *)v69;
      if ((v71 - (_BYTE *)v69) >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 61)
          sub_20E877A38();
        v38 = v37;
        v39 = operator new(8 * v37);
        v37 = v38;
        v40 = &v39[8 * v34];
        *v40 = v30;
        v18 = (uint64_t)(v40 + 1);
        v41 = v31 - v32;
        if (v31 == v32)
          goto LABEL_61;
LABEL_54:
        v42 = v41 - 8;
        if (v42 < 0x58)
          goto LABEL_94;
        if ((unint64_t)(v31 - v39 - v33) < 0x20)
          goto LABEL_94;
        v43 = (v42 >> 3) + 1;
        v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        v45 = &v31[-v44];
        v40 = (_QWORD *)((char *)v40 - v44);
        v46 = &v39[8 * v34 - 16];
        v47 = (__int128 *)(v31 - 16);
        v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v49 = *v47;
          *(v46 - 1) = *(v47 - 1);
          *v46 = v49;
          v46 -= 2;
          v47 -= 2;
          v48 -= 4;
        }
        while (v48);
        v31 = v45;
        if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_94:
          do
          {
            v50 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v40 = v50;
          }
          while (v31 != v32);
        }
        v31 = v69;
      }
      else
      {
        v39 = 0;
        v40 = (_QWORD *)(8 * v34);
        *(_QWORD *)(8 * v34) = v30;
        v18 = 8 * v34 + 8;
        v41 = v31 - v32;
        if (v31 != v32)
          goto LABEL_54;
      }
LABEL_61:
      v69 = v40;
      v70 = (char *)v18;
      v71 = &v39[8 * v37];
      if (v31)
        operator delete(v31);
      goto LABEL_19;
    }
    *(_QWORD *)v70 = v30;
    v18 = (uint64_t)(v31 + 8);
LABEL_19:
    v70 = (char *)v18;
  }
  if (*(_BYTE *)(v62 + 16))
  {
    if (!v12)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 2661, (uint64_t)"opt_query_submap", 16, (uint64_t)"Query submap does not exist", 27, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (!*(_BYTE *)(v62 + 16))
        sub_20E866B34();
    }
    sub_20F26DEE0(v12, v62, *v60, (uint64_t *)&v69, v61, a6);
  }
  else
  {
    sub_20F26EE88((_QWORD *)v10[352], (uint64_t *)&v69, (uint64_t)__p);
    if (v68)
    {
      v81[0] = *(_OWORD *)__p;
      *(_OWORD *)((char *)v81 + 12) = *(_OWORD *)&__p[12];
      v83 = 0;
      v84 = 0;
      v82 = 0;
      v51 = v65;
      v52 = v66 - (_BYTE *)v65;
      if (v66 == v65)
      {
        v54 = 0;
        v53 = 0;
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * (v52 >> 3) > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v53 = (char *)operator new(v66 - (_BYTE *)v65);
        v54 = &v53[8 * (v52 >> 3)];
        v82 = v53;
        v84 = v54;
        memcpy(v53, v51, v52 - 4);
        v83 = v54;
      }
      v55 = v67;
      v85 = v67;
      v63[1] = 0;
      v63[2] = 0;
      *v63 = 0;
      v56 = (char *)operator new(0x40uLL);
      *v63 = v56;
      v63[1] = v56;
      v63[2] = v56 + 64;
      v79 = v56;
      v80 = v56;
      v75 = v63 + 2;
      v76 = &v79;
      v77 = &v80;
      v78 = 0;
      *(_OWORD *)v56 = *(_OWORD *)__p;
      *(_OWORD *)(v56 + 12) = *(_OWORD *)&__p[12];
      *((_QWORD *)v56 + 4) = 0;
      *((_QWORD *)v56 + 5) = 0;
      *((_QWORD *)v56 + 6) = 0;
      v57 = v54 - v53;
      if (v54 != v53)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v57 >> 3) > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v58 = (char *)operator new(v57);
        *((_QWORD *)v56 + 4) = v58;
        v59 = &v58[8 * (v57 >> 3)];
        *((_QWORD *)v56 + 6) = v59;
        memcpy(v58, v53, v57 - 4);
        *((_QWORD *)v56 + 5) = v59;
      }
      *((_QWORD *)v56 + 7) = v55;
      v63[1] = v56 + 64;
      if (!v53 || (operator delete(v53), v68))
      {
        if (v65)
        {
          v66 = v65;
          operator delete(v65);
        }
      }
    }
    else
    {
      *a6 = 0;
      a6[1] = 0;
      a6[2] = 0;
    }
  }
  if (v69)
  {
    v70 = (char *)v69;
    operator delete(v69);
  }
  return (_QWORD *)kdebug_trace();
}

void sub_20F33737C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  void *v34;
  char *v35;
  uint64_t v36;
  char *v38;
  void *v39;

  sub_20F3417FC((uint64_t)&a34);
  a12[1] = v35;
  v38 = (char *)*a12;
  if (*a12)
  {
    if (v35 != v38)
    {
      do
      {
        v39 = (void *)*((_QWORD *)v35 - 4);
        if (v39)
        {
          *((_QWORD *)v35 - 3) = v39;
          operator delete(v39);
        }
        v35 -= 64;
      }
      while (v35 != v38);
      v35 = (char *)*a12;
    }
    a12[1] = v38;
    operator delete(v35);
    if (!v34)
    {
LABEL_12:
      if (a24 && __p)
        operator delete(__p);
      if (a25)
        operator delete(a25);
      sub_20E8E69C4((uint64_t)&a28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_12;
  }
  *(_QWORD *)(v36 - 136) = v34;
  operator delete(v34);
  goto LABEL_12;
}

uint64_t sub_20F3374D0(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v3 = *(_QWORD *)(result + 2824);
  v4 = *(_QWORD *)(result + 2832);
  if (v3 != v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v3 + 16);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 160) == a2)
          break;
      }
      v3 += 4472;
      if (v3 == v4)
        return result;
    }
  }
  v6 = v3 == v4 || v3 == 0;
  if (!v6)
  {
    v7 = a3 + 1;
    v8 = (_QWORD *)*a3;
    if ((_QWORD *)*a3 != a3 + 1)
    {
      v9 = *(uint64_t **)(*(_QWORD *)(v3 + 16) + 424);
      do
      {
        v10 = *v9;
        v11 = *(_QWORD *)(*v9 + 304);
        if (!v11)
          goto LABEL_24;
        v12 = *((_DWORD *)v8 + 8);
        v13 = v10 + 304;
        v14 = v10 + 304;
        do
        {
          v15 = *(_DWORD *)(v11 + 32);
          v16 = v15 >= v12;
          if (v15 >= v12)
            v17 = (uint64_t *)v11;
          else
            v17 = (uint64_t *)(v11 + 8);
          if (v16)
            v14 = v11;
          v11 = *v17;
        }
        while (*v17);
        if (v14 != v13 && *(_DWORD *)(v14 + 32) <= v12)
        {
          *(_OWORD *)(v14 + 40) = *(_OWORD *)(v8 + 5);
          v21 = *(_OWORD *)(v8 + 7);
          v22 = *(_OWORD *)(v8 + 9);
          v23 = *(_OWORD *)(v8 + 11);
          *(_QWORD *)(v14 + 104) = v8[13];
          *(_OWORD *)(v14 + 88) = v23;
          *(_OWORD *)(v14 + 72) = v22;
          *(_OWORD *)(v14 + 56) = v21;
          v24 = *((_OWORD *)v8 + 7);
          *(_QWORD *)(v14 + 128) = v8[16];
          *(_OWORD *)(v14 + 112) = v24;
          v19 = (_QWORD *)v8[1];
          if (!v19)
            goto LABEL_29;
        }
        else
        {
LABEL_24:
          result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/src/VIODatabaseUtil.cpp", 557, (uint64_t)"T_I_to_C_ptr", 12, (uint64_t)"Cannot find the corresponding camera in viodatabase", 51, (void (*)(void **))sub_21023DDB0);
          if ((result & 1) != 0)
            abort();
          MEMORY[0x40] = v8[13];
          MEMORY[0x10] = *(_OWORD *)(v8 + 7);
          MEMORY[0x20] = *(_OWORD *)(v8 + 9);
          MEMORY[0x30] = *(_OWORD *)(v8 + 11);
          MEMORY[0] = *(_OWORD *)(v8 + 5);
          v18 = v8[16];
          MEMORY[0x48] = *((_OWORD *)v8 + 7);
          MEMORY[0x58] = v18;
          v19 = (_QWORD *)v8[1];
          if (!v19)
          {
            do
            {
LABEL_29:
              v20 = (_QWORD *)v8[2];
              v6 = *v20 == (_QWORD)v8;
              v8 = v20;
            }
            while (!v6);
            goto LABEL_12;
          }
        }
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
LABEL_12:
        v8 = v20;
      }
      while (v20 != v7);
    }
  }
  return result;
}

void sub_20F3376BC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _OWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  char *v59;
  _QWORD *v60;
  int v61;
  void **v62;
  void **v63;
  uint64_t v64;
  uint64_t **v65;
  void *__p;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  int v70;

  v5 = a1;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_OWORD *)(a5 + 32) = 0u;
  v62 = (void **)(a5 + 32);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = a5 + 16;
  v65 = (uint64_t **)(a5 + 16);
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_QWORD *)(a5 + 80) = 0;
  *(_WORD *)(a5 + 88) = 1;
  *(_DWORD *)(a5 + 92) = 0;
  *(_QWORD *)(a5 + 96) = -1;
  *(_OWORD *)(a5 + 104) = 0u;
  v60 = (_QWORD *)(a5 + 104);
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 136) = 0u;
  *(_OWORD *)(a5 + 152) = 0u;
  *(_OWORD *)(a5 + 168) = 0u;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 200) = 0u;
  *(_OWORD *)(a5 + 216) = 0u;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_QWORD *)(a5 + 248) = a5 + 256;
  *(_QWORD *)(a5 + 256) = 0;
  *(_QWORD *)(a5 + 280) = 0;
  *(_QWORD *)(a5 + 288) = 0;
  *(_QWORD *)(a5 + 264) = 0;
  *(_QWORD *)(a5 + 272) = a5 + 280;
  *(_BYTE *)(a5 + 296) = 0;
  *(_BYTE *)(a5 + 336) = 0;
  if ((a4 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 2824);
    v64 = *(_QWORD *)(a1 + 2832);
    if (v64 != v7)
    {
      if ((unint64_t)(0x3175B2258D8284CFLL * ((v64 - v7) >> 3)) >> 60)
        sub_20E867F44();
      v10 = (char *)operator new(0x175B2258D8284CF0 * ((v64 - v7) >> 3));
      *(_QWORD *)(a5 + 32) = v10;
      *(_QWORD *)(a5 + 40) = v10;
      *(_QWORD *)(a5 + 48) = &v10[0x175B2258D8284CF0 * ((v64 - v7) >> 3)];
      v11 = (char *)operator new(0xA308B385443C7368 * ((v64 - v7) >> 3));
      *(_QWORD *)(a5 + 56) = v11;
      *(_QWORD *)(a5 + 64) = v11;
      v63 = (void **)(a5 + 56);
      *(_QWORD *)(a5 + 72) = &v11[0xA308B385443C7368 * ((v64 - v7) >> 3)];
      v61 = a2;
      do
      {
        v13 = *(_QWORD *)(v7 + 16);
        v14 = *(_QWORD *)(v13 + 160);
        sub_20F453BF4(v13, a2, a3, *(unsigned __int8 *)(v5 + 2), (uint64_t)&__p);
        v15 = v65;
        while (1)
        {
          v16 = *v15;
          v17 = v15;
          if (!*v15)
            break;
          while (1)
          {
            v15 = (uint64_t **)v16;
            v18 = v16[4];
            if (v14 < v18)
              break;
            if (v18 >= v14)
              goto LABEL_16;
            v16 = v15[1];
            if (!v16)
            {
              v17 = v15 + 1;
              goto LABEL_13;
            }
          }
        }
LABEL_13:
        v19 = (uint64_t *)operator new(0x1D8uLL);
        v19[4] = v14;
        sub_20E9573E4((uint64_t)(v19 + 5), (uint64_t *)&__p);
        *v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v15;
        *v17 = v19;
        v20 = **(_QWORD **)(a5 + 8);
        if (v20)
        {
          *(_QWORD *)(a5 + 8) = v20;
          v19 = *v17;
        }
        sub_20E868578(*(uint64_t **)(a5 + 16), v19);
        ++*(_QWORD *)(a5 + 24);
LABEL_16:
        sub_20E9545B0((uint64_t)&__p);
        v21 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 160);
        v23 = *(char **)(a5 + 40);
        v22 = *(_QWORD *)(a5 + 48);
        if ((unint64_t)v23 >= v22)
        {
          v25 = (char *)*v62;
          v26 = (v23 - (_BYTE *)*v62) >> 4;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 60)
            sub_20E867F44();
          v28 = v22 - (_QWORD)v25;
          if (v28 >> 3 > v27)
            v27 = v28 >> 3;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
            v29 = 0xFFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29 >> 60)
            sub_20E877A38();
          v30 = (char *)operator new(16 * v29);
          v31 = &v30[16 * v26];
          *(_QWORD *)v31 = v21;
          *((_DWORD *)v31 + 2) = *(_DWORD *)(v7 + 304);
          if (v23 == v25)
          {
            v24 = v31 + 16;
            *(_QWORD *)(a5 + 32) = v31;
            *(_QWORD *)(a5 + 40) = v31 + 16;
            *(_QWORD *)(a5 + 48) = &v30[16 * v29];
            if (!v25)
              goto LABEL_30;
          }
          else
          {
            v32 = &v30[16 * v26];
            do
            {
              v33 = v32 - 16;
              *((_OWORD *)v32 - 1) = *((_OWORD *)v23 - 1);
              v23 -= 16;
              v32 -= 16;
            }
            while (v23 != v25);
            v24 = v31 + 16;
            *(_QWORD *)(a5 + 32) = v33;
            *(_QWORD *)(a5 + 40) = v31 + 16;
            *(_QWORD *)(a5 + 48) = &v30[16 * v29];
            if (!v25)
              goto LABEL_30;
          }
          operator delete(v25);
        }
        else
        {
          *(_QWORD *)v23 = v21;
          *((_DWORD *)v23 + 2) = *(_DWORD *)(v7 + 304);
          v24 = v23 + 16;
        }
LABEL_30:
        *(_QWORD *)(a5 + 40) = v24;
        v34 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 160);
        v35 = (_OWORD *)(*(_QWORD *)(v7 + 232) + 24);
        v37 = *(char **)(a5 + 64);
        v36 = *(_QWORD *)(a5 + 72);
        if ((unint64_t)v37 < v36)
        {
          *(_QWORD *)v37 = v34;
          *(_OWORD *)(v37 + 8) = *v35;
          v12 = v37 + 24;
        }
        else
        {
          v38 = v5;
          v39 = a3;
          v40 = (char *)*v63;
          v41 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)*v63) >> 3);
          v42 = v41 + 1;
          if (v41 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_20E867F44();
          v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)v40) >> 3);
          if (2 * v43 > v42)
            v42 = 2 * v43;
          if (v43 >= 0x555555555555555)
            v44 = 0xAAAAAAAAAAAAAAALL;
          else
            v44 = v42;
          if (v44)
          {
            if (v44 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v45 = (char *)operator new(24 * v44);
          }
          else
          {
            v45 = 0;
          }
          v46 = &v45[24 * v41];
          *(_QWORD *)v46 = v34;
          *(_OWORD *)(v46 + 8) = *v35;
          v47 = v46;
          a3 = v39;
          if (v37 != v40)
          {
            do
            {
              v48 = *(_OWORD *)(v37 - 24);
              *((_QWORD *)v47 - 1) = *((_QWORD *)v37 - 1);
              *(_OWORD *)(v47 - 24) = v48;
              v47 -= 24;
              v37 -= 24;
            }
            while (v37 != v40);
            v37 = (char *)*v63;
          }
          v5 = v38;
          v49 = &v45[24 * v44];
          v12 = v46 + 24;
          *(_QWORD *)(a5 + 56) = v47;
          *(_QWORD *)(a5 + 64) = v46 + 24;
          *(_QWORD *)(a5 + 72) = v49;
          a2 = v61;
          if (v37)
            operator delete(v37);
        }
        *(_QWORD *)(a5 + 64) = v12;
        v7 += 4472;
      }
      while (v7 != v64);
    }
  }
  *(_OWORD *)(a5 + 80) = *(_OWORD *)(*(_QWORD *)(v5 + 3072) + 24);
  *(_QWORD *)(a5 + 96) = *(_QWORD *)(v5 + 2808);
  v50 = *(_QWORD *)(v5 + 2816);
  if (*(_QWORD *)(*(_QWORD *)(v50 + 16) + 424))
  {
    if (v60 != (_QWORD *)(v50 + 32))
    {
      sub_20F04DCF4(v60, *(char **)(v50 + 32), *(char **)(v50 + 40), (uint64_t)(*(_QWORD *)(v50 + 40) - *(_QWORD *)(v50 + 32)) >> 4);
      v50 = *(_QWORD *)(v5 + 2816);
    }
    if (a5 + 128 != v50 + 56)
      sub_20F04DCF4((_QWORD *)(a5 + 128), *(char **)(v50 + 56), *(char **)(v50 + 64), (uint64_t)(*(_QWORD *)(v50 + 64) - *(_QWORD *)(v50 + 56)) >> 4);
  }
  if (a5 + 176 != v5 + 2848)
    sub_20E92CD94((_QWORD *)(a5 + 176), *(char **)(v5 + 2848), *(char **)(v5 + 2856), (uint64_t)(*(_QWORD *)(v5 + 2856) - *(_QWORD *)(v5 + 2848)) >> 3);
  v51 = *(_QWORD *)(v5 + 3080);
  if (a5 + 200 != v51 + 8)
    sub_20E92CD94((_QWORD *)(a5 + 200), *(char **)(v51 + 8), *(char **)(v51 + 16), (uint64_t)(*(_QWORD *)(v51 + 16) - *(_QWORD *)(v51 + 8)) >> 3);
  if (*(_BYTE *)(v5 + 3016))
  {
    v52 = *(_QWORD *)(v5 + 3008);
    if (*(_BYTE *)(v52 + 200))
    {
      if (*(_QWORD *)(v52 + 184) && *(_QWORD *)(v52 + 136) != *(_QWORD *)(v52 + 144))
      {
        sub_2102149A0((_QWORD *)(v52 + 88), (uint64_t)&__p);
        if (*(_BYTE *)(a5 + 336))
        {
          sub_20E99090C(a5 + 296, (uint64_t *)&__p);
          v53 = (char *)v68;
          if (!v68)
          {
LABEL_71:
            v58 = __p;
            __p = 0;
            if (v58)
              operator delete(v58);
            return;
          }
        }
        else
        {
          v54 = __p;
          v55 = v67;
          __p = 0;
          v67 = 0;
          *(_QWORD *)(a5 + 296) = v54;
          *(_QWORD *)(a5 + 304) = v55;
          v53 = (char *)v68;
          v56 = v69;
          *(_QWORD *)(a5 + 312) = v68;
          *(_QWORD *)(a5 + 320) = v56;
          *(_DWORD *)(a5 + 328) = v70;
          if (v56)
          {
            v57 = *((_QWORD *)v53 + 1);
            if ((v55 & (v55 - 1)) != 0)
            {
              if (v57 >= v55)
                v57 %= v55;
            }
            else
            {
              v57 &= v55 - 1;
            }
            v53 = 0;
            v54[v57] = a5 + 312;
            v68 = 0;
            v69 = 0;
          }
          *(_BYTE *)(a5 + 336) = 1;
          if (!v53)
            goto LABEL_71;
        }
        do
        {
          v59 = *(char **)v53;
          if (v53[39] < 0)
            operator delete(*((void **)v53 + 2));
          operator delete(v53);
          v53 = v59;
        }
        while (v59);
        goto LABEL_71;
      }
    }
  }
}

void sub_20F337CC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAF9A2C(v1);
  _Unwind_Resume(a1);
}

void sub_20F337CD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAF9A2C(v1);
  _Unwind_Resume(a1);
}

void sub_20F337CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAF9A2C(v1);
  _Unwind_Resume(a1);
}

void sub_20F337D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAF9A2C(v1);
  _Unwind_Resume(a1);
}

void sub_20F337D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20E9545B0((uint64_t)va);
  sub_20EAF9A2C(v8);
  _Unwind_Resume(a1);
}

void sub_20F337D30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAF9A2C(v1);
  _Unwind_Resume(a1);
}

void sub_20F337D44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAF9A2C(v1);
  _Unwind_Resume(a1);
}

void sub_20F337D58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20EAF9A2C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F337D6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned __int8 v6;
  char *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  __uint64_t v43[2];
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  _BYTE v48[24];
  _BYTE *v49;
  _BYTE v50[24];
  _BYTE *v51;
  int v52;
  _QWORD v53[3];
  char v54;
  void *v55;
  char v56;
  char v57;
  void *v58;
  char v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  uint64_t v65;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  v65 = *MEMORY[0x24BDAC8D0];
  v5 = sub_210219C18();
  v6 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v52 = 134217984;
    v53[0] = v3;
    v8 = (char *)_os_log_send_and_compose_impl();
    v9 = strlen(v8);
    v43[0] = 0;
    pthread_threadid_np(0, v43);
    v10 = v43[0];
    timespec_get((timespec *)v43, 1);
    sub_210219E20(&v52, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v5 + 1), (__int128 *)(v5 + 5), "MM:MS:%llu", 0xAuLL, v8, v9, v10, v43);
    std::mutex::lock(&stru_254A5A410);
    v11 = qword_254A5A458;
    for (i = unk_254A5A460; v11 != i; v11 += 40)
    {
      v13 = *(_QWORD *)(v11 + 32);
      if (!v13)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v13 + 48))(v13, &v52);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v64 < 0)
    {
      operator delete(v63);
      if ((v62 & 0x80000000) == 0)
      {
LABEL_8:
        if (!v60)
        {
LABEL_14:
          if (v57 && v56 < 0)
            operator delete(v55);
          if (v54 < 0)
            operator delete(*(void **)((char *)v53 + 4));
          if (v8)
            free(v8);
          goto LABEL_21;
        }
LABEL_12:
        if (v59 < 0)
          operator delete(v58);
        goto LABEL_14;
      }
    }
    else if ((v62 & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(v61);
    if (!v60)
      goto LABEL_14;
    goto LABEL_12;
  }
LABEL_21:
  if (os_signpost_enabled((os_log_t)*v5))
  {
    v52 = 134217984;
    v53[0] = v3;
    _os_signpost_emit_unreliably_with_name_impl();
  }
  v14 = operator new();
  *(_OWORD *)(v14 + 400) = 0u;
  *(_OWORD *)(v14 + 416) = 0u;
  *(_OWORD *)(v14 + 368) = 0u;
  *(_OWORD *)(v14 + 384) = 0u;
  *(_OWORD *)(v14 + 336) = 0u;
  *(_OWORD *)(v14 + 352) = 0u;
  *(_OWORD *)(v14 + 304) = 0u;
  *(_OWORD *)(v14 + 320) = 0u;
  *(_OWORD *)(v14 + 272) = 0u;
  *(_OWORD *)(v14 + 288) = 0u;
  *(_OWORD *)(v14 + 256) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  *(_OWORD *)(v14 + 224) = 0u;
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  *(_OWORD *)(v14 + 144) = 0u;
  *(_OWORD *)(v14 + 160) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 128) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 240) = 0u;
  *(_OWORD *)v14 = 0u;
  *(_DWORD *)(v14 + 32) = 1065353216;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_QWORD *)(v14 + 152) = 0;
  sub_20FCC477C((_QWORD *)v14);
  *(_QWORD *)(v14 + 160) = -1;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_DWORD *)(v14 + 200) = 1065353216;
  *(_QWORD *)(v14 + 208) = 0;
  *(_QWORD *)(v14 + 216) = 0;
  *(_QWORD *)(v14 + 240) = 0;
  *(_QWORD *)(v14 + 248) = 0;
  *(_QWORD *)(v14 + 256) = 0;
  *(_QWORD *)(v14 + 224) = 0;
  *(_QWORD *)(v14 + 232) = v14 + 240;
  *(_BYTE *)(v14 + 292) = 0;
  *(_QWORD *)(v14 + 264) = 0;
  *(_QWORD *)(v14 + 272) = 0;
  *(_BYTE *)(v14 + 280) = 0;
  *(_QWORD *)(v14 + 296) = v14 + 304;
  *(_QWORD *)(v14 + 304) = 0;
  *(_BYTE *)(v14 + 356) = 0;
  *(_QWORD *)(v14 + 312) = 0;
  *(_QWORD *)(v14 + 320) = 0;
  *(_BYTE *)(v14 + 344) = 0;
  *(_QWORD *)(v14 + 328) = 0;
  *(_QWORD *)(v14 + 336) = 0;
  *(_OWORD *)(v14 + 360) = 0u;
  *(_OWORD *)(v14 + 376) = 0u;
  *(_DWORD *)(v14 + 392) = 1065353216;
  *(_QWORD *)(v14 + 400) = -1;
  *(_BYTE *)(v14 + 408) = 0;
  *(_DWORD *)(v14 + 428) = 0;
  *(_QWORD *)(v14 + 412) = 0;
  *(_QWORD *)(v14 + 420) = 0;
  v42 = v14;
  v15 = (uint64_t *)operator new();
  sub_20E8E8A78(v15);
  v16 = *(uint64_t **)(v14 + 424);
  *(_QWORD *)(v14 + 424) = v15;
  if (v16)
  {
    v17 = sub_20E8E95B0(v16);
    MEMORY[0x212BC6398](v17, 0x20C40313AD07FLL);
  }
  *(_QWORD *)(v14 + 400) = std::chrono::system_clock::now().__d_.__rep_ / 1000000;
  *(_QWORD *)(v14 + 160) = v3;
  sub_20FCE86E0(**(_QWORD ***)(*(_QWORD *)(*(_QWORD *)(v4 + 2816) + 16) + 424), **(_QWORD **)(v14 + 424));
  *(_QWORD *)(v14 + 412) = *(_QWORD *)(v4 + 2752);
  *(_DWORD *)(v14 + 420) = *(_DWORD *)(v4 + 2760);
  sub_20F24EA48(*(_QWORD *)(v4 + 2816));
  *(_QWORD *)(v4 + 2808) = v3;
  v41 = 335;
  v18 = *(_QWORD *)(v4 + 2976);
  v19 = *(_QWORD *)(v4 + 2984);
  v20 = *(_QWORD *)(v4 + 2992);
  v21 = *(_QWORD *)(v4 + 3000);
  v43[0] = v14;
  v22 = (std::__shared_weak_count *)operator new();
  v22->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9EE890;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v43[1] = (__uint64_t)v22;
  v42 = 0;
  v24 = *(_QWORD *)(v4 + 3112);
  if (!v24)
    goto LABEL_28;
  if (v24 != v4 + 3088)
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
LABEL_28:
    v51 = (_BYTE *)v24;
    goto LABEL_30;
  }
  v51 = v50;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v24 + 24))(v24, v50);
LABEL_30:
  v25 = *(_QWORD *)(v4 + 3144);
  if (!v25)
  {
LABEL_33:
    v49 = (_BYTE *)v25;
    goto LABEL_35;
  }
  if (v25 != v4 + 3120)
  {
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    goto LABEL_33;
  }
  v49 = v48;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v25 + 24))(v25, v48);
LABEL_35:
  v26 = *(_QWORD *)(v4 + 3176);
  if (!v26)
  {
LABEL_38:
    v47 = (_BYTE *)v26;
    goto LABEL_40;
  }
  if (v26 != v4 + 3152)
  {
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
    goto LABEL_38;
  }
  v47 = v46;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v26 + 24))(v26, v46);
LABEL_40:
  v27 = *(_QWORD *)(v4 + 3208);
  if (!v27)
  {
LABEL_43:
    v45 = (_BYTE *)v27;
    goto LABEL_45;
  }
  if (v27 != v4 + 3184)
  {
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
    goto LABEL_43;
  }
  v45 = v44;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v27 + 24))(v27, v44);
LABEL_45:
  sub_20F24C274((uint64_t)&v52, v4, v18, v19, v20, v21, &v41, v43, -1.0, (uint64_t)v50, (uint64_t)v48, (uint64_t)v46, (uint64_t)v44);
  v28 = *(_QWORD *)(v4 + 2832);
  if (v28 >= *(_QWORD *)(v4 + 2840))
    v29 = sub_20F33DAAC((uint64_t *)(v4 + 2824), (uint64_t)&v52);
  else
    v29 = sub_20F314370(v28, (uint64_t)&v52) + 4472;
  *(_QWORD *)(v4 + 2832) = v29;
  sub_20F3122B4((uint64_t)&v52);
  v30 = v45;
  if (v45 == v44)
  {
    v31 = 4;
    v30 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_53;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_53:
  v32 = v47;
  if (v47 == v46)
  {
    v33 = 4;
    v32 = v46;
  }
  else
  {
    if (!v47)
      goto LABEL_58;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_58:
  v34 = v49;
  if (v49 == v48)
  {
    v35 = 4;
    v34 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_63;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_63:
  v36 = v51;
  if (v51 == v50)
  {
    v37 = 4;
    v36 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_68;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
  do
LABEL_68:
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  sub_20F31D2E0(v4);
  result = v42;
  if (v42)
  {
    v40 = sub_20E9545B0(v42);
    return MEMORY[0x212BC6398](v40, 0x10A0C401749CDD1);
  }
  return result;
}

void sub_20F3384E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  sub_20F3122B4((uint64_t)&a33);
  v35 = a20;
  if (a20 == &a17)
  {
    v36 = 4;
    v35 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v36 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_6:
  v37 = a24;
  if (a24 == &a21)
  {
    v38 = 4;
    v37 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_11;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_11:
  v39 = a28;
  if (a28 == &a25)
  {
    v40 = 4;
    v39 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_16;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_16:
  v41 = *(char **)(v33 + 24);
  if (v41 == &a29)
  {
    v42 = 4;
    v41 = &a29;
  }
  else
  {
    if (!v41)
      goto LABEL_21;
    v42 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v41 + 8 * v42))();
LABEL_21:
  sub_20E86665C((uint64_t)&a15);
  sub_20EE5C31C(&a14);
  _Unwind_Resume(a1);
}

void sub_20F338608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20EE5C31C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F33861C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x212BC6398](v6, 0x20C40313AD07FLL);
  sub_20EE5C31C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F33864C()
{
  JUMPOUT(0x20F338684);
}

void sub_20F338654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20EE5C31C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F338668()
{
  std::mutex::unlock(&stru_254A5A410);
  JUMPOUT(0x20F33867CLL);
}

void sub_20F3386A0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int64_t v33;

  v3 = *(_QWORD *)(a2[2] + 160);
  *(_QWORD *)(a1[385] + 32) = -1;
  v4 = (_QWORD *)a2[10];
  v5 = (_QWORD *)a2[11];
  if (v4 != v5)
  {
    v6 = a1[353];
    i = a1[354];
    while (1)
    {
      v8 = v6;
      if (v6 != i)
      {
        v8 = v6;
        while (1)
        {
          v9 = *(_QWORD *)(v8 + 16);
          if (v9)
          {
            if (*(_QWORD *)(v9 + 160) == *v4)
              break;
          }
          v8 += 4472;
          if (v8 == i)
            goto LABEL_3;
        }
      }
      if (v8 != i && v8)
        break;
LABEL_3:
      if (++v4 == v5)
        goto LABEL_41;
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 16) + 424);
    v11 = *(_QWORD *)(v10 + 40);
    v12 = *(_QWORD *)(v10 + 48);
    while (1)
    {
      if (v11 == v12)
        goto LABEL_3;
      v13 = *(_QWORD **)v11;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 696);
      if (v14 != -1)
        break;
LABEL_12:
      v11 += 16;
    }
    v15 = v13 + 87;
    if (v14 == v3)
    {
      v16 = 0;
      *v15 = -1;
      v17 = v13[88];
      v18 = v17 != -1;
      if (v17 != v3)
      {
LABEL_20:
        v20 = 4 * v18;
        v21 = v13[89];
        if (v21 == -1)
          v20 = 1;
        if (v21 == v3)
        {
          v13[89] = -1;
          v16 = 2;
          v24 = v13[90];
          if (v24 == -1)
            v20 = 2;
          if (v24 != v3)
          {
LABEL_26:
            v23 = v13[91];
            if (v23 == -1)
              v20 = 3;
            if (v23 != v3)
              goto LABEL_29;
            goto LABEL_37;
          }
        }
        else
        {
          v22 = v13[90];
          if (v22 == -1)
            v20 = 2;
          if (v22 != v3)
            goto LABEL_26;
        }
        v13[90] = -1;
        v16 = 3;
        v25 = v13[91];
        if (v25 == -1)
          v20 = 3;
        if (v25 != v3)
        {
LABEL_29:
          if (v16 == -1)
            goto LABEL_12;
          goto LABEL_38;
        }
LABEL_37:
        v13[91] = -1;
        v16 = 4;
LABEL_38:
        if (v16 != v20)
        {
          v26 = v16;
          v27 = v20;
          v28 = v15[v26];
          v15[v26] = v15[v27];
          v15[v27] = v28;
        }
        goto LABEL_12;
      }
    }
    else
    {
      v16 = -1;
      v19 = v13[88];
      v18 = v19 != -1;
      if (v19 != v3)
        goto LABEL_20;
    }
    v13[88] = -1;
    v16 = 1;
    goto LABEL_20;
  }
  v6 = a1[353];
  i = a1[354];
LABEL_41:
  v29 = i;
  if (v6 == i)
  {
LABEL_45:
    if (v29 + 4472 != i)
      goto LABEL_49;
LABEL_46:
    if (i == v29)
      goto LABEL_52;
    goto LABEL_51;
  }
  while (*(_QWORD *)(*(_QWORD *)(v6 + 16) + 160) != v3)
  {
    v6 += 4472;
    if (v6 == i)
    {
      v29 = i;
      goto LABEL_45;
    }
  }
  v29 = v6;
  if (v6 + 4472 == i)
    goto LABEL_46;
  do
  {
LABEL_49:
    v30 = v29;
    v29 += 4472;
  }
  while (sub_20F34185C(v30, v29) + 8944 != i);
  for (i = a1[354]; i != v29; sub_20F3122B4(i))
LABEL_51:
    i -= 4472;
LABEL_52:
  a1[354] = v29;
  v31 = (char *)a1[356];
  v32 = (char *)a1[357];
  if (v31 != v32)
  {
    while (*(_QWORD *)v31 != v3)
    {
      v31 += 8;
      if (v31 == v32)
      {
        v31 = (char *)a1[357];
        break;
      }
    }
  }
  if (v31 != v32)
  {
    v33 = v32 - (v31 + 8);
    if (v32 != v31 + 8)
      memmove(v31, v31 + 8, v32 - (v31 + 8));
    a1[357] = &v31[v33];
  }
  sub_20F31D2E0((uint64_t)a1);
}

void sub_20F338990(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q1>, float64x2_t a4@<Q2>, float64x2_t a5@<Q3>, float64x2_t a6@<Q6>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float64x2_t v11;
  void *__p[2];
  uint64_t v13;
  float64x2_t v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t *v17;

  v7 = *(_QWORD *)(a1 + 2824);
  v8 = *(_QWORD *)(a1 + 2832);
  v14 = 0uLL;
  v15 = 0;
  v9 = v8 - v7;
  if (v8 == v7)
  {
    v11 = 0uLL;
  }
  else
  {
    v10 = 0x3175B2258D8284CFLL * (v9 >> 3);
    if (v10 >> 61)
      sub_20E867F44();
    *(_QWORD *)&v14.f64[0] = operator new(0x8BAD912C6C142678 * (v9 >> 3));
    v14.f64[1] = v14.f64[0];
    v15 = *(_QWORD *)&v14.f64[0] + 8 * v10;
    v17 = &v14;
    do
    {
      v16 = v7;
      sub_20EA61104((void ***)&v17, &v16);
      v7 += 4472;
    }
    while (v7 != v8);
    v11 = v14;
    v9 = v15;
  }
  *(float64x2_t *)__p = v11;
  v13 = v9;
  sub_20F2AAA94((uint64_t *)__p, a2, v11, a3, a4, a5, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20F338A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F338AA4(uint64_t a1, double a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, double a6, double a7, float64x2_t a8)
{
  int v9;
  double v10;
  unsigned __int8 v11;
  _QWORD *v12;
  int v13;
  std::chrono::steady_clock::time_point v14;
  std::chrono::steady_clock::time_point *v15;
  int v16;
  uint64_t *v17;
  double v25;
  unsigned __int8 v26;
  unint64_t v27;
  double v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  unsigned __int8 v35;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  double v46;
  unsigned __int8 v47;
  __uint64_t v48[2];
  std::string v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  void *v54;
  char v55;
  char v56;
  void *v57;
  char v58;
  void *__p;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  sub_20F338990(a1, (uint64_t)&v45, a3, a4, a5, a8);
  v9 = v47;
  if (!v47)
  {
    v16 = 0;
    return v9 | (v16 << 8);
  }
  v10 = v46;
  v44 = *((_QWORD *)&v45 + 1);
  v11 = atomic_load((unsigned __int8 *)&qword_254A688A0);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A688A0))
  {
    v43 = operator new(0x28uLL);
    v43[1] = 0;
    v43[2] = 0;
    *v43 = &off_24C9C4340;
    *((_BYTE *)v43 + 24) = 0;
    *((_BYTE *)v43 + 32) = 0;
    qword_254A688A8 = (uint64_t)(v43 + 3);
    qword_254A688B0 = (uint64_t)v43;
    unk_254A688B8 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A688A8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A688A0);
  }
  v12 = (_QWORD *)qword_254A688A8;
  v13 = *(unsigned __int8 *)(qword_254A688A8 + 8);
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v13)
  {
    v15 = (std::chrono::steady_clock::time_point *)qword_254A688A8;
    if (!*(_BYTE *)(qword_254A688A8 + 8))
      *(_BYTE *)(qword_254A688A8 + 8) = 1;
LABEL_9:
    v15->__d_.__rep_ = v14.__d_.__rep_;
    v17 = sub_210219C18();
    _V2.D[1] = v44;
    _D1 = v44;
    __asm { FMLA            D0, D1, V2.D[1] }
    v25 = _D0 + v10 * v10;
    v26 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v26 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    v27 = atomic_load(&qword_254A5A450);
    v28 = sqrt(v25);
    if (!v27)
      goto LABEL_29;
    LODWORD(v49.__r_.__value_.__l.__data_) = 134217984;
    *(double *)((char *)v49.__r_.__value_.__r.__words + 4) = v28;
    v29 = (char *)_os_log_send_and_compose_impl();
    v30 = strlen(v29);
    v48[0] = 0;
    pthread_threadid_np(0, v48);
    v31 = v48[0];
    timespec_get((timespec *)v48, 1);
    sub_210219E20(&v49, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v17 + 1), (__int128 *)(v17 + 5), "Map spread %f", 0xDuLL, v29, v30, v31, v48);
    std::mutex::lock(&stru_254A5A410);
    v32 = qword_254A5A458;
    for (i = unk_254A5A460; v32 != i; v32 += 40)
    {
      v34 = *(_QWORD *)(v32 + 32);
      if (!v34)
        sub_20E86D37C();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v34 + 48))(v34, &v49);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v60 < 0)
    {
      operator delete(__p);
      if ((v58 & 0x80000000) == 0)
      {
LABEL_16:
        if (!v56)
        {
LABEL_22:
          if (v53 && v52 < 0)
            operator delete(v51);
          if (v50 < 0)
            operator delete((void *)v49.__r_.__value_.__l.__size_);
          if (v29)
            free(v29);
LABEL_29:
          if (os_signpost_enabled((os_log_t)*v17))
          {
            LODWORD(v49.__r_.__value_.__l.__data_) = 134217984;
            *(double *)((char *)v49.__r_.__value_.__r.__words + 4) = v28;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_31;
        }
LABEL_20:
        if (v55 < 0)
          operator delete(v54);
        goto LABEL_22;
      }
    }
    else if ((v58 & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(v57);
    if (!v56)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (v14.__d_.__rep_ - *v12 >= 1000000000)
  {
    v15 = (std::chrono::steady_clock::time_point *)qword_254A688A8;
    goto LABEL_9;
  }
LABEL_31:
  v35 = atomic_load((unsigned __int8 *)&qword_254A6D9C8);
  if ((v35 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D9C8))
  {
    sub_20FCFB524();
    __cxa_atexit((void (*)(void *))sub_20FCFB238, &qword_254A6D9A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D9C8);
  }
  _V1.D[1] = *((_QWORD *)&v45 + 1);
  _D3 = *((_QWORD *)&v45 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  sub_210237040("Map spread %f", &v49, sqrt(_D2 + v46 * v46));
  sub_20EA5C6C8((uint64_t)&v49, qword_254A6D9A8);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  _V1.D[1] = *((_QWORD *)&v45 + 1);
  _D3 = *((_QWORD *)&v45 + 1);
  __asm { FMLA            D2, D3, V1.D[1] }
  v9 = sqrt(_D2 + v46 * v46) > *(double *)(a1 + 2336);
  v16 = 1;
  return v9 | (v16 << 8);
}

void sub_20F338F44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D9C8);
  _Unwind_Resume(a1);
}

void sub_20F338F5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A688A0);
  _Unwind_Resume(a1);
}

void sub_20F338F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;

  if (a56 < 0)
  {
    operator delete(__p);
    if ((a50 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a44)
        goto LABEL_9;
LABEL_7:
      if (a43 < 0)
        operator delete(a38);
LABEL_9:
      if (a37 && a36 < 0)
        operator delete(a31);
      if (a30 < 0)
        operator delete(a22);
      if (!v56)
        _Unwind_Resume(exception_object);
      free(v56);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a45);
  if (!a44)
    goto LABEL_9;
  goto LABEL_7;
}

void sub_20F339048(uint64_t *a1, uint64_t a2, int8x8_t *a3, uint64_t a4, uint64_t **a5, char a6, uint64_t a7)
{
  char v11;
  char v12;
  double v13;
  double v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  void (***v34)(_QWORD);
  void (***v35)(_QWORD);
  void (***v36)(_QWORD);
  void (***v37)(_QWORD);
  void (**v38)(_QWORD);
  void **v39;
  uint64_t *v40;
  uint64_t *v41;
  int64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  __int128 v45;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v54;
  void **v55;
  void **v56;
  void *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  void **v73;
  uint64_t v74;
  char *v75;
  char *v76;
  int64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  __int128 *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void **v90;
  void **v91;
  char *v92;
  char *v93;
  unint64_t v94;
  unsigned int v95;
  void *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  void *v106;
  unsigned __int8 v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  size_t v115;
  unsigned __int8 v116;
  _BYTE *v117;
  int64_t v118;
  int64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  _QWORD *v124;
  int64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _OWORD *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  void **v136;
  void **v137;
  unsigned __int8 v138;
  const char *v139;
  size_t v140;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  void **v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  size_t v148;
  std::__shared_weak_count_vtbl *v149;
  std::__shared_weak_count *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  void *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  uint64_t *v180;
  unint64_t v181;
  _QWORD *v182;
  void *v183;
  void *v184;
  int v185;
  const char *v186;
  int v187;
  const char *v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  void **v205;
  void **v206;
  unsigned int *v207;
  const double *v208;
  double v211;
  uint64_t v216;
  void **v217;
  uint64_t v218;
  int8x16_t v219;
  uint64_t v220;
  const void *v221;
  int64_t v222;
  uint64_t *v223;
  char *v224;
  char *v225;
  void *v226;
  char *v227;
  char *v228;
  void (**v229)(char *);
  uint64_t v230;
  uint64_t *v231;
  uint64_t *v232;
  char *v233;
  unsigned int v234;
  _QWORD *v235;
  uint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v242;
  uint8x8_t v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  _QWORD *v247;
  unint64_t v248;
  unint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  unint64_t v252;
  unint64_t v253;
  _QWORD *v254;
  float v255;
  _QWORD *v256;
  _QWORD *v257;
  _BOOL8 v258;
  unint64_t v259;
  unint64_t v260;
  size_t prime;
  void *v262;
  void *v263;
  uint64_t v264;
  _QWORD **v265;
  size_t v266;
  size_t v267;
  size_t v268;
  _QWORD *j;
  size_t v270;
  uint64_t v271;
  unint64_t v272;
  uint8x8_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  size_t v277;
  uint64_t v278;
  void *v279;
  unint64_t v280;
  uint64_t v281;
  _DWORD *v282;
  _QWORD *v283;
  char *v284;
  void *v285;
  _BYTE *v286;
  int64_t v287;
  int64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  _BYTE *v292;
  _QWORD *v293;
  int64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  _OWORD *v299;
  char *v300;
  uint64_t v301;
  __int128 v302;
  uint64_t v303;
  _OWORD *v304;
  __int128 v305;
  void *v306;
  _OWORD *v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  char *v311;
  __int128 v312;
  char *v313;
  char *v314;
  __int128 v315;
  const double *v316;
  double v319;
  float64x2_t v320;
  uint64_t v325;
  int64_t v326;
  uint64_t v327;
  uint64_t *v328;
  char *v329;
  char *v330;
  void *v331;
  char *v332;
  char *v333;
  void (**v334)(char *);
  _QWORD *v335;
  _QWORD *v336;
  void *v337;
  uint64_t *v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t *v344;
  _QWORD *v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  char *v350;
  unint64_t v351;
  unint64_t v352;
  char *v353;
  void *v354;
  __int128 v355;
  char *v356;
  _QWORD *v357;
  void *v358;
  void *i;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  uint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  _QWORD *v367;
  char *v368;
  int v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  __int128 *v373;
  __int128 *v374;
  void **v375;
  void **v376;
  unsigned int v377;
  void *v378;
  void **v379;
  unsigned int v380;
  unsigned int v381;
  void *v382;
  unsigned int v383;
  _QWORD *v384;
  __int128 v385;
  _BYTE *v386;
  uint64_t v387;
  _BYTE *v388;
  uint64_t v389;
  _BYTE *v390;
  int v391;
  uint64_t v392;
  int v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t v398;
  int v399;
  int v400;
  unint64_t v401;
  void **v402;
  char *v403;
  char *v404;
  unint64_t v405;
  unsigned int v406;
  void *v407;
  unint64_t v408;
  char *v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  char *v414;
  uint64_t v415;
  char *v416;
  void *v417;
  int v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v422;
  const char *v423;
  uint64_t v424;
  size_t v425;
  unsigned __int8 v426;
  char *v427;
  int64_t v428;
  int64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  _BYTE *v433;
  _QWORD *v434;
  int64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  char *v439;
  _OWORD *v440;
  char *v441;
  uint64_t v442;
  __int128 v443;
  uint64_t v444;
  void **v445;
  void **v446;
  unsigned __int8 v447;
  const char *v448;
  size_t v449;
  _BYTE *v450;
  uint64_t v451;
  uint64_t v452;
  void **v453;
  NSObject *v454;
  uint64_t v455;
  uint64_t v456;
  size_t v457;
  std::__shared_weak_count_vtbl *v458;
  std::__shared_weak_count *v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  const char *v467;
  uint64_t v468;
  std::__shared_weak_count *v469;
  unint64_t *v470;
  unint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  uint64_t v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  int v483;
  unint64_t *v484;
  unint64_t v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  void *v489;
  std::__shared_weak_count *v490;
  unint64_t *v491;
  unint64_t v492;
  uint64_t **v493;
  uint64_t v494;
  uint64_t *v495;
  uint64_t v496;
  uint64_t *v497;
  unint64_t v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  char *v503;
  char *v504;
  char *v505;
  char *v506;
  unint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t *v510;
  char *v511;
  uint64_t *v512;
  uint64_t v513;
  __int128 v514;
  uint64_t v515;
  _QWORD *v516;
  char *v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  int v521;
  uint64_t v522;
  int v523;
  int v524;
  unint64_t v525;
  uint64_t *v526;
  uint64_t *v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  double v532;
  _QWORD *v533;
  char v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  uint64_t v539;
  __int128 v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  char *v544;
  char *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  char *v549;
  uint64_t v550;
  uint64_t v551;
  unint64_t *v552;
  uint64_t v553;
  uint64_t *v554;
  uint64_t *v555;
  uint64_t *v556;
  unint64_t v557;
  uint64_t v558;
  int *v559;
  unsigned int v560;
  unsigned int v561;
  uint64_t *v562;
  unint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  unint64_t v573;
  char *v574;
  char *v575;
  uint64_t v576;
  char *v577;
  char *v578;
  unint64_t v579;
  uint64_t v580;
  char *v581;
  _QWORD *v582;
  unint64_t v583;
  unint64_t v584;
  __n128 *v585;
  uint64_t *v586;
  _OWORD *v587;
  char *v588;
  uint64_t v589;
  int v590;
  unint64_t v591;
  unint64_t v592;
  BOOL v593;
  BOOL v594;
  BOOL v595;
  void *v596;
  uint64_t v597;
  unint64_t v598;
  char v599;
  char *v600;
  _QWORD *v601;
  uint64_t v602;
  char *v603;
  uint64_t v604;
  uint64_t v605;
  BOOL v606;
  BOOL v607;
  BOOL v608;
  _OWORD *v609;
  uint64_t v610;
  void *v611;
  uint64_t v612;
  unint64_t v613;
  unint64_t v614;
  unint64_t *v615;
  char v616;
  unint64_t v617;
  unint64_t v618;
  BOOL v619;
  BOOL v620;
  BOOL v621;
  char *v622;
  _QWORD *v623;
  uint64_t v624;
  _OWORD *v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t *v628;
  int v629;
  unint64_t v630;
  BOOL v631;
  char *v632;
  unint64_t v633;
  uint64_t v635;
  char *v637;
  unint64_t v638;
  unint64_t v639;
  char *v640;
  char *v641;
  unint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  unint64_t v646;
  unint64_t v647;
  char *v648;
  char *v649;
  char *v650;
  char *v651;
  uint64_t v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  char *v656;
  char *v657;
  __int128 v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  char *v663;
  _OWORD *k;
  _OWORD *v665;
  char *v666;
  char *v667;
  uint64_t v668;
  unint64_t v669;
  uint64_t v670;
  unint64_t v671;
  char *v672;
  char *v673;
  uint64_t v674;
  int v675;
  char *v676;
  float *v677;
  float *v678;
  uint64_t v679;
  __int128 v680;
  uint64_t v681;
  __int128 v682;
  __int128 v683;
  float v684;
  uint64_t v685;
  uint64_t v686;
  int v687;
  std::runtime_error *exception;
  void **v689;
  void **v690;
  char **v691;
  int8x8_t *v692;
  _QWORD *v693;
  uint64_t v694;
  const double *v695;
  uint64_t v696;
  const char *v700;
  uint64_t v701;
  int v702;
  float64x2_t v703;
  const char *v704;
  int v705;
  uint64_t v706;
  float64x2_t v707;
  int v708;
  uint64_t v709;
  float64x2_t v710;
  _QWORD *v711;
  _QWORD *v712;
  uint64_t v713;
  void *v714[2];
  char *v715;
  void *v716[6];
  void *v717[2];
  __int128 v718;
  int v719;
  void *v720[2];
  char *v721;
  void *v722[2];
  char *v723;
  void *__p[2];
  void *v725[2];
  const char *v726;
  int v727;
  const char *v728;
  __int128 v729;
  uint64_t v730;
  _BYTE v731[40];
  void **v732;
  size_t v733;
  unint64_t v734;
  std::__shared_weak_count *v735;
  __int128 v736;
  uint64_t v737;
  char v738;
  uint64_t v739;
  float64x2x3_t v740;

  v694 = sub_20FCBA6DC(a3, *(_DWORD *)a4, *(_DWORD *)(a4 + 4));
  if (!v11
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManager.cpp", 3329, (uint64_t)"current_frame", 13, (uint64_t)&unk_2102A1D75, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v692 = a3;
  if ((a6 & 1) != 0 || !*(_BYTE *)(a2 + 725))
  {
    v12 = 1;
    v14 = *(double *)(a4 + 8);
    v13 = *(double *)(a4 + 16);
    v15 = *(void **)(a2 + 3264);
    v16 = *(std::__shared_weak_count **)(a2 + 3272);
    *(_QWORD *)v731 = v15;
    *(_QWORD *)&v731[8] = v16;
    if (!v16)
      goto LABEL_10;
  }
  else
  {
    v12 = 0;
    v14 = *(double *)(a4 + 8);
    v13 = *(double *)(a4 + 16);
    v15 = *(void **)(a2 + 3264);
    v16 = *(std::__shared_weak_count **)(a2 + 3272);
    *(_QWORD *)v731 = v15;
    *(_QWORD *)&v731[8] = v16;
    if (!v16)
      goto LABEL_10;
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
LABEL_10:
  v19 = *(_QWORD *)(a2 + 3232);
  if (*(_QWORD *)(a2 + 3224) != v19)
  {
    v20 = *(_QWORD *)(v19 - 8);
    *(_QWORD *)(v19 - 8) = 0;
    sub_20F345380(a2 + 3224, (_QWORD *)(*(_QWORD *)(a2 + 3232) - 8));
    v717[0] = 0;
    __p[0] = v15;
    __p[1] = v16;
    if (!v16)
      goto LABEL_17;
    goto LABEL_15;
  }
  v21 = *(_QWORD *)(a2 + 3248);
  if (v21 >= *(_QWORD *)(a2 + 3256))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Allocated object exceeds max pool size.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)(a2 + 3248) = v21 + 1;
  v20 = operator new();
  *(_QWORD *)(v20 + 208) = 0;
  *(_OWORD *)(v20 + 176) = 0u;
  *(_OWORD *)(v20 + 192) = 0u;
  *(_OWORD *)(v20 + 144) = 0u;
  *(_OWORD *)(v20 + 160) = 0u;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_QWORD *)(v20 + 24) = 0x3FF0000000000000;
  *(_QWORD *)(v20 + 56) = 0x3FF0000000000000;
  *(_QWORD *)(v20 + 88) = 0x3FF0000000000000;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_DWORD *)(v20 + 208) = -1;
  v717[0] = 0;
  __p[0] = v15;
  __p[1] = v16;
  if (v16)
  {
LABEL_15:
    v22 = (unint64_t *)&v16->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
LABEL_17:
  v24 = (unint64_t)a1;
  *a1 = v20;
  v25 = (_QWORD *)operator new();
  v695 = (const double *)(a4 + 24);
  __p[0] = 0;
  __p[1] = 0;
  *v25 = &off_24C9FE2D0;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = v20;
  v25[4] = v15;
  v25[5] = v16;
  a1[1] = (uint64_t)v25;
  if (v16)
  {
    v26 = (unint64_t *)&v16->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    v24 = (unint64_t)a1;
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v24 = (unint64_t)a1;
    }
  }
  v28 = *(_QWORD **)v24;
  v29 = *(_QWORD **)v24;
  v29[3] = 0x3FF0000000000000;
  v28[16] = v28[15];
  v28[19] = v28[18];
  v28[4] = 0;
  v28[5] = 0;
  v28[6] = 0;
  v28[7] = 0x3FF0000000000000;
  v28[8] = 0;
  v28[9] = 0;
  v28[10] = 0;
  v28[11] = 0x3FF0000000000000;
  v28[13] = 0;
  v28[14] = 0;
  v28[12] = 0;
  v691 = (char **)(v29 + 3);
  *(_OWORD *)(v29 + 3) = *(_OWORD *)v695;
  v31 = *(_OWORD *)(a4 + 56);
  v30 = *(_OWORD *)(a4 + 72);
  v32 = *(_QWORD *)(a4 + 88);
  *(_OWORD *)(v28 + 5) = *(_OWORD *)(a4 + 40);
  v28[11] = v32;
  *(_OWORD *)(v28 + 9) = v30;
  *(_OWORD *)(v28 + 7) = v31;
  v33 = *(_OWORD *)(a4 + 96);
  v28[14] = *(_QWORD *)(a4 + 112);
  v693 = v28;
  *((_OWORD *)v28 + 6) = v33;
  v34 = *(void (****)(_QWORD))(a2 + 3296);
  v35 = *(void (****)(_QWORD))(a2 + 3288);
  if (v34 != v35)
  {
    v36 = v34 - 5;
    v37 = v34 - 5;
    do
    {
      v38 = *v37;
      v37 -= 5;
      (*v38)(v36);
      _ZF = v36 == v35;
      v36 = v37;
    }
    while (!_ZF);
  }
  *(_QWORD *)(a2 + 3296) = v35;
  v713 = a2;
  if (*a5 == a5[1])
    goto LABEL_836;
  v39 = (void **)(a2 + 3288);
  v696 = a4;
  if ((v12 & 1) == 0)
  {
    *(_OWORD *)v717 = 0u;
    v718 = 0u;
    v719 = 733223580;
    kdebug_trace();
    v716[0] = &unk_2102DAFF0;
    v45 = 0uLL;
    memset(&v716[1], 0, 32);
    v714[0] = 0;
    v714[1] = 0;
    v715 = 0;
    v690 = (void **)(a2 + 3288);
    if (*(_BYTE *)(a2 + 2499))
    {
      v46 = *(unsigned __int8 *)(a2 + 726);
      v48 = *a5;
      v47 = a5[1];
      if (v47 != *a5)
      {
        v49 = 0xAAAAAAAAAAAAAAABLL * (v47 - *a5);
        if (v49 >> 61)
          sub_20E867F44();
        v714[0] = operator new(0x5555555555555558 * (v47 - *a5));
        v714[1] = v714[0];
        v715 = (char *)v714[0] + 8 * v49;
      }
      v722[1] = 0;
      v723 = 0;
      v722[0] = &v722[1];
      if (v47 != v48)
      {
        do
        {
          v50 = *(_QWORD *)(a2 + 2824);
          v51 = *(_QWORD *)(a2 + 2832);
          if (v50 != v51)
          {
            while (1)
            {
              v52 = *(_QWORD *)(v50 + 16);
              if (v52)
              {
                if (*(_QWORD *)(v52 + 160) == *v48)
                  break;
              }
              v50 += 4472;
              if (v50 == v51)
                goto LABEL_40;
            }
          }
          _ZF = v50 == v51 || v50 == 0;
          if (!_ZF)
          {
            v54 = (void **)v722[1];
            v55 = &v722[1];
LABEL_52:
            v56 = v55;
            if (v54)
            {
              while (1)
              {
                v55 = v54;
                v57 = v54[4];
                if (v50 < (unint64_t)v57)
                {
                  v54 = (void **)*v55;
                  goto LABEL_52;
                }
                if ((unint64_t)v57 >= v50)
                  break;
                v54 = (void **)v55[1];
                if (!v54)
                {
                  v56 = v55 + 1;
                  goto LABEL_57;
                }
              }
              v58 = (uint64_t *)v55;
            }
            else
            {
LABEL_57:
              v58 = (uint64_t *)operator new(0x40uLL);
              v58[7] = 0;
              v58[6] = 0;
              v58[4] = v50;
              v58[5] = (uint64_t)(v58 + 6);
              *v58 = 0;
              v58[1] = 0;
              v58[2] = (uint64_t)v55;
              *v56 = v58;
              v59 = v58;
              if (*(_QWORD *)v722[0])
              {
                v722[0] = *(void **)v722[0];
                v59 = (uint64_t *)*v56;
              }
              sub_20E868578((uint64_t *)v722[1], v59);
              ++v723;
            }
            v60 = *(_QWORD *)(*(_QWORD *)(v50 + 16) + 424);
            *(_OWORD *)v731 = *(_OWORD *)v48;
            *(_DWORD *)&v731[16] = *((_DWORD *)v48 + 4);
            v61 = (uint64_t *)operator new(0x18uLL);
            *(_OWORD *)v61 = *(_OWORD *)v731;
            *((_DWORD *)v61 + 4) = *(_DWORD *)&v731[16];
            v62 = *(_QWORD *)(v60 + 8);
            __p[0] = v716;
            __p[1] = v58 + 5;
            v63 = (_QWORD *)(v62 + 24);
            v64 = sub_20E9DF85C((_QWORD *)(v62 + 24), v61);
            if (v64 && *((_DWORD *)v64 + 16))
            {
              if (v46)
              {
                v65 = sub_20E9DF85C(v63, v61);
                if (v65)
                {
                  v66 = (_QWORD *)v65[7];
                  while (v66)
                  {
                    v67 = v66 + 3;
                    v68 = v66[3];
                    v66 = (_QWORD *)*v66;
                    if (*(_BYTE *)(v68 + 192))
                      sub_20F346788((uint64_t)__p, v67);
                  }
                }
              }
              else
              {
                v69 = sub_20E9DF85C(v63, v61);
                if (v69)
                {
                  v70 = (_QWORD *)v69[7];
                  while (v70)
                  {
                    v71 = v70 + 3;
                    v72 = v70[3];
                    v70 = (_QWORD *)*v70;
                    if (*(_BYTE *)(v72 + 192) && !*(_BYTE *)(v72 + 189))
                      sub_20F346788((uint64_t)__p, v71);
                  }
                }
              }
            }
            operator delete(v61);
          }
LABEL_40:
          v48 += 3;
        }
        while (v48 != v47);
        v73 = (void **)v722[0];
        if (v722[0] != &v722[1])
        {
          do
          {
            v74 = *(_QWORD *)(*((_QWORD *)v73[4] + 2) + 424);
            v75 = (char *)v714[0];
            v76 = (char *)v714[1];
            v77 = ((char *)v714[1] - (char *)v714[0]) >> 3;
            v78 = (unint64_t)v73[7] + v77;
            if (v78 <= (v715 - (char *)v714[0]) >> 3)
              goto LABEL_92;
            if (v78 >> 61)
              sub_20E867F44();
            v79 = (char *)operator new(8 * v78);
            v80 = &v79[8 * v77];
            if (v714[1] != v714[0])
            {
              v81 = (char *)v714[1] - (char *)v714[0] - 8;
              if (v81 < 0x58)
              {
                v80 = &v79[8 * v77];
                do
                {
LABEL_89:
                  v89 = *((_QWORD *)v76 - 1);
                  v76 -= 8;
                  *((_QWORD *)v80 - 1) = v89;
                  v80 -= 8;
                }
                while (v76 != v75);
                goto LABEL_90;
              }
              v80 = &v79[8 * v77];
              if ((void *)((char *)v714[0] - (char *)v79) < (void *)0x20)
                goto LABEL_89;
              v82 = (v81 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v84 = (char *)v714[1] - v83;
              v80 = &v79[8 * v77 - v83];
              v85 = &v79[8 * v77 - 16];
              v86 = (__int128 *)((char *)v714[1] - 16);
              v87 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v86;
                *((_OWORD *)v85 - 1) = *(v86 - 1);
                *(_OWORD *)v85 = v88;
                v85 -= 32;
                v86 -= 2;
                v87 -= 4;
              }
              while (v87);
              v76 = v84;
              if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_89;
            }
LABEL_90:
            v714[0] = v80;
            v714[1] = &v79[8 * v77];
            v715 = &v79[8 * v78];
            if (v75)
              operator delete(v75);
LABEL_92:
            v90 = (void **)v73[5];
            v91 = v73 + 6;
            if (v90 != v73 + 6)
            {
              v706 = v74;
              do
              {
                v93 = *(char **)(v74 + 40);
                v92 = *(char **)(v74 + 48);
                if (v92 != v93)
                {
                  v94 = (v92 - v93) >> 4;
                  v95 = *((_DWORD *)v90 + 12);
                  v96 = v90[4];
                  while (1)
                  {
                    v97 = v94 >> 1;
                    v98 = &v93[16 * (v94 >> 1)];
                    v99 = *(_QWORD *)v98;
                    v100 = *(_DWORD *)(*(_QWORD *)v98 + 16);
                    _CF = v100 >= v95;
                    if (v100 != v95)
                      goto LABEL_103;
                    if (*(_QWORD *)v99 >= (unint64_t)v96)
                      break;
LABEL_97:
                    v93 = v98 + 16;
                    v97 = v94 + ~v97;
LABEL_98:
                    v94 = v97;
                    if (!v97)
                      goto LABEL_106;
                  }
                  if (*(void **)v99 != v96)
                    goto LABEL_98;
                  _CF = *(_DWORD *)(v99 + 8) >= *((_DWORD *)v90 + 10);
LABEL_103:
                  if (_CF)
                    goto LABEL_98;
                  goto LABEL_97;
                }
LABEL_106:
                if (v93 != v92)
                {
                  v102 = *(_QWORD *)v93;
                  v103 = *(char **)(v74 + 48);
                  if (*(_DWORD *)(*(_QWORD *)v93 + 16) == *((_DWORD *)v90 + 12))
                  {
                    v103 = *(char **)(v74 + 48);
                    if (*(void **)v102 == v90[4])
                    {
                      if (*(_DWORD *)(v102 + 8) == *((_DWORD *)v90 + 10))
                        v103 = v93;
                      else
                        v103 = *(char **)(v74 + 48);
                    }
                  }
                  if (v92 != v103)
                  {
                    v104 = *(_QWORD *)v103;
                    if (*(_QWORD *)v103)
                    {
                      v105 = (char *)v714[1];
                      if (v714[1] < v715)
                      {
                        *(_QWORD *)v714[1] = v104;
                        v106 = v105 + 8;
LABEL_149:
                        v714[1] = v106;
                        goto LABEL_150;
                      }
                      v117 = v714[0];
                      v118 = (char *)v714[1] - (char *)v714[0];
                      v119 = ((char *)v714[1] - (char *)v714[0]) >> 3;
                      v120 = v119 + 1;
                      if ((unint64_t)(v119 + 1) >> 61)
                        sub_20E867F44();
                      v121 = v715 - (char *)v714[0];
                      if ((v715 - (char *)v714[0]) >> 2 > v120)
                        v120 = v121 >> 2;
                      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
                        v122 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v122 = v120;
                      if (v122)
                      {
                        if (v122 >> 61)
                          sub_20E877A38();
                        v123 = operator new(8 * v122);
                        v124 = &v123[8 * v119];
                        *v124 = v104;
                        v106 = v124 + 1;
                        v125 = v105 - v117;
                        if (v105 != v117)
                        {
LABEL_136:
                          v126 = v125 - 8;
                          if (v126 < 0x58)
                          {
                            v74 = v706;
                            goto LABEL_145;
                          }
                          v127 = v105 - &v123[v118];
                          v74 = v706;
                          if (v127 < 0x20)
                            goto LABEL_1065;
                          v128 = (v126 >> 3) + 1;
                          v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
                          v130 = &v105[-v129];
                          v124 = (_QWORD *)((char *)v124 - v129);
                          v131 = &v123[8 * v119 - 16];
                          v132 = v105 - 16;
                          v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v134 = *(_OWORD *)v132;
                            *(v131 - 1) = *((_OWORD *)v132 - 1);
                            *v131 = v134;
                            v131 -= 2;
                            v132 -= 32;
                            v133 -= 4;
                          }
                          while (v133);
                          v105 = v130;
                          if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_1065:
                            do
                            {
LABEL_145:
                              v135 = *((_QWORD *)v105 - 1);
                              v105 -= 8;
                              *--v124 = v135;
                            }
                            while (v105 != v117);
                          }
                          a2 = v713;
                          v105 = (char *)v714[0];
                          v714[0] = v124;
                          v714[1] = v106;
                          v715 = &v123[8 * v122];
                          if (v105)
LABEL_147:
                            operator delete(v105);
LABEL_148:
                          v91 = v73 + 6;
                          goto LABEL_149;
                        }
                      }
                      else
                      {
                        v123 = 0;
                        v124 = (_QWORD *)(8 * v119);
                        *(_QWORD *)(8 * v119) = v104;
                        v106 = (void *)(8 * v119 + 8);
                        v125 = v105 - v117;
                        if (v105 != v117)
                          goto LABEL_136;
                      }
                      v74 = v706;
                      v714[0] = v124;
                      v714[1] = v106;
                      v715 = &v123[8 * v122];
                      a2 = v713;
                      if (v105)
                        goto LABEL_147;
                      goto LABEL_148;
                    }
                  }
                }
                v107 = atomic_load((unsigned __int8 *)&qword_254A68888);
                if ((v107 & 1) == 0 && __cxa_guard_acquire(&qword_254A68888))
                {
                  sub_21021D3D8(__p);
                  sub_20E8610C0(v731, "cv3d.vio.area_mapping");
                  sub_20E8C4068((uint64_t **)__p, (uint64_t)v731, &qword_254A68880);
                  if ((v731[23] & 0x80000000) != 0)
                    operator delete(*(void **)v731);
                  __cxa_guard_release(&qword_254A68888);
                  a2 = v713;
                  v74 = v706;
                  v91 = v73 + 6;
                }
                v739 = qword_254A68880;
                if (**(int **)(qword_254A68880 + 56) > 3)
                  goto LABEL_150;
                v108 = *(unsigned __int8 *)(qword_254A68880 + 72);
                v109 = sub_20E8C31DC(qword_254A68880, "OSLogSurrogateAppender", 1, 0);
                v110 = v109;
                if (!v108 && v109 == 0)
                  goto LABEL_150;
                v702 = v108;
                __p[0] = &v739;
                __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
                v725[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
                LODWORD(v725[1]) = 3;
                v726 = "unknown file";
                v727 = 1542;
                v728 = "unknown function";
                v729 = 0uLL;
                v112 = *(_QWORD *)__p[0];
                v113 = (const char *)(*(_QWORD *)__p[0] + 16);
                v700 = v113;
                if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
                {
                  v113 = *(const char **)(v112 + 16);
                  v115 = *(_QWORD *)(v112 + 24);
                  v114 = *(_QWORD *)__p[0];
                  v138 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v138 & 1) != 0)
                    goto LABEL_157;
                }
                else
                {
                  v114 = *(_QWORD *)__p[0];
                  v115 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
                  v116 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v116 & 1) != 0)
                    goto LABEL_157;
                }
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v736);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v736);
                  if (v738 && SHIBYTE(v737) < 0)
                    operator delete((void *)v736);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                  v91 = v73 + 6;
                }
LABEL_157:
                if (byte_254A4A4F8[23] >= 0)
                  v139 = byte_254A4A4F8;
                else
                  v139 = *(const char **)byte_254A4A4F8;
                if (byte_254A4A4F8[23] >= 0)
                  v140 = byte_254A4A4F8[23];
                else
                  v140 = *(_QWORD *)&byte_254A4A4F8[8];
                *(_QWORD *)v731 = os_log_create(v139, v113);
                if (v140 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v140 >= 0x17)
                {
                  v142 = (v140 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v140 | 7) != 0x17)
                    v142 = v140 | 7;
                  v143 = v142 + 1;
                  v141 = operator new(v142 + 1);
                  *(_QWORD *)&v731[16] = v140;
                  *(_QWORD *)&v731[24] = v143 | 0x8000000000000000;
                  *(_QWORD *)&v731[8] = v141;
                  v91 = v73 + 6;
LABEL_170:
                  memmove(v141, v139, v140);
                  goto LABEL_171;
                }
                v731[31] = v140;
                v141 = &v731[8];
                if (v140)
                  goto LABEL_170;
LABEL_171:
                v141[v140] = 0;
                v731[32] = 1;
                if (v115 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v74 = v706;
                if (v115 >= 0x17)
                {
                  v146 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v115 | 7) != 0x17)
                    v146 = v115 | 7;
                  v147 = v146 + 1;
                  v144 = (void **)operator new(v146 + 1);
                  v733 = v115;
                  v734 = v147 | 0x8000000000000000;
                  v732 = v144;
                  v91 = v73 + 6;
                }
                else
                {
                  HIBYTE(v734) = v115;
                  v144 = (void **)&v732;
                  if (!v115)
                  {
                    LOBYTE(v732) = 0;
                    LOBYTE(v735) = 1;
                    v145 = *(NSObject **)v731;
                    if ((SHIBYTE(v734) & 0x80000000) == 0)
                      goto LABEL_175;
                    goto LABEL_181;
                  }
                }
                memmove(v144, v113, v115);
                *((_BYTE *)v144 + v115) = 0;
                LOBYTE(v735) = 1;
                v145 = *(NSObject **)v731;
                if ((SHIBYTE(v734) & 0x80000000) == 0)
                {
LABEL_175:
                  a2 = v713;
                  if (!v731[32])
                    goto LABEL_184;
                  goto LABEL_182;
                }
LABEL_181:
                operator delete(v732);
                a2 = v713;
                if (!v731[32])
                  goto LABEL_184;
LABEL_182:
                if ((v731[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v731[8]);
LABEL_184:
                if (*(_QWORD *)v731)
                  os_release(*(void **)v731);
                if (v110 && *(_QWORD *)(v110 + 24))
                {
                  v148 = _os_log_pack_size();
                  v149 = (std::__shared_weak_count_vtbl *)operator new(v148, (std::align_val_t)8uLL);
                  v150 = (std::__shared_weak_count *)operator new();
                  v151 = v150;
                  v150->__shared_owners_ = 0;
                  v152 = (unint64_t *)&v150->__shared_owners_;
                  v150->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v150->__shared_weak_owners_ = 0;
                  v150[1].__vftable = v149;
                  *(_QWORD *)v731 = v149;
                  *(_QWORD *)&v731[8] = v149;
                  *(_QWORD *)&v731[16] = v150;
                  do
                    v153 = __ldxr(v152);
                  while (__stxr(v153 + 1, v152));
                  *(_QWORD *)&v731[24] = 0;
                  *(_QWORD *)&v731[32] = 0;
                  v732 = 0;
                  a2 = v713;
                  do
                    v154 = __ldaxr(v152);
                  while (__stlxr(v154 - 1, v152));
                  if (!v154)
                  {
                    ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                    std::__shared_weak_count::__release_weak(v151);
                  }
                  v155 = *(_QWORD *)v731;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v156 = operator new();
                  v157 = *(unsigned __int8 *)(v114 + 39);
                  v158 = v700;
                  if ((v157 & 0x80u) != 0)
                  {
                    v158 = *(const char **)(v114 + 16);
                    v157 = *(_QWORD *)(v114 + 24);
                  }
                  *(_QWORD *)v156 = v155;
                  *(_OWORD *)(v156 + 8) = *(_OWORD *)&v731[8];
                  *(_QWORD *)&v731[8] = 0;
                  *(_QWORD *)&v731[16] = 0;
                  *(_OWORD *)(v156 + 24) = *(_OWORD *)&v731[24];
                  *(_QWORD *)&v731[24] = 0;
                  *(_QWORD *)&v731[32] = 0;
                  *(_QWORD *)(v156 + 40) = v158;
                  *(_QWORD *)(v156 + 48) = v157;
                  *(_BYTE *)(v156 + 56) = 1;
                  v720[0] = 0;
                  *(_QWORD *)&v736 = v156;
                  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v110 + 24) + 40))(*(_QWORD *)(v110 + 24), &v736);
                  v159 = v736;
                  *(_QWORD *)&v736 = 0;
                  if (v159)
                  {
                    v160 = *(std::__shared_weak_count **)(v159 + 32);
                    if (v160)
                    {
                      v161 = (unint64_t *)&v160->__shared_owners_;
                      do
                        v162 = __ldaxr(v161);
                      while (__stlxr(v162 - 1, v161));
                      if (!v162)
                      {
                        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                        std::__shared_weak_count::__release_weak(v160);
                      }
                    }
                    v163 = *(std::__shared_weak_count **)(v159 + 16);
                    if (v163)
                    {
                      v164 = (unint64_t *)&v163->__shared_owners_;
                      do
                        v165 = __ldaxr(v164);
                      while (__stlxr(v165 - 1, v164));
                      if (!v165)
                      {
                        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                        std::__shared_weak_count::__release_weak(v163);
                      }
                    }
                    MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
                    v166 = v720[0];
                    v720[0] = 0;
                    if (v166)
                    {
                      v167 = (std::__shared_weak_count *)*((_QWORD *)v166 + 4);
                      if (v167)
                      {
                        v168 = (unint64_t *)&v167->__shared_owners_;
                        do
                          v169 = __ldaxr(v168);
                        while (__stlxr(v169 - 1, v168));
                        if (!v169)
                        {
                          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                          std::__shared_weak_count::__release_weak(v167);
                        }
                      }
                      v170 = (std::__shared_weak_count *)*((_QWORD *)v166 + 2);
                      if (v170)
                      {
                        v171 = (unint64_t *)&v170->__shared_owners_;
                        do
                          v172 = __ldaxr(v171);
                        while (__stlxr(v172 - 1, v171));
                        if (!v172)
                        {
                          ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                          std::__shared_weak_count::__release_weak(v170);
                        }
                      }
                      MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
                    }
                  }
                  v173 = *(std::__shared_weak_count **)&v731[32];
                  if (!*(_QWORD *)&v731[32])
                    goto LABEL_223;
                  v174 = (unint64_t *)(*(_QWORD *)&v731[32] + 8);
                  do
                    v175 = __ldaxr(v174);
                  while (__stlxr(v175 - 1, v174));
                  if (!v175)
                  {
                    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                    std::__shared_weak_count::__release_weak(v173);
                    v176 = *(std::__shared_weak_count **)&v731[16];
                    if (!*(_QWORD *)&v731[16])
                      goto LABEL_230;
                  }
                  else
                  {
LABEL_223:
                    v176 = *(std::__shared_weak_count **)&v731[16];
                    if (!*(_QWORD *)&v731[16])
                      goto LABEL_230;
                  }
                  v177 = (unint64_t *)&v176->__shared_owners_;
                  do
                    v178 = __ldaxr(v177);
                  while (__stlxr(v178 - 1, v177));
                  if (!v178)
                  {
                    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                    std::__shared_weak_count::__release_weak(v176);
                  }
                }
                else
                {
                  os_log_type_enabled(v145, OS_LOG_TYPE_INFO);
                  v91 = v73 + 6;
                  *(_WORD *)v731 = 0;
                  v179 = (void *)_os_log_send_and_compose_impl();
                  if (v179)
                    free(v179);
                }
LABEL_230:
                if (v702)
                {
                  sub_20E8C003C((uint64_t)__p, "Cannot find key frame");
                  sub_20E863570((uint64_t)__p);
                }
                v180 = (uint64_t *)__p[0];
                if (!__p[0])
                  goto LABEL_259;
                v181 = v729;
                if (!(_QWORD)v729)
                  goto LABEL_259;
                v182 = (_QWORD *)(*(_QWORD *)__p[0] + 16);
                if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
                  v182 = (_QWORD *)*v182;
                v184 = __p[1];
                v183 = v725[0];
                v185 = (int)v725[1];
                v186 = v726;
                v187 = v727;
                v188 = v728;
                v189 = (std::__shared_weak_count *)*((_QWORD *)&v729 + 1);
                v736 = v729;
                if (*((_QWORD *)&v729 + 1))
                {
                  v190 = (unint64_t *)(*((_QWORD *)&v729 + 1) + 8);
                  do
                    v191 = __ldxr(v190);
                  while (__stxr(v191 + 1, v190));
                  *(_QWORD *)&v731[8] = v184;
                  *(_QWORD *)&v731[16] = v183;
                  *(_DWORD *)&v731[24] = v185;
                  *(_QWORD *)&v731[32] = v186;
                  LODWORD(v732) = v187;
                  v733 = (size_t)v188;
                  v734 = v181;
                  v735 = v189;
                  do
                    v192 = __ldxr(v190);
                  while (__stxr(v192 + 1, v190));
                  *(_QWORD *)v731 = v182;
                  v193 = *v180;
                  if (v185 < **(_DWORD **)(*v180 + 56))
                  {
LABEL_242:
                    if (!v189)
                      goto LABEL_249;
                    goto LABEL_246;
                  }
                }
                else
                {
                  *(void **)&v731[8] = __p[1];
                  *(void **)&v731[16] = v725[0];
                  *(_DWORD *)&v731[24] = v725[1];
                  *(_QWORD *)&v731[32] = v726;
                  LODWORD(v732) = v727;
                  v733 = (size_t)v728;
                  v734 = v729;
                  v735 = 0;
                  *(_QWORD *)v731 = v182;
                  v193 = *(_QWORD *)__p[0];
                  if (SLODWORD(v725[1]) < **(_DWORD **)(*(_QWORD *)__p[0] + 56))
                    goto LABEL_242;
                }
                sub_20E8C3FC4(v193, (uint64_t)v731);
                v189 = v735;
                if (!v735)
                  goto LABEL_249;
LABEL_246:
                v194 = (unint64_t *)&v189->__shared_owners_;
                do
                  v195 = __ldaxr(v194);
                while (__stlxr(v195 - 1, v194));
                if (!v195)
                {
                  ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                  std::__shared_weak_count::__release_weak(v189);
                  v196 = (std::__shared_weak_count *)*((_QWORD *)&v736 + 1);
                  if (!*((_QWORD *)&v736 + 1))
                    goto LABEL_255;
                  goto LABEL_250;
                }
LABEL_249:
                v196 = (std::__shared_weak_count *)*((_QWORD *)&v736 + 1);
                if (!*((_QWORD *)&v736 + 1))
                  goto LABEL_255;
LABEL_250:
                v197 = (unint64_t *)&v196->__shared_owners_;
                do
                  v198 = __ldaxr(v197);
                while (__stlxr(v198 - 1, v197));
                if (!v198)
                {
                  ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                  std::__shared_weak_count::__release_weak(v196);
                }
LABEL_255:
                v199 = (std::__shared_weak_count *)*((_QWORD *)&v729 + 1);
                v729 = 0uLL;
                if (!v199)
                  goto LABEL_150;
                v200 = (unint64_t *)&v199->__shared_owners_;
                do
                  v201 = __ldaxr(v200);
                while (__stlxr(v201 - 1, v200));
                if (v201)
                {
LABEL_259:
                  v202 = (std::__shared_weak_count *)*((_QWORD *)&v729 + 1);
                  if (*((_QWORD *)&v729 + 1))
                    goto LABEL_260;
                  goto LABEL_150;
                }
                ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                std::__shared_weak_count::__release_weak(v199);
                v202 = (std::__shared_weak_count *)*((_QWORD *)&v729 + 1);
                if (*((_QWORD *)&v729 + 1))
                {
LABEL_260:
                  v203 = (unint64_t *)&v202->__shared_owners_;
                  do
                    v204 = __ldaxr(v203);
                  while (__stlxr(v204 - 1, v203));
                  if (!v204)
                  {
                    ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                    std::__shared_weak_count::__release_weak(v202);
                  }
                }
LABEL_150:
                v136 = (void **)v90[1];
                if (v136)
                {
                  do
                  {
                    v137 = v136;
                    v136 = (void **)*v136;
                  }
                  while (v136);
                }
                else
                {
                  do
                  {
                    v137 = (void **)v90[2];
                    _ZF = *v137 == v90;
                    v90 = v137;
                  }
                  while (!_ZF);
                }
                v90 = v137;
              }
              while (v137 != v91);
            }
            v205 = (void **)v73[1];
            if (v205)
            {
              do
              {
                v206 = v205;
                v205 = (void **)*v205;
              }
              while (v205);
            }
            else
            {
              do
              {
                v206 = (void **)v73[2];
                _ZF = *v206 == v73;
                v73 = v206;
              }
              while (!_ZF);
            }
            v73 = v206;
          }
          while (v206 != &v722[1]);
        }
      }
      sub_20F346744((_QWORD *)v722[1]);
      v207 = (unsigned int *)v696;
LABEL_779:
      v493 = (uint64_t **)(a2 + 3312);
      v494 = (uint64_t)v716[2];
      v495 = *(uint64_t **)(a2 + 3320);
      v496 = a2;
      v497 = *(uint64_t **)(a2 + 3312);
      v498 = v495 - v497;
      v499 = (unint64_t)v716[2] - v498;
      if (v716[2] <= (void *)v498)
      {
        if (v716[2] < (void *)v498)
          *(_QWORD *)(v713 + 3320) = &v497[(uint64_t)v716[2]];
      }
      else
      {
        v500 = *(_QWORD *)(v496 + 3328);
        if (v499 <= (v500 - (uint64_t)v495) >> 3)
        {
          bzero(v495, 8 * v499);
          *(_QWORD *)(v496 + 3320) = &v495[v499];
        }
        else
        {
          if ((unint64_t)v716[2] >> 61)
            sub_20E867F44();
          v501 = v500 - (_QWORD)v497;
          if ((void *)(v501 >> 2) > v716[2])
            v494 = v501 >> 2;
          if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFF8)
            v502 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v502 = v494;
          if (v502 >> 61)
            sub_20E877A38();
          v503 = (char *)operator new(8 * v502);
          v504 = &v503[8 * v498];
          v505 = &v503[8 * v502];
          bzero(v504, 8 * v499);
          v506 = &v504[8 * v499];
          if (v495 == v497)
          {
            v207 = (unsigned int *)v696;
          }
          else
          {
            v507 = (char *)v495 - (char *)v497 - 8;
            v207 = (unsigned int *)v696;
            if (v507 < 0x58)
              goto LABEL_1066;
            if ((unint64_t)((char *)v497 - v503) < 0x20)
              goto LABEL_1066;
            v508 = (v507 >> 3) + 1;
            v509 = 8 * (v508 & 0x3FFFFFFFFFFFFFFCLL);
            v510 = &v495[v509 / 0xFFFFFFFFFFFFFFF8];
            v504 -= v509;
            v511 = &v503[8 * v498 - 16];
            v512 = v495 - 2;
            v513 = v508 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v514 = *(_OWORD *)v512;
              *((_OWORD *)v511 - 1) = *((_OWORD *)v512 - 1);
              *(_OWORD *)v511 = v514;
              v511 -= 32;
              v512 -= 4;
              v513 -= 4;
            }
            while (v513);
            v495 = v510;
            if (v508 != (v508 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1066:
              do
              {
                v515 = *--v495;
                *((_QWORD *)v504 - 1) = v515;
                v504 -= 8;
              }
              while (v495 != v497);
            }
            v495 = *v493;
          }
          *(_QWORD *)(v713 + 3312) = v504;
          *(_QWORD *)(v713 + 3320) = v506;
          *(_QWORD *)(v713 + 3328) = v505;
          if (v495)
            operator delete(v495);
        }
      }
      v516 = v716[0];
      v517 = (char *)v716[1];
      if (*(char *)v716[0] > -2)
      {
        v521 = *(unsigned __int8 *)v716[0];
        v518 = v713;
        v519 = a7;
      }
      else
      {
        v518 = v713;
        v519 = a7;
        do
        {
          v520 = (__clz(__rbit64(((*v516 >> 7) & ~*v516 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v516 = (_QWORD *)((char *)v516 + v520);
          v517 += 32 * v520;
        }
        while (*(char *)v516 < -1);
        v521 = *(unsigned __int8 *)v516;
      }
      if (v521 != 255)
      {
        v522 = 0;
        do
        {
          (*v493)[v522] = *((_QWORD *)v517 + 2);
          v524 = *((unsigned __int8 *)v516 + 1);
          v516 = (_QWORD *)((char *)v516 + 1);
          v523 = v524;
          v517 += 32;
          if ((char)v524 <= -2)
          {
            do
            {
              v525 = (__clz(__rbit64(((*v516 >> 7) & ~*v516 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
              v516 = (_QWORD *)((char *)v516 + v525);
              v517 += 32 * v525;
            }
            while (*(char *)v516 < -1);
            v523 = *(unsigned __int8 *)v516;
          }
          ++v522;
        }
        while (v523 != 255);
      }
      if (*(_BYTE *)(v518 + 2794))
      {
        v526 = *(uint64_t **)(v518 + 3312);
        v527 = *(uint64_t **)(v518 + 3320);
        v528 = 126 - 2 * __clz(v527 - v526);
        if (v527 == v526)
          v529 = 0;
        else
          v529 = v528;
        sub_20F3425CC(v526, v527, v529, 1);
        v530 = *(_QWORD *)(v518 + 2928);
        v531 = *(_QWORD *)(v694 + 24);
        v532 = *(double *)(v518 + 96);
        if (*(_BYTE *)(v518 + 2794))
          goto LABEL_821;
      }
      else
      {
        v530 = *(_QWORD *)(v518 + 2928);
        v531 = *(_QWORD *)(v694 + 24);
        v532 = *(double *)(v518 + 96);
      }
      v519 = -1;
LABEL_821:
      v533 = (_QWORD *)sub_20FCBA6DC(v692, *v207, v207[1]);
      if (!v534
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/ReprojectionMapTracker.cpp", 50, (uint64_t)"opt_query_frame", 15, (uint64_t)"Failed to find frame in camera set features", 43, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      sub_20F3B5D6C(v530, v493, (uint64_t ***)v714, a5, v533, (uint64_t)v695, v531, v519, v14, v532, v13, v691, v690);
      if (v714[0])
      {
        v714[1] = v714[0];
        operator delete(v714[0]);
      }
      a2 = v713;
      if (v716[3])
      {
        v535 = 0;
        do
        {
          if ((*((char *)v716[0] + v535) & 0x80000000) == 0)
          {
            v536 = (std::__shared_weak_count *)*((_QWORD *)v716[1] + 4 * v535 + 3);
            if (v536)
            {
              v537 = (unint64_t *)&v536->__shared_owners_;
              do
                v538 = __ldaxr(v537);
              while (__stlxr(v538 - 1, v537));
              if (!v538)
              {
                ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
                std::__shared_weak_count::__release_weak(v536);
              }
            }
          }
          ++v535;
        }
        while ((void *)v535 != v716[3]);
        operator delete(v716[0]);
      }
      goto LABEL_835;
    }
    v711 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 2816) + 16) + 424);
    v230 = v711[1];
    *(_QWORD *)v731 = &unk_2102DAFF0;
    memset(&v731[8], 0, 32);
    v231 = *a5;
    v232 = a5[1];
    v233 = (char *)((char *)v232 - (char *)*a5);
    if (!v233)
    {
      v354 = 0;
      *(_QWORD *)&v45 = &unk_2102DAFF0;
      v355 = 0uLL;
      goto LABEL_546;
    }
    if (v231 == v232)
    {
      v354 = 0;
      v355 = 0uLL;
    }
    else
    {
      v234 = 0;
      v235 = (_QWORD *)(v230 + 24);
      do
      {
        v236 = sub_20E9DF85C(v235, v231);
        if (v236 && v236[8] > (unint64_t)v234)
          v234 = v236[8];
        v231 += 3;
      }
      while (v231 != v232);
      if (v234)
      {
        __p[0] = operator new(16 * v234);
        __p[1] = __p[0];
        v725[0] = (char *)__p[0] + 16 * v234;
        v339 = *a5;
        v338 = a5[1];
        if (*a5 != v338)
        {
          if (v233 == (char *)24)
          {
            do
            {
              v340 = sub_20E9DF85C(v235, v339);
              if (v340)
              {
                v341 = v340[7];
                if (v341)
                {
                  do
                  {
                    v342 = *(_QWORD *)(v341 + 24);
                    v343 = *(_QWORD *)v341;
                    if (*(_BYTE *)(v342 + 192))
                      sub_20F346F80((uint64_t *)v731, v342, *(std::__shared_weak_count **)(v341 + 32));
                    v341 = v343;
                  }
                  while (v343);
                }
              }
              v339 += 3;
            }
            while (v339 != v338);
          }
          else
          {
            do
            {
              v344 = sub_20E9DF85C(v235, v339);
              if (v344)
              {
                v345 = (_QWORD *)v344[7];
                while (v345)
                {
                  v346 = v345;
                  v347 = v345[3];
                  v349 = *(_QWORD *)(v347 + 24);
                  v348 = *(_QWORD *)(v347 + 32);
                  *(_QWORD *)&v736 = v349;
                  *((_QWORD *)&v736 + 1) = v348;
                  v345 = (_QWORD *)*v345;
                  if (*(_BYTE *)(v347 + 192))
                  {
                    v350 = (char *)__p[0];
                    if (__p[1] != __p[0])
                    {
                      v351 = ((char *)__p[1] - (char *)__p[0]) >> 4;
                      do
                      {
                        v352 = v351 >> 1;
                        v353 = &v350[16 * (v351 >> 1)];
                        if (*(_QWORD *)v353 < v349
                          || *(_QWORD *)v353 == v349 && *(_DWORD *)&v350[16 * v352 + 8] < v348)
                        {
                          v350 = v353 + 16;
                          v352 = v351 + ~v352;
                        }
                        v351 = v352;
                      }
                      while (v352);
                    }
                    if (v350 == __p[1] || *(_QWORD *)v350 != v349 || *((_DWORD *)v350 + 2) != (_DWORD)v348)
                    {
                      sub_20F0527A0((char **)__p, v350, &v736);
                      sub_20F346F80((uint64_t *)v731, v346[3], (std::__shared_weak_count *)v346[4]);
                    }
                  }
                }
              }
              v339 += 3;
            }
            while (v339 != v338);
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v45 = *(_OWORD *)v731;
        v355 = *(_OWORD *)&v731[16];
        v354 = *(void **)&v731[32];
LABEL_546:
        *(_QWORD *)v731 = &unk_2102DAFF0;
        memset(&v731[8], 0, 32);
        v356 = (char *)v716[0];
        v357 = v716[1];
        v358 = v716[3];
        *(_OWORD *)v716 = v45;
        *(_OWORD *)&v716[2] = v355;
        v716[4] = v354;
        if (v358)
        {
          for (i = 0; i != v358; i = (char *)i + 1)
          {
            if ((*((char *)i + (_QWORD)v356) & 0x80000000) == 0)
            {
              v360 = (std::__shared_weak_count *)v357[4 * (_QWORD)i + 3];
              if (v360)
              {
                v361 = (unint64_t *)&v360->__shared_owners_;
                do
                  v362 = __ldaxr(v361);
                while (__stlxr(v362 - 1, v361));
                if (!v362)
                {
                  ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                  std::__shared_weak_count::__release_weak(v360);
                }
              }
            }
          }
          operator delete(v356);
          if (*(_QWORD *)&v731[24])
          {
            v363 = 0;
            do
            {
              if ((*(char *)(*(_QWORD *)v731 + v363) & 0x80000000) == 0)
              {
                v364 = *(std::__shared_weak_count **)(*(_QWORD *)&v731[8] + 32 * v363 + 24);
                if (v364)
                {
                  v365 = (unint64_t *)&v364->__shared_owners_;
                  do
                    v366 = __ldaxr(v365);
                  while (__stlxr(v366 - 1, v365));
                  if (!v366)
                  {
                    ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                    std::__shared_weak_count::__release_weak(v364);
                  }
                }
              }
              ++v363;
            }
            while (v363 != *(_QWORD *)&v731[24]);
            operator delete(*(void **)v731);
          }
        }
        v722[1] = 0;
        v723 = 0;
        v722[0] = &v722[1];
        v367 = v716[0];
        v368 = (char *)v716[1];
        v369 = *(unsigned __int8 *)v716[0];
        if ((char)v369 <= -2)
        {
          do
          {
            v370 = (__clz(__rbit64(((*v367 >> 7) & ~*v367 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            v367 = (_QWORD *)((char *)v367 + v370);
            v368 += 32 * v370;
          }
          while (*(char *)v367 < -1);
          v369 = *(unsigned __int8 *)v367;
        }
        if (v369 == 255)
        {
          v720[0] = 0;
          v720[1] = 0;
          v721 = 0;
          a2 = v713;
          v402 = (void **)v722[0];
          v207 = (unsigned int *)v696;
          if (v722[0] != &v722[1])
            goto LABEL_630;
        }
        else
        {
          v371 = 0;
          do
          {
            v372 = *((_QWORD *)v368 + 2);
            v373 = *(__int128 **)(v372 + 200);
            v374 = *(__int128 **)(v372 + 208);
            while (v373 != v374)
            {
              v375 = &v722[1];
              v376 = &v722[1];
              if (v722[1])
              {
                v377 = *((_DWORD *)v373 + 4);
                v378 = *(void **)v373;
                v379 = (void **)v722[1];
                v380 = *((_DWORD *)v373 + 2);
                while (1)
                {
                  while (1)
                  {
                    v376 = v379;
                    v381 = *((_DWORD *)v379 + 12);
                    if (v377 == v381)
                      break;
                    if (v377 >= v381)
                    {
                      if (v381 >= v377)
                        goto LABEL_576;
                      goto LABEL_591;
                    }
LABEL_580:
                    v379 = (void **)*v376;
                    v375 = v376;
                    if (!*v376)
                      goto LABEL_593;
                  }
                  v382 = v376[4];
                  if (v378 < v382)
                    goto LABEL_580;
                  if (v378 != v382)
                  {
                    if (v382 >= v378)
                      goto LABEL_576;
                    goto LABEL_591;
                  }
                  v383 = *((_DWORD *)v376 + 10);
                  if (v380 < v383)
                    goto LABEL_580;
                  if (v383 >= v380)
                    goto LABEL_576;
LABEL_591:
                  v379 = (void **)v376[1];
                  if (!v379)
                  {
                    v375 = v376 + 1;
                    break;
                  }
                }
              }
LABEL_593:
              v384 = operator new(0x38uLL);
              v385 = *v373;
              v384[6] = *((_QWORD *)v373 + 2);
              *((_OWORD *)v384 + 2) = v385;
              *v384 = 0;
              v384[1] = 0;
              v384[2] = v376;
              *v375 = v384;
              if (*(_QWORD *)v722[0])
              {
                v722[0] = *(void **)v722[0];
                v384 = *v375;
              }
              v386 = v722[1];
              _ZF = v384 == v722[1];
              *((_BYTE *)v384 + 24) = v384 == v722[1];
              if (!_ZF)
              {
                do
                {
                  v387 = v384[2];
                  if (*(_BYTE *)(v387 + 24))
                    break;
                  v388 = *(_BYTE **)(v387 + 16);
                  v389 = *(_QWORD *)v388;
                  if (*(_QWORD *)v388 == v387)
                  {
                    v392 = *((_QWORD *)v388 + 1);
                    if (!v392 || (v393 = *(unsigned __int8 *)(v392 + 24), v390 = (_BYTE *)(v392 + 24), v393))
                    {
                      if (*(_QWORD **)v387 == v384)
                      {
                        *(_BYTE *)(v387 + 24) = 1;
                        v388[24] = 0;
                        v396 = *(_QWORD *)(v387 + 8);
                        *(_QWORD *)v388 = v396;
                        if (v396)
                          goto LABEL_610;
                      }
                      else
                      {
                        v394 = *(uint64_t **)(v387 + 8);
                        v395 = *v394;
                        *(_QWORD *)(v387 + 8) = *v394;
                        if (v395)
                        {
                          *(_QWORD *)(v395 + 16) = v387;
                          v388 = *(_BYTE **)(v387 + 16);
                        }
                        v394[2] = (uint64_t)v388;
                        *(_QWORD *)(*(_QWORD *)(v387 + 16) + 8 * (**(_QWORD **)(v387 + 16) != v387)) = v394;
                        *v394 = v387;
                        *(_QWORD *)(v387 + 16) = v394;
                        v388 = (_BYTE *)v394[2];
                        v387 = *(_QWORD *)v388;
                        *((_BYTE *)v394 + 24) = 1;
                        v388[24] = 0;
                        v396 = *(_QWORD *)(v387 + 8);
                        *(_QWORD *)v388 = v396;
                        if (v396)
LABEL_610:
                          *(_QWORD *)(v396 + 16) = v388;
                      }
                      *(_QWORD *)(v387 + 16) = *((_QWORD *)v388 + 2);
                      *(_QWORD *)(*((_QWORD *)v388 + 2) + 8 * (**((_QWORD **)v388 + 2) != (_QWORD)v388)) = v387;
                      *(_QWORD *)(v387 + 8) = v388;
LABEL_574:
                      *((_QWORD *)v388 + 2) = v387;
                      break;
                    }
                  }
                  else if (!v389 || (v391 = *(unsigned __int8 *)(v389 + 24), v390 = (_BYTE *)(v389 + 24), v391))
                  {
                    if (*(_QWORD **)v387 == v384)
                    {
                      v398 = v384[1];
                      *(_QWORD *)v387 = v398;
                      if (v398)
                      {
                        *(_QWORD *)(v398 + 16) = v387;
                        v388 = *(_BYTE **)(v387 + 16);
                      }
                      v384[2] = v388;
                      *(_QWORD *)(*(_QWORD *)(v387 + 16) + 8 * (**(_QWORD **)(v387 + 16) != v387)) = v384;
                      v384[1] = v387;
                      *(_QWORD *)(v387 + 16) = v384;
                      v388 = (_BYTE *)v384[2];
                      *((_BYTE *)v384 + 24) = 1;
                      v388[24] = 0;
                      v387 = *((_QWORD *)v388 + 1);
                      v397 = *(_QWORD **)v387;
                      *((_QWORD *)v388 + 1) = *(_QWORD *)v387;
                      if (!v397)
                        goto LABEL_573;
                    }
                    else
                    {
                      *(_BYTE *)(v387 + 24) = 1;
                      v388[24] = 0;
                      v387 = *((_QWORD *)v388 + 1);
                      v397 = *(_QWORD **)v387;
                      *((_QWORD *)v388 + 1) = *(_QWORD *)v387;
                      if (!v397)
                        goto LABEL_573;
                    }
                    v397[2] = v388;
LABEL_573:
                    *(_QWORD *)(v387 + 16) = *((_QWORD *)v388 + 2);
                    *(_QWORD *)(*((_QWORD *)v388 + 2) + 8 * (**((_QWORD **)v388 + 2) != (_QWORD)v388)) = v387;
                    *(_QWORD *)v387 = v388;
                    goto LABEL_574;
                  }
                  *(_BYTE *)(v387 + 24) = 1;
                  v384 = v388;
                  v388[24] = v388 == v386;
                  *v390 = 1;
                }
                while (v388 != v386);
              }
              v723 = (char *)++v371;
LABEL_576:
              v373 += 2;
            }
            v400 = *((char *)v367 + 1);
            v367 = (_QWORD *)((char *)v367 + 1);
            LOBYTE(v399) = v400;
            v368 += 32;
            if (v400 <= -2)
            {
              do
              {
                v401 = (__clz(__rbit64(((*v367 >> 7) & ~*v367 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v367 = (_QWORD *)((char *)v367 + v401);
                v368 += 32 * v401;
                v399 = *(char *)v367;
              }
              while (v399 < -1);
            }
          }
          while (v399 != 255);
          v720[0] = 0;
          v720[1] = 0;
          v721 = 0;
          a2 = v713;
          if (v371)
          {
            if (v371 >> 61)
              sub_20E867F44();
            v720[0] = operator new(8 * v371);
            v720[1] = v720[0];
            v721 = (char *)v720[0] + 8 * v371;
          }
          v402 = (void **)v722[0];
          v207 = (unsigned int *)v696;
          if (v722[0] != &v722[1])
          {
            while (1)
            {
LABEL_630:
              v404 = (char *)v711[5];
              v403 = (char *)v711[6];
              if (v403 != v404)
              {
                v405 = (v403 - v404) >> 4;
                v406 = *((_DWORD *)v402 + 12);
                v407 = v402[4];
                while (1)
                {
                  v408 = v405 >> 1;
                  v409 = &v404[16 * (v405 >> 1)];
                  v410 = *(_QWORD *)v409;
                  v411 = *(_DWORD *)(*(_QWORD *)v409 + 16);
                  v412 = v411 >= v406;
                  if (v411 != v406)
                    goto LABEL_638;
                  if (*(_QWORD *)v410 >= (unint64_t)v407)
                    break;
LABEL_632:
                  v404 = v409 + 16;
                  v408 = v405 + ~v408;
LABEL_633:
                  v405 = v408;
                  if (!v408)
                    goto LABEL_641;
                }
                if (*(void **)v410 != v407)
                  goto LABEL_633;
                v412 = *(_DWORD *)(v410 + 8) >= *((_DWORD *)v402 + 10);
LABEL_638:
                if (v412)
                  goto LABEL_633;
                goto LABEL_632;
              }
LABEL_641:
              if (v404 != v403)
              {
                v413 = *(_QWORD *)v404;
                v414 = (char *)v711[6];
                if (*(_DWORD *)(*(_QWORD *)v404 + 16) == *((_DWORD *)v402 + 12))
                {
                  v414 = (char *)v711[6];
                  if (*(void **)v413 == v402[4])
                  {
                    if (*(_DWORD *)(v413 + 8) == *((_DWORD *)v402 + 10))
                      v414 = v404;
                    else
                      v414 = (char *)v711[6];
                  }
                }
                if (v403 != v414)
                {
                  v415 = *(_QWORD *)v414;
                  if (*(_QWORD *)v414)
                    break;
                }
              }
              sub_20F33DC04(&v730);
              if (**(int **)(v730 + 56) <= 3)
              {
                v418 = *(unsigned __int8 *)(v730 + 72);
                v419 = sub_20E8C31DC(v730, "OSLogSurrogateAppender", 1, 0);
                v420 = v419;
                if (v418 || v419 != 0)
                {
                  v708 = v418;
                  __p[0] = &v730;
                  __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
                  v725[0] = (void *)std::chrono::system_clock::now().__d_.__rep_;
                  LODWORD(v725[1]) = 3;
                  v726 = "unknown file";
                  v727 = 256;
                  v728 = "unknown function";
                  v729 = 0uLL;
                  v422 = *(_QWORD *)__p[0];
                  v423 = (const char *)(*(_QWORD *)__p[0] + 16);
                  v704 = v423;
                  if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
                  {
                    v423 = *(const char **)(v422 + 16);
                    v425 = *(_QWORD *)(v422 + 24);
                    v424 = *(_QWORD *)__p[0];
                    v447 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v447 & 1) == 0)
                    {
LABEL_770:
                      if (__cxa_guard_acquire(&qword_254A4A510))
                      {
                        sub_20E9E46F8((uint64_t)&v736);
                        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v736);
                        if (v738 && SHIBYTE(v737) < 0)
                          operator delete((void *)v736);
                        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A4A510);
                        v207 = (unsigned int *)v696;
                      }
                    }
                  }
                  else
                  {
                    v424 = *(_QWORD *)__p[0];
                    v425 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
                    v426 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v426 & 1) == 0)
                      goto LABEL_770;
                  }
                  if (byte_254A4A4F8[23] >= 0)
                    v448 = byte_254A4A4F8;
                  else
                    v448 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v449 = byte_254A4A4F8[23];
                  else
                    v449 = *(_QWORD *)&byte_254A4A4F8[8];
                  *(_QWORD *)v731 = os_log_create(v448, v423);
                  if (v449 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v449 >= 0x17)
                  {
                    v451 = (v449 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v449 | 7) != 0x17)
                      v451 = v449 | 7;
                    v452 = v451 + 1;
                    v450 = operator new(v451 + 1);
                    *(_QWORD *)&v731[16] = v449;
                    *(_QWORD *)&v731[24] = v452 | 0x8000000000000000;
                    *(_QWORD *)&v731[8] = v450;
                    v207 = (unsigned int *)v696;
                  }
                  else
                  {
                    v731[31] = v449;
                    v450 = &v731[8];
                    if (!v449)
                    {
LABEL_703:
                      v450[v449] = 0;
                      v731[32] = 1;
                      if (v425 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      a2 = v713;
                      if (v425 >= 0x17)
                      {
                        v455 = (v425 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v425 | 7) != 0x17)
                          v455 = v425 | 7;
                        v456 = v455 + 1;
                        v453 = (void **)operator new(v455 + 1);
                        v733 = v425;
                        v734 = v456 | 0x8000000000000000;
                        v732 = v453;
                        v207 = (unsigned int *)v696;
                      }
                      else
                      {
                        HIBYTE(v734) = v425;
                        v453 = (void **)&v732;
                        if (!v425)
                        {
                          LOBYTE(v732) = 0;
                          LOBYTE(v735) = 1;
                          v454 = *(NSObject **)v731;
                          if ((SHIBYTE(v734) & 0x80000000) == 0)
                            goto LABEL_707;
LABEL_713:
                          operator delete(v732);
                          if (v731[32])
                            goto LABEL_714;
                          goto LABEL_716;
                        }
                      }
                      memmove(v453, v423, v425);
                      *((_BYTE *)v453 + v425) = 0;
                      LOBYTE(v735) = 1;
                      v454 = *(NSObject **)v731;
                      if (SHIBYTE(v734) < 0)
                        goto LABEL_713;
LABEL_707:
                      if (v731[32])
                      {
LABEL_714:
                        if ((v731[31] & 0x80000000) != 0)
                          operator delete(*(void **)&v731[8]);
                      }
LABEL_716:
                      if (*(_QWORD *)v731)
                        os_release(*(void **)v731);
                      if (v420 && *(_QWORD *)(v420 + 24))
                      {
                        v457 = _os_log_pack_size();
                        v458 = (std::__shared_weak_count_vtbl *)operator new(v457, (std::align_val_t)8uLL);
                        v459 = (std::__shared_weak_count *)operator new();
                        v460 = v459;
                        v459->__shared_owners_ = 0;
                        v461 = (unint64_t *)&v459->__shared_owners_;
                        v459->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                        v459->__shared_weak_owners_ = 0;
                        v459[1].__vftable = v458;
                        *(_QWORD *)v731 = v458;
                        *(_QWORD *)&v731[8] = v458;
                        *(_QWORD *)&v731[16] = v459;
                        do
                          v462 = __ldxr(v461);
                        while (__stxr(v462 + 1, v461));
                        *(_QWORD *)&v731[24] = 0;
                        *(_QWORD *)&v731[32] = 0;
                        v732 = 0;
                        a2 = v713;
                        do
                          v463 = __ldaxr(v461);
                        while (__stlxr(v463 - 1, v461));
                        if (!v463)
                        {
                          ((void (*)(std::__shared_weak_count *))v459->__on_zero_shared)(v459);
                          std::__shared_weak_count::__release_weak(v460);
                        }
                        v464 = *(_QWORD *)v731;
                        *(_WORD *)_os_log_pack_fill() = 0;
                        v465 = operator new();
                        v466 = *(unsigned __int8 *)(v424 + 39);
                        v467 = v704;
                        if ((v466 & 0x80u) != 0)
                        {
                          v467 = *(const char **)(v424 + 16);
                          v466 = *(_QWORD *)(v424 + 24);
                        }
                        *(_QWORD *)v465 = v464;
                        *(_OWORD *)(v465 + 8) = *(_OWORD *)&v731[8];
                        *(_QWORD *)&v731[8] = 0;
                        *(_QWORD *)&v731[16] = 0;
                        *(_OWORD *)(v465 + 24) = *(_OWORD *)&v731[24];
                        *(_QWORD *)&v731[24] = 0;
                        *(_QWORD *)&v731[32] = 0;
                        *(_QWORD *)(v465 + 40) = v467;
                        *(_QWORD *)(v465 + 48) = v466;
                        *(_BYTE *)(v465 + 56) = 1;
                        v739 = 0;
                        *(_QWORD *)&v736 = v465;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v420 + 24) + 40))(*(_QWORD *)(v420 + 24), &v736);
                        v468 = v736;
                        *(_QWORD *)&v736 = 0;
                        if (v468)
                        {
                          v469 = *(std::__shared_weak_count **)(v468 + 32);
                          if (v469)
                          {
                            v470 = (unint64_t *)&v469->__shared_owners_;
                            do
                              v471 = __ldaxr(v470);
                            while (__stlxr(v471 - 1, v470));
                            if (!v471)
                            {
                              ((void (*)(std::__shared_weak_count *))v469->__on_zero_shared)(v469);
                              std::__shared_weak_count::__release_weak(v469);
                            }
                          }
                          v472 = *(std::__shared_weak_count **)(v468 + 16);
                          if (v472)
                          {
                            v473 = (unint64_t *)&v472->__shared_owners_;
                            do
                              v474 = __ldaxr(v473);
                            while (__stlxr(v474 - 1, v473));
                            if (!v474)
                            {
                              ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
                              std::__shared_weak_count::__release_weak(v472);
                            }
                          }
                          MEMORY[0x212BC6398](v468, 0x10F0C40B62ED6C6);
                          v475 = v739;
                          v739 = 0;
                          if (v475)
                          {
                            v476 = *(std::__shared_weak_count **)(v475 + 32);
                            if (v476)
                            {
                              v477 = (unint64_t *)&v476->__shared_owners_;
                              do
                                v478 = __ldaxr(v477);
                              while (__stlxr(v478 - 1, v477));
                              if (!v478)
                              {
                                ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
                                std::__shared_weak_count::__release_weak(v476);
                              }
                            }
                            v479 = *(std::__shared_weak_count **)(v475 + 16);
                            if (v479)
                            {
                              v480 = (unint64_t *)&v479->__shared_owners_;
                              do
                                v481 = __ldaxr(v480);
                              while (__stlxr(v481 - 1, v480));
                              if (!v481)
                              {
                                ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
                                std::__shared_weak_count::__release_weak(v479);
                              }
                            }
                            MEMORY[0x212BC6398](v475, 0x10F0C40B62ED6C6);
                          }
                        }
                        v482 = *(std::__shared_weak_count **)&v731[32];
                        v483 = v708;
                        if (*(_QWORD *)&v731[32])
                        {
                          v484 = (unint64_t *)(*(_QWORD *)&v731[32] + 8);
                          do
                            v485 = __ldaxr(v484);
                          while (__stlxr(v485 - 1, v484));
                          if (!v485)
                          {
                            ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
                            std::__shared_weak_count::__release_weak(v482);
                          }
                        }
                        v486 = *(std::__shared_weak_count **)&v731[16];
                        if (*(_QWORD *)&v731[16])
                        {
                          v487 = (unint64_t *)(*(_QWORD *)&v731[16] + 8);
                          do
                            v488 = __ldaxr(v487);
                          while (__stlxr(v488 - 1, v487));
                          if (!v488)
                          {
                            ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
                            std::__shared_weak_count::__release_weak(v486);
                          }
                        }
                      }
                      else
                      {
                        os_log_type_enabled(v454, OS_LOG_TYPE_INFO);
                        *(_WORD *)v731 = 0;
                        v489 = (void *)_os_log_send_and_compose_impl();
                        v483 = v708;
                        if (v489)
                          free(v489);
                      }
                      if (v483)
                      {
                        sub_20E8C003C((uint64_t)__p, "Cannot find key frame");
                        sub_20E863570((uint64_t)__p);
                      }
                      sub_20E863570((uint64_t)__p);
                      v490 = (std::__shared_weak_count *)*((_QWORD *)&v729 + 1);
                      if (*((_QWORD *)&v729 + 1))
                      {
                        v491 = (unint64_t *)(*((_QWORD *)&v729 + 1) + 8);
                        do
                          v492 = __ldaxr(v491);
                        while (__stlxr(v492 - 1, v491));
                        if (!v492)
                        {
                          ((void (*)(std::__shared_weak_count *))v490->__on_zero_shared)(v490);
                          std::__shared_weak_count::__release_weak(v490);
                        }
                      }
                      goto LABEL_682;
                    }
                  }
                  memmove(v450, v448, v449);
                  goto LABEL_703;
                }
              }
LABEL_682:
              v445 = (void **)v402[1];
              if (v445)
              {
                do
                {
                  v446 = v445;
                  v445 = (void **)*v445;
                }
                while (v445);
              }
              else
              {
                do
                {
                  v446 = (void **)v402[2];
                  _ZF = *v446 == v402;
                  v402 = v446;
                }
                while (!_ZF);
              }
              v402 = v446;
              if (v446 == &v722[1])
                goto LABEL_776;
            }
            v416 = (char *)v720[1];
            if (v720[1] < v721)
            {
              *(_QWORD *)v720[1] = v415;
              v417 = v416 + 8;
LABEL_681:
              v720[1] = v417;
              v207 = (unsigned int *)v696;
              goto LABEL_682;
            }
            v427 = (char *)v720[0];
            v428 = (char *)v720[1] - (char *)v720[0];
            v429 = ((char *)v720[1] - (char *)v720[0]) >> 3;
            v430 = v429 + 1;
            if ((unint64_t)(v429 + 1) >> 61)
              sub_20E867F44();
            v431 = v721 - (char *)v720[0];
            if ((v721 - (char *)v720[0]) >> 2 > v430)
              v430 = v431 >> 2;
            if ((unint64_t)v431 >= 0x7FFFFFFFFFFFFFF8)
              v432 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v432 = v430;
            if (v432)
            {
              if (v432 >> 61)
                sub_20E877A38();
              v433 = operator new(8 * v432);
              v434 = &v433[8 * v429];
              *v434 = v415;
              v417 = v434 + 1;
              v435 = v416 - v427;
              if (v416 != v427)
              {
LABEL_670:
                v436 = v435 - 8;
                if (v436 < 0x58)
                  goto LABEL_1067;
                if ((unint64_t)(v416 - &v433[v428]) < 0x20)
                  goto LABEL_1067;
                v437 = (v436 >> 3) + 1;
                v438 = 8 * (v437 & 0x3FFFFFFFFFFFFFFCLL);
                v439 = &v416[-v438];
                v434 = (_QWORD *)((char *)v434 - v438);
                v440 = &v433[8 * v429 - 16];
                v441 = v416 - 16;
                v442 = v437 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v443 = *(_OWORD *)v441;
                  *(v440 - 1) = *((_OWORD *)v441 - 1);
                  *v440 = v443;
                  v440 -= 2;
                  v441 -= 32;
                  v442 -= 4;
                }
                while (v442);
                v416 = v439;
                if (v437 != (v437 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_1067:
                  do
                  {
                    v444 = *((_QWORD *)v416 - 1);
                    v416 -= 8;
                    *--v434 = v444;
                  }
                  while (v416 != v427);
                }
                v416 = v427;
                a2 = v713;
                v720[0] = v434;
                v721 = &v433[8 * v432];
                if (!v427)
                  goto LABEL_681;
                goto LABEL_680;
              }
            }
            else
            {
              v433 = 0;
              v434 = (_QWORD *)(8 * v429);
              *(_QWORD *)(8 * v429) = v415;
              v417 = (void *)(8 * v429 + 8);
              v435 = v416 - v427;
              if (v416 != v427)
                goto LABEL_670;
            }
            a2 = v713;
            v720[0] = v434;
            v721 = &v433[8 * v432];
            if (!v416)
              goto LABEL_681;
LABEL_680:
            operator delete(v416);
            goto LABEL_681;
          }
        }
LABEL_776:
        if (v714[0])
        {
          v714[1] = v714[0];
          operator delete(v714[0]);
        }
        *(_OWORD *)v714 = *(_OWORD *)v720;
        v715 = v721;
        sub_20E86872C((uint64_t)v722, (_QWORD *)v722[1]);
        goto LABEL_779;
      }
      v354 = 0;
      v355 = 0uLL;
      *((_QWORD *)&v45 + 1) = 0;
    }
    *(_QWORD *)&v45 = &unk_2102DAFF0;
    goto LABEL_546;
  }
  if (*(_BYTE *)(a2 + 2499))
  {
    memset(v731, 0, 32);
    *(_DWORD *)&v731[32] = 733223588;
    kdebug_trace();
    v722[0] = 0;
    v722[1] = 0;
    v723 = 0;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v725 = 0u;
    LODWORD(v726) = 1065353216;
    v720[0] = 0;
    v720[1] = 0;
    v721 = 0;
    v41 = *a5;
    v40 = a5[1];
    v42 = (char *)v40 - (char *)*a5;
    if (v40 == *a5)
    {
      v43 = 0;
      v689 = v39;
      v44 = 0;
LABEL_485:
      v316 = v695;
      *(float64x2x3_t *)_Q0.f64 = vld3q_f64(v316);
      _Q4 = *(_OWORD *)(v696 + 72);
      a2 = v713;
      _D6 = *(double *)(v713 + 2960);
      v319 = *(double *)(v713 + 2968);
      _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q0, *(double *)(v713 + 2952)), v320, _D6), _Q2, v319);
      __asm { FMLA            D0, D6, V4.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + *(double *)(v696 + 88) * v319;
      _Q1 = vmulq_f64(_Q16, _Q16);
      _Q2.f64[0] = _Q16.f64[1];
      __asm { FMLA            D1, D2, V16.D[1] }
      _Q1.f64[0] = sqrt(_Q1.f64[0] + _Q0.f64[0] * _Q0.f64[0]);
      if (_Q1.f64[0] == 0.0)
        _Q1.f64[0] = 1.0;
      else
        _Q1.f64[0] = 1.0 / _Q1.f64[0];
      v325 = *(_QWORD *)(v713 + 2920);
      LOBYTE(v717[0]) = 0;
      LOBYTE(v719) = 0;
      *(float64x2_t *)v716 = vmulq_n_f64(_Q16, _Q1.f64[0]);
      v716[2] = (void *)*(_OWORD *)&vmulq_f64(_Q0, _Q1);
      LOBYTE(v716[3]) = 1;
      v736 = 0uLL;
      v737 = 0;
      v326 = v43 - v44;
      if (v43 != v44)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v326 >> 3) > 0xAAAAAAAAAAAAAAALL)
          sub_20E9DEF2C();
        *(_QWORD *)&v736 = operator new(v43 - v44);
        *((_QWORD *)&v736 + 1) = v736;
        v327 = v736 + 8 * (v326 >> 3);
        v737 = v327;
        memcpy((void *)v736, v44, v326);
        *((_QWORD *)&v736 + 1) = v327;
      }
      v738 = 1;
      v328 = (uint64_t *)sub_20FCBA6DC(v692, *(_DWORD *)v696, *(_DWORD *)(v696 + 4));
      sub_20F23E444(v325, (uint64_t)v691, (uint64_t ***)v722, __p, v328, (uint64_t)v716, (uint64_t *)&v736, v714);
      v329 = (char *)*v689;
      if (*v689)
      {
        v330 = *(char **)(v713 + 3296);
        v331 = *v689;
        if (v330 != v329)
        {
          v332 = v330 - 40;
          v333 = v330 - 40;
          do
          {
            v334 = *(void (***)(char *))v333;
            v333 -= 40;
            (*v334)(v332);
            _ZF = v332 == v329;
            v332 = v333;
          }
          while (!_ZF);
          v331 = *v689;
        }
        *(_QWORD *)(v713 + 3296) = v329;
        operator delete(v331);
        *v689 = 0;
        v689[1] = 0;
        v689[2] = 0;
      }
      *(_OWORD *)v689 = *(_OWORD *)v714;
      *(_QWORD *)(v713 + 3304) = v715;
      v714[1] = 0;
      v715 = 0;
      v714[0] = 0;
      if (v738 && (_QWORD)v736)
      {
        *((_QWORD *)&v736 + 1) = v736;
        operator delete((void *)v736);
      }
      if (v720[0])
        operator delete(v720[0]);
      v335 = v725[0];
      if (v725[0])
      {
        do
        {
          v336 = (_QWORD *)*v335;
          operator delete(v335);
          v335 = v336;
        }
        while (v336);
      }
      v337 = __p[0];
      __p[0] = 0;
      if (v337)
        operator delete(v337);
      if (v722[0])
      {
        v722[1] = v722[0];
        operator delete(v722[0]);
      }
LABEL_835:
      kdebug_trace();
      goto LABEL_836;
    }
    if ((0xAAAAAAAAAAAAAAABLL * (v42 >> 3)) >> 61)
      sub_20E867F44();
    v722[0] = operator new(0x5555555555555558 * (v42 >> 3));
    v722[1] = v722[0];
    v723 = (char *)v722[0] + 0x5555555555555558 * (v42 >> 3);
    v43 = operator new(v42);
    v720[0] = v43;
    v720[1] = v43;
    v721 = &v43[8 * (v42 >> 3)];
    v689 = v39;
    v44 = v43;
    if (v40 == v41)
      goto LABEL_485;
    while (1)
    {
      v237 = *v41;
      v238 = *(_QWORD *)(v713 + 2824);
      v239 = *(_QWORD *)(v713 + 2832);
      if (v238 != v239)
      {
        while (1)
        {
          v240 = *(_QWORD *)(v238 + 16);
          if (v240)
          {
            if (*(_QWORD *)(v240 + 160) == v237)
              break;
          }
          v238 += 4472;
          if (v238 == v239)
            goto LABEL_317;
        }
      }
      if (v238 != v239 && v238 != 0)
        break;
LABEL_317:
      v41 += 3;
      if (v41 == v40)
      {
        v44 = v720[0];
        v43 = v720[1];
        goto LABEL_485;
      }
    }
    v242 = (unint64_t)__p[1];
    if (__p[1])
    {
      v243 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v243.i16[0] = vaddlv_u8(v243);
      if (v243.u32[0] > 1uLL)
      {
        v244 = *v41;
        if ((void *)v237 >= __p[1])
          v244 = v237 % (unint64_t)__p[1];
      }
      else
      {
        v244 = ((unint64_t)__p[1] - 1) & v237;
      }
      v246 = (_QWORD *)*((_QWORD *)__p[0] + v244);
      if (v246)
      {
        v247 = (_QWORD *)*v246;
        if (v247)
        {
          if (v243.u32[0] < 2uLL)
          {
            while (1)
            {
              v249 = v247[1];
              if (v249 == v237)
              {
                if (v247[2] == v237)
                  goto LABEL_438;
              }
              else if ((v249 & ((unint64_t)__p[1] - 1)) != v244)
              {
                goto LABEL_348;
              }
              v247 = (_QWORD *)*v247;
              if (!v247)
                goto LABEL_348;
            }
          }
          do
          {
            v248 = v247[1];
            if (v248 == v237)
            {
              if (v247[2] == v237)
                goto LABEL_438;
            }
            else
            {
              if ((void *)v248 >= __p[1])
                v248 %= (unint64_t)__p[1];
              if (v248 != v244)
                break;
            }
            v247 = (_QWORD *)*v247;
          }
          while (v247);
        }
      }
LABEL_348:
      if (v243.u32[0] > 1uLL)
      {
        v24 = *v41;
        if (__p[1] <= (void *)v237)
          v24 = v237 % (unint64_t)__p[1];
      }
      else
      {
        v24 = ((unint64_t)__p[1] - 1) & v237;
      }
      v245 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v238 + 16) + 424) + 8);
      v250 = (_QWORD *)*((_QWORD *)__p[0] + v24);
      if (v250)
      {
        v251 = (_QWORD *)*v250;
        if (v251)
        {
          if (v243.u32[0] < 2uLL)
          {
            while (1)
            {
              v253 = v251[1];
              if (v253 == v237)
              {
                if (v251[2] == v237)
                  goto LABEL_438;
              }
              else if ((v253 & ((unint64_t)__p[1] - 1)) != v24)
              {
                goto LABEL_367;
              }
              v251 = (_QWORD *)*v251;
              if (!v251)
                goto LABEL_367;
            }
          }
          do
          {
            v252 = v251[1];
            if (v252 == v237)
            {
              if (v251[2] == v237)
                goto LABEL_438;
            }
            else
            {
              if ((void *)v252 >= __p[1])
                v252 %= (unint64_t)__p[1];
              if (v252 != v24)
                break;
            }
            v251 = (_QWORD *)*v251;
          }
          while (v251);
        }
      }
    }
    else
    {
      v245 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v238 + 16) + 424) + 8);
    }
LABEL_367:
    v254 = operator new(0x20uLL);
    *v254 = 0;
    v254[1] = v237;
    v254[2] = v237;
    v254[3] = v245;
    v255 = (float)((unint64_t)v725[1] + 1);
    if (v242 && (float)(*(float *)&v726 * (float)v242) >= v255)
    {
      v256 = __p[0];
      v257 = (_QWORD *)*((_QWORD *)__p[0] + v24);
      if (v257)
      {
LABEL_370:
        *v254 = *v257;
        goto LABEL_436;
      }
LABEL_430:
      *v254 = v725[0];
      v725[0] = v254;
      v256[v24] = v725;
      if (!*v254)
      {
LABEL_437:
        ++v725[1];
LABEL_438:
        v281 = *(_QWORD *)(*(_QWORD *)(v238 + 16) + 424);
        v736 = *(_OWORD *)v41;
        LODWORD(v737) = *((_DWORD *)v41 + 4);
        v282 = operator new(0x18uLL);
        v716[1] = v282 + 6;
        v716[2] = v282 + 6;
        *(_OWORD *)v282 = v736;
        v282[4] = v737;
        v716[0] = v282;
        sub_20F279E20(v281, (uint64_t **)v716, (char **)v717);
        if (v716[0])
        {
          v716[1] = v716[0];
          operator delete(v716[0]);
        }
        sub_20F27A540(*(_QWORD *)(*(_QWORD *)(v238 + 16) + 424), (uint64_t ***)v717, v713 + 2952, v716);
        v283 = v717[0];
        v284 = (char *)v722[1];
        if (v722[1] < v723)
        {
          *(_QWORD *)v722[1] = *(_QWORD *)v717[0];
          v285 = v284 + 8;
LABEL_463:
          v722[1] = v285;
          v24 = (unint64_t)v716[0];
          v304 = v720[1];
          if (v720[1] >= v721)
          {
            v307 = v720[0];
            v308 = 0xAAAAAAAAAAAAAAABLL * (((char *)v720[1] - (char *)v720[0]) >> 3);
            v309 = v308 + 1;
            if (v308 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20E9DEF2C();
            if (0x5555555555555556 * ((v721 - (char *)v720[0]) >> 3) > v309)
              v309 = 0x5555555555555556 * ((v721 - (char *)v720[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v721 - (char *)v720[0]) >> 3) >= 0x555555555555555)
              v310 = 0xAAAAAAAAAAAAAAALL;
            else
              v310 = v309;
            if (v310)
            {
              if (v310 > 0xAAAAAAAAAAAAAAALL)
LABEL_1039:
                sub_20E877A38();
              v311 = (char *)operator new(24 * v310);
            }
            else
            {
              v311 = 0;
            }
            v312 = *(_OWORD *)v24;
            v313 = &v311[24 * v308];
            *((_QWORD *)v313 + 2) = *(_QWORD *)(v24 + 16);
            *(_OWORD *)v313 = v312;
            v314 = v313;
            if (v304 != v307)
            {
              do
              {
                v315 = *(_OWORD *)((char *)v304 - 24);
                *((_QWORD *)v314 - 1) = *((_QWORD *)v304 - 1);
                *(_OWORD *)(v314 - 24) = v315;
                v314 -= 24;
                v304 = (_OWORD *)((char *)v304 - 24);
              }
              while (v304 != v307);
              v304 = v720[0];
            }
            v306 = v313 + 24;
            v720[0] = v314;
            v721 = &v311[24 * v310];
            if (v304)
              operator delete(v304);
          }
          else
          {
            v305 = *(_OWORD *)v716[0];
            *((_QWORD *)v720[1] + 2) = *((_QWORD *)v716[0] + 2);
            *v304 = v305;
            v306 = (char *)v304 + 24;
          }
          v720[1] = v306;
          if (v716[0])
          {
            v716[1] = v716[0];
            operator delete(v716[0]);
          }
          if (v717[0])
          {
            v717[1] = v717[0];
            operator delete(v717[0]);
          }
          goto LABEL_317;
        }
        v286 = v722[0];
        v287 = (char *)v722[1] - (char *)v722[0];
        v288 = ((char *)v722[1] - (char *)v722[0]) >> 3;
        v289 = v288 + 1;
        if ((unint64_t)(v288 + 1) >> 61)
          sub_20E867F44();
        v290 = v723 - (char *)v722[0];
        if ((v723 - (char *)v722[0]) >> 2 > v289)
          v289 = v290 >> 2;
        if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF8)
          v291 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v291 = v289;
        if (v291)
        {
          if (v291 >> 61)
            goto LABEL_1039;
          v292 = operator new(8 * v291);
          v293 = &v292[8 * v288];
          *v293 = *v283;
          v285 = v293 + 1;
          v294 = v284 - v286;
          if (v284 != v286)
          {
LABEL_451:
            v295 = v294 - 8;
            if (v295 < 0x58)
              goto LABEL_1068;
            if ((unint64_t)(v284 - v292 - v287) < 0x20)
              goto LABEL_1068;
            v296 = (v295 >> 3) + 1;
            v297 = 8 * (v296 & 0x3FFFFFFFFFFFFFFCLL);
            v298 = &v284[-v297];
            v293 = (_QWORD *)((char *)v293 - v297);
            v299 = &v292[8 * v288 - 16];
            v300 = v284 - 16;
            v301 = v296 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v302 = *(_OWORD *)v300;
              *(v299 - 1) = *((_OWORD *)v300 - 1);
              *v299 = v302;
              v299 -= 2;
              v300 -= 32;
              v301 -= 4;
            }
            while (v301);
            v284 = v298;
            if (v296 != (v296 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_1068:
              do
              {
                v303 = *((_QWORD *)v284 - 1);
                v284 -= 8;
                *--v293 = v303;
              }
              while (v284 != v286);
            }
            v284 = (char *)v722[0];
            v722[0] = v293;
            v722[1] = v285;
            v723 = &v292[8 * v291];
            if (!v284)
              goto LABEL_463;
LABEL_462:
            operator delete(v284);
            goto LABEL_463;
          }
        }
        else
        {
          v292 = 0;
          v293 = (_QWORD *)(8 * v288);
          *(_QWORD *)(8 * v288) = *(_QWORD *)v717[0];
          v285 = (void *)(8 * v288 + 8);
          v294 = v284 - v286;
          if (v284 != v286)
            goto LABEL_451;
        }
        v722[0] = v293;
        v722[1] = v285;
        v723 = &v292[8 * v291];
        if (!v284)
          goto LABEL_463;
        goto LABEL_462;
      }
      v280 = *(_QWORD *)(*v254 + 8);
      if ((v242 & (v242 - 1)) != 0)
      {
        if (v280 >= v242)
          v280 %= v242;
      }
      else
      {
        v280 &= v242 - 1;
      }
      v257 = (char *)__p[0] + 8 * v280;
LABEL_436:
      *v257 = v254;
      goto LABEL_437;
    }
    v258 = (v242 & (v242 - 1)) != 0;
    if (v242 < 3)
      v258 = 1;
    v259 = v258 | (2 * v242);
    v260 = vcvtps_u32_f32(v255 / *(float *)&v726);
    if (v259 <= v260)
      prime = v260;
    else
      prime = v259;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v242 = (unint64_t)__p[1];
    }
    if (prime > v242)
    {
LABEL_381:
      if (prime >> 61)
        sub_20E877A38();
      v262 = operator new(8 * prime);
      v263 = __p[0];
      __p[0] = v262;
      if (v263)
        operator delete(v263);
      v264 = 0;
      __p[1] = (void *)prime;
      do
        *((_QWORD *)__p[0] + v264++) = 0;
      while (prime != v264);
      v265 = (_QWORD **)v725[0];
      if (!v725[0])
        goto LABEL_413;
      v266 = *((_QWORD *)v725[0] + 1);
      v267 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v268 = v266 & v267;
        *((_QWORD *)__p[0] + v268) = v725;
        for (j = *v265; *v265; j = *v265)
        {
          v270 = j[1] & v267;
          if (v270 == v268)
          {
            v265 = (_QWORD **)j;
          }
          else if (*((_QWORD *)__p[0] + v270))
          {
            *v265 = (_QWORD *)*j;
            v271 = 8 * v270;
            *j = **(_QWORD **)((char *)__p[0] + v271);
            **(_QWORD **)((char *)__p[0] + v271) = j;
          }
          else
          {
            *((_QWORD *)__p[0] + v270) = v265;
            v265 = (_QWORD **)j;
            v268 = v270;
          }
        }
        goto LABEL_413;
      }
      if (v266 >= prime)
        v266 %= prime;
      *((_QWORD *)__p[0] + v266) = v725;
      v275 = *v265;
      if (!*v265)
      {
LABEL_413:
        v242 = prime;
        v278 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_414;
        goto LABEL_429;
      }
      while (1)
      {
        v277 = v275[1];
        if (v277 >= prime)
          v277 %= prime;
        if (v277 == v266)
          goto LABEL_407;
        if (*((_QWORD *)__p[0] + v277))
        {
          *v265 = (_QWORD *)*v275;
          v276 = 8 * v277;
          *v275 = **(_QWORD **)((char *)__p[0] + v276);
          **(_QWORD **)((char *)__p[0] + v276) = v275;
          v275 = v265;
LABEL_407:
          v265 = (_QWORD **)v275;
          v275 = (_QWORD *)*v275;
          if (!v275)
            goto LABEL_413;
        }
        else
        {
          *((_QWORD *)__p[0] + v277) = v265;
          v265 = (_QWORD **)v275;
          v275 = (_QWORD *)*v275;
          v266 = v277;
          if (!v275)
            goto LABEL_413;
        }
      }
    }
    if (prime < v242)
    {
      v272 = vcvtps_u32_f32((float)(unint64_t)v725[1] / *(float *)&v726);
      if (v242 < 3 || (v273 = (uint8x8_t)vcnt_s8((int8x8_t)v242), v273.i16[0] = vaddlv_u8(v273), v273.u32[0] > 1uLL))
      {
        v272 = std::__next_prime(v272);
      }
      else
      {
        v274 = 1 << -(char)__clz(v272 - 1);
        if (v272 >= 2)
          v272 = v274;
      }
      if (prime <= v272)
        prime = v272;
      if (prime < v242)
      {
        if (!prime)
        {
          v279 = __p[0];
          __p[0] = 0;
          if (v279)
            operator delete(v279);
          v242 = 0;
          __p[1] = 0;
          v278 = -1;
          goto LABEL_429;
        }
        goto LABEL_381;
      }
      v242 = (unint64_t)__p[1];
    }
    v278 = v242 - 1;
    if ((v242 & (v242 - 1)) != 0)
    {
LABEL_414:
      if (v242 <= v237)
      {
        v24 = v237 % v242;
        v256 = __p[0];
        v257 = (_QWORD *)*((_QWORD *)__p[0] + v237 % v242);
        if (v257)
          goto LABEL_370;
      }
      else
      {
        v24 = v237;
        v256 = __p[0];
        v257 = (_QWORD *)*((_QWORD *)__p[0] + v237);
        if (v257)
          goto LABEL_370;
      }
      goto LABEL_430;
    }
LABEL_429:
    v24 = v278 & v237;
    v256 = __p[0];
    v257 = (_QWORD *)*((_QWORD *)__p[0] + (v278 & v237));
    if (v257)
      goto LABEL_370;
    goto LABEL_430;
  }
  memset(v731, 0, 32);
  *(_DWORD *)&v731[32] = 733223588;
  kdebug_trace();
  v208 = (const double *)(a4 + 24);
  v740 = vld3q_f64(v208);
  _Q4 = *(_OWORD *)(a4 + 72);
  _D6 = *(double *)(a2 + 2960);
  v211 = *(double *)(a2 + 2968);
  _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v740.val[0], *(double *)(a2 + 2952)), v740.val[1], _D6), v740.val[2], v211);
  __asm { FMLA            D0, D6, V4.D[1] }
  v740.val[2].f64[0] = v740.val[0].f64[0] + *(double *)(a4 + 88) * v211;
  _Q0 = vmulq_f64(_Q16, _Q16);
  v740.val[1].f64[0] = _Q16.f64[1];
  v707 = v740.val[2];
  v710 = _Q16;
  __asm { FMLA            D0, D1, V16.D[1] }
  _Q0.f64[0] = sqrt(_Q0.f64[0] + v740.val[2].f64[0] * v740.val[2].f64[0]);
  if (_Q0.f64[0] == 0.0)
    _Q0.f64[0] = 1.0;
  else
    _Q0.f64[0] = 1.0 / _Q0.f64[0];
  v703 = _Q0;
  v216 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 2816) + 16) + 424);
  sub_20F279E20(v216, a5, (char **)__p);
  sub_20F27A540(v216, (uint64_t ***)__p, a2 + 2952, (void **)&v736);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v217 = (void **)(a2 + 3288);
  v218 = *(_QWORD *)(a2 + 2920);
  sub_20F279E20(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 2816) + 16) + 424), a5, (char **)v720);
  v219 = (int8x16_t)vmulq_n_f64(v710, v703.f64[0]);
  v220 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 2816) + 16) + 424) + 8);
  LOBYTE(__p[0]) = 0;
  LOBYTE(v726) = 0;
  v219.i64[1] = vextq_s8(v219, v219, 8uLL).u64[0];
  *(int8x16_t *)v717 = v219;
  *(_QWORD *)&v718 = *(_OWORD *)&vmulq_f64(v707, v703);
  BYTE8(v718) = 1;
  memset(v716, 0, 24);
  v221 = (const void *)v736;
  v222 = *((_QWORD *)&v736 + 1) - v736;
  if (*((_QWORD *)&v736 + 1) != (_QWORD)v736)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v222 >> 3) > 0xAAAAAAAAAAAAAAALL)
      sub_20E9DEF2C();
    v716[0] = operator new(*((_QWORD *)&v736 + 1) - v736);
    v716[2] = (char *)v716[0] + 8 * (v222 >> 3);
    memcpy(v716[0], v221, v222);
    v716[1] = v716[2];
  }
  LOBYTE(v716[3]) = 1;
  v223 = (uint64_t *)sub_20FCBA6DC(v692, *(_DWORD *)a4, *(_DWORD *)(a4 + 4));
  sub_20F23E1A8(v218, (uint64_t)v691, (uint64_t ***)v720, v220, v223, (uint64_t)v717, (uint64_t *)v716, (uint64_t)v722);
  v224 = (char *)*v217;
  if (*v217)
  {
    v225 = *(char **)(a2 + 3296);
    v226 = *v217;
    if (v225 != v224)
    {
      v227 = v225 - 40;
      v228 = v225 - 40;
      do
      {
        v229 = *(void (***)(char *))v228;
        v228 -= 40;
        (*v229)(v227);
        _ZF = v227 == v224;
        v227 = v228;
      }
      while (!_ZF);
      v226 = *v217;
    }
    *(_QWORD *)(a2 + 3296) = v224;
    operator delete(v226);
    *v217 = 0;
    *(_QWORD *)(a2 + 3296) = 0;
    *(_QWORD *)(a2 + 3304) = 0;
  }
  *(_OWORD *)v217 = *(_OWORD *)v722;
  *(_QWORD *)(a2 + 3304) = v723;
  v722[1] = 0;
  v723 = 0;
  v722[0] = 0;
  if (LOBYTE(v716[3]) && v716[0])
  {
    v716[1] = v716[0];
    operator delete(v716[0]);
  }
  if (v720[0])
  {
    v720[1] = v720[0];
    operator delete(v720[0]);
  }
  if ((_QWORD)v736)
  {
    *((_QWORD *)&v736 + 1) = v736;
    operator delete((void *)v736);
  }
  kdebug_trace();
LABEL_836:
  kdebug_trace();
  v539 = *a1;
  v540 = *(_OWORD *)v694;
  *(_DWORD *)(v539 + 208) = *(_DWORD *)(v694 + 16);
  *(_OWORD *)(v539 + 192) = v540;
  if (a7)
  {
    v541 = *(_QWORD *)(a2 + 3296);
    v542 = *(_QWORD *)(a2 + 3288);
    v543 = (v541 - v542) / 40;
    if ((unint64_t)(v541 - v542 + 39) >= 0x4F)
    {
      if (v543 > 0x492492492492492)
        sub_20E867F44();
      v545 = (char *)operator new(56 * v543);
      v544 = &v545[56 * v543];
      v712 = (_QWORD *)v539;
      if (v541 != v542)
        goto LABEL_839;
    }
    else
    {
      v544 = 0;
      v545 = 0;
      v712 = (_QWORD *)v539;
      if (v541 != v542)
      {
LABEL_839:
        v546 = 0;
        v547 = *(_QWORD *)(a2 + 2816);
        if (v543 <= 1)
          v548 = 1;
        else
          v548 = (v541 - v542) / 40;
        v549 = v545;
        v701 = v548;
        while (1)
        {
          v551 = *(_QWORD *)(a2 + 3288);
          v552 = (unint64_t *)(v551 + 40 * v546 + 8);
          if (*(_BYTE *)(a2 + 2499) && *(_QWORD *)(*(_QWORD *)(v547 + 16) + 160) != *v552)
          {
            v550 = *(_QWORD *)(a2 + 2824);
            v570 = *(_QWORD *)(a2 + 2832);
            if (v550 != v570)
            {
              while (1)
              {
                v571 = *(_QWORD *)(v550 + 16);
                if (v571)
                {
                  if (*(_QWORD *)(v571 + 160) == *v552)
                    break;
                }
                v550 += 4472;
                if (v550 == v570)
                  goto LABEL_843;
              }
            }
            if (v550 == v570 || !v550)
            {
LABEL_843:
              v550 = v547;
              goto LABEL_844;
            }
          }
          else
          {
            v550 = v547;
          }
          v553 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v550 + 16) + 424) + 8);
          v556 = *(uint64_t **)(v553 + 8);
          v554 = (uint64_t *)(v553 + 8);
          v555 = v556;
          if (!v556)
            goto LABEL_844;
          v557 = *v552;
          v558 = v551 + 40 * v546;
          v561 = *(_DWORD *)(v558 + 16);
          v559 = (int *)(v558 + 16);
          v560 = v561;
          v562 = v554;
          do
          {
            v563 = v555[4];
            if (v563 < v557)
            {
              ++v555;
            }
            else if (v563 == v557)
            {
              if (*((_DWORD *)v555 + 10) < v560)
                ++v555;
              else
                v562 = v555;
            }
            else
            {
              v562 = v555;
            }
            v555 = (uint64_t *)*v555;
          }
          while (v555);
          if (v562 == v554)
            goto LABEL_844;
          v564 = v562[4];
          if (v557 < v564 || v557 == v564 && v560 < *((_DWORD *)v562 + 10))
            goto LABEL_844;
          v565 = v562[6];
          if (!v565)
            goto LABEL_844;
          v566 = (uint64_t)(*(_QWORD *)(v565 + 208) - *(_QWORD *)(v565 + 200)) >> 5;
          v567 = *(_QWORD *)(v551 + 40 * v546 + 24);
          v568 = *v559;
          if (*(_BYTE *)(v565 + 192))
            v569 = v565 + 40;
          else
            v569 = 0;
          if (v545 >= v544)
          {
            v572 = 0x6DB6DB6DB6DB6DB7 * ((v545 - v549) >> 3) + 1;
            if (v572 > 0x492492492492492)
              sub_20E867F44();
            v705 = v568;
            v709 = v569;
            if (0xDB6DB6DB6DB6DB6ELL * ((v544 - v549) >> 3) > v572)
              v572 = 0xDB6DB6DB6DB6DB6ELL * ((v544 - v549) >> 3);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v544 - v549) >> 3)) >= 0x249249249249249)
              v573 = 0x492492492492492;
            else
              v573 = v572;
            if (v573 > 0x492492492492492)
              sub_20E877A38();
            v574 = (char *)operator new(56 * v573);
            v575 = &v574[8 * ((v545 - v549) >> 3)];
            *((_DWORD *)v575 + 6) = v705;
            *((_DWORD *)v575 + 7) = -1;
            *(_QWORD *)v575 = v566;
            *((_QWORD *)v575 + 1) = &off_24C9E9850;
            *((_QWORD *)v575 + 2) = v557;
            *((_QWORD *)v575 + 4) = v567;
            *((_QWORD *)v575 + 5) = v709;
            v575[48] = 0;
            if (v545 == v549)
            {
              v578 = &v574[8 * ((v545 - v549) >> 3)];
              a2 = v713;
              v544 = &v574[56 * v573];
              v545 = v575 + 56;
              if (v549)
                goto LABEL_887;
            }
            else
            {
              v576 = 0;
              a2 = v713;
              do
              {
                v577 = &v575[v576];
                *((_QWORD *)v577 - 7) = *(_QWORD *)&v545[v576 - 56];
                *(_OWORD *)(v577 - 40) = *(_OWORD *)&v545[v576 - 40];
                *((_QWORD *)v577 - 6) = &off_24C9E9850;
                *(_OWORD *)(v577 - 24) = *(_OWORD *)&v545[v576 - 24];
                *(v577 - 8) = v545[v576 - 8];
                v576 -= 56;
              }
              while (&v545[v576] != v549);
              v578 = &v575[v576];
              v544 = &v574[56 * v573];
              v545 = v575 + 56;
              if (v549)
LABEL_887:
                operator delete(v549);
            }
            v549 = v578;
            v548 = v701;
            goto LABEL_844;
          }
          *((_QWORD *)v545 + 1) = &off_24C9E9850;
          *((_QWORD *)v545 + 2) = v557;
          *((_DWORD *)v545 + 6) = v568;
          *((_DWORD *)v545 + 7) = -1;
          *(_QWORD *)v545 = v566;
          *((_QWORD *)v545 + 4) = v567;
          *((_QWORD *)v545 + 5) = v569;
          v545[48] = 0;
          v545 += 56;
LABEL_844:
          ++v546;
          v547 = v550;
          if (v546 == v548)
            goto LABEL_895;
        }
      }
    }
    v549 = v545;
LABEL_895:
    v579 = 0x6DB6DB6DB6DB6DB7 * ((v545 - v549) >> 3);
    v580 = a7;
    if (v579 <= a7)
    {
      v582 = v712;
    }
    else
    {
      v581 = &v549[56 * a7];
      v582 = v712;
      if (a7 >= 2)
      {
        v583 = (unint64_t)(a7 - 2) >> 1;
        v584 = v583 + 1;
        v585 = (__n128 *)&v549[56 * v583];
        do
        {
          sub_20F340CC0((uint64_t)v549, a7, v585);
          v585 = (__n128 *)((char *)v585 - 56);
          --v584;
        }
        while (v584);
      }
      if (v581 != v545)
      {
        v586 = (uint64_t *)(v549 + 16);
        v587 = v549 + 32;
        v588 = &v549[56 * a7];
        do
        {
          v590 = v588[48];
          v591 = *(_QWORD *)v588;
          v592 = *(_QWORD *)v549;
          if (v588[48])
            v593 = v549[48] == 0;
          else
            v593 = 0;
          if (v593 || (v549[48] ? (v594 = v590 == 0) : (v594 = 0), !v594 ? (v595 = v591 > v592) : (v595 = 0), v595))
          {
            *(_OWORD *)v731 = *((_OWORD *)v588 + 1);
            *(_OWORD *)__p = *((_OWORD *)v588 + 2);
            *(_QWORD *)v588 = v592;
            v589 = *v586;
            *((_DWORD *)v588 + 6) = *((_DWORD *)v549 + 6);
            *((_QWORD *)v588 + 2) = v589;
            *((_OWORD *)v588 + 2) = *v587;
            v588[48] = v549[48];
            *(_QWORD *)v549 = v591;
            *v586 = *(_QWORD *)v731;
            *((_DWORD *)v549 + 6) = *(_DWORD *)&v731[8];
            *v587 = *(_OWORD *)__p;
            v549[48] = v590;
            sub_20F340CC0((uint64_t)v549, a7, (__n128 *)v549);
          }
          v588 += 56;
        }
        while (v588 != v545);
      }
      v580 = a7;
      a2 = v713;
      if (a7 >= 2)
      {
        do
        {
          v597 = 0;
          v598 = *(_QWORD *)v549;
          *(_OWORD *)v717 = *((_OWORD *)v549 + 1);
          *(_OWORD *)v716 = *((_OWORD *)v549 + 2);
          v599 = v549[48];
          v600 = v549;
          do
          {
            v603 = v600;
            v600 += 56 * v597 + 56;
            v604 = 2 * v597;
            v597 = (2 * v597) | 1;
            v605 = v604 + 2;
            if (v605 < v580)
            {
              v606 = v600[48] && v600[104] == 0;
              if (v606
                || (v600[104] ? (v607 = v600[48] == 0) : (v607 = 0),
                    !v607 ? (v608 = *(_QWORD *)v600 > *((_QWORD *)v600 + 7)) : (v608 = 0),
                    v608))
              {
                v600 += 56;
                v597 = v605;
              }
            }
            *(_QWORD *)v603 = *(_QWORD *)v600;
            v601 = v600 + 16;
            v602 = *((_QWORD *)v600 + 2);
            *((_DWORD *)v603 + 6) = *((_DWORD *)v600 + 6);
            *((_QWORD *)v603 + 2) = v602;
            *((_OWORD *)v603 + 2) = *((_OWORD *)v600 + 2);
            v603[48] = v600[48];
          }
          while (v597 <= (uint64_t)((unint64_t)(v580 - 2) >> 1));
          v609 = v600 + 32;
          if (v600 == v581 - 56)
          {
            *(_QWORD *)v600 = v598;
            v596 = v717[0];
            *((_DWORD *)v600 + 6) = v717[1];
            *v601 = v596;
            *v609 = *(_OWORD *)v716;
            v600[48] = v599;
          }
          else
          {
            *(_QWORD *)v600 = *((_QWORD *)v581 - 7);
            v610 = *((_QWORD *)v581 - 5);
            *((_DWORD *)v600 + 6) = *((_DWORD *)v581 - 8);
            *v601 = v610;
            *v609 = *(_OWORD *)(v581 - 24);
            v600[48] = *(v581 - 8);
            *((_QWORD *)v581 - 7) = v598;
            v611 = v717[0];
            *((_DWORD *)v581 - 8) = v717[1];
            *((_QWORD *)v581 - 5) = v611;
            *(_OWORD *)(v581 - 24) = *(_OWORD *)v716;
            *(v581 - 8) = v599;
            v612 = v600 - v549 + 56;
            if (v612 >= 57)
            {
              v613 = v612 / 0x38uLL - 2;
              v614 = v613 >> 1;
              v615 = (unint64_t *)&v549[56 * (v613 >> 1)];
              v616 = v600[48];
              v617 = *(_QWORD *)v600;
              v618 = *v615;
              v619 = *((_BYTE *)v615 + 48) && v600[48] == 0;
              if (v619
                || (v600[48] ? (v620 = *((_BYTE *)v615 + 48) == 0) : (v620 = 0),
                    !v620 ? (v621 = v618 > v617) : (v621 = 0),
                    v621))
              {
                *(_OWORD *)v731 = *(_OWORD *)v601;
                *(_OWORD *)__p = *v609;
                *(_QWORD *)v600 = v618;
                v622 = &v549[56 * v614];
                v624 = *((_QWORD *)v622 + 2);
                v623 = v622 + 16;
                *((_DWORD *)v600 + 6) = *((_DWORD *)v623 + 2);
                *v601 = v624;
                v625 = v623 + 2;
                *v609 = *((_OWORD *)v623 + 1);
                v600[48] = *((_BYTE *)v623 + 32);
                if (v613 >= 2)
                {
                  v626 = v614 - 1;
                  v627 = (v614 - 1) >> 1;
                  v628 = (unint64_t *)&v549[56 * v627];
                  v629 = *((unsigned __int8 *)v628 + 48);
                  v630 = *v628;
                  if (v616)
                  {
                    if (*((_BYTE *)v628 + 48))
                      v631 = v630 > v617;
                    else
                      v631 = 0;
                    if (v631)
                    {
                      do
                      {
                        *v615 = v630;
                        v632 = &v549[56 * v627];
                        v633 = *((_QWORD *)v632 + 2);
                        v623 = v632 + 16;
                        *((_DWORD *)v615 + 6) = *((_DWORD *)v623 + 2);
                        v615[2] = v633;
                        *((_OWORD *)v615 + 2) = *((_OWORD *)v623 + 1);
                        *((_BYTE *)v615 + 48) = *((_BYTE *)v623 + 32);
                        v615 = v628;
                        v625 = v623 + 2;
                        if (v626 < 2)
                          break;
                        v626 = v627 - 1;
                        v627 = (v627 - 1) >> 1;
                        v628 = (unint64_t *)&v549[56 * v627];
                        v630 = *v628;
                      }
                      while (*((_BYTE *)v628 + 48) && v630 > v617);
                    }
                  }
                  else
                  {
                    while (v629 || v630 > v617)
                    {
                      *v615 = v630;
                      v637 = &v549[56 * v627];
                      v638 = *((_QWORD *)v637 + 2);
                      v623 = v637 + 16;
                      *((_DWORD *)v615 + 6) = *((_DWORD *)v623 + 2);
                      v615[2] = v638;
                      *((_OWORD *)v615 + 2) = *((_OWORD *)v623 + 1);
                      *((_BYTE *)v615 + 48) = *((_BYTE *)v623 + 32);
                      v615 = v628;
                      v625 = v623 + 2;
                      if (v626 <= 1)
                        break;
                      v626 = v627 - 1;
                      v627 = (v627 - 1) >> 1;
                      v628 = (unint64_t *)&v549[56 * v627];
                      v629 = *((unsigned __int8 *)v628 + 48);
                      v630 = *v628;
                    }
                  }
                }
                *v615 = v617;
                v635 = *(_QWORD *)v731;
                *((_DWORD *)v623 + 2) = *(_DWORD *)&v731[8];
                *v623 = v635;
                *v625 = *(_OWORD *)__p;
                *((_BYTE *)v615 + 48) = v616;
              }
            }
          }
          v581 -= 56;
          v595 = v580-- <= 2;
        }
        while (!v595);
        v579 = 0x6DB6DB6DB6DB6DB7 * ((v545 - v549) >> 3);
        v580 = a7;
      }
    }
    if (v579 >= v580)
      v639 = v580;
    else
      v639 = v579;
    v641 = (char *)*v582;
    v640 = (char *)v582[1];
    v642 = (uint64_t)&v640[-*v582] >> 7;
    v643 = v639 - v642;
    if (v639 > v642)
    {
      v644 = v582[2];
      if (v643 <= (v644 - (uint64_t)v640) >> 7)
      {
        v676 = &v640[128 * v643];
        do
        {
          *(_OWORD *)v640 = 0uLL;
          *((_OWORD *)v640 + 1) = 0uLL;
          *((_OWORD *)v640 + 4) = 0uLL;
          *((_OWORD *)v640 + 5) = 0uLL;
          *((_OWORD *)v640 + 6) = 0uLL;
          *((_OWORD *)v640 + 7) = 0uLL;
          *((_OWORD *)v640 + 2) = 0uLL;
          *((_OWORD *)v640 + 3) = 0uLL;
          *(_QWORD *)(v640 + 12) = -1;
          *(_QWORD *)(v640 + 20) = -1;
          *((_QWORD *)v640 + 8) = 0;
          *((_QWORD *)v640 + 9) = 0;
          *((_QWORD *)v640 + 10) = 0;
          v640 += 128;
        }
        while (v640 != v676);
        v582[1] = v676;
      }
      else
      {
        if (v639 >> 57)
          sub_20E867F44();
        v645 = v644 - (_QWORD)v641;
        v646 = (v644 - (uint64_t)v641) >> 6;
        if (v646 <= v639)
          v646 = v639;
        if (v645 >= 0x7FFFFFFFFFFFFF80)
          v647 = 0x1FFFFFFFFFFFFFFLL;
        else
          v647 = v646;
        if (v647 >> 57)
          sub_20E877A38();
        v648 = (char *)operator new(v647 << 7);
        v649 = &v648[128 * v642];
        v650 = &v648[128 * v639];
        v651 = v649;
        do
        {
          *(_OWORD *)v651 = 0uLL;
          *((_OWORD *)v651 + 1) = 0uLL;
          *((_OWORD *)v651 + 4) = 0uLL;
          *((_OWORD *)v651 + 5) = 0uLL;
          *((_OWORD *)v651 + 6) = 0uLL;
          *((_OWORD *)v651 + 7) = 0uLL;
          *((_OWORD *)v651 + 2) = 0uLL;
          *((_OWORD *)v651 + 3) = 0uLL;
          *(_QWORD *)(v651 + 12) = -1;
          *(_QWORD *)(v651 + 20) = -1;
          *((_QWORD *)v651 + 8) = 0;
          *((_QWORD *)v651 + 9) = 0;
          *((_QWORD *)v651 + 10) = 0;
          v651 += 128;
        }
        while (v651 != v650);
        if (v640 != v641)
        {
          v652 = 0;
          do
          {
            v656 = &v649[v652];
            v657 = &v640[v652];
            *((_QWORD *)v656 - 16) = *(_QWORD *)&v640[v652 - 128];
            v658 = *(_OWORD *)&v640[v652 - 120];
            *(_OWORD *)(v656 - 111) = *(_OWORD *)&v640[v652 - 111];
            *(_OWORD *)(v656 - 120) = v658;
            v649[v652 - 88] = 0;
            *(v656 - 72) = 0;
            if (v640[v652 - 72])
            {
              *(_OWORD *)&v649[v652 - 88] = *(_OWORD *)(v657 - 88);
              *(v656 - 72) = 1;
            }
            v653 = *((_OWORD *)v657 - 4);
            *((_QWORD *)v656 - 6) = *((_QWORD *)v657 - 6);
            *((_OWORD *)v656 - 4) = v653;
            v654 = *(_OWORD *)(v657 - 40);
            v655 = *(_OWORD *)(v657 - 24);
            *((_DWORD *)v656 - 2) = *((_DWORD *)v657 - 2);
            *(_OWORD *)(v656 - 24) = v655;
            *(_OWORD *)(v656 - 40) = v654;
            *(v656 - 4) = *(v657 - 4);
            v652 -= 128;
          }
          while (&v640[v652] != v641);
          v649 += v652;
          v640 = v641;
        }
        *v582 = v649;
        v582[1] = v650;
        v582[2] = &v648[128 * v647];
        if (v640)
          operator delete(v640);
      }
LABEL_1028:
      v677 = (float *)(*v582 + 124);
      v678 = (float *)(v549 + 32);
      do
      {
        *(_QWORD *)(v677 - 31) = *(_QWORD *)(*(_QWORD *)v678 + 8);
        v684 = *(double *)(a2 + 464) * *(float *)(*(_QWORD *)v678 + 32);
        *(v677 - 29) = v684;
        v685 = *((_QWORD *)v678 - 2);
        *(v677 - 25) = *(v678 - 2);
        *(_QWORD *)(v677 - 27) = v685;
        v686 = *(_QWORD *)v678;
        *(v677 - 28) = *(float *)(*(_QWORD *)v678 + 4);
        *((_BYTE *)v677 - 92) = *((_BYTE *)v678 + 16);
        v687 = *((unsigned __int8 *)v677 - 68);
        *(_OWORD *)(v677 - 21) = *(_OWORD *)(v686 + 16);
        if (!v687)
          *((_BYTE *)v677 - 68) = 1;
        v679 = *((_QWORD *)v678 + 1);
        *(_BYTE *)v677 = *(_BYTE *)(v679 + 148);
        v680 = *(_OWORD *)(v679 + 8);
        *(_QWORD *)(v677 - 11) = *(_QWORD *)(v679 + 24);
        *(_OWORD *)(v677 - 15) = v680;
        v681 = *((_QWORD *)v678 + 1);
        v678 += 14;
        v682 = *(_OWORD *)(v681 + 112);
        v683 = *(_OWORD *)(v681 + 128);
        *(v677 - 1) = *(float *)(v681 + 144);
        *(_OWORD *)(v677 - 5) = v683;
        *(_OWORD *)(v677 - 9) = v682;
        v677 += 32;
        --v639;
      }
      while (v639);
      goto LABEL_995;
    }
    if (v639 < v642)
      v582[1] = &v641[128 * v639];
    if (v639)
      goto LABEL_1028;
    if (v549)
LABEL_995:
      operator delete(v549);
  }
  else
  {
    *(_QWORD *)(v539 + 8) = *(_QWORD *)v539;
  }
  v659 = v693[15];
  v660 = v693[16];
  memset(v731, 0, 24);
  v661 = v660 - v659;
  if (v661)
  {
    v662 = 0xCCCCCCCCCCCCCCCDLL * (v661 >> 3);
    if (v662 >> 60)
      sub_20E867F44();
    v663 = (char *)operator new(0xCCCCCCCCCCCCCCD0 * (v661 >> 3));
    *(_QWORD *)v731 = v663;
    *(_QWORD *)&v731[8] = v663;
    *(_QWORD *)&v731[16] = &v663[16 * v662];
    v665 = (_OWORD *)v693[15];
    for (k = (_OWORD *)v693[16]; v665 != k; v663 = v666)
    {
      if ((unint64_t)v663 < *(_QWORD *)&v731[16])
      {
        *(_OWORD *)v663 = *v665;
        v666 = v663 + 16;
      }
      else
      {
        v667 = *(char **)v731;
        v668 = (uint64_t)&v663[-*(_QWORD *)v731] >> 4;
        v669 = v668 + 1;
        if ((unint64_t)(v668 + 1) >> 60)
          sub_20E867F44();
        v670 = *(_QWORD *)&v731[16] - *(_QWORD *)v731;
        if ((uint64_t)(*(_QWORD *)&v731[16] - *(_QWORD *)v731) >> 3 > v669)
          v669 = v670 >> 3;
        if ((unint64_t)v670 >= 0x7FFFFFFFFFFFFFF0)
          v671 = 0xFFFFFFFFFFFFFFFLL;
        else
          v671 = v669;
        if (v671)
        {
          if (v671 >> 60)
            sub_20E877A38();
          v672 = (char *)operator new(16 * v671);
        }
        else
        {
          v672 = 0;
        }
        v673 = &v672[16 * v668];
        *(_OWORD *)v673 = *v665;
        v666 = v673 + 16;
        if (v663 == v667)
        {
          *(_QWORD *)v731 = v673;
          *(_QWORD *)&v731[8] = v673 + 16;
          *(_QWORD *)&v731[16] = &v672[16 * v671];
        }
        else
        {
          do
          {
            v674 = *((_QWORD *)v663 - 2);
            v663 -= 16;
            v675 = *((_DWORD *)v663 + 2);
            *((_QWORD *)v673 - 2) = v674;
            v673 -= 16;
            *((_DWORD *)v673 + 2) = v675;
          }
          while (v663 != v667);
          v663 = *(char **)v731;
          *(_QWORD *)v731 = v673;
          *(_QWORD *)&v731[8] = v666;
          *(_QWORD *)&v731[16] = &v672[16 * v671];
          if (!v663)
            goto LABEL_1001;
        }
        operator delete(v663);
      }
LABEL_1001:
      *(_QWORD *)&v731[8] = v666;
      v665 = (_OWORD *)((char *)v665 + 40);
    }
  }
  sub_20F327218(v713, (uint64_t **)v731, *a1 + 168);
  if (*(_QWORD *)v731)
  {
    *(_QWORD *)&v731[8] = *(_QWORD *)v731;
    operator delete(*(void **)v731);
  }
}

void sub_20F33D230(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60)
{
  uint64_t v60;

  if (*(_BYTE *)(v60 - 152) && *(char *)(v60 - 153) < 0)
    operator delete(*(void **)(v60 - 176));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a59);
  JUMPOUT(0x20F33D560);
}

void sub_20F33D48C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_20F33D4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_20E86665C(a21);
  _Unwind_Resume(a1);
}

void sub_20F33D4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  void *v21;

  if (v21)
  {
    operator delete(v21);
    sub_20E86665C(a21);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F33D6BCLL);
}

void sub_20F33D4E8(void *a1)
{
  std::mutex *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  sub_20F34819C(v1, v2);
  __cxa_rethrow();
}

void sub_20F33D500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  __cxa_end_catch();
  sub_20E86665C((uint64_t)&a59);
  sub_20F345428(&a45);
  sub_20E86665C(v59 - 256);
  _Unwind_Resume(a1);
}

void sub_20F33D52C()
{
  JUMPOUT(0x20F33D5B8);
}

void sub_20F33D534(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (__p)
    operator delete(__p);
  if (a51)
    operator delete(a51);
  sub_20E8C25A8((uint64_t)&a59);
  if (a55)
    JUMPOUT(0x20F33D5FCLL);
  JUMPOUT(0x20F33D600);
}

void sub_20F33D55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,char a55,_QWORD *a56)
{
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20E86872C((uint64_t)&a55, a56);
  if (a35)
    operator delete(a35);
  sub_20F33D810((uint64_t)&a39);
  sub_20E8E69C4((uint64_t)&a45);
  sub_20E86665C(a21);
  _Unwind_Resume(a1);
}

void sub_20F33D578(void *a1)
{
  uint64_t v1;

  sub_20E869230(v1 - 256);
  sub_20E86665C(v1 - 176);
  sub_20E860DA4(a1);
}

void sub_20F33D594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a35)
    operator delete(a35);
  sub_20F33D810(&a39);
  sub_20E8E69C4(&a45);
  sub_20E86665C(a21);
  _Unwind_Resume(a1);
}

void sub_20F33D5A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (__p)
    operator delete(__p);
  if (a45)
    JUMPOUT(0x20F33D5C4);
  JUMPOUT(0x20F33D5D8);
}

void sub_20F33D618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,_QWORD *a56)
{
  void *v56;

  operator delete(v56);
  sub_20F346744(a56);
  if (a35)
    operator delete(a35);
  sub_20F33D810((uint64_t)&a39);
  sub_20E8E69C4((uint64_t)&a45);
  sub_20E86665C(a21);
  _Unwind_Resume(a1);
}

void sub_20F33D62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;

  MEMORY[0x212BC6398](v59, 0x10D0C40B950D02ALL);
  sub_20E863714(&a59);
  JUMPOUT(0x20F33D7E0);
}

void sub_20F33D64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;

  sub_20E86E658(v59 - 256);
  sub_20E863714((uint64_t)&a59);
  JUMPOUT(0x20F33D7E0);
}

void sub_20F33D674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  void *v60;

  v60 = *(void **)(v59 - 256);
  if (v60)
    os_release(v60);
  sub_20E863714((uint64_t)&a59);
  JUMPOUT(0x20F33D7E0);
}

void sub_20F33D67C()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 225) < 0)
    operator delete(*(void **)(v0 - 248));
  v1 = *(void **)(v0 - 256);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F33D7A8);
}

void sub_20F33D688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60)
{
  uint64_t v60;
  void *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;

  if (__p)
  {
    a60 = (uint64_t)__p;
    operator delete(__p);
    if (!*(_QWORD *)(v60 - 232))
    {
LABEL_3:
      v62 = a35;
      if (!a35)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if (!*(_QWORD *)(v60 - 232))
  {
    goto LABEL_3;
  }
  v63 = 0;
  do
  {
    if ((*(char *)(*(_QWORD *)(v60 - 256) + v63) & 0x80000000) == 0)
    {
      v64 = *(std::__shared_weak_count **)(*(_QWORD *)(v60 - 248) + 32 * v63 + 24);
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(p_shared_owners);
        while (__stlxr(v66 - 1, p_shared_owners));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
    }
    ++v63;
  }
  while (v63 != *(_QWORD *)(v60 - 232));
  operator delete(*(void **)(v60 - 256));
  v62 = a35;
  if (!a35)
  {
LABEL_5:
    sub_20F33D810((uint64_t)&a39);
    sub_20E8E69C4((uint64_t)&a45);
    sub_20E86665C(a21);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v62);
  goto LABEL_5;
}

void sub_20F33D764()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 256);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F33D7A8);
}

void sub_20F33D76C()
{
  JUMPOUT(0x20F33D77CLL);
}

void sub_20F33D7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)(v21 - 256);
  if (v23)
  {
    *(_QWORD *)(v21 - 248) = v23;
    operator delete(v23);
    sub_20E86665C(a21);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F33D6BCLL);
}

uint64_t sub_20F33D810(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = (_QWORD *)(a1 + 8);
    do
    {
      if ((*(char *)(*(_QWORD *)a1 + v2) & 0x80000000) == 0)
      {
        v4 = *(std::__shared_weak_count **)(*v3 + 32 * v2 + 24);
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
      ++v2;
    }
    while (v2 != *(_QWORD *)(a1 + 24));
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = &unk_2102DAFF0;
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
  }
  return a1;
}

void sub_20F33D8C8(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  void *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;

  v2 = *(_QWORD *)(a1 + 2824);
  v3 = *(_QWORD *)(a1 + 2832);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v2 + 16);
      if (v4)
      {
        if (*(_QWORD *)(v4 + 160) == *(_QWORD *)a2)
          break;
      }
      v2 += 4472;
      if (v2 == v3)
        return;
    }
  }
  if (v2 != v3 && v2 != 0)
  {
    sub_20F23A0A0(**(_QWORD ***)(*(_QWORD *)(v2 + 16) + 424), a2, &v28);
    v6 = v28;
    v7 = v29;
    if (v28 == v29)
    {
      if (v28)
        goto LABEL_12;
      return;
    }
    while (1)
    {
      v9 = *(_QWORD *)v6;
      v10 = *((_DWORD *)v6 + 2);
      v11 = *((_DWORD *)v6 + 4);
      v12 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 424);
      v14 = *(char **)(v12 + 40);
      v13 = *(char **)(v12 + 48);
      if (v13 != v14)
        break;
LABEL_29:
      if (v14 == v13)
      {
        v22 = v13;
      }
      else
      {
        v21 = *(_QWORD *)v14;
        v22 = v13;
        if (*(_DWORD *)(*(_QWORD *)v14 + 16) == v11)
        {
          v22 = v13;
          if (*(_QWORD *)v21 == v9)
          {
            if (*(_DWORD *)(v21 + 8) == v10)
              v22 = v14;
            else
              v22 = v13;
          }
        }
      }
      if (v13 != v22)
      {
        v23 = *(_QWORD *)v22;
        if (*(_BYTE *)(*(_QWORD *)v22 + 488))
        {
          v24 = *(_QWORD *)(v23 + 464);
          if (v24)
          {
            v25 = *(_QWORD *)(v23 + 472);
            v8 = *(void **)(v23 + 464);
            if (v25 != v24)
            {
              do
              {
                v26 = *(void **)(v25 - 32);
                if (v26)
                {
                  *(_QWORD *)(v25 - 24) = v26;
                  operator delete(v26);
                }
                v27 = *(void **)(v25 - 56);
                if (v27)
                {
                  *(_QWORD *)(v25 - 48) = v27;
                  operator delete(v27);
                }
                v25 -= 64;
              }
              while (v25 != v24);
              v8 = *(void **)(v23 + 464);
            }
            *(_QWORD *)(v23 + 472) = v24;
            operator delete(v8);
          }
          *(_BYTE *)(v23 + 488) = 0;
        }
      }
      v6 += 24;
      if (v6 == v7)
      {
        v6 = v28;
        if (!v28)
          return;
LABEL_12:
        v29 = v6;
        operator delete(v6);
        return;
      }
    }
    v15 = (v13 - v14) >> 4;
    while (1)
    {
      v16 = v15 >> 1;
      v17 = (uint64_t *)&v14[16 * (v15 >> 1)];
      v18 = *v17;
      v19 = *(_DWORD *)(*v17 + 16);
      v20 = v19 >= v11;
      if (v19 != v11)
        goto LABEL_26;
      if (*(_QWORD *)v18 >= v9)
        break;
LABEL_20:
      v14 = (char *)(v17 + 2);
      v16 = v15 + ~v16;
LABEL_21:
      v15 = v16;
      if (!v16)
        goto LABEL_29;
    }
    if (*(_QWORD *)v18 != v9)
      goto LABEL_21;
    v20 = *(_DWORD *)(v18 + 8) >= v10;
LABEL_26:
    if (v20)
      goto LABEL_21;
    goto LABEL_20;
  }
}

uint64_t sub_20F33DAAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v2 = 0x3175B2258D8284CFLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0xEA79D149BB4E4)
    sub_20E867F44();
  if (0x62EB644B1B05099ELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x62EB644B1B05099ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x3175B2258D8284CFLL * ((a1[2] - *a1) >> 3)) >= 0x753CE8A4DDA72)
    v6 = 0xEA79D149BB4E4;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0xEA79D149BB4E4)
      sub_20E877A38();
    v7 = (char *)operator new(4472 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[4472 * v6];
  v9 = sub_20F314370((uint64_t)&v7[4472 * v2], a2);
  v10 = v9 + 4472;
  v12 = (char *)*a1;
  v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = (uint64_t)v8;
    if (!v11)
      return v10;
    goto LABEL_16;
  }
  do
  {
    v11 -= 4472;
    v9 = sub_20F314370(v9 - 4472, (uint64_t)v11);
  }
  while (v11 != v12);
  v11 = (char *)*a1;
  v13 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = (uint64_t)v8;
  while ((char *)v13 != v11)
  {
    v13 -= 4472;
    sub_20F3122B4(v13);
  }
  if (v11)
LABEL_16:
    operator delete(v11);
  return v10;
}

void sub_20F33DC04(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68898);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68898))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68890);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68898);
  }
  *a1 = qword_254A68890;
}

void sub_20F33DCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68898);
  _Unwind_Resume(a1);
}

__n128 sub_20F33DCF8(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  int v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  __int32 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  unsigned __int32 v45;
  __int32 v46;
  __n128 v47;
  __n128 *v48;
  unint64_t v49;
  __n128 *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  int v56;
  __n128 v57;
  __n128 v58;
  uint64_t v59;
  __int32 v60;
  __n128 v61;
  unsigned __int32 v62;
  __int32 v63;
  __n128 v64;
  unint64_t v65;
  unint64_t v66;
  __n128 v67;
  uint64_t v68;
  __n128 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  __n128 v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  __n128 v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __n128 v85;
  unint64_t v86;
  unint64_t v87;
  __n128 *v88;
  unint64_t v89;
  __n128 *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __n128 v94;
  __n128 *v95;
  __n128 *v96;
  __n128 *v97;
  __n128 *v98;
  unint64_t v99;
  unsigned __int32 v100;
  unsigned __int32 v101;
  uint64_t v102;
  uint64_t v103;
  __n128 *v104;
  BOOL v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  __n128 *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int64_t v114;
  int64_t v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __n128 v135;
  uint64_t v136;
  unint64_t v137;
  __n128 *v138;
  unint64_t v139;
  __n128 *v140;
  unsigned __int32 v141;
  __int32 v142;
  __n128 *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  __int32 v147;
  __n128 v148;
  __n128 v149;
  __int128 v150;
  __n128 v151;
  __n128 v152;
  __n128 v153;
  __n128 v154;
  __n128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;
  __int128 v172;
  __int128 v173;
  __n128 v174;
  __n128 v175;
  __int128 v176;
  __n128 v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;

BOOL sub_20F33EC74(uint64_t a1, _OWORD *a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 *v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 v14;
  __n128 *v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  int v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  _OWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  __n128 v57;
  uint64_t v58;
  int v59;
  __int128 v60;

  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (__n128 *)((char *)a2 - 24);
      if (*((_QWORD *)a2 - 3) < *(_QWORD *)a1)
        goto LABEL_9;
      return result;
    case 3uLL:
      v15 = (__n128 *)(a1 + 24);
      v16 = *(_QWORD *)(a1 + 24);
      v7 = (__n128 *)((char *)a2 - 24);
      v17 = *((_QWORD *)a2 - 3);
      if (v16 >= *(_QWORD *)a1)
      {
        if (v17 < v16)
        {
          v39 = *v15;
          v40 = *(_QWORD *)(a1 + 40);
          v41 = *((_DWORD *)a2 - 2);
          *v15 = *v7;
          *(_DWORD *)(a1 + 40) = v41;
          *((_DWORD *)a2 - 2) = v40;
          *v7 = v39;
          if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
          {
            v42 = *(_QWORD *)(a1 + 16);
            v43 = *(__n128 *)a1;
            *(__n128 *)a1 = *v15;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *v15 = v43;
            *(_DWORD *)(a1 + 40) = v42;
          }
        }
      }
      else if (v17 >= v16)
      {
        v55 = *(_QWORD *)(a1 + 16);
        v56 = *(__n128 *)a1;
        *(__n128 *)a1 = *v15;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
        *v15 = v56;
        *(_DWORD *)(a1 + 40) = v55;
        if (v7->n128_u64[0] < *(_QWORD *)(a1 + 24))
        {
          v57 = *v15;
          v58 = *(_QWORD *)(a1 + 40);
          v59 = *((_DWORD *)a2 - 2);
          *v15 = *v7;
          *(_DWORD *)(a1 + 40) = v59;
          *((_DWORD *)a2 - 2) = v58;
          *v7 = v57;
        }
      }
      else
      {
LABEL_9:
        v18 = *(__n128 *)a1;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = v7[1].n128_i32[0];
        *(__n128 *)a1 = *v7;
        *(_DWORD *)(a1 + 16) = v20;
        v7[1].n128_u32[0] = v19;
        *v7 = v18;
      }
      return result;
    case 4uLL:
      sub_20F33F0B8((__n128 *)a1, (_QWORD *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)((char *)a2 - 24), a3);
      return 1;
    case 5uLL:
      v21 = (__n128 *)(a1 + 24);
      v22 = (__n128 *)(a1 + 48);
      v23 = (__n128 *)(a1 + 72);
      sub_20F33F0B8((__n128 *)a1, (_QWORD *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), a3);
      v25 = *((_QWORD *)a2 - 3);
      v24 = (__n128 *)((char *)a2 - 24);
      if (v25 < *(_QWORD *)(a1 + 72))
      {
        v26 = *v23;
        v27 = *(_QWORD *)(a1 + 88);
        v28 = v24[1].n128_i32[0];
        *v23 = *v24;
        *(_DWORD *)(a1 + 88) = v28;
        v24[1].n128_u32[0] = v27;
        *v24 = v26;
        if (v23->n128_u64[0] < v22->n128_u64[0])
        {
          v29 = *(_QWORD *)(a1 + 64);
          v30 = *v22;
          *v22 = *v23;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
          *v23 = v30;
          *(_DWORD *)(a1 + 88) = v29;
          if (v22->n128_u64[0] < v21->n128_u64[0])
          {
            v31 = *(_QWORD *)(a1 + 40);
            v32 = *v21;
            *v21 = *v22;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
            *v22 = v32;
            *(_DWORD *)(a1 + 64) = v31;
            if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
            {
              v33 = *(_QWORD *)(a1 + 16);
              v34 = *(__n128 *)a1;
              *(__n128 *)a1 = *v21;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
              *v21 = v34;
              *(_DWORD *)(a1 + 40) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (__n128 *)(a1 + 48);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = (__n128 *)(a1 + 24);
      v11 = *(_QWORD *)(a1 + 24);
      v12 = *(_QWORD *)a1;
      if (v11 >= *(_QWORD *)a1)
      {
        if (v9 < v11)
        {
          v35 = *(_QWORD *)(a1 + 40);
          v36 = *v10;
          *v10 = *v8;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *v8 = v36;
          *(_DWORD *)(a1 + 64) = v35;
          if (v10->n128_u64[0] < v12)
          {
            v37 = *(_QWORD *)(a1 + 16);
            v38 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *v10 = v38;
            *(_DWORD *)(a1 + 40) = v37;
          }
        }
      }
      else if (v9 >= v11)
      {
        v44 = *(_QWORD *)(a1 + 16);
        v45 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
        *v10 = v45;
        *(_DWORD *)(a1 + 40) = v44;
        if (v9 < *(_QWORD *)(a1 + 24))
        {
          v46 = *(_QWORD *)(a1 + 40);
          v47 = *v10;
          *v10 = *v8;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *v8 = v47;
          *(_DWORD *)(a1 + 64) = v46;
        }
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 16);
        v14 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
        *v8 = v14;
        *(_DWORD *)(a1 + 64) = v13;
      }
      v48 = (_OWORD *)(a1 + 72);
      if ((_OWORD *)(a1 + 72) == a2)
        return 1;
      v49 = 0;
      v50 = 0;
      break;
  }
  while (1)
  {
    v52 = *(_QWORD *)v48;
    if (*(_QWORD *)v48 < v8->n128_u64[0])
    {
      v60 = *(_OWORD *)((char *)v48 + 8);
      v53 = v49;
      do
      {
        v54 = a1 + v53;
        *(_OWORD *)(v54 + 72) = *(_OWORD *)(a1 + v53 + 48);
        *(_DWORD *)(v54 + 88) = *(_DWORD *)(a1 + v53 + 64);
        if (v53 == -48)
        {
          v51 = a1;
          goto LABEL_27;
        }
        v53 -= 24;
      }
      while (v52 < *(_QWORD *)(v54 + 24));
      v51 = a1 + v53 + 72;
LABEL_27:
      *(_QWORD *)v51 = v52;
      *(_QWORD *)(v51 + 8) = v60;
      *(_DWORD *)(v51 + 16) = DWORD2(v60);
      if (++v50 == 8)
        return (_OWORD *)((char *)v48 + 24) == a2;
    }
    v8 = (__n128 *)v48;
    v49 += 24;
    v48 = (_OWORD *)((char *)v48 + 24);
    if (v48 == a2)
      return 1;
  }
}

__n128 sub_20F33F0B8(__n128 *a1, _QWORD *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int32 v8;
  uint64_t v9;
  unsigned __int32 v10;
  unint64_t v11;
  unsigned __int32 v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  unint64_t v16;
  unsigned __int32 v17;
  uint64_t v18;
  unsigned __int32 v19;
  unint64_t v20;
  unsigned __int32 v21;

  v5 = *a2;
  v6 = a3->n128_u64[0];
  if (*a2 >= a1->n128_u64[0])
  {
    if (v6 < v5)
    {
      result = *(__n128 *)a2;
      v9 = a2[2];
      v10 = a3[1].n128_u32[0];
      *(__n128 *)a2 = *a3;
      *((_DWORD *)a2 + 4) = v10;
      a3[1].n128_u32[0] = v9;
      *a3 = result;
      if (*a2 < a1->n128_u64[0])
      {
        result = *a1;
        v11 = a1[1].n128_u64[0];
        v12 = *((_DWORD *)a2 + 4);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u32[0] = v12;
        *((_DWORD *)a2 + 4) = v11;
        *(__n128 *)a2 = result;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      v7 = a1[1].n128_u64[0];
      v8 = a3[1].n128_u32[0];
      *a1 = *a3;
      a1[1].n128_u32[0] = v8;
LABEL_9:
      a3[1].n128_u32[0] = v7;
      *a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    v13 = a1[1].n128_u64[0];
    v14 = *((_DWORD *)a2 + 4);
    *a1 = *(__n128 *)a2;
    a1[1].n128_u32[0] = v14;
    *((_DWORD *)a2 + 4) = v13;
    *(__n128 *)a2 = result;
    if (a3->n128_u64[0] < *a2)
    {
      result = *(__n128 *)a2;
      v7 = a2[2];
      v15 = a3[1].n128_u32[0];
      *(__n128 *)a2 = *a3;
      *((_DWORD *)a2 + 4) = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (a4->n128_u64[0] < a3->n128_u64[0])
  {
    result = *a3;
    v16 = a3[1].n128_u64[0];
    v17 = a4[1].n128_u32[0];
    *a3 = *a4;
    a3[1].n128_u32[0] = v17;
    a4[1].n128_u32[0] = v16;
    *a4 = result;
    if (a3->n128_u64[0] < *a2)
    {
      result = *(__n128 *)a2;
      v18 = a2[2];
      v19 = a3[1].n128_u32[0];
      *(__n128 *)a2 = *a3;
      *((_DWORD *)a2 + 4) = v19;
      a3[1].n128_u32[0] = v18;
      *a3 = result;
      if (*a2 < a1->n128_u64[0])
      {
        result = *a1;
        v20 = a1[1].n128_u64[0];
        v21 = *((_DWORD *)a2 + 4);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u32[0] = v21;
        *((_DWORD *)a2 + 4) = v20;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_20F33F240(unint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 result;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 *v29;
  unint64_t v30;
  __n128 *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 *v42;
  unint64_t v43;
  __int128 *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __n128 *v85;
  __n128 *v86;
  __n128 *v87;
  uint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  int64_t v103;
  BOOL v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t *v109;
  unint64_t v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  __n128 v140;
  __n128 v141;
  __n128 v142;
  __n128 v143;
  __n128 v144;
  __n128 v145;
  __n128 v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  __n128 v150;
  __n128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __n128 v156;
  __n128 v157;
  __n128 v158;
  __n128 v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __n128 v163;
  __n128 v164;
  __n128 v165;
  __n128 v166;
  __n128 v167;
  __n128 v168;
  __n128 v169;
  __n128 v170;
  __n128 v171;

BOOL sub_20F33FFF4(__int128 *a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __n128 v40;
  __n128 v41;
  __int128 v42;
  __n128 v43;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      if (*((_QWORD *)a2 - 2) < *(_QWORD *)a1)
        goto LABEL_7;
      return result;
    case 3:
      v7 = a1 + 1;
      v8 = *((_QWORD *)a1 + 2);
      v6 = a2 - 1;
      v9 = *((_QWORD *)a2 - 2);
      if (v8 >= *(_QWORD *)a1)
      {
        if (v9 < v8)
        {
          v38 = *v7;
          v22 = *((_DWORD *)a2 - 2);
          *(_QWORD *)v7 = *(_QWORD *)v6;
          *((_DWORD *)a1 + 6) = v22;
          *(_QWORD *)v6 = v38;
          *((_DWORD *)a2 - 2) = DWORD2(v38);
          if (*((_QWORD *)a1 + 2) < *(_QWORD *)a1)
          {
            v39 = *a1;
            *(_QWORD *)a1 = *(_QWORD *)v7;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
            *(_QWORD *)v7 = v39;
            *((_DWORD *)a1 + 6) = DWORD2(v39);
          }
        }
      }
      else
      {
        if (v9 < v8)
        {
LABEL_7:
          v32 = *a1;
          v10 = *((_DWORD *)v6 + 2);
          *(_QWORD *)a1 = *(_QWORD *)v6;
          *((_DWORD *)a1 + 2) = v10;
LABEL_8:
          *(_QWORD *)v6 = v32;
          *((_DWORD *)v6 + 2) = DWORD2(v32);
          return result;
        }
        v42 = *a1;
        *(_QWORD *)a1 = *(_QWORD *)v7;
        *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
        *(_QWORD *)v7 = v42;
        *((_DWORD *)a1 + 6) = DWORD2(v42);
        if (*(_QWORD *)v6 < *((_QWORD *)a1 + 2))
        {
          v32 = *v7;
          v23 = *((_DWORD *)a2 - 2);
          *(_QWORD *)v7 = *(_QWORD *)v6;
          *((_DWORD *)a1 + 6) = v23;
          goto LABEL_8;
        }
      }
      return result;
    case 4:
      sub_20F3404A8((__n128 *)a1, (__n128 *)a1 + 1, a1 + 2, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      v16 = a1 + 1;
      v17 = a1 + 2;
      v18 = a1 + 3;
      sub_20F3404A8((__n128 *)a1, (__n128 *)a1 + 1, a1 + 2, (uint64_t)(a1 + 3));
      v20 = *((_QWORD *)a2 - 2);
      v19 = a2 - 1;
      if (v20 < *((_QWORD *)a1 + 6))
      {
        v34 = *v18;
        v21 = *((_DWORD *)v19 + 2);
        *(_QWORD *)v18 = *(_QWORD *)v19;
        *((_DWORD *)a1 + 14) = v21;
        *(_QWORD *)v19 = v34;
        *((_DWORD *)v19 + 2) = DWORD2(v34);
        if (*(_QWORD *)v18 < *(_QWORD *)v17)
        {
          v35 = *v17;
          *(_QWORD *)v17 = *(_QWORD *)v18;
          *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 14);
          *(_QWORD *)v18 = v35;
          *((_DWORD *)a1 + 14) = DWORD2(v35);
          if (*(_QWORD *)v17 < *(_QWORD *)v16)
          {
            v36 = *v16;
            *(_QWORD *)v16 = *(_QWORD *)v17;
            *((_DWORD *)a1 + 6) = *((_DWORD *)a1 + 10);
            *(_QWORD *)v17 = v36;
            *((_DWORD *)a1 + 10) = DWORD2(v36);
            if (*((_QWORD *)a1 + 2) < *(_QWORD *)a1)
            {
              v37 = (__n128)*a1;
              *(_QWORD *)a1 = *(_QWORD *)v16;
              *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
              *(_QWORD *)v16 = v37.n128_u64[0];
              *((_DWORD *)a1 + 6) = v37.n128_u32[2];
            }
          }
        }
      }
      return 1;
    default:
      v11 = (unint64_t *)(a1 + 2);
      v12 = *((_QWORD *)a1 + 4);
      v13 = (__n128 *)(a1 + 1);
      v14 = *((_QWORD *)a1 + 2);
      v15 = *(_QWORD *)a1;
      if (v14 >= *(_QWORD *)a1)
      {
        if (v12 < v14)
        {
          v40 = *v13;
          v13->n128_u64[0] = *v11;
          *((_DWORD *)a1 + 6) = *((_DWORD *)a1 + 10);
          *v11 = v40.n128_u64[0];
          *((_DWORD *)a1 + 10) = v40.n128_u32[2];
          if (v13->n128_u64[0] < v15)
          {
            v41 = (__n128)*a1;
            *(_QWORD *)a1 = v13->n128_u64[0];
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
            v13->n128_u64[0] = v41.n128_u64[0];
            *((_DWORD *)a1 + 6) = v41.n128_u32[2];
          }
        }
      }
      else
      {
        if (v12 >= v14)
        {
          v43 = (__n128)*a1;
          *(_QWORD *)a1 = v13->n128_u64[0];
          *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
          v13->n128_u64[0] = v43.n128_u64[0];
          *((_DWORD *)a1 + 6) = v43.n128_u32[2];
          if (v12 >= *((_QWORD *)a1 + 2))
            goto LABEL_29;
          v33 = *v13;
          v13->n128_u64[0] = *v11;
          *((_DWORD *)a1 + 6) = *((_DWORD *)a1 + 10);
        }
        else
        {
          v33 = (__n128)*a1;
          *(_QWORD *)a1 = *v11;
          *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 10);
        }
        *v11 = v33.n128_u64[0];
        *((_DWORD *)a1 + 10) = v33.n128_u32[2];
      }
LABEL_29:
      v24 = (unint64_t *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v25 = 0;
      v26 = 0;
      while (1)
      {
        v27 = *v24;
        if (*v24 < *v11)
          break;
LABEL_38:
        v11 = v24;
        v25 += 16;
        v24 += 2;
        if (v24 == (unint64_t *)a2)
          return 1;
      }
      v28 = *((_DWORD *)v24 + 2);
      v29 = v25;
      do
      {
        v30 = (uint64_t)a1 + v29;
        *(_QWORD *)(v30 + 48) = *(_QWORD *)((char *)a1 + v29 + 32);
        *(_DWORD *)(v30 + 56) = *(_DWORD *)((char *)a1 + v29 + 40);
        if (v29 == -32)
        {
          *(_QWORD *)a1 = v27;
          *((_DWORD *)a1 + 2) = v28;
          if (++v26 != 8)
            goto LABEL_38;
          return v24 + 2 == (unint64_t *)a2;
        }
        v29 -= 16;
      }
      while (v27 < *(_QWORD *)(v30 + 16));
      v31 = (uint64_t)a1 + v29;
      *(_QWORD *)(v31 + 48) = v27;
      *(_DWORD *)(v31 + 56) = v28;
      if (++v26 != 8)
        goto LABEL_38;
      return v24 + 2 == (unint64_t *)a2;
  }
}

__n128 sub_20F3404A8(__n128 *a1, __n128 *a2, __int128 *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  __n128 result;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  int v12;
  unsigned __int32 v13;
  unsigned __int32 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __int128 v19;
  __n128 v20;
  __n128 v21;

  v4 = a2->n128_u64[0];
  v5 = *(_QWORD *)a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v5 < v4)
    {
      result = *a2;
      v16 = *a2;
      v8 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v8;
      *(_QWORD *)a3 = v16.n128_u64[0];
      *((_DWORD *)a3 + 2) = v16.n128_u32[2];
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        v17 = *a1;
        v9 = a2->n128_u32[2];
        a1->n128_u64[0] = a2->n128_u64[0];
        a1->n128_u32[2] = v9;
        a2->n128_u64[0] = v17.n128_u64[0];
        a2->n128_u32[2] = v17.n128_u32[2];
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      result = *a1;
      v15 = *a1;
      v7 = *((_DWORD *)a3 + 2);
      a1->n128_u64[0] = *(_QWORD *)a3;
      a1->n128_u32[2] = v7;
LABEL_9:
      *(_QWORD *)a3 = v15.n128_u64[0];
      *((_DWORD *)a3 + 2) = v15.n128_u32[2];
      goto LABEL_10;
    }
    result = *a1;
    v18 = *a1;
    v10 = a2->n128_u32[2];
    a1->n128_u64[0] = a2->n128_u64[0];
    a1->n128_u32[2] = v10;
    a2->n128_u64[0] = v18.n128_u64[0];
    a2->n128_u32[2] = v18.n128_u32[2];
    if (*(_QWORD *)a3 < a2->n128_u64[0])
    {
      result = *a2;
      v15 = *a2;
      v11 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v11;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *(_QWORD *)a3)
  {
    result = (__n128)*a3;
    v19 = *a3;
    v12 = *(_DWORD *)(a4 + 8);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *((_DWORD *)a3 + 2) = v12;
    *(_QWORD *)a4 = v19;
    *(_DWORD *)(a4 + 8) = DWORD2(v19);
    if (*(_QWORD *)a3 < a2->n128_u64[0])
    {
      result = *a2;
      v20 = *a2;
      v13 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v13;
      *(_QWORD *)a3 = v20.n128_u64[0];
      *((_DWORD *)a3 + 2) = v20.n128_u32[2];
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        v21 = *a1;
        v14 = a2->n128_u32[2];
        a1->n128_u64[0] = a2->n128_u64[0];
        a1->n128_u32[2] = v14;
        a2->n128_u64[0] = v21.n128_u64[0];
        a2->n128_u32[2] = v21.n128_u32[2];
      }
    }
  }
  return result;
}

void *sub_20F340660(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_20F340690(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

uint64_t *sub_20F340728(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v2 = a1[40];
  if (v2)
  {
    a1[41] = v2;
    v3 = (unint64_t)(a1[42] - v2) >> 2;
    v33 = v2;
    v34 = v3;
    v4 = *((unsigned int *)a1 + 87);
    if ((_DWORD)v4 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDF00[v4])(&v35, a1 + 43);
  }
  v5 = a1[35];
  if (v5)
  {
    a1[36] = v5;
    v6 = *((_DWORD *)a1 + 74) - v5;
    v33 = v5;
    v34 = v6;
    v7 = *((unsigned int *)a1 + 77);
    if ((_DWORD)v7 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDF10[v7])(&v35, a1 + 38);
  }
  v8 = a1[30];
  if (v8)
  {
    a1[31] = v8;
    v9 = *((_DWORD *)a1 + 64) - v8;
    v33 = v8;
    v34 = v9;
    v10 = *((unsigned int *)a1 + 67);
    if ((_DWORD)v10 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDF10[v10])(&v35, a1 + 33);
  }
  v11 = a1[26];
  if (v11)
  {
    a1[27] = v11;
    v12 = -1431655765 * ((unint64_t)(a1[28] - v11) >> 2);
    v33 = v11;
    v34 = v12;
    v13 = *((unsigned int *)a1 + 59);
    if ((_DWORD)v13 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDF20[v13])(&v35, a1 + 29);
  }
  v14 = a1[22];
  if (v14)
  {
    a1[23] = v14;
    v15 = (unint64_t)(a1[24] - v14) >> 3;
    v33 = v14;
    v34 = v15;
    v16 = *((unsigned int *)a1 + 51);
    if ((_DWORD)v16 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDF30[v16])(&v35, a1 + 25);
  }
  v17 = a1[18];
  if (v17)
  {
    a1[19] = v17;
    v18 = (unint64_t)(a1[20] - v17) >> 3;
    v33 = v17;
    v34 = v18;
    v19 = *((unsigned int *)a1 + 43);
    if ((_DWORD)v19 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDF40[v19])(&v35, a1 + 21);
  }
  v20 = a1[14];
  if (v20)
  {
    a1[15] = v20;
    v21 = -1431655765 * ((unint64_t)(a1[16] - v20) >> 2);
    v33 = v20;
    v34 = v21;
    v22 = *((unsigned int *)a1 + 35);
    if ((_DWORD)v22 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDF20[v22])(&v35, a1 + 17);
  }
  v23 = a1[9];
  if (v23)
  {
    a1[10] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[11] - v23) >> 2);
    v33 = v23;
    v34 = v24;
    v25 = *((unsigned int *)a1 + 25);
    if ((_DWORD)v25 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDEF0[v25])(&v35, a1 + 12);
  }
  v26 = a1[4];
  if (v26)
  {
    a1[5] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[6] - v26) >> 2);
    v33 = v26;
    v34 = v27;
    v28 = *((unsigned int *)a1 + 15);
    if ((_DWORD)v28 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDEF0[v28])(&v35, a1 + 7);
  }
  v29 = *a1;
  if (*a1)
  {
    a1[1] = v29;
    v30 = -1431655765 * ((unint64_t)(a1[2] - v29) >> 2);
    v33 = v29;
    v34 = v30;
    v31 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v31 == -1)
      sub_20E877AB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C9FDEF0[v31])(&v35, a1 + 3);
  }
  return a1;
}

void sub_20F340AD4(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20F340AE0(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, 4 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_2102A1D75, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20F340B50(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20F340B5C(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_2102A1D75, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20F340BC8(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20F340BD4(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_2102A1D75, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

void sub_20F340C44(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20F340C50(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x212BC7130](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)&unk_2102A1D75, 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  return result;
}

__n128 sub_20F340CC0(uint64_t a1, uint64_t a2, __n128 *a3)
{
  int64_t v3;
  int64_t v4;
  __n128 *v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  int64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  __n128 *v20;
  uint64_t v21;
  __n128 *v22;
  __n128 *v23;
  __n128 result;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  __n128 v33;
  __n128 v34;

  if (a2 >= 2)
  {
    v3 = (unint64_t)(a2 - 2) >> 1;
    if (v3 >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a3 - a1) >> 3))
    {
      v4 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a3 - a1) >> 3)) | 1;
      v5 = (__n128 *)(a1 + 56 * v4);
      if ((uint64_t)(0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a3 - a1) >> 3) + 2) < a2)
      {
        v6 = v5[3].n128_u8[0] && v5[6].n128_u8[8] == 0;
        if (v6
          || (v5[6].n128_u8[8] ? (v7 = v5[3].n128_u8[0] == 0) : (v7 = 0),
              !v7 ? (v8 = v5->n128_u64[0] > v5[3].n128_u64[1]) : (v8 = 0),
              v8))
        {
          v5 = (__n128 *)((char *)v5 + 56);
          v4 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a3 - a1) >> 3) + 2;
        }
      }
      v9 = a3[3].n128_i8[0];
      if (v5[3].n128_u8[0])
        v10 = a3[3].n128_u8[0] == 0;
      else
        v10 = 0;
      if (!v10)
      {
        v11 = a3[3].n128_u8[0] && v5[3].n128_u8[0] == 0;
        v12 = a3->n128_u64[0];
        v13 = v5->n128_u64[0];
        if (v11 || v13 <= v12)
        {
          v33 = a3[2];
          v34 = a3[1];
          if (a3[3].n128_u8[0])
          {
            do
            {
              v26 = a3;
              a3 = v5;
              v26->n128_u64[0] = v13;
              v22 = v5 + 1;
              v27 = v5[1].n128_i64[0];
              v26[1].n128_u32[2] = v22->n128_u32[2];
              v26[1].n128_u64[0] = v27;
              v23 = v22 + 1;
              v26[2] = v22[1];
              v26[3].n128_u8[0] = v22[2].n128_u8[0];
              if (v3 < v4)
                break;
              v28 = 2 * v4;
              v4 = (2 * v4) | 1;
              v5 = (__n128 *)(a1 + 56 * v4);
              v29 = v28 + 2;
              if (v29 < a2)
              {
                v30 = v5[3].n128_u8[0] && v5[6].n128_u8[8] == 0;
                if (v30
                  || (v5[6].n128_u8[8] ? (v31 = v5[3].n128_u8[0] == 0) : (v31 = 0),
                      !v31 ? (v32 = v5->n128_u64[0] > v5[3].n128_u64[1]) : (v32 = 0),
                      v32))
                {
                  v5 = (__n128 *)((char *)v5 + 56);
                  v4 = v29;
                }
              }
              v13 = v5->n128_u64[0];
            }
            while (!v5[3].n128_u8[0] || v13 <= v12);
          }
          else
          {
            do
            {
              v20 = a3;
              a3 = v5;
              v20->n128_u64[0] = v13;
              v22 = v5 + 1;
              v21 = v5[1].n128_i64[0];
              v20[1].n128_u32[2] = v22->n128_u32[2];
              v20[1].n128_u64[0] = v21;
              v23 = v22 + 1;
              v20[2] = v22[1];
              v20[3].n128_u8[0] = v22[2].n128_u8[0];
              if (v3 < v4)
                break;
              v15 = 2 * v4;
              v4 = (2 * v4) | 1;
              v5 = (__n128 *)(a1 + 56 * v4);
              v16 = v15 + 2;
              if (v16 < a2)
              {
                v17 = v5[3].n128_u8[0] && v5[6].n128_u8[8] == 0;
                if (v17
                  || (v5[6].n128_u8[8] ? (v18 = v5[3].n128_u8[0] == 0) : (v18 = 0),
                      !v18 ? (v19 = v5->n128_u64[0] > v5[3].n128_u64[1]) : (v19 = 0),
                      v19))
                {
                  v5 = (__n128 *)((char *)v5 + 56);
                  v4 = v16;
                }
              }
              if (v5[3].n128_u8[0])
                break;
              v13 = v5->n128_u64[0];
            }
            while (v5->n128_u64[0] <= v12);
          }
          a3->n128_u64[0] = v12;
          v22->n128_u64[0] = v34.n128_u64[0];
          v22->n128_u32[2] = v34.n128_u32[2];
          result = v33;
          *v23 = v33;
          a3[3].n128_u8[0] = v9;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F340F04(void **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v9;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 *v17;
  char *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  void *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char *v125;
  void *i;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  void *v142;

  v5 = *a1;
  v6 = (a2 - (uint64_t)*a1) / 344;
  v7 = (uint64_t)*a1 + 344 * v6;
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = a1[1];
  v12 = a1[2];
  if ((uint64_t)(0x82FA0BE82FA0BE83 * ((v12 - v11) >> 3)) >= a5)
  {
    if ((uint64_t)(0x82FA0BE82FA0BE83 * ((uint64_t)&v11[-v7] >> 3)) >= a5)
    {
      v17 = (__int128 *)((char *)a3 + 344 * a5);
      v18 = (char *)a1[1];
    }
    else
    {
      v17 = (__int128 *)((char *)a3 + 8 * ((uint64_t)&v11[-v7] >> 3));
      v18 = (char *)a1[1];
      if (v17 != a4)
      {
        v19 = (uint64_t)a3 + 8 * ((uint64_t)&v11[-v7] >> 3);
        v20 = a1[1];
        do
        {
          v21 = *(_OWORD *)(v19 + 16);
          *v20 = *(_OWORD *)v19;
          v20[1] = v21;
          v22 = *(_OWORD *)(v19 + 32);
          *((_QWORD *)v20 + 6) = *(_QWORD *)(v19 + 48);
          v20[2] = v22;
          v23 = *(_OWORD *)(v19 + 136);
          v24 = *(_OWORD *)(v19 + 152);
          v25 = *(_OWORD *)(v19 + 168);
          *(_OWORD *)((char *)v20 + 120) = *(_OWORD *)(v19 + 120);
          *(_OWORD *)((char *)v20 + 168) = v25;
          *(_OWORD *)((char *)v20 + 152) = v24;
          *(_OWORD *)((char *)v20 + 136) = v23;
          v26 = *(_OWORD *)(v19 + 56);
          v27 = *(_OWORD *)(v19 + 72);
          v28 = *(_OWORD *)(v19 + 88);
          *(_OWORD *)((char *)v20 + 104) = *(_OWORD *)(v19 + 104);
          *(_OWORD *)((char *)v20 + 88) = v28;
          *(_OWORD *)((char *)v20 + 72) = v27;
          *(_OWORD *)((char *)v20 + 56) = v26;
          v29 = *(_OWORD *)(v19 + 264);
          v30 = *(_OWORD *)(v19 + 280);
          v31 = *(_OWORD *)(v19 + 296);
          *(_OWORD *)((char *)v20 + 248) = *(_OWORD *)(v19 + 248);
          *(_OWORD *)((char *)v20 + 280) = v30;
          *(_OWORD *)((char *)v20 + 296) = v31;
          *(_OWORD *)((char *)v20 + 264) = v29;
          v32 = *(_OWORD *)(v19 + 184);
          v33 = *(_OWORD *)(v19 + 200);
          v34 = *(_OWORD *)(v19 + 216);
          *(_OWORD *)((char *)v20 + 232) = *(_OWORD *)(v19 + 232);
          *(_OWORD *)((char *)v20 + 216) = v34;
          *(_OWORD *)((char *)v20 + 200) = v33;
          *(_OWORD *)((char *)v20 + 184) = v32;
          v35 = *(_OWORD *)(v19 + 312);
          *(_OWORD *)((char *)v20 + 321) = *(_OWORD *)(v19 + 321);
          *(_OWORD *)((char *)v20 + 312) = v35;
          v18 += 344;
          v19 += 344;
          v20 = (_OWORD *)((char *)v20 + 344);
        }
        while ((__int128 *)v19 != a4);
      }
      a1[1] = v18;
      if ((uint64_t)&v11[-v7] < 1)
        return v7;
    }
    v36 = v7 + 344 * a5;
    v37 = (unint64_t)&v18[-344 * a5];
    v38 = v18;
    if (v37 < (unint64_t)v11)
    {
      v38 = v18;
      do
      {
        v39 = *(_OWORD *)(v37 + 16);
        *v38 = *(_OWORD *)v37;
        v38[1] = v39;
        v40 = *(_OWORD *)(v37 + 32);
        *((_QWORD *)v38 + 6) = *(_QWORD *)(v37 + 48);
        v38[2] = v40;
        v41 = *(_OWORD *)(v37 + 136);
        v42 = *(_OWORD *)(v37 + 152);
        v43 = *(_OWORD *)(v37 + 168);
        *(_OWORD *)((char *)v38 + 120) = *(_OWORD *)(v37 + 120);
        *(_OWORD *)((char *)v38 + 168) = v43;
        *(_OWORD *)((char *)v38 + 152) = v42;
        *(_OWORD *)((char *)v38 + 136) = v41;
        v44 = *(_OWORD *)(v37 + 56);
        v45 = *(_OWORD *)(v37 + 72);
        v46 = *(_OWORD *)(v37 + 88);
        *(_OWORD *)((char *)v38 + 104) = *(_OWORD *)(v37 + 104);
        *(_OWORD *)((char *)v38 + 88) = v46;
        *(_OWORD *)((char *)v38 + 72) = v45;
        *(_OWORD *)((char *)v38 + 56) = v44;
        v47 = *(_OWORD *)(v37 + 264);
        v48 = *(_OWORD *)(v37 + 280);
        v49 = *(_OWORD *)(v37 + 296);
        *(_OWORD *)((char *)v38 + 248) = *(_OWORD *)(v37 + 248);
        *(_OWORD *)((char *)v38 + 280) = v48;
        *(_OWORD *)((char *)v38 + 296) = v49;
        *(_OWORD *)((char *)v38 + 264) = v47;
        v50 = *(_OWORD *)(v37 + 184);
        v51 = *(_OWORD *)(v37 + 200);
        v52 = *(_OWORD *)(v37 + 216);
        *(_OWORD *)((char *)v38 + 232) = *(_OWORD *)(v37 + 232);
        *(_OWORD *)((char *)v38 + 216) = v52;
        *(_OWORD *)((char *)v38 + 200) = v51;
        *(_OWORD *)((char *)v38 + 184) = v50;
        v53 = *(_OWORD *)(v37 + 312);
        *(_OWORD *)((char *)v38 + 321) = *(_OWORD *)(v37 + 321);
        *(_OWORD *)((char *)v38 + 312) = v53;
        v38 = (_OWORD *)((char *)v38 + 344);
        v37 += 344;
      }
      while (v37 < (unint64_t)v11);
    }
    a1[1] = v38;
    if (v18 != (char *)v36)
    {
      v54 = 8 * ((uint64_t)&v18[-v36] >> 3);
      v55 = (uint64_t)&v5[344 * v6 - 160];
      v56 = v18 - 344;
      do
      {
        v57 = *(_OWORD *)(v55 + v54 - 184);
        *(_OWORD *)(v56 + 9) = *(_OWORD *)(v55 + v54 - 175);
        *(_OWORD *)v56 = v57;
        v58 = *(_OWORD *)(v55 + v54 - 152);
        *((_DWORD *)v56 + 12) = *(_DWORD *)(v55 + v54 - 136);
        *((_OWORD *)v56 + 2) = v58;
        v59 = *(_OWORD *)(v55 + v54 - 32);
        v60 = *(_OWORD *)(v55 + v54 - 16);
        v61 = *(_OWORD *)(v55 + v54 - 48);
        *(_OWORD *)(v56 + 120) = *(_OWORD *)(v55 + v54 - 64);
        *(_OWORD *)(v56 + 168) = v60;
        *(_OWORD *)(v56 + 152) = v59;
        *(_OWORD *)(v56 + 136) = v61;
        v62 = *(_OWORD *)(v55 + v54 - 128);
        v63 = *(_OWORD *)(v55 + v54 - 112);
        v64 = *(_OWORD *)(v55 + v54 - 96);
        *(_OWORD *)(v56 + 104) = *(_OWORD *)(v55 + v54 - 80);
        *(_OWORD *)(v56 + 88) = v64;
        *(_OWORD *)(v56 + 72) = v63;
        *(_OWORD *)(v56 + 56) = v62;
        v65 = *(_OWORD *)(v55 + v54 + 96);
        v66 = *(_OWORD *)(v55 + v54 + 112);
        v67 = *(_OWORD *)(v55 + v54 + 80);
        *(_OWORD *)(v56 + 248) = *(_OWORD *)(v55 + v54 + 64);
        *(_OWORD *)(v56 + 280) = v65;
        *(_OWORD *)(v56 + 296) = v66;
        *(_OWORD *)(v56 + 264) = v67;
        v68 = *(_OWORD *)(v55 + v54);
        v69 = *(_OWORD *)(v55 + v54 + 16);
        v70 = *(_OWORD *)(v55 + v54 + 32);
        *(_OWORD *)(v56 + 232) = *(_OWORD *)(v55 + v54 + 48);
        *(_OWORD *)(v56 + 216) = v70;
        *(_OWORD *)(v56 + 200) = v69;
        *(_OWORD *)(v56 + 184) = v68;
        v71 = *(_OWORD *)(v55 + v54 + 128);
        *(_OWORD *)(v56 + 321) = *(_OWORD *)(v55 + v54 + 137);
        *(_OWORD *)(v56 + 312) = v71;
        v56 -= 344;
        v54 -= 344;
      }
      while (v54);
    }
    if (v17 != a3)
    {
      v72 = v7;
      do
      {
        v73 = *v9;
        *(_OWORD *)(v72 + 9) = *(__int128 *)((char *)v9 + 9);
        *(_OWORD *)v72 = v73;
        v74 = v9[2];
        *(_DWORD *)(v72 + 48) = *((_DWORD *)v9 + 12);
        *(_OWORD *)(v72 + 32) = v74;
        v75 = *(__int128 *)((char *)v9 + 136);
        v76 = *(__int128 *)((char *)v9 + 152);
        v77 = *(__int128 *)((char *)v9 + 168);
        *(_OWORD *)(v72 + 120) = *(__int128 *)((char *)v9 + 120);
        *(_OWORD *)(v72 + 168) = v77;
        *(_OWORD *)(v72 + 152) = v76;
        *(_OWORD *)(v72 + 136) = v75;
        v78 = *(__int128 *)((char *)v9 + 56);
        v79 = *(__int128 *)((char *)v9 + 72);
        v80 = *(__int128 *)((char *)v9 + 88);
        *(_OWORD *)(v72 + 104) = *(__int128 *)((char *)v9 + 104);
        *(_OWORD *)(v72 + 88) = v80;
        *(_OWORD *)(v72 + 72) = v79;
        *(_OWORD *)(v72 + 56) = v78;
        v81 = *(__int128 *)((char *)v9 + 264);
        v82 = *(__int128 *)((char *)v9 + 280);
        v83 = *(__int128 *)((char *)v9 + 296);
        *(_OWORD *)(v72 + 248) = *(__int128 *)((char *)v9 + 248);
        *(_OWORD *)(v72 + 280) = v82;
        *(_OWORD *)(v72 + 296) = v83;
        *(_OWORD *)(v72 + 264) = v81;
        v84 = *(__int128 *)((char *)v9 + 184);
        v85 = *(__int128 *)((char *)v9 + 200);
        v86 = *(__int128 *)((char *)v9 + 216);
        *(_OWORD *)(v72 + 232) = *(__int128 *)((char *)v9 + 232);
        *(_OWORD *)(v72 + 216) = v86;
        *(_OWORD *)(v72 + 200) = v85;
        *(_OWORD *)(v72 + 184) = v84;
        v87 = *(__int128 *)((char *)v9 + 312);
        *(_OWORD *)(v72 + 321) = *(__int128 *)((char *)v9 + 321);
        *(_OWORD *)(v72 + 312) = v87;
        v9 = (__int128 *)((char *)v9 + 344);
        v72 += 344;
      }
      while (v9 != v17);
    }
    return v7;
  }
  v13 = a5 - 0x7D05F417D05F417DLL * ((v11 - v5) >> 3);
  if (v13 > 0xBE82FA0BE82FA0)
    sub_20E867F44();
  v14 = 0x82FA0BE82FA0BE83 * ((v12 - v5) >> 3);
  if (2 * v14 > v13)
    v13 = 2 * v14;
  if (v14 >= 0x5F417D05F417D0)
    v15 = 0xBE82FA0BE82FA0;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 > 0xBE82FA0BE82FA0)
      sub_20E877A38();
    v16 = (char *)operator new(344 * v15);
  }
  else
  {
    v16 = 0;
  }
  v88 = &v16[344 * v6];
  v89 = &v88[344 * a5];
  v90 = v88;
  do
  {
    v91 = v9[1];
    *(_OWORD *)v90 = *v9;
    *((_OWORD *)v90 + 1) = v91;
    v92 = v9[2];
    *((_QWORD *)v90 + 6) = *((_QWORD *)v9 + 6);
    *((_OWORD *)v90 + 2) = v92;
    v93 = *(__int128 *)((char *)v9 + 136);
    v94 = *(__int128 *)((char *)v9 + 152);
    v95 = *(__int128 *)((char *)v9 + 168);
    *(_OWORD *)(v90 + 120) = *(__int128 *)((char *)v9 + 120);
    *(_OWORD *)(v90 + 168) = v95;
    *(_OWORD *)(v90 + 152) = v94;
    *(_OWORD *)(v90 + 136) = v93;
    v96 = *(__int128 *)((char *)v9 + 56);
    v97 = *(__int128 *)((char *)v9 + 72);
    v98 = *(__int128 *)((char *)v9 + 88);
    *(_OWORD *)(v90 + 104) = *(__int128 *)((char *)v9 + 104);
    *(_OWORD *)(v90 + 88) = v98;
    *(_OWORD *)(v90 + 72) = v97;
    *(_OWORD *)(v90 + 56) = v96;
    v99 = *(__int128 *)((char *)v9 + 264);
    v100 = *(__int128 *)((char *)v9 + 280);
    v101 = *(__int128 *)((char *)v9 + 296);
    *(_OWORD *)(v90 + 248) = *(__int128 *)((char *)v9 + 248);
    *(_OWORD *)(v90 + 280) = v100;
    *(_OWORD *)(v90 + 296) = v101;
    *(_OWORD *)(v90 + 264) = v99;
    v102 = *(__int128 *)((char *)v9 + 184);
    v103 = *(__int128 *)((char *)v9 + 200);
    v104 = *(__int128 *)((char *)v9 + 216);
    *(_OWORD *)(v90 + 232) = *(__int128 *)((char *)v9 + 232);
    *(_OWORD *)(v90 + 216) = v104;
    *(_OWORD *)(v90 + 200) = v103;
    *(_OWORD *)(v90 + 184) = v102;
    v105 = *(__int128 *)((char *)v9 + 312);
    *(_OWORD *)(v90 + 321) = *(__int128 *)((char *)v9 + 321);
    *(_OWORD *)(v90 + 312) = v105;
    v90 += 344;
    v9 = (__int128 *)((char *)v9 + 344);
  }
  while (v90 != v89);
  v106 = *a1;
  v107 = &v16[344 * v6];
  if (*a1 != (void *)v7)
  {
    v108 = (uint64_t)&v16[344 * v6 - 344];
    v109 = v7;
    do
    {
      v110 = *(_OWORD *)(v109 - 328);
      *(_OWORD *)v108 = *(_OWORD *)(v109 - 344);
      *(_OWORD *)(v108 + 16) = v110;
      v111 = *(_OWORD *)(v109 - 312);
      *(_QWORD *)(v108 + 48) = *(_QWORD *)(v109 - 296);
      *(_OWORD *)(v108 + 32) = v111;
      v112 = *(_OWORD *)(v109 - 192);
      v113 = *(_OWORD *)(v109 - 176);
      v114 = *(_OWORD *)(v109 - 208);
      *(_OWORD *)(v108 + 120) = *(_OWORD *)(v109 - 224);
      *(_OWORD *)(v108 + 168) = v113;
      *(_OWORD *)(v108 + 152) = v112;
      *(_OWORD *)(v108 + 136) = v114;
      v115 = *(_OWORD *)(v109 - 288);
      v116 = *(_OWORD *)(v109 - 272);
      v117 = *(_OWORD *)(v109 - 256);
      *(_OWORD *)(v108 + 104) = *(_OWORD *)(v109 - 240);
      *(_OWORD *)(v108 + 88) = v117;
      *(_OWORD *)(v108 + 72) = v116;
      *(_OWORD *)(v108 + 56) = v115;
      v118 = *(_OWORD *)(v109 - 64);
      v119 = *(_OWORD *)(v109 - 48);
      v120 = *(_OWORD *)(v109 - 80);
      *(_OWORD *)(v108 + 248) = *(_OWORD *)(v109 - 96);
      *(_OWORD *)(v108 + 280) = v118;
      *(_OWORD *)(v108 + 296) = v119;
      *(_OWORD *)(v108 + 264) = v120;
      v121 = *(_OWORD *)(v109 - 160);
      v122 = *(_OWORD *)(v109 - 144);
      v123 = *(_OWORD *)(v109 - 128);
      *(_OWORD *)(v108 + 232) = *(_OWORD *)(v109 - 112);
      *(_OWORD *)(v108 + 216) = v123;
      *(_OWORD *)(v108 + 200) = v122;
      *(_OWORD *)(v108 + 184) = v121;
      v124 = *(_OWORD *)(v109 - 32);
      *(_OWORD *)(v108 + 321) = *(_OWORD *)(v109 - 23);
      *(_OWORD *)(v108 + 312) = v124;
      v108 -= 344;
      v109 -= 344;
    }
    while ((void *)v109 != v106);
    v107 = (char *)(v108 + 344);
  }
  v125 = &v16[344 * v15];
  for (i = a1[1]; (void *)v7 != i; v7 += 344)
  {
    v127 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)v89 = *(_OWORD *)v7;
    *((_OWORD *)v89 + 1) = v127;
    v128 = *(_OWORD *)(v7 + 32);
    *((_QWORD *)v89 + 6) = *(_QWORD *)(v7 + 48);
    *((_OWORD *)v89 + 2) = v128;
    v129 = *(_OWORD *)(v7 + 136);
    v130 = *(_OWORD *)(v7 + 152);
    v131 = *(_OWORD *)(v7 + 168);
    *(_OWORD *)(v89 + 120) = *(_OWORD *)(v7 + 120);
    *(_OWORD *)(v89 + 168) = v131;
    *(_OWORD *)(v89 + 152) = v130;
    *(_OWORD *)(v89 + 136) = v129;
    v132 = *(_OWORD *)(v7 + 56);
    v133 = *(_OWORD *)(v7 + 72);
    v134 = *(_OWORD *)(v7 + 88);
    *(_OWORD *)(v89 + 104) = *(_OWORD *)(v7 + 104);
    *(_OWORD *)(v89 + 88) = v134;
    *(_OWORD *)(v89 + 72) = v133;
    *(_OWORD *)(v89 + 56) = v132;
    v135 = *(_OWORD *)(v7 + 264);
    v136 = *(_OWORD *)(v7 + 280);
    v137 = *(_OWORD *)(v7 + 296);
    *(_OWORD *)(v89 + 248) = *(_OWORD *)(v7 + 248);
    *(_OWORD *)(v89 + 280) = v136;
    *(_OWORD *)(v89 + 296) = v137;
    *(_OWORD *)(v89 + 264) = v135;
    v138 = *(_OWORD *)(v7 + 184);
    v139 = *(_OWORD *)(v7 + 200);
    v140 = *(_OWORD *)(v7 + 216);
    *(_OWORD *)(v89 + 232) = *(_OWORD *)(v7 + 232);
    *(_OWORD *)(v89 + 216) = v140;
    *(_OWORD *)(v89 + 200) = v139;
    *(_OWORD *)(v89 + 184) = v138;
    v141 = *(_OWORD *)(v7 + 312);
    *(_OWORD *)(v89 + 321) = *(_OWORD *)(v7 + 321);
    *(_OWORD *)(v89 + 312) = v141;
    v89 += 344;
  }
  v142 = *a1;
  *a1 = v107;
  a1[1] = v89;
  a1[2] = v125;
  if (v142)
    operator delete(v142);
  return (uint64_t)v88;
}

void sub_20F34166C(char **a1, unint64_t a2, __int128 *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v7 = a1[1];
  v6 = a1[2];
  if (a2 <= (v6 - v7) >> 7)
  {
    if (a2)
    {
      v13 = a2 << 7;
      v14 = &v7[128 * a2];
      do
      {
        v15 = *a3;
        v16 = a3[1];
        v17 = a3[3];
        *((_OWORD *)v7 + 2) = a3[2];
        *((_OWORD *)v7 + 3) = v17;
        *(_OWORD *)v7 = v15;
        *((_OWORD *)v7 + 1) = v16;
        v18 = a3[4];
        v19 = a3[5];
        v20 = a3[7];
        *((_OWORD *)v7 + 6) = a3[6];
        *((_OWORD *)v7 + 7) = v20;
        *((_OWORD *)v7 + 4) = v18;
        *((_OWORD *)v7 + 5) = v19;
        v7 += 128;
        v13 -= 128;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (v7 - *a1) >> 7;
    if ((v8 + a2) >> 57)
      sub_20E867F44();
    v9 = v6 - *a1;
    v10 = v9 >> 6;
    if (v9 >> 6 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFF80)
      v11 = 0x1FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 57)
        sub_20E877A38();
      v12 = (char *)operator new(v11 << 7);
    }
    else
    {
      v12 = 0;
    }
    v21 = &v12[128 * v8];
    v22 = a2 << 7;
    v23 = &v21[128 * a2];
    v24 = v21;
    do
    {
      v25 = *a3;
      v26 = a3[1];
      v27 = a3[3];
      *((_OWORD *)v24 + 2) = a3[2];
      *((_OWORD *)v24 + 3) = v27;
      *(_OWORD *)v24 = v25;
      *((_OWORD *)v24 + 1) = v26;
      v28 = a3[4];
      v29 = a3[5];
      v30 = a3[7];
      *((_OWORD *)v24 + 6) = a3[6];
      *((_OWORD *)v24 + 7) = v30;
      *((_OWORD *)v24 + 4) = v28;
      *((_OWORD *)v24 + 5) = v29;
      v24 += 128;
      v22 -= 128;
    }
    while (v22);
    v31 = *a1;
    if (v7 != *a1)
    {
      do
      {
        v32 = *((_OWORD *)v7 - 8);
        v33 = *((_OWORD *)v7 - 7);
        v34 = *((_OWORD *)v7 - 5);
        *((_OWORD *)v21 - 6) = *((_OWORD *)v7 - 6);
        *((_OWORD *)v21 - 5) = v34;
        *((_OWORD *)v21 - 8) = v32;
        *((_OWORD *)v21 - 7) = v33;
        v35 = *((_OWORD *)v7 - 4);
        v36 = *((_OWORD *)v7 - 3);
        v37 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v21 - 1) = v37;
        *((_OWORD *)v21 - 4) = v35;
        *((_OWORD *)v21 - 3) = v36;
        v21 -= 128;
        v7 -= 128;
      }
      while (v7 != v31);
      v7 = *a1;
    }
    *a1 = v21;
    a1[1] = v23;
    a1[2] = &v12[128 * v11];
    if (v7)
      operator delete(v7);
  }
}

uint64_t sub_20F3417FC(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 32);
      if (v5)
      {
        *(_QWORD *)(v3 - 24) = v5;
        operator delete(v5);
      }
      v3 -= 64;
    }
  }
  return a1;
}

uint64_t sub_20F34185C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  _BYTE *v64;
  void *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    *(_QWORD *)(a1 + 40) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v9 = *(void **)(a1 + 56);
  if (v9)
  {
    *(_QWORD *)(a1 + 64) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v10 = *(void **)(a1 + 80);
  if (v10)
  {
    *(_QWORD *)(a1 + 88) = v10;
    operator delete(v10);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  sub_20EB0F04C(a1 + 104, (uint64_t *)(a2 + 104));
  sub_20EB0F04C(a1 + 144, (uint64_t *)(a2 + 144));
  v11 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  v12 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v14 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v13;
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 24);
      v17 = *(void **)(v14 + 16);
      if (v16 != v15)
      {
        v18 = v16 - 344;
        do
        {
          while (1)
          {
            if (*(_BYTE *)(v18 + 336) && *(char *)(v18 + 335) < 0)
              operator delete(*(void **)(v18 + 312));
            if (*(char *)(v18 + 23) < 0)
              break;
            v19 = v18 - 24;
            v18 -= 368;
            if (v19 == v15)
              goto LABEL_24;
          }
          operator delete(*(void **)v18);
          v20 = v18 - 24;
          v18 -= 368;
        }
        while (v20 != v15);
LABEL_24:
        v17 = *(void **)(v14 + 16);
      }
      *(_QWORD *)(v14 + 24) = v15;
      operator delete(v17);
    }
    MEMORY[0x212BC6398](v14, 0x1020C402FC4DB2FLL);
  }
  v21 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  v22 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v21;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_OWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v23;
  v24 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  v25 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v24;
  if (v25)
    MEMORY[0x212BC6398](v25, 0x1000C40FD2CF380);
  v26 = *(_QWORD **)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v26 == (_QWORD *)(a1 + 240))
  {
    v27 = 4;
    v26 = (_QWORD *)(a1 + 240);
  }
  else
  {
    if (!v26)
      goto LABEL_36;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_36:
  v28 = (_QWORD *)(a1 + 264);
  v29 = *(_QWORD *)(a2 + 264);
  if (!v29)
  {
    v30 = (_QWORD *)(a1 + 264);
    goto LABEL_40;
  }
  v30 = (_QWORD *)(a2 + 264);
  if (v29 != a2 + 240)
  {
    *v28 = v29;
LABEL_40:
    *v30 = 0;
    goto LABEL_42;
  }
  *v28 = a1 + 240;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v30 + 24))(*v30, a1 + 240);
LABEL_42:
  v31 = *(_QWORD **)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v31 == (_QWORD *)(a1 + 272))
  {
    v32 = 4;
    v31 = (_QWORD *)(a1 + 272);
  }
  else
  {
    if (!v31)
      goto LABEL_47;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_47:
  v33 = (_QWORD *)(a1 + 296);
  v34 = *(_QWORD *)(a2 + 296);
  if (!v34)
  {
    v35 = (_QWORD *)(a1 + 296);
    goto LABEL_51;
  }
  v35 = (_QWORD *)(a2 + 296);
  if (v34 != a2 + 272)
  {
    *v33 = v34;
LABEL_51:
    *v35 = 0;
    goto LABEL_53;
  }
  *v33 = a1 + 272;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v35 + 24))(*v35, a1 + 272);
LABEL_53:
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v36 = *(_QWORD **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = 0;
  if (v36 == (_QWORD *)(a1 + 312))
  {
    v37 = 4;
    v36 = (_QWORD *)(a1 + 312);
  }
  else
  {
    if (!v36)
      goto LABEL_58;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_58:
  v38 = (_QWORD *)(a1 + 336);
  v39 = *(_QWORD *)(a2 + 336);
  if (!v39)
  {
    v40 = (_QWORD *)(a1 + 336);
    goto LABEL_62;
  }
  v40 = (_QWORD *)(a2 + 336);
  if (v39 != a2 + 312)
  {
    *v38 = v39;
LABEL_62:
    *v40 = 0;
    goto LABEL_64;
  }
  *v38 = a1 + 312;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v40 + 24))(*v40, a1 + 312);
LABEL_64:
  v41 = *(_QWORD **)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v41 == (_QWORD *)(a1 + 344))
  {
    v42 = 4;
    v41 = (_QWORD *)(a1 + 344);
  }
  else
  {
    if (!v41)
      goto LABEL_69;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_69:
  v43 = (_QWORD *)(a1 + 368);
  v44 = *(_QWORD *)(a2 + 368);
  if (!v44)
  {
    v45 = (_QWORD *)(a1 + 368);
    goto LABEL_73;
  }
  v45 = (_QWORD *)(a2 + 368);
  if (v44 != a2 + 344)
  {
    *v43 = v44;
LABEL_73:
    *v45 = 0;
    goto LABEL_75;
  }
  *v43 = a1 + 344;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v45 + 24))(*v45, a1 + 344);
LABEL_75:
  sub_20F341F0C(a1 + 376, (__int128 *)(a2 + 376));
  v46 = *(void **)(a1 + 3560);
  if (v46)
  {
    *(_QWORD *)(a1 + 3568) = v46;
    operator delete(v46);
    *(_QWORD *)(a1 + 3560) = 0;
    *(_QWORD *)(a1 + 3568) = 0;
    *(_QWORD *)(a1 + 3576) = 0;
  }
  *(_QWORD *)(a1 + 3560) = *(_QWORD *)(a2 + 3560);
  *(_QWORD *)(a1 + 3568) = *(_QWORD *)(a2 + 3568);
  *(_QWORD *)(a1 + 3576) = *(_QWORD *)(a2 + 3576);
  *(_QWORD *)(a2 + 3568) = 0;
  *(_QWORD *)(a2 + 3576) = 0;
  *(_QWORD *)(a2 + 3560) = 0;
  v47 = *(_QWORD *)(a2 + 3584);
  *(_QWORD *)(a2 + 3584) = 0;
  *(_QWORD *)(a1 + 3584) = v47;
  v48 = *(_QWORD *)(a2 + 3592);
  *(_QWORD *)(a2 + 3592) = 0;
  *(_QWORD *)(a1 + 3592) = v48;
  v49 = *(_QWORD *)(a2 + 3600);
  *(_QWORD *)(a2 + 3600) = 0;
  *(_QWORD *)(a1 + 3600) = v49;
  v50 = (_QWORD *)(a1 + 3608);
  v51 = (uint64_t *)(a2 + 3608);
  if (*(unsigned __int8 *)(a1 + 4456) == *(unsigned __int8 *)(a2 + 4456))
  {
    if (*(_BYTE *)(a1 + 4456))
    {
      v52 = *v51;
      *(_DWORD *)(a1 + 3616) = *(_DWORD *)(a2 + 3616);
      *v50 = v52;
      v53 = *(_OWORD *)(a2 + 3720);
      v55 = *(_OWORD *)(a2 + 3672);
      v54 = *(_OWORD *)(a2 + 3688);
      *(_OWORD *)(a1 + 3704) = *(_OWORD *)(a2 + 3704);
      *(_OWORD *)(a1 + 3720) = v53;
      *(_OWORD *)(a1 + 3672) = v55;
      *(_OWORD *)(a1 + 3688) = v54;
      v57 = *(_OWORD *)(a2 + 3752);
      v56 = *(_OWORD *)(a2 + 3768);
      v58 = *(_OWORD *)(a2 + 3736);
      *(_QWORD *)(a1 + 3784) = *(_QWORD *)(a2 + 3784);
      *(_OWORD *)(a1 + 3752) = v57;
      *(_OWORD *)(a1 + 3768) = v56;
      *(_OWORD *)(a1 + 3736) = v58;
      v59 = *(_OWORD *)(a2 + 3624);
      v60 = *(_OWORD *)(a2 + 3656);
      *(_OWORD *)(a1 + 3640) = *(_OWORD *)(a2 + 3640);
      *(_OWORD *)(a1 + 3656) = v60;
      *(_OWORD *)(a1 + 3624) = v59;
      memcpy((void *)(a1 + 3792), (const void *)(a2 + 3792), 0x120uLL);
      memcpy((void *)(a1 + 4080), (const void *)(a2 + 4080), 0x120uLL);
      v61 = *(void **)(a1 + 4368);
      if (v61)
      {
        *(_QWORD *)(a1 + 4376) = v61;
        operator delete(v61);
        *(_QWORD *)(a1 + 4368) = 0;
        *(_QWORD *)(a1 + 4376) = 0;
        *(_QWORD *)(a1 + 4384) = 0;
      }
      *(_OWORD *)(a1 + 4368) = *(_OWORD *)(a2 + 4368);
      *(_QWORD *)(a1 + 4384) = *(_QWORD *)(a2 + 4384);
      *(_QWORD *)(a2 + 4384) = 0;
      *(_OWORD *)(a2 + 4368) = 0u;
      v62 = *(_OWORD *)(a2 + 4392);
      *(_QWORD *)(a1 + 4408) = *(_QWORD *)(a2 + 4408);
      *(_OWORD *)(a1 + 4392) = v62;
      v63 = *(_OWORD *)(a2 + 4416);
      *(_QWORD *)(a1 + 4432) = *(_QWORD *)(a2 + 4432);
      *(_OWORD *)(a1 + 4416) = v63;
      *(_OWORD *)(a1 + 4440) = *(_OWORD *)(a2 + 4440);
    }
  }
  else
  {
    v64 = (_BYTE *)(a1 + 4456);
    if (*(_BYTE *)(a1 + 4456))
    {
      v65 = *(void **)(a1 + 4368);
      if (v65)
      {
        *(_QWORD *)(a1 + 4376) = v65;
        operator delete(v65);
      }
      *v64 = 0;
    }
    else
    {
      *(_OWORD *)v50 = *(_OWORD *)v51;
      v66 = *(_OWORD *)(a2 + 3720);
      v68 = *(_OWORD *)(a2 + 3672);
      v67 = *(_OWORD *)(a2 + 3688);
      *(_OWORD *)(a1 + 3704) = *(_OWORD *)(a2 + 3704);
      *(_OWORD *)(a1 + 3720) = v66;
      *(_OWORD *)(a1 + 3672) = v68;
      *(_OWORD *)(a1 + 3688) = v67;
      v70 = *(_OWORD *)(a2 + 3752);
      v69 = *(_OWORD *)(a2 + 3768);
      v71 = *(_OWORD *)(a2 + 3736);
      *(_QWORD *)(a1 + 3784) = *(_QWORD *)(a2 + 3784);
      *(_OWORD *)(a1 + 3752) = v70;
      *(_OWORD *)(a1 + 3768) = v69;
      *(_OWORD *)(a1 + 3736) = v71;
      v72 = *(_OWORD *)(a2 + 3624);
      v73 = *(_OWORD *)(a2 + 3656);
      *(_OWORD *)(a1 + 3640) = *(_OWORD *)(a2 + 3640);
      *(_OWORD *)(a1 + 3656) = v73;
      *(_OWORD *)(a1 + 3624) = v72;
      memcpy((void *)(a1 + 3792), (const void *)(a2 + 3792), 0x120uLL);
      memcpy((void *)(a1 + 4080), (const void *)(a2 + 4080), 0x120uLL);
      *(_QWORD *)(a1 + 4368) = 0;
      *(_OWORD *)(a1 + 4376) = 0u;
      *(_OWORD *)(a1 + 4368) = *(_OWORD *)(a2 + 4368);
      *(_QWORD *)(a1 + 4384) = *(_QWORD *)(a2 + 4384);
      *(_OWORD *)(a2 + 4368) = 0u;
      *(_QWORD *)(a2 + 4384) = 0;
      v74 = *(_QWORD *)(a2 + 4408);
      *(_OWORD *)(a1 + 4392) = *(_OWORD *)(a2 + 4392);
      *(_QWORD *)(a1 + 4408) = v74;
      v75 = *(_QWORD *)(a2 + 4432);
      *(_OWORD *)(a1 + 4416) = *(_OWORD *)(a2 + 4416);
      *(_QWORD *)(a1 + 4432) = v75;
      *(_OWORD *)(a1 + 4440) = *(_OWORD *)(a2 + 4440);
      *v64 = 1;
    }
  }
  *(_QWORD *)(a1 + 4464) = *(_QWORD *)(a2 + 4464);
  return a1;
}

__n128 sub_20F341F0C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  _OWORD *v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;

  if (*(unsigned __int8 *)(a1 + 3176) == *((unsigned __int8 *)a2 + 3176))
  {
    if (*(_BYTE *)(a1 + 3176))
    {
      v4 = *a2;
      *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
      *(_OWORD *)a1 = v4;
      v5 = a2[9];
      v7 = a2[6];
      v6 = a2[7];
      *(_OWORD *)(a1 + 128) = a2[8];
      *(_OWORD *)(a1 + 144) = v5;
      *(_OWORD *)(a1 + 96) = v7;
      *(_OWORD *)(a1 + 112) = v6;
      v8 = a2[2];
      v9 = a2[3];
      v10 = a2[5];
      *(_OWORD *)(a1 + 64) = a2[4];
      *(_OWORD *)(a1 + 80) = v10;
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)(a1 + 48) = v9;
      memcpy((void *)(a1 + 160), a2 + 10, 0x120uLL);
      v12 = (_OWORD *)(a1 + 448);
      v13 = a2 + 28;
      if (*(unsigned __int8 *)(a1 + 3168) == *((unsigned __int8 *)a2 + 3168))
      {
        if (*(_BYTE *)(a1 + 3168))
        {
          v14 = *v13;
          *(_OWORD *)(a1 + 460) = *(__int128 *)((char *)a2 + 460);
          *v12 = v14;
          v15 = a2[30];
          *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
          *(_OWORD *)(a1 + 480) = v15;
          v16 = *(__int128 *)((char *)a2 + 504);
          *(_QWORD *)(a1 + 520) = *((_QWORD *)a2 + 65);
          *(_OWORD *)(a1 + 504) = v16;
          v17 = a2[34];
          *(_OWORD *)(a1 + 528) = a2[33];
          *(_OWORD *)(a1 + 544) = v17;
          v19 = a2[37];
          v18 = a2[38];
          v20 = a2[36];
          *(_QWORD *)(a1 + 624) = *((_QWORD *)a2 + 78);
          *(_OWORD *)(a1 + 592) = v19;
          *(_OWORD *)(a1 + 608) = v18;
          *(_OWORD *)(a1 + 576) = v20;
          *(_OWORD *)(a1 + 560) = a2[35];
          *(_OWORD *)(a1 + 632) = *(__int128 *)((char *)a2 + 632);
          v21 = *(__int128 *)((char *)a2 + 648);
          v22 = *(__int128 *)((char *)a2 + 664);
          v23 = *(__int128 *)((char *)a2 + 680);
          *(_QWORD *)(a1 + 696) = *((_QWORD *)a2 + 87);
          *(_OWORD *)(a1 + 680) = v23;
          *(_OWORD *)(a1 + 664) = v22;
          *(_OWORD *)(a1 + 648) = v21;
          *(_OWORD *)(a1 + 704) = a2[44];
          v24 = a2[45];
          v25 = a2[46];
          v26 = a2[47];
          *(_QWORD *)(a1 + 768) = *((_QWORD *)a2 + 96);
          *(_OWORD *)(a1 + 736) = v25;
          *(_OWORD *)(a1 + 752) = v26;
          *(_OWORD *)(a1 + 720) = v24;
          *(_OWORD *)(a1 + 776) = *(__int128 *)((char *)a2 + 776);
          v27 = *(__int128 *)((char *)a2 + 792);
          v28 = *(__int128 *)((char *)a2 + 808);
          v29 = *(__int128 *)((char *)a2 + 824);
          *(_QWORD *)(a1 + 840) = *((_QWORD *)a2 + 105);
          *(_OWORD *)(a1 + 808) = v28;
          *(_OWORD *)(a1 + 824) = v29;
          *(_OWORD *)(a1 + 792) = v27;
          *(_OWORD *)(a1 + 848) = a2[53];
          v30 = a2[54];
          v31 = a2[55];
          v32 = a2[56];
          *(_QWORD *)(a1 + 912) = *((_QWORD *)a2 + 114);
          *(_OWORD *)(a1 + 880) = v31;
          *(_OWORD *)(a1 + 896) = v32;
          *(_OWORD *)(a1 + 864) = v30;
          *(_OWORD *)(a1 + 920) = *(__int128 *)((char *)a2 + 920);
          v33 = *(__int128 *)((char *)a2 + 936);
          v34 = *(__int128 *)((char *)a2 + 952);
          v35 = *(__int128 *)((char *)a2 + 968);
          *(_QWORD *)(a1 + 984) = *((_QWORD *)a2 + 123);
          *(_OWORD *)(a1 + 952) = v34;
          *(_OWORD *)(a1 + 968) = v35;
          *(_OWORD *)(a1 + 936) = v33;
          *(_OWORD *)(a1 + 992) = a2[62];
          v36 = a2[63];
          v37 = a2[64];
          v38 = a2[65];
          *(_QWORD *)(a1 + 1056) = *((_QWORD *)a2 + 132);
          *(_OWORD *)(a1 + 1040) = v38;
          *(_OWORD *)(a1 + 1008) = v36;
          *(_OWORD *)(a1 + 1024) = v37;
          *(_OWORD *)(a1 + 1064) = *(__int128 *)((char *)a2 + 1064);
          v39 = *(__int128 *)((char *)a2 + 1080);
          v40 = *(__int128 *)((char *)a2 + 1096);
          v41 = *(__int128 *)((char *)a2 + 1112);
          *(_QWORD *)(a1 + 1128) = *((_QWORD *)a2 + 141);
          *(_OWORD *)(a1 + 1096) = v40;
          *(_OWORD *)(a1 + 1112) = v41;
          *(_OWORD *)(a1 + 1080) = v39;
          memcpy((void *)(a1 + 1136), a2 + 71, 0x288uLL);
          v42 = *(__int128 *)((char *)a2 + 1784);
          *(_QWORD *)(a1 + 1800) = *((_QWORD *)a2 + 225);
          *(_OWORD *)(a1 + 1784) = v42;
          v43 = *((_QWORD *)a2 + 228);
          *(_OWORD *)(a1 + 1808) = a2[113];
          *(_QWORD *)(a1 + 1824) = v43;
          memcpy((void *)(a1 + 1832), (char *)a2 + 1832, 0x288uLL);
          memcpy((void *)(a1 + 2480), a2 + 155, 0x288uLL);
          v44 = *(__int128 *)((char *)a2 + 3128);
          *(_QWORD *)(a1 + 3144) = *((_QWORD *)a2 + 393);
          *(_OWORD *)(a1 + 3128) = v44;
          result = (__n128)a2[197];
          *(__n128 *)(a1 + 3152) = result;
        }
      }
      else if (*(_BYTE *)(a1 + 3168))
      {
        *(_BYTE *)(a1 + 3168) = 0;
      }
      else
      {
        v83 = *v13;
        *(_OWORD *)(a1 + 460) = *(__int128 *)((char *)a2 + 460);
        *v12 = v83;
        v84 = a2[30];
        *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
        *(_OWORD *)(a1 + 480) = v84;
        v85 = *(__int128 *)((char *)a2 + 504);
        *(_QWORD *)(a1 + 520) = *((_QWORD *)a2 + 65);
        *(_OWORD *)(a1 + 504) = v85;
        v86 = a2[34];
        *(_OWORD *)(a1 + 528) = a2[33];
        *(_OWORD *)(a1 + 544) = v86;
        v88 = a2[37];
        v87 = a2[38];
        v89 = a2[36];
        *(_QWORD *)(a1 + 624) = *((_QWORD *)a2 + 78);
        *(_OWORD *)(a1 + 592) = v88;
        *(_OWORD *)(a1 + 608) = v87;
        *(_OWORD *)(a1 + 576) = v89;
        *(_OWORD *)(a1 + 560) = a2[35];
        *(_OWORD *)(a1 + 632) = *(__int128 *)((char *)a2 + 632);
        v90 = *(__int128 *)((char *)a2 + 648);
        v91 = *(__int128 *)((char *)a2 + 664);
        v92 = *(__int128 *)((char *)a2 + 680);
        *(_QWORD *)(a1 + 696) = *((_QWORD *)a2 + 87);
        *(_OWORD *)(a1 + 680) = v92;
        *(_OWORD *)(a1 + 664) = v91;
        *(_OWORD *)(a1 + 648) = v90;
        *(_OWORD *)(a1 + 704) = a2[44];
        v93 = a2[45];
        v94 = a2[46];
        v95 = a2[47];
        *(_QWORD *)(a1 + 768) = *((_QWORD *)a2 + 96);
        *(_OWORD *)(a1 + 736) = v94;
        *(_OWORD *)(a1 + 752) = v95;
        *(_OWORD *)(a1 + 720) = v93;
        *(_OWORD *)(a1 + 776) = *(__int128 *)((char *)a2 + 776);
        v96 = *(__int128 *)((char *)a2 + 792);
        v97 = *(__int128 *)((char *)a2 + 808);
        v98 = *(__int128 *)((char *)a2 + 824);
        *(_QWORD *)(a1 + 840) = *((_QWORD *)a2 + 105);
        *(_OWORD *)(a1 + 808) = v97;
        *(_OWORD *)(a1 + 824) = v98;
        *(_OWORD *)(a1 + 792) = v96;
        *(_OWORD *)(a1 + 848) = a2[53];
        v99 = a2[54];
        v100 = a2[55];
        v101 = a2[56];
        *(_QWORD *)(a1 + 912) = *((_QWORD *)a2 + 114);
        *(_OWORD *)(a1 + 880) = v100;
        *(_OWORD *)(a1 + 896) = v101;
        *(_OWORD *)(a1 + 864) = v99;
        *(_OWORD *)(a1 + 920) = *(__int128 *)((char *)a2 + 920);
        v102 = *(__int128 *)((char *)a2 + 936);
        v103 = *(__int128 *)((char *)a2 + 952);
        v104 = *(__int128 *)((char *)a2 + 968);
        *(_QWORD *)(a1 + 984) = *((_QWORD *)a2 + 123);
        *(_OWORD *)(a1 + 952) = v103;
        *(_OWORD *)(a1 + 968) = v104;
        *(_OWORD *)(a1 + 936) = v102;
        *(_OWORD *)(a1 + 992) = a2[62];
        v105 = a2[63];
        v106 = a2[64];
        v107 = a2[65];
        *(_QWORD *)(a1 + 1056) = *((_QWORD *)a2 + 132);
        *(_OWORD *)(a1 + 1040) = v107;
        *(_OWORD *)(a1 + 1008) = v105;
        *(_OWORD *)(a1 + 1024) = v106;
        *(_OWORD *)(a1 + 1064) = *(__int128 *)((char *)a2 + 1064);
        v108 = *(__int128 *)((char *)a2 + 1080);
        v109 = *(__int128 *)((char *)a2 + 1096);
        v110 = *(__int128 *)((char *)a2 + 1112);
        *(_QWORD *)(a1 + 1128) = *((_QWORD *)a2 + 141);
        *(_OWORD *)(a1 + 1096) = v109;
        *(_OWORD *)(a1 + 1112) = v110;
        *(_OWORD *)(a1 + 1080) = v108;
        memcpy((void *)(a1 + 1136), a2 + 71, 0x288uLL);
        v111 = *(__int128 *)((char *)a2 + 1784);
        *(_QWORD *)(a1 + 1800) = *((_QWORD *)a2 + 225);
        *(_OWORD *)(a1 + 1784) = v111;
        v112 = *((_QWORD *)a2 + 228);
        *(_OWORD *)(a1 + 1808) = a2[113];
        *(_QWORD *)(a1 + 1824) = v112;
        memcpy((void *)(a1 + 1832), (char *)a2 + 1832, 0x288uLL);
        memcpy((void *)(a1 + 2480), a2 + 155, 0x288uLL);
        v113 = *(__int128 *)((char *)a2 + 3128);
        *(_QWORD *)(a1 + 3144) = *((_QWORD *)a2 + 393);
        *(_OWORD *)(a1 + 3128) = v113;
        result = (__n128)a2[197];
        *(__n128 *)(a1 + 3152) = result;
        *(_BYTE *)(a1 + 3168) = 1;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 3176))
  {
    *(_BYTE *)(a1 + 3176) = 0;
  }
  else
  {
    v45 = *a2;
    *(_OWORD *)(a1 + 12) = *(__int128 *)((char *)a2 + 12);
    *(_OWORD *)a1 = v45;
    v46 = a2[9];
    v48 = a2[6];
    v47 = a2[7];
    *(_OWORD *)(a1 + 128) = a2[8];
    *(_OWORD *)(a1 + 144) = v46;
    *(_OWORD *)(a1 + 96) = v48;
    *(_OWORD *)(a1 + 112) = v47;
    v49 = a2[2];
    v50 = a2[3];
    v51 = a2[5];
    *(_OWORD *)(a1 + 64) = a2[4];
    *(_OWORD *)(a1 + 80) = v51;
    *(_OWORD *)(a1 + 32) = v49;
    *(_OWORD *)(a1 + 48) = v50;
    memcpy((void *)(a1 + 160), a2 + 10, 0x120uLL);
    *(_BYTE *)(a1 + 448) = 0;
    *(_BYTE *)(a1 + 3168) = 0;
    if (*((_BYTE *)a2 + 3168))
    {
      v52 = a2[28];
      *(_OWORD *)(a1 + 460) = *(__int128 *)((char *)a2 + 460);
      *(_OWORD *)(a1 + 448) = v52;
      v53 = a2[30];
      *(_QWORD *)(a1 + 496) = *((_QWORD *)a2 + 62);
      *(_OWORD *)(a1 + 480) = v53;
      v54 = *(__int128 *)((char *)a2 + 504);
      *(_QWORD *)(a1 + 520) = *((_QWORD *)a2 + 65);
      *(_OWORD *)(a1 + 504) = v54;
      v55 = a2[34];
      *(_OWORD *)(a1 + 528) = a2[33];
      *(_OWORD *)(a1 + 544) = v55;
      v57 = a2[37];
      v56 = a2[38];
      v58 = a2[36];
      *(_QWORD *)(a1 + 624) = *((_QWORD *)a2 + 78);
      *(_OWORD *)(a1 + 592) = v57;
      *(_OWORD *)(a1 + 608) = v56;
      *(_OWORD *)(a1 + 576) = v58;
      *(_OWORD *)(a1 + 560) = a2[35];
      *(_OWORD *)(a1 + 632) = *(__int128 *)((char *)a2 + 632);
      v59 = *(__int128 *)((char *)a2 + 648);
      v60 = *(__int128 *)((char *)a2 + 664);
      v61 = *(__int128 *)((char *)a2 + 680);
      *(_QWORD *)(a1 + 696) = *((_QWORD *)a2 + 87);
      *(_OWORD *)(a1 + 680) = v61;
      *(_OWORD *)(a1 + 664) = v60;
      *(_OWORD *)(a1 + 648) = v59;
      *(_OWORD *)(a1 + 704) = a2[44];
      v62 = a2[45];
      v63 = a2[46];
      v64 = a2[47];
      *(_QWORD *)(a1 + 768) = *((_QWORD *)a2 + 96);
      *(_OWORD *)(a1 + 736) = v63;
      *(_OWORD *)(a1 + 752) = v64;
      *(_OWORD *)(a1 + 720) = v62;
      *(_OWORD *)(a1 + 776) = *(__int128 *)((char *)a2 + 776);
      v65 = *(__int128 *)((char *)a2 + 792);
      v66 = *(__int128 *)((char *)a2 + 808);
      v67 = *(__int128 *)((char *)a2 + 824);
      *(_QWORD *)(a1 + 840) = *((_QWORD *)a2 + 105);
      *(_OWORD *)(a1 + 808) = v66;
      *(_OWORD *)(a1 + 824) = v67;
      *(_OWORD *)(a1 + 792) = v65;
      *(_OWORD *)(a1 + 848) = a2[53];
      v68 = a2[54];
      v69 = a2[55];
      v70 = a2[56];
      *(_QWORD *)(a1 + 912) = *((_QWORD *)a2 + 114);
      *(_OWORD *)(a1 + 880) = v69;
      *(_OWORD *)(a1 + 896) = v70;
      *(_OWORD *)(a1 + 864) = v68;
      *(_OWORD *)(a1 + 920) = *(__int128 *)((char *)a2 + 920);
      v71 = *(__int128 *)((char *)a2 + 936);
      v72 = *(__int128 *)((char *)a2 + 952);
      v73 = *(__int128 *)((char *)a2 + 968);
      *(_QWORD *)(a1 + 984) = *((_QWORD *)a2 + 123);
      *(_OWORD *)(a1 + 952) = v72;
      *(_OWORD *)(a1 + 968) = v73;
      *(_OWORD *)(a1 + 936) = v71;
      *(_OWORD *)(a1 + 992) = a2[62];
      v74 = a2[63];
      v75 = a2[64];
      v76 = a2[65];
      *(_QWORD *)(a1 + 1056) = *((_QWORD *)a2 + 132);
      *(_OWORD *)(a1 + 1040) = v76;
      *(_OWORD *)(a1 + 1008) = v74;
      *(_OWORD *)(a1 + 1024) = v75;
      *(_OWORD *)(a1 + 1064) = *(__int128 *)((char *)a2 + 1064);
      v77 = *(__int128 *)((char *)a2 + 1080);
      v78 = *(__int128 *)((char *)a2 + 1096);
      v79 = *(__int128 *)((char *)a2 + 1112);
      *(_QWORD *)(a1 + 1128) = *((_QWORD *)a2 + 141);
      *(_OWORD *)(a1 + 1096) = v78;
      *(_OWORD *)(a1 + 1112) = v79;
      *(_OWORD *)(a1 + 1080) = v77;
      memcpy((void *)(a1 + 1136), a2 + 71, 0x288uLL);
      v80 = *(__int128 *)((char *)a2 + 1784);
      *(_QWORD *)(a1 + 1800) = *((_QWORD *)a2 + 225);
      *(_OWORD *)(a1 + 1784) = v80;
      v81 = *((_QWORD *)a2 + 228);
      *(_OWORD *)(a1 + 1808) = a2[113];
      *(_QWORD *)(a1 + 1824) = v81;
      memcpy((void *)(a1 + 1832), (char *)a2 + 1832, 0x288uLL);
      memcpy((void *)(a1 + 2480), a2 + 155, 0x288uLL);
      v82 = *(__int128 *)((char *)a2 + 3128);
      *(_QWORD *)(a1 + 3144) = *((_QWORD *)a2 + 393);
      *(_OWORD *)(a1 + 3128) = v82;
      result = (__n128)a2[197];
      *(__n128 *)(a1 + 3152) = result;
      *(_BYTE *)(a1 + 3168) = 1;
    }
    *(_BYTE *)(a1 + 3176) = 1;
  }
  return result;
}

uint64_t *sub_20F3425CC(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  BOOL v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v79 = *(a2 - 1);
        v80 = *v8;
        if (*(_QWORD *)(v79 + 208) - *(_QWORD *)(v79 + 200) > *(_QWORD *)(*v8 + 208) - *(_QWORD *)(*v8 + 200))
        {
          *v8 = v79;
          *(a2 - 1) = v80;
        }
        return result;
      case 3:
        v81 = *v8;
        v82 = v8[1];
        v83 = *(_QWORD *)(v82 + 208) - *(_QWORD *)(v82 + 200);
        v84 = *(a2 - 1);
        v85 = *(_QWORD *)(v84 + 208) - *(_QWORD *)(v84 + 200);
        if (v83 <= *(_QWORD *)(*v8 + 208) - *(_QWORD *)(*v8 + 200))
        {
          if (v85 > v83)
          {
            v8[1] = v84;
            *(a2 - 1) = v82;
            v91 = v8[1];
            goto LABEL_166;
          }
        }
        else
        {
          if (v85 <= v83)
          {
            *v8 = v82;
            v8[1] = v81;
            v130 = *(a2 - 1);
            if (*(_QWORD *)(v130 + 208) - *(_QWORD *)(v130 + 200) <= *(_QWORD *)(v81 + 208) - *(_QWORD *)(v81 + 200))
              return result;
            v8[1] = v130;
          }
          else
          {
            *v8 = v84;
          }
          *(a2 - 1) = v81;
        }
        return result;
      case 4:
        return sub_20F343534(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v86 = v8 + 1;
        v87 = v8 + 2;
        v88 = v8 + 3;
        result = sub_20F343534(v7, v7 + 1, v7 + 2, v7 + 3);
        v89 = *(a2 - 1);
        v90 = v7[3];
        if (*(_QWORD *)(v89 + 208) - *(_QWORD *)(v89 + 200) > *(_QWORD *)(v90 + 208) - *(_QWORD *)(v90 + 200))
        {
          *v88 = v89;
          *(a2 - 1) = v90;
          v91 = *v88;
          v92 = *v87;
          if (*(_QWORD *)(*v88 + 208) - *(_QWORD *)(*v88 + 200) > *(_QWORD *)(*v87 + 208) - *(_QWORD *)(*v87 + 200))
          {
            *v87 = v91;
            *v88 = v92;
            v93 = *v86;
            if (*(_QWORD *)(v91 + 208) - *(_QWORD *)(v91 + 200) > *(_QWORD *)(*v86 + 208) - *(_QWORD *)(*v86 + 200))
            {
              v7[1] = v91;
              v7[2] = v93;
LABEL_166:
              v127 = *v7;
              if (*(_QWORD *)(v91 + 208) - *(_QWORD *)(v91 + 200) > *(_QWORD *)(*v7 + 208) - *(_QWORD *)(*v7 + 200))
              {
                *v7 = v91;
                v7[1] = v127;
              }
            }
          }
        }
        return result;
      default:
        if (v9 > 191)
        {
          if (!a3)
          {
            if (v8 != a2)
            {
              v104 = (unint64_t)(v10 - 2) >> 1;
              v105 = v104;
              do
              {
                v106 = v105;
                if (v104 >= v105)
                {
                  v107 = (2 * v105) | 1;
                  v108 = &v8[v107];
                  if (2 * v106 + 2 >= v10)
                  {
                    v109 = *v108;
                  }
                  else
                  {
                    v109 = v108[1];
                    if (*(_QWORD *)(*v108 + 208) - *(_QWORD *)(*v108 + 200) > *(_QWORD *)(v109 + 208)
                                                                             - *(_QWORD *)(v109 + 200))
                    {
                      ++v108;
                      v107 = 2 * v106 + 2;
                    }
                    else
                    {
                      v109 = *v108;
                    }
                  }
                  v110 = &v8[v106];
                  v111 = *v110;
                  result = (uint64_t *)(*(_QWORD *)(*v110 + 208) - *(_QWORD *)(*v110 + 200));
                  if (*(_QWORD *)(v109 + 208) - *(_QWORD *)(v109 + 200) <= (unint64_t)result)
                  {
                    while (1)
                    {
                      *v110 = v109;
                      v110 = v108;
                      if (v104 < v107)
                        break;
                      v112 = (2 * v107) | 1;
                      v108 = &v8[v112];
                      v107 = 2 * v107 + 2;
                      if (v107 < v10)
                      {
                        v109 = *v108;
                        if (*(_QWORD *)(*v108 + 208) - *(_QWORD *)(*v108 + 200) <= *(_QWORD *)(v108[1] + 208)
                                                                                  - *(_QWORD *)(v108[1] + 200))
                        {
                          v107 = v112;
                        }
                        else
                        {
                          v109 = v108[1];
                          ++v108;
                        }
                        result = (uint64_t *)(*(_QWORD *)(v111 + 208) - *(_QWORD *)(v111 + 200));
                        if (*(_QWORD *)(v109 + 208) - *(_QWORD *)(v109 + 200) > (unint64_t)result)
                          break;
                      }
                      else
                      {
                        v109 = *v108;
                        v107 = v112;
                        result = (uint64_t *)(*(_QWORD *)(v111 + 208) - *(_QWORD *)(v111 + 200));
                        if (*(_QWORD *)(*v108 + 208) - *(_QWORD *)(*v108 + 200) > (unint64_t)result)
                          break;
                      }
                    }
                    *v110 = v111;
                  }
                }
                v105 = v106 - 1;
              }
              while (v106);
              v113 = (unint64_t)v9 >> 3;
              do
              {
                v115 = 0;
                v116 = *v8;
                v117 = (unint64_t)(v113 - 2) >> 1;
                v118 = v8;
                do
                {
                  while (1)
                  {
                    v120 = &v118[v115 + 1];
                    v121 = (2 * v115) | 1;
                    v115 = 2 * v115 + 2;
                    if (v115 < v113)
                      break;
                    v115 = v121;
                    *v118 = *v120;
                    v118 = v120;
                    if (v121 > v117)
                      goto LABEL_158;
                  }
                  v119 = *v120;
                  result = (uint64_t *)(*(_QWORD *)(*v120 + 208) - *(_QWORD *)(*v120 + 200));
                  if ((unint64_t)result <= *(_QWORD *)(v120[1] + 208) - *(_QWORD *)(v120[1] + 200))
                  {
                    v115 = v121;
                  }
                  else
                  {
                    v119 = v120[1];
                    ++v120;
                  }
                  *v118 = v119;
                  v118 = v120;
                }
                while (v115 <= v117);
LABEL_158:
                if (v120 == --a2)
                {
                  *v120 = v116;
                }
                else
                {
                  *v120 = *a2;
                  *a2 = v116;
                  v122 = (char *)v120 - (char *)v8 + 8;
                  if (v122 >= 9)
                  {
                    v123 = (((unint64_t)v122 >> 3) - 2) >> 1;
                    v124 = &v8[v123];
                    v125 = *v124;
                    v126 = *v120;
                    if (*(_QWORD *)(*v124 + 208) - *(_QWORD *)(*v124 + 200) > *(_QWORD *)(*v120 + 208)
                                                                             - *(_QWORD *)(*v120 + 200))
                    {
                      do
                      {
                        *v120 = v125;
                        v120 = v124;
                        if (!v123)
                          break;
                        v123 = (v123 - 1) >> 1;
                        v124 = &v8[v123];
                        v125 = *v124;
                      }
                      while (*(_QWORD *)(*v124 + 208) - *(_QWORD *)(*v124 + 200) > *(_QWORD *)(v126 + 208)
                                                                                  - *(_QWORD *)(v126 + 200));
                      *v120 = v126;
                    }
                  }
                }
              }
              while (v113-- > 2);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &v8[(unint64_t)v10 >> 1];
          v13 = *(a2 - 1);
          v14 = *(_QWORD *)(v13 + 208) - *(_QWORD *)(v13 + 200);
          if ((unint64_t)v9 < 0x401)
          {
            v18 = *v8;
            v19 = *v12;
            v20 = *(_QWORD *)(*v8 + 208) - *(_QWORD *)(*v8 + 200);
            if (v20 <= *(_QWORD *)(*v12 + 208) - *(_QWORD *)(*v12 + 200))
            {
              if (v14 > v20)
              {
                *v8 = v13;
                *(a2 - 1) = v18;
                v22 = *v12;
                if (*(_QWORD *)(*v8 + 208) - *(_QWORD *)(*v8 + 200) > *(_QWORD *)(*v12 + 208) - *(_QWORD *)(*v12 + 200))
                {
                  *v12 = *v8;
                  *v8 = v22;
                  --a3;
                  v23 = v22;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v14 <= v20)
            {
              *v12 = v18;
              *v8 = v19;
              v34 = *(a2 - 1);
              if (*(_QWORD *)(v34 + 208) - *(_QWORD *)(v34 + 200) <= *(_QWORD *)(v19 + 208) - *(_QWORD *)(v19 + 200))
                goto LABEL_32;
              *v8 = v34;
            }
            else
            {
              *v12 = v13;
            }
            *(a2 - 1) = v19;
LABEL_32:
            --a3;
            v23 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_55;
          }
          v15 = *v12;
          v16 = *v8;
          v17 = *(_QWORD *)(*v12 + 208) - *(_QWORD *)(*v12 + 200);
          if (v17 <= *(_QWORD *)(*v8 + 208) - *(_QWORD *)(*v8 + 200))
          {
            if (v14 > v17)
            {
              *v12 = v13;
              *(a2 - 1) = v15;
              v21 = *v8;
              if (*(_QWORD *)(*v12 + 208) - *(_QWORD *)(*v12 + 200) > *(_QWORD *)(*v8 + 208) - *(_QWORD *)(*v8 + 200))
              {
                *v8 = *v12;
                *v12 = v21;
              }
            }
          }
          else
          {
            if (v14 <= v17)
            {
              *v8 = v15;
              *v12 = v16;
              v24 = *(a2 - 1);
              if (*(_QWORD *)(v24 + 208) - *(_QWORD *)(v24 + 200) <= *(_QWORD *)(v16 + 208) - *(_QWORD *)(v16 + 200))
                goto LABEL_23;
              *v12 = v24;
            }
            else
            {
              *v8 = v13;
            }
            *(a2 - 1) = v16;
          }
LABEL_23:
          v25 = &v8[v11];
          v28 = *(v25 - 1);
          v26 = v25 - 1;
          v27 = v28;
          v29 = v8[1];
          v30 = *(_QWORD *)(v28 + 208) - *(_QWORD *)(v28 + 200);
          v31 = *(a2 - 2);
          v32 = *(_QWORD *)(v31 + 208) - *(_QWORD *)(v31 + 200);
          if (v30 <= *(_QWORD *)(v29 + 208) - *(_QWORD *)(v29 + 200))
          {
            if (v32 > v30)
            {
              *v26 = v31;
              *(a2 - 2) = v27;
              v33 = v8[1];
              if (*(_QWORD *)(*v26 + 208) - *(_QWORD *)(*v26 + 200) > *(_QWORD *)(v33 + 208) - *(_QWORD *)(v33 + 200))
              {
                v8[1] = *v26;
                *v26 = v33;
              }
            }
          }
          else
          {
            if (v32 <= v30)
            {
              v8[1] = v27;
              *v26 = v29;
              v36 = *(a2 - 2);
              if (*(_QWORD *)(v36 + 208) - *(_QWORD *)(v36 + 200) <= *(_QWORD *)(v29 + 208) - *(_QWORD *)(v29 + 200))
                goto LABEL_37;
              *v26 = v36;
            }
            else
            {
              v8[1] = v31;
            }
            *(a2 - 2) = v29;
          }
LABEL_37:
          v37 = &v8[v11];
          v40 = v37[1];
          v38 = v37 + 1;
          v39 = v40;
          v41 = v8[2];
          v42 = *(_QWORD *)(v40 + 208) - *(_QWORD *)(v40 + 200);
          v43 = *(a2 - 3);
          v44 = *(_QWORD *)(v43 + 208) - *(_QWORD *)(v43 + 200);
          if (v42 <= *(_QWORD *)(v41 + 208) - *(_QWORD *)(v41 + 200))
          {
            if (v44 > v42)
            {
              *v38 = v43;
              *(a2 - 3) = v39;
              v45 = v8[2];
              if (*(_QWORD *)(*v38 + 208) - *(_QWORD *)(*v38 + 200) > *(_QWORD *)(v45 + 208) - *(_QWORD *)(v45 + 200))
              {
                v8[2] = *v38;
                *v38 = v45;
              }
            }
          }
          else
          {
            if (v44 <= v42)
            {
              v8[2] = v39;
              *v38 = v41;
              v46 = *(a2 - 3);
              if (*(_QWORD *)(v46 + 208) - *(_QWORD *)(v46 + 200) <= *(_QWORD *)(v41 + 208) - *(_QWORD *)(v41 + 200))
                goto LABEL_46;
              *v38 = v46;
            }
            else
            {
              v8[2] = v43;
            }
            *(a2 - 3) = v41;
          }
LABEL_46:
          v47 = *v12;
          v48 = *v26;
          v49 = *(_QWORD *)(*v12 + 208) - *(_QWORD *)(*v12 + 200);
          v50 = *v38;
          v51 = *(_QWORD *)(*v38 + 208) - *(_QWORD *)(*v38 + 200);
          if (v49 > *(_QWORD *)(*v26 + 208) - *(_QWORD *)(*v26 + 200))
          {
            if (v51 <= v49)
            {
              *v26 = v47;
              *v12 = v48;
              v26 = v12;
              v47 = v50;
              if (*(_QWORD *)(v50 + 208) - *(_QWORD *)(v50 + 200) <= *(_QWORD *)(v48 + 208) - *(_QWORD *)(v48 + 200))
              {
                v52 = *v8;
                *v8 = v48;
                *v12 = v52;
                --a3;
                v23 = *v8;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v51 <= v49)
            goto LABEL_54;
          *v12 = v50;
          *v38 = v47;
          v38 = v12;
          v47 = v48;
          if (*(_QWORD *)(v50 + 208) - *(_QWORD *)(v50 + 200) > *(_QWORD *)(v48 + 208) - *(_QWORD *)(v48 + 200))
          {
LABEL_53:
            *v26 = v50;
            *v38 = v48;
LABEL_54:
            v53 = *v8;
            *v8 = v47;
            *v12 = v53;
            --a3;
            v23 = *v8;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_55:
            v35 = *(_QWORD *)(v23 + 208) - *(_QWORD *)(v23 + 200);
            if (*(_QWORD *)(*(v8 - 1) + 208) - *(_QWORD *)(*(v8 - 1) + 200) > v35)
              goto LABEL_56;
            if (v35 <= *(_QWORD *)(*(a2 - 1) + 208) - *(_QWORD *)(*(a2 - 1) + 200))
            {
              v70 = v8 + 1;
              do
              {
                v8 = v70;
                if (v70 >= a2)
                  break;
                ++v70;
              }
              while (v35 <= *(_QWORD *)(*v8 + 208) - *(_QWORD *)(*v8 + 200));
            }
            else
            {
              do
              {
                v69 = v8[1];
                ++v8;
              }
              while (v35 <= *(_QWORD *)(v69 + 208) - *(_QWORD *)(v69 + 200));
            }
            v71 = a2;
            if (v8 < a2)
            {
              v71 = a2;
              do
                v72 = *--v71;
              while (v35 > *(_QWORD *)(v72 + 208) - *(_QWORD *)(v72 + 200));
            }
            if (v8 < v71)
            {
              v73 = *v8;
              v74 = *v71;
              do
              {
                *v8 = v74;
                *v71 = v73;
                v75 = *(_QWORD *)(v23 + 208) - *(_QWORD *)(v23 + 200);
                do
                {
                  v76 = v8[1];
                  ++v8;
                  v73 = v76;
                }
                while (v75 <= *(_QWORD *)(v76 + 208) - *(_QWORD *)(v76 + 200));
                do
                {
                  v77 = *--v71;
                  v74 = v77;
                }
                while (v75 > *(_QWORD *)(v77 + 208) - *(_QWORD *)(v77 + 200));
              }
              while (v8 < v71);
            }
            v78 = v8 - 1;
            if (v8 - 1 != v7)
              *v7 = *v78;
            a4 = 0;
            *v78 = v23;
            continue;
          }
          v68 = *v8;
          *v8 = v50;
          *v12 = v68;
          --a3;
          v23 = *v8;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_33:
          v35 = *(_QWORD *)(v23 + 208) - *(_QWORD *)(v23 + 200);
LABEL_56:
          v54 = 0;
          do
            v55 = v8[++v54];
          while (*(_QWORD *)(v55 + 208) - *(_QWORD *)(v55 + 200) > v35);
          v56 = &v8[v54];
          v57 = a2;
          if (v54 == 1)
          {
            v57 = a2;
            do
            {
              if (v56 >= v57)
                break;
              v59 = *--v57;
            }
            while (*(_QWORD *)(v59 + 208) - *(_QWORD *)(v59 + 200) <= v35);
          }
          else
          {
            do
              v58 = *--v57;
            while (*(_QWORD *)(v58 + 208) - *(_QWORD *)(v58 + 200) <= v35);
          }
          if (v56 >= v57)
          {
            v66 = v56 - 1;
            if (v56 - 1 != v8)
              goto LABEL_73;
          }
          else
          {
            v60 = *v57;
            v61 = &v8[v54];
            v62 = v57;
            do
            {
              *v61 = v60;
              *v62 = v55;
              v63 = *(_QWORD *)(v23 + 208) - *(_QWORD *)(v23 + 200);
              do
              {
                v64 = v61[1];
                ++v61;
                v55 = v64;
              }
              while (*(_QWORD *)(v64 + 208) - *(_QWORD *)(v64 + 200) > v63);
              do
              {
                v65 = *--v62;
                v60 = v65;
              }
              while (*(_QWORD *)(v65 + 208) - *(_QWORD *)(v65 + 200) <= v63);
            }
            while (v61 < v62);
            v66 = v61 - 1;
            if (v61 - 1 == v8)
              goto LABEL_74;
LABEL_73:
            *v8 = *v66;
          }
LABEL_74:
          *v66 = v23;
          if (v56 < v57)
            goto LABEL_77;
          v67 = sub_20F34316C(v8, v66);
          v8 = v66 + 1;
          result = (uint64_t *)sub_20F34316C(v66 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v67)
              continue;
LABEL_77:
            result = (uint64_t *)sub_20F3425CC(v7, v66, a3, a4 & 1);
            a4 = 0;
            v8 = v66 + 1;
            continue;
          }
          a2 = v66;
          if (v67)
            return result;
          goto LABEL_2;
        }
        v94 = v8 + 1;
        v96 = v8 == a2 || v94 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v96)
          {
            v97 = 8;
            v98 = v8;
            do
            {
              v101 = *v98;
              v100 = v98[1];
              v98 = v94;
              if (*(_QWORD *)(v100 + 208) - *(_QWORD *)(v100 + 200) > *(_QWORD *)(v101 + 208) - *(_QWORD *)(v101 + 200))
              {
                v102 = v97;
                do
                {
                  *(uint64_t *)((char *)v8 + v102) = v101;
                  v103 = v102 - 8;
                  if (v102 == 8)
                  {
                    v99 = v8;
                    goto LABEL_121;
                  }
                  v101 = *(uint64_t *)((char *)v8 + v102 - 16);
                  v102 -= 8;
                }
                while (*(_QWORD *)(v100 + 208) - *(_QWORD *)(v100 + 200) > *(_QWORD *)(v101 + 208)
                                                                          - *(_QWORD *)(v101 + 200));
                v99 = (uint64_t *)((char *)v8 + v103);
LABEL_121:
                *v99 = v100;
              }
              v94 = v98 + 1;
              v97 += 8;
            }
            while (v98 + 1 != a2);
          }
        }
        else if (!v96)
        {
          do
          {
            v129 = *v7;
            v128 = v7[1];
            v7 = v94;
            if (*(_QWORD *)(v128 + 208) - *(_QWORD *)(v128 + 200) > *(_QWORD *)(v129 + 208) - *(_QWORD *)(v129 + 200))
            {
              do
              {
                *v94 = v129;
                v129 = *(v94 - 2);
                --v94;
              }
              while (*(_QWORD *)(v128 + 208) - *(_QWORD *)(v128 + 200) > *(_QWORD *)(v129 + 208)
                                                                        - *(_QWORD *)(v129 + 200));
              *v94 = v128;
            }
            v94 = v7 + 1;
          }
          while (v7 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F34316C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_QWORD *)(v6 + 208) - *(_QWORD *)(v6 + 200) > *(_QWORD *)(*a1 + 208) - *(_QWORD *)(*a1 + 200))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v8 = *a1;
      v9 = a1[1];
      v10 = *(_QWORD *)(v9 + 208) - *(_QWORD *)(v9 + 200);
      v11 = *(a2 - 1);
      v12 = *(_QWORD *)(v11 + 208) - *(_QWORD *)(v11 + 200);
      if (v10 <= *(_QWORD *)(*a1 + 208) - *(_QWORD *)(*a1 + 200))
      {
        if (v12 > v10)
        {
          a1[1] = v11;
          *(a2 - 1) = v9;
          v33 = *a1;
          v32 = a1[1];
          if (*(_QWORD *)(v32 + 208) - *(_QWORD *)(v32 + 200) > *(_QWORD *)(*a1 + 208) - *(_QWORD *)(*a1 + 200))
          {
            *a1 = v32;
            a1[1] = v33;
          }
        }
      }
      else if (v12 <= v10)
      {
        *a1 = v9;
        a1[1] = v8;
        v41 = *(a2 - 1);
        if (*(_QWORD *)(v41 + 208) - *(_QWORD *)(v41 + 200) > *(_QWORD *)(v8 + 208) - *(_QWORD *)(v8 + 200))
        {
          a1[1] = v41;
          *(a2 - 1) = v8;
        }
      }
      else
      {
        *a1 = v11;
        *(a2 - 1) = v8;
      }
      return result;
    case 4:
      sub_20F343534(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v23 = a1 + 1;
      v24 = a1 + 2;
      v25 = a1 + 3;
      sub_20F343534(a1, a1 + 1, a1 + 2, a1 + 3);
      v26 = *(a2 - 1);
      v27 = a1[3];
      if (*(_QWORD *)(v26 + 208) - *(_QWORD *)(v26 + 200) <= *(_QWORD *)(v27 + 208) - *(_QWORD *)(v27 + 200))
        return 1;
      *v25 = v26;
      *(a2 - 1) = v27;
      v28 = *v25;
      v29 = *v24;
      if (*(_QWORD *)(*v25 + 208) - *(_QWORD *)(*v25 + 200) <= *(_QWORD *)(*v24 + 208) - *(_QWORD *)(*v24 + 200))
        return 1;
      *v24 = v28;
      *v25 = v29;
      v30 = *v23;
      if (*(_QWORD *)(v28 + 208) - *(_QWORD *)(v28 + 200) <= *(_QWORD *)(*v23 + 208) - *(_QWORD *)(*v23 + 200))
        return 1;
      a1[1] = v28;
      a1[2] = v30;
      v31 = *a1;
      if (*(_QWORD *)(v28 + 208) - *(_QWORD *)(v28 + 200) <= *(_QWORD *)(*a1 + 208) - *(_QWORD *)(*a1 + 200))
        return 1;
      *a1 = v28;
      a1[1] = v31;
      return 1;
    default:
      v14 = a1 + 2;
      v13 = a1[2];
      v15 = a1[1];
      v16 = *a1;
      v17 = *(_QWORD *)(v15 + 208) - *(_QWORD *)(v15 + 200);
      v18 = *(_QWORD *)(v13 + 208) - *(_QWORD *)(v13 + 200);
      if (v17 <= *(_QWORD *)(*a1 + 208) - *(_QWORD *)(*a1 + 200))
      {
        if (v18 <= v17)
          goto LABEL_25;
        a1[1] = v13;
        *v14 = v15;
        v21 = *(_QWORD *)(v13 + 208) - *(_QWORD *)(v13 + 200);
        v22 = *(_QWORD *)(v16 + 208) - *(_QWORD *)(v16 + 200);
        v19 = a1;
        v20 = a1 + 1;
      }
      else
      {
        v19 = a1;
        v20 = a1 + 2;
        if (v18 > v17)
          goto LABEL_24;
        *a1 = v15;
        a1[1] = v16;
        v21 = *(_QWORD *)(v13 + 208) - *(_QWORD *)(v13 + 200);
        v22 = *(_QWORD *)(v16 + 208) - *(_QWORD *)(v16 + 200);
        v19 = a1 + 1;
        v20 = a1 + 2;
      }
      if (v21 <= v22)
        goto LABEL_25;
LABEL_24:
      *v19 = v13;
      *v20 = v16;
LABEL_25:
      v34 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v35 = 0;
      v36 = 24;
      break;
  }
  while (1)
  {
    v37 = *v34;
    v38 = *v14;
    if (*(_QWORD *)(*v34 + 208) - *(_QWORD *)(*v34 + 200) > *(_QWORD *)(v38 + 208) - *(_QWORD *)(v38 + 200))
      break;
LABEL_34:
    v14 = v34;
    v36 += 8;
    if (++v34 == a2)
      return 1;
  }
  v39 = v36;
  do
  {
    *(uint64_t *)((char *)a1 + v39) = v38;
    v40 = v39 - 8;
    if (v39 == 8)
    {
      *a1 = v37;
      if (++v35 != 8)
        goto LABEL_34;
      return v34 + 1 == a2;
    }
    v38 = *(uint64_t *)((char *)a1 + v39 - 16);
    v39 -= 8;
  }
  while (*(_QWORD *)(v37 + 208) - *(_QWORD *)(v37 + 200) > *(_QWORD *)(v38 + 208) - *(_QWORD *)(v38 + 200));
  *(uint64_t *)((char *)a1 + v40) = v37;
  if (++v35 != 8)
    goto LABEL_34;
  return v34 + 1 == a2;
}

uint64_t *sub_20F343534(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(*a2 + 208) - *(_QWORD *)(*a2 + 200);
  v7 = *a3;
  v8 = *(_QWORD *)(*a3 + 208) - *(_QWORD *)(*a3 + 200);
  if (v6 <= *(_QWORD *)(*result + 208) - *(_QWORD *)(*result + 200))
  {
    if (v8 <= v6)
    {
      v4 = *a3;
    }
    else
    {
      *a2 = v7;
      *a3 = v4;
      v9 = *result;
      if (*(_QWORD *)(*a2 + 208) - *(_QWORD *)(*a2 + 200) > *(_QWORD *)(*result + 208) - *(_QWORD *)(*result + 200))
      {
        *result = *a2;
        *a2 = v9;
        v4 = *a3;
      }
    }
  }
  else
  {
    if (v8 > v6)
    {
      *result = v7;
LABEL_9:
      *a3 = v5;
      v4 = v5;
      goto LABEL_11;
    }
    *result = v4;
    *a2 = v5;
    v4 = *a3;
    if (*(_QWORD *)(*a3 + 208) - *(_QWORD *)(*a3 + 200) > *(_QWORD *)(v5 + 208) - *(_QWORD *)(v5 + 200))
    {
      *a2 = v4;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_QWORD *)(*a4 + 208) - *(_QWORD *)(*a4 + 200) > *(_QWORD *)(v4 + 208) - *(_QWORD *)(v4 + 200))
  {
    *a3 = *a4;
    *a4 = v4;
    v10 = *a2;
    if (*(_QWORD *)(*a3 + 208) - *(_QWORD *)(*a3 + 200) > *(_QWORD *)(*a2 + 208) - *(_QWORD *)(*a2 + 200))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *result;
      if (*(_QWORD *)(*a2 + 208) - *(_QWORD *)(*a2 + 200) > *(_QWORD *)(*result + 208) - *(_QWORD *)(*result + 200))
      {
        *result = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void sub_20F343664()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F343678(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FDF60;
  result[1] = v3;
  return result;
}

uint64_t sub_20F3436AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FDF60;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F3436C8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 2824);
  v4 = *(_QWORD *)(v2 + 2832);
  if (v3 != v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v3 + 16);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 160) == *a2)
          break;
      }
      v3 += 4472;
      if (v3 == v4)
        return 0;
    }
  }
  if (v3 == v4)
    return 0;
  else
    return v3;
}

uint64_t sub_20F34371C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3vio12area_mapping14MappingManager26MapGroupConnectionsByRelocERKNSt3__113unordered_mapIyjN"
                     "S3_4hashIyEENS3_8equal_toIyEENS3_9allocatorINS3_4pairIKyjEEEEEERSB_EUlyE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3vio12area_mapping14MappingManager26MapGroupConnectionsByRelocERKNSt3__113unorde"
                                "red_mapIyjNS3_4hashIyEENS3_8equal_toIyEENS3_9allocatorINS3_4pairIKyjEEEEEERSB_EUlyE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3vio12area_mapping14MappingManager26MapGroupConnectionsByRelocERKNSt3__113unordered_mapIyjNS3_4hashIyEENS3_8equal_toIyEENS3_9allocatorINS3_4pairIKyjEEEEEERSB_EUlyE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3vio12area_mapping14MappingManager26MapGroupConnectionsByRelocERKNSt3__113unordered_mapIyjNS3_4hashIyEENS3_8equal_toIyEENS3_9allocatorINS3_4pairIKyjEEEEEERSB_EUlyE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F343788()
{
  return &unk_24C9FDFD0;
}

void sub_20F343794(uint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9;
  __n128 *v10;
  __n128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __n128 *v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  __n128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __n128 v52;
  __int128 v53;
  __int128 v54;
  __n128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __n128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __n128 v68;
  __int128 v69;
  __int128 v70;
  __n128 *v71;
  unint64_t v72;
  __n128 *v73;
  double v74;
  double v75;
  __n128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __n128 v81;
  __int128 v82;
  __int128 v83;
  __n128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __n128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __n128 v92;
  __int128 v93;
  __int128 v94;
  double v95;
  double v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  double v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  double v109;
  unint64_t v110;
  double v111;
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  double v116;
  double v117;
  __int128 *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  BOOL v122;
  __n128 v123;
  unint64_t v124;
  double v125;
  unint64_t v126;
  double v127;
  unint64_t v128;
  unint64_t v129;
  double v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  double v134;
  double v135;
  __int128 *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 *v143;
  double v144;
  double v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 *v149;
  __int128 *v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  _OWORD *v168;
  BOOL v170;
  uint64_t v171;
  _OWORD *v172;
  uint64_t v173;
  double v174;
  double v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  int64_t v179;
  int64_t v180;
  BOOL v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  double v185;
  unint64_t v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  int64_t v192;
  uint64_t v193;
  unint64_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  unint64_t v198;
  uint64_t v199;
  int64_t v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  double v207;
  unint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  double v217;
  double v218;
  _OWORD *v219;
  __int128 v220;
  double v221;
  __int128 v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __n128 v237;
  __int128 v238;
  __int128 v239;
  __n128 v240;
  __int128 v241;
  __n128 v242;
  __n128 v243;
  __n128 v244;
  __n128 v245;
  __n128 v246;
  __n128 v247;
  __n128 v248;
  __n128 v249;
  __n128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;

BOOL sub_20F344AF8(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  __int128 *v15;
  double v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 *v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;

  v5 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 8) < *(double *)(a1 + 48))
      {
        v7 = *(_QWORD *)(a1 + 48);
        v9 = *(_OWORD *)(a1 + 16);
        v8 = *(_OWORD *)(a1 + 32);
        v10 = *(_OWORD *)a1;
        v11 = *(_OWORD *)(a2 - 40);
        v12 = *(_OWORD *)(a2 - 24);
        v13 = *(_OWORD *)(a2 - 56);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v11;
        *(_OWORD *)(a1 + 32) = v12;
        *(_OWORD *)a1 = v13;
        *(_OWORD *)(a2 - 56) = v10;
        *(_OWORD *)(a2 - 40) = v9;
        *(_OWORD *)(a2 - 24) = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      v14 = (__int128 *)(a1 + 56);
      v15 = (__int128 *)(a2 - 56);
      v16 = *(double *)(a1 + 104);
      v17 = *(double *)(a2 - 8);
      if (v16 >= *(double *)(a1 + 48))
      {
        if (v17 < v16)
        {
          v60 = *(_QWORD *)(a1 + 104);
          v62 = *(_OWORD *)(a1 + 72);
          v61 = *(_OWORD *)(a1 + 88);
          v63 = *v14;
          v65 = *(_OWORD *)(a2 - 40);
          v64 = *(_OWORD *)(a2 - 24);
          v66 = *v15;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v65;
          *(_OWORD *)(a1 + 88) = v64;
          *v14 = v66;
          *v15 = v63;
          *(_OWORD *)(a2 - 40) = v62;
          *(_OWORD *)(a2 - 24) = v61;
          *(_QWORD *)(a2 - 8) = v60;
          if (*(double *)(a1 + 104) < *(double *)(a1 + 48))
          {
            v67 = *(_QWORD *)(a1 + 48);
            v69 = *(_OWORD *)(a1 + 16);
            v68 = *(_OWORD *)(a1 + 32);
            v70 = *(_OWORD *)a1;
            v71 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v71;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
            *v14 = v70;
            *(_OWORD *)(a1 + 72) = v69;
            *(_OWORD *)(a1 + 88) = v68;
            *(_QWORD *)(a1 + 104) = v67;
          }
        }
      }
      else if (v17 >= v16)
      {
        v82 = *(_QWORD *)(a1 + 48);
        v84 = *(_OWORD *)(a1 + 16);
        v83 = *(_OWORD *)(a1 + 32);
        v85 = *(_OWORD *)a1;
        v86 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v86;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
        *v14 = v85;
        *(_OWORD *)(a1 + 72) = v84;
        *(_OWORD *)(a1 + 88) = v83;
        *(_QWORD *)(a1 + 104) = v82;
        if (*(double *)(a2 - 8) < *(double *)(a1 + 104))
        {
          v87 = *(_QWORD *)(a1 + 104);
          v89 = *(_OWORD *)(a1 + 72);
          v88 = *(_OWORD *)(a1 + 88);
          v90 = *v14;
          v92 = *(_OWORD *)(a2 - 40);
          v91 = *(_OWORD *)(a2 - 24);
          v93 = *v15;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(a1 + 72) = v92;
          *(_OWORD *)(a1 + 88) = v91;
          *v14 = v93;
          *v15 = v90;
          *(_OWORD *)(a2 - 40) = v89;
          *(_OWORD *)(a2 - 24) = v88;
          *(_QWORD *)(a2 - 8) = v87;
        }
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 48);
        v20 = *(_OWORD *)(a1 + 16);
        v19 = *(_OWORD *)(a1 + 32);
        v21 = *(_OWORD *)a1;
        v23 = *(_OWORD *)(a2 - 40);
        v22 = *(_OWORD *)(a2 - 24);
        v24 = *v15;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 16) = v23;
        *(_OWORD *)(a1 + 32) = v22;
        *(_OWORD *)a1 = v24;
        *v15 = v21;
        *(_OWORD *)(a2 - 40) = v20;
        *(_OWORD *)(a2 - 24) = v19;
        *(_QWORD *)(a2 - 8) = v18;
      }
      return result;
    case 4:
      sub_20F3450E8((__int128 *)a1, (double *)(a1 + 56), (double *)(a1 + 112), (__int128 *)(a2 - 56), a3);
      return 1;
    case 5:
      v35 = (__int128 *)(a1 + 56);
      v36 = (__int128 *)(a1 + 112);
      v37 = (__int128 *)(a1 + 168);
      sub_20F3450E8((__int128 *)a1, (double *)(a1 + 56), (double *)(a1 + 112), (__int128 *)(a1 + 168), a3);
      if (*(double *)(a2 - 8) >= *(double *)(a1 + 216))
        return 1;
      v38 = *(_QWORD *)(a1 + 216);
      v40 = *(_OWORD *)(a1 + 184);
      v39 = *(_OWORD *)(a1 + 200);
      v41 = *v37;
      v42 = *(_OWORD *)(a2 - 40);
      v43 = *(_OWORD *)(a2 - 24);
      v44 = *(_OWORD *)(a2 - 56);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 184) = v42;
      *(_OWORD *)(a1 + 200) = v43;
      *v37 = v44;
      *(_OWORD *)(a2 - 56) = v41;
      *(_OWORD *)(a2 - 40) = v40;
      *(_OWORD *)(a2 - 24) = v39;
      *(_QWORD *)(a2 - 8) = v38;
      if (*(double *)(a1 + 216) >= *(double *)(a1 + 160))
        return 1;
      v45 = *(_QWORD *)(a1 + 160);
      v47 = *(_OWORD *)(a1 + 128);
      v46 = *(_OWORD *)(a1 + 144);
      v48 = *v36;
      v49 = *(_OWORD *)(a1 + 184);
      *v36 = *v37;
      *(_OWORD *)(a1 + 128) = v49;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 216);
      *v37 = v48;
      *(_OWORD *)(a1 + 184) = v47;
      *(_OWORD *)(a1 + 200) = v46;
      *(_QWORD *)(a1 + 216) = v45;
      if (*(double *)(a1 + 160) >= *(double *)(a1 + 104))
        return 1;
      v50 = *(_QWORD *)(a1 + 104);
      v52 = *(_OWORD *)(a1 + 72);
      v51 = *(_OWORD *)(a1 + 88);
      v53 = *v35;
      v54 = *(_OWORD *)(a1 + 128);
      *v35 = *v36;
      *(_OWORD *)(a1 + 72) = v54;
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
      *v36 = v53;
      *(_OWORD *)(a1 + 128) = v52;
      *(_OWORD *)(a1 + 144) = v51;
      *(_QWORD *)(a1 + 160) = v50;
      if (*(double *)(a1 + 104) >= *(double *)(a1 + 48))
        return 1;
      v55 = *(_QWORD *)(a1 + 48);
      v57 = *(_OWORD *)(a1 + 16);
      v56 = *(_OWORD *)(a1 + 32);
      v58 = *(_OWORD *)a1;
      v59 = *(_OWORD *)(a1 + 72);
      *(_OWORD *)a1 = *v35;
      *(_OWORD *)(a1 + 16) = v59;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
      *v35 = v58;
      *(_OWORD *)(a1 + 72) = v57;
      *(_OWORD *)(a1 + 88) = v56;
      result = 1;
      *(_QWORD *)(a1 + 104) = v55;
      return result;
    default:
      v25 = a1 + 112;
      v26 = (__int128 *)(a1 + 56);
      v27 = *(double *)(a1 + 104);
      v28 = *(double *)(a1 + 48);
      v29 = *(double *)(a1 + 160);
      if (v27 >= v28)
      {
        if (v29 < v27)
        {
          v72 = *(_QWORD *)(a1 + 104);
          v74 = *(_OWORD *)(a1 + 72);
          v73 = *(_OWORD *)(a1 + 88);
          v75 = *v26;
          v76 = *(_OWORD *)(a1 + 128);
          *v26 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 72) = v76;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
          *(_OWORD *)v25 = v75;
          *(_OWORD *)(a1 + 128) = v74;
          *(_OWORD *)(a1 + 144) = v73;
          *(_QWORD *)(a1 + 160) = v72;
          if (*(double *)(a1 + 104) < v28)
          {
            v77 = *(_QWORD *)(a1 + 48);
            v79 = *(_OWORD *)(a1 + 16);
            v78 = *(_OWORD *)(a1 + 32);
            v80 = *(_OWORD *)a1;
            v81 = *(_OWORD *)(a1 + 72);
            *(_OWORD *)a1 = *v26;
            *(_OWORD *)(a1 + 16) = v81;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
            *v26 = v80;
            *(_OWORD *)(a1 + 72) = v79;
            *(_OWORD *)(a1 + 88) = v78;
            *(_QWORD *)(a1 + 104) = v77;
          }
        }
      }
      else if (v29 >= v27)
      {
        v94 = *(_QWORD *)(a1 + 48);
        v96 = *(_OWORD *)(a1 + 16);
        v95 = *(_OWORD *)(a1 + 32);
        v97 = *(_OWORD *)a1;
        v98 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)a1 = *v26;
        *(_OWORD *)(a1 + 16) = v98;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 104);
        *v26 = v97;
        *(_OWORD *)(a1 + 72) = v96;
        *(_OWORD *)(a1 + 88) = v95;
        *(_QWORD *)(a1 + 104) = v94;
        if (v29 < *(double *)(a1 + 104))
        {
          v99 = *(_QWORD *)(a1 + 104);
          v101 = *(_OWORD *)(a1 + 72);
          v100 = *(_OWORD *)(a1 + 88);
          v102 = *v26;
          v103 = *(_OWORD *)(a1 + 128);
          *v26 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 72) = v103;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
          *(_OWORD *)v25 = v102;
          *(_OWORD *)(a1 + 128) = v101;
          *(_OWORD *)(a1 + 144) = v100;
          *(_QWORD *)(a1 + 160) = v99;
        }
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 48);
        v32 = *(_OWORD *)(a1 + 16);
        v31 = *(_OWORD *)(a1 + 32);
        v33 = *(_OWORD *)a1;
        v34 = *(_OWORD *)(a1 + 128);
        *(_OWORD *)a1 = *(_OWORD *)v25;
        *(_OWORD *)(a1 + 16) = v34;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 160);
        *(_OWORD *)v25 = v33;
        *(_OWORD *)(a1 + 128) = v32;
        *(_OWORD *)(a1 + 144) = v31;
        *(_QWORD *)(a1 + 160) = v30;
      }
      v104 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v105 = 0;
      v106 = 0;
      break;
  }
  while (1)
  {
    v108 = *(double *)(v104 + 48);
    if (v108 < *(double *)(v25 + 48))
    {
      v112 = *(_OWORD *)v104;
      v113 = *(_OWORD *)(v104 + 16);
      v114 = *(_OWORD *)(v104 + 32);
      v109 = v105;
      do
      {
        v110 = a1 + v109;
        v111 = *(_OWORD *)(a1 + v109 + 128);
        *(_OWORD *)(v110 + 168) = *(_OWORD *)(a1 + v109 + 112);
        *(_OWORD *)(v110 + 184) = v111;
        *(_OWORD *)(v110 + 200) = *(_OWORD *)(a1 + v109 + 144);
        *(_QWORD *)(v110 + 216) = *(_QWORD *)(a1 + v109 + 160);
        if (v109 == -112)
        {
          v107 = a1;
          goto LABEL_30;
        }
        v109 -= 56;
      }
      while (v108 < *(double *)(v110 + 104));
      v107 = a1 + v109 + 168;
LABEL_30:
      *(_OWORD *)v107 = v112;
      *(_OWORD *)(v107 + 16) = v113;
      *(_OWORD *)(v107 + 32) = v114;
      *(double *)(v107 + 48) = v108;
      if (++v106 == 8)
        return v104 + 56 == a2;
    }
    v25 = v104;
    v105 += 56;
    v104 += 56;
    if (v104 == a2)
      return 1;
  }
}

__n128 sub_20F3450E8(__int128 *a1, double *a2, double *a3, __int128 *a4, __n128 result)
{
  double v5;
  double v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v5 = a2[6];
  v6 = a3[6];
  if (v5 >= *((double *)a1 + 6))
  {
    if (v6 < v5)
    {
      v13 = *((_QWORD *)a2 + 6);
      v14 = *((_OWORD *)a2 + 1);
      result = *(__n128 *)(a2 + 4);
      v15 = *(_OWORD *)a2;
      v17 = *((_OWORD *)a3 + 1);
      v16 = *((_OWORD *)a3 + 2);
      v18 = *(_OWORD *)a3;
      a2[6] = a3[6];
      *((_OWORD *)a2 + 1) = v17;
      *((_OWORD *)a2 + 2) = v16;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)a3 = v15;
      *((_OWORD *)a3 + 1) = v14;
      *((__n128 *)a3 + 2) = result;
      *((_QWORD *)a3 + 6) = v13;
      if (a2[6] < *((double *)a1 + 6))
      {
        v19 = *((_QWORD *)a1 + 6);
        v20 = a1[1];
        result = (__n128)a1[2];
        v21 = *a1;
        v23 = *((_OWORD *)a2 + 1);
        v22 = *((_OWORD *)a2 + 2);
        v24 = *(_OWORD *)a2;
        *((double *)a1 + 6) = a2[6];
        a1[1] = v23;
        a1[2] = v22;
        *a1 = v24;
        *(_OWORD *)a2 = v21;
        *((_OWORD *)a2 + 1) = v20;
        *((__n128 *)a2 + 2) = result;
        *((_QWORD *)a2 + 6) = v19;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = *((_QWORD *)a1 + 6);
      v8 = a1[1];
      result = (__n128)a1[2];
      v9 = *a1;
      v11 = *((_OWORD *)a3 + 1);
      v10 = *((_OWORD *)a3 + 2);
      v12 = *(_OWORD *)a3;
      *((double *)a1 + 6) = a3[6];
      a1[1] = v11;
      a1[2] = v10;
      *a1 = v12;
LABEL_9:
      *(_OWORD *)a3 = v9;
      *((_OWORD *)a3 + 1) = v8;
      *((__n128 *)a3 + 2) = result;
      *((_QWORD *)a3 + 6) = v7;
      goto LABEL_10;
    }
    v25 = *((_QWORD *)a1 + 6);
    v26 = a1[1];
    result = (__n128)a1[2];
    v27 = *a1;
    v29 = *((_OWORD *)a2 + 1);
    v28 = *((_OWORD *)a2 + 2);
    v30 = *(_OWORD *)a2;
    *((double *)a1 + 6) = a2[6];
    a1[1] = v29;
    a1[2] = v28;
    *a1 = v30;
    *(_OWORD *)a2 = v27;
    *((_OWORD *)a2 + 1) = v26;
    *((__n128 *)a2 + 2) = result;
    *((_QWORD *)a2 + 6) = v25;
    if (a3[6] < a2[6])
    {
      v7 = *((_QWORD *)a2 + 6);
      v8 = *((_OWORD *)a2 + 1);
      result = *(__n128 *)(a2 + 4);
      v9 = *(_OWORD *)a2;
      v32 = *((_OWORD *)a3 + 1);
      v31 = *((_OWORD *)a3 + 2);
      v33 = *(_OWORD *)a3;
      a2[6] = a3[6];
      *((_OWORD *)a2 + 1) = v32;
      *((_OWORD *)a2 + 2) = v31;
      *(_OWORD *)a2 = v33;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = *((_QWORD *)a4 + 6);
  if (result.n128_f64[0] < a3[6])
  {
    v34 = *((_QWORD *)a3 + 6);
    v35 = *((_OWORD *)a3 + 1);
    result = *(__n128 *)(a3 + 4);
    v36 = *(_OWORD *)a3;
    v38 = a4[1];
    v37 = a4[2];
    v39 = *a4;
    a3[6] = *((double *)a4 + 6);
    *((_OWORD *)a3 + 1) = v38;
    *((_OWORD *)a3 + 2) = v37;
    *(_OWORD *)a3 = v39;
    *a4 = v36;
    a4[1] = v35;
    a4[2] = (__int128)result;
    *((_QWORD *)a4 + 6) = v34;
    result.n128_f64[0] = a3[6];
    if (result.n128_f64[0] < a2[6])
    {
      v40 = *((_QWORD *)a2 + 6);
      v41 = *((_OWORD *)a2 + 1);
      result = *(__n128 *)(a2 + 4);
      v42 = *(_OWORD *)a2;
      v44 = *((_OWORD *)a3 + 1);
      v43 = *((_OWORD *)a3 + 2);
      v45 = *(_OWORD *)a3;
      a2[6] = a3[6];
      *((_OWORD *)a2 + 1) = v44;
      *((_OWORD *)a2 + 2) = v43;
      *(_OWORD *)a2 = v45;
      *(_OWORD *)a3 = v42;
      *((_OWORD *)a3 + 1) = v41;
      *((__n128 *)a3 + 2) = result;
      *((_QWORD *)a3 + 6) = v40;
      result.n128_f64[0] = a2[6];
      if (result.n128_f64[0] < *((double *)a1 + 6))
      {
        v46 = *((_QWORD *)a1 + 6);
        v47 = a1[1];
        result = (__n128)a1[2];
        v48 = *a1;
        v50 = *((_OWORD *)a2 + 1);
        v49 = *((_OWORD *)a2 + 2);
        v51 = *(_OWORD *)a2;
        *((double *)a1 + 6) = a2[6];
        a1[1] = v50;
        a1[2] = v49;
        *a1 = v51;
        *(_OWORD *)a2 = v48;
        *((_OWORD *)a2 + 1) = v47;
        *((__n128 *)a2 + 2) = result;
        *((_QWORD *)a2 + 6) = v46;
      }
    }
  }
  return result;
}

uint64_t sub_20F3452EC(uint64_t a1)
{
  std::mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;

  v2 = *(std::mutex **)(a1 + 48);
  if (v2)
  {
    std::mutex::lock(*(std::mutex **)(a1 + 48));
    v2[1].__m_.__sig = 0;
    std::mutex::unlock(v2);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_QWORD **)(a1 + 8);
  if (v6)
  {
    sub_20F345380(a1 + 8, v6);
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_20F345380(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
    {
      v7 = *(void **)(v5 + 168);
      if (v7)
      {
        *(_QWORD *)(v5 + 176) = v7;
        operator delete(v7);
      }
      v8 = *(void **)(v5 + 144);
      if (v8)
      {
        *(_QWORD *)(v5 + 152) = v8;
        operator delete(v8);
      }
      v9 = *(void **)(v5 + 120);
      if (v9)
      {
        *(_QWORD *)(v5 + 128) = v9;
        operator delete(v9);
      }
      v10 = *(void **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)(v5 + 8) = v10;
        operator delete(v10);
      }
      result = MEMORY[0x212BC6398](v5, 0x1020C40196DCA0FLL);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t *sub_20F345428(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 168);
    if (v3)
    {
      *(_QWORD *)(v2 + 176) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(v2 + 144);
    if (v4)
    {
      *(_QWORD *)(v2 + 152) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(v2 + 120);
    if (v5)
    {
      *(_QWORD *)(v2 + 128) = v5;
      operator delete(v5);
    }
    v6 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v6;
      operator delete(v6);
    }
    MEMORY[0x212BC6398](v2, 0x1020C40196DCA0FLL);
  }
  return a1;
}

void sub_20F3454AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FDFF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20F3454BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FDFF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F3454EC(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_20F3454F8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v6 = operator new();
  sub_20E972DB4(v6, a3);
  memcpy((void *)(v6 + 1000), (const void *)(a3 + 1000), 0x1B8uLL);
  v17 = a2;
  v16 = 0;
  v18 = v6;
  v7 = *(_QWORD *)(a1 + 1768);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (_QWORD *)v7;
        v10 = *(_DWORD *)(v7 + 32);
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
    v18 = 0;
    v13 = 1;
  }
  else
  {
    v8 = (_QWORD *)(a1 + 1768);
    v9 = (_QWORD *)(a1 + 1768);
LABEL_8:
    v11 = operator new(0x30uLL);
    v11[8] = a2;
    v18 = 0;
    *((_QWORD *)v11 + 5) = v6;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v9;
    *v8 = v11;
    v12 = **(_QWORD **)(a1 + 1760);
    if (v12)
    {
      *(_QWORD *)(a1 + 1760) = v12;
      v11 = (_DWORD *)*v8;
    }
    sub_20E868578(*(uint64_t **)(a1 + 1768), (uint64_t *)v11);
    v13 = 0;
    v14 = 0;
    ++*(_QWORD *)(a1 + 1776);
    v6 = v18;
    v18 = 0;
    if (!v6)
    {
      v15 = v16;
      v16 = 0;
      if (!v15)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  sub_20E8E931C((uint64_t)&v18, v6);
  v14 = v13;
  v15 = v16;
  v16 = 0;
  if (v15)
LABEL_12:
    sub_20E8E931C((uint64_t)&v16, v15);
LABEL_13:
  if ((v14 & 1) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/viostateset.hpp", 171, (uint64_t)"ret.second", 10, (uint64_t)"Fail to insert a camera to the system. Camera is already there", 62, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
}

void sub_20F345694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  a12 = 0;
  sub_20E8E931C(v13, v12);
  v15 = a10;
  a10 = 0;
  if (v15)
  {
    sub_20E8E931C((uint64_t)&a10, v15);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char *sub_20F3456E8(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return (char *)v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return (char *)v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = (char *)operator new(0x48uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20F3459E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20F3459FC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return (char *)v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return (char *)v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = (char *)operator new(0xF8uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 216) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20F345D28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20F345D3C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x60uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  v15[3] = 0x3FF0000000000000;
  v15[7] = 0x3FF0000000000000;
  v15[10] = 0;
  v15[11] = 0x3FF0000000000000;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_20E8D2B3C(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20F346048(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F34605C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_20E877A38();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0x1000uLL);
      sub_20E8D0C84((char **)a1, &v89);
      return;
    }
    v89 = operator new(0x1000uLL);
    sub_20E8D0E10((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_20E877A38();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_20E877A38();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_20F34659C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F3465B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F3465CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F3465E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F346600()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F346614(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FE040;
  result[1] = v3;
  return result;
}

uint64_t sub_20F346648(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FE040;
  a2[1] = v2;
  return result;
}

void sub_20F346664(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(uint64_t **)(v3 + 2824);
  v5 = *(uint64_t **)(v3 + 2832);
  if (v4 != v5)
  {
    while (1)
    {
      v6 = v4[2];
      if (v6)
      {
        if (*(_QWORD *)(v6 + 160) == *a2)
          break;
      }
      v4 += 559;
      if (v4 == v5)
        return;
    }
  }
  if (v4 != v5 && v4 != 0)
    sub_20F2A69A4(v4[2], a3, (uint64_t *)(*v4 + 440));
}

uint64_t sub_20F3466CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping14MappingManager40UpdateTrackStructuresInFramesFromSubmapsERKNSt3__16vecto"
                     "rIN3cva7ImageIDINS0_4util18UUIDHashU32KeyPairEEENS3_9allocatorIS9_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping14MappingManager40UpdateTrackStructuresInFramesFromSubmapsERKNS"
                                "t3__16vectorIN3cva7ImageIDINS0_4util18UUIDHashU32KeyPairEEENS3_9allocatorIS9_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping14MappingManager40UpdateTrackStructuresInFramesFromSubmapsERKNSt3__16vectorIN3cva7ImageIDINS0_4util18UUIDHashU32KeyPairEEENS3_9allocatorIS9_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping14MappingManager40UpdateTrackStructuresInFramesFromSubmapsERKNSt3__16vectorIN3cva7ImageIDINS0_4util18UUIDHashU32KeyPairEEENS3_9allocatorIS9_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F346738()
{
  return &unk_24C9FE0B0;
}

void sub_20F346744(_QWORD *a1)
{
  if (a1)
  {
    sub_20F346744(*a1);
    sub_20F346744(a1[1]);
    sub_20E86872C((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void sub_20F346788(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t *v38;
  uint64_t **v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t *v49;
  __int128 v50;

  v4 = *(uint64_t **)a1;
  v6 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(_QWORD *)(v6 + 24);
    v10 = *(_QWORD *)(v6 + 32);
    *((_QWORD *)&v50 + 1) = v10;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v9 = *(_QWORD *)(v6 + 24);
    v10 = *(_QWORD *)(v6 + 32);
    *((_QWORD *)&v50 + 1) = v10;
  }
  v12 = 0;
  *(_QWORD *)&v50 = v9;
  _X11 = *v4;
  __asm { PRFM            #4, [X11] }
  v18 = (0x9DDFEA08EB382D69 * v10 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v10
                                                                            + 0x376ADF16980614E5) >> 32);
  v19 = v4[3];
  for (i = (v18 >> 7) ^ 0x13701D; ; i = v12 + v21)
  {
    v21 = i & v19;
    v22 = *(_QWORD *)(_X11 + v21);
    v23 = ((v22 ^ (0x101010101010101 * (v18 & 0x7F))) - 0x101010101010101) & ~(v22 ^ (0x101010101010101
                                                                                        * (v18 & 0x7F))) & 0x8080808080808080;
    if (v23)
      break;
LABEL_15:
    if ((v22 & (~v22 << 6) & 0x8080808080808080) != 0)
    {
      v30 = v4[1] + 32 * sub_20F346A98(v4, v18);
      *(_OWORD *)v30 = v50;
      *(_QWORD *)(v30 + 16) = v6;
      *(_QWORD *)(v30 + 24) = v5;
      goto LABEL_23;
    }
    v12 += 8;
  }
  while (1)
  {
    v24 = v4[1] + 32 * ((v21 + (__clz(__rbit64(v23)) >> 3)) & v19);
    v25 = *(_QWORD *)v24;
    v26 = *(_DWORD *)(v24 + 8);
    if (v25 == v9 && v26 == (_DWORD)v10)
      break;
    v23 &= v23 - 1;
    if (!v23)
      goto LABEL_15;
  }
  if (v5)
  {
    v28 = (unint64_t *)&v5->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_23:
  if (v5)
  {
    v31 = (unint64_t *)&v5->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v33 = *a2;
  v34 = *(uint64_t **)(*a2 + 200);
  v35 = *(uint64_t **)(v33 + 208);
LABEL_32:
  if (v34 != v35)
  {
    v37 = *(uint64_t ***)(a1 + 8);
    v39 = v37 + 1;
    v38 = v37[1];
    if (!v38)
    {
      v43 = (uint64_t *)(v37 + 1);
      goto LABEL_49;
    }
    v40 = *((_DWORD *)v34 + 4);
    v41 = *v34;
    v42 = *((_DWORD *)v34 + 2);
    while (1)
    {
      while (1)
      {
        v43 = v38;
        v44 = *((_DWORD *)v38 + 12);
        if (v40 == v44)
          break;
        if (v40 >= v44)
        {
          if (v44 >= v40)
            goto LABEL_31;
          goto LABEL_46;
        }
LABEL_35:
        v38 = (uint64_t *)*v43;
        v39 = (uint64_t **)v43;
        if (!*v43)
          goto LABEL_49;
      }
      v45 = v43[4];
      if (v41 < v45)
        goto LABEL_35;
      if (v41 != v45)
      {
        if (v45 >= v41)
          goto LABEL_31;
        goto LABEL_46;
      }
      v46 = *((_DWORD *)v43 + 10);
      if (v42 < v46)
        goto LABEL_35;
      if (v46 >= v42)
        goto LABEL_31;
LABEL_46:
      v38 = (uint64_t *)v43[1];
      if (!v38)
      {
        v39 = (uint64_t **)(v43 + 1);
LABEL_49:
        v47 = operator new(0x38uLL);
        v48 = v34[2];
        v47[2] = *(_OWORD *)v34;
        *((_QWORD *)v47 + 6) = v48;
        *(_QWORD *)v47 = 0;
        *((_QWORD *)v47 + 1) = 0;
        *((_QWORD *)v47 + 2) = v43;
        *v39 = (uint64_t *)v47;
        v49 = (uint64_t *)**v37;
        if (v49)
        {
          *v37 = v49;
          v36 = *v39;
        }
        else
        {
          v36 = (uint64_t *)v47;
        }
        sub_20E868578(v37[1], v36);
        v37[2] = (uint64_t *)((char *)v37[2] + 1);
LABEL_31:
        v34 += 4;
        goto LABEL_32;
      }
    }
  }
}

void sub_20F346A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20F28AC44((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20F346A98(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[3];
  v6 = v5 & ((a2 >> 7) ^ 0x13701D);
  v7 = *(_QWORD *)(*a1 + v6) & (~*(_QWORD *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    v8 = 8;
    do
    {
      v6 = (v6 + v8) & v5;
      v8 += 8;
      v7 = *(_QWORD *)(v4 + v6) & (~*(_QWORD *)(v4 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v5;
  v10 = a1[4];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v4 + result) == 254)
    {
      v10 = 0;
    }
    else
    {
      sub_20F346B90((uint64_t)a1);
      result = sub_20E8D7E78(*a1, a2, a1[3]);
      v4 = *a1;
      v5 = a1[3];
      v10 = a1[4];
    }
  }
  ++a1[2];
  a1[4] = v10 - (*(unsigned __int8 *)(v4 + result) == 128);
  *(_BYTE *)(v4 + result) = a2 & 0x7F;
  *(_BYTE *)(v4 + ((result - 7) & v5) + (v5 & 7)) = a2 & 0x7F;
  return result;
}

void sub_20F346B90(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
  {
    v2 = 1;
    goto LABEL_5;
  }
  if (v1 < 9 || 25 * v1 < 32 * *(_QWORD *)(a1 + 16))
  {
    v2 = (2 * v1) | 1;
LABEL_5:
    sub_20F346BCC((char **)a1, (char *)v2);
    return;
  }
  sub_20F346D68((unint64_t *)a1);
}

void sub_20F346BCC(char **a1, char *a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *i;
  unint64_t v11;
  char v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[3];
  a1[3] = a2;
  v7 = (unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (char *)operator new((unint64_t)&a2[32 * (_QWORD)a2 + 15] & 0xFFFFFFFFFFFFFFF8);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(_QWORD)v8] = -1;
  v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (char *)7)
    v9 = 6;
  a1[4] = (char *)(v9 - (_QWORD)a1[2]);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if ((i[(_QWORD)v4] & 0x80000000) == 0)
      {
        v14 = &v5[32 * (_QWORD)i];
        v15 = 0x376ADF16980614E5 - 0x622015F714C7D297 * *((unsigned int *)v14 + 2);
        v16 = v15 ^ HIDWORD(v15);
        v17 = *a1;
        v18 = a1[3];
        v19 = ((v16 >> 7) ^ 0x13701D) & (unint64_t)v18;
        v20 = *(_QWORD *)&(*a1)[v19] & (~*(_QWORD *)&(*a1)[v19] << 7) & 0x8080808080808080;
        if (!v20)
        {
          v21 = 8;
          do
          {
            v19 = (v19 + v21) & (unint64_t)v18;
            v21 += 8;
            v20 = *(_QWORD *)&v17[v19] & (~*(_QWORD *)&v17[v19] << 7) & 0x8080808080808080;
          }
          while (!v20);
        }
        v11 = (v19 + (__clz(__rbit64(v20)) >> 3)) & (unint64_t)v18;
        v12 = v16 & 0x7F;
        v17[v11] = v12;
        v17[((v11 - 7) & (unint64_t)v18) + (v18 & 7)] = v12;
        v13 = &a1[1][32 * v11];
        *(_OWORD *)v13 = *(_OWORD *)v14;
        *((_OWORD *)v13 + 1) = *((_OWORD *)v14 + 1);
        *((_QWORD *)v14 + 2) = 0;
        *((_QWORD *)v14 + 3) = 0;
      }
    }
    operator delete(v4);
  }
}

unint64_t sub_20F346D68(unint64_t *a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  _OWORD *v16;
  __int128 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  __int128 v24;
  _OWORD *v25;
  uint64_t v26;

  result = sub_20E8D7ED4(*a1, a1[3]);
  v3 = a1[3];
  if (v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v7 = *a1;
      if (*(unsigned __int8 *)(*a1 + i) == 254)
      {
        v8 = a1[1];
        v9 = (__int128 *)(v8 + 32 * i);
        v10 = 0x376ADF16980614E5 - 0x622015F714C7D297 * *((unsigned int *)v9 + 2);
        v11 = v10 ^ HIDWORD(v10);
        v12 = ((v11 >> 7) ^ 0x13701D) & v3;
        v13 = *(_QWORD *)(v7 + v12) & (~*(_QWORD *)(v7 + v12) << 7) & 0x8080808080808080;
        if (v13)
        {
          v5 = ((v11 >> 7) ^ 0x13701D) & v3;
        }
        else
        {
          v14 = 8;
          v5 = ((v11 >> 7) ^ 0x13701D) & v3;
          do
          {
            v5 = (v5 + v14) & v3;
            v14 += 8;
            v13 = *(_QWORD *)(v7 + v5) & (~*(_QWORD *)(v7 + v5) << 7) & 0x8080808080808080;
          }
          while (!v13);
        }
        v6 = (v5 + (__clz(__rbit64(v13)) >> 3)) & v3;
        result = ((v6 - v12) ^ (i - v12)) & v3;
        if (result > 7)
        {
          result = *(unsigned __int8 *)(v7 + v6);
          v15 = v11 & 0x7F;
          *(_BYTE *)(v7 + v6) = v15;
          *(_BYTE *)(v7 + ((v6 - 7) & v3) + (v3 & 7)) = v15;
          if ((_DWORD)result == 128)
          {
            v16 = (_OWORD *)(v8 + 32 * v6);
            v17 = v9[1];
            *v16 = *v9;
            v16[1] = v17;
            *((_QWORD *)v9 + 2) = 0;
            *((_QWORD *)v9 + 3) = 0;
            v3 = a1[3];
            v18 = *a1;
            *(_BYTE *)(v18 + i) = 0x80;
            *(_BYTE *)(v18 + (v3 & (i - 7)) + (v3 & 7)) = 0x80;
          }
          else
          {
            v20 = v9[1];
            v19 = *v9;
            *((_QWORD *)v9 + 2) = 0;
            *((_QWORD *)v9 + 3) = 0;
            v21 = a1[1];
            v22 = (_OWORD *)(v21 + 32 * i);
            v23 = v21 + 32 * v6;
            v24 = *(_OWORD *)(v23 + 16);
            *v22 = *(_OWORD *)v23;
            v22[1] = v24;
            *(_QWORD *)(v23 + 16) = 0;
            *(_QWORD *)(v23 + 24) = 0;
            v25 = (_OWORD *)(a1[1] + 32 * v6);
            *v25 = v19;
            v25[1] = v20;
            --i;
            v3 = a1[3];
          }
        }
        else
        {
          *(_BYTE *)(v7 + i) = v11 & 0x7F;
          *(_BYTE *)(v7 + ((i - 7) & v3) + (v3 & 7)) = v11 & 0x7F;
        }
      }
    }
    v26 = v3 - (v3 >> 3);
    if (v3 == 7)
      v26 = 6;
  }
  else
  {
    v26 = 0;
  }
  a1[4] = v26 - a1[2];
  return result;
}

void sub_20F346F80(uint64_t *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v33;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)&v33 = v7;
    *((_QWORD *)&v33 + 1) = v8;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)&v33 = v7;
    *((_QWORD *)&v33 + 1) = v8;
  }
  v10 = 0;
  _X11 = *a1;
  __asm { PRFM            #4, [X11] }
  v16 = (0x9DDFEA08EB382D69 * v8 + 0x376ADF16980614E5) ^ ((0x9DDFEA08EB382D69 * v8
                                                                           + 0x376ADF16980614E5) >> 32);
  v17 = a1[3];
  for (i = (v16 >> 7) ^ 0x13701D; ; i = v10 + v19)
  {
    v19 = i & v17;
    v20 = *(_QWORD *)(_X11 + v19);
    v21 = ((v20 ^ (0x101010101010101 * (v16 & 0x7F))) - 0x101010101010101) & ~(v20 ^ (0x101010101010101
                                                                                        * (v16 & 0x7F))) & 0x8080808080808080;
    if (v21)
      break;
LABEL_15:
    if ((v20 & (~v20 << 6) & 0x8080808080808080) != 0)
    {
      v29 = a1[1] + 32 * sub_20F346A98(a1, v16);
      *(_OWORD *)v29 = v33;
      *(_QWORD *)(v29 + 16) = a2;
      *(_QWORD *)(v29 + 24) = a3;
      v28 = a3;
      if (!a3)
        return;
      goto LABEL_25;
    }
    v10 += 8;
  }
  while (1)
  {
    v22 = a1[1] + 32 * ((v19 + (__clz(__rbit64(v21)) >> 3)) & v17);
    v23 = *(_QWORD *)v22;
    v24 = *(_DWORD *)(v22 + 8);
    if (v23 == v7 && v24 == (_DWORD)v8)
      break;
    v21 &= v21 - 1;
    if (!v21)
      goto LABEL_15;
  }
  if (a3)
  {
    v26 = (unint64_t *)&a3->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
  v28 = a3;
  if (a3)
  {
LABEL_25:
    v30 = (unint64_t *)&v28->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20F347184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20F28AC44((uint64_t)&a11);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20F3471A0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = (v9 - 1) & a2;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == a2)
            {
              if (v12[2] == a2)
                return;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == a2)
          {
            if (v12[2] == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v7;
  v15[2] = a3;
  v15[3] = a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v9)
      goto LABEL_35;
    if (prime < v9)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v9)
LABEL_35:
        sub_20E8D2B3C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v7)
        v7 %= v9;
    }
    else
    {
      v7 &= v9 - 1;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_58:
    *v26 = v15;
    goto LABEL_59;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
}

void sub_20F347468(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_20F34747C(void **a1, char *a2, _OWORD *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  _OWORD *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  void *i;
  __int128 v39;
  __int128 v40;
  void *v41;
  __int128 v43;
  __int128 v44;

  v6 = (char *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_BYTE *)*a1;
  v8 = v7 >> 5;
  v9 = (unint64_t)*a1 + (v7 & 0xFFFFFFFFFFFFFFE0);
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == v5)
    {
      v29 = a3[1];
      *(_OWORD *)v9 = *a3;
      *(_OWORD *)(v9 + 16) = v29;
      a1[1] = (void *)(v9 + 32);
    }
    else
    {
      v43 = *a3;
      v44 = a3[1];
      v11 = v9 + 32;
      v12 = (__int128 *)(v5 - 32);
      v13 = a1[1];
      if (v5 >= 0x20)
      {
        do
        {
          v14 = *v12;
          v15 = v12[1];
          v12 += 2;
          *v13 = v14;
          v13[1] = v15;
          v13 += 2;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if (v5 != v11)
      {
        v16 = 32 * ((uint64_t)(v5 - v11) >> 5);
        v17 = v5 - 16;
        v18 = (uint64_t)&v6[32 * v8 - 16];
        do
        {
          v19 = *(_QWORD *)(v18 + v16 - 16);
          *(_DWORD *)(v17 - 8) = *(_DWORD *)(v18 + v16 - 8);
          *(_QWORD *)(v17 - 16) = v19;
          v20 = *(_QWORD *)(v18 + v16);
          *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + v16 + 8);
          *(_QWORD *)v17 = v20;
          v17 -= 32;
          v16 -= 32;
        }
        while (v16);
      }
      *(_QWORD *)v9 = v43;
      *(_DWORD *)(v9 + 8) = DWORD2(v43);
      v21 = &v6[32 * v8];
      *((_QWORD *)v21 + 2) = v44;
      v21[24] = BYTE8(v44);
    }
    return (char *)v9;
  }
  v22 = ((uint64_t)(v5 - (_QWORD)v6) >> 5) + 1;
  if (v22 >> 59)
    sub_20E867F44();
  v24 = v10 - (_QWORD)v6;
  if (v24 >> 4 > v22)
    v22 = v24 >> 4;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
    v25 = 0x7FFFFFFFFFFFFFFLL;
  else
    v25 = v22;
  if (v25)
  {
    if (v25 >> 59)
      sub_20E877A38();
    v26 = (char *)operator new(32 * v25);
    v27 = &v26[32 * v8];
    v28 = &v26[32 * v25];
    if (v8 != v25)
      goto LABEL_31;
    goto LABEL_21;
  }
  v26 = 0;
  v27 = (char *)(32 * v8);
  v28 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v31 = 1;
      else
        v31 = v7 >> 4;
      if (v31 >> 59)
        sub_20E877A38();
      v27 = (char *)operator new(32 * v31);
      v28 = &v27[32 * v31];
      if (v26)
      {
        operator delete(v26);
        v28 = &v27[32 * v31];
        v6 = (char *)*a1;
      }
    }
    else
    {
      v30 = v8 + 2;
      if (v8 >= -1)
        v30 = v8 + 1;
      v27 -= 32 * (v30 >> 1);
    }
  }
LABEL_31:
  v32 = a3[1];
  *(_OWORD *)v27 = *a3;
  *((_OWORD *)v27 + 1) = v32;
  v33 = v27 + 32;
  v34 = v27;
  if (v6 != (char *)v9)
  {
    v35 = v9;
    v36 = v27;
    do
    {
      v34 = v36 - 32;
      v37 = *(_OWORD *)(v35 - 16);
      *((_OWORD *)v36 - 2) = *(_OWORD *)(v35 - 32);
      *((_OWORD *)v36 - 1) = v37;
      v35 -= 32;
      v36 -= 32;
    }
    while ((char *)v35 != v6);
  }
  for (i = a1[1]; (void *)v9 != i; v33 += 2)
  {
    v39 = *(_OWORD *)v9;
    v40 = *(_OWORD *)(v9 + 16);
    v9 += 32;
    *v33 = v39;
    v33[1] = v40;
  }
  v41 = *a1;
  *a1 = v34;
  a1[1] = v33;
  a1[2] = v28;
  if (v41)
    operator delete(v41);
  return v27;
}

void sub_20F347704(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20F347720()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F347734(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24C9FE0D0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_20F347774(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FE0D0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20F34779C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float64x2_t *v4;
  float64x2_t *v5;
  unint64_t v6;
  float64x2_t *v7;
  unint64_t v8;
  float64x2_t *v9;
  float64x2_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  float64x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  float64x2_t v23;
  char *v24;
  float64x2_t v25;
  char *v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  double v37;
  double v62;
  float64x2_t v63;
  uint64_t v67;
  float64x2_t v68;
  double v69;
  float64x2_t v70[4];
  uint64_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64_t v75;
  float64x2_t v76;
  uint64_t v77;
  float64x2_t v78;
  double v79;
  double *v80[2];
  __int128 v81;
  double v82;

  if (**(_DWORD **)(a1 + 16))
    return;
  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(v2 + 464) & 0xFFFFFFFD) == 0)
    return;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = (float64x2_t *)(v2 + 24);
  if (*(_QWORD *)(v2 + 24) != *(_QWORD *)v2)
  {
    v72 = *v4;
    v73 = *(float64x2_t *)v2;
    v7 = *(float64x2_t **)(v3 + 2904);
    v8 = *(_QWORD *)(v3 + 2912);
    if ((unint64_t)v7 >= v8)
    {
      v16 = *(float64x2_t **)(v3 + 2896);
      v17 = ((char *)v7 - (char *)v16) >> 5;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 59)
        goto LABEL_49;
      v19 = v8 - (_QWORD)v16;
      if (v19 >> 4 > v18)
        v18 = v19 >> 4;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
        v20 = 0x7FFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 59)
          goto LABEL_50;
        v21 = (char *)operator new(32 * v20);
      }
      else
      {
        v21 = 0;
      }
      v26 = &v21[32 * v17];
      v27 = v73;
      *(float64x2_t *)v26 = v72;
      *((float64x2_t *)v26 + 1) = v27;
      v9 = (float64x2_t *)(v26 + 32);
      if (v7 != v16)
      {
        do
        {
          v28 = v7[-1];
          *((float64x2_t *)v26 - 2) = v7[-2];
          *((float64x2_t *)v26 - 1) = v28;
          v26 -= 32;
          v7 -= 2;
        }
        while (v7 != v16);
        v7 = *(float64x2_t **)(v3 + 2896);
      }
      *(_QWORD *)(v3 + 2896) = v26;
      *(_QWORD *)(v3 + 2904) = v9;
      *(_QWORD *)(v3 + 2912) = &v21[32 * v20];
      if (v7)
        operator delete(v7);
    }
    else
    {
      *v7 = v72;
      v7[1] = v73;
      v9 = v7 + 2;
    }
    *(_QWORD *)(v3 + 2904) = v9;
    goto LABEL_41;
  }
  v72 = *v4;
  v73 = *(float64x2_t *)v2;
  v5 = *(float64x2_t **)(v3 + 2880);
  v6 = *(_QWORD *)(v3 + 2888);
  if ((unint64_t)v5 >= v6)
  {
    v10 = *(float64x2_t **)(v3 + 2872);
    v11 = ((char *)v5 - (char *)v10) >> 5;
    v12 = v11 + 1;
    if (!((unint64_t)(v11 + 1) >> 59))
    {
      v13 = v6 - (_QWORD)v10;
      if (v13 >> 4 > v12)
        v12 = v13 >> 4;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
        v14 = 0x7FFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (!v14)
      {
        v15 = 0;
        goto LABEL_28;
      }
      if (!(v14 >> 59))
      {
        v15 = (char *)operator new(32 * v14);
LABEL_28:
        v22 = &v15[32 * v11];
        v23 = v73;
        *(float64x2_t *)v22 = v72;
        *((float64x2_t *)v22 + 1) = v23;
        v24 = v22 + 32;
        if (v5 != v10)
        {
          do
          {
            v25 = v5[-1];
            *((float64x2_t *)v22 - 2) = v5[-2];
            *((float64x2_t *)v22 - 1) = v25;
            v22 -= 32;
            v5 -= 2;
          }
          while (v5 != v10);
          v5 = *(float64x2_t **)(v3 + 2872);
        }
        *(_QWORD *)(v3 + 2872) = v22;
        *(_QWORD *)(v3 + 2880) = v24;
        *(_QWORD *)(v3 + 2888) = &v15[32 * v14];
        if (v5)
          operator delete(v5);
        *(_QWORD *)(v3 + 2880) = v24;
        goto LABEL_41;
      }
LABEL_50:
      sub_20E877A38();
    }
LABEL_49:
    sub_20E867F44();
  }
  *v5 = v72;
  v5[1] = v73;
  *(_QWORD *)(v3 + 2880) = v5 + 2;
LABEL_41:
  if ((unint64_t)(0x3175B2258D8284CFLL * ((uint64_t)(*(_QWORD *)(v3 + 2832) - *(_QWORD *)(v3 + 2824)) >> 3)) >= 2)
  {
    v29 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(v29 + 468))
      goto LABEL_48;
    sub_20F328974(&v72, v3, (uint64_t *)v29);
    memset(v70, 0, 48);
    *(_QWORD *)&v81 = &v72;
    *((_QWORD *)&v81 + 1) = 0;
    v80[0] = (double *)v70;
    v80[1] = 0;
    sub_20E95B988((float64x2_t **)&v81, v80);
    _V1.D[1] = v70[0].f64[1];
    _D3 = v70[0].f64[1];
    __asm { FMLA            D2, D3, V1.D[1] }
    v37 = _D2 + v70[1].f64[0] * v70[1].f64[0];
    if (v37 >= 0.0000002635)
      __sincos_stret(sqrt(v37));
    _D29 = v79;
    _V30.D[1] = v78.f64[1];
    _V1.D[1] = v70[0].f64[1];
    _Q20 = *(_OWORD *)(v29 + 256);
    _Q22 = *(_OWORD *)(v29 + 208);
    _Q17 = *(_OWORD *)(v29 + 352);
    _Q27 = *(_OWORD *)(v29 + 304);
    _Q2 = *(_OWORD *)(v29 + 448);
    _Q7 = *(_OWORD *)(v29 + 400);
    _D19 = *(_QWORD *)(v29 + 184);
    __asm
    {
      FMLA            D3, D19, V1.D[1]
      FMLA            D3, D22, V30.D[1]
      FMLA            D3, D29, V22.D[1]
    }
    _D19 = *(_QWORD *)(v29 + 232);
    __asm
    {
      FMLA            D6, D19, V1.D[1]
      FMLA            D6, D20, V30.D[1]
      FMLA            D6, D29, V20.D[1]
    }
    *(_QWORD *)&_Q20 = *(_QWORD *)(v29 + 280);
    __asm
    {
      FMLA            D19, D20, V1.D[1]
      FMLA            D19, D27, V30.D[1]
      FMLA            D19, D29, V27.D[1]
    }
    _D21 = *(_QWORD *)(v29 + 328);
    __asm
    {
      FMLA            D20, D21, V1.D[1]
      FMLA            D20, D17, V30.D[1]
      FMLA            D20, D29, V17.D[1]
    }
    _D18 = *(_QWORD *)(v29 + 376);
    __asm
    {
      FMLA            D17, D18, V1.D[1]
      FMLA            D17, D7, V30.D[1]
      FMLA            D17, D29, V7.D[1]
    }
    _D5 = *(_QWORD *)(v29 + 424);
    __asm
    {
      FMLA            D7, D5, V1.D[1]
      FMLA            D7, D2, V30.D[1]
      FMLA            D7, D29, V2.D[1]
      FMLA            D2, D6, V1.D[1]
    }
    v68 = v78;
    v69 = v79;
    __asm { FMLA            D0, D17, V30.D[1] }
    v70[1].f64[0] = v73.f64[0];
    v70[0] = v72;
    v70[2].f64[1] = v75;
    *(float64x2_t *)((char *)&v70[1] + 8) = v74;
    v71 = v77;
    v70[3] = v76;
    v62 = _D0 + *(double *)&_Q7 * v79;
    v81 = 0uLL;
    v82 = 0.0;
    sub_20E9733B8(v70, (double *)&v81);
    if (v62 >= *(double *)(v3 + 2784))
      goto LABEL_48;
    v63 = v68;
    v63.f64[1] = *(double *)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 8uLL).i64;
    if (sqrt(vmulq_f64(v63, v63).f64[0] + v63.f64[1] * v63.f64[1] + v69 * v69) >= *(double *)(v3 + 2776))
      goto LABEL_48;
    _V1.D[1] = *((_QWORD *)&v81 + 1);
    _D3 = *((_QWORD *)&v81 + 1);
    __asm { FMLA            D2, D3, V1.D[1] }
    if (sqrt(_D2 + v82 * v82) >= *(double *)(v3 + 2768))
    {
LABEL_48:
      v67 = *(_QWORD *)(v3 + 3072);
      *(_QWORD *)(v67 + 24) = *(unsigned int *)(v67 + 16);
      *(_BYTE *)(v67 + 32) = 0;
    }
  }
}

uint64_t sub_20F347C74(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio12area_mapping14MappingManager23AddRelocaliza"
                     "tionResultERKNS5_20RelocalizationResultEE3$_0JEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio12area_mapping14MappingManager23Ad"
                                "dRelocalizationResultERKNS5_20RelocalizationResultEE3$_0JEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio12area_mapping14MappingManager23AddRelocalizationResultERKNS5_20RelocalizationResultEE3$_0JEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn5Defer11BindWrapperINSt3__16__bindIRZNS_3vio12area_mapping14MappingManager23AddRelocalizationResultERKNS5_20RelocalizationResultEE3$_0JEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F347CE0()
{
  return &unk_24C9FE130;
}

void sub_20F347CF0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F347D04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FE150;
  result[1] = v3;
  return result;
}

uint64_t sub_20F347D38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FE150;
  a2[1] = v2;
  return result;
}

uint64_t sub_20F347D54(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 2824);
  v4 = *(_QWORD *)(v2 + 2832);
  if (v3 != v4)
  {
    while (1)
    {
      v5 = *(_QWORD *)(v3 + 16);
      if (v5)
      {
        if (*(_QWORD *)(v5 + 160) == *a2)
          break;
      }
      v3 += 4472;
      if (v3 == v4)
        return 0;
    }
  }
  if (v3 == v4 || v3 == 0)
    return 0;
  else
    return *(_QWORD *)(v3 + 16);
}

uint64_t sub_20F347DB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERKNSt3__16vec"
                     "torINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERK"
                                "NSt3__16vectorINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERKNSt3__16vectorINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERKNSt3__16vectorINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F347E1C()
{
  return &unk_24C9FE1B0;
}

void sub_20F347E2C()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20F347E40(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FE1D0;
  result[1] = v3;
  return result;
}

uint64_t sub_20F347E74(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C9FE1D0;
  a2[1] = v2;
  return result;
}

BOOL sub_20F347E90(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = **(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 2824);
  v4 = *(_QWORD *)(v2 + 2832);
  v5 = v3;
  if (v3 != v4)
  {
    v5 = v3;
    while (1)
    {
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 160) == *a2)
          break;
      }
      v5 += 4472;
      if (v5 == v4)
        goto LABEL_11;
    }
  }
  if (v5 == v4 || v5 == 0)
  {
LABEL_11:
    v8 = 0;
    if (v3 != v4)
    {
LABEL_16:
      while (1)
      {
        v9 = *(_QWORD *)(v3 + 16);
        if (v9)
        {
          if (*(_QWORD *)(v9 + 160) == a2[3])
            break;
        }
        v3 += 4472;
        if (v3 == v4)
          return 0;
      }
    }
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 16);
    if (v3 != v4)
      goto LABEL_16;
  }
  return v3 != v4 && v3 && v8 && (v10 = *(_QWORD *)(v3 + 16)) != 0 && sub_20F44AEA4((uint64_t)a2, v8, v10);
}

uint64_t sub_20F347F5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERKNSt3__16vec"
                     "torINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERK"
                                "NSt3__16vectorINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERKNSt3__16vectorINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERKNSt3__16vectorINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F347FC8()
{
  return &unk_24C9FE230;
}

void sub_20F347FD8()
{
  JUMPOUT(0x212BC6398);
}

__n128 sub_20F347FEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C9FE250;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20F348024(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C9FE250;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_20F348044(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = a2[3];
  if (*a2 == v2 || v3 == v2)
    return 0;
  v6 = **(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 2824);
  v8 = *(_QWORD *)(v6 + 2832);
  v9 = v7;
  if (v7 != v8)
  {
    v9 = v7;
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 160) == *a2)
          break;
      }
      v9 += 4472;
      if (v9 == v8)
      {
        v11 = 0;
        if (v7 != v8)
          goto LABEL_20;
        return v7 != v8 && v7 && v11 && (v13 = *(_QWORD *)(v7 + 16)) != 0 && sub_20F44AEA4((uint64_t)a2, v11, v13);
      }
    }
  }
  v11 = 0;
  if (v9 != v8 && v9)
    v11 = *(_QWORD *)(v9 + 16);
  if (v7 != v8)
  {
LABEL_20:
    while (1)
    {
      v12 = *(_QWORD *)(v7 + 16);
      if (v12)
      {
        if (*(_QWORD *)(v12 + 160) == v3)
          break;
      }
      v7 += 4472;
      if (v7 == v8)
        return 0;
    }
  }
  return v7 != v8 && v7 && v11 && (v13 = *(_QWORD *)(v7 + 16)) != 0 && sub_20F44AEA4((uint64_t)a2, v11, v13);
}

uint64_t sub_20F348124(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERKNSt3__16vec"
                     "torINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERK"
                                "NSt3__16vectorINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERKNSt3__16vectorINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping14MappingManager42RemoveOutlierExternalRelocalizationResultsERKNSt3__16vectorINS3_4pairINS0_4util18UUIDHashU32KeyPairES7_EENS3_9allocatorIS8_EEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20F348190()
{
  return &unk_24C9FE2B0;
}

void sub_20F34819C(std::mutex *a1, uint64_t a2)
{
  _QWORD *sig;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  std::mutex::lock(a1);
  sig = (_QWORD *)a1[1].__m_.__sig;
  if (sig)
  {
    v6 = (char *)sig[2];
    v5 = sig[3];
    if ((unint64_t)v6 < v5)
    {
      *(_QWORD *)v6 = a2;
      v7 = (uint64_t)(v6 + 8);
LABEL_50:
      sig[2] = v7;
      std::mutex::unlock(a1);
      return;
    }
    v12 = (char *)sig[1];
    v13 = (v6 - v12) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      sub_20E867F44();
    v15 = v5 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_20E877A38();
      v17 = (char *)operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *(_QWORD *)v18 = a2;
      v7 = (uint64_t)(v18 + 8);
      v20 = (char *)(v6 - v12);
      if (v6 != v12)
        goto LABEL_23;
    }
    else
    {
      v17 = 0;
      v18 = (char *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = a2;
      v7 = 8 * v13 + 8;
      v20 = (char *)(v6 - v12);
      if (v6 != v12)
      {
LABEL_23:
        v21 = (unint64_t)(v20 - 8);
        if (v21 < 0x78)
          goto LABEL_56;
        if (&v6[-(v21 & 0xFFFFFFFFFFFFFFF8) - 8] < v18 && &v17[v6 - v12 - (v21 & 0xFFFFFFFFFFFFFFF8) - 8] < v6)
          goto LABEL_56;
        v23 = (v21 >> 3) + 1;
        v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        v18 -= v24;
        v25 = &v6[-v24];
        v26 = v6 - 16;
        v27 = &v17[8 * v13 - 16];
        v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *((_OWORD *)v26 - 1);
          v29 = *(_OWORD *)v26;
          *((_OWORD *)v26 - 1) = 0uLL;
          *(_OWORD *)v26 = 0uLL;
          *((_OWORD *)v27 - 1) = v30;
          *(_OWORD *)v27 = v29;
          v26 -= 32;
          v27 -= 32;
          v28 -= 4;
        }
        while (v28);
        v6 = v25;
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          do
          {
            v31 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v18 - 1) = v31;
            v18 -= 8;
          }
          while (v6 != v12);
        }
        v6 = (char *)sig[1];
        v32 = (char *)sig[2];
        sig[1] = v18;
        sig[2] = v7;
        sig[3] = v19;
        while (v32 != v6)
        {
          v34 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          v33 = v34;
          *(_QWORD *)v32 = 0;
          if (v34)
          {
            v35 = *(void **)(v33 + 168);
            if (v35)
            {
              *(_QWORD *)(v33 + 176) = v35;
              operator delete(v35);
            }
            v36 = *(void **)(v33 + 144);
            if (v36)
            {
              *(_QWORD *)(v33 + 152) = v36;
              operator delete(v36);
            }
            v37 = *(void **)(v33 + 120);
            if (v37)
            {
              *(_QWORD *)(v33 + 128) = v37;
              operator delete(v37);
            }
            v38 = *(void **)v33;
            if (*(_QWORD *)v33)
            {
              *(_QWORD *)(v33 + 8) = v38;
              operator delete(v38);
            }
            MEMORY[0x212BC6398](v33, 0x1020C40196DCA0FLL);
          }
        }
        goto LABEL_48;
      }
    }
    sig[1] = v18;
    sig[2] = v7;
    sig[3] = v19;
LABEL_48:
    if (v6)
      operator delete(v6);
    goto LABEL_50;
  }
  std::mutex::unlock(a1);
  if (a2)
  {
    v8 = *(void **)(a2 + 168);
    if (v8)
    {
      *(_QWORD *)(a2 + 176) = v8;
      operator delete(v8);
    }
    v9 = *(void **)(a2 + 144);
    if (v9)
    {
      *(_QWORD *)(a2 + 152) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(a2 + 120);
    if (v10)
    {
      *(_QWORD *)(a2 + 128) = v10;
      operator delete(v10);
    }
    v11 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v11;
      operator delete(v11);
    }
    JUMPOUT(0x212BC6398);
  }
}

void sub_20F34844C(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (!v2)
  {
LABEL_8:
    std::mutex::unlock(v1);
    _Unwind_Resume(a1);
  }
  v4 = *(void **)(v2 + 168);
  if (v4)
  {
    *(_QWORD *)(v2 + 176) = v4;
    operator delete(v4);
    v5 = *(void **)(v2 + 144);
    if (!v5)
    {
LABEL_4:
      v6 = *(void **)(v2 + 120);
      if (!v6)
        goto LABEL_5;
      goto LABEL_11;
    }
  }
  else
  {
    v5 = *(void **)(v2 + 144);
    if (!v5)
      goto LABEL_4;
  }
  *(_QWORD *)(v2 + 152) = v5;
  operator delete(v5);
  v6 = *(void **)(v2 + 120);
  if (!v6)
  {
LABEL_5:
    v7 = *(void **)v2;
    if (!*(_QWORD *)v2)
    {
LABEL_7:
      MEMORY[0x212BC6398](v2, 0x1020C40196DCA0FLL);
      goto LABEL_8;
    }
LABEL_6:
    *(_QWORD *)(v2 + 8) = v7;
    operator delete(v7);
    goto LABEL_7;
  }
LABEL_11:
  *(_QWORD *)(v2 + 128) = v6;
  operator delete(v6);
  v7 = *(void **)v2;
  if (!*(_QWORD *)v2)
    goto LABEL_7;
  goto LABEL_6;
}

void sub_20F3484D8(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FE2D0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (!shared_weak_owners)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    std::__shared_weak_count::~__shared_weak_count(this);
  }
  else
  {
LABEL_5:
    std::__shared_weak_count::~__shared_weak_count(this);
  }
}

void sub_20F34854C(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v4;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FE2D0;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x212BC6398);
}

void sub_20F3485C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20F34819C(*(std::mutex **)(a1 + 32), *(_QWORD *)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20F34862C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit6memory10ObjectPoolINS_3vio17MapTrackingOutputENS1_18AutoReturningMakeTIS4_NS1_21PoolObje"
                     "ctInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS4_EENS1_19ObjectBorrow"
                     "ingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE")
    return a1 + 32;
  if (((v3 & (unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio17MapTrackingOutputENS1_18AutoReturningMakeTIS4_NS1"
                                "_21PoolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS"
                                "4_EENS1_19ObjectBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit6memory10ObjectPoolINS_3vio17MapTrackingOutputENS1_18AutoReturningMakeTIS4_NS1_21PoolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS4_EENS1_19ObjectBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit6memory10ObjectPoolINS_3vio17MapTrackingOutputENS1_18AutoReturningMakeTIS4_NS1_21PoolObjectInitializerIS4_EENS1_23PoolObjectDeinitializerIS4_EEEENSt3__110shared_ptrIS4_EENS1_19ObjectBorrowingPoolINSB_10unique_ptrIS4_NSB_14default_deleteIS4_EEEESA_EEE13ObjectDeleterE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 32;
  return 0;
}

_QWORD *sub_20F34869C(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  _QWORD *v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  *((_BYTE *)v10 + 24) = 0;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    v15 = *(_QWORD **)a1;
    v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v16)
      goto LABEL_84;
LABEL_72:
    *v10 = *v16;
LABEL_90:
    *v16 = v10;
    goto LABEL_91;
  }
  v17 = 1;
  if (v7 >= 3)
    v17 = (v7 & (v7 - 1)) != 0;
  v18 = v17 | (2 * v7);
  v19 = vcvtps_u32_f32(v13 / v14);
  if (v18 <= v19)
    prime = v19;
  else
    prime = v18;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      sub_20E877A38();
    v21 = operator new(8 * prime);
    v22 = *(_QWORD **)a1;
    *(_QWORD *)a1 = v21;
    if (v22)
      operator delete(v22);
    v23 = 0;
    *((_QWORD *)a1 + 1) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
    while (prime != v23);
    v25 = (uint64_t *)(a1 + 4);
    v24 = (_QWORD *)*((_QWORD *)a1 + 2);
    if (!v24)
      goto LABEL_68;
    v26 = v24[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v25;
      for (i = (_QWORD *)*v24; *v24; i = (_QWORD *)*v24)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v24 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
        {
          *v24 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*(_QWORD *)a1 + v31);
          **(_QWORD **)(*(_QWORD *)a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v24;
          v24 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v25;
    v35 = (_QWORD *)*v24;
    if (!*v24)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v15 = *(_QWORD **)a1;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
      if (!v16)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
      {
        *v24 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*(_QWORD *)a1 + v36);
        **(_QWORD **)(*(_QWORD *)a1 + v36) = v35;
        v35 = v24;
LABEL_62:
        v24 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v24;
        v24 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = *((_QWORD *)a1 + 1);
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v15 = *(_QWORD **)a1;
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v16)
    goto LABEL_72;
LABEL_84:
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v15[v5] = a1 + 4;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v16 = (_QWORD *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

void sub_20F348B20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F348B34@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(__int128 *, __int128 *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  void (*v98)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE __p[96];
  uint64_t v105;
  _QWORD v106[3];
  uint64_t v107;
  unint64_t v108;
  __int128 v109;

  *(_QWORD *)__p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_2102DBFF0;
  strcpy(*(char **)__p, "MappingManagerConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)__p, 180, 160);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  *(_QWORD *)__p = nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.rematch_across_keyframes", v4, "Recompute matches to nearby keyframes when a new keyframe is generated");
  *(_QWORD *)__p = nullsub_1(a2);
  v5 = sub_20EAA1CB0((unint64_t *)(a1 + 8));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.num_closest_frames", v5, "Number of closest frames");
  *(_QWORD *)__p = nullsub_1(a2);
  v6 = sub_20EA9DCF0((unsigned int *)(a1 + 2700));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.min_geodesic_distance_thresh", v6, "Minimum geodesic distance for a link before it can be added to pose graph");
  *(_QWORD *)__p = nullsub_1(a2);
  v7 = sub_20EAA1CB0((unint64_t *)(a1 + 104));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.epipolar_inliers_required_for_match", v7, "Minimum number of epipolar inliers for keyframe match");
  *(_QWORD *)__p = nullsub_1(a2);
  v8 = sub_20EAA1CB0((unint64_t *)(a1 + 32));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_num_map_keyframes_for_map_constraints", v8, "Maximum number of map keyframes used for descriptor matching and preparing map constraints w.r.t. one query frame");
  *(_QWORD *)__p = nullsub_1(a2);
  v9 = sub_20EA9DB90((double *)(a1 + 96));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.query_frame_width_height_expansion_factor", v9, "Expande query frame width and height this much to search for correspondences");
  *(_QWORD *)__p = nullsub_1(a2);
  v10 = sub_20EAA1CB0((unint64_t *)(a1 + 2344));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.num_backward_relative_pose_constraints_per_state", v10, "Number of relative pose constraints (for pose graph) looking backward when a new map keyframe is generated");
  *(_QWORD *)__p = nullsub_1(a2);
  v11 = sub_20EB8894C(a1 + 2400);
  sub_20E8B2F9C((uint64_t *)__p, "viodatabase_msgpack_filename", v11, "msgpack file containing serialized VIODatabase");
  *(_QWORD *)__p = nullsub_1(a2);
  v12 = sub_20EB8894C(a1 + 2424);
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.output_map_analytics_path", v12, "Output map analytics path");
  *(_QWORD *)__p = nullsub_1(a2);
  v13 = sub_20EAA14D8((_BYTE *)(a1 + 2497));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.batch_triangulation_after_pose_graph", v13, "Indicator if tracks are batch triangulated right after pose graph optimization");
  *(_QWORD *)__p = nullsub_1(a2);
  v14 = sub_20EA9DB90((double *)(a1 + 120));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_reporjection_error_pixels_for_relinking", v14, "Maximum allowed reprojection error in re-linking stage");
  *(_QWORD *)__p = nullsub_1(a2);
  v15 = sub_20EA9DB90((double *)(a1 + 128));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_ml_image_retrieval_distance_sq_for_external_relocalization", v15, "Maximum allowed ml image retrieval threshold for ml relocalization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v16 = sub_20EA9DB90((double *)(a1 + 136));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_ml_image_retrieval_distance_sq_for_external_relocalization_loop_closure", v16, "Maximum allowed ml image retrieval threshold for ml loop closure.");
  *(_QWORD *)__p = nullsub_1(a2);
  v17 = sub_20EA9DB90((double *)(a1 + 144));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.rematching_view_distance_z_scaling", v17, "Rematching view distance streching");
  *(_QWORD *)__p = nullsub_1(a2);
  v18 = sub_20EA9DB90((double *)(a1 + 88));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.structure_filter_chi_square_2d_threshold", v18, "Structure filtering chi square 2d threshold \n");
  *(_QWORD *)__p = nullsub_1(a2);
  v19 = sub_20EAA14D8((_BYTE *)(a1 + 116));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.use_3pt_geometric_model", v19, "Flag to toggle 3pt-algorithm for geometry verification\n");
  *(_QWORD *)__p = nullsub_1(a2);
  v20 = sub_20EAA14D8((_BYTE *)(a1 + 117));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.deterministic_map_save", v20, "Flag to set deterministics map saving mode. When turn on this flag we will not randomize the camera source id saved in the VIODatabasea and set UTC timestamp to zero. Default: false");
  *(_QWORD *)__p = nullsub_1(a2);
  v21 = sub_20EAA14D8((_BYTE *)a1);
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.use_epipolar_pose_graph", v21, "Flag to enable epipolar pose graph\n");
  *(_QWORD *)__p = nullsub_1(a2);
  v22 = sub_20EAA1CB0((unint64_t *)(a1 + 40));
  sub_20E8B2F9C((uint64_t *)__p, "maximum_number_of_map_keyframes", v22, "Maximum number of map keyframes allowed. If execeeded, map will be pruned accordingly");
  *(_QWORD *)__p = nullsub_1(a2);
  v23 = sub_20EAA1CB0((unint64_t *)(a1 + 48));
  sub_20E8B2F9C((uint64_t *)__p, "maximum_number_of_weak_map_keyframes", v23, "Maximum number of weak map keyframes allowed. If execeeded, map will be pruned accordingly");
  *(_QWORD *)__p = nullsub_1(a2);
  v24 = sub_20EAA1CB0((unint64_t *)(a1 + 56));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.maximum_number_of_sliding_map_states_per_submap", v24, "Maximum number of sliding map keyframes allowed. If execeeded, map will be pruned accordingly");
  *(_QWORD *)__p = nullsub_1(a2);
  v25 = sub_20EAA14D8((_BYTE *)(a1 + 2498));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_inter_session_regular_states_check", v25, "Enable inter-session pose-graph constraints check between two states.");
  *(_QWORD *)__p = nullsub_1(a2);
  v26 = sub_20EAA14D8((_BYTE *)(a1 + 2499));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_submapping", v26, "Enable submapping capabilities.");
  *(_QWORD *)__p = nullsub_1(a2);
  v27 = sub_20EAA14D8((_BYTE *)(a1 + 2500));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_ml_descriptors_for_relocalization", v27, "Whether to enable processing ML descriptors for relocalization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v28 = sub_20EAA14D8((_BYTE *)(a1 + 2600));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_ml_descriptors_for_weak_keyframes", v28, "Whether to enable computing ML descriptors for weak keyframes.");
  *(_QWORD *)__p = nullsub_1(a2);
  v29 = sub_20EA9DCF0((unsigned int *)(a1 + 2604));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_self_to_ext_reloc_per_iteration", v29, "Maximum number of self-to-ext relocalization requests to process per iteration.");
  *(_QWORD *)__p = nullsub_1(a2);
  v30 = sub_20EA9DCF0((unsigned int *)(a1 + 2608));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_ext_to_self_reloc_per_iteration", v30, "Maximum number of ext-to-self relocalization requests to process per iteration.");
  *(_QWORD *)__p = nullsub_1(a2);
  v31 = sub_20EAA14D8((_BYTE *)(a1 + 2601));
  LOBYTE(v108) = 0;
  v32 = sub_20E8B8134(v31, (unsigned __int8 *)&v108);
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_ml_semantics_for_relocalization", v32, "Whether to enable processing ML semantics for relocalization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v33 = sub_20EAA14D8((_BYTE *)(a1 + 2501));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_densedepth_for_relocalization", v33, "Whether to enable processing dense depth for relocalization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v34 = sub_20EA9DCF0((unsigned int *)(a1 + 2504));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_num_densedepth_tracks", v34, "Maximum number of tracks created using dense depth per frame.");
  *(_QWORD *)__p = nullsub_1(a2);
  v35 = sub_20EAA14D8((_BYTE *)(a1 + 2602));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.external_map_reloc_with_all_cameras", v35, "Use all cameras in keyframe for external map relocalization");
  *(_QWORD *)__p = nullsub_1(a2);
  v36 = sub_20EAA14D8((_BYTE *)(a1 + 2613));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_saving_external_submaps", v36, "Optionally enable saving external submaps in the map file.");
  *(_QWORD *)__p = nullsub_1(a2);
  v37 = sub_20EA9DCF0((unsigned int *)(a1 + 2708));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.anchor_strategy", v37, "Anchoring Strategy to use for anchoring.");
  v108 = nullsub_1(a2);
  v38 = operator new();
  *(_QWORD *)(v38 + 109) = 0;
  *(_OWORD *)(v38 + 80) = 0u;
  *(_OWORD *)(v38 + 96) = 0u;
  *(_OWORD *)(v38 + 48) = 0u;
  *(_OWORD *)(v38 + 64) = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  *(_OWORD *)(v38 + 32) = 0u;
  *(_QWORD *)v38 = &off_24C9FE360;
  *(_QWORD *)(v38 + 8) = &unk_24C9FE3D8;
  *(_QWORD *)(v38 + 152) = &unk_24C9FE400;
  *(_QWORD *)(v38 + 120) = (char *)off_24C9FE568 + 1;
  *(_QWORD *)(v38 + 128) = a1 + 2712;
  v39 = (_QWORD *)operator new();
  v40 = *(_QWORD *)(a1 + 2712);
  *v39 = &off_24C9FE530;
  v39[1] = v40;
  *(_QWORD *)(v38 + 160) = v39;
  sub_20E9F681C((uint64_t *)(a1 + 2712));
  *(_OWORD *)(v38 + 168) = *(_OWORD *)__p;
  *(_QWORD *)(v38 + 184) = *(_QWORD *)&__p[16];
  sub_20E8B2F9C((uint64_t *)&v108, "MappingManagerConfig.maximum_duration_for_unlocalized_external_submap_s", v38, "Maximum duration for an external submap remains unlocalized in seconds.");
  *(_QWORD *)__p = nullsub_1(a2);
  v41 = sub_20EAA1CB0((unint64_t *)(a1 + 64));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.maximum_number_of_keyframes_of_external_submaps", v41, "Maximum number of states allowed for external map before pruning begins.");
  *(_QWORD *)__p = nullsub_1(a2);
  v42 = sub_20EAA1CB0((unint64_t *)(a1 + 72));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.min_num_inlier_2d_3d_matches_to_construct_cov", v42, "Minimum number of 2D 3D correspondences needed to estimate a relocalization cov.");
  *(_QWORD *)__p = nullsub_1(a2);
  v43 = sub_20EAA14D8((_BYTE *)(a1 + 2612));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_weak_keyframe_image_descriptor_approximation", v43, "Flag to enable weak image descriptor approximation.");
  *(_QWORD *)__p = nullsub_1(a2);
  v44 = sub_20EAA14D8((_BYTE *)(a1 + 2614));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.debug_relocalization_to_external_submaps", v44, "Flag to enable debug mode of relocalization to external submap.");
  *(_QWORD *)__p = nullsub_1(a2);
  v45 = sub_20EAA14D8((_BYTE *)(a1 + 2615));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_relocalization_debug_logging", v45, "Flag to enable generation of relocalization debug logging information.");
  *(_QWORD *)__p = nullsub_1(a2);
  v46 = sub_20EAA14D8((_BYTE *)(a1 + 2616));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_relocalization_debug_core_logging", v46, "Flag to enable generation of relocalization debug core logging information (used for CoreAnalytics and Signposts). ");
  *(_QWORD *)__p = nullsub_1(a2);
  v47 = sub_20EA9DB90((double *)(a1 + 152));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_close_loop_distance_m", v47, "Active closing loop search radius in meter");
  *(_QWORD *)__p = nullsub_1(a2);
  v48 = sub_20EA9DB90((double *)(a1 + 168));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.min_odometry_distance_required_for_close_loop_m", v48, "Minimum odometry traveled distance required before considering the frames/states as loop closure candidates");
  *(_QWORD *)__p = nullsub_1(a2);
  v49 = sub_20EA9DB90((double *)(a1 + 176));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_close_loop_image_retrieval_distance_square", v49, "Active closing loop image retrieval distance square");
  *(_QWORD *)__p = nullsub_1(a2);
  v50 = sub_20EA9DB90((double *)(a1 + 184));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.min_close_loop_graph_geodesic_distance", v50, "Active closing loop geodesic distance.");
  *(_QWORD *)__p = nullsub_1(a2);
  v51 = sub_20EAA14D8((_BYTE *)(a1 + 2620));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.use_weak_keyframe_for_active_loop_closure", v51, "Optionally include weak keyframe for active loop closure");
  *(_QWORD *)__p = nullsub_1(a2);
  v52 = sub_20EAA14D8((_BYTE *)(a1 + 2621));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_rematching_for_active_loop_closure", v52, "Enable rematching during active loop closure.");
  *(_QWORD *)__p = nullsub_1(a2);
  v53 = sub_20EAA1CB0((unint64_t *)(a1 + 16));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.num_closest_frames_for_rematch", v53, "number of closest frames used for rematching");
  *(_QWORD *)__p = nullsub_1(a2);
  v54 = sub_20EAA14D8((_BYTE *)(a1 + 2618));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_active_loop_closure", v54, "Enable active loop closure.");
  *(_QWORD *)__p = nullsub_1(a2);
  v55 = sub_20EAA14D8((_BYTE *)(a1 + 2619));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_active_loop_closure_ml", v55, "Enable active loop closure with ML Descriptors.");
  *(_QWORD *)__p = nullsub_1(a2);
  v56 = sub_20EAA14D8((_BYTE *)(a1 + 2623));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.use_anchor_translation_layer", v56, "Seperate anchors into user and keyframe anchors.");
  *(_QWORD *)__p = nullsub_1(a2);
  v57 = sub_20EAA1CB0((unint64_t *)(a1 + 2624));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_anchors_per_group_", v57, "The maximum number of anchors per group.");
  *(_QWORD *)__p = nullsub_1(a2);
  v58 = sub_20EAA14D8((_BYTE *)(a1 + 2638));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.avoid_splitting_submap_due_to_low_health_in_cm", v58, "avoid_splitting_submap_due_to_low_health_in_cm.");
  *(_QWORD *)__p = nullsub_1(a2);
  v59 = sub_20EAA14D8((_BYTE *)(a1 + 2632));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enforce_disable_mapping_io_save", v59, "Force to disable Mapping IO save operations for debugging purpose.");
  *(_QWORD *)__p = nullsub_1(a2);
  v60 = sub_20EAA14D8((_BYTE *)(a1 + 2622));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.filter_ALC_motion_update_bound", v60, "Flag to enable filtering active loop closure result by checking if the motion update is within bound.");
  *(_QWORD *)__p = nullsub_1(a2);
  v61 = sub_20EAA14D8((_BYTE *)(a1 + 2617));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.clear_submaps_after_force_reintialization", v61, "Option to clear the submaps after force re-inited");
  *(_QWORD *)__p = nullsub_1(a2);
  v62 = sub_20EA9DCF0((unsigned int *)(a1 + 80));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.per_frame_map_measurements_limit", v62, "Maximum number of tracks per frame that become map constraints.");
  *(_QWORD *)__p = nullsub_1(a2);
  v63 = sub_20EAA14D8((_BYTE *)(a1 + 2644));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.return_near_distance_anchors_in_metadata", v63, "Flag to enable near distance anchors in the mapping metadata");
  *(_QWORD *)__p = nullsub_1(a2);
  v64 = sub_20EAA14D8((_BYTE *)(a1 + 2645));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.use_only_primary_connected_submaps_for_kf_classification", v64, "only using primary connected submaps for kf classification");
  *(_QWORD *)__p = nullsub_1(a2);
  v65 = sub_20EAA14D8((_BYTE *)(a1 + 2646));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_partial_submaps_serialization", v65, "Flag to enable partial submaps saving.");
  *(_QWORD *)__p = nullsub_1(a2);
  v66 = sub_20EA9DCF0((unsigned int *)(a1 + 2720));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.maximum_number_of_states_to_serialize", v66, "Maximum nubmer of states to serialize in each attempt.");
  *(_QWORD *)__p = nullsub_1(a2);
  v67 = sub_20EAA14D8((_BYTE *)(a1 + 2641));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.avoid_transforming_resumed_external_submap_without_loading_map", v67, "Flag to enable transforming the local localized submaps to the external submap in the case of pause/resume without pre-loading a submap.");
  *(_QWORD *)__p = nullsub_1(a2);
  v68 = sub_20EAA14D8((_BYTE *)(a1 + 2));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enforce_copy_object_anchor", v68, "enforce_copy_object_anchor");
  *(_QWORD *)__p = nullsub_1(a2);
  v69 = sub_20EAA14D8((_BYTE *)(a1 + 2496));
  sub_20E8B2F9C((uint64_t *)__p, "output_collaborative_mapping_statistics_in_pose_metadata", v69, "Enable collaborative mapping statistics to be saved in PoseMetadata and reported with signposts. Default: false");
  *(_QWORD *)__p = nullsub_1(a2);
  v70 = sub_20EAA14D8((_BYTE *)(a1 + 2642));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.avoid_transforming_external_loaded_submaps", v70, "transform the local localized submaps to the external loaded submap if this option is set. Default: false");
  *(_QWORD *)__p = nullsub_1(a2);
  v71 = sub_20EAA14D8((_BYTE *)(a1 + 2649));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_sync_map_processed_return", v71, "Enable synchronized mapping process return.");
  *(_QWORD *)__p = nullsub_1(a2);
  v72 = sub_20EAA14D8((_BYTE *)(a1 + 2648));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_sync_map_tracking", v72, "Enable synchronized mapping tracking.");
  *(_QWORD *)__p = nullsub_1(a2);
  v73 = sub_20EAA14D8((_BYTE *)(a1 + 2650));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.skip_map_tracking_for_bad_geometry", v73, "Skip map tracking for bad geometry frame.");
  *(_QWORD *)__p = nullsub_1(a2);
  v74 = sub_20EAA14D8((_BYTE *)(a1 + 2651));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.use_current_estimate_for_marginalization", v74, "use_current_estimate_for_marginalization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v75 = sub_20EAA14D8((_BYTE *)(a1 + 2652));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enforce_map_optimization_anchored_to_given_state", v75, "enforce_map_optimization_anchored_to_given_state.");
  *(_QWORD *)__p = nullsub_1(a2);
  v76 = sub_20EAA14D8((_BYTE *)(a1 + 2748));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_pruning_features_without_3d", v76, "Enables features and descriptors to be removed from submaps when they are finished building.");
  *(_QWORD *)__p = nullsub_1(a2);
  v77 = sub_20EAA14D8((_BYTE *)(a1 + 2749));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.remove_bridges_from_map_graph", v77, "Remove bridge of the covisibility graph on saving from/to external.");
  *(_QWORD *)__p = nullsub_1(a2);
  v78 = sub_20EAA14D8((_BYTE *)(a1 + 160));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.selective_euclidean_distance_use", v78, "Use euclidean distance only if the reference submap is well connected to the query submaps, i.e. in the submap graph, there is a cycle of relocalization edges that connects both submaps wihtout repetition.");
  *(_QWORD *)__p = nullsub_1(a2);
  v79 = sub_20EA9DB90((double *)(a1 + 2768));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.min_reloc_result_angle_diff_for_map_optimization_rad", v79, "Minimum angular difference of new reloc result from current estimate to run map optimization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v80 = sub_20EA9DB90((double *)(a1 + 2776));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.min_reloc_result_pos_diff_for_map_optimization_m", v80, "Minimum position difference of new reloc result from current estimate to run map optimization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v81 = sub_20EA9DB90((double *)(a1 + 2784));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.min_reloc_mdist_for_map_optimization", v81, "Minimum mahalanobis distance of new reloc result from current estimate to run map optimization.");
  *(_QWORD *)__p = nullsub_1(a2);
  v82 = sub_20EAA14D8((_BYTE *)(a1 + 2793));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_corrupted_map_removal", v82, "Flag to enable corrupted map removal when VIO fault is detected.");
  *(_QWORD *)__p = nullsub_1(a2);
  v83 = sub_20EA9DCF0((unsigned int *)(a1 + 2796));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_num_recent_added_states_size", v83, "Maximum size of the recently added states buffer.");
  *(_QWORD *)__p = nullsub_1(a2);
  v84 = sub_20EA9DB90((double *)(a1 + 2800));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.max_window_to_declare_corrupted_state_when_vio_fault_detected_s", v84, "Maximum time window to look back from VIO fault detection to declare corrupted map states.");
  *(_QWORD *)__p = nullsub_1(a2);
  v85 = sub_20EA9DCF0((unsigned int *)(a1 + 2744));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.num_weak_keyframe_reloc_poses_to_keep_per_submap", v85, "Number of weak keyframe poses to keep for checking whether we have already run reloc at this pose.");
  *(_QWORD *)__p = nullsub_1(a2);
  v86 = sub_20EA9DB90((double *)(a1 + 2728));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.nearest_frame_dist_threshold_for_weak_reloc_m_sq", v86, "Distance from nearest weak keyframe to allow relocalization with a weak keyframe.");
  *(_QWORD *)__p = nullsub_1(a2);
  v87 = sub_20EA9DB90((double *)(a1 + 2736));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.nearest_frame_angle_threshold_for_weak_reloc_cos", v87, "Cosine threshold from nearest weak keyframe to allow relocalization with a weak keyframe.");
  *(_QWORD *)__p = nullsub_1(a2);
  v88 = sub_20EAA14D8((_BYTE *)(a1 + 2794));
  sub_20E8B2F9C((uint64_t *)__p, "MappingManagerConfig.enable_reprojection_map_tracking_early_return", v88, "Flag to enable map measuremetns early return in reprojection map tracking.");
  sub_20F2C8EC4(a1 + 216, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F2C9210(a1 + 304, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F2CE8F4(a1 + 440, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F2CEAF8(a1 + 488, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F45FCA8(a1 + 424, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F7C1C6C(a1 + 560, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F46D9E0(a1 + 536, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F2CF7EC(a1 + 640, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F217288(a1 + 864, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F3B3930(a1 + 976, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F3B8B10(a1 + 1008, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F2CDAF0(a1 + 2256, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  sub_20F3E2F58(a1 + 2064, __p);
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  v108 = (unint64_t)operator new(0x28uLL);
  v109 = xmmword_2102DCA20;
  strcpy((char *)v108, "MLDescriptorExtractionConfig parameters");
  sub_20E8B30B4(__p, (__int128 *)&v108, 180, 160);
  if (SHIBYTE(v109) < 0)
    operator delete((void *)v108);
  v108 = nullsub_1(__p);
  v89 = sub_20EAA14D8((_BYTE *)(a1 + 2512));
  sub_20E8B2F9C((uint64_t *)&v108, "MLDescriptorExtractionConfig.enable_feature_extractor", v89, "If set, ML feature extractor will be enabled");
  v108 = nullsub_1(__p);
  v90 = sub_20EAA14D8((_BYTE *)(a1 + 2513));
  sub_20E8B2F9C((uint64_t *)&v108, "MLDescriptorExtractionConfig.enable_gravity_rotation_correction", v90, "If set, input image will be corrected using gravity rotation before feedint to feature extractor");
  v108 = nullsub_1(__p);
  v91 = sub_20EB8894C(a1 + 2520);
  sub_20E8B2F9C((uint64_t *)&v108, "MLDescriptorExtractionConfig.feature_extractor_type", v91, "Specify the type of the feature extractor. It could be either none and densefeat");
  v108 = nullsub_1(__p);
  v92 = sub_20EAA14D8((_BYTE *)(a1 + 2544));
  sub_20E8B2F9C((uint64_t *)&v108, "MLDescriptorExtractionConfig.enable_cache", v92, "If set, ML descriptors will be stored in the cache directory with timestamp and stream number as cache key. When a frame with same timestamp and stream number is given, the descriptors will be read from the cache rather than using the ML model.");
  v108 = nullsub_1(__p);
  v93 = sub_20EF4E8E4(a1 + 2552);
  sub_20E8B2F9C((uint64_t *)&v108, "MLDescriptorExtractionConfig.cache_dir", v93, "If set, given directory will be used to save and load ML descriptors cache. Otherwise a temporary directory will be used automatically. Valid only when cache is enabled.");
  v105 = nullsub_1(__p);
  v94 = operator new();
  *(_QWORD *)v94 = &off_24C9C34F8;
  *(_QWORD *)(v94 + 8) = &unk_24C9C3568;
  *(_QWORD *)(v94 + 120) = 0;
  *(_OWORD *)(v94 + 16) = 0u;
  *(_OWORD *)(v94 + 32) = 0u;
  *(_OWORD *)(v94 + 48) = 0u;
  *(_OWORD *)(v94 + 64) = 0u;
  *(_OWORD *)(v94 + 80) = 0u;
  *(_OWORD *)(v94 + 96) = 0u;
  *(_QWORD *)(v94 + 109) = 0;
  v108 = (unint64_t)off_24C9FE310 + 1;
  *(_QWORD *)&v109 = a1 + 2512;
  sub_20EAA8294((uint64_t *)(v94 + 120), (uint64_t *)&v108);
  sub_20E8B2F9C(&v105, "MLDescriptorExtractionConfig.subsample_method", v94, "Specify the type of subsampling method of feature extraction. (0: Use all features; 1: Prioritize high laplacian score features)");
  if (v108)
  {
    if ((v108 & 1) == 0)
    {
      v95 = *(void (**)(__int128 *, __int128 *, uint64_t))(v108 & 0xFFFFFFFFFFFFFFFELL);
      if (v95)
        v95(&v109, &v109, 2);
    }
    v108 = 0;
  }
  v105 = nullsub_1(__p);
  v96 = sub_20EA9DCF0((unsigned int *)(a1 + 2580));
  sub_20E8B2F9C(&v105, "MLDescriptorExtractionConfig.subsample_size", v96, "Specify the subsampling size of feature extraction. If the subsampling method is set to 0 (use all), the specified size is ignored.");
  v107 = nullsub_1(__p);
  v97 = operator new();
  *(_QWORD *)v97 = &off_24C9C34F8;
  *(_QWORD *)(v97 + 8) = &unk_24C9C3568;
  *(_QWORD *)(v97 + 120) = 0;
  *(_OWORD *)(v97 + 16) = 0u;
  *(_OWORD *)(v97 + 32) = 0u;
  *(_OWORD *)(v97 + 48) = 0u;
  *(_OWORD *)(v97 + 64) = 0u;
  *(_OWORD *)(v97 + 80) = 0u;
  *(_OWORD *)(v97 + 96) = 0u;
  *(_QWORD *)(v97 + 109) = 0;
  v105 = (uint64_t)off_24C9FE330 + 1;
  v106[0] = a1 + 2512;
  sub_20EAA8294((uint64_t *)(v97 + 120), &v105);
  sub_20E8B2F9C(&v107, "MLDescriptorExtractionConfig.feature_type", v97, "Specify feature type for ML descriptor extraction");
  if (v105)
  {
    if ((v105 & 1) == 0)
    {
      v98 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v105 & 0xFFFFFFFFFFFFFFFELL);
      if (v98)
        v98(v106, v106, 2);
    }
    v105 = 0;
  }
  v107 = nullsub_1(__p);
  v99 = sub_20EAA14D8((_BYTE *)(a1 + 2588));
  v107 = nullsub_1(__p);
  v100 = sub_20EF4E784((float *)(a1 + 2592));
  sub_20E8B2F9C(&v107, "MLDescriptorExtractionConfig.expected_vio_frequency", v100, "Specify the frequency to which VIO is running. Notice that if we are using left and right cameras the frequency will be multiplied x2. Refers to the fequency of the VIO Events.");
  v107 = nullsub_1(__p);
  v101 = sub_20EF4E784((float *)(a1 + 2596));
  sub_20E8B2F9C(&v107, "MLDescriptorExtractionConfig.ml_frequency", v101, "Specify the frequency to which MLDescriptorExtraction is running. Notice that if we are using left and right cameras the frequency will be multiplied x2.");
  sub_20E8B32F0(a2, (uint64_t)__p);
  sub_20E869298((uint64_t)__p);
  v108 = (unint64_t)operator new(0x38uLL);
  v109 = xmmword_2102DCA50;
  strcpy((char *)v108, "MovablePlatformMapDescriminatorConfig parameters");
  sub_20E8B30B4(__p, (__int128 *)&v108, 180, 160);
  if (SHIBYTE(v109) < 0)
    operator delete((void *)v108);
  v108 = nullsub_1(__p);
  v102 = sub_20EA9DB90((double *)(a1 + 2336));
  sub_20E8B2F9C((uint64_t *)&v108, "MovablePlatformMapDescriminatorConfig.maximum_submaps_center_for_movable_platform_map_in_m", v102, "Maximum submaps center to consider the map as maybe-created in a movable platform.");
  sub_20E8B32F0(a2, (uint64_t)__p);
  return sub_20E869298((uint64_t)__p);
}

void sub_20F34A1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  sub_20E869298((uint64_t)&__p);
  sub_20E869298(v25);
  _Unwind_Resume(a1);
}

void sub_20F34A5B4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A5BC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A5C4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A5CC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A5D4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A5DC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A5E4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A5EC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A5F4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A5FC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A604()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A60C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A614()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A61C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A624()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A62C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A634()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A63C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A644()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A64C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A654()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A65C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A664()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A66C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A674()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A67C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A684()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A68C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A694()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A69C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6A4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6AC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6B4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6BC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6C4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6CC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6D4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6DC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6E4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6EC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6F4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A6FC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A704()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A70C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A714()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A71C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A724()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A72C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A734()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A73C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A744()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A74C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A754()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A75C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A764()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A76C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A774()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A77C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A784()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A78C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A794()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A79C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7A4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7AC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7B4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7BC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7C4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7CC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7D4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7DC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7E4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7EC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7F4()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A7FC()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A804()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A80C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A814()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A81C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A824()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A82C()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A834()
{
  JUMPOUT(0x20F34A5A4);
}

void sub_20F34A83C()
{
  JUMPOUT(0x20F34A5A4);
}

uint64_t sub_20F34A844(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FE320;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio12area_mapping28GetProgramOptionsDescriptionERNS1_28MLDescriptorExtractionConfigEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping28GetProgramOptionsDescriptionERNS1_28MLDescriptorExtractionConfigEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

uint64_t sub_20F34A8F0(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)result + 64) = *a2;
  return result;
}

uint64_t sub_20F34A900(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FE340;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN4cv3d3vio12area_mapping28GetProgramOptionsDescriptionERNS1_28MLDescriptorExtractionConfigEE3$_7" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4cv3d3vio12area_mapping28GetProgramOptionsDescriptionERNS1_28MLDescriptorExtractionConfigEE3$_7" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

uint64_t sub_20F34A9AC(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)result + 72) = *a2;
  return result;
}

void sub_20F34A9BC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F34AECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F34AFD0(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F34AFF0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F34B010(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F34B018(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F34B020(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F34B078(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  const char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();
  std::runtime_error v11;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v6 = (const char *)(*(_QWORD *)(MEMORY[0x24BEDB7D0] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  if ((const char *)result == v6 || (result = strcmp((const char *)result, v6), !(_DWORD)result))
  {
    v7 = (_QWORD *)(*a2 + 8);
    v8 = *(_QWORD **)(a1 + 16);
    if (!v8)
      goto LABEL_10;
    goto LABEL_9;
  }
  v7 = 0;
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
LABEL_9:
    *v8 = *v7;
LABEL_10:
  v9 = *(_QWORD *)(a1 + 120);
  v10 = nullsub_761;
  if (!v9)
    v10 = 0;
  if (v10)
  {
    if (!v9)
    {
      std::runtime_error::runtime_error(&v11, "call to empty boost::function");
      v11.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v11);
    }
    return (*(uint64_t (**)(uint64_t, _QWORD *))((v9 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v7);
  }
  return result;
}

void sub_20F34B174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F34B188(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FE360;
  *(_QWORD *)(a1 + 8) = &unk_24C9FE3D8;
  *(_QWORD *)(a1 + 152) = &unk_24C9FE400;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F34B738(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F34B738(a1);
}

void sub_20F34B1F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FE360;
  *(_QWORD *)(a1 + 8) = &unk_24C9FE3D8;
  *(_QWORD *)(a1 + 152) = &unk_24C9FE400;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F34B738(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F34B26C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *p_dst;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  __int128 *v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  std::bad_cast v21[16];
  __int128 __dst;
  uint64_t v23;
  char v24[8];
  uint64_t v25;
  uint64_t *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(&__dst, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v23 = *((_QWORD *)v5 + 2);
    __dst = v6;
  }
  p_dst = (unsigned __int8 *)&__dst;
  v11 = *((_QWORD *)&__dst + 1);
  if (v23 >= 0)
    v11 = HIBYTE(v23);
  else
    p_dst = (unsigned __int8 *)__dst;
  if (!v11)
    goto LABEL_32;
  v12 = &p_dst[v11];
  v29 = 0;
  v13 = *p_dst;
  if (v13 == 45 || v13 == 43)
  {
    v14 = &__dst;
    if (v23 < 0)
      v14 = (__int128 *)__dst;
    p_dst = (unsigned __int8 *)v14 + 1;
  }
  v24[0] = 0;
  v25 = 1;
  v26 = &v29;
  v27 = p_dst;
  v28 = v12;
  v15 = sub_20EE86E84((uint64_t)v24);
  v16 = v29;
  if (v13 != 45)
  {
    if (v29 >= 0)
      v18 = v15;
    else
      v18 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_27;
LABEL_32:
    std::bad_cast::bad_cast(v21);
    v21[0].__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v21[1].__vftable = (std::bad_cast_vtbl *)&unk_24C9AB9F0;
    v21[2].__vftable = (std::bad_cast_vtbl *)MEMORY[0x24BEDB7D0];
    sub_20EA9F254((uint64_t)v21);
  }
  if ((unint64_t)v29 < 0x8000000000000001)
    v17 = v15;
  else
    v17 = 0;
  if ((v17 & 1) == 0)
    goto LABEL_32;
  v16 = -v29;
LABEL_27:
  v19 = (_QWORD *)operator new();
  *v19 = &off_24C9FE530;
  v19[1] = v16;
  v20 = *a2;
  *a2 = (uint64_t)v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20F34B454()
{
  __break(1u);
}

void sub_20F34B49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8B9BA0((uint64_t)&a9);
  __cxa_end_catch();
  JUMPOUT(0x20F34B4B4);
}

uint64_t sub_20F34B4D0()
{
  return MEMORY[0x24BEDB7D0];
}

uint64_t sub_20F34B4DC(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_20F34B4E4()
{
  return MEMORY[0x24BEDB7D0];
}

uint64_t sub_20F34B4F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FE360;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FE3D8;
  *(_QWORD *)(a1 + 144) = &unk_24C9FE400;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F34B738(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F34B738(v2);
}

void sub_20F34B560(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FE360;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FE3D8;
  *(_QWORD *)(a1 + 144) = &unk_24C9FE400;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F34B738(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F34B5E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FE360;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FE3D8;
  *(_QWORD *)a1 = &unk_24C9FE400;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F34B738(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F34B738(v2);
}

void sub_20F34B654(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FE360;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FE3D8;
  *(_QWORD *)a1 = &unk_24C9FE400;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F34B738(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F34B6D8(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F34B6E4(uint64_t a1)
{
  sub_20F34B738(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F34B708(uint64_t a1)
{
  return sub_20F34B738(a1 - 8);
}

void sub_20F34B710(uint64_t a1)
{
  sub_20F34B738(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F34B738(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9FE498;
  *(_QWORD *)(a1 + 8) = &unk_24C9FE508;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F34B808()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F34B81C()
{
  return MEMORY[0x24BEDB7D0];
}

_QWORD *sub_20F34B828(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C9FE530;
  result[1] = v3;
  return result;
}

uint64_t sub_20F34B86C(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FE578;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIxEPN5boost15program_options11typed_val"
                                      "ueIT_cEERS3_EUlRKxE_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIxEPN5boost15program_options11typed_valueIT_cEERS3_EUlRKxE_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_QWORD **sub_20F34B918(_QWORD **result, _QWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20F34B928(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  size_t v11;
  const char *v12;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v30;
  uint64_t *v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  uint64_t *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  float v52;
  unsigned int v53;
  double v54;
  double v55;
  double v56;
  float v57;
  float v58;
  double v59;
  double v60;
  uint64_t result;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  double v82;
  float64x2_t v84;
  float64x2_t v87;
  double v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  int32x2_t v94;
  float64x2_t v95;
  float32x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float v99;
  int32x4_t v100;
  int8x16_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t *v107;
  size_t v108;
  const char *v109;
  unsigned __int8 v110;
  const char *v111;
  size_t v112;
  _BYTE *v113;
  unint64_t v114;
  const char *v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  void **v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  size_t v124;
  std::__shared_weak_count_vtbl *v125;
  std::__shared_weak_count *v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  float64_t v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unsigned __int8 v152;
  const char *v153;
  size_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  void **v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  unint64_t *v162;
  unint64_t v163;
  float64x2_t *v165;
  uint64_t v166;
  float64x2_t v167;
  float64_t v168;
  __int128 v169;
  double v170;
  float64x2_t v171;
  float64x2_t v172;
  int64x2_t v173;
  double v174;
  int64x2_t v175;
  double v176;
  const char *v177;
  uint64_t v178;
  std::__shared_weak_count *v179;
  float64x2_t v180;
  int64x2_t v181;
  float64x2_t v182;
  __int128 v183;
  double v184;
  _BYTE v185[24];
  float64x2_t v186;
  void **v187;
  size_t v188;
  unint64_t v189;
  char v190;

  if (!a2 || !*(_BYTE *)(a2 + 192))
    return 0;
  v4 = *(_QWORD *)(a2 + 200);
  v5 = *(_QWORD *)(a2 + 208);
  if ((unint64_t)(v5 - v4) <= 0x3F)
  {
    sub_20F34CD58(&v172);
    if (**(int **)(*(_QWORD *)&v172.f64[0] + 56) > 4)
      return 0;
    v6 = *(unsigned __int8 *)(*(_QWORD *)&v172.f64[0] + 72);
    v7 = sub_20E8C31DC(*(uint64_t *)&v172.f64[0], "OSLogSurrogateAppender", 1, 0);
    v8 = v7;
    if (!v6 && v7 == 0)
      return 0;
    *(_QWORD *)&v180.f64[0] = &v172;
    *(std::chrono::steady_clock::time_point *)&v180.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    *(std::chrono::system_clock::time_point *)v181.i8 = std::chrono::system_clock::now();
    v181.i32[2] = 4;
    *(_QWORD *)&v182.f64[0] = "unknown file";
    LODWORD(v182.f64[1]) = 194;
    *((_QWORD *)&v183 + 1) = 0;
    v184 = 0.0;
    *(_QWORD *)&v183 = "unknown function";
    v10 = **(_QWORD **)&v180.f64[0];
    if (*(char *)(**(_QWORD **)&v180.f64[0] + 39) < 0)
    {
      v12 = *(const char **)(v10 + 16);
      v11 = *(_QWORD *)(v10 + 24);
    }
    else
    {
      v11 = *(unsigned __int8 *)(**(_QWORD **)&v180.f64[0] + 39);
      v12 = (const char *)(**(_QWORD **)&v180.f64[0] + 16);
    }
    v166 = **(_QWORD **)&v180.f64[0] + 16;
    v110 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v110 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v185);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v185);
      if (LOBYTE(v186.f64[0]) && (v185[23] & 0x80000000) != 0)
        operator delete(*(void **)v185);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v111 = byte_254A4A4F8;
    else
      v111 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v112 = byte_254A4A4F8[23];
    else
      v112 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v185 = os_log_create(v111, v12);
    v113 = &v185[8];
    if (v112 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v112 >= 0x17)
    {
      v114 = v8;
      v115 = v12;
      v116 = v10;
      v117 = v6;
      v118 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v112 | 7) != 0x17)
        v118 = v112 | 7;
      v119 = v118 + 1;
      v113 = operator new(v118 + 1);
      *(_QWORD *)&v185[16] = v112;
      *(_QWORD *)&v186.f64[0] = v119 | 0x8000000000000000;
      *(_QWORD *)&v185[8] = v113;
      v6 = v117;
      v10 = v116;
      v12 = v115;
      v8 = v114;
    }
    else
    {
      HIBYTE(v186.f64[0]) = v112;
      if (!v112)
      {
LABEL_130:
        v113[v112] = 0;
        LOBYTE(v186.f64[1]) = 1;
        v120 = (void **)&v187;
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v11 >= 0x17)
        {
          v121 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v121 = v11 | 7;
          v122 = v121 + 1;
          v120 = (void **)operator new(v121 + 1);
          v188 = v11;
          v189 = v122 | 0x8000000000000000;
          v187 = v120;
        }
        else
        {
          HIBYTE(v189) = v11;
          if (!v11)
          {
LABEL_138:
            *((_BYTE *)v120 + v11) = 0;
            v190 = 1;
            v123 = *(NSObject **)v185;
            if (SHIBYTE(v189) < 0)
              operator delete(v187);
            if (LOBYTE(v186.f64[1]) && SHIBYTE(v186.f64[0]) < 0)
              operator delete(*(void **)&v185[8]);
            if (*(_QWORD *)v185)
              os_release(*(void **)v185);
            if (v8 && *(_QWORD *)(v8 + 24))
            {
              v124 = _os_log_pack_size();
              v125 = (std::__shared_weak_count_vtbl *)operator new(v124, (std::align_val_t)8uLL);
              v126 = (std::__shared_weak_count *)operator new();
              v127 = v126;
              v126->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v126->__shared_owners_;
              v126->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v126->__shared_weak_owners_ = 0;
              v126[1].__vftable = v125;
              *(_QWORD *)v185 = v125;
              *(_QWORD *)&v185[8] = v125;
              *(_QWORD *)&v185[16] = v126;
              do
                v129 = __ldxr(p_shared_owners);
              while (__stxr(v129 + 1, p_shared_owners));
              v186 = 0uLL;
              v187 = 0;
              do
                v130 = __ldaxr(p_shared_owners);
              while (__stlxr(v130 - 1, p_shared_owners));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v127);
              }
              v131 = *(_QWORD *)v185;
              *(_WORD *)_os_log_pack_fill() = 0;
              v132 = operator new();
              v133 = *(unsigned __int8 *)(v10 + 39);
              v134 = v166;
              if ((v133 & 0x80u) != 0)
              {
                v134 = *(_QWORD *)(v10 + 16);
                v133 = *(_QWORD *)(v10 + 24);
              }
              *(_QWORD *)v132 = v131;
              *(_OWORD *)(v132 + 8) = *(_OWORD *)&v185[8];
              *(_QWORD *)&v185[8] = 0;
              *(_QWORD *)&v185[16] = 0;
              *(float64x2_t *)(v132 + 24) = v186;
              v186 = 0uLL;
              *(_QWORD *)(v132 + 40) = v134;
              *(_QWORD *)(v132 + 48) = v133;
              *(_BYTE *)(v132 + 56) = 16;
              v167.f64[0] = 0.0;
              v173.i64[0] = v132;
              (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), &v173);
              v135 = *(double *)v173.i64;
              v173.i64[0] = 0;
              if (v135 != 0.0)
              {
                v136 = *(std::__shared_weak_count **)(*(_QWORD *)&v135 + 32);
                if (v136)
                {
                  v137 = (unint64_t *)&v136->__shared_owners_;
                  do
                    v138 = __ldaxr(v137);
                  while (__stlxr(v138 - 1, v137));
                  if (!v138)
                  {
                    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                    std::__shared_weak_count::__release_weak(v136);
                  }
                }
                v139 = *(std::__shared_weak_count **)(*(_QWORD *)&v135 + 16);
                if (v139)
                {
                  v140 = (unint64_t *)&v139->__shared_owners_;
                  do
                    v141 = __ldaxr(v140);
                  while (__stlxr(v141 - 1, v140));
                  if (!v141)
                  {
                    ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                    std::__shared_weak_count::__release_weak(v139);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v135, 0x10F0C40B62ED6C6);
                v167.f64[0] = 0.0;
              }
              v142 = v186.f64[1];
              if (*(_QWORD *)&v186.f64[1])
              {
                v143 = (unint64_t *)(*(_QWORD *)&v186.f64[1] + 8);
                do
                  v144 = __ldaxr(v143);
                while (__stlxr(v144 - 1, v143));
                if (!v144)
                {
                  (*(void (**)(float64_t))(**(_QWORD **)&v142 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v142));
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v142);
                }
              }
              v145 = *(std::__shared_weak_count **)&v185[16];
              if (*(_QWORD *)&v185[16])
              {
                v146 = (unint64_t *)(*(_QWORD *)&v185[16] + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
                if (!v147)
                {
                  ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                  std::__shared_weak_count::__release_weak(v145);
                }
              }
            }
            else
            {
              os_log_type_enabled(v123, OS_LOG_TYPE_ERROR);
              *(_WORD *)v185 = 0;
              v148 = (void *)_os_log_send_and_compose_impl();
              if (v148)
                free(v148);
            }
            if (v6)
            {
              sub_20E8C003C((uint64_t)&v180, "Input track length is less than 2");
              sub_20E863570((uint64_t)&v180);
            }
            sub_20E863570((uint64_t)&v180);
            v149 = *(std::__shared_weak_count **)&v184;
            if (v184 == 0.0)
              return 0;
            v150 = (unint64_t *)(*(_QWORD *)&v184 + 8);
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (v151)
              return 0;
            goto LABEL_185;
          }
        }
        memmove(v120, v12, v11);
        goto LABEL_138;
      }
    }
    memmove(v113, v111, v112);
    goto LABEL_130;
  }
  v184 = 0.0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  if (v4 != v5)
  {
    v165 = (float64x2_t *)(a2 + 48);
    do
    {
      v16 = *(_QWORD *)v4;
      v15 = *(_QWORD *)(v4 + 8);
      v17 = *(_DWORD *)(v4 + 16);
      v18 = sub_20E9DF85C((_QWORD *)(*a3 + 1784), (uint64_t *)v4);
      if (v18)
        v19 = v18 + 5;
      else
        v19 = 0;
      if (!v18)
      {
        sub_20F34CD58(&v167);
        if (**(int **)(*(_QWORD *)&v167.f64[0] + 56) > 4)
          return 0;
        v102 = *(unsigned __int8 *)(*(_QWORD *)&v167.f64[0] + 72);
        v103 = sub_20E8C31DC(*(uint64_t *)&v167.f64[0], "OSLogSurrogateAppender", 1, 0);
        v104 = v103 ? v103 + 16 : 0;
        if (!v102 && v103 == 0)
          return 0;
        v173.i64[0] = (uint64_t)&v167;
        v173.u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v174 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
        v175.i32[0] = 4;
        v175.i64[1] = (uint64_t)"unknown file";
        LODWORD(v176) = 214;
        v178 = 0;
        v179 = 0;
        v177 = "unknown function";
        v106 = *(_QWORD *)v173.i64[0];
        v107 = (uint64_t *)(*(_QWORD *)v173.i64[0] + 16);
        if (*(char *)(*(_QWORD *)v173.i64[0] + 39) < 0)
        {
          v109 = *(const char **)(v106 + 16);
          v108 = *(_QWORD *)(v106 + 24);
        }
        else
        {
          v108 = *(unsigned __int8 *)(*(_QWORD *)v173.i64[0] + 39);
          v109 = (const char *)(*(_QWORD *)v173.i64[0] + 16);
        }
        v152 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v152 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v185);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v185);
          if (LOBYTE(v186.f64[0]) && (v185[23] & 0x80000000) != 0)
            operator delete(*(void **)v185);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v153 = byte_254A4A4F8;
        else
          v153 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v154 = byte_254A4A4F8[23];
        else
          v154 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v185 = os_log_create(v153, v109);
        v155 = &v185[8];
        if (v154 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v154 >= 0x17)
        {
          v156 = (v154 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v154 | 7) != 0x17)
            v156 = v154 | 7;
          v157 = v156 + 1;
          v155 = operator new(v156 + 1);
          *(_QWORD *)&v185[16] = v154;
          *(_QWORD *)&v186.f64[0] = v157 | 0x8000000000000000;
          *(_QWORD *)&v185[8] = v155;
        }
        else
        {
          HIBYTE(v186.f64[0]) = v154;
          if (!v154)
          {
LABEL_202:
            v155[v154] = 0;
            LOBYTE(v186.f64[1]) = 1;
            v158 = (void **)&v187;
            if (v108 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v108 >= 0x17)
            {
              v159 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v108 | 7) != 0x17)
                v159 = v108 | 7;
              v160 = v159 + 1;
              v158 = (void **)operator new(v159 + 1);
              v188 = v108;
              v189 = v160 | 0x8000000000000000;
              v187 = v158;
            }
            else
            {
              HIBYTE(v189) = v108;
              if (!v108)
              {
LABEL_210:
                *((_BYTE *)v158 + v108) = 0;
                v190 = 1;
                v161 = *(NSObject **)v185;
                if (SHIBYTE(v189) < 0)
                  operator delete(v187);
                if (LOBYTE(v186.f64[1]) && SHIBYTE(v186.f64[0]) < 0)
                  operator delete(*(void **)&v185[8]);
                if (*(_QWORD *)v185)
                  os_release(*(void **)v185);
                sub_20F3A7714(v104, v107, v161, OS_LOG_TYPE_ERROR);
                if (v102)
                {
                  sub_20E8C003C((uint64_t)&v173, "Fail to find poseRef via image id");
                  sub_20E863570((uint64_t)&v173);
                }
                sub_20E863570((uint64_t)&v173);
                v149 = v179;
                if (!v179)
                  return 0;
                v162 = (unint64_t *)&v179->__shared_owners_;
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 - 1, v162));
                if (v163)
                  return 0;
LABEL_185:
                ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                std::__shared_weak_count::__release_weak(v149);
                return 0;
              }
            }
            memmove(v158, v109, v108);
            goto LABEL_210;
          }
        }
        memmove(v155, v153, v154);
        goto LABEL_202;
      }
      v21 = (char *)a3[5];
      v20 = (char *)a3[6];
      if (v20 != v21)
      {
        v22 = (v20 - v21) >> 4;
        v23 = *(_DWORD *)(v4 + 16);
        v24 = *(_QWORD *)v4;
        while (1)
        {
          v25 = v22 >> 1;
          v26 = &v21[16 * (v22 >> 1)];
          v27 = *(_QWORD *)v26;
          v28 = *(_DWORD *)(*(_QWORD *)v26 + 16);
          _CF = v28 >= v23;
          if (v28 != v23)
            goto LABEL_25;
          if (*(_QWORD *)v27 >= v24)
            break;
LABEL_19:
          v21 = v26 + 16;
          v25 = v22 + ~v25;
LABEL_20:
          v22 = v25;
          if (!v25)
            goto LABEL_28;
        }
        if (*(_QWORD *)v27 != v24)
          goto LABEL_20;
        _CF = *(_DWORD *)(v27 + 8) >= *(_DWORD *)(v4 + 8);
LABEL_25:
        if (_CF)
          goto LABEL_20;
        goto LABEL_19;
      }
LABEL_28:
      if (v21 != v20)
      {
        v30 = *(_QWORD *)v21;
        if (*(_DWORD *)(*(_QWORD *)v21 + 16) == *(_DWORD *)(v4 + 16)
          && *(_QWORD *)v30 == *(_QWORD *)v4
          && *(_DWORD *)(v30 + 8) == *(_DWORD *)(v4 + 8))
        {
          v20 = v21;
        }
      }
      if (!*(_QWORD *)v20
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 220, (uint64_t)"vio_frame", 9, (uint64_t)"Error cannot find the vio_frame", 31, (void (*)(void **))sub_21023DDB0))
      {
LABEL_225:
        abort();
      }
      v31 = sub_20E9DF85C((_QWORD *)(*a3 + 1784), (uint64_t *)v4);
      if (v31)
      {
        v35 = v31[13];
        v36 = *a3;
        v37 = *(_QWORD *)(*a3 + 304);
        if (!v37)
          goto LABEL_53;
      }
      else
      {
        v35 = 0;
        v36 = *a3;
        v37 = *(_QWORD *)(*a3 + 304);
        if (!v37)
          goto LABEL_53;
      }
      v38 = v36 + 304;
      v39 = v36 + 304;
      do
      {
        v40 = *(_DWORD *)(v37 + 32);
        v41 = v40 >= v17;
        if (v40 >= v17)
          v42 = (uint64_t *)v37;
        else
          v42 = (uint64_t *)(v37 + 8);
        if (v41)
          v39 = v37;
        v37 = *v42;
      }
      while (*v42);
      if (v39 != v38)
      {
        v43 = *(_DWORD *)(v39 + 32);
        v44 = v39 + 40;
        if (v43 <= v17)
          v45 = v44;
        else
          v45 = 0;
        if (v35)
          goto LABEL_55;
        goto LABEL_54;
      }
LABEL_53:
      v45 = 0;
      if (v35)
        goto LABEL_55;
LABEL_54:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 225, (uint64_t)"lens", 4, (uint64_t)"Error cannot find the lens\n", 27, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_225;
      }
LABEL_55:
      v46 = *(float **)(v4 + 24);
      if (!v46
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 229, (uint64_t)"node != nullptr", 15, (uint64_t)"Error we cannot retrieve the track-node", 39, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_225;
      }
      v47 = *(_QWORD *)(*a3 + 56);
      if (!v47)
        goto LABEL_243;
      v48 = *a3 + 56;
      do
      {
        v49 = *(_QWORD *)(v47 + 32);
        if (v49 < v16)
        {
          v47 += 8;
        }
        else if (v49 == v16)
        {
          if (*(_DWORD *)(v47 + 40) < v15)
            v47 += 8;
          else
            v48 = v47;
        }
        else
        {
          v48 = v47;
        }
        v47 = *(_QWORD *)v47;
      }
      while (v47);
      if (v48 == *a3 + 56
        || (v50 = *(_QWORD *)(v48 + 32), v16 < v50)
        || v16 == v50 && *(_DWORD *)(v48 + 40) > v15
        || (v51 = *(_QWORD *)(v48 + 48)) == 0)
      {
LABEL_243:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 233, (uint64_t)"state != nullptr", 16, (uint64_t)"Error we cannot retrieve the viostate", 37, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_225;
        }
        v51 = 0;
      }
      v52 = v46[8];
      v53 = *(_DWORD *)(v35 + 992);
      if (v53 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_225;
        }
        v53 = *(_DWORD *)(v35 + 992);
        if (v53 <= 7)
        {
LABEL_76:
          if (!v53)
            goto LABEL_226;
LABEL_81:
          v54 = *(double *)v35;
          if (v53 > 1)
            goto LABEL_87;
LABEL_82:
          if (!v53)
            goto LABEL_226;
          v53 = 1;
          goto LABEL_87;
        }
      }
      else if (v53 <= 7)
      {
        goto LABEL_76;
      }
      if (v53 < 0xF)
        goto LABEL_81;
      v54 = *(double *)v35;
      if (v53 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_225;
        }
        v53 = *(_DWORD *)(v35 + 992);
        if (v53 <= 1)
          goto LABEL_82;
      }
LABEL_87:
      v55 = (v54 + *(double *)(v35 + 32)) * 0.5;
      if (v55 == 0.0)
        v56 = 1.0;
      else
        v56 = 1.0 / v55;
      v57 = v46[2];
      v58 = v46[3];
      if (v53 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_225;
        }
        v53 = *(_DWORD *)(v35 + 992);
        v32.f64[0] = v57;
        v59 = v58;
        if (v53 > 7)
          goto LABEL_96;
LABEL_95:
        if (!v53)
        {
LABEL_226:
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        goto LABEL_96;
      }
      v32.f64[0] = v57;
      v59 = v58;
      if (v53 <= 7)
        goto LABEL_95;
LABEL_96:
      v34.f64[0] = *(double *)(v35 + 88) + *(double *)(v35 + 72) * v32.f64[0] + *(double *)(v35 + 80) * v59;
      v32.f64[0] = v52 * a4 * v56;
      v33.f64[0] = *(float64_t *)(v35 + 104);
      v60 = *(double *)(v35 + 112);
      v172.f64[0] = v34.f64[0];
      v172.f64[1] = v33.f64[0] * v59 + v60;
      result = sub_20FD34A2C(&v171, (uint64_t)v185, (uint64_t)&v173, (uint64_t)&v167, &v172, *v19 - 8 * *((unsigned int *)v19 + 2), (float64x2_t *)(v19[2] - 8 * *((unsigned int *)v19 + 6)), v165, v32, v172.f64[1], v33, v60, v34, v45, (float64x2_t *)(v45 + 72), v35, 0);
      if (!(_DWORD)result)
        return result;
      v63.f64[0] = *(float64_t *)v185;
      v63.f64[1] = v186.f64[0];
      v64 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v185, (int64x2_t)v186);
      v65.f64[0] = *(float64_t *)&v185[16];
      *(_QWORD *)&v65.f64[1] = v187;
      *(_QWORD *)&v66.f64[0] = v173.i64[0];
      *(_QWORD *)&v66.f64[1] = v175.i64[0];
      v67 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v51 + 456)), v64, *(float64x2_t *)(v51 + 456), 1), v65, *(double *)(v51 + 472)), v66, *(float64x2_t *)(v51 + 472), 1);
      v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v51 + 504)), v64, *(float64x2_t *)(v51 + 504), 1), v65, *(double *)(v51 + 520)), v66, *(float64x2_t *)(v51 + 520), 1);
      v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v51 + 552)), v64, *(float64x2_t *)(v51 + 552), 1), v65, *(double *)(v51 + 568)), v66, *(float64x2_t *)(v51 + 568), 1);
      v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v51 + 600)), v64, *(float64x2_t *)(v51 + 600), 1), v65, *(double *)(v51 + 616)), v66, *(float64x2_t *)(v51 + 616), 1);
      v71 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v51 + 648)), v64, *(float64x2_t *)(v51 + 648), 1), v65, *(double *)(v51 + 664)), v66, *(float64x2_t *)(v51 + 664), 1);
      v72 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v51 + 696)), v64, *(float64x2_t *)(v51 + 696), 1), v65, *(double *)(v51 + 712)), v66, *(float64x2_t *)(v51 + 712), 1);
      v73 = (float64x2_t)vzip2q_s64(v173, v175);
      v66.f64[0] = v174;
      v66.f64[1] = v176;
      v74 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v73, *(double *)(v51 + 488)), v66, *(float64x2_t *)(v51 + 488), 1);
      v75 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v73, *(double *)(v51 + 536)), v66, *(float64x2_t *)(v51 + 536), 1);
      v76 = vmlaq_laneq_f64(vmlaq_n_f64(v69, v73, *(double *)(v51 + 584)), v66, *(float64x2_t *)(v51 + 584), 1);
      v77 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v73, *(double *)(v51 + 632)), v66, *(float64x2_t *)(v51 + 632), 1);
      v78 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v73, *(double *)(v51 + 680)), v66, *(float64x2_t *)(v51 + 680), 1);
      v79 = vmlaq_laneq_f64(vmlaq_n_f64(v72, v73, *(double *)(v51 + 728)), v66, *(float64x2_t *)(v51 + 728), 1);
      v62.f64[0] = v168;
      _Q4.f64[1] = 1.0;
      _Q3 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, v186.f64[0]), v75, v186, 1), v76, *(double *)&v187), v77, *(double *)v175.i64), v78, (float64x2_t)v175, 1), v79, v176), (float64x2_t)xmmword_2102DD520);
      _Q4.f64[0] = sqrt(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v74, *(double *)v185), v75, *(float64x2_t *)v185, 1), v76, *(double *)&v185[16]), v77, *(double *)v173.i64), v78, (float64x2_t)v173, 1), v79, v174).f64[0]+ 1.0);
      _Q3.f64[0] = _Q3.f64[0] / _Q4.f64[0];
      v65.f64[0] = sqrt(_Q3.f64[1] - _Q3.f64[0] * _Q3.f64[0]);
      v82 = vdivq_f64(v62, _Q4).f64[0];
      _Q1 = vdivq_f64(v167, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q4.f64[0], 0));
      v84.f64[0] = *(double *)&v169 - _Q3.f64[0] * _Q1.f64[0];
      __asm { FMLS            D4, D3, V1.D[1] }
      _Q3.f64[0] = v170 - _Q3.f64[0] * v82;
      v84.f64[1] = _Q4.f64[0];
      *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vdivq_f64(_Q3, v65);
      v87 = vdivq_f64(v84, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65.f64[0], 0));
      v180.f64[0] = v180.f64[0] + vmuld_n_f64(_Q1.f64[0], _Q1.f64[0]) + vmuld_n_f64(v87.f64[0], v87.f64[0]);
      *(double *)&v181.i64[1] = *(double *)&v181.i64[1]
                              + vmuld_lane_f64(_Q1.f64[0], _Q1, 1)
                              + 0.0
                              + vmuld_lane_f64(v87.f64[0], v87, 1);
      _Q4.f64[0] = vmuld_lane_f64(_Q1.f64[1], _Q1, 1) + vmuld_lane_f64(v87.f64[1], v87, 1) + v182.f64[0];
      v65.f64[0] = *(double *)&v183 + vmuld_n_f64(_Q1.f64[0], v82) + 0.0 + vmuld_n_f64(v87.f64[0], _Q3.f64[0]);
      _Q1.f64[0] = vmuld_lane_f64(v82, _Q1, 1) + 0.0 + vmuld_lane_f64(_Q3.f64[0], v87, 1) + *((double *)&v183 + 1);
      v88 = vmuld_n_f64(v82, v82) + vmuld_n_f64(_Q3.f64[0], _Q3.f64[0]) + v184;
      *(float64_t *)&v183 = v65.f64[0];
      *((_QWORD *)&v183 + 1) = *(_QWORD *)&_Q1.f64[0];
      _Q1.f64[0] = _Q4.f64[0];
      v87.f64[0] = v65.f64[0];
      _Q3.f64[0] = v180.f64[0];
      *(_QWORD *)&_Q3.f64[1] = v181.i64[1];
      _Q1.f64[1] = *((float64_t *)&v183 + 1);
      *(_QWORD *)&v87.f64[1] = vdupq_laneq_s64(v181, 1).u64[0];
      v184 = v88;
      v181 = (int64x2_t)v87;
      v182 = _Q1;
      v180 = _Q3;
      v4 += 32;
    }
    while (v4 != v5);
  }
  v89 = 0;
  v90 = 1;
  do
  {
    v91 = v89;
    v92 = 3 * v90;
    v93 = v90;
    do
    {
      v180.f64[v92++] = v180.f64[v93];
      v93 += 3;
      --v90;
    }
    while (v90);
    v89 = 1;
    v90 = 2;
  }
  while ((v91 & 1) == 0);
  result = sub_21020B160((char *)a1, (char *)&v180, 3u);
  if ((_DWORD)result)
  {
    v95 = *(float64x2_t *)(a1 + 16);
    v96 = vcvt_f32_f64(*(float64x2_t *)a1);
    v97 = *(float64x2_t *)(a1 + 32);
    v98 = *(float64x2_t *)(a1 + 48);
    *(float32x2_t *)&v97.f64[0] = vcvt_f32_f64(v97);
    *(float32x2_t *)&v98.f64[0] = vcvt_f32_f64(v98);
    v99 = *(double *)(a1 + 64);
    v100 = (int32x4_t)vextq_s8((int8x16_t)vcvt_hight_f32_f64(v94, v95), (int8x16_t)v97, 0xCuLL);
    *(float *)&v98.f64[1] = v99;
    v101 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v100, (int8x16_t)v100, 0xCuLL), (int8x16_t)v100, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v100, v100), (int8x16_t)v100, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v98, (int8x16_t)v98, 0xCuLL), (int8x16_t)v98, 8uLL));
    return vmla_f32(vmla_lane_f32(vmul_f32(v96, *(float32x2_t *)v101.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1), v96, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL), vcvt_f32_f64(v95)).f32[0] > 0.0;
  }
  return result;
}

void sub_20F34CB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  if (*(_BYTE *)(v28 - 216))
  {
    if (*(char *)(v28 - 217) < 0)
      operator delete(*(void **)(v28 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F34CBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  if (*(_BYTE *)(v37 - 216))
  {
    if (*(char *)(v37 - 217) < 0)
      operator delete(*(void **)(v37 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F34CBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F34CC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F34CC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void *v30;

  if (*(_BYTE *)(v28 - 208) && *(char *)(v28 - 209) < 0)
    operator delete(*(void **)(v28 - 232));
  v30 = *(void **)(v28 - 240);
  if (v30)
    os_release(v30);
  sub_20E863714((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20F34CC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20E86E8C4(&a28);
  sub_20E86E8C4(&a18);
  sub_20E86E658(v37 - 240);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F34CC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20E86E658(v37 - 240);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F34CCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  MEMORY[0x212BC6398](v37, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F34CCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F34CCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F34CD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  void *v39;

  if (*(_BYTE *)(v37 - 208) && *(char *)(v37 - 209) < 0)
    operator delete(*(void **)(v37 - 232));
  v39 = *(void **)(v37 - 240);
  if (v39)
    os_release(v39);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F34CD58(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A688C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A688C8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio.area_mapping");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A688C0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A688C8);
  }
  *a1 = qword_254A688C0;
}

void sub_20F34CDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A688C8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A688C8);
  _Unwind_Resume(a1);
}

BOOL sub_20F34CE4C(uint64_t a1, uint64_t a2, _QWORD *a3, float a4, double a5)
{
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v28;
  uint64_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  float v50;
  unsigned int v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  float64x2_t *v57;
  float64x2_t v58;
  int64x2_t v60;
  int64x2_t v61;
  double v62;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v71;
  double v72;
  double v73;
  char v74;
  float64x2_t v78;
  double v82;
  double v83;
  double v84;
  double v87;
  double v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  double v99;
  double v103;
  long double v104;
  long double v105;
  int64x2_t v106;
  int64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  double v111;
  float64x2_t v112;
  double v113;
  double v114;
  double v117;
  float64x2_t v118;
  unint64_t v119;
  double v120;
  long double v121;
  long double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  double v129;
  long double v130;
  long double v131;
  float64x2_t v132;
  double v133;
  double v138;
  float64x2_t v140;
  double v142;
  double v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  double v152;
  float64x2_t v153;
  float64x2_t v154;
  double v165;
  float64x2_t v171;
  float64x2_t v175;
  float64x2_t v178;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v187;
  float64x2_t v191;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v199;
  float64x2_t v201;
  float64x2_t v202;
  double v207;
  float64x2_t v209;
  float64x2_t v214;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v221;
  float64x2_t v223;
  float64x2_t v224;
  double v226;
  double v227;
  double v228;
  double v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  char v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  _BOOL8 result;
  int32x2_t v243;
  float64x2_t v244;
  float32x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float v248;
  int32x4_t v249;
  int8x16_t v250;
  int v251;
  int v252;
  unint64_t v253;
  size_t v254;
  void **v255;
  float64_t v256;
  const void **v257;
  const void *v258;
  uint64_t v259;
  uint64_t v260;
  const char *v261;
  uint64_t v262;
  size_t v263;
  const char *v264;
  unsigned __int8 v265;
  const char *v266;
  size_t v267;
  _BYTE *v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  uint64_t v272;
  uint64_t v273;
  NSObject *v274;
  size_t v275;
  void *v276;
  double v277;
  size_t v278;
  size_t v279;
  _BYTE *v280;
  void *v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  double v287;
  uint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *p_shared_owners;
  unint64_t v291;
  char *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  float64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  float64_t v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  const char *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  uint64_t v332;
  double v333;
  double v334;
  uint64_t v336;
  float64x2_t v337;
  float64x2_t v338;
  double __x;
  float64x2_t __xa;
  int8x16_t v341;
  int8x16_t v342;
  int8x16_t v343;
  float64x2_t v344;
  float64x2_t v345;
  int8x16_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  double v351;
  float64x2_t v352;
  double v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64_t v357;
  double v358;
  float64x2_t v359;
  float64x2_t v360;
  double v361;
  float64x2_t v362;
  uint64_t v363;
  float64x2_t v364;
  int v365;
  int64x2_t v366;
  double v367;
  int64x2_t v368;
  double v369;
  const char *v370;
  uint64_t v371;
  std::__shared_weak_count *v372;
  void *__dst[2];
  int64_t v374;
  uint64_t v375;
  float64x2_t v376[3];
  float64x2_t v377;
  float64_t v378;
  float64x2_t v379;
  double v380;
  double v381;
  float64_t v382;
  _BYTE v383[24];
  float64x2_t v384;
  _BYTE v385[24];
  uint64_t v386;
  float64x2_t v387;
  uint64_t v388;
  double v389;
  void *__p;
  char v391;
  double v392;
  int v393;
  uint64_t v394;
  _QWORD v395[2];
  _BYTE v396[24];
  float64x2_t v397;
  char *v398;
  float64x2_t v399;
  double v400;
  uint64_t v401;

  v401 = *MEMORY[0x24BDAC8D0];
  if (!a2 || !*(_BYTE *)(a2 + 192))
    return 0;
  v378 = 0.0;
  v9.f64[1] = 0.0;
  v377 = 0u;
  memset(v376, 0, sizeof(v376));
  v10 = *(_QWORD *)(a2 + 200);
  v11 = *(_QWORD *)(a2 + 208);
  if (v11 - v10 != 32)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 379, (uint64_t)"track->getTrackLength() == 1 && \"Only handling mono-tracks\"", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_288:
      abort();
    }
    v10 = *(_QWORD *)(a2 + 200);
    v11 = *(_QWORD *)(a2 + 208);
  }
  if (v10 == v11)
  {
LABEL_142:
    v237 = 0;
    v238 = 1;
    do
    {
      v239 = v237;
      v240 = 3 * v238;
      v241 = v238;
      do
      {
        v376[0].f64[v240++] = v376[0].f64[v241];
        v241 += 3;
        --v238;
      }
      while (v238);
      v237 = 1;
      v238 = 2;
    }
    while ((v239 & 1) == 0);
    result = sub_21020B160((char *)a1, (char *)v376, 3u);
    if (result)
    {
      v244 = *(float64x2_t *)(a1 + 16);
      v245 = vcvt_f32_f64(*(float64x2_t *)a1);
      v246 = *(float64x2_t *)(a1 + 32);
      v247 = *(float64x2_t *)(a1 + 48);
      *(float32x2_t *)&v246.f64[0] = vcvt_f32_f64(v246);
      *(float32x2_t *)&v247.f64[0] = vcvt_f32_f64(v247);
      v248 = *(double *)(a1 + 64);
      v249 = (int32x4_t)vextq_s8((int8x16_t)vcvt_hight_f32_f64(v243, v244), (int8x16_t)v246, 0xCuLL);
      *(float *)&v247.f64[1] = v248;
      v250 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v249, (int8x16_t)v249, 0xCuLL), (int8x16_t)v249, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v247, (int32x4_t)v247), (int8x16_t)v247, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v249, v249), (int8x16_t)v249, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v247, (int8x16_t)v247, 0xCuLL), (int8x16_t)v247, 8uLL));
      return vmla_f32(vmla_lane_f32(vmul_f32(v245, *(float32x2_t *)v250.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v250.i8, 1), v245, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v250, v250, 8uLL), vcvt_f32_f64(v244)).f32[0] > 0.0;
    }
    return result;
  }
  v9.f64[0] = (float)(1.0 / a4);
  v12.f64[0] = v9.f64[0];
  v364 = v9;
  v12.f64[1] = v9.f64[0];
  v337 = v12;
  v336 = v11;
  while (1)
  {
    v13 = *(_QWORD *)v10;
    v14 = *(_QWORD *)(v10 + 8);
    v15 = *(_DWORD *)(v10 + 16);
    v16 = sub_20E9DF85C((_QWORD *)(*a3 + 1784), (uint64_t *)v10);
    v17 = v16 ? (uint64_t)(v16 + 5) : 0;
    if (!v16)
      break;
    v19 = (char *)a3[5];
    v18 = (char *)a3[6];
    if (v18 != v19)
    {
      v20 = (v18 - v19) >> 4;
      v21 = *(_DWORD *)(v10 + 16);
      v22 = *(_QWORD *)v10;
      while (1)
      {
        v23 = v20 >> 1;
        v24 = &v19[16 * (v20 >> 1)];
        v25 = *(_QWORD *)v24;
        v26 = *(_DWORD *)(*(_QWORD *)v24 + 16);
        _CF = v26 >= v21;
        if (v26 != v21)
          goto LABEL_20;
        if (*(_QWORD *)v25 >= v22)
          break;
LABEL_14:
        v19 = v24 + 16;
        v23 = v20 + ~v23;
LABEL_15:
        v20 = v23;
        if (!v23)
          goto LABEL_23;
      }
      if (*(_QWORD *)v25 != v22)
        goto LABEL_15;
      _CF = *(_DWORD *)(v25 + 8) >= *(_DWORD *)(v10 + 8);
LABEL_20:
      if (_CF)
        goto LABEL_15;
      goto LABEL_14;
    }
LABEL_23:
    if (v19 != v18)
    {
      v28 = *(_QWORD *)v19;
      if (*(_DWORD *)(*(_QWORD *)v19 + 16) == *(_DWORD *)(v10 + 16)
        && *(_QWORD *)v28 == *(_QWORD *)v10
        && *(_DWORD *)(v28 + 8) == *(_DWORD *)(v10 + 8))
      {
        v18 = v19;
      }
    }
    if (!*(_QWORD *)v18
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 396, (uint64_t)"vio_frame && \"Error cannot find the vio_frame\"", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_288;
    }
    v29 = sub_20E9DF85C((_QWORD *)(*a3 + 1784), (uint64_t *)v10);
    if (v29)
    {
      v33 = v29[13];
      v34 = *a3;
      v35 = *(_QWORD *)(*a3 + 304);
      if (!v35)
        goto LABEL_48;
    }
    else
    {
      v33 = 0;
      v34 = *a3;
      v35 = *(_QWORD *)(*a3 + 304);
      if (!v35)
        goto LABEL_48;
    }
    v36 = v34 + 304;
    v37 = v34 + 304;
    do
    {
      v38 = *(_DWORD *)(v35 + 32);
      v39 = v38 >= v15;
      if (v38 >= v15)
        v40 = (uint64_t *)v35;
      else
        v40 = (uint64_t *)(v35 + 8);
      if (v39)
        v37 = v35;
      v35 = *v40;
    }
    while (*v40);
    if (v37 == v36)
    {
LABEL_48:
      v43 = 0;
      if (v33)
        goto LABEL_50;
      goto LABEL_49;
    }
    v41 = *(_DWORD *)(v37 + 32);
    v42 = v37 + 40;
    if (v41 <= v15)
      v43 = v42;
    else
      v43 = 0;
    if (v33)
      goto LABEL_50;
LABEL_49:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 401, (uint64_t)"lens && \"Error cannot find the lens\\n\"", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_288;
    }
LABEL_50:
    v44 = *(_QWORD *)(v10 + 24);
    if (!v44
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 405, (uint64_t)"node != nullptr && \"Error we cannot retrieve the track-node\"", 60, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_288;
    }
    v45 = *(_QWORD *)(*a3 + 56);
    if (!v45)
      goto LABEL_307;
    v46 = *a3 + 56;
    do
    {
      v47 = *(_QWORD *)(v45 + 32);
      if (v47 < v13)
      {
        v45 += 8;
      }
      else if (v47 == v13)
      {
        if (*(_DWORD *)(v45 + 40) < v14)
          v45 += 8;
        else
          v46 = v45;
      }
      else
      {
        v46 = v45;
      }
      v45 = *(_QWORD *)v45;
    }
    while (v45);
    if (v46 == *a3 + 56
      || (v48 = *(_QWORD *)(v46 + 32), v13 < v48)
      || v13 == v48 && *(_DWORD *)(v46 + 40) > v14
      || (v49 = *(_QWORD *)(v46 + 48)) == 0)
    {
LABEL_307:
      v49 = 0;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 409, (uint64_t)"state != nullptr && \"Error we cannot retrieve the viostate\"", 59, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_288;
      }
    }
    v50 = *(float *)(v44 + 32);
    v51 = *(_DWORD *)(v33 + 992);
    if (v51 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v51 = *(_DWORD *)(v33 + 992);
      if (v51 <= 7)
      {
LABEL_70:
        if (!v51)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
LABEL_75:
        v52 = *(double *)v33;
        if (v51 > 1)
          goto LABEL_81;
LABEL_76:
        if (!v51)
        {
          sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
          abort();
        }
        v51 = 1;
        goto LABEL_81;
      }
    }
    else if (v51 <= 7)
    {
      goto LABEL_70;
    }
    if (v51 < 0xF)
      goto LABEL_75;
    v52 = *(double *)v33;
    if (v51 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v51 = *(_DWORD *)(v33 + 992);
      if (v51 <= 1)
        goto LABEL_76;
    }
LABEL_81:
    v53 = (v52 + *(double *)(v33 + 32)) * 0.5;
    if (v53 == 0.0)
      v54 = 1.0;
    else
      v54 = 1.0 / v53;
    v55 = v50 * a5 * v54;
    if (v55 == 0.0)
      v56 = 1.0;
    else
      v56 = 1.0 / v55;
    v361 = v56;
    if (v51 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v51 = *(_DWORD *)(v33 + 992);
    }
    if (!v51)
    {
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
      abort();
    }
    v57 = *(float64x2_t **)(v17 + 16);
    v30.f64[0] = *(float64_t *)(a2 + 64);
    v31.f64[0] = v57[1].f64[0];
    v58 = vsubq_f64(v30, v31);
    _Q1 = vsubq_f64(*(float64x2_t *)(a2 + 48), *v57);
    v60 = *(int64x2_t *)*(_QWORD *)v17;
    v61 = *(int64x2_t *)(*(_QWORD *)v17 + 24);
    v62 = *(double *)(*(_QWORD *)v17 + 64);
    _Q6 = *(float64x2_t *)(*(_QWORD *)v17 + 48);
    v350 = (float64x2_t)v61;
    v352 = (float64x2_t)v60;
    v357 = *(double *)(*(_QWORD *)v17 + 40);
    v64.f64[0] = *(float64_t *)(*(_QWORD *)v17 + 16);
    v64.f64[1] = v357;
    v65 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v60, v61), _Q1.f64[0]), (float64x2_t)vzip2q_s64(v60, v61), _Q1, 1), v64, v58.f64[0]);
    _Q2 = vmulq_f64(_Q6, _Q1);
    _Q1.f64[0] = _Q1.f64[1];
    v354 = _Q6;
    __asm { FMLA            D2, D1, V6.D[1] }
    _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v62, v58.f64[0]);
    v58.f64[0] = *(float64_t *)(v43 + 88);
    v359 = v65;
    _Q1 = vsubq_f64(v65, *(float64x2_t *)(v43 + 72));
    v346 = (int8x16_t)_Q2;
    *(_QWORD *)&v58.f64[0] = *(_OWORD *)&vsubq_f64(_Q2, v58);
    _Q6.f64[0] = *(float64_t *)(v43 + 16);
    v60.i64[0] = *(_QWORD *)(v43 + 40);
    v61.i64[0] = *(_QWORD *)(v43 + 64);
    v348 = *(float64x2_t *)(v43 + 24);
    v344 = *(float64x2_t *)(v43 + 48);
    v345 = *(float64x2_t *)v43;
    v342 = (int8x16_t)v60;
    v343 = (int8x16_t)_Q6;
    _Q2.f64[0] = _Q6.f64[0];
    *(_QWORD *)&_Q2.f64[1] = v60.i64[0];
    v71 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v43, (int64x2_t)v348), _Q1.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v43, (int64x2_t)v348), _Q1, 1), _Q2, v58.f64[0]);
    _Q1.f64[0] = _Q1.f64[1];
    __asm { FMLA            D2, D1, V5.D[1] }
    v338 = v71;
    v379 = v71;
    __x = vmlad_n_f64(_Q2.f64[0], *(double *)v61.i64, v58.f64[0]);
    v341 = (int8x16_t)v61;
    v380 = __x;
    if (v51 == -1)
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v51 = *(_DWORD *)(v33 + 992);
      if (v51 <= 7)
      {
LABEL_93:
        if (v51 > 3)
        {
          if (v51 <= 5)
          {
            if (v51 == 5)
            {
              v74 = sub_20EB29218((double *)v383, (uint64_t)&v366, &v379, (int64x2_t *)(v33 + 168));
              goto LABEL_132;
            }
LABEL_125:
            _Q6 = v338;
            _D0 = v338.f64[1];
            __asm { FMLA            D2, D0, V6.D[1] }
            if (_D2 >= 0.00000001)
            {
              v103 = __x * __x + _D2;
              v104 = sqrt(_D2);
              v334 = _D2;
              v105 = atan2(v104, __x);
              v106 = *(int64x2_t *)(v33 + 184);
              v107 = *(int64x2_t *)(v33 + 168);
              v108 = (float64x2_t)vzip2q_s64(v107, v106);
              v109 = (float64x2_t)vzip1q_s64(v107, v106);
              v110 = vmulq_n_f64(vaddq_f64(vmulq_f64(v109, (float64x2_t)xmmword_210312E10), vmulq_n_f64(vmulq_f64(v108, (float64x2_t)xmmword_210312E20), v105 * v105)), v105 * v105);
              v111 = v105 * v105 * (v105 * v105);
              _Q6 = v338;
              v112 = vmulq_n_f64(vaddq_f64(v109, vmulq_n_f64(v108, v105 * v105)), v105 * v105);
              v113 = (v105 + v105 * (v112.f64[0] + vmuld_lane_f64(v111, v112, 1))) / v104;
              v114 = (v110.f64[0] + vmuld_lane_f64(v111, v110, 1) + 1.0) / v103;
              goto LABEL_135;
            }
LABEL_128:
            v113 = 1.0 / __x;
            v117 = -(v113 * v113);
            v118.f64[0] = 0.0;
            v119 = 0;
            goto LABEL_136;
          }
          if (v51 != 6)
          {
            v74 = sub_20EB3345C(v33, (float64x2_t *)v383, (uint64_t)&v366, &v379, 0);
            goto LABEL_132;
          }
          if (__x == 0.0)
            v99 = 1.0;
          else
            v99 = 1.0 / __x;
          v333 = v99;
          __xa = vmulq_n_f64(v338, v99);
          *(float64x2_t *)v396 = __xa;
          sub_20EB2837C((float64x2_t *)v383, v384.f64, (float64x2_t *)v396, (double *)(v33 + 168), (float64x2_t *)(v33 + 192), (double *)(v33 + 208));
          *(double *)v366.i64 = v333 * v384.f64[0];
          *(double *)&v366.i64[1] = v333 * v384.f64[1];
          v367 = v333 * (-v384.f64[0] * __xa.f64[0] - vmuld_lane_f64(v384.f64[1], __xa, 1));
          *(double *)v368.i64 = v333 * *(double *)v385;
          *(double *)&v368.i64[1] = v333 * *(double *)&v385[8];
          v369 = v333 * (-*(double *)v385 * __xa.f64[0] - vmuld_lane_f64(*(double *)&v385[8], __xa, 1));
        }
        else
        {
          if (v51 <= 1)
          {
            if (!v51)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            if (__x < 0.00000001)
              return 0;
            v72 = 1.0 / __x;
            *(float64x2_t *)v383 = vmulq_n_f64(v338, 1.0 / __x);
            v366 = (int64x2_t)COERCE_UNSIGNED_INT64(1.0 / __x);
            v368.i64[0] = 0;
            v367 = v72 * -(v338.f64[0] * v72);
            v73 = v72 * -(v338.f64[1] * v72);
            goto LABEL_137;
          }
          if (v51 != 2)
            goto LABEL_125;
          if (*(_DWORD *)(v33 + 212))
          {
            if (__x < 0.00000001)
              return 0;
            _Q0 = vmulq_n_f64(v338, 1.0 / __x);
            v82 = *(double *)(v33 + 168);
            v83 = *(double *)(v33 + 176);
            v84 = *(double *)(v33 + 184);
            _D5 = vmuld_lane_f64(1.0 / __x, v338, 1);
            __asm { FMLA            D6, D5, V0.D[1] }
            v87 = *(double *)&_D6 * v82 + 1.0 + *(double *)&_D6 * *(double *)&_D6 * (v83 + *(double *)&_D6 * v84);
            v88 = v82 + v82 + *(double *)&_D6 * (v83 * 4.0 + *(double *)&_D6 * (v84 * 6.0));
            v89 = *(float64x2_t *)(v33 + 192);
            v90 = vmulq_f64(vaddq_f64((float64x2_t)vdupq_lane_s64(_D6, 0), vmulq_f64(_Q0, vaddq_f64(_Q0, _Q0))), (float64x2_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL));
            v91 = vaddq_f64(v89, v89);
            v92 = vmulq_n_f64(v91, _Q0.f64[0]);
            *(float64x2_t *)v383 = vmlaq_n_f64(vaddq_f64(v90, vmulq_laneq_f64(v92, _Q0, 1)), _Q0, v87);
            v93 = vmulq_n_f64(_Q0, v88);
            v94 = vmulq_n_f64(v93, _Q0.f64[0]);
            v95 = vmulq_n_f64(v93, _D5);
            v96 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v92.f64[0], 0);
            v96.f64[0] = vmuld_lane_f64(6.0, v89, 1) * _Q0.f64[0];
            v97 = vaddq_f64(v96, vmulq_laneq_f64(v91, _Q0, 1));
            v94.f64[0] = v87 + v94.f64[0];
            v98 = vaddq_f64(v97, v94);
            *(_QWORD *)&v97.f64[0] = vdupq_laneq_s64((int64x2_t)v97, 1).u64[0];
            v97.f64[1] = vmuld_lane_f64(6.0 * v89.f64[0], _Q0, 1) + v92.f64[1];
            v95.f64[1] = v87 + v95.f64[1];
            v366 = (int64x2_t)vmulq_n_f64(v98, 1.0 / __x);
            v367 = -(vmuld_n_f64(*(double *)v366.i64, _Q0.f64[0]) + *(double *)&v366.i64[1] * _Q0.f64[1]);
            v368 = (int64x2_t)vmulq_n_f64(vaddq_f64(v97, v95), 1.0 / __x);
            v369 = -(vmuld_n_f64(*(double *)v368.i64, _Q0.f64[0]) + *(double *)&v368.i64[1] * _Q0.f64[1]);
          }
          else
          {
            if (__x < 0.00000001)
              return 0;
            _Q1 = vmulq_n_f64(v338, 1.0 / __x);
            v226 = *(double *)(v33 + 168);
            v227 = *(double *)(v33 + 176);
            v228 = *(double *)(v33 + 184);
            _D5 = vmuld_lane_f64(1.0 / __x, v338, 1);
            __asm { FMLA            D6, D5, V1.D[1] }
            v231 = _D6 * v226 + 1.0 + _D6 * _D6 * (v227 + _D6 * v228);
            *(float64x2_t *)v383 = vmulq_n_f64(_Q1, v231);
            v232 = vmulq_n_f64(_Q1, v226 + v226 + _D6 * (v227 * 4.0 + _D6 * (v228 * 6.0)));
            v233 = vmulq_n_f64(v232, _Q1.f64[0]);
            v234 = vmulq_n_f64(v232, _D5);
            v235.f64[0] = v233.f64[0];
            v235.f64[1] = v234.f64[1];
            v236 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v231, 0), v235);
            v235.f64[0] = v236.f64[0];
            v235.f64[1] = v233.f64[1];
            v236.f64[0] = v234.f64[0];
            v366 = (int64x2_t)vmulq_n_f64(v235, 1.0 / __x);
            v367 = -(vmuld_n_f64(*(double *)v366.i64, _Q1.f64[0]) + *(double *)&v366.i64[1] * _Q1.f64[1]);
            v368 = (int64x2_t)vmulq_n_f64(v236, 1.0 / __x);
            v369 = -(vmuld_n_f64(*(double *)v368.i64, _Q1.f64[0]) + *(double *)&v368.i64[1] * _Q1.f64[1]);
          }
        }
        goto LABEL_138;
      }
    }
    else if (v51 <= 7)
    {
      goto LABEL_93;
    }
    if (v51 <= 0xB)
    {
      if (v51 > 9)
      {
        if (v51 == 10)
          v74 = sub_20EB2450C((float64x2_t *)v383, (uint64_t)&v366, 0, (uint64_t)&v379, (double *)(v33 + 168), (*(double *)v33 + *(double *)(v33 + 32)) * 0.5);
        else
          v74 = sub_20EB3AF98(v33, (float64x2_t *)v383, (uint64_t)&v366, &v379, 0);
        goto LABEL_132;
      }
      if (v51 == 9)
      {
        v74 = sub_20EB372E0(v33, (float64x2_t *)v383, (uint64_t)&v366, &v379, 0);
        goto LABEL_132;
      }
      _Q6 = v338;
      _D0 = v338.f64[1];
      __asm { FMLA            D2, D0, V6.D[1] }
      if (_D2 < 0.00000001)
        goto LABEL_128;
      v120 = __x * __x + _D2;
      v121 = sqrt(_D2);
      v334 = _D2;
      v122 = atan2(v121, __x);
      v123 = *(double *)(v33 + 168);
      v124 = *(double *)(v33 + 176);
      v125 = *(double *)(v33 + 184);
      v126 = *(double *)(v33 + 192);
      v127 = *(double *)(v33 + 200);
      v128 = *(double *)(v33 + 208);
      v129 = *(double *)(v33 + 216);
      v130 = v122
           * v122
           * (v123 * 3.0
            + v122
            * v122
            * (v124 * 5.0
             + v122
             * v122
             * (v125 * 7.0
              + v122
              * v122
              * (v126 * 9.0 + v122 * v122 * (v127 * 11.0 + v122 * v122 * (v128 * 13.0 + v122 * v122 * 15.0 * v129))))))
           + 1.0;
      v131 = v125 + v122 * v122 * (v126 + v122 * v122 * (v127 + v122 * v122 * (v128 + v122 * v122 * v129)));
      _Q6 = v338;
      v113 = v122 * (v122 * v122 * (v123 + v122 * v122 * (v124 + v122 * v122 * v131)) + 1.0) / v121;
      v114 = v130 / v120;
LABEL_135:
      v118 = vmulq_n_f64(_Q6, (__x * v114 - v113) / v334);
      v117 = -v114;
      v119 = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u64[0];
LABEL_136:
      *(float64x2_t *)v383 = vmulq_n_f64(_Q6, v113);
      *(_QWORD *)&v118.f64[1] = v119;
      v132 = vmulq_n_f64(v118, _Q6.f64[0]);
      v133 = v117 * _Q6.f64[0];
      v73 = v117 * *(double *)vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL).i64;
      v366.i64[1] = *(_QWORD *)&v132.f64[1];
      v368 = (int64x2_t)vmulq_laneq_f64(v118, _Q6, 1);
      v367 = v133;
      *(double *)v366.i64 = v113 + v132.f64[0];
      v72 = v113 + *(double *)&v368.i64[1];
LABEL_137:
      *(double *)&v368.i64[1] = v72;
      v369 = v73;
      goto LABEL_138;
    }
    if (v51 > 0xD)
    {
      if (v51 == 14)
        v74 = sub_20EB2498C((float64x2_t *)v383, (uint64_t)&v366, 0, (uint64_t)&v379, (double *)(v33 + 168), (*(double *)v33 + *(double *)(v33 + 32)) * 0.5);
      else
        v74 = sub_20EB3F050(v33, (float64x2_t *)v383, (uint64_t)&v366, &v379, 0);
LABEL_132:
      if ((v74 & 1) == 0)
        return 0;
      goto LABEL_138;
    }
    if (v51 != 13)
      return 0;
    if (__x < 0.00000001)
      return 0;
    *(float64x2_t *)v396 = vdivq_f64(v338, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&__x, 0));
    if (!sub_20EB295B8((float64x2_t *)v383, &v384, 0, (uint64_t)v396, (double *)(v33 + 168), (*(double *)v33 + *(double *)(v33 + 32)) * 0.5))return 0;
    _D0 = -v379.f64[1] / (v380 * v380);
    _V3.D[1] = v384.f64[1];
    _V4.D[1] = *(_QWORD *)&v385[8];
    v78.f64[0] = 0.0;
    v78.f64[1] = 1.0 / v380;
    __asm { FMLA            D7, D0, V3.D[1] }
    v367 = _D7;
    v366 = (int64x2_t)vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v380), v384.f64[0]), v78, v384, 1);
    __asm { FMLA            D2, D0, V4.D[1] }
    v369 = _D2;
    v368 = (int64x2_t)vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(1.0 / v380), *(double *)v385), v78, *(float64x2_t *)v385, 1);
LABEL_138:
    _V21.D[1] = v344.f64[1];
    _Q20 = v345;
    _D1 = v357;
    __asm { FMLA            D0, D1, V20.D[1] }
    v138 = _D0 + v62 * *(double *)v343.i64;
    _Q19.f64[1] = v348.f64[1];
    v140 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, v348.f64[0]), v350, v348, 1), v354, *(double *)v342.i64);
    __asm { FMLA            D0, D1, V19.D[1] }
    v142 = _D0 + v62 * *(double *)v342.i64;
    __asm { FMLA            D0, D1, V21.D[1] }
    v144 = _D0 + v62 * *(double *)v341.i64;
    v145 = (float64x2_t)vextq_s8((int8x16_t)v359, v346, 8uLL);
    v146 = (float64x2_t)vzip1q_s64((int64x2_t)v346, (int64x2_t)v359);
    _Q20.f64[1] = v348.f64[1];
    v147 = vmlsq_laneq_f64(vmulq_laneq_f64(v344, v359, 1), v359, v344, 1);
    v148 = vmlsq_f64(vmulq_f64(v146, (float64x2_t)vextq_s8((int8x16_t)v344, v341, 8uLL)), v145, (float64x2_t)vzip1q_s64((int64x2_t)v341, (int64x2_t)v344));
    v149 = (int8x16_t)vmlsq_f64(vmulq_f64(v359, (float64x2_t)vzip1q_s64((int64x2_t)v342, (int64x2_t)v348)), v146, v348);
    v150 = (int8x16_t)vmlsq_f64(vmulq_f64(v145, _Q20), v359, (float64x2_t)vextq_s8((int8x16_t)v345, v342, 8uLL));
    v151 = (int8x16_t)vmlsq_f64(vmulq_f64(v146, (float64x2_t)vextq_s8((int8x16_t)v345, v343, 8uLL)), v145, (float64x2_t)vzip1q_s64((int64x2_t)v343, (int64x2_t)v345));
    *(_QWORD *)&v152 = vextq_s8((int8x16_t)v148, (int8x16_t)v148, 8uLL).u64[0];
    v358 = v138;
    v360 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, v345.f64[0]), v350, v345, 1), v354, *(double *)v343.i64);
    v355 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v352, v344.f64[0]), v350, v344, 1), v354, *(double *)v341.i64);
    v356 = v140;
    v351 = v144;
    v353 = v142;
    v153 = vnegq_f64(v355);
    _Q19.f64[0] = -v144;
    v154.f64[0] = v367;
    v154.f64[1] = v369;
    _Q29 = vmulq_n_f64((float64x2_t)vzip1q_s64(v366, v368), v361);
    _Q28 = vmulq_n_f64((float64x2_t)vzip2q_s64(v366, v368), v361);
    _Q26 = vmulq_n_f64(v154, v361);
    _Q7 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q29, *(double *)v151.i64), _Q28, *(double *)vextq_s8(v150, v150, 8uLL).i64), _Q26, v148.f64[0]);
    _Q16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q29, *(double *)vextq_s8(v151, v151, 8uLL).i64), _Q28, *(double *)v149.i64), _Q26, v152);
    _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q29, *(double *)v150.i64), _Q28, *(double *)vextq_s8(v149, v149, 8uLL).i64), _Q26, v147.f64[0]);
    _Q1 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q29, -v360.f64[0]), _Q28, -v140.f64[0]), _Q26, v153.f64[0]);
    _Q2 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(_Q29, -v360.f64[1]), _Q28, -v140.f64[1]), _Q26, v153, 1);
    v347 = _Q29;
    v349 = _Q28;
    v362 = _Q26;
    _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q29, -v138), _Q28, -v142), _Q26, _Q19.f64[0]);
    v148.f64[1] = v152;
    _Q17 = vmulq_f64(v337, v148);
    *(_QWORD *)&v165 = *(_OWORD *)&vmulq_f64(v364, v147);
    *(_QWORD *)&v147.f64[0] = *(_OWORD *)&vmulq_f64(v364, _Q19);
    _Q5 = vmulq_f64(v337, v153);
    _Q20 = *(float64x2_t *)(v49 + 536);
    _Q25 = *(float64x2_t *)(v49 + 488);
    _Q18 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, *(double *)(v49 + 456)), _Q16, *(float64x2_t *)(v49 + 456), 1), _Q0, *(double *)(v49 + 472)), _Q1, *(float64x2_t *)(v49 + 472), 1), _Q2, _Q25.f64[0]), _Q3, _Q25, 1);
    _D22 = *(_QWORD *)(v49 + 464);
    __asm
    {
      FMLA            D19, D22, V17.D[1]
      FMLA            D19, D25, V5.D[1]
    }
    v171 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q7, *(double *)(v49 + 504)), _Q16, *(float64x2_t *)(v49 + 504), 1), _Q0, *(double *)(v49 + 520)), _Q1, *(float64x2_t *)(v49 + 520), 1), _Q2, _Q20.f64[0]), _Q3, _Q20, 1);
    _Q25.f64[0] = *(float64_t *)(v49 + 512);
    __asm
    {
      FMLA            D22, D25, V17.D[1]
      FMLA            D22, D20, V5.D[1]
    }
    _D22 = vmlad_n_f64(_D22, *(double *)(v49 + 544), v147.f64[0]);
    v175 = vmlaq_laneq_f64(vmulq_n_f64(_Q7, *(double *)(v49 + 552)), _Q16, *(float64x2_t *)(v49 + 552), 1);
    _D24 = *(_QWORD *)(v49 + 560);
    __asm { FMLA            D23, D24, V17.D[1] }
    v178 = vmlaq_laneq_f64(vmulq_n_f64(_Q7, *(double *)(v49 + 600)), _Q16, *(float64x2_t *)(v49 + 600), 1);
    _D27 = *(_QWORD *)(v49 + 608);
    __asm { FMLA            D25, D27, V17.D[1] }
    v180 = vmlaq_laneq_f64(vmulq_n_f64(_Q7, *(double *)(v49 + 648)), _Q16, *(float64x2_t *)(v49 + 648), 1);
    _Q29.f64[0] = *(float64_t *)(v49 + 656);
    __asm { FMLA            D28, D29, V17.D[1] }
    v181 = vmlaq_laneq_f64(vmulq_n_f64(_Q7, *(double *)(v49 + 696)), _Q16, *(float64x2_t *)(v49 + 696), 1);
    _Q26.f64[0] = *(float64_t *)(v49 + 704);
    __asm { FMLA            D30, D26, V17.D[1] }
    v183 = vmlaq_n_f64(vmulq_n_f64(_Q18, _Q7.f64[0]), v171, _Q16.f64[0]);
    v32.f64[0] = vmlad_n_f64(vmlad_n_f64(_Q19.f64[0], *(double *)(v49 + 496), v147.f64[0]) * _Q7.f64[0], _D22, _Q16.f64[0]);
    v184 = vmlaq_laneq_f64(vmulq_laneq_f64(_Q18, _Q7, 1), v171, _Q16, 1);
    __asm { FMLA            D7, D22, V16.D[1] }
    v185 = vmlaq_laneq_f64(vmulq_n_f64(_Q18, _Q17.f64[0]), v171, _Q17, 1);
    __asm { FMLA            D18, D22, V17.D[1] }
    _Q17 = *(float64x2_t *)(v49 + 584);
    v187 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v175, _Q0, *(double *)(v49 + 568)), _Q1, *(float64x2_t *)(v49 + 568), 1), _Q2, _Q17.f64[0]), _Q3, _Q17, 1);
    __asm { FMLA            D23, D17, V5.D[1] }
    _D23 = vmlad_n_f64(_D23, *(double *)(v49 + 592), v147.f64[0]);
    _Q17 = *(float64x2_t *)(v49 + 632);
    v191 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v178, _Q0, *(double *)(v49 + 616)), _Q1, *(float64x2_t *)(v49 + 616), 1), _Q2, _Q17.f64[0]), _Q3, _Q17, 1);
    __asm { FMLA            D25, D17, V5.D[1] }
    _Q25.f64[0] = vmlad_n_f64(_Q25.f64[0], *(double *)(v49 + 640), v147.f64[0]);
    _Q17 = *(float64x2_t *)(v49 + 680);
    v193 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v180, _Q0, *(double *)(v49 + 664)), _Q1, *(float64x2_t *)(v49 + 664), 1), _Q2, _Q17.f64[0]), _Q3, _Q17, 1);
    __asm { FMLA            D28, D17, V5.D[1] }
    _Q28.f64[0] = vmlad_n_f64(_Q28.f64[0], *(double *)(v49 + 688), v147.f64[0]);
    __asm { FMLA            D7, D23, V0.D[1] }
    v194 = vmlaq_laneq_f64(vmlaq_n_f64(v181, _Q0, *(double *)(v49 + 712)), _Q1, *(float64x2_t *)(v49 + 712), 1);
    v195 = vmlaq_n_f64(vmlaq_n_f64(v183, v187, _Q0.f64[0]), v191, _Q1.f64[0]);
    v32.f64[0] = vmlad_n_f64(vmlad_n_f64(v32.f64[0], _D23, _Q0.f64[0]), _Q25.f64[0], _Q1.f64[0]);
    v196 = vmlaq_laneq_f64(vmlaq_laneq_f64(v184, v187, _Q0, 1), v191, _Q1, 1);
    __asm { FMLA            D7, D25, V1.D[1] }
    _Q0 = *(float64x2_t *)(v49 + 728);
    __asm
    {
      FMLA            D7, D28, V2.D[1]
      FMLA            D18, D28, V5.D[1]
      FMLA            D30, D0, V5.D[1]
    }
    v199 = vmlaq_laneq_f64(vmlaq_n_f64(v194, _Q2, _Q0.f64[0]), _Q3, _Q0, 1);
    _D30 = vmlad_n_f64(_D30, *(double *)(v49 + 736), v147.f64[0]);
    v32.f64[0] = vmlad_n_f64(vmlad_n_f64(v32.f64[0], _Q28.f64[0], _Q2.f64[0]), _D30, _Q3.f64[0]);
    v201 = vmlaq_laneq_f64(vmlaq_laneq_f64(v196, v193, _Q2, 1), v199, _Q3, 1);
    __asm { FMLA            D7, D30, V3.D[1] }
    _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], _D30, v147.f64[0]);
    v202 = vaddq_f64(vmlaq_n_f64(vmlaq_n_f64(v195, v193, _Q2.f64[0]), v199, _Q3.f64[0]), (float64x2_t)xmmword_21030D320);
    __asm { FMOV            V2.2D, #1.0 }
    v384 = v202;
    *(float64x2_t *)&v385[8] = vaddq_f64(v201, (float64x2_t)xmmword_2102DD520);
    *(_QWORD *)v385 = *(_OWORD *)&vaddq_f64(v32, (float64x2_t)0);
    v386 = *(_OWORD *)&vaddq_f64(_Q7, (float64x2_t)0);
    v387 = vaddq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(v185, v187, v165), v191, _Q5.f64[0]), v193, _Q5, 1), v199, v147.f64[0]), (float64x2_t)0);
    v388 = *(_OWORD *)&vaddq_f64(_Q18, _Q2);
    sub_20E8BE424((uint64_t)v396);
    _Q4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v347, v360.f64[0]), v349, v356.f64[0]), v362, v355.f64[0]);
    _Q2 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v347, v360, 1), v349, v356, 1), v362, v355, 1);
    _Q0 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v347, v358), v349, v353), v362, v351);
    v207 = vmuld_lane_f64(v364.f64[0], v355, 1);
    *(_QWORD *)&_Q7.f64[0] = vextq_s8((int8x16_t)_Q4, (int8x16_t)_Q4, 8uLL).u64[0];
    v209.f64[0] = _Q4.f64[0];
    v209.f64[1] = _Q2.f64[0];
    *(_QWORD *)&_Q7.f64[1] = vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL).u64[0];
    _Q16.f64[0] = v364.f64[0] * v355.f64[0];
    _Q16.f64[1] = v207;
    _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v209, *(double *)v396), _Q7, *(float64x2_t *)v396, 1), _Q16, *(double *)&v396[16]);
    _D18 = *(_QWORD *)&v396[8];
    __asm { FMLA            D17, D18, V0.D[1] }
    v214 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v209, v397.f64[0]), _Q7, v397, 1), _Q16, *(double *)&v398);
    _D21 = v397.f64[1];
    __asm { FMLA            D19, D21, V0.D[1] }
    _D19 = _D19 + v364.f64[0] * v351 * *(double *)&v398;
    v218 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v209, v399.f64[0]), _Q7, v399, 1), _Q16, v400);
    _Q16.f64[0] = v399.f64[1];
    __asm { FMLA            D7, D16, V0.D[1] }
    _Q7.f64[0] = _Q7.f64[0] + v364.f64[0] * v351 * v400;
    v219 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q4.f64[0]), v214, _Q4, 1), v218, v364.f64[0] * v355.f64[0]);
    __asm { FMLA            D21, D19, V4.D[1] }
    _Q4.f64[0] = _D21 + _Q7.f64[0] * (v364.f64[0] * v355.f64[0]);
    v221 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q2.f64[0]), v214, _Q2, 1), v218, v207);
    __asm { FMLA            D21, D19, V2.D[1] }
    _Q2.f64[0] = _D21 + _Q7.f64[0] * v207;
    v223 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q5, _Q0.f64[0]), v214, _Q0, 1), v218, v364.f64[0] * v351);
    __asm { FMLA            D5, D19, V0.D[1] }
    _Q0.f64[0] = _Q5.f64[0] + _Q7.f64[0] * (v364.f64[0] * v351);
    v224 = vaddq_f64(v219, (float64x2_t)0);
    v219.f64[0] = v376[2].f64[1];
    v214.f64[0] = v378;
    v376[0] = vaddq_f64(v224, v376[0]);
    *(float64x2_t *)((char *)&v376[1] + 8) = vaddq_f64(vaddq_f64(v221, (float64x2_t)0), *(float64x2_t *)((char *)&v376[1] + 8));
    *(_QWORD *)&v376[1].f64[0] = *(_OWORD *)&vaddq_f64(vaddq_f64(_Q4, (float64x2_t)0), (float64x2_t)*(unint64_t *)&v376[1].f64[0]);
    *(_QWORD *)&v376[2].f64[1] = *(_OWORD *)&vaddq_f64(vaddq_f64(_Q2, (float64x2_t)0), v219);
    v377 = vaddq_f64(vaddq_f64(v223, (float64x2_t)0), v377);
    *(_QWORD *)&v378 = *(_OWORD *)&vaddq_f64(vaddq_f64(_Q0, (float64x2_t)0), v214);
    v10 += 32;
    if (v10 == v336)
      goto LABEL_142;
  }
  sub_20F34CD58(&v375);
  if (**(int **)(v375 + 56) > 4)
    return 0;
  v251 = *(unsigned __int8 *)(v375 + 72);
  v252 = *(_BYTE *)(v375 + 72) != 0;
  v253 = sub_20E8C31DC(v375, "OSLogSurrogateAppender", 1, 0);
  if (((v253 == 0) & ~v252) != 0)
    return 0;
  sub_20E863438((uint64_t)&v384);
  sub_20E86A980(v385, (uint64_t)"Fail to find poseRef via image id", 33);
  v365 = v251;
  if ((v393 & 0x10) != 0)
  {
    v256 = v392;
    if (*(_QWORD *)&v392 < *(_QWORD *)&v389)
    {
      v392 = v389;
      v256 = v389;
    }
    v257 = (const void **)&v388;
  }
  else
  {
    if ((v393 & 8) == 0)
    {
      v254 = 0;
      HIBYTE(v374) = 0;
      v255 = __dst;
      goto LABEL_167;
    }
    v257 = (const void **)&v386;
    v256 = v387.f64[1];
  }
  v258 = *v257;
  v254 = *(_QWORD *)&v256 - (_QWORD)*v257;
  if (v254 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v254 >= 0x17)
  {
    v259 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v254 | 7) != 0x17)
      v259 = v254 | 7;
    v260 = v259 + 1;
    v255 = (void **)operator new(v259 + 1);
    __dst[1] = (void *)v254;
    v374 = v260 | 0x8000000000000000;
    __dst[0] = v255;
    goto LABEL_166;
  }
  HIBYTE(v374) = LOBYTE(v256) - *(_BYTE *)v257;
  v255 = __dst;
  if (v254)
LABEL_166:
    memmove(v255, v258, v254);
LABEL_167:
  *((_BYTE *)v255 + v254) = 0;
  v366.i64[0] = (uint64_t)&v375;
  v366.u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v367 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
  v368.i32[0] = 4;
  v368.i64[1] = (uint64_t)"unknown file";
  LODWORD(v369) = 390;
  v371 = 0;
  v372 = 0;
  v370 = "unknown function";
  if (v374 >= 0)
    v261 = (const char *)__dst;
  else
    v261 = (const char *)__dst[0];
  v262 = *(_QWORD *)v366.i64[0];
  if (*(char *)(*(_QWORD *)v366.i64[0] + 39) < 0)
  {
    v264 = *(const char **)(v262 + 16);
    v263 = *(_QWORD *)(v262 + 24);
  }
  else
  {
    v263 = *(unsigned __int8 *)(*(_QWORD *)v366.i64[0] + 39);
    v264 = (const char *)(*(_QWORD *)v366.i64[0] + 16);
  }
  v363 = *(_QWORD *)v366.i64[0] + 16;
  v265 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v265 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v396);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v396);
    if (LOBYTE(v397.f64[0]) && (v396[23] & 0x80000000) != 0)
      operator delete(*(void **)v396);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v266 = byte_254A4A4F8;
  else
    v266 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v267 = byte_254A4A4F8[23];
  else
    v267 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v396 = os_log_create(v266, v264);
  v268 = &v396[8];
  if (v267 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v267 >= 0x17)
  {
    v269 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v267 | 7) != 0x17)
      v269 = v267 | 7;
    v270 = v269 + 1;
    v268 = operator new(v269 + 1);
    *(_QWORD *)&v396[16] = v267;
    *(_QWORD *)&v397.f64[0] = v270 | 0x8000000000000000;
    *(_QWORD *)&v396[8] = v268;
    goto LABEL_187;
  }
  HIBYTE(v397.f64[0]) = v267;
  if (v267)
LABEL_187:
    memmove(v268, v266, v267);
  v268[v267] = 0;
  LOBYTE(v397.f64[1]) = 1;
  v271 = COERCE_DOUBLE(&v398);
  if (v263 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v263 >= 0x17)
  {
    v272 = (v263 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v263 | 7) != 0x17)
      v272 = v263 | 7;
    v273 = v272 + 1;
    v271 = COERCE_DOUBLE(operator new(v272 + 1));
    *(_QWORD *)&v399.f64[0] = v263;
    *(_QWORD *)&v399.f64[1] = v273 | 0x8000000000000000;
    *(double *)&v398 = v271;
    goto LABEL_195;
  }
  HIBYTE(v399.f64[1]) = v263;
  if (v263)
LABEL_195:
    memmove(*(void **)&v271, v264, v263);
  *(_BYTE *)(*(_QWORD *)&v271 + v263) = 0;
  LOBYTE(v400) = 1;
  v274 = *(NSObject **)v396;
  if (SHIBYTE(v399.f64[1]) < 0)
    operator delete(v398);
  if (LOBYTE(v397.f64[1]) && SHIBYTE(v397.f64[0]) < 0)
    operator delete(*(void **)&v396[8]);
  if (*(_QWORD *)v396)
    os_release(*(void **)v396);
  if (v253 && *(_QWORD *)(v253 + 24))
  {
    v275 = _os_log_pack_size();
    v276 = operator new(v275, (std::align_val_t)8uLL);
    v277 = COERCE_DOUBLE(operator new());
    **(_QWORD **)&v277 = &off_24C9ABB80;
    *(_QWORD *)(*(_QWORD *)&v277 + 8) = 0;
    *(_QWORD *)(*(_QWORD *)&v277 + 16) = 0;
    *(_QWORD *)(*(_QWORD *)&v277 + 24) = v276;
    *(_QWORD *)&v379.f64[0] = v276;
    *(_QWORD *)&v379.f64[1] = v276;
    v382 = 0.0;
    v380 = v277;
    v381 = 0.0;
    v278 = strlen(v261);
    if (v278 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v279 = v278;
    if (v278 >= 0x17)
    {
      v283 = (v278 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v278 | 7) != 0x17)
        v283 = v278 | 7;
      v284 = v283 + 1;
      v280 = operator new(v283 + 1);
      *(_QWORD *)&v383[16] = v284 | 0x8000000000000000;
      *(_QWORD *)v383 = v280;
      *(_QWORD *)&v383[8] = v279;
    }
    else
    {
      v383[23] = v278;
      v280 = v383;
      if (!v278)
        goto LABEL_215;
    }
    memcpy(v280, v261, v279);
LABEL_215:
    v280[v279] = 0;
    v395[0] = *(_QWORD *)&v383[8];
    v285 = *(_QWORD *)v383;
    *(_QWORD *)((char *)v395 + 7) = *(_QWORD *)&v383[15];
    v286 = v383[23];
    v287 = COERCE_DOUBLE(operator new(0x38uLL));
    *(_QWORD *)(*(_QWORD *)&v287 + 8) = 0;
    *(_QWORD *)(*(_QWORD *)&v287 + 16) = 0;
    *(_QWORD *)(*(_QWORD *)&v287 + 24) = off_24C9ABC20;
    **(_QWORD **)&v287 = &off_24C9ABBD0;
    v288 = v395[0];
    *(_QWORD *)(*(_QWORD *)&v287 + 32) = v285;
    *(_QWORD *)(*(_QWORD *)&v287 + 40) = v288;
    *(_QWORD *)(*(_QWORD *)&v287 + 47) = *(_QWORD *)((char *)v395 + 7);
    *(_BYTE *)(*(_QWORD *)&v287 + 55) = v286;
    v395[0] = 0;
    *(_QWORD *)((char *)v395 + 7) = 0;
    v289 = *(std::__shared_weak_count **)&v382;
    *(_QWORD *)&v381 = *(_QWORD *)&v287 + 24;
    v382 = v287;
    if (v289)
    {
      p_shared_owners = (unint64_t *)&v289->__shared_owners_;
      do
        v291 = __ldaxr(p_shared_owners);
      while (__stlxr(v291 - 1, p_shared_owners));
      if (!v291)
      {
        ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
        std::__shared_weak_count::__release_weak(v289);
      }
    }
    *(float64x2_t *)v396 = v379;
    *(double *)&v292 = v381;
    *(double *)&v396[16] = v380;
    if (v380 != 0.0)
    {
      v293 = (unint64_t *)(*(_QWORD *)&v380 + 8);
      do
        v294 = __ldxr(v293);
      while (__stxr(v294 + 1, v293));
    }
    v295 = *(std::__shared_weak_count **)&v382;
    *(_QWORD *)&v397.f64[0] = v292;
    v397.f64[1] = v382;
    if (v382 == 0.0)
    {
      v398 = v292;
    }
    else
    {
      v296 = (unint64_t *)(*(_QWORD *)&v382 + 8);
      do
        v297 = __ldxr(v296);
      while (__stxr(v297 + 1, v296));
      v398 = v292;
      do
        v298 = __ldaxr(v296);
      while (__stlxr(v298 - 1, v296));
      if (!v298)
      {
        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
        std::__shared_weak_count::__release_weak(v295);
      }
    }
    v299 = *(std::__shared_weak_count **)&v380;
    if (v380 != 0.0)
    {
      v300 = (unint64_t *)(*(_QWORD *)&v380 + 8);
      do
        v301 = __ldaxr(v300);
      while (__stlxr(v301 - 1, v300));
      if (!v301)
      {
        ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
        std::__shared_weak_count::__release_weak(v299);
      }
    }
    v302 = *(_QWORD *)v396;
    if (v398[31] >= 0)
      v303 = v398 + 8;
    else
      v303 = (char *)*((_QWORD *)v398 + 1);
    v304 = _os_log_pack_fill();
    *(_DWORD *)v304 = 136315138;
    *(_QWORD *)(v304 + 4) = v303;
    v305 = operator new();
    v306 = *(unsigned __int8 *)(v262 + 39);
    v307 = v363;
    if ((v306 & 0x80u) != 0)
    {
      v307 = *(_QWORD *)(v262 + 16);
      v306 = *(_QWORD *)(v262 + 24);
    }
    *(_QWORD *)v305 = v302;
    *(_OWORD *)(v305 + 8) = *(_OWORD *)&v396[8];
    *(_QWORD *)&v396[8] = 0;
    *(_QWORD *)&v396[16] = 0;
    *(float64x2_t *)(v305 + 24) = v397;
    v397 = 0uLL;
    *(_QWORD *)(v305 + 40) = v307;
    *(_QWORD *)(v305 + 48) = v306;
    *(_BYTE *)(v305 + 56) = 16;
    *(_QWORD *)v383 = 0;
    *(_QWORD *)&v379.f64[0] = v305;
    (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v253 + 24) + 40))(*(_QWORD *)(v253 + 24), &v379);
    v308 = v379.f64[0];
    v379.f64[0] = 0.0;
    v282 = v365;
    if (v308 != 0.0)
    {
      v309 = *(std::__shared_weak_count **)(*(_QWORD *)&v308 + 32);
      if (v309)
      {
        v310 = (unint64_t *)&v309->__shared_owners_;
        do
          v311 = __ldaxr(v310);
        while (__stlxr(v311 - 1, v310));
        if (!v311)
        {
          ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
          std::__shared_weak_count::__release_weak(v309);
        }
      }
      v312 = *(std::__shared_weak_count **)(*(_QWORD *)&v308 + 16);
      if (v312)
      {
        v313 = (unint64_t *)&v312->__shared_owners_;
        do
          v314 = __ldaxr(v313);
        while (__stlxr(v314 - 1, v313));
        if (!v314)
        {
          ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
          std::__shared_weak_count::__release_weak(v312);
        }
      }
      MEMORY[0x212BC6398](*(_QWORD *)&v308, 0x10F0C40B62ED6C6);
      v315 = *(_QWORD *)v383;
      *(_QWORD *)v383 = 0;
      if (v315)
      {
        v316 = *(std::__shared_weak_count **)(v315 + 32);
        if (v316)
        {
          v317 = (unint64_t *)&v316->__shared_owners_;
          do
            v318 = __ldaxr(v317);
          while (__stlxr(v318 - 1, v317));
          if (!v318)
          {
            ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
            std::__shared_weak_count::__release_weak(v316);
          }
        }
        v319 = *(std::__shared_weak_count **)(v315 + 16);
        if (v319)
        {
          v320 = (unint64_t *)&v319->__shared_owners_;
          do
            v321 = __ldaxr(v320);
          while (__stlxr(v321 - 1, v320));
          if (!v321)
          {
            ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
            std::__shared_weak_count::__release_weak(v319);
          }
        }
        MEMORY[0x212BC6398](v315, 0x10F0C40B62ED6C6);
      }
    }
    v322 = v397.f64[1];
    if (*(_QWORD *)&v397.f64[1])
    {
      v323 = (unint64_t *)(*(_QWORD *)&v397.f64[1] + 8);
      do
        v324 = __ldaxr(v323);
      while (__stlxr(v324 - 1, v323));
      if (!v324)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v322 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v322));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v322);
      }
    }
    v325 = *(std::__shared_weak_count **)&v396[16];
    if (*(_QWORD *)&v396[16])
    {
      v326 = (unint64_t *)(*(_QWORD *)&v396[16] + 8);
      do
        v327 = __ldaxr(v326);
      while (__stlxr(v327 - 1, v326));
      if (!v327)
      {
        ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
        std::__shared_weak_count::__release_weak(v325);
      }
    }
  }
  else
  {
    os_log_type_enabled(v274, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v396 = 136315138;
    *(_QWORD *)&v396[4] = v261;
    v281 = (void *)_os_log_send_and_compose_impl();
    v282 = v365;
    if (v281)
      free(v281);
  }
  if (v282)
  {
    v328 = (const char *)__dst;
    if (v374 < 0)
      v328 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)&v366, "%s", v328);
    sub_20E863570((uint64_t)&v366);
  }
  sub_20E863570((uint64_t)&v366);
  v329 = v372;
  if (v372)
  {
    v330 = (unint64_t *)&v372->__shared_owners_;
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  if (SHIBYTE(v374) < 0)
    operator delete(__dst[0]);
  v384.f64[0] = *(float64_t *)MEMORY[0x24BEDB7F0];
  v332 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(float64_t *)((char *)v384.f64 + *(_QWORD *)(*(_QWORD *)&v384.f64[0] - 24)) = *(float64_t *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
  *(_QWORD *)v385 = v332;
  *(_QWORD *)&v385[8] = MEMORY[0x24BEDB848] + 16;
  if (v391 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v394);
  return 0;
}

void sub_20F34ED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  if (*(_BYTE *)(v66 - 216) && *(char *)(v66 - 217) < 0)
    operator delete(*(void **)(v66 - 240));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a51);
  if (a66 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&STACK[0x260]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F34EED8(float64x2_t *a1, float64x2_t *a2, uint64_t a3, float64x2_t *a4, uint64_t a5, double *a6, uint64_t a7, float64x2_t a8, float64_t a9, float64x2_t a10, double a11, float64x2_t a12)
{
  uint64_t result;
  double v16;
  unsigned int v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  int v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v69;
  double v75;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v87;
  float64x2_t v89;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  int8x16_t v98;
  float64x2_t v99;
  float64x2_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int8x16_t v106;
  float64x2_t v107;
  uint64_t v108;
  int8x16_t *v109;
  int32x4_t v110;
  int32x4_t v111;
  int8x16_t v112;
  unsigned int v113;
  float64x2_t v114;
  float64x2_t v115;
  int8x16_t v116;
  float64x2_t v117;
  uint64_t v118;
  double v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  simd_double2x2 v126;
  simd_double2x2 v127;
  int64x2_t v128;
  double v129;
  float64x2_t v130;
  double v131;
  int64x2_t v132;
  uint64_t v133;
  float64x2_t v134;
  double v135;
  int64x2_t v136;
  uint64_t v137;
  float64x2_t v138;
  double v139;
  float64x2_t v140;
  float64x2_t v141;

  if (*(_BYTE *)(a7 + 192))
    _ZF = *(_BYTE *)(a7 + 188) == 0;
  else
    _ZF = 1;
  if (_ZF)
    return 0;
  v16 = a8.f64[0];
  v23 = *(_DWORD *)(a5 + 992);
  if (v23 == -1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_48;
    }
    v23 = *(_DWORD *)(a5 + 992);
    if (v23 <= 7)
    {
LABEL_9:
      if (!v23)
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  else if (v23 <= 7)
  {
    goto LABEL_9;
  }
  if (v23 <= 0xB)
  {
LABEL_14:
    v25 = *a6;
    v24 = a6[1];
    v141.f64[0] = *(double *)(a5 + 88) + *(double *)(a5 + 72) * *a6 + *(double *)(a5 + 80) * v24;
LABEL_15:
    v141.f64[1] = v24 * *(double *)(a5 + 104) + *(double *)(a5 + 112);
LABEL_16:
    v26 = *(double *)a5;
    goto LABEL_17;
  }
  v25 = *a6;
  v24 = a6[1];
  v141.f64[0] = *(double *)(a5 + 88) + *(double *)(a5 + 72) * *a6 + *(double *)(a5 + 80) * v24;
  if (v23 < 0xE)
    goto LABEL_15;
  v141.f64[1] = v24 * *(double *)(a5 + 104) + *(double *)(a5 + 112);
  if (v23 != -1)
    goto LABEL_16;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_48:
    abort();
  }
  v113 = *(_DWORD *)(a5 + 992);
  if (v113 <= 7)
  {
    if (v113)
      goto LABEL_16;
LABEL_10:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  if (v113 < 0xF)
    goto LABEL_16;
  v26 = *(double *)a5;
  if (v113 == -1)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      if (!*(_DWORD *)(a5 + 992))
        goto LABEL_10;
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_17:
  v27 = (v26 + *(double *)(a5 + 32)) * 0.5;
  a10.f64[0] = 1.0 / v27;
  if (v27 == 0.0)
    v28 = 1.0;
  else
    v28 = 1.0 / v27;
  a8.f64[0] = v28 * v16;
  if (*(_BYTE *)(a7 + 192))
    v29 = a7 + 40;
  else
    v29 = 0;
  v30 = sub_20FD34A2C(&v140, (uint64_t)&v136, (uint64_t)&v132, (uint64_t)&v128, &v141, (uint64_t)a2, a2 + 9, (float64x2_t *)(v29 + 8), a8, 1.0, a10, v25, a12, a3, a4, a5, 0);
  result = 0;
  if (v30)
  {
    *(_QWORD *)&v32.f64[0] = vdupq_lane_s64(v136.i64[0], 0).u64[0];
    v32.f64[1] = v138.f64[0];
    *(_QWORD *)&v33.f64[0] = vdupq_laneq_s64(v136, 1).u64[0];
    v33.f64[1] = v138.f64[1];
    *(_QWORD *)&v34.f64[0] = vdupq_lane_s64(v137, 0).u64[0];
    v34.f64[1] = v139;
    v35 = vmlaq_laneq_f64(vmulq_n_f64(v32, a1->f64[0]), v33, *a1, 1);
    v36 = vmlaq_laneq_f64(vmulq_n_f64(v32, a1[3].f64[0]), v33, a1[3], 1);
    v37 = vmlaq_laneq_f64(vmulq_n_f64(v32, a1[6].f64[0]), v33, a1[6], 1);
    v38 = vmlaq_laneq_f64(vmulq_n_f64(v32, a1[9].f64[0]), v33, a1[9], 1);
    *(_QWORD *)&v39.f64[0] = vdupq_lane_s64(v132.i64[0], 0).u64[0];
    v39.f64[1] = v134.f64[0];
    *(_QWORD *)&v40.f64[0] = vdupq_laneq_s64(v132, 1).u64[0];
    v40.f64[1] = v134.f64[1];
    v41 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, a1[12].f64[0]), v33, a1[12], 1), v34, a1[13].f64[0]), v39, a1[13], 1);
    v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v32, a1[15].f64[0]), v33, a1[15], 1), v34, a1[16].f64[0]), v39, a1[16], 1);
    *(_QWORD *)&v43.f64[0] = vdupq_lane_s64(v133, 0).u64[0];
    v43.f64[1] = v135;
    v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v35, v34, a1[1].f64[0]), v39, a1[1], 1), v40, a1[2].f64[0]), v43, a1[2], 1);
    v45 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v36, v34, a1[4].f64[0]), v39, a1[4], 1), v40, a1[5].f64[0]), v43, a1[5], 1);
    v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v37, v34, a1[7].f64[0]), v39, a1[7], 1), v40, a1[8].f64[0]), v43, a1[8], 1);
    v47 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v38, v34, a1[10].f64[0]), v39, a1[10], 1), v40, a1[11].f64[0]), v43, a1[11], 1);
    if (*(_BYTE *)(a7 + 192))
      v48 = a7 + 40;
    else
      v48 = 0;
    v49 = vmlaq_laneq_f64(vmlaq_n_f64(v41, v40, a1[14].f64[0]), v43, a1[14], 1);
    v31.f64[0] = *(float *)(v48 + 120);
    v50 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v40, a1[17].f64[0]), v43, a1[17], 1);
    v51 = vmlaq_laneq_f64(vmulq_n_f64(v44, *(double *)v136.i64), v45, (float64x2_t)v136, 1);
    v43.f64[0] = *(float *)(v48 + 132);
    v52 = vmlaq_laneq_f64(vmulq_n_f64(v44, v138.f64[0]), v45, v138, 1);
    v45.f64[0] = *(float *)(v48 + 144);
    *(_QWORD *)&v53.f64[0] = vdupq_lane_s64(v128.i64[0], 0).u64[0];
    v53.f64[1] = v130.f64[0];
    v54 = (float64x2_t)vdupq_laneq_s64(v128, 1);
    v115 = v54;
    v54.f64[1] = v130.f64[1];
    v124 = vcvtq_f64_f32(*(float32x2_t *)(v48 + 124));
    v125 = vcvtq_f64_f32(*(float32x2_t *)(v48 + 112));
    v55 = vmlaq_laneq_f64(vmulq_n_f64(v53, v125.f64[0]), v54, v125, 1);
    v56 = vmlaq_laneq_f64(vmulq_n_f64(v53, v124.f64[0]), v54, v124, 1);
    v121 = vcvtq_f64_f32(*(float32x2_t *)(v48 + 136));
    v122 = v43;
    v57 = vmlaq_laneq_f64(vmulq_n_f64(v53, v121.f64[0]), v54, v121, 1);
    v114 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v129, 0);
    v54.f64[0] = v114.f64[0];
    v54.f64[1] = v131;
    v123 = v31;
    v58 = vmlaq_n_f64(v55, v54, v31.f64[0]);
    v59 = vmlaq_n_f64(v56, v54, v43.f64[0]);
    v119 = v129;
    v120 = v45;
    v60 = vmlaq_n_f64(v57, v54, v45.f64[0]);
    v116 = (int8x16_t)v130;
    v117 = (float64x2_t)v128;
    v61 = vmlaq_laneq_f64(vmulq_n_f64(v58, *(double *)v128.i64), v59, (float64x2_t)v128, 1);
    *(double *)&v118 = v131;
    v62 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v58, v130.f64[0]), v59, v130, 1), v60, v131);
    v63 = vaddq_f64(vmlaq_n_f64(v61, v60, v129), vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(v51, v46, *(double *)&v137), v47, *(double *)v132.i64), v49, (float64x2_t)v132, 1), v50, *(double *)&v133));
    v127.columns[0].f64[1] = v63.f64[1];
    v64 = vaddq_f64(v62, vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(v52, v46, v139), v47, v134.f64[0]), v49, v134, 1), v50, v135));
    v63.f64[1] = v64.f64[1];
    v127.columns[1].f64[0] = v64.f64[0];
    __asm { FMOV            V1.2D, #1.0 }
    v69 = vaddq_f64(v63, _Q1);
    v127.columns[1].f64[1] = v69.f64[1];
    v127.columns[0].f64[0] = v69.f64[0];
    sub_20E8BE3B0(&v127, &v126);
    _V3.D[1] = v126.columns[0].f64[1];
    _V17.D[1] = v126.columns[1].f64[1];
    _V0.D[1] = v140.f64[1];
    _Q1 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v126.columns[0], v140.f64[0]), (float64x2_t)v126.columns[1], v140, 1);
    _Q2 = vmulq_f64(v140, _Q1);
    _Q1.f64[0] = _Q1.f64[1];
    __asm { FMLA            D2, D1, V0.D[1] }
    if (_Q2.f64[0] <= a9)
    {
      v75 = *(double *)vextq_s8(v116, v116, 8uLL).i64;
      _V29.D[1] = v124.f64[1];
      _V28.D[1] = v125.f64[1];
      _Q20 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v125, 1);
      _Q7 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v124, 1);
      _V8.D[1] = v121.f64[1];
      _Q5 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v121, 1);
      v82 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v116, 1);
      v83 = (float64x2_t)vdupq_lane_s64(v118, 0);
      v84 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v125, v117.f64[0]), v115, v124), v114, v121);
      v85 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v125, *(double *)v116.i64), v82, v124), v83, v121);
      _D27 = v123.f64[0] * *(double *)v116.i64 + v122.f64[0] * v75 + v120.f64[0] * *(double *)&v118;
      v87 = vmlaq_laneq_f64(vmulq_n_f64(v84, v126.columns[0].f64[0]), v85, (float64x2_t)v126.columns[0], 1);
      __asm { FMLA            D2, D27, V3.D[1] }
      v89 = vmlaq_laneq_f64(vmulq_n_f64(v84, v126.columns[1].f64[0]), v85, (float64x2_t)v126.columns[1], 1);
      __asm { FMLA            D4, D27, V17.D[1] }
      v91 = vmlaq_f64(vmulq_n_f64(v87, v117.f64[0]), (float64x2_t)vdupq_lane_s64(v116.i64[0], 0), v89);
      v92 = vmlaq_f64(vmulq_laneq_f64(v87, v117, 1), v82, v89);
      _D18 = _D2 * *(double *)vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).i64 + _D4 * v75;
      v94 = vmlaq_f64(vmulq_n_f64(v87, v119), v83, v89);
      v82.f64[0] = _D2 * v119 + _D4 * *(double *)&v118;
      v95 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v91, v125.f64[0]), _Q20, v92), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v123.f64[0], 0), v94);
      __asm { FMLA            D20, D18, V28.D[1] }
      _Q20.f64[0] = _Q20.f64[0] + v82.f64[0] * v123.f64[0];
      v96 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v91, v124.f64[0]), _Q7, v92), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v122.f64[0], 0), v94);
      __asm { FMLA            D7, D18, V29.D[1] }
      _Q7.f64[0] = _Q7.f64[0] + v82.f64[0] * v122.f64[0];
      v97 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v91, v121.f64[0]), _Q5, v92), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v120.f64[0], 0), v94);
      __asm { FMLA            D5, D18, V8.D[1] }
      _Q5.f64[0] = _Q5.f64[0] + v82.f64[0] * v120.f64[0];
      v103 = (int8x16_t)vsubq_f64(v122, _Q7);
      v98 = (int8x16_t)vsubq_f64(v124, v96);
      v94.f64[0] = vsubq_f64(v120, _Q5).f64[0];
      v99 = vsubq_f64(v121, v97);
      v100 = (float64x2_t)vzip1q_s64((int64x2_t)vsubq_f64(v123, _Q20), (int64x2_t)v98);
      *(float32x2_t *)&_Q20.f64[0] = vcvt_f32_f64(vsubq_f64(v125, v95));
      v101 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)&_Q20.f64[0], v100);
      *(float32x2_t *)&v100.f64[0] = vcvt_f32_f64(v100);
      *(_QWORD *)&v99.f64[1] = vdupq_laneq_s64((int64x2_t)v99, 1).u64[0];
      *(float32x2_t *)v98.i8 = vcvt_f32_f64((float64x2_t)vextq_s8(v98, v103, 8uLL));
      v102 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)v98.i8, v99);
      *(float32x2_t *)&v99.f64[0] = vcvt_f32_f64(v99);
      *(float *)v103.i32 = v94.f64[0];
      v104 = (float32x4_t)v102;
      v104.i32[2] = HIDWORD(v100.f64[0]);
      LODWORD(v99.f64[1]) = v103.i32[0];
      v105 = (float32x4_t)vextq_s8(v101, v102, 8uLL);
      v105.i32[0] = v98.i32[1];
      v106 = (int8x16_t)vmlsq_f32(vmulq_f32(v104, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), (int8x16_t)v99, 0xCuLL)), v105, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL), (int8x16_t)v99, 8uLL));
      if (vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&_Q20.f64[0], *(float32x2_t *)v106.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.i8, 1), *(float32x2_t *)&_Q20.f64[0], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL), *(float32x2_t *)&v100.f64[0]).f32[0] > 0.0)
      {
        v107 = vmlsq_laneq_f64(vmulq_n_f64(v87, vnegq_f64(v140).f64[0]), v89, v140, 1);
        __asm { FMLS            D2, D4, V0.D[1] }
        if (*(_BYTE *)(a7 + 192))
          v108 = a7 + 40;
        else
          v108 = 0;
        v89.f64[0] = *(float64_t *)(v108 + 24);
        *(float64x2_t *)(v108 + 8) = vaddq_f64(v107, *(float64x2_t *)(v108 + 8));
        *(_QWORD *)(v108 + 24) = *(_OWORD *)&vaddq_f64(_Q2, v89);
        if (*(_BYTE *)(a7 + 192))
          v109 = (int8x16_t *)(a7 + 40);
        else
          v109 = 0;
        v109[7] = v101;
        v109[8] = v102;
        v109[9].i32[0] = v103.i32[0];
        v110 = (int32x4_t)vextq_s8(v101, v102, 0xCuLL);
        v111 = (int32x4_t)vextq_s8(v102, v103, 8uLL);
        v112 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v110, (int8x16_t)v110, 0xCuLL), (int8x16_t)v110, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v111, v111), (int8x16_t)v111, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v110, v110), (int8x16_t)v110, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v111, (int8x16_t)v111, 0xCuLL), (int8x16_t)v111, 8uLL));
        v109[9].i8[4] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v101.i8, *(float32x2_t *)v112.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.i8, 1), *(float32x2_t *)v101.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)).f32[0] > 0.0;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_20F34F644(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const char *v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  std::__shared_weak_count_vtbl *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  size_t v64;
  const char *v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  const char *v68;
  size_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  size_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  void *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  std::chrono::steady_clock::time_point v115;
  uint64_t v116;
  size_t v117;
  const char *v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  const char *v121;
  size_t v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  void **v126;
  NSObject *v127;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  std::__shared_weak_count_vtbl *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  void *v162;
  std::chrono::steady_clock::time_point v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  int v167;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  const char *v180;
  size_t v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  const char *v184;
  size_t v185;
  _BYTE *v186;
  uint64_t v187;
  uint64_t v188;
  void **v189;
  NSObject *v190;
  uint64_t v191;
  uint64_t v192;
  size_t v193;
  std::__shared_weak_count_vtbl *v194;
  std::__shared_weak_count *v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  const char *v204;
  void *v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  void *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  int v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v241;
  uint64_t v242;
  size_t v243;
  const char *v244;
  unsigned __int8 v245;
  unsigned __int8 v246;
  const char *v247;
  size_t v248;
  _BYTE *v249;
  uint64_t v250;
  uint64_t v251;
  void **v252;
  NSObject *v253;
  uint64_t v254;
  uint64_t v255;
  size_t v256;
  std::__shared_weak_count_vtbl *v257;
  std::__shared_weak_count *v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  void *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  _QWORD *v291;
  _QWORD *v292;
  _QWORD *v293;
  unint64_t v294;
  uint64_t *v295;
  unint64_t v296;
  unsigned int v297;
  _QWORD *v298;
  unint64_t v299;
  _QWORD *v300;
  _QWORD *v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t *v305;
  int8x8_t v306;
  int v307;
  unsigned int v308;
  unint64_t v309;
  uint8x8_t v310;
  unint64_t v311;
  int8x8_t **v312;
  int8x8_t *v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  int8x8_t v317;
  int8x8_t v318;
  int8x8_t v319;
  uint8x8_t v320;
  unint64_t v321;
  int8x8_t *v322;
  uint64_t **v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  _QWORD *v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  _QWORD *v332;
  _QWORD *v333;
  uint64_t *v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  _QWORD *v338;
  int v339;
  unint64_t v340;
  unint64_t v341;
  std::chrono::steady_clock::time_point v343;
  uint64_t v344;
  size_t v345;
  const char *v346;
  unsigned __int8 v347;
  unsigned __int8 v348;
  const char *v349;
  size_t v350;
  _BYTE *v351;
  uint64_t v352;
  uint64_t v353;
  void **v354;
  NSObject *v355;
  uint64_t v356;
  uint64_t v357;
  size_t v358;
  std::__shared_weak_count_vtbl *v359;
  std::__shared_weak_count *v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  void *v390;
  std::chrono::steady_clock::time_point v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  int v395;
  unint64_t v396;
  unint64_t v397;
  _QWORD *v399;
  _QWORD *v400;
  _QWORD *v401;
  _QWORD *v402;
  uint64_t v403;
  _QWORD *v404;
  _QWORD *v405;
  _QWORD *v406;
  uint64_t v407;
  size_t v408;
  const char *v409;
  unsigned __int8 v410;
  unsigned __int8 v411;
  const char *v412;
  size_t v413;
  _BYTE *v414;
  uint64_t v415;
  uint64_t v416;
  void **v417;
  NSObject *v418;
  uint64_t v419;
  uint64_t v420;
  size_t v421;
  std::__shared_weak_count_vtbl *v422;
  std::__shared_weak_count *v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  uint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  std::__shared_weak_count *v444;
  unint64_t *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  void *v453;
  _QWORD *v454;
  _QWORD *v455;
  _QWORD *v456;
  _QWORD *v457;
  uint64_t v458;
  _QWORD *v459;
  _QWORD *v460;
  _QWORD *v461;
  std::__shared_weak_count *v462;
  unint64_t *v463;
  unint64_t v464;
  int v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v469;
  uint64_t v470;
  size_t v471;
  const char *v472;
  unsigned __int8 v473;
  unsigned __int8 v474;
  const char *v475;
  size_t v476;
  _BYTE *v477;
  uint64_t v478;
  uint64_t v479;
  void **v480;
  NSObject *v481;
  uint64_t v482;
  uint64_t v483;
  size_t v484;
  std::__shared_weak_count_vtbl *v485;
  std::__shared_weak_count *v486;
  std::__shared_weak_count *v487;
  unint64_t *v488;
  unint64_t v489;
  unint64_t v490;
  uint64_t v491;
  char *v492;
  uint64_t v493;
  uint64_t v494;
  void *v495;
  std::__shared_weak_count *v496;
  unint64_t *v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  uint64_t v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  void *v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  char *v521;
  _QWORD *v522;
  _QWORD *v523;
  _DWORD *v524;
  _QWORD *v525;
  unint64_t v526;
  uint64_t v527;
  char *v528;
  size_t v529;
  char *v530;
  _QWORD *v531;
  _QWORD *v532;
  _QWORD *v533;
  double v534;
  double v535;
  double v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  float64x2_t v541;
  double v542;
  float64x2_t v543;
  unint64_t v548;
  unint64_t v549;
  uint64_t v550;
  __int32 *v551;
  __int32 *v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  _QWORD *v557;
  _QWORD *v558;
  unint64_t v559;
  uint64_t v560;
  char *v561;
  unint64_t v562;
  unint64_t v563;
  uint64_t v564;
  unint64_t v565;
  uint64_t i;
  _QWORD *v567;
  uint64_t *v568;
  char *v569;
  unint64_t v570;
  unsigned int v571;
  _QWORD *v572;
  unint64_t v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t *v576;
  uint64_t *v577;
  int8x8_t v578;
  int v579;
  unsigned int v580;
  unint64_t v581;
  uint8x8_t v582;
  unint64_t v583;
  int8x8_t **v584;
  int8x8_t *v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  int8x8_t v589;
  int8x8_t v590;
  int8x8_t v591;
  uint8x8_t v592;
  unint64_t v593;
  int8x8_t *v594;
  uint64_t **v595;
  uint64_t *v596;
  uint64_t v597;
  unint64_t v598;
  uint64_t v599;
  _QWORD *v600;
  std::__shared_weak_count *v601;
  unint64_t *v602;
  unint64_t v603;
  _QWORD *v604;
  _QWORD *v605;
  _QWORD *v606;
  uint64_t *v607;
  std::__shared_weak_count *v608;
  unint64_t *v609;
  unint64_t v610;
  int v611;
  unint64_t v612;
  unint64_t v613;
  std::chrono::steady_clock::time_point v614;
  uint64_t v615;
  size_t v616;
  const char *v617;
  unsigned __int8 v618;
  unsigned __int8 v619;
  const char *v620;
  size_t v621;
  _BYTE *v622;
  uint64_t v623;
  uint64_t v624;
  void **v625;
  NSObject *v626;
  uint64_t v627;
  uint64_t v628;
  size_t v629;
  std::__shared_weak_count_vtbl *v630;
  std::__shared_weak_count *v631;
  std::__shared_weak_count *v632;
  unint64_t *v633;
  unint64_t v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  char *v638;
  uint64_t v639;
  uint64_t v640;
  void *v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  uint64_t v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  std::__shared_weak_count *v652;
  unint64_t *v653;
  unint64_t v654;
  std::__shared_weak_count *v655;
  unint64_t *v656;
  unint64_t v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  void *v661;
  std::chrono::steady_clock::time_point v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  int v666;
  unint64_t v667;
  unint64_t v668;
  _QWORD *v670;
  _QWORD *v671;
  _QWORD *v672;
  _QWORD *v673;
  uint64_t v674;
  _QWORD *v675;
  _QWORD *v676;
  _QWORD *v677;
  uint64_t v678;
  const char *v679;
  size_t v680;
  unsigned __int8 v681;
  unsigned __int8 v682;
  const char *v683;
  size_t v684;
  _BYTE *v685;
  uint64_t v686;
  uint64_t v687;
  void **v688;
  NSObject *v689;
  uint64_t v690;
  uint64_t v691;
  size_t v692;
  std::__shared_weak_count_vtbl *v693;
  std::__shared_weak_count *v694;
  std::__shared_weak_count *v695;
  unint64_t *v696;
  unint64_t v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  char *v701;
  uint64_t v702;
  const char *v703;
  void *v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  unint64_t v707;
  std::__shared_weak_count *v708;
  unint64_t *v709;
  unint64_t v710;
  uint64_t v711;
  std::__shared_weak_count *v712;
  unint64_t *v713;
  unint64_t v714;
  std::__shared_weak_count *v715;
  unint64_t *v716;
  unint64_t v717;
  std::__shared_weak_count *v718;
  unint64_t *v719;
  unint64_t v720;
  std::__shared_weak_count *v721;
  unint64_t *v722;
  unint64_t v723;
  void *v724;
  _QWORD *v725;
  _QWORD *v726;
  _QWORD *v727;
  _QWORD *v728;
  uint64_t v729;
  _QWORD *v730;
  _QWORD *v731;
  _QWORD *v732;
  std::__shared_weak_count *v733;
  unint64_t *v734;
  unint64_t v735;
  int v736;
  unint64_t v737;
  unint64_t v738;
  uint64_t v740;
  uint64_t v741;
  size_t v742;
  const char *v743;
  unsigned __int8 v744;
  unsigned __int8 v745;
  const char *v746;
  size_t v747;
  _BYTE *v748;
  uint64_t v749;
  uint64_t v750;
  void **v751;
  NSObject *v752;
  uint64_t v753;
  uint64_t v754;
  size_t v755;
  std::__shared_weak_count_vtbl *v756;
  std::__shared_weak_count *v757;
  std::__shared_weak_count *v758;
  unint64_t *v759;
  unint64_t v760;
  unint64_t v761;
  uint64_t v762;
  char *v763;
  uint64_t v764;
  uint64_t v765;
  void *v766;
  std::__shared_weak_count *v767;
  unint64_t *v768;
  unint64_t v769;
  std::__shared_weak_count *v770;
  unint64_t *v771;
  unint64_t v772;
  uint64_t v773;
  std::__shared_weak_count *v774;
  unint64_t *v775;
  unint64_t v776;
  std::__shared_weak_count *v777;
  unint64_t *v778;
  unint64_t v779;
  std::__shared_weak_count *v780;
  unint64_t *v781;
  unint64_t v782;
  std::__shared_weak_count *v783;
  unint64_t *v784;
  unint64_t v785;
  void *v786;
  std::__shared_weak_count *v787;
  unint64_t *v788;
  unint64_t v789;
  int v790;
  unint64_t v791;
  unint64_t v792;
  std::chrono::steady_clock::time_point v793;
  uint64_t v794;
  size_t v795;
  const char *v796;
  unsigned __int8 v797;
  unsigned __int8 v798;
  const char *v799;
  size_t v800;
  _BYTE *v801;
  uint64_t v802;
  uint64_t v803;
  void **v804;
  NSObject *v805;
  uint64_t v806;
  uint64_t v807;
  size_t v808;
  std::__shared_weak_count_vtbl *v809;
  std::__shared_weak_count *v810;
  std::__shared_weak_count *v811;
  unint64_t *v812;
  unint64_t v813;
  unint64_t v814;
  uint64_t v815;
  uint64_t v816;
  char *v817;
  uint64_t v818;
  uint64_t v819;
  void *v820;
  std::__shared_weak_count *v821;
  unint64_t *v822;
  unint64_t v823;
  std::__shared_weak_count *v824;
  unint64_t *v825;
  unint64_t v826;
  uint64_t v827;
  std::__shared_weak_count *v828;
  unint64_t *v829;
  unint64_t v830;
  std::__shared_weak_count *v831;
  unint64_t *v832;
  unint64_t v833;
  std::__shared_weak_count *v834;
  unint64_t *v835;
  unint64_t v836;
  std::__shared_weak_count *v837;
  unint64_t *v838;
  unint64_t v839;
  void *v840;
  std::chrono::steady_clock::time_point v841;
  std::__shared_weak_count *v842;
  unint64_t *v843;
  unint64_t v844;
  int v845;
  unint64_t v846;
  unint64_t v847;
  _QWORD *v849;
  _QWORD *v850;
  _QWORD *v851;
  _QWORD *v852;
  uint64_t v853;
  _QWORD *v854;
  _QWORD *v855;
  _QWORD *v856;
  uint64_t v857;
  const char *v858;
  size_t v859;
  unsigned __int8 v860;
  unsigned __int8 v861;
  const char *v862;
  size_t v863;
  _BYTE *v864;
  uint64_t v865;
  uint64_t v866;
  void **v867;
  NSObject *v868;
  uint64_t v869;
  uint64_t v870;
  size_t v871;
  std::__shared_weak_count_vtbl *v872;
  std::__shared_weak_count *v873;
  std::__shared_weak_count *v874;
  unint64_t *v875;
  unint64_t v876;
  unint64_t v877;
  uint64_t v878;
  uint64_t v879;
  char *v880;
  uint64_t v881;
  const char *v882;
  void *v883;
  std::__shared_weak_count *v884;
  unint64_t *v885;
  unint64_t v886;
  std::__shared_weak_count *v887;
  unint64_t *v888;
  unint64_t v889;
  uint64_t v890;
  std::__shared_weak_count *v891;
  unint64_t *v892;
  unint64_t v893;
  std::__shared_weak_count *v894;
  unint64_t *v895;
  unint64_t v896;
  std::__shared_weak_count *v897;
  unint64_t *v898;
  unint64_t v899;
  std::__shared_weak_count *v900;
  unint64_t *v901;
  unint64_t v902;
  void *v903;
  _QWORD *v904;
  _QWORD *v905;
  _QWORD *v906;
  _QWORD *v907;
  uint64_t v908;
  _QWORD *v909;
  _QWORD *v910;
  _QWORD *v911;
  std::__shared_weak_count *v912;
  unint64_t *v913;
  unint64_t v914;
  int *v915;
  uint64_t v916;
  int v917;
  unint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  size_t v922;
  const char *v923;
  int *v924;
  int *v925;
  unsigned __int8 v926;
  const char *v927;
  size_t v928;
  _BYTE *v929;
  uint64_t v930;
  uint64_t v931;
  void **v932;
  NSObject *v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  int v937;
  size_t v938;
  std::__shared_weak_count_vtbl *v939;
  std::__shared_weak_count *v940;
  std::__shared_weak_count *v941;
  unint64_t *v942;
  unint64_t v943;
  unint64_t v944;
  uint64_t v945;
  uint64_t v946;
  char *v947;
  uint64_t v948;
  uint64_t v949;
  void *v950;
  std::__shared_weak_count *v951;
  unint64_t *v952;
  unint64_t v953;
  std::__shared_weak_count *v954;
  unint64_t *v955;
  unint64_t v956;
  uint64_t v957;
  std::__shared_weak_count *v958;
  unint64_t *v959;
  unint64_t v960;
  std::__shared_weak_count *v961;
  unint64_t *v962;
  unint64_t v963;
  std::__shared_weak_count *v964;
  unint64_t *v965;
  unint64_t v966;
  std::__shared_weak_count *v967;
  unint64_t *v968;
  unint64_t v969;
  void *v970;
  std::__shared_weak_count *v971;
  unint64_t *v972;
  unint64_t v973;
  int v974;
  unint64_t v975;
  unint64_t v976;
  int *v977;
  uint64_t v978;
  int *v979;
  int *v980;
  std::chrono::steady_clock::time_point v981;
  uint64_t v982;
  size_t v983;
  const char *v984;
  unsigned __int8 v985;
  unsigned __int8 v986;
  const char *v987;
  size_t v988;
  _BYTE *v989;
  uint64_t v990;
  uint64_t v991;
  void **v992;
  NSObject *v993;
  uint64_t v994;
  uint64_t v995;
  size_t v996;
  std::__shared_weak_count_vtbl *v997;
  std::__shared_weak_count *v998;
  std::__shared_weak_count *v999;
  unint64_t *v1000;
  unint64_t v1001;
  unint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  char *v1005;
  uint64_t v1006;
  uint64_t v1007;
  void *v1008;
  std::__shared_weak_count *v1009;
  unint64_t *v1010;
  unint64_t v1011;
  std::__shared_weak_count *v1012;
  unint64_t *v1013;
  unint64_t v1014;
  uint64_t v1015;
  std::__shared_weak_count *v1016;
  unint64_t *v1017;
  unint64_t v1018;
  std::__shared_weak_count *v1019;
  unint64_t *v1020;
  unint64_t v1021;
  std::__shared_weak_count *v1022;
  unint64_t *v1023;
  unint64_t v1024;
  std::__shared_weak_count *v1025;
  unint64_t *v1026;
  unint64_t v1027;
  void *v1028;
  std::chrono::steady_clock::time_point v1029;
  std::__shared_weak_count *v1030;
  unint64_t *v1031;
  unint64_t v1032;
  int v1033;
  unint64_t v1034;
  unint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  size_t v1038;
  const char *v1039;
  unsigned __int8 v1040;
  unsigned __int8 v1041;
  const char *v1042;
  size_t v1043;
  _BYTE *v1044;
  uint64_t v1045;
  uint64_t v1046;
  void **v1047;
  NSObject *v1048;
  uint64_t v1049;
  uint64_t v1050;
  size_t v1051;
  std::__shared_weak_count_vtbl *v1052;
  std::__shared_weak_count *v1053;
  std::__shared_weak_count *v1054;
  unint64_t *v1055;
  unint64_t v1056;
  unint64_t v1057;
  uint64_t v1058;
  char *v1059;
  uint64_t v1060;
  uint64_t v1061;
  void *v1062;
  std::__shared_weak_count *v1063;
  unint64_t *v1064;
  unint64_t v1065;
  std::__shared_weak_count *v1066;
  unint64_t *v1067;
  unint64_t v1068;
  uint64_t v1069;
  std::__shared_weak_count *v1070;
  unint64_t *v1071;
  unint64_t v1072;
  std::__shared_weak_count *v1073;
  unint64_t *v1074;
  unint64_t v1075;
  std::__shared_weak_count *v1076;
  unint64_t *v1077;
  unint64_t v1078;
  std::__shared_weak_count *v1079;
  unint64_t *v1080;
  unint64_t v1081;
  void *v1082;
  std::__shared_weak_count *v1083;
  unint64_t *v1084;
  unint64_t v1085;
  int v1086;
  unint64_t v1087;
  unint64_t v1088;
  std::chrono::steady_clock::time_point v1089;
  uint64_t v1090;
  size_t v1091;
  const char *v1092;
  unsigned __int8 v1093;
  unsigned __int8 v1094;
  const char *v1095;
  size_t v1096;
  _BYTE *v1097;
  uint64_t v1098;
  uint64_t v1099;
  void **v1100;
  NSObject *v1101;
  uint64_t v1102;
  uint64_t v1103;
  size_t v1104;
  std::__shared_weak_count_vtbl *v1105;
  std::__shared_weak_count *v1106;
  std::__shared_weak_count *v1107;
  unint64_t *v1108;
  unint64_t v1109;
  unint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  char *v1113;
  uint64_t v1114;
  uint64_t v1115;
  void *v1116;
  std::__shared_weak_count *v1117;
  unint64_t *v1118;
  unint64_t v1119;
  std::__shared_weak_count *v1120;
  unint64_t *v1121;
  unint64_t v1122;
  uint64_t v1123;
  std::__shared_weak_count *v1124;
  unint64_t *v1125;
  unint64_t v1126;
  std::__shared_weak_count *v1127;
  unint64_t *v1128;
  unint64_t v1129;
  std::__shared_weak_count *v1130;
  unint64_t *v1131;
  unint64_t v1132;
  std::__shared_weak_count *v1133;
  unint64_t *v1134;
  unint64_t v1135;
  void *v1136;
  std::chrono::steady_clock::time_point v1137;
  std::__shared_weak_count *v1138;
  unint64_t *v1139;
  unint64_t v1140;
  int v1141;
  unint64_t v1142;
  unint64_t v1143;
  _QWORD *v1145;
  _QWORD *v1146;
  _QWORD *v1147;
  _QWORD *v1148;
  uint64_t v1149;
  _QWORD *v1150;
  _QWORD *v1151;
  _QWORD *v1152;
  uint64_t v1153;
  const char *v1154;
  size_t v1155;
  unsigned __int8 v1156;
  unsigned __int8 v1157;
  const char *v1158;
  size_t v1159;
  _BYTE *v1160;
  uint64_t v1161;
  uint64_t v1162;
  void **v1163;
  NSObject *v1164;
  uint64_t v1165;
  uint64_t v1166;
  size_t v1167;
  std::__shared_weak_count_vtbl *v1168;
  std::__shared_weak_count *v1169;
  std::__shared_weak_count *v1170;
  unint64_t *v1171;
  unint64_t v1172;
  unint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  char *v1176;
  uint64_t v1177;
  const char *v1178;
  void *v1179;
  std::__shared_weak_count *v1180;
  unint64_t *v1181;
  unint64_t v1182;
  std::__shared_weak_count *v1183;
  unint64_t *v1184;
  unint64_t v1185;
  uint64_t v1186;
  std::__shared_weak_count *v1187;
  unint64_t *v1188;
  unint64_t v1189;
  std::__shared_weak_count *v1190;
  unint64_t *v1191;
  unint64_t v1192;
  std::__shared_weak_count *v1193;
  unint64_t *v1194;
  unint64_t v1195;
  std::__shared_weak_count *v1196;
  unint64_t *v1197;
  unint64_t v1198;
  void *v1199;
  _QWORD *v1200;
  _QWORD *v1201;
  _QWORD *v1202;
  _QWORD *v1203;
  uint64_t v1204;
  _QWORD *v1205;
  _QWORD *v1206;
  _QWORD *v1207;
  std::__shared_weak_count *v1208;
  unint64_t *v1209;
  unint64_t v1210;
  int v1211;
  unint64_t v1212;
  unint64_t v1213;
  uint64_t v1215;
  uint64_t v1216;
  size_t v1217;
  const char *v1218;
  unsigned __int8 v1219;
  unsigned __int8 v1220;
  const char *v1221;
  size_t v1222;
  _BYTE *v1223;
  uint64_t v1224;
  uint64_t v1225;
  void **v1226;
  NSObject *v1227;
  uint64_t v1228;
  uint64_t v1229;
  size_t v1230;
  std::__shared_weak_count_vtbl *v1231;
  std::__shared_weak_count *v1232;
  std::__shared_weak_count *v1233;
  unint64_t *v1234;
  unint64_t v1235;
  unint64_t v1236;
  uint64_t v1237;
  char *v1238;
  uint64_t v1239;
  uint64_t v1240;
  void *v1241;
  std::__shared_weak_count *v1242;
  unint64_t *v1243;
  unint64_t v1244;
  std::__shared_weak_count *v1245;
  unint64_t *v1246;
  unint64_t v1247;
  uint64_t v1248;
  std::__shared_weak_count *v1249;
  unint64_t *v1250;
  unint64_t v1251;
  std::__shared_weak_count *v1252;
  unint64_t *v1253;
  unint64_t v1254;
  std::__shared_weak_count *v1255;
  unint64_t *v1256;
  unint64_t v1257;
  std::__shared_weak_count *v1258;
  unint64_t *v1259;
  unint64_t v1260;
  void *v1261;
  std::__shared_weak_count *v1262;
  unint64_t *v1263;
  unint64_t v1264;
  int v1265;
  unint64_t v1266;
  unint64_t v1267;
  std::chrono::steady_clock::time_point v1268;
  uint64_t v1269;
  size_t v1270;
  const char *v1271;
  unsigned __int8 v1272;
  unsigned __int8 v1273;
  const char *v1274;
  size_t v1275;
  _BYTE *v1276;
  uint64_t v1277;
  uint64_t v1278;
  void **v1279;
  NSObject *v1280;
  uint64_t v1281;
  uint64_t v1282;
  size_t v1283;
  std::__shared_weak_count_vtbl *v1284;
  std::__shared_weak_count *v1285;
  std::__shared_weak_count *v1286;
  unint64_t *v1287;
  unint64_t v1288;
  unint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  char *v1292;
  uint64_t v1293;
  uint64_t v1294;
  void *v1295;
  std::__shared_weak_count *v1296;
  unint64_t *v1297;
  unint64_t v1298;
  std::__shared_weak_count *v1299;
  unint64_t *v1300;
  unint64_t v1301;
  uint64_t v1302;
  std::__shared_weak_count *v1303;
  unint64_t *v1304;
  unint64_t v1305;
  std::__shared_weak_count *v1306;
  unint64_t *v1307;
  unint64_t v1308;
  std::__shared_weak_count *v1309;
  unint64_t *v1310;
  unint64_t v1311;
  std::__shared_weak_count *v1312;
  unint64_t *v1313;
  unint64_t v1314;
  void *v1315;
  std::chrono::steady_clock::time_point v1316;
  std::__shared_weak_count *v1317;
  unint64_t *v1318;
  unint64_t v1319;
  std::chrono::steady_clock::time_point v1320;
  uint64_t v1321;
  const char *v1322;
  size_t v1323;
  unsigned __int8 v1324;
  unsigned __int8 v1325;
  const char *v1326;
  size_t v1327;
  _BYTE *v1328;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v1329;
  uint64_t v1330;
  uint64_t v1331;
  void **v1332;
  NSObject *v1333;
  uint64_t v1334;
  uint64_t v1335;
  size_t v1336;
  std::__shared_weak_count_vtbl *v1337;
  std::__shared_weak_count *v1338;
  std::__shared_weak_count *v1339;
  unint64_t *v1340;
  unint64_t v1341;
  unint64_t v1342;
  uint64_t v1343;
  uint64_t v1344;
  char *v1345;
  uint64_t v1346;
  const char *v1347;
  void *v1348;
  std::__shared_weak_count *v1349;
  unint64_t *v1350;
  unint64_t v1351;
  std::__shared_weak_count *v1352;
  unint64_t *v1353;
  unint64_t v1354;
  std::__shared_weak_count *v1355;
  unint64_t *v1356;
  unint64_t v1357;
  std::__shared_weak_count *v1358;
  unint64_t *v1359;
  unint64_t v1360;
  void *v1361;
  std::chrono::steady_clock::time_point v1362;
  std::__shared_weak_count *v1363;
  unint64_t *v1364;
  unint64_t v1365;
  int v1366;
  unint64_t v1367;
  unint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  size_t v1371;
  const char *v1372;
  unsigned __int8 v1373;
  const char *v1374;
  size_t v1375;
  _BYTE *v1376;
  uint64_t v1377;
  uint64_t v1378;
  void **v1379;
  uint64_t v1380;
  uint64_t v1381;
  NSObject *v1382;
  size_t v1383;
  std::__shared_weak_count_vtbl *v1384;
  std::__shared_weak_count *v1385;
  std::__shared_weak_count *v1386;
  unint64_t *v1387;
  unint64_t v1388;
  unint64_t v1389;
  uint64_t v1390;
  char *v1391;
  uint64_t v1392;
  uint64_t v1393;
  void *v1394;
  std::__shared_weak_count *v1395;
  unint64_t *v1396;
  unint64_t v1397;
  std::__shared_weak_count *v1398;
  unint64_t *v1399;
  unint64_t v1400;
  uint64_t v1401;
  std::__shared_weak_count *v1402;
  unint64_t *v1403;
  unint64_t v1404;
  std::__shared_weak_count *v1405;
  unint64_t *v1406;
  unint64_t v1407;
  std::__shared_weak_count *v1408;
  unint64_t *v1409;
  unint64_t v1410;
  std::__shared_weak_count *v1411;
  unint64_t *v1412;
  unint64_t v1413;
  void *v1414;
  std::__shared_weak_count *v1415;
  unint64_t *v1416;
  unint64_t v1417;
  int v1418;
  unint64_t v1419;
  unint64_t v1420;
  std::chrono::steady_clock::time_point v1421;
  uint64_t v1422;
  const char *v1423;
  size_t v1424;
  unsigned __int8 v1425;
  const char *v1426;
  size_t v1427;
  _BYTE *v1428;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v1429;
  uint64_t v1430;
  uint64_t v1431;
  void **v1432;
  uint64_t v1433;
  uint64_t v1434;
  NSObject *v1435;
  size_t v1436;
  std::__shared_weak_count_vtbl *v1437;
  std::__shared_weak_count *v1438;
  std::__shared_weak_count *v1439;
  unint64_t *v1440;
  unint64_t v1441;
  unint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  char *v1445;
  uint64_t v1446;
  const char *v1447;
  void *v1448;
  std::__shared_weak_count *v1449;
  unint64_t *v1450;
  unint64_t v1451;
  std::__shared_weak_count *v1452;
  unint64_t *v1453;
  unint64_t v1454;
  uint64_t v1455;
  std::__shared_weak_count *v1456;
  unint64_t *v1457;
  unint64_t v1458;
  std::__shared_weak_count *v1459;
  unint64_t *v1460;
  unint64_t v1461;
  std::__shared_weak_count *v1462;
  unint64_t *v1463;
  unint64_t v1464;
  std::__shared_weak_count *v1465;
  unint64_t *v1466;
  unint64_t v1467;
  void *v1468;
  std::chrono::steady_clock::time_point v1469;
  std::__shared_weak_count *v1470;
  unint64_t *v1471;
  unint64_t v1472;
  int v1473;
  unint64_t v1474;
  unint64_t v1475;
  _QWORD *v1477;
  _QWORD *v1478;
  _QWORD *v1479;
  _QWORD *v1480;
  uint64_t v1481;
  _QWORD *v1482;
  _QWORD *v1483;
  _QWORD *v1484;
  uint64_t v1485;
  const char *v1486;
  size_t v1487;
  unsigned __int8 v1488;
  const char *v1489;
  size_t v1490;
  _BYTE *v1491;
  int v1492;
  uint64_t v1493;
  uint64_t v1494;
  void **v1495;
  uint64_t v1496;
  uint64_t v1497;
  NSObject *v1498;
  size_t v1499;
  std::__shared_weak_count_vtbl *v1500;
  std::__shared_weak_count *v1501;
  std::__shared_weak_count *v1502;
  unint64_t *v1503;
  unint64_t v1504;
  unint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  char *v1508;
  uint64_t v1509;
  const char *v1510;
  void *v1511;
  std::__shared_weak_count *v1512;
  unint64_t *v1513;
  unint64_t v1514;
  std::__shared_weak_count *v1515;
  unint64_t *v1516;
  unint64_t v1517;
  uint64_t v1518;
  std::__shared_weak_count *v1519;
  unint64_t *v1520;
  unint64_t v1521;
  std::__shared_weak_count *v1522;
  unint64_t *v1523;
  unint64_t v1524;
  std::__shared_weak_count *v1525;
  unint64_t *v1526;
  unint64_t v1527;
  std::__shared_weak_count *v1528;
  unint64_t *v1529;
  unint64_t v1530;
  void *v1531;
  _QWORD *v1532;
  _QWORD *v1533;
  _QWORD *v1534;
  _QWORD *v1535;
  uint64_t v1536;
  _QWORD *v1537;
  _QWORD *v1538;
  _QWORD *v1539;
  std::__shared_weak_count *v1540;
  unint64_t *v1541;
  unint64_t v1542;
  int v1543;
  unint64_t v1544;
  unint64_t v1545;
  uint64_t v1547;
  uint64_t v1548;
  size_t v1549;
  const char *v1550;
  unsigned __int8 v1551;
  const char *v1552;
  size_t v1553;
  _BYTE *v1554;
  uint64_t v1555;
  uint64_t v1556;
  void **v1557;
  uint64_t v1558;
  uint64_t v1559;
  NSObject *v1560;
  size_t v1561;
  std::__shared_weak_count_vtbl *v1562;
  std::__shared_weak_count *v1563;
  std::__shared_weak_count *v1564;
  unint64_t *v1565;
  unint64_t v1566;
  unint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  char *v1570;
  uint64_t v1571;
  uint64_t v1572;
  void *v1573;
  std::__shared_weak_count *v1574;
  unint64_t *v1575;
  unint64_t v1576;
  std::__shared_weak_count *v1577;
  unint64_t *v1578;
  unint64_t v1579;
  uint64_t v1580;
  std::__shared_weak_count *v1581;
  unint64_t *v1582;
  unint64_t v1583;
  std::__shared_weak_count *v1584;
  unint64_t *v1585;
  unint64_t v1586;
  std::__shared_weak_count *v1587;
  unint64_t *v1588;
  unint64_t v1589;
  std::__shared_weak_count *v1590;
  unint64_t *v1591;
  unint64_t v1592;
  void *v1593;
  std::__shared_weak_count *v1594;
  unint64_t *v1595;
  unint64_t v1596;
  int v1597;
  unint64_t v1598;
  unint64_t v1599;
  int v1600;
  unint64_t v1601;
  unint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  size_t v1605;
  const char *v1606;
  unsigned __int8 v1607;
  std::chrono::steady_clock::time_point v1608;
  uint64_t v1609;
  const char *v1610;
  size_t v1611;
  unsigned __int8 v1612;
  unsigned __int8 v1613;
  const char *v1614;
  size_t v1615;
  _BYTE *v1616;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v1617;
  uint64_t v1618;
  uint64_t v1619;
  void **v1620;
  uint64_t v1621;
  uint64_t v1622;
  NSObject *v1623;
  size_t v1624;
  std::__shared_weak_count_vtbl *v1625;
  std::__shared_weak_count *v1626;
  std::__shared_weak_count *v1627;
  unint64_t *v1628;
  unint64_t v1629;
  unint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  char *v1633;
  uint64_t v1634;
  const char *v1635;
  void *v1636;
  std::__shared_weak_count *v1637;
  unint64_t *v1638;
  unint64_t v1639;
  std::__shared_weak_count *v1640;
  unint64_t *v1641;
  unint64_t v1642;
  uint64_t v1643;
  std::__shared_weak_count *v1644;
  unint64_t *v1645;
  unint64_t v1646;
  std::__shared_weak_count *v1647;
  unint64_t *v1648;
  unint64_t v1649;
  std::__shared_weak_count *v1650;
  unint64_t *v1651;
  unint64_t v1652;
  std::__shared_weak_count *v1653;
  unint64_t *v1654;
  unint64_t v1655;
  void *v1656;
  std::chrono::steady_clock::time_point v1657;
  std::__shared_weak_count *v1658;
  unint64_t *v1659;
  unint64_t v1660;
  unsigned __int8 v1661;
  const char *v1662;
  size_t v1663;
  _BYTE *v1664;
  uint64_t v1665;
  uint64_t v1666;
  void **v1667;
  uint64_t v1668;
  uint64_t v1669;
  NSObject *v1670;
  size_t v1671;
  std::__shared_weak_count_vtbl *v1672;
  std::__shared_weak_count *v1673;
  std::__shared_weak_count *v1674;
  unint64_t *v1675;
  unint64_t v1676;
  unint64_t v1677;
  uint64_t v1678;
  char *v1679;
  uint64_t v1680;
  uint64_t v1681;
  void *v1682;
  std::__shared_weak_count *v1683;
  unint64_t *v1684;
  unint64_t v1685;
  std::__shared_weak_count *v1686;
  unint64_t *v1687;
  unint64_t v1688;
  uint64_t v1689;
  std::__shared_weak_count *v1690;
  unint64_t *v1691;
  unint64_t v1692;
  std::__shared_weak_count *v1693;
  unint64_t *v1694;
  unint64_t v1695;
  std::__shared_weak_count *v1696;
  unint64_t *v1697;
  unint64_t v1698;
  std::__shared_weak_count *v1699;
  unint64_t *v1700;
  unint64_t v1701;
  void *v1702;
  std::__shared_weak_count *v1703;
  unint64_t *v1704;
  unint64_t v1705;
  int v1706;
  unint64_t v1707;
  unint64_t v1708;
  std::chrono::steady_clock::time_point v1709;
  uint64_t v1710;
  const char *v1711;
  size_t v1712;
  unsigned __int8 v1713;
  unsigned __int8 v1714;
  const char *v1715;
  size_t v1716;
  _BYTE *v1717;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v1718;
  uint64_t v1719;
  uint64_t v1720;
  void **v1721;
  uint64_t v1722;
  uint64_t v1723;
  NSObject *v1724;
  size_t v1725;
  std::__shared_weak_count_vtbl *v1726;
  std::__shared_weak_count *v1727;
  std::__shared_weak_count *v1728;
  unint64_t *v1729;
  unint64_t v1730;
  unint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  char *v1734;
  uint64_t v1735;
  const char *v1736;
  void *v1737;
  std::__shared_weak_count *v1738;
  unint64_t *v1739;
  unint64_t v1740;
  std::__shared_weak_count *v1741;
  unint64_t *v1742;
  unint64_t v1743;
  uint64_t v1744;
  std::__shared_weak_count *v1745;
  unint64_t *v1746;
  unint64_t v1747;
  std::__shared_weak_count *v1748;
  unint64_t *v1749;
  unint64_t v1750;
  std::__shared_weak_count *v1751;
  unint64_t *v1752;
  unint64_t v1753;
  std::__shared_weak_count *v1754;
  unint64_t *v1755;
  unint64_t v1756;
  void *v1757;
  std::chrono::steady_clock::time_point v1758;
  std::__shared_weak_count *v1759;
  unint64_t *v1760;
  unint64_t v1761;
  int v1762;
  unint64_t v1763;
  unint64_t v1764;
  _QWORD *v1766;
  _QWORD *v1767;
  _QWORD *v1768;
  _QWORD *v1769;
  uint64_t v1770;
  _QWORD *v1771;
  _QWORD *v1772;
  _QWORD *v1773;
  uint64_t v1774;
  const char *v1775;
  size_t v1776;
  unsigned __int8 v1777;
  unsigned __int8 v1778;
  const char *v1779;
  size_t v1780;
  _BYTE *v1781;
  int v1782;
  uint64_t v1783;
  uint64_t v1784;
  void **v1785;
  uint64_t v1786;
  uint64_t v1787;
  NSObject *v1788;
  size_t v1789;
  std::__shared_weak_count_vtbl *v1790;
  std::__shared_weak_count *v1791;
  std::__shared_weak_count *v1792;
  unint64_t *v1793;
  unint64_t v1794;
  unint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  char *v1798;
  uint64_t v1799;
  const char *v1800;
  void *v1801;
  std::__shared_weak_count *v1802;
  unint64_t *v1803;
  unint64_t v1804;
  std::__shared_weak_count *v1805;
  unint64_t *v1806;
  unint64_t v1807;
  uint64_t v1808;
  std::__shared_weak_count *v1809;
  unint64_t *v1810;
  unint64_t v1811;
  std::__shared_weak_count *v1812;
  unint64_t *v1813;
  unint64_t v1814;
  std::__shared_weak_count *v1815;
  unint64_t *v1816;
  unint64_t v1817;
  std::__shared_weak_count *v1818;
  unint64_t *v1819;
  unint64_t v1820;
  void *v1821;
  _QWORD *v1822;
  _QWORD *v1823;
  _QWORD *v1824;
  _QWORD *v1825;
  uint64_t v1826;
  _QWORD *v1827;
  _QWORD *v1828;
  _QWORD *v1829;
  std::__shared_weak_count *v1830;
  unint64_t *v1831;
  unint64_t v1832;
  int v1833;
  unint64_t v1834;
  unint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  size_t v1838;
  const char *v1839;
  unsigned __int8 v1840;
  unsigned __int8 v1841;
  const char *v1842;
  size_t v1843;
  _BYTE *v1844;
  uint64_t v1845;
  uint64_t v1846;
  void **v1847;
  uint64_t v1848;
  uint64_t v1849;
  NSObject *v1850;
  size_t v1851;
  std::__shared_weak_count_vtbl *v1852;
  std::__shared_weak_count *v1853;
  std::__shared_weak_count *v1854;
  unint64_t *v1855;
  unint64_t v1856;
  unint64_t v1857;
  uint64_t v1858;
  char *v1859;
  uint64_t v1860;
  uint64_t v1861;
  void *v1862;
  std::__shared_weak_count *v1863;
  unint64_t *v1864;
  unint64_t v1865;
  std::__shared_weak_count *v1866;
  unint64_t *v1867;
  unint64_t v1868;
  uint64_t v1869;
  std::__shared_weak_count *v1870;
  unint64_t *v1871;
  unint64_t v1872;
  std::__shared_weak_count *v1873;
  unint64_t *v1874;
  unint64_t v1875;
  std::__shared_weak_count *v1876;
  unint64_t *v1877;
  unint64_t v1878;
  std::__shared_weak_count *v1879;
  unint64_t *v1880;
  unint64_t v1881;
  void *v1882;
  std::__shared_weak_count *v1883;
  unint64_t *v1884;
  unint64_t v1885;
  int v1886;
  unint64_t v1887;
  unint64_t v1888;
  uint64_t *v1889;
  void *v1890;
  unsigned int v1891;
  void *v1892;
  uint64_t v1893;
  unint64_t v1894;
  _QWORD *v1895;
  unsigned int v1896;
  uint64_t v1897;
  uint64_t v1898;
  uint64_t v1899;
  uint64_t v1900;
  unint64_t v1901;
  unint64_t v1902;
  uint64_t v1903;
  unsigned int v1904;
  uint64_t v1906;
  _BYTE *v1907;
  _BYTE *v1908;
  uint64_t v1909;
  unint64_t v1910;
  uint64_t v1911;
  unint64_t v1912;
  unint64_t v1913;
  _BYTE *v1914;
  _QWORD *v1915;
  int64_t v1916;
  unint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  char *v1920;
  _OWORD *v1921;
  __int128 *v1922;
  uint64_t v1923;
  __int128 v1924;
  uint64_t v1925;
  int v1926;
  unint64_t v1927;
  unint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  size_t v1931;
  const char *v1932;
  unsigned __int8 v1933;
  int v1934;
  unint64_t v1935;
  unint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  size_t v1939;
  const char *v1940;
  unsigned __int8 v1941;
  std::chrono::steady_clock::time_point v1942;
  uint64_t v1943;
  const char *v1944;
  size_t v1945;
  unsigned __int8 v1946;
  unsigned __int8 v1947;
  const char *v1948;
  size_t v1949;
  _BYTE *v1950;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v1951;
  uint64_t v1952;
  uint64_t v1953;
  void **v1954;
  uint64_t v1955;
  uint64_t v1956;
  NSObject *v1957;
  size_t v1958;
  std::__shared_weak_count_vtbl *v1959;
  std::__shared_weak_count *v1960;
  std::__shared_weak_count *v1961;
  unint64_t *v1962;
  unint64_t v1963;
  unint64_t v1964;
  uint64_t v1965;
  uint64_t v1966;
  char *v1967;
  uint64_t v1968;
  const char *v1969;
  void *v1970;
  std::__shared_weak_count *v1971;
  unint64_t *v1972;
  unint64_t v1973;
  std::__shared_weak_count *v1974;
  unint64_t *v1975;
  unint64_t v1976;
  uint64_t v1977;
  std::__shared_weak_count *v1978;
  unint64_t *v1979;
  unint64_t v1980;
  std::__shared_weak_count *v1981;
  unint64_t *v1982;
  unint64_t v1983;
  std::__shared_weak_count *v1984;
  unint64_t *v1985;
  unint64_t v1986;
  std::__shared_weak_count *v1987;
  unint64_t *v1988;
  unint64_t v1989;
  void *v1990;
  std::chrono::steady_clock::time_point v1991;
  std::__shared_weak_count *v1992;
  unint64_t *v1993;
  unint64_t v1994;
  unsigned __int8 v1995;
  const char *v1996;
  size_t v1997;
  _BYTE *v1998;
  uint64_t v1999;
  uint64_t v2000;
  void **v2001;
  uint64_t v2002;
  uint64_t v2003;
  NSObject *v2004;
  size_t v2005;
  std::__shared_weak_count_vtbl *v2006;
  std::__shared_weak_count *v2007;
  std::__shared_weak_count *v2008;
  unint64_t *v2009;
  unint64_t v2010;
  unint64_t v2011;
  uint64_t v2012;
  char *v2013;
  uint64_t v2014;
  uint64_t v2015;
  void *v2016;
  std::__shared_weak_count *v2017;
  unint64_t *v2018;
  unint64_t v2019;
  std::__shared_weak_count *v2020;
  unint64_t *v2021;
  unint64_t v2022;
  uint64_t v2023;
  std::__shared_weak_count *v2024;
  unint64_t *v2025;
  unint64_t v2026;
  std::__shared_weak_count *v2027;
  unint64_t *v2028;
  unint64_t v2029;
  std::__shared_weak_count *v2030;
  unint64_t *v2031;
  unint64_t v2032;
  std::__shared_weak_count *v2033;
  unint64_t *v2034;
  unint64_t v2035;
  void *v2036;
  std::__shared_weak_count *v2037;
  unint64_t *v2038;
  unint64_t v2039;
  unsigned __int8 v2040;
  const char *v2041;
  size_t v2042;
  _BYTE *v2043;
  uint64_t v2044;
  uint64_t v2045;
  void **v2046;
  uint64_t v2047;
  uint64_t v2048;
  NSObject *v2049;
  size_t v2050;
  std::__shared_weak_count_vtbl *v2051;
  std::__shared_weak_count *v2052;
  std::__shared_weak_count *v2053;
  unint64_t *v2054;
  unint64_t v2055;
  unint64_t v2056;
  uint64_t v2057;
  char *v2058;
  uint64_t v2059;
  uint64_t v2060;
  void *v2061;
  std::__shared_weak_count *v2062;
  unint64_t *v2063;
  unint64_t v2064;
  std::__shared_weak_count *v2065;
  unint64_t *v2066;
  unint64_t v2067;
  uint64_t v2068;
  std::__shared_weak_count *v2069;
  unint64_t *v2070;
  unint64_t v2071;
  std::__shared_weak_count *v2072;
  unint64_t *v2073;
  unint64_t v2074;
  std::__shared_weak_count *v2075;
  unint64_t *v2076;
  unint64_t v2077;
  std::__shared_weak_count *v2078;
  unint64_t *v2079;
  unint64_t v2080;
  void *v2081;
  std::__shared_weak_count *v2082;
  unint64_t *v2083;
  unint64_t v2084;
  int v2085;
  unint64_t v2086;
  unint64_t v2087;
  std::chrono::steady_clock::time_point v2088;
  uint64_t v2089;
  uint64_t v2090;
  size_t v2091;
  const char *v2092;
  unsigned __int8 v2093;
  unsigned __int8 v2094;
  const char *v2095;
  size_t v2096;
  _BYTE *v2097;
  unint64_t v2098;
  uint64_t v2099;
  int v2100;
  uint64_t v2101;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v2102;
  uint64_t v2103;
  uint64_t v2104;
  void **v2105;
  uint64_t v2106;
  uint64_t v2107;
  NSObject *v2108;
  size_t v2109;
  std::__shared_weak_count_vtbl *v2110;
  std::__shared_weak_count *v2111;
  std::__shared_weak_count *v2112;
  unint64_t *v2113;
  unint64_t v2114;
  unint64_t v2115;
  uint64_t v2116;
  uint64_t v2117;
  char *v2118;
  uint64_t v2119;
  uint64_t v2120;
  void *v2121;
  std::__shared_weak_count *v2122;
  unint64_t *v2123;
  unint64_t v2124;
  std::__shared_weak_count *v2125;
  unint64_t *v2126;
  unint64_t v2127;
  uint64_t v2128;
  std::__shared_weak_count *v2129;
  unint64_t *v2130;
  unint64_t v2131;
  std::__shared_weak_count *v2132;
  unint64_t *v2133;
  unint64_t v2134;
  std::__shared_weak_count *v2135;
  unint64_t *v2136;
  unint64_t v2137;
  std::__shared_weak_count *v2138;
  unint64_t *v2139;
  unint64_t v2140;
  void *v2141;
  std::chrono::steady_clock::time_point v2142;
  unint64_t *v2143;
  char *v2144;
  int v2145;
  int v2146;
  std::chrono::steady_clock::time_point v2147;
  uint64_t v2148;
  uint64_t v2149;
  uint64_t v2150;
  uint64_t *v2151;
  uint64_t v2152;
  _QWORD *v2153;
  uint64_t v2154;
  const char *v2155;
  uint64_t v2156;
  uint64_t v2157;
  _QWORD *v2158;
  uint64_t v2159;
  const char *v2160;
  uint64_t v2161;
  const char *v2162;
  uint64_t v2163;
  uint64_t v2164;
  uint64_t v2165;
  const char *v2166;
  uint64_t v2167;
  const char *v2168;
  const char *v2169;
  const char *v2170;
  uint64_t v2171;
  const char *v2172;
  const char *v2173;
  const char *v2174;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v2175;
  const char *v2176;
  const char *v2177;
  void *v2178[3];
  void *v2179[3];
  uint64_t v2180;
  uint64_t v2181;
  _QWORD *v2182;
  uint64_t v2183;
  void *__p[2];
  void *v2185;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v2187;
  int v2188;
  const char *v2189;
  int v2190;
  const char *v2191;
  uint64_t v2192;
  std::__shared_weak_count *v2193;
  _QWORD v2194[8];
  __int128 v2195;
  int v2196;
  int v2197;
  __int128 v2198;
  uint64_t v2199;
  _BYTE v2200[24];
  uint64_t v2201;
  _BYTE v2202[24];
  uint64_t v2203;
  __int128 v2204;
  _BYTE v2205[24];
  uint64_t v2206;
  void *v2207[2];
  char v2208;
  char v2209;
  uint64_t v2210;
  _BYTE v2211[40];
  void **v2212;
  size_t v2213;
  unint64_t v2214;
  char v2215;
  uint64_t v2216;

  v2216 = *MEMORY[0x24BDAC8D0];
  v2147.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v2198 = 0u;
  v2199 = 0;
  *(_OWORD *)&v2200[8] = 0u;
  v2201 = 0;
  *(_OWORD *)&v2202[8] = 0u;
  v2203 = 0;
  *(_OWORD *)&v2205[8] = 0u;
  v2195 = xmmword_2102DD520;
  v2196 = 1;
  *(_OWORD *)v2200 = xmmword_210385610;
  *(_OWORD *)v2202 = xmmword_210385620;
  v2204 = xmmword_210315A80;
  *(_OWORD *)v2205 = xmmword_210315A90;
  v7 = *(_QWORD *)(a5 + 112);
  v2194[4] = *(_QWORD *)(a5 + 120);
  v2194[3] = 0x3FEB333333333333;
  v2194[7] = 7;
  v2197 = 16843009;
  DWORD1(v2198) = 50;
  *((_QWORD *)&v2198 + 1) = 0x3FF4000000000000;
  v2201 = 0x3F689374BC6A7EFALL;
  *(_QWORD *)&v2202[16] = 200;
  v2203 = 0x3F747AE147AE147BLL;
  v2194[5] = 1;
  LODWORD(v2199) = 1;
  v2206 = 1;
  v2194[0] = *(_QWORD *)(a5 + 104);
  v2194[1] = 15;
  v2194[2] = v7;
  v2194[6] = *(_QWORD *)(a5 + 128);
  v8 = *(_QWORD *)(a5 + 80);
  sub_20F34CD58(&v2210);
  v2152 = a5;
  v2153 = a2;
  if (**(int **)(v2210 + 56) > 3)
    goto LABEL_81;
  v9 = *(unsigned __int8 *)(v2210 + 72);
  v10 = sub_20E8C31DC(v2210, "OSLogSurrogateAppender", 1, 0);
  v11 = v10;
  if (!v9 && !v10)
    goto LABEL_81;
  v2185 = &v2210;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v2187 = std::chrono::system_clock::now().__d_.__rep_;
  v2188 = 3;
  v2189 = "unknown file";
  v2190 = 1188;
  v2192 = 0;
  v2193 = 0;
  v2191 = "unknown function";
  v12 = v2210;
  v13 = v2210 + 16;
  if (*(char *)(v2210 + 39) < 0)
  {
    v15 = *(const char **)(v2210 + 16);
    v14 = *(_QWORD *)(v2210 + 24);
    v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v17 & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    v14 = *(unsigned __int8 *)(v2210 + 39);
    v15 = (const char *)(*(_QWORD *)v2185 + 16);
    v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v16 & 1) != 0)
      goto LABEL_8;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v2211);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
    if (v2211[24] && (v2211[23] & 0x80000000) != 0)
      operator delete(*(void **)v2211);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_8:
  if (byte_254A4A4F8[23] >= 0)
    v18 = byte_254A4A4F8;
  else
    v18 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v19 = byte_254A4A4F8[23];
  else
    v19 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v2211 = os_log_create(v18, v15);
  v20 = &v2211[8];
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v19 >= 0x17)
  {
    v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v21 = v19 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    *(_QWORD *)&v2211[16] = v19;
    *(_QWORD *)&v2211[24] = v22 | 0x8000000000000000;
    *(_QWORD *)&v2211[8] = v20;
    goto LABEL_21;
  }
  v2211[31] = v19;
  if (v19)
LABEL_21:
    memmove(v20, v18, v19);
  v20[v19] = 0;
  v2211[32] = 1;
  v23 = (void **)&v2212;
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a5 = v2152;
  if (v14 >= 0x17)
  {
    v25 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v25 = v14 | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    v2213 = v14;
    v2214 = v26 | 0x8000000000000000;
    v2212 = v23;
    a2 = v2153;
  }
  else
  {
    HIBYTE(v2214) = v14;
    a2 = v2153;
    if (!v14)
    {
      LOBYTE(v2212) = 0;
      v2215 = 1;
      v24 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_32;
    }
  }
  memmove(v23, v15, v14);
  *((_BYTE *)v23 + v14) = 0;
  v2215 = 1;
  v24 = *(NSObject **)v2211;
  if ((SHIBYTE(v2214) & 0x80000000) == 0)
  {
LABEL_26:
    if (!v2211[32])
      goto LABEL_35;
LABEL_33:
    if ((v2211[31] & 0x80000000) != 0)
      operator delete(*(void **)&v2211[8]);
    goto LABEL_35;
  }
LABEL_32:
  operator delete(v2212);
  if (v2211[32])
    goto LABEL_33;
LABEL_35:
  if (*(_QWORD *)v2211)
    os_release(*(void **)v2211);
  if (v11 && *(_QWORD *)(v11 + 24))
  {
    v27 = _os_log_pack_size();
    v28 = (std::__shared_weak_count_vtbl *)operator new(v27, (std::align_val_t)8uLL);
    v29 = (std::__shared_weak_count *)operator new();
    v30 = v29;
    v29->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v29->__shared_weak_owners_ = 0;
    v29[1].__vftable = v28;
    *(_QWORD *)v2211 = v28;
    *(_QWORD *)&v2211[8] = v28;
    *(_QWORD *)&v2211[16] = v29;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    v2212 = 0;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v30);
    }
    v34 = *(_QWORD *)v2211;
    *(_WORD *)_os_log_pack_fill() = 0;
    v35 = (char *)operator new();
    v36 = *(unsigned __int8 *)(v12 + 39);
    if ((v36 & 0x80u) == 0)
      v37 = v13;
    else
      v37 = *(_QWORD *)(v12 + 16);
    if ((v36 & 0x80u) != 0)
      v36 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)v35 = v34;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)&v2211[8];
    *(_QWORD *)&v2211[8] = 0;
    *(_QWORD *)&v2211[16] = 0;
    *(_OWORD *)(v35 + 24) = *(_OWORD *)&v2211[24];
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    *((_QWORD *)v35 + 5) = v37;
    *((_QWORD *)v35 + 6) = v36;
    v35[56] = 1;
    v2181 = 0;
    v2207[0] = v35;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v11 + 24) + 40))(*(_QWORD *)(v11 + 24), v2207);
    v38 = v2207[0];
    v2207[0] = 0;
    a2 = v2153;
    if (v38)
    {
      v39 = (std::__shared_weak_count *)*((_QWORD *)v38 + 4);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (std::__shared_weak_count *)*((_QWORD *)v38 + 2);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      MEMORY[0x212BC6398](v38, 0x10F0C40B62ED6C6);
      v2181 = 0;
    }
    v45 = *(std::__shared_weak_count **)&v2211[32];
    if (*(_QWORD *)&v2211[32])
    {
      v46 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = *(std::__shared_weak_count **)&v2211[16];
    if (*(_QWORD *)&v2211[16])
    {
      v49 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  else
  {
    os_log_type_enabled(v24, OS_LOG_TYPE_INFO);
    *(_WORD *)v2211 = 0;
    v51 = (void *)_os_log_send_and_compose_impl();
    if (v51)
      free(v51);
  }
  if (v9)
  {
    sub_20E8C003C((uint64_t)&v2185, "Evaluate database");
    sub_20E863570((uint64_t)&v2185);
  }
  sub_20E863570((uint64_t)&v2185);
  v52 = v2193;
  if (v2193)
  {
    v53 = (unint64_t *)&v2193->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
LABEL_81:
  sub_20F360AD4((uint64_t)__p, (int8x8_t **)a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_20F34CD58(&v2210);
  if (**(int **)(v2210 + 56) <= 3)
  {
    v55 = *(unsigned __int8 *)(v2210 + 72);
    v56 = sub_20E8C31DC(v2210, "OSLogSurrogateAppender", 1, 0);
    v57 = v56;
    if (v55 || v56)
    {
      v2185 = &v2210;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1190;
      v2192 = 0;
      v2193 = 0;
      v2191 = "unknown function";
      v1320.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v1321 = *(_QWORD *)v2185;
      v1322 = (const char *)(*(_QWORD *)v2185 + 16);
      v2168 = v1322;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v1322 = *(const char **)(v1321 + 16);
        v1323 = *(_QWORD *)(v1321 + 24);
        v1325 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v1325 & 1) != 0)
          goto LABEL_2287;
      }
      else
      {
        v1323 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v1324 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v1324 & 1) != 0)
          goto LABEL_2287;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2211);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
        if (v2211[24] && (v2211[23] & 0x80000000) != 0)
          operator delete(*(void **)v2211);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_2287:
      if (byte_254A4A4F8[23] >= 0)
        v1326 = byte_254A4A4F8;
      else
        v1326 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v1327 = byte_254A4A4F8[23];
      else
        v1327 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v1326, v1322);
      v1328 = &v2211[8];
      if (v1327 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v1327 >= 0x17)
      {
        v1329 = v1320.__d_.__rep_;
        v1330 = (v1327 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1327 | 7) != 0x17)
          v1330 = v1327 | 7;
        v1331 = v1330 + 1;
        v1328 = operator new(v1330 + 1);
        *(_QWORD *)&v2211[16] = v1327;
        *(_QWORD *)&v2211[24] = v1331 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v1328;
        v1320.__d_.__rep_ = v1329;
      }
      else
      {
        v2211[31] = v1327;
        if (!v1327)
        {
LABEL_2301:
          v1328[v1327] = 0;
          v2211[32] = 1;
          v1332 = (void **)&v2212;
          if (v1323 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v1323 >= 0x17)
          {
            v1334 = (v1323 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v1323 | 7) != 0x17)
              v1334 = v1323 | 7;
            v1335 = v1334 + 1;
            v1332 = (void **)operator new(v1334 + 1);
            v2213 = v1323;
            v2214 = v1335 | 0x8000000000000000;
            v2212 = v1332;
            a2 = v2153;
          }
          else
          {
            HIBYTE(v2214) = v1323;
            a2 = v2153;
            if (!v1323)
            {
              LOBYTE(v2212) = 0;
              v2215 = 1;
              v1333 = *(NSObject **)v2211;
              if ((SHIBYTE(v2214) & 0x80000000) == 0)
                goto LABEL_2305;
              goto LABEL_2311;
            }
          }
          memmove(v1332, v1322, v1323);
          *((_BYTE *)v1332 + v1323) = 0;
          v2215 = 1;
          v1333 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
          {
LABEL_2305:
            a5 = v2152;
            if (!v2211[32])
              goto LABEL_2314;
            goto LABEL_2312;
          }
LABEL_2311:
          operator delete(v2212);
          a5 = v2152;
          if (!v2211[32])
            goto LABEL_2314;
LABEL_2312:
          if ((v2211[31] & 0x80000000) != 0)
            operator delete(*(void **)&v2211[8]);
LABEL_2314:
          if (*(_QWORD *)v2211)
            os_release(*(void **)v2211);
          if (v57 && *(_QWORD *)(v57 + 24))
          {
            v1336 = _os_log_pack_size();
            v1337 = (std::__shared_weak_count_vtbl *)operator new(v1336, (std::align_val_t)8uLL);
            v1338 = (std::__shared_weak_count *)operator new();
            v1339 = v1338;
            v1338->__shared_owners_ = 0;
            v1340 = (unint64_t *)&v1338->__shared_owners_;
            v1338->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v1338->__shared_weak_owners_ = 0;
            v1338[1].__vftable = v1337;
            *(_QWORD *)v2211 = v1337;
            *(_QWORD *)&v2211[8] = v1337;
            *(_QWORD *)&v2211[16] = v1338;
            do
              v1341 = __ldxr(v1340);
            while (__stxr(v1341 + 1, v1340));
            *(_QWORD *)&v2211[24] = 0;
            *(_QWORD *)&v2211[32] = 0;
            v2212 = 0;
            do
              v1342 = __ldaxr(v1340);
            while (__stlxr(v1342 - 1, v1340));
            if (!v1342)
            {
              ((void (*)(std::__shared_weak_count *))v1338->__on_zero_shared)(v1338);
              std::__shared_weak_count::__release_weak(v1339);
            }
            v1343 = *(_QWORD *)v2211;
            v1344 = _os_log_pack_fill();
            *(_DWORD *)v1344 = 134217984;
            *(double *)(v1344 + 4) = (double)(v1320.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
            v1345 = (char *)operator new();
            v1346 = *(unsigned __int8 *)(v1321 + 39);
            v1347 = v2168;
            if ((v1346 & 0x80u) != 0)
            {
              v1347 = *(const char **)(v1321 + 16);
              v1346 = *(_QWORD *)(v1321 + 24);
            }
            *(_QWORD *)v1345 = v1343;
            *(_OWORD *)(v1345 + 8) = *(_OWORD *)&v2211[8];
            *(_QWORD *)&v2211[8] = 0;
            *(_QWORD *)&v2211[16] = 0;
            *(_OWORD *)(v1345 + 24) = *(_OWORD *)&v2211[24];
            *(_QWORD *)&v2211[24] = 0;
            *(_QWORD *)&v2211[32] = 0;
            *((_QWORD *)v1345 + 5) = v1347;
            *((_QWORD *)v1345 + 6) = v1346;
            v1345[56] = 1;
            v2181 = 0;
            v2207[0] = v1345;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v57 + 24) + 40))(*(_QWORD *)(v57 + 24), v2207);
            v1348 = v2207[0];
            v2207[0] = 0;
            a2 = v2153;
            if (v1348)
            {
              v1349 = (std::__shared_weak_count *)*((_QWORD *)v1348 + 4);
              if (v1349)
              {
                v1350 = (unint64_t *)&v1349->__shared_owners_;
                do
                  v1351 = __ldaxr(v1350);
                while (__stlxr(v1351 - 1, v1350));
                if (!v1351)
                {
                  ((void (*)(std::__shared_weak_count *))v1349->__on_zero_shared)(v1349);
                  std::__shared_weak_count::__release_weak(v1349);
                }
              }
              v1352 = (std::__shared_weak_count *)*((_QWORD *)v1348 + 2);
              if (v1352)
              {
                v1353 = (unint64_t *)&v1352->__shared_owners_;
                do
                  v1354 = __ldaxr(v1353);
                while (__stlxr(v1354 - 1, v1353));
                if (!v1354)
                {
                  ((void (*)(std::__shared_weak_count *))v1352->__on_zero_shared)(v1352);
                  std::__shared_weak_count::__release_weak(v1352);
                }
              }
              MEMORY[0x212BC6398](v1348, 0x10F0C40B62ED6C6);
              v2181 = 0;
            }
            v1355 = *(std::__shared_weak_count **)&v2211[32];
            if (*(_QWORD *)&v2211[32])
            {
              v1356 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
              do
                v1357 = __ldaxr(v1356);
              while (__stlxr(v1357 - 1, v1356));
              if (!v1357)
              {
                ((void (*)(std::__shared_weak_count *))v1355->__on_zero_shared)(v1355);
                std::__shared_weak_count::__release_weak(v1355);
              }
            }
            v1358 = *(std::__shared_weak_count **)&v2211[16];
            if (*(_QWORD *)&v2211[16])
            {
              v1359 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
              do
                v1360 = __ldaxr(v1359);
              while (__stlxr(v1360 - 1, v1359));
              if (!v1360)
              {
                ((void (*)(std::__shared_weak_count *))v1358->__on_zero_shared)(v1358);
                std::__shared_weak_count::__release_weak(v1358);
              }
            }
          }
          else
          {
            os_log_type_enabled(v1333, OS_LOG_TYPE_INFO);
            *(_DWORD *)v2211 = 134217984;
            *(double *)&v2211[4] = (double)(v1320.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
            v1361 = (void *)_os_log_send_and_compose_impl();
            if (v1361)
              free(v1361);
          }
          if (v55)
          {
            v1362.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v1362.__d_.__rep_ - v1320.__d_.__rep_) / 1000000000.0);
            sub_20E863570((uint64_t)&v2185);
          }
          else
          {
            v1362.__d_.__rep_ = v1320.__d_.__rep_;
          }
          sub_20E863570((uint64_t)&v2185);
          v1363 = v2193;
          if (v2193)
          {
            v1364 = (unint64_t *)&v2193->__shared_owners_;
            do
              v1365 = __ldaxr(v1364);
            while (__stlxr(v1365 - 1, v1364));
            if (!v1365)
            {
              ((void (*)(std::__shared_weak_count *))v1363->__on_zero_shared)(v1363);
              std::__shared_weak_count::__release_weak(v1363);
            }
          }
          v2147.__d_.__rep_ = v1362.__d_.__rep_;
          v2181 = v8;
          v2182 = a2;
          v2183 = a5;
          v2145 = *(_DWORD *)(a5 + 24);
          if (v2145 != -1)
            goto LABEL_87;
          goto LABEL_2359;
        }
      }
      memmove(v1328, v1326, v1327);
      goto LABEL_2301;
    }
  }
  v2181 = v8;
  v2182 = a2;
  v2183 = a5;
  v2145 = *(_DWORD *)(a5 + 24);
  if (v2145 != -1)
  {
LABEL_87:
    v2146 = 0;
    while (1)
    {
      if (!*(_BYTE *)(a5 + 1))
      {
LABEL_382:
        if (*(double *)(a5 + 72) <= 0.0)
          goto LABEL_1207;
        goto LABEL_383;
      }
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) <= 3)
      {
        v58 = *(unsigned __int8 *)(v2180 + 72);
        v59 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
        v60 = v59;
        _ZF = !v58 && v59 == 0;
        if (!_ZF)
          break;
      }
LABEL_184:
      sub_20F2CFBE8((uint64_t)v2194, (int8x8_t **)a2, 0, *(_QWORD *)(a5 + 88), 0, *(unsigned __int8 *)(a5 + 13), *(double *)(a5 + 96));
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_273;
      v112 = *(unsigned __int8 *)(v2180 + 72);
      v113 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v114 = v113;
      if (!v112 && !v113)
        goto LABEL_273;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1223;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v115.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v116 = *(_QWORD *)v2185;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v118 = *(const char **)(v116 + 16);
        v117 = *(_QWORD *)(v116 + 24);
        v2154 = *(_QWORD *)v2185 + 16;
        v120 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v120 & 1) != 0)
          goto LABEL_191;
      }
      else
      {
        v117 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v118 = (const char *)(*(_QWORD *)v2185 + 16);
        v2154 = (uint64_t)v118;
        v119 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v119 & 1) != 0)
          goto LABEL_191;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_191:
      if (byte_254A4A4F8[23] >= 0)
        v121 = byte_254A4A4F8;
      else
        v121 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v122 = byte_254A4A4F8[23];
      else
        v122 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v121, v118);
      if (v122 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v122 >= 0x17)
      {
        v124 = (v122 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v122 | 7) != 0x17)
          v124 = v122 | 7;
        v125 = v124 + 1;
        v123 = operator new(v124 + 1);
        *(_QWORD *)&v2211[16] = v122;
        *(_QWORD *)&v2211[24] = v125 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v123;
LABEL_204:
        memmove(v123, v121, v122);
        goto LABEL_205;
      }
      v2211[31] = v122;
      v123 = &v2211[8];
      if (v122)
        goto LABEL_204;
LABEL_205:
      v123[v122] = 0;
      v2211[32] = 1;
      if (v117 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v117 >= 0x17)
      {
        v128 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v117 | 7) != 0x17)
          v128 = v117 | 7;
        v129 = v128 + 1;
        v126 = (void **)operator new(v128 + 1);
        v2213 = v117;
        v2214 = v129 | 0x8000000000000000;
        v2212 = v126;
      }
      else
      {
        HIBYTE(v2214) = v117;
        v126 = (void **)&v2212;
        if (!v117)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v127 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_209;
          goto LABEL_215;
        }
      }
      memmove(v126, v118, v117);
      *((_BYTE *)v126 + v117) = 0;
      v2215 = 1;
      v127 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_209:
        if (v2211[32])
          goto LABEL_216;
        goto LABEL_218;
      }
LABEL_215:
      operator delete(v2212);
      if (v2211[32])
      {
LABEL_216:
        if ((v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
      }
LABEL_218:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v114 && *(_QWORD *)(v114 + 24))
      {
        v130 = _os_log_pack_size();
        v131 = (std::__shared_weak_count_vtbl *)operator new(v130, (std::align_val_t)8uLL);
        v132 = (std::__shared_weak_count *)operator new();
        v133 = v132;
        v132->__shared_owners_ = 0;
        v134 = (unint64_t *)&v132->__shared_owners_;
        v132->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v132->__shared_weak_owners_ = 0;
        v132[1].__vftable = v131;
        *(_QWORD *)v2211 = v131;
        *(_QWORD *)&v2211[8] = v131;
        *(_QWORD *)&v2211[16] = v132;
        do
          v135 = __ldxr(v134);
        while (__stxr(v135 + 1, v134));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        do
          v136 = __ldaxr(v134);
        while (__stlxr(v136 - 1, v134));
        if (!v136)
        {
          ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
          std::__shared_weak_count::__release_weak(v133);
        }
        v137 = *(_QWORD *)v2211;
        v138 = _os_log_pack_fill();
        *(_DWORD *)v138 = 134217984;
        *(double *)(v138 + 4) = (double)(v115.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v139 = (char *)operator new();
        v140 = *(unsigned __int8 *)(v116 + 39);
        v141 = v2154;
        if ((v140 & 0x80u) != 0)
        {
          v141 = *(_QWORD *)(v116 + 16);
          v140 = *(_QWORD *)(v116 + 24);
        }
        *(_QWORD *)v139 = v137;
        *(_OWORD *)(v139 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v139 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v139 + 5) = v141;
        *((_QWORD *)v139 + 6) = v140;
        v139[56] = 1;
        v2210 = 0;
        v2207[0] = v139;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v114 + 24) + 40))(*(_QWORD *)(v114 + 24), v2207);
        v142 = v2207[0];
        v2207[0] = 0;
        a2 = v2153;
        if (v142)
        {
          v143 = (std::__shared_weak_count *)*((_QWORD *)v142 + 4);
          if (v143)
          {
            v144 = (unint64_t *)&v143->__shared_owners_;
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
              std::__shared_weak_count::__release_weak(v143);
            }
          }
          v146 = (std::__shared_weak_count *)*((_QWORD *)v142 + 2);
          if (v146)
          {
            v147 = (unint64_t *)&v146->__shared_owners_;
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
          MEMORY[0x212BC6398](v142, 0x10F0C40B62ED6C6);
          v149 = v2210;
          v2210 = 0;
          if (v149)
          {
            v150 = *(std::__shared_weak_count **)(v149 + 32);
            if (v150)
            {
              v151 = (unint64_t *)&v150->__shared_owners_;
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
            v153 = *(std::__shared_weak_count **)(v149 + 16);
            if (v153)
            {
              v154 = (unint64_t *)&v153->__shared_owners_;
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            MEMORY[0x212BC6398](v149, 0x10F0C40B62ED6C6);
          }
        }
        v156 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v157 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        v159 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v160 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
            std::__shared_weak_count::__release_weak(v159);
          }
        }
      }
      else
      {
        os_log_type_enabled(v127, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 134217984;
        *(double *)&v2211[4] = (double)(v115.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v162 = (void *)_os_log_send_and_compose_impl();
        a2 = v2153;
        if (v162)
          free(v162);
      }
      if (v112)
      {
        v163.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v163.__d_.__rep_ - v115.__d_.__rep_) / 1000000000.0);
        sub_20E863570((uint64_t)&v2185);
      }
      else
      {
        v163.__d_.__rep_ = v115.__d_.__rep_;
      }
      sub_20E863570((uint64_t)&v2185);
      v2147.__d_.__rep_ = v163.__d_.__rep_;
      v164 = v2193;
      if (v2193)
      {
        v165 = (unint64_t *)&v2193->__shared_owners_;
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
LABEL_273:
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_382;
      v167 = *(unsigned __int8 *)(v2180 + 72);
      v168 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v169 = v168;
      if (!v167 && v168 == 0)
        goto LABEL_382;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1224;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v171 = (_QWORD *)a2[1];
      v174 = (_QWORD *)*v171;
      v172 = v171 + 1;
      v173 = v174;
      if (v174 == v172)
      {
        v175 = 0;
      }
      else
      {
        v175 = 0;
        do
        {
          v176 = (_QWORD *)v173[1];
          v177 = v173;
          if (v176)
          {
            do
            {
              v178 = v176;
              v176 = (_QWORD *)*v176;
            }
            while (v176);
          }
          else
          {
            do
            {
              v178 = (_QWORD *)v177[2];
              _ZF = *v178 == (_QWORD)v177;
              v177 = v178;
            }
            while (!_ZF);
          }
          v175 += *(unsigned __int8 *)(v173[6] + 528);
          v173 = v178;
        }
        while (v178 != v172);
      }
      v179 = *(_QWORD *)v2185;
      v180 = (const char *)(*(_QWORD *)v2185 + 16);
      v2155 = v180;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v180 = *(const char **)(v179 + 16);
        v181 = *(_QWORD *)(v179 + 24);
        v183 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v183 & 1) != 0)
          goto LABEL_292;
      }
      else
      {
        v181 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v182 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v182 & 1) != 0)
          goto LABEL_292;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_292:
      if (byte_254A4A4F8[23] >= 0)
        v184 = byte_254A4A4F8;
      else
        v184 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v185 = byte_254A4A4F8[23];
      else
        v185 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v184, v180);
      if (v185 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v185 >= 0x17)
      {
        v187 = (v185 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v185 | 7) != 0x17)
          v187 = v185 | 7;
        v188 = v187 + 1;
        v186 = operator new(v187 + 1);
        *(_QWORD *)&v2211[16] = v185;
        *(_QWORD *)&v2211[24] = v188 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v186;
LABEL_305:
        memmove(v186, v184, v185);
        goto LABEL_306;
      }
      v2211[31] = v185;
      v186 = &v2211[8];
      if (v185)
        goto LABEL_305;
LABEL_306:
      v186[v185] = 0;
      v2211[32] = 1;
      if (v181 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v181 >= 0x17)
      {
        v191 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v181 | 7) != 0x17)
          v191 = v181 | 7;
        v192 = v191 + 1;
        v189 = (void **)operator new(v191 + 1);
        v2213 = v181;
        v2214 = v192 | 0x8000000000000000;
        v2212 = v189;
      }
      else
      {
        HIBYTE(v2214) = v181;
        v189 = (void **)&v2212;
        if (!v181)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v190 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_310;
          goto LABEL_316;
        }
      }
      memmove(v189, v180, v181);
      *((_BYTE *)v189 + v181) = 0;
      v2215 = 1;
      v190 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_310:
        a2 = v2153;
        if (!v2211[32])
          goto LABEL_319;
        goto LABEL_317;
      }
LABEL_316:
      operator delete(v2212);
      a2 = v2153;
      if (!v2211[32])
        goto LABEL_319;
LABEL_317:
      if ((v2211[31] & 0x80000000) != 0)
        operator delete(*(void **)&v2211[8]);
LABEL_319:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v169 && *(_QWORD *)(v169 + 24))
      {
        v193 = _os_log_pack_size();
        v194 = (std::__shared_weak_count_vtbl *)operator new(v193, (std::align_val_t)8uLL);
        v195 = (std::__shared_weak_count *)operator new();
        v196 = v195;
        v195->__shared_owners_ = 0;
        v197 = (unint64_t *)&v195->__shared_owners_;
        v195->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v195->__shared_weak_owners_ = 0;
        v195[1].__vftable = v194;
        *(_QWORD *)v2211 = v194;
        *(_QWORD *)&v2211[8] = v194;
        *(_QWORD *)&v2211[16] = v195;
        do
          v198 = __ldxr(v197);
        while (__stxr(v198 + 1, v197));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        a2 = v2153;
        do
          v199 = __ldaxr(v197);
        while (__stlxr(v199 - 1, v197));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v196);
        }
        v200 = *(_QWORD *)v2211;
        v201 = _os_log_pack_fill();
        *(_DWORD *)v201 = 134217984;
        *(_QWORD *)(v201 + 4) = v175;
        v202 = (char *)operator new();
        v203 = *(unsigned __int8 *)(v179 + 39);
        v204 = v2155;
        if ((v203 & 0x80u) != 0)
        {
          v204 = *(const char **)(v179 + 16);
          v203 = *(_QWORD *)(v179 + 24);
        }
        *(_QWORD *)v202 = v200;
        *(_OWORD *)(v202 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v202 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v202 + 5) = v204;
        *((_QWORD *)v202 + 6) = v203;
        v202[56] = 1;
        v2210 = 0;
        v2207[0] = v202;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v169 + 24) + 40))(*(_QWORD *)(v169 + 24), v2207);
        v205 = v2207[0];
        v2207[0] = 0;
        if (v205)
        {
          v206 = (std::__shared_weak_count *)*((_QWORD *)v205 + 4);
          if (v206)
          {
            v207 = (unint64_t *)&v206->__shared_owners_;
            do
              v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
              std::__shared_weak_count::__release_weak(v206);
            }
          }
          v209 = (std::__shared_weak_count *)*((_QWORD *)v205 + 2);
          if (v209)
          {
            v210 = (unint64_t *)&v209->__shared_owners_;
            do
              v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
            }
          }
          MEMORY[0x212BC6398](v205, 0x10F0C40B62ED6C6);
          v212 = v2210;
          v2210 = 0;
          if (v212)
          {
            v213 = *(std::__shared_weak_count **)(v212 + 32);
            if (v213)
            {
              v214 = (unint64_t *)&v213->__shared_owners_;
              do
                v215 = __ldaxr(v214);
              while (__stlxr(v215 - 1, v214));
              if (!v215)
              {
                ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
                std::__shared_weak_count::__release_weak(v213);
              }
            }
            v216 = *(std::__shared_weak_count **)(v212 + 16);
            if (v216)
            {
              v217 = (unint64_t *)&v216->__shared_owners_;
              do
                v218 = __ldaxr(v217);
              while (__stlxr(v218 - 1, v217));
              if (!v218)
              {
                ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                std::__shared_weak_count::__release_weak(v216);
              }
            }
            MEMORY[0x212BC6398](v212, 0x10F0C40B62ED6C6);
          }
        }
        v219 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v220 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (!v221)
          {
            ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
            std::__shared_weak_count::__release_weak(v219);
          }
        }
        v222 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v223 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v224 = __ldaxr(v223);
          while (__stlxr(v224 - 1, v223));
          if (!v224)
          {
            ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
            std::__shared_weak_count::__release_weak(v222);
          }
        }
      }
      else
      {
        os_log_type_enabled(v190, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 134217984;
        *(_QWORD *)&v2211[4] = v175;
        v225 = (void *)_os_log_send_and_compose_impl();
        if (v225)
          free(v225);
      }
      if (v167)
      {
        v226 = (_QWORD *)a2[1];
        v229 = (_QWORD *)*v226;
        v227 = v226 + 1;
        v228 = v229;
        if (v229 == v227)
        {
          v230 = 0;
        }
        else
        {
          v230 = 0;
          do
          {
            v231 = (_QWORD *)v228[1];
            v232 = v228;
            if (v231)
            {
              do
              {
                v233 = v231;
                v231 = (_QWORD *)*v231;
              }
              while (v231);
            }
            else
            {
              do
              {
                v233 = (_QWORD *)v232[2];
                _ZF = *v233 == (_QWORD)v232;
                v232 = v233;
              }
              while (!_ZF);
            }
            v230 += *(unsigned __int8 *)(v228[6] + 528);
            v228 = v233;
          }
          while (v233 != v227);
        }
        sub_20E8C003C((uint64_t)&v2185, "Num tracks: %zu", v230);
        sub_20E863570((uint64_t)&v2185);
      }
      sub_20E863570((uint64_t)&v2185);
      v234 = v2193;
      if (!v2193)
        goto LABEL_382;
      v235 = (unint64_t *)&v2193->__shared_owners_;
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      if (v236)
        goto LABEL_382;
      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
      std::__shared_weak_count::__release_weak(v234);
      if (*(double *)(v2152 + 72) <= 0.0)
        goto LABEL_1207;
LABEL_383:
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_475;
      v237 = *(unsigned __int8 *)(v2180 + 72);
      v238 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v239 = v238;
      if (!v237 && v238 == 0)
        goto LABEL_475;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1229;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v241 = *(_QWORD *)v2185;
      v242 = *(_QWORD *)v2185 + 16;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v244 = *(const char **)(v241 + 16);
        v243 = *(_QWORD *)(v241 + 24);
        v246 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v246 & 1) != 0)
          goto LABEL_392;
      }
      else
      {
        v243 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v244 = (const char *)(*(_QWORD *)v2185 + 16);
        v245 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v245 & 1) != 0)
          goto LABEL_392;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_392:
      if (byte_254A4A4F8[23] >= 0)
        v247 = byte_254A4A4F8;
      else
        v247 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v248 = byte_254A4A4F8[23];
      else
        v248 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v247, v244);
      if (v248 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v248 >= 0x17)
      {
        v250 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v248 | 7) != 0x17)
          v250 = v248 | 7;
        v251 = v250 + 1;
        v249 = operator new(v250 + 1);
        *(_QWORD *)&v2211[16] = v248;
        *(_QWORD *)&v2211[24] = v251 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v249;
LABEL_405:
        memmove(v249, v247, v248);
        goto LABEL_406;
      }
      v2211[31] = v248;
      v249 = &v2211[8];
      if (v248)
        goto LABEL_405;
LABEL_406:
      v249[v248] = 0;
      v2211[32] = 1;
      if (v243 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v243 >= 0x17)
      {
        v254 = (v243 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v243 | 7) != 0x17)
          v254 = v243 | 7;
        v255 = v254 + 1;
        v252 = (void **)operator new(v254 + 1);
        v2213 = v243;
        v2214 = v255 | 0x8000000000000000;
        v2212 = v252;
      }
      else
      {
        HIBYTE(v2214) = v243;
        v252 = (void **)&v2212;
        if (!v243)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v253 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_410;
          goto LABEL_416;
        }
      }
      memmove(v252, v244, v243);
      *((_BYTE *)v252 + v243) = 0;
      v2215 = 1;
      v253 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_410:
        a2 = v2153;
        if (!v2211[32])
          goto LABEL_419;
        goto LABEL_417;
      }
LABEL_416:
      operator delete(v2212);
      a2 = v2153;
      if (!v2211[32])
        goto LABEL_419;
LABEL_417:
      if ((v2211[31] & 0x80000000) != 0)
        operator delete(*(void **)&v2211[8]);
LABEL_419:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v239 && *(_QWORD *)(v239 + 24))
      {
        v256 = _os_log_pack_size();
        v257 = (std::__shared_weak_count_vtbl *)operator new(v256, (std::align_val_t)8uLL);
        v258 = (std::__shared_weak_count *)operator new();
        v259 = v258;
        v258->__shared_owners_ = 0;
        v260 = (unint64_t *)&v258->__shared_owners_;
        v258->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v258->__shared_weak_owners_ = 0;
        v258[1].__vftable = v257;
        *(_QWORD *)v2211 = v257;
        *(_QWORD *)&v2211[8] = v257;
        *(_QWORD *)&v2211[16] = v258;
        do
          v261 = __ldxr(v260);
        while (__stxr(v261 + 1, v260));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        a2 = v2153;
        do
          v262 = __ldaxr(v260);
        while (__stlxr(v262 - 1, v260));
        if (!v262)
        {
          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
          std::__shared_weak_count::__release_weak(v259);
        }
        v263 = *(_QWORD *)v2211;
        *(_WORD *)_os_log_pack_fill() = 0;
        v264 = (char *)operator new();
        v265 = *(unsigned __int8 *)(v241 + 39);
        if ((v265 & 0x80u) == 0)
          v266 = v242;
        else
          v266 = *(_QWORD *)(v241 + 16);
        if ((v265 & 0x80u) != 0)
          v265 = *(_QWORD *)(v241 + 24);
        *(_QWORD *)v264 = v263;
        *(_OWORD *)(v264 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v264 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v264 + 5) = v266;
        *((_QWORD *)v264 + 6) = v265;
        v264[56] = 1;
        v2210 = 0;
        v2207[0] = v264;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v239 + 24) + 40))(*(_QWORD *)(v239 + 24), v2207);
        v267 = v2207[0];
        v2207[0] = 0;
        if (v267)
        {
          v268 = (std::__shared_weak_count *)*((_QWORD *)v267 + 4);
          if (v268)
          {
            v269 = (unint64_t *)&v268->__shared_owners_;
            do
              v270 = __ldaxr(v269);
            while (__stlxr(v270 - 1, v269));
            if (!v270)
            {
              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
              std::__shared_weak_count::__release_weak(v268);
            }
          }
          v271 = (std::__shared_weak_count *)*((_QWORD *)v267 + 2);
          if (v271)
          {
            v272 = (unint64_t *)&v271->__shared_owners_;
            do
              v273 = __ldaxr(v272);
            while (__stlxr(v273 - 1, v272));
            if (!v273)
            {
              ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
              std::__shared_weak_count::__release_weak(v271);
            }
          }
          MEMORY[0x212BC6398](v267, 0x10F0C40B62ED6C6);
          v274 = v2210;
          v2210 = 0;
          if (v274)
          {
            v275 = *(std::__shared_weak_count **)(v274 + 32);
            if (v275)
            {
              v276 = (unint64_t *)&v275->__shared_owners_;
              do
                v277 = __ldaxr(v276);
              while (__stlxr(v277 - 1, v276));
              if (!v277)
              {
                ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                std::__shared_weak_count::__release_weak(v275);
              }
            }
            v278 = *(std::__shared_weak_count **)(v274 + 16);
            if (v278)
            {
              v279 = (unint64_t *)&v278->__shared_owners_;
              do
                v280 = __ldaxr(v279);
              while (__stlxr(v280 - 1, v279));
              if (!v280)
              {
                ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                std::__shared_weak_count::__release_weak(v278);
              }
            }
            MEMORY[0x212BC6398](v274, 0x10F0C40B62ED6C6);
          }
        }
        v281 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v282 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v283 = __ldaxr(v282);
          while (__stlxr(v283 - 1, v282));
          if (!v283)
          {
            ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
            std::__shared_weak_count::__release_weak(v281);
          }
        }
        v284 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v285 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v286 = __ldaxr(v285);
          while (__stlxr(v286 - 1, v285));
          if (!v286)
          {
            ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
            std::__shared_weak_count::__release_weak(v284);
          }
        }
      }
      else
      {
        os_log_type_enabled(v253, OS_LOG_TYPE_INFO);
        *(_WORD *)v2211 = 0;
        v287 = (void *)_os_log_send_and_compose_impl();
        if (v287)
          free(v287);
      }
      if (v237)
      {
        sub_20E8C003C((uint64_t)&v2185, "Remove short tracks");
        sub_20E863570((uint64_t)&v2185);
      }
      sub_20E863570((uint64_t)&v2185);
      v288 = v2193;
      if (!v2193)
        goto LABEL_475;
      v289 = (unint64_t *)&v2193->__shared_owners_;
      do
        v290 = __ldaxr(v289);
      while (__stlxr(v290 - 1, v289));
      if (v290)
      {
LABEL_475:
        v291 = (_QWORD *)a2[1];
        v293 = v291 + 1;
        v292 = (_QWORD *)*v291;
        if ((_QWORD *)*v291 != v291 + 1)
          goto LABEL_476;
        goto LABEL_571;
      }
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
      v291 = (_QWORD *)a2[1];
      v293 = v291 + 1;
      v292 = (_QWORD *)*v291;
      if ((_QWORD *)*v291 != v291 + 1)
      {
LABEL_476:
        v294 = *(_QWORD *)(a5 + 40);
        while (1)
        {
          if (v294 <= (uint64_t)(*(_QWORD *)(v292[6] + 544) - *(_QWORD *)(v292[6] + 536)) >> 5)
          {
            v300 = (_QWORD *)v292[1];
            if (v300)
            {
              do
              {
                v301 = v300;
                v300 = (_QWORD *)*v300;
              }
              while (v300);
            }
            else
            {
              do
              {
                v301 = (_QWORD *)v292[2];
                _ZF = *v301 == (_QWORD)v292;
                v292 = v301;
              }
              while (!_ZF);
            }
            goto LABEL_478;
          }
          v295 = (uint64_t *)*v293;
          if (!*v293)
            goto LABEL_571;
          v296 = v292[4];
          v297 = *((_DWORD *)v292 + 10);
          v298 = v293;
          do
          {
            v299 = v295[4];
            if (v299 < v296)
            {
              ++v295;
            }
            else if (v299 == v296)
            {
              if (*((_DWORD *)v295 + 10) < v297)
                ++v295;
              else
                v298 = v295;
            }
            else
            {
              v298 = v295;
            }
            v295 = (uint64_t *)*v295;
          }
          while (v295);
          if (v298 == v293)
            goto LABEL_571;
          v302 = v298[4];
          if (v296 < v302 || v296 == v302 && v297 < *((_DWORD *)v298 + 10))
            goto LABEL_571;
          v303 = v298[6];
          v304 = *(uint64_t **)(v303 + 536);
          v305 = *(uint64_t **)(v303 + 544);
LABEL_503:
          if (v304 != v305)
            break;
          v332 = (_QWORD *)v298[1];
          v333 = v298;
          if (v332)
          {
            do
            {
              v301 = v332;
              v332 = (_QWORD *)*v332;
            }
            while (v332);
          }
          else
          {
            do
            {
              v301 = (_QWORD *)v333[2];
              _ZF = *v301 == (_QWORD)v333;
              v333 = v301;
            }
            while (!_ZF);
          }
          if ((_QWORD *)*v291 == v298)
            *v291 = v301;
          v334 = (uint64_t *)v291[1];
          --v291[2];
          sub_20E8D2134(v334, v298);
          v335 = (std::__shared_weak_count *)v298[7];
          if (v335)
          {
            v336 = (unint64_t *)&v335->__shared_owners_;
            do
              v337 = __ldaxr(v336);
            while (__stlxr(v337 - 1, v336));
            if (!v337)
            {
              ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
              std::__shared_weak_count::__release_weak(v335);
            }
          }
          operator delete(v298);
LABEL_478:
          v292 = v301;
          if (v301 == v293)
            goto LABEL_571;
        }
        v306 = (int8x8_t)v291[4];
        if (!*(_QWORD *)&v306)
          goto LABEL_502;
        v307 = *((_DWORD *)v304 + 4);
        v308 = *((_DWORD *)v304 + 2);
        v309 = v308 ^ __ROR4__(v307, 13);
        v310 = (uint8x8_t)vcnt_s8(v306);
        v310.i16[0] = vaddlv_u8(v310);
        if (v310.u32[0] > 1uLL)
        {
          v311 = v309;
          if (*(_QWORD *)&v306 <= v309)
            v311 = v309 % *(_QWORD *)&v306;
        }
        else
        {
          v311 = (v306.i32[0] - 1) & v309;
        }
        v312 = *(int8x8_t ***)(v291[3] + 8 * v311);
        if (!v312)
          goto LABEL_502;
        v313 = *v312;
        if (!*v312)
          goto LABEL_502;
        v314 = *(unsigned int *)(v304[3] + 4);
        v315 = *v304;
        if (v310.u32[0] < 2uLL)
        {
          v316 = *(_QWORD *)&v306 - 1;
          while (1)
          {
            v318 = v313[1];
            if (*(_QWORD *)&v318 == v309)
            {
              if (v313[4].i32[0] == v307 && *(_QWORD *)&v313[2] == v315 && v313[3].i32[0] == v308)
                goto LABEL_528;
            }
            else if ((*(_QWORD *)&v318 & v316) != v311)
            {
              goto LABEL_502;
            }
            v313 = (int8x8_t *)*v313;
            if (!v313)
              goto LABEL_502;
          }
        }
        while (1)
        {
          v317 = v313[1];
          if (*(_QWORD *)&v317 == v309)
          {
            if (v313[4].i32[0] == v307 && *(_QWORD *)&v313[2] == v315 && v313[3].i32[0] == v308)
            {
LABEL_528:
              v319 = v313[6];
              if (v319)
              {
                v320 = (uint8x8_t)vcnt_s8(v319);
                v320.i16[0] = vaddlv_u8(v320);
                if (v320.u32[0] > 1uLL)
                {
                  v321 = *(unsigned int *)(v304[3] + 4);
                  if (*(_QWORD *)&v319 <= v314)
                    v321 = v314 % *(_QWORD *)&v319;
                }
                else
                {
                  v321 = (v319.i32[0] - 1) & v314;
                }
                v322 = v313 + 5;
                v323 = *(uint64_t ***)(*(_QWORD *)&v313[5] + 8 * v321);
                if (v323)
                {
                  v324 = *v323;
                  if (*v323)
                  {
                    if (v320.u32[0] < 2uLL)
                    {
                      v325 = *(_QWORD *)&v319 - 1;
                      while (1)
                      {
                        v326 = v324[1];
                        if (v326 == v314)
                        {
                          if (*((_DWORD *)v324 + 4) == (_DWORD)v314)
                            goto LABEL_549;
                        }
                        else if ((v326 & v325) != v321)
                        {
                          goto LABEL_502;
                        }
                        v324 = (uint64_t *)*v324;
                        if (!v324)
                          goto LABEL_502;
                      }
                    }
                    do
                    {
                      v327 = v324[1];
                      if (v327 == v314)
                      {
                        if (*((_DWORD *)v324 + 4) == (_DWORD)v314)
                        {
LABEL_549:
                          sub_20E8D2CE8(v322, v324, (uint64_t)v2211);
                          v328 = *(_QWORD **)v2211;
                          *(_QWORD *)v2211 = 0;
                          if (v328)
                          {
                            if (v2211[16])
                            {
                              v329 = (std::__shared_weak_count *)v328[4];
                              if (v329)
                              {
                                v330 = (unint64_t *)&v329->__shared_owners_;
                                do
                                  v331 = __ldaxr(v330);
                                while (__stlxr(v331 - 1, v330));
                                if (!v331)
                                {
                                  ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                                  std::__shared_weak_count::__release_weak(v329);
                                }
                              }
                            }
                            operator delete(v328);
                          }
                          break;
                        }
                      }
                      else
                      {
                        if (v327 >= *(_QWORD *)&v319)
                          v327 %= *(_QWORD *)&v319;
                        if (v327 != v321)
                          break;
                      }
                      v324 = (uint64_t *)*v324;
                    }
                    while (v324);
                  }
                }
              }
LABEL_502:
              v304 += 4;
              goto LABEL_503;
            }
          }
          else
          {
            if (*(_QWORD *)&v317 >= *(_QWORD *)&v306)
              *(_QWORD *)&v317 %= *(_QWORD *)&v306;
            if (*(_QWORD *)&v317 != v311)
              goto LABEL_502;
          }
          v313 = (int8x8_t *)*v313;
          if (!v313)
            goto LABEL_502;
        }
      }
LABEL_571:
      sub_20F34CD58(&v2180);
      v338 = v2153;
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_662;
      v339 = *(unsigned __int8 *)(v2180 + 72);
      v340 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v341 = v340;
      if (!v339 && v340 == 0)
        goto LABEL_662;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1231;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v343.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v344 = *(_QWORD *)v2185;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v346 = *(const char **)(v344 + 16);
        v345 = *(_QWORD *)(v344 + 24);
        v2156 = *(_QWORD *)v2185 + 16;
        v348 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v348 & 1) != 0)
          goto LABEL_580;
      }
      else
      {
        v345 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v346 = (const char *)(*(_QWORD *)v2185 + 16);
        v2156 = (uint64_t)v346;
        v347 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v347 & 1) != 0)
          goto LABEL_580;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_580:
      if (byte_254A4A4F8[23] >= 0)
        v349 = byte_254A4A4F8;
      else
        v349 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v350 = byte_254A4A4F8[23];
      else
        v350 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v349, v346);
      if (v350 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v350 >= 0x17)
      {
        v352 = (v350 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v350 | 7) != 0x17)
          v352 = v350 | 7;
        v353 = v352 + 1;
        v351 = operator new(v352 + 1);
        *(_QWORD *)&v2211[16] = v350;
        *(_QWORD *)&v2211[24] = v353 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v351;
LABEL_593:
        memmove(v351, v349, v350);
        goto LABEL_594;
      }
      v2211[31] = v350;
      v351 = &v2211[8];
      if (v350)
        goto LABEL_593;
LABEL_594:
      v351[v350] = 0;
      v2211[32] = 1;
      if (v345 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v345 >= 0x17)
      {
        v356 = (v345 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v345 | 7) != 0x17)
          v356 = v345 | 7;
        v357 = v356 + 1;
        v354 = (void **)operator new(v356 + 1);
        v2213 = v345;
        v2214 = v357 | 0x8000000000000000;
        v2212 = v354;
      }
      else
      {
        HIBYTE(v2214) = v345;
        v354 = (void **)&v2212;
        if (!v345)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v355 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_598;
          goto LABEL_604;
        }
      }
      memmove(v354, v346, v345);
      *((_BYTE *)v354 + v345) = 0;
      v2215 = 1;
      v355 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_598:
        if (v2211[32])
          goto LABEL_605;
        goto LABEL_607;
      }
LABEL_604:
      operator delete(v2212);
      if (v2211[32])
      {
LABEL_605:
        if ((v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
      }
LABEL_607:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v341 && *(_QWORD *)(v341 + 24))
      {
        v358 = _os_log_pack_size();
        v359 = (std::__shared_weak_count_vtbl *)operator new(v358, (std::align_val_t)8uLL);
        v360 = (std::__shared_weak_count *)operator new();
        v361 = v360;
        v360->__shared_owners_ = 0;
        v362 = (unint64_t *)&v360->__shared_owners_;
        v360->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v360->__shared_weak_owners_ = 0;
        v360[1].__vftable = v359;
        *(_QWORD *)v2211 = v359;
        *(_QWORD *)&v2211[8] = v359;
        *(_QWORD *)&v2211[16] = v360;
        do
          v363 = __ldxr(v362);
        while (__stxr(v363 + 1, v362));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        do
          v364 = __ldaxr(v362);
        while (__stlxr(v364 - 1, v362));
        if (!v364)
        {
          ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
          std::__shared_weak_count::__release_weak(v361);
        }
        v365 = *(_QWORD *)v2211;
        v366 = _os_log_pack_fill();
        *(_DWORD *)v366 = 134217984;
        *(double *)(v366 + 4) = (double)(v343.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v367 = (char *)operator new();
        v368 = *(unsigned __int8 *)(v344 + 39);
        v369 = v2156;
        if ((v368 & 0x80u) != 0)
        {
          v369 = *(_QWORD *)(v344 + 16);
          v368 = *(_QWORD *)(v344 + 24);
        }
        *(_QWORD *)v367 = v365;
        *(_OWORD *)(v367 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v367 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v367 + 5) = v369;
        *((_QWORD *)v367 + 6) = v368;
        v367[56] = 1;
        v2210 = 0;
        v2207[0] = v367;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v341 + 24) + 40))(*(_QWORD *)(v341 + 24), v2207);
        v370 = v2207[0];
        v2207[0] = 0;
        v338 = v2153;
        if (v370)
        {
          v371 = (std::__shared_weak_count *)*((_QWORD *)v370 + 4);
          if (v371)
          {
            v372 = (unint64_t *)&v371->__shared_owners_;
            do
              v373 = __ldaxr(v372);
            while (__stlxr(v373 - 1, v372));
            if (!v373)
            {
              ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
              std::__shared_weak_count::__release_weak(v371);
            }
          }
          v374 = (std::__shared_weak_count *)*((_QWORD *)v370 + 2);
          if (v374)
          {
            v375 = (unint64_t *)&v374->__shared_owners_;
            do
              v376 = __ldaxr(v375);
            while (__stlxr(v376 - 1, v375));
            if (!v376)
            {
              ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
              std::__shared_weak_count::__release_weak(v374);
            }
          }
          MEMORY[0x212BC6398](v370, 0x10F0C40B62ED6C6);
          v377 = v2210;
          v2210 = 0;
          if (v377)
          {
            v378 = *(std::__shared_weak_count **)(v377 + 32);
            if (v378)
            {
              v379 = (unint64_t *)&v378->__shared_owners_;
              do
                v380 = __ldaxr(v379);
              while (__stlxr(v380 - 1, v379));
              if (!v380)
              {
                ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
                std::__shared_weak_count::__release_weak(v378);
              }
            }
            v381 = *(std::__shared_weak_count **)(v377 + 16);
            if (v381)
            {
              v382 = (unint64_t *)&v381->__shared_owners_;
              do
                v383 = __ldaxr(v382);
              while (__stlxr(v383 - 1, v382));
              if (!v383)
              {
                ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                std::__shared_weak_count::__release_weak(v381);
              }
            }
            MEMORY[0x212BC6398](v377, 0x10F0C40B62ED6C6);
          }
        }
        v384 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v385 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v386 = __ldaxr(v385);
          while (__stlxr(v386 - 1, v385));
          if (!v386)
          {
            ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
            std::__shared_weak_count::__release_weak(v384);
          }
        }
        v387 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v388 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v389 = __ldaxr(v388);
          while (__stlxr(v389 - 1, v388));
          if (!v389)
          {
            ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
            std::__shared_weak_count::__release_weak(v387);
          }
        }
      }
      else
      {
        os_log_type_enabled(v355, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 134217984;
        *(double *)&v2211[4] = (double)(v343.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v390 = (void *)_os_log_send_and_compose_impl();
        v338 = v2153;
        if (v390)
          free(v390);
      }
      if (v339)
      {
        v391.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v391.__d_.__rep_ - v343.__d_.__rep_) / 1000000000.0);
        sub_20E863570((uint64_t)&v2185);
      }
      else
      {
        v391.__d_.__rep_ = v343.__d_.__rep_;
      }
      sub_20E863570((uint64_t)&v2185);
      v2147.__d_.__rep_ = v391.__d_.__rep_;
      v392 = v2193;
      if (v2193)
      {
        v393 = (unint64_t *)&v2193->__shared_owners_;
        do
          v394 = __ldaxr(v393);
        while (__stlxr(v394 - 1, v393));
        if (!v394)
        {
          ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
          std::__shared_weak_count::__release_weak(v392);
        }
      }
LABEL_662:
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_772;
      v395 = *(unsigned __int8 *)(v2180 + 72);
      v396 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v397 = v396;
      if (!v395 && v396 == 0)
        goto LABEL_772;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1232;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v399 = (_QWORD *)v338[1];
      v402 = (_QWORD *)*v399;
      v400 = v399 + 1;
      v401 = v402;
      if (v402 == v400)
      {
        v403 = 0;
      }
      else
      {
        v403 = 0;
        do
        {
          v404 = (_QWORD *)v401[1];
          v405 = v401;
          if (v404)
          {
            do
            {
              v406 = v404;
              v404 = (_QWORD *)*v404;
            }
            while (v404);
          }
          else
          {
            do
            {
              v406 = (_QWORD *)v405[2];
              _ZF = *v406 == (_QWORD)v405;
              v405 = v406;
            }
            while (!_ZF);
          }
          v403 += *(unsigned __int8 *)(v401[6] + 528);
          v401 = v406;
        }
        while (v406 != v400);
      }
      v407 = *(_QWORD *)v2185;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v409 = *(const char **)(v407 + 16);
        v408 = *(_QWORD *)(v407 + 24);
        v2157 = *(_QWORD *)v2185 + 16;
        v411 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v411 & 1) != 0)
          goto LABEL_681;
      }
      else
      {
        v408 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v409 = (const char *)(*(_QWORD *)v2185 + 16);
        v2157 = (uint64_t)v409;
        v410 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v410 & 1) != 0)
          goto LABEL_681;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_681:
      if (byte_254A4A4F8[23] >= 0)
        v412 = byte_254A4A4F8;
      else
        v412 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v413 = byte_254A4A4F8[23];
      else
        v413 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v412, v409);
      if (v413 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v413 >= 0x17)
      {
        v415 = (v413 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v413 | 7) != 0x17)
          v415 = v413 | 7;
        v416 = v415 + 1;
        v414 = operator new(v415 + 1);
        *(_QWORD *)&v2211[16] = v413;
        *(_QWORD *)&v2211[24] = v416 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v414;
LABEL_694:
        memmove(v414, v412, v413);
        goto LABEL_695;
      }
      v2211[31] = v413;
      v414 = &v2211[8];
      if (v413)
        goto LABEL_694;
LABEL_695:
      v414[v413] = 0;
      v2211[32] = 1;
      if (v408 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v408 >= 0x17)
      {
        v419 = (v408 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v408 | 7) != 0x17)
          v419 = v408 | 7;
        v420 = v419 + 1;
        v417 = (void **)operator new(v419 + 1);
        v2213 = v408;
        v2214 = v420 | 0x8000000000000000;
        v2212 = v417;
      }
      else
      {
        HIBYTE(v2214) = v408;
        v417 = (void **)&v2212;
        if (!v408)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v418 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_699;
          goto LABEL_705;
        }
      }
      memmove(v417, v409, v408);
      *((_BYTE *)v417 + v408) = 0;
      v2215 = 1;
      v418 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_699:
        v338 = v2153;
        if (v2211[32])
          goto LABEL_706;
        goto LABEL_708;
      }
LABEL_705:
      operator delete(v2212);
      v338 = v2153;
      if (v2211[32])
      {
LABEL_706:
        if ((v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
      }
LABEL_708:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v397 && *(_QWORD *)(v397 + 24))
      {
        v421 = _os_log_pack_size();
        v422 = (std::__shared_weak_count_vtbl *)operator new(v421, (std::align_val_t)8uLL);
        v423 = (std::__shared_weak_count *)operator new();
        v424 = v423;
        v423->__shared_owners_ = 0;
        v425 = (unint64_t *)&v423->__shared_owners_;
        v423->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v423->__shared_weak_owners_ = 0;
        v423[1].__vftable = v422;
        *(_QWORD *)v2211 = v422;
        *(_QWORD *)&v2211[8] = v422;
        *(_QWORD *)&v2211[16] = v423;
        do
          v426 = __ldxr(v425);
        while (__stxr(v426 + 1, v425));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        v338 = v2153;
        do
          v427 = __ldaxr(v425);
        while (__stlxr(v427 - 1, v425));
        if (!v427)
        {
          ((void (*)(std::__shared_weak_count *))v423->__on_zero_shared)(v423);
          std::__shared_weak_count::__release_weak(v424);
        }
        v428 = *(_QWORD *)v2211;
        v429 = _os_log_pack_fill();
        *(_DWORD *)v429 = 134217984;
        *(_QWORD *)(v429 + 4) = v403;
        v430 = (char *)operator new();
        v431 = *(unsigned __int8 *)(v407 + 39);
        v432 = v2157;
        if ((v431 & 0x80u) != 0)
        {
          v432 = *(_QWORD *)(v407 + 16);
          v431 = *(_QWORD *)(v407 + 24);
        }
        *(_QWORD *)v430 = v428;
        *(_OWORD *)(v430 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v430 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v430 + 5) = v432;
        *((_QWORD *)v430 + 6) = v431;
        v430[56] = 1;
        v2210 = 0;
        v2207[0] = v430;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v397 + 24) + 40))(*(_QWORD *)(v397 + 24), v2207);
        v433 = v2207[0];
        v2207[0] = 0;
        if (v433)
        {
          v434 = (std::__shared_weak_count *)*((_QWORD *)v433 + 4);
          if (v434)
          {
            v435 = (unint64_t *)&v434->__shared_owners_;
            do
              v436 = __ldaxr(v435);
            while (__stlxr(v436 - 1, v435));
            if (!v436)
            {
              ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
              std::__shared_weak_count::__release_weak(v434);
            }
          }
          v437 = (std::__shared_weak_count *)*((_QWORD *)v433 + 2);
          if (v437)
          {
            v438 = (unint64_t *)&v437->__shared_owners_;
            do
              v439 = __ldaxr(v438);
            while (__stlxr(v439 - 1, v438));
            if (!v439)
            {
              ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
              std::__shared_weak_count::__release_weak(v437);
            }
          }
          MEMORY[0x212BC6398](v433, 0x10F0C40B62ED6C6);
          v440 = v2210;
          v2210 = 0;
          if (v440)
          {
            v441 = *(std::__shared_weak_count **)(v440 + 32);
            if (v441)
            {
              v442 = (unint64_t *)&v441->__shared_owners_;
              do
                v443 = __ldaxr(v442);
              while (__stlxr(v443 - 1, v442));
              if (!v443)
              {
                ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
                std::__shared_weak_count::__release_weak(v441);
              }
            }
            v444 = *(std::__shared_weak_count **)(v440 + 16);
            if (v444)
            {
              v445 = (unint64_t *)&v444->__shared_owners_;
              do
                v446 = __ldaxr(v445);
              while (__stlxr(v446 - 1, v445));
              if (!v446)
              {
                ((void (*)(std::__shared_weak_count *))v444->__on_zero_shared)(v444);
                std::__shared_weak_count::__release_weak(v444);
              }
            }
            MEMORY[0x212BC6398](v440, 0x10F0C40B62ED6C6);
          }
        }
        v447 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v448 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v449 = __ldaxr(v448);
          while (__stlxr(v449 - 1, v448));
          if (!v449)
          {
            ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
            std::__shared_weak_count::__release_weak(v447);
          }
        }
        v450 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v451 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v452 = __ldaxr(v451);
          while (__stlxr(v452 - 1, v451));
          if (!v452)
          {
            ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
            std::__shared_weak_count::__release_weak(v450);
          }
        }
      }
      else
      {
        os_log_type_enabled(v418, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 134217984;
        *(_QWORD *)&v2211[4] = v403;
        v453 = (void *)_os_log_send_and_compose_impl();
        if (v453)
          free(v453);
      }
      if (v395)
      {
        v454 = (_QWORD *)v338[1];
        v457 = (_QWORD *)*v454;
        v455 = v454 + 1;
        v456 = v457;
        if (v457 == v455)
        {
          v458 = 0;
        }
        else
        {
          v458 = 0;
          do
          {
            v459 = (_QWORD *)v456[1];
            v460 = v456;
            if (v459)
            {
              do
              {
                v461 = v459;
                v459 = (_QWORD *)*v459;
              }
              while (v459);
            }
            else
            {
              do
              {
                v461 = (_QWORD *)v460[2];
                _ZF = *v461 == (_QWORD)v460;
                v460 = v461;
              }
              while (!_ZF);
            }
            v458 += *(unsigned __int8 *)(v456[6] + 528);
            v456 = v461;
          }
          while (v461 != v455);
        }
        sub_20E8C003C((uint64_t)&v2185, "Num tracks: %zu", v458);
        sub_20E863570((uint64_t)&v2185);
      }
      sub_20E863570((uint64_t)&v2185);
      v462 = v2193;
      if (v2193)
      {
        v463 = (unint64_t *)&v2193->__shared_owners_;
        do
          v464 = __ldaxr(v463);
        while (__stlxr(v464 - 1, v463));
        if (!v464)
        {
          ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
          std::__shared_weak_count::__release_weak(v462);
        }
      }
LABEL_772:
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_864;
      v465 = *(unsigned __int8 *)(v2180 + 72);
      v466 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v467 = v466;
      if (!v465 && v466 == 0)
        goto LABEL_864;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1234;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v469 = *(_QWORD *)v2185;
      v470 = *(_QWORD *)v2185 + 16;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v472 = *(const char **)(v469 + 16);
        v471 = *(_QWORD *)(v469 + 24);
        v474 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v474 & 1) != 0)
          goto LABEL_781;
      }
      else
      {
        v471 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v472 = (const char *)(*(_QWORD *)v2185 + 16);
        v473 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v473 & 1) != 0)
          goto LABEL_781;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_781:
      if (byte_254A4A4F8[23] >= 0)
        v475 = byte_254A4A4F8;
      else
        v475 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v476 = byte_254A4A4F8[23];
      else
        v476 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v475, v472);
      if (v476 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v476 >= 0x17)
      {
        v478 = (v476 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v476 | 7) != 0x17)
          v478 = v476 | 7;
        v479 = v478 + 1;
        v477 = operator new(v478 + 1);
        *(_QWORD *)&v2211[16] = v476;
        *(_QWORD *)&v2211[24] = v479 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v477;
LABEL_794:
        memmove(v477, v475, v476);
        goto LABEL_795;
      }
      v2211[31] = v476;
      v477 = &v2211[8];
      if (v476)
        goto LABEL_794;
LABEL_795:
      v477[v476] = 0;
      v2211[32] = 1;
      if (v471 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v471 >= 0x17)
      {
        v482 = (v471 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v471 | 7) != 0x17)
          v482 = v471 | 7;
        v483 = v482 + 1;
        v480 = (void **)operator new(v482 + 1);
        v2213 = v471;
        v2214 = v483 | 0x8000000000000000;
        v2212 = v480;
      }
      else
      {
        HIBYTE(v2214) = v471;
        v480 = (void **)&v2212;
        if (!v471)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v481 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_799;
          goto LABEL_805;
        }
      }
      memmove(v480, v472, v471);
      *((_BYTE *)v480 + v471) = 0;
      v2215 = 1;
      v481 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_799:
        v338 = v2153;
        if (!v2211[32])
          goto LABEL_808;
        goto LABEL_806;
      }
LABEL_805:
      operator delete(v2212);
      v338 = v2153;
      if (!v2211[32])
        goto LABEL_808;
LABEL_806:
      if ((v2211[31] & 0x80000000) != 0)
        operator delete(*(void **)&v2211[8]);
LABEL_808:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v467 && *(_QWORD *)(v467 + 24))
      {
        v484 = _os_log_pack_size();
        v485 = (std::__shared_weak_count_vtbl *)operator new(v484, (std::align_val_t)8uLL);
        v486 = (std::__shared_weak_count *)operator new();
        v487 = v486;
        v486->__shared_owners_ = 0;
        v488 = (unint64_t *)&v486->__shared_owners_;
        v486->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v486->__shared_weak_owners_ = 0;
        v486[1].__vftable = v485;
        *(_QWORD *)v2211 = v485;
        *(_QWORD *)&v2211[8] = v485;
        *(_QWORD *)&v2211[16] = v486;
        do
          v489 = __ldxr(v488);
        while (__stxr(v489 + 1, v488));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        v338 = v2153;
        do
          v490 = __ldaxr(v488);
        while (__stlxr(v490 - 1, v488));
        if (!v490)
        {
          ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
          std::__shared_weak_count::__release_weak(v487);
        }
        v491 = *(_QWORD *)v2211;
        *(_WORD *)_os_log_pack_fill() = 0;
        v492 = (char *)operator new();
        v493 = *(unsigned __int8 *)(v469 + 39);
        if ((v493 & 0x80u) == 0)
          v494 = v470;
        else
          v494 = *(_QWORD *)(v469 + 16);
        if ((v493 & 0x80u) != 0)
          v493 = *(_QWORD *)(v469 + 24);
        *(_QWORD *)v492 = v491;
        *(_OWORD *)(v492 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v492 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v492 + 5) = v494;
        *((_QWORD *)v492 + 6) = v493;
        v492[56] = 1;
        v2210 = 0;
        v2207[0] = v492;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v467 + 24) + 40))(*(_QWORD *)(v467 + 24), v2207);
        v495 = v2207[0];
        v2207[0] = 0;
        if (v495)
        {
          v496 = (std::__shared_weak_count *)*((_QWORD *)v495 + 4);
          if (v496)
          {
            v497 = (unint64_t *)&v496->__shared_owners_;
            do
              v498 = __ldaxr(v497);
            while (__stlxr(v498 - 1, v497));
            if (!v498)
            {
              ((void (*)(std::__shared_weak_count *))v496->__on_zero_shared)(v496);
              std::__shared_weak_count::__release_weak(v496);
            }
          }
          v499 = (std::__shared_weak_count *)*((_QWORD *)v495 + 2);
          if (v499)
          {
            v500 = (unint64_t *)&v499->__shared_owners_;
            do
              v501 = __ldaxr(v500);
            while (__stlxr(v501 - 1, v500));
            if (!v501)
            {
              ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
              std::__shared_weak_count::__release_weak(v499);
            }
          }
          MEMORY[0x212BC6398](v495, 0x10F0C40B62ED6C6);
          v502 = v2210;
          v2210 = 0;
          if (v502)
          {
            v503 = *(std::__shared_weak_count **)(v502 + 32);
            if (v503)
            {
              v504 = (unint64_t *)&v503->__shared_owners_;
              do
                v505 = __ldaxr(v504);
              while (__stlxr(v505 - 1, v504));
              if (!v505)
              {
                ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
                std::__shared_weak_count::__release_weak(v503);
              }
            }
            v506 = *(std::__shared_weak_count **)(v502 + 16);
            if (v506)
            {
              v507 = (unint64_t *)&v506->__shared_owners_;
              do
                v508 = __ldaxr(v507);
              while (__stlxr(v508 - 1, v507));
              if (!v508)
              {
                ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
                std::__shared_weak_count::__release_weak(v506);
              }
            }
            MEMORY[0x212BC6398](v502, 0x10F0C40B62ED6C6);
          }
        }
        v509 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v510 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v511 = __ldaxr(v510);
          while (__stlxr(v511 - 1, v510));
          if (!v511)
          {
            ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
            std::__shared_weak_count::__release_weak(v509);
          }
        }
        v512 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v513 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v514 = __ldaxr(v513);
          while (__stlxr(v514 - 1, v513));
          if (!v514)
          {
            ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
            std::__shared_weak_count::__release_weak(v512);
          }
        }
      }
      else
      {
        os_log_type_enabled(v481, OS_LOG_TYPE_INFO);
        *(_WORD *)v2211 = 0;
        v515 = (void *)_os_log_send_and_compose_impl();
        if (v515)
          free(v515);
      }
      if (v465)
      {
        sub_20E8C003C((uint64_t)&v2185, "Prune low-score tracks");
        sub_20E863570((uint64_t)&v2185);
      }
      sub_20E863570((uint64_t)&v2185);
      v516 = v2193;
      if (!v2193)
        goto LABEL_864;
      v517 = (unint64_t *)&v2193->__shared_owners_;
      do
        v518 = __ldaxr(v517);
      while (__stlxr(v518 - 1, v517));
      if (v518)
      {
LABEL_864:
        v519 = *v338;
        v520 = *(_QWORD *)(*v338 + 64);
        rep = 0;
        v2187 = 0;
        v2185 = 0;
        if (!v520)
          goto LABEL_869;
        goto LABEL_865;
      }
      ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
      std::__shared_weak_count::__release_weak(v516);
      v519 = *v338;
      v520 = *(_QWORD *)(*v338 + 64);
      rep = 0;
      v2187 = 0;
      v2185 = 0;
      if (!v520)
      {
LABEL_869:
        v521 = 0;
        v522 = *(_QWORD **)(v519 + 48);
        v523 = (_QWORD *)(v519 + 56);
        v524 = 0;
        if (v522 == (_QWORD *)(v519 + 56))
          goto LABEL_870;
        do
        {
LABEL_875:
          *v524++ = *((_DWORD *)v522 + 10);
          v532 = (_QWORD *)v522[1];
          if (v532)
          {
            do
            {
              v533 = v532;
              v532 = (_QWORD *)*v532;
            }
            while (v532);
          }
          else
          {
            do
            {
              v533 = (_QWORD *)v522[2];
              _ZF = *v533 == (_QWORD)v522;
              v522 = v533;
            }
            while (!_ZF);
          }
          v522 = v533;
        }
        while (v533 != v523);
        goto LABEL_870;
      }
LABEL_865:
      if (v520 >> 62)
        sub_20E867F44();
      v521 = (char *)operator new(4 * v520);
      v2185 = v521;
      v2187 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)&v521[4 * v520];
      bzero(v521, 4 * v520);
      v520 = (unint64_t)&v521[4 * v520];
      rep = v520;
      v522 = *(_QWORD **)(v519 + 48);
      v523 = (_QWORD *)(v519 + 56);
      v524 = v521;
      if (v522 != (_QWORD *)(v519 + 56))
        goto LABEL_875;
LABEL_870:
      v525 = (_QWORD *)v338[1];
      v526 = v525[2];
      if (!v526)
      {
        v530 = 0;
        v2144 = 0;
        v531 = (_QWORD *)*v525;
        v2148 = 0;
        v2158 = v525 + 1;
        if ((_QWORD *)*v525 == v525 + 1)
          goto LABEL_913;
LABEL_882:
        v534 = *(double *)(v2152 + 48);
        v535 = *(double *)(v2152 + 56);
        v536 = *(double *)(v2152 + 64);
        v530 = (char *)v2148;
        do
        {
          v537 = v531[6];
          v538 = *(_QWORD *)(v537 + 536);
          v539 = *(_QWORD *)(v537 + 544);
          if (v538 == v539)
          {
            v548 = 0;
            v549 = (uint64_t)(v520 - (_QWORD)v521) >> 2;
            v542 = 0.0;
            v550 = *(_QWORD *)(v537 + 536);
          }
          else
          {
            v540 = v538 + 32;
            if (v538 + 32 == v539)
            {
              v542 = 0.0;
            }
            else
            {
              v541 = *(float64x2_t *)(*(_QWORD *)(v538 + 24) + 16);
              v542 = 0.0;
              do
              {
                v543 = *(float64x2_t *)(*(_QWORD *)(v540 + 24) + 16);
                _D3 = vsubq_f64(v541, v543).f64[1];
                __asm { FMLA            D2, D3, V0.D[1] }
                v542 = v542 + sqrt(_D2);
                v540 += 32;
                v541 = v543;
              }
              while (v540 != v539);
            }
            v548 = 0;
            v549 = (uint64_t)(v520 - (_QWORD)v521) >> 2;
            do
            {
              v551 = wmemchr((__int32 *)v521, *(_DWORD *)(v538 + 8), (uint64_t)(v520 - (_QWORD)v521) >> 2);
              if (v551)
                v552 = v551;
              else
                v552 = (__int32 *)v520;
              v553 = ((char *)v552 - v521) >> 2;
              if (v548 <= v553)
                v554 = v553;
              else
                v554 = v548;
              if (v553 >= v549)
                v555 = v549;
              else
                v555 = v553;
              if (v553 != (uint64_t)(v520 - (_QWORD)v521) >> 2)
              {
                v549 = v555;
                v548 = v554;
              }
              v538 += 32;
            }
            while (v538 != v539);
            v550 = *(_QWORD *)(v537 + 544);
            v538 = *(_QWORD *)(v537 + 536);
          }
          v556 = v548 - v549;
          if (v548 < v549)
            v556 = 0;
          *(_OWORD *)v2211 = *((_OWORD *)v531 + 2);
          *(double *)v530 = v536 * (double)v556 + v535 * v542 + v534 * (double)(unint64_t)((v550 - v538) >> 5);
          *((_QWORD *)v530 + 1) = *(_QWORD *)v2211;
          *((_DWORD *)v530 + 4) = *(_DWORD *)&v2211[8];
          v557 = (_QWORD *)v531[1];
          if (v557)
          {
            do
            {
              v558 = v557;
              v557 = (_QWORD *)*v557;
            }
            while (v557);
          }
          else
          {
            do
            {
              v558 = (_QWORD *)v531[2];
              _ZF = *v558 == (_QWORD)v531;
              v531 = v558;
            }
            while (!_ZF);
          }
          v530 += 24;
          v531 = v558;
        }
        while (v558 != v2158);
        goto LABEL_913;
      }
      if (v526 >= 0xAAAAAAAAAAAAAABLL)
        sub_20E867F44();
      v527 = 24 * v526;
      v528 = (char *)operator new(24 * v526);
      v529 = 24 * ((v527 - 24) / 0x18uLL) + 24;
      bzero(v528, v529);
      v2144 = &v528[v529];
      v530 = v528;
      v531 = (_QWORD *)*v525;
      v2148 = (uint64_t)v528;
      v2158 = v525 + 1;
      if ((_QWORD *)*v525 != v525 + 1)
        goto LABEL_882;
LABEL_913:
      v559 = (unint64_t)v2144;
      if (v530 == v2144)
      {
        v560 = v2152;
        a2 = v2153;
      }
      else
      {
        a2 = v2153;
        v560 = v2152;
        v559 = (unint64_t)v530;
      }
      v561 = (char *)v2148;
      v562 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v559 - v2148) >> 3);
      v563 = 126 - 2 * __clz(v562);
      if (v559 == v2148)
        v564 = 0;
      else
        v564 = v563;
      sub_20F386DF4(v2148, v559, v564, 1);
      v565 = (unint64_t)(*(double *)(v560 + 72) * (double)v562);
      if (v565)
      {
        for (i = 0; i != v565; ++i)
        {
          v567 = (_QWORD *)a2[1];
          v568 = (uint64_t *)v567[1];
          if (!v568)
            continue;
          v569 = &v561[24 * i];
          v570 = *((_QWORD *)v569 + 1);
          v571 = *((_DWORD *)v569 + 4);
          v572 = v567 + 1;
          do
          {
            v573 = v568[4];
            if (v573 < v570)
            {
              ++v568;
            }
            else if (v573 == v570)
            {
              if (*((_DWORD *)v568 + 10) < v571)
                ++v568;
              else
                v572 = v568;
            }
            else
            {
              v572 = v568;
            }
            v568 = (uint64_t *)*v568;
          }
          while (v568);
          if (v572 == v567 + 1)
            continue;
          v574 = v572[4];
          if (v570 < v574 || v570 == v574 && v571 < *((_DWORD *)v572 + 10))
            continue;
          v575 = v572[6];
          v576 = *(uint64_t **)(v575 + 536);
          v577 = *(uint64_t **)(v575 + 544);
LABEL_940:
          if (v576 != v577)
          {
            v578 = (int8x8_t)v567[4];
            if (!*(_QWORD *)&v578)
              goto LABEL_939;
            v579 = *((_DWORD *)v576 + 4);
            v580 = *((_DWORD *)v576 + 2);
            v581 = v580 ^ __ROR4__(v579, 13);
            v582 = (uint8x8_t)vcnt_s8(v578);
            v582.i16[0] = vaddlv_u8(v582);
            if (v582.u32[0] > 1uLL)
            {
              v583 = v581;
              if (*(_QWORD *)&v578 <= v581)
                v583 = v581 % *(_QWORD *)&v578;
            }
            else
            {
              v583 = (v578.i32[0] - 1) & v581;
            }
            v584 = *(int8x8_t ***)(v567[3] + 8 * v583);
            if (!v584)
              goto LABEL_939;
            v585 = *v584;
            if (!*v584)
              goto LABEL_939;
            v586 = *(unsigned int *)(v576[3] + 4);
            v587 = *v576;
            if (v582.u32[0] < 2uLL)
            {
              v588 = *(_QWORD *)&v578 - 1;
              while (1)
              {
                v590 = v585[1];
                if (*(_QWORD *)&v590 == v581)
                {
                  if (v585[4].i32[0] == v579 && *(_QWORD *)&v585[2] == v587 && v585[3].i32[0] == v580)
                    goto LABEL_965;
                }
                else if ((*(_QWORD *)&v590 & v588) != v583)
                {
                  goto LABEL_939;
                }
                v585 = (int8x8_t *)*v585;
                if (!v585)
                  goto LABEL_939;
              }
            }
            while (1)
            {
              v589 = v585[1];
              if (*(_QWORD *)&v589 == v581)
              {
                if (v585[4].i32[0] == v579 && *(_QWORD *)&v585[2] == v587 && v585[3].i32[0] == v580)
                {
LABEL_965:
                  v591 = v585[6];
                  if (v591)
                  {
                    v592 = (uint8x8_t)vcnt_s8(v591);
                    v592.i16[0] = vaddlv_u8(v592);
                    if (v592.u32[0] > 1uLL)
                    {
                      v593 = *(unsigned int *)(v576[3] + 4);
                      if (*(_QWORD *)&v591 <= v586)
                        v593 = v586 % *(_QWORD *)&v591;
                    }
                    else
                    {
                      v593 = (v591.i32[0] - 1) & v586;
                    }
                    v594 = v585 + 5;
                    v595 = *(uint64_t ***)(*(_QWORD *)&v585[5] + 8 * v593);
                    if (v595)
                    {
                      v596 = *v595;
                      if (*v595)
                      {
                        if (v592.u32[0] < 2uLL)
                        {
                          v597 = *(_QWORD *)&v591 - 1;
                          while (1)
                          {
                            v599 = v596[1];
                            if (v599 == v586)
                            {
                              if (*((_DWORD *)v596 + 4) == (_DWORD)v586)
                                goto LABEL_986;
                            }
                            else if ((v599 & v597) != v593)
                            {
                              goto LABEL_939;
                            }
                            v596 = (uint64_t *)*v596;
                            if (!v596)
                              goto LABEL_939;
                          }
                        }
                        do
                        {
                          v598 = v596[1];
                          if (v598 == v586)
                          {
                            if (*((_DWORD *)v596 + 4) == (_DWORD)v586)
                            {
LABEL_986:
                              sub_20E8D2CE8(v594, v596, (uint64_t)v2211);
                              v600 = *(_QWORD **)v2211;
                              *(_QWORD *)v2211 = 0;
                              if (v600)
                              {
                                if (v2211[16])
                                {
                                  v601 = (std::__shared_weak_count *)v600[4];
                                  if (v601)
                                  {
                                    v602 = (unint64_t *)&v601->__shared_owners_;
                                    do
                                      v603 = __ldaxr(v602);
                                    while (__stlxr(v603 - 1, v602));
                                    if (!v603)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
                                      std::__shared_weak_count::__release_weak(v601);
                                    }
                                  }
                                }
                                operator delete(v600);
                                a2 = v2153;
                              }
                              break;
                            }
                          }
                          else
                          {
                            if (v598 >= *(_QWORD *)&v591)
                              v598 %= *(_QWORD *)&v591;
                            if (v598 != v593)
                              break;
                          }
                          v596 = (uint64_t *)*v596;
                        }
                        while (v596);
                      }
                    }
                  }
LABEL_939:
                  v576 += 4;
                  goto LABEL_940;
                }
              }
              else
              {
                if (*(_QWORD *)&v589 >= *(_QWORD *)&v578)
                  *(_QWORD *)&v589 %= *(_QWORD *)&v578;
                if (*(_QWORD *)&v589 != v583)
                  goto LABEL_939;
              }
              v585 = (int8x8_t *)*v585;
              if (!v585)
                goto LABEL_939;
            }
          }
          v604 = (_QWORD *)v572[1];
          v605 = v572;
          if (v604)
          {
            do
            {
              v606 = v604;
              v604 = (_QWORD *)*v604;
            }
            while (v604);
          }
          else
          {
            do
            {
              v606 = (_QWORD *)v605[2];
              _ZF = *v606 == (_QWORD)v605;
              v605 = v606;
            }
            while (!_ZF);
          }
          if ((_QWORD *)*v567 == v572)
            *v567 = v606;
          v607 = (uint64_t *)v567[1];
          --v567[2];
          sub_20E8D2134(v607, v572);
          v608 = (std::__shared_weak_count *)v572[7];
          if (v608)
          {
            v609 = (unint64_t *)&v608->__shared_owners_;
            do
              v610 = __ldaxr(v609);
            while (__stlxr(v610 - 1, v609));
            if (!v610)
            {
              ((void (*)(std::__shared_weak_count *))v608->__on_zero_shared)(v608);
              std::__shared_weak_count::__release_weak(v608);
            }
          }
          operator delete(v572);
          v561 = (char *)v2148;
        }
      }
      if (v561)
        operator delete(v561);
      if (v2185)
        operator delete(v2185);
      sub_20F34CD58(&v2180);
      a5 = v2152;
      if (**(int **)(v2180 + 56) <= 3)
      {
        v611 = *(unsigned __int8 *)(v2180 + 72);
        v612 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
        v613 = v612;
        if (v611 || v612)
        {
          v2185 = &v2180;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v2187 = std::chrono::system_clock::now().__d_.__rep_;
          v2188 = 3;
          v2189 = "unknown file";
          v2190 = 1236;
          v2191 = "unknown function";
          v2192 = 0;
          v2193 = 0;
          v614.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          v615 = *(_QWORD *)v2185;
          if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
          {
            v617 = *(const char **)(v615 + 16);
            v616 = *(_QWORD *)(v615 + 24);
            v2159 = *(_QWORD *)v2185 + 16;
            v619 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v619 & 1) == 0)
            {
LABEL_2273:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v2207);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
                if (v2209 && v2208 < 0)
                  operator delete(v2207[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
            }
          }
          else
          {
            v616 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
            v617 = (const char *)(*(_QWORD *)v2185 + 16);
            v2159 = (uint64_t)v617;
            v618 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v618 & 1) == 0)
              goto LABEL_2273;
          }
          if (byte_254A4A4F8[23] >= 0)
            v620 = byte_254A4A4F8;
          else
            v620 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v621 = byte_254A4A4F8[23];
          else
            v621 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v2211 = os_log_create(v620, v617);
          if (v621 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v621 >= 0x17)
          {
            v623 = (v621 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v621 | 7) != 0x17)
              v623 = v621 | 7;
            v624 = v623 + 1;
            v622 = operator new(v623 + 1);
            *(_QWORD *)&v2211[16] = v621;
            *(_QWORD *)&v2211[24] = v624 | 0x8000000000000000;
            *(_QWORD *)&v2211[8] = v622;
          }
          else
          {
            v2211[31] = v621;
            v622 = &v2211[8];
            if (!v621)
            {
LABEL_1030:
              v622[v621] = 0;
              v2211[32] = 1;
              if (v616 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              a5 = v2152;
              if (v616 >= 0x17)
              {
                v627 = (v616 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v616 | 7) != 0x17)
                  v627 = v616 | 7;
                v628 = v627 + 1;
                v625 = (void **)operator new(v627 + 1);
                v2213 = v616;
                v2214 = v628 | 0x8000000000000000;
                v2212 = v625;
              }
              else
              {
                HIBYTE(v2214) = v616;
                v625 = (void **)&v2212;
                if (!v616)
                {
                  LOBYTE(v2212) = 0;
                  v2215 = 1;
                  v626 = *(NSObject **)v2211;
                  if ((SHIBYTE(v2214) & 0x80000000) == 0)
                    goto LABEL_1034;
LABEL_1040:
                  operator delete(v2212);
                  if (v2211[32])
                    goto LABEL_1041;
                  goto LABEL_1043;
                }
              }
              memmove(v625, v617, v616);
              *((_BYTE *)v625 + v616) = 0;
              v2215 = 1;
              v626 = *(NSObject **)v2211;
              if (SHIBYTE(v2214) < 0)
                goto LABEL_1040;
LABEL_1034:
              if (v2211[32])
              {
LABEL_1041:
                if ((v2211[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v2211[8]);
              }
LABEL_1043:
              if (*(_QWORD *)v2211)
                os_release(*(void **)v2211);
              if (v613 && *(_QWORD *)(v613 + 24))
              {
                v629 = _os_log_pack_size();
                v630 = (std::__shared_weak_count_vtbl *)operator new(v629, (std::align_val_t)8uLL);
                v631 = (std::__shared_weak_count *)operator new();
                v632 = v631;
                v631->__shared_owners_ = 0;
                v633 = (unint64_t *)&v631->__shared_owners_;
                v631->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v631->__shared_weak_owners_ = 0;
                v631[1].__vftable = v630;
                *(_QWORD *)v2211 = v630;
                *(_QWORD *)&v2211[8] = v630;
                *(_QWORD *)&v2211[16] = v631;
                do
                  v634 = __ldxr(v633);
                while (__stxr(v634 + 1, v633));
                *(_QWORD *)&v2211[24] = 0;
                *(_QWORD *)&v2211[32] = 0;
                v2212 = 0;
                do
                  v635 = __ldaxr(v633);
                while (__stlxr(v635 - 1, v633));
                if (!v635)
                {
                  ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
                  std::__shared_weak_count::__release_weak(v632);
                }
                v636 = *(_QWORD *)v2211;
                v637 = _os_log_pack_fill();
                *(_DWORD *)v637 = 134217984;
                *(double *)(v637 + 4) = (double)(v614.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
                v638 = (char *)operator new();
                v639 = *(unsigned __int8 *)(v615 + 39);
                v640 = v2159;
                if ((v639 & 0x80u) != 0)
                {
                  v640 = *(_QWORD *)(v615 + 16);
                  v639 = *(_QWORD *)(v615 + 24);
                }
                *(_QWORD *)v638 = v636;
                *(_OWORD *)(v638 + 8) = *(_OWORD *)&v2211[8];
                *(_QWORD *)&v2211[8] = 0;
                *(_QWORD *)&v2211[16] = 0;
                *(_OWORD *)(v638 + 24) = *(_OWORD *)&v2211[24];
                *(_QWORD *)&v2211[24] = 0;
                *(_QWORD *)&v2211[32] = 0;
                *((_QWORD *)v638 + 5) = v640;
                *((_QWORD *)v638 + 6) = v639;
                v638[56] = 1;
                v2210 = 0;
                v2207[0] = v638;
                (*(void (**)(_QWORD, void **))(**(_QWORD **)(v613 + 24) + 40))(*(_QWORD *)(v613 + 24), v2207);
                v641 = v2207[0];
                v2207[0] = 0;
                a2 = v2153;
                if (v641)
                {
                  v642 = (std::__shared_weak_count *)*((_QWORD *)v641 + 4);
                  if (v642)
                  {
                    v643 = (unint64_t *)&v642->__shared_owners_;
                    do
                      v644 = __ldaxr(v643);
                    while (__stlxr(v644 - 1, v643));
                    if (!v644)
                    {
                      ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                      std::__shared_weak_count::__release_weak(v642);
                    }
                  }
                  v645 = (std::__shared_weak_count *)*((_QWORD *)v641 + 2);
                  if (v645)
                  {
                    v646 = (unint64_t *)&v645->__shared_owners_;
                    do
                      v647 = __ldaxr(v646);
                    while (__stlxr(v647 - 1, v646));
                    if (!v647)
                    {
                      ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                      std::__shared_weak_count::__release_weak(v645);
                    }
                  }
                  MEMORY[0x212BC6398](v641, 0x10F0C40B62ED6C6);
                  v648 = v2210;
                  v2210 = 0;
                  if (v648)
                  {
                    v649 = *(std::__shared_weak_count **)(v648 + 32);
                    if (v649)
                    {
                      v650 = (unint64_t *)&v649->__shared_owners_;
                      do
                        v651 = __ldaxr(v650);
                      while (__stlxr(v651 - 1, v650));
                      if (!v651)
                      {
                        ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
                        std::__shared_weak_count::__release_weak(v649);
                      }
                    }
                    v652 = *(std::__shared_weak_count **)(v648 + 16);
                    if (v652)
                    {
                      v653 = (unint64_t *)&v652->__shared_owners_;
                      do
                        v654 = __ldaxr(v653);
                      while (__stlxr(v654 - 1, v653));
                      if (!v654)
                      {
                        ((void (*)(std::__shared_weak_count *))v652->__on_zero_shared)(v652);
                        std::__shared_weak_count::__release_weak(v652);
                      }
                    }
                    MEMORY[0x212BC6398](v648, 0x10F0C40B62ED6C6);
                  }
                }
                v655 = *(std::__shared_weak_count **)&v2211[32];
                if (*(_QWORD *)&v2211[32])
                {
                  v656 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                  do
                    v657 = __ldaxr(v656);
                  while (__stlxr(v657 - 1, v656));
                  if (!v657)
                  {
                    ((void (*)(std::__shared_weak_count *))v655->__on_zero_shared)(v655);
                    std::__shared_weak_count::__release_weak(v655);
                  }
                }
                v658 = *(std::__shared_weak_count **)&v2211[16];
                if (*(_QWORD *)&v2211[16])
                {
                  v659 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                  do
                    v660 = __ldaxr(v659);
                  while (__stlxr(v660 - 1, v659));
                  if (!v660)
                  {
                    ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
                    std::__shared_weak_count::__release_weak(v658);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v626, OS_LOG_TYPE_INFO);
                *(_DWORD *)v2211 = 134217984;
                *(double *)&v2211[4] = (double)(v614.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
                v661 = (void *)_os_log_send_and_compose_impl();
                a2 = v2153;
                if (v661)
                  free(v661);
              }
              if (v611)
              {
                v662.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v662.__d_.__rep_ - v614.__d_.__rep_) / 1000000000.0);
                sub_20E863570((uint64_t)&v2185);
              }
              else
              {
                v662.__d_.__rep_ = v614.__d_.__rep_;
              }
              sub_20E863570((uint64_t)&v2185);
              v2147.__d_.__rep_ = v662.__d_.__rep_;
              v663 = v2193;
              if (v2193)
              {
                v664 = (unint64_t *)&v2193->__shared_owners_;
                do
                  v665 = __ldaxr(v664);
                while (__stlxr(v665 - 1, v664));
                if (!v665)
                {
                  ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
                  std::__shared_weak_count::__release_weak(v663);
                }
              }
              goto LABEL_1098;
            }
          }
          memmove(v622, v620, v621);
          goto LABEL_1030;
        }
      }
LABEL_1098:
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_1207;
      v666 = *(unsigned __int8 *)(v2180 + 72);
      v667 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v668 = v667;
      if (!v666 && v667 == 0)
        goto LABEL_1207;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1237;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v670 = (_QWORD *)a2[1];
      v673 = (_QWORD *)*v670;
      v671 = v670 + 1;
      v672 = v673;
      if (v673 == v671)
      {
        v674 = 0;
      }
      else
      {
        v674 = 0;
        do
        {
          v675 = (_QWORD *)v672[1];
          v676 = v672;
          if (v675)
          {
            do
            {
              v677 = v675;
              v675 = (_QWORD *)*v675;
            }
            while (v675);
          }
          else
          {
            do
            {
              v677 = (_QWORD *)v676[2];
              _ZF = *v677 == (_QWORD)v676;
              v676 = v677;
            }
            while (!_ZF);
          }
          v674 += *(unsigned __int8 *)(v672[6] + 528);
          v672 = v677;
        }
        while (v677 != v671);
      }
      v678 = *(_QWORD *)v2185;
      v679 = (const char *)(*(_QWORD *)v2185 + 16);
      v2160 = v679;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v679 = *(const char **)(v678 + 16);
        v680 = *(_QWORD *)(v678 + 24);
        v682 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v682 & 1) != 0)
          goto LABEL_1117;
      }
      else
      {
        v680 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v681 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v681 & 1) != 0)
          goto LABEL_1117;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_1117:
      if (byte_254A4A4F8[23] >= 0)
        v683 = byte_254A4A4F8;
      else
        v683 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v684 = byte_254A4A4F8[23];
      else
        v684 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v683, v679);
      if (v684 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v684 >= 0x17)
      {
        v686 = (v684 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v684 | 7) != 0x17)
          v686 = v684 | 7;
        v687 = v686 + 1;
        v685 = operator new(v686 + 1);
        *(_QWORD *)&v2211[16] = v684;
        *(_QWORD *)&v2211[24] = v687 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v685;
LABEL_1130:
        memmove(v685, v683, v684);
        goto LABEL_1131;
      }
      v2211[31] = v684;
      v685 = &v2211[8];
      if (v684)
        goto LABEL_1130;
LABEL_1131:
      v685[v684] = 0;
      v2211[32] = 1;
      if (v680 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v680 >= 0x17)
      {
        v690 = (v680 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v680 | 7) != 0x17)
          v690 = v680 | 7;
        v691 = v690 + 1;
        v688 = (void **)operator new(v690 + 1);
        v2213 = v680;
        v2214 = v691 | 0x8000000000000000;
        v2212 = v688;
      }
      else
      {
        HIBYTE(v2214) = v680;
        v688 = (void **)&v2212;
        if (!v680)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v689 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_1135;
          goto LABEL_1141;
        }
      }
      memmove(v688, v679, v680);
      *((_BYTE *)v688 + v680) = 0;
      v2215 = 1;
      v689 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_1135:
        a2 = v2153;
        if (!v2211[32])
          goto LABEL_1144;
        goto LABEL_1142;
      }
LABEL_1141:
      operator delete(v2212);
      a2 = v2153;
      if (!v2211[32])
        goto LABEL_1144;
LABEL_1142:
      if ((v2211[31] & 0x80000000) != 0)
        operator delete(*(void **)&v2211[8]);
LABEL_1144:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v668 && *(_QWORD *)(v668 + 24))
      {
        v692 = _os_log_pack_size();
        v693 = (std::__shared_weak_count_vtbl *)operator new(v692, (std::align_val_t)8uLL);
        v694 = (std::__shared_weak_count *)operator new();
        v695 = v694;
        v694->__shared_owners_ = 0;
        v696 = (unint64_t *)&v694->__shared_owners_;
        v694->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v694->__shared_weak_owners_ = 0;
        v694[1].__vftable = v693;
        *(_QWORD *)v2211 = v693;
        *(_QWORD *)&v2211[8] = v693;
        *(_QWORD *)&v2211[16] = v694;
        do
          v697 = __ldxr(v696);
        while (__stxr(v697 + 1, v696));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        a2 = v2153;
        do
          v698 = __ldaxr(v696);
        while (__stlxr(v698 - 1, v696));
        if (!v698)
        {
          ((void (*)(std::__shared_weak_count *))v694->__on_zero_shared)(v694);
          std::__shared_weak_count::__release_weak(v695);
        }
        v699 = *(_QWORD *)v2211;
        v700 = _os_log_pack_fill();
        *(_DWORD *)v700 = 134217984;
        *(_QWORD *)(v700 + 4) = v674;
        v701 = (char *)operator new();
        v702 = *(unsigned __int8 *)(v678 + 39);
        v703 = v2160;
        if ((v702 & 0x80u) != 0)
        {
          v703 = *(const char **)(v678 + 16);
          v702 = *(_QWORD *)(v678 + 24);
        }
        *(_QWORD *)v701 = v699;
        *(_OWORD *)(v701 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v701 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v701 + 5) = v703;
        *((_QWORD *)v701 + 6) = v702;
        v701[56] = 1;
        v2210 = 0;
        v2207[0] = v701;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v668 + 24) + 40))(*(_QWORD *)(v668 + 24), v2207);
        v704 = v2207[0];
        v2207[0] = 0;
        if (v704)
        {
          v705 = (std::__shared_weak_count *)*((_QWORD *)v704 + 4);
          if (v705)
          {
            v706 = (unint64_t *)&v705->__shared_owners_;
            do
              v707 = __ldaxr(v706);
            while (__stlxr(v707 - 1, v706));
            if (!v707)
            {
              ((void (*)(std::__shared_weak_count *))v705->__on_zero_shared)(v705);
              std::__shared_weak_count::__release_weak(v705);
            }
          }
          v708 = (std::__shared_weak_count *)*((_QWORD *)v704 + 2);
          if (v708)
          {
            v709 = (unint64_t *)&v708->__shared_owners_;
            do
              v710 = __ldaxr(v709);
            while (__stlxr(v710 - 1, v709));
            if (!v710)
            {
              ((void (*)(std::__shared_weak_count *))v708->__on_zero_shared)(v708);
              std::__shared_weak_count::__release_weak(v708);
            }
          }
          MEMORY[0x212BC6398](v704, 0x10F0C40B62ED6C6);
          v711 = v2210;
          v2210 = 0;
          if (v711)
          {
            v712 = *(std::__shared_weak_count **)(v711 + 32);
            if (v712)
            {
              v713 = (unint64_t *)&v712->__shared_owners_;
              do
                v714 = __ldaxr(v713);
              while (__stlxr(v714 - 1, v713));
              if (!v714)
              {
                ((void (*)(std::__shared_weak_count *))v712->__on_zero_shared)(v712);
                std::__shared_weak_count::__release_weak(v712);
              }
            }
            v715 = *(std::__shared_weak_count **)(v711 + 16);
            if (v715)
            {
              v716 = (unint64_t *)&v715->__shared_owners_;
              do
                v717 = __ldaxr(v716);
              while (__stlxr(v717 - 1, v716));
              if (!v717)
              {
                ((void (*)(std::__shared_weak_count *))v715->__on_zero_shared)(v715);
                std::__shared_weak_count::__release_weak(v715);
              }
            }
            MEMORY[0x212BC6398](v711, 0x10F0C40B62ED6C6);
          }
        }
        v718 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v719 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v720 = __ldaxr(v719);
          while (__stlxr(v720 - 1, v719));
          if (!v720)
          {
            ((void (*)(std::__shared_weak_count *))v718->__on_zero_shared)(v718);
            std::__shared_weak_count::__release_weak(v718);
          }
        }
        v721 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v722 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v723 = __ldaxr(v722);
          while (__stlxr(v723 - 1, v722));
          if (!v723)
          {
            ((void (*)(std::__shared_weak_count *))v721->__on_zero_shared)(v721);
            std::__shared_weak_count::__release_weak(v721);
          }
        }
      }
      else
      {
        os_log_type_enabled(v689, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 134217984;
        *(_QWORD *)&v2211[4] = v674;
        v724 = (void *)_os_log_send_and_compose_impl();
        if (v724)
          free(v724);
      }
      if (v666)
      {
        v725 = (_QWORD *)a2[1];
        v728 = (_QWORD *)*v725;
        v726 = v725 + 1;
        v727 = v728;
        if (v728 == v726)
        {
          v729 = 0;
        }
        else
        {
          v729 = 0;
          do
          {
            v730 = (_QWORD *)v727[1];
            v731 = v727;
            if (v730)
            {
              do
              {
                v732 = v730;
                v730 = (_QWORD *)*v730;
              }
              while (v730);
            }
            else
            {
              do
              {
                v732 = (_QWORD *)v731[2];
                _ZF = *v732 == (_QWORD)v731;
                v731 = v732;
              }
              while (!_ZF);
            }
            v729 += *(unsigned __int8 *)(v727[6] + 528);
            v727 = v732;
          }
          while (v732 != v726);
        }
        sub_20E8C003C((uint64_t)&v2185, "Num tracks: %zu", v729);
        sub_20E863570((uint64_t)&v2185);
      }
      sub_20E863570((uint64_t)&v2185);
      v733 = v2193;
      if (v2193)
      {
        v734 = (unint64_t *)&v2193->__shared_owners_;
        do
          v735 = __ldaxr(v734);
        while (__stlxr(v735 - 1, v734));
        if (!v735)
        {
          ((void (*)(std::__shared_weak_count *))v733->__on_zero_shared)(v733);
          std::__shared_weak_count::__release_weak(v733);
          if (!*(_BYTE *)(v2152 + 4))
            goto LABEL_1501;
          goto LABEL_1208;
        }
      }
LABEL_1207:
      if (!*(_BYTE *)(a5 + 4))
        goto LABEL_1501;
LABEL_1208:
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_1301;
      v736 = *(unsigned __int8 *)(v2180 + 72);
      v737 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v738 = v737;
      if (!v736 && v737 == 0)
        goto LABEL_1301;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1242;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v740 = *(_QWORD *)v2185;
      v741 = *(_QWORD *)v2185 + 16;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v743 = *(const char **)(v740 + 16);
        v742 = *(_QWORD *)(v740 + 24);
        v745 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v745 & 1) != 0)
          goto LABEL_1217;
      }
      else
      {
        v742 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v743 = (const char *)(*(_QWORD *)v2185 + 16);
        v744 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v744 & 1) != 0)
          goto LABEL_1217;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_1217:
      if (byte_254A4A4F8[23] >= 0)
        v746 = byte_254A4A4F8;
      else
        v746 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v747 = byte_254A4A4F8[23];
      else
        v747 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v746, v743);
      if (v747 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v747 >= 0x17)
      {
        v749 = (v747 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v747 | 7) != 0x17)
          v749 = v747 | 7;
        v750 = v749 + 1;
        v748 = operator new(v749 + 1);
        *(_QWORD *)&v2211[16] = v747;
        *(_QWORD *)&v2211[24] = v750 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v748;
LABEL_1230:
        memmove(v748, v746, v747);
        goto LABEL_1231;
      }
      v2211[31] = v747;
      v748 = &v2211[8];
      if (v747)
        goto LABEL_1230;
LABEL_1231:
      v748[v747] = 0;
      v2211[32] = 1;
      if (v742 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v742 >= 0x17)
      {
        v753 = (v742 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v742 | 7) != 0x17)
          v753 = v742 | 7;
        v754 = v753 + 1;
        v751 = (void **)operator new(v753 + 1);
        v2213 = v742;
        v2214 = v754 | 0x8000000000000000;
        v2212 = v751;
      }
      else
      {
        HIBYTE(v2214) = v742;
        v751 = (void **)&v2212;
        if (!v742)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v752 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_1235;
          goto LABEL_1241;
        }
      }
      memmove(v751, v743, v742);
      *((_BYTE *)v751 + v742) = 0;
      v2215 = 1;
      v752 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_1235:
        a2 = v2153;
        if (v2211[32])
          goto LABEL_1242;
        goto LABEL_1244;
      }
LABEL_1241:
      operator delete(v2212);
      a2 = v2153;
      if (v2211[32])
      {
LABEL_1242:
        if ((v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
      }
LABEL_1244:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v738 && *(_QWORD *)(v738 + 24))
      {
        v755 = _os_log_pack_size();
        v756 = (std::__shared_weak_count_vtbl *)operator new(v755, (std::align_val_t)8uLL);
        v757 = (std::__shared_weak_count *)operator new();
        v758 = v757;
        v757->__shared_owners_ = 0;
        v759 = (unint64_t *)&v757->__shared_owners_;
        v757->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v757->__shared_weak_owners_ = 0;
        v757[1].__vftable = v756;
        *(_QWORD *)v2211 = v756;
        *(_QWORD *)&v2211[8] = v756;
        *(_QWORD *)&v2211[16] = v757;
        do
          v760 = __ldxr(v759);
        while (__stxr(v760 + 1, v759));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        a2 = v2153;
        do
          v761 = __ldaxr(v759);
        while (__stlxr(v761 - 1, v759));
        if (!v761)
        {
          ((void (*)(std::__shared_weak_count *))v757->__on_zero_shared)(v757);
          std::__shared_weak_count::__release_weak(v758);
        }
        v762 = *(_QWORD *)v2211;
        *(_WORD *)_os_log_pack_fill() = 0;
        v763 = (char *)operator new();
        v764 = *(unsigned __int8 *)(v740 + 39);
        if ((v764 & 0x80u) == 0)
          v765 = v741;
        else
          v765 = *(_QWORD *)(v740 + 16);
        if ((v764 & 0x80u) != 0)
          v764 = *(_QWORD *)(v740 + 24);
        *(_QWORD *)v763 = v762;
        *(_OWORD *)(v763 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v763 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v763 + 5) = v765;
        *((_QWORD *)v763 + 6) = v764;
        v763[56] = 1;
        v2210 = 0;
        v2207[0] = v763;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v738 + 24) + 40))(*(_QWORD *)(v738 + 24), v2207);
        v766 = v2207[0];
        v2207[0] = 0;
        if (v766)
        {
          v767 = (std::__shared_weak_count *)*((_QWORD *)v766 + 4);
          if (v767)
          {
            v768 = (unint64_t *)&v767->__shared_owners_;
            do
              v769 = __ldaxr(v768);
            while (__stlxr(v769 - 1, v768));
            if (!v769)
            {
              ((void (*)(std::__shared_weak_count *))v767->__on_zero_shared)(v767);
              std::__shared_weak_count::__release_weak(v767);
            }
          }
          v770 = (std::__shared_weak_count *)*((_QWORD *)v766 + 2);
          if (v770)
          {
            v771 = (unint64_t *)&v770->__shared_owners_;
            do
              v772 = __ldaxr(v771);
            while (__stlxr(v772 - 1, v771));
            if (!v772)
            {
              ((void (*)(std::__shared_weak_count *))v770->__on_zero_shared)(v770);
              std::__shared_weak_count::__release_weak(v770);
            }
          }
          MEMORY[0x212BC6398](v766, 0x10F0C40B62ED6C6);
          v773 = v2210;
          v2210 = 0;
          if (v773)
          {
            v774 = *(std::__shared_weak_count **)(v773 + 32);
            if (v774)
            {
              v775 = (unint64_t *)&v774->__shared_owners_;
              do
                v776 = __ldaxr(v775);
              while (__stlxr(v776 - 1, v775));
              if (!v776)
              {
                ((void (*)(std::__shared_weak_count *))v774->__on_zero_shared)(v774);
                std::__shared_weak_count::__release_weak(v774);
              }
            }
            v777 = *(std::__shared_weak_count **)(v773 + 16);
            if (v777)
            {
              v778 = (unint64_t *)&v777->__shared_owners_;
              do
                v779 = __ldaxr(v778);
              while (__stlxr(v779 - 1, v778));
              if (!v779)
              {
                ((void (*)(std::__shared_weak_count *))v777->__on_zero_shared)(v777);
                std::__shared_weak_count::__release_weak(v777);
              }
            }
            MEMORY[0x212BC6398](v773, 0x10F0C40B62ED6C6);
          }
        }
        v780 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v781 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v782 = __ldaxr(v781);
          while (__stlxr(v782 - 1, v781));
          if (!v782)
          {
            ((void (*)(std::__shared_weak_count *))v780->__on_zero_shared)(v780);
            std::__shared_weak_count::__release_weak(v780);
          }
        }
        v783 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v784 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v785 = __ldaxr(v784);
          while (__stlxr(v785 - 1, v784));
          if (!v785)
          {
            ((void (*)(std::__shared_weak_count *))v783->__on_zero_shared)(v783);
            std::__shared_weak_count::__release_weak(v783);
          }
        }
      }
      else
      {
        os_log_type_enabled(v752, OS_LOG_TYPE_INFO);
        *(_WORD *)v2211 = 0;
        v786 = (void *)_os_log_send_and_compose_impl();
        if (v786)
          free(v786);
      }
      if (v736)
      {
        sub_20E8C003C((uint64_t)&v2185, "Remove outlier tracks before BA");
        sub_20E863570((uint64_t)&v2185);
      }
      sub_20E863570((uint64_t)&v2185);
      v787 = v2193;
      if (v2193)
      {
        v788 = (unint64_t *)&v2193->__shared_owners_;
        do
          v789 = __ldaxr(v788);
        while (__stlxr(v789 - 1, v788));
        if (!v789)
        {
          ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
          std::__shared_weak_count::__release_weak(v787);
        }
      }
LABEL_1301:
      sub_20F363910();
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_1390;
      v790 = *(unsigned __int8 *)(v2180 + 72);
      v791 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v792 = v791;
      if (!v790 && !v791)
        goto LABEL_1390;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1244;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v793.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v794 = *(_QWORD *)v2185;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v796 = *(const char **)(v794 + 16);
        v795 = *(_QWORD *)(v794 + 24);
        v2161 = *(_QWORD *)v2185 + 16;
        v798 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v798 & 1) != 0)
          goto LABEL_1308;
      }
      else
      {
        v795 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v796 = (const char *)(*(_QWORD *)v2185 + 16);
        v2161 = (uint64_t)v796;
        v797 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v797 & 1) != 0)
          goto LABEL_1308;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_1308:
      if (byte_254A4A4F8[23] >= 0)
        v799 = byte_254A4A4F8;
      else
        v799 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v800 = byte_254A4A4F8[23];
      else
        v800 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v799, v796);
      if (v800 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v800 >= 0x17)
      {
        v802 = (v800 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v800 | 7) != 0x17)
          v802 = v800 | 7;
        v803 = v802 + 1;
        v801 = operator new(v802 + 1);
        *(_QWORD *)&v2211[16] = v800;
        *(_QWORD *)&v2211[24] = v803 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v801;
LABEL_1321:
        memmove(v801, v799, v800);
        goto LABEL_1322;
      }
      v2211[31] = v800;
      v801 = &v2211[8];
      if (v800)
        goto LABEL_1321;
LABEL_1322:
      v801[v800] = 0;
      v2211[32] = 1;
      if (v795 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v795 >= 0x17)
      {
        v806 = (v795 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v795 | 7) != 0x17)
          v806 = v795 | 7;
        v807 = v806 + 1;
        v804 = (void **)operator new(v806 + 1);
        v2213 = v795;
        v2214 = v807 | 0x8000000000000000;
        v2212 = v804;
      }
      else
      {
        HIBYTE(v2214) = v795;
        v804 = (void **)&v2212;
        if (!v795)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v805 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_1326;
          goto LABEL_1332;
        }
      }
      memmove(v804, v796, v795);
      *((_BYTE *)v804 + v795) = 0;
      v2215 = 1;
      v805 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_1326:
        if (v2211[32])
          goto LABEL_1333;
        goto LABEL_1335;
      }
LABEL_1332:
      operator delete(v2212);
      if (v2211[32])
      {
LABEL_1333:
        if ((v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
      }
LABEL_1335:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v792 && *(_QWORD *)(v792 + 24))
      {
        v808 = _os_log_pack_size();
        v809 = (std::__shared_weak_count_vtbl *)operator new(v808, (std::align_val_t)8uLL);
        v810 = (std::__shared_weak_count *)operator new();
        v811 = v810;
        v810->__shared_owners_ = 0;
        v812 = (unint64_t *)&v810->__shared_owners_;
        v810->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v810->__shared_weak_owners_ = 0;
        v810[1].__vftable = v809;
        *(_QWORD *)v2211 = v809;
        *(_QWORD *)&v2211[8] = v809;
        *(_QWORD *)&v2211[16] = v810;
        do
          v813 = __ldxr(v812);
        while (__stxr(v813 + 1, v812));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        do
          v814 = __ldaxr(v812);
        while (__stlxr(v814 - 1, v812));
        if (!v814)
        {
          ((void (*)(std::__shared_weak_count *))v810->__on_zero_shared)(v810);
          std::__shared_weak_count::__release_weak(v811);
        }
        v815 = *(_QWORD *)v2211;
        v816 = _os_log_pack_fill();
        *(_DWORD *)v816 = 134217984;
        *(double *)(v816 + 4) = (double)(v793.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v817 = (char *)operator new();
        v818 = *(unsigned __int8 *)(v794 + 39);
        v819 = v2161;
        if ((v818 & 0x80u) != 0)
        {
          v819 = *(_QWORD *)(v794 + 16);
          v818 = *(_QWORD *)(v794 + 24);
        }
        *(_QWORD *)v817 = v815;
        *(_OWORD *)(v817 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v817 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v817 + 5) = v819;
        *((_QWORD *)v817 + 6) = v818;
        v817[56] = 1;
        v2210 = 0;
        v2207[0] = v817;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v792 + 24) + 40))(*(_QWORD *)(v792 + 24), v2207);
        v820 = v2207[0];
        v2207[0] = 0;
        a2 = v2153;
        if (v820)
        {
          v821 = (std::__shared_weak_count *)*((_QWORD *)v820 + 4);
          if (v821)
          {
            v822 = (unint64_t *)&v821->__shared_owners_;
            do
              v823 = __ldaxr(v822);
            while (__stlxr(v823 - 1, v822));
            if (!v823)
            {
              ((void (*)(std::__shared_weak_count *))v821->__on_zero_shared)(v821);
              std::__shared_weak_count::__release_weak(v821);
            }
          }
          v824 = (std::__shared_weak_count *)*((_QWORD *)v820 + 2);
          if (v824)
          {
            v825 = (unint64_t *)&v824->__shared_owners_;
            do
              v826 = __ldaxr(v825);
            while (__stlxr(v826 - 1, v825));
            if (!v826)
            {
              ((void (*)(std::__shared_weak_count *))v824->__on_zero_shared)(v824);
              std::__shared_weak_count::__release_weak(v824);
            }
          }
          MEMORY[0x212BC6398](v820, 0x10F0C40B62ED6C6);
          v827 = v2210;
          v2210 = 0;
          if (v827)
          {
            v828 = *(std::__shared_weak_count **)(v827 + 32);
            if (v828)
            {
              v829 = (unint64_t *)&v828->__shared_owners_;
              do
                v830 = __ldaxr(v829);
              while (__stlxr(v830 - 1, v829));
              if (!v830)
              {
                ((void (*)(std::__shared_weak_count *))v828->__on_zero_shared)(v828);
                std::__shared_weak_count::__release_weak(v828);
              }
            }
            v831 = *(std::__shared_weak_count **)(v827 + 16);
            if (v831)
            {
              v832 = (unint64_t *)&v831->__shared_owners_;
              do
                v833 = __ldaxr(v832);
              while (__stlxr(v833 - 1, v832));
              if (!v833)
              {
                ((void (*)(std::__shared_weak_count *))v831->__on_zero_shared)(v831);
                std::__shared_weak_count::__release_weak(v831);
              }
            }
            MEMORY[0x212BC6398](v827, 0x10F0C40B62ED6C6);
          }
        }
        v834 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v835 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v836 = __ldaxr(v835);
          while (__stlxr(v836 - 1, v835));
          if (!v836)
          {
            ((void (*)(std::__shared_weak_count *))v834->__on_zero_shared)(v834);
            std::__shared_weak_count::__release_weak(v834);
          }
        }
        v837 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v838 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v839 = __ldaxr(v838);
          while (__stlxr(v839 - 1, v838));
          if (!v839)
          {
            ((void (*)(std::__shared_weak_count *))v837->__on_zero_shared)(v837);
            std::__shared_weak_count::__release_weak(v837);
          }
        }
      }
      else
      {
        os_log_type_enabled(v805, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 134217984;
        *(double *)&v2211[4] = (double)(v793.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v840 = (void *)_os_log_send_and_compose_impl();
        a2 = v2153;
        if (v840)
          free(v840);
      }
      if (v790)
      {
        v841.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v841.__d_.__rep_ - v793.__d_.__rep_) / 1000000000.0);
        sub_20E863570((uint64_t)&v2185);
      }
      else
      {
        v841.__d_.__rep_ = v793.__d_.__rep_;
      }
      sub_20E863570((uint64_t)&v2185);
      v2147.__d_.__rep_ = v841.__d_.__rep_;
      v842 = v2193;
      if (v2193)
      {
        v843 = (unint64_t *)&v2193->__shared_owners_;
        do
          v844 = __ldaxr(v843);
        while (__stlxr(v844 - 1, v843));
        if (!v844)
        {
          ((void (*)(std::__shared_weak_count *))v842->__on_zero_shared)(v842);
          std::__shared_weak_count::__release_weak(v842);
        }
      }
LABEL_1390:
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_1501;
      v845 = *(unsigned __int8 *)(v2180 + 72);
      v846 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v847 = v846;
      if (!v845 && v846 == 0)
        goto LABEL_1501;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1245;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v849 = (_QWORD *)a2[1];
      v852 = (_QWORD *)*v849;
      v850 = v849 + 1;
      v851 = v852;
      if (v852 == v850)
      {
        v853 = 0;
      }
      else
      {
        v853 = 0;
        do
        {
          v854 = (_QWORD *)v851[1];
          v855 = v851;
          if (v854)
          {
            do
            {
              v856 = v854;
              v854 = (_QWORD *)*v854;
            }
            while (v854);
          }
          else
          {
            do
            {
              v856 = (_QWORD *)v855[2];
              _ZF = *v856 == (_QWORD)v855;
              v855 = v856;
            }
            while (!_ZF);
          }
          v853 += *(unsigned __int8 *)(v851[6] + 528);
          v851 = v856;
        }
        while (v856 != v850);
      }
      v857 = *(_QWORD *)v2185;
      v858 = (const char *)(*(_QWORD *)v2185 + 16);
      v2162 = v858;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v858 = *(const char **)(v857 + 16);
        v859 = *(_QWORD *)(v857 + 24);
        v861 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v861 & 1) != 0)
          goto LABEL_1409;
      }
      else
      {
        v859 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v860 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v860 & 1) != 0)
          goto LABEL_1409;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_1409:
      if (byte_254A4A4F8[23] >= 0)
        v862 = byte_254A4A4F8;
      else
        v862 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v863 = byte_254A4A4F8[23];
      else
        v863 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v862, v858);
      if (v863 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v863 >= 0x17)
      {
        v865 = (v863 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v863 | 7) != 0x17)
          v865 = v863 | 7;
        v866 = v865 + 1;
        v864 = operator new(v865 + 1);
        *(_QWORD *)&v2211[16] = v863;
        *(_QWORD *)&v2211[24] = v866 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v864;
LABEL_1422:
        memmove(v864, v862, v863);
        goto LABEL_1423;
      }
      v2211[31] = v863;
      v864 = &v2211[8];
      if (v863)
        goto LABEL_1422;
LABEL_1423:
      v864[v863] = 0;
      v2211[32] = 1;
      if (v859 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v859 >= 0x17)
      {
        v869 = (v859 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v859 | 7) != 0x17)
          v869 = v859 | 7;
        v870 = v869 + 1;
        v867 = (void **)operator new(v869 + 1);
        v2213 = v859;
        v2214 = v870 | 0x8000000000000000;
        v2212 = v867;
      }
      else
      {
        HIBYTE(v2214) = v859;
        v867 = (void **)&v2212;
        if (!v859)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v868 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_1427;
          goto LABEL_1433;
        }
      }
      memmove(v867, v858, v859);
      *((_BYTE *)v867 + v859) = 0;
      v2215 = 1;
      v868 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_1427:
        a2 = v2153;
        if (v2211[32])
          goto LABEL_1434;
        goto LABEL_1436;
      }
LABEL_1433:
      operator delete(v2212);
      a2 = v2153;
      if (v2211[32])
      {
LABEL_1434:
        if ((v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
      }
LABEL_1436:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v847 && *(_QWORD *)(v847 + 24))
      {
        v871 = _os_log_pack_size();
        v872 = (std::__shared_weak_count_vtbl *)operator new(v871, (std::align_val_t)8uLL);
        v873 = (std::__shared_weak_count *)operator new();
        v874 = v873;
        v873->__shared_owners_ = 0;
        v875 = (unint64_t *)&v873->__shared_owners_;
        v873->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v873->__shared_weak_owners_ = 0;
        v873[1].__vftable = v872;
        *(_QWORD *)v2211 = v872;
        *(_QWORD *)&v2211[8] = v872;
        *(_QWORD *)&v2211[16] = v873;
        do
          v876 = __ldxr(v875);
        while (__stxr(v876 + 1, v875));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        a2 = v2153;
        do
          v877 = __ldaxr(v875);
        while (__stlxr(v877 - 1, v875));
        if (!v877)
        {
          ((void (*)(std::__shared_weak_count *))v873->__on_zero_shared)(v873);
          std::__shared_weak_count::__release_weak(v874);
        }
        v878 = *(_QWORD *)v2211;
        v879 = _os_log_pack_fill();
        *(_DWORD *)v879 = 134217984;
        *(_QWORD *)(v879 + 4) = v853;
        v880 = (char *)operator new();
        v881 = *(unsigned __int8 *)(v857 + 39);
        v882 = v2162;
        if ((v881 & 0x80u) != 0)
        {
          v882 = *(const char **)(v857 + 16);
          v881 = *(_QWORD *)(v857 + 24);
        }
        *(_QWORD *)v880 = v878;
        *(_OWORD *)(v880 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v880 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v880 + 5) = v882;
        *((_QWORD *)v880 + 6) = v881;
        v880[56] = 1;
        v2210 = 0;
        v2207[0] = v880;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v847 + 24) + 40))(*(_QWORD *)(v847 + 24), v2207);
        v883 = v2207[0];
        v2207[0] = 0;
        if (v883)
        {
          v884 = (std::__shared_weak_count *)*((_QWORD *)v883 + 4);
          if (v884)
          {
            v885 = (unint64_t *)&v884->__shared_owners_;
            do
              v886 = __ldaxr(v885);
            while (__stlxr(v886 - 1, v885));
            if (!v886)
            {
              ((void (*)(std::__shared_weak_count *))v884->__on_zero_shared)(v884);
              std::__shared_weak_count::__release_weak(v884);
            }
          }
          v887 = (std::__shared_weak_count *)*((_QWORD *)v883 + 2);
          if (v887)
          {
            v888 = (unint64_t *)&v887->__shared_owners_;
            do
              v889 = __ldaxr(v888);
            while (__stlxr(v889 - 1, v888));
            if (!v889)
            {
              ((void (*)(std::__shared_weak_count *))v887->__on_zero_shared)(v887);
              std::__shared_weak_count::__release_weak(v887);
            }
          }
          MEMORY[0x212BC6398](v883, 0x10F0C40B62ED6C6);
          v890 = v2210;
          v2210 = 0;
          if (v890)
          {
            v891 = *(std::__shared_weak_count **)(v890 + 32);
            if (v891)
            {
              v892 = (unint64_t *)&v891->__shared_owners_;
              do
                v893 = __ldaxr(v892);
              while (__stlxr(v893 - 1, v892));
              if (!v893)
              {
                ((void (*)(std::__shared_weak_count *))v891->__on_zero_shared)(v891);
                std::__shared_weak_count::__release_weak(v891);
              }
            }
            v894 = *(std::__shared_weak_count **)(v890 + 16);
            if (v894)
            {
              v895 = (unint64_t *)&v894->__shared_owners_;
              do
                v896 = __ldaxr(v895);
              while (__stlxr(v896 - 1, v895));
              if (!v896)
              {
                ((void (*)(std::__shared_weak_count *))v894->__on_zero_shared)(v894);
                std::__shared_weak_count::__release_weak(v894);
              }
            }
            MEMORY[0x212BC6398](v890, 0x10F0C40B62ED6C6);
          }
        }
        v897 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v898 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v899 = __ldaxr(v898);
          while (__stlxr(v899 - 1, v898));
          if (!v899)
          {
            ((void (*)(std::__shared_weak_count *))v897->__on_zero_shared)(v897);
            std::__shared_weak_count::__release_weak(v897);
          }
        }
        v900 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v901 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v902 = __ldaxr(v901);
          while (__stlxr(v902 - 1, v901));
          if (!v902)
          {
            ((void (*)(std::__shared_weak_count *))v900->__on_zero_shared)(v900);
            std::__shared_weak_count::__release_weak(v900);
          }
        }
      }
      else
      {
        os_log_type_enabled(v868, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 134217984;
        *(_QWORD *)&v2211[4] = v853;
        v903 = (void *)_os_log_send_and_compose_impl();
        if (v903)
          free(v903);
      }
      if (v845)
      {
        v904 = (_QWORD *)a2[1];
        v907 = (_QWORD *)*v904;
        v905 = v904 + 1;
        v906 = v907;
        if (v907 == v905)
        {
          v908 = 0;
        }
        else
        {
          v908 = 0;
          do
          {
            v909 = (_QWORD *)v906[1];
            v910 = v906;
            if (v909)
            {
              do
              {
                v911 = v909;
                v909 = (_QWORD *)*v909;
              }
              while (v909);
            }
            else
            {
              do
              {
                v911 = (_QWORD *)v910[2];
                _ZF = *v911 == (_QWORD)v910;
                v910 = v911;
              }
              while (!_ZF);
            }
            v908 += *(unsigned __int8 *)(v906[6] + 528);
            v906 = v911;
          }
          while (v911 != v905);
        }
        sub_20E8C003C((uint64_t)&v2185, "Num tracks: %zu", v908);
        sub_20E863570((uint64_t)&v2185);
      }
      sub_20E863570((uint64_t)&v2185);
      v912 = v2193;
      if (v2193)
      {
        v913 = (unint64_t *)&v2193->__shared_owners_;
        do
          v914 = __ldaxr(v913);
        while (__stlxr(v914 - 1, v913));
        if (!v914)
        {
          ((void (*)(std::__shared_weak_count *))v912->__on_zero_shared)(v912);
          std::__shared_weak_count::__release_weak(v912);
        }
      }
LABEL_1501:
      if (*(_BYTE *)(a5 + 163))
      {
        *(_QWORD *)v2211 = "Before OfflineMapBA";
        *(_QWORD *)&v2211[8] = 19;
        v915 = *(int **)(*a2 + 296);
        v916 = *a2 + 304;
        v2185 = v2211;
        if (v915 != (int *)v916)
        {
          do
          {
            sub_20F3A7BF4((const char ***)&v2185, v915 + 8);
            v924 = (int *)*((_QWORD *)v915 + 1);
            if (v924)
            {
              do
              {
                v925 = v924;
                v924 = *(int **)v924;
              }
              while (v924);
            }
            else
            {
              do
              {
                v925 = (int *)*((_QWORD *)v915 + 2);
                _ZF = *(_QWORD *)v925 == (_QWORD)v915;
                v915 = v925;
              }
              while (!_ZF);
            }
            v915 = v925;
          }
          while (v925 != (int *)v916);
        }
      }
      if (*(_BYTE *)(a5 + 165))
        sub_20F363B5C(a2, "Before OfflineMapBA", 19);
      if (*(_BYTE *)(a5 + 166))
        sub_20F365434(*(_QWORD *)(*a2 + 376), (uint64_t)"Before OfflineMapBA", 19);
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3
        || (v917 = *(unsigned __int8 *)(v2180 + 72),
            v918 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0),
            v919 = v918,
            !v917)
        && !v918)
      {
LABEL_1604:
        if (!*(_BYTE *)(a5 + 160))
          goto LABEL_1607;
        goto LABEL_1605;
      }
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1260;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v920 = *(_QWORD *)v2185;
      v921 = *(_QWORD *)v2185 + 16;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v923 = *(const char **)(v920 + 16);
        v922 = *(_QWORD *)(v920 + 24);
      }
      else
      {
        v922 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v923 = (const char *)(*(_QWORD *)v2185 + 16);
      }
      v2149 = *(_QWORD *)(*v2153 + 64);
      v2163 = *(_QWORD *)(v2153[1] + 16);
      v926 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v926 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v927 = byte_254A4A4F8;
      else
        v927 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v928 = byte_254A4A4F8[23];
      else
        v928 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v927, v923);
      if (v928 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v928 >= 0x17)
      {
        v930 = (v928 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v928 | 7) != 0x17)
          v930 = v928 | 7;
        v931 = v930 + 1;
        v929 = operator new(v930 + 1);
        *(_QWORD *)&v2211[16] = v928;
        *(_QWORD *)&v2211[24] = v931 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v929;
LABEL_1534:
        memmove(v929, v927, v928);
        goto LABEL_1535;
      }
      v2211[31] = v928;
      v929 = &v2211[8];
      if (v928)
        goto LABEL_1534;
LABEL_1535:
      v929[v928] = 0;
      v2211[32] = 1;
      if (v922 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v922 >= 0x17)
      {
        v934 = (v922 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v922 | 7) != 0x17)
          v934 = v922 | 7;
        v935 = v934 + 1;
        v932 = (void **)operator new(v934 + 1);
        v2213 = v922;
        v2214 = v935 | 0x8000000000000000;
        v2212 = v932;
      }
      else
      {
        HIBYTE(v2214) = v922;
        v932 = (void **)&v2212;
        if (!v922)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v933 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_1539;
          goto LABEL_1545;
        }
      }
      memmove(v932, v923, v922);
      *((_BYTE *)v932 + v922) = 0;
      v2215 = 1;
      v933 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_1539:
        a2 = v2153;
        if (!v2211[32])
          goto LABEL_1548;
        goto LABEL_1546;
      }
LABEL_1545:
      operator delete(v2212);
      a2 = v2153;
      if (!v2211[32])
        goto LABEL_1548;
LABEL_1546:
      if ((v2211[31] & 0x80000000) != 0)
        operator delete(*(void **)&v2211[8]);
LABEL_1548:
      v936 = v921;
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      v937 = v2146 + 1;
      if (v919 && *(_QWORD *)(v919 + 24))
      {
        v938 = _os_log_pack_size();
        v939 = (std::__shared_weak_count_vtbl *)operator new(v938, (std::align_val_t)8uLL);
        v940 = (std::__shared_weak_count *)operator new();
        v941 = v940;
        v940->__shared_owners_ = 0;
        v942 = (unint64_t *)&v940->__shared_owners_;
        v940->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v940->__shared_weak_owners_ = 0;
        v940[1].__vftable = v939;
        *(_QWORD *)v2211 = v939;
        *(_QWORD *)&v2211[8] = v939;
        *(_QWORD *)&v2211[16] = v940;
        do
          v943 = __ldxr(v942);
        while (__stxr(v943 + 1, v942));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        a2 = v2153;
        do
          v944 = __ldaxr(v942);
        while (__stlxr(v944 - 1, v942));
        if (!v944)
        {
          ((void (*)(std::__shared_weak_count *))v940->__on_zero_shared)(v940);
          std::__shared_weak_count::__release_weak(v941);
        }
        v945 = *(_QWORD *)v2211;
        v946 = _os_log_pack_fill();
        *(_DWORD *)v946 = 67109632;
        *(_DWORD *)(v946 + 4) = v937;
        *(_WORD *)(v946 + 8) = 2048;
        *(_QWORD *)(v946 + 10) = v2149;
        *(_WORD *)(v946 + 18) = 2048;
        *(_QWORD *)(v946 + 20) = v2163;
        v947 = (char *)operator new();
        v948 = *(unsigned __int8 *)(v920 + 39);
        if ((v948 & 0x80u) == 0)
          v949 = v936;
        else
          v949 = *(_QWORD *)(v920 + 16);
        if ((v948 & 0x80u) != 0)
          v948 = *(_QWORD *)(v920 + 24);
        *(_QWORD *)v947 = v945;
        *(_OWORD *)(v947 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v947 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v947 + 5) = v949;
        *((_QWORD *)v947 + 6) = v948;
        v947[56] = 1;
        v2210 = 0;
        v2207[0] = v947;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v919 + 24) + 40))(*(_QWORD *)(v919 + 24), v2207);
        v950 = v2207[0];
        v2207[0] = 0;
        if (v950)
        {
          v951 = (std::__shared_weak_count *)*((_QWORD *)v950 + 4);
          if (v951)
          {
            v952 = (unint64_t *)&v951->__shared_owners_;
            do
              v953 = __ldaxr(v952);
            while (__stlxr(v953 - 1, v952));
            if (!v953)
            {
              ((void (*)(std::__shared_weak_count *))v951->__on_zero_shared)(v951);
              std::__shared_weak_count::__release_weak(v951);
            }
          }
          v954 = (std::__shared_weak_count *)*((_QWORD *)v950 + 2);
          if (v954)
          {
            v955 = (unint64_t *)&v954->__shared_owners_;
            do
              v956 = __ldaxr(v955);
            while (__stlxr(v956 - 1, v955));
            if (!v956)
            {
              ((void (*)(std::__shared_weak_count *))v954->__on_zero_shared)(v954);
              std::__shared_weak_count::__release_weak(v954);
            }
          }
          MEMORY[0x212BC6398](v950, 0x10F0C40B62ED6C6);
          v957 = v2210;
          v2210 = 0;
          if (v957)
          {
            v958 = *(std::__shared_weak_count **)(v957 + 32);
            if (v958)
            {
              v959 = (unint64_t *)&v958->__shared_owners_;
              do
                v960 = __ldaxr(v959);
              while (__stlxr(v960 - 1, v959));
              if (!v960)
              {
                ((void (*)(std::__shared_weak_count *))v958->__on_zero_shared)(v958);
                std::__shared_weak_count::__release_weak(v958);
              }
            }
            v961 = *(std::__shared_weak_count **)(v957 + 16);
            if (v961)
            {
              v962 = (unint64_t *)&v961->__shared_owners_;
              do
                v963 = __ldaxr(v962);
              while (__stlxr(v963 - 1, v962));
              if (!v963)
              {
                ((void (*)(std::__shared_weak_count *))v961->__on_zero_shared)(v961);
                std::__shared_weak_count::__release_weak(v961);
              }
            }
            MEMORY[0x212BC6398](v957, 0x10F0C40B62ED6C6);
          }
        }
        v964 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v965 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v966 = __ldaxr(v965);
          while (__stlxr(v966 - 1, v965));
          if (!v966)
          {
            ((void (*)(std::__shared_weak_count *))v964->__on_zero_shared)(v964);
            std::__shared_weak_count::__release_weak(v964);
          }
        }
        v967 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v968 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v969 = __ldaxr(v968);
          while (__stlxr(v969 - 1, v968));
          if (!v969)
          {
            ((void (*)(std::__shared_weak_count *))v967->__on_zero_shared)(v967);
            std::__shared_weak_count::__release_weak(v967);
          }
        }
      }
      else
      {
        os_log_type_enabled(v933, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 67109632;
        *(_DWORD *)&v2211[4] = v2146 + 1;
        *(_WORD *)&v2211[8] = 2048;
        *(_QWORD *)&v2211[10] = v2149;
        *(_WORD *)&v2211[18] = 2048;
        *(_QWORD *)&v2211[20] = v2163;
        v970 = (void *)_os_log_send_and_compose_impl();
        if (v970)
          free(v970);
      }
      if (v917)
      {
        sub_20E8C003C((uint64_t)&v2185, "BA: %u (%zu states, %zu tracks)", v937, *(_QWORD *)(*a2 + 64), *(_QWORD *)(a2[1] + 16));
        sub_20E863570((uint64_t)&v2185);
      }
      sub_20E863570((uint64_t)&v2185);
      v971 = v2193;
      if (!v2193)
        goto LABEL_1604;
      v972 = (unint64_t *)&v2193->__shared_owners_;
      do
        v973 = __ldaxr(v972);
      while (__stlxr(v973 - 1, v972));
      if (v973)
        goto LABEL_1604;
      ((void (*)(std::__shared_weak_count *))v971->__on_zero_shared)(v971);
      std::__shared_weak_count::__release_weak(v971);
      if (!*(_BYTE *)(v2152 + 160))
      {
LABEL_1607:
        sub_20F46DB70(a5);
        goto LABEL_1608;
      }
LABEL_1605:
      sub_20F4842B0(a5);
LABEL_1608:
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3
        || (v974 = *(unsigned __int8 *)(v2180 + 72),
            v975 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0),
            v976 = v975,
            !v974)
        && !v975)
      {
        if (!*(_BYTE *)(a5 + 163))
          goto LABEL_1707;
        goto LABEL_1612;
      }
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1270;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v981.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v982 = *(_QWORD *)v2185;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v984 = *(const char **)(v982 + 16);
        v983 = *(_QWORD *)(v982 + 24);
        v2164 = *(_QWORD *)v2185 + 16;
        v986 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v986 & 1) != 0)
          goto LABEL_1625;
      }
      else
      {
        v983 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v984 = (const char *)(*(_QWORD *)v2185 + 16);
        v2164 = (uint64_t)v984;
        v985 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v985 & 1) != 0)
          goto LABEL_1625;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_1625:
      if (byte_254A4A4F8[23] >= 0)
        v987 = byte_254A4A4F8;
      else
        v987 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v988 = byte_254A4A4F8[23];
      else
        v988 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v987, v984);
      if (v988 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v988 >= 0x17)
      {
        v990 = (v988 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v988 | 7) != 0x17)
          v990 = v988 | 7;
        v991 = v990 + 1;
        v989 = operator new(v990 + 1);
        *(_QWORD *)&v2211[16] = v988;
        *(_QWORD *)&v2211[24] = v991 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v989;
LABEL_1638:
        memmove(v989, v987, v988);
        goto LABEL_1639;
      }
      v2211[31] = v988;
      v989 = &v2211[8];
      if (v988)
        goto LABEL_1638;
LABEL_1639:
      v989[v988] = 0;
      v2211[32] = 1;
      if (v983 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v983 >= 0x17)
      {
        v994 = (v983 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v983 | 7) != 0x17)
          v994 = v983 | 7;
        v995 = v994 + 1;
        v992 = (void **)operator new(v994 + 1);
        v2213 = v983;
        v2214 = v995 | 0x8000000000000000;
        v2212 = v992;
      }
      else
      {
        HIBYTE(v2214) = v983;
        v992 = (void **)&v2212;
        if (!v983)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v993 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_1643;
          goto LABEL_1649;
        }
      }
      memmove(v992, v984, v983);
      *((_BYTE *)v992 + v983) = 0;
      v2215 = 1;
      v993 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_1643:
        if (!v2211[32])
          goto LABEL_1652;
        goto LABEL_1650;
      }
LABEL_1649:
      operator delete(v2212);
      if (!v2211[32])
        goto LABEL_1652;
LABEL_1650:
      if ((v2211[31] & 0x80000000) != 0)
        operator delete(*(void **)&v2211[8]);
LABEL_1652:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v976 && *(_QWORD *)(v976 + 24))
      {
        v996 = _os_log_pack_size();
        v997 = (std::__shared_weak_count_vtbl *)operator new(v996, (std::align_val_t)8uLL);
        v998 = (std::__shared_weak_count *)operator new();
        v999 = v998;
        v998->__shared_owners_ = 0;
        v1000 = (unint64_t *)&v998->__shared_owners_;
        v998->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v998->__shared_weak_owners_ = 0;
        v998[1].__vftable = v997;
        *(_QWORD *)v2211 = v997;
        *(_QWORD *)&v2211[8] = v997;
        *(_QWORD *)&v2211[16] = v998;
        do
          v1001 = __ldxr(v1000);
        while (__stxr(v1001 + 1, v1000));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        do
          v1002 = __ldaxr(v1000);
        while (__stlxr(v1002 - 1, v1000));
        if (!v1002)
        {
          ((void (*)(std::__shared_weak_count *))v998->__on_zero_shared)(v998);
          std::__shared_weak_count::__release_weak(v999);
        }
        v1003 = *(_QWORD *)v2211;
        v1004 = _os_log_pack_fill();
        *(_DWORD *)v1004 = 134217984;
        *(double *)(v1004 + 4) = (double)(v981.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v1005 = (char *)operator new();
        v1006 = *(unsigned __int8 *)(v982 + 39);
        v1007 = v2164;
        if ((v1006 & 0x80u) != 0)
        {
          v1007 = *(_QWORD *)(v982 + 16);
          v1006 = *(_QWORD *)(v982 + 24);
        }
        *(_QWORD *)v1005 = v1003;
        *(_OWORD *)(v1005 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v1005 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v1005 + 5) = v1007;
        *((_QWORD *)v1005 + 6) = v1006;
        v1005[56] = 1;
        v2210 = 0;
        v2207[0] = v1005;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v976 + 24) + 40))(*(_QWORD *)(v976 + 24), v2207);
        v1008 = v2207[0];
        v2207[0] = 0;
        a2 = v2153;
        if (v1008)
        {
          v1009 = (std::__shared_weak_count *)*((_QWORD *)v1008 + 4);
          if (v1009)
          {
            v1010 = (unint64_t *)&v1009->__shared_owners_;
            do
              v1011 = __ldaxr(v1010);
            while (__stlxr(v1011 - 1, v1010));
            if (!v1011)
            {
              ((void (*)(std::__shared_weak_count *))v1009->__on_zero_shared)(v1009);
              std::__shared_weak_count::__release_weak(v1009);
            }
          }
          v1012 = (std::__shared_weak_count *)*((_QWORD *)v1008 + 2);
          if (v1012)
          {
            v1013 = (unint64_t *)&v1012->__shared_owners_;
            do
              v1014 = __ldaxr(v1013);
            while (__stlxr(v1014 - 1, v1013));
            if (!v1014)
            {
              ((void (*)(std::__shared_weak_count *))v1012->__on_zero_shared)(v1012);
              std::__shared_weak_count::__release_weak(v1012);
            }
          }
          MEMORY[0x212BC6398](v1008, 0x10F0C40B62ED6C6);
          v1015 = v2210;
          v2210 = 0;
          if (v1015)
          {
            v1016 = *(std::__shared_weak_count **)(v1015 + 32);
            if (v1016)
            {
              v1017 = (unint64_t *)&v1016->__shared_owners_;
              do
                v1018 = __ldaxr(v1017);
              while (__stlxr(v1018 - 1, v1017));
              if (!v1018)
              {
                ((void (*)(std::__shared_weak_count *))v1016->__on_zero_shared)(v1016);
                std::__shared_weak_count::__release_weak(v1016);
              }
            }
            v1019 = *(std::__shared_weak_count **)(v1015 + 16);
            if (v1019)
            {
              v1020 = (unint64_t *)&v1019->__shared_owners_;
              do
                v1021 = __ldaxr(v1020);
              while (__stlxr(v1021 - 1, v1020));
              if (!v1021)
              {
                ((void (*)(std::__shared_weak_count *))v1019->__on_zero_shared)(v1019);
                std::__shared_weak_count::__release_weak(v1019);
              }
            }
            MEMORY[0x212BC6398](v1015, 0x10F0C40B62ED6C6);
          }
        }
        v1022 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v1023 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v1024 = __ldaxr(v1023);
          while (__stlxr(v1024 - 1, v1023));
          if (!v1024)
          {
            ((void (*)(std::__shared_weak_count *))v1022->__on_zero_shared)(v1022);
            std::__shared_weak_count::__release_weak(v1022);
          }
        }
        v1025 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v1026 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v1027 = __ldaxr(v1026);
          while (__stlxr(v1027 - 1, v1026));
          if (!v1027)
          {
            ((void (*)(std::__shared_weak_count *))v1025->__on_zero_shared)(v1025);
            std::__shared_weak_count::__release_weak(v1025);
          }
        }
      }
      else
      {
        os_log_type_enabled(v993, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 134217984;
        *(double *)&v2211[4] = (double)(v981.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v1028 = (void *)_os_log_send_and_compose_impl();
        a2 = v2153;
        if (v1028)
          free(v1028);
      }
      if (v974)
      {
        v1029.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v1029.__d_.__rep_ - v981.__d_.__rep_) / 1000000000.0);
        sub_20E863570((uint64_t)&v2185);
      }
      else
      {
        v1029.__d_.__rep_ = v981.__d_.__rep_;
      }
      sub_20E863570((uint64_t)&v2185);
      v1030 = v2193;
      if (!v2193)
        goto LABEL_1706;
      v1031 = (unint64_t *)&v2193->__shared_owners_;
      do
        v1032 = __ldaxr(v1031);
      while (__stlxr(v1032 - 1, v1031));
      if (!v1032)
      {
        ((void (*)(std::__shared_weak_count *))v1030->__on_zero_shared)(v1030);
        std::__shared_weak_count::__release_weak(v1030);
        v2147.__d_.__rep_ = v1029.__d_.__rep_;
        if (!*(_BYTE *)(v2152 + 163))
          goto LABEL_1707;
      }
      else
      {
LABEL_1706:
        v2147.__d_.__rep_ = v1029.__d_.__rep_;
        if (!*(_BYTE *)(v2152 + 163))
          goto LABEL_1707;
      }
LABEL_1612:
      *(_QWORD *)v2211 = "After OfflineMapBA";
      *(_QWORD *)&v2211[8] = 18;
      v977 = *(int **)(*a2 + 296);
      v978 = *a2 + 304;
      v2185 = v2211;
      if (v977 != (int *)v978)
      {
        do
        {
          sub_20F3A7BF4((const char ***)&v2185, v977 + 8);
          v979 = (int *)*((_QWORD *)v977 + 1);
          if (v979)
          {
            do
            {
              v980 = v979;
              v979 = *(int **)v979;
            }
            while (v979);
          }
          else
          {
            do
            {
              v980 = (int *)*((_QWORD *)v977 + 2);
              _ZF = *(_QWORD *)v980 == (_QWORD)v977;
              v977 = v980;
            }
            while (!_ZF);
          }
          v977 = v980;
        }
        while (v980 != (int *)v978);
      }
LABEL_1707:
      if (*(_BYTE *)(a5 + 165))
        sub_20F363B5C(a2, "After OfflineMapBA", 18);
      if (*(_BYTE *)(a5 + 166))
        sub_20F365434(*(_QWORD *)(*a2 + 376), (uint64_t)"After OfflineMapBA", 18);
      if (*(_BYTE *)(a5 + 10))
      {
        sub_20F34CD58(&v2180);
        if (**(int **)(v2180 + 56) > 3)
          goto LABEL_1805;
        v1033 = *(unsigned __int8 *)(v2180 + 72);
        v1034 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
        v1035 = v1034;
        if (!v1033 && !v1034)
          goto LABEL_1805;
        v2185 = &v2180;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v2187 = std::chrono::system_clock::now().__d_.__rep_;
        v2188 = 3;
        v2189 = "unknown file";
        v2190 = 1284;
        v2191 = "unknown function";
        v2192 = 0;
        v2193 = 0;
        v1036 = *(_QWORD *)v2185;
        v1037 = *(_QWORD *)v2185 + 16;
        if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
        {
          v1039 = *(const char **)(v1036 + 16);
          v1038 = *(_QWORD *)(v1036 + 24);
          v1041 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1041 & 1) == 0)
          {
LABEL_2238:
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v2207);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
              if (v2209 && v2208 < 0)
                operator delete(v2207[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
          }
        }
        else
        {
          v1038 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
          v1039 = (const char *)(*(_QWORD *)v2185 + 16);
          v1040 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1040 & 1) == 0)
            goto LABEL_2238;
        }
        if (byte_254A4A4F8[23] >= 0)
          v1042 = byte_254A4A4F8;
        else
          v1042 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v1043 = byte_254A4A4F8[23];
        else
          v1043 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v2211 = os_log_create(v1042, v1039);
        if (v1043 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1043 >= 0x17)
        {
          v1045 = (v1043 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1043 | 7) != 0x17)
            v1045 = v1043 | 7;
          v1046 = v1045 + 1;
          v1044 = operator new(v1045 + 1);
          *(_QWORD *)&v2211[16] = v1043;
          *(_QWORD *)&v2211[24] = v1046 | 0x8000000000000000;
          *(_QWORD *)&v2211[8] = v1044;
        }
        else
        {
          v2211[31] = v1043;
          v1044 = &v2211[8];
          if (!v1043)
          {
LABEL_1735:
            v1044[v1043] = 0;
            v2211[32] = 1;
            if (v1038 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            a5 = v2152;
            if (v1038 >= 0x17)
            {
              v1049 = (v1038 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1038 | 7) != 0x17)
                v1049 = v1038 | 7;
              v1050 = v1049 + 1;
              v1047 = (void **)operator new(v1049 + 1);
              v2213 = v1038;
              v2214 = v1050 | 0x8000000000000000;
              v2212 = v1047;
            }
            else
            {
              HIBYTE(v2214) = v1038;
              v1047 = (void **)&v2212;
              if (!v1038)
              {
                LOBYTE(v2212) = 0;
                v2215 = 1;
                v1048 = *(NSObject **)v2211;
                if ((SHIBYTE(v2214) & 0x80000000) == 0)
                  goto LABEL_1739;
LABEL_1745:
                operator delete(v2212);
                a2 = v2153;
                if (v2211[32])
                  goto LABEL_1746;
                goto LABEL_1748;
              }
            }
            memmove(v1047, v1039, v1038);
            *((_BYTE *)v1047 + v1038) = 0;
            v2215 = 1;
            v1048 = *(NSObject **)v2211;
            if (SHIBYTE(v2214) < 0)
              goto LABEL_1745;
LABEL_1739:
            a2 = v2153;
            if (v2211[32])
            {
LABEL_1746:
              if ((v2211[31] & 0x80000000) != 0)
                operator delete(*(void **)&v2211[8]);
            }
LABEL_1748:
            if (*(_QWORD *)v2211)
              os_release(*(void **)v2211);
            if (v1035 && *(_QWORD *)(v1035 + 24))
            {
              v1051 = _os_log_pack_size();
              v1052 = (std::__shared_weak_count_vtbl *)operator new(v1051, (std::align_val_t)8uLL);
              v1053 = (std::__shared_weak_count *)operator new();
              v1054 = v1053;
              v1053->__shared_owners_ = 0;
              v1055 = (unint64_t *)&v1053->__shared_owners_;
              v1053->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v1053->__shared_weak_owners_ = 0;
              v1053[1].__vftable = v1052;
              *(_QWORD *)v2211 = v1052;
              *(_QWORD *)&v2211[8] = v1052;
              *(_QWORD *)&v2211[16] = v1053;
              do
                v1056 = __ldxr(v1055);
              while (__stxr(v1056 + 1, v1055));
              *(_QWORD *)&v2211[24] = 0;
              *(_QWORD *)&v2211[32] = 0;
              v2212 = 0;
              a2 = v2153;
              do
                v1057 = __ldaxr(v1055);
              while (__stlxr(v1057 - 1, v1055));
              if (!v1057)
              {
                ((void (*)(std::__shared_weak_count *))v1053->__on_zero_shared)(v1053);
                std::__shared_weak_count::__release_weak(v1054);
              }
              v1058 = *(_QWORD *)v2211;
              *(_WORD *)_os_log_pack_fill() = 0;
              v1059 = (char *)operator new();
              v1060 = *(unsigned __int8 *)(v1036 + 39);
              if ((v1060 & 0x80u) == 0)
                v1061 = v1037;
              else
                v1061 = *(_QWORD *)(v1036 + 16);
              if ((v1060 & 0x80u) != 0)
                v1060 = *(_QWORD *)(v1036 + 24);
              *(_QWORD *)v1059 = v1058;
              *(_OWORD *)(v1059 + 8) = *(_OWORD *)&v2211[8];
              *(_QWORD *)&v2211[8] = 0;
              *(_QWORD *)&v2211[16] = 0;
              *(_OWORD *)(v1059 + 24) = *(_OWORD *)&v2211[24];
              *(_QWORD *)&v2211[24] = 0;
              *(_QWORD *)&v2211[32] = 0;
              *((_QWORD *)v1059 + 5) = v1061;
              *((_QWORD *)v1059 + 6) = v1060;
              v1059[56] = 1;
              v2210 = 0;
              v2207[0] = v1059;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1035 + 24) + 40))(*(_QWORD *)(v1035 + 24), v2207);
              v1062 = v2207[0];
              v2207[0] = 0;
              if (v1062)
              {
                v1063 = (std::__shared_weak_count *)*((_QWORD *)v1062 + 4);
                if (v1063)
                {
                  v1064 = (unint64_t *)&v1063->__shared_owners_;
                  do
                    v1065 = __ldaxr(v1064);
                  while (__stlxr(v1065 - 1, v1064));
                  if (!v1065)
                  {
                    ((void (*)(std::__shared_weak_count *))v1063->__on_zero_shared)(v1063);
                    std::__shared_weak_count::__release_weak(v1063);
                  }
                }
                v1066 = (std::__shared_weak_count *)*((_QWORD *)v1062 + 2);
                if (v1066)
                {
                  v1067 = (unint64_t *)&v1066->__shared_owners_;
                  do
                    v1068 = __ldaxr(v1067);
                  while (__stlxr(v1068 - 1, v1067));
                  if (!v1068)
                  {
                    ((void (*)(std::__shared_weak_count *))v1066->__on_zero_shared)(v1066);
                    std::__shared_weak_count::__release_weak(v1066);
                  }
                }
                MEMORY[0x212BC6398](v1062, 0x10F0C40B62ED6C6);
                v1069 = v2210;
                v2210 = 0;
                if (v1069)
                {
                  v1070 = *(std::__shared_weak_count **)(v1069 + 32);
                  if (v1070)
                  {
                    v1071 = (unint64_t *)&v1070->__shared_owners_;
                    do
                      v1072 = __ldaxr(v1071);
                    while (__stlxr(v1072 - 1, v1071));
                    if (!v1072)
                    {
                      ((void (*)(std::__shared_weak_count *))v1070->__on_zero_shared)(v1070);
                      std::__shared_weak_count::__release_weak(v1070);
                    }
                  }
                  v1073 = *(std::__shared_weak_count **)(v1069 + 16);
                  if (v1073)
                  {
                    v1074 = (unint64_t *)&v1073->__shared_owners_;
                    do
                      v1075 = __ldaxr(v1074);
                    while (__stlxr(v1075 - 1, v1074));
                    if (!v1075)
                    {
                      ((void (*)(std::__shared_weak_count *))v1073->__on_zero_shared)(v1073);
                      std::__shared_weak_count::__release_weak(v1073);
                    }
                  }
                  MEMORY[0x212BC6398](v1069, 0x10F0C40B62ED6C6);
                }
              }
              v1076 = *(std::__shared_weak_count **)&v2211[32];
              if (*(_QWORD *)&v2211[32])
              {
                v1077 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                do
                  v1078 = __ldaxr(v1077);
                while (__stlxr(v1078 - 1, v1077));
                if (!v1078)
                {
                  ((void (*)(std::__shared_weak_count *))v1076->__on_zero_shared)(v1076);
                  std::__shared_weak_count::__release_weak(v1076);
                }
              }
              v1079 = *(std::__shared_weak_count **)&v2211[16];
              if (*(_QWORD *)&v2211[16])
              {
                v1080 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                do
                  v1081 = __ldaxr(v1080);
                while (__stlxr(v1081 - 1, v1080));
                if (!v1081)
                {
                  ((void (*)(std::__shared_weak_count *))v1079->__on_zero_shared)(v1079);
                  std::__shared_weak_count::__release_weak(v1079);
                }
              }
            }
            else
            {
              os_log_type_enabled(v1048, OS_LOG_TYPE_INFO);
              *(_WORD *)v2211 = 0;
              v1082 = (void *)_os_log_send_and_compose_impl();
              if (v1082)
                free(v1082);
            }
            if (v1033)
            {
              sub_20E8C003C((uint64_t)&v2185, "Remove outlier tracks after BA");
              sub_20E863570((uint64_t)&v2185);
            }
            sub_20E863570((uint64_t)&v2185);
            v1083 = v2193;
            if (v2193)
            {
              v1084 = (unint64_t *)&v2193->__shared_owners_;
              do
                v1085 = __ldaxr(v1084);
              while (__stlxr(v1085 - 1, v1084));
              if (!v1085)
              {
                ((void (*)(std::__shared_weak_count *))v1083->__on_zero_shared)(v1083);
                std::__shared_weak_count::__release_weak(v1083);
              }
            }
LABEL_1805:
            sub_20F363910();
            sub_20F34CD58(&v2180);
            if (**(int **)(v2180 + 56) > 3)
              goto LABEL_1894;
            v1086 = *(unsigned __int8 *)(v2180 + 72);
            v1087 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
            v1088 = v1087;
            if (!v1086 && !v1087)
              goto LABEL_1894;
            v2185 = &v2180;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v2187 = std::chrono::system_clock::now().__d_.__rep_;
            v2188 = 3;
            v2189 = "unknown file";
            v2190 = 1286;
            v2191 = "unknown function";
            v2192 = 0;
            v2193 = 0;
            v1089.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v1090 = *(_QWORD *)v2185;
            if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
            {
              v1092 = *(const char **)(v1090 + 16);
              v1091 = *(_QWORD *)(v1090 + 24);
              v2165 = *(_QWORD *)v2185 + 16;
              v1094 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v1094 & 1) == 0)
              {
LABEL_2243:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v2207);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
                  if (v2209 && v2208 < 0)
                    operator delete(v2207[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v1091 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
              v1092 = (const char *)(*(_QWORD *)v2185 + 16);
              v2165 = (uint64_t)v1092;
              v1093 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v1093 & 1) == 0)
                goto LABEL_2243;
            }
            if (byte_254A4A4F8[23] >= 0)
              v1095 = byte_254A4A4F8;
            else
              v1095 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v1096 = byte_254A4A4F8[23];
            else
              v1096 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v2211 = os_log_create(v1095, v1092);
            if (v1096 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1096 >= 0x17)
            {
              v1098 = (v1096 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1096 | 7) != 0x17)
                v1098 = v1096 | 7;
              v1099 = v1098 + 1;
              v1097 = operator new(v1098 + 1);
              *(_QWORD *)&v2211[16] = v1096;
              *(_QWORD *)&v2211[24] = v1099 | 0x8000000000000000;
              *(_QWORD *)&v2211[8] = v1097;
            }
            else
            {
              v2211[31] = v1096;
              v1097 = &v2211[8];
              if (!v1096)
              {
LABEL_1826:
                v1097[v1096] = 0;
                v2211[32] = 1;
                if (v1091 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                a5 = v2152;
                if (v1091 >= 0x17)
                {
                  v1102 = (v1091 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v1091 | 7) != 0x17)
                    v1102 = v1091 | 7;
                  v1103 = v1102 + 1;
                  v1100 = (void **)operator new(v1102 + 1);
                  v2213 = v1091;
                  v2214 = v1103 | 0x8000000000000000;
                  v2212 = v1100;
                }
                else
                {
                  HIBYTE(v2214) = v1091;
                  v1100 = (void **)&v2212;
                  if (!v1091)
                  {
                    LOBYTE(v2212) = 0;
                    v2215 = 1;
                    v1101 = *(NSObject **)v2211;
                    if ((SHIBYTE(v2214) & 0x80000000) == 0)
                      goto LABEL_1830;
LABEL_1836:
                    operator delete(v2212);
                    if (v2211[32])
                      goto LABEL_1837;
                    goto LABEL_1839;
                  }
                }
                memmove(v1100, v1092, v1091);
                *((_BYTE *)v1100 + v1091) = 0;
                v2215 = 1;
                v1101 = *(NSObject **)v2211;
                if (SHIBYTE(v2214) < 0)
                  goto LABEL_1836;
LABEL_1830:
                if (v2211[32])
                {
LABEL_1837:
                  if ((v2211[31] & 0x80000000) != 0)
                    operator delete(*(void **)&v2211[8]);
                }
LABEL_1839:
                if (*(_QWORD *)v2211)
                  os_release(*(void **)v2211);
                if (v1088 && *(_QWORD *)(v1088 + 24))
                {
                  v1104 = _os_log_pack_size();
                  v1105 = (std::__shared_weak_count_vtbl *)operator new(v1104, (std::align_val_t)8uLL);
                  v1106 = (std::__shared_weak_count *)operator new();
                  v1107 = v1106;
                  v1106->__shared_owners_ = 0;
                  v1108 = (unint64_t *)&v1106->__shared_owners_;
                  v1106->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v1106->__shared_weak_owners_ = 0;
                  v1106[1].__vftable = v1105;
                  *(_QWORD *)v2211 = v1105;
                  *(_QWORD *)&v2211[8] = v1105;
                  *(_QWORD *)&v2211[16] = v1106;
                  do
                    v1109 = __ldxr(v1108);
                  while (__stxr(v1109 + 1, v1108));
                  *(_QWORD *)&v2211[24] = 0;
                  *(_QWORD *)&v2211[32] = 0;
                  v2212 = 0;
                  do
                    v1110 = __ldaxr(v1108);
                  while (__stlxr(v1110 - 1, v1108));
                  if (!v1110)
                  {
                    ((void (*)(std::__shared_weak_count *))v1106->__on_zero_shared)(v1106);
                    std::__shared_weak_count::__release_weak(v1107);
                  }
                  v1111 = *(_QWORD *)v2211;
                  v1112 = _os_log_pack_fill();
                  *(_DWORD *)v1112 = 134217984;
                  *(double *)(v1112 + 4) = (double)(v1089.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
                  v1113 = (char *)operator new();
                  v1114 = *(unsigned __int8 *)(v1090 + 39);
                  v1115 = v2165;
                  if ((v1114 & 0x80u) != 0)
                  {
                    v1115 = *(_QWORD *)(v1090 + 16);
                    v1114 = *(_QWORD *)(v1090 + 24);
                  }
                  *(_QWORD *)v1113 = v1111;
                  *(_OWORD *)(v1113 + 8) = *(_OWORD *)&v2211[8];
                  *(_QWORD *)&v2211[8] = 0;
                  *(_QWORD *)&v2211[16] = 0;
                  *(_OWORD *)(v1113 + 24) = *(_OWORD *)&v2211[24];
                  *(_QWORD *)&v2211[24] = 0;
                  *(_QWORD *)&v2211[32] = 0;
                  *((_QWORD *)v1113 + 5) = v1115;
                  *((_QWORD *)v1113 + 6) = v1114;
                  v1113[56] = 1;
                  v2210 = 0;
                  v2207[0] = v1113;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1088 + 24) + 40))(*(_QWORD *)(v1088 + 24), v2207);
                  v1116 = v2207[0];
                  v2207[0] = 0;
                  a2 = v2153;
                  if (v1116)
                  {
                    v1117 = (std::__shared_weak_count *)*((_QWORD *)v1116 + 4);
                    if (v1117)
                    {
                      v1118 = (unint64_t *)&v1117->__shared_owners_;
                      do
                        v1119 = __ldaxr(v1118);
                      while (__stlxr(v1119 - 1, v1118));
                      if (!v1119)
                      {
                        ((void (*)(std::__shared_weak_count *))v1117->__on_zero_shared)(v1117);
                        std::__shared_weak_count::__release_weak(v1117);
                      }
                    }
                    v1120 = (std::__shared_weak_count *)*((_QWORD *)v1116 + 2);
                    if (v1120)
                    {
                      v1121 = (unint64_t *)&v1120->__shared_owners_;
                      do
                        v1122 = __ldaxr(v1121);
                      while (__stlxr(v1122 - 1, v1121));
                      if (!v1122)
                      {
                        ((void (*)(std::__shared_weak_count *))v1120->__on_zero_shared)(v1120);
                        std::__shared_weak_count::__release_weak(v1120);
                      }
                    }
                    MEMORY[0x212BC6398](v1116, 0x10F0C40B62ED6C6);
                    v1123 = v2210;
                    v2210 = 0;
                    if (v1123)
                    {
                      v1124 = *(std::__shared_weak_count **)(v1123 + 32);
                      if (v1124)
                      {
                        v1125 = (unint64_t *)&v1124->__shared_owners_;
                        do
                          v1126 = __ldaxr(v1125);
                        while (__stlxr(v1126 - 1, v1125));
                        if (!v1126)
                        {
                          ((void (*)(std::__shared_weak_count *))v1124->__on_zero_shared)(v1124);
                          std::__shared_weak_count::__release_weak(v1124);
                        }
                      }
                      v1127 = *(std::__shared_weak_count **)(v1123 + 16);
                      if (v1127)
                      {
                        v1128 = (unint64_t *)&v1127->__shared_owners_;
                        do
                          v1129 = __ldaxr(v1128);
                        while (__stlxr(v1129 - 1, v1128));
                        if (!v1129)
                        {
                          ((void (*)(std::__shared_weak_count *))v1127->__on_zero_shared)(v1127);
                          std::__shared_weak_count::__release_weak(v1127);
                        }
                      }
                      MEMORY[0x212BC6398](v1123, 0x10F0C40B62ED6C6);
                    }
                  }
                  v1130 = *(std::__shared_weak_count **)&v2211[32];
                  if (*(_QWORD *)&v2211[32])
                  {
                    v1131 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                    do
                      v1132 = __ldaxr(v1131);
                    while (__stlxr(v1132 - 1, v1131));
                    if (!v1132)
                    {
                      ((void (*)(std::__shared_weak_count *))v1130->__on_zero_shared)(v1130);
                      std::__shared_weak_count::__release_weak(v1130);
                    }
                  }
                  v1133 = *(std::__shared_weak_count **)&v2211[16];
                  if (*(_QWORD *)&v2211[16])
                  {
                    v1134 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                    do
                      v1135 = __ldaxr(v1134);
                    while (__stlxr(v1135 - 1, v1134));
                    if (!v1135)
                    {
                      ((void (*)(std::__shared_weak_count *))v1133->__on_zero_shared)(v1133);
                      std::__shared_weak_count::__release_weak(v1133);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v1101, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v2211 = 134217984;
                  *(double *)&v2211[4] = (double)(v1089.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
                  v1136 = (void *)_os_log_send_and_compose_impl();
                  a2 = v2153;
                  if (v1136)
                    free(v1136);
                }
                if (v1086)
                {
                  v1137.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                  sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v1137.__d_.__rep_ - v1089.__d_.__rep_) / 1000000000.0);
                  sub_20E863570((uint64_t)&v2185);
                }
                else
                {
                  v1137.__d_.__rep_ = v1089.__d_.__rep_;
                }
                sub_20E863570((uint64_t)&v2185);
                v2147.__d_.__rep_ = v1137.__d_.__rep_;
                v1138 = v2193;
                if (v2193)
                {
                  v1139 = (unint64_t *)&v2193->__shared_owners_;
                  do
                    v1140 = __ldaxr(v1139);
                  while (__stlxr(v1140 - 1, v1139));
                  if (!v1140)
                  {
                    ((void (*)(std::__shared_weak_count *))v1138->__on_zero_shared)(v1138);
                    std::__shared_weak_count::__release_weak(v1138);
                  }
                }
LABEL_1894:
                sub_20F34CD58(&v2180);
                if (**(int **)(v2180 + 56) > 3)
                  goto LABEL_2004;
                v1141 = *(unsigned __int8 *)(v2180 + 72);
                v1142 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
                v1143 = v1142;
                if (!v1141 && v1142 == 0)
                  goto LABEL_2004;
                v2185 = &v2180;
                rep = std::chrono::steady_clock::now().__d_.__rep_;
                v2187 = std::chrono::system_clock::now().__d_.__rep_;
                v2188 = 3;
                v2189 = "unknown file";
                v2190 = 1287;
                v2191 = "unknown function";
                v2192 = 0;
                v2193 = 0;
                v1145 = (_QWORD *)a2[1];
                v1148 = (_QWORD *)*v1145;
                v1146 = v1145 + 1;
                v1147 = v1148;
                if (v1148 == v1146)
                {
                  v1149 = 0;
                }
                else
                {
                  v1149 = 0;
                  do
                  {
                    v1150 = (_QWORD *)v1147[1];
                    v1151 = v1147;
                    if (v1150)
                    {
                      do
                      {
                        v1152 = v1150;
                        v1150 = (_QWORD *)*v1150;
                      }
                      while (v1150);
                    }
                    else
                    {
                      do
                      {
                        v1152 = (_QWORD *)v1151[2];
                        _ZF = *v1152 == (_QWORD)v1151;
                        v1151 = v1152;
                      }
                      while (!_ZF);
                    }
                    v1149 += *(unsigned __int8 *)(v1147[6] + 528);
                    v1147 = v1152;
                  }
                  while (v1152 != v1146);
                }
                v1153 = *(_QWORD *)v2185;
                v1154 = (const char *)(*(_QWORD *)v2185 + 16);
                v2166 = v1154;
                if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
                {
                  v1154 = *(const char **)(v1153 + 16);
                  v1155 = *(_QWORD *)(v1153 + 24);
                  v1157 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v1157 & 1) == 0)
                  {
LABEL_2248:
                    if (__cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)v2207);
                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
                      if (v2209 && v2208 < 0)
                        operator delete(v2207[0]);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                  }
                }
                else
                {
                  v1155 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
                  v1156 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v1156 & 1) == 0)
                    goto LABEL_2248;
                }
                if (byte_254A4A4F8[23] >= 0)
                  v1158 = byte_254A4A4F8;
                else
                  v1158 = *(const char **)byte_254A4A4F8;
                if (byte_254A4A4F8[23] >= 0)
                  v1159 = byte_254A4A4F8[23];
                else
                  v1159 = *(_QWORD *)&byte_254A4A4F8[8];
                *(_QWORD *)v2211 = os_log_create(v1158, v1154);
                if (v1159 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v1159 >= 0x17)
                {
                  v1161 = (v1159 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v1159 | 7) != 0x17)
                    v1161 = v1159 | 7;
                  v1162 = v1161 + 1;
                  v1160 = operator new(v1161 + 1);
                  *(_QWORD *)&v2211[16] = v1159;
                  *(_QWORD *)&v2211[24] = v1162 | 0x8000000000000000;
                  *(_QWORD *)&v2211[8] = v1160;
                }
                else
                {
                  v2211[31] = v1159;
                  v1160 = &v2211[8];
                  if (!v1159)
                  {
LABEL_1927:
                    v1160[v1159] = 0;
                    v2211[32] = 1;
                    if (v1155 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    a5 = v2152;
                    if (v1155 >= 0x17)
                    {
                      v1165 = (v1155 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v1155 | 7) != 0x17)
                        v1165 = v1155 | 7;
                      v1166 = v1165 + 1;
                      v1163 = (void **)operator new(v1165 + 1);
                      v2213 = v1155;
                      v2214 = v1166 | 0x8000000000000000;
                      v2212 = v1163;
                    }
                    else
                    {
                      HIBYTE(v2214) = v1155;
                      v1163 = (void **)&v2212;
                      if (!v1155)
                      {
                        LOBYTE(v2212) = 0;
                        v2215 = 1;
                        v1164 = *(NSObject **)v2211;
                        if ((SHIBYTE(v2214) & 0x80000000) == 0)
                          goto LABEL_1931;
LABEL_1937:
                        operator delete(v2212);
                        a2 = v2153;
                        if (v2211[32])
                          goto LABEL_1938;
                        goto LABEL_1940;
                      }
                    }
                    memmove(v1163, v1154, v1155);
                    *((_BYTE *)v1163 + v1155) = 0;
                    v2215 = 1;
                    v1164 = *(NSObject **)v2211;
                    if (SHIBYTE(v2214) < 0)
                      goto LABEL_1937;
LABEL_1931:
                    a2 = v2153;
                    if (v2211[32])
                    {
LABEL_1938:
                      if ((v2211[31] & 0x80000000) != 0)
                        operator delete(*(void **)&v2211[8]);
                    }
LABEL_1940:
                    if (*(_QWORD *)v2211)
                      os_release(*(void **)v2211);
                    if (v1143 && *(_QWORD *)(v1143 + 24))
                    {
                      v1167 = _os_log_pack_size();
                      v1168 = (std::__shared_weak_count_vtbl *)operator new(v1167, (std::align_val_t)8uLL);
                      v1169 = (std::__shared_weak_count *)operator new();
                      v1170 = v1169;
                      v1169->__shared_owners_ = 0;
                      v1171 = (unint64_t *)&v1169->__shared_owners_;
                      v1169->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v1169->__shared_weak_owners_ = 0;
                      v1169[1].__vftable = v1168;
                      *(_QWORD *)v2211 = v1168;
                      *(_QWORD *)&v2211[8] = v1168;
                      *(_QWORD *)&v2211[16] = v1169;
                      do
                        v1172 = __ldxr(v1171);
                      while (__stxr(v1172 + 1, v1171));
                      *(_QWORD *)&v2211[24] = 0;
                      *(_QWORD *)&v2211[32] = 0;
                      v2212 = 0;
                      a2 = v2153;
                      do
                        v1173 = __ldaxr(v1171);
                      while (__stlxr(v1173 - 1, v1171));
                      if (!v1173)
                      {
                        ((void (*)(std::__shared_weak_count *))v1169->__on_zero_shared)(v1169);
                        std::__shared_weak_count::__release_weak(v1170);
                      }
                      v1174 = *(_QWORD *)v2211;
                      v1175 = _os_log_pack_fill();
                      *(_DWORD *)v1175 = 134217984;
                      *(_QWORD *)(v1175 + 4) = v1149;
                      v1176 = (char *)operator new();
                      v1177 = *(unsigned __int8 *)(v1153 + 39);
                      v1178 = v2166;
                      if ((v1177 & 0x80u) != 0)
                      {
                        v1178 = *(const char **)(v1153 + 16);
                        v1177 = *(_QWORD *)(v1153 + 24);
                      }
                      *(_QWORD *)v1176 = v1174;
                      *(_OWORD *)(v1176 + 8) = *(_OWORD *)&v2211[8];
                      *(_QWORD *)&v2211[8] = 0;
                      *(_QWORD *)&v2211[16] = 0;
                      *(_OWORD *)(v1176 + 24) = *(_OWORD *)&v2211[24];
                      *(_QWORD *)&v2211[24] = 0;
                      *(_QWORD *)&v2211[32] = 0;
                      *((_QWORD *)v1176 + 5) = v1178;
                      *((_QWORD *)v1176 + 6) = v1177;
                      v1176[56] = 1;
                      v2210 = 0;
                      v2207[0] = v1176;
                      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1143 + 24) + 40))(*(_QWORD *)(v1143 + 24), v2207);
                      v1179 = v2207[0];
                      v2207[0] = 0;
                      if (v1179)
                      {
                        v1180 = (std::__shared_weak_count *)*((_QWORD *)v1179 + 4);
                        if (v1180)
                        {
                          v1181 = (unint64_t *)&v1180->__shared_owners_;
                          do
                            v1182 = __ldaxr(v1181);
                          while (__stlxr(v1182 - 1, v1181));
                          if (!v1182)
                          {
                            ((void (*)(std::__shared_weak_count *))v1180->__on_zero_shared)(v1180);
                            std::__shared_weak_count::__release_weak(v1180);
                          }
                        }
                        v1183 = (std::__shared_weak_count *)*((_QWORD *)v1179 + 2);
                        if (v1183)
                        {
                          v1184 = (unint64_t *)&v1183->__shared_owners_;
                          do
                            v1185 = __ldaxr(v1184);
                          while (__stlxr(v1185 - 1, v1184));
                          if (!v1185)
                          {
                            ((void (*)(std::__shared_weak_count *))v1183->__on_zero_shared)(v1183);
                            std::__shared_weak_count::__release_weak(v1183);
                          }
                        }
                        MEMORY[0x212BC6398](v1179, 0x10F0C40B62ED6C6);
                        v1186 = v2210;
                        v2210 = 0;
                        if (v1186)
                        {
                          v1187 = *(std::__shared_weak_count **)(v1186 + 32);
                          if (v1187)
                          {
                            v1188 = (unint64_t *)&v1187->__shared_owners_;
                            do
                              v1189 = __ldaxr(v1188);
                            while (__stlxr(v1189 - 1, v1188));
                            if (!v1189)
                            {
                              ((void (*)(std::__shared_weak_count *))v1187->__on_zero_shared)(v1187);
                              std::__shared_weak_count::__release_weak(v1187);
                            }
                          }
                          v1190 = *(std::__shared_weak_count **)(v1186 + 16);
                          if (v1190)
                          {
                            v1191 = (unint64_t *)&v1190->__shared_owners_;
                            do
                              v1192 = __ldaxr(v1191);
                            while (__stlxr(v1192 - 1, v1191));
                            if (!v1192)
                            {
                              ((void (*)(std::__shared_weak_count *))v1190->__on_zero_shared)(v1190);
                              std::__shared_weak_count::__release_weak(v1190);
                            }
                          }
                          MEMORY[0x212BC6398](v1186, 0x10F0C40B62ED6C6);
                        }
                      }
                      v1193 = *(std::__shared_weak_count **)&v2211[32];
                      if (*(_QWORD *)&v2211[32])
                      {
                        v1194 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                        do
                          v1195 = __ldaxr(v1194);
                        while (__stlxr(v1195 - 1, v1194));
                        if (!v1195)
                        {
                          ((void (*)(std::__shared_weak_count *))v1193->__on_zero_shared)(v1193);
                          std::__shared_weak_count::__release_weak(v1193);
                        }
                      }
                      v1196 = *(std::__shared_weak_count **)&v2211[16];
                      if (*(_QWORD *)&v2211[16])
                      {
                        v1197 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                        do
                          v1198 = __ldaxr(v1197);
                        while (__stlxr(v1198 - 1, v1197));
                        if (!v1198)
                        {
                          ((void (*)(std::__shared_weak_count *))v1196->__on_zero_shared)(v1196);
                          std::__shared_weak_count::__release_weak(v1196);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v1164, OS_LOG_TYPE_INFO);
                      *(_DWORD *)v2211 = 134217984;
                      *(_QWORD *)&v2211[4] = v1149;
                      v1199 = (void *)_os_log_send_and_compose_impl();
                      if (v1199)
                        free(v1199);
                    }
                    if (v1141)
                    {
                      v1200 = (_QWORD *)a2[1];
                      v1203 = (_QWORD *)*v1200;
                      v1201 = v1200 + 1;
                      v1202 = v1203;
                      if (v1203 == v1201)
                      {
                        v1204 = 0;
                      }
                      else
                      {
                        v1204 = 0;
                        do
                        {
                          v1205 = (_QWORD *)v1202[1];
                          v1206 = v1202;
                          if (v1205)
                          {
                            do
                            {
                              v1207 = v1205;
                              v1205 = (_QWORD *)*v1205;
                            }
                            while (v1205);
                          }
                          else
                          {
                            do
                            {
                              v1207 = (_QWORD *)v1206[2];
                              _ZF = *v1207 == (_QWORD)v1206;
                              v1206 = v1207;
                            }
                            while (!_ZF);
                          }
                          v1204 += *(unsigned __int8 *)(v1202[6] + 528);
                          v1202 = v1207;
                        }
                        while (v1207 != v1201);
                      }
                      sub_20E8C003C((uint64_t)&v2185, "Num tracks: %zu", v1204);
                      sub_20E863570((uint64_t)&v2185);
                    }
                    sub_20E863570((uint64_t)&v2185);
                    v1208 = v2193;
                    if (v2193)
                    {
                      v1209 = (unint64_t *)&v2193->__shared_owners_;
                      do
                        v1210 = __ldaxr(v1209);
                      while (__stlxr(v1210 - 1, v1209));
                      if (!v1210)
                      {
                        ((void (*)(std::__shared_weak_count *))v1208->__on_zero_shared)(v1208);
                        std::__shared_weak_count::__release_weak(v1208);
                      }
                    }
                    goto LABEL_2004;
                  }
                }
                memmove(v1160, v1158, v1159);
                goto LABEL_1927;
              }
            }
            memmove(v1097, v1095, v1096);
            goto LABEL_1826;
          }
        }
        memmove(v1044, v1042, v1043);
        goto LABEL_1735;
      }
LABEL_2004:
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_2097;
      v1211 = *(unsigned __int8 *)(v2180 + 72);
      v1212 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v1213 = v1212;
      if (!v1211 && v1212 == 0)
        goto LABEL_2097;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1290;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v1215 = *(_QWORD *)v2185;
      v1216 = *(_QWORD *)v2185 + 16;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v1218 = *(const char **)(v1215 + 16);
        v1217 = *(_QWORD *)(v1215 + 24);
        v1220 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v1220 & 1) != 0)
          goto LABEL_2013;
      }
      else
      {
        v1217 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v1218 = (const char *)(*(_QWORD *)v2185 + 16);
        v1219 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v1219 & 1) != 0)
          goto LABEL_2013;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_2013:
      if (byte_254A4A4F8[23] >= 0)
        v1221 = byte_254A4A4F8;
      else
        v1221 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v1222 = byte_254A4A4F8[23];
      else
        v1222 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v1221, v1218);
      if (v1222 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v1222 >= 0x17)
      {
        v1224 = (v1222 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1222 | 7) != 0x17)
          v1224 = v1222 | 7;
        v1225 = v1224 + 1;
        v1223 = operator new(v1224 + 1);
        *(_QWORD *)&v2211[16] = v1222;
        *(_QWORD *)&v2211[24] = v1225 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v1223;
LABEL_2026:
        memmove(v1223, v1221, v1222);
        goto LABEL_2027;
      }
      v2211[31] = v1222;
      v1223 = &v2211[8];
      if (v1222)
        goto LABEL_2026;
LABEL_2027:
      v1223[v1222] = 0;
      v2211[32] = 1;
      if (v1217 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v1217 >= 0x17)
      {
        v1228 = (v1217 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1217 | 7) != 0x17)
          v1228 = v1217 | 7;
        v1229 = v1228 + 1;
        v1226 = (void **)operator new(v1228 + 1);
        v2213 = v1217;
        v2214 = v1229 | 0x8000000000000000;
        v2212 = v1226;
      }
      else
      {
        HIBYTE(v2214) = v1217;
        v1226 = (void **)&v2212;
        if (!v1217)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v1227 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_2031;
          goto LABEL_2037;
        }
      }
      memmove(v1226, v1218, v1217);
      *((_BYTE *)v1226 + v1217) = 0;
      v2215 = 1;
      v1227 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_2031:
        a2 = v2153;
        if (v2211[32])
          goto LABEL_2038;
        goto LABEL_2040;
      }
LABEL_2037:
      operator delete(v2212);
      a2 = v2153;
      if (v2211[32])
      {
LABEL_2038:
        if ((v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
      }
LABEL_2040:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v1213 && *(_QWORD *)(v1213 + 24))
      {
        v1230 = _os_log_pack_size();
        v1231 = (std::__shared_weak_count_vtbl *)operator new(v1230, (std::align_val_t)8uLL);
        v1232 = (std::__shared_weak_count *)operator new();
        v1233 = v1232;
        v1232->__shared_owners_ = 0;
        v1234 = (unint64_t *)&v1232->__shared_owners_;
        v1232->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v1232->__shared_weak_owners_ = 0;
        v1232[1].__vftable = v1231;
        *(_QWORD *)v2211 = v1231;
        *(_QWORD *)&v2211[8] = v1231;
        *(_QWORD *)&v2211[16] = v1232;
        do
          v1235 = __ldxr(v1234);
        while (__stxr(v1235 + 1, v1234));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        a2 = v2153;
        do
          v1236 = __ldaxr(v1234);
        while (__stlxr(v1236 - 1, v1234));
        if (!v1236)
        {
          ((void (*)(std::__shared_weak_count *))v1232->__on_zero_shared)(v1232);
          std::__shared_weak_count::__release_weak(v1233);
        }
        v1237 = *(_QWORD *)v2211;
        *(_WORD *)_os_log_pack_fill() = 0;
        v1238 = (char *)operator new();
        v1239 = *(unsigned __int8 *)(v1215 + 39);
        if ((v1239 & 0x80u) == 0)
          v1240 = v1216;
        else
          v1240 = *(_QWORD *)(v1215 + 16);
        if ((v1239 & 0x80u) != 0)
          v1239 = *(_QWORD *)(v1215 + 24);
        *(_QWORD *)v1238 = v1237;
        *(_OWORD *)(v1238 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v1238 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v1238 + 5) = v1240;
        *((_QWORD *)v1238 + 6) = v1239;
        v1238[56] = 1;
        v2210 = 0;
        v2207[0] = v1238;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1213 + 24) + 40))(*(_QWORD *)(v1213 + 24), v2207);
        v1241 = v2207[0];
        v2207[0] = 0;
        if (v1241)
        {
          v1242 = (std::__shared_weak_count *)*((_QWORD *)v1241 + 4);
          if (v1242)
          {
            v1243 = (unint64_t *)&v1242->__shared_owners_;
            do
              v1244 = __ldaxr(v1243);
            while (__stlxr(v1244 - 1, v1243));
            if (!v1244)
            {
              ((void (*)(std::__shared_weak_count *))v1242->__on_zero_shared)(v1242);
              std::__shared_weak_count::__release_weak(v1242);
            }
          }
          v1245 = (std::__shared_weak_count *)*((_QWORD *)v1241 + 2);
          if (v1245)
          {
            v1246 = (unint64_t *)&v1245->__shared_owners_;
            do
              v1247 = __ldaxr(v1246);
            while (__stlxr(v1247 - 1, v1246));
            if (!v1247)
            {
              ((void (*)(std::__shared_weak_count *))v1245->__on_zero_shared)(v1245);
              std::__shared_weak_count::__release_weak(v1245);
            }
          }
          MEMORY[0x212BC6398](v1241, 0x10F0C40B62ED6C6);
          v1248 = v2210;
          v2210 = 0;
          if (v1248)
          {
            v1249 = *(std::__shared_weak_count **)(v1248 + 32);
            if (v1249)
            {
              v1250 = (unint64_t *)&v1249->__shared_owners_;
              do
                v1251 = __ldaxr(v1250);
              while (__stlxr(v1251 - 1, v1250));
              if (!v1251)
              {
                ((void (*)(std::__shared_weak_count *))v1249->__on_zero_shared)(v1249);
                std::__shared_weak_count::__release_weak(v1249);
              }
            }
            v1252 = *(std::__shared_weak_count **)(v1248 + 16);
            if (v1252)
            {
              v1253 = (unint64_t *)&v1252->__shared_owners_;
              do
                v1254 = __ldaxr(v1253);
              while (__stlxr(v1254 - 1, v1253));
              if (!v1254)
              {
                ((void (*)(std::__shared_weak_count *))v1252->__on_zero_shared)(v1252);
                std::__shared_weak_count::__release_weak(v1252);
              }
            }
            MEMORY[0x212BC6398](v1248, 0x10F0C40B62ED6C6);
          }
        }
        v1255 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v1256 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v1257 = __ldaxr(v1256);
          while (__stlxr(v1257 - 1, v1256));
          if (!v1257)
          {
            ((void (*)(std::__shared_weak_count *))v1255->__on_zero_shared)(v1255);
            std::__shared_weak_count::__release_weak(v1255);
          }
        }
        v1258 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v1259 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v1260 = __ldaxr(v1259);
          while (__stlxr(v1260 - 1, v1259));
          if (!v1260)
          {
            ((void (*)(std::__shared_weak_count *))v1258->__on_zero_shared)(v1258);
            std::__shared_weak_count::__release_weak(v1258);
          }
        }
      }
      else
      {
        os_log_type_enabled(v1227, OS_LOG_TYPE_INFO);
        *(_WORD *)v2211 = 0;
        v1261 = (void *)_os_log_send_and_compose_impl();
        if (v1261)
          free(v1261);
      }
      if (v1211)
      {
        sub_20E8C003C((uint64_t)&v2185, "Evaluate database");
        sub_20E863570((uint64_t)&v2185);
      }
      sub_20E863570((uint64_t)&v2185);
      v1262 = v2193;
      if (v2193)
      {
        v1263 = (unint64_t *)&v2193->__shared_owners_;
        do
          v1264 = __ldaxr(v1263);
        while (__stlxr(v1264 - 1, v1263));
        if (!v1264)
        {
          ((void (*)(std::__shared_weak_count *))v1262->__on_zero_shared)(v1262);
          std::__shared_weak_count::__release_weak(v1262);
        }
      }
LABEL_2097:
      sub_20F360AD4((uint64_t)v2179, (int8x8_t **)a2);
      if (v2179[0])
      {
        v2179[1] = v2179[0];
        operator delete(v2179[0]);
      }
      sub_20F34CD58(&v2180);
      if (**(int **)(v2180 + 56) > 3)
        goto LABEL_89;
      v1265 = *(unsigned __int8 *)(v2180 + 72);
      v1266 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
      v1267 = v1266;
      if (!v1265 && !v1266)
        goto LABEL_89;
      v2185 = &v2180;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v2187 = std::chrono::system_clock::now().__d_.__rep_;
      v2188 = 3;
      v2189 = "unknown file";
      v2190 = 1292;
      v2191 = "unknown function";
      v2192 = 0;
      v2193 = 0;
      v1268.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v1269 = *(_QWORD *)v2185;
      if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
      {
        v1271 = *(const char **)(v1269 + 16);
        v1270 = *(_QWORD *)(v1269 + 24);
        v2167 = *(_QWORD *)v2185 + 16;
        v1273 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v1273 & 1) != 0)
          goto LABEL_2106;
      }
      else
      {
        v1270 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        v1271 = (const char *)(*(_QWORD *)v2185 + 16);
        v2167 = (uint64_t)v1271;
        v1272 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v1272 & 1) != 0)
          goto LABEL_2106;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2207);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
        if (v2209 && v2208 < 0)
          operator delete(v2207[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_2106:
      if (byte_254A4A4F8[23] >= 0)
        v1274 = byte_254A4A4F8;
      else
        v1274 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v1275 = byte_254A4A4F8[23];
      else
        v1275 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)v2211 = os_log_create(v1274, v1271);
      if (v1275 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v1275 >= 0x17)
      {
        v1277 = (v1275 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1275 | 7) != 0x17)
          v1277 = v1275 | 7;
        v1278 = v1277 + 1;
        v1276 = operator new(v1277 + 1);
        *(_QWORD *)&v2211[16] = v1275;
        *(_QWORD *)&v2211[24] = v1278 | 0x8000000000000000;
        *(_QWORD *)&v2211[8] = v1276;
LABEL_2119:
        memmove(v1276, v1274, v1275);
        goto LABEL_2120;
      }
      v2211[31] = v1275;
      v1276 = &v2211[8];
      if (v1275)
        goto LABEL_2119;
LABEL_2120:
      v1276[v1275] = 0;
      v2211[32] = 1;
      if (v1270 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      a5 = v2152;
      if (v1270 >= 0x17)
      {
        v1281 = (v1270 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v1270 | 7) != 0x17)
          v1281 = v1270 | 7;
        v1282 = v1281 + 1;
        v1279 = (void **)operator new(v1281 + 1);
        v2213 = v1270;
        v2214 = v1282 | 0x8000000000000000;
        v2212 = v1279;
      }
      else
      {
        HIBYTE(v2214) = v1270;
        v1279 = (void **)&v2212;
        if (!v1270)
        {
          LOBYTE(v2212) = 0;
          v2215 = 1;
          v1280 = *(NSObject **)v2211;
          if ((SHIBYTE(v2214) & 0x80000000) == 0)
            goto LABEL_2124;
          goto LABEL_2130;
        }
      }
      memmove(v1279, v1271, v1270);
      *((_BYTE *)v1279 + v1270) = 0;
      v2215 = 1;
      v1280 = *(NSObject **)v2211;
      if ((SHIBYTE(v2214) & 0x80000000) == 0)
      {
LABEL_2124:
        if (v2211[32])
          goto LABEL_2131;
        goto LABEL_2133;
      }
LABEL_2130:
      operator delete(v2212);
      if (v2211[32])
      {
LABEL_2131:
        if ((v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
      }
LABEL_2133:
      if (*(_QWORD *)v2211)
        os_release(*(void **)v2211);
      if (v1267 && *(_QWORD *)(v1267 + 24))
      {
        v1283 = _os_log_pack_size();
        v1284 = (std::__shared_weak_count_vtbl *)operator new(v1283, (std::align_val_t)8uLL);
        v1285 = (std::__shared_weak_count *)operator new();
        v1286 = v1285;
        v1285->__shared_owners_ = 0;
        v1287 = (unint64_t *)&v1285->__shared_owners_;
        v1285->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v1285->__shared_weak_owners_ = 0;
        v1285[1].__vftable = v1284;
        *(_QWORD *)v2211 = v1284;
        *(_QWORD *)&v2211[8] = v1284;
        *(_QWORD *)&v2211[16] = v1285;
        do
          v1288 = __ldxr(v1287);
        while (__stxr(v1288 + 1, v1287));
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        v2212 = 0;
        do
          v1289 = __ldaxr(v1287);
        while (__stlxr(v1289 - 1, v1287));
        if (!v1289)
        {
          ((void (*)(std::__shared_weak_count *))v1285->__on_zero_shared)(v1285);
          std::__shared_weak_count::__release_weak(v1286);
        }
        v1290 = *(_QWORD *)v2211;
        v1291 = _os_log_pack_fill();
        *(_DWORD *)v1291 = 134217984;
        *(double *)(v1291 + 4) = (double)(v1268.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v1292 = (char *)operator new();
        v1293 = *(unsigned __int8 *)(v1269 + 39);
        v1294 = v2167;
        if ((v1293 & 0x80u) != 0)
        {
          v1294 = *(_QWORD *)(v1269 + 16);
          v1293 = *(_QWORD *)(v1269 + 24);
        }
        *(_QWORD *)v1292 = v1290;
        *(_OWORD *)(v1292 + 8) = *(_OWORD *)&v2211[8];
        *(_QWORD *)&v2211[8] = 0;
        *(_QWORD *)&v2211[16] = 0;
        *(_OWORD *)(v1292 + 24) = *(_OWORD *)&v2211[24];
        *(_QWORD *)&v2211[24] = 0;
        *(_QWORD *)&v2211[32] = 0;
        *((_QWORD *)v1292 + 5) = v1294;
        *((_QWORD *)v1292 + 6) = v1293;
        v1292[56] = 1;
        v2210 = 0;
        v2207[0] = v1292;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1267 + 24) + 40))(*(_QWORD *)(v1267 + 24), v2207);
        v1295 = v2207[0];
        v2207[0] = 0;
        a2 = v2153;
        if (v1295)
        {
          v1296 = (std::__shared_weak_count *)*((_QWORD *)v1295 + 4);
          if (v1296)
          {
            v1297 = (unint64_t *)&v1296->__shared_owners_;
            do
              v1298 = __ldaxr(v1297);
            while (__stlxr(v1298 - 1, v1297));
            if (!v1298)
            {
              ((void (*)(std::__shared_weak_count *))v1296->__on_zero_shared)(v1296);
              std::__shared_weak_count::__release_weak(v1296);
            }
          }
          v1299 = (std::__shared_weak_count *)*((_QWORD *)v1295 + 2);
          if (v1299)
          {
            v1300 = (unint64_t *)&v1299->__shared_owners_;
            do
              v1301 = __ldaxr(v1300);
            while (__stlxr(v1301 - 1, v1300));
            if (!v1301)
            {
              ((void (*)(std::__shared_weak_count *))v1299->__on_zero_shared)(v1299);
              std::__shared_weak_count::__release_weak(v1299);
            }
          }
          MEMORY[0x212BC6398](v1295, 0x10F0C40B62ED6C6);
          v1302 = v2210;
          v2210 = 0;
          if (v1302)
          {
            v1303 = *(std::__shared_weak_count **)(v1302 + 32);
            if (v1303)
            {
              v1304 = (unint64_t *)&v1303->__shared_owners_;
              do
                v1305 = __ldaxr(v1304);
              while (__stlxr(v1305 - 1, v1304));
              if (!v1305)
              {
                ((void (*)(std::__shared_weak_count *))v1303->__on_zero_shared)(v1303);
                std::__shared_weak_count::__release_weak(v1303);
              }
            }
            v1306 = *(std::__shared_weak_count **)(v1302 + 16);
            if (v1306)
            {
              v1307 = (unint64_t *)&v1306->__shared_owners_;
              do
                v1308 = __ldaxr(v1307);
              while (__stlxr(v1308 - 1, v1307));
              if (!v1308)
              {
                ((void (*)(std::__shared_weak_count *))v1306->__on_zero_shared)(v1306);
                std::__shared_weak_count::__release_weak(v1306);
              }
            }
            MEMORY[0x212BC6398](v1302, 0x10F0C40B62ED6C6);
          }
        }
        v1309 = *(std::__shared_weak_count **)&v2211[32];
        if (*(_QWORD *)&v2211[32])
        {
          v1310 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
          do
            v1311 = __ldaxr(v1310);
          while (__stlxr(v1311 - 1, v1310));
          if (!v1311)
          {
            ((void (*)(std::__shared_weak_count *))v1309->__on_zero_shared)(v1309);
            std::__shared_weak_count::__release_weak(v1309);
          }
        }
        v1312 = *(std::__shared_weak_count **)&v2211[16];
        if (*(_QWORD *)&v2211[16])
        {
          v1313 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
          do
            v1314 = __ldaxr(v1313);
          while (__stlxr(v1314 - 1, v1313));
          if (!v1314)
          {
            ((void (*)(std::__shared_weak_count *))v1312->__on_zero_shared)(v1312);
            std::__shared_weak_count::__release_weak(v1312);
          }
        }
      }
      else
      {
        os_log_type_enabled(v1280, OS_LOG_TYPE_INFO);
        *(_DWORD *)v2211 = 134217984;
        *(double *)&v2211[4] = (double)(v1268.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
        v1315 = (void *)_os_log_send_and_compose_impl();
        a2 = v2153;
        if (v1315)
          free(v1315);
      }
      if (v1265)
      {
        v1316.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v1316.__d_.__rep_ - v1268.__d_.__rep_) / 1000000000.0);
        sub_20E863570((uint64_t)&v2185);
      }
      else
      {
        v1316.__d_.__rep_ = v1268.__d_.__rep_;
      }
      sub_20E863570((uint64_t)&v2185);
      v1317 = v2193;
      if (v2193)
      {
        v1318 = (unint64_t *)&v2193->__shared_owners_;
        do
          v1319 = __ldaxr(v1318);
        while (__stlxr(v1319 - 1, v1318));
        if (!v1319)
        {
          ((void (*)(std::__shared_weak_count *))v1317->__on_zero_shared)(v1317);
          std::__shared_weak_count::__release_weak(v1317);
        }
      }
      v2147.__d_.__rep_ = v1316.__d_.__rep_;
LABEL_89:
      _ZF = v2146++ == v2145;
      if (_ZF)
        goto LABEL_2359;
    }
    v2185 = &v2180;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v2187 = std::chrono::system_clock::now().__d_.__rep_;
    v2188 = 3;
    v2189 = "unknown file";
    v2190 = 1217;
    v2191 = "unknown function";
    v2192 = 0;
    v2193 = 0;
    v62 = *(_QWORD *)v2185;
    v63 = *(_QWORD *)v2185 + 16;
    if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
    {
      v65 = *(const char **)(v62 + 16);
      v64 = *(_QWORD *)(v62 + 24);
      v67 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v67 & 1) != 0)
        goto LABEL_100;
    }
    else
    {
      v64 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
      v65 = (const char *)(*(_QWORD *)v2185 + 16);
      v66 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v66 & 1) != 0)
        goto LABEL_100;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v2207);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2207);
      if (v2209 && v2208 < 0)
        operator delete(v2207[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
      a5 = v2152;
    }
LABEL_100:
    if (byte_254A4A4F8[23] >= 0)
      v68 = byte_254A4A4F8;
    else
      v68 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v69 = byte_254A4A4F8[23];
    else
      v69 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v2211 = os_log_create(v68, v65);
    if (v69 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v69 >= 0x17)
    {
      v71 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v69 | 7) != 0x17)
        v71 = v69 | 7;
      v72 = v71 + 1;
      v70 = operator new(v71 + 1);
      *(_QWORD *)&v2211[16] = v69;
      *(_QWORD *)&v2211[24] = v72 | 0x8000000000000000;
      *(_QWORD *)&v2211[8] = v70;
      a5 = v2152;
    }
    else
    {
      v2211[31] = v69;
      v70 = &v2211[8];
      if (!v69)
      {
LABEL_114:
        v70[v69] = 0;
        v2211[32] = 1;
        if (v64 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v64 >= 0x17)
        {
          v75 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v64 | 7) != 0x17)
            v75 = v64 | 7;
          v76 = v75 + 1;
          v73 = (void **)operator new(v75 + 1);
          v2213 = v64;
          v2214 = v76 | 0x8000000000000000;
          v2212 = v73;
          a5 = v2152;
        }
        else
        {
          HIBYTE(v2214) = v64;
          v73 = (void **)&v2212;
          if (!v64)
          {
            LOBYTE(v2212) = 0;
            v2215 = 1;
            v74 = *(NSObject **)v2211;
            if ((SHIBYTE(v2214) & 0x80000000) == 0)
              goto LABEL_118;
            goto LABEL_124;
          }
        }
        memmove(v73, v65, v64);
        *((_BYTE *)v73 + v64) = 0;
        v2215 = 1;
        v74 = *(NSObject **)v2211;
        if ((SHIBYTE(v2214) & 0x80000000) == 0)
        {
LABEL_118:
          a2 = v2153;
          if (!v2211[32])
            goto LABEL_127;
          goto LABEL_125;
        }
LABEL_124:
        operator delete(v2212);
        a2 = v2153;
        if (!v2211[32])
        {
LABEL_127:
          if (*(_QWORD *)v2211)
            os_release(*(void **)v2211);
          if (v60 && *(_QWORD *)(v60 + 24))
          {
            v77 = _os_log_pack_size();
            v78 = (std::__shared_weak_count_vtbl *)operator new(v77, (std::align_val_t)8uLL);
            v79 = (std::__shared_weak_count *)operator new();
            v80 = v79;
            v79->__shared_owners_ = 0;
            v81 = (unint64_t *)&v79->__shared_owners_;
            v79->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v79->__shared_weak_owners_ = 0;
            v79[1].__vftable = v78;
            *(_QWORD *)v2211 = v78;
            *(_QWORD *)&v2211[8] = v78;
            *(_QWORD *)&v2211[16] = v79;
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
            *(_QWORD *)&v2211[24] = 0;
            *(_QWORD *)&v2211[32] = 0;
            v2212 = 0;
            a2 = v2153;
            do
              v83 = __ldaxr(v81);
            while (__stlxr(v83 - 1, v81));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v80);
            }
            v84 = *(_QWORD *)v2211;
            *(_WORD *)_os_log_pack_fill() = 0;
            v85 = (char *)operator new();
            v86 = *(unsigned __int8 *)(v62 + 39);
            if ((v86 & 0x80u) == 0)
              v87 = v63;
            else
              v87 = *(_QWORD *)(v62 + 16);
            if ((v86 & 0x80u) != 0)
              v86 = *(_QWORD *)(v62 + 24);
            *(_QWORD *)v85 = v84;
            *(_OWORD *)(v85 + 8) = *(_OWORD *)&v2211[8];
            *(_QWORD *)&v2211[8] = 0;
            *(_QWORD *)&v2211[16] = 0;
            *(_OWORD *)(v85 + 24) = *(_OWORD *)&v2211[24];
            *(_QWORD *)&v2211[24] = 0;
            *(_QWORD *)&v2211[32] = 0;
            *((_QWORD *)v85 + 5) = v87;
            *((_QWORD *)v85 + 6) = v86;
            v85[56] = 1;
            v2210 = 0;
            v2207[0] = v85;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v60 + 24) + 40))(*(_QWORD *)(v60 + 24), v2207);
            v88 = v2207[0];
            v2207[0] = 0;
            if (v88)
            {
              v89 = (std::__shared_weak_count *)*((_QWORD *)v88 + 4);
              if (v89)
              {
                v90 = (unint64_t *)&v89->__shared_owners_;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              v92 = (std::__shared_weak_count *)*((_QWORD *)v88 + 2);
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              MEMORY[0x212BC6398](v88, 0x10F0C40B62ED6C6);
              v95 = v2210;
              v2210 = 0;
              if (v95)
              {
                v96 = *(std::__shared_weak_count **)(v95 + 32);
                if (v96)
                {
                  v97 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 - 1, v97));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                    std::__shared_weak_count::__release_weak(v96);
                  }
                }
                v99 = *(std::__shared_weak_count **)(v95 + 16);
                if (v99)
                {
                  v100 = (unint64_t *)&v99->__shared_owners_;
                  do
                    v101 = __ldaxr(v100);
                  while (__stlxr(v101 - 1, v100));
                  if (!v101)
                  {
                    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                    std::__shared_weak_count::__release_weak(v99);
                  }
                }
                MEMORY[0x212BC6398](v95, 0x10F0C40B62ED6C6);
              }
            }
            v102 = *(std::__shared_weak_count **)&v2211[32];
            if (*(_QWORD *)&v2211[32])
            {
              v103 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
            v105 = *(std::__shared_weak_count **)&v2211[16];
            if (*(_QWORD *)&v2211[16])
            {
              v106 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
          }
          else
          {
            os_log_type_enabled(v74, OS_LOG_TYPE_INFO);
            *(_WORD *)v2211 = 0;
            v108 = (void *)_os_log_send_and_compose_impl();
            if (v108)
              free(v108);
          }
          if (v58)
          {
            sub_20E8C003C((uint64_t)&v2185, "Rematch tracks");
            sub_20E863570((uint64_t)&v2185);
          }
          sub_20E863570((uint64_t)&v2185);
          v109 = v2193;
          if (v2193)
          {
            v110 = (unint64_t *)&v2193->__shared_owners_;
            do
              v111 = __ldaxr(v110);
            while (__stlxr(v111 - 1, v110));
            if (!v111)
            {
              ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
              std::__shared_weak_count::__release_weak(v109);
            }
          }
          goto LABEL_184;
        }
LABEL_125:
        if ((v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
        goto LABEL_127;
      }
    }
    memmove(v70, v68, v69);
    goto LABEL_114;
  }
LABEL_2359:
  if (!*(_BYTE *)(a5 + 11))
    goto LABEL_3225;
  if (!*(_BYTE *)(a5 + 10))
  {
    sub_20F34CD58(&v2180);
    if (**(int **)(v2180 + 56) > 3)
      goto LABEL_2452;
    v1366 = *(unsigned __int8 *)(v2180 + 72);
    v1367 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
    v1368 = v1367;
    if (!v1366 && !v1367)
      goto LABEL_2452;
    v2185 = &v2180;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v2187 = std::chrono::system_clock::now().__d_.__rep_;
    v2188 = 3;
    v2189 = "unknown file";
    v2190 = 1298;
    v2192 = 0;
    v2193 = 0;
    v2191 = "unknown function";
    v1369 = *(_QWORD *)v2185;
    v1370 = *(_QWORD *)v2185 + 16;
    if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
    {
      v1372 = *(const char **)(v1369 + 16);
      v1371 = *(_QWORD *)(v1369 + 24);
    }
    else
    {
      v1371 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
      v1372 = (const char *)(*(_QWORD *)v2185 + 16);
    }
    v1373 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1373 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v2211);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
      if (v2211[24] && (v2211[23] & 0x80000000) != 0)
        operator delete(*(void **)v2211);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v1374 = byte_254A4A4F8;
    else
      v1374 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v1375 = byte_254A4A4F8[23];
    else
      v1375 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v2211 = os_log_create(v1374, v1372);
    v1376 = &v2211[8];
    if (v1375 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1375 >= 0x17)
    {
      v1377 = (v1375 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1375 | 7) != 0x17)
        v1377 = v1375 | 7;
      v1378 = v1377 + 1;
      v1376 = operator new(v1377 + 1);
      *(_QWORD *)&v2211[16] = v1375;
      *(_QWORD *)&v2211[24] = v1378 | 0x8000000000000000;
      *(_QWORD *)&v2211[8] = v1376;
    }
    else
    {
      v2211[31] = v1375;
      if (!v1375)
      {
LABEL_2382:
        v1376[v1375] = 0;
        v2211[32] = 1;
        v1379 = (void **)&v2212;
        if (v1371 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        a5 = v2152;
        if (v1371 >= 0x17)
        {
          v1380 = (v1371 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1371 | 7) != 0x17)
            v1380 = v1371 | 7;
          v1381 = v1380 + 1;
          v1379 = (void **)operator new(v1380 + 1);
          v2213 = v1371;
          v2214 = v1381 | 0x8000000000000000;
          v2212 = v1379;
          a2 = v2153;
        }
        else
        {
          HIBYTE(v2214) = v1371;
          a2 = v2153;
          if (!v1371)
            goto LABEL_2390;
        }
        memmove(v1379, v1372, v1371);
LABEL_2390:
        *((_BYTE *)v1379 + v1371) = 0;
        v2215 = 1;
        v1382 = *(NSObject **)v2211;
        if (SHIBYTE(v2214) < 0)
          operator delete(v2212);
        if (v2211[32] && (v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
        if (*(_QWORD *)v2211)
          os_release(*(void **)v2211);
        if (v1368 && *(_QWORD *)(v1368 + 24))
        {
          v1383 = _os_log_pack_size();
          v1384 = (std::__shared_weak_count_vtbl *)operator new(v1383, (std::align_val_t)8uLL);
          v1385 = (std::__shared_weak_count *)operator new();
          v1386 = v1385;
          v1385->__shared_owners_ = 0;
          v1387 = (unint64_t *)&v1385->__shared_owners_;
          v1385->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v1385->__shared_weak_owners_ = 0;
          v1385[1].__vftable = v1384;
          *(_QWORD *)v2211 = v1384;
          *(_QWORD *)&v2211[8] = v1384;
          *(_QWORD *)&v2211[16] = v1385;
          do
            v1388 = __ldxr(v1387);
          while (__stxr(v1388 + 1, v1387));
          *(_QWORD *)&v2211[24] = 0;
          *(_QWORD *)&v2211[32] = 0;
          v2212 = 0;
          do
            v1389 = __ldaxr(v1387);
          while (__stlxr(v1389 - 1, v1387));
          if (!v1389)
          {
            ((void (*)(std::__shared_weak_count *))v1385->__on_zero_shared)(v1385);
            std::__shared_weak_count::__release_weak(v1386);
          }
          v1390 = *(_QWORD *)v2211;
          *(_WORD *)_os_log_pack_fill() = 0;
          v1391 = (char *)operator new();
          v1392 = *(unsigned __int8 *)(v1369 + 39);
          if ((v1392 & 0x80u) == 0)
            v1393 = v1370;
          else
            v1393 = *(_QWORD *)(v1369 + 16);
          if ((v1392 & 0x80u) != 0)
            v1392 = *(_QWORD *)(v1369 + 24);
          *(_QWORD *)v1391 = v1390;
          *(_OWORD *)(v1391 + 8) = *(_OWORD *)&v2211[8];
          *(_QWORD *)&v2211[8] = 0;
          *(_QWORD *)&v2211[16] = 0;
          *(_OWORD *)(v1391 + 24) = *(_OWORD *)&v2211[24];
          *(_QWORD *)&v2211[24] = 0;
          *(_QWORD *)&v2211[32] = 0;
          *((_QWORD *)v1391 + 5) = v1393;
          *((_QWORD *)v1391 + 6) = v1392;
          v1391[56] = 1;
          v2210 = 0;
          v2207[0] = v1391;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1368 + 24) + 40))(*(_QWORD *)(v1368 + 24), v2207);
          v1394 = v2207[0];
          v2207[0] = 0;
          if (v1394)
          {
            v1395 = (std::__shared_weak_count *)*((_QWORD *)v1394 + 4);
            if (v1395)
            {
              v1396 = (unint64_t *)&v1395->__shared_owners_;
              do
                v1397 = __ldaxr(v1396);
              while (__stlxr(v1397 - 1, v1396));
              if (!v1397)
              {
                ((void (*)(std::__shared_weak_count *))v1395->__on_zero_shared)(v1395);
                std::__shared_weak_count::__release_weak(v1395);
              }
            }
            v1398 = (std::__shared_weak_count *)*((_QWORD *)v1394 + 2);
            if (v1398)
            {
              v1399 = (unint64_t *)&v1398->__shared_owners_;
              do
                v1400 = __ldaxr(v1399);
              while (__stlxr(v1400 - 1, v1399));
              if (!v1400)
              {
                ((void (*)(std::__shared_weak_count *))v1398->__on_zero_shared)(v1398);
                std::__shared_weak_count::__release_weak(v1398);
              }
            }
            MEMORY[0x212BC6398](v1394, 0x10F0C40B62ED6C6);
            v1401 = v2210;
            v2210 = 0;
            if (v1401)
            {
              v1402 = *(std::__shared_weak_count **)(v1401 + 32);
              if (v1402)
              {
                v1403 = (unint64_t *)&v1402->__shared_owners_;
                do
                  v1404 = __ldaxr(v1403);
                while (__stlxr(v1404 - 1, v1403));
                if (!v1404)
                {
                  ((void (*)(std::__shared_weak_count *))v1402->__on_zero_shared)(v1402);
                  std::__shared_weak_count::__release_weak(v1402);
                }
              }
              v1405 = *(std::__shared_weak_count **)(v1401 + 16);
              if (v1405)
              {
                v1406 = (unint64_t *)&v1405->__shared_owners_;
                do
                  v1407 = __ldaxr(v1406);
                while (__stlxr(v1407 - 1, v1406));
                if (!v1407)
                {
                  ((void (*)(std::__shared_weak_count *))v1405->__on_zero_shared)(v1405);
                  std::__shared_weak_count::__release_weak(v1405);
                }
              }
              MEMORY[0x212BC6398](v1401, 0x10F0C40B62ED6C6);
            }
          }
          v1408 = *(std::__shared_weak_count **)&v2211[32];
          if (*(_QWORD *)&v2211[32])
          {
            v1409 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
            do
              v1410 = __ldaxr(v1409);
            while (__stlxr(v1410 - 1, v1409));
            if (!v1410)
            {
              ((void (*)(std::__shared_weak_count *))v1408->__on_zero_shared)(v1408);
              std::__shared_weak_count::__release_weak(v1408);
            }
          }
          v1411 = *(std::__shared_weak_count **)&v2211[16];
          if (*(_QWORD *)&v2211[16])
          {
            v1412 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
            do
              v1413 = __ldaxr(v1412);
            while (__stlxr(v1413 - 1, v1412));
            if (!v1413)
            {
              ((void (*)(std::__shared_weak_count *))v1411->__on_zero_shared)(v1411);
              std::__shared_weak_count::__release_weak(v1411);
            }
          }
        }
        else
        {
          os_log_type_enabled(v1382, OS_LOG_TYPE_INFO);
          *(_WORD *)v2211 = 0;
          v1414 = (void *)_os_log_send_and_compose_impl();
          if (v1414)
            free(v1414);
        }
        if (v1366)
        {
          sub_20E8C003C((uint64_t)&v2185, "Remove outlier tracks before BA");
          sub_20E863570((uint64_t)&v2185);
        }
        sub_20E863570((uint64_t)&v2185);
        v1415 = v2193;
        if (v2193)
        {
          v1416 = (unint64_t *)&v2193->__shared_owners_;
          do
            v1417 = __ldaxr(v1416);
          while (__stlxr(v1417 - 1, v1416));
          if (!v1417)
          {
            ((void (*)(std::__shared_weak_count *))v1415->__on_zero_shared)(v1415);
            std::__shared_weak_count::__release_weak(v1415);
          }
        }
LABEL_2452:
        sub_20F363910();
        sub_20F34CD58(&v2180);
        if (**(int **)(v2180 + 56) > 3)
          goto LABEL_2541;
        v1418 = *(unsigned __int8 *)(v2180 + 72);
        v1419 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
        v1420 = v1419;
        if (!v1418 && !v1419)
          goto LABEL_2541;
        v2185 = &v2180;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v2187 = std::chrono::system_clock::now().__d_.__rep_;
        v2188 = 3;
        v2189 = "unknown file";
        v2190 = 1300;
        v2192 = 0;
        v2193 = 0;
        v2191 = "unknown function";
        v1421.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v1422 = *(_QWORD *)v2185;
        v1423 = (const char *)(*(_QWORD *)v2185 + 16);
        v2169 = v1423;
        if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
        {
          v1423 = *(const char **)(v1422 + 16);
          v1424 = *(_QWORD *)(v1422 + 24);
        }
        else
        {
          v1424 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
        }
        v1425 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v1425 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2211);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
          if (v2211[24] && (v2211[23] & 0x80000000) != 0)
            operator delete(*(void **)v2211);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v1426 = byte_254A4A4F8;
        else
          v1426 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v1427 = byte_254A4A4F8[23];
        else
          v1427 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v2211 = os_log_create(v1426, v1423);
        v1428 = &v2211[8];
        if (v1427 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1427 >= 0x17)
        {
          v1429 = v1421.__d_.__rep_;
          v1430 = (v1427 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1427 | 7) != 0x17)
            v1430 = v1427 | 7;
          v1431 = v1430 + 1;
          v1428 = operator new(v1430 + 1);
          *(_QWORD *)&v2211[16] = v1427;
          *(_QWORD *)&v2211[24] = v1431 | 0x8000000000000000;
          *(_QWORD *)&v2211[8] = v1428;
          v1421.__d_.__rep_ = v1429;
        }
        else
        {
          v2211[31] = v1427;
          if (!v1427)
          {
LABEL_2473:
            v1428[v1427] = 0;
            v2211[32] = 1;
            v1432 = (void **)&v2212;
            if (v1424 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1424 >= 0x17)
            {
              v1433 = (v1424 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1424 | 7) != 0x17)
                v1433 = v1424 | 7;
              v1434 = v1433 + 1;
              v1432 = (void **)operator new(v1433 + 1);
              v2213 = v1424;
              v2214 = v1434 | 0x8000000000000000;
              v2212 = v1432;
              a2 = v2153;
            }
            else
            {
              HIBYTE(v2214) = v1424;
              a2 = v2153;
              if (!v1424)
                goto LABEL_2481;
            }
            memmove(v1432, v1423, v1424);
LABEL_2481:
            *((_BYTE *)v1432 + v1424) = 0;
            v2215 = 1;
            v1435 = *(NSObject **)v2211;
            if (SHIBYTE(v2214) < 0)
              operator delete(v2212);
            a5 = v2152;
            if (v2211[32] && (v2211[31] & 0x80000000) != 0)
              operator delete(*(void **)&v2211[8]);
            if (*(_QWORD *)v2211)
              os_release(*(void **)v2211);
            if (v1420 && *(_QWORD *)(v1420 + 24))
            {
              v1436 = _os_log_pack_size();
              v1437 = (std::__shared_weak_count_vtbl *)operator new(v1436, (std::align_val_t)8uLL);
              v1438 = (std::__shared_weak_count *)operator new();
              v1439 = v1438;
              v1438->__shared_owners_ = 0;
              v1440 = (unint64_t *)&v1438->__shared_owners_;
              v1438->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v1438->__shared_weak_owners_ = 0;
              v1438[1].__vftable = v1437;
              *(_QWORD *)v2211 = v1437;
              *(_QWORD *)&v2211[8] = v1437;
              *(_QWORD *)&v2211[16] = v1438;
              do
                v1441 = __ldxr(v1440);
              while (__stxr(v1441 + 1, v1440));
              *(_QWORD *)&v2211[24] = 0;
              *(_QWORD *)&v2211[32] = 0;
              v2212 = 0;
              do
                v1442 = __ldaxr(v1440);
              while (__stlxr(v1442 - 1, v1440));
              if (!v1442)
              {
                ((void (*)(std::__shared_weak_count *))v1438->__on_zero_shared)(v1438);
                std::__shared_weak_count::__release_weak(v1439);
              }
              v1443 = *(_QWORD *)v2211;
              v1444 = _os_log_pack_fill();
              *(_DWORD *)v1444 = 134217984;
              *(double *)(v1444 + 4) = (double)(v1421.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
              v1445 = (char *)operator new();
              v1446 = *(unsigned __int8 *)(v1422 + 39);
              v1447 = v2169;
              if ((v1446 & 0x80u) != 0)
              {
                v1447 = *(const char **)(v1422 + 16);
                v1446 = *(_QWORD *)(v1422 + 24);
              }
              *(_QWORD *)v1445 = v1443;
              *(_OWORD *)(v1445 + 8) = *(_OWORD *)&v2211[8];
              *(_QWORD *)&v2211[8] = 0;
              *(_QWORD *)&v2211[16] = 0;
              *(_OWORD *)(v1445 + 24) = *(_OWORD *)&v2211[24];
              *(_QWORD *)&v2211[24] = 0;
              *(_QWORD *)&v2211[32] = 0;
              *((_QWORD *)v1445 + 5) = v1447;
              *((_QWORD *)v1445 + 6) = v1446;
              v1445[56] = 1;
              v2210 = 0;
              v2207[0] = v1445;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1420 + 24) + 40))(*(_QWORD *)(v1420 + 24), v2207);
              v1448 = v2207[0];
              v2207[0] = 0;
              a2 = v2153;
              if (v1448)
              {
                v1449 = (std::__shared_weak_count *)*((_QWORD *)v1448 + 4);
                if (v1449)
                {
                  v1450 = (unint64_t *)&v1449->__shared_owners_;
                  do
                    v1451 = __ldaxr(v1450);
                  while (__stlxr(v1451 - 1, v1450));
                  if (!v1451)
                  {
                    ((void (*)(std::__shared_weak_count *))v1449->__on_zero_shared)(v1449);
                    std::__shared_weak_count::__release_weak(v1449);
                  }
                }
                v1452 = (std::__shared_weak_count *)*((_QWORD *)v1448 + 2);
                if (v1452)
                {
                  v1453 = (unint64_t *)&v1452->__shared_owners_;
                  do
                    v1454 = __ldaxr(v1453);
                  while (__stlxr(v1454 - 1, v1453));
                  if (!v1454)
                  {
                    ((void (*)(std::__shared_weak_count *))v1452->__on_zero_shared)(v1452);
                    std::__shared_weak_count::__release_weak(v1452);
                  }
                }
                MEMORY[0x212BC6398](v1448, 0x10F0C40B62ED6C6);
                v1455 = v2210;
                v2210 = 0;
                if (v1455)
                {
                  v1456 = *(std::__shared_weak_count **)(v1455 + 32);
                  if (v1456)
                  {
                    v1457 = (unint64_t *)&v1456->__shared_owners_;
                    do
                      v1458 = __ldaxr(v1457);
                    while (__stlxr(v1458 - 1, v1457));
                    if (!v1458)
                    {
                      ((void (*)(std::__shared_weak_count *))v1456->__on_zero_shared)(v1456);
                      std::__shared_weak_count::__release_weak(v1456);
                    }
                  }
                  v1459 = *(std::__shared_weak_count **)(v1455 + 16);
                  if (v1459)
                  {
                    v1460 = (unint64_t *)&v1459->__shared_owners_;
                    do
                      v1461 = __ldaxr(v1460);
                    while (__stlxr(v1461 - 1, v1460));
                    if (!v1461)
                    {
                      ((void (*)(std::__shared_weak_count *))v1459->__on_zero_shared)(v1459);
                      std::__shared_weak_count::__release_weak(v1459);
                    }
                  }
                  MEMORY[0x212BC6398](v1455, 0x10F0C40B62ED6C6);
                }
              }
              v1462 = *(std::__shared_weak_count **)&v2211[32];
              if (*(_QWORD *)&v2211[32])
              {
                v1463 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                do
                  v1464 = __ldaxr(v1463);
                while (__stlxr(v1464 - 1, v1463));
                if (!v1464)
                {
                  ((void (*)(std::__shared_weak_count *))v1462->__on_zero_shared)(v1462);
                  std::__shared_weak_count::__release_weak(v1462);
                }
              }
              v1465 = *(std::__shared_weak_count **)&v2211[16];
              if (*(_QWORD *)&v2211[16])
              {
                v1466 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                do
                  v1467 = __ldaxr(v1466);
                while (__stlxr(v1467 - 1, v1466));
                if (!v1467)
                {
                  ((void (*)(std::__shared_weak_count *))v1465->__on_zero_shared)(v1465);
                  std::__shared_weak_count::__release_weak(v1465);
                }
              }
            }
            else
            {
              os_log_type_enabled(v1435, OS_LOG_TYPE_INFO);
              *(_DWORD *)v2211 = 134217984;
              *(double *)&v2211[4] = (double)(v1421.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
              v1468 = (void *)_os_log_send_and_compose_impl();
              if (v1468)
                free(v1468);
            }
            if (v1418)
            {
              v1469.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
              sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v1469.__d_.__rep_ - v1421.__d_.__rep_) / 1000000000.0);
              sub_20E863570((uint64_t)&v2185);
            }
            else
            {
              v1469.__d_.__rep_ = v1421.__d_.__rep_;
            }
            sub_20E863570((uint64_t)&v2185);
            v2147.__d_.__rep_ = v1469.__d_.__rep_;
            v1470 = v2193;
            if (v2193)
            {
              v1471 = (unint64_t *)&v2193->__shared_owners_;
              do
                v1472 = __ldaxr(v1471);
              while (__stlxr(v1472 - 1, v1471));
              if (!v1472)
              {
                ((void (*)(std::__shared_weak_count *))v1470->__on_zero_shared)(v1470);
                std::__shared_weak_count::__release_weak(v1470);
              }
            }
LABEL_2541:
            sub_20F34CD58(&v2180);
            if (**(int **)(v2180 + 56) > 3)
              goto LABEL_2651;
            v1473 = *(unsigned __int8 *)(v2180 + 72);
            v1474 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
            v1475 = v1474;
            if (!v1473 && v1474 == 0)
              goto LABEL_2651;
            v2185 = &v2180;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v2187 = std::chrono::system_clock::now().__d_.__rep_;
            v2188 = 3;
            v2189 = "unknown file";
            v2190 = 1301;
            v2192 = 0;
            v2193 = 0;
            v2191 = "unknown function";
            v1477 = (_QWORD *)a2[1];
            v1480 = (_QWORD *)*v1477;
            v1478 = v1477 + 1;
            v1479 = v1480;
            if (v1480 == v1478)
            {
              v1481 = 0;
            }
            else
            {
              v1481 = 0;
              do
              {
                v1482 = (_QWORD *)v1479[1];
                v1483 = v1479;
                if (v1482)
                {
                  do
                  {
                    v1484 = v1482;
                    v1482 = (_QWORD *)*v1482;
                  }
                  while (v1482);
                }
                else
                {
                  do
                  {
                    v1484 = (_QWORD *)v1483[2];
                    _ZF = *v1484 == (_QWORD)v1483;
                    v1483 = v1484;
                  }
                  while (!_ZF);
                }
                v1481 += *(unsigned __int8 *)(v1479[6] + 528);
                v1479 = v1484;
              }
              while (v1484 != v1478);
            }
            v1485 = *(_QWORD *)v2185;
            v1486 = (const char *)(*(_QWORD *)v2185 + 16);
            v2170 = v1486;
            if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
            {
              v1486 = *(const char **)(v1485 + 16);
              v1487 = *(_QWORD *)(v1485 + 24);
            }
            else
            {
              v1487 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
            }
            v1488 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v1488 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v2211);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
              if (v2211[24] && (v2211[23] & 0x80000000) != 0)
                operator delete(*(void **)v2211);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v1489 = byte_254A4A4F8;
            else
              v1489 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v1490 = byte_254A4A4F8[23];
            else
              v1490 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v2211 = os_log_create(v1489, v1486);
            v1491 = &v2211[8];
            if (v1490 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1490 >= 0x17)
            {
              v1492 = v1473;
              v1493 = (v1490 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1490 | 7) != 0x17)
                v1493 = v1490 | 7;
              v1494 = v1493 + 1;
              v1491 = operator new(v1493 + 1);
              *(_QWORD *)&v2211[16] = v1490;
              *(_QWORD *)&v2211[24] = v1494 | 0x8000000000000000;
              *(_QWORD *)&v2211[8] = v1491;
              v1473 = v1492;
            }
            else
            {
              v2211[31] = v1490;
              if (!v1490)
              {
LABEL_2574:
                v1491[v1490] = 0;
                v2211[32] = 1;
                v1495 = (void **)&v2212;
                if (v1487 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                a5 = v2152;
                if (v1487 >= 0x17)
                {
                  v1496 = (v1487 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v1487 | 7) != 0x17)
                    v1496 = v1487 | 7;
                  v1497 = v1496 + 1;
                  v1495 = (void **)operator new(v1496 + 1);
                  v2213 = v1487;
                  v2214 = v1497 | 0x8000000000000000;
                  v2212 = v1495;
                  a2 = v2153;
                }
                else
                {
                  HIBYTE(v2214) = v1487;
                  a2 = v2153;
                  if (!v1487)
                    goto LABEL_2582;
                }
                memmove(v1495, v1486, v1487);
LABEL_2582:
                *((_BYTE *)v1495 + v1487) = 0;
                v2215 = 1;
                v1498 = *(NSObject **)v2211;
                if (SHIBYTE(v2214) < 0)
                  operator delete(v2212);
                if (v2211[32] && (v2211[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v2211[8]);
                if (*(_QWORD *)v2211)
                  os_release(*(void **)v2211);
                if (v1475 && *(_QWORD *)(v1475 + 24))
                {
                  v1499 = _os_log_pack_size();
                  v1500 = (std::__shared_weak_count_vtbl *)operator new(v1499, (std::align_val_t)8uLL);
                  v1501 = (std::__shared_weak_count *)operator new();
                  v1502 = v1501;
                  v1501->__shared_owners_ = 0;
                  v1503 = (unint64_t *)&v1501->__shared_owners_;
                  v1501->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v1501->__shared_weak_owners_ = 0;
                  v1501[1].__vftable = v1500;
                  *(_QWORD *)v2211 = v1500;
                  *(_QWORD *)&v2211[8] = v1500;
                  *(_QWORD *)&v2211[16] = v1501;
                  do
                    v1504 = __ldxr(v1503);
                  while (__stxr(v1504 + 1, v1503));
                  *(_QWORD *)&v2211[24] = 0;
                  *(_QWORD *)&v2211[32] = 0;
                  v2212 = 0;
                  do
                    v1505 = __ldaxr(v1503);
                  while (__stlxr(v1505 - 1, v1503));
                  if (!v1505)
                  {
                    ((void (*)(std::__shared_weak_count *))v1501->__on_zero_shared)(v1501);
                    std::__shared_weak_count::__release_weak(v1502);
                  }
                  v1506 = *(_QWORD *)v2211;
                  v1507 = _os_log_pack_fill();
                  *(_DWORD *)v1507 = 134217984;
                  *(_QWORD *)(v1507 + 4) = v1481;
                  v1508 = (char *)operator new();
                  v1509 = *(unsigned __int8 *)(v1485 + 39);
                  v1510 = v2170;
                  if ((v1509 & 0x80u) != 0)
                  {
                    v1510 = *(const char **)(v1485 + 16);
                    v1509 = *(_QWORD *)(v1485 + 24);
                  }
                  *(_QWORD *)v1508 = v1506;
                  *(_OWORD *)(v1508 + 8) = *(_OWORD *)&v2211[8];
                  *(_QWORD *)&v2211[8] = 0;
                  *(_QWORD *)&v2211[16] = 0;
                  *(_OWORD *)(v1508 + 24) = *(_OWORD *)&v2211[24];
                  *(_QWORD *)&v2211[24] = 0;
                  *(_QWORD *)&v2211[32] = 0;
                  *((_QWORD *)v1508 + 5) = v1510;
                  *((_QWORD *)v1508 + 6) = v1509;
                  v1508[56] = 1;
                  v2210 = 0;
                  v2207[0] = v1508;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1475 + 24) + 40))(*(_QWORD *)(v1475 + 24), v2207);
                  v1511 = v2207[0];
                  v2207[0] = 0;
                  if (v1511)
                  {
                    v1512 = (std::__shared_weak_count *)*((_QWORD *)v1511 + 4);
                    if (v1512)
                    {
                      v1513 = (unint64_t *)&v1512->__shared_owners_;
                      do
                        v1514 = __ldaxr(v1513);
                      while (__stlxr(v1514 - 1, v1513));
                      if (!v1514)
                      {
                        ((void (*)(std::__shared_weak_count *))v1512->__on_zero_shared)(v1512);
                        std::__shared_weak_count::__release_weak(v1512);
                      }
                    }
                    v1515 = (std::__shared_weak_count *)*((_QWORD *)v1511 + 2);
                    if (v1515)
                    {
                      v1516 = (unint64_t *)&v1515->__shared_owners_;
                      do
                        v1517 = __ldaxr(v1516);
                      while (__stlxr(v1517 - 1, v1516));
                      if (!v1517)
                      {
                        ((void (*)(std::__shared_weak_count *))v1515->__on_zero_shared)(v1515);
                        std::__shared_weak_count::__release_weak(v1515);
                      }
                    }
                    MEMORY[0x212BC6398](v1511, 0x10F0C40B62ED6C6);
                    v1518 = v2210;
                    v2210 = 0;
                    if (v1518)
                    {
                      v1519 = *(std::__shared_weak_count **)(v1518 + 32);
                      if (v1519)
                      {
                        v1520 = (unint64_t *)&v1519->__shared_owners_;
                        do
                          v1521 = __ldaxr(v1520);
                        while (__stlxr(v1521 - 1, v1520));
                        if (!v1521)
                        {
                          ((void (*)(std::__shared_weak_count *))v1519->__on_zero_shared)(v1519);
                          std::__shared_weak_count::__release_weak(v1519);
                        }
                      }
                      v1522 = *(std::__shared_weak_count **)(v1518 + 16);
                      if (v1522)
                      {
                        v1523 = (unint64_t *)&v1522->__shared_owners_;
                        do
                          v1524 = __ldaxr(v1523);
                        while (__stlxr(v1524 - 1, v1523));
                        if (!v1524)
                        {
                          ((void (*)(std::__shared_weak_count *))v1522->__on_zero_shared)(v1522);
                          std::__shared_weak_count::__release_weak(v1522);
                        }
                      }
                      MEMORY[0x212BC6398](v1518, 0x10F0C40B62ED6C6);
                    }
                  }
                  v1525 = *(std::__shared_weak_count **)&v2211[32];
                  if (*(_QWORD *)&v2211[32])
                  {
                    v1526 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                    do
                      v1527 = __ldaxr(v1526);
                    while (__stlxr(v1527 - 1, v1526));
                    if (!v1527)
                    {
                      ((void (*)(std::__shared_weak_count *))v1525->__on_zero_shared)(v1525);
                      std::__shared_weak_count::__release_weak(v1525);
                    }
                  }
                  v1528 = *(std::__shared_weak_count **)&v2211[16];
                  if (*(_QWORD *)&v2211[16])
                  {
                    v1529 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                    do
                      v1530 = __ldaxr(v1529);
                    while (__stlxr(v1530 - 1, v1529));
                    if (!v1530)
                    {
                      ((void (*)(std::__shared_weak_count *))v1528->__on_zero_shared)(v1528);
                      std::__shared_weak_count::__release_weak(v1528);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v1498, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v2211 = 134217984;
                  *(_QWORD *)&v2211[4] = v1481;
                  v1531 = (void *)_os_log_send_and_compose_impl();
                  if (v1531)
                    free(v1531);
                }
                if (v1473)
                {
                  v1532 = (_QWORD *)a2[1];
                  v1535 = (_QWORD *)*v1532;
                  v1533 = v1532 + 1;
                  v1534 = v1535;
                  if (v1535 == v1533)
                  {
                    v1536 = 0;
                  }
                  else
                  {
                    v1536 = 0;
                    do
                    {
                      v1537 = (_QWORD *)v1534[1];
                      v1538 = v1534;
                      if (v1537)
                      {
                        do
                        {
                          v1539 = v1537;
                          v1537 = (_QWORD *)*v1537;
                        }
                        while (v1537);
                      }
                      else
                      {
                        do
                        {
                          v1539 = (_QWORD *)v1538[2];
                          _ZF = *v1539 == (_QWORD)v1538;
                          v1538 = v1539;
                        }
                        while (!_ZF);
                      }
                      v1536 += *(unsigned __int8 *)(v1534[6] + 528);
                      v1534 = v1539;
                    }
                    while (v1539 != v1533);
                  }
                  sub_20E8C003C((uint64_t)&v2185, "Num tracks: %zu", v1536);
                  sub_20E863570((uint64_t)&v2185);
                }
                sub_20E863570((uint64_t)&v2185);
                v1540 = v2193;
                if (v2193)
                {
                  v1541 = (unint64_t *)&v2193->__shared_owners_;
                  do
                    v1542 = __ldaxr(v1541);
                  while (__stlxr(v1542 - 1, v1541));
                  if (!v1542)
                  {
                    ((void (*)(std::__shared_weak_count *))v1540->__on_zero_shared)(v1540);
                    std::__shared_weak_count::__release_weak(v1540);
                  }
                }
                goto LABEL_2651;
              }
            }
            memmove(v1491, v1489, v1490);
            goto LABEL_2574;
          }
        }
        memmove(v1428, v1426, v1427);
        goto LABEL_2473;
      }
    }
    memmove(v1376, v1374, v1375);
    goto LABEL_2382;
  }
LABEL_2651:
  sub_20F34CD58(&v2180);
  if (**(int **)(v2180 + 56) > 3)
    goto LABEL_2744;
  v1543 = *(unsigned __int8 *)(v2180 + 72);
  v1544 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
  v1545 = v1544;
  if (!v1543 && v1544 == 0)
    goto LABEL_2744;
  v2185 = &v2180;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v2187 = std::chrono::system_clock::now().__d_.__rep_;
  v2188 = 3;
  v2189 = "unknown file";
  v2190 = 1306;
  v2192 = 0;
  v2193 = 0;
  v2191 = "unknown function";
  v1547 = *(_QWORD *)v2185;
  v1548 = *(_QWORD *)v2185 + 16;
  if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
  {
    v1550 = *(const char **)(v1547 + 16);
    v1549 = *(_QWORD *)(v1547 + 24);
  }
  else
  {
    v1549 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
    v1550 = (const char *)(*(_QWORD *)v2185 + 16);
  }
  v2150 = *(_QWORD *)(*a2 + 64);
  v2171 = *(_QWORD *)(a2[1] + 16);
  v1551 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v1551 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v2211);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
    if (v2211[24] && (v2211[23] & 0x80000000) != 0)
      operator delete(*(void **)v2211);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v1552 = byte_254A4A4F8;
  else
    v1552 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v1553 = byte_254A4A4F8[23];
  else
    v1553 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v2211 = os_log_create(v1552, v1550);
  v1554 = &v2211[8];
  if (v1553 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1553 >= 0x17)
  {
    v1555 = (v1553 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1553 | 7) != 0x17)
      v1555 = v1553 | 7;
    v1556 = v1555 + 1;
    v1554 = operator new(v1555 + 1);
    *(_QWORD *)&v2211[16] = v1553;
    *(_QWORD *)&v2211[24] = v1556 | 0x8000000000000000;
    *(_QWORD *)&v2211[8] = v1554;
    goto LABEL_2673;
  }
  v2211[31] = v1553;
  if (v1553)
LABEL_2673:
    memmove(v1554, v1552, v1553);
  v1554[v1553] = 0;
  v2211[32] = 1;
  v1557 = (void **)&v2212;
  if (v1549 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a5 = v2152;
  if (v1549 >= 0x17)
  {
    v1558 = (v1549 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1549 | 7) != 0x17)
      v1558 = v1549 | 7;
    v1559 = v1558 + 1;
    v1557 = (void **)operator new(v1558 + 1);
    v2213 = v1549;
    v2214 = v1559 | 0x8000000000000000;
    v2212 = v1557;
    a2 = v2153;
  }
  else
  {
    HIBYTE(v2214) = v1549;
    a2 = v2153;
    if (!v1549)
      goto LABEL_2682;
  }
  memmove(v1557, v1550, v1549);
LABEL_2682:
  *((_BYTE *)v1557 + v1549) = 0;
  v2215 = 1;
  v1560 = *(NSObject **)v2211;
  if (SHIBYTE(v2214) < 0)
    operator delete(v2212);
  if (v2211[32] && (v2211[31] & 0x80000000) != 0)
    operator delete(*(void **)&v2211[8]);
  if (*(_QWORD *)v2211)
    os_release(*(void **)v2211);
  if (v1545 && *(_QWORD *)(v1545 + 24))
  {
    v1561 = _os_log_pack_size();
    v1562 = (std::__shared_weak_count_vtbl *)operator new(v1561, (std::align_val_t)8uLL);
    v1563 = (std::__shared_weak_count *)operator new();
    v1564 = v1563;
    v1563->__shared_owners_ = 0;
    v1565 = (unint64_t *)&v1563->__shared_owners_;
    v1563->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v1563->__shared_weak_owners_ = 0;
    v1563[1].__vftable = v1562;
    *(_QWORD *)v2211 = v1562;
    *(_QWORD *)&v2211[8] = v1562;
    *(_QWORD *)&v2211[16] = v1563;
    do
      v1566 = __ldxr(v1565);
    while (__stxr(v1566 + 1, v1565));
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    v2212 = 0;
    do
      v1567 = __ldaxr(v1565);
    while (__stlxr(v1567 - 1, v1565));
    if (!v1567)
    {
      ((void (*)(std::__shared_weak_count *))v1563->__on_zero_shared)(v1563);
      std::__shared_weak_count::__release_weak(v1564);
    }
    v1568 = *(_QWORD *)v2211;
    v1569 = _os_log_pack_fill();
    *(_DWORD *)v1569 = 134218240;
    *(_QWORD *)(v1569 + 4) = v2150;
    *(_WORD *)(v1569 + 12) = 2048;
    *(_QWORD *)(v1569 + 14) = v2171;
    v1570 = (char *)operator new();
    v1571 = *(unsigned __int8 *)(v1547 + 39);
    if ((v1571 & 0x80u) == 0)
      v1572 = v1548;
    else
      v1572 = *(_QWORD *)(v1547 + 16);
    if ((v1571 & 0x80u) != 0)
      v1571 = *(_QWORD *)(v1547 + 24);
    *(_QWORD *)v1570 = v1568;
    *(_OWORD *)(v1570 + 8) = *(_OWORD *)&v2211[8];
    *(_QWORD *)&v2211[8] = 0;
    *(_QWORD *)&v2211[16] = 0;
    *(_OWORD *)(v1570 + 24) = *(_OWORD *)&v2211[24];
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    *((_QWORD *)v1570 + 5) = v1572;
    *((_QWORD *)v1570 + 6) = v1571;
    v1570[56] = 1;
    v2210 = 0;
    v2207[0] = v1570;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1545 + 24) + 40))(*(_QWORD *)(v1545 + 24), v2207);
    v1573 = v2207[0];
    v2207[0] = 0;
    if (v1573)
    {
      v1574 = (std::__shared_weak_count *)*((_QWORD *)v1573 + 4);
      if (v1574)
      {
        v1575 = (unint64_t *)&v1574->__shared_owners_;
        do
          v1576 = __ldaxr(v1575);
        while (__stlxr(v1576 - 1, v1575));
        if (!v1576)
        {
          ((void (*)(std::__shared_weak_count *))v1574->__on_zero_shared)(v1574);
          std::__shared_weak_count::__release_weak(v1574);
        }
      }
      v1577 = (std::__shared_weak_count *)*((_QWORD *)v1573 + 2);
      if (v1577)
      {
        v1578 = (unint64_t *)&v1577->__shared_owners_;
        do
          v1579 = __ldaxr(v1578);
        while (__stlxr(v1579 - 1, v1578));
        if (!v1579)
        {
          ((void (*)(std::__shared_weak_count *))v1577->__on_zero_shared)(v1577);
          std::__shared_weak_count::__release_weak(v1577);
        }
      }
      MEMORY[0x212BC6398](v1573, 0x10F0C40B62ED6C6);
      v1580 = v2210;
      v2210 = 0;
      if (v1580)
      {
        v1581 = *(std::__shared_weak_count **)(v1580 + 32);
        if (v1581)
        {
          v1582 = (unint64_t *)&v1581->__shared_owners_;
          do
            v1583 = __ldaxr(v1582);
          while (__stlxr(v1583 - 1, v1582));
          if (!v1583)
          {
            ((void (*)(std::__shared_weak_count *))v1581->__on_zero_shared)(v1581);
            std::__shared_weak_count::__release_weak(v1581);
          }
        }
        v1584 = *(std::__shared_weak_count **)(v1580 + 16);
        if (v1584)
        {
          v1585 = (unint64_t *)&v1584->__shared_owners_;
          do
            v1586 = __ldaxr(v1585);
          while (__stlxr(v1586 - 1, v1585));
          if (!v1586)
          {
            ((void (*)(std::__shared_weak_count *))v1584->__on_zero_shared)(v1584);
            std::__shared_weak_count::__release_weak(v1584);
          }
        }
        MEMORY[0x212BC6398](v1580, 0x10F0C40B62ED6C6);
      }
    }
    v1587 = *(std::__shared_weak_count **)&v2211[32];
    if (*(_QWORD *)&v2211[32])
    {
      v1588 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
      do
        v1589 = __ldaxr(v1588);
      while (__stlxr(v1589 - 1, v1588));
      if (!v1589)
      {
        ((void (*)(std::__shared_weak_count *))v1587->__on_zero_shared)(v1587);
        std::__shared_weak_count::__release_weak(v1587);
      }
    }
    v1590 = *(std::__shared_weak_count **)&v2211[16];
    if (*(_QWORD *)&v2211[16])
    {
      v1591 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
      do
        v1592 = __ldaxr(v1591);
      while (__stlxr(v1592 - 1, v1591));
      if (!v1592)
      {
        ((void (*)(std::__shared_weak_count *))v1590->__on_zero_shared)(v1590);
        std::__shared_weak_count::__release_weak(v1590);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1560, OS_LOG_TYPE_INFO);
    *(_DWORD *)v2211 = 134218240;
    *(_QWORD *)&v2211[4] = v2150;
    *(_WORD *)&v2211[12] = 2048;
    *(_QWORD *)&v2211[14] = v2171;
    v1593 = (void *)_os_log_send_and_compose_impl();
    if (v1593)
      free(v1593);
  }
  if (v1543)
  {
    sub_20E8C003C((uint64_t)&v2185, "BA: refinement (%zu states, %zu tracks)", *(_QWORD *)(*a2 + 64), *(_QWORD *)(a2[1] + 16));
    sub_20E863570((uint64_t)&v2185);
  }
  sub_20E863570((uint64_t)&v2185);
  v1594 = v2193;
  if (v2193)
  {
    v1595 = (unint64_t *)&v2193->__shared_owners_;
    do
      v1596 = __ldaxr(v1595);
    while (__stlxr(v1596 - 1, v1595));
    if (!v1596)
    {
      ((void (*)(std::__shared_weak_count *))v1594->__on_zero_shared)(v1594);
      std::__shared_weak_count::__release_weak(v1594);
    }
  }
LABEL_2744:
  if (*(_BYTE *)(a5 + 160))
    sub_20F4842B0(a5);
  else
    sub_20F46DB70(a5);
  sub_20F34CD58(&v2180);
  if (**(int **)(v2180 + 56) > 3
    || (v1597 = *(unsigned __int8 *)(v2180 + 72),
        v1598 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0),
        v1599 = v1598,
        !v1597)
    && !v1598)
  {
    if (!*(_BYTE *)(a5 + 10))
      goto LABEL_3129;
LABEL_2751:
    sub_20F34CD58(&v2180);
    if (**(int **)(v2180 + 56) > 3)
      goto LABEL_2930;
    v1600 = *(unsigned __int8 *)(v2180 + 72);
    v1601 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
    v1602 = v1601;
    if (!v1600 && !v1601)
      goto LABEL_2930;
    v2185 = &v2180;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v2187 = std::chrono::system_clock::now().__d_.__rep_;
    v2188 = 3;
    v2189 = "unknown file";
    v2190 = 1321;
    v2192 = 0;
    v2193 = 0;
    v2191 = "unknown function";
    v1603 = *(_QWORD *)v2185;
    v1604 = *(_QWORD *)v2185 + 16;
    if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
    {
      v1606 = *(const char **)(v1603 + 16);
      v1605 = *(_QWORD *)(v1603 + 24);
      v1661 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v1661 & 1) != 0)
        goto LABEL_2846;
    }
    else
    {
      v1605 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
      v1606 = (const char *)(*(_QWORD *)v2185 + 16);
      v1607 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v1607 & 1) != 0)
        goto LABEL_2846;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v2211);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
      if (v2211[24] && (v2211[23] & 0x80000000) != 0)
        operator delete(*(void **)v2211);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_2846:
    if (byte_254A4A4F8[23] >= 0)
      v1662 = byte_254A4A4F8;
    else
      v1662 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v1663 = byte_254A4A4F8[23];
    else
      v1663 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v2211 = os_log_create(v1662, v1606);
    v1664 = &v2211[8];
    if (v1663 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v1663 >= 0x17)
    {
      v1665 = (v1663 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1663 | 7) != 0x17)
        v1665 = v1663 | 7;
      v1666 = v1665 + 1;
      v1664 = operator new(v1665 + 1);
      *(_QWORD *)&v2211[16] = v1663;
      *(_QWORD *)&v2211[24] = v1666 | 0x8000000000000000;
      *(_QWORD *)&v2211[8] = v1664;
    }
    else
    {
      v2211[31] = v1663;
      if (!v1663)
      {
LABEL_2860:
        v1664[v1663] = 0;
        v2211[32] = 1;
        v1667 = (void **)&v2212;
        if (v1605 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        a5 = v2152;
        if (v1605 >= 0x17)
        {
          v1668 = (v1605 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1605 | 7) != 0x17)
            v1668 = v1605 | 7;
          v1669 = v1668 + 1;
          v1667 = (void **)operator new(v1668 + 1);
          v2213 = v1605;
          v2214 = v1669 | 0x8000000000000000;
          v2212 = v1667;
          a2 = v2153;
        }
        else
        {
          HIBYTE(v2214) = v1605;
          a2 = v2153;
          if (!v1605)
            goto LABEL_2868;
        }
        memmove(v1667, v1606, v1605);
LABEL_2868:
        *((_BYTE *)v1667 + v1605) = 0;
        v2215 = 1;
        v1670 = *(NSObject **)v2211;
        if (SHIBYTE(v2214) < 0)
          operator delete(v2212);
        if (v2211[32] && (v2211[31] & 0x80000000) != 0)
          operator delete(*(void **)&v2211[8]);
        if (*(_QWORD *)v2211)
          os_release(*(void **)v2211);
        if (v1602 && *(_QWORD *)(v1602 + 24))
        {
          v1671 = _os_log_pack_size();
          v1672 = (std::__shared_weak_count_vtbl *)operator new(v1671, (std::align_val_t)8uLL);
          v1673 = (std::__shared_weak_count *)operator new();
          v1674 = v1673;
          v1673->__shared_owners_ = 0;
          v1675 = (unint64_t *)&v1673->__shared_owners_;
          v1673->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v1673->__shared_weak_owners_ = 0;
          v1673[1].__vftable = v1672;
          *(_QWORD *)v2211 = v1672;
          *(_QWORD *)&v2211[8] = v1672;
          *(_QWORD *)&v2211[16] = v1673;
          do
            v1676 = __ldxr(v1675);
          while (__stxr(v1676 + 1, v1675));
          *(_QWORD *)&v2211[24] = 0;
          *(_QWORD *)&v2211[32] = 0;
          v2212 = 0;
          do
            v1677 = __ldaxr(v1675);
          while (__stlxr(v1677 - 1, v1675));
          if (!v1677)
          {
            ((void (*)(std::__shared_weak_count *))v1673->__on_zero_shared)(v1673);
            std::__shared_weak_count::__release_weak(v1674);
          }
          v1678 = *(_QWORD *)v2211;
          *(_WORD *)_os_log_pack_fill() = 0;
          v1679 = (char *)operator new();
          v1680 = *(unsigned __int8 *)(v1603 + 39);
          if ((v1680 & 0x80u) == 0)
            v1681 = v1604;
          else
            v1681 = *(_QWORD *)(v1603 + 16);
          if ((v1680 & 0x80u) != 0)
            v1680 = *(_QWORD *)(v1603 + 24);
          *(_QWORD *)v1679 = v1678;
          *(_OWORD *)(v1679 + 8) = *(_OWORD *)&v2211[8];
          *(_QWORD *)&v2211[8] = 0;
          *(_QWORD *)&v2211[16] = 0;
          *(_OWORD *)(v1679 + 24) = *(_OWORD *)&v2211[24];
          *(_QWORD *)&v2211[24] = 0;
          *(_QWORD *)&v2211[32] = 0;
          *((_QWORD *)v1679 + 5) = v1681;
          *((_QWORD *)v1679 + 6) = v1680;
          v1679[56] = 1;
          v2210 = 0;
          v2207[0] = v1679;
          (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1602 + 24) + 40))(*(_QWORD *)(v1602 + 24), v2207);
          v1682 = v2207[0];
          v2207[0] = 0;
          if (v1682)
          {
            v1683 = (std::__shared_weak_count *)*((_QWORD *)v1682 + 4);
            if (v1683)
            {
              v1684 = (unint64_t *)&v1683->__shared_owners_;
              do
                v1685 = __ldaxr(v1684);
              while (__stlxr(v1685 - 1, v1684));
              if (!v1685)
              {
                ((void (*)(std::__shared_weak_count *))v1683->__on_zero_shared)(v1683);
                std::__shared_weak_count::__release_weak(v1683);
              }
            }
            v1686 = (std::__shared_weak_count *)*((_QWORD *)v1682 + 2);
            if (v1686)
            {
              v1687 = (unint64_t *)&v1686->__shared_owners_;
              do
                v1688 = __ldaxr(v1687);
              while (__stlxr(v1688 - 1, v1687));
              if (!v1688)
              {
                ((void (*)(std::__shared_weak_count *))v1686->__on_zero_shared)(v1686);
                std::__shared_weak_count::__release_weak(v1686);
              }
            }
            MEMORY[0x212BC6398](v1682, 0x10F0C40B62ED6C6);
            v1689 = v2210;
            v2210 = 0;
            if (v1689)
            {
              v1690 = *(std::__shared_weak_count **)(v1689 + 32);
              if (v1690)
              {
                v1691 = (unint64_t *)&v1690->__shared_owners_;
                do
                  v1692 = __ldaxr(v1691);
                while (__stlxr(v1692 - 1, v1691));
                if (!v1692)
                {
                  ((void (*)(std::__shared_weak_count *))v1690->__on_zero_shared)(v1690);
                  std::__shared_weak_count::__release_weak(v1690);
                }
              }
              v1693 = *(std::__shared_weak_count **)(v1689 + 16);
              if (v1693)
              {
                v1694 = (unint64_t *)&v1693->__shared_owners_;
                do
                  v1695 = __ldaxr(v1694);
                while (__stlxr(v1695 - 1, v1694));
                if (!v1695)
                {
                  ((void (*)(std::__shared_weak_count *))v1693->__on_zero_shared)(v1693);
                  std::__shared_weak_count::__release_weak(v1693);
                }
              }
              MEMORY[0x212BC6398](v1689, 0x10F0C40B62ED6C6);
            }
          }
          v1696 = *(std::__shared_weak_count **)&v2211[32];
          if (*(_QWORD *)&v2211[32])
          {
            v1697 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
            do
              v1698 = __ldaxr(v1697);
            while (__stlxr(v1698 - 1, v1697));
            if (!v1698)
            {
              ((void (*)(std::__shared_weak_count *))v1696->__on_zero_shared)(v1696);
              std::__shared_weak_count::__release_weak(v1696);
            }
          }
          v1699 = *(std::__shared_weak_count **)&v2211[16];
          if (*(_QWORD *)&v2211[16])
          {
            v1700 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
            do
              v1701 = __ldaxr(v1700);
            while (__stlxr(v1701 - 1, v1700));
            if (!v1701)
            {
              ((void (*)(std::__shared_weak_count *))v1699->__on_zero_shared)(v1699);
              std::__shared_weak_count::__release_weak(v1699);
            }
          }
        }
        else
        {
          os_log_type_enabled(v1670, OS_LOG_TYPE_INFO);
          *(_WORD *)v2211 = 0;
          v1702 = (void *)_os_log_send_and_compose_impl();
          if (v1702)
            free(v1702);
        }
        if (v1600)
        {
          sub_20E8C003C((uint64_t)&v2185, "Remove outlier tracks after BA");
          sub_20E863570((uint64_t)&v2185);
        }
        sub_20E863570((uint64_t)&v2185);
        v1703 = v2193;
        if (v2193)
        {
          v1704 = (unint64_t *)&v2193->__shared_owners_;
          do
            v1705 = __ldaxr(v1704);
          while (__stlxr(v1705 - 1, v1704));
          if (!v1705)
          {
            ((void (*)(std::__shared_weak_count *))v1703->__on_zero_shared)(v1703);
            std::__shared_weak_count::__release_weak(v1703);
          }
        }
LABEL_2930:
        sub_20F363910();
        sub_20F34CD58(&v2180);
        if (**(int **)(v2180 + 56) > 3)
          goto LABEL_3019;
        v1706 = *(unsigned __int8 *)(v2180 + 72);
        v1707 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
        v1708 = v1707;
        if (!v1706 && !v1707)
          goto LABEL_3019;
        v2185 = &v2180;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v2187 = std::chrono::system_clock::now().__d_.__rep_;
        v2188 = 3;
        v2189 = "unknown file";
        v2190 = 1323;
        v2192 = 0;
        v2193 = 0;
        v2191 = "unknown function";
        v1709.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        v1710 = *(_QWORD *)v2185;
        v1711 = (const char *)(*(_QWORD *)v2185 + 16);
        v2173 = v1711;
        if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
        {
          v1711 = *(const char **)(v1710 + 16);
          v1712 = *(_QWORD *)(v1710 + 24);
          v1714 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1714 & 1) != 0)
            goto LABEL_2937;
        }
        else
        {
          v1712 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
          v1713 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v1713 & 1) != 0)
            goto LABEL_2937;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2211);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
          if (v2211[24] && (v2211[23] & 0x80000000) != 0)
            operator delete(*(void **)v2211);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_2937:
        if (byte_254A4A4F8[23] >= 0)
          v1715 = byte_254A4A4F8;
        else
          v1715 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v1716 = byte_254A4A4F8[23];
        else
          v1716 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v2211 = os_log_create(v1715, v1711);
        v1717 = &v2211[8];
        if (v1716 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v1716 >= 0x17)
        {
          v1718 = v1709.__d_.__rep_;
          v1719 = (v1716 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1716 | 7) != 0x17)
            v1719 = v1716 | 7;
          v1720 = v1719 + 1;
          v1717 = operator new(v1719 + 1);
          *(_QWORD *)&v2211[16] = v1716;
          *(_QWORD *)&v2211[24] = v1720 | 0x8000000000000000;
          *(_QWORD *)&v2211[8] = v1717;
          v1709.__d_.__rep_ = v1718;
        }
        else
        {
          v2211[31] = v1716;
          if (!v1716)
          {
LABEL_2951:
            v1717[v1716] = 0;
            v2211[32] = 1;
            v1721 = (void **)&v2212;
            if (v1712 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1712 >= 0x17)
            {
              v1722 = (v1712 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1712 | 7) != 0x17)
                v1722 = v1712 | 7;
              v1723 = v1722 + 1;
              v1721 = (void **)operator new(v1722 + 1);
              v2213 = v1712;
              v2214 = v1723 | 0x8000000000000000;
              v2212 = v1721;
              a5 = v2152;
            }
            else
            {
              HIBYTE(v2214) = v1712;
              a5 = v2152;
              if (!v1712)
                goto LABEL_2959;
            }
            memmove(v1721, v1711, v1712);
LABEL_2959:
            *((_BYTE *)v1721 + v1712) = 0;
            v2215 = 1;
            v1724 = *(NSObject **)v2211;
            if (SHIBYTE(v2214) < 0)
              operator delete(v2212);
            a2 = v2153;
            if (v2211[32] && (v2211[31] & 0x80000000) != 0)
              operator delete(*(void **)&v2211[8]);
            if (*(_QWORD *)v2211)
              os_release(*(void **)v2211);
            if (v1708 && *(_QWORD *)(v1708 + 24))
            {
              v1725 = _os_log_pack_size();
              v1726 = (std::__shared_weak_count_vtbl *)operator new(v1725, (std::align_val_t)8uLL);
              v1727 = (std::__shared_weak_count *)operator new();
              v1728 = v1727;
              v1727->__shared_owners_ = 0;
              v1729 = (unint64_t *)&v1727->__shared_owners_;
              v1727->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v1727->__shared_weak_owners_ = 0;
              v1727[1].__vftable = v1726;
              *(_QWORD *)v2211 = v1726;
              *(_QWORD *)&v2211[8] = v1726;
              *(_QWORD *)&v2211[16] = v1727;
              do
                v1730 = __ldxr(v1729);
              while (__stxr(v1730 + 1, v1729));
              *(_QWORD *)&v2211[24] = 0;
              *(_QWORD *)&v2211[32] = 0;
              v2212 = 0;
              do
                v1731 = __ldaxr(v1729);
              while (__stlxr(v1731 - 1, v1729));
              if (!v1731)
              {
                ((void (*)(std::__shared_weak_count *))v1727->__on_zero_shared)(v1727);
                std::__shared_weak_count::__release_weak(v1728);
              }
              v1732 = *(_QWORD *)v2211;
              v1733 = _os_log_pack_fill();
              *(_DWORD *)v1733 = 134217984;
              *(double *)(v1733 + 4) = (double)(v1709.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
              v1734 = (char *)operator new();
              v1735 = *(unsigned __int8 *)(v1710 + 39);
              v1736 = v2173;
              if ((v1735 & 0x80u) != 0)
              {
                v1736 = *(const char **)(v1710 + 16);
                v1735 = *(_QWORD *)(v1710 + 24);
              }
              *(_QWORD *)v1734 = v1732;
              *(_OWORD *)(v1734 + 8) = *(_OWORD *)&v2211[8];
              *(_QWORD *)&v2211[8] = 0;
              *(_QWORD *)&v2211[16] = 0;
              *(_OWORD *)(v1734 + 24) = *(_OWORD *)&v2211[24];
              *(_QWORD *)&v2211[24] = 0;
              *(_QWORD *)&v2211[32] = 0;
              *((_QWORD *)v1734 + 5) = v1736;
              *((_QWORD *)v1734 + 6) = v1735;
              v1734[56] = 1;
              v2210 = 0;
              v2207[0] = v1734;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1708 + 24) + 40))(*(_QWORD *)(v1708 + 24), v2207);
              v1737 = v2207[0];
              v2207[0] = 0;
              a2 = v2153;
              if (v1737)
              {
                v1738 = (std::__shared_weak_count *)*((_QWORD *)v1737 + 4);
                if (v1738)
                {
                  v1739 = (unint64_t *)&v1738->__shared_owners_;
                  do
                    v1740 = __ldaxr(v1739);
                  while (__stlxr(v1740 - 1, v1739));
                  if (!v1740)
                  {
                    ((void (*)(std::__shared_weak_count *))v1738->__on_zero_shared)(v1738);
                    std::__shared_weak_count::__release_weak(v1738);
                  }
                }
                v1741 = (std::__shared_weak_count *)*((_QWORD *)v1737 + 2);
                if (v1741)
                {
                  v1742 = (unint64_t *)&v1741->__shared_owners_;
                  do
                    v1743 = __ldaxr(v1742);
                  while (__stlxr(v1743 - 1, v1742));
                  if (!v1743)
                  {
                    ((void (*)(std::__shared_weak_count *))v1741->__on_zero_shared)(v1741);
                    std::__shared_weak_count::__release_weak(v1741);
                  }
                }
                MEMORY[0x212BC6398](v1737, 0x10F0C40B62ED6C6);
                v1744 = v2210;
                v2210 = 0;
                if (v1744)
                {
                  v1745 = *(std::__shared_weak_count **)(v1744 + 32);
                  if (v1745)
                  {
                    v1746 = (unint64_t *)&v1745->__shared_owners_;
                    do
                      v1747 = __ldaxr(v1746);
                    while (__stlxr(v1747 - 1, v1746));
                    if (!v1747)
                    {
                      ((void (*)(std::__shared_weak_count *))v1745->__on_zero_shared)(v1745);
                      std::__shared_weak_count::__release_weak(v1745);
                    }
                  }
                  v1748 = *(std::__shared_weak_count **)(v1744 + 16);
                  if (v1748)
                  {
                    v1749 = (unint64_t *)&v1748->__shared_owners_;
                    do
                      v1750 = __ldaxr(v1749);
                    while (__stlxr(v1750 - 1, v1749));
                    if (!v1750)
                    {
                      ((void (*)(std::__shared_weak_count *))v1748->__on_zero_shared)(v1748);
                      std::__shared_weak_count::__release_weak(v1748);
                    }
                  }
                  MEMORY[0x212BC6398](v1744, 0x10F0C40B62ED6C6);
                }
              }
              v1751 = *(std::__shared_weak_count **)&v2211[32];
              if (*(_QWORD *)&v2211[32])
              {
                v1752 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                do
                  v1753 = __ldaxr(v1752);
                while (__stlxr(v1753 - 1, v1752));
                if (!v1753)
                {
                  ((void (*)(std::__shared_weak_count *))v1751->__on_zero_shared)(v1751);
                  std::__shared_weak_count::__release_weak(v1751);
                }
              }
              v1754 = *(std::__shared_weak_count **)&v2211[16];
              if (*(_QWORD *)&v2211[16])
              {
                v1755 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                do
                  v1756 = __ldaxr(v1755);
                while (__stlxr(v1756 - 1, v1755));
                if (!v1756)
                {
                  ((void (*)(std::__shared_weak_count *))v1754->__on_zero_shared)(v1754);
                  std::__shared_weak_count::__release_weak(v1754);
                }
              }
            }
            else
            {
              os_log_type_enabled(v1724, OS_LOG_TYPE_INFO);
              *(_DWORD *)v2211 = 134217984;
              *(double *)&v2211[4] = (double)(v1709.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
              v1757 = (void *)_os_log_send_and_compose_impl();
              if (v1757)
                free(v1757);
            }
            if (v1706)
            {
              v1758.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
              sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v1758.__d_.__rep_ - v1709.__d_.__rep_) / 1000000000.0);
              sub_20E863570((uint64_t)&v2185);
            }
            else
            {
              v1758.__d_.__rep_ = v1709.__d_.__rep_;
            }
            sub_20E863570((uint64_t)&v2185);
            v2147.__d_.__rep_ = v1758.__d_.__rep_;
            v1759 = v2193;
            if (v2193)
            {
              v1760 = (unint64_t *)&v2193->__shared_owners_;
              do
                v1761 = __ldaxr(v1760);
              while (__stlxr(v1761 - 1, v1760));
              if (!v1761)
              {
                ((void (*)(std::__shared_weak_count *))v1759->__on_zero_shared)(v1759);
                std::__shared_weak_count::__release_weak(v1759);
              }
            }
LABEL_3019:
            sub_20F34CD58(&v2180);
            if (**(int **)(v2180 + 56) > 3)
              goto LABEL_3129;
            v1762 = *(unsigned __int8 *)(v2180 + 72);
            v1763 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
            v1764 = v1763;
            if (!v1762 && v1763 == 0)
              goto LABEL_3129;
            v2185 = &v2180;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v2187 = std::chrono::system_clock::now().__d_.__rep_;
            v2188 = 3;
            v2189 = "unknown file";
            v2190 = 1324;
            v2192 = 0;
            v2193 = 0;
            v2191 = "unknown function";
            v1766 = (_QWORD *)a2[1];
            v1769 = (_QWORD *)*v1766;
            v1767 = v1766 + 1;
            v1768 = v1769;
            if (v1769 == v1767)
            {
              v1770 = 0;
            }
            else
            {
              v1770 = 0;
              do
              {
                v1771 = (_QWORD *)v1768[1];
                v1772 = v1768;
                if (v1771)
                {
                  do
                  {
                    v1773 = v1771;
                    v1771 = (_QWORD *)*v1771;
                  }
                  while (v1771);
                }
                else
                {
                  do
                  {
                    v1773 = (_QWORD *)v1772[2];
                    _ZF = *v1773 == (_QWORD)v1772;
                    v1772 = v1773;
                  }
                  while (!_ZF);
                }
                v1770 += *(unsigned __int8 *)(v1768[6] + 528);
                v1768 = v1773;
              }
              while (v1773 != v1767);
            }
            v1774 = *(_QWORD *)v2185;
            v1775 = (const char *)(*(_QWORD *)v2185 + 16);
            v2174 = v1775;
            if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
            {
              v1775 = *(const char **)(v1774 + 16);
              v1776 = *(_QWORD *)(v1774 + 24);
              v1778 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v1778 & 1) != 0)
                goto LABEL_3038;
            }
            else
            {
              v1776 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
              v1777 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v1777 & 1) != 0)
                goto LABEL_3038;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v2211);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
              if (v2211[24] && (v2211[23] & 0x80000000) != 0)
                operator delete(*(void **)v2211);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_3038:
            if (byte_254A4A4F8[23] >= 0)
              v1779 = byte_254A4A4F8;
            else
              v1779 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v1780 = byte_254A4A4F8[23];
            else
              v1780 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v2211 = os_log_create(v1779, v1775);
            v1781 = &v2211[8];
            if (v1780 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v1780 >= 0x17)
            {
              v1782 = v1762;
              v1783 = (v1780 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v1780 | 7) != 0x17)
                v1783 = v1780 | 7;
              v1784 = v1783 + 1;
              v1781 = operator new(v1783 + 1);
              *(_QWORD *)&v2211[16] = v1780;
              *(_QWORD *)&v2211[24] = v1784 | 0x8000000000000000;
              *(_QWORD *)&v2211[8] = v1781;
              v1762 = v1782;
            }
            else
            {
              v2211[31] = v1780;
              if (!v1780)
              {
LABEL_3052:
                v1781[v1780] = 0;
                v2211[32] = 1;
                v1785 = (void **)&v2212;
                if (v1776 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                a5 = v2152;
                if (v1776 >= 0x17)
                {
                  v1786 = (v1776 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v1776 | 7) != 0x17)
                    v1786 = v1776 | 7;
                  v1787 = v1786 + 1;
                  v1785 = (void **)operator new(v1786 + 1);
                  v2213 = v1776;
                  v2214 = v1787 | 0x8000000000000000;
                  v2212 = v1785;
                  a2 = v2153;
                }
                else
                {
                  HIBYTE(v2214) = v1776;
                  a2 = v2153;
                  if (!v1776)
                    goto LABEL_3060;
                }
                memmove(v1785, v1775, v1776);
LABEL_3060:
                *((_BYTE *)v1785 + v1776) = 0;
                v2215 = 1;
                v1788 = *(NSObject **)v2211;
                if (SHIBYTE(v2214) < 0)
                  operator delete(v2212);
                if (v2211[32] && (v2211[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v2211[8]);
                if (*(_QWORD *)v2211)
                  os_release(*(void **)v2211);
                if (v1764 && *(_QWORD *)(v1764 + 24))
                {
                  v1789 = _os_log_pack_size();
                  v1790 = (std::__shared_weak_count_vtbl *)operator new(v1789, (std::align_val_t)8uLL);
                  v1791 = (std::__shared_weak_count *)operator new();
                  v1792 = v1791;
                  v1791->__shared_owners_ = 0;
                  v1793 = (unint64_t *)&v1791->__shared_owners_;
                  v1791->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v1791->__shared_weak_owners_ = 0;
                  v1791[1].__vftable = v1790;
                  *(_QWORD *)v2211 = v1790;
                  *(_QWORD *)&v2211[8] = v1790;
                  *(_QWORD *)&v2211[16] = v1791;
                  do
                    v1794 = __ldxr(v1793);
                  while (__stxr(v1794 + 1, v1793));
                  *(_QWORD *)&v2211[24] = 0;
                  *(_QWORD *)&v2211[32] = 0;
                  v2212 = 0;
                  do
                    v1795 = __ldaxr(v1793);
                  while (__stlxr(v1795 - 1, v1793));
                  if (!v1795)
                  {
                    ((void (*)(std::__shared_weak_count *))v1791->__on_zero_shared)(v1791);
                    std::__shared_weak_count::__release_weak(v1792);
                  }
                  v1796 = *(_QWORD *)v2211;
                  v1797 = _os_log_pack_fill();
                  *(_DWORD *)v1797 = 134217984;
                  *(_QWORD *)(v1797 + 4) = v1770;
                  v1798 = (char *)operator new();
                  v1799 = *(unsigned __int8 *)(v1774 + 39);
                  v1800 = v2174;
                  if ((v1799 & 0x80u) != 0)
                  {
                    v1800 = *(const char **)(v1774 + 16);
                    v1799 = *(_QWORD *)(v1774 + 24);
                  }
                  *(_QWORD *)v1798 = v1796;
                  *(_OWORD *)(v1798 + 8) = *(_OWORD *)&v2211[8];
                  *(_QWORD *)&v2211[8] = 0;
                  *(_QWORD *)&v2211[16] = 0;
                  *(_OWORD *)(v1798 + 24) = *(_OWORD *)&v2211[24];
                  *(_QWORD *)&v2211[24] = 0;
                  *(_QWORD *)&v2211[32] = 0;
                  *((_QWORD *)v1798 + 5) = v1800;
                  *((_QWORD *)v1798 + 6) = v1799;
                  v1798[56] = 1;
                  v2210 = 0;
                  v2207[0] = v1798;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1764 + 24) + 40))(*(_QWORD *)(v1764 + 24), v2207);
                  v1801 = v2207[0];
                  v2207[0] = 0;
                  if (v1801)
                  {
                    v1802 = (std::__shared_weak_count *)*((_QWORD *)v1801 + 4);
                    if (v1802)
                    {
                      v1803 = (unint64_t *)&v1802->__shared_owners_;
                      do
                        v1804 = __ldaxr(v1803);
                      while (__stlxr(v1804 - 1, v1803));
                      if (!v1804)
                      {
                        ((void (*)(std::__shared_weak_count *))v1802->__on_zero_shared)(v1802);
                        std::__shared_weak_count::__release_weak(v1802);
                      }
                    }
                    v1805 = (std::__shared_weak_count *)*((_QWORD *)v1801 + 2);
                    if (v1805)
                    {
                      v1806 = (unint64_t *)&v1805->__shared_owners_;
                      do
                        v1807 = __ldaxr(v1806);
                      while (__stlxr(v1807 - 1, v1806));
                      if (!v1807)
                      {
                        ((void (*)(std::__shared_weak_count *))v1805->__on_zero_shared)(v1805);
                        std::__shared_weak_count::__release_weak(v1805);
                      }
                    }
                    MEMORY[0x212BC6398](v1801, 0x10F0C40B62ED6C6);
                    v1808 = v2210;
                    v2210 = 0;
                    if (v1808)
                    {
                      v1809 = *(std::__shared_weak_count **)(v1808 + 32);
                      if (v1809)
                      {
                        v1810 = (unint64_t *)&v1809->__shared_owners_;
                        do
                          v1811 = __ldaxr(v1810);
                        while (__stlxr(v1811 - 1, v1810));
                        if (!v1811)
                        {
                          ((void (*)(std::__shared_weak_count *))v1809->__on_zero_shared)(v1809);
                          std::__shared_weak_count::__release_weak(v1809);
                        }
                      }
                      v1812 = *(std::__shared_weak_count **)(v1808 + 16);
                      if (v1812)
                      {
                        v1813 = (unint64_t *)&v1812->__shared_owners_;
                        do
                          v1814 = __ldaxr(v1813);
                        while (__stlxr(v1814 - 1, v1813));
                        if (!v1814)
                        {
                          ((void (*)(std::__shared_weak_count *))v1812->__on_zero_shared)(v1812);
                          std::__shared_weak_count::__release_weak(v1812);
                        }
                      }
                      MEMORY[0x212BC6398](v1808, 0x10F0C40B62ED6C6);
                    }
                  }
                  v1815 = *(std::__shared_weak_count **)&v2211[32];
                  if (*(_QWORD *)&v2211[32])
                  {
                    v1816 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                    do
                      v1817 = __ldaxr(v1816);
                    while (__stlxr(v1817 - 1, v1816));
                    if (!v1817)
                    {
                      ((void (*)(std::__shared_weak_count *))v1815->__on_zero_shared)(v1815);
                      std::__shared_weak_count::__release_weak(v1815);
                    }
                  }
                  v1818 = *(std::__shared_weak_count **)&v2211[16];
                  if (*(_QWORD *)&v2211[16])
                  {
                    v1819 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                    do
                      v1820 = __ldaxr(v1819);
                    while (__stlxr(v1820 - 1, v1819));
                    if (!v1820)
                    {
                      ((void (*)(std::__shared_weak_count *))v1818->__on_zero_shared)(v1818);
                      std::__shared_weak_count::__release_weak(v1818);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v1788, OS_LOG_TYPE_INFO);
                  *(_DWORD *)v2211 = 134217984;
                  *(_QWORD *)&v2211[4] = v1770;
                  v1821 = (void *)_os_log_send_and_compose_impl();
                  if (v1821)
                    free(v1821);
                }
                if (v1762)
                {
                  v1822 = (_QWORD *)a2[1];
                  v1825 = (_QWORD *)*v1822;
                  v1823 = v1822 + 1;
                  v1824 = v1825;
                  if (v1825 == v1823)
                  {
                    v1826 = 0;
                  }
                  else
                  {
                    v1826 = 0;
                    do
                    {
                      v1827 = (_QWORD *)v1824[1];
                      v1828 = v1824;
                      if (v1827)
                      {
                        do
                        {
                          v1829 = v1827;
                          v1827 = (_QWORD *)*v1827;
                        }
                        while (v1827);
                      }
                      else
                      {
                        do
                        {
                          v1829 = (_QWORD *)v1828[2];
                          _ZF = *v1829 == (_QWORD)v1828;
                          v1828 = v1829;
                        }
                        while (!_ZF);
                      }
                      v1826 += *(unsigned __int8 *)(v1824[6] + 528);
                      v1824 = v1829;
                    }
                    while (v1829 != v1823);
                  }
                  sub_20E8C003C((uint64_t)&v2185, "Num tracks: %zu", v1826);
                  sub_20E863570((uint64_t)&v2185);
                }
                sub_20E863570((uint64_t)&v2185);
                v1830 = v2193;
                if (v2193)
                {
                  v1831 = (unint64_t *)&v2193->__shared_owners_;
                  do
                    v1832 = __ldaxr(v1831);
                  while (__stlxr(v1832 - 1, v1831));
                  if (!v1832)
                  {
                    ((void (*)(std::__shared_weak_count *))v1830->__on_zero_shared)(v1830);
                    std::__shared_weak_count::__release_weak(v1830);
                  }
                }
                goto LABEL_3129;
              }
            }
            memmove(v1781, v1779, v1780);
            goto LABEL_3052;
          }
        }
        memmove(v1717, v1715, v1716);
        goto LABEL_2951;
      }
    }
    memmove(v1664, v1662, v1663);
    goto LABEL_2860;
  }
  v2185 = &v2180;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v2187 = std::chrono::system_clock::now().__d_.__rep_;
  v2188 = 3;
  v2189 = "unknown file";
  v2190 = 1316;
  v2192 = 0;
  v2193 = 0;
  v2191 = "unknown function";
  v1608.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v1609 = *(_QWORD *)v2185;
  v1610 = (const char *)(*(_QWORD *)v2185 + 16);
  v2172 = v1610;
  if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
  {
    v1610 = *(const char **)(v1609 + 16);
    v1611 = *(_QWORD *)(v1609 + 24);
    v1613 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1613 & 1) != 0)
      goto LABEL_2761;
  }
  else
  {
    v1611 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
    v1612 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1612 & 1) != 0)
      goto LABEL_2761;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v2211);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
    if (v2211[24] && (v2211[23] & 0x80000000) != 0)
      operator delete(*(void **)v2211);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_2761:
  if (byte_254A4A4F8[23] >= 0)
    v1614 = byte_254A4A4F8;
  else
    v1614 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v1615 = byte_254A4A4F8[23];
  else
    v1615 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v2211 = os_log_create(v1614, v1610);
  v1616 = &v2211[8];
  if (v1615 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1615 >= 0x17)
  {
    v1617 = v1608.__d_.__rep_;
    v1618 = (v1615 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1615 | 7) != 0x17)
      v1618 = v1615 | 7;
    v1619 = v1618 + 1;
    v1616 = operator new(v1618 + 1);
    *(_QWORD *)&v2211[16] = v1615;
    *(_QWORD *)&v2211[24] = v1619 | 0x8000000000000000;
    *(_QWORD *)&v2211[8] = v1616;
    v1608.__d_.__rep_ = v1617;
    goto LABEL_2774;
  }
  v2211[31] = v1615;
  if (v1615)
LABEL_2774:
    memmove(v1616, v1614, v1615);
  v1616[v1615] = 0;
  v2211[32] = 1;
  v1620 = (void **)&v2212;
  if (v1611 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1611 >= 0x17)
  {
    v1621 = (v1611 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1611 | 7) != 0x17)
      v1621 = v1611 | 7;
    v1622 = v1621 + 1;
    v1620 = (void **)operator new(v1621 + 1);
    v2213 = v1611;
    v2214 = v1622 | 0x8000000000000000;
    v2212 = v1620;
    a5 = v2152;
    goto LABEL_2782;
  }
  HIBYTE(v2214) = v1611;
  a5 = v2152;
  if (v1611)
LABEL_2782:
    memmove(v1620, v1610, v1611);
  *((_BYTE *)v1620 + v1611) = 0;
  v2215 = 1;
  v1623 = *(NSObject **)v2211;
  if (SHIBYTE(v2214) < 0)
    operator delete(v2212);
  a2 = v2153;
  if (v2211[32] && (v2211[31] & 0x80000000) != 0)
    operator delete(*(void **)&v2211[8]);
  if (*(_QWORD *)v2211)
    os_release(*(void **)v2211);
  if (v1599 && *(_QWORD *)(v1599 + 24))
  {
    v1624 = _os_log_pack_size();
    v1625 = (std::__shared_weak_count_vtbl *)operator new(v1624, (std::align_val_t)8uLL);
    v1626 = (std::__shared_weak_count *)operator new();
    v1627 = v1626;
    v1626->__shared_owners_ = 0;
    v1628 = (unint64_t *)&v1626->__shared_owners_;
    v1626->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v1626->__shared_weak_owners_ = 0;
    v1626[1].__vftable = v1625;
    *(_QWORD *)v2211 = v1625;
    *(_QWORD *)&v2211[8] = v1625;
    *(_QWORD *)&v2211[16] = v1626;
    do
      v1629 = __ldxr(v1628);
    while (__stxr(v1629 + 1, v1628));
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    v2212 = 0;
    do
      v1630 = __ldaxr(v1628);
    while (__stlxr(v1630 - 1, v1628));
    if (!v1630)
    {
      ((void (*)(std::__shared_weak_count *))v1626->__on_zero_shared)(v1626);
      std::__shared_weak_count::__release_weak(v1627);
    }
    v1631 = *(_QWORD *)v2211;
    v1632 = _os_log_pack_fill();
    *(_DWORD *)v1632 = 134217984;
    *(double *)(v1632 + 4) = (double)(v1608.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
    v1633 = (char *)operator new();
    v1634 = *(unsigned __int8 *)(v1609 + 39);
    v1635 = v2172;
    if ((v1634 & 0x80u) != 0)
    {
      v1635 = *(const char **)(v1609 + 16);
      v1634 = *(_QWORD *)(v1609 + 24);
    }
    *(_QWORD *)v1633 = v1631;
    *(_OWORD *)(v1633 + 8) = *(_OWORD *)&v2211[8];
    *(_QWORD *)&v2211[8] = 0;
    *(_QWORD *)&v2211[16] = 0;
    *(_OWORD *)(v1633 + 24) = *(_OWORD *)&v2211[24];
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    *((_QWORD *)v1633 + 5) = v1635;
    *((_QWORD *)v1633 + 6) = v1634;
    v1633[56] = 1;
    v2210 = 0;
    v2207[0] = v1633;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1599 + 24) + 40))(*(_QWORD *)(v1599 + 24), v2207);
    v1636 = v2207[0];
    v2207[0] = 0;
    a2 = v2153;
    if (v1636)
    {
      v1637 = (std::__shared_weak_count *)*((_QWORD *)v1636 + 4);
      if (v1637)
      {
        v1638 = (unint64_t *)&v1637->__shared_owners_;
        do
          v1639 = __ldaxr(v1638);
        while (__stlxr(v1639 - 1, v1638));
        if (!v1639)
        {
          ((void (*)(std::__shared_weak_count *))v1637->__on_zero_shared)(v1637);
          std::__shared_weak_count::__release_weak(v1637);
        }
      }
      v1640 = (std::__shared_weak_count *)*((_QWORD *)v1636 + 2);
      if (v1640)
      {
        v1641 = (unint64_t *)&v1640->__shared_owners_;
        do
          v1642 = __ldaxr(v1641);
        while (__stlxr(v1642 - 1, v1641));
        if (!v1642)
        {
          ((void (*)(std::__shared_weak_count *))v1640->__on_zero_shared)(v1640);
          std::__shared_weak_count::__release_weak(v1640);
        }
      }
      MEMORY[0x212BC6398](v1636, 0x10F0C40B62ED6C6);
      v1643 = v2210;
      v2210 = 0;
      if (v1643)
      {
        v1644 = *(std::__shared_weak_count **)(v1643 + 32);
        if (v1644)
        {
          v1645 = (unint64_t *)&v1644->__shared_owners_;
          do
            v1646 = __ldaxr(v1645);
          while (__stlxr(v1646 - 1, v1645));
          if (!v1646)
          {
            ((void (*)(std::__shared_weak_count *))v1644->__on_zero_shared)(v1644);
            std::__shared_weak_count::__release_weak(v1644);
          }
        }
        v1647 = *(std::__shared_weak_count **)(v1643 + 16);
        if (v1647)
        {
          v1648 = (unint64_t *)&v1647->__shared_owners_;
          do
            v1649 = __ldaxr(v1648);
          while (__stlxr(v1649 - 1, v1648));
          if (!v1649)
          {
            ((void (*)(std::__shared_weak_count *))v1647->__on_zero_shared)(v1647);
            std::__shared_weak_count::__release_weak(v1647);
          }
        }
        MEMORY[0x212BC6398](v1643, 0x10F0C40B62ED6C6);
      }
    }
    v1650 = *(std::__shared_weak_count **)&v2211[32];
    if (*(_QWORD *)&v2211[32])
    {
      v1651 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
      do
        v1652 = __ldaxr(v1651);
      while (__stlxr(v1652 - 1, v1651));
      if (!v1652)
      {
        ((void (*)(std::__shared_weak_count *))v1650->__on_zero_shared)(v1650);
        std::__shared_weak_count::__release_weak(v1650);
      }
    }
    v1653 = *(std::__shared_weak_count **)&v2211[16];
    if (*(_QWORD *)&v2211[16])
    {
      v1654 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
      do
        v1655 = __ldaxr(v1654);
      while (__stlxr(v1655 - 1, v1654));
      if (!v1655)
      {
        ((void (*)(std::__shared_weak_count *))v1653->__on_zero_shared)(v1653);
        std::__shared_weak_count::__release_weak(v1653);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1623, OS_LOG_TYPE_INFO);
    *(_DWORD *)v2211 = 134217984;
    *(double *)&v2211[4] = (double)(v1608.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
    v1656 = (void *)_os_log_send_and_compose_impl();
    if (v1656)
      free(v1656);
  }
  if (v1597)
  {
    v1657.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v1657.__d_.__rep_ - v1608.__d_.__rep_) / 1000000000.0);
    sub_20E863570((uint64_t)&v2185);
  }
  else
  {
    v1657.__d_.__rep_ = v1608.__d_.__rep_;
  }
  sub_20E863570((uint64_t)&v2185);
  v1658 = v2193;
  if (v2193)
  {
    v1659 = (unint64_t *)&v2193->__shared_owners_;
    do
      v1660 = __ldaxr(v1659);
    while (__stlxr(v1660 - 1, v1659));
    if (!v1660)
    {
      ((void (*)(std::__shared_weak_count *))v1658->__on_zero_shared)(v1658);
      std::__shared_weak_count::__release_weak(v1658);
    }
  }
  v2147.__d_.__rep_ = v1657.__d_.__rep_;
  if (*(_BYTE *)(a5 + 10))
    goto LABEL_2751;
LABEL_3129:
  sub_20F34CD58(&v2180);
  if (**(int **)(v2180 + 56) > 3)
    goto LABEL_3220;
  v1833 = *(unsigned __int8 *)(v2180 + 72);
  v1834 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
  v1835 = v1834;
  if (!v1833 && !v1834)
    goto LABEL_3220;
  v2185 = &v2180;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v2187 = std::chrono::system_clock::now().__d_.__rep_;
  v2188 = 3;
  v2189 = "unknown file";
  v2190 = 1327;
  v2192 = 0;
  v2193 = 0;
  v2191 = "unknown function";
  v1836 = *(_QWORD *)v2185;
  v1837 = *(_QWORD *)v2185 + 16;
  if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
  {
    v1839 = *(const char **)(v1836 + 16);
    v1838 = *(_QWORD *)(v1836 + 24);
    v1841 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1841 & 1) != 0)
      goto LABEL_3136;
  }
  else
  {
    v1838 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
    v1839 = (const char *)(*(_QWORD *)v2185 + 16);
    v1840 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1840 & 1) != 0)
      goto LABEL_3136;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v2211);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
    if (v2211[24] && (v2211[23] & 0x80000000) != 0)
      operator delete(*(void **)v2211);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_3136:
  if (byte_254A4A4F8[23] >= 0)
    v1842 = byte_254A4A4F8;
  else
    v1842 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v1843 = byte_254A4A4F8[23];
  else
    v1843 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v2211 = os_log_create(v1842, v1839);
  v1844 = &v2211[8];
  if (v1843 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1843 >= 0x17)
  {
    v1845 = (v1843 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1843 | 7) != 0x17)
      v1845 = v1843 | 7;
    v1846 = v1845 + 1;
    v1844 = operator new(v1845 + 1);
    *(_QWORD *)&v2211[16] = v1843;
    *(_QWORD *)&v2211[24] = v1846 | 0x8000000000000000;
    *(_QWORD *)&v2211[8] = v1844;
    goto LABEL_3149;
  }
  v2211[31] = v1843;
  if (v1843)
LABEL_3149:
    memmove(v1844, v1842, v1843);
  v1844[v1843] = 0;
  v2211[32] = 1;
  v1847 = (void **)&v2212;
  if (v1838 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  a5 = v2152;
  if (v1838 >= 0x17)
  {
    v1848 = (v1838 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1838 | 7) != 0x17)
      v1848 = v1838 | 7;
    v1849 = v1848 + 1;
    v1847 = (void **)operator new(v1848 + 1);
    v2213 = v1838;
    v2214 = v1849 | 0x8000000000000000;
    v2212 = v1847;
    a2 = v2153;
  }
  else
  {
    HIBYTE(v2214) = v1838;
    a2 = v2153;
    if (!v1838)
      goto LABEL_3158;
  }
  memmove(v1847, v1839, v1838);
LABEL_3158:
  *((_BYTE *)v1847 + v1838) = 0;
  v2215 = 1;
  v1850 = *(NSObject **)v2211;
  if (SHIBYTE(v2214) < 0)
    operator delete(v2212);
  if (v2211[32] && (v2211[31] & 0x80000000) != 0)
    operator delete(*(void **)&v2211[8]);
  if (*(_QWORD *)v2211)
    os_release(*(void **)v2211);
  if (v1835 && *(_QWORD *)(v1835 + 24))
  {
    v1851 = _os_log_pack_size();
    v1852 = (std::__shared_weak_count_vtbl *)operator new(v1851, (std::align_val_t)8uLL);
    v1853 = (std::__shared_weak_count *)operator new();
    v1854 = v1853;
    v1853->__shared_owners_ = 0;
    v1855 = (unint64_t *)&v1853->__shared_owners_;
    v1853->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v1853->__shared_weak_owners_ = 0;
    v1853[1].__vftable = v1852;
    *(_QWORD *)v2211 = v1852;
    *(_QWORD *)&v2211[8] = v1852;
    *(_QWORD *)&v2211[16] = v1853;
    do
      v1856 = __ldxr(v1855);
    while (__stxr(v1856 + 1, v1855));
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    v2212 = 0;
    do
      v1857 = __ldaxr(v1855);
    while (__stlxr(v1857 - 1, v1855));
    if (!v1857)
    {
      ((void (*)(std::__shared_weak_count *))v1853->__on_zero_shared)(v1853);
      std::__shared_weak_count::__release_weak(v1854);
    }
    v1858 = *(_QWORD *)v2211;
    *(_WORD *)_os_log_pack_fill() = 0;
    v1859 = (char *)operator new();
    v1860 = *(unsigned __int8 *)(v1836 + 39);
    if ((v1860 & 0x80u) == 0)
      v1861 = v1837;
    else
      v1861 = *(_QWORD *)(v1836 + 16);
    if ((v1860 & 0x80u) != 0)
      v1860 = *(_QWORD *)(v1836 + 24);
    *(_QWORD *)v1859 = v1858;
    *(_OWORD *)(v1859 + 8) = *(_OWORD *)&v2211[8];
    *(_QWORD *)&v2211[8] = 0;
    *(_QWORD *)&v2211[16] = 0;
    *(_OWORD *)(v1859 + 24) = *(_OWORD *)&v2211[24];
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    *((_QWORD *)v1859 + 5) = v1861;
    *((_QWORD *)v1859 + 6) = v1860;
    v1859[56] = 1;
    v2210 = 0;
    v2207[0] = v1859;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1835 + 24) + 40))(*(_QWORD *)(v1835 + 24), v2207);
    v1862 = v2207[0];
    v2207[0] = 0;
    if (v1862)
    {
      v1863 = (std::__shared_weak_count *)*((_QWORD *)v1862 + 4);
      if (v1863)
      {
        v1864 = (unint64_t *)&v1863->__shared_owners_;
        do
          v1865 = __ldaxr(v1864);
        while (__stlxr(v1865 - 1, v1864));
        if (!v1865)
        {
          ((void (*)(std::__shared_weak_count *))v1863->__on_zero_shared)(v1863);
          std::__shared_weak_count::__release_weak(v1863);
        }
      }
      v1866 = (std::__shared_weak_count *)*((_QWORD *)v1862 + 2);
      if (v1866)
      {
        v1867 = (unint64_t *)&v1866->__shared_owners_;
        do
          v1868 = __ldaxr(v1867);
        while (__stlxr(v1868 - 1, v1867));
        if (!v1868)
        {
          ((void (*)(std::__shared_weak_count *))v1866->__on_zero_shared)(v1866);
          std::__shared_weak_count::__release_weak(v1866);
        }
      }
      MEMORY[0x212BC6398](v1862, 0x10F0C40B62ED6C6);
      v1869 = v2210;
      v2210 = 0;
      if (v1869)
      {
        v1870 = *(std::__shared_weak_count **)(v1869 + 32);
        if (v1870)
        {
          v1871 = (unint64_t *)&v1870->__shared_owners_;
          do
            v1872 = __ldaxr(v1871);
          while (__stlxr(v1872 - 1, v1871));
          if (!v1872)
          {
            ((void (*)(std::__shared_weak_count *))v1870->__on_zero_shared)(v1870);
            std::__shared_weak_count::__release_weak(v1870);
          }
        }
        v1873 = *(std::__shared_weak_count **)(v1869 + 16);
        if (v1873)
        {
          v1874 = (unint64_t *)&v1873->__shared_owners_;
          do
            v1875 = __ldaxr(v1874);
          while (__stlxr(v1875 - 1, v1874));
          if (!v1875)
          {
            ((void (*)(std::__shared_weak_count *))v1873->__on_zero_shared)(v1873);
            std::__shared_weak_count::__release_weak(v1873);
          }
        }
        MEMORY[0x212BC6398](v1869, 0x10F0C40B62ED6C6);
      }
    }
    v1876 = *(std::__shared_weak_count **)&v2211[32];
    if (*(_QWORD *)&v2211[32])
    {
      v1877 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
      do
        v1878 = __ldaxr(v1877);
      while (__stlxr(v1878 - 1, v1877));
      if (!v1878)
      {
        ((void (*)(std::__shared_weak_count *))v1876->__on_zero_shared)(v1876);
        std::__shared_weak_count::__release_weak(v1876);
      }
    }
    v1879 = *(std::__shared_weak_count **)&v2211[16];
    if (*(_QWORD *)&v2211[16])
    {
      v1880 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
      do
        v1881 = __ldaxr(v1880);
      while (__stlxr(v1881 - 1, v1880));
      if (!v1881)
      {
        ((void (*)(std::__shared_weak_count *))v1879->__on_zero_shared)(v1879);
        std::__shared_weak_count::__release_weak(v1879);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1850, OS_LOG_TYPE_INFO);
    *(_WORD *)v2211 = 0;
    v1882 = (void *)_os_log_send_and_compose_impl();
    if (v1882)
      free(v1882);
  }
  if (v1833)
  {
    sub_20E8C003C((uint64_t)&v2185, "Evaluate database");
    sub_20E863570((uint64_t)&v2185);
  }
  sub_20E863570((uint64_t)&v2185);
  v1883 = v2193;
  if (v2193)
  {
    v1884 = (unint64_t *)&v2193->__shared_owners_;
    do
      v1885 = __ldaxr(v1884);
    while (__stlxr(v1885 - 1, v1884));
    if (!v1885)
    {
      ((void (*)(std::__shared_weak_count *))v1883->__on_zero_shared)(v1883);
      std::__shared_weak_count::__release_weak(v1883);
    }
  }
LABEL_3220:
  sub_20F360AD4((uint64_t)v2178, (int8x8_t **)a2);
  if (v2178[0])
  {
    v2178[1] = v2178[0];
    operator delete(v2178[0]);
  }
  sub_20F34CD58(&v2180);
  if (**(int **)(v2180 + 56) > 3
    || (v1886 = *(unsigned __int8 *)(v2180 + 72),
        v1887 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0),
        v1888 = v1887,
        !v1886)
    && !v1887)
  {
LABEL_3225:
    if (!*(_BYTE *)(a5 + 2))
      goto LABEL_3273;
    goto LABEL_3226;
  }
  v2185 = &v2180;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v2187 = std::chrono::system_clock::now().__d_.__rep_;
  v2188 = 3;
  v2189 = "unknown file";
  v2190 = 1329;
  v2192 = 0;
  v2193 = 0;
  v2191 = "unknown function";
  v1942.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v1943 = *(_QWORD *)v2185;
  v1944 = (const char *)(*(_QWORD *)v2185 + 16);
  v2176 = v1944;
  if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
  {
    v1944 = *(const char **)(v1943 + 16);
    v1945 = *(_QWORD *)(v1943 + 24);
    v1947 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1947 & 1) != 0)
      goto LABEL_3291;
  }
  else
  {
    v1945 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
    v1946 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1946 & 1) != 0)
      goto LABEL_3291;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v2211);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
    if (v2211[24] && (v2211[23] & 0x80000000) != 0)
      operator delete(*(void **)v2211);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_3291:
  if (byte_254A4A4F8[23] >= 0)
    v1948 = byte_254A4A4F8;
  else
    v1948 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v1949 = byte_254A4A4F8[23];
  else
    v1949 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v2211 = os_log_create(v1948, v1944);
  v1950 = &v2211[8];
  if (v1949 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1949 >= 0x17)
  {
    v1951 = v1942.__d_.__rep_;
    v1952 = (v1949 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1949 | 7) != 0x17)
      v1952 = v1949 | 7;
    v1953 = v1952 + 1;
    v1950 = operator new(v1952 + 1);
    *(_QWORD *)&v2211[16] = v1949;
    *(_QWORD *)&v2211[24] = v1953 | 0x8000000000000000;
    *(_QWORD *)&v2211[8] = v1950;
    v1942.__d_.__rep_ = v1951;
    goto LABEL_3304;
  }
  v2211[31] = v1949;
  if (v1949)
LABEL_3304:
    memmove(v1950, v1948, v1949);
  v1950[v1949] = 0;
  v2211[32] = 1;
  v1954 = (void **)&v2212;
  if (v1945 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1945 >= 0x17)
  {
    v1955 = (v1945 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1945 | 7) != 0x17)
      v1955 = v1945 | 7;
    v1956 = v1955 + 1;
    v1954 = (void **)operator new(v1955 + 1);
    v2213 = v1945;
    v2214 = v1956 | 0x8000000000000000;
    v2212 = v1954;
    a5 = v2152;
    goto LABEL_3312;
  }
  HIBYTE(v2214) = v1945;
  a5 = v2152;
  if (v1945)
LABEL_3312:
    memmove(v1954, v1944, v1945);
  *((_BYTE *)v1954 + v1945) = 0;
  v2215 = 1;
  v1957 = *(NSObject **)v2211;
  if (SHIBYTE(v2214) < 0)
    operator delete(v2212);
  a2 = v2153;
  if (v2211[32] && (v2211[31] & 0x80000000) != 0)
    operator delete(*(void **)&v2211[8]);
  if (*(_QWORD *)v2211)
    os_release(*(void **)v2211);
  if (v1888 && *(_QWORD *)(v1888 + 24))
  {
    v1958 = _os_log_pack_size();
    v1959 = (std::__shared_weak_count_vtbl *)operator new(v1958, (std::align_val_t)8uLL);
    v1960 = (std::__shared_weak_count *)operator new();
    v1961 = v1960;
    v1960->__shared_owners_ = 0;
    v1962 = (unint64_t *)&v1960->__shared_owners_;
    v1960->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v1960->__shared_weak_owners_ = 0;
    v1960[1].__vftable = v1959;
    *(_QWORD *)v2211 = v1959;
    *(_QWORD *)&v2211[8] = v1959;
    *(_QWORD *)&v2211[16] = v1960;
    do
      v1963 = __ldxr(v1962);
    while (__stxr(v1963 + 1, v1962));
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    v2212 = 0;
    do
      v1964 = __ldaxr(v1962);
    while (__stlxr(v1964 - 1, v1962));
    if (!v1964)
    {
      ((void (*)(std::__shared_weak_count *))v1960->__on_zero_shared)(v1960);
      std::__shared_weak_count::__release_weak(v1961);
    }
    v1965 = *(_QWORD *)v2211;
    v1966 = _os_log_pack_fill();
    *(_DWORD *)v1966 = 134217984;
    *(double *)(v1966 + 4) = (double)(v1942.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
    v1967 = (char *)operator new();
    v1968 = *(unsigned __int8 *)(v1943 + 39);
    v1969 = v2176;
    if ((v1968 & 0x80u) != 0)
    {
      v1969 = *(const char **)(v1943 + 16);
      v1968 = *(_QWORD *)(v1943 + 24);
    }
    *(_QWORD *)v1967 = v1965;
    *(_OWORD *)(v1967 + 8) = *(_OWORD *)&v2211[8];
    *(_QWORD *)&v2211[8] = 0;
    *(_QWORD *)&v2211[16] = 0;
    *(_OWORD *)(v1967 + 24) = *(_OWORD *)&v2211[24];
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    *((_QWORD *)v1967 + 5) = v1969;
    *((_QWORD *)v1967 + 6) = v1968;
    v1967[56] = 1;
    v2210 = 0;
    v2207[0] = v1967;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1888 + 24) + 40))(*(_QWORD *)(v1888 + 24), v2207);
    v1970 = v2207[0];
    v2207[0] = 0;
    a2 = v2153;
    if (v1970)
    {
      v1971 = (std::__shared_weak_count *)*((_QWORD *)v1970 + 4);
      if (v1971)
      {
        v1972 = (unint64_t *)&v1971->__shared_owners_;
        do
          v1973 = __ldaxr(v1972);
        while (__stlxr(v1973 - 1, v1972));
        if (!v1973)
        {
          ((void (*)(std::__shared_weak_count *))v1971->__on_zero_shared)(v1971);
          std::__shared_weak_count::__release_weak(v1971);
        }
      }
      v1974 = (std::__shared_weak_count *)*((_QWORD *)v1970 + 2);
      if (v1974)
      {
        v1975 = (unint64_t *)&v1974->__shared_owners_;
        do
          v1976 = __ldaxr(v1975);
        while (__stlxr(v1976 - 1, v1975));
        if (!v1976)
        {
          ((void (*)(std::__shared_weak_count *))v1974->__on_zero_shared)(v1974);
          std::__shared_weak_count::__release_weak(v1974);
        }
      }
      MEMORY[0x212BC6398](v1970, 0x10F0C40B62ED6C6);
      v1977 = v2210;
      v2210 = 0;
      if (v1977)
      {
        v1978 = *(std::__shared_weak_count **)(v1977 + 32);
        if (v1978)
        {
          v1979 = (unint64_t *)&v1978->__shared_owners_;
          do
            v1980 = __ldaxr(v1979);
          while (__stlxr(v1980 - 1, v1979));
          if (!v1980)
          {
            ((void (*)(std::__shared_weak_count *))v1978->__on_zero_shared)(v1978);
            std::__shared_weak_count::__release_weak(v1978);
          }
        }
        v1981 = *(std::__shared_weak_count **)(v1977 + 16);
        if (v1981)
        {
          v1982 = (unint64_t *)&v1981->__shared_owners_;
          do
            v1983 = __ldaxr(v1982);
          while (__stlxr(v1983 - 1, v1982));
          if (!v1983)
          {
            ((void (*)(std::__shared_weak_count *))v1981->__on_zero_shared)(v1981);
            std::__shared_weak_count::__release_weak(v1981);
          }
        }
        MEMORY[0x212BC6398](v1977, 0x10F0C40B62ED6C6);
      }
    }
    v1984 = *(std::__shared_weak_count **)&v2211[32];
    if (*(_QWORD *)&v2211[32])
    {
      v1985 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
      do
        v1986 = __ldaxr(v1985);
      while (__stlxr(v1986 - 1, v1985));
      if (!v1986)
      {
        ((void (*)(std::__shared_weak_count *))v1984->__on_zero_shared)(v1984);
        std::__shared_weak_count::__release_weak(v1984);
      }
    }
    v1987 = *(std::__shared_weak_count **)&v2211[16];
    if (*(_QWORD *)&v2211[16])
    {
      v1988 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
      do
        v1989 = __ldaxr(v1988);
      while (__stlxr(v1989 - 1, v1988));
      if (!v1989)
      {
        ((void (*)(std::__shared_weak_count *))v1987->__on_zero_shared)(v1987);
        std::__shared_weak_count::__release_weak(v1987);
      }
    }
  }
  else
  {
    os_log_type_enabled(v1957, OS_LOG_TYPE_INFO);
    *(_DWORD *)v2211 = 134217984;
    *(double *)&v2211[4] = (double)(v1942.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
    v1990 = (void *)_os_log_send_and_compose_impl();
    if (v1990)
      free(v1990);
  }
  if (v1886)
  {
    v1991.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v1991.__d_.__rep_ - v1942.__d_.__rep_) / 1000000000.0);
    sub_20E863570((uint64_t)&v2185);
  }
  else
  {
    v1991.__d_.__rep_ = v1942.__d_.__rep_;
  }
  sub_20E863570((uint64_t)&v2185);
  v1992 = v2193;
  if (!v2193)
    goto LABEL_3372;
  v1993 = (unint64_t *)&v2193->__shared_owners_;
  do
    v1994 = __ldaxr(v1993);
  while (__stlxr(v1994 - 1, v1993));
  if (!v1994)
  {
    ((void (*)(std::__shared_weak_count *))v1992->__on_zero_shared)(v1992);
    std::__shared_weak_count::__release_weak(v1992);
    v2147.__d_.__rep_ = v1991.__d_.__rep_;
    if (!*(_BYTE *)(a5 + 2))
      goto LABEL_3273;
  }
  else
  {
LABEL_3372:
    v2147.__d_.__rep_ = v1991.__d_.__rep_;
    if (!*(_BYTE *)(a5 + 2))
      goto LABEL_3273;
  }
LABEL_3226:
  memset(v2211, 0, 24);
  v1889 = (uint64_t *)a2[5];
  v2151 = (uint64_t *)a2[6];
  if (v1889 == v2151)
    goto LABEL_3273;
  do
  {
    v1890 = *(void **)*v1889;
    v2175 = *(_QWORD *)(*v1889 + 8);
    v1891 = *(_DWORD *)(*v1889 + 16);
    v1892 = *(void **)v2211;
    *(_QWORD *)&v2211[8] = *(_QWORD *)v2211;
    v1893 = a2[1];
    v1894 = *(_QWORD *)(v1893 + 16);
    if (v1894 > (uint64_t)(*(_QWORD *)&v2211[16] - *(_QWORD *)v2211) >> 3)
    {
      if (v1894 >> 61)
        sub_20E867F44();
      *(_QWORD *)v2211 = operator new(8 * v1894);
      *(_QWORD *)&v2211[8] = *(_QWORD *)v2211;
      *(_QWORD *)&v2211[16] = *(_QWORD *)v2211 + 8 * v1894;
      if (v1892)
      {
        operator delete(v1892);
        v1893 = a2[1];
      }
    }
    v2185 = v1890;
    rep = v2175;
    LODWORD(v2187) = v1891;
    if (sub_20E9DF85C((_QWORD *)(v1893 + 24), (uint64_t *)&v2185))
    {
      v1895 = (_QWORD *)sub_20E9DF85C((_QWORD *)(v1893 + 24), (uint64_t *)&v2185)[7];
      if (v1895)
      {
        v1896 = v2175;
        while (1)
        {
          v1898 = v1895[3];
          if (!*(_BYTE *)(v1898 + 528))
            goto LABEL_3236;
          v1899 = *(_QWORD *)(v1898 + 536);
          v1900 = *(_QWORD *)(v1898 + 544) - v1899;
          if (v1900)
          {
            v1901 = v1900 >> 5;
            while (1)
            {
              v1902 = v1901 >> 1;
              v1903 = v1899 + 32 * (v1901 >> 1);
              v1904 = *(_DWORD *)(v1903 + 16);
              _CF = v1904 >= v1891;
              if (v1904 != v1891)
                goto LABEL_3246;
              if (*(_QWORD *)v1903 >= (unint64_t)v1890)
                break;
LABEL_3240:
              v1899 = v1903 + 32;
              v1902 = v1901 + ~v1902;
LABEL_3241:
              v1901 = v1902;
              if (!v1902)
                goto LABEL_3249;
            }
            if (*(void **)v1903 != v1890)
              goto LABEL_3241;
            _CF = *(_DWORD *)(v1903 + 8) >= v1896;
LABEL_3246:
            if (_CF)
              goto LABEL_3241;
            goto LABEL_3240;
          }
LABEL_3249:
          v1906 = *(unsigned int *)(*(_QWORD *)(v1899 + 24) + 4);
          v1907 = *(_BYTE **)&v2211[8];
          if (*(_QWORD *)&v2211[8] >= *(_QWORD *)&v2211[16])
            break;
          **(_QWORD **)&v2211[8] = v1906;
          v1897 = (uint64_t)(v1907 + 8);
LABEL_3235:
          *(_QWORD *)&v2211[8] = v1897;
LABEL_3236:
          v1895 = (_QWORD *)*v1895;
          if (!v1895)
            goto LABEL_3270;
        }
        v1908 = *(_BYTE **)v2211;
        v1909 = (uint64_t)(*(_QWORD *)&v2211[8] - *(_QWORD *)v2211) >> 3;
        v1910 = v1909 + 1;
        if ((unint64_t)(v1909 + 1) >> 61)
          sub_20E867F44();
        v1911 = *(_QWORD *)&v2211[16] - *(_QWORD *)v2211;
        if ((uint64_t)(*(_QWORD *)&v2211[16] - *(_QWORD *)v2211) >> 2 > v1910)
          v1910 = v1911 >> 2;
        if ((unint64_t)v1911 >= 0x7FFFFFFFFFFFFFF8)
          v1912 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v1912 = v1910;
        if (v1912)
        {
          if (v1912 >> 61)
            sub_20E877A38();
          v1913 = v1912;
          v1914 = operator new(8 * v1912);
          v1912 = v1913;
          v1915 = &v1914[8 * v1909];
          *v1915 = v1906;
          v1897 = (uint64_t)(v1915 + 1);
          v1916 = v1907 - v1908;
          if (v1907 == v1908)
            goto LABEL_3267;
        }
        else
        {
          v1914 = 0;
          v1915 = (_QWORD *)(8 * v1909);
          *(_QWORD *)(8 * v1909) = v1906;
          v1897 = 8 * v1909 + 8;
          v1916 = v1907 - v1908;
          if (v1907 == v1908)
          {
LABEL_3267:
            *(_QWORD *)v2211 = v1915;
            *(_QWORD *)&v2211[8] = v1897;
            *(_QWORD *)&v2211[16] = &v1914[8 * v1912];
            if (v1908)
              operator delete(v1908);
            a2 = v2153;
            v1896 = v2175;
            goto LABEL_3235;
          }
        }
        v1917 = v1916 - 8;
        if (v1917 < 0x58)
          goto LABEL_3787;
        if ((unint64_t)(v1908 - v1914) < 0x20)
          goto LABEL_3787;
        v1918 = (v1917 >> 3) + 1;
        v1919 = 8 * (v1918 & 0x3FFFFFFFFFFFFFFCLL);
        v1920 = &v1907[-v1919];
        v1915 = (_QWORD *)((char *)v1915 - v1919);
        v1921 = &v1914[8 * v1909 - 16];
        v1922 = (__int128 *)(v1907 - 16);
        v1923 = v1918 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v1924 = *v1922;
          *(v1921 - 1) = *(v1922 - 1);
          *v1921 = v1924;
          v1921 -= 2;
          v1922 -= 2;
          v1923 -= 4;
        }
        while (v1923);
        v1907 = v1920;
        if (v1918 != (v1918 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_3787:
          do
          {
            v1925 = *((_QWORD *)v1907 - 1);
            v1907 -= 8;
            *--v1915 = v1925;
          }
          while (v1907 != v1908);
        }
        goto LABEL_3267;
      }
    }
LABEL_3270:
    sub_20F25F4C0(*v1889, (int32x4_t **)v2211);
    sub_20F28C48C((int32x4_t **)(*v1889 + 552), *(int32x4_t **)v2211, *(int32x4_t **)&v2211[8], (uint64_t)(*(_QWORD *)&v2211[8] - *(_QWORD *)v2211) >> 3);
    v1889 += 2;
  }
  while (v1889 != v2151);
  a5 = v2152;
  if (*(_QWORD *)v2211)
  {
    *(_QWORD *)&v2211[8] = *(_QWORD *)v2211;
    operator delete(*(void **)v2211);
  }
LABEL_3273:
  if (*(_QWORD *)(a5 + 32) <= 1uLL && *(_BYTE *)(a5 + 8))
  {
    sub_20F34CD58(&v2180);
    if (**(int **)(v2180 + 56) > 3)
      goto LABEL_3543;
    v1926 = *(unsigned __int8 *)(v2180 + 72);
    v1927 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
    v1928 = v1927;
    if (!v1926 && !v1927)
      goto LABEL_3543;
    v2185 = &v2180;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v2187 = std::chrono::system_clock::now().__d_.__rep_;
    v2188 = 3;
    v2189 = "unknown file";
    v2190 = 1337;
    v2192 = 0;
    v2193 = 0;
    v2191 = "unknown function";
    v1929 = *(_QWORD *)v2185;
    v1930 = *(_QWORD *)v2185 + 16;
    if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
    {
      v1932 = *(const char **)(v1929 + 16);
      v1931 = *(_QWORD *)(v1929 + 24);
      v2040 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v2040 & 1) == 0)
      {
LABEL_3728:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v2211);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
          if (v2211[24] && (v2211[23] & 0x80000000) != 0)
            operator delete(*(void **)v2211);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
      }
    }
    else
    {
      v1931 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
      v1932 = (const char *)(*(_QWORD *)v2185 + 16);
      v1933 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v1933 & 1) == 0)
        goto LABEL_3728;
    }
    if (byte_254A4A4F8[23] >= 0)
      v2041 = byte_254A4A4F8;
    else
      v2041 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v2042 = byte_254A4A4F8[23];
    else
      v2042 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v2211 = os_log_create(v2041, v1932);
    v2043 = &v2211[8];
    if (v2042 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v2042 >= 0x17)
    {
      v2044 = (v2042 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v2042 | 7) != 0x17)
        v2044 = v2042 | 7;
      v2045 = v2044 + 1;
      v2043 = operator new(v2044 + 1);
      *(_QWORD *)&v2211[16] = v2042;
      *(_QWORD *)&v2211[24] = v2045 | 0x8000000000000000;
      *(_QWORD *)&v2211[8] = v2043;
    }
    else
    {
      v2211[31] = v2042;
      if (!v2042)
      {
LABEL_3473:
        v2043[v2042] = 0;
        v2211[32] = 1;
        v2046 = (void **)&v2212;
        if (v1931 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        a5 = v2152;
        if (v1931 >= 0x17)
        {
          v2047 = (v1931 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v1931 | 7) != 0x17)
            v2047 = v1931 | 7;
          v2048 = v2047 + 1;
          v2046 = (void **)operator new(v2047 + 1);
          v2213 = v1931;
          v2214 = v2048 | 0x8000000000000000;
          v2212 = v2046;
          a2 = v2153;
        }
        else
        {
          HIBYTE(v2214) = v1931;
          a2 = v2153;
          if (!v1931)
          {
LABEL_3481:
            *((_BYTE *)v2046 + v1931) = 0;
            v2215 = 1;
            v2049 = *(NSObject **)v2211;
            if (SHIBYTE(v2214) < 0)
              operator delete(v2212);
            if (v2211[32] && (v2211[31] & 0x80000000) != 0)
              operator delete(*(void **)&v2211[8]);
            if (*(_QWORD *)v2211)
              os_release(*(void **)v2211);
            if (v1928 && *(_QWORD *)(v1928 + 24))
            {
              v2050 = _os_log_pack_size();
              v2051 = (std::__shared_weak_count_vtbl *)operator new(v2050, (std::align_val_t)8uLL);
              v2052 = (std::__shared_weak_count *)operator new();
              v2053 = v2052;
              v2052->__shared_owners_ = 0;
              v2054 = (unint64_t *)&v2052->__shared_owners_;
              v2052->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v2052->__shared_weak_owners_ = 0;
              v2052[1].__vftable = v2051;
              *(_QWORD *)v2211 = v2051;
              *(_QWORD *)&v2211[8] = v2051;
              *(_QWORD *)&v2211[16] = v2052;
              do
                v2055 = __ldxr(v2054);
              while (__stxr(v2055 + 1, v2054));
              *(_QWORD *)&v2211[24] = 0;
              *(_QWORD *)&v2211[32] = 0;
              v2212 = 0;
              do
                v2056 = __ldaxr(v2054);
              while (__stlxr(v2056 - 1, v2054));
              if (!v2056)
              {
                ((void (*)(std::__shared_weak_count *))v2052->__on_zero_shared)(v2052);
                std::__shared_weak_count::__release_weak(v2053);
              }
              v2057 = *(_QWORD *)v2211;
              *(_WORD *)_os_log_pack_fill() = 0;
              v2058 = (char *)operator new();
              v2059 = *(unsigned __int8 *)(v1929 + 39);
              if ((v2059 & 0x80u) == 0)
                v2060 = v1930;
              else
                v2060 = *(_QWORD *)(v1929 + 16);
              if ((v2059 & 0x80u) != 0)
                v2059 = *(_QWORD *)(v1929 + 24);
              *(_QWORD *)v2058 = v2057;
              *(_OWORD *)(v2058 + 8) = *(_OWORD *)&v2211[8];
              *(_QWORD *)&v2211[8] = 0;
              *(_QWORD *)&v2211[16] = 0;
              *(_OWORD *)(v2058 + 24) = *(_OWORD *)&v2211[24];
              *(_QWORD *)&v2211[24] = 0;
              *(_QWORD *)&v2211[32] = 0;
              *((_QWORD *)v2058 + 5) = v2060;
              *((_QWORD *)v2058 + 6) = v2059;
              v2058[56] = 1;
              v2210 = 0;
              v2207[0] = v2058;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1928 + 24) + 40))(*(_QWORD *)(v1928 + 24), v2207);
              v2061 = v2207[0];
              v2207[0] = 0;
              if (v2061)
              {
                v2062 = (std::__shared_weak_count *)*((_QWORD *)v2061 + 4);
                if (v2062)
                {
                  v2063 = (unint64_t *)&v2062->__shared_owners_;
                  do
                    v2064 = __ldaxr(v2063);
                  while (__stlxr(v2064 - 1, v2063));
                  if (!v2064)
                  {
                    ((void (*)(std::__shared_weak_count *))v2062->__on_zero_shared)(v2062);
                    std::__shared_weak_count::__release_weak(v2062);
                  }
                }
                v2065 = (std::__shared_weak_count *)*((_QWORD *)v2061 + 2);
                if (v2065)
                {
                  v2066 = (unint64_t *)&v2065->__shared_owners_;
                  do
                    v2067 = __ldaxr(v2066);
                  while (__stlxr(v2067 - 1, v2066));
                  if (!v2067)
                  {
                    ((void (*)(std::__shared_weak_count *))v2065->__on_zero_shared)(v2065);
                    std::__shared_weak_count::__release_weak(v2065);
                  }
                }
                MEMORY[0x212BC6398](v2061, 0x10F0C40B62ED6C6);
                v2068 = v2210;
                v2210 = 0;
                if (v2068)
                {
                  v2069 = *(std::__shared_weak_count **)(v2068 + 32);
                  if (v2069)
                  {
                    v2070 = (unint64_t *)&v2069->__shared_owners_;
                    do
                      v2071 = __ldaxr(v2070);
                    while (__stlxr(v2071 - 1, v2070));
                    if (!v2071)
                    {
                      ((void (*)(std::__shared_weak_count *))v2069->__on_zero_shared)(v2069);
                      std::__shared_weak_count::__release_weak(v2069);
                    }
                  }
                  v2072 = *(std::__shared_weak_count **)(v2068 + 16);
                  if (v2072)
                  {
                    v2073 = (unint64_t *)&v2072->__shared_owners_;
                    do
                      v2074 = __ldaxr(v2073);
                    while (__stlxr(v2074 - 1, v2073));
                    if (!v2074)
                    {
                      ((void (*)(std::__shared_weak_count *))v2072->__on_zero_shared)(v2072);
                      std::__shared_weak_count::__release_weak(v2072);
                    }
                  }
                  MEMORY[0x212BC6398](v2068, 0x10F0C40B62ED6C6);
                }
              }
              v2075 = *(std::__shared_weak_count **)&v2211[32];
              if (*(_QWORD *)&v2211[32])
              {
                v2076 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                do
                  v2077 = __ldaxr(v2076);
                while (__stlxr(v2077 - 1, v2076));
                if (!v2077)
                {
                  ((void (*)(std::__shared_weak_count *))v2075->__on_zero_shared)(v2075);
                  std::__shared_weak_count::__release_weak(v2075);
                }
              }
              v2078 = *(std::__shared_weak_count **)&v2211[16];
              if (*(_QWORD *)&v2211[16])
              {
                v2079 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                do
                  v2080 = __ldaxr(v2079);
                while (__stlxr(v2080 - 1, v2079));
                if (!v2080)
                {
                  ((void (*)(std::__shared_weak_count *))v2078->__on_zero_shared)(v2078);
                  std::__shared_weak_count::__release_weak(v2078);
                }
              }
            }
            else
            {
              os_log_type_enabled(v2049, OS_LOG_TYPE_INFO);
              *(_WORD *)v2211 = 0;
              v2081 = (void *)_os_log_send_and_compose_impl();
              if (v2081)
                free(v2081);
            }
            if (v1926)
            {
              sub_20E8C003C((uint64_t)&v2185, "Compute track covariance");
              sub_20E863570((uint64_t)&v2185);
            }
            sub_20E863570((uint64_t)&v2185);
            v2082 = v2193;
            if (v2193)
            {
              v2083 = (unint64_t *)&v2193->__shared_owners_;
              do
                v2084 = __ldaxr(v2083);
              while (__stlxr(v2084 - 1, v2083));
              if (!v2084)
              {
                ((void (*)(std::__shared_weak_count *))v2082->__on_zero_shared)(v2082);
                std::__shared_weak_count::__release_weak(v2082);
              }
            }
LABEL_3543:
            sub_20F366120(a2, *(_BYTE *)(a5 + 9));
            sub_20F34CD58(&v2180);
            if (**(int **)(v2180 + 56) > 3)
              return;
            v2085 = *(unsigned __int8 *)(v2180 + 72);
            v2086 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
            v2087 = v2086;
            if (!v2085 && !v2086)
              return;
            v2185 = &v2180;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v2187 = std::chrono::system_clock::now().__d_.__rep_;
            v2188 = 3;
            v2189 = "unknown file";
            v2190 = 1341;
            v2192 = 0;
            v2193 = 0;
            v2191 = "unknown function";
            v2088.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            v2089 = *(_QWORD *)v2185;
            v2090 = *(_QWORD *)v2185 + 16;
            if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
            {
              v2092 = *(const char **)(v2089 + 16);
              v2091 = *(_QWORD *)(v2089 + 24);
              v2094 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v2094 & 1) == 0)
              {
LABEL_3736:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)v2211);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
                  if (v2211[24] && (v2211[23] & 0x80000000) != 0)
                    operator delete(*(void **)v2211);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v2091 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
              v2092 = (const char *)(*(_QWORD *)v2185 + 16);
              v2093 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v2093 & 1) == 0)
                goto LABEL_3736;
            }
            if (byte_254A4A4F8[23] >= 0)
              v2095 = byte_254A4A4F8;
            else
              v2095 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v2096 = byte_254A4A4F8[23];
            else
              v2096 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v2211 = os_log_create(v2095, v2092);
            v2097 = &v2211[8];
            if (v2096 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v2096 >= 0x17)
            {
              v2177 = v2092;
              v2098 = v2087;
              v2099 = v2089;
              v2100 = v2085;
              v2101 = v2090;
              v2102 = v2088.__d_.__rep_;
              v2103 = (v2096 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v2096 | 7) != 0x17)
                v2103 = v2096 | 7;
              v2104 = v2103 + 1;
              v2097 = operator new(v2103 + 1);
              *(_QWORD *)&v2211[16] = v2096;
              *(_QWORD *)&v2211[24] = v2104 | 0x8000000000000000;
              *(_QWORD *)&v2211[8] = v2097;
              v2088.__d_.__rep_ = v2102;
              v2090 = v2101;
              v2085 = v2100;
              v2089 = v2099;
              v2087 = v2098;
              v2092 = v2177;
            }
            else
            {
              v2211[31] = v2096;
              if (!v2096)
              {
LABEL_3564:
                v2097[v2096] = 0;
                v2211[32] = 1;
                v2105 = (void **)&v2212;
                if (v2091 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v2091 >= 0x17)
                {
                  v2106 = (v2091 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v2091 | 7) != 0x17)
                    v2106 = v2091 | 7;
                  v2107 = v2106 + 1;
                  v2105 = (void **)operator new(v2106 + 1);
                  v2213 = v2091;
                  v2214 = v2107 | 0x8000000000000000;
                  v2212 = v2105;
                }
                else
                {
                  HIBYTE(v2214) = v2091;
                  if (!v2091)
                  {
LABEL_3572:
                    *((_BYTE *)v2105 + v2091) = 0;
                    v2215 = 1;
                    v2108 = *(NSObject **)v2211;
                    if (SHIBYTE(v2214) < 0)
                      operator delete(v2212);
                    if (v2211[32] && (v2211[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v2211[8]);
                    if (*(_QWORD *)v2211)
                      os_release(*(void **)v2211);
                    if (v2087 && *(_QWORD *)(v2087 + 24))
                    {
                      v2109 = _os_log_pack_size();
                      v2110 = (std::__shared_weak_count_vtbl *)operator new(v2109, (std::align_val_t)8uLL);
                      v2111 = (std::__shared_weak_count *)operator new();
                      v2112 = v2111;
                      v2111->__shared_owners_ = 0;
                      v2113 = (unint64_t *)&v2111->__shared_owners_;
                      v2111->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v2111->__shared_weak_owners_ = 0;
                      v2111[1].__vftable = v2110;
                      *(_QWORD *)v2211 = v2110;
                      *(_QWORD *)&v2211[8] = v2110;
                      *(_QWORD *)&v2211[16] = v2111;
                      do
                        v2114 = __ldxr(v2113);
                      while (__stxr(v2114 + 1, v2113));
                      *(_QWORD *)&v2211[24] = 0;
                      *(_QWORD *)&v2211[32] = 0;
                      v2212 = 0;
                      do
                        v2115 = __ldaxr(v2113);
                      while (__stlxr(v2115 - 1, v2113));
                      if (!v2115)
                      {
                        ((void (*)(std::__shared_weak_count *))v2111->__on_zero_shared)(v2111);
                        std::__shared_weak_count::__release_weak(v2112);
                      }
                      v2116 = *(_QWORD *)v2211;
                      v2117 = _os_log_pack_fill();
                      *(_DWORD *)v2117 = 134217984;
                      *(double *)(v2117 + 4) = (double)(v2088.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
                      v2118 = (char *)operator new();
                      v2119 = *(unsigned __int8 *)(v2089 + 39);
                      if ((v2119 & 0x80u) == 0)
                        v2120 = v2090;
                      else
                        v2120 = *(_QWORD *)(v2089 + 16);
                      if ((v2119 & 0x80u) != 0)
                        v2119 = *(_QWORD *)(v2089 + 24);
                      *(_QWORD *)v2118 = v2116;
                      *(_OWORD *)(v2118 + 8) = *(_OWORD *)&v2211[8];
                      *(_QWORD *)&v2211[8] = 0;
                      *(_QWORD *)&v2211[16] = 0;
                      *(_OWORD *)(v2118 + 24) = *(_OWORD *)&v2211[24];
                      *(_QWORD *)&v2211[24] = 0;
                      *(_QWORD *)&v2211[32] = 0;
                      *((_QWORD *)v2118 + 5) = v2120;
                      *((_QWORD *)v2118 + 6) = v2119;
                      v2118[56] = 1;
                      v2210 = 0;
                      v2207[0] = v2118;
                      (*(void (**)(_QWORD, void **))(**(_QWORD **)(v2087 + 24) + 40))(*(_QWORD *)(v2087 + 24), v2207);
                      v2121 = v2207[0];
                      v2207[0] = 0;
                      if (v2121)
                      {
                        v2122 = (std::__shared_weak_count *)*((_QWORD *)v2121 + 4);
                        if (v2122)
                        {
                          v2123 = (unint64_t *)&v2122->__shared_owners_;
                          do
                            v2124 = __ldaxr(v2123);
                          while (__stlxr(v2124 - 1, v2123));
                          if (!v2124)
                          {
                            ((void (*)(std::__shared_weak_count *))v2122->__on_zero_shared)(v2122);
                            std::__shared_weak_count::__release_weak(v2122);
                          }
                        }
                        v2125 = (std::__shared_weak_count *)*((_QWORD *)v2121 + 2);
                        if (v2125)
                        {
                          v2126 = (unint64_t *)&v2125->__shared_owners_;
                          do
                            v2127 = __ldaxr(v2126);
                          while (__stlxr(v2127 - 1, v2126));
                          if (!v2127)
                          {
                            ((void (*)(std::__shared_weak_count *))v2125->__on_zero_shared)(v2125);
                            std::__shared_weak_count::__release_weak(v2125);
                          }
                        }
                        MEMORY[0x212BC6398](v2121, 0x10F0C40B62ED6C6);
                        v2128 = v2210;
                        v2210 = 0;
                        if (v2128)
                        {
                          v2129 = *(std::__shared_weak_count **)(v2128 + 32);
                          if (v2129)
                          {
                            v2130 = (unint64_t *)&v2129->__shared_owners_;
                            do
                              v2131 = __ldaxr(v2130);
                            while (__stlxr(v2131 - 1, v2130));
                            if (!v2131)
                            {
                              ((void (*)(std::__shared_weak_count *))v2129->__on_zero_shared)(v2129);
                              std::__shared_weak_count::__release_weak(v2129);
                            }
                          }
                          v2132 = *(std::__shared_weak_count **)(v2128 + 16);
                          if (v2132)
                          {
                            v2133 = (unint64_t *)&v2132->__shared_owners_;
                            do
                              v2134 = __ldaxr(v2133);
                            while (__stlxr(v2134 - 1, v2133));
                            if (!v2134)
                            {
                              ((void (*)(std::__shared_weak_count *))v2132->__on_zero_shared)(v2132);
                              std::__shared_weak_count::__release_weak(v2132);
                            }
                          }
                          MEMORY[0x212BC6398](v2128, 0x10F0C40B62ED6C6);
                        }
                      }
                      v2135 = *(std::__shared_weak_count **)&v2211[32];
                      if (*(_QWORD *)&v2211[32])
                      {
                        v2136 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
                        do
                          v2137 = __ldaxr(v2136);
                        while (__stlxr(v2137 - 1, v2136));
                        if (!v2137)
                        {
                          ((void (*)(std::__shared_weak_count *))v2135->__on_zero_shared)(v2135);
                          std::__shared_weak_count::__release_weak(v2135);
                        }
                      }
                      v2138 = *(std::__shared_weak_count **)&v2211[16];
                      if (*(_QWORD *)&v2211[16])
                      {
                        v2139 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
                        do
                          v2140 = __ldaxr(v2139);
                        while (__stlxr(v2140 - 1, v2139));
                        if (!v2140)
                        {
                          ((void (*)(std::__shared_weak_count *))v2138->__on_zero_shared)(v2138);
                          std::__shared_weak_count::__release_weak(v2138);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v2108, OS_LOG_TYPE_INFO);
                      *(_DWORD *)v2211 = 134217984;
                      *(double *)&v2211[4] = (double)(v2088.__d_.__rep_ - v2147.__d_.__rep_) / 1000000000.0;
                      v2141 = (void *)_os_log_send_and_compose_impl();
                      if (v2141)
                        free(v2141);
                    }
                    if (v2085)
                    {
                      v2142.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                      sub_20E8C003C((uint64_t)&v2185, "  Done, it took %f", (double)(v2142.__d_.__rep_ - v2088.__d_.__rep_) / 1000000000.0);
                      sub_20E863570((uint64_t)&v2185);
                    }
                    sub_20E863570((uint64_t)&v2185);
                    v2037 = v2193;
                    if (v2193)
                    {
                      v2143 = (unint64_t *)&v2193->__shared_owners_;
                      do
                        v2039 = __ldaxr(v2143);
                      while (__stlxr(v2039 - 1, v2143));
LABEL_3632:
                      if (!v2039)
                      {
                        ((void (*)(std::__shared_weak_count *))v2037->__on_zero_shared)(v2037);
                        std::__shared_weak_count::__release_weak(v2037);
                      }
                    }
                    return;
                  }
                }
                memmove(v2105, v2092, v2091);
                goto LABEL_3572;
              }
            }
            memmove(v2097, v2095, v2096);
            goto LABEL_3564;
          }
        }
        memmove(v2046, v1932, v1931);
        goto LABEL_3481;
      }
    }
    memmove(v2043, v2041, v2042);
    goto LABEL_3473;
  }
  sub_20F34CD58(&v2180);
  if (**(int **)(v2180 + 56) > 3)
    return;
  v1934 = *(unsigned __int8 *)(v2180 + 72);
  v1935 = sub_20E8C31DC(v2180, "OSLogSurrogateAppender", 1, 0);
  v1936 = v1935;
  if (!v1934 && !v1935)
    return;
  v2185 = &v2180;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v2187 = std::chrono::system_clock::now().__d_.__rep_;
  v2188 = 3;
  v2189 = "unknown file";
  v2190 = 1343;
  v2192 = 0;
  v2193 = 0;
  v2191 = "unknown function";
  v1937 = *(_QWORD *)v2185;
  v1938 = *(_QWORD *)v2185 + 16;
  if (*(char *)(*(_QWORD *)v2185 + 39) < 0)
  {
    v1940 = *(const char **)(v1937 + 16);
    v1939 = *(_QWORD *)(v1937 + 24);
    v1995 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1995 & 1) == 0)
    {
LABEL_3722:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v2211);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v2211);
        if (v2211[24] && (v2211[23] & 0x80000000) != 0)
          operator delete(*(void **)v2211);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v1939 = *(unsigned __int8 *)(*(_QWORD *)v2185 + 39);
    v1940 = (const char *)(*(_QWORD *)v2185 + 16);
    v1941 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v1941 & 1) == 0)
      goto LABEL_3722;
  }
  if (byte_254A4A4F8[23] >= 0)
    v1996 = byte_254A4A4F8;
  else
    v1996 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v1997 = byte_254A4A4F8[23];
  else
    v1997 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v2211 = os_log_create(v1996, v1940);
  v1998 = &v2211[8];
  if (v1997 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1997 >= 0x17)
  {
    v1999 = (v1997 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1997 | 7) != 0x17)
      v1999 = v1997 | 7;
    v2000 = v1999 + 1;
    v1998 = operator new(v1999 + 1);
    *(_QWORD *)&v2211[16] = v1997;
    *(_QWORD *)&v2211[24] = v2000 | 0x8000000000000000;
    *(_QWORD *)&v2211[8] = v1998;
    goto LABEL_3388;
  }
  v2211[31] = v1997;
  if (v1997)
LABEL_3388:
    memmove(v1998, v1996, v1997);
  v1998[v1997] = 0;
  v2211[32] = 1;
  v2001 = (void **)&v2212;
  if (v1939 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v1939 >= 0x17)
  {
    v2002 = (v1939 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1939 | 7) != 0x17)
      v2002 = v1939 | 7;
    v2003 = v2002 + 1;
    v2001 = (void **)operator new(v2002 + 1);
    v2213 = v1939;
    v2214 = v2003 | 0x8000000000000000;
    v2212 = v2001;
    goto LABEL_3396;
  }
  HIBYTE(v2214) = v1939;
  if (v1939)
LABEL_3396:
    memmove(v2001, v1940, v1939);
  *((_BYTE *)v2001 + v1939) = 0;
  v2215 = 1;
  v2004 = *(NSObject **)v2211;
  if (SHIBYTE(v2214) < 0)
    operator delete(v2212);
  if (v2211[32] && (v2211[31] & 0x80000000) != 0)
    operator delete(*(void **)&v2211[8]);
  if (*(_QWORD *)v2211)
    os_release(*(void **)v2211);
  if (v1936 && *(_QWORD *)(v1936 + 24))
  {
    v2005 = _os_log_pack_size();
    v2006 = (std::__shared_weak_count_vtbl *)operator new(v2005, (std::align_val_t)8uLL);
    v2007 = (std::__shared_weak_count *)operator new();
    v2008 = v2007;
    v2007->__shared_owners_ = 0;
    v2009 = (unint64_t *)&v2007->__shared_owners_;
    v2007->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v2007->__shared_weak_owners_ = 0;
    v2007[1].__vftable = v2006;
    *(_QWORD *)v2211 = v2006;
    *(_QWORD *)&v2211[8] = v2006;
    *(_QWORD *)&v2211[16] = v2007;
    do
      v2010 = __ldxr(v2009);
    while (__stxr(v2010 + 1, v2009));
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    v2212 = 0;
    do
      v2011 = __ldaxr(v2009);
    while (__stlxr(v2011 - 1, v2009));
    if (!v2011)
    {
      ((void (*)(std::__shared_weak_count *))v2007->__on_zero_shared)(v2007);
      std::__shared_weak_count::__release_weak(v2008);
    }
    v2012 = *(_QWORD *)v2211;
    *(_WORD *)_os_log_pack_fill() = 0;
    v2013 = (char *)operator new();
    v2014 = *(unsigned __int8 *)(v1937 + 39);
    if ((v2014 & 0x80u) == 0)
      v2015 = v1938;
    else
      v2015 = *(_QWORD *)(v1937 + 16);
    if ((v2014 & 0x80u) != 0)
      v2014 = *(_QWORD *)(v1937 + 24);
    *(_QWORD *)v2013 = v2012;
    *(_OWORD *)(v2013 + 8) = *(_OWORD *)&v2211[8];
    *(_QWORD *)&v2211[8] = 0;
    *(_QWORD *)&v2211[16] = 0;
    *(_OWORD *)(v2013 + 24) = *(_OWORD *)&v2211[24];
    *(_QWORD *)&v2211[24] = 0;
    *(_QWORD *)&v2211[32] = 0;
    *((_QWORD *)v2013 + 5) = v2015;
    *((_QWORD *)v2013 + 6) = v2014;
    v2013[56] = 1;
    v2210 = 0;
    v2207[0] = v2013;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v1936 + 24) + 40))(*(_QWORD *)(v1936 + 24), v2207);
    v2016 = v2207[0];
    v2207[0] = 0;
    if (v2016)
    {
      v2017 = (std::__shared_weak_count *)*((_QWORD *)v2016 + 4);
      if (v2017)
      {
        v2018 = (unint64_t *)&v2017->__shared_owners_;
        do
          v2019 = __ldaxr(v2018);
        while (__stlxr(v2019 - 1, v2018));
        if (!v2019)
        {
          ((void (*)(std::__shared_weak_count *))v2017->__on_zero_shared)(v2017);
          std::__shared_weak_count::__release_weak(v2017);
        }
      }
      v2020 = (std::__shared_weak_count *)*((_QWORD *)v2016 + 2);
      if (v2020)
      {
        v2021 = (unint64_t *)&v2020->__shared_owners_;
        do
          v2022 = __ldaxr(v2021);
        while (__stlxr(v2022 - 1, v2021));
        if (!v2022)
        {
          ((void (*)(std::__shared_weak_count *))v2020->__on_zero_shared)(v2020);
          std::__shared_weak_count::__release_weak(v2020);
        }
      }
      MEMORY[0x212BC6398](v2016, 0x10F0C40B62ED6C6);
      v2023 = v2210;
      v2210 = 0;
      if (v2023)
      {
        v2024 = *(std::__shared_weak_count **)(v2023 + 32);
        if (v2024)
        {
          v2025 = (unint64_t *)&v2024->__shared_owners_;
          do
            v2026 = __ldaxr(v2025);
          while (__stlxr(v2026 - 1, v2025));
          if (!v2026)
          {
            ((void (*)(std::__shared_weak_count *))v2024->__on_zero_shared)(v2024);
            std::__shared_weak_count::__release_weak(v2024);
          }
        }
        v2027 = *(std::__shared_weak_count **)(v2023 + 16);
        if (v2027)
        {
          v2028 = (unint64_t *)&v2027->__shared_owners_;
          do
            v2029 = __ldaxr(v2028);
          while (__stlxr(v2029 - 1, v2028));
          if (!v2029)
          {
            ((void (*)(std::__shared_weak_count *))v2027->__on_zero_shared)(v2027);
            std::__shared_weak_count::__release_weak(v2027);
          }
        }
        MEMORY[0x212BC6398](v2023, 0x10F0C40B62ED6C6);
      }
    }
    v2030 = *(std::__shared_weak_count **)&v2211[32];
    if (*(_QWORD *)&v2211[32])
    {
      v2031 = (unint64_t *)(*(_QWORD *)&v2211[32] + 8);
      do
        v2032 = __ldaxr(v2031);
      while (__stlxr(v2032 - 1, v2031));
      if (!v2032)
      {
        ((void (*)(std::__shared_weak_count *))v2030->__on_zero_shared)(v2030);
        std::__shared_weak_count::__release_weak(v2030);
      }
    }
    v2033 = *(std::__shared_weak_count **)&v2211[16];
    if (*(_QWORD *)&v2211[16])
    {
      v2034 = (unint64_t *)(*(_QWORD *)&v2211[16] + 8);
      do
        v2035 = __ldaxr(v2034);
      while (__stlxr(v2035 - 1, v2034));
      if (!v2035)
      {
        ((void (*)(std::__shared_weak_count *))v2033->__on_zero_shared)(v2033);
        std::__shared_weak_count::__release_weak(v2033);
      }
    }
  }
  else
  {
    os_log_type_enabled(v2004, OS_LOG_TYPE_INFO);
    *(_WORD *)v2211 = 0;
    v2036 = (void *)_os_log_send_and_compose_impl();
    if (v2036)
      free(v2036);
  }
  if (v1934)
  {
    sub_20E8C003C((uint64_t)&v2185, "Track covariance skipped in mode 2.");
    sub_20E863570((uint64_t)&v2185);
  }
  sub_20E863570((uint64_t)&v2185);
  v2037 = v2193;
  if (v2193)
  {
    v2038 = (unint64_t *)&v2193->__shared_owners_;
    do
      v2039 = __ldaxr(v2038);
    while (__stlxr(v2039 - 1, v2038));
    goto LABEL_3632;
  }
}

void sub_20F35F468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  if (*(_BYTE *)(v49 - 184))
  {
    if (*(char *)(v49 - 185) < 0)
      operator delete(*(void **)(v49 - 208));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F35F624()
{
  JUMPOUT(0x20F35F608);
}

void sub_20F35F62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_20E86E8C4((uint64_t *)(v49 - 248));
  sub_20E86E8C4((uint64_t *)(v49 - 216));
  sub_20E86E658(v49 - 208);
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360284(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F36028C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360294(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F36029C()
{
  JUMPOUT(0x20F3603A8);
}

void sub_20F3602A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3602B0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F360274);
}

void sub_20F3602B8()
{
  JUMPOUT(0x20F360460);
}

void sub_20F3602C0()
{
  JUMPOUT(0x20F3602F8);
}

void sub_20F3602C8()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F360274);
}

void sub_20F3602D4()
{
  JUMPOUT(0x20F3602E4);
}

void sub_20F360308(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360310()
{
  JUMPOUT(0x20F360320);
}

void sub_20F360338()
{
  JUMPOUT(0x20F360348);
}

void sub_20F360360(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F36037C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360384()
{
  JUMPOUT(0x20F360394);
}

void sub_20F3603B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3603C0()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F360274);
}

void sub_20F3603E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3603E8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3603F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3603FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360408()
{
  JUMPOUT(0x20F360418);
}

void sub_20F360430()
{
  uint64_t v0;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x20F360918);
}

void sub_20F36043C()
{
  JUMPOUT(0x20F36044CLL);
}

void sub_20F360470(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360478()
{
  uint64_t v0;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x20F3608FCLL);
}

void sub_20F360498(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3604A0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3604A8()
{
  JUMPOUT(0x20F3604B8);
}

void sub_20F3604D0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3604D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F3604EC()
{
  JUMPOUT(0x20F3604FCLL);
}

void sub_20F360528(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360530(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F36054C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360554()
{
  JUMPOUT(0x20F3606F0);
}

void sub_20F36055C()
{
  JUMPOUT(0x20F36056CLL);
}

void sub_20F360598(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3605A0()
{
  JUMPOUT(0x20F3605B0);
}

void sub_20F3605C8()
{
  JUMPOUT(0x20F3605D8);
}

void sub_20F360604(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F36060C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360614(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F36061C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F36064C()
{
  JUMPOUT(0x20F36065CLL);
}

void sub_20F360688(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3606A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3606AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3606B4()
{
  JUMPOUT(0x20F36072CLL);
}

void sub_20F3606BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3606C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3606CC()
{
  JUMPOUT(0x20F3606DCLL);
}

void sub_20F360700(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360708()
{
  JUMPOUT(0x20F360718);
}

void sub_20F36073C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360744(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F36074C()
{
  JUMPOUT(0x20F3607C4);
}

void sub_20F360754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360790(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360798(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3607A0()
{
  JUMPOUT(0x20F3607B0);
}

void sub_20F3607D4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3607DC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3607E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F3607F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F36080C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F36085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360898(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3608A0()
{
  JUMPOUT(0x20F3608B0);
}

void sub_20F3608C8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F3608D0()
{
  JUMPOUT(0x20F3608E0);
}

void sub_20F3608F8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F360274);
}

void sub_20F36090C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360914()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F360274);
}

void sub_20F360928(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F36093C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F360274);
}

void sub_20F360944(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F36094C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F360954()
{
  JUMPOUT(0x20F360964);
}

void sub_20F360988(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    sub_20F360AC8(a1);
  sub_20E860DA4(a1);
}

void sub_20F36099C()
{
  JUMPOUT(0x20F3609ACLL);
}

void sub_20F3609E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F3609FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F360ACCLL);
}

void sub_20F360A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20E863714((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20F360A68(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F360ACCLL);
}

void sub_20F360A8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(_QWORD *)(v1 - 200) = v3;
    operator delete(v3);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20F360ACCLL);
}

void sub_20F360AC8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_20F360AD4(uint64_t a1, int8x8_t **a2)
{
  int8x8_t **v2;
  int8x8_t *v3;
  int8x8_t *v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  int8x8_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  double *v33;
  double v35;
  float64x2_t v36;
  float64x2_t v38;
  double v43;
  double v45;
  float64x2_t v47;
  int v49;
  float64x2_t v50;
  float32x2_t *v51;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  double *v62;
  double *v63;
  int64_t v64;
  unint64_t v65;
  double *v66;
  uint64_t v67;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  double *v74;
  uint64_t v75;
  __int128 v76;
  int8x8_t *v77;
  int8x8_t *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  size_t v83;
  char *p_dst;
  unint64_t v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  size_t v92;
  const char *v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  size_t v108;
  size_t v109;
  _QWORD *v110;
  void *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char v116;
  _QWORD *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *p_shared_owners;
  unint64_t v121;
  char *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  const char *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  size_t v167;
  char *v168;
  unint64_t v169;
  const void *v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  size_t v176;
  const char *v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  const char *v180;
  size_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  NSObject *v186;
  uint64_t v187;
  uint64_t v188;
  size_t v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  size_t v192;
  size_t v193;
  _QWORD *v194;
  void *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char v200;
  _QWORD *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  char *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  _QWORD *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  const char *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  int8x8_t *v247;
  int8x8_t *v248;
  int8x8_t *v249;
  int8x8_t *v250;
  int8x8_t v251;
  unint64_t v252;
  uint64_t *v253;
  uint64_t **v254;
  uint64_t **v255;
  unint64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  int8x8_t *v259;
  int8x8_t *v260;
  _QWORD *v261;
  int v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v266;
  size_t v267;
  const char *v268;
  unsigned __int8 v269;
  unsigned __int8 v270;
  const char *v271;
  size_t v272;
  _BYTE *v273;
  uint64_t v274;
  uint64_t v275;
  _BYTE *v276;
  NSObject *v277;
  uint64_t v278;
  uint64_t v279;
  size_t v280;
  std::__shared_weak_count_vtbl *v281;
  std::__shared_weak_count *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  __int128 v295;
  void *v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  _QWORD *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  int v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  _QWORD *v323;
  _OWORD *v324;
  int v325;
  unint64_t v326;
  unint64_t v327;
  double v329;
  double v330;
  double *v331;
  double v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  size_t v336;
  const char *v337;
  unsigned __int8 v338;
  unsigned __int8 v339;
  const char *v340;
  size_t v341;
  _BYTE *v342;
  uint64_t v343;
  uint64_t v344;
  _BYTE *v345;
  NSObject *v346;
  uint64_t v347;
  uint64_t v348;
  double v349;
  double v350;
  size_t v351;
  std::__shared_weak_count_vtbl *v352;
  std::__shared_weak_count *v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  void *v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  _QWORD *v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  void *v385;
  double v386;
  double v387;
  unint64_t v388;
  double *v389;
  double v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  int8x8_t *v394;
  uint64_t v396;
  int64x2_t v397;
  int8x16_t v398;
  float64_t v399;
  double v400;
  int v401;
  int64x2_t v403;
  double *v404;
  uint64_t v405;
  unint64_t v406;
  unint64_t v407;
  int v408;
  int v409;
  int v410;
  int v411;
  void *v412;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v414;
  int v415;
  const char *v416;
  int v417;
  const char *v418;
  uint64_t v419;
  std::__shared_weak_count *v420;
  char *__dst;
  size_t v422;
  int64_t v423;
  uint64_t v424;
  __int128 v425;
  std::__shared_weak_count *v426;
  char *v427;
  std::__shared_weak_count *v428;
  _QWORD *v429;
  __int128 v430;
  _BYTE object[24];
  _BYTE v432[24];
  size_t v433;
  unint64_t v434;
  const void *v435;
  unint64_t v436;
  void *__p;
  char v438;
  unint64_t v439;
  int v440;
  _BYTE v441[160];
  _BYTE v442[24];
  __int128 v443;
  char *v444;
  const char *v445;
  unint64_t v446;
  std::__shared_weak_count *v447;
  _QWORD v448[5];

  v2 = a2;
  v448[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = a2[1];
  v4 = (int8x8_t *)*v3;
  v394 = v3 + 1;
  if ((int8x8_t *)*v3 == &v3[1])
  {
    v406 = 0;
    v407 = 0;
    v7 = 0.0;
    v8 = 0.0;
    goto LABEL_80;
  }
  v406 = 0;
  v407 = 0;
  v5 = 0;
  v404 = 0;
  v6 = 0;
  v403 = 0u;
  v397 = vdupq_n_s64(1uLL);
  v398 = (int8x16_t)vdupq_n_s64(0x12CuLL);
  v7 = 0.0;
  v8 = 0.0;
  while (2)
  {
    v9 = v4[6];
    if (!*(_BYTE *)(*(_QWORD *)&v9 + 528))
      goto LABEL_73;
    v10 = *(uint64_t **)(*(_QWORD *)&v9 + 536);
    v11 = *(uint64_t **)(*(_QWORD *)&v9 + 544);
    if (v10 == v11)
      goto LABEL_73;
    v12 = *(_QWORD *)(*(_QWORD *)&v9 + 72);
    v13 = *(_DWORD *)(*(_QWORD *)&v9 + 80);
    v14 = *(_DWORD *)(*(_QWORD *)&v9 + 88);
    v408 = v14;
    v396 = v12;
    v401 = v13;
    while (2)
    {
      v15 = *v10;
      v16 = *((_DWORD *)v10 + 2);
      v17 = *((_DWORD *)v10 + 4);
      _ZF = v17 == v14 && v15 == v12;
      if (_ZF && v16 == v13)
        goto LABEL_8;
      v20 = (*v2)[224];
      if (!*(_QWORD *)&v20)
        goto LABEL_163;
      v21 = v16 ^ __ROR4__(v17, 13);
      v22 = (uint8x8_t)vcnt_s8(v20);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.u32[0] > 1uLL)
      {
        v23 = v21;
        if (*(_QWORD *)&v20 <= v21)
          v23 = v21 % *(_QWORD *)&v20;
      }
      else
      {
        v23 = (v20.i32[0] - 1) & v21;
      }
      v24 = *(uint64_t ***)(*(_QWORD *)&(*v2)[223] + 8 * v23);
      if (!v24 || (v25 = *v24) == 0)
      {
LABEL_163:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 1048, (uint64_t)"pose_ref", 8, (uint64_t)"No pose ref found", 17, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v22.u32[0] < 2uLL)
      {
        v26 = *(_QWORD *)&v20 - 1;
        while (1)
        {
          v28 = v25[1];
          if (v28 == v21)
          {
            if (*((_DWORD *)v25 + 8) == v17 && v25[2] == v15 && *((_DWORD *)v25 + 6) == v16)
              goto LABEL_40;
          }
          else if ((v28 & v26) != v23)
          {
            goto LABEL_163;
          }
          v25 = (uint64_t *)*v25;
          if (!v25)
            goto LABEL_163;
        }
      }
      while (1)
      {
        v27 = v25[1];
        if (v27 == v21)
          break;
        if (v27 >= *(_QWORD *)&v20)
          v27 %= *(_QWORD *)&v20;
        if (v27 != v23)
          goto LABEL_163;
LABEL_26:
        v25 = (uint64_t *)*v25;
        if (!v25)
          goto LABEL_163;
      }
      if (*((_DWORD *)v25 + 8) != v17 || v25[2] != v15 || *((_DWORD *)v25 + 6) != v16)
        goto LABEL_26;
LABEL_40:
      v29 = v25[13];
      v30 = v25[5];
      v31 = (double *)v25[7];
      v32 = v25[9];
      v33 = (double *)v25[11];
      _D1 = *(double *)(*(_QWORD *)&v9 + 56) - v31[1];
      v35 = *(double *)(*(_QWORD *)&v9 + 64) - v31[2];
      v36.f64[0] = *(float64_t *)(v30 + 16);
      _Q7 = *(_OWORD *)(v30 + 48);
      v36.f64[1] = *(float64_t *)(v30 + 40);
      v38 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v30, *(int64x2_t *)(v30 + 24)), *(double *)(*(_QWORD *)&v9 + 48) - *v31), (float64x2_t)vzip2q_s64(*(int64x2_t *)v30, *(int64x2_t *)(v30 + 24)), _D1), v36, v35);
      __asm { FMLA            D0, D1, V7.D[1] }
      v43 = _D0 + *(double *)(v30 + 64) * v35;
      _D2 = v38.f64[1] - v33[1];
      v45 = v43 - v33[2];
      v36.f64[0] = *(float64_t *)(v32 + 16);
      _Q7 = *(_OWORD *)(v32 + 48);
      v36.f64[1] = *(float64_t *)(v32 + 40);
      v47 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v32, *(int64x2_t *)(v32 + 24)), v38.f64[0] - *v33), (float64x2_t)vzip2q_s64(*(int64x2_t *)v32, *(int64x2_t *)(v32 + 24)), _D2), v36, v45);
      __asm { FMLA            D1, D2, V7.D[1] }
      *(double *)&object[16] = _D1 + *(double *)(v32 + 64) * v45;
      *(float64x2_t *)object = v47;
      if (!sub_20FCF1564(v29, (float64x2_t *)object, (uint64_t)v442))
      {
        v14 = v408;
        goto LABEL_8;
      }
      v49 = *(_DWORD *)(v29 + 992);
      if (v49 != -1)
        goto LABEL_44;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102BBDAE, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_602:
        abort();
      }
      v49 = *(_DWORD *)(v29 + 992);
LABEL_44:
      if (!v49)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102BBDAE, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        goto LABEL_602;
      }
      v50.f64[0] = *(double *)(v29 + 16) + *(double *)v29 * *(double *)v442 + *(double *)(v29 + 8) * *(double *)&v442[8];
      v50.f64[1] = *(double *)&v442[8] * *(double *)(v29 + 32) + *(double *)(v29 + 40);
      v51 = (float32x2_t *)v10[3];
      _Q3 = vsubq_f64(v50, vcvtq_f64_f32(v51[1]));
      _D1 = vdivq_f64(_Q3, (float64x2_t)vdupq_lane_s64(COERCE__INT64((float)v51[32]), 0)).f64[1];
      __asm { FMLA            D4, D1, V0.D[1] }
      if (v6 < v404)
      {
        *v6++ = _D4;
        v55 = v407;
        goto LABEL_62;
      }
      v56 = (char *)v6 - (char *)v5;
      v57 = v6 - v5;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 61)
        sub_20E867F44();
      v59 = v11;
      if (((char *)v404 - (char *)v5) >> 2 > v58)
        v58 = ((char *)v404 - (char *)v5) >> 2;
      if ((unint64_t)((char *)v404 - (char *)v5) >= 0x7FFFFFFFFFFFFFF8)
        v60 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      v399 = _Q3.f64[1];
      v400 = _D4;
      if (v60)
      {
        if (v60 >> 61)
          sub_20E877A38();
        v61 = (char *)operator new(8 * v60);
        v62 = v6;
        _Q3.f64[1] = v399;
        _D4 = v400;
        v63 = (double *)&v61[8 * v57];
        *v63 = v400;
        v6 = v63 + 1;
        v64 = (char *)v62 - (char *)v5;
        if (v62 != v5)
        {
LABEL_56:
          v65 = v64 - 8;
          if (v65 < 0x168
            || (v70 = ((char *)(v62 - 1) - (char *)v5) & 0xFFFFFFFFFFFFFFF8, &v61[v56 - 8 - v70] > &v61[v56 - 8])
            || (double *)((char *)v62 - v70 - 8) > v62 - 1
            || (unint64_t)((char *)v62 - v61 - v56) < 0x20)
          {
            v66 = v62;
            v55 = v407;
            v2 = a2;
          }
          else
          {
            v71 = (v65 >> 3) + 1;
            v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
            v66 = &v62[v72 / 0xFFFFFFFFFFFFFFF8];
            v63 = (double *)((char *)v63 - v72);
            v73 = &v61[8 * v57 - 16];
            v74 = v62 - 2;
            v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
            v2 = a2;
            do
            {
              v76 = *(_OWORD *)v74;
              *((_OWORD *)v73 - 1) = *((_OWORD *)v74 - 1);
              *(_OWORD *)v73 = v76;
              v73 -= 32;
              v74 -= 4;
              v75 -= 4;
            }
            while (v75);
            v55 = v407;
            if (v71 == (v71 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_59:
              *(_QWORD *)a1 = v63;
              *(_QWORD *)(a1 + 8) = v6;
              v404 = (double *)&v61[8 * v60];
              *(_QWORD *)(a1 + 16) = v404;
              if (v5)
                goto LABEL_60;
              goto LABEL_61;
            }
          }
          do
          {
            v67 = *((_QWORD *)v66-- - 1);
            *((_QWORD *)v63-- - 1) = v67;
          }
          while (v66 != v5);
          goto LABEL_59;
        }
      }
      else
      {
        v62 = v6;
        v61 = 0;
        v63 = (double *)(8 * v57);
        *(double *)(8 * v57) = _D4;
        v6 = (double *)(8 * v57 + 8);
        v64 = (char *)v62 - (char *)v5;
        if (v62 != v5)
          goto LABEL_56;
      }
      v55 = v407;
      v2 = a2;
      *(_QWORD *)a1 = v63;
      *(_QWORD *)(a1 + 8) = v6;
      v404 = (double *)&v61[8 * v60];
      *(_QWORD *)(a1 + 16) = v404;
      if (v5)
      {
LABEL_60:
        operator delete(v5);
        _Q3.f64[1] = v399;
        _D4 = v400;
      }
LABEL_61:
      v5 = v63;
      v11 = v59;
      v12 = v396;
LABEL_62:
      v14 = v408;
      _D1 = _Q3.f64[1];
      __asm { FMLA            D0, D1, V3.D[1] }
      v8 = v8 + _D0;
      v7 = v7 + _D4;
      ++v406;
      v407 = v55 + 1;
      v403 = (int64x2_t)vbslq_s8((int8x16_t)vceqq_s64(v403, (int64x2_t)v398), v398, (int8x16_t)vaddq_s64(v403, v397));
      *(_QWORD *)(a1 + 8) = v6;
      v13 = v401;
LABEL_8:
      v10 += 4;
      if (v10 != v11)
        continue;
      break;
    }
LABEL_73:
    v77 = (int8x8_t *)v4[1];
    if (v77)
    {
      do
      {
        v78 = v77;
        v77 = (int8x8_t *)*v77;
      }
      while (v77);
    }
    else
    {
      do
      {
        v78 = (int8x8_t *)v4[2];
        _ZF = *v78 == (_QWORD)v4;
        v4 = v78;
      }
      while (!_ZF);
    }
    v4 = v78;
    if (v78 != v394)
      continue;
    break;
  }
LABEL_80:
  sub_20F3A7B00(&v424);
  if (**(int **)(v424 + 56) > 3)
    goto LABEL_225;
  v79 = *(unsigned __int8 *)(v424 + 72);
  v80 = sub_20E8C31DC(v424, "OSLogSurrogateAppender", 1, 0);
  v81 = v80;
  if (!v79 && v80 == 0)
    goto LABEL_225;
  sub_20E863438((uint64_t)object);
  sub_20E86A980(&object[16], (uint64_t)"# Keyframes: ", 13);
  std::ostream::operator<<();
  v409 = v79;
  if ((v440 & 0x10) != 0)
  {
    v85 = v439;
    if (v439 < v436)
    {
      v439 = v436;
      v85 = v436;
    }
    v86 = v435;
    v83 = v85 - (_QWORD)v435;
    if (v85 - (unint64_t)v435 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_143;
  }
  else
  {
    if ((v440 & 8) == 0)
    {
      v83 = 0;
      HIBYTE(v423) = 0;
      p_dst = (char *)&__dst;
      goto LABEL_98;
    }
    v86 = *(const void **)&v432[16];
    v83 = v434 - *(_QWORD *)&v432[16];
    if (v434 - *(_QWORD *)&v432[16] > 0x7FFFFFFFFFFFFFF7)
LABEL_143:
      sub_20E860B7C();
  }
  if (v83 >= 0x17)
  {
    v87 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v87 = v83 | 7;
    v88 = v87 + 1;
    p_dst = (char *)operator new(v87 + 1);
    v422 = v83;
    v423 = v88 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_97;
  }
  HIBYTE(v423) = v83;
  p_dst = (char *)&__dst;
  if (v83)
LABEL_97:
    memmove(p_dst, v86, v83);
LABEL_98:
  p_dst[v83] = 0;
  v412 = &v424;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v414 = std::chrono::system_clock::now().__d_.__rep_;
  v415 = 3;
  v416 = "unknown file";
  v417 = 1067;
  v419 = 0;
  v420 = 0;
  v418 = "unknown function";
  if (v423 >= 0)
    v89 = (const char *)&__dst;
  else
    v89 = __dst;
  v90 = *(_QWORD *)v412;
  v91 = *(_QWORD *)v412 + 16;
  if (*(char *)(*(_QWORD *)v412 + 39) < 0)
  {
    v93 = *(const char **)(v90 + 16);
    v92 = *(_QWORD *)(v90 + 24);
    v95 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v95 & 1) == 0)
    {
LABEL_607:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v442);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v442);
        if ((_BYTE)v443 && (v442[23] & 0x80000000) != 0)
          operator delete(*(void **)v442);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v92 = *(unsigned __int8 *)(*(_QWORD *)v412 + 39);
    v93 = (const char *)(*(_QWORD *)v412 + 16);
    v94 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v94 & 1) == 0)
      goto LABEL_607;
  }
  if (byte_254A4A4F8[23] >= 0)
    v96 = byte_254A4A4F8;
  else
    v96 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v97 = byte_254A4A4F8[23];
  else
    v97 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v442 = os_log_create(v96, v93);
  v98 = &v442[8];
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v97 >= 0x17)
  {
    v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v99 = v97 | 7;
    v100 = v99 + 1;
    v98 = operator new(v99 + 1);
    *(_QWORD *)&v442[16] = v97;
    *(_QWORD *)&v443 = v100 | 0x8000000000000000;
    *(_QWORD *)&v442[8] = v98;
    goto LABEL_118;
  }
  BYTE7(v443) = v97;
  if (v97)
LABEL_118:
    memmove(v98, v96, v97);
  v98[v97] = 0;
  BYTE8(v443) = 1;
  v101 = (char *)&v444;
  if (v92 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v92 >= 0x17)
  {
    v103 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v103 = v92 | 7;
    v104 = v103 + 1;
    v101 = (char *)operator new(v103 + 1);
    v445 = (const char *)v92;
    v446 = v104 | 0x8000000000000000;
    v444 = v101;
  }
  else
  {
    HIBYTE(v446) = v92;
    if (!v92)
    {
      LOBYTE(v444) = 0;
      LOBYTE(v447) = 1;
      v102 = *(NSObject **)v442;
      if ((SHIBYTE(v446) & 0x80000000) == 0)
        goto LABEL_123;
LABEL_129:
      operator delete(v444);
      if (BYTE8(v443))
        goto LABEL_130;
      goto LABEL_132;
    }
  }
  memmove(v101, v93, v92);
  v101[v92] = 0;
  LOBYTE(v447) = 1;
  v102 = *(NSObject **)v442;
  if (SHIBYTE(v446) < 0)
    goto LABEL_129;
LABEL_123:
  if (BYTE8(v443))
  {
LABEL_130:
    if (SBYTE7(v443) < 0)
      operator delete(*(void **)&v442[8]);
  }
LABEL_132:
  if (*(_QWORD *)v442)
    os_release(*(void **)v442);
  if (v81 && *(_QWORD *)(v81 + 24))
  {
    v105 = _os_log_pack_size();
    v106 = (std::__shared_weak_count_vtbl *)operator new(v105, (std::align_val_t)8uLL);
    v107 = (std::__shared_weak_count *)operator new();
    v107->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v106;
    *(_QWORD *)&v425 = v106;
    *((_QWORD *)&v425 + 1) = v106;
    v427 = 0;
    v428 = 0;
    v426 = v107;
    v108 = strlen(v89);
    if (v108 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v109 = v108;
    if (v108 >= 0x17)
    {
      v113 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v108 | 7) != 0x17)
        v113 = v108 | 7;
      v114 = v113 + 1;
      v110 = operator new(v113 + 1);
      *(_QWORD *)&v430 = v109;
      *((_QWORD *)&v430 + 1) = v114 | 0x8000000000000000;
      v429 = v110;
    }
    else
    {
      HIBYTE(v430) = v108;
      v110 = &v429;
      if (!v108)
        goto LABEL_148;
    }
    memcpy(v110, v89, v109);
LABEL_148:
    *((_BYTE *)v110 + v109) = 0;
    v115 = v429;
    v448[0] = v430;
    *(_QWORD *)((char *)v448 + 7) = *(_QWORD *)((char *)&v430 + 7);
    v116 = HIBYTE(v430);
    v117 = operator new(0x38uLL);
    v117[1] = 0;
    v117[2] = 0;
    v117[3] = off_24C9ABC20;
    *v117 = &off_24C9ABBD0;
    v118 = v448[0];
    v117[4] = v115;
    v117[5] = v118;
    *(_QWORD *)((char *)v117 + 47) = *(_QWORD *)((char *)v448 + 7);
    *((_BYTE *)v117 + 55) = v116;
    v448[0] = 0;
    *(_QWORD *)((char *)v448 + 7) = 0;
    v119 = v428;
    v427 = (char *)(v117 + 3);
    v428 = (std::__shared_weak_count *)v117;
    if (v119)
    {
      p_shared_owners = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldaxr(p_shared_owners);
      while (__stlxr(v121 - 1, p_shared_owners));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    *(_OWORD *)v442 = v425;
    v122 = v427;
    *(_QWORD *)&v442[16] = v426;
    if (v426)
    {
      v123 = (unint64_t *)&v426->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    v125 = v428;
    *(_QWORD *)&v443 = v122;
    *((_QWORD *)&v443 + 1) = v428;
    if (v428)
    {
      v126 = (unint64_t *)&v428->__shared_owners_;
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
      v444 = v122;
      do
        v128 = __ldaxr(v126);
      while (__stlxr(v128 - 1, v126));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    else
    {
      v444 = v122;
    }
    v129 = v426;
    if (v426)
    {
      v130 = (unint64_t *)&v426->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = *(_QWORD *)v442;
    if (v444[31] >= 0)
      v133 = v444 + 8;
    else
      v133 = (char *)*((_QWORD *)v444 + 1);
    v134 = _os_log_pack_fill();
    *(_DWORD *)v134 = 136315138;
    *(_QWORD *)(v134 + 4) = v133;
    v135 = operator new();
    v136 = *(unsigned __int8 *)(v90 + 39);
    if ((v136 & 0x80u) == 0)
      v137 = v91;
    else
      v137 = *(_QWORD *)(v90 + 16);
    if ((v136 & 0x80u) != 0)
      v136 = *(_QWORD *)(v90 + 24);
    *(_QWORD *)v135 = v132;
    *(_OWORD *)(v135 + 8) = *(_OWORD *)&v442[8];
    *(_QWORD *)&v442[8] = 0;
    *(_QWORD *)&v442[16] = 0;
    *(_OWORD *)(v135 + 24) = v443;
    v443 = 0uLL;
    *(_QWORD *)(v135 + 40) = v137;
    *(_QWORD *)(v135 + 48) = v136;
    *(_BYTE *)(v135 + 56) = 1;
    v429 = 0;
    *(_QWORD *)&v425 = v135;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v81 + 24) + 40))(*(_QWORD *)(v81 + 24), &v425);
    v138 = v425;
    *(_QWORD *)&v425 = 0;
    v112 = v409;
    if (v138)
    {
      v139 = *(std::__shared_weak_count **)(v138 + 32);
      if (v139)
      {
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v142 = *(std::__shared_weak_count **)(v138 + 16);
      if (v142)
      {
        v143 = (unint64_t *)&v142->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      MEMORY[0x212BC6398](v138, 0x10F0C40B62ED6C6);
      v145 = v429;
      v429 = 0;
      if (v145)
      {
        v146 = (std::__shared_weak_count *)v145[4];
        if (v146)
        {
          v147 = (unint64_t *)&v146->__shared_owners_;
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        v149 = (std::__shared_weak_count *)v145[2];
        if (v149)
        {
          v150 = (unint64_t *)&v149->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        MEMORY[0x212BC6398](v145, 0x10F0C40B62ED6C6);
      }
    }
    v152 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
    v2 = a2;
    if (*((_QWORD *)&v443 + 1))
    {
      v153 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    v155 = *(std::__shared_weak_count **)&v442[16];
    if (*(_QWORD *)&v442[16])
    {
      v156 = (unint64_t *)(*(_QWORD *)&v442[16] + 8);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
  }
  else
  {
    os_log_type_enabled(v102, OS_LOG_TYPE_INFO);
    *(_DWORD *)v442 = 136315138;
    *(_QWORD *)&v442[4] = v89;
    v111 = (void *)_os_log_send_and_compose_impl();
    v2 = a2;
    v112 = v409;
    if (v111)
      free(v111);
  }
  if (v112)
  {
    v158 = (const char *)&__dst;
    if (v423 < 0)
      v158 = __dst;
    sub_20E8C003C((uint64_t)&v412, "%s", v158);
    sub_20E863570((uint64_t)&v412);
  }
  sub_20E863570((uint64_t)&v412);
  v159 = v420;
  if (v420)
  {
    v160 = (unint64_t *)&v420->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (SHIBYTE(v423) < 0)
    operator delete(__dst);
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v162 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v162;
  *(_QWORD *)v432 = MEMORY[0x24BEDB848] + 16;
  if (v438 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v441);
LABEL_225:
  sub_20F3A7B00(&v424);
  if (**(int **)(v424 + 56) > 3)
    goto LABEL_369;
  v163 = *(unsigned __int8 *)(v424 + 72);
  v164 = sub_20E8C31DC(v424, "OSLogSurrogateAppender", 1, 0);
  v165 = v164;
  if (!v163 && v164 == 0)
    goto LABEL_369;
  sub_20E863438((uint64_t)object);
  sub_20E86A980(&object[16], (uint64_t)"# Tracks: ", 10);
  std::ostream::operator<<();
  v410 = v163;
  if ((v440 & 0x10) != 0)
  {
    v169 = v439;
    if (v439 < v436)
    {
      v439 = v436;
      v169 = v436;
    }
    v170 = v435;
    v167 = v169 - (_QWORD)v435;
    if (v169 - (unint64_t)v435 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_288;
  }
  else
  {
    if ((v440 & 8) == 0)
    {
      v167 = 0;
      HIBYTE(v423) = 0;
      v168 = (char *)&__dst;
      goto LABEL_243;
    }
    v170 = *(const void **)&v432[16];
    v167 = v434 - *(_QWORD *)&v432[16];
    if (v434 - *(_QWORD *)&v432[16] > 0x7FFFFFFFFFFFFFF7)
LABEL_288:
      sub_20E860B7C();
  }
  if (v167 >= 0x17)
  {
    v171 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17)
      v171 = v167 | 7;
    v172 = v171 + 1;
    v168 = (char *)operator new(v171 + 1);
    v422 = v167;
    v423 = v172 | 0x8000000000000000;
    __dst = v168;
    goto LABEL_242;
  }
  HIBYTE(v423) = v167;
  v168 = (char *)&__dst;
  if (v167)
LABEL_242:
    memmove(v168, v170, v167);
LABEL_243:
  v168[v167] = 0;
  v412 = &v424;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v414 = std::chrono::system_clock::now().__d_.__rep_;
  v415 = 3;
  v416 = "unknown file";
  v417 = 1068;
  v419 = 0;
  v420 = 0;
  v418 = "unknown function";
  if (v423 >= 0)
    v173 = (const char *)&__dst;
  else
    v173 = __dst;
  v174 = *(_QWORD *)v412;
  v175 = *(_QWORD *)v412 + 16;
  if (*(char *)(*(_QWORD *)v412 + 39) < 0)
  {
    v177 = *(const char **)(v174 + 16);
    v176 = *(_QWORD *)(v174 + 24);
    v179 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v179 & 1) == 0)
    {
LABEL_614:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v442);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v442);
        if ((_BYTE)v443 && (v442[23] & 0x80000000) != 0)
          operator delete(*(void **)v442);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v176 = *(unsigned __int8 *)(*(_QWORD *)v412 + 39);
    v177 = (const char *)(*(_QWORD *)v412 + 16);
    v178 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v178 & 1) == 0)
      goto LABEL_614;
  }
  if (byte_254A4A4F8[23] >= 0)
    v180 = byte_254A4A4F8;
  else
    v180 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v181 = byte_254A4A4F8[23];
  else
    v181 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v442 = os_log_create(v180, v177);
  v182 = &v442[8];
  if (v181 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v181 >= 0x17)
  {
    v183 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v181 | 7) != 0x17)
      v183 = v181 | 7;
    v184 = v183 + 1;
    v182 = operator new(v183 + 1);
    *(_QWORD *)&v442[16] = v181;
    *(_QWORD *)&v443 = v184 | 0x8000000000000000;
    *(_QWORD *)&v442[8] = v182;
    goto LABEL_263;
  }
  BYTE7(v443) = v181;
  if (v181)
LABEL_263:
    memmove(v182, v180, v181);
  v182[v181] = 0;
  BYTE8(v443) = 1;
  v185 = (char *)&v444;
  if (v176 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v176 >= 0x17)
  {
    v187 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v176 | 7) != 0x17)
      v187 = v176 | 7;
    v188 = v187 + 1;
    v185 = (char *)operator new(v187 + 1);
    v445 = (const char *)v176;
    v446 = v188 | 0x8000000000000000;
    v444 = v185;
  }
  else
  {
    HIBYTE(v446) = v176;
    if (!v176)
    {
      LOBYTE(v444) = 0;
      LOBYTE(v447) = 1;
      v186 = *(NSObject **)v442;
      if ((SHIBYTE(v446) & 0x80000000) == 0)
        goto LABEL_268;
LABEL_274:
      operator delete(v444);
      if (BYTE8(v443))
        goto LABEL_275;
      goto LABEL_277;
    }
  }
  memmove(v185, v177, v176);
  v185[v176] = 0;
  LOBYTE(v447) = 1;
  v186 = *(NSObject **)v442;
  if (SHIBYTE(v446) < 0)
    goto LABEL_274;
LABEL_268:
  if (BYTE8(v443))
  {
LABEL_275:
    if (SBYTE7(v443) < 0)
      operator delete(*(void **)&v442[8]);
  }
LABEL_277:
  if (*(_QWORD *)v442)
    os_release(*(void **)v442);
  if (v165 && *(_QWORD *)(v165 + 24))
  {
    v189 = _os_log_pack_size();
    v190 = (std::__shared_weak_count_vtbl *)operator new(v189, (std::align_val_t)8uLL);
    v191 = (std::__shared_weak_count *)operator new();
    v191->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v190;
    *(_QWORD *)&v425 = v190;
    *((_QWORD *)&v425 + 1) = v190;
    v427 = 0;
    v428 = 0;
    v426 = v191;
    v192 = strlen(v173);
    if (v192 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v193 = v192;
    if (v192 >= 0x17)
    {
      v197 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v192 | 7) != 0x17)
        v197 = v192 | 7;
      v198 = v197 + 1;
      v194 = operator new(v197 + 1);
      *(_QWORD *)&v430 = v193;
      *((_QWORD *)&v430 + 1) = v198 | 0x8000000000000000;
      v429 = v194;
    }
    else
    {
      HIBYTE(v430) = v192;
      v194 = &v429;
      if (!v192)
        goto LABEL_293;
    }
    memcpy(v194, v173, v193);
LABEL_293:
    *((_BYTE *)v194 + v193) = 0;
    v199 = v429;
    v448[0] = v430;
    *(_QWORD *)((char *)v448 + 7) = *(_QWORD *)((char *)&v430 + 7);
    v200 = HIBYTE(v430);
    v201 = operator new(0x38uLL);
    v201[1] = 0;
    v201[2] = 0;
    v201[3] = off_24C9ABC20;
    *v201 = &off_24C9ABBD0;
    v202 = v448[0];
    v201[4] = v199;
    v201[5] = v202;
    *(_QWORD *)((char *)v201 + 47) = *(_QWORD *)((char *)v448 + 7);
    *((_BYTE *)v201 + 55) = v200;
    v448[0] = 0;
    *(_QWORD *)((char *)v448 + 7) = 0;
    v203 = v428;
    v427 = (char *)(v201 + 3);
    v428 = (std::__shared_weak_count *)v201;
    if (v203)
    {
      v204 = (unint64_t *)&v203->__shared_owners_;
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    *(_OWORD *)v442 = v425;
    v206 = v427;
    *(_QWORD *)&v442[16] = v426;
    if (v426)
    {
      v207 = (unint64_t *)&v426->__shared_owners_;
      do
        v208 = __ldxr(v207);
      while (__stxr(v208 + 1, v207));
    }
    v209 = v428;
    *(_QWORD *)&v443 = v206;
    *((_QWORD *)&v443 + 1) = v428;
    if (v428)
    {
      v210 = (unint64_t *)&v428->__shared_owners_;
      do
        v211 = __ldxr(v210);
      while (__stxr(v211 + 1, v210));
      v444 = v206;
      do
        v212 = __ldaxr(v210);
      while (__stlxr(v212 - 1, v210));
      if (!v212)
      {
        ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
        std::__shared_weak_count::__release_weak(v209);
      }
    }
    else
    {
      v444 = v206;
    }
    v213 = v426;
    if (v426)
    {
      v214 = (unint64_t *)&v426->__shared_owners_;
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    v216 = *(_QWORD *)v442;
    if (v444[31] >= 0)
      v217 = v444 + 8;
    else
      v217 = (char *)*((_QWORD *)v444 + 1);
    v218 = _os_log_pack_fill();
    *(_DWORD *)v218 = 136315138;
    *(_QWORD *)(v218 + 4) = v217;
    v219 = operator new();
    v220 = *(unsigned __int8 *)(v174 + 39);
    if ((v220 & 0x80u) == 0)
      v221 = v175;
    else
      v221 = *(_QWORD *)(v174 + 16);
    if ((v220 & 0x80u) != 0)
      v220 = *(_QWORD *)(v174 + 24);
    *(_QWORD *)v219 = v216;
    *(_OWORD *)(v219 + 8) = *(_OWORD *)&v442[8];
    *(_QWORD *)&v442[8] = 0;
    *(_QWORD *)&v442[16] = 0;
    *(_OWORD *)(v219 + 24) = v443;
    v443 = 0uLL;
    *(_QWORD *)(v219 + 40) = v221;
    *(_QWORD *)(v219 + 48) = v220;
    *(_BYTE *)(v219 + 56) = 1;
    v429 = 0;
    *(_QWORD *)&v425 = v219;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v165 + 24) + 40))(*(_QWORD *)(v165 + 24), &v425);
    v222 = v425;
    *(_QWORD *)&v425 = 0;
    v196 = v410;
    if (v222)
    {
      v223 = *(std::__shared_weak_count **)(v222 + 32);
      if (v223)
      {
        v224 = (unint64_t *)&v223->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
      v226 = *(std::__shared_weak_count **)(v222 + 16);
      if (v226)
      {
        v227 = (unint64_t *)&v226->__shared_owners_;
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      MEMORY[0x212BC6398](v222, 0x10F0C40B62ED6C6);
      v229 = v429;
      v429 = 0;
      if (v229)
      {
        v230 = (std::__shared_weak_count *)v229[4];
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v233 = (std::__shared_weak_count *)v229[2];
        if (v233)
        {
          v234 = (unint64_t *)&v233->__shared_owners_;
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
        }
        MEMORY[0x212BC6398](v229, 0x10F0C40B62ED6C6);
      }
    }
    v236 = (std::__shared_weak_count *)*((_QWORD *)&v443 + 1);
    v2 = a2;
    if (*((_QWORD *)&v443 + 1))
    {
      v237 = (unint64_t *)(*((_QWORD *)&v443 + 1) + 8);
      do
        v238 = __ldaxr(v237);
      while (__stlxr(v238 - 1, v237));
      if (!v238)
      {
        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
        std::__shared_weak_count::__release_weak(v236);
      }
    }
    v239 = *(std::__shared_weak_count **)&v442[16];
    if (*(_QWORD *)&v442[16])
    {
      v240 = (unint64_t *)(*(_QWORD *)&v442[16] + 8);
      do
        v241 = __ldaxr(v240);
      while (__stlxr(v241 - 1, v240));
      if (!v241)
      {
        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
        std::__shared_weak_count::__release_weak(v239);
      }
    }
  }
  else
  {
    os_log_type_enabled(v186, OS_LOG_TYPE_INFO);
    *(_DWORD *)v442 = 136315138;
    *(_QWORD *)&v442[4] = v173;
    v195 = (void *)_os_log_send_and_compose_impl();
    v2 = a2;
    v196 = v410;
    if (v195)
      free(v195);
  }
  if (v196)
  {
    v242 = (const char *)&__dst;
    if (v423 < 0)
      v242 = __dst;
    sub_20E8C003C((uint64_t)&v412, "%s", v242);
    sub_20E863570((uint64_t)&v412);
  }
  sub_20E863570((uint64_t)&v412);
  v243 = v420;
  if (v420)
  {
    v244 = (unint64_t *)&v420->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  if (SHIBYTE(v423) < 0)
    operator delete(__dst);
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v246 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v246;
  *(_QWORD *)v432 = MEMORY[0x24BEDB848] + 16;
  if (v438 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v441);
LABEL_369:
  *((_QWORD *)&v425 + 1) = 0;
  v426 = 0;
  *(_QWORD *)&v425 = (char *)&v425 + 8;
  v247 = v2[1];
  sub_20E86872C((uint64_t)&v425, 0);
  v426 = 0;
  v425 = (unint64_t)&v425 + 8;
  v250 = (int8x8_t *)*v247;
  v248 = v247 + 1;
  v249 = v250;
  if (v250 != v248)
  {
    do
    {
      v251 = v249[6];
      if (*(_BYTE *)(*(_QWORD *)&v251 + 528))
      {
        v252 = (uint64_t)(*(_QWORD *)(*(_QWORD *)&v251 + 544) - *(_QWORD *)(*(_QWORD *)&v251 + 536)) >> 5;
        v253 = (uint64_t *)*((_QWORD *)&v425 + 1);
        v254 = (uint64_t **)&v425 + 1;
        v255 = (uint64_t **)&v425 + 1;
        if (*((_QWORD *)&v425 + 1))
        {
          while (1)
          {
            while (1)
            {
              v255 = (uint64_t **)v253;
              v256 = v253[4];
              if (v252 >= v256)
                break;
              v253 = *v255;
              v254 = v255;
              if (!*v255)
                goto LABEL_380;
            }
            if (v256 >= v252)
              break;
            v253 = v255[1];
            if (!v253)
            {
              v254 = v255 + 1;
              goto LABEL_380;
            }
          }
          v257 = (uint64_t *)v255;
        }
        else
        {
LABEL_380:
          v257 = (uint64_t *)operator new(0x30uLL);
          v257[4] = v252;
          v257[5] = 0;
          *v257 = 0;
          v257[1] = 0;
          v257[2] = (uint64_t)v255;
          *v254 = v257;
          v258 = v257;
          if (*(_QWORD *)v425)
          {
            *(_QWORD *)&v425 = *(_QWORD *)v425;
            v258 = *v254;
          }
          sub_20E868578(*((uint64_t **)&v425 + 1), v258);
          v426 = (std::__shared_weak_count *)((char *)v426 + 1);
        }
        ++v257[5];
      }
      v259 = (int8x8_t *)v249[1];
      if (v259)
      {
        do
        {
          v260 = v259;
          v259 = (int8x8_t *)*v259;
        }
        while (v259);
      }
      else
      {
        do
        {
          v260 = (int8x8_t *)v249[2];
          _ZF = *v260 == (_QWORD)v249;
          v249 = v260;
        }
        while (!_ZF);
      }
      v249 = v260;
    }
    while (v260 != v248);
    v261 = (_QWORD *)v425;
    if ((__int128 *)v425 != (__int128 *)((char *)&v425 + 8))
    {
      while (2)
      {
        sub_20F3A7B00(&__dst);
        if (**((int **)__dst + 7) > 3)
          goto LABEL_485;
        v262 = __dst[72];
        v263 = sub_20E8C31DC((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
        v264 = v263;
        if (!v262 && v263 == 0)
          goto LABEL_485;
        v411 = v262;
        *(_QWORD *)v442 = &__dst;
        *(std::chrono::steady_clock::time_point *)&v442[8] = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v442[16] = std::chrono::system_clock::now();
        LODWORD(v443) = 3;
        *((_QWORD *)&v443 + 1) = "unknown file";
        LODWORD(v444) = 1075;
        v445 = "unknown function";
        v446 = 0;
        v447 = 0;
        v266 = **(_QWORD **)v442;
        if (*(char *)(**(_QWORD **)v442 + 39) < 0)
        {
          v268 = *(const char **)(v266 + 16);
          v267 = *(_QWORD *)(v266 + 24);
          v405 = v266 + 16;
          v270 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v270 & 1) == 0)
          {
LABEL_491:
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v412);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v412);
              if ((_BYTE)v415 && SHIBYTE(v414) < 0)
                operator delete(v412);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
          }
        }
        else
        {
          v267 = *(unsigned __int8 *)(**(_QWORD **)v442 + 39);
          v268 = (const char *)(v266 + 16);
          v405 = v266 + 16;
          v269 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v269 & 1) == 0)
            goto LABEL_491;
        }
        if (byte_254A4A4F8[23] >= 0)
          v271 = byte_254A4A4F8;
        else
          v271 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v272 = byte_254A4A4F8[23];
        else
          v272 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v271, v268);
        if (v272 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v272 >= 0x17)
        {
          v274 = (v272 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v272 | 7) != 0x17)
            v274 = v272 | 7;
          v275 = v274 + 1;
          v273 = operator new(v274 + 1);
          *(_QWORD *)&object[16] = v272;
          *(_QWORD *)v432 = v275 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v273;
        }
        else
        {
          v432[7] = v272;
          v273 = &object[8];
          if (!v272)
          {
LABEL_417:
            v273[v272] = 0;
            v432[8] = 1;
            if (v267 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v267 >= 0x17)
            {
              v278 = (v267 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v267 | 7) != 0x17)
                v278 = v267 | 7;
              v279 = v278 + 1;
              v276 = operator new(v278 + 1);
              v433 = v267;
              v434 = v279 | 0x8000000000000000;
              *(_QWORD *)&v432[16] = v276;
            }
            else
            {
              HIBYTE(v434) = v267;
              v276 = &v432[16];
              if (!v267)
              {
                v432[16] = 0;
                LOBYTE(v435) = 1;
                v277 = *(NSObject **)object;
                if ((SHIBYTE(v434) & 0x80000000) == 0)
                  goto LABEL_421;
LABEL_427:
                operator delete(*(void **)&v432[16]);
                if (v432[8])
                  goto LABEL_428;
                goto LABEL_430;
              }
            }
            memmove(v276, v268, v267);
            v276[v267] = 0;
            LOBYTE(v435) = 1;
            v277 = *(NSObject **)object;
            if (SHIBYTE(v434) < 0)
              goto LABEL_427;
LABEL_421:
            if (v432[8])
            {
LABEL_428:
              if ((v432[7] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
            }
LABEL_430:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v264 && *(_QWORD *)(v264 + 24))
            {
              v280 = _os_log_pack_size();
              v281 = (std::__shared_weak_count_vtbl *)operator new(v280, (std::align_val_t)8uLL);
              v282 = (std::__shared_weak_count *)operator new();
              v283 = v282;
              v282->__shared_owners_ = 0;
              v284 = (unint64_t *)&v282->__shared_owners_;
              v282->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v282->__shared_weak_owners_ = 0;
              v282[1].__vftable = v281;
              *(_QWORD *)object = v281;
              *(_QWORD *)&object[8] = v281;
              *(_QWORD *)&object[16] = v282;
              do
                v285 = __ldxr(v284);
              while (__stxr(v285 + 1, v284));
              memset(v432, 0, sizeof(v432));
              do
                v286 = __ldaxr(v284);
              while (__stlxr(v286 - 1, v284));
              if (!v286)
              {
                ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                std::__shared_weak_count::__release_weak(v283);
              }
              v287 = *(_QWORD *)object;
              v288 = _os_log_pack_fill();
              v289 = v261[4];
              v290 = v261[5];
              *(_DWORD *)v288 = 134218240;
              *(_QWORD *)(v288 + 4) = v289;
              *(_WORD *)(v288 + 12) = 2048;
              *(_QWORD *)(v288 + 14) = v290;
              v291 = (char *)operator new();
              v292 = *(unsigned __int8 *)(v266 + 39);
              v293 = *(_QWORD *)(v266 + 16);
              v294 = *(_QWORD *)(v266 + 24);
              v295 = *(_OWORD *)v432;
              *(_OWORD *)(v291 + 8) = *(_OWORD *)&object[8];
              if ((v292 & 0x80u) != 0)
                v292 = v294;
              else
                v293 = v405;
              *(_QWORD *)v291 = v287;
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v291 + 24) = v295;
              *(_QWORD *)v432 = 0;
              *(_QWORD *)&v432[8] = 0;
              *((_QWORD *)v291 + 5) = v293;
              *((_QWORD *)v291 + 6) = v292;
              v291[56] = 1;
              v429 = 0;
              v412 = v291;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v264 + 24) + 40))(*(_QWORD *)(v264 + 24), &v412);
              v296 = v412;
              v412 = 0;
              if (v296)
              {
                v297 = (std::__shared_weak_count *)*((_QWORD *)v296 + 4);
                if (v297)
                {
                  v298 = (unint64_t *)&v297->__shared_owners_;
                  do
                    v299 = __ldaxr(v298);
                  while (__stlxr(v299 - 1, v298));
                  if (!v299)
                  {
                    ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                    std::__shared_weak_count::__release_weak(v297);
                  }
                }
                v300 = (std::__shared_weak_count *)*((_QWORD *)v296 + 2);
                if (v300)
                {
                  v301 = (unint64_t *)&v300->__shared_owners_;
                  do
                    v302 = __ldaxr(v301);
                  while (__stlxr(v302 - 1, v301));
                  if (!v302)
                  {
                    ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                    std::__shared_weak_count::__release_weak(v300);
                  }
                }
                MEMORY[0x212BC6398](v296, 0x10F0C40B62ED6C6);
                v303 = v429;
                v429 = 0;
                if (v303)
                {
                  v304 = (std::__shared_weak_count *)v303[4];
                  if (v304)
                  {
                    v305 = (unint64_t *)&v304->__shared_owners_;
                    do
                      v306 = __ldaxr(v305);
                    while (__stlxr(v306 - 1, v305));
                    if (!v306)
                    {
                      ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                      std::__shared_weak_count::__release_weak(v304);
                    }
                  }
                  v307 = (std::__shared_weak_count *)v303[2];
                  if (v307)
                  {
                    v308 = (unint64_t *)&v307->__shared_owners_;
                    do
                      v309 = __ldaxr(v308);
                    while (__stlxr(v309 - 1, v308));
                    if (!v309)
                    {
                      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
                      std::__shared_weak_count::__release_weak(v307);
                    }
                  }
                  MEMORY[0x212BC6398](v303, 0x10F0C40B62ED6C6);
                }
              }
              v310 = *(std::__shared_weak_count **)&v432[8];
              v311 = v411;
              if (*(_QWORD *)&v432[8])
              {
                v312 = (unint64_t *)(*(_QWORD *)&v432[8] + 8);
                do
                  v313 = __ldaxr(v312);
                while (__stlxr(v313 - 1, v312));
                if (!v313)
                {
                  ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                  std::__shared_weak_count::__release_weak(v310);
                }
              }
              v314 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v315 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v316 = __ldaxr(v315);
                while (__stlxr(v316 - 1, v315));
                if (!v316)
                {
                  ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                  std::__shared_weak_count::__release_weak(v314);
                }
              }
            }
            else
            {
              os_log_type_enabled(v277, OS_LOG_TYPE_INFO);
              v317 = v261[4];
              v318 = v261[5];
              *(_DWORD *)object = 134218240;
              *(_QWORD *)&object[4] = v317;
              *(_WORD *)&object[12] = 2048;
              *(_QWORD *)&object[14] = v318;
              v319 = (void *)_os_log_send_and_compose_impl();
              v311 = v411;
              if (v319)
                free(v319);
            }
            if (v311)
            {
              sub_20E8C003C((uint64_t)v442, "   Track length %zu: %zu", v261[4], v261[5]);
              sub_20E863570((uint64_t)v442);
            }
            sub_20E863570((uint64_t)v442);
            v320 = v447;
            if (v447)
            {
              v321 = (unint64_t *)&v447->__shared_owners_;
              do
                v322 = __ldaxr(v321);
              while (__stlxr(v322 - 1, v321));
              if (!v322)
              {
                ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
                std::__shared_weak_count::__release_weak(v320);
              }
            }
LABEL_485:
            v323 = (_QWORD *)v261[1];
            if (v323)
            {
              do
              {
                v324 = v323;
                v323 = (_QWORD *)*v323;
              }
              while (v323);
            }
            else
            {
              do
              {
                v324 = (_OWORD *)v261[2];
                _ZF = *(_QWORD *)v324 == (_QWORD)v261;
                v261 = v324;
              }
              while (!_ZF);
            }
            v261 = v324;
            if (v324 == (__int128 *)((char *)&v425 + 8))
              goto LABEL_496;
            continue;
          }
        }
        break;
      }
      memmove(v273, v271, v272);
      goto LABEL_417;
    }
  }
LABEL_496:
  sub_20F3A7B00(&__dst);
  if (**((int **)__dst + 7) > 3)
    goto LABEL_600;
  v325 = __dst[72];
  v326 = sub_20E8C31DC((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
  v327 = v326;
  if (!v325 && v326 == 0)
    goto LABEL_600;
  *(_QWORD *)v442 = &__dst;
  *(std::chrono::steady_clock::time_point *)&v442[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v442[16] = std::chrono::system_clock::now();
  LODWORD(v443) = 3;
  *((_QWORD *)&v443 + 1) = "unknown file";
  LODWORD(v444) = 1089;
  v446 = 0;
  v447 = 0;
  v329 = -1.0;
  v330 = -1.0;
  v445 = "unknown function";
  if (v407)
    v330 = v8 * (1.0 / (double)v407);
  if (v406)
    v329 = v7 * (1.0 / (double)v406);
  v331 = *(double **)(a1 + 8);
  if (*(double **)a1 != v331)
  {
    v332 = sqrt(sub_20F1CE188(*(double **)a1, v331));
    v333 = **(_QWORD **)v442;
    v334 = **(_QWORD **)v442 + 16;
    v335 = *(char *)(**(_QWORD **)v442 + 39);
    if ((v335 & 0x80000000) == 0)
      goto LABEL_507;
LABEL_510:
    v337 = *(const char **)(v333 + 16);
    v336 = *(_QWORD *)(v333 + 24);
    v339 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v339 & 1) != 0)
      goto LABEL_511;
LABEL_621:
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (v432[0] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    goto LABEL_511;
  }
  v332 = -1.0;
  v333 = **(_QWORD **)v442;
  v334 = **(_QWORD **)v442 + 16;
  v335 = *(char *)(**(_QWORD **)v442 + 39);
  if (v335 < 0)
    goto LABEL_510;
LABEL_507:
  v336 = v335;
  v337 = (const char *)v334;
  v338 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v338 & 1) == 0)
    goto LABEL_621;
LABEL_511:
  if (byte_254A4A4F8[23] >= 0)
    v340 = byte_254A4A4F8;
  else
    v340 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v341 = byte_254A4A4F8[23];
  else
    v341 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v340, v337);
  v342 = &object[8];
  if (v341 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v341 >= 0x17)
  {
    v343 = (v341 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v341 | 7) != 0x17)
      v343 = v341 | 7;
    v344 = v343 + 1;
    v342 = operator new(v343 + 1);
    *(_QWORD *)&object[16] = v341;
    *(_QWORD *)v432 = v344 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v342;
    goto LABEL_524;
  }
  v432[7] = v341;
  if (v341)
LABEL_524:
    memmove(v342, v340, v341);
  v342[v341] = 0;
  v432[8] = 1;
  v345 = &v432[16];
  if (v336 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v336 >= 0x17)
  {
    v347 = (v336 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v336 | 7) != 0x17)
      v347 = v336 | 7;
    v348 = v347 + 1;
    v345 = operator new(v347 + 1);
    v433 = v336;
    v434 = v348 | 0x8000000000000000;
    *(_QWORD *)&v432[16] = v345;
  }
  else
  {
    HIBYTE(v434) = v336;
    if (!v336)
    {
      v432[16] = 0;
      LOBYTE(v435) = 1;
      v346 = *(NSObject **)object;
      if ((SHIBYTE(v434) & 0x80000000) == 0)
        goto LABEL_529;
LABEL_535:
      operator delete(*(void **)&v432[16]);
      if (v432[8])
        goto LABEL_536;
      goto LABEL_538;
    }
  }
  memmove(v345, v337, v336);
  v345[v336] = 0;
  LOBYTE(v435) = 1;
  v346 = *(NSObject **)object;
  if (SHIBYTE(v434) < 0)
    goto LABEL_535;
LABEL_529:
  if (v432[8])
  {
LABEL_536:
    if ((v432[7] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
  }
LABEL_538:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v349 = sqrt(v330);
  v350 = sqrt(v329);
  if (v327 && *(_QWORD *)(v327 + 24))
  {
    v351 = _os_log_pack_size();
    v352 = (std::__shared_weak_count_vtbl *)operator new(v351, (std::align_val_t)8uLL);
    v353 = (std::__shared_weak_count *)operator new();
    v354 = v353;
    v353->__shared_owners_ = 0;
    v355 = (unint64_t *)&v353->__shared_owners_;
    v353->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v353->__shared_weak_owners_ = 0;
    v353[1].__vftable = v352;
    *(_QWORD *)object = v352;
    *(_QWORD *)&object[8] = v352;
    *(_QWORD *)&object[16] = v353;
    do
      v356 = __ldxr(v355);
    while (__stxr(v356 + 1, v355));
    memset(v432, 0, sizeof(v432));
    do
      v357 = __ldaxr(v355);
    while (__stlxr(v357 - 1, v355));
    if (!v357)
    {
      ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
      std::__shared_weak_count::__release_weak(v354);
    }
    v358 = *(_QWORD *)object;
    v359 = _os_log_pack_fill();
    *(_DWORD *)v359 = 134218752;
    *(_QWORD *)(v359 + 4) = v407;
    *(_WORD *)(v359 + 12) = 2048;
    *(double *)(v359 + 14) = v349;
    *(_WORD *)(v359 + 22) = 2048;
    *(double *)(v359 + 24) = v350;
    *(_WORD *)(v359 + 32) = 2048;
    *(double *)(v359 + 34) = v332;
    v360 = (char *)operator new();
    v361 = *(unsigned __int8 *)(v333 + 39);
    v362 = *(_QWORD *)(v333 + 16);
    v363 = *(_QWORD *)(v333 + 24);
    v364 = *(_OWORD *)v432;
    *(_OWORD *)(v360 + 8) = *(_OWORD *)&object[8];
    if ((v361 & 0x80u) != 0)
      v361 = v363;
    else
      v362 = v334;
    *(_QWORD *)v360 = v358;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v360 + 24) = v364;
    *(_QWORD *)v432 = 0;
    *(_QWORD *)&v432[8] = 0;
    *((_QWORD *)v360 + 5) = v362;
    *((_QWORD *)v360 + 6) = v361;
    v360[56] = 1;
    v429 = 0;
    v412 = v360;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v327 + 24) + 40))(*(_QWORD *)(v327 + 24), &v412);
    v365 = v412;
    v412 = 0;
    if (v365)
    {
      v366 = (std::__shared_weak_count *)*((_QWORD *)v365 + 4);
      if (v366)
      {
        v367 = (unint64_t *)&v366->__shared_owners_;
        do
          v368 = __ldaxr(v367);
        while (__stlxr(v368 - 1, v367));
        if (!v368)
        {
          ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
          std::__shared_weak_count::__release_weak(v366);
        }
      }
      v369 = (std::__shared_weak_count *)*((_QWORD *)v365 + 2);
      if (v369)
      {
        v370 = (unint64_t *)&v369->__shared_owners_;
        do
          v371 = __ldaxr(v370);
        while (__stlxr(v371 - 1, v370));
        if (!v371)
        {
          ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
          std::__shared_weak_count::__release_weak(v369);
        }
      }
      MEMORY[0x212BC6398](v365, 0x10F0C40B62ED6C6);
      v372 = v429;
      v429 = 0;
      if (v372)
      {
        v373 = (std::__shared_weak_count *)v372[4];
        if (v373)
        {
          v374 = (unint64_t *)&v373->__shared_owners_;
          do
            v375 = __ldaxr(v374);
          while (__stlxr(v375 - 1, v374));
          if (!v375)
          {
            ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
            std::__shared_weak_count::__release_weak(v373);
          }
        }
        v376 = (std::__shared_weak_count *)v372[2];
        if (v376)
        {
          v377 = (unint64_t *)&v376->__shared_owners_;
          do
            v378 = __ldaxr(v377);
          while (__stlxr(v378 - 1, v377));
          if (!v378)
          {
            ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
            std::__shared_weak_count::__release_weak(v376);
          }
        }
        MEMORY[0x212BC6398](v372, 0x10F0C40B62ED6C6);
      }
    }
    v379 = *(std::__shared_weak_count **)&v432[8];
    if (*(_QWORD *)&v432[8])
    {
      v380 = (unint64_t *)(*(_QWORD *)&v432[8] + 8);
      do
        v381 = __ldaxr(v380);
      while (__stlxr(v381 - 1, v380));
      if (!v381)
      {
        ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
        std::__shared_weak_count::__release_weak(v379);
      }
    }
    v382 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v383 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v384 = __ldaxr(v383);
      while (__stlxr(v384 - 1, v383));
      if (!v384)
      {
        ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
        std::__shared_weak_count::__release_weak(v382);
      }
    }
  }
  else
  {
    os_log_type_enabled(v346, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218752;
    *(_QWORD *)&object[4] = v407;
    *(_WORD *)&object[12] = 2048;
    *(double *)&object[14] = v349;
    *(_WORD *)&object[22] = 2048;
    *(double *)v432 = v350;
    *(_WORD *)&v432[8] = 2048;
    *(double *)&v432[10] = v332;
    v385 = (void *)_os_log_send_and_compose_impl();
    if (v385)
      free(v385);
  }
  if (v325)
  {
    v386 = -1.0;
    v387 = -1.0;
    v388 = v407;
    if (v407)
      v387 = v8 * (1.0 / (double)v407);
    if (v406)
      v386 = v7 * (1.0 / (double)v406);
    v389 = *(double **)(a1 + 8);
    if (*(double **)a1 == v389)
    {
      v390 = -1.0;
    }
    else
    {
      v390 = sqrt(sub_20F1CE188(*(double **)a1, v389));
      v388 = v407;
    }
    sub_20E8C003C((uint64_t)v442, "Num measurements: %zu, avg reprojection RMSE: %f, avg normalized reprojection RMSE %f, median normalized re-projection RMSE %f", v388, sqrt(v387), sqrt(v386), v390);
    sub_20E863570((uint64_t)v442);
  }
  sub_20E863570((uint64_t)v442);
  v391 = v447;
  if (v447)
  {
    v392 = (unint64_t *)&v447->__shared_owners_;
    do
      v393 = __ldaxr(v392);
    while (__stlxr(v393 - 1, v392));
    if (!v393)
    {
      ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
      std::__shared_weak_count::__release_weak(v391);
    }
  }
LABEL_600:
  sub_20E86872C((uint64_t)&v425, *((_QWORD **)&v425 + 1));
}

void sub_20F36359C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,void *a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  uint64_t v63;
  void *v65;

  if (a63 && a62 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v63 - 240);
  sub_20E86872C((uint64_t)&a49, (_QWORD *)a50);
  v65 = *(void **)a28;
  if (*(_QWORD *)a28)
  {
    *(_QWORD *)(a28 + 8) = v65;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

void sub_20F363910()
{
  sub_20F389B68();
}

void sub_20F363B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F363B5C(uint64_t *a1, const char *a2, int a3)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  double *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  double v11;
  uint64_t v12;
  const char *v13;
  int v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  _QWORD *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  const char *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  double v87;
  double v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  BOOL v106;
  uint64_t v107;
  _DWORD *v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  const char *v114;
  size_t v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  const char *v118;
  size_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  size_t v127;
  void *v128;
  _QWORD *v129;
  size_t v130;
  size_t v131;
  _BYTE *v132;
  int v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _QWORD *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  int v187;
  unsigned int __dst;
  const char *v190;
  const char *v191;
  uint64_t v192;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char *v198;
  const char *v199;
  int v200;
  const char *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  std::__shared_weak_count *v209;
  _BYTE v210[24];
  char *v211;
  std::__shared_weak_count *v212;
  _BYTE v213[64];
  std::__shared_weak_count *v214;
  uint64_t v215[2];
  _BYTE v216[24];
  uint64_t v217;

  v3 = a3;
  v4 = a1;
  v217 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(double **)(*a1 + 336);
  if (!v6)
    goto LABEL_134;
  do
  {
    sub_20F3A7B00(v215);
    if (**(int **)(v215[0] + 56) > 2)
      goto LABEL_3;
    v7 = *(unsigned __int8 *)(v215[0] + 72);
    v8 = sub_20E8C31DC(v215[0], "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    v10 = !v7 && v8 == 0;
    if (v10)
      goto LABEL_3;
    *(_QWORD *)&v205 = v215;
    *((std::chrono::steady_clock::time_point *)&v205 + 1) = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v206 = std::chrono::system_clock::now();
    DWORD2(v206) = 2;
    *(_QWORD *)&v207 = "unknown file";
    DWORD2(v207) = 600;
    *(_QWORD *)&v208 = "unknown function";
    *((_QWORD *)&v208 + 1) = 0;
    v209 = 0;
    if (*((_BYTE *)v6 + 64))
    {
      v11 = v6[7] * v6[4];
      v12 = *(_QWORD *)v205;
      v13 = (const char *)(*(_QWORD *)v205 + 16);
      v14 = *(char *)(*(_QWORD *)v205 + 39);
      v191 = v13;
      if (v14 < 0)
        goto LABEL_14;
    }
    else
    {
      v11 = v6[3];
      v12 = *(_QWORD *)v205;
      v13 = (const char *)(*(_QWORD *)v205 + 16);
      v14 = *(char *)(*(_QWORD *)v205 + 39);
      v191 = v13;
      if (v14 < 0)
      {
LABEL_14:
        v13 = *(const char **)(v12 + 16);
        v15 = *(_QWORD *)(v12 + 24);
        v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v17 & 1) != 0)
          goto LABEL_15;
        goto LABEL_128;
      }
    }
    v15 = v14;
    v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v16 & 1) != 0)
      goto LABEL_15;
LABEL_128:
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
      if ((_BYTE)v198 && SHIBYTE(rep) < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_15:
    if (byte_254A4A4F8[23] >= 0)
      v18 = byte_254A4A4F8;
    else
      v18 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v19 = byte_254A4A4F8[23];
    else
      v19 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v213 = os_log_create(v18, v13);
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v19 >= 0x17)
    {
      v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v21 = v19 | 7;
      v22 = v21 + 1;
      v20 = operator new(v21 + 1);
      *(_QWORD *)&v213[16] = v19;
      *(_QWORD *)&v213[24] = v22 | 0x8000000000000000;
      *(_QWORD *)&v213[8] = v20;
LABEL_28:
      memmove(v20, v18, v19);
      goto LABEL_29;
    }
    v213[31] = v19;
    v20 = &v213[8];
    if (v19)
      goto LABEL_28;
LABEL_29:
    v20[v19] = 0;
    v213[32] = 1;
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v15 >= 0x17)
    {
      v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v25 = v15 | 7;
      v26 = v25 + 1;
      v23 = operator new(v25 + 1);
      *(_QWORD *)&v213[48] = v15;
      *(_QWORD *)&v213[56] = v26 | 0x8000000000000000;
      *(_QWORD *)&v213[40] = v23;
    }
    else
    {
      v213[63] = v15;
      v23 = &v213[40];
      if (!v15)
      {
        v213[40] = 0;
        LOBYTE(v214) = 1;
        v24 = *(NSObject **)v213;
        if ((v213[63] & 0x80000000) == 0)
          goto LABEL_33;
        goto LABEL_39;
      }
    }
    memmove(v23, v13, v15);
    v23[v15] = 0;
    LOBYTE(v214) = 1;
    v24 = *(NSObject **)v213;
    if ((v213[63] & 0x80000000) == 0)
    {
LABEL_33:
      v3 = a3;
      if (!v213[32])
        goto LABEL_42;
      goto LABEL_40;
    }
LABEL_39:
    operator delete(*(void **)&v213[40]);
    v3 = a3;
    if (!v213[32])
      goto LABEL_42;
LABEL_40:
    if ((v213[31] & 0x80000000) != 0)
      operator delete(*(void **)&v213[8]);
LABEL_42:
    if (*(_QWORD *)v213)
      os_release(*(void **)v213);
    if (!v9 || !*(_QWORD *)(v9 + 24))
    {
      os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
      v33 = *((_DWORD *)v6 + 4);
      v34 = *((_QWORD *)v6 + 4);
      v35 = *((_QWORD *)v6 + 5);
      v36 = *((_QWORD *)v6 + 6);
      *(_DWORD *)v213 = 68159234;
      *(_DWORD *)&v213[4] = v3;
      *(_WORD *)&v213[8] = 2080;
      *(_QWORD *)&v213[10] = a2;
      *(_WORD *)&v213[18] = 1024;
      *(_DWORD *)&v213[20] = v33;
      *(_WORD *)&v213[24] = 2048;
      *(double *)&v213[26] = v11;
      *(_WORD *)&v213[34] = 2048;
      *(_QWORD *)&v213[36] = v34;
      *(_WORD *)&v213[44] = 2048;
      *(_QWORD *)&v213[46] = v35;
      *(_WORD *)&v213[54] = 2048;
      *(_QWORD *)&v213[56] = v36;
      v37 = (void *)_os_log_send_and_compose_impl();
      v4 = a1;
      if (!v37)
        goto LABEL_114;
      free(v37);
      if (!v7)
        goto LABEL_119;
      goto LABEL_115;
    }
    v27 = _os_log_pack_size();
    v28 = operator new(v27, (std::align_val_t)8uLL);
    v29 = (_QWORD *)operator new();
    *v29 = &off_24C9ABB80;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v28;
    __p[0] = v28;
    __p[1] = v28;
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v29;
    v198 = 0;
    v199 = 0;
    v30 = strlen(a2);
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v31 = v30;
    if (v30 >= 0x17)
    {
      v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v38 = v30 | 7;
      v39 = v38 + 1;
      v32 = operator new(v38 + 1);
      *(_QWORD *)&v210[8] = v31;
      *(_QWORD *)&v210[16] = v39 | 0x8000000000000000;
      *(_QWORD *)v210 = v32;
LABEL_56:
      memcpy(v32, a2, v31);
      goto LABEL_57;
    }
    v210[23] = v30;
    v32 = v210;
    if (v30)
      goto LABEL_56;
LABEL_57:
    v32[v31] = 0;
    v40 = *(_QWORD *)v210;
    *(_QWORD *)v216 = *(_QWORD *)&v210[8];
    *(_QWORD *)&v216[7] = *(_QWORD *)&v210[15];
    v41 = v210[23];
    v42 = operator new(0x40uLL);
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = off_24C9FF008;
    *v42 = &off_24C9FEFB8;
    v43 = *(_QWORD *)v216;
    v42[4] = v40;
    v42[5] = v43;
    *(_QWORD *)((char *)v42 + 47) = *(_QWORD *)&v216[7];
    *((_BYTE *)v42 + 55) = v41;
    *(_QWORD *)v216 = 0;
    *(_QWORD *)&v216[7] = 0;
    v44 = (std::__shared_weak_count *)v199;
    v198 = (char *)(v42 + 3);
    v199 = (const char *)v42;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    *(_OWORD *)v213 = *(_OWORD *)__p;
    v47 = v198;
    *(_QWORD *)&v213[16] = rep;
    if (rep)
    {
      v48 = (unint64_t *)(rep + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = (std::__shared_weak_count *)v199;
    *(_QWORD *)&v213[24] = v47;
    *(_QWORD *)&v213[32] = v199;
    if (v199)
    {
      v51 = (unint64_t *)(v199 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      *(_QWORD *)&v213[40] = v47;
      do
        v53 = __ldaxr(v51);
      while (__stlxr(v53 - 1, v51));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    else
    {
      *(_QWORD *)&v213[40] = v47;
    }
    v54 = (std::__shared_weak_count *)rep;
    if (rep)
    {
      v55 = (unint64_t *)(rep + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = *(_QWORD *)v213;
    if (*(char *)(*(_QWORD *)&v213[40] + 31) >= 0)
      v58 = *(_QWORD *)&v213[40] + 8;
    else
      v58 = *(_QWORD *)(*(_QWORD *)&v213[40] + 8);
    v59 = _os_log_pack_fill();
    v60 = *((_DWORD *)v6 + 4);
    v61 = *((_QWORD *)v6 + 4);
    v62 = *((_QWORD *)v6 + 5);
    v63 = *((_QWORD *)v6 + 6);
    *(_DWORD *)v59 = 68159234;
    *(_DWORD *)(v59 + 4) = v3;
    *(_WORD *)(v59 + 8) = 2080;
    *(_QWORD *)(v59 + 10) = v58;
    *(_WORD *)(v59 + 18) = 1024;
    *(_DWORD *)(v59 + 20) = v60;
    *(_WORD *)(v59 + 24) = 2048;
    *(double *)(v59 + 26) = v11;
    *(_WORD *)(v59 + 34) = 2048;
    *(_QWORD *)(v59 + 36) = v61;
    *(_WORD *)(v59 + 44) = 2048;
    *(_QWORD *)(v59 + 46) = v62;
    *(_WORD *)(v59 + 54) = 2048;
    *(_QWORD *)(v59 + 56) = v63;
    v64 = (char *)operator new();
    v65 = *(unsigned __int8 *)(v12 + 39);
    v66 = v191;
    if ((v65 & 0x80u) != 0)
    {
      v66 = *(const char **)(v12 + 16);
      v65 = *(_QWORD *)(v12 + 24);
    }
    *(_QWORD *)v64 = v57;
    *(_OWORD *)(v64 + 8) = *(_OWORD *)&v213[8];
    *(_QWORD *)&v213[8] = 0;
    *(_QWORD *)&v213[16] = 0;
    *(_OWORD *)(v64 + 24) = *(_OWORD *)&v213[24];
    *(_QWORD *)&v213[24] = 0;
    *(_QWORD *)&v213[32] = 0;
    *((_QWORD *)v64 + 5) = v66;
    *((_QWORD *)v64 + 6) = v65;
    v64[56] = 2;
    *(_QWORD *)v210 = 0;
    __p[0] = v64;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), __p);
    v67 = __p[0];
    __p[0] = 0;
    if (v67)
    {
      v68 = (std::__shared_weak_count *)*((_QWORD *)v67 + 4);
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = (std::__shared_weak_count *)*((_QWORD *)v67 + 2);
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      MEMORY[0x212BC6398](v67, 0x10F0C40B62ED6C6);
      v74 = *(_QWORD *)v210;
      *(_QWORD *)v210 = 0;
      if (v74)
      {
        v75 = *(std::__shared_weak_count **)(v74 + 32);
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v78 = *(std::__shared_weak_count **)(v74 + 16);
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        MEMORY[0x212BC6398](v74, 0x10F0C40B62ED6C6);
      }
    }
    v81 = *(std::__shared_weak_count **)&v213[32];
    v4 = a1;
    if (!*(_QWORD *)&v213[32])
      goto LABEL_110;
    v82 = (unint64_t *)(*(_QWORD *)&v213[32] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
      v84 = *(std::__shared_weak_count **)&v213[16];
      if (!*(_QWORD *)&v213[16])
        goto LABEL_114;
    }
    else
    {
LABEL_110:
      v84 = *(std::__shared_weak_count **)&v213[16];
      if (!*(_QWORD *)&v213[16])
        goto LABEL_114;
    }
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (v86)
    {
LABEL_114:
      if (!v7)
        goto LABEL_119;
      goto LABEL_115;
    }
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
    if (!v7)
      goto LABEL_119;
LABEL_115:
    if (*((_BYTE *)v6 + 64))
    {
      v87 = v6[4];
      v88 = v6[7] * v87;
    }
    else
    {
      v88 = v6[3];
      v87 = v6[4];
    }
    sub_20E8C003C((uint64_t)&v205, "[%.*s] Camera %d: fx_b: %f, fy_b: %f, cx_b: %f, cy_b: %f", a3, a2, *((_DWORD *)v6 + 4), v88, v87, v6[5], v6[6]);
    sub_20E863570((uint64_t)&v205);
LABEL_119:
    sub_20E863570((uint64_t)&v205);
    v89 = v209;
    if (v209)
    {
      v90 = (unint64_t *)&v209->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
LABEL_3:
    v6 = *(double **)v6;
  }
  while (v6);
  v5 = *v4;
LABEL_134:
  v92 = v5 + 56;
  v93 = *(_QWORD *)(v5 + 56);
  if (v93)
  {
    do
    {
      v94 = v93;
      v93 = *(_QWORD *)(v93 + 8);
    }
    while (v93);
  }
  else
  {
    do
    {
      v94 = *(_QWORD *)(v92 + 16);
      v10 = *(_QWORD *)v94 == v92;
      v92 = v94;
    }
    while (v10);
  }
  v95 = *(uint64_t **)(v5 + 336);
  if (v95)
  {
    v96 = *(_QWORD *)(v94 + 32);
    v97 = *(_DWORD *)(v94 + 40);
    v187 = v3;
    __dst = v97;
    while (1)
    {
      v98 = *((_DWORD *)v95 + 4);
      v100 = (uint64_t *)v4[5];
      v99 = (uint64_t *)v4[6];
      if (v99 != v100)
      {
        v101 = ((char *)v99 - (char *)v100) >> 4;
        while (1)
        {
          v102 = v101 >> 1;
          v103 = &v100[2 * (v101 >> 1)];
          v104 = *v103;
          v105 = *(_DWORD *)(*v103 + 16);
          v106 = v105 >= v98;
          if (v105 != v98)
            goto LABEL_149;
          if (*(_QWORD *)v104 >= v96)
            break;
LABEL_143:
          v100 = v103 + 2;
          v102 = v101 + ~v102;
LABEL_144:
          v101 = v102;
          if (!v102)
            goto LABEL_152;
        }
        if (*(_QWORD *)v104 != v96)
          goto LABEL_144;
        v106 = *(_DWORD *)(v104 + 8) >= v97;
LABEL_149:
        if (v106)
          goto LABEL_144;
        goto LABEL_143;
      }
LABEL_152:
      if (v100 != v99)
      {
        v107 = *v100;
        if (*(_DWORD *)(*v100 + 16) == v98 && *(_QWORD *)v107 == v96 && *(_DWORD *)(v107 + 8) == v97)
          v99 = v100;
      }
      v108 = *(_DWORD **)(*v99 + 32);
      v109 = v108[248];
      if (v109 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v109 = v108[248];
      }
      if (!v109)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      memmove(&v205, v108, 0x48uLL);
      sub_20F13B958((uint64_t)(v95 + 3), (double *)&v205, (uint64_t)v213);
      v207 = *(_OWORD *)&v213[32];
      v208 = *(_OWORD *)&v213[48];
      v209 = v214;
      v205 = *(_OWORD *)v213;
      v206 = *(_OWORD *)&v213[16];
      sub_20F3A7B00(&v204);
      if (**(int **)(v204 + 56) <= 3)
      {
        v110 = *(unsigned __int8 *)(v204 + 72);
        v111 = sub_20E8C31DC(v204, "OSLogSurrogateAppender", 1, 0);
        v112 = v111;
        if (v110 || v111)
          break;
      }
LABEL_140:
      v95 = (uint64_t *)*v95;
      if (!v95)
        return;
    }
    __p[0] = &v204;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v198) = 3;
    v199 = "unknown file";
    v200 = 616;
    v201 = "unknown function";
    v202 = 0;
    v203 = 0;
    v113 = *(_QWORD *)__p[0];
    v114 = (const char *)(*(_QWORD *)__p[0] + 16);
    v190 = v114;
    v192 = *(_QWORD *)__p[0];
    if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
    {
      v114 = *(const char **)(v113 + 16);
      v115 = *(_QWORD *)(v113 + 24);
      v117 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v117 & 1) == 0)
      {
LABEL_278:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v210);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v210);
          if ((_BYTE)v211 && (v210[23] & 0x80000000) != 0)
            operator delete(*(void **)v210);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
      }
    }
    else
    {
      v115 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
      v116 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v116 & 1) == 0)
        goto LABEL_278;
    }
    if (byte_254A4A4F8[23] >= 0)
      v118 = byte_254A4A4F8;
    else
      v118 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v119 = byte_254A4A4F8[23];
    else
      v119 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v213 = os_log_create(v118, v114);
    if (v119 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v119 >= 0x17)
    {
      v121 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v119 | 7) != 0x17)
        v121 = v119 | 7;
      v122 = v121 + 1;
      v120 = operator new(v121 + 1);
      *(_QWORD *)&v213[16] = v119;
      *(_QWORD *)&v213[24] = v122 | 0x8000000000000000;
      *(_QWORD *)&v213[8] = v120;
    }
    else
    {
      v213[31] = v119;
      v120 = &v213[8];
      if (!v119)
      {
LABEL_182:
        v120[v119] = 0;
        v213[32] = 1;
        if (v115 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v115 >= 0x17)
        {
          v125 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v115 | 7) != 0x17)
            v125 = v115 | 7;
          v126 = v125 + 1;
          v123 = operator new(v125 + 1);
          *(_QWORD *)&v213[48] = v115;
          *(_QWORD *)&v213[56] = v126 | 0x8000000000000000;
          *(_QWORD *)&v213[40] = v123;
        }
        else
        {
          v213[63] = v115;
          v123 = &v213[40];
          if (!v115)
          {
            v213[40] = 0;
            LOBYTE(v214) = 1;
            v124 = *(NSObject **)v213;
            if ((v213[63] & 0x80000000) == 0)
              goto LABEL_186;
LABEL_192:
            operator delete(*(void **)&v213[40]);
            if (v213[32])
              goto LABEL_193;
            goto LABEL_195;
          }
        }
        memmove(v123, v114, v115);
        v123[v115] = 0;
        LOBYTE(v214) = 1;
        v124 = *(NSObject **)v213;
        if ((v213[63] & 0x80000000) != 0)
          goto LABEL_192;
LABEL_186:
        if (v213[32])
        {
LABEL_193:
          if ((v213[31] & 0x80000000) != 0)
            operator delete(*(void **)&v213[8]);
        }
LABEL_195:
        if (*(_QWORD *)v213)
          os_release(*(void **)v213);
        if (v112 && *(_QWORD *)(v112 + 24))
        {
          v127 = _os_log_pack_size();
          v128 = operator new(v127, (std::align_val_t)8uLL);
          v129 = (_QWORD *)operator new();
          *v129 = &off_24C9ABB80;
          v129[1] = 0;
          v129[2] = 0;
          v129[3] = v128;
          *(_QWORD *)v210 = v128;
          *(_QWORD *)&v210[8] = v128;
          *(_QWORD *)&v210[16] = v129;
          v211 = 0;
          v212 = 0;
          v130 = strlen(a2);
          if (v130 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v131 = v130;
          if (v130 >= 0x17)
          {
            v135 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v130 | 7) != 0x17)
              v135 = v130 | 7;
            v136 = v135 + 1;
            v132 = operator new(v135 + 1);
            *(_QWORD *)&v216[8] = v131;
            *(_QWORD *)&v216[16] = v136 | 0x8000000000000000;
            *(_QWORD *)v216 = v132;
          }
          else
          {
            v216[23] = v130;
            v132 = v216;
            if (!v130)
              goto LABEL_210;
          }
          memcpy(v132, a2, v131);
LABEL_210:
          v132[v131] = 0;
          v137 = *(_QWORD *)v216;
          v215[0] = *(_QWORD *)&v216[8];
          *(uint64_t *)((char *)v215 + 7) = *(_QWORD *)&v216[15];
          v138 = v216[23];
          v139 = operator new(0x40uLL);
          v139[1] = 0;
          v139[2] = 0;
          v139[3] = off_24C9FF008;
          *v139 = &off_24C9FEFB8;
          v140 = v215[0];
          v139[4] = v137;
          v139[5] = v140;
          *(_QWORD *)((char *)v139 + 47) = *(uint64_t *)((char *)v215 + 7);
          *((_BYTE *)v139 + 55) = v138;
          memset(v215, 0, 15);
          v141 = v212;
          v211 = (char *)(v139 + 3);
          v212 = (std::__shared_weak_count *)v139;
          if (v141)
          {
            v142 = (unint64_t *)&v141->__shared_owners_;
            do
              v143 = __ldaxr(v142);
            while (__stlxr(v143 - 1, v142));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          *(_OWORD *)v213 = *(_OWORD *)v210;
          v144 = v211;
          *(_QWORD *)&v213[16] = *(_QWORD *)&v210[16];
          if (*(_QWORD *)&v210[16])
          {
            v145 = (unint64_t *)(*(_QWORD *)&v210[16] + 8);
            do
              v146 = __ldxr(v145);
            while (__stxr(v146 + 1, v145));
          }
          v147 = v212;
          *(_QWORD *)&v213[24] = v144;
          *(_QWORD *)&v213[32] = v212;
          if (v212)
          {
            v148 = (unint64_t *)&v212->__shared_owners_;
            do
              v149 = __ldxr(v148);
            while (__stxr(v149 + 1, v148));
            *(_QWORD *)&v213[40] = v144;
            do
              v150 = __ldaxr(v148);
            while (__stlxr(v150 - 1, v148));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          else
          {
            *(_QWORD *)&v213[40] = v144;
          }
          v151 = *(std::__shared_weak_count **)&v210[16];
          if (*(_QWORD *)&v210[16])
          {
            v152 = (unint64_t *)(*(_QWORD *)&v210[16] + 8);
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 - 1, v152));
            if (!v153)
            {
              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
              std::__shared_weak_count::__release_weak(v151);
            }
          }
          v154 = *(_QWORD *)v213;
          if (*(char *)(*(_QWORD *)&v213[40] + 31) >= 0)
            v155 = *(_QWORD *)&v213[40] + 8;
          else
            v155 = *(_QWORD *)(*(_QWORD *)&v213[40] + 8);
          v156 = _os_log_pack_fill();
          v157 = *((_DWORD *)v95 + 4);
          v158 = v205;
          v159 = v206;
          v160 = v207;
          *(_DWORD *)v156 = 68159234;
          *(_DWORD *)(v156 + 4) = a3;
          *(_WORD *)(v156 + 8) = 2080;
          *(_QWORD *)(v156 + 10) = v155;
          *(_WORD *)(v156 + 18) = 1024;
          *(_DWORD *)(v156 + 20) = v157;
          *(_WORD *)(v156 + 24) = 2048;
          *(_QWORD *)(v156 + 26) = v158;
          *(_WORD *)(v156 + 34) = 2048;
          *(_QWORD *)(v156 + 36) = v160;
          *(_WORD *)(v156 + 44) = 2048;
          *(_QWORD *)(v156 + 46) = v159;
          *(_WORD *)(v156 + 54) = 2048;
          *(_QWORD *)(v156 + 56) = *((_QWORD *)&v160 + 1);
          v161 = operator new();
          v162 = *(unsigned __int8 *)(v192 + 39);
          v163 = v190;
          if ((v162 & 0x80u) != 0)
          {
            v163 = *(const char **)(v192 + 16);
            v162 = *(_QWORD *)(v192 + 24);
          }
          *(_QWORD *)v161 = v154;
          *(_OWORD *)(v161 + 8) = *(_OWORD *)&v213[8];
          *(_QWORD *)&v213[8] = 0;
          *(_QWORD *)&v213[16] = 0;
          *(_OWORD *)(v161 + 24) = *(_OWORD *)&v213[24];
          *(_QWORD *)&v213[24] = 0;
          *(_QWORD *)&v213[32] = 0;
          *(_QWORD *)(v161 + 40) = v163;
          *(_QWORD *)(v161 + 48) = v162;
          *(_BYTE *)(v161 + 56) = 1;
          *(_QWORD *)v216 = 0;
          *(_QWORD *)v210 = v161;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v112 + 24) + 40))(*(_QWORD *)(v112 + 24), v210);
          v4 = a1;
          v97 = __dst;
          v164 = *(_QWORD *)v210;
          *(_QWORD *)v210 = 0;
          if (v164)
          {
            v165 = *(std::__shared_weak_count **)(v164 + 32);
            if (v165)
            {
              v166 = (unint64_t *)&v165->__shared_owners_;
              do
                v167 = __ldaxr(v166);
              while (__stlxr(v167 - 1, v166));
              if (!v167)
              {
                ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                std::__shared_weak_count::__release_weak(v165);
              }
            }
            v168 = *(std::__shared_weak_count **)(v164 + 16);
            if (v168)
            {
              v169 = (unint64_t *)&v168->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            MEMORY[0x212BC6398](v164, 0x10F0C40B62ED6C6);
            v171 = *(_QWORD *)v216;
            *(_QWORD *)v216 = 0;
            if (v171)
            {
              v172 = *(std::__shared_weak_count **)(v171 + 32);
              if (v172)
              {
                v173 = (unint64_t *)&v172->__shared_owners_;
                do
                  v174 = __ldaxr(v173);
                while (__stlxr(v174 - 1, v173));
                if (!v174)
                {
                  ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                  std::__shared_weak_count::__release_weak(v172);
                }
              }
              v175 = *(std::__shared_weak_count **)(v171 + 16);
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              MEMORY[0x212BC6398](v171, 0x10F0C40B62ED6C6);
            }
          }
          v178 = *(std::__shared_weak_count **)&v213[32];
          if (*(_QWORD *)&v213[32])
          {
            v179 = (unint64_t *)(*(_QWORD *)&v213[32] + 8);
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
              v181 = *(std::__shared_weak_count **)&v213[16];
              if (*(_QWORD *)&v213[16])
                goto LABEL_264;
              goto LABEL_267;
            }
          }
          v181 = *(std::__shared_weak_count **)&v213[16];
          if (!*(_QWORD *)&v213[16])
            goto LABEL_267;
LABEL_264:
          v182 = (unint64_t *)&v181->__shared_owners_;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (v183)
          {
LABEL_267:
            if (v110)
              goto LABEL_268;
LABEL_269:
            sub_20E863570((uint64_t)__p);
            v184 = v203;
            if (v203)
            {
              v185 = (unint64_t *)&v203->__shared_owners_;
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                std::__shared_weak_count::__release_weak(v184);
              }
            }
            goto LABEL_140;
          }
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
          if (!v110)
            goto LABEL_269;
        }
        else
        {
          os_log_type_enabled(v124, OS_LOG_TYPE_INFO);
          v133 = *((_DWORD *)v95 + 4);
          *(_DWORD *)v213 = 68159234;
          *(_DWORD *)&v213[4] = a3;
          *(_WORD *)&v213[8] = 2080;
          *(_QWORD *)&v213[10] = a2;
          *(_WORD *)&v213[18] = 1024;
          *(_DWORD *)&v213[20] = v133;
          *(_WORD *)&v213[24] = 2048;
          *(_QWORD *)&v213[26] = v205;
          *(_WORD *)&v213[34] = 2048;
          *(_QWORD *)&v213[36] = v207;
          *(_WORD *)&v213[44] = 2048;
          *(_QWORD *)&v213[46] = v206;
          *(_WORD *)&v213[54] = 2048;
          *(_QWORD *)&v213[56] = *((_QWORD *)&v207 + 1);
          v134 = (void *)_os_log_send_and_compose_impl();
          v4 = a1;
          v97 = __dst;
          if (!v134)
            goto LABEL_267;
          free(v134);
          if (!v110)
            goto LABEL_269;
        }
LABEL_268:
        sub_20E8C003C((uint64_t)__p, "[%.*s] Camera %d: Fx: %f, Fy: %f, Cx: %f, Cy: %f", v187, a2, *((_DWORD *)v95 + 4), *(double *)&v205, *(double *)&v207, *(double *)&v206, *((double *)&v207 + 1));
        sub_20E863570((uint64_t)__p);
        goto LABEL_269;
      }
    }
    memmove(v120, v118, v119);
    goto LABEL_182;
  }
}

void sub_20F3650E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a61)
  {
    if (a60 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F365128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a41)
  {
    if (a40 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_20F365168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_20E86E658((uint64_t)&a55);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F365184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F3651A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_20E86E658((uint64_t)&a55);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F3651BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  sub_20E86E8C4(&a55);
  sub_20E86E8C4((uint64_t *)(v55 - 144));
  sub_20E86E658(v55 - 240);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F3651E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  sub_20E86E658(v35 - 240);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F365204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  int v56;

  if (v56 < 0)
    operator delete(v55);
  sub_20E86E658((uint64_t)&a55);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F36522C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  MEMORY[0x212BC6398](v35, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F365258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F36526C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F365280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F36529C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  sub_20E86E8C4(&a35);
  sub_20E86E8C4(&a55);
  sub_20E86E658(v55 - 240);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F3652C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  sub_20E86E658(v45 - 240);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F3652E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;
  int v46;

  if (v46 < 0)
    operator delete(v45);
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F36530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  MEMORY[0x212BC6398](v45, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F365338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  void *v37;

  if (*(char *)(v35 - 209) < 0)
    operator delete(*(void **)(v35 - 232));
  v37 = *(void **)(v35 - 240);
  if (v37)
    os_release(v37);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F365420()
{
  JUMPOUT(0x20F36542CLL);
}

unint64_t sub_20F365434(unint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  size_t v11;
  void **v12;
  unint64_t v13;
  const void **v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  size_t v36;
  size_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v95;
  char *__s;
  _QWORD v97[3];
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *__dst[2];
  int64_t v105;
  _QWORD v106[2];
  _QWORD v107[3];
  _QWORD v108[3];
  uint64_t v109;
  unint64_t v110;
  void *__p;
  char v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  char *v119;
  std::__shared_weak_count *v120;
  _QWORD *v121;
  __int128 v122;
  _BYTE v123[24];
  __int128 v124;
  void *v125[2];
  unint64_t v126;
  char v127;
  _QWORD v128[5];

  v128[2] = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v3 = (_QWORD *)result;
    v92 = *MEMORY[0x24BEDB7F0];
    v90 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v91 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v89 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      sub_20F3A7B00(&v116);
      result = v116;
      if (**(int **)(v116 + 56) <= 3)
      {
        v4 = *(unsigned __int8 *)(v116 + 72);
        v5 = *(_BYTE *)(v116 + 72) != 0;
        result = sub_20E8C31DC(v116, "OSLogSurrogateAppender", 1, 0);
        v6 = result;
        if (((result == 0) & ~v5) == 0)
          break;
      }
LABEL_4:
      v3 = (_QWORD *)*v3;
      if (!v3)
        return result;
    }
    sub_20E863438((uint64_t)v106);
    v7 = sub_20E86A980(v107, (uint64_t)"[", 1);
    v8 = sub_20E86A980(v7, a2, a3);
    sub_20E86A980(v8, (uint64_t)"] Camera ", 9);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = sub_20E86A980(v9, (uint64_t)": D = ", 6);
    *(_QWORD *)v123 = v3 + 3;
    sub_20F3A8964(v10, (_OWORD **)v123);
    if ((v114 & 0x10) != 0)
    {
      v13 = v113;
      v14 = (const void **)&v109;
      if (v113 < v110)
      {
        v113 = v110;
        v13 = v110;
        v14 = (const void **)&v109;
      }
    }
    else
    {
      if ((v114 & 8) == 0)
      {
        v11 = 0;
        HIBYTE(v105) = 0;
        v12 = __dst;
        goto LABEL_21;
      }
      v13 = v108[2];
      v14 = (const void **)v108;
    }
    v15 = *v14;
    v11 = v13 - (_QWORD)*v14;
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v11 >= 0x17)
    {
      v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v16 = v11 | 7;
      v17 = v16 + 1;
      v12 = (void **)operator new(v16 + 1);
      __dst[1] = (void *)v11;
      v105 = v17 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v105) = v13 - *(_BYTE *)v14;
      v12 = __dst;
      if (!v11)
      {
LABEL_21:
        *((_BYTE *)v12 + v11) = 0;
        v97[0] = &v116;
        v97[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v97[2] = std::chrono::system_clock::now().__d_.__rep_;
        v98 = 3;
        v99 = "unknown file";
        v100 = 643;
        v101 = "unknown function";
        v102 = 0;
        v103 = 0;
        if (v105 >= 0)
          v18 = __dst;
        else
          v18 = (void **)__dst[0];
        v19 = *(_QWORD *)v97[0];
        v20 = (const char *)(*(_QWORD *)v97[0] + 16);
        v95 = v20;
        __s = (char *)v18;
        if (*(char *)(*(_QWORD *)v97[0] + 39) < 0)
        {
          v20 = *(const char **)(v19 + 16);
          v21 = *(_QWORD *)(v19 + 24);
          v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v23 & 1) != 0)
            goto LABEL_28;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)v97[0] + 39);
          v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v22 & 1) != 0)
            goto LABEL_28;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v117);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v117);
          if ((_BYTE)v119 && SHIBYTE(v118) < 0)
            operator delete((void *)v117);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_28:
        if (byte_254A4A4F8[23] >= 0)
          v24 = byte_254A4A4F8;
        else
          v24 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v25 = byte_254A4A4F8[23];
        else
          v25 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v123 = os_log_create(v24, v20);
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v25 >= 0x17)
        {
          v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v27 = v25 | 7;
          v28 = v27 + 1;
          v26 = operator new(v27 + 1);
          *(_QWORD *)&v123[16] = v25;
          *(_QWORD *)&v124 = v28 | 0x8000000000000000;
          *(_QWORD *)&v123[8] = v26;
        }
        else
        {
          BYTE7(v124) = v25;
          v26 = &v123[8];
          if (!v25)
          {
LABEL_42:
            v26[v25] = 0;
            BYTE8(v124) = 1;
            if (v21 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v21 >= 0x17)
            {
              v31 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v21 | 7) != 0x17)
                v31 = v21 | 7;
              v32 = v31 + 1;
              v29 = (void **)operator new(v31 + 1);
              v125[1] = (void *)v21;
              v126 = v32 | 0x8000000000000000;
              v125[0] = v29;
            }
            else
            {
              HIBYTE(v126) = v21;
              v29 = v125;
              if (!v21)
              {
                LOBYTE(v125[0]) = 0;
                v127 = 1;
                v30 = *(NSObject **)v123;
                if ((SHIBYTE(v126) & 0x80000000) == 0)
                  goto LABEL_46;
                goto LABEL_52;
              }
            }
            memmove(v29, v20, v21);
            *((_BYTE *)v29 + v21) = 0;
            v127 = 1;
            v30 = *(NSObject **)v123;
            if ((SHIBYTE(v126) & 0x80000000) == 0)
            {
LABEL_46:
              if (!BYTE8(v124))
                goto LABEL_55;
              goto LABEL_53;
            }
LABEL_52:
            operator delete(v125[0]);
            if (!BYTE8(v124))
              goto LABEL_55;
LABEL_53:
            if (SBYTE7(v124) < 0)
              operator delete(*(void **)&v123[8]);
LABEL_55:
            if (*(_QWORD *)v123)
              os_release(*(void **)v123);
            if (!v6 || !*(_QWORD *)(v6 + 24))
            {
              os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
              *(_DWORD *)v123 = 136315138;
              *(_QWORD *)&v123[4] = __s;
              v39 = (void *)_os_log_send_and_compose_impl();
              if (!v39)
                goto LABEL_127;
              free(v39);
              if (!v4)
                goto LABEL_131;
              goto LABEL_128;
            }
            v33 = _os_log_pack_size();
            v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
            v35 = (std::__shared_weak_count *)operator new();
            v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v35->__shared_owners_ = 0;
            v35->__shared_weak_owners_ = 0;
            v35[1].__vftable = v34;
            *(_QWORD *)&v117 = v34;
            *((_QWORD *)&v117 + 1) = v34;
            v118 = v35;
            v119 = 0;
            v120 = 0;
            v36 = strlen(__s);
            if (v36 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v37 = v36;
            if (v36 >= 0x17)
            {
              v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v36 | 7) != 0x17)
                v40 = v36 | 7;
              v41 = v40 + 1;
              v38 = operator new(v40 + 1);
              *(_QWORD *)&v122 = v37;
              *((_QWORD *)&v122 + 1) = v41 | 0x8000000000000000;
              v121 = v38;
            }
            else
            {
              HIBYTE(v122) = v36;
              v38 = &v121;
              if (!v36)
              {
LABEL_70:
                *((_BYTE *)v38 + v37) = 0;
                v42 = v121;
                v128[0] = v122;
                *(_QWORD *)((char *)v128 + 7) = *(_QWORD *)((char *)&v122 + 7);
                v43 = HIBYTE(v122);
                v44 = operator new(0x38uLL);
                v44[1] = 0;
                v44[2] = 0;
                v44[3] = off_24C9ABC20;
                *v44 = &off_24C9ABBD0;
                v45 = v128[0];
                v44[4] = v42;
                v44[5] = v45;
                *(_QWORD *)((char *)v44 + 47) = *(_QWORD *)((char *)v128 + 7);
                *((_BYTE *)v44 + 55) = v43;
                v128[0] = 0;
                *(_QWORD *)((char *)v128 + 7) = 0;
                v46 = v120;
                v119 = (char *)(v44 + 3);
                v120 = (std::__shared_weak_count *)v44;
                if (v46)
                {
                  p_shared_owners = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(p_shared_owners);
                  while (__stlxr(v48 - 1, p_shared_owners));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                *(_OWORD *)v123 = v117;
                v49 = v119;
                *(_QWORD *)&v123[16] = v118;
                if (v118)
                {
                  v50 = (unint64_t *)&v118->__shared_owners_;
                  do
                    v51 = __ldxr(v50);
                  while (__stxr(v51 + 1, v50));
                }
                v52 = v120;
                *(_QWORD *)&v124 = v49;
                *((_QWORD *)&v124 + 1) = v120;
                if (v120)
                {
                  v53 = (unint64_t *)&v120->__shared_owners_;
                  do
                    v54 = __ldxr(v53);
                  while (__stxr(v54 + 1, v53));
                  v125[0] = v49;
                  do
                    v55 = __ldaxr(v53);
                  while (__stlxr(v55 - 1, v53));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                }
                else
                {
                  v125[0] = v49;
                }
                v56 = v118;
                if (v118)
                {
                  v57 = (unint64_t *)&v118->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                v59 = *(_QWORD *)v123;
                if (*((char *)v125[0] + 31) >= 0)
                  v60 = (char *)v125[0] + 8;
                else
                  v60 = (char *)*((_QWORD *)v125[0] + 1);
                v61 = _os_log_pack_fill();
                *(_DWORD *)v61 = 136315138;
                *(_QWORD *)(v61 + 4) = v60;
                v62 = operator new();
                v63 = *(unsigned __int8 *)(v19 + 39);
                v64 = v95;
                if ((v63 & 0x80u) != 0)
                {
                  v64 = *(const char **)(v19 + 16);
                  v63 = *(_QWORD *)(v19 + 24);
                }
                *(_QWORD *)v62 = v59;
                *(_OWORD *)(v62 + 8) = *(_OWORD *)&v123[8];
                *(_QWORD *)&v123[8] = 0;
                *(_QWORD *)&v123[16] = 0;
                *(_OWORD *)(v62 + 24) = v124;
                v124 = 0uLL;
                *(_QWORD *)(v62 + 40) = v64;
                *(_QWORD *)(v62 + 48) = v63;
                *(_BYTE *)(v62 + 56) = 1;
                v121 = 0;
                *(_QWORD *)&v117 = v62;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v117);
                v65 = v117;
                *(_QWORD *)&v117 = 0;
                if (v65)
                {
                  v66 = *(std::__shared_weak_count **)(v65 + 32);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldaxr(v67);
                    while (__stlxr(v68 - 1, v67));
                    if (!v68)
                    {
                      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                      std::__shared_weak_count::__release_weak(v66);
                    }
                  }
                  v69 = *(std::__shared_weak_count **)(v65 + 16);
                  if (v69)
                  {
                    v70 = (unint64_t *)&v69->__shared_owners_;
                    do
                      v71 = __ldaxr(v70);
                    while (__stlxr(v71 - 1, v70));
                    if (!v71)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  MEMORY[0x212BC6398](v65, 0x10F0C40B62ED6C6);
                  v72 = v121;
                  v121 = 0;
                  if (v72)
                  {
                    v73 = (std::__shared_weak_count *)v72[4];
                    if (v73)
                    {
                      v74 = (unint64_t *)&v73->__shared_owners_;
                      do
                        v75 = __ldaxr(v74);
                      while (__stlxr(v75 - 1, v74));
                      if (!v75)
                      {
                        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                        std::__shared_weak_count::__release_weak(v73);
                      }
                    }
                    v76 = (std::__shared_weak_count *)v72[2];
                    if (v76)
                    {
                      v77 = (unint64_t *)&v76->__shared_owners_;
                      do
                        v78 = __ldaxr(v77);
                      while (__stlxr(v78 - 1, v77));
                      if (!v78)
                      {
                        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                        std::__shared_weak_count::__release_weak(v76);
                      }
                    }
                    MEMORY[0x212BC6398](v72, 0x10F0C40B62ED6C6);
                  }
                }
                v79 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
                if (!*((_QWORD *)&v124 + 1))
                  goto LABEL_123;
                v80 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                  v82 = *(std::__shared_weak_count **)&v123[16];
                  if (!*(_QWORD *)&v123[16])
                    goto LABEL_127;
                }
                else
                {
LABEL_123:
                  v82 = *(std::__shared_weak_count **)&v123[16];
                  if (!*(_QWORD *)&v123[16])
                    goto LABEL_127;
                }
                v83 = (unint64_t *)&v82->__shared_owners_;
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (v84)
                {
LABEL_127:
                  if (!v4)
                    goto LABEL_131;
                  goto LABEL_128;
                }
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
                if (!v4)
                  goto LABEL_131;
LABEL_128:
                v85 = (const char *)__dst;
                if (v105 < 0)
                  v85 = (const char *)__dst[0];
                sub_20E8C003C((uint64_t)v97, "%s", v85);
                sub_20E863570((uint64_t)v97);
LABEL_131:
                sub_20E863570((uint64_t)v97);
                v86 = v103;
                if (!v103)
                  goto LABEL_135;
                v87 = (unint64_t *)&v103->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                  if ((SHIBYTE(v105) & 0x80000000) == 0)
                    goto LABEL_137;
                }
                else
                {
LABEL_135:
                  if ((SHIBYTE(v105) & 0x80000000) == 0)
                  {
LABEL_137:
                    v106[0] = v92;
                    *(_QWORD *)((char *)v106 + *(_QWORD *)(v92 - 24)) = v91;
                    v107[0] = v90;
                    v107[1] = v89;
                    if (v112 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    result = MEMORY[0x212BC6290](&v115);
                    goto LABEL_4;
                  }
                }
                operator delete(__dst[0]);
                goto LABEL_137;
              }
            }
            memcpy(v38, __s, v37);
            goto LABEL_70;
          }
        }
        memmove(v26, v24, v25);
        goto LABEL_42;
      }
    }
    memmove(v12, v15, v11);
    goto LABEL_21;
  }
  return result;
}

void sub_20F365F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  uint64_t v48;

  if (*(_BYTE *)(v48 - 232) && *(char *)(v48 - 233) < 0)
    operator delete(*(void **)(v48 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a33);
  if (a47 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a48);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_20F366120(uint64_t *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  const char *v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t *v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  float v54;
  unsigned int v55;
  double v56;
  double v57;
  double v58;
  float v59;
  float v60;
  double v61;
  double v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v85;
  float64x2_t v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  int32x4_t v94;
  int32x2_t v95;
  uint64_t v96;
  uint64_t v97;
  float64x2_t v98;
  float32x2_t v99;
  int8x16_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float32x2_t v103;
  int8x16_t v104;
  float64x2_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t *v111;
  int32x4_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v119;
  uint64_t v120;
  size_t v121;
  const char *v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  const char *v125;
  size_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  void **v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  size_t v134;
  std::__shared_weak_count_vtbl *v135;
  std::__shared_weak_count *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  float64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  float64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  float64_t v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unsigned __int8 v169;
  const char *v170;
  size_t v171;
  _BYTE *v172;
  unint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void **v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  NSObject *v183;
  size_t v184;
  std::__shared_weak_count_vtbl *v185;
  std::__shared_weak_count *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  float64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  float64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  void *v215;
  unint64_t *v216;
  unint64_t v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v222;
  size_t v223;
  const char *v224;
  unsigned __int8 v225;
  unsigned __int8 v226;
  const char *v227;
  size_t v228;
  _BYTE *v229;
  uint64_t v230;
  uint64_t v231;
  void **v232;
  NSObject *v233;
  uint64_t v234;
  uint64_t v235;
  size_t v236;
  std::__shared_weak_count_vtbl *v237;
  std::__shared_weak_count *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  float64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  float64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  float64_t v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  void *v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  _OWORD *v271;
  char *v272;
  char *v273;
  uint64_t *v274;
  char *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  char *v280;
  char *v281;
  char *v282;
  uint64_t v283;
  int v284;
  unint64_t *v285;
  unint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  uint64_t *v289;
  uint64_t *v290;
  uint64_t *v291;
  int v292;
  unint64_t v293;
  unint64_t v294;
  _QWORD *v296;
  _QWORD *v297;
  _QWORD *v298;
  _QWORD *v299;
  uint64_t v300;
  _QWORD *v301;
  _QWORD *v302;
  _QWORD *v303;
  uint64_t v304;
  size_t v305;
  const char *v306;
  unsigned __int8 v307;
  unsigned __int8 v308;
  const char *v309;
  size_t v310;
  _BYTE *v311;
  const char *v312;
  unint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  void **v318;
  NSObject *v319;
  uint64_t v320;
  uint64_t v321;
  size_t v322;
  std::__shared_weak_count_vtbl *v323;
  std::__shared_weak_count *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  const char *v333;
  float64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  float64_t v348;
  unint64_t *v349;
  unint64_t v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  void *v354;
  _QWORD *v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  uint64_t v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  uint64_t v366;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  size_t v371;
  uint64_t v372;
  _QWORD *__src;
  float64x2_t *__srca;
  const char *__srcb;
  _QWORD *__srcc;
  const char *__srcd;
  _QWORD v379[8];
  double v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  void *__p;
  uint64_t *v384;
  char *v385;
  float64x2_t v386;
  float64_t v387;
  double v388[2];
  double v389;
  float64x2_t v390;
  float64x2_t v391;
  int64x2_t v392;
  double v393;
  int64x2_t v394;
  double v395;
  const char *v396;
  uint64_t v397;
  std::__shared_weak_count *v398;
  float64x2_t v399;
  int64x2_t v400;
  float64x2_t v401;
  __int128 v402;
  double v403;
  _BYTE v404[24];
  float64x2_t v405;
  void **v406;
  size_t v407;
  unint64_t v408;
  char v409;
  uint64_t v410;

  v410 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v384 = 0;
  v385 = 0;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)*v2;
  v368 = v2 + 1;
  if ((_QWORD *)*v2 == v2 + 1)
  {
    v290 = 0;
    goto LABEL_427;
  }
  do
  {
    v4 = v3[6];
    v5 = (std::__shared_weak_count *)v3[7];
    v381 = v4;
    v382 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = *(_QWORD *)(v4 + 544);
    v9 = *(_QWORD *)(v4 + 536);
    if (v8 - v9 != 32 || (a2 & 1) == 0)
    {
      if (!*(_BYTE *)(v4 + 528))
        goto LABEL_287;
      if ((unint64_t)(v8 - v9) <= 0x3F)
      {
        sub_20F34CD58(&v391);
        if (**(int **)(*(_QWORD *)&v391.f64[0] + 56) > 4)
          goto LABEL_287;
        v10 = *(unsigned __int8 *)(*(_QWORD *)&v391.f64[0] + 72);
        v11 = sub_20E8C31DC(*(uint64_t *)&v391.f64[0], "OSLogSurrogateAppender", 1, 0);
        v12 = v11;
        if (!v10 && !v11)
          goto LABEL_287;
        *(_QWORD *)&v399.f64[0] = &v391;
        *(std::chrono::steady_clock::time_point *)&v399.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)v400.i8 = std::chrono::system_clock::now();
        v400.i32[2] = 4;
        *(_QWORD *)&v401.f64[0] = "unknown file";
        LODWORD(v401.f64[1]) = 194;
        *(_QWORD *)&v402 = "unknown function";
        *((_QWORD *)&v402 + 1) = 0;
        v403 = 0.0;
        v13 = **(_QWORD **)&v399.f64[0];
        if (*(char *)(**(_QWORD **)&v399.f64[0] + 39) < 0)
        {
          v15 = *(const char **)(v13 + 16);
          v14 = *(_QWORD *)(v13 + 24);
          v369 = **(_QWORD **)&v399.f64[0] + 16;
          __src = **(_QWORD ***)&v399.f64[0];
          v124 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v124 & 1) == 0)
          {
LABEL_412:
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v392);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v392);
              if (v394.i8[0] && SHIBYTE(v393) < 0)
                operator delete((void *)v392.i64[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
          }
        }
        else
        {
          v14 = *(unsigned __int8 *)(**(_QWORD **)&v399.f64[0] + 39);
          v15 = (const char *)(**(_QWORD **)&v399.f64[0] + 16);
          v369 = (uint64_t)v15;
          __src = **(_QWORD ***)&v399.f64[0];
          v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v16 & 1) == 0)
            goto LABEL_412;
        }
        if (byte_254A4A4F8[23] >= 0)
          v125 = byte_254A4A4F8;
        else
          v125 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v126 = byte_254A4A4F8[23];
        else
          v126 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v404 = os_log_create(v125, v15);
        if (v126 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v126 >= 0x17)
        {
          v128 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v126 | 7) != 0x17)
            v128 = v126 | 7;
          v129 = v128 + 1;
          v127 = operator new(v128 + 1);
          *(_QWORD *)&v404[16] = v126;
          *(_QWORD *)&v405.f64[0] = v129 | 0x8000000000000000;
          *(_QWORD *)&v404[8] = v127;
        }
        else
        {
          HIBYTE(v405.f64[0]) = v126;
          v127 = &v404[8];
          if (!v126)
          {
LABEL_136:
            v127[v126] = 0;
            LOBYTE(v405.f64[1]) = 1;
            if (v14 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v14 >= 0x17)
            {
              v132 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17)
                v132 = v14 | 7;
              v133 = v132 + 1;
              v130 = (void **)operator new(v132 + 1);
              v407 = v14;
              v408 = v133 | 0x8000000000000000;
              v406 = v130;
            }
            else
            {
              HIBYTE(v408) = v14;
              v130 = (void **)&v406;
              if (!v14)
              {
                LOBYTE(v406) = 0;
                v409 = 1;
                v131 = *(NSObject **)v404;
                if ((SHIBYTE(v408) & 0x80000000) == 0)
                  goto LABEL_140;
LABEL_146:
                operator delete(v406);
                if (LOBYTE(v405.f64[1]))
                  goto LABEL_147;
                goto LABEL_149;
              }
            }
            memmove(v130, v15, v14);
            *((_BYTE *)v130 + v14) = 0;
            v409 = 1;
            v131 = *(NSObject **)v404;
            if (SHIBYTE(v408) < 0)
              goto LABEL_146;
LABEL_140:
            if (LOBYTE(v405.f64[1]))
            {
LABEL_147:
              if (SHIBYTE(v405.f64[0]) < 0)
                operator delete(*(void **)&v404[8]);
            }
LABEL_149:
            if (*(_QWORD *)v404)
              os_release(*(void **)v404);
            if (v12 && *(_QWORD *)(v12 + 24))
            {
              v134 = _os_log_pack_size();
              v135 = (std::__shared_weak_count_vtbl *)operator new(v134, (std::align_val_t)8uLL);
              v136 = (std::__shared_weak_count *)operator new();
              v137 = v136;
              v136->__shared_owners_ = 0;
              v138 = (unint64_t *)&v136->__shared_owners_;
              v136->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v136->__shared_weak_owners_ = 0;
              v136[1].__vftable = v135;
              *(_QWORD *)v404 = v135;
              *(_QWORD *)&v404[8] = v135;
              *(_QWORD *)&v404[16] = v136;
              do
                v139 = __ldxr(v138);
              while (__stxr(v139 + 1, v138));
              v405 = 0uLL;
              v406 = 0;
              do
                v140 = __ldaxr(v138);
              while (__stlxr(v140 - 1, v138));
              if (!v140)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v137);
              }
              v141 = *(_QWORD *)v404;
              *(_WORD *)_os_log_pack_fill() = 0;
              v142 = operator new();
              v143 = *((unsigned __int8 *)__src + 39);
              v144 = v369;
              if ((v143 & 0x80u) != 0)
              {
                v144 = __src[2];
                v143 = __src[3];
              }
              *(_QWORD *)v142 = v141;
              *(_OWORD *)(v142 + 8) = *(_OWORD *)&v404[8];
              *(_QWORD *)&v404[8] = 0;
              *(_QWORD *)&v404[16] = 0;
              *(float64x2_t *)(v142 + 24) = v405;
              v405 = 0uLL;
              *(_QWORD *)(v142 + 40) = v144;
              *(_QWORD *)(v142 + 48) = v143;
              *(_BYTE *)(v142 + 56) = 16;
              v386.f64[0] = 0.0;
              v392.i64[0] = v142;
              (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), &v392);
              v145 = *(double *)v392.i64;
              v392.i64[0] = 0;
              if (v145 != 0.0)
              {
                v146 = *(std::__shared_weak_count **)(*(_QWORD *)&v145 + 32);
                if (v146)
                {
                  v147 = (unint64_t *)&v146->__shared_owners_;
                  do
                    v148 = __ldaxr(v147);
                  while (__stlxr(v148 - 1, v147));
                  if (!v148)
                  {
                    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                    std::__shared_weak_count::__release_weak(v146);
                  }
                }
                v149 = *(std::__shared_weak_count **)(*(_QWORD *)&v145 + 16);
                if (v149)
                {
                  v150 = (unint64_t *)&v149->__shared_owners_;
                  do
                    v151 = __ldaxr(v150);
                  while (__stlxr(v151 - 1, v150));
                  if (!v151)
                  {
                    ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                    std::__shared_weak_count::__release_weak(v149);
                  }
                }
                MEMORY[0x212BC6398](*(_QWORD *)&v145, 0x10F0C40B62ED6C6);
                v152 = v386.f64[0];
                v386.f64[0] = 0.0;
                if (v152 != 0.0)
                {
                  v153 = *(std::__shared_weak_count **)(*(_QWORD *)&v152 + 32);
                  if (v153)
                  {
                    v154 = (unint64_t *)&v153->__shared_owners_;
                    do
                      v155 = __ldaxr(v154);
                    while (__stlxr(v155 - 1, v154));
                    if (!v155)
                    {
                      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                      std::__shared_weak_count::__release_weak(v153);
                    }
                  }
                  v156 = *(std::__shared_weak_count **)(*(_QWORD *)&v152 + 16);
                  if (v156)
                  {
                    v157 = (unint64_t *)&v156->__shared_owners_;
                    do
                      v158 = __ldaxr(v157);
                    while (__stlxr(v158 - 1, v157));
                    if (!v158)
                    {
                      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                      std::__shared_weak_count::__release_weak(v156);
                    }
                  }
                  MEMORY[0x212BC6398](*(_QWORD *)&v152, 0x10F0C40B62ED6C6);
                }
              }
              v159 = v405.f64[1];
              if (*(_QWORD *)&v405.f64[1])
              {
                v160 = (unint64_t *)(*(_QWORD *)&v405.f64[1] + 8);
                do
                  v161 = __ldaxr(v160);
                while (__stlxr(v161 - 1, v160));
                if (!v161)
                {
                  (*(void (**)(float64_t))(**(_QWORD **)&v159 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v159));
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v159);
                }
              }
              v162 = *(std::__shared_weak_count **)&v404[16];
              if (*(_QWORD *)&v404[16])
              {
                v163 = (unint64_t *)(*(_QWORD *)&v404[16] + 8);
                do
                  v164 = __ldaxr(v163);
                while (__stlxr(v164 - 1, v163));
                if (!v164)
                {
                  ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                  std::__shared_weak_count::__release_weak(v162);
                }
              }
            }
            else
            {
              os_log_type_enabled(v131, OS_LOG_TYPE_ERROR);
              *(_WORD *)v404 = 0;
              v165 = (void *)_os_log_send_and_compose_impl();
              if (v165)
                free(v165);
            }
            if (v10)
            {
              sub_20E8C003C((uint64_t)&v399, "Input track length is less than 2");
              sub_20E863570((uint64_t)&v399);
            }
            sub_20E863570((uint64_t)&v399);
            v166 = *(std::__shared_weak_count **)&v403;
            if (v403 != 0.0)
            {
              v167 = (unint64_t *)(*(_QWORD *)&v403 + 8);
              do
                v168 = __ldaxr(v167);
              while (__stlxr(v168 - 1, v167));
              if (!v168)
              {
LABEL_202:
                ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                std::__shared_weak_count::__release_weak(v166);
              }
            }
LABEL_287:
            sub_20F34CD58(&v391);
            if (**(int **)(*(_QWORD *)&v391.f64[0] + 56) > 2)
              goto LABEL_376;
            v218 = *(unsigned __int8 *)(*(_QWORD *)&v391.f64[0] + 72);
            v219 = sub_20E8C31DC(*(uint64_t *)&v391.f64[0], "OSLogSurrogateAppender", 1, 0);
            v220 = v219;
            if (!v218 && v219 == 0)
              goto LABEL_376;
            *(_QWORD *)&v399.f64[0] = &v391;
            *(std::chrono::steady_clock::time_point *)&v399.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)v400.i8 = std::chrono::system_clock::now();
            v400.i32[2] = 2;
            *(_QWORD *)&v401.f64[0] = "unknown file";
            LODWORD(v401.f64[1]) = 1040;
            *(_QWORD *)&v402 = "unknown function";
            *((_QWORD *)&v402 + 1) = 0;
            v403 = 0.0;
            v222 = **(_QWORD **)&v399.f64[0];
            if (*(char *)(**(_QWORD **)&v399.f64[0] + 39) < 0)
            {
              v224 = *(const char **)(v222 + 16);
              v223 = *(_QWORD *)(v222 + 24);
              v372 = **(_QWORD **)&v399.f64[0] + 16;
              __srcc = **(_QWORD ***)&v399.f64[0];
              v226 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v226 & 1) == 0)
              {
LABEL_407:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v392);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v392);
                  if (v394.i8[0] && SHIBYTE(v393) < 0)
                    operator delete((void *)v392.i64[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v223 = *(unsigned __int8 *)(**(_QWORD **)&v399.f64[0] + 39);
              v224 = (const char *)(**(_QWORD **)&v399.f64[0] + 16);
              v372 = (uint64_t)v224;
              __srcc = **(_QWORD ***)&v399.f64[0];
              v225 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v225 & 1) == 0)
                goto LABEL_407;
            }
            if (byte_254A4A4F8[23] >= 0)
              v227 = byte_254A4A4F8;
            else
              v227 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v228 = byte_254A4A4F8[23];
            else
              v228 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v404 = os_log_create(v227, v224);
            if (v228 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v228 >= 0x17)
            {
              v230 = (v228 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v228 | 7) != 0x17)
                v230 = v228 | 7;
              v231 = v230 + 1;
              v229 = operator new(v230 + 1);
              *(_QWORD *)&v404[16] = v228;
              *(_QWORD *)&v405.f64[0] = v231 | 0x8000000000000000;
              *(_QWORD *)&v404[8] = v229;
            }
            else
            {
              HIBYTE(v405.f64[0]) = v228;
              v229 = &v404[8];
              if (!v228)
              {
LABEL_310:
                v229[v228] = 0;
                LOBYTE(v405.f64[1]) = 1;
                if (v223 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v223 >= 0x17)
                {
                  v234 = (v223 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v223 | 7) != 0x17)
                    v234 = v223 | 7;
                  v235 = v234 + 1;
                  v232 = (void **)operator new(v234 + 1);
                  v407 = v223;
                  v408 = v235 | 0x8000000000000000;
                  v406 = v232;
                }
                else
                {
                  HIBYTE(v408) = v223;
                  v232 = (void **)&v406;
                  if (!v223)
                  {
                    LOBYTE(v406) = 0;
                    v409 = 1;
                    v233 = *(NSObject **)v404;
                    if ((SHIBYTE(v408) & 0x80000000) == 0)
                      goto LABEL_314;
LABEL_320:
                    operator delete(v406);
                    if (LOBYTE(v405.f64[1]))
                      goto LABEL_321;
                    goto LABEL_323;
                  }
                }
                memmove(v232, v224, v223);
                *((_BYTE *)v232 + v223) = 0;
                v409 = 1;
                v233 = *(NSObject **)v404;
                if (SHIBYTE(v408) < 0)
                  goto LABEL_320;
LABEL_314:
                if (LOBYTE(v405.f64[1]))
                {
LABEL_321:
                  if (SHIBYTE(v405.f64[0]) < 0)
                    operator delete(*(void **)&v404[8]);
                }
LABEL_323:
                if (*(_QWORD *)v404)
                  os_release(*(void **)v404);
                if (v220 && *(_QWORD *)(v220 + 24))
                {
                  v236 = _os_log_pack_size();
                  v237 = (std::__shared_weak_count_vtbl *)operator new(v236, (std::align_val_t)8uLL);
                  v238 = (std::__shared_weak_count *)operator new();
                  v239 = v238;
                  v238->__shared_owners_ = 0;
                  v240 = (unint64_t *)&v238->__shared_owners_;
                  v238->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v238->__shared_weak_owners_ = 0;
                  v238[1].__vftable = v237;
                  *(_QWORD *)v404 = v237;
                  *(_QWORD *)&v404[8] = v237;
                  *(_QWORD *)&v404[16] = v238;
                  do
                    v241 = __ldxr(v240);
                  while (__stxr(v241 + 1, v240));
                  v405 = 0uLL;
                  v406 = 0;
                  do
                    v242 = __ldaxr(v240);
                  while (__stlxr(v242 - 1, v240));
                  if (!v242)
                  {
                    ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                    std::__shared_weak_count::__release_weak(v239);
                  }
                  v243 = *(_QWORD *)v404;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v244 = operator new();
                  v245 = *((unsigned __int8 *)__srcc + 39);
                  v246 = v372;
                  if ((v245 & 0x80u) != 0)
                  {
                    v246 = __srcc[2];
                    v245 = __srcc[3];
                  }
                  *(_QWORD *)v244 = v243;
                  *(_OWORD *)(v244 + 8) = *(_OWORD *)&v404[8];
                  *(_QWORD *)&v404[8] = 0;
                  *(_QWORD *)&v404[16] = 0;
                  *(float64x2_t *)(v244 + 24) = v405;
                  v405 = 0uLL;
                  *(_QWORD *)(v244 + 40) = v246;
                  *(_QWORD *)(v244 + 48) = v245;
                  *(_BYTE *)(v244 + 56) = 2;
                  v386.f64[0] = 0.0;
                  v392.i64[0] = v244;
                  (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v220 + 24) + 40))(*(_QWORD *)(v220 + 24), &v392);
                  v247 = *(double *)v392.i64;
                  v392.i64[0] = 0;
                  if (v247 != 0.0)
                  {
                    v248 = *(std::__shared_weak_count **)(*(_QWORD *)&v247 + 32);
                    if (v248)
                    {
                      v249 = (unint64_t *)&v248->__shared_owners_;
                      do
                        v250 = __ldaxr(v249);
                      while (__stlxr(v250 - 1, v249));
                      if (!v250)
                      {
                        ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                        std::__shared_weak_count::__release_weak(v248);
                      }
                    }
                    v251 = *(std::__shared_weak_count **)(*(_QWORD *)&v247 + 16);
                    if (v251)
                    {
                      v252 = (unint64_t *)&v251->__shared_owners_;
                      do
                        v253 = __ldaxr(v252);
                      while (__stlxr(v253 - 1, v252));
                      if (!v253)
                      {
                        ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
                        std::__shared_weak_count::__release_weak(v251);
                      }
                    }
                    MEMORY[0x212BC6398](*(_QWORD *)&v247, 0x10F0C40B62ED6C6);
                    v254 = v386.f64[0];
                    v386.f64[0] = 0.0;
                    if (v254 != 0.0)
                    {
                      v255 = *(std::__shared_weak_count **)(*(_QWORD *)&v254 + 32);
                      if (v255)
                      {
                        v256 = (unint64_t *)&v255->__shared_owners_;
                        do
                          v257 = __ldaxr(v256);
                        while (__stlxr(v257 - 1, v256));
                        if (!v257)
                        {
                          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                          std::__shared_weak_count::__release_weak(v255);
                        }
                      }
                      v258 = *(std::__shared_weak_count **)(*(_QWORD *)&v254 + 16);
                      if (v258)
                      {
                        v259 = (unint64_t *)&v258->__shared_owners_;
                        do
                          v260 = __ldaxr(v259);
                        while (__stlxr(v260 - 1, v259));
                        if (!v260)
                        {
                          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                          std::__shared_weak_count::__release_weak(v258);
                        }
                      }
                      MEMORY[0x212BC6398](*(_QWORD *)&v254, 0x10F0C40B62ED6C6);
                    }
                  }
                  v261 = v405.f64[1];
                  if (*(_QWORD *)&v405.f64[1])
                  {
                    v262 = (unint64_t *)(*(_QWORD *)&v405.f64[1] + 8);
                    do
                      v263 = __ldaxr(v262);
                    while (__stlxr(v263 - 1, v262));
                    if (!v263)
                    {
                      (*(void (**)(float64_t))(**(_QWORD **)&v261 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v261));
                      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v261);
                    }
                  }
                  v264 = *(std::__shared_weak_count **)&v404[16];
                  if (*(_QWORD *)&v404[16])
                  {
                    v265 = (unint64_t *)(*(_QWORD *)&v404[16] + 8);
                    do
                      v266 = __ldaxr(v265);
                    while (__stlxr(v266 - 1, v265));
                    if (!v266)
                    {
                      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                      std::__shared_weak_count::__release_weak(v264);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG);
                  *(_WORD *)v404 = 0;
                  v267 = (void *)_os_log_send_and_compose_impl();
                  if (v267)
                    free(v267);
                }
                if (v218)
                {
                  sub_20E8C003C((uint64_t)&v399, "Failed to compute structure covariance.");
                  sub_20E863570((uint64_t)&v399);
                }
                sub_20E863570((uint64_t)&v399);
                v268 = *(std::__shared_weak_count **)&v403;
                if (v403 != 0.0)
                {
                  v269 = (unint64_t *)(*(_QWORD *)&v403 + 8);
                  do
                    v270 = __ldaxr(v269);
                  while (__stlxr(v270 - 1, v269));
                  if (!v270)
                  {
                    ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                    std::__shared_weak_count::__release_weak(v268);
                    v271 = v3 + 4;
                    v273 = (char *)v384;
                    v272 = v385;
                    if (v384 >= (uint64_t *)v385)
                      goto LABEL_379;
LABEL_377:
                    *(_OWORD *)v273 = *v271;
                    v274 = (uint64_t *)(v273 + 16);
                    goto LABEL_395;
                  }
                }
LABEL_376:
                v271 = v3 + 4;
                v273 = (char *)v384;
                v272 = v385;
                if (v384 < (uint64_t *)v385)
                  goto LABEL_377;
LABEL_379:
                v275 = (char *)__p;
                v276 = (v273 - (_BYTE *)__p) >> 4;
                v277 = v276 + 1;
                if ((unint64_t)(v276 + 1) >> 60)
                  sub_20E867F44();
                v278 = v272 - (_BYTE *)__p;
                if (v278 >> 3 > v277)
                  v277 = v278 >> 3;
                if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFF0)
                  v279 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v279 = v277;
                if (v279)
                {
                  if (v279 >> 60)
                    sub_20E877A38();
                  v280 = (char *)operator new(16 * v279);
                  v281 = &v280[16 * v276];
                  *(_OWORD *)v281 = *v271;
                  v282 = v281;
                  if (v273 == v275)
                  {
LABEL_393:
                    v274 = (uint64_t *)(v281 + 16);
                    __p = v282;
                    v385 = &v280[16 * v279];
                    if (v273)
                      goto LABEL_394;
                    goto LABEL_395;
                  }
                }
                else
                {
                  v280 = 0;
                  v281 = (char *)(16 * v276);
                  *(_OWORD *)(16 * v276) = *v271;
                  v282 = (char *)(16 * v276);
                  if (v273 == v275)
                    goto LABEL_393;
                }
                do
                {
                  v283 = *((_QWORD *)v273 - 2);
                  v273 -= 16;
                  v284 = *((_DWORD *)v273 + 2);
                  *((_QWORD *)v282 - 2) = v283;
                  v282 -= 16;
                  *((_DWORD *)v282 + 2) = v284;
                }
                while (v273 != v275);
                v273 = (char *)__p;
                v274 = (uint64_t *)(v281 + 16);
                __p = v282;
                v385 = &v280[16 * v279];
                if (v273)
LABEL_394:
                  operator delete(v273);
LABEL_395:
                v384 = v274;
                v5 = v382;
                goto LABEL_396;
              }
            }
            memmove(v229, v227, v228);
            goto LABEL_310;
          }
        }
        memmove(v127, v125, v126);
        goto LABEL_136;
      }
      v366 = v4;
      v403 = 0.0;
      v402 = 0u;
      v401 = 0u;
      v400 = 0u;
      v399 = 0u;
      if (v9 != v8)
      {
        v370 = v8;
        __srca = (float64x2_t *)(v4 + 48);
        do
        {
          v18 = *(_QWORD *)v9;
          v17 = *(_QWORD *)(v9 + 8);
          v19 = *(_DWORD *)(v9 + 16);
          v20 = sub_20E9DF85C((_QWORD *)(*a1 + 1784), (uint64_t *)v9);
          if (v20)
            v21 = v20 + 5;
          else
            v21 = 0;
          if (!v20)
          {
            sub_20F34CD58(&v390);
            if (**(int **)(*(_QWORD *)&v390.f64[0] + 56) > 4)
              goto LABEL_287;
            v115 = *(unsigned __int8 *)(*(_QWORD *)&v390.f64[0] + 72);
            v116 = sub_20E8C31DC(*(uint64_t *)&v390.f64[0], "OSLogSurrogateAppender", 1, 0);
            v117 = v116;
            _ZF = !v115 && v116 == 0;
            if (_ZF)
              goto LABEL_287;
            v392.i64[0] = (uint64_t)&v390;
            v392.u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v393 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
            v394.i32[0] = 4;
            v394.i64[1] = (uint64_t)"unknown file";
            LODWORD(v395) = 214;
            v396 = "unknown function";
            v397 = 0;
            v398 = 0;
            v119 = *(_QWORD *)v392.i64[0];
            v120 = *(_QWORD *)v392.i64[0] + 16;
            if (*(char *)(*(_QWORD *)v392.i64[0] + 39) < 0)
            {
              v122 = *(const char **)(v119 + 16);
              v121 = *(_QWORD *)(v119 + 24);
              v169 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v169 & 1) == 0)
              {
LABEL_417:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v386);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v386);
                  if (LOBYTE(v388[0]) && SHIBYTE(v387) < 0)
                    operator delete(*(void **)&v386.f64[0]);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v121 = *(unsigned __int8 *)(*(_QWORD *)v392.i64[0] + 39);
              v122 = (const char *)(*(_QWORD *)v392.i64[0] + 16);
              v123 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v123 & 1) == 0)
                goto LABEL_417;
            }
            if (byte_254A4A4F8[23] >= 0)
              v170 = byte_254A4A4F8;
            else
              v170 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v171 = byte_254A4A4F8[23];
            else
              v171 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v404 = os_log_create(v170, v122);
            if (v171 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            __srcb = v122;
            if (v171 >= 0x17)
            {
              v371 = v121;
              v173 = v117;
              v174 = v115;
              v175 = v119;
              v176 = v120;
              v177 = (v171 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v171 | 7) != 0x17)
                v177 = v171 | 7;
              v178 = v177 + 1;
              v172 = operator new(v177 + 1);
              *(_QWORD *)&v404[16] = v171;
              *(_QWORD *)&v405.f64[0] = v178 | 0x8000000000000000;
              *(_QWORD *)&v404[8] = v172;
              v120 = v176;
              v119 = v175;
              v115 = v174;
              v117 = v173;
              v121 = v371;
            }
            else
            {
              HIBYTE(v405.f64[0]) = v171;
              v172 = &v404[8];
              if (!v171)
              {
LABEL_218:
                v172[v171] = 0;
                LOBYTE(v405.f64[1]) = 1;
                if (v121 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v121 >= 0x17)
                {
                  v181 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v121 | 7) != 0x17)
                    v181 = v121 | 7;
                  v182 = v181 + 1;
                  v179 = (void **)operator new(v181 + 1);
                  v407 = v121;
                  v408 = v182 | 0x8000000000000000;
                  v406 = v179;
                  v180 = __srcb;
                }
                else
                {
                  HIBYTE(v408) = v121;
                  v179 = (void **)&v406;
                  v180 = __srcb;
                  if (!v121)
                  {
LABEL_226:
                    *((_BYTE *)v179 + v121) = 0;
                    v409 = 1;
                    v183 = *(NSObject **)v404;
                    if (SHIBYTE(v408) < 0)
                      operator delete(v406);
                    if (LOBYTE(v405.f64[1]) && SHIBYTE(v405.f64[0]) < 0)
                      operator delete(*(void **)&v404[8]);
                    if (*(_QWORD *)v404)
                      os_release(*(void **)v404);
                    if (v117 && *(_QWORD *)(v117 + 24))
                    {
                      v184 = _os_log_pack_size();
                      v185 = (std::__shared_weak_count_vtbl *)operator new(v184, (std::align_val_t)8uLL);
                      v186 = (std::__shared_weak_count *)operator new();
                      v187 = v186;
                      v186->__shared_owners_ = 0;
                      v188 = (unint64_t *)&v186->__shared_owners_;
                      v186->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v186->__shared_weak_owners_ = 0;
                      v186[1].__vftable = v185;
                      *(_QWORD *)v404 = v185;
                      *(_QWORD *)&v404[8] = v185;
                      *(_QWORD *)&v404[16] = v186;
                      do
                        v189 = __ldxr(v188);
                      while (__stxr(v189 + 1, v188));
                      v405 = 0uLL;
                      v406 = 0;
                      do
                        v190 = __ldaxr(v188);
                      while (__stlxr(v190 - 1, v188));
                      if (!v190)
                      {
                        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                        std::__shared_weak_count::__release_weak(v187);
                      }
                      v191 = *(_QWORD *)v404;
                      *(_WORD *)_os_log_pack_fill() = 0;
                      v192 = operator new();
                      v193 = *(unsigned __int8 *)(v119 + 39);
                      if ((v193 & 0x80u) == 0)
                        v194 = v120;
                      else
                        v194 = *(_QWORD *)(v119 + 16);
                      if ((v193 & 0x80u) != 0)
                        v193 = *(_QWORD *)(v119 + 24);
                      *(_QWORD *)v192 = v191;
                      *(_OWORD *)(v192 + 8) = *(_OWORD *)&v404[8];
                      *(_QWORD *)&v404[8] = 0;
                      *(_QWORD *)&v404[16] = 0;
                      *(float64x2_t *)(v192 + 24) = v405;
                      v405 = 0uLL;
                      *(_QWORD *)(v192 + 40) = v194;
                      *(_QWORD *)(v192 + 48) = v193;
                      *(_BYTE *)(v192 + 56) = 16;
                      v391.f64[0] = 0.0;
                      *(_QWORD *)&v386.f64[0] = v192;
                      (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v117 + 24) + 40))(*(_QWORD *)(v117 + 24), &v386);
                      v195 = v386.f64[0];
                      v386.f64[0] = 0.0;
                      if (v195 != 0.0)
                      {
                        v196 = *(std::__shared_weak_count **)(*(_QWORD *)&v195 + 32);
                        if (v196)
                        {
                          v197 = (unint64_t *)&v196->__shared_owners_;
                          do
                            v198 = __ldaxr(v197);
                          while (__stlxr(v198 - 1, v197));
                          if (!v198)
                          {
                            ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                            std::__shared_weak_count::__release_weak(v196);
                          }
                        }
                        v199 = *(std::__shared_weak_count **)(*(_QWORD *)&v195 + 16);
                        if (v199)
                        {
                          v200 = (unint64_t *)&v199->__shared_owners_;
                          do
                            v201 = __ldaxr(v200);
                          while (__stlxr(v201 - 1, v200));
                          if (!v201)
                          {
                            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                            std::__shared_weak_count::__release_weak(v199);
                          }
                        }
                        MEMORY[0x212BC6398](*(_QWORD *)&v195, 0x10F0C40B62ED6C6);
                        v202 = v391.f64[0];
                        v391.f64[0] = 0.0;
                        if (v202 != 0.0)
                        {
                          v203 = *(std::__shared_weak_count **)(*(_QWORD *)&v202 + 32);
                          if (v203)
                          {
                            v204 = (unint64_t *)&v203->__shared_owners_;
                            do
                              v205 = __ldaxr(v204);
                            while (__stlxr(v205 - 1, v204));
                            if (!v205)
                            {
                              ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                              std::__shared_weak_count::__release_weak(v203);
                            }
                          }
                          v206 = *(std::__shared_weak_count **)(*(_QWORD *)&v202 + 16);
                          if (v206)
                          {
                            v207 = (unint64_t *)&v206->__shared_owners_;
                            do
                              v208 = __ldaxr(v207);
                            while (__stlxr(v208 - 1, v207));
                            if (!v208)
                            {
                              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                              std::__shared_weak_count::__release_weak(v206);
                            }
                          }
                          MEMORY[0x212BC6398](*(_QWORD *)&v202, 0x10F0C40B62ED6C6);
                        }
                      }
                      v209 = v405.f64[1];
                      if (*(_QWORD *)&v405.f64[1])
                      {
                        v210 = (unint64_t *)(*(_QWORD *)&v405.f64[1] + 8);
                        do
                          v211 = __ldaxr(v210);
                        while (__stlxr(v211 - 1, v210));
                        if (!v211)
                        {
                          (*(void (**)(float64_t))(**(_QWORD **)&v209 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v209));
                          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v209);
                        }
                      }
                      v212 = *(std::__shared_weak_count **)&v404[16];
                      if (*(_QWORD *)&v404[16])
                      {
                        v213 = (unint64_t *)(*(_QWORD *)&v404[16] + 8);
                        do
                          v214 = __ldaxr(v213);
                        while (__stlxr(v214 - 1, v213));
                        if (!v214)
                        {
                          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                          std::__shared_weak_count::__release_weak(v212);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v183, OS_LOG_TYPE_ERROR);
                      *(_WORD *)v404 = 0;
                      v215 = (void *)_os_log_send_and_compose_impl();
                      if (v215)
                        free(v215);
                    }
                    if (v115)
                    {
                      sub_20E8C003C((uint64_t)&v392, "Fail to find poseRef via image id");
                      sub_20E863570((uint64_t)&v392);
                    }
                    sub_20E863570((uint64_t)&v392);
                    v166 = v398;
                    if (v398)
                    {
                      v216 = (unint64_t *)&v398->__shared_owners_;
                      do
                        v217 = __ldaxr(v216);
                      while (__stlxr(v217 - 1, v216));
                      if (!v217)
                        goto LABEL_202;
                    }
                    goto LABEL_287;
                  }
                }
                memmove(v179, v180, v121);
                goto LABEL_226;
              }
            }
            memmove(v172, v170, v171);
            goto LABEL_218;
          }
          v23 = (char *)a1[5];
          v22 = (char *)a1[6];
          if (v22 != v23)
          {
            v24 = (v22 - v23) >> 4;
            v25 = *(_DWORD *)(v9 + 16);
            v26 = *(_QWORD *)v9;
            while (1)
            {
              v27 = v24 >> 1;
              v28 = &v23[16 * (v24 >> 1)];
              v29 = *(_QWORD *)v28;
              v30 = *(_DWORD *)(*(_QWORD *)v28 + 16);
              _CF = v30 >= v25;
              if (v30 != v25)
                goto LABEL_31;
              if (*(_QWORD *)v29 >= v26)
                break;
LABEL_25:
              v23 = v28 + 16;
              v27 = v24 + ~v27;
LABEL_26:
              v24 = v27;
              if (!v27)
                goto LABEL_34;
            }
            if (*(_QWORD *)v29 != v26)
              goto LABEL_26;
            _CF = *(_DWORD *)(v29 + 8) >= *(_DWORD *)(v9 + 8);
LABEL_31:
            if (_CF)
              goto LABEL_26;
            goto LABEL_25;
          }
LABEL_34:
          if (v23 != v22)
          {
            v32 = *(_QWORD *)v23;
            if (*(_DWORD *)(*(_QWORD *)v23 + 16) == *(_DWORD *)(v9 + 16)
              && *(_QWORD *)v32 == *(_QWORD *)v9
              && *(_DWORD *)(v32 + 8) == *(_DWORD *)(v9 + 8))
            {
              v22 = v23;
            }
          }
          if (!*(_QWORD *)v22
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 220, (uint64_t)"vio_frame", 9, (uint64_t)"Error cannot find the vio_frame", 31, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_542;
          }
          v33 = sub_20E9DF85C((_QWORD *)(*a1 + 1784), (uint64_t *)v9);
          if (v33)
          {
            v37 = v33[13];
            v38 = *a1;
            v39 = *(_QWORD *)(*a1 + 304);
            if (!v39)
              goto LABEL_59;
          }
          else
          {
            v37 = 0;
            v38 = *a1;
            v39 = *(_QWORD *)(*a1 + 304);
            if (!v39)
              goto LABEL_59;
          }
          v40 = v38 + 304;
          v41 = v38 + 304;
          do
          {
            v42 = *(_DWORD *)(v39 + 32);
            v43 = v42 >= v19;
            if (v42 >= v19)
              v44 = (uint64_t *)v39;
            else
              v44 = (uint64_t *)(v39 + 8);
            if (v43)
              v41 = v39;
            v39 = *v44;
          }
          while (*v44);
          if (v41 != v40)
          {
            v45 = *(_DWORD *)(v41 + 32);
            v46 = v41 + 40;
            if (v45 <= v19)
              v47 = v46;
            else
              v47 = 0;
            if (v37)
              goto LABEL_61;
            goto LABEL_60;
          }
LABEL_59:
          v47 = 0;
          if (v37)
            goto LABEL_61;
LABEL_60:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 225, (uint64_t)"lens", 4, (uint64_t)"Error cannot find the lens\n", 27, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_542;
          }
LABEL_61:
          v48 = *(float **)(v9 + 24);
          if (!v48
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 229, (uint64_t)"node != nullptr", 15, (uint64_t)"Error we cannot retrieve the track-node", 39, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_542;
          }
          v49 = *(_QWORD *)(*a1 + 56);
          if (!v49)
            goto LABEL_82;
          v50 = *a1 + 56;
          do
          {
            v51 = *(_QWORD *)(v49 + 32);
            if (v51 < v18)
            {
              v49 += 8;
            }
            else if (v51 == v18)
            {
              if (*(_DWORD *)(v49 + 40) < v17)
                v49 += 8;
              else
                v50 = v49;
            }
            else
            {
              v50 = v49;
            }
            v49 = *(_QWORD *)v49;
          }
          while (v49);
          if (v50 == *a1 + 56
            || (v52 = *(_QWORD *)(v50 + 32), v18 < v52)
            || v18 == v52 && *(_DWORD *)(v50 + 40) > v17
            || (v53 = *(_QWORD *)(v50 + 48)) == 0)
          {
LABEL_82:
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AreaMapping/src/MappingManagerUtil.cpp", 233, (uint64_t)"state != nullptr", 16, (uint64_t)"Error we cannot retrieve the viostate", 37, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_542;
            }
            v53 = 0;
            v54 = v48[8];
            v55 = *(_DWORD *)(v37 + 992);
            if (v55 != -1)
            {
LABEL_79:
              if (v55 <= 7)
                goto LABEL_80;
              goto LABEL_86;
            }
          }
          else
          {
            v54 = v48[8];
            v55 = *(_DWORD *)(v37 + 992);
            if (v55 != -1)
              goto LABEL_79;
          }
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_542;
          }
          v55 = *(_DWORD *)(v37 + 992);
          if (v55 <= 7)
          {
LABEL_80:
            if (!v55)
              goto LABEL_541;
LABEL_87:
            v56 = *(double *)v37;
            if (v55 > 1)
              goto LABEL_93;
LABEL_88:
            if (!v55)
              goto LABEL_541;
            v55 = 1;
            goto LABEL_93;
          }
LABEL_86:
          if (v55 < 0xF)
            goto LABEL_87;
          v56 = *(double *)v37;
          if (v55 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_542;
            }
            v55 = *(_DWORD *)(v37 + 992);
            if (v55 <= 1)
              goto LABEL_88;
          }
LABEL_93:
          v57 = (v56 + *(double *)(v37 + 32)) * 0.5;
          if (v57 == 0.0)
            v58 = 1.0;
          else
            v58 = 1.0 / v57;
          v59 = v48[2];
          v60 = v48[3];
          if (v55 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_542;
            }
            v55 = *(_DWORD *)(v37 + 992);
            v34.f64[0] = v59;
            v61 = v60;
            if (v55 <= 7)
            {
LABEL_101:
              if (!v55)
              {
LABEL_541:
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_542:
                abort();
              }
            }
          }
          else
          {
            v34.f64[0] = v59;
            v61 = v60;
            if (v55 <= 7)
              goto LABEL_101;
          }
          v36.f64[0] = *(double *)(v37 + 88) + *(double *)(v37 + 72) * v34.f64[0] + *(double *)(v37 + 80) * v61;
          v34.f64[0] = v58 * v54;
          v35.f64[0] = *(float64_t *)(v37 + 104);
          v62 = *(double *)(v37 + 112);
          v391.f64[0] = v36.f64[0];
          v391.f64[1] = v35.f64[0] * v61 + v62;
          if (!sub_20FD34A2C(&v390, (uint64_t)v404, (uint64_t)&v392, (uint64_t)&v386, &v391, *v21 - 8 * *((unsigned int *)v21 + 2), (float64x2_t *)(v21[2] - 8 * *((unsigned int *)v21 + 6)), __srca, v34, v391.f64[1], v35, v62, v36, v47, (float64x2_t *)(v47 + 72), v37, 0))goto LABEL_287;
          v63.f64[0] = *(float64_t *)v404;
          v63.f64[1] = v405.f64[0];
          v64 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v404, (int64x2_t)v405);
          v65.f64[0] = *(float64_t *)&v404[16];
          *(_QWORD *)&v65.f64[1] = v406;
          *(_QWORD *)&v66.f64[1] = v392.i64[1];
          *(_QWORD *)&v67.f64[0] = v392.i64[0];
          *(_QWORD *)&v67.f64[1] = v394.i64[0];
          v68 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v53 + 456)), v64, *(float64x2_t *)(v53 + 456), 1), v65, *(double *)(v53 + 472)), v67, *(float64x2_t *)(v53 + 472), 1);
          v69 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v53 + 504)), v64, *(float64x2_t *)(v53 + 504), 1), v65, *(double *)(v53 + 520)), v67, *(float64x2_t *)(v53 + 520), 1);
          v70 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v53 + 552)), v64, *(float64x2_t *)(v53 + 552), 1), v65, *(double *)(v53 + 568)), v67, *(float64x2_t *)(v53 + 568), 1);
          v71 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v53 + 600)), v64, *(float64x2_t *)(v53 + 600), 1), v65, *(double *)(v53 + 616)), v67, *(float64x2_t *)(v53 + 616), 1);
          v72 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v53 + 648)), v64, *(float64x2_t *)(v53 + 648), 1), v65, *(double *)(v53 + 664)), v67, *(float64x2_t *)(v53 + 664), 1);
          v73 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v63, *(double *)(v53 + 696)), v64, *(float64x2_t *)(v53 + 696), 1), v65, *(double *)(v53 + 712)), v67, *(float64x2_t *)(v53 + 712), 1);
          v74 = (float64x2_t)vzip2q_s64(v392, v394);
          v67.f64[0] = v393;
          v67.f64[1] = v395;
          v75 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v74, *(double *)(v53 + 488)), v67, *(float64x2_t *)(v53 + 488), 1);
          v76 = vmlaq_laneq_f64(vmlaq_n_f64(v69, v74, *(double *)(v53 + 536)), v67, *(float64x2_t *)(v53 + 536), 1);
          v77 = vmlaq_laneq_f64(vmlaq_n_f64(v70, v74, *(double *)(v53 + 584)), v67, *(float64x2_t *)(v53 + 584), 1);
          v78 = vmlaq_laneq_f64(vmlaq_n_f64(v71, v74, *(double *)(v53 + 632)), v67, *(float64x2_t *)(v53 + 632), 1);
          v79 = vmlaq_laneq_f64(vmlaq_n_f64(v72, v74, *(double *)(v53 + 680)), v67, *(float64x2_t *)(v53 + 680), 1);
          v80 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v74, *(double *)(v53 + 728)), v67, *(float64x2_t *)(v53 + 728), 1);
          v81 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, v405.f64[0]), v76, v405, 1), v77, *(double *)&v406), v78, *(double *)v394.i64), v79, (float64x2_t)v394, 1), v80, v395);
          _Q2 = vaddq_f64(v81, (float64x2_t)xmmword_2102DD520);
          v81.f64[0] = sqrt(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, *(double *)v404), v76, *(float64x2_t *)v404, 1), v77, *(double *)&v404[16]), v78, *(double *)v392.i64), v79, (float64x2_t)v392, 1), v80, v393).f64[0]+ 1.0);
          _Q2.f64[0] = _Q2.f64[0] / v81.f64[0];
          v66.f64[0] = sqrt(_Q2.f64[1] - _Q2.f64[0] * _Q2.f64[0]);
          _Q5 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v81.f64[0], 0);
          v80.f64[0] = v387;
          v81.f64[0] = vdivq_f64(v80, v81).f64[0];
          _Q0 = vdivq_f64(v386, _Q5);
          v85.f64[0] = v388[0] - _Q2.f64[0] * _Q0.f64[0];
          __asm { FMLS            D5, D2, V0.D[1] }
          _Q2.f64[0] = v389 - _Q2.f64[0] * v81.f64[0];
          v85.f64[1] = _Q5.f64[0];
          *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vdivq_f64(_Q2, v66);
          v88 = vdivq_f64(v85, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v66.f64[0], 0));
          v399.f64[0] = v399.f64[0] + vmuld_n_f64(_Q0.f64[0], _Q0.f64[0]) + vmuld_n_f64(v88.f64[0], v88.f64[0]);
          *(double *)&v400.i64[1] = *(double *)&v400.i64[1]
                                  + vmuld_lane_f64(_Q0.f64[0], _Q0, 1)
                                  + 0.0
                                  + vmuld_lane_f64(v88.f64[0], v88, 1);
          v66.f64[0] = vmuld_lane_f64(_Q0.f64[1], _Q0, 1) + vmuld_lane_f64(v88.f64[1], v88, 1) + v401.f64[0];
          _Q5.f64[0] = *(double *)&v402
                     + vmuld_n_f64(_Q0.f64[0], v81.f64[0])
                     + 0.0
                     + vmuld_n_f64(v88.f64[0], _Q2.f64[0]);
          _Q0.f64[0] = vmuld_lane_f64(v81.f64[0], _Q0, 1)
                     + 0.0
                     + vmuld_lane_f64(_Q2.f64[0], v88, 1)
                     + *((double *)&v402 + 1);
          v88.f64[0] = vmuld_n_f64(v81.f64[0], v81.f64[0]) + vmuld_n_f64(_Q2.f64[0], _Q2.f64[0]) + v403;
          _Q2.f64[0] = v66.f64[0];
          *(float64_t *)&v402 = _Q5.f64[0];
          *((_QWORD *)&v402 + 1) = *(_QWORD *)&_Q0.f64[0];
          _Q0.f64[0] = _Q5.f64[0];
          v81.f64[0] = v399.f64[0];
          *(_QWORD *)&v81.f64[1] = v400.i64[1];
          _Q2.f64[1] = *((float64_t *)&v402 + 1);
          *(_QWORD *)&_Q0.f64[1] = vdupq_laneq_s64(v400, 1).u64[0];
          v403 = v88.f64[0];
          v401 = _Q2;
          v399 = v81;
          v400 = (int64x2_t)_Q0;
          v9 += 32;
        }
        while (v9 != v370);
      }
      v89 = 0;
      v90 = 1;
      do
      {
        v91 = v89;
        v92 = 3 * v90;
        v93 = v90;
        do
        {
          v399.f64[v92++] = v399.f64[v93];
          v93 += 3;
          --v90;
        }
        while (v90);
        v89 = 1;
        v90 = 2;
      }
      while ((v91 & 1) == 0);
      if (!sub_21020B160((char *)v379, (char *)&v399, 3u))
        goto LABEL_287;
      v96 = v379[0];
      *(_QWORD *)&v101.f64[0] = v379[2];
      v97 = v379[4];
      *(_QWORD *)&v98.f64[0] = v379[6];
      *(_QWORD *)&v102.f64[1] = v379[3];
      *(_QWORD *)&v98.f64[1] = v379[1];
      v99 = vcvt_f32_f64(v102);
      *(float32x2_t *)v94.i8 = vcvt_f32_f64(v98);
      v100 = (int8x16_t)vcvt_hight_f32_f64(v95, v102);
      *(_QWORD *)&v105.f64[1] = v379[7];
      *(_QWORD *)&v101.f64[1] = v379[5];
      *(float32x2_t *)&v102.f64[0] = vcvt_f32_f64(v105);
      v103 = vcvt_f32_f64(v101);
      v104 = (int8x16_t)v102;
      v104.i32[1] = v103.i32[1];
      HIDWORD(v105.f64[0]) = HIDWORD(v380);
      *(float *)v105.f64 = v380;
      v106 = (int32x4_t)vextq_s8(v100, v104, 0xCuLL);
      v107 = v94;
      v107.i32[1] = HIDWORD(v102.f64[0]);
      v107.i32[2] = LODWORD(v105.f64[0]);
      v108 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v106, (int8x16_t)v106, 0xCuLL), (int8x16_t)v106, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v107, v107), (int8x16_t)v107, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v106, v106), (int8x16_t)v106, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v107, (int8x16_t)v107, 0xCuLL), (int8x16_t)v107, 8uLL));
      if (vmla_f32(vmla_lane_f32(vmul_f32(v99, *(float32x2_t *)v108.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v108.i8, 1), *(float32x2_t *)v94.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v108, v108, 8uLL), v103).f32[0] <= 0.0)goto LABEL_287;
      v109 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)v99, v98);
      v110 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)&v102.f64[0], v101);
      v111 = (int8x16_t *)(v366 + 40);
      if (!*(_BYTE *)(v366 + 528))
        v111 = 0;
      v111[28] = v109;
      v111[29] = v110;
      v111[30].i32[0] = LODWORD(v105.f64[0]);
      v112 = (int32x4_t)vextq_s8(v109, v110, 0xCuLL);
      v113 = (int32x4_t)vextq_s8(v110, (int8x16_t)v105, 8uLL);
      v114 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v112, (int8x16_t)v112, 0xCuLL), (int8x16_t)v112, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v113, v113), (int8x16_t)v113, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v112, v112), (int8x16_t)v112, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v113, (int8x16_t)v113, 0xCuLL), (int8x16_t)v113, 8uLL));
      v111[30].i8[4] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v109.i8, *(float32x2_t *)v114.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v114.i8, 1), *(float32x2_t *)v109.i8, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL)).f32[0] > 0.0;
    }
    if (!v5)
      goto LABEL_400;
LABEL_396:
    v285 = (unint64_t *)&v5->__shared_owners_;
    do
      v286 = __ldaxr(v285);
    while (__stlxr(v286 - 1, v285));
    if (!v286)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v287 = (_QWORD *)v3[1];
      if (v287)
      {
        do
        {
LABEL_401:
          v288 = v287;
          v287 = (_QWORD *)*v287;
        }
        while (v287);
        goto LABEL_3;
      }
    }
    else
    {
LABEL_400:
      v287 = (_QWORD *)v3[1];
      if (v287)
        goto LABEL_401;
    }
    do
    {
      v288 = (_QWORD *)v3[2];
      _ZF = *v288 == (_QWORD)v3;
      v3 = v288;
    }
    while (!_ZF);
LABEL_3:
    v3 = v288;
  }
  while (v288 != v368);
  v290 = (uint64_t *)__p;
  v289 = v384;
  if (__p != v384)
  {
    v291 = (uint64_t *)__p;
    do
    {
      sub_20F2DFE8C((_QWORD *)a1[1], v291);
      v291 += 2;
    }
    while (v291 != v289);
  }
LABEL_427:
  sub_20F34CD58(&v386);
  if (**(int **)(*(_QWORD *)&v386.f64[0] + 56) > 3)
    goto LABEL_538;
  v292 = *(unsigned __int8 *)(*(_QWORD *)&v386.f64[0] + 72);
  v293 = sub_20E8C31DC(*(uint64_t *)&v386.f64[0], "OSLogSurrogateAppender", 1, 0);
  v294 = v293;
  if (!v292 && v293 == 0)
    goto LABEL_538;
  *(_QWORD *)&v399.f64[0] = &v386;
  *(std::chrono::steady_clock::time_point *)&v399.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)v400.i8 = std::chrono::system_clock::now();
  v400.i32[2] = 3;
  *(_QWORD *)&v401.f64[0] = "unknown file";
  LODWORD(v401.f64[1]) = 1051;
  *((_QWORD *)&v402 + 1) = 0;
  v403 = 0.0;
  *(_QWORD *)&v402 = "unknown function";
  v296 = (_QWORD *)a1[1];
  v299 = (_QWORD *)*v296;
  v297 = v296 + 1;
  v298 = v299;
  if (v299 == v297)
  {
    v300 = 0;
  }
  else
  {
    v300 = 0;
    do
    {
      v301 = (_QWORD *)v298[1];
      v302 = v298;
      if (v301)
      {
        do
        {
          v303 = v301;
          v301 = (_QWORD *)*v301;
        }
        while (v301);
      }
      else
      {
        do
        {
          v303 = (_QWORD *)v302[2];
          _ZF = *v303 == (_QWORD)v302;
          v302 = v303;
        }
        while (!_ZF);
      }
      v300 += *(unsigned __int8 *)(v298[6] + 528);
      v298 = v303;
    }
    while (v303 != v297);
  }
  v304 = **(_QWORD **)&v399.f64[0];
  if (*(char *)(**(_QWORD **)&v399.f64[0] + 39) < 0)
  {
    v306 = *(const char **)(v304 + 16);
    v305 = *(_QWORD *)(v304 + 24);
    __srcd = (const char *)(**(_QWORD **)&v399.f64[0] + 16);
    v308 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v308 & 1) != 0)
      goto LABEL_446;
  }
  else
  {
    v305 = *(unsigned __int8 *)(**(_QWORD **)&v399.f64[0] + 39);
    v306 = (const char *)(**(_QWORD **)&v399.f64[0] + 16);
    __srcd = v306;
    v307 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v307 & 1) != 0)
      goto LABEL_446;
  }
  if (__cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v404);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v404);
    if (LOBYTE(v405.f64[0]) && (v404[23] & 0x80000000) != 0)
      operator delete(*(void **)v404);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
LABEL_446:
  if (byte_254A4A4F8[23] >= 0)
    v309 = byte_254A4A4F8;
  else
    v309 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v310 = byte_254A4A4F8[23];
  else
    v310 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v404 = os_log_create(v309, v306);
  v311 = &v404[8];
  if (v310 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v310 >= 0x17)
  {
    v312 = v306;
    v313 = v294;
    v314 = v304;
    v315 = v292;
    v316 = (v310 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v310 | 7) != 0x17)
      v316 = v310 | 7;
    v317 = v316 + 1;
    v311 = operator new(v316 + 1);
    *(_QWORD *)&v404[16] = v310;
    *(_QWORD *)&v405.f64[0] = v317 | 0x8000000000000000;
    *(_QWORD *)&v404[8] = v311;
    v292 = v315;
    v304 = v314;
    v294 = v313;
    v306 = v312;
    goto LABEL_459;
  }
  HIBYTE(v405.f64[0]) = v310;
  if (v310)
LABEL_459:
    memmove(v311, v309, v310);
  v311[v310] = 0;
  LOBYTE(v405.f64[1]) = 1;
  v318 = (void **)&v406;
  if (v305 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v305 >= 0x17)
  {
    v320 = (v305 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v305 | 7) != 0x17)
      v320 = v305 | 7;
    v321 = v320 + 1;
    v318 = (void **)operator new(v320 + 1);
    v407 = v305;
    v408 = v321 | 0x8000000000000000;
    v406 = v318;
  }
  else
  {
    HIBYTE(v408) = v305;
    if (!v305)
    {
      LOBYTE(v406) = 0;
      v409 = 1;
      v319 = *(NSObject **)v404;
      if ((SHIBYTE(v408) & 0x80000000) == 0)
        goto LABEL_464;
      goto LABEL_470;
    }
  }
  memmove(v318, v306, v305);
  *((_BYTE *)v318 + v305) = 0;
  v409 = 1;
  v319 = *(NSObject **)v404;
  if ((SHIBYTE(v408) & 0x80000000) == 0)
  {
LABEL_464:
    if (!LOBYTE(v405.f64[1]))
      goto LABEL_473;
LABEL_471:
    if (SHIBYTE(v405.f64[0]) < 0)
      operator delete(*(void **)&v404[8]);
    goto LABEL_473;
  }
LABEL_470:
  operator delete(v406);
  if (LOBYTE(v405.f64[1]))
    goto LABEL_471;
LABEL_473:
  if (*(_QWORD *)v404)
    os_release(*(void **)v404);
  if (v294 && *(_QWORD *)(v294 + 24))
  {
    v322 = _os_log_pack_size();
    v323 = (std::__shared_weak_count_vtbl *)operator new(v322, (std::align_val_t)8uLL);
    v324 = (std::__shared_weak_count *)operator new();
    v325 = v324;
    v324->__shared_owners_ = 0;
    v326 = (unint64_t *)&v324->__shared_owners_;
    v324->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v324->__shared_weak_owners_ = 0;
    v324[1].__vftable = v323;
    *(_QWORD *)v404 = v323;
    *(_QWORD *)&v404[8] = v323;
    *(_QWORD *)&v404[16] = v324;
    do
      v327 = __ldxr(v326);
    while (__stxr(v327 + 1, v326));
    v405 = 0uLL;
    v406 = 0;
    do
      v328 = __ldaxr(v326);
    while (__stlxr(v328 - 1, v326));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
      std::__shared_weak_count::__release_weak(v325);
    }
    v329 = *(_QWORD *)v404;
    v330 = _os_log_pack_fill();
    *(_DWORD *)v330 = 134217984;
    *(_QWORD *)(v330 + 4) = v300;
    v331 = operator new();
    v332 = *(unsigned __int8 *)(v304 + 39);
    v333 = __srcd;
    if ((v332 & 0x80u) != 0)
    {
      v333 = *(const char **)(v304 + 16);
      v332 = *(_QWORD *)(v304 + 24);
    }
    *(_QWORD *)v331 = v329;
    *(_OWORD *)(v331 + 8) = *(_OWORD *)&v404[8];
    *(_QWORD *)&v404[8] = 0;
    *(_QWORD *)&v404[16] = 0;
    *(float64x2_t *)(v331 + 24) = v405;
    v405 = 0uLL;
    *(_QWORD *)(v331 + 40) = v333;
    *(_QWORD *)(v331 + 48) = v332;
    *(_BYTE *)(v331 + 56) = 1;
    v379[0] = 0;
    v392.i64[0] = v331;
    (*(void (**)(_QWORD, int64x2_t *))(**(_QWORD **)(v294 + 24) + 40))(*(_QWORD *)(v294 + 24), &v392);
    v334 = *(double *)v392.i64;
    v392.i64[0] = 0;
    if (v334 != 0.0)
    {
      v335 = *(std::__shared_weak_count **)(*(_QWORD *)&v334 + 32);
      if (v335)
      {
        v336 = (unint64_t *)&v335->__shared_owners_;
        do
          v337 = __ldaxr(v336);
        while (__stlxr(v337 - 1, v336));
        if (!v337)
        {
          ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
          std::__shared_weak_count::__release_weak(v335);
        }
      }
      v338 = *(std::__shared_weak_count **)(*(_QWORD *)&v334 + 16);
      if (v338)
      {
        v339 = (unint64_t *)&v338->__shared_owners_;
        do
          v340 = __ldaxr(v339);
        while (__stlxr(v340 - 1, v339));
        if (!v340)
        {
          ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
          std::__shared_weak_count::__release_weak(v338);
        }
      }
      MEMORY[0x212BC6398](*(_QWORD *)&v334, 0x10F0C40B62ED6C6);
      v341 = v379[0];
      v379[0] = 0;
      if (v341)
      {
        v342 = *(std::__shared_weak_count **)(v341 + 32);
        if (v342)
        {
          v343 = (unint64_t *)&v342->__shared_owners_;
          do
            v344 = __ldaxr(v343);
          while (__stlxr(v344 - 1, v343));
          if (!v344)
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
        }
        v345 = *(std::__shared_weak_count **)(v341 + 16);
        if (v345)
        {
          v346 = (unint64_t *)&v345->__shared_owners_;
          do
            v347 = __ldaxr(v346);
          while (__stlxr(v347 - 1, v346));
          if (!v347)
          {
            ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
            std::__shared_weak_count::__release_weak(v345);
          }
        }
        MEMORY[0x212BC6398](v341, 0x10F0C40B62ED6C6);
      }
    }
    v348 = v405.f64[1];
    if (*(_QWORD *)&v405.f64[1])
    {
      v349 = (unint64_t *)(*(_QWORD *)&v405.f64[1] + 8);
      do
        v350 = __ldaxr(v349);
      while (__stlxr(v350 - 1, v349));
      if (!v350)
      {
        (*(void (**)(float64_t))(**(_QWORD **)&v348 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v348));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v348);
      }
    }
    v351 = *(std::__shared_weak_count **)&v404[16];
    if (*(_QWORD *)&v404[16])
    {
      v352 = (unint64_t *)(*(_QWORD *)&v404[16] + 8);
      do
        v353 = __ldaxr(v352);
      while (__stlxr(v353 - 1, v352));
      if (!v353)
      {
        ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
        std::__shared_weak_count::__release_weak(v351);
      }
    }
  }
  else
  {
    os_log_type_enabled(v319, OS_LOG_TYPE_INFO);
    *(_DWORD *)v404 = 134217984;
    *(_QWORD *)&v404[4] = v300;
    v354 = (void *)_os_log_send_and_compose_impl();
    if (v354)
      free(v354);
  }
  if (v292)
  {
    v355 = (_QWORD *)a1[1];
    v358 = (_QWORD *)*v355;
    v356 = v355 + 1;
    v357 = v358;
    if (v358 == v356)
    {
      v359 = 0;
    }
    else
    {
      v359 = 0;
      do
      {
        v360 = (_QWORD *)v357[1];
        v361 = v357;
        if (v360)
        {
          do
          {
            v362 = v360;
            v360 = (_QWORD *)*v360;
          }
          while (v360);
        }
        else
        {
          do
          {
            v362 = (_QWORD *)v361[2];
            _ZF = *v362 == (_QWORD)v361;
            v361 = v362;
          }
          while (!_ZF);
        }
        v359 += *(unsigned __int8 *)(v357[6] + 528);
        v357 = v362;
      }
      while (v362 != v356);
    }
    sub_20E8C003C((uint64_t)&v399, "Num tracks after Compute structure covariance: %zu.", v359);
    sub_20E863570((uint64_t)&v399);
  }
  sub_20E863570((uint64_t)&v399);
  v363 = *(std::__shared_weak_count **)&v403;
  if (v403 != 0.0)
  {
    v364 = (unint64_t *)(*(_QWORD *)&v403 + 8);
    do
      v365 = __ldaxr(v364);
    while (__stlxr(v365 - 1, v364));
    if (!v365)
    {
      ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
      std::__shared_weak_count::__release_weak(v363);
    }
  }
  v290 = (uint64_t *)__p;
LABEL_538:
  if (v290)
  {
    v384 = v290;
    operator delete(v290);
  }
}

void sub_20F3688B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  if (*(_BYTE *)(v61 - 216) && *(char *)(v61 - 217) < 0)
    operator delete(*(void **)(v61 - 240));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a61);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

#error "20F368C38: too big function (funcsize=0)"

void sub_20F379C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 184))
  {
    if (*(char *)(v1 - 185) < 0)
      operator delete(*(void **)(v1 - 208));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F379E34()
{
  JUMPOUT(0x20F37AB70);
}

void sub_20F37A0A8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A0BC(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A0D0(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A0E4(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F37A0F8(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A100(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A108(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A110(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A118()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A14C(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A154()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A188(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A190()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A1C4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A1CC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A1D4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A1DC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A1E4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A1EC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A1F4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A1FC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A210(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A22C()
{
  JUMPOUT(0x20F37AB70);
}

void sub_20F37A238(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A258(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A26C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A280(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F37A294(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A29C(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A2A4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A2AC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A2B4()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A2E8(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A2F0()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A324(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A32C()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A360(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A368(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A37C()
{
  sub_20E863714(&STACK[0x268]);
  JUMPOUT(0x20F37B41CLL);
}

void sub_20F37A384(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A398(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F37A3AC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A3B4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A3BC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A3C4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A3CC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A3D4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A3DC()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A410(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A418()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  sub_20E863714((uint64_t)&STACK[0x268]);
  JUMPOUT(0x20F37B41CLL);
}

uint64_t sub_20F37A454(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A45C()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A4B0(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37A4CC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A4D4(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A4E8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A504(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A51C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37A530()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A564(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A56C()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A5A0(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A5A8()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A5DC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A5E4()
{
  uint64_t v0;
  void *v1;

  if (*(_BYTE *)(v0 - 176) && *(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37A618(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37A620()
{
  uint64_t v0;

  sub_20E86E8C4((uint64_t *)(v0 - 248));
  sub_20E86E8C4((uint64_t *)(v0 - 216));
  sub_20E86E658(v0 - 208);
  sub_20E863714((uint64_t)&STACK[0x218]);
  JUMPOUT(0x20F37B35CLL);
}

void sub_20F37A648()
{
  uint64_t v0;

  MEMORY[0x212BC6398](v0, 0x10D0C40B950D02ALL);
  sub_20E863714(&STACK[0x218]);
  JUMPOUT(0x20F37B35CLL);
}

void sub_20F37A668()
{
  sub_20E863714((uint64_t)&STACK[0x218]);
  JUMPOUT(0x20F37B35CLL);
}

void sub_20F37A7DC()
{
  JUMPOUT(0x20F37AB70);
}

uint64_t sub_20F37AB60(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AB68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37AB98(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37ABAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86E8C4((uint64_t *)&STACK[0x218]);
  sub_20E86E8C4((uint64_t *)(v1 - 248));
  sub_20E86E658(v1 - 208);
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37AC08()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

void sub_20F37AC14()
{
  JUMPOUT(0x20F37AC24);
}

void sub_20F37AC3C()
{
  JUMPOUT(0x20F37ADF0);
}

void sub_20F37AC44()
{
  JUMPOUT(0x20F37ACE4);
}

uint64_t sub_20F37AC4C(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37AC68(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AC70()
{
  JUMPOUT(0x20F37AC9CLL);
}

void sub_20F37AC78()
{
  JUMPOUT(0x20F37AC88);
}

uint64_t sub_20F37ACAC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37ACB4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37ACC0()
{
  JUMPOUT(0x20F37ACD0);
}

uint64_t sub_20F37ACF4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AD00()
{
  JUMPOUT(0x20F37AD38);
}

uint64_t sub_20F37AD08(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AD14()
{
  JUMPOUT(0x20F37AD24);
}

uint64_t sub_20F37AD48(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AD50()
{
  JUMPOUT(0x20F37AD7CLL);
}

void sub_20F37AD58()
{
  JUMPOUT(0x20F37AD68);
}

uint64_t sub_20F37AD8C(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AD94()
{
  uint64_t v0;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x20F37B328);
}

void sub_20F37ADA0()
{
  uint64_t v0;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  JUMPOUT(0x20F37B2D4);
}

uint64_t sub_20F37ADAC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37ADB4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37ADBC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37ADC4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37ADCC()
{
  JUMPOUT(0x20F37ADDCLL);
}

uint64_t sub_20F37AE00(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AE08()
{
  uint64_t v0;
  void *v1;

  if (*(char *)(v0 - 177) < 0)
    operator delete(*(void **)(v0 - 200));
  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

void sub_20F37AE18(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F37AE2C(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37AE34(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AE3C()
{
  JUMPOUT(0x20F37AE4CLL);
}

uint64_t sub_20F37AE64(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AE6C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37AE80()
{
  JUMPOUT(0x20F37AE90);
}

uint64_t sub_20F37AEBC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AEC4(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37AED8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F37AEEC(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AEF4()
{
  JUMPOUT(0x20F37B13CLL);
}

void sub_20F37AEFC()
{
  JUMPOUT(0x20F37AF0CLL);
}

void sub_20F37AF24()
{
  JUMPOUT(0x20F37AF34);
}

void sub_20F37AF4C()
{
  JUMPOUT(0x20F37AF5CLL);
}

uint64_t sub_20F37AF74(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AF7C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F37AFA4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AFAC()
{
  JUMPOUT(0x20F37AFBCLL);
}

uint64_t sub_20F37AFD4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37AFDC()
{
  JUMPOUT(0x20F37B058);
}

uint64_t sub_20F37AFF8(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B000(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B008(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B024(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B02C(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B034()
{
  JUMPOUT(0x20F37B044);
}

uint64_t sub_20F37B068(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B070(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B08C(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B094(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B09C()
{
  JUMPOUT(0x20F37B0ACLL);
}

uint64_t sub_20F37B0D8(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B0E0(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B0E8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F37B110(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B118()
{
  JUMPOUT(0x20F37B128);
}

uint64_t sub_20F37B14C(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B154(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B15C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B170(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B184(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B198(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B1AC(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B1C0(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B1D4(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B1E8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B1FC(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t sub_20F37B210(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B218()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

void sub_20F37B220()
{
  JUMPOUT(0x20F37B230);
}

uint64_t sub_20F37B25C(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B264(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B26C()
{
  JUMPOUT(0x20F37B27CLL);
}

uint64_t sub_20F37B2A0(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B2A8()
{
  JUMPOUT(0x20F37B2B8);
}

void sub_20F37B2D0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37B2E4(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B2F8()
{
  JUMPOUT(0x20F37B308);
}

void sub_20F37B324()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 - 208);
  if (v1)
    os_release(v1);
  JUMPOUT(0x20F37ABF4);
}

uint64_t sub_20F37B338(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

uint64_t sub_20F37B340(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  return sub_20F37B46C();
}

void sub_20F37B370(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B384(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x268]);
  _Unwind_Resume(a1);
}

void sub_20F37B39C(_Unwind_Exception *a1)
{
  void *v2;

  v2 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v2;
    operator delete(v2);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F37B3C4(_Unwind_Exception *a1)
{
  void *v1;

  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F37B450(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 208);
  if (v3)
  {
    *(_QWORD *)(v1 - 200) = v3;
    operator delete(v3);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F37B478(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  double **v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  double *v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  double *v35;
  double v37;
  float64x2_t v38;
  float64x2_t v40;
  double v45;
  double v47;
  float64x2_t v49;
  int v51;
  float64x2_t v52;
  float32x2_t *v53;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  double *v63;
  int64_t v64;
  unint64_t v65;
  double *v66;
  uint64_t v67;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  double *v74;
  uint64_t v75;
  __int128 v76;
  _QWORD *v77;
  _QWORD *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  size_t v83;
  char *p_dst;
  unint64_t v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  const char *v91;
  size_t v92;
  _QWORD **v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  const char *v96;
  size_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  std::__shared_weak_count_vtbl *v106;
  std::__shared_weak_count *v107;
  size_t v108;
  size_t v109;
  _QWORD *v110;
  void *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char v116;
  _QWORD *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *p_shared_owners;
  unint64_t v121;
  char *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  const char *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  unint64_t v165;
  size_t v167;
  char *v168;
  unint64_t v169;
  const void *v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  const char *v175;
  size_t v176;
  _QWORD **v177;
  unsigned __int8 v178;
  unsigned __int8 v179;
  const char *v180;
  size_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  NSObject *v186;
  uint64_t v187;
  uint64_t v188;
  size_t v189;
  std::__shared_weak_count_vtbl *v190;
  std::__shared_weak_count *v191;
  size_t v192;
  size_t v193;
  _QWORD *v194;
  void *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char v200;
  _QWORD *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  char *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  const char *v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  _QWORD *v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  const char *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  int v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v252;
  size_t v253;
  const char *v254;
  unsigned __int8 v255;
  unsigned __int8 v256;
  const char *v257;
  size_t v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  NSObject *v263;
  uint64_t v264;
  uint64_t v265;
  size_t v266;
  std::__shared_weak_count_vtbl *v267;
  std::__shared_weak_count *v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  void *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  _QWORD *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  _QWORD *v308;
  _OWORD *v309;
  int v310;
  unint64_t v311;
  unint64_t v312;
  double v314;
  double v315;
  double *v316;
  double v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  size_t v321;
  const char *v322;
  unsigned __int8 v323;
  unsigned __int8 v324;
  const char *v325;
  size_t v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  _BYTE *v330;
  NSObject *v331;
  uint64_t v332;
  uint64_t v333;
  double v334;
  double v335;
  size_t v336;
  std::__shared_weak_count_vtbl *v337;
  std::__shared_weak_count *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  __int128 v349;
  void *v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  _QWORD *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  unint64_t v370;
  void *v371;
  double v372;
  double v373;
  double *v374;
  double v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  _QWORD *v379;
  int64x2_t v381;
  int8x16_t v382;
  unint64_t v383;
  unint64_t v384;
  float64_t v385;
  double v386;
  unint64_t v387;
  int64x2_t v389;
  double *v390;
  int v391;
  int v392;
  uint64_t v393;
  uint64_t *v394;
  const char *v395;
  const char *v396;
  double *v397;
  int v398;
  int v399;
  uint64_t v400;
  void *v401;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v403;
  int v404;
  const char *v405;
  int v406;
  const char *v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  char *__dst;
  size_t v411;
  int64_t v412;
  uint64_t v413;
  __int128 v414;
  std::__shared_weak_count *v415;
  char *v416;
  std::__shared_weak_count *v417;
  _QWORD *v418;
  __int128 v419;
  _BYTE object[24];
  _BYTE v421[24];
  size_t v422;
  unint64_t v423;
  const void *v424;
  unint64_t v425;
  void *__p;
  char v427;
  unint64_t v428;
  int v429;
  _BYTE v430[160];
  _BYTE v431[24];
  __int128 v432;
  char *v433;
  const char *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  _QWORD v437[5];

  v2 = (_QWORD **)a2;
  v3 = (double **)a1;
  v437[2] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (_QWORD *)*v4;
  v379 = v4 + 1;
  v6 = 0;
  v7 = 0;
  if ((_QWORD *)*v4 == v4 + 1)
  {
    v9 = 0.0;
    v10 = 0.0;
    goto LABEL_81;
  }
  v8 = 0;
  v390 = 0;
  v397 = 0;
  v389 = 0u;
  v381 = vdupq_n_s64(1uLL);
  v382 = (int8x16_t)vdupq_n_s64(0x12CuLL);
  v9 = 0.0;
  v10 = 0.0;
  while (2)
  {
    v11 = v5[6];
    if (!*(_BYTE *)(v11 + 192))
      goto LABEL_74;
    v13 = *(uint64_t **)(v11 + 200);
    v12 = *(uint64_t **)(v11 + 208);
    if (v13 == v12)
      goto LABEL_74;
    v14 = *(_QWORD *)(v11 + 72);
    v15 = *(_DWORD *)(v11 + 80);
    v16 = *(_DWORD *)(v11 + 88);
    v394 = *(uint64_t **)(v11 + 208);
    v393 = v14;
    v392 = v15;
    v391 = v16;
    while (2)
    {
      v17 = *v13;
      v18 = *((_DWORD *)v13 + 2);
      v19 = *((_DWORD *)v13 + 4);
      _ZF = v19 == v16 && v17 == v14;
      if (_ZF && v18 == v15)
        goto LABEL_8;
      v22 = (int8x8_t)(*v2)[224];
      if (!*(_QWORD *)&v22)
        goto LABEL_164;
      v23 = v18 ^ __ROR4__(v19, 13);
      v24 = (uint8x8_t)vcnt_s8(v22);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        v25 = v23;
        if (*(_QWORD *)&v22 <= v23)
          v25 = v23 % *(_QWORD *)&v22;
      }
      else
      {
        v25 = (v22.i32[0] - 1) & v23;
      }
      v26 = *(uint64_t ***)((*v2)[223] + 8 * v25);
      if (!v26 || (v27 = *v26) == 0)
      {
LABEL_164:
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOContainer/include/VIO/VIOContainer/VIODatabaseUtil.hpp", 1048, (uint64_t)"pose_ref", 8, (uint64_t)"No pose ref found", 17, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      if (v24.u32[0] < 2uLL)
      {
        v28 = *(_QWORD *)&v22 - 1;
        while (1)
        {
          v30 = v27[1];
          if (v30 == v23)
          {
            if (*((_DWORD *)v27 + 8) == v19 && v27[2] == v17 && *((_DWORD *)v27 + 6) == v18)
              goto LABEL_40;
          }
          else if ((v30 & v28) != v25)
          {
            goto LABEL_164;
          }
          v27 = (uint64_t *)*v27;
          if (!v27)
            goto LABEL_164;
        }
      }
      while (1)
      {
        v29 = v27[1];
        if (v29 == v23)
          break;
        if (v29 >= *(_QWORD *)&v22)
          v29 %= *(_QWORD *)&v22;
        if (v29 != v25)
          goto LABEL_164;
LABEL_26:
        v27 = (uint64_t *)*v27;
        if (!v27)
          goto LABEL_164;
      }
      if (*((_DWORD *)v27 + 8) != v19 || v27[2] != v17 || *((_DWORD *)v27 + 6) != v18)
        goto LABEL_26;
LABEL_40:
      v31 = v27[13];
      v32 = v27[5];
      v33 = (double *)v27[7];
      v34 = v27[9];
      v35 = (double *)v27[11];
      _D1 = *(double *)(v11 + 56) - v33[1];
      v37 = *(double *)(v11 + 64) - v33[2];
      v38.f64[0] = *(float64_t *)(v32 + 16);
      _Q7 = *(_OWORD *)(v32 + 48);
      v38.f64[1] = *(float64_t *)(v32 + 40);
      v40 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v32, *(int64x2_t *)(v32 + 24)), *(double *)(v11 + 48) - *v33), (float64x2_t)vzip2q_s64(*(int64x2_t *)v32, *(int64x2_t *)(v32 + 24)), _D1), v38, v37);
      __asm { FMLA            D0, D1, V7.D[1] }
      v45 = _D0 + *(double *)(v32 + 64) * v37;
      _D2 = v40.f64[1] - v35[1];
      v47 = v45 - v35[2];
      v38.f64[0] = *(float64_t *)(v34 + 16);
      _Q7 = *(_OWORD *)(v34 + 48);
      v38.f64[1] = *(float64_t *)(v34 + 40);
      v49 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v34, *(int64x2_t *)(v34 + 24)), v40.f64[0] - *v35), (float64x2_t)vzip2q_s64(*(int64x2_t *)v34, *(int64x2_t *)(v34 + 24)), _D2), v38, v47);
      __asm { FMLA            D1, D2, V7.D[1] }
      *(double *)&object[16] = _D1 + *(double *)(v34 + 64) * v47;
      *(float64x2_t *)object = v49;
      if (!sub_20FCF1564(v31, (float64x2_t *)object, (uint64_t)v431))
      {
        v12 = v394;
        v14 = v393;
        v15 = v392;
        v16 = v391;
        goto LABEL_8;
      }
      v51 = *(_DWORD *)(v31 + 992);
      if (v51 != -1)
        goto LABEL_44;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)&unk_2102BBDAE, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_576:
        abort();
      }
      v51 = *(_DWORD *)(v31 + 992);
LABEL_44:
      if (!v51)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)&unk_2102BBDAE, 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        goto LABEL_576;
      }
      v52.f64[0] = *(double *)(v31 + 16) + *(double *)v31 * *(double *)v431 + *(double *)(v31 + 8) * *(double *)&v431[8];
      v52.f64[1] = *(double *)&v431[8] * *(double *)(v31 + 32) + *(double *)(v31 + 40);
      v53 = (float32x2_t *)v13[3];
      _Q3 = vsubq_f64(v52, vcvtq_f64_f32(v53[1]));
      _D1 = vdivq_f64(_Q3, (float64x2_t)vdupq_lane_s64(COERCE__INT64((float)v53[32]), 0)).f64[1];
      __asm { FMLA            D4, D1, V0.D[1] }
      if (v397 < v390)
      {
        *v397 = _D4;
        v57 = (uint64_t)(v397 + 1);
        goto LABEL_65;
      }
      v383 = v6;
      v58 = v7;
      v59 = v397 - v8;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 61)
        sub_20E867F44();
      if (((char *)v390 - (char *)v8) >> 2 > v60)
        v60 = ((char *)v390 - (char *)v8) >> 2;
      if ((unint64_t)((char *)v390 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      v385 = _Q3.f64[1];
      v386 = _D4;
      if (!v61)
      {
        v62 = 0;
        v63 = (double *)(8 * v59);
        *(double *)(8 * v59) = _D4;
        v57 = 8 * v59 + 8;
        v64 = (char *)v397 - (char *)v8;
        if (v397 != v8)
          goto LABEL_56;
        goto LABEL_61;
      }
      if (v61 >> 61)
        sub_20E877A38();
      v62 = operator new(8 * v61);
      _Q3.f64[1] = v385;
      _D4 = v386;
      v63 = (double *)&v62[8 * v59];
      *v63 = v386;
      v57 = (uint64_t)(v63 + 1);
      v64 = (char *)v397 - (char *)v8;
      if (v397 == v8)
      {
LABEL_61:
        v7 = v58;
        goto LABEL_62;
      }
LABEL_56:
      v65 = v64 - 8;
      if (v65 < 0x168
        || (v70 = ((char *)(v397 - 1) - (char *)v8) & 0xFFFFFFFFFFFFFFF8,
            &v62[(char *)v397 - (char *)v8 - 8 - v70] > &v62[(char *)v397 - (char *)v8 - 8])
        || (double *)((char *)v397 - v70 - 8) > v397 - 1)
      {
        v66 = v397;
        v7 = v58;
        do
        {
LABEL_58:
          v67 = *((_QWORD *)v66-- - 1);
          *((_QWORD *)v63-- - 1) = v67;
        }
        while (v66 != v8);
        goto LABEL_62;
      }
      if ((unint64_t)((char *)v8 - v62) < 0x20)
      {
        v66 = v397;
        v7 = v58;
        goto LABEL_58;
      }
      v71 = (v65 >> 3) + 1;
      v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
      v66 = &v397[v72 / 0xFFFFFFFFFFFFFFF8];
      v63 = (double *)((char *)v63 - v72);
      v73 = &v62[8 * v59 - 16];
      v74 = v397 - 2;
      v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        *v73 = v76;
        v73 -= 2;
        v74 -= 4;
        v75 -= 4;
      }
      while (v75);
      v7 = v58;
      if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_58;
LABEL_62:
      *(_QWORD *)a1 = v63;
      *(_QWORD *)(a1 + 8) = v57;
      v390 = (double *)&v62[8 * v61];
      *(_QWORD *)(a1 + 16) = v390;
      v6 = v383;
      v2 = (_QWORD **)a2;
      if (v8)
      {
        operator delete(v8);
        _Q3.f64[1] = v385;
        _D4 = v386;
      }
      v8 = v63;
LABEL_65:
      v12 = v394;
      v14 = v393;
      v15 = v392;
      v16 = v391;
      _D1 = _Q3.f64[1];
      __asm { FMLA            D0, D1, V3.D[1] }
      v10 = v10 + _D0;
      ++v7;
      v9 = v9 + _D4;
      ++v6;
      v389 = (int64x2_t)vbslq_s8((int8x16_t)vceqq_s64(v389, (int64x2_t)v382), v382, (int8x16_t)vaddq_s64(v389, v381));
      *(_QWORD *)(a1 + 8) = v57;
      v397 = (double *)v57;
      v3 = (double **)a1;
LABEL_8:
      v13 += 4;
      if (v13 != v12)
        continue;
      break;
    }
LABEL_74:
    v77 = (_QWORD *)v5[1];
    if (v77)
    {
      do
      {
        v78 = v77;
        v77 = (_QWORD *)*v77;
      }
      while (v77);
    }
    else
    {
      do
      {
        v78 = (_QWORD *)v5[2];
        _ZF = *v78 == (_QWORD)v5;
        v5 = v78;
      }
      while (!_ZF);
    }
    v5 = v78;
    if (v78 != v379)
      continue;
    break;
  }
LABEL_81:
  sub_20F3A7B00(&v413);
  v387 = v7;
  v384 = v6;
  if (**(int **)(v413 + 56) > 3)
    goto LABEL_223;
  v79 = *(unsigned __int8 *)(v413 + 72);
  v80 = sub_20E8C31DC(v413, "OSLogSurrogateAppender", 1, 0);
  v81 = v80;
  if (!v79 && v80 == 0)
    goto LABEL_223;
  sub_20E863438((uint64_t)object);
  sub_20E86A980(&object[16], (uint64_t)"# Keyframes: ", 13);
  std::ostream::operator<<();
  if ((v429 & 0x10) != 0)
  {
    v85 = v428;
    if (v428 < v425)
    {
      v428 = v425;
      v85 = v425;
    }
    v86 = v424;
    v83 = v85 - (_QWORD)v424;
    if (v85 - (unint64_t)v424 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_144;
  }
  else
  {
    if ((v429 & 8) == 0)
    {
      v83 = 0;
      HIBYTE(v412) = 0;
      p_dst = (char *)&__dst;
      goto LABEL_99;
    }
    v86 = *(const void **)&v421[16];
    v83 = v423 - *(_QWORD *)&v421[16];
    if (v423 - *(_QWORD *)&v421[16] > 0x7FFFFFFFFFFFFFF7)
LABEL_144:
      sub_20E860B7C();
  }
  if (v83 >= 0x17)
  {
    v87 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v83 | 7) != 0x17)
      v87 = v83 | 7;
    v88 = v87 + 1;
    p_dst = (char *)operator new(v87 + 1);
    v411 = v83;
    v412 = v88 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_98;
  }
  HIBYTE(v412) = v83;
  p_dst = (char *)&__dst;
  if (v83)
LABEL_98:
    memmove(p_dst, v86, v83);
LABEL_99:
  p_dst[v83] = 0;
  v401 = &v413;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v403 = std::chrono::system_clock::now().__d_.__rep_;
  v404 = 3;
  v405 = "unknown file";
  v406 = 1067;
  v408 = 0;
  v409 = 0;
  v407 = "unknown function";
  if (v412 >= 0)
    v89 = (const char *)&__dst;
  else
    v89 = __dst;
  v90 = *(_QWORD *)v401;
  v91 = (const char *)(*(_QWORD *)v401 + 16);
  v398 = v79;
  v395 = v91;
  if (*(char *)(*(_QWORD *)v401 + 39) < 0)
  {
    v91 = *(const char **)(v90 + 16);
    v92 = *(_QWORD *)(v90 + 24);
    v93 = v2;
    v95 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v95 & 1) == 0)
    {
LABEL_581:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v431);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v431);
        if ((_BYTE)v432 && (v431[23] & 0x80000000) != 0)
          operator delete(*(void **)v431);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v92 = *(unsigned __int8 *)(*(_QWORD *)v401 + 39);
    v93 = v2;
    v94 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v94 & 1) == 0)
      goto LABEL_581;
  }
  if (byte_254A4A4F8[23] >= 0)
    v96 = byte_254A4A4F8;
  else
    v96 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v97 = byte_254A4A4F8[23];
  else
    v97 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v431 = os_log_create(v96, v91);
  v98 = &v431[8];
  if (v97 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v97 >= 0x17)
  {
    v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v97 | 7) != 0x17)
      v99 = v97 | 7;
    v100 = v99 + 1;
    v98 = operator new(v99 + 1);
    *(_QWORD *)&v431[16] = v97;
    *(_QWORD *)&v432 = v100 | 0x8000000000000000;
    *(_QWORD *)&v431[8] = v98;
    goto LABEL_119;
  }
  BYTE7(v432) = v97;
  if (v97)
LABEL_119:
    memmove(v98, v96, v97);
  v98[v97] = 0;
  BYTE8(v432) = 1;
  v101 = (char *)&v433;
  if (v92 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v92 >= 0x17)
  {
    v103 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v103 = v92 | 7;
    v104 = v103 + 1;
    v101 = (char *)operator new(v103 + 1);
    v434 = (const char *)v92;
    v435 = v104 | 0x8000000000000000;
    v433 = v101;
  }
  else
  {
    HIBYTE(v435) = v92;
    if (!v92)
    {
      LOBYTE(v433) = 0;
      LOBYTE(v436) = 1;
      v102 = *(NSObject **)v431;
      if ((SHIBYTE(v435) & 0x80000000) == 0)
        goto LABEL_124;
LABEL_130:
      operator delete(v433);
      v3 = (double **)a1;
      if (BYTE8(v432))
        goto LABEL_131;
      goto LABEL_133;
    }
  }
  memmove(v101, v91, v92);
  v101[v92] = 0;
  LOBYTE(v436) = 1;
  v102 = *(NSObject **)v431;
  if (SHIBYTE(v435) < 0)
    goto LABEL_130;
LABEL_124:
  v3 = (double **)a1;
  if (BYTE8(v432))
  {
LABEL_131:
    if (SBYTE7(v432) < 0)
      operator delete(*(void **)&v431[8]);
  }
LABEL_133:
  if (*(_QWORD *)v431)
    os_release(*(void **)v431);
  if (v81 && *(_QWORD *)(v81 + 24))
  {
    v105 = _os_log_pack_size();
    v106 = (std::__shared_weak_count_vtbl *)operator new(v105, (std::align_val_t)8uLL);
    v107 = (std::__shared_weak_count *)operator new();
    v107->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v107->__shared_owners_ = 0;
    v107->__shared_weak_owners_ = 0;
    v107[1].__vftable = v106;
    *(_QWORD *)&v414 = v106;
    *((_QWORD *)&v414 + 1) = v106;
    v416 = 0;
    v417 = 0;
    v415 = v107;
    v108 = strlen(v89);
    if (v108 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v109 = v108;
    if (v108 >= 0x17)
    {
      v113 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v108 | 7) != 0x17)
        v113 = v108 | 7;
      v114 = v113 + 1;
      v110 = operator new(v113 + 1);
      *(_QWORD *)&v419 = v109;
      *((_QWORD *)&v419 + 1) = v114 | 0x8000000000000000;
      v418 = v110;
    }
    else
    {
      HIBYTE(v419) = v108;
      v110 = &v418;
      if (!v108)
        goto LABEL_149;
    }
    memcpy(v110, v89, v109);
LABEL_149:
    *((_BYTE *)v110 + v109) = 0;
    v115 = v418;
    v437[0] = v419;
    *(_QWORD *)((char *)v437 + 7) = *(_QWORD *)((char *)&v419 + 7);
    v116 = HIBYTE(v419);
    v117 = operator new(0x38uLL);
    v117[1] = 0;
    v117[2] = 0;
    v117[3] = off_24C9ABC20;
    *v117 = &off_24C9ABBD0;
    v118 = v437[0];
    v117[4] = v115;
    v117[5] = v118;
    *(_QWORD *)((char *)v117 + 47) = *(_QWORD *)((char *)v437 + 7);
    *((_BYTE *)v117 + 55) = v116;
    v437[0] = 0;
    *(_QWORD *)((char *)v437 + 7) = 0;
    v119 = v417;
    v416 = (char *)(v117 + 3);
    v417 = (std::__shared_weak_count *)v117;
    v3 = (double **)a1;
    v2 = v93;
    v112 = v398;
    if (v119)
    {
      p_shared_owners = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldaxr(p_shared_owners);
      while (__stlxr(v121 - 1, p_shared_owners));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    *(_OWORD *)v431 = v414;
    v122 = v416;
    *(_QWORD *)&v431[16] = v415;
    if (v415)
    {
      v123 = (unint64_t *)&v415->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
    v125 = v417;
    *(_QWORD *)&v432 = v122;
    *((_QWORD *)&v432 + 1) = v417;
    if (v417)
    {
      v126 = (unint64_t *)&v417->__shared_owners_;
      do
        v127 = __ldxr(v126);
      while (__stxr(v127 + 1, v126));
      v433 = v122;
      do
        v128 = __ldaxr(v126);
      while (__stlxr(v128 - 1, v126));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    else
    {
      v433 = v122;
    }
    v129 = v415;
    if (v415)
    {
      v130 = (unint64_t *)&v415->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = *(_QWORD *)v431;
    if (v433[31] >= 0)
      v133 = v433 + 8;
    else
      v133 = (char *)*((_QWORD *)v433 + 1);
    v134 = _os_log_pack_fill();
    *(_DWORD *)v134 = 136315138;
    *(_QWORD *)(v134 + 4) = v133;
    v135 = operator new();
    v136 = *(unsigned __int8 *)(v90 + 39);
    v137 = v395;
    if ((v136 & 0x80u) != 0)
    {
      v137 = *(const char **)(v90 + 16);
      v136 = *(_QWORD *)(v90 + 24);
    }
    *(_QWORD *)v135 = v132;
    *(_OWORD *)(v135 + 8) = *(_OWORD *)&v431[8];
    *(_QWORD *)&v431[8] = 0;
    *(_QWORD *)&v431[16] = 0;
    *(_OWORD *)(v135 + 24) = v432;
    v432 = 0uLL;
    *(_QWORD *)(v135 + 40) = v137;
    *(_QWORD *)(v135 + 48) = v136;
    *(_BYTE *)(v135 + 56) = 1;
    v418 = 0;
    *(_QWORD *)&v414 = v135;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v81 + 24) + 40))(*(_QWORD *)(v81 + 24), &v414);
    v138 = v414;
    *(_QWORD *)&v414 = 0;
    if (v138)
    {
      v139 = *(std::__shared_weak_count **)(v138 + 32);
      if (v139)
      {
        v140 = (unint64_t *)&v139->__shared_owners_;
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      v142 = *(std::__shared_weak_count **)(v138 + 16);
      if (v142)
      {
        v143 = (unint64_t *)&v142->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      MEMORY[0x212BC6398](v138, 0x10F0C40B62ED6C6);
      v145 = v418;
      v418 = 0;
      if (v145)
      {
        v146 = (std::__shared_weak_count *)v145[4];
        if (v146)
        {
          v147 = (unint64_t *)&v146->__shared_owners_;
          do
            v148 = __ldaxr(v147);
          while (__stlxr(v148 - 1, v147));
          if (!v148)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
          }
        }
        v149 = (std::__shared_weak_count *)v145[2];
        if (v149)
        {
          v150 = (unint64_t *)&v149->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        MEMORY[0x212BC6398](v145, 0x10F0C40B62ED6C6);
      }
    }
    v152 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
    if (*((_QWORD *)&v432 + 1))
    {
      v153 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    v155 = *(std::__shared_weak_count **)&v431[16];
    if (*(_QWORD *)&v431[16])
    {
      v156 = (unint64_t *)(*(_QWORD *)&v431[16] + 8);
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
  }
  else
  {
    os_log_type_enabled(v102, OS_LOG_TYPE_INFO);
    *(_DWORD *)v431 = 136315138;
    *(_QWORD *)&v431[4] = v89;
    v111 = (void *)_os_log_send_and_compose_impl();
    v2 = v93;
    v112 = v398;
    if (v111)
      free(v111);
  }
  if (v112)
  {
    v158 = (const char *)&__dst;
    if (v412 < 0)
      v158 = __dst;
    sub_20E8C003C((uint64_t)&v401, "%s", v158);
    sub_20E863570((uint64_t)&v401);
  }
  sub_20E863570((uint64_t)&v401);
  v159 = v409;
  if (v409)
  {
    v160 = (unint64_t *)&v409->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
  if (SHIBYTE(v412) < 0)
    operator delete(__dst);
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v162 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v162;
  *(_QWORD *)v421 = MEMORY[0x24BEDB848] + 16;
  if (v427 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v430);
LABEL_223:
  sub_20F3A7B00(&v413);
  if (**(int **)(v413 + 56) > 3)
    goto LABEL_364;
  v163 = *(unsigned __int8 *)(v413 + 72);
  v164 = sub_20E8C31DC(v413, "OSLogSurrogateAppender", 1, 0);
  v165 = v164;
  if (!v163 && v164 == 0)
    goto LABEL_364;
  sub_20E863438((uint64_t)object);
  sub_20E86A980(&object[16], (uint64_t)"# Tracks: ", 10);
  std::ostream::operator<<();
  if ((v429 & 0x10) != 0)
  {
    v169 = v428;
    if (v428 < v425)
    {
      v428 = v425;
      v169 = v425;
    }
    v170 = v424;
    v167 = v169 - (_QWORD)v424;
    if (v169 - (unint64_t)v424 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_286;
  }
  else
  {
    if ((v429 & 8) == 0)
    {
      v167 = 0;
      HIBYTE(v412) = 0;
      v168 = (char *)&__dst;
      goto LABEL_241;
    }
    v170 = *(const void **)&v421[16];
    v167 = v423 - *(_QWORD *)&v421[16];
    if (v423 - *(_QWORD *)&v421[16] > 0x7FFFFFFFFFFFFFF7)
LABEL_286:
      sub_20E860B7C();
  }
  if (v167 >= 0x17)
  {
    v171 = (v167 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v167 | 7) != 0x17)
      v171 = v167 | 7;
    v172 = v171 + 1;
    v168 = (char *)operator new(v171 + 1);
    v411 = v167;
    v412 = v172 | 0x8000000000000000;
    __dst = v168;
    goto LABEL_240;
  }
  HIBYTE(v412) = v167;
  v168 = (char *)&__dst;
  if (v167)
LABEL_240:
    memmove(v168, v170, v167);
LABEL_241:
  v168[v167] = 0;
  v401 = &v413;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v403 = std::chrono::system_clock::now().__d_.__rep_;
  v404 = 3;
  v405 = "unknown file";
  v406 = 1068;
  v408 = 0;
  v409 = 0;
  v407 = "unknown function";
  if (v412 >= 0)
    v173 = (const char *)&__dst;
  else
    v173 = __dst;
  v174 = *(_QWORD *)v401;
  v175 = (const char *)(*(_QWORD *)v401 + 16);
  v399 = v163;
  v396 = v175;
  if (*(char *)(*(_QWORD *)v401 + 39) < 0)
  {
    v175 = *(const char **)(v174 + 16);
    v176 = *(_QWORD *)(v174 + 24);
    v177 = v2;
    v179 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v179 & 1) == 0)
    {
LABEL_588:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)v431);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v431);
        if ((_BYTE)v432 && (v431[23] & 0x80000000) != 0)
          operator delete(*(void **)v431);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v176 = *(unsigned __int8 *)(*(_QWORD *)v401 + 39);
    v177 = v2;
    v178 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v178 & 1) == 0)
      goto LABEL_588;
  }
  if (byte_254A4A4F8[23] >= 0)
    v180 = byte_254A4A4F8;
  else
    v180 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v181 = byte_254A4A4F8[23];
  else
    v181 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v431 = os_log_create(v180, v175);
  v182 = &v431[8];
  if (v181 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v181 >= 0x17)
  {
    v183 = (v181 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v181 | 7) != 0x17)
      v183 = v181 | 7;
    v184 = v183 + 1;
    v182 = operator new(v183 + 1);
    *(_QWORD *)&v431[16] = v181;
    *(_QWORD *)&v432 = v184 | 0x8000000000000000;
    *(_QWORD *)&v431[8] = v182;
    goto LABEL_261;
  }
  BYTE7(v432) = v181;
  if (v181)
LABEL_261:
    memmove(v182, v180, v181);
  v182[v181] = 0;
  BYTE8(v432) = 1;
  v185 = (char *)&v433;
  if (v176 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v176 >= 0x17)
  {
    v187 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v176 | 7) != 0x17)
      v187 = v176 | 7;
    v188 = v187 + 1;
    v185 = (char *)operator new(v187 + 1);
    v434 = (const char *)v176;
    v435 = v188 | 0x8000000000000000;
    v433 = v185;
  }
  else
  {
    HIBYTE(v435) = v176;
    if (!v176)
    {
      LOBYTE(v433) = 0;
      LOBYTE(v436) = 1;
      v186 = *(NSObject **)v431;
      if ((SHIBYTE(v435) & 0x80000000) == 0)
        goto LABEL_266;
LABEL_272:
      operator delete(v433);
      v3 = (double **)a1;
      if (BYTE8(v432))
        goto LABEL_273;
      goto LABEL_275;
    }
  }
  memmove(v185, v175, v176);
  v185[v176] = 0;
  LOBYTE(v436) = 1;
  v186 = *(NSObject **)v431;
  if (SHIBYTE(v435) < 0)
    goto LABEL_272;
LABEL_266:
  v3 = (double **)a1;
  if (BYTE8(v432))
  {
LABEL_273:
    if (SBYTE7(v432) < 0)
      operator delete(*(void **)&v431[8]);
  }
LABEL_275:
  if (*(_QWORD *)v431)
    os_release(*(void **)v431);
  if (v165 && *(_QWORD *)(v165 + 24))
  {
    v189 = _os_log_pack_size();
    v190 = (std::__shared_weak_count_vtbl *)operator new(v189, (std::align_val_t)8uLL);
    v191 = (std::__shared_weak_count *)operator new();
    v191->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v191->__shared_owners_ = 0;
    v191->__shared_weak_owners_ = 0;
    v191[1].__vftable = v190;
    *(_QWORD *)&v414 = v190;
    *((_QWORD *)&v414 + 1) = v190;
    v416 = 0;
    v417 = 0;
    v415 = v191;
    v192 = strlen(v173);
    if (v192 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v193 = v192;
    if (v192 >= 0x17)
    {
      v197 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v192 | 7) != 0x17)
        v197 = v192 | 7;
      v198 = v197 + 1;
      v194 = operator new(v197 + 1);
      *(_QWORD *)&v419 = v193;
      *((_QWORD *)&v419 + 1) = v198 | 0x8000000000000000;
      v418 = v194;
    }
    else
    {
      HIBYTE(v419) = v192;
      v194 = &v418;
      if (!v192)
        goto LABEL_291;
    }
    memcpy(v194, v173, v193);
LABEL_291:
    *((_BYTE *)v194 + v193) = 0;
    v199 = v418;
    v437[0] = v419;
    *(_QWORD *)((char *)v437 + 7) = *(_QWORD *)((char *)&v419 + 7);
    v200 = HIBYTE(v419);
    v201 = operator new(0x38uLL);
    v201[1] = 0;
    v201[2] = 0;
    v201[3] = off_24C9ABC20;
    *v201 = &off_24C9ABBD0;
    v202 = v437[0];
    v201[4] = v199;
    v201[5] = v202;
    *(_QWORD *)((char *)v201 + 47) = *(_QWORD *)((char *)v437 + 7);
    *((_BYTE *)v201 + 55) = v200;
    v437[0] = 0;
    *(_QWORD *)((char *)v437 + 7) = 0;
    v203 = v417;
    v416 = (char *)(v201 + 3);
    v417 = (std::__shared_weak_count *)v201;
    v3 = (double **)a1;
    v2 = v177;
    v196 = v399;
    if (v203)
    {
      v204 = (unint64_t *)&v203->__shared_owners_;
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    *(_OWORD *)v431 = v414;
    v206 = v416;
    *(_QWORD *)&v431[16] = v415;
    if (v415)
    {
      v207 = (unint64_t *)&v415->__shared_owners_;
      do
        v208 = __ldxr(v207);
      while (__stxr(v208 + 1, v207));
    }
    v209 = v417;
    *(_QWORD *)&v432 = v206;
    *((_QWORD *)&v432 + 1) = v417;
    if (v417)
    {
      v210 = (unint64_t *)&v417->__shared_owners_;
      do
        v211 = __ldxr(v210);
      while (__stxr(v211 + 1, v210));
      v433 = v206;
      do
        v212 = __ldaxr(v210);
      while (__stlxr(v212 - 1, v210));
      if (!v212)
      {
        ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
        std::__shared_weak_count::__release_weak(v209);
      }
    }
    else
    {
      v433 = v206;
    }
    v213 = v415;
    if (v415)
    {
      v214 = (unint64_t *)&v415->__shared_owners_;
      do
        v215 = __ldaxr(v214);
      while (__stlxr(v215 - 1, v214));
      if (!v215)
      {
        ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
        std::__shared_weak_count::__release_weak(v213);
      }
    }
    v216 = *(_QWORD *)v431;
    if (v433[31] >= 0)
      v217 = v433 + 8;
    else
      v217 = (char *)*((_QWORD *)v433 + 1);
    v218 = _os_log_pack_fill();
    *(_DWORD *)v218 = 136315138;
    *(_QWORD *)(v218 + 4) = v217;
    v219 = operator new();
    v220 = *(unsigned __int8 *)(v174 + 39);
    v221 = v396;
    if ((v220 & 0x80u) != 0)
    {
      v221 = *(const char **)(v174 + 16);
      v220 = *(_QWORD *)(v174 + 24);
    }
    *(_QWORD *)v219 = v216;
    *(_OWORD *)(v219 + 8) = *(_OWORD *)&v431[8];
    *(_QWORD *)&v431[8] = 0;
    *(_QWORD *)&v431[16] = 0;
    *(_OWORD *)(v219 + 24) = v432;
    v432 = 0uLL;
    *(_QWORD *)(v219 + 40) = v221;
    *(_QWORD *)(v219 + 48) = v220;
    *(_BYTE *)(v219 + 56) = 1;
    v418 = 0;
    *(_QWORD *)&v414 = v219;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v165 + 24) + 40))(*(_QWORD *)(v165 + 24), &v414);
    v222 = v414;
    *(_QWORD *)&v414 = 0;
    if (v222)
    {
      v223 = *(std::__shared_weak_count **)(v222 + 32);
      if (v223)
      {
        v224 = (unint64_t *)&v223->__shared_owners_;
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 - 1, v224));
        if (!v225)
        {
          ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
          std::__shared_weak_count::__release_weak(v223);
        }
      }
      v226 = *(std::__shared_weak_count **)(v222 + 16);
      if (v226)
      {
        v227 = (unint64_t *)&v226->__shared_owners_;
        do
          v228 = __ldaxr(v227);
        while (__stlxr(v228 - 1, v227));
        if (!v228)
        {
          ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
          std::__shared_weak_count::__release_weak(v226);
        }
      }
      MEMORY[0x212BC6398](v222, 0x10F0C40B62ED6C6);
      v229 = v418;
      v418 = 0;
      if (v229)
      {
        v230 = (std::__shared_weak_count *)v229[4];
        if (v230)
        {
          v231 = (unint64_t *)&v230->__shared_owners_;
          do
            v232 = __ldaxr(v231);
          while (__stlxr(v232 - 1, v231));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
        }
        v233 = (std::__shared_weak_count *)v229[2];
        if (v233)
        {
          v234 = (unint64_t *)&v233->__shared_owners_;
          do
            v235 = __ldaxr(v234);
          while (__stlxr(v235 - 1, v234));
          if (!v235)
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
        }
        MEMORY[0x212BC6398](v229, 0x10F0C40B62ED6C6);
      }
    }
    v236 = (std::__shared_weak_count *)*((_QWORD *)&v432 + 1);
    if (*((_QWORD *)&v432 + 1))
    {
      v237 = (unint64_t *)(*((_QWORD *)&v432 + 1) + 8);
      do
        v238 = __ldaxr(v237);
      while (__stlxr(v238 - 1, v237));
      if (!v238)
      {
        ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
        std::__shared_weak_count::__release_weak(v236);
      }
    }
    v239 = *(std::__shared_weak_count **)&v431[16];
    if (*(_QWORD *)&v431[16])
    {
      v240 = (unint64_t *)(*(_QWORD *)&v431[16] + 8);
      do
        v241 = __ldaxr(v240);
      while (__stlxr(v241 - 1, v240));
      if (!v241)
      {
        ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
        std::__shared_weak_count::__release_weak(v239);
      }
    }
  }
  else
  {
    os_log_type_enabled(v186, OS_LOG_TYPE_INFO);
    *(_DWORD *)v431 = 136315138;
    *(_QWORD *)&v431[4] = v173;
    v195 = (void *)_os_log_send_and_compose_impl();
    v2 = v177;
    v196 = v399;
    if (v195)
      free(v195);
  }
  if (v196)
  {
    v242 = (const char *)&__dst;
    if (v412 < 0)
      v242 = __dst;
    sub_20E8C003C((uint64_t)&v401, "%s", v242);
    sub_20E863570((uint64_t)&v401);
  }
  sub_20E863570((uint64_t)&v401);
  v243 = v409;
  if (v409)
  {
    v244 = (unint64_t *)&v409->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
      std::__shared_weak_count::__release_weak(v243);
    }
  }
  if (SHIBYTE(v412) < 0)
    operator delete(__dst);
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v246 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v246;
  *(_QWORD *)v421 = MEMORY[0x24BEDB848] + 16;
  if (v427 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v430);
LABEL_364:
  *((_QWORD *)&v414 + 1) = 0;
  v415 = 0;
  *(_QWORD *)&v414 = (char *)&v414 + 8;
  sub_20F3A8E2C(v2[1], (uint64_t)&v414, 1);
  v247 = (_QWORD *)v414;
  if ((__int128 *)v414 != (__int128 *)((char *)&v414 + 8))
  {
    while (2)
    {
      sub_20F3A7B00(&__dst);
      if (**((int **)__dst + 7) > 3)
        goto LABEL_458;
      v248 = __dst[72];
      v249 = sub_20E8C31DC((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
      v250 = v249;
      if (!v248 && v249 == 0)
        goto LABEL_458;
      *(_QWORD *)v431 = &__dst;
      *(std::chrono::steady_clock::time_point *)&v431[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v431[16] = std::chrono::system_clock::now();
      LODWORD(v432) = 3;
      *((_QWORD *)&v432 + 1) = "unknown file";
      LODWORD(v433) = 1075;
      v434 = "unknown function";
      v435 = 0;
      v436 = 0;
      v252 = **(_QWORD **)v431;
      if (*(char *)(**(_QWORD **)v431 + 39) < 0)
      {
        v254 = *(const char **)(v252 + 16);
        v253 = *(_QWORD *)(v252 + 24);
        v400 = v252 + 16;
        v256 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v256 & 1) == 0)
        {
LABEL_464:
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&v401);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v401);
            if ((_BYTE)v404 && SHIBYTE(v403) < 0)
              operator delete(v401);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
        }
      }
      else
      {
        v253 = *(unsigned __int8 *)(**(_QWORD **)v431 + 39);
        v254 = (const char *)(v252 + 16);
        v400 = v252 + 16;
        v255 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v255 & 1) == 0)
          goto LABEL_464;
      }
      if (byte_254A4A4F8[23] >= 0)
        v257 = byte_254A4A4F8;
      else
        v257 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v258 = byte_254A4A4F8[23];
      else
        v258 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v257, v254);
      if (v258 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v258 >= 0x17)
      {
        v260 = (v258 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v258 | 7) != 0x17)
          v260 = v258 | 7;
        v261 = v260 + 1;
        v259 = operator new(v260 + 1);
        *(_QWORD *)&object[16] = v258;
        *(_QWORD *)v421 = v261 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v259;
      }
      else
      {
        v421[7] = v258;
        v259 = &object[8];
        if (!v258)
        {
LABEL_390:
          v259[v258] = 0;
          v421[8] = 1;
          if (v253 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v253 >= 0x17)
          {
            v264 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v253 | 7) != 0x17)
              v264 = v253 | 7;
            v265 = v264 + 1;
            v262 = operator new(v264 + 1);
            v422 = v253;
            v423 = v265 | 0x8000000000000000;
            *(_QWORD *)&v421[16] = v262;
          }
          else
          {
            HIBYTE(v423) = v253;
            v262 = &v421[16];
            if (!v253)
            {
              v421[16] = 0;
              LOBYTE(v424) = 1;
              v263 = *(NSObject **)object;
              if ((SHIBYTE(v423) & 0x80000000) == 0)
                goto LABEL_394;
LABEL_400:
              operator delete(*(void **)&v421[16]);
              if (v421[8])
                goto LABEL_401;
              goto LABEL_403;
            }
          }
          memmove(v262, v254, v253);
          v262[v253] = 0;
          LOBYTE(v424) = 1;
          v263 = *(NSObject **)object;
          if (SHIBYTE(v423) < 0)
            goto LABEL_400;
LABEL_394:
          if (v421[8])
          {
LABEL_401:
            if ((v421[7] & 0x80000000) != 0)
              operator delete(*(void **)&object[8]);
          }
LABEL_403:
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v250 && *(_QWORD *)(v250 + 24))
          {
            v266 = _os_log_pack_size();
            v267 = (std::__shared_weak_count_vtbl *)operator new(v266, (std::align_val_t)8uLL);
            v268 = (std::__shared_weak_count *)operator new();
            v269 = v268;
            v268->__shared_owners_ = 0;
            v270 = (unint64_t *)&v268->__shared_owners_;
            v268->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v268->__shared_weak_owners_ = 0;
            v268[1].__vftable = v267;
            *(_QWORD *)object = v267;
            *(_QWORD *)&object[8] = v267;
            *(_QWORD *)&object[16] = v268;
            do
              v271 = __ldxr(v270);
            while (__stxr(v271 + 1, v270));
            memset(v421, 0, sizeof(v421));
            do
              v272 = __ldaxr(v270);
            while (__stlxr(v272 - 1, v270));
            if (!v272)
            {
              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
              std::__shared_weak_count::__release_weak(v269);
            }
            v273 = *(_QWORD *)object;
            v274 = _os_log_pack_fill();
            v275 = v247[4];
            v276 = v247[5];
            *(_DWORD *)v274 = 134218240;
            *(_QWORD *)(v274 + 4) = v275;
            *(_WORD *)(v274 + 12) = 2048;
            *(_QWORD *)(v274 + 14) = v276;
            v277 = (char *)operator new();
            v278 = *(unsigned __int8 *)(v252 + 39);
            v279 = *(_QWORD *)(v252 + 16);
            v280 = *(_QWORD *)(v252 + 24);
            v281 = *(_OWORD *)v421;
            *(_OWORD *)(v277 + 8) = *(_OWORD *)&object[8];
            if ((v278 & 0x80u) != 0)
              v278 = v280;
            else
              v279 = v400;
            *(_QWORD *)v277 = v273;
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v277 + 24) = v281;
            *(_QWORD *)v421 = 0;
            *(_QWORD *)&v421[8] = 0;
            *((_QWORD *)v277 + 5) = v279;
            *((_QWORD *)v277 + 6) = v278;
            v277[56] = 1;
            v418 = 0;
            v401 = v277;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v250 + 24) + 40))(*(_QWORD *)(v250 + 24), &v401);
            v282 = v401;
            v401 = 0;
            if (v282)
            {
              v283 = (std::__shared_weak_count *)*((_QWORD *)v282 + 4);
              if (v283)
              {
                v284 = (unint64_t *)&v283->__shared_owners_;
                do
                  v285 = __ldaxr(v284);
                while (__stlxr(v285 - 1, v284));
                if (!v285)
                {
                  ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                  std::__shared_weak_count::__release_weak(v283);
                }
              }
              v286 = (std::__shared_weak_count *)*((_QWORD *)v282 + 2);
              if (v286)
              {
                v287 = (unint64_t *)&v286->__shared_owners_;
                do
                  v288 = __ldaxr(v287);
                while (__stlxr(v288 - 1, v287));
                if (!v288)
                {
                  ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                  std::__shared_weak_count::__release_weak(v286);
                }
              }
              MEMORY[0x212BC6398](v282, 0x10F0C40B62ED6C6);
              v289 = v418;
              v418 = 0;
              if (v289)
              {
                v290 = (std::__shared_weak_count *)v289[4];
                if (v290)
                {
                  v291 = (unint64_t *)&v290->__shared_owners_;
                  do
                    v292 = __ldaxr(v291);
                  while (__stlxr(v292 - 1, v291));
                  if (!v292)
                  {
                    ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                    std::__shared_weak_count::__release_weak(v290);
                  }
                }
                v293 = (std::__shared_weak_count *)v289[2];
                if (v293)
                {
                  v294 = (unint64_t *)&v293->__shared_owners_;
                  do
                    v295 = __ldaxr(v294);
                  while (__stlxr(v295 - 1, v294));
                  if (!v295)
                  {
                    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                    std::__shared_weak_count::__release_weak(v293);
                  }
                }
                MEMORY[0x212BC6398](v289, 0x10F0C40B62ED6C6);
              }
            }
            v296 = *(std::__shared_weak_count **)&v421[8];
            v3 = (double **)a1;
            if (*(_QWORD *)&v421[8])
            {
              v297 = (unint64_t *)(*(_QWORD *)&v421[8] + 8);
              do
                v298 = __ldaxr(v297);
              while (__stlxr(v298 - 1, v297));
              if (!v298)
              {
                ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
                std::__shared_weak_count::__release_weak(v296);
              }
            }
            v299 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v300 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v301 = __ldaxr(v300);
              while (__stlxr(v301 - 1, v300));
              if (!v301)
              {
                ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                std::__shared_weak_count::__release_weak(v299);
              }
            }
          }
          else
          {
            os_log_type_enabled(v263, OS_LOG_TYPE_INFO);
            v302 = v247[4];
            v303 = v247[5];
            *(_DWORD *)object = 134218240;
            *(_QWORD *)&object[4] = v302;
            *(_WORD *)&object[12] = 2048;
            *(_QWORD *)&object[14] = v303;
            v304 = (void *)_os_log_send_and_compose_impl();
            v3 = (double **)a1;
            if (v304)
              free(v304);
          }
          if (v248)
          {
            sub_20E8C003C((uint64_t)v431, "   Track length %zu: %zu", v247[4], v247[5]);
            sub_20E863570((uint64_t)v431);
          }
          sub_20E863570((uint64_t)v431);
          v305 = v436;
          if (v436)
          {
            v306 = (unint64_t *)&v436->__shared_owners_;
            do
              v307 = __ldaxr(v306);
            while (__stlxr(v307 - 1, v306));
            if (!v307)
            {
              ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
              std::__shared_weak_count::__release_weak(v305);
            }
          }
LABEL_458:
          v308 = (_QWORD *)v247[1];
          if (v308)
          {
            do
            {
              v309 = v308;
              v308 = (_QWORD *)*v308;
            }
            while (v308);
          }
          else
          {
            do
            {
              v309 = (_OWORD *)v247[2];
              _ZF = *(_QWORD *)v309 == (_QWORD)v247;
              v247 = v309;
            }
            while (!_ZF);
          }
          v247 = v309;
          if (v309 == (__int128 *)((char *)&v414 + 8))
            goto LABEL_469;
          continue;
        }
      }
      break;
    }
    memmove(v259, v257, v258);
    goto LABEL_390;
  }
LABEL_469:
  sub_20F3A7B00(&__dst);
  if (**((int **)__dst + 7) > 3)
    goto LABEL_574;
  v310 = __dst[72];
  v311 = sub_20E8C31DC((uint64_t)__dst, "OSLogSurrogateAppender", 1, 0);
  v312 = v311;
  if (!v310 && v311 == 0)
    goto LABEL_574;
  *(_QWORD *)v431 = &__dst;
  *(std::chrono::steady_clock::time_point *)&v431[8] = std::chrono::steady_clock::now();
  *(std::chrono::system_clock::time_point *)&v431[16] = std::chrono::system_clock::now();
  LODWORD(v432) = 3;
  *((_QWORD *)&v432 + 1) = "unknown file";
  LODWORD(v433) = 1089;
  v435 = 0;
  v436 = 0;
  v314 = -1.0;
  v315 = -1.0;
  v434 = "unknown function";
  if (v387)
    v315 = v10 * (1.0 / (double)v387);
  if (v384)
    v314 = v9 * (1.0 / (double)v384);
  v316 = v3[1];
  if (*v3 != v316)
  {
    v317 = sqrt(sub_20F1CE188(*v3, v316));
    v318 = **(_QWORD **)v431;
    v319 = **(_QWORD **)v431 + 16;
    v320 = *(char *)(**(_QWORD **)v431 + 39);
    if ((v320 & 0x80000000) == 0)
      goto LABEL_480;
LABEL_483:
    v322 = *(const char **)(v318 + 16);
    v321 = *(_QWORD *)(v318 + 24);
    v324 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v324 & 1) != 0)
      goto LABEL_484;
LABEL_595:
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (v421[0] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    goto LABEL_484;
  }
  v317 = -1.0;
  v318 = **(_QWORD **)v431;
  v319 = **(_QWORD **)v431 + 16;
  v320 = *(char *)(**(_QWORD **)v431 + 39);
  if (v320 < 0)
    goto LABEL_483;
LABEL_480:
  v321 = v320;
  v322 = (const char *)v319;
  v323 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v323 & 1) == 0)
    goto LABEL_595;
LABEL_484:
  if (byte_254A4A4F8[23] >= 0)
    v325 = byte_254A4A4F8;
  else
    v325 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v326 = byte_254A4A4F8[23];
  else
    v326 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)object = os_log_create(v325, v322);
  v327 = &object[8];
  if (v326 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v326 >= 0x17)
  {
    v328 = (v326 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v326 | 7) != 0x17)
      v328 = v326 | 7;
    v329 = v328 + 1;
    v327 = operator new(v328 + 1);
    *(_QWORD *)&object[16] = v326;
    *(_QWORD *)v421 = v329 | 0x8000000000000000;
    *(_QWORD *)&object[8] = v327;
    goto LABEL_497;
  }
  v421[7] = v326;
  if (v326)
LABEL_497:
    memmove(v327, v325, v326);
  v327[v326] = 0;
  v421[8] = 1;
  v330 = &v421[16];
  if (v321 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v321 >= 0x17)
  {
    v332 = (v321 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v321 | 7) != 0x17)
      v332 = v321 | 7;
    v333 = v332 + 1;
    v330 = operator new(v332 + 1);
    v422 = v321;
    v423 = v333 | 0x8000000000000000;
    *(_QWORD *)&v421[16] = v330;
  }
  else
  {
    HIBYTE(v423) = v321;
    if (!v321)
    {
      v421[16] = 0;
      LOBYTE(v424) = 1;
      v331 = *(NSObject **)object;
      if ((SHIBYTE(v423) & 0x80000000) == 0)
        goto LABEL_502;
LABEL_508:
      operator delete(*(void **)&v421[16]);
      if (v421[8])
        goto LABEL_509;
      goto LABEL_511;
    }
  }
  memmove(v330, v322, v321);
  v330[v321] = 0;
  LOBYTE(v424) = 1;
  v331 = *(NSObject **)object;
  if (SHIBYTE(v423) < 0)
    goto LABEL_508;
LABEL_502:
  if (v421[8])
  {
LABEL_509:
    if ((v421[7] & 0x80000000) != 0)
      operator delete(*(void **)&object[8]);
  }
LABEL_511:
  if (*(_QWORD *)object)
    os_release(*(void **)object);
  v334 = sqrt(v315);
  v335 = sqrt(v314);
  if (v312 && *(_QWORD *)(v312 + 24))
  {
    v336 = _os_log_pack_size();
    v337 = (std::__shared_weak_count_vtbl *)operator new(v336, (std::align_val_t)8uLL);
    v338 = (std::__shared_weak_count *)operator new();
    v339 = v338;
    v338->__shared_owners_ = 0;
    v340 = (unint64_t *)&v338->__shared_owners_;
    v338->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v338->__shared_weak_owners_ = 0;
    v338[1].__vftable = v337;
    *(_QWORD *)object = v337;
    *(_QWORD *)&object[8] = v337;
    *(_QWORD *)&object[16] = v338;
    do
      v341 = __ldxr(v340);
    while (__stxr(v341 + 1, v340));
    memset(v421, 0, sizeof(v421));
    do
      v342 = __ldaxr(v340);
    while (__stlxr(v342 - 1, v340));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
      std::__shared_weak_count::__release_weak(v339);
    }
    v343 = *(_QWORD *)object;
    v344 = _os_log_pack_fill();
    *(_DWORD *)v344 = 134218752;
    *(_QWORD *)(v344 + 4) = v387;
    *(_WORD *)(v344 + 12) = 2048;
    *(double *)(v344 + 14) = v334;
    *(_WORD *)(v344 + 22) = 2048;
    *(double *)(v344 + 24) = v335;
    *(_WORD *)(v344 + 32) = 2048;
    *(double *)(v344 + 34) = v317;
    v345 = (char *)operator new();
    v346 = *(unsigned __int8 *)(v318 + 39);
    v347 = *(_QWORD *)(v318 + 16);
    v348 = *(_QWORD *)(v318 + 24);
    v349 = *(_OWORD *)v421;
    *(_OWORD *)(v345 + 8) = *(_OWORD *)&object[8];
    if ((v346 & 0x80u) != 0)
      v346 = v348;
    else
      v347 = v319;
    *(_QWORD *)v345 = v343;
    *(_QWORD *)&object[8] = 0;
    *(_QWORD *)&object[16] = 0;
    *(_OWORD *)(v345 + 24) = v349;
    *(_QWORD *)v421 = 0;
    *(_QWORD *)&v421[8] = 0;
    *((_QWORD *)v345 + 5) = v347;
    *((_QWORD *)v345 + 6) = v346;
    v345[56] = 1;
    v418 = 0;
    v401 = v345;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v312 + 24) + 40))(*(_QWORD *)(v312 + 24), &v401);
    v350 = v401;
    v401 = 0;
    if (v350)
    {
      v351 = (std::__shared_weak_count *)*((_QWORD *)v350 + 4);
      if (v351)
      {
        v352 = (unint64_t *)&v351->__shared_owners_;
        do
          v353 = __ldaxr(v352);
        while (__stlxr(v353 - 1, v352));
        if (!v353)
        {
          ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
          std::__shared_weak_count::__release_weak(v351);
        }
      }
      v354 = (std::__shared_weak_count *)*((_QWORD *)v350 + 2);
      if (v354)
      {
        v355 = (unint64_t *)&v354->__shared_owners_;
        do
          v356 = __ldaxr(v355);
        while (__stlxr(v356 - 1, v355));
        if (!v356)
        {
          ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
          std::__shared_weak_count::__release_weak(v354);
        }
      }
      MEMORY[0x212BC6398](v350, 0x10F0C40B62ED6C6);
      v357 = v418;
      v418 = 0;
      if (v357)
      {
        v358 = (std::__shared_weak_count *)v357[4];
        if (v358)
        {
          v359 = (unint64_t *)&v358->__shared_owners_;
          do
            v360 = __ldaxr(v359);
          while (__stlxr(v360 - 1, v359));
          if (!v360)
          {
            ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
            std::__shared_weak_count::__release_weak(v358);
          }
        }
        v361 = (std::__shared_weak_count *)v357[2];
        if (v361)
        {
          v362 = (unint64_t *)&v361->__shared_owners_;
          do
            v363 = __ldaxr(v362);
          while (__stlxr(v363 - 1, v362));
          if (!v363)
          {
            ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
            std::__shared_weak_count::__release_weak(v361);
          }
        }
        MEMORY[0x212BC6398](v357, 0x10F0C40B62ED6C6);
      }
    }
    v364 = *(std::__shared_weak_count **)&v421[8];
    if (*(_QWORD *)&v421[8])
    {
      v365 = (unint64_t *)(*(_QWORD *)&v421[8] + 8);
      do
        v366 = __ldaxr(v365);
      while (__stlxr(v366 - 1, v365));
      if (!v366)
      {
        ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
        std::__shared_weak_count::__release_weak(v364);
      }
    }
    v367 = *(std::__shared_weak_count **)&object[16];
    if (*(_QWORD *)&object[16])
    {
      v368 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
      do
        v369 = __ldaxr(v368);
      while (__stlxr(v369 - 1, v368));
      if (!v369)
      {
        ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
        std::__shared_weak_count::__release_weak(v367);
      }
    }
    v370 = v387;
  }
  else
  {
    os_log_type_enabled(v331, OS_LOG_TYPE_INFO);
    *(_DWORD *)object = 134218752;
    v370 = v387;
    *(_QWORD *)&object[4] = v387;
    *(_WORD *)&object[12] = 2048;
    *(double *)&object[14] = v334;
    *(_WORD *)&object[22] = 2048;
    *(double *)v421 = v335;
    *(_WORD *)&v421[8] = 2048;
    *(double *)&v421[10] = v317;
    v371 = (void *)_os_log_send_and_compose_impl();
    if (v371)
      free(v371);
  }
  if (v310)
  {
    v372 = -1.0;
    v373 = -1.0;
    if (v370)
      v373 = v10 * (1.0 / (double)v370);
    if (v384)
      v372 = v9 * (1.0 / (double)v384);
    v374 = *(double **)(a1 + 8);
    if (*(double **)a1 == v374)
      v375 = -1.0;
    else
      v375 = sqrt(sub_20F1CE188(*(double **)a1, v374));
    sub_20E8C003C((uint64_t)v431, "Num measurements: %zu, avg reprojection RMSE: %f, avg normalized reprojection RMSE %f, median normalized re-projection RMSE %f", v370, sqrt(v373), sqrt(v372), v375);
    sub_20E863570((uint64_t)v431);
  }
  sub_20E863570((uint64_t)v431);
  v376 = v436;
  if (v436)
  {
    v377 = (unint64_t *)&v436->__shared_owners_;
    do
      v378 = __ldaxr(v377);
    while (__stlxr(v378 - 1, v377));
    if (!v378)
    {
      ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
      std::__shared_weak_count::__release_weak(v376);
    }
  }
LABEL_574:
  sub_20E86872C((uint64_t)&v414, *((_QWORD **)&v414 + 1));
}

void sub_20F37DE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,void *a60,int a61,__int16 a62,char a63)
{
  char a64;
  char a65;
  uint64_t v65;
  void *v67;

  if (a65 && a64 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v65 - 240);
  sub_20E86872C((uint64_t)&a51, (_QWORD *)a52);
  v67 = *(void **)a26;
  if (*(_QWORD *)a26)
  {
    *(_QWORD *)(a26 + 8) = v67;
    operator delete(v67);
  }
  _Unwind_Resume(a1);
}

void sub_20F37E1EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  _OWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  char *v60;
  int v61;
  char v62;
  uint64_t v63;
  int v64;
  char v65;
  __int16 v66;
  char v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  void *v74[2];
  __int128 __p;
  int v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  int v80;
  char v81;
  __int16 v82;
  char v83;

  v59 = 0;
  v60 = 0;
  v58 = 0;
  v2 = a1[2];
  if (*(_BYTE *)(v2 + 12))
    v3 = 1;
  else
    v3 = *(_QWORD *)(v2 + 40);
  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD **)v5;
  v7 = *(_QWORD **)(v5 + 8);
  v68 = 1;
  v69 = 5;
  v70 = xmmword_2102DCC90;
  v71 = xmmword_2103853D0;
  v72 = 0;
  v73 = 0;
  *(_OWORD *)v74 = 0u;
  __p = 0u;
  v76 = 1065353216;
  sub_20F38F148((uint64_t)&v68, v6);
  v8 = v7[2];
  v9 = v8 / 0xA;
  if (v8 / 0xA)
  {
    if (v8 >> 61 >= 5)
      sub_20E867F44();
    v58 = (uint64_t *)operator new(16 * v9);
    v59 = v58;
    v60 = (char *)&v58[2 * v9];
  }
  v12 = (_QWORD *)*v7;
  v10 = v7 + 1;
  v11 = v12;
  if (v12 != v10)
  {
    do
    {
      v13 = sub_20F2A9748((uint64_t)&v68, v11[6], 0, 0, 0);
      v14 = v11 + 4;
      if (v13)
      {
        if (v3 != 1 || v13 != 2)
        {
          v15 = v59;
          if (v59 >= (uint64_t *)v60)
          {
            v16 = ((char *)v59 - (char *)v58) >> 4;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 60)
              sub_20E867F44();
            v18 = v60 - (char *)v58;
            if ((v60 - (char *)v58) >> 3 > v17)
              v17 = v18 >> 3;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
              v19 = 0xFFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
            {
              if (v19 >> 60)
                sub_20E877A38();
              v20 = (char *)operator new(16 * v19);
              v21 = &v20[16 * v16];
              *(_OWORD *)v21 = *v14;
              v22 = (uint64_t)v21;
              if (v59 == v58)
                goto LABEL_58;
            }
            else
            {
              v20 = 0;
              v21 = (char *)(16 * v16);
              *(_OWORD *)(16 * v16) = *v14;
              v22 = 16 * v16;
              if (v59 == v58)
                goto LABEL_58;
            }
            do
            {
              v31 = *(v15 - 2);
              v15 -= 2;
              v32 = *((_DWORD *)v15 + 2);
              *(_QWORD *)(v22 - 16) = v31;
              v22 -= 16;
              *(_DWORD *)(v22 + 8) = v32;
            }
            while (v15 != v58);
LABEL_57:
            v15 = v58;
            goto LABEL_58;
          }
LABEL_38:
          *(_OWORD *)v15 = *v14;
          v27 = v15 + 2;
LABEL_60:
          v59 = v27;
        }
      }
      else
      {
        if (!sub_20F2A9B50())
        {
          v15 = v59;
          if (v59 < (uint64_t *)v60)
            goto LABEL_38;
          v28 = ((char *)v59 - (char *)v58) >> 4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
            sub_20E867F44();
          v30 = v60 - (char *)v58;
          if ((v60 - (char *)v58) >> 3 > v29)
            v29 = v30 >> 3;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
            v19 = 0xFFFFFFFFFFFFFFFLL;
          else
            v19 = v29;
          if (v19)
          {
            if (v19 >> 60)
              sub_20E877A38();
            v20 = (char *)operator new(16 * v19);
            v21 = &v20[16 * v28];
            *(_OWORD *)v21 = *v14;
            v22 = (uint64_t)v21;
            if (v59 == v58)
              goto LABEL_58;
          }
          else
          {
            v20 = 0;
            v21 = (char *)(16 * v28);
            *(_OWORD *)(16 * v28) = *v14;
            v22 = 16 * v28;
            if (v59 == v58)
              goto LABEL_58;
          }
          do
          {
            v33 = *(v15 - 2);
            v15 -= 2;
            v34 = *((_DWORD *)v15 + 2);
            *(_QWORD *)(v22 - 16) = v33;
            v22 -= 16;
            *(_DWORD *)(v22 + 8) = v34;
          }
          while (v15 != v58);
          goto LABEL_57;
        }
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v64 = 0;
        v65 = 1;
        v23 = v11[6];
        v82 = v66;
        v83 = v67;
        v77 = v4;
        v78 = xmmword_2102DD520;
        v79 = xmmword_2102DCC90;
        v80 = v3;
        v81 = 0;
        if ((sub_20F2C54D0((uint64_t)&v68, v23, (uint64_t)&v77, 1, &v61) & 1) == 0)
        {
          v15 = v59;
          if (v59 < (uint64_t *)v60)
            goto LABEL_38;
          v24 = ((char *)v59 - (char *)v58) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            sub_20E867F44();
          v26 = v60 - (char *)v58;
          if ((v60 - (char *)v58) >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v19 = 0xFFFFFFFFFFFFFFFLL;
          else
            v19 = v25;
          if (v19)
          {
            if (v19 >> 60)
              sub_20E877A38();
            v20 = (char *)operator new(16 * v19);
            v21 = &v20[16 * v24];
            *(_OWORD *)v21 = *v14;
            v22 = (uint64_t)v21;
            if (v59 == v58)
            {
LABEL_58:
              v27 = (uint64_t *)(v21 + 16);
              v58 = (uint64_t *)v22;
              v60 = &v20[16 * v19];
              if (v15)
                operator delete(v15);
              goto LABEL_60;
            }
          }
          else
          {
            v20 = 0;
            v21 = (char *)(16 * v24);
            *(_OWORD *)(16 * v24) = *v14;
            v22 = 16 * v24;
            if (v59 == v58)
              goto LABEL_58;
          }
          do
          {
            v35 = *(v15 - 2);
            v15 -= 2;
            v36 = *((_DWORD *)v15 + 2);
            *(_QWORD *)(v22 - 16) = v35;
            v22 -= 16;
            *(_DWORD *)(v22 + 8) = v36;
          }
          while (v15 != v58);
          goto LABEL_57;
        }
      }
      v37 = (_QWORD *)v11[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v11[2];
          v39 = *v38 == (_QWORD)v11;
          v11 = v38;
        }
        while (!v39);
      }
      v11 = v38;
    }
    while (v38 != v10);
  }
  v40 = (_QWORD *)__p;
  if ((_QWORD)__p)
  {
    do
    {
      v41 = (_QWORD *)*v40;
      operator delete(v40);
      v40 = v41;
    }
    while (v41);
  }
  v42 = v74[0];
  v74[0] = 0;
  if (v42)
    operator delete(v42);
  v43 = v58;
  if (v58 != v59)
  {
    while (1)
    {
      if (*(_BYTE *)(a1[2] + 12))
      {
        v44 = *(_QWORD *)(a1[1] + 8);
        v47 = *(uint64_t **)(v44 + 8);
        v45 = (uint64_t *)(v44 + 8);
        v46 = v47;
        if (v47)
        {
          v48 = *v43;
          do
          {
            v49 = v46[4];
            if (v49 < v48)
            {
              ++v46;
            }
            else if (v49 == v48)
            {
              if (*((_DWORD *)v46 + 10) < *((_DWORD *)v43 + 2))
                ++v46;
              else
                v45 = v46;
            }
            else
            {
              v45 = v46;
            }
            v46 = (uint64_t *)*v46;
          }
          while (v46);
          v51 = v45[6];
          v50 = (std::__shared_weak_count *)v45[7];
          if (v50)
          {
            p_shared_owners = (unint64_t *)&v50->__shared_owners_;
            do
              v53 = __ldxr(p_shared_owners);
            while (__stxr(v53 + 1, p_shared_owners));
            do
              v54 = __ldxr(p_shared_owners);
            while (__stxr(v54 + 1, p_shared_owners));
            do
              v55 = __ldaxr(p_shared_owners);
            while (__stlxr(v55 - 1, p_shared_owners));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
            v56 = *(_QWORD *)(v51 + 208) - *(_QWORD *)(v51 + 200);
            do
              v57 = __ldaxr(p_shared_owners);
            while (__stlxr(v57 - 1, p_shared_owners));
            if (v57)
            {
              if (v56 == 32)
                goto LABEL_74;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
              if (v56 == 32)
                goto LABEL_74;
            }
          }
          else if (*(_QWORD *)(v51 + 208) - *(_QWORD *)(v51 + 200) == 32)
          {
            goto LABEL_74;
          }
        }
        else if (MEMORY[0xD0] - MEMORY[0xC8] == 32)
        {
          goto LABEL_74;
        }
      }
      sub_20F25F344(*(_QWORD **)(a1[1] + 8), v43);
LABEL_74:
      v43 += 2;
      if (v43 == v59)
      {
        v43 = v58;
        break;
      }
    }
  }
  if (v43)
    operator delete(v43);
}

void sub_20F37E868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_20F25CF20((uint64_t)&a21);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20F37E8B0(uint64_t *a1, const char *a2, int a3)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  double *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  double v11;
  uint64_t v12;
  const char *v13;
  int v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  _QWORD *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  char *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  const char *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  double v87;
  double v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  BOOL v106;
  uint64_t v107;
  _DWORD *v108;
  int v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  const char *v114;
  size_t v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  const char *v118;
  size_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  size_t v127;
  void *v128;
  _QWORD *v129;
  size_t v130;
  size_t v131;
  _BYTE *v132;
  int v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  _QWORD *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  char *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  int v187;
  unsigned int __dst;
  const char *v190;
  const char *v191;
  uint64_t v192;
  void *__p[2];
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  char *v198;
  const char *v199;
  int v200;
  const char *v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  std::__shared_weak_count *v209;
  _BYTE v210[24];
  char *v211;
  std::__shared_weak_count *v212;
  _BYTE v213[64];
  std::__shared_weak_count *v214;
  uint64_t v215[2];
  _BYTE v216[24];
  uint64_t v217;

  v3 = a3;
  v4 = a1;
  v217 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(double **)(*a1 + 336);
  if (!v6)
    goto LABEL_134;
  do
  {
    sub_20F3A7B00(v215);
    if (**(int **)(v215[0] + 56) > 2)
      goto LABEL_3;
    v7 = *(unsigned __int8 *)(v215[0] + 72);
    v8 = sub_20E8C31DC(v215[0], "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    v10 = !v7 && v8 == 0;
    if (v10)
      goto LABEL_3;
    *(_QWORD *)&v205 = v215;
    *((std::chrono::steady_clock::time_point *)&v205 + 1) = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v206 = std::chrono::system_clock::now();
    DWORD2(v206) = 2;
    *(_QWORD *)&v207 = "unknown file";
    DWORD2(v207) = 600;
    *(_QWORD *)&v208 = "unknown function";
    *((_QWORD *)&v208 + 1) = 0;
    v209 = 0;
    if (*((_BYTE *)v6 + 64))
    {
      v11 = v6[7] * v6[4];
      v12 = *(_QWORD *)v205;
      v13 = (const char *)(*(_QWORD *)v205 + 16);
      v14 = *(char *)(*(_QWORD *)v205 + 39);
      v191 = v13;
      if (v14 < 0)
        goto LABEL_14;
    }
    else
    {
      v11 = v6[3];
      v12 = *(_QWORD *)v205;
      v13 = (const char *)(*(_QWORD *)v205 + 16);
      v14 = *(char *)(*(_QWORD *)v205 + 39);
      v191 = v13;
      if (v14 < 0)
      {
LABEL_14:
        v13 = *(const char **)(v12 + 16);
        v15 = *(_QWORD *)(v12 + 24);
        v17 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v17 & 1) != 0)
          goto LABEL_15;
        goto LABEL_128;
      }
    }
    v15 = v14;
    v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v16 & 1) != 0)
      goto LABEL_15;
LABEL_128:
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)__p);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
      if ((_BYTE)v198 && SHIBYTE(rep) < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_15:
    if (byte_254A4A4F8[23] >= 0)
      v18 = byte_254A4A4F8;
    else
      v18 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v19 = byte_254A4A4F8[23];
    else
      v19 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v213 = os_log_create(v18, v13);
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v19 >= 0x17)
    {
      v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v21 = v19 | 7;
      v22 = v21 + 1;
      v20 = operator new(v21 + 1);
      *(_QWORD *)&v213[16] = v19;
      *(_QWORD *)&v213[24] = v22 | 0x8000000000000000;
      *(_QWORD *)&v213[8] = v20;
LABEL_28:
      memmove(v20, v18, v19);
      goto LABEL_29;
    }
    v213[31] = v19;
    v20 = &v213[8];
    if (v19)
      goto LABEL_28;
LABEL_29:
    v20[v19] = 0;
    v213[32] = 1;
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v15 >= 0x17)
    {
      v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v25 = v15 | 7;
      v26 = v25 + 1;
      v23 = operator new(v25 + 1);
      *(_QWORD *)&v213[48] = v15;
      *(_QWORD *)&v213[56] = v26 | 0x8000000000000000;
      *(_QWORD *)&v213[40] = v23;
    }
    else
    {
      v213[63] = v15;
      v23 = &v213[40];
      if (!v15)
      {
        v213[40] = 0;
        LOBYTE(v214) = 1;
        v24 = *(NSObject **)v213;
        if ((v213[63] & 0x80000000) == 0)
          goto LABEL_33;
        goto LABEL_39;
      }
    }
    memmove(v23, v13, v15);
    v23[v15] = 0;
    LOBYTE(v214) = 1;
    v24 = *(NSObject **)v213;
    if ((v213[63] & 0x80000000) == 0)
    {
LABEL_33:
      v3 = a3;
      if (!v213[32])
        goto LABEL_42;
      goto LABEL_40;
    }
LABEL_39:
    operator delete(*(void **)&v213[40]);
    v3 = a3;
    if (!v213[32])
      goto LABEL_42;
LABEL_40:
    if ((v213[31] & 0x80000000) != 0)
      operator delete(*(void **)&v213[8]);
LABEL_42:
    if (*(_QWORD *)v213)
      os_release(*(void **)v213);
    if (!v9 || !*(_QWORD *)(v9 + 24))
    {
      os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG);
      v33 = *((_DWORD *)v6 + 4);
      v34 = *((_QWORD *)v6 + 4);
      v35 = *((_QWORD *)v6 + 5);
      v36 = *((_QWORD *)v6 + 6);
      *(_DWORD *)v213 = 68159234;
      *(_DWORD *)&v213[4] = v3;
      *(_WORD *)&v213[8] = 2080;
      *(_QWORD *)&v213[10] = a2;
      *(_WORD *)&v213[18] = 1024;
      *(_DWORD *)&v213[20] = v33;
      *(_WORD *)&v213[24] = 2048;
      *(double *)&v213[26] = v11;
      *(_WORD *)&v213[34] = 2048;
      *(_QWORD *)&v213[36] = v34;
      *(_WORD *)&v213[44] = 2048;
      *(_QWORD *)&v213[46] = v35;
      *(_WORD *)&v213[54] = 2048;
      *(_QWORD *)&v213[56] = v36;
      v37 = (void *)_os_log_send_and_compose_impl();
      v4 = a1;
      if (!v37)
        goto LABEL_114;
      free(v37);
      if (!v7)
        goto LABEL_119;
      goto LABEL_115;
    }
    v27 = _os_log_pack_size();
    v28 = operator new(v27, (std::align_val_t)8uLL);
    v29 = (_QWORD *)operator new();
    *v29 = &off_24C9ABB80;
    v29[1] = 0;
    v29[2] = 0;
    v29[3] = v28;
    __p[0] = v28;
    __p[1] = v28;
    rep = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v29;
    v198 = 0;
    v199 = 0;
    v30 = strlen(a2);
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v31 = v30;
    if (v30 >= 0x17)
    {
      v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v38 = v30 | 7;
      v39 = v38 + 1;
      v32 = operator new(v38 + 1);
      *(_QWORD *)&v210[8] = v31;
      *(_QWORD *)&v210[16] = v39 | 0x8000000000000000;
      *(_QWORD *)v210 = v32;
LABEL_56:
      memcpy(v32, a2, v31);
      goto LABEL_57;
    }
    v210[23] = v30;
    v32 = v210;
    if (v30)
      goto LABEL_56;
LABEL_57:
    v32[v31] = 0;
    v40 = *(_QWORD *)v210;
    *(_QWORD *)v216 = *(_QWORD *)&v210[8];
    *(_QWORD *)&v216[7] = *(_QWORD *)&v210[15];
    v41 = v210[23];
    v42 = operator new(0x40uLL);
    v42[1] = 0;
    v42[2] = 0;
    v42[3] = off_24C9FF008;
    *v42 = &off_24C9FEFB8;
    v43 = *(_QWORD *)v216;
    v42[4] = v40;
    v42[5] = v43;
    *(_QWORD *)((char *)v42 + 47) = *(_QWORD *)&v216[7];
    *((_BYTE *)v42 + 55) = v41;
    *(_QWORD *)v216 = 0;
    *(_QWORD *)&v216[7] = 0;
    v44 = (std::__shared_weak_count *)v199;
    v198 = (char *)(v42 + 3);
    v199 = (const char *)v42;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    *(_OWORD *)v213 = *(_OWORD *)__p;
    v47 = v198;
    *(_QWORD *)&v213[16] = rep;
    if (rep)
    {
      v48 = (unint64_t *)(rep + 8);
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = (std::__shared_weak_count *)v199;
    *(_QWORD *)&v213[24] = v47;
    *(_QWORD *)&v213[32] = v199;
    if (v199)
    {
      v51 = (unint64_t *)(v199 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      *(_QWORD *)&v213[40] = v47;
      do
        v53 = __ldaxr(v51);
      while (__stlxr(v53 - 1, v51));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    else
    {
      *(_QWORD *)&v213[40] = v47;
    }
    v54 = (std::__shared_weak_count *)rep;
    if (rep)
    {
      v55 = (unint64_t *)(rep + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = *(_QWORD *)v213;
    if (*(char *)(*(_QWORD *)&v213[40] + 31) >= 0)
      v58 = *(_QWORD *)&v213[40] + 8;
    else
      v58 = *(_QWORD *)(*(_QWORD *)&v213[40] + 8);
    v59 = _os_log_pack_fill();
    v60 = *((_DWORD *)v6 + 4);
    v61 = *((_QWORD *)v6 + 4);
    v62 = *((_QWORD *)v6 + 5);
    v63 = *((_QWORD *)v6 + 6);
    *(_DWORD *)v59 = 68159234;
    *(_DWORD *)(v59 + 4) = v3;
    *(_WORD *)(v59 + 8) = 2080;
    *(_QWORD *)(v59 + 10) = v58;
    *(_WORD *)(v59 + 18) = 1024;
    *(_DWORD *)(v59 + 20) = v60;
    *(_WORD *)(v59 + 24) = 2048;
    *(double *)(v59 + 26) = v11;
    *(_WORD *)(v59 + 34) = 2048;
    *(_QWORD *)(v59 + 36) = v61;
    *(_WORD *)(v59 + 44) = 2048;
    *(_QWORD *)(v59 + 46) = v62;
    *(_WORD *)(v59 + 54) = 2048;
    *(_QWORD *)(v59 + 56) = v63;
    v64 = (char *)operator new();
    v65 = *(unsigned __int8 *)(v12 + 39);
    v66 = v191;
    if ((v65 & 0x80u) != 0)
    {
      v66 = *(const char **)(v12 + 16);
      v65 = *(_QWORD *)(v12 + 24);
    }
    *(_QWORD *)v64 = v57;
    *(_OWORD *)(v64 + 8) = *(_OWORD *)&v213[8];
    *(_QWORD *)&v213[8] = 0;
    *(_QWORD *)&v213[16] = 0;
    *(_OWORD *)(v64 + 24) = *(_OWORD *)&v213[24];
    *(_QWORD *)&v213[24] = 0;
    *(_QWORD *)&v213[32] = 0;
    *((_QWORD *)v64 + 5) = v66;
    *((_QWORD *)v64 + 6) = v65;
    v64[56] = 2;
    *(_QWORD *)v210 = 0;
    __p[0] = v64;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), __p);
    v67 = __p[0];
    __p[0] = 0;
    if (v67)
    {
      v68 = (std::__shared_weak_count *)*((_QWORD *)v67 + 4);
      if (v68)
      {
        v69 = (unint64_t *)&v68->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = (std::__shared_weak_count *)*((_QWORD *)v67 + 2);
      if (v71)
      {
        v72 = (unint64_t *)&v71->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      MEMORY[0x212BC6398](v67, 0x10F0C40B62ED6C6);
      v74 = *(_QWORD *)v210;
      *(_QWORD *)v210 = 0;
      if (v74)
      {
        v75 = *(std::__shared_weak_count **)(v74 + 32);
        if (v75)
        {
          v76 = (unint64_t *)&v75->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v78 = *(std::__shared_weak_count **)(v74 + 16);
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        MEMORY[0x212BC6398](v74, 0x10F0C40B62ED6C6);
      }
    }
    v81 = *(std::__shared_weak_count **)&v213[32];
    v4 = a1;
    if (!*(_QWORD *)&v213[32])
      goto LABEL_110;
    v82 = (unint64_t *)(*(_QWORD *)&v213[32] + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
      v84 = *(std::__shared_weak_count **)&v213[16];
      if (!*(_QWORD *)&v213[16])
        goto LABEL_114;
    }
    else
    {
LABEL_110:
      v84 = *(std::__shared_weak_count **)&v213[16];
      if (!*(_QWORD *)&v213[16])
        goto LABEL_114;
    }
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (v86)
    {
LABEL_114:
      if (!v7)
        goto LABEL_119;
      goto LABEL_115;
    }
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
    if (!v7)
      goto LABEL_119;
LABEL_115:
    if (*((_BYTE *)v6 + 64))
    {
      v87 = v6[4];
      v88 = v6[7] * v87;
    }
    else
    {
      v88 = v6[3];
      v87 = v6[4];
    }
    sub_20E8C003C((uint64_t)&v205, "[%.*s] Camera %d: fx_b: %f, fy_b: %f, cx_b: %f, cy_b: %f", a3, a2, *((_DWORD *)v6 + 4), v88, v87, v6[5], v6[6]);
    sub_20E863570((uint64_t)&v205);
LABEL_119:
    sub_20E863570((uint64_t)&v205);
    v89 = v209;
    if (v209)
    {
      v90 = (unint64_t *)&v209->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
LABEL_3:
    v6 = *(double **)v6;
  }
  while (v6);
  v5 = *v4;
LABEL_134:
  v92 = v5 + 56;
  v93 = *(_QWORD *)(v5 + 56);
  if (v93)
  {
    do
    {
      v94 = v93;
      v93 = *(_QWORD *)(v93 + 8);
    }
    while (v93);
  }
  else
  {
    do
    {
      v94 = *(_QWORD *)(v92 + 16);
      v10 = *(_QWORD *)v94 == v92;
      v92 = v94;
    }
    while (v10);
  }
  v95 = *(uint64_t **)(v5 + 336);
  if (v95)
  {
    v96 = *(_QWORD *)(v94 + 32);
    v97 = *(_DWORD *)(v94 + 40);
    v187 = v3;
    __dst = v97;
    while (1)
    {
      v98 = *((_DWORD *)v95 + 4);
      v100 = (uint64_t *)v4[5];
      v99 = (uint64_t *)v4[6];
      if (v99 != v100)
      {
        v101 = ((char *)v99 - (char *)v100) >> 4;
        while (1)
        {
          v102 = v101 >> 1;
          v103 = &v100[2 * (v101 >> 1)];
          v104 = *v103;
          v105 = *(_DWORD *)(*v103 + 16);
          v106 = v105 >= v98;
          if (v105 != v98)
            goto LABEL_149;
          if (*(_QWORD *)v104 >= v96)
            break;
LABEL_143:
          v100 = v103 + 2;
          v102 = v101 + ~v102;
LABEL_144:
          v101 = v102;
          if (!v102)
            goto LABEL_152;
        }
        if (*(_QWORD *)v104 != v96)
          goto LABEL_144;
        v106 = *(_DWORD *)(v104 + 8) >= v97;
LABEL_149:
        if (v106)
          goto LABEL_144;
        goto LABEL_143;
      }
LABEL_152:
      if (v100 != v99)
      {
        v107 = *v100;
        if (*(_DWORD *)(*v100 + 16) == v98 && *(_QWORD *)v107 == v96 && *(_DWORD *)(v107 + 8) == v97)
          v99 = v100;
      }
      v108 = *(_DWORD **)(*v99 + 32);
      v109 = v108[248];
      if (v109 == -1)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v109 = v108[248];
      }
      if (!v109)
      {
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      memmove(&v205, v108, 0x48uLL);
      sub_20F13B958((uint64_t)(v95 + 3), (double *)&v205, (uint64_t)v213);
      v207 = *(_OWORD *)&v213[32];
      v208 = *(_OWORD *)&v213[48];
      v209 = v214;
      v205 = *(_OWORD *)v213;
      v206 = *(_OWORD *)&v213[16];
      sub_20F3A7B00(&v204);
      if (**(int **)(v204 + 56) <= 3)
      {
        v110 = *(unsigned __int8 *)(v204 + 72);
        v111 = sub_20E8C31DC(v204, "OSLogSurrogateAppender", 1, 0);
        v112 = v111;
        if (v110 || v111)
          break;
      }
LABEL_140:
      v95 = (uint64_t *)*v95;
      if (!v95)
        return;
    }
    __p[0] = &v204;
    __p[1] = (void *)std::chrono::steady_clock::now().__d_.__rep_;
    rep = std::chrono::system_clock::now().__d_.__rep_;
    LODWORD(v198) = 3;
    v199 = "unknown file";
    v200 = 616;
    v201 = "unknown function";
    v202 = 0;
    v203 = 0;
    v113 = *(_QWORD *)__p[0];
    v114 = (const char *)(*(_QWORD *)__p[0] + 16);
    v190 = v114;
    v192 = *(_QWORD *)__p[0];
    if (*(char *)(*(_QWORD *)__p[0] + 39) < 0)
    {
      v114 = *(const char **)(v113 + 16);
      v115 = *(_QWORD *)(v113 + 24);
      v117 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v117 & 1) == 0)
      {
LABEL_278:
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v210);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v210);
          if ((_BYTE)v211 && (v210[23] & 0x80000000) != 0)
            operator delete(*(void **)v210);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
      }
    }
    else
    {
      v115 = *(unsigned __int8 *)(*(_QWORD *)__p[0] + 39);
      v116 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v116 & 1) == 0)
        goto LABEL_278;
    }
    if (byte_254A4A4F8[23] >= 0)
      v118 = byte_254A4A4F8;
    else
      v118 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v119 = byte_254A4A4F8[23];
    else
      v119 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v213 = os_log_create(v118, v114);
    if (v119 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v119 >= 0x17)
    {
      v121 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v119 | 7) != 0x17)
        v121 = v119 | 7;
      v122 = v121 + 1;
      v120 = operator new(v121 + 1);
      *(_QWORD *)&v213[16] = v119;
      *(_QWORD *)&v213[24] = v122 | 0x8000000000000000;
      *(_QWORD *)&v213[8] = v120;
    }
    else
    {
      v213[31] = v119;
      v120 = &v213[8];
      if (!v119)
      {
LABEL_182:
        v120[v119] = 0;
        v213[32] = 1;
        if (v115 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v115 >= 0x17)
        {
          v125 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v115 | 7) != 0x17)
            v125 = v115 | 7;
          v126 = v125 + 1;
          v123 = operator new(v125 + 1);
          *(_QWORD *)&v213[48] = v115;
          *(_QWORD *)&v213[56] = v126 | 0x8000000000000000;
          *(_QWORD *)&v213[40] = v123;
        }
        else
        {
          v213[63] = v115;
          v123 = &v213[40];
          if (!v115)
          {
            v213[40] = 0;
            LOBYTE(v214) = 1;
            v124 = *(NSObject **)v213;
            if ((v213[63] & 0x80000000) == 0)
              goto LABEL_186;
LABEL_192:
            operator delete(*(void **)&v213[40]);
            if (v213[32])
              goto LABEL_193;
            goto LABEL_195;
          }
        }
        memmove(v123, v114, v115);
        v123[v115] = 0;
        LOBYTE(v214) = 1;
        v124 = *(NSObject **)v213;
        if ((v213[63] & 0x80000000) != 0)
          goto LABEL_192;
LABEL_186:
        if (v213[32])
        {
LABEL_193:
          if ((v213[31] & 0x80000000) != 0)
            operator delete(*(void **)&v213[8]);
        }
LABEL_195:
        if (*(_QWORD *)v213)
          os_release(*(void **)v213);
        if (v112 && *(_QWORD *)(v112 + 24))
        {
          v127 = _os_log_pack_size();
          v128 = operator new(v127, (std::align_val_t)8uLL);
          v129 = (_QWORD *)operator new();
          *v129 = &off_24C9ABB80;
          v129[1] = 0;
          v129[2] = 0;
          v129[3] = v128;
          *(_QWORD *)v210 = v128;
          *(_QWORD *)&v210[8] = v128;
          *(_QWORD *)&v210[16] = v129;
          v211 = 0;
          v212 = 0;
          v130 = strlen(a2);
          if (v130 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          v131 = v130;
          if (v130 >= 0x17)
          {
            v135 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v130 | 7) != 0x17)
              v135 = v130 | 7;
            v136 = v135 + 1;
            v132 = operator new(v135 + 1);
            *(_QWORD *)&v216[8] = v131;
            *(_QWORD *)&v216[16] = v136 | 0x8000000000000000;
            *(_QWORD *)v216 = v132;
          }
          else
          {
            v216[23] = v130;
            v132 = v216;
            if (!v130)
              goto LABEL_210;
          }
          memcpy(v132, a2, v131);
LABEL_210:
          v132[v131] = 0;
          v137 = *(_QWORD *)v216;
          v215[0] = *(_QWORD *)&v216[8];
          *(uint64_t *)((char *)v215 + 7) = *(_QWORD *)&v216[15];
          v138 = v216[23];
          v139 = operator new(0x40uLL);
          v139[1] = 0;
          v139[2] = 0;
          v139[3] = off_24C9FF008;
          *v139 = &off_24C9FEFB8;
          v140 = v215[0];
          v139[4] = v137;
          v139[5] = v140;
          *(_QWORD *)((char *)v139 + 47) = *(uint64_t *)((char *)v215 + 7);
          *((_BYTE *)v139 + 55) = v138;
          memset(v215, 0, 15);
          v141 = v212;
          v211 = (char *)(v139 + 3);
          v212 = (std::__shared_weak_count *)v139;
          if (v141)
          {
            v142 = (unint64_t *)&v141->__shared_owners_;
            do
              v143 = __ldaxr(v142);
            while (__stlxr(v143 - 1, v142));
            if (!v143)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
            }
          }
          *(_OWORD *)v213 = *(_OWORD *)v210;
          v144 = v211;
          *(_QWORD *)&v213[16] = *(_QWORD *)&v210[16];
          if (*(_QWORD *)&v210[16])
          {
            v145 = (unint64_t *)(*(_QWORD *)&v210[16] + 8);
            do
              v146 = __ldxr(v145);
            while (__stxr(v146 + 1, v145));
          }
          v147 = v212;
          *(_QWORD *)&v213[24] = v144;
          *(_QWORD *)&v213[32] = v212;
          if (v212)
          {
            v148 = (unint64_t *)&v212->__shared_owners_;
            do
              v149 = __ldxr(v148);
            while (__stxr(v149 + 1, v148));
            *(_QWORD *)&v213[40] = v144;
            do
              v150 = __ldaxr(v148);
            while (__stlxr(v150 - 1, v148));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
              std::__shared_weak_count::__release_weak(v147);
            }
          }
          else
          {
            *(_QWORD *)&v213[40] = v144;
          }
          v151 = *(std::__shared_weak_count **)&v210[16];
          if (*(_QWORD *)&v210[16])
          {
            v152 = (unint64_t *)(*(_QWORD *)&v210[16] + 8);
            do
              v153 = __ldaxr(v152);
            while (__stlxr(v153 - 1, v152));
            if (!v153)
            {
              ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
              std::__shared_weak_count::__release_weak(v151);
            }
          }
          v154 = *(_QWORD *)v213;
          if (*(char *)(*(_QWORD *)&v213[40] + 31) >= 0)
            v155 = *(_QWORD *)&v213[40] + 8;
          else
            v155 = *(_QWORD *)(*(_QWORD *)&v213[40] + 8);
          v156 = _os_log_pack_fill();
          v157 = *((_DWORD *)v95 + 4);
          v158 = v205;
          v159 = v206;
          v160 = v207;
          *(_DWORD *)v156 = 68159234;
          *(_DWORD *)(v156 + 4) = a3;
          *(_WORD *)(v156 + 8) = 2080;
          *(_QWORD *)(v156 + 10) = v155;
          *(_WORD *)(v156 + 18) = 1024;
          *(_DWORD *)(v156 + 20) = v157;
          *(_WORD *)(v156 + 24) = 2048;
          *(_QWORD *)(v156 + 26) = v158;
          *(_WORD *)(v156 + 34) = 2048;
          *(_QWORD *)(v156 + 36) = v160;
          *(_WORD *)(v156 + 44) = 2048;
          *(_QWORD *)(v156 + 46) = v159;
          *(_WORD *)(v156 + 54) = 2048;
          *(_QWORD *)(v156 + 56) = *((_QWORD *)&v160 + 1);
          v161 = operator new();
          v162 = *(unsigned __int8 *)(v192 + 39);
          v163 = v190;
          if ((v162 & 0x80u) != 0)
          {
            v163 = *(const char **)(v192 + 16);
            v162 = *(_QWORD *)(v192 + 24);
          }
          *(_QWORD *)v161 = v154;
          *(_OWORD *)(v161 + 8) = *(_OWORD *)&v213[8];
          *(_QWORD *)&v213[8] = 0;
          *(_QWORD *)&v213[16] = 0;
          *(_OWORD *)(v161 + 24) = *(_OWORD *)&v213[24];
          *(_QWORD *)&v213[24] = 0;
          *(_QWORD *)&v213[32] = 0;
          *(_QWORD *)(v161 + 40) = v163;
          *(_QWORD *)(v161 + 48) = v162;
          *(_BYTE *)(v161 + 56) = 1;
          *(_QWORD *)v216 = 0;
          *(_QWORD *)v210 = v161;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v112 + 24) + 40))(*(_QWORD *)(v112 + 24), v210);
          v4 = a1;
          v97 = __dst;
          v164 = *(_QWORD *)v210;
          *(_QWORD *)v210 = 0;
          if (v164)
          {
            v165 = *(std::__shared_weak_count **)(v164 + 32);
            if (v165)
            {
              v166 = (unint64_t *)&v165->__shared_owners_;
              do
                v167 = __ldaxr(v166);
              while (__stlxr(v167 - 1, v166));
              if (!v167)
              {
                ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                std::__shared_weak_count::__release_weak(v165);
              }
            }
            v168 = *(std::__shared_weak_count **)(v164 + 16);
            if (v168)
            {
              v169 = (unint64_t *)&v168->__shared_owners_;
              do
                v170 = __ldaxr(v169);
              while (__stlxr(v170 - 1, v169));
              if (!v170)
              {
                ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                std::__shared_weak_count::__release_weak(v168);
              }
            }
            MEMORY[0x212BC6398](v164, 0x10F0C40B62ED6C6);
            v171 = *(_QWORD *)v216;
            *(_QWORD *)v216 = 0;
            if (v171)
            {
              v172 = *(std::__shared_weak_count **)(v171 + 32);
              if (v172)
              {
                v173 = (unint64_t *)&v172->__shared_owners_;
                do
                  v174 = __ldaxr(v173);
                while (__stlxr(v174 - 1, v173));
                if (!v174)
                {
                  ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                  std::__shared_weak_count::__release_weak(v172);
                }
              }
              v175 = *(std::__shared_weak_count **)(v171 + 16);
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              MEMORY[0x212BC6398](v171, 0x10F0C40B62ED6C6);
            }
          }
          v178 = *(std::__shared_weak_count **)&v213[32];
          if (*(_QWORD *)&v213[32])
          {
            v179 = (unint64_t *)(*(_QWORD *)&v213[32] + 8);
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
              v181 = *(std::__shared_weak_count **)&v213[16];
              if (*(_QWORD *)&v213[16])
                goto LABEL_264;
              goto LABEL_267;
            }
          }
          v181 = *(std::__shared_weak_count **)&v213[16];
          if (!*(_QWORD *)&v213[16])
            goto LABEL_267;
LABEL_264:
          v182 = (unint64_t *)&v181->__shared_owners_;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 - 1, v182));
          if (v183)
          {
LABEL_267:
            if (v110)
              goto LABEL_268;
LABEL_269:
            sub_20E863570((uint64_t)__p);
            v184 = v203;
            if (v203)
            {
              v185 = (unint64_t *)&v203->__shared_owners_;
              do
                v186 = __ldaxr(v185);
              while (__stlxr(v186 - 1, v185));
              if (!v186)
              {
                ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                std::__shared_weak_count::__release_weak(v184);
              }
            }
            goto LABEL_140;
          }
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
          if (!v110)
            goto LABEL_269;
        }
        else
        {
          os_log_type_enabled(v124, OS_LOG_TYPE_INFO);
          v133 = *((_DWORD *)v95 + 4);
          *(_DWORD *)v213 = 68159234;
          *(_DWORD *)&v213[4] = a3;
          *(_WORD *)&v213[8] = 2080;
          *(_QWORD *)&v213[10] = a2;
          *(_WORD *)&v213[18] = 1024;
          *(_DWORD *)&v213[20] = v133;
          *(_WORD *)&v213[24] = 2048;
          *(_QWORD *)&v213[26] = v205;
          *(_WORD *)&v213[34] = 2048;
          *(_QWORD *)&v213[36] = v207;
          *(_WORD *)&v213[44] = 2048;
          *(_QWORD *)&v213[46] = v206;
          *(_WORD *)&v213[54] = 2048;
          *(_QWORD *)&v213[56] = *((_QWORD *)&v207 + 1);
          v134 = (void *)_os_log_send_and_compose_impl();
          v4 = a1;
          v97 = __dst;
          if (!v134)
            goto LABEL_267;
          free(v134);
          if (!v110)
            goto LABEL_269;
        }
LABEL_268:
        sub_20E8C003C((uint64_t)__p, "[%.*s] Camera %d: Fx: %f, Fy: %f, Cx: %f, Cy: %f", v187, a2, *((_DWORD *)v95 + 4), *(double *)&v205, *(double *)&v207, *(double *)&v206, *((double *)&v207 + 1));
        sub_20E863570((uint64_t)__p);
        goto LABEL_269;
      }
    }
    memmove(v120, v118, v119);
    goto LABEL_182;
  }
}

void sub_20F37FE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a61)
  {
    if (a60 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F37FE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a41)
  {
    if (a40 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void sub_20F37FEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_20E86E658((uint64_t)&a55);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F37FED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F37FEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_20E86E658((uint64_t)&a55);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F37FF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  sub_20E86E8C4(&a55);
  sub_20E86E8C4((uint64_t *)(v55 - 144));
  sub_20E86E658(v55 - 240);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F37FF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  sub_20E86E658(v35 - 240);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F37FF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  int v56;

  if (v56 < 0)
    operator delete(v55);
  sub_20E86E658((uint64_t)&a55);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F37FF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  MEMORY[0x212BC6398](v35, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F37FFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F37FFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F37FFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F37FFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v55;

  sub_20E86E8C4(&a35);
  sub_20E86E8C4(&a55);
  sub_20E86E658(v55 - 240);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F38001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  sub_20E86E658(v45 - 240);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F380038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;
  int v46;

  if (v46 < 0)
    operator delete(v45);
  sub_20E86E658((uint64_t)&a35);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F380060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  MEMORY[0x212BC6398](v45, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void sub_20F38008C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  void *v37;

  if (*(char *)(v35 - 209) < 0)
    operator delete(*(void **)(v35 - 232));
  v37 = *(void **)(v35 - 240);
  if (v37)
    os_release(v37);
  sub_20E863714((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_20F380174()
{
  JUMPOUT(0x20F380180);
}

unint64_t sub_20F380188(unint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  size_t v11;
  void **v12;
  unint64_t v13;
  const void **v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  const char *v24;
  size_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  std::__shared_weak_count_vtbl *v34;
  std::__shared_weak_count *v35;
  size_t v36;
  size_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  const char *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v95;
  char *__s;
  _QWORD v97[3];
  int v98;
  const char *v99;
  int v100;
  const char *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  void *__dst[2];
  int64_t v105;
  _QWORD v106[2];
  _QWORD v107[3];
  _QWORD v108[3];
  uint64_t v109;
  unint64_t v110;
  void *__p;
  char v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  char *v119;
  std::__shared_weak_count *v120;
  _QWORD *v121;
  __int128 v122;
  _BYTE v123[24];
  __int128 v124;
  void *v125[2];
  unint64_t v126;
  char v127;
  _QWORD v128[5];

  v128[2] = *MEMORY[0x24BDAC8D0];
  if (result)
  {
    v3 = (_QWORD *)result;
    v92 = *MEMORY[0x24BEDB7F0];
    v90 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    v91 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
    v89 = MEMORY[0x24BEDB848] + 16;
    while (1)
    {
      sub_20F3A7B00(&v116);
      result = v116;
      if (**(int **)(v116 + 56) <= 3)
      {
        v4 = *(unsigned __int8 *)(v116 + 72);
        v5 = *(_BYTE *)(v116 + 72) != 0;
        result = sub_20E8C31DC(v116, "OSLogSurrogateAppender", 1, 0);
        v6 = result;
        if (((result == 0) & ~v5) == 0)
          break;
      }
LABEL_4:
      v3 = (_QWORD *)*v3;
      if (!v3)
        return result;
    }
    sub_20E863438((uint64_t)v106);
    v7 = sub_20E86A980(v107, (uint64_t)"[", 1);
    v8 = sub_20E86A980(v7, a2, a3);
    sub_20E86A980(v8, (uint64_t)"] Camera ", 9);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = sub_20E86A980(v9, (uint64_t)": D = ", 6);
    *(_QWORD *)v123 = v3 + 3;
    sub_20F3A8964(v10, (_OWORD **)v123);
    if ((v114 & 0x10) != 0)
    {
      v13 = v113;
      v14 = (const void **)&v109;
      if (v113 < v110)
      {
        v113 = v110;
        v13 = v110;
        v14 = (const void **)&v109;
      }
    }
    else
    {
      if ((v114 & 8) == 0)
      {
        v11 = 0;
        HIBYTE(v105) = 0;
        v12 = __dst;
        goto LABEL_21;
      }
      v13 = v108[2];
      v14 = (const void **)v108;
    }
    v15 = *v14;
    v11 = v13 - (_QWORD)*v14;
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v11 >= 0x17)
    {
      v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v16 = v11 | 7;
      v17 = v16 + 1;
      v12 = (void **)operator new(v16 + 1);
      __dst[1] = (void *)v11;
      v105 = v17 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v105) = v13 - *(_BYTE *)v14;
      v12 = __dst;
      if (!v11)
      {
LABEL_21:
        *((_BYTE *)v12 + v11) = 0;
        v97[0] = &v116;
        v97[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v97[2] = std::chrono::system_clock::now().__d_.__rep_;
        v98 = 3;
        v99 = "unknown file";
        v100 = 643;
        v101 = "unknown function";
        v102 = 0;
        v103 = 0;
        if (v105 >= 0)
          v18 = __dst;
        else
          v18 = (void **)__dst[0];
        v19 = *(_QWORD *)v97[0];
        v20 = (const char *)(*(_QWORD *)v97[0] + 16);
        v95 = v20;
        __s = (char *)v18;
        if (*(char *)(*(_QWORD *)v97[0] + 39) < 0)
        {
          v20 = *(const char **)(v19 + 16);
          v21 = *(_QWORD *)(v19 + 24);
          v23 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v23 & 1) != 0)
            goto LABEL_28;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)v97[0] + 39);
          v22 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v22 & 1) != 0)
            goto LABEL_28;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&v117);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v117);
          if ((_BYTE)v119 && SHIBYTE(v118) < 0)
            operator delete((void *)v117);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_28:
        if (byte_254A4A4F8[23] >= 0)
          v24 = byte_254A4A4F8;
        else
          v24 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v25 = byte_254A4A4F8[23];
        else
          v25 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v123 = os_log_create(v24, v20);
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v25 >= 0x17)
        {
          v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v27 = v25 | 7;
          v28 = v27 + 1;
          v26 = operator new(v27 + 1);
          *(_QWORD *)&v123[16] = v25;
          *(_QWORD *)&v124 = v28 | 0x8000000000000000;
          *(_QWORD *)&v123[8] = v26;
        }
        else
        {
          BYTE7(v124) = v25;
          v26 = &v123[8];
          if (!v25)
          {
LABEL_42:
            v26[v25] = 0;
            BYTE8(v124) = 1;
            if (v21 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v21 >= 0x17)
            {
              v31 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v21 | 7) != 0x17)
                v31 = v21 | 7;
              v32 = v31 + 1;
              v29 = (void **)operator new(v31 + 1);
              v125[1] = (void *)v21;
              v126 = v32 | 0x8000000000000000;
              v125[0] = v29;
            }
            else
            {
              HIBYTE(v126) = v21;
              v29 = v125;
              if (!v21)
              {
                LOBYTE(v125[0]) = 0;
                v127 = 1;
                v30 = *(NSObject **)v123;
                if ((SHIBYTE(v126) & 0x80000000) == 0)
                  goto LABEL_46;
                goto LABEL_52;
              }
            }
            memmove(v29, v20, v21);
            *((_BYTE *)v29 + v21) = 0;
            v127 = 1;
            v30 = *(NSObject **)v123;
            if ((SHIBYTE(v126) & 0x80000000) == 0)
            {
LABEL_46:
              if (!BYTE8(v124))
                goto LABEL_55;
              goto LABEL_53;
            }
LABEL_52:
            operator delete(v125[0]);
            if (!BYTE8(v124))
              goto LABEL_55;
LABEL_53:
            if (SBYTE7(v124) < 0)
              operator delete(*(void **)&v123[8]);
LABEL_55:
            if (*(_QWORD *)v123)
              os_release(*(void **)v123);
            if (!v6 || !*(_QWORD *)(v6 + 24))
            {
              os_log_type_enabled(v30, OS_LOG_TYPE_INFO);
              *(_DWORD *)v123 = 136315138;
              *(_QWORD *)&v123[4] = __s;
              v39 = (void *)_os_log_send_and_compose_impl();
              if (!v39)
                goto LABEL_127;
              free(v39);
              if (!v4)
                goto LABEL_131;
              goto LABEL_128;
            }
            v33 = _os_log_pack_size();
            v34 = (std::__shared_weak_count_vtbl *)operator new(v33, (std::align_val_t)8uLL);
            v35 = (std::__shared_weak_count *)operator new();
            v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v35->__shared_owners_ = 0;
            v35->__shared_weak_owners_ = 0;
            v35[1].__vftable = v34;
            *(_QWORD *)&v117 = v34;
            *((_QWORD *)&v117 + 1) = v34;
            v118 = v35;
            v119 = 0;
            v120 = 0;
            v36 = strlen(__s);
            if (v36 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v37 = v36;
            if (v36 >= 0x17)
            {
              v40 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v36 | 7) != 0x17)
                v40 = v36 | 7;
              v41 = v40 + 1;
              v38 = operator new(v40 + 1);
              *(_QWORD *)&v122 = v37;
              *((_QWORD *)&v122 + 1) = v41 | 0x8000000000000000;
              v121 = v38;
            }
            else
            {
              HIBYTE(v122) = v36;
              v38 = &v121;
              if (!v36)
              {
LABEL_70:
                *((_BYTE *)v38 + v37) = 0;
                v42 = v121;
                v128[0] = v122;
                *(_QWORD *)((char *)v128 + 7) = *(_QWORD *)((char *)&v122 + 7);
                v43 = HIBYTE(v122);
                v44 = operator new(0x38uLL);
                v44[1] = 0;
                v44[2] = 0;
                v44[3] = off_24C9ABC20;
                *v44 = &off_24C9ABBD0;
                v45 = v128[0];
                v44[4] = v42;
                v44[5] = v45;
                *(_QWORD *)((char *)v44 + 47) = *(_QWORD *)((char *)v128 + 7);
                *((_BYTE *)v44 + 55) = v43;
                v128[0] = 0;
                *(_QWORD *)((char *)v128 + 7) = 0;
                v46 = v120;
                v119 = (char *)(v44 + 3);
                v120 = (std::__shared_weak_count *)v44;
                if (v46)
                {
                  p_shared_owners = (unint64_t *)&v46->__shared_owners_;
                  do
                    v48 = __ldaxr(p_shared_owners);
                  while (__stlxr(v48 - 1, p_shared_owners));
                  if (!v48)
                  {
                    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                    std::__shared_weak_count::__release_weak(v46);
                  }
                }
                *(_OWORD *)v123 = v117;
                v49 = v119;
                *(_QWORD *)&v123[16] = v118;
                if (v118)
                {
                  v50 = (unint64_t *)&v118->__shared_owners_;
                  do
                    v51 = __ldxr(v50);
                  while (__stxr(v51 + 1, v50));
                }
                v52 = v120;
                *(_QWORD *)&v124 = v49;
                *((_QWORD *)&v124 + 1) = v120;
                if (v120)
                {
                  v53 = (unint64_t *)&v120->__shared_owners_;
                  do
                    v54 = __ldxr(v53);
                  while (__stxr(v54 + 1, v53));
                  v125[0] = v49;
                  do
                    v55 = __ldaxr(v53);
                  while (__stlxr(v55 - 1, v53));
                  if (!v55)
                  {
                    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                    std::__shared_weak_count::__release_weak(v52);
                  }
                }
                else
                {
                  v125[0] = v49;
                }
                v56 = v118;
                if (v118)
                {
                  v57 = (unint64_t *)&v118->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                v59 = *(_QWORD *)v123;
                if (*((char *)v125[0] + 31) >= 0)
                  v60 = (char *)v125[0] + 8;
                else
                  v60 = (char *)*((_QWORD *)v125[0] + 1);
                v61 = _os_log_pack_fill();
                *(_DWORD *)v61 = 136315138;
                *(_QWORD *)(v61 + 4) = v60;
                v62 = operator new();
                v63 = *(unsigned __int8 *)(v19 + 39);
                v64 = v95;
                if ((v63 & 0x80u) != 0)
                {
                  v64 = *(const char **)(v19 + 16);
                  v63 = *(_QWORD *)(v19 + 24);
                }
                *(_QWORD *)v62 = v59;
                *(_OWORD *)(v62 + 8) = *(_OWORD *)&v123[8];
                *(_QWORD *)&v123[8] = 0;
                *(_QWORD *)&v123[16] = 0;
                *(_OWORD *)(v62 + 24) = v124;
                v124 = 0uLL;
                *(_QWORD *)(v62 + 40) = v64;
                *(_QWORD *)(v62 + 48) = v63;
                *(_BYTE *)(v62 + 56) = 1;
                v121 = 0;
                *(_QWORD *)&v117 = v62;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), &v117);
                v65 = v117;
                *(_QWORD *)&v117 = 0;
                if (v65)
                {
                  v66 = *(std::__shared_weak_count **)(v65 + 32);
                  if (v66)
                  {
                    v67 = (unint64_t *)&v66->__shared_owners_;
                    do
                      v68 = __ldaxr(v67);
                    while (__stlxr(v68 - 1, v67));
                    if (!v68)
                    {
                      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                      std::__shared_weak_count::__release_weak(v66);
                    }
                  }
                  v69 = *(std::__shared_weak_count **)(v65 + 16);
                  if (v69)
                  {
                    v70 = (unint64_t *)&v69->__shared_owners_;
                    do
                      v71 = __ldaxr(v70);
                    while (__stlxr(v71 - 1, v70));
                    if (!v71)
                    {
                      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                      std::__shared_weak_count::__release_weak(v69);
                    }
                  }
                  MEMORY[0x212BC6398](v65, 0x10F0C40B62ED6C6);
                  v72 = v121;
                  v121 = 0;
                  if (v72)
                  {
                    v73 = (std::__shared_weak_count *)v72[4];
                    if (v73)
                    {
                      v74 = (unint64_t *)&v73->__shared_owners_;
                      do
                        v75 = __ldaxr(v74);
                      while (__stlxr(v75 - 1, v74));
                      if (!v75)
                      {
                        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                        std::__shared_weak_count::__release_weak(v73);
                      }
                    }
                    v76 = (std::__shared_weak_count *)v72[2];
                    if (v76)
                    {
                      v77 = (unint64_t *)&v76->__shared_owners_;
                      do
                        v78 = __ldaxr(v77);
                      while (__stlxr(v78 - 1, v77));
                      if (!v78)
                      {
                        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                        std::__shared_weak_count::__release_weak(v76);
                      }
                    }
                    MEMORY[0x212BC6398](v72, 0x10F0C40B62ED6C6);
                  }
                }
                v79 = (std::__shared_weak_count *)*((_QWORD *)&v124 + 1);
                if (!*((_QWORD *)&v124 + 1))
                  goto LABEL_123;
                v80 = (unint64_t *)(*((_QWORD *)&v124 + 1) + 8);
                do
                  v81 = __ldaxr(v80);
                while (__stlxr(v81 - 1, v80));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                  v82 = *(std::__shared_weak_count **)&v123[16];
                  if (!*(_QWORD *)&v123[16])
                    goto LABEL_127;
                }
                else
                {
LABEL_123:
                  v82 = *(std::__shared_weak_count **)&v123[16];
                  if (!*(_QWORD *)&v123[16])
                    goto LABEL_127;
                }
                v83 = (unint64_t *)&v82->__shared_owners_;
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (v84)
                {
LABEL_127:
                  if (!v4)
                    goto LABEL_131;
                  goto LABEL_128;
                }
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
                if (!v4)
                  goto LABEL_131;
LABEL_128:
                v85 = (const char *)__dst;
                if (v105 < 0)
                  v85 = (const char *)__dst[0];
                sub_20E8C003C((uint64_t)v97, "%s", v85);
                sub_20E863570((uint64_t)v97);
LABEL_131:
                sub_20E863570((uint64_t)v97);
                v86 = v103;
                if (!v103)
                  goto LABEL_135;
                v87 = (unint64_t *)&v103->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                  if ((SHIBYTE(v105) & 0x80000000) == 0)
                    goto LABEL_137;
                }
                else
                {
LABEL_135:
                  if ((SHIBYTE(v105) & 0x80000000) == 0)
                  {
LABEL_137:
                    v106[0] = v92;
                    *(_QWORD *)((char *)v106 + *(_QWORD *)(v92 - 24)) = v91;
                    v107[0] = v90;
                    v107[1] = v89;
                    if (v112 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    result = MEMORY[0x212BC6290](&v115);
                    goto LABEL_4;
                  }
                }
                operator delete(__dst[0]);
                goto LABEL_137;
              }
            }
            memcpy(v38, __s, v37);
            goto LABEL_70;
          }
        }
        memmove(v26, v24, v25);
        goto LABEL_42;
      }
    }
    memmove(v12, v15, v11);
    goto LABEL_21;
  }
  return result;
}

void sub_20F380CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  uint64_t v48;

  if (*(_BYTE *)(v48 - 232) && *(char *)(v48 - 233) < 0)
    operator delete(*(void **)(v48 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a33);
  if (a47 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a48);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a48);
  _Unwind_Resume(a1);
}

uint64_t sub_20F380E74(uint64_t *a1, uint64_t a2, float64x2_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v14;
  float64x2_t v15;
  float64x2_t v20;
  int v21;
  float32x4_t *v22;
  float32x4_t v28;
  float32x4_t v29;
  double v30;
  float64x2_t v35;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v42;
  int8x16_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int8x16_t v51;
  uint64_t result;
  int v53;
  unint64_t v54;
  unint64_t v56;
  size_t v57;
  const char *v58;
  unsigned __int8 v59;
  const char *v60;
  size_t v61;
  void *v62;
  unint64_t v63;
  const char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  std::__shared_weak_count_vtbl *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *p_shared_owners;
  unint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  int v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  _QWORD v114[3];
  int v115;
  const char *v116;
  int v117;
  const char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *object;
  void *v125[2];
  __int128 v126;
  void *__p[2];
  unint64_t v128;
  char v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 40;
  if (*(_BYTE *)(a2 + 192))
    v5 = a2 + 40;
  else
    v5 = 0;
  v7 = *a1;
  v6 = a1[1];
  if (v6 != *a1)
  {
    v8 = 0x8E38E38E38E38E39 * ((v6 - *a1) >> 4);
    v9 = *(_QWORD *)(v5 + 32);
    do
    {
      v10 = v8 >> 1;
      v11 = v7 + 144 * (v8 >> 1);
      if (*(_QWORD *)v11 < v9 || *(_QWORD *)v11 == v9 && *(_DWORD *)(v11 + 8) < *(_DWORD *)(v5 + 40))
      {
        v7 = v11 + 144;
        v10 = v8 + ~v10;
      }
      v8 = v10;
    }
    while (v10);
  }
  if (v7 == v6 || *(_QWORD *)v7 != *(_QWORD *)(v5 + 32) || *(_DWORD *)(v7 + 8) != *(_DWORD *)(v5 + 40))
  {
    sub_20F34CD58(&v121);
    if (**(int **)(v121 + 56) > 2)
      return 0;
    v53 = *(unsigned __int8 *)(v121 + 72);
    v54 = sub_20E8C31DC(v121, "OSLogSurrogateAppender", 1, 0);
    if (!v53 && v54 == 0)
      return 0;
    v56 = v54;
    v114[0] = &v121;
    v114[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v114[2] = std::chrono::system_clock::now().__d_.__rep_;
    v115 = 2;
    v116 = "unknown file";
    v117 = 1001;
    v119 = 0;
    v120 = 0;
    v118 = "unknown function";
    v111 = v121;
    if (*(char *)(v121 + 39) < 0)
    {
      v58 = *(const char **)(v121 + 16);
      v57 = *(_QWORD *)(v121 + 24);
    }
    else
    {
      v57 = *(unsigned __int8 *)(v121 + 39);
      v58 = (const char *)(v121 + 16);
    }
    v110 = v121 + 16;
    v112 = *(_DWORD *)(a2 + 32);
    v113 = *(_DWORD *)(v5 + 40);
    v59 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v126 && SHIBYTE(v125[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v60 = byte_254A4A4F8;
    else
      v60 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v61 = byte_254A4A4F8[23];
    else
      v61 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v60, v58);
    v62 = v125;
    if (v61 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v61 >= 0x17)
    {
      v63 = v56;
      v64 = v58;
      v65 = v53;
      v66 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v61 | 7) != 0x17)
        v66 = v61 | 7;
      v67 = v66 + 1;
      v62 = operator new(v66 + 1);
      v125[1] = (void *)v61;
      *(_QWORD *)&v126 = v67 | 0x8000000000000000;
      v125[0] = v62;
      v53 = v65;
      v58 = v64;
      v56 = v63;
    }
    else
    {
      BYTE7(v126) = v61;
      if (!v61)
      {
LABEL_46:
        *((_BYTE *)v62 + v61) = 0;
        BYTE8(v126) = 1;
        v68 = __p;
        if (v57 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v57 >= 0x17)
        {
          v70 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v57 | 7) != 0x17)
            v70 = v57 | 7;
          v71 = v70 + 1;
          v68 = operator new(v70 + 1);
          __p[1] = (void *)v57;
          v128 = v71 | 0x8000000000000000;
          __p[0] = v68;
        }
        else
        {
          HIBYTE(v128) = v57;
          if (!v57)
          {
            LOBYTE(__p[0]) = 0;
            v129 = 1;
            v69 = object;
            if ((SHIBYTE(v128) & 0x80000000) == 0)
              goto LABEL_50;
            goto LABEL_56;
          }
        }
        memmove(v68, v58, v57);
        *((_BYTE *)v68 + v57) = 0;
        v129 = 1;
        v69 = object;
        if ((SHIBYTE(v128) & 0x80000000) == 0)
        {
LABEL_50:
          if (!BYTE8(v126))
            goto LABEL_59;
          goto LABEL_57;
        }
LABEL_56:
        operator delete(__p[0]);
        if (!BYTE8(v126))
        {
LABEL_59:
          if (object)
            os_release(object);
          if (v56 && *(_QWORD *)(v56 + 24))
          {
            v72 = _os_log_pack_size();
            v73 = (std::__shared_weak_count_vtbl *)operator new(v72, (std::align_val_t)8uLL);
            v74 = (std::__shared_weak_count *)operator new();
            v75 = v74;
            v74->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v74->__shared_owners_;
            v74->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v74->__shared_weak_owners_ = 0;
            v74[1].__vftable = v73;
            object = v73;
            v125[0] = v73;
            v125[1] = v74;
            do
              v77 = __ldxr(p_shared_owners);
            while (__stxr(v77 + 1, p_shared_owners));
            v126 = 0uLL;
            __p[0] = 0;
            do
              v78 = __ldaxr(p_shared_owners);
            while (__stlxr(v78 - 1, p_shared_owners));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v75);
            }
            v79 = object;
            v80 = _os_log_pack_fill();
            v81 = *(_DWORD *)(v5 + 48);
            *(_DWORD *)v80 = 67109632;
            *(_DWORD *)(v80 + 4) = v112;
            *(_WORD *)(v80 + 8) = 1024;
            *(_DWORD *)(v80 + 10) = v113;
            *(_WORD *)(v80 + 14) = 1024;
            *(_DWORD *)(v80 + 16) = v81;
            v82 = operator new();
            v83 = *(unsigned __int8 *)(v111 + 39);
            v84 = v110;
            if ((v83 & 0x80u) != 0)
            {
              v84 = *(_QWORD *)(v111 + 16);
              v83 = *(_QWORD *)(v111 + 24);
            }
            *(_QWORD *)v82 = v79;
            *(_OWORD *)(v82 + 8) = *(_OWORD *)v125;
            v125[0] = 0;
            v125[1] = 0;
            *(_OWORD *)(v82 + 24) = v126;
            v126 = 0uLL;
            *(_QWORD *)(v82 + 40) = v84;
            *(_QWORD *)(v82 + 48) = v83;
            *(_BYTE *)(v82 + 56) = 2;
            v122 = 0;
            v123 = v82;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v56 + 24) + 40))(*(_QWORD *)(v56 + 24), &v123);
            v85 = v123;
            v123 = 0;
            if (v85)
            {
              v86 = *(std::__shared_weak_count **)(v85 + 32);
              if (v86)
              {
                v87 = (unint64_t *)&v86->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
              v89 = *(std::__shared_weak_count **)(v85 + 16);
              if (v89)
              {
                v90 = (unint64_t *)&v89->__shared_owners_;
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              MEMORY[0x212BC6398](v85, 0x10F0C40B62ED6C6);
              v92 = v122;
              v122 = 0;
              if (v92)
              {
                v93 = *(std::__shared_weak_count **)(v92 + 32);
                if (v93)
                {
                  v94 = (unint64_t *)&v93->__shared_owners_;
                  do
                    v95 = __ldaxr(v94);
                  while (__stlxr(v95 - 1, v94));
                  if (!v95)
                  {
                    ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                    std::__shared_weak_count::__release_weak(v93);
                  }
                }
                v96 = *(std::__shared_weak_count **)(v92 + 16);
                if (v96)
                {
                  v97 = (unint64_t *)&v96->__shared_owners_;
                  do
                    v98 = __ldaxr(v97);
                  while (__stlxr(v98 - 1, v97));
                  if (!v98)
                  {
                    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                    std::__shared_weak_count::__release_weak(v96);
                  }
                }
                MEMORY[0x212BC6398](v92, 0x10F0C40B62ED6C6);
              }
            }
            v99 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
            if (*((_QWORD *)&v126 + 1))
            {
              v100 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
            v102 = (std::__shared_weak_count *)v125[1];
            if (v125[1])
            {
              v103 = (unint64_t *)((char *)v125[1] + 8);
              do
                v104 = __ldaxr(v103);
              while (__stlxr(v104 - 1, v103));
              if (!v104)
              {
                ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                std::__shared_weak_count::__release_weak(v102);
              }
            }
          }
          else
          {
            os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG);
            v105 = *(_DWORD *)(v5 + 48);
            LODWORD(object) = 67109632;
            HIDWORD(object) = v112;
            LOWORD(v125[0]) = 1024;
            *(_DWORD *)((char *)v125 + 2) = v113;
            HIWORD(v125[0]) = 1024;
            LODWORD(v125[1]) = v105;
            v106 = (void *)_os_log_send_and_compose_impl();
            if (v106)
              free(v106);
          }
          if (v53)
          {
            sub_20E8C003C((uint64_t)v114, "In Modify3DLandmarkWithAnchorPoseChange(), failed to find single-length track %u in transformation_from_old_global_to_new_global_ with node image ID (view: %u, source: %u)", *(_QWORD *)(a2 + 32), *(_DWORD *)(v5 + 40), *(_DWORD *)(v5 + 48));
            sub_20E863570((uint64_t)v114);
          }
          sub_20E863570((uint64_t)v114);
          v107 = v120;
          if (v120)
          {
            v108 = (unint64_t *)&v120->__shared_owners_;
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          return 0;
        }
LABEL_57:
        if (SBYTE7(v126) < 0)
          operator delete(v125[0]);
        goto LABEL_59;
      }
    }
    memmove(v62, v60, v61);
    goto LABEL_46;
  }
  a3.f64[0] = *(float64_t *)(v5 + 24);
  _Q1 = *(float64x2_t *)(v5 + 8);
  _D4 = *(_QWORD *)(v7 + 64);
  v14 = *(double *)(v7 + 96);
  v15 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v7 + 16), _Q1.f64[0]), *(float64x2_t *)(v7 + 48), _Q1, 1), *(float64x2_t *)(v7 + 80), a3.f64[0]);
  __asm { FMLA            D2, D4, V1.D[1] }
  a3.f64[0] = _D2 + v14 * a3.f64[0];
  _Q1.f64[0] = *(float64_t *)(v7 + 128);
  v20 = vaddq_f64(a3, _Q1);
  *(float64x2_t *)(v5 + 8) = vaddq_f64(v15, *(float64x2_t *)(v7 + 112));
  *(float64_t *)(v5 + 24) = v20.f64[0];
  v21 = *(unsigned __int8 *)(a2 + 192);
  if (*(_BYTE *)(a2 + 192))
    v22 = (float32x4_t *)(a2 + 40);
  else
    v22 = 0;
  if (v22[9].i8[4])
  {
    v20.f64[0] = *(float64_t *)(v7 + 32);
    _Q3 = *(float64x2_t *)(v7 + 16);
    _D1 = *(double *)(v7 + 64);
    _Q4 = *(float64x2_t *)(v7 + 48);
    _D2 = *(double *)(v7 + 96);
    _Q5 = *(float64x2_t *)(v7 + 80);
    LODWORD(v14) = v22[9].i32[0];
    v28 = v22[7];
    v29 = v22[8];
    *(_QWORD *)&v30 = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)&v14);
    _Q17 = vcvt_hight_f64_f32(v29);
    _Q16 = vcvtq_f64_f32(*(float32x2_t *)v29.f32);
    _Q18 = vcvt_hight_f64_f32(v28);
    _Q7 = vcvtq_f64_f32(*(float32x2_t *)v28.f32);
    v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, _Q7.f64[0]), _Q4, _Q7, 1), _Q5, _Q18.f64[0]);
    __asm { FMLA            D20, D1, V7.D[1] }
    v37 = vmlad_n_f64(_D20, _D2, _Q18.f64[0]);
    v38 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(_Q3, _Q18, 1), _Q4, _Q16.f64[0]), _Q5, _Q16, 1);
    __asm { FMLA            D18, D2, V16.D[1] }
    v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q3, _Q17.f64[0]), _Q4, _Q17, 1), _Q5, v30);
    __asm { FMLA            D21, D1, V17.D[1] }
    _D21 = vmlad_n_f64(_D21, _D2, v30);
    v42 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v35, _Q3.f64[0]), v38, _Q4.f64[0]), v39, _Q5.f64[0]);
    _Q17.f64[0] = vmlad_n_f64(vmlad_n_f64(v37 * _Q3.f64[0], _Q18.f64[0], _Q4.f64[0]), _D21, _Q5.f64[0]);
    v43 = (int8x16_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v35, _Q3, 1), v38, _Q4, 1), v39, _Q5, 1);
    __asm
    {
      FMLA            D3, D18, V4.D[1]
      FMLA            D3, D21, V5.D[1]
    }
    v44 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v35, v20.f64[0]), v38, _D1), v39, _D2);
    v20.f64[0] = v37 * v20.f64[0] + _Q18.f64[0] * _D1 + _D21 * _D2;
    v45 = (float64x2_t)vextq_s8(v43, (int8x16_t)_Q3, 8uLL);
    v46 = (float64x2_t)vzip1q_s64((int64x2_t)_Q17, (int64x2_t)v43);
    *(float32x2_t *)&_Q3.f64[0] = vcvt_f32_f64(v46);
    v47 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v45), v44);
    *(float32x2_t *)&_Q5.f64[0] = vcvt_f32_f64(v42);
    v48 = (int8x16_t)vcvt_hight_f32_f64(*(int32x2_t *)&_Q5.f64[0], v46);
    v22[9].i32[0] = vcvt_f32_f64(v20).u32[0];
    v22[7] = (float32x4_t)v48;
    v22[8] = (float32x4_t)v47;
    v49 = (int32x4_t)vextq_s8(v48, v47, 0xCuLL);
    v50 = (int32x4_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v44), v20);
    v51 = (int8x16_t)vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v49, (int8x16_t)v49, 0xCuLL), (int8x16_t)v49, 8uLL), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), (int8x16_t)v50, 0xCuLL)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v49, v49), (int8x16_t)v49, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v50, (int8x16_t)v50, 0xCuLL), (int8x16_t)v50, 8uLL));
    v22[9].i8[4] = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)&_Q5.f64[0], *(float32x2_t *)v51.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1), *(float32x2_t *)&_Q5.f64[0], 1), (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL), *(float32x2_t *)&_Q3.f64[0]).f32[0] > 0.0;
    v21 = *(unsigned __int8 *)(a2 + 192);
  }
  if (!v21)
    v4 = 0;
  result = 1;
  *(_BYTE *)(v4 + 150) = 1;
  return result;
}

void sub_20F381854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a33)
  {
    if (a32 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F381894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E86E8C4(&a26);
  sub_20E86E8C4(&a25);
  sub_20E86E658((uint64_t)&a27);
  sub_20E863714((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F3818C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x212BC6398](v7, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3818F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F381908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F38191C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F381930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F381994(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, unsigned int a6)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v11;
  float64x2_t v12;
  int8x16_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float64x2_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  int v33;
  float64x2_t v34;
  float64x2_t v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  const char *v41;
  uint64_t v42;
  unsigned __int8 v43;
  const char *v44;
  size_t v45;
  _BYTE *v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  size_t v56;
  std::__shared_weak_count_vtbl *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  double v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  double __srca;
  const char *__src;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  int8x16_t v125;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int8x16_t v127;
  double v128;
  const char *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  int8x16_t v132;
  double v133;
  int8x16_t v134;
  double v135;
  simd_double2x2 v136;
  double v137[2];
  uint64_t v138[2];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _BYTE v145[48];
  float64x2_t v146;
  double v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned int *)a2[3];
  v7 = (unsigned int *)a2[4];
  if (v6 == v7)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 288) = 0;
    return;
  }
  v11 = 0;
  v143 = 0u;
  v144 = 0u;
  HIDWORD(v12.f64[0]) = 0;
  v122 = 0u;
  v123 = 0u;
  v141 = 0u;
  v142 = 0u;
  v124 = 0u;
  v120 = 0u;
  v121 = 0u;
  v118 = 0u;
  v119 = 0u;
  v140 = 0uLL;
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  v139 = 0uLL;
  v113 = 0u;
  do
  {
    v27 = *(_QWORD *)(*a2 + 40 * *v6 + 32);
    if (*(_BYTE *)(v27 + 148))
    {
      v28 = *(float *)(*(_QWORD *)(*a2 + 40 * *v6 + 24) + 32);
      v29 = *a3;
      v30 = (float64x2_t *)a3[2];
      LODWORD(v12.f64[0]) = *(_DWORD *)(v27 + 144);
      v32 = *(float32x4_t *)(v27 + 112);
      v31 = *(float32x4_t *)(v27 + 128);
      *(float64x2_t *)&v145[32] = vcvtq_f64_f32(*(float32x2_t *)v31.f32);
      v146 = vcvt_hight_f64_f32(v31);
      *(float64x2_t *)v145 = vcvtq_f64_f32(*(float32x2_t *)v32.f32);
      *(float64x2_t *)&v145[16] = vcvt_hight_f64_f32(v32);
      *(_QWORD *)&v147 = *(_OWORD *)&vcvtq_f64_f32(*(float32x2_t *)&v12.f64[0]);
      v33 = sub_20FC62D74((double *)v138, v137, (uint64_t)&v136, (uint64_t)&v125, (uint64_t)&v132, 0, v29, v30, v147, v146.f64[0], *(float64x2_t *)&v145[16], (float64x2_t *)(v27 + 8), *(float64x2_t *)v145, (float64x2_t *)v145, *a4);
      if (v33)
      {
        v107 = *(double *)&rep;
        v105 = v128;
        v100 = v125;
        v101 = v127;
        v109 = v133;
        __srca = v135;
        v102 = v132;
        v103 = v134;
        v34.f64[0] = v136.columns[0].f64[0];
        v34.f64[1] = v136.columns[1].f64[1];
        v35 = vaddq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v28 * v28), 0), v34);
        v136.columns[1].f64[1] = v35.f64[1];
        v136.columns[0].f64[0] = v35.f64[0];
        sub_20E8BE3B0(&v136, (simd_double2x2 *)v145);
        v13.i64[0] = v102.i64[0];
        v13.i64[1] = v103.i64[0];
        v14 = (float64x2_t)vzip2q_s64((int64x2_t)v102, (int64x2_t)v103);
        *(_QWORD *)&v15.f64[0] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
        *(_QWORD *)&v16.f64[0] = v100.i64[0];
        *(_QWORD *)&v16.f64[1] = vextq_s8(v100, v100, 8uLL).u64[0];
        *(_QWORD *)&v17.f64[0] = v101.i64[0];
        *(_QWORD *)&v17.f64[1] = vextq_s8(v101, v101, 8uLL).u64[0];
        v18 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v145, *(double *)v100.i64), *(float64x2_t *)&v145[16], *(double *)v101.i64);
        v19 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v145, v16.f64[1]), *(float64x2_t *)&v145[16], v17.f64[1]);
        v21.f64[0] = v105;
        v20.f64[0] = v107;
        v22 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v145, v107), *(float64x2_t *)&v145[16], v105);
        v23 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v145, *(double *)v102.i64), *(float64x2_t *)&v145[16], *(double *)v103.i64);
        v24 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v145, *(double *)vextq_s8(v102, v102, 8uLL).i64), *(float64x2_t *)&v145[16], *(double *)vextq_s8(v103, v103, 8uLL).i64);
        v25 = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)v145, v109), *(float64x2_t *)&v145[16], __srca);
        v113 = vaddq_f64(v113, vmlaq_laneq_f64(vmulq_n_f64(v16, v18.f64[0]), v17, v18, 1));
        v114 = vaddq_f64(v114, vmlaq_laneq_f64(vmulq_n_f64(v16, v19.f64[0]), v17, v19, 1));
        v115 = vaddq_f64(v115, vmlaq_laneq_f64(vmulq_n_f64(v16, v22.f64[0]), v17, v22, 1));
        v117 = vaddq_f64(v117, vmlaq_laneq_f64(vmulq_n_f64(v16, v23.f64[0]), v17, v23, 1));
        v119 = vaddq_f64(v119, vmlaq_laneq_f64(vmulq_n_f64(v16, v24.f64[0]), v17, v24, 1));
        v122 = vaddq_f64(v122, vmlaq_laneq_f64(vmulq_n_f64(v16, v25.f64[0]), v17, v25, 1));
        *(_QWORD *)&v20.f64[1] = v102.i64[0];
        *(_QWORD *)&v21.f64[1] = vextq_s8(v13, v13, 8uLL).u64[0];
        v116 = vaddq_f64(v116, vmlaq_laneq_f64(vmulq_n_f64(v20, v22.f64[0]), v21, v22, 1));
        v118 = vaddq_f64(v118, vmlaq_laneq_f64(vmulq_n_f64(v20, v23.f64[0]), v21, v23, 1));
        v14.f64[1] = v109;
        v15.f64[1] = __srca;
        v26 = vmlaq_laneq_f64(vmulq_n_f64(v14, v24.f64[0]), v15, v24, 1);
        v12 = vmlaq_laneq_f64(vmulq_n_f64(v14, v25.f64[0]), v15, v25, 1);
        v120 = vaddq_f64(v120, vmlaq_laneq_f64(vmulq_n_f64(v20, v24.f64[0]), v21, v24, 1));
        v121 = vaddq_f64(v26, v121);
        v123 = vaddq_f64(v123, vmlaq_laneq_f64(vmulq_n_f64(v20, v25.f64[0]), v21, v25, 1));
        v124 = vaddq_f64(v12, v124);
      }
      v11 += v33;
    }
    ++v6;
  }
  while (v6 != v7);
  sub_20F34CD58(v138);
  if (**(int **)(v138[0] + 56) > 2)
    goto LABEL_95;
  v36 = *(unsigned __int8 *)(v138[0] + 72);
  v37 = *(_BYTE *)(v138[0] + 72) != 0;
  v38 = sub_20E8C31DC(v138[0], "OSLogSurrogateAppender", 1, 0);
  if (((v38 == 0) & ~v37) != 0)
    goto LABEL_95;
  v125.i64[0] = (uint64_t)v138;
  v125.u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v127.i32[0] = 2;
  v127.i64[1] = (uint64_t)"unknown file";
  LODWORD(v128) = 1377;
  v130 = 0;
  v131 = 0;
  v129 = "unknown function";
  v39 = *(_QWORD *)v125.i64[0];
  v108 = *(_QWORD *)v125.i64[0];
  if (*(char *)(*(_QWORD *)v125.i64[0] + 39) < 0)
  {
    v41 = *(const char **)(v39 + 16);
    v40 = *(_QWORD *)(v39 + 24);
  }
  else
  {
    v40 = *(unsigned __int8 *)(*(_QWORD *)v125.i64[0] + 39);
    v41 = (const char *)(*(_QWORD *)v125.i64[0] + 16);
  }
  v106 = *(_QWORD *)v125.i64[0] + 16;
  v42 = a2[4];
  v110 = a2[3];
  v43 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v43 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v145);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v145);
    if (v145[24] && (v145[23] & 0x80000000) != 0)
      operator delete(*(void **)v145);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v44 = byte_254A4A4F8;
  else
    v44 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v45 = byte_254A4A4F8[23];
  else
    v45 = *(_QWORD *)&byte_254A4A4F8[8];
  __src = v41;
  *(_QWORD *)v145 = os_log_create(v44, v41);
  v46 = &v145[8];
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v45 >= 0x17)
  {
    v104 = v42;
    v47 = v38;
    v48 = v36;
    v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v49 = v45 | 7;
    v50 = v49 + 1;
    v46 = operator new(v49 + 1);
    *(_QWORD *)&v145[16] = v45;
    *(_QWORD *)&v145[24] = v50 | 0x8000000000000000;
    *(_QWORD *)&v145[8] = v46;
    v36 = v48;
    v38 = v47;
    v42 = v104;
    goto LABEL_28;
  }
  v145[31] = v45;
  if (v45)
LABEL_28:
    memmove(v46, v44, v45);
  v46[v45] = 0;
  v145[32] = 1;
  v51 = &v145[40];
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v40 >= 0x17)
  {
    v52 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v52 = v40 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    *(_QWORD *)&v146.f64[0] = v40;
    *(_QWORD *)&v146.f64[1] = v53 | 0x8000000000000000;
    *(_QWORD *)&v145[40] = v51;
    goto LABEL_36;
  }
  HIBYTE(v146.f64[1]) = v40;
  if (v40)
LABEL_36:
    memmove(v51, __src, v40);
  v51[v40] = 0;
  LOBYTE(v147) = 1;
  v54 = *(NSObject **)v145;
  if (SHIBYTE(v146.f64[1]) < 0)
    operator delete(*(void **)&v145[40]);
  if (v145[32] && (v145[31] & 0x80000000) != 0)
    operator delete(*(void **)&v145[8]);
  if (*(_QWORD *)v145)
    os_release(*(void **)v145);
  v55 = (v42 - v110) >> 2;
  if (v38 && *(_QWORD *)(v38 + 24))
  {
    v56 = _os_log_pack_size();
    v57 = (std::__shared_weak_count_vtbl *)operator new(v56, (std::align_val_t)8uLL);
    v58 = (std::__shared_weak_count *)operator new();
    v59 = v58;
    v58->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    v58->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v58->__shared_weak_owners_ = 0;
    v58[1].__vftable = v57;
    *(_QWORD *)v145 = v57;
    *(_QWORD *)&v145[8] = v57;
    *(_QWORD *)&v145[16] = v58;
    do
      v61 = __ldxr(p_shared_owners);
    while (__stxr(v61 + 1, p_shared_owners));
    memset(&v145[24], 0, 24);
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v59);
    }
    v63 = *(_QWORD *)v145;
    v64 = _os_log_pack_fill();
    *(_DWORD *)v64 = 67109376;
    *(_DWORD *)(v64 + 4) = v11;
    *(_WORD *)(v64 + 8) = 2048;
    *(_QWORD *)(v64 + 10) = v55;
    v65 = operator new();
    v66 = *(unsigned __int8 *)(v108 + 39);
    v67 = v106;
    if ((v66 & 0x80u) != 0)
    {
      v67 = *(_QWORD *)(v108 + 16);
      v66 = *(_QWORD *)(v108 + 24);
    }
    *(_QWORD *)v65 = v63;
    *(_OWORD *)(v65 + 8) = *(_OWORD *)&v145[8];
    *(_QWORD *)&v145[8] = 0;
    *(_QWORD *)&v145[16] = 0;
    *(_OWORD *)(v65 + 24) = *(_OWORD *)&v145[24];
    *(_QWORD *)&v145[24] = 0;
    *(_QWORD *)&v145[32] = 0;
    *(_QWORD *)(v65 + 40) = v67;
    *(_QWORD *)(v65 + 48) = v66;
    *(_BYTE *)(v65 + 56) = 2;
    v136.columns[0].f64[0] = 0.0;
    v132.i64[0] = v65;
    (*(void (**)(_QWORD, int8x16_t *))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24), &v132);
    v68 = v132.i64[0];
    v132.i64[0] = 0;
    if (v68)
    {
      v69 = *(std::__shared_weak_count **)(v68 + 32);
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = *(std::__shared_weak_count **)(v68 + 16);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      MEMORY[0x212BC6398](v68, 0x10F0C40B62ED6C6);
      v75 = v136.columns[0].f64[0];
      v136.columns[0].f64[0] = 0.0;
      if (v75 != 0.0)
      {
        v76 = *(std::__shared_weak_count **)(*(_QWORD *)&v75 + 32);
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        v79 = *(std::__shared_weak_count **)(*(_QWORD *)&v75 + 16);
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        MEMORY[0x212BC6398](*(_QWORD *)&v75, 0x10F0C40B62ED6C6);
      }
    }
    v82 = *(std::__shared_weak_count **)&v145[32];
    if (*(_QWORD *)&v145[32])
    {
      v83 = (unint64_t *)(*(_QWORD *)&v145[32] + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = *(std::__shared_weak_count **)&v145[16];
    if (*(_QWORD *)&v145[16])
    {
      v86 = (unint64_t *)(*(_QWORD *)&v145[16] + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  else
  {
    os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG);
    *(_DWORD *)v145 = 67109376;
    *(_DWORD *)&v145[4] = v11;
    *(_WORD *)&v145[8] = 2048;
    *(_QWORD *)&v145[10] = v55;
    v88 = (void *)_os_log_send_and_compose_impl();
    if (v88)
      free(v88);
  }
  if (v36)
  {
    sub_20E8C003C((uint64_t)&v125, "Number of obs with cov: %u / %zu", v11, (uint64_t)(a2[4] - a2[3]) >> 2);
    sub_20E863570((uint64_t)&v125);
  }
  sub_20E863570((uint64_t)&v125);
  v89 = v131;
  if (v131)
  {
    v90 = (unint64_t *)&v131->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
      if (v11 < a6)
        goto LABEL_96;
LABEL_98:
      v94 = v143;
      v95 = v144;
      v93 = a1;
      *(float64x2_t *)a1 = v113;
      *(_OWORD *)(a1 + 16) = v94;
      *(_OWORD *)(a1 + 32) = v95;
      *(float64x2_t *)(a1 + 48) = v114;
      v96 = v142;
      *(_OWORD *)(a1 + 64) = v141;
      *(_OWORD *)(a1 + 80) = v96;
      *(float64x2_t *)(a1 + 96) = v115;
      *(float64x2_t *)(a1 + 112) = v116;
      v97 = v139;
      *(_OWORD *)(a1 + 128) = v140;
      *(float64x2_t *)(a1 + 144) = v117;
      *(float64x2_t *)(a1 + 160) = v118;
      *(_OWORD *)(a1 + 176) = v97;
      *(float64x2_t *)(a1 + 192) = v119;
      *(float64x2_t *)(a1 + 208) = v120;
      *(float64x2_t *)(a1 + 224) = v121;
      *(float64x2_t *)(a1 + 240) = v122;
      v92 = 1;
      *(float64x2_t *)(a1 + 256) = v123;
      *(float64x2_t *)(a1 + 272) = v124;
      goto LABEL_99;
    }
  }
LABEL_95:
  if (v11 >= a6)
    goto LABEL_98;
LABEL_96:
  v92 = 0;
  v93 = a1;
  *(_BYTE *)a1 = 0;
LABEL_99:
  *(_BYTE *)(v93 + 288) = v92;
}

void sub_20F38247C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  if (*(_BYTE *)(v58 - 168))
  {
    if (*(char *)(v58 - 169) < 0)
      operator delete(*(void **)(v58 - 192));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_20F3824BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a67;
  uint64_t v67;

  sub_20E86E8C4(&a67);
  sub_20E86E8C4((uint64_t *)&STACK[0x200]);
  sub_20E86E658(v67 - 192);
  sub_20E863714((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_20F3824F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  MEMORY[0x212BC6398](v58, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_20F38251C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  sub_20E863714((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_20F382530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F3825A8(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, _BYTE *a6@<X8>)
{
  float64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  double v11;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  uint64_t v17;
  float64x2_t v18;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  size_t v32;
  void **v33;
  char v34;
  float64_t v35;
  const void **v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  size_t v43;
  unsigned __int8 v44;
  const char *v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  unint64_t v49;
  const char *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  size_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count *v60;
  size_t v61;
  size_t v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  void *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  const char *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  _QWORD v117[3];
  int v118;
  const char *v119;
  int v120;
  const char *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *__dst[2];
  int64_t v125;
  int8x16_t v126;
  __int128 v127;
  float64x2_t v128;
  __int128 v129;
  float64x2_t v130;
  void *__p[2];
  float64x2_t v132;
  float64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float64x2_t __src[18];
  _BYTE v138[296];
  __int128 v139;
  std::__shared_weak_count *v140;
  char *v141;
  std::__shared_weak_count *v142;
  _QWORD *v143;
  __int128 v144;
  _BYTE v145[24];
  __int128 v146;
  void *v147[2];
  unint64_t v148;
  char v149;
  _QWORD v150[5];

  v150[2] = *MEMORY[0x24BDAC8D0];
  sub_20F381994((uint64_t)v138, a1, a2, a3, a4, a5);
  if (!v138[288])
  {
    *a6 = 0;
    a6[288] = 0;
    return;
  }
  v8.f64[0] = *(float64_t *)(*a2 + 16);
  v9 = *(int64x2_t *)*a2;
  v10 = *(int64x2_t *)(*a2 + 24);
  v11 = *(double *)(*a2 + 64);
  _Q4 = *(int64x2_t *)(*a2 + 48);
  v13 = (float64x2_t)vzip1q_s64(v9, v10);
  v14 = (float64x2_t)vdupq_laneq_s64(_Q4, 1);
  v15 = (float64x2_t)vzip2q_s64(v9, v10);
  v8.f64[1] = *(float64_t *)(*a2 + 40);
  v16 = vextq_s8((int8x16_t)v15, (int8x16_t)v14, 8uLL);
  v17 = a2[2];
  v14.f64[0] = *(float64_t *)(v17 + 16);
  v18 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v13, *(double *)v17), v15, *(float64x2_t *)v17, 1), v8, v14.f64[0]);
  _D7 = *(_QWORD *)(v17 + 8);
  __asm { FMLA            D17, D7, V4.D[1] }
  v14.f64[0] = _D17 + v11 * v14.f64[0];
  v25 = *(_QWORD *)(*a2 + 48);
  *(_QWORD *)&v15.f64[1] = v16.i64[0];
  v130 = v8;
  *(_OWORD *)__p = *(unint64_t *)&v11;
  v126 = (int8x16_t)v13;
  v127 = v25;
  v128 = v15;
  v129 = v16.u64[1];
  v132 = vnegq_f64(v18);
  *(_QWORD *)&v133 = *(_OWORD *)&vnegq_f64(v14);
  v134 = 0x3FF0000000000000;
  if (sub_20FC84924(&v126, v138, __src))
  {
    sub_20F34CD58(&v136);
    if (**(int **)(v136 + 56) > 2
      || (v26 = *(unsigned __int8 *)(v136 + 72),
          v27 = *(_BYTE *)(v136 + 72) != 0,
          v28 = sub_20E8C31DC(v136, "OSLogSurrogateAppender", 1, 0),
          ((v28 == 0) & ~v27) != 0))
    {
LABEL_151:
      memcpy(a6, __src, 0x120uLL);
      v34 = 1;
      goto LABEL_152;
    }
    sub_20E863438((uint64_t)&v126);
    v29 = sub_20E86A980(&v127, (uint64_t)"T_Iquery_cov: \n", 15);
    sub_20F3832A0((uint64_t)v145, __src);
    if (v145[23] >= 0)
      v30 = v145;
    else
      v30 = *(_BYTE **)v145;
    if (v145[23] >= 0)
      v31 = v145[23];
    else
      v31 = *(_QWORD *)&v145[8];
    sub_20E86A980(v29, (uint64_t)v30, v31);
    if ((v145[23] & 0x80000000) != 0)
      operator delete(*(void **)v145);
    if ((v134 & 0x10) != 0)
    {
      v35 = v133;
      if (*(_QWORD *)&v133 < *(_QWORD *)&v130.f64[1])
      {
        v133 = v130.f64[1];
        v35 = v130.f64[1];
      }
      v36 = (const void **)&v130;
    }
    else
    {
      if ((v134 & 8) == 0)
      {
        v32 = 0;
        HIBYTE(v125) = 0;
        v33 = __dst;
        goto LABEL_30;
      }
      v36 = (const void **)&v128.f64[1];
      v35 = *((double *)&v129 + 1);
    }
    v37 = *v36;
    v32 = *(_QWORD *)&v35 - (_QWORD)*v36;
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v32 >= 0x17)
    {
      v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v38 = v32 | 7;
      v39 = v38 + 1;
      v33 = (void **)operator new(v38 + 1);
      __dst[1] = (void *)v32;
      v125 = v39 | 0x8000000000000000;
      __dst[0] = v33;
    }
    else
    {
      HIBYTE(v125) = LOBYTE(v35) - *(_BYTE *)v36;
      v33 = __dst;
      if (!v32)
      {
LABEL_30:
        *((_BYTE *)v33 + v32) = 0;
        v117[0] = &v136;
        v117[1] = std::chrono::steady_clock::now().__d_.__rep_;
        v117[2] = std::chrono::system_clock::now().__d_.__rep_;
        v118 = 2;
        v119 = "unknown file";
        v120 = 1405;
        v122 = 0;
        v123 = 0;
        v121 = "unknown function";
        if (v125 >= 0)
          v40 = (const char *)__dst;
        else
          v40 = (const char *)__dst[0];
        v41 = *(_QWORD *)v117[0];
        v42 = (const char *)(*(_QWORD *)v117[0] + 16);
        v116 = v42;
        if (*(char *)(*(_QWORD *)v117[0] + 39) < 0)
        {
          v42 = *(const char **)(v41 + 16);
          v43 = *(_QWORD *)(v41 + 24);
        }
        else
        {
          v43 = *(unsigned __int8 *)(*(_QWORD *)v117[0] + 39);
        }
        v44 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v145);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v145);
          if ((_BYTE)v146 && (v145[23] & 0x80000000) != 0)
            operator delete(*(void **)v145);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v45 = byte_254A4A4F8;
        else
          v45 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v46 = byte_254A4A4F8[23];
        else
          v46 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v145 = os_log_create(v45, v42);
        v47 = &v145[8];
        if (v46 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v46 >= 0x17)
        {
          v115 = v42;
          v48 = v41;
          v49 = v28;
          v50 = v40;
          v51 = v26;
          v52 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v46 | 7) != 0x17)
            v52 = v46 | 7;
          v53 = v52 + 1;
          v47 = operator new(v52 + 1);
          *(_QWORD *)&v145[16] = v46;
          *(_QWORD *)&v146 = v53 | 0x8000000000000000;
          *(_QWORD *)&v145[8] = v47;
          v26 = v51;
          v40 = v50;
          v28 = v49;
          v41 = v48;
          v42 = v115;
        }
        else
        {
          BYTE7(v146) = v46;
          if (!v46)
          {
LABEL_51:
            v47[v46] = 0;
            BYTE8(v146) = 1;
            v54 = v147;
            if (v43 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v43 >= 0x17)
            {
              v55 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v43 | 7) != 0x17)
                v55 = v43 | 7;
              v56 = v55 + 1;
              v54 = (void **)operator new(v55 + 1);
              v147[1] = (void *)v43;
              v148 = v56 | 0x8000000000000000;
              v147[0] = v54;
            }
            else
            {
              HIBYTE(v148) = v43;
              if (!v43)
              {
LABEL_59:
                *((_BYTE *)v54 + v43) = 0;
                v149 = 1;
                v57 = *(NSObject **)v145;
                if (SHIBYTE(v148) < 0)
                  operator delete(v147[0]);
                if (BYTE8(v146) && SBYTE7(v146) < 0)
                  operator delete(*(void **)&v145[8]);
                if (*(_QWORD *)v145)
                  os_release(*(void **)v145);
                if (!v28 || !*(_QWORD *)(v28 + 24))
                {
                  os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v145 = 136315138;
                  *(_QWORD *)&v145[4] = v40;
                  v64 = (void *)_os_log_send_and_compose_impl();
                  if (v64)
                    free(v64);
                  goto LABEL_137;
                }
                v58 = _os_log_pack_size();
                v59 = (std::__shared_weak_count_vtbl *)operator new(v58, (std::align_val_t)8uLL);
                v60 = (std::__shared_weak_count *)operator new();
                v60->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v60->__shared_owners_ = 0;
                v60->__shared_weak_owners_ = 0;
                v60[1].__vftable = v59;
                *(_QWORD *)&v139 = v59;
                *((_QWORD *)&v139 + 1) = v59;
                v141 = 0;
                v142 = 0;
                v140 = v60;
                v61 = strlen(v40);
                if (v61 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v62 = v61;
                if (v61 >= 0x17)
                {
                  v65 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v61 | 7) != 0x17)
                    v65 = v61 | 7;
                  v66 = v65 + 1;
                  v63 = operator new(v65 + 1);
                  *(_QWORD *)&v144 = v62;
                  *((_QWORD *)&v144 + 1) = v66 | 0x8000000000000000;
                  v143 = v63;
                }
                else
                {
                  HIBYTE(v144) = v61;
                  v63 = &v143;
                  if (!v61)
                  {
LABEL_78:
                    *((_BYTE *)v63 + v62) = 0;
                    v67 = v143;
                    v150[0] = v144;
                    *(_QWORD *)((char *)v150 + 7) = *(_QWORD *)((char *)&v144 + 7);
                    v68 = HIBYTE(v144);
                    v69 = operator new(0x38uLL);
                    v69[1] = 0;
                    v69[2] = 0;
                    v69[3] = off_24C9ABC20;
                    *v69 = &off_24C9ABBD0;
                    v70 = v150[0];
                    v69[4] = v67;
                    v69[5] = v70;
                    *(_QWORD *)((char *)v69 + 47) = *(_QWORD *)((char *)v150 + 7);
                    *((_BYTE *)v69 + 55) = v68;
                    v150[0] = 0;
                    *(_QWORD *)((char *)v150 + 7) = 0;
                    v71 = v142;
                    v141 = (char *)(v69 + 3);
                    v142 = (std::__shared_weak_count *)v69;
                    if (v71)
                    {
                      p_shared_owners = (unint64_t *)&v71->__shared_owners_;
                      do
                        v73 = __ldaxr(p_shared_owners);
                      while (__stlxr(v73 - 1, p_shared_owners));
                      if (!v73)
                      {
                        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                        std::__shared_weak_count::__release_weak(v71);
                      }
                    }
                    *(_OWORD *)v145 = v139;
                    v74 = v141;
                    *(_QWORD *)&v145[16] = v140;
                    if (v140)
                    {
                      v75 = (unint64_t *)&v140->__shared_owners_;
                      do
                        v76 = __ldxr(v75);
                      while (__stxr(v76 + 1, v75));
                    }
                    v77 = v142;
                    *(_QWORD *)&v146 = v74;
                    *((_QWORD *)&v146 + 1) = v142;
                    if (v142)
                    {
                      v78 = (unint64_t *)&v142->__shared_owners_;
                      do
                        v79 = __ldxr(v78);
                      while (__stxr(v79 + 1, v78));
                      v147[0] = v74;
                      do
                        v80 = __ldaxr(v78);
                      while (__stlxr(v80 - 1, v78));
                      if (!v80)
                      {
                        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                        std::__shared_weak_count::__release_weak(v77);
                      }
                    }
                    else
                    {
                      v147[0] = v74;
                    }
                    v81 = v140;
                    if (v140)
                    {
                      v82 = (unint64_t *)&v140->__shared_owners_;
                      do
                        v83 = __ldaxr(v82);
                      while (__stlxr(v83 - 1, v82));
                      if (!v83)
                      {
                        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                        std::__shared_weak_count::__release_weak(v81);
                      }
                    }
                    v84 = *(_QWORD *)v145;
                    if (*((char *)v147[0] + 31) >= 0)
                      v85 = (char *)v147[0] + 8;
                    else
                      v85 = (char *)*((_QWORD *)v147[0] + 1);
                    v86 = _os_log_pack_fill();
                    *(_DWORD *)v86 = 136315138;
                    *(_QWORD *)(v86 + 4) = v85;
                    v87 = operator new();
                    v88 = *(unsigned __int8 *)(v41 + 39);
                    v89 = v116;
                    if ((v88 & 0x80u) != 0)
                    {
                      v89 = *(const char **)(v41 + 16);
                      v88 = *(_QWORD *)(v41 + 24);
                    }
                    *(_QWORD *)v87 = v84;
                    *(_OWORD *)(v87 + 8) = *(_OWORD *)&v145[8];
                    *(_QWORD *)&v145[8] = 0;
                    *(_QWORD *)&v145[16] = 0;
                    *(_OWORD *)(v87 + 24) = v146;
                    v146 = 0uLL;
                    *(_QWORD *)(v87 + 40) = v89;
                    *(_QWORD *)(v87 + 48) = v88;
                    *(_BYTE *)(v87 + 56) = 2;
                    v143 = 0;
                    *(_QWORD *)&v139 = v87;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v28 + 24) + 40))(*(_QWORD *)(v28 + 24), &v139);
                    v90 = v139;
                    *(_QWORD *)&v139 = 0;
                    if (v90)
                    {
                      v91 = *(std::__shared_weak_count **)(v90 + 32);
                      if (v91)
                      {
                        v92 = (unint64_t *)&v91->__shared_owners_;
                        do
                          v93 = __ldaxr(v92);
                        while (__stlxr(v93 - 1, v92));
                        if (!v93)
                        {
                          ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                          std::__shared_weak_count::__release_weak(v91);
                        }
                      }
                      v94 = *(std::__shared_weak_count **)(v90 + 16);
                      if (v94)
                      {
                        v95 = (unint64_t *)&v94->__shared_owners_;
                        do
                          v96 = __ldaxr(v95);
                        while (__stlxr(v96 - 1, v95));
                        if (!v96)
                        {
                          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                          std::__shared_weak_count::__release_weak(v94);
                        }
                      }
                      MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
                      v97 = v143;
                      v143 = 0;
                      if (v97)
                      {
                        v98 = (std::__shared_weak_count *)v97[4];
                        if (v98)
                        {
                          v99 = (unint64_t *)&v98->__shared_owners_;
                          do
                            v100 = __ldaxr(v99);
                          while (__stlxr(v100 - 1, v99));
                          if (!v100)
                          {
                            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                            std::__shared_weak_count::__release_weak(v98);
                          }
                        }
                        v101 = (std::__shared_weak_count *)v97[2];
                        if (v101)
                        {
                          v102 = (unint64_t *)&v101->__shared_owners_;
                          do
                            v103 = __ldaxr(v102);
                          while (__stlxr(v103 - 1, v102));
                          if (!v103)
                          {
                            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                            std::__shared_weak_count::__release_weak(v101);
                          }
                        }
                        MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
                      }
                    }
                    v104 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
                    if (*((_QWORD *)&v146 + 1))
                    {
                      v105 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
                      do
                        v106 = __ldaxr(v105);
                      while (__stlxr(v106 - 1, v105));
                      if (!v106)
                      {
                        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                        std::__shared_weak_count::__release_weak(v104);
                      }
                    }
                    v107 = *(std::__shared_weak_count **)&v145[16];
                    if (*(_QWORD *)&v145[16])
                    {
                      v108 = (unint64_t *)(*(_QWORD *)&v145[16] + 8);
                      do
                        v109 = __ldaxr(v108);
                      while (__stlxr(v109 - 1, v108));
                      if (!v109)
                      {
                        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                        std::__shared_weak_count::__release_weak(v107);
                      }
                    }
LABEL_137:
                    if (v26)
                    {
                      v110 = (const char *)__dst;
                      if (v125 < 0)
                        v110 = (const char *)__dst[0];
                      sub_20E8C003C((uint64_t)v117, "%s", v110);
                      sub_20E863570((uint64_t)v117);
                    }
                    sub_20E863570((uint64_t)v117);
                    v111 = v123;
                    if (v123)
                    {
                      v112 = (unint64_t *)&v123->__shared_owners_;
                      do
                        v113 = __ldaxr(v112);
                      while (__stlxr(v113 - 1, v112));
                      if (!v113)
                      {
                        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                        std::__shared_weak_count::__release_weak(v111);
                      }
                    }
                    if (SHIBYTE(v125) < 0)
                      operator delete(__dst[0]);
                    v126.i64[0] = *MEMORY[0x24BEDB7F0];
                    v114 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(uint64_t *)((char *)v126.i64 + *(_QWORD *)(v126.i64[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                               + 64);
                    *(_QWORD *)&v127 = v114;
                    *((_QWORD *)&v127 + 1) = MEMORY[0x24BEDB848] + 16;
                    if (SHIBYTE(v132.f64[1]) < 0)
                      operator delete(__p[1]);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v135);
                    goto LABEL_151;
                  }
                }
                memcpy(v63, v40, v62);
                goto LABEL_78;
              }
            }
            memmove(v54, v42, v43);
            goto LABEL_59;
          }
        }
        memmove(v47, v45, v46);
        goto LABEL_51;
      }
    }
    memmove(v33, v37, v32);
    goto LABEL_30;
  }
  v34 = 0;
  *a6 = 0;
LABEL_152:
  a6[288] = v34;
}

void sub_20F383124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  uint64_t v29;

  if (*(_BYTE *)(v29 - 168) && *(char *)(v29 - 169) < 0)
    operator delete(*(void **)(v29 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3832A0(uint64_t a1, const void *a2)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  void *__p[2];
  char v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  int v10;
  _QWORD __dst[36];
  _QWORD v12[5];
  _QWORD *v13;

  v4 = 0;
  memcpy(__dst, a2, sizeof(__dst));
  v7 = 0x600000006;
  v8 = 6;
  v9 = __dst;
  v10 = 0;
  sub_20E9F7718((unsigned int *)&v7, __p);
  v12[0] = v3;
  v12[1] = __p;
  v12[2] = v3;
  v12[3] = __p;
  v12[4] = __p;
  v13 = v12;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v13, v3);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v4 == -1)
    sub_20E877AB8();
  __dst[0] = v12;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9FEF08[v4])(__dst, v3);
  if (v4 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9FEEF0[v4])(__dst, v3);
  return result;
}

void sub_20F3833BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3833D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20F3833F8(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  char v8;
  float64x2_t v9;
  float64x2_t v10;
  uint64_t v11;
  int64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int8x16_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  _BYTE *v86;
  uint64_t v87;
  char v88;
  size_t v89;
  void **v90;
  unint64_t v91;
  const void *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  size_t v98;
  unsigned __int8 v99;
  unsigned __int8 v100;
  const char *v101;
  size_t v102;
  _BYTE *v103;
  uint64_t v104;
  unint64_t v105;
  const char *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  size_t v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  size_t v117;
  size_t v118;
  _QWORD *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  _QWORD *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *p_shared_owners;
  unint64_t v129;
  void *v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  const char *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  int64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  int64x2_t v175;
  __int128 v176;
  int64x2_t v177;
  int64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  float64x2_t v184;
  int64x2_t v185;
  int64x2_t v186;
  int64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  const char *v197;
  float64x2_t v198;
  const char *v199;
  _QWORD v200[3];
  int v201;
  const char *v202;
  int v203;
  const char *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  void *__dst[2];
  int64_t v208;
  _QWORD v209[2];
  _QWORD v210[2];
  const void *v211;
  uint64_t v212;
  const void *v213;
  unint64_t v214;
  void *__p;
  char v216;
  unint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  int64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  int64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  int64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  int64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  char v239;
  __int128 v240;
  std::__shared_weak_count *v241;
  char *v242;
  std::__shared_weak_count *v243;
  _QWORD *v244;
  __int128 v245;
  _BYTE v246[24];
  __int128 v247;
  void *v248[2];
  unint64_t v249;
  char v250;
  _QWORD v251[5];

  v251[2] = *MEMORY[0x24BDAC8D0];
  sub_20F381994((uint64_t)&v221, a1, a2, a3, a4, a5);
  v8 = v239;
  if (v239)
  {
    v9 = (float64x2_t)vzip1q_s64(v221, v224);
    v10 = (float64x2_t)vzip1q_s64((int64x2_t)v227, (int64x2_t)v230);
    v11 = *a2;
    v12 = *(int64x2_t *)*a2;
    v13 = *(float64x2_t *)(*a2 + 24);
    v14 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, v9.f64[0]), (float64x2_t)xmmword_21030D330, v9, 1), (float64x2_t)0, v10.f64[0]), (float64x2_t)0, v10, 1);
    v15 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v9.f64[0]), (float64x2_t)0, v9, 1);
    v16 = (int8x16_t)vzip1q_s64(v12, (int64x2_t)v13);
    v194 = (float64x2_t)vdupq_lane_s64(v16.i64[0], 0);
    v17.f64[0] = 0.0;
    v17.f64[1] = vnegq_f64(v194).f64[1];
    v191 = v17;
    v18 = vmlaq_laneq_f64(vmlaq_n_f64(v15, (float64x2_t)xmmword_21030D340, v10.f64[0]), v17, v10, 1);
    *(_QWORD *)&v19.f64[0] = vdupq_laneq_s64((int64x2_t)v227, 1).u64[0];
    v19.f64[1] = v230.f64[1];
    v20 = (float64x2_t)vzip1q_s64(v228, (int64x2_t)v231);
    v21 = (float64x2_t)vzip1q_s64((int64x2_t)v233, (int64x2_t)v236);
    v222 = v10;
    v221 = (int64x2_t)v9;
    v22.i64[0] = *(_QWORD *)(v11 + 16);
    v9.f64[0] = *(float64_t *)(v11 + 64);
    v23 = *(int8x16_t *)(v11 + 48);
    v24 = (int8x16_t)vzip2q_s64(v12, (int64x2_t)v13);
    v22.i64[1] = *(_QWORD *)(v11 + 40);
    v192 = (float64x2_t)vdupq_lane_s64(v24.i64[0], 0);
    v193 = (float64x2_t)vdupq_lane_s64(v22.i64[0], 0);
    v190 = (float64x2_t)vextq_s8(v24, (int8x16_t)vdupq_laneq_s64((int64x2_t)v23, 1), 8uLL);
    v25 = (float64x2_t)vextq_s8(v16, v23, 8uLL);
    v13.f64[0] = 0.0;
    v13.f64[1] = vnegq_f64(v192).f64[1];
    v26 = v13;
    v27 = (float64x2_t)vextq_s8(v22, (int8x16_t)v9, 8uLL);
    v13.f64[0] = 0.0;
    v13.f64[1] = vnegq_f64(v193).f64[1];
    v28 = v13;
    v29 = vmlsq_laneq_f64(vmlaq_n_f64(v15, (float64x2_t)0, v10.f64[0]), v25, v10, 1);
    v30 = v25;
    v31 = vmlaq_laneq_f64(vmlaq_n_f64(v14, (float64x2_t)0, v21.f64[0]), (float64x2_t)0, v21, 1);
    v196 = (float64x2_t)vzip2q_s64((int64x2_t)v233, (int64x2_t)v236);
    v198 = v19;
    v32 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, *(double *)v224.i64), (float64x2_t)xmmword_21030D330, (float64x2_t)v224, 1), (float64x2_t)0, v19.f64[0]), (float64x2_t)0, v19, 1), (float64x2_t)0, v196.f64[0]), (float64x2_t)0, v196, 1);
    v33 = (float64x2_t)vzip1q_s64((int64x2_t)v234, (int64x2_t)v237);
    v34 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, v227.f64[0]), (float64x2_t)xmmword_21030D330, v227, 1), (float64x2_t)0, v20.f64[0]), (float64x2_t)0, v20, 1), (float64x2_t)0, v33.f64[0]), (float64x2_t)0, v33, 1);
    v189 = (float64x2_t)vzip2q_s64((int64x2_t)v234, (int64x2_t)v237);
    v35 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, v230.f64[0]), (float64x2_t)xmmword_21030D330, v230, 1), (float64x2_t)0, v231.f64[0]), (float64x2_t)0, v231, 1), (float64x2_t)0, v189.f64[0]), (float64x2_t)0, v189, 1);
    v195 = (float64x2_t)vzip1q_s64(v235, (int64x2_t)v238);
    v36 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, v233.f64[0]), (float64x2_t)xmmword_21030D330, v233, 1), (float64x2_t)0, v234.f64[0]), (float64x2_t)0, v234, 1), (float64x2_t)0, v195.f64[0]), (float64x2_t)0, v195, 1);
    v37 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D340, v236.f64[0]), (float64x2_t)xmmword_21030D330, v236, 1), (float64x2_t)0, v237.f64[0]), (float64x2_t)0, v237, 1), (float64x2_t)0, v238.f64[0]), (float64x2_t)0, v238, 1);
    v38 = vmulq_f64(v31, (float64x2_t)0);
    __asm { FMOV            V24.2D, #-1.0 }
    v44 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v38, _Q24, v32), (float64x2_t)0, v34), (float64x2_t)0, v35), (float64x2_t)0, v36), (float64x2_t)0, v37);
    v45 = vmlaq_laneq_f64(vmlaq_n_f64(v18, v26, v21.f64[0]), v13, v21, 1);
    v188 = vmlsq_laneq_f64(vmlsq_lane_f64(v29, v190, v21.f64[0], 0), v27, v21, 1);
    v46 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, *(double *)v224.i64), (float64x2_t)0, (float64x2_t)v224, 1);
    v47 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v227.f64[0]), (float64x2_t)0, v227, 1);
    v48 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v47, (float64x2_t)xmmword_21030D340, v20.f64[0]), v191, v20, 1), v26, v33.f64[0]), v13, v33, 1);
    v49 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(v47, (float64x2_t)0, v20.f64[0]), v30, v20, 1), v190, v33.f64[0], 0), v27, v33, 1);
    v50 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v230.f64[0]), (float64x2_t)0, v230, 1);
    v51 = vmlaq_laneq_f64(vmlaq_n_f64(v50, (float64x2_t)xmmword_21030D340, v231.f64[0]), v191, v231, 1);
    v52 = vmlsq_laneq_f64(vmlaq_n_f64(v50, (float64x2_t)0, v231.f64[0]), v30, v231, 1);
    v53 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v233.f64[0]), (float64x2_t)0, v233, 1);
    v54 = vmlaq_laneq_f64(vmlaq_n_f64(v53, (float64x2_t)xmmword_21030D340, v234.f64[0]), v191, v234, 1);
    v55 = vmlsq_laneq_f64(vmlaq_n_f64(v53, (float64x2_t)0, v234.f64[0]), v30, v234, 1);
    v56 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)0, v236.f64[0]), (float64x2_t)0, v236, 1);
    v57 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v46, (float64x2_t)xmmword_21030D340, v198.f64[0]), v191, v198, 1), v26, v196.f64[0]), v28, v196, 1);
    v58 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v26, v189.f64[0]), v28, v189, 1);
    v59 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v26, v195.f64[0]), v28, v195, 1);
    v60 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v56, (float64x2_t)xmmword_21030D340, v237.f64[0]), v191, v237, 1), v26, v238.f64[0]), v28, v238, 1);
    v61 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(v56, (float64x2_t)0, v237.f64[0]), v30, v237, 1), v190, v238.f64[0], 0), v27, v238, 1);
    v62 = vmlaq_f64(vnegq_f64(v31), (float64x2_t)0, v32);
    v63 = vmlaq_f64(v38, (float64x2_t)0, v32);
    v64 = vmlaq_f64(vnegq_f64(v45), (float64x2_t)0, v57);
    v65 = vmulq_f64(v45, (float64x2_t)0);
    v66 = vmlaq_f64(v65, _Q24, v57);
    v67 = vmlaq_f64(v65, (float64x2_t)0, v57);
    v68 = v30;
    v69 = vmlsq_laneq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmlaq_n_f64(v46, (float64x2_t)0, v198.f64[0]), v30, v198, 1), v190, v196.f64[0], 0), v27, v196, 1);
    v70 = vmlaq_f64(vnegq_f64(v188), (float64x2_t)0, v69);
    v71 = vmulq_f64(v188, (float64x2_t)0);
    v72 = vmlaq_f64(v71, _Q24, v69);
    v73 = vmlaq_f64(v71, (float64x2_t)0, v69);
    v74 = vmlaq_f64(v63, _Q24, v34);
    v75 = vmlaq_f64(v67, _Q24, v48);
    v76 = vmlaq_f64(v73, _Q24, v49);
    v77 = vmlaq_f64(v63, (float64x2_t)0, v34);
    v78 = vmlaq_f64(v67, (float64x2_t)0, v48);
    v79 = vmlaq_f64(v73, (float64x2_t)0, v49);
    v80 = vmlsq_laneq_f64(vmlsq_lane_f64(v52, v190, v189.f64[0], 0), v27, v189, 1);
    v81 = vmlsq_laneq_f64(vmlsq_lane_f64(v55, v190, v195.f64[0], 0), v27, v195, 1);
    v223 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v70, (float64x2_t)0, v49), (float64x2_t)0, v80), (float64x2_t)0, v81), (float64x2_t)0, v61);
    v221 = (int64x2_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v62, (float64x2_t)0, v34), (float64x2_t)0, v35), (float64x2_t)0, v36), (float64x2_t)0, v37);
    v222 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v64, (float64x2_t)0, v48), (float64x2_t)0, v58), (float64x2_t)0, v59), (float64x2_t)0, v60);
    v224 = (int64x2_t)v44;
    v225 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v66, (float64x2_t)0, v48), (float64x2_t)0, v58), (float64x2_t)0, v59), (float64x2_t)0, v60);
    v226 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmlaq_f64(v72, (float64x2_t)0, v49), (float64x2_t)0, v80), (float64x2_t)0, v81), (float64x2_t)0, v61);
    v227 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v74, (float64x2_t)0, v35), (float64x2_t)0, v36), (float64x2_t)0, v37);
    v229 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v76, (float64x2_t)0, v80), (float64x2_t)0, v81), (float64x2_t)0, v61);
    v228 = (int64x2_t)vmlaq_f64(vmlaq_f64(vmlaq_f64(v75, (float64x2_t)0, v58), (float64x2_t)0, v59), (float64x2_t)0, v60);
    v230 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v77, v35, v194, 1), v36, v192, 1), v37, v193, 1);
    v231 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v78, v58, v194, 1), v59, v192, 1), v60, v193, 1);
    v233 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(v77, v35, v68.f64[0], 0), v36, v190.f64[0], 0), v37, v27.f64[0], 0);
    v232 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v79, v80, v194, 1), v81, v192, 1), v61, v193, 1);
    v234 = vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(v78, v58, v68.f64[0], 0), v59, v190.f64[0], 0), v60, v27.f64[0], 0);
    v238 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v79, v80, v68, 1), v81, v190, 1), v61, v27, 1);
    v236 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v77, v35, v68, 1), v36, v190, 1), v37, v27, 1);
    v235 = (int64x2_t)vmlsq_lane_f64(vmlsq_lane_f64(vmlsq_lane_f64(v79, v80, v68.f64[0], 0), v81, v190.f64[0], 0), v61, v27.f64[0], 0);
    v237 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmlsq_laneq_f64(v78, v58, v68, 1), v59, v190, 1), v60, v27, 1);
    sub_20F34CD58(&v220);
    if (**(int **)(v220 + 56) > 2
      || (v82 = *(unsigned __int8 *)(v220 + 72),
          v83 = sub_20E8C31DC(v220, "OSLogSurrogateAppender", 1, 0),
          v84 = v83,
          !v82)
      && !v83)
    {
LABEL_150:
      v171 = v224;
      v172 = v227;
      v173 = v231;
      v174 = v230;
      v175 = vzip1q_s64(v221, v224);
      *(_QWORD *)&v176 = vdupq_laneq_s64((int64x2_t)v227, 1).u64[0];
      *((_QWORD *)&v176 + 1) = *(_QWORD *)&v230.f64[1];
      v177 = vzip1q_s64(v228, (int64x2_t)v231);
      v178 = vzip1q_s64((int64x2_t)v227, (int64x2_t)v230);
      v179 = v234;
      v180 = v233;
      v181 = v236;
      v182 = vzip1q_s64((int64x2_t)v233, (int64x2_t)v236);
      v183 = vzip2q_s64((int64x2_t)v233, (int64x2_t)v236);
      v184 = v238;
      v185 = vzip1q_s64((int64x2_t)v234, (int64x2_t)v237);
      v186 = vzip2q_s64((int64x2_t)v234, (int64x2_t)v237);
      v187 = vzip1q_s64(v235, (int64x2_t)v238);
      *(float64x2_t *)(a6 + 256) = v237;
      *(float64x2_t *)(a6 + 272) = v184;
      *(float64x2_t *)(a6 + 192) = v180;
      *(float64x2_t *)(a6 + 208) = v179;
      *(int64x2_t *)(a6 + 224) = v187;
      *(float64x2_t *)(a6 + 240) = v181;
      *(float64x2_t *)(a6 + 160) = v173;
      *(int64x2_t *)(a6 + 176) = v186;
      *(int64x2_t *)(a6 + 128) = v185;
      *(float64x2_t *)(a6 + 144) = v174;
      *(float64x2_t *)(a6 + 96) = v172;
      *(int64x2_t *)(a6 + 112) = v177;
      *(int64x2_t *)(a6 + 32) = v182;
      *(int64x2_t *)(a6 + 48) = v171;
      *(int64x2_t *)a6 = v175;
      *(int64x2_t *)(a6 + 16) = v178;
      *(_OWORD *)(a6 + 64) = v176;
      *(int64x2_t *)(a6 + 80) = v183;
      v8 = 1;
      goto LABEL_151;
    }
    sub_20E863438((uint64_t)v209);
    v85 = sub_20E86A980(v210, (uint64_t)"T_Iquery_info: \n", 16);
    sub_20F3832A0((uint64_t)v246, &v221);
    if (v246[23] >= 0)
      v86 = v246;
    else
      v86 = *(_BYTE **)v246;
    if (v246[23] >= 0)
      v87 = v246[23];
    else
      v87 = *(_QWORD *)&v246[8];
    sub_20E86A980(v85, (uint64_t)v86, v87);
    if ((v246[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v246);
      v88 = v218;
      if ((v218 & 0x10) == 0)
      {
LABEL_13:
        if ((v88 & 8) == 0)
        {
          v89 = 0;
          HIBYTE(v208) = 0;
          v90 = __dst;
          goto LABEL_27;
        }
        v92 = v211;
        v89 = v212 - (_QWORD)v211;
        if ((unint64_t)(v212 - (_QWORD)v211) > 0x7FFFFFFFFFFFFFF7)
LABEL_72:
          sub_20E860B7C();
LABEL_20:
        if (v89 >= 0x17)
        {
          v93 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v89 | 7) != 0x17)
            v93 = v89 | 7;
          v94 = v93 + 1;
          v90 = (void **)operator new(v93 + 1);
          __dst[1] = (void *)v89;
          v208 = v94 | 0x8000000000000000;
          __dst[0] = v90;
        }
        else
        {
          HIBYTE(v208) = v89;
          v90 = __dst;
          if (!v89)
          {
LABEL_27:
            *((_BYTE *)v90 + v89) = 0;
            v200[0] = &v220;
            v200[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v200[2] = std::chrono::system_clock::now().__d_.__rep_;
            v201 = 2;
            v202 = "unknown file";
            v203 = 1428;
            v205 = 0;
            v206 = 0;
            v204 = "unknown function";
            if (v208 >= 0)
              v95 = (const char *)__dst;
            else
              v95 = (const char *)__dst[0];
            v96 = *(_QWORD *)v200[0];
            v97 = (const char *)(*(_QWORD *)v200[0] + 16);
            v199 = v97;
            if (*(char *)(*(_QWORD *)v200[0] + 39) < 0)
            {
              v97 = *(const char **)(v96 + 16);
              v98 = *(_QWORD *)(v96 + 24);
              v100 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v100 & 1) != 0)
                goto LABEL_34;
            }
            else
            {
              v98 = *(unsigned __int8 *)(*(_QWORD *)v200[0] + 39);
              v99 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v99 & 1) != 0)
                goto LABEL_34;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v246);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v246);
              if ((_BYTE)v247 && (v246[23] & 0x80000000) != 0)
                operator delete(*(void **)v246);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_34:
            if (byte_254A4A4F8[23] >= 0)
              v101 = byte_254A4A4F8;
            else
              v101 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v102 = byte_254A4A4F8[23];
            else
              v102 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)v246 = os_log_create(v101, v97);
            v103 = &v246[8];
            if (v102 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v102 >= 0x17)
            {
              v197 = v97;
              v104 = v96;
              v105 = v84;
              v106 = v95;
              v107 = v82;
              v108 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v102 | 7) != 0x17)
                v108 = v102 | 7;
              v109 = v108 + 1;
              v103 = operator new(v108 + 1);
              *(_QWORD *)&v246[16] = v102;
              *(_QWORD *)&v247 = v109 | 0x8000000000000000;
              *(_QWORD *)&v246[8] = v103;
              v82 = v107;
              v95 = v106;
              v84 = v105;
              v96 = v104;
              v97 = v197;
            }
            else
            {
              BYTE7(v247) = v102;
              if (!v102)
              {
LABEL_48:
                v103[v102] = 0;
                BYTE8(v247) = 1;
                v110 = v248;
                if (v98 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v98 >= 0x17)
                {
                  v111 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v98 | 7) != 0x17)
                    v111 = v98 | 7;
                  v112 = v111 + 1;
                  v110 = (void **)operator new(v111 + 1);
                  v248[1] = (void *)v98;
                  v249 = v112 | 0x8000000000000000;
                  v248[0] = v110;
                }
                else
                {
                  HIBYTE(v249) = v98;
                  if (!v98)
                  {
LABEL_56:
                    *((_BYTE *)v110 + v98) = 0;
                    v250 = 1;
                    v113 = *(NSObject **)v246;
                    if (SHIBYTE(v249) < 0)
                      operator delete(v248[0]);
                    if (BYTE8(v247) && SBYTE7(v247) < 0)
                      operator delete(*(void **)&v246[8]);
                    if (*(_QWORD *)v246)
                      os_release(*(void **)v246);
                    if (!v84 || !*(_QWORD *)(v84 + 24))
                    {
                      os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG);
                      *(_DWORD *)v246 = 136315138;
                      *(_QWORD *)&v246[4] = v95;
                      v120 = (void *)_os_log_send_and_compose_impl();
                      if (v120)
                        free(v120);
                      goto LABEL_136;
                    }
                    v114 = _os_log_pack_size();
                    v115 = (std::__shared_weak_count_vtbl *)operator new(v114, (std::align_val_t)8uLL);
                    v116 = (std::__shared_weak_count *)operator new();
                    v116->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v116->__shared_owners_ = 0;
                    v116->__shared_weak_owners_ = 0;
                    v116[1].__vftable = v115;
                    *(_QWORD *)&v240 = v115;
                    *((_QWORD *)&v240 + 1) = v115;
                    v243 = 0;
                    v241 = v116;
                    v242 = 0;
                    v117 = strlen(v95);
                    if (v117 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v118 = v117;
                    if (v117 >= 0x17)
                    {
                      v121 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v117 | 7) != 0x17)
                        v121 = v117 | 7;
                      v122 = v121 + 1;
                      v119 = operator new(v121 + 1);
                      *((_QWORD *)&v245 + 1) = v122 | 0x8000000000000000;
                      v244 = v119;
                      *(_QWORD *)&v245 = v118;
                    }
                    else
                    {
                      HIBYTE(v245) = v117;
                      v119 = &v244;
                      if (!v117)
                      {
LABEL_77:
                        *((_BYTE *)v119 + v118) = 0;
                        v123 = v244;
                        v251[0] = v245;
                        *(_QWORD *)((char *)v251 + 7) = *(_QWORD *)((char *)&v245 + 7);
                        v124 = HIBYTE(v245);
                        v125 = operator new(0x38uLL);
                        v125[1] = 0;
                        v125[2] = 0;
                        v125[3] = off_24C9ABC20;
                        *v125 = &off_24C9ABBD0;
                        v126 = v251[0];
                        v125[4] = v123;
                        v125[5] = v126;
                        *(_QWORD *)((char *)v125 + 47) = *(_QWORD *)((char *)v251 + 7);
                        *((_BYTE *)v125 + 55) = v124;
                        v251[0] = 0;
                        *(_QWORD *)((char *)v251 + 7) = 0;
                        v127 = v243;
                        v242 = (char *)(v125 + 3);
                        v243 = (std::__shared_weak_count *)v125;
                        if (v127)
                        {
                          p_shared_owners = (unint64_t *)&v127->__shared_owners_;
                          do
                            v129 = __ldaxr(p_shared_owners);
                          while (__stlxr(v129 - 1, p_shared_owners));
                          if (!v129)
                          {
                            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                            std::__shared_weak_count::__release_weak(v127);
                          }
                        }
                        *(_OWORD *)v246 = v240;
                        v130 = v242;
                        *(_QWORD *)&v246[16] = v241;
                        if (v241)
                        {
                          v131 = (unint64_t *)&v241->__shared_owners_;
                          do
                            v132 = __ldxr(v131);
                          while (__stxr(v132 + 1, v131));
                        }
                        v133 = v243;
                        *(_QWORD *)&v247 = v130;
                        *((_QWORD *)&v247 + 1) = v243;
                        if (v243)
                        {
                          v134 = (unint64_t *)&v243->__shared_owners_;
                          do
                            v135 = __ldxr(v134);
                          while (__stxr(v135 + 1, v134));
                          v248[0] = v130;
                          do
                            v136 = __ldaxr(v134);
                          while (__stlxr(v136 - 1, v134));
                          if (!v136)
                          {
                            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                            std::__shared_weak_count::__release_weak(v133);
                          }
                        }
                        else
                        {
                          v248[0] = v130;
                        }
                        v137 = v241;
                        if (v241)
                        {
                          v138 = (unint64_t *)&v241->__shared_owners_;
                          do
                            v139 = __ldaxr(v138);
                          while (__stlxr(v139 - 1, v138));
                          if (!v139)
                          {
                            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                            std::__shared_weak_count::__release_weak(v137);
                          }
                        }
                        v140 = *(_QWORD *)v246;
                        if (*((char *)v248[0] + 31) >= 0)
                          v141 = (char *)v248[0] + 8;
                        else
                          v141 = (char *)*((_QWORD *)v248[0] + 1);
                        v142 = _os_log_pack_fill();
                        *(_DWORD *)v142 = 136315138;
                        *(_QWORD *)(v142 + 4) = v141;
                        v143 = operator new();
                        v144 = *(unsigned __int8 *)(v96 + 39);
                        v145 = v199;
                        if ((v144 & 0x80u) != 0)
                        {
                          v145 = *(const char **)(v96 + 16);
                          v144 = *(_QWORD *)(v96 + 24);
                        }
                        *(_QWORD *)v143 = v140;
                        *(_OWORD *)(v143 + 8) = *(_OWORD *)&v246[8];
                        *(_QWORD *)&v246[8] = 0;
                        *(_QWORD *)&v246[16] = 0;
                        *(_OWORD *)(v143 + 24) = v247;
                        v247 = 0uLL;
                        *(_QWORD *)(v143 + 40) = v145;
                        *(_QWORD *)(v143 + 48) = v144;
                        *(_BYTE *)(v143 + 56) = 2;
                        v244 = 0;
                        *(_QWORD *)&v240 = v143;
                        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v84 + 24) + 40))(*(_QWORD *)(v84 + 24), &v240);
                        v146 = v240;
                        *(_QWORD *)&v240 = 0;
                        if (v146)
                        {
                          v147 = *(std::__shared_weak_count **)(v146 + 32);
                          if (v147)
                          {
                            v148 = (unint64_t *)&v147->__shared_owners_;
                            do
                              v149 = __ldaxr(v148);
                            while (__stlxr(v149 - 1, v148));
                            if (!v149)
                            {
                              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                              std::__shared_weak_count::__release_weak(v147);
                            }
                          }
                          v150 = *(std::__shared_weak_count **)(v146 + 16);
                          if (v150)
                          {
                            v151 = (unint64_t *)&v150->__shared_owners_;
                            do
                              v152 = __ldaxr(v151);
                            while (__stlxr(v152 - 1, v151));
                            if (!v152)
                            {
                              ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                              std::__shared_weak_count::__release_weak(v150);
                            }
                          }
                          MEMORY[0x212BC6398](v146, 0x10F0C40B62ED6C6);
                          v153 = v244;
                          v244 = 0;
                          if (v153)
                          {
                            v154 = (std::__shared_weak_count *)v153[4];
                            if (v154)
                            {
                              v155 = (unint64_t *)&v154->__shared_owners_;
                              do
                                v156 = __ldaxr(v155);
                              while (__stlxr(v156 - 1, v155));
                              if (!v156)
                              {
                                ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                                std::__shared_weak_count::__release_weak(v154);
                              }
                            }
                            v157 = (std::__shared_weak_count *)v153[2];
                            if (v157)
                            {
                              v158 = (unint64_t *)&v157->__shared_owners_;
                              do
                                v159 = __ldaxr(v158);
                              while (__stlxr(v159 - 1, v158));
                              if (!v159)
                              {
                                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                                std::__shared_weak_count::__release_weak(v157);
                              }
                            }
                            MEMORY[0x212BC6398](v153, 0x10F0C40B62ED6C6);
                          }
                        }
                        v160 = (std::__shared_weak_count *)*((_QWORD *)&v247 + 1);
                        if (*((_QWORD *)&v247 + 1))
                        {
                          v161 = (unint64_t *)(*((_QWORD *)&v247 + 1) + 8);
                          do
                            v162 = __ldaxr(v161);
                          while (__stlxr(v162 - 1, v161));
                          if (!v162)
                          {
                            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                            std::__shared_weak_count::__release_weak(v160);
                          }
                        }
                        v163 = *(std::__shared_weak_count **)&v246[16];
                        if (*(_QWORD *)&v246[16])
                        {
                          v164 = (unint64_t *)(*(_QWORD *)&v246[16] + 8);
                          do
                            v165 = __ldaxr(v164);
                          while (__stlxr(v165 - 1, v164));
                          if (!v165)
                          {
                            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                            std::__shared_weak_count::__release_weak(v163);
                          }
                        }
LABEL_136:
                        if (v82)
                        {
                          v166 = (const char *)__dst;
                          if (v208 < 0)
                            v166 = (const char *)__dst[0];
                          sub_20E8C003C((uint64_t)v200, "%s", v166);
                          sub_20E863570((uint64_t)v200);
                        }
                        sub_20E863570((uint64_t)v200);
                        v167 = v206;
                        if (v206)
                        {
                          v168 = (unint64_t *)&v206->__shared_owners_;
                          do
                            v169 = __ldaxr(v168);
                          while (__stlxr(v169 - 1, v168));
                          if (!v169)
                          {
                            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                            std::__shared_weak_count::__release_weak(v167);
                          }
                        }
                        if (SHIBYTE(v208) < 0)
                          operator delete(__dst[0]);
                        v209[0] = *MEMORY[0x24BEDB7F0];
                        v170 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(_QWORD *)((char *)v209 + *(_QWORD *)(v209[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        v210[0] = v170;
                        v210[1] = MEMORY[0x24BEDB848] + 16;
                        if (v216 < 0)
                          operator delete(__p);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v219);
                        goto LABEL_150;
                      }
                    }
                    memcpy(v119, v95, v118);
                    goto LABEL_77;
                  }
                }
                memmove(v110, v97, v98);
                goto LABEL_56;
              }
            }
            memmove(v103, v101, v102);
            goto LABEL_48;
          }
        }
        memmove(v90, v92, v89);
        goto LABEL_27;
      }
    }
    else
    {
      v88 = v218;
      if ((v218 & 0x10) == 0)
        goto LABEL_13;
    }
    v91 = v217;
    if (v217 < v214)
    {
      v217 = v214;
      v91 = v214;
    }
    v92 = v213;
    v89 = v91 - (_QWORD)v213;
    if (v91 - (unint64_t)v213 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_72;
    goto LABEL_20;
  }
  *(_BYTE *)a6 = 0;
LABEL_151:
  *(_BYTE *)(a6 + 288) = v8;
}

void sub_20F38451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  uint64_t v53;

  if (*(_BYTE *)(v53 - 232) && *(char *)(v53 - 233) < 0)
    operator delete(*(void **)(v53 - 256));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a38);
  if (a52 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20F384698(uint64_t *a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  BOOL v18;
  uint64_t v19;
  _BOOL4 v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  int64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _BYTE *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  __int128 *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE *v89;
  _QWORD *v90;
  int64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  _OWORD *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  _QWORD *v113;
  int64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  _OWORD *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;

  a3[1] = *a3;
  v7 = *(char **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
  {
    v17 = 0;
    v12 = 0;
    v15 = 0;
    v20 = 0;
  }
  else
  {
    v10 = v8 + 16;
    do
    {
      v11 = *(_DWORD *)(v10 - 8);
      if ((v11 & 0x10) != 0)
        break;
      v18 = v10 == v9;
      v10 += 16;
    }
    while (!v18);
    v12 = (v11 >> 4) & 1;
    v13 = v8 + 16;
    do
    {
      v14 = *(_DWORD *)(v13 - 8);
      if ((v14 & 0x80) != 0)
        break;
      v18 = v13 == v9;
      v13 += 16;
    }
    while (!v18);
    v15 = (v14 >> 7) & 1;
    v16 = v8 + 16;
    do
    {
      v17 = (*(_DWORD *)(v16 - 8) & 0x110) == 272;
      v18 = (*(_DWORD *)(v16 - 8) & 0x110) == 0x110 || v16 == v9;
      v16 += 16;
    }
    while (!v18);
    v19 = v8 + 16;
    do
    {
      v20 = (*(_DWORD *)(v19 - 8) & 0x180) == 384;
      v21 = (*(_DWORD *)(v19 - 8) & 0x180) == 0x180 || v19 == v9;
      v19 += 16;
    }
    while (!v21);
    if ((v12 & 1) != 0)
      goto LABEL_26;
  }
  if (!v15)
    goto LABEL_28;
LABEL_26:
  if ((v17 | v12 ^ 1) != 1 || !(v20 | v15 ^ 1))
  {
    if (v8 == v9)
      return;
    while (1)
    {
      v31 = *(_DWORD *)(v8 + 8);
      if ((v31 & 0x200) != 0 || (v31 & 0x90) == 0)
        goto LABEL_37;
      v32 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v7 >= v32)
        break;
      *(_QWORD *)v7 = *(_QWORD *)v8;
      v30 = (uint64_t)(v7 + 8);
LABEL_36:
      *(_QWORD *)(a4 + 8) = v30;
      v7 = (char *)v30;
LABEL_37:
      v8 += 16;
      if (v8 == v9)
        return;
    }
    v33 = *(char **)a4;
    v34 = (uint64_t)&v7[-*(_QWORD *)a4];
    v35 = v34 >> 3;
    v36 = (v34 >> 3) + 1;
    if (v36 >> 61)
      goto LABEL_139;
    v37 = v32 - (_QWORD)v33;
    if (v37 >> 2 > v36)
      v36 = v37 >> 2;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
      v38 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
    {
      if (v38 >> 61)
LABEL_140:
        sub_20E877A38();
      v39 = operator new(8 * v38);
      v40 = &v39[8 * v35];
      *v40 = *(_QWORD *)v8;
      v30 = (uint64_t)(v40 + 1);
      v41 = v7 - v33;
      if (v7 == v33)
        goto LABEL_55;
    }
    else
    {
      v39 = 0;
      v40 = (_QWORD *)(8 * v35);
      *(_QWORD *)(8 * v35) = *(_QWORD *)v8;
      v30 = 8 * v35 + 8;
      v41 = v7 - v33;
      if (v7 == v33)
        goto LABEL_55;
    }
    v42 = v41 - 8;
    if (v42 >= 0x168)
    {
      v45 = (v7 - 8 - v33) & 0xFFFFFFFFFFFFFFF8;
      if (&v39[v34 - 8 - v45] > &v39[v34 - 8])
      {
        v43 = v7;
      }
      else if (&v7[-v45 - 8] > v7 - 8)
      {
        v43 = v7;
      }
      else if ((unint64_t)(v7 - &v39[v34]) >= 0x20)
      {
        v46 = (v42 >> 3) + 1;
        v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        v43 = &v7[-v47];
        v40 = (_QWORD *)((char *)v40 - v47);
        v48 = &v39[8 * v35 - 16];
        v49 = v7 - 16;
        v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v51 = *(_OWORD *)v49;
          *(v48 - 1) = *((_OWORD *)v49 - 1);
          *v48 = v51;
          v48 -= 2;
          v49 -= 32;
          v50 -= 4;
        }
        while (v50);
        if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_55:
          *(_QWORD *)a4 = v40;
          *(_QWORD *)(a4 + 8) = v30;
          *(_QWORD *)(a4 + 16) = &v39[8 * v38];
          if (v33)
            operator delete(v33);
          goto LABEL_36;
        }
      }
      else
      {
        v43 = v7;
      }
    }
    else
    {
      v43 = v7;
    }
    do
    {
      v44 = *((_QWORD *)v43 - 1);
      v43 -= 8;
      *--v40 = v44;
    }
    while (v43 != v33);
    goto LABEL_55;
  }
LABEL_28:
  v22 = a1[1] - *a1;
  v23 = v22 >> 4;
  v24 = (_BYTE *)*a3;
  if (v22 >> 4 <= (unint64_t)((uint64_t)(a3[2] - *a3) >> 3))
    goto LABEL_74;
  if (v22 < 0)
LABEL_141:
    sub_20E92CED8();
  v25 = (_BYTE *)a3[1];
  v26 = (char *)operator new((unint64_t)v22 >> 1);
  v27 = v25 - v24;
  v28 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF8];
  v29 = v28;
  if (v25 != v24)
  {
    if ((unint64_t)(v27 - 8) < 0x58)
    {
      v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_71:
        v60 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *((_QWORD *)v29 - 1) = v60;
        v29 -= 8;
      }
      while (v25 != v24);
      goto LABEL_72;
    }
    v29 = &v26[(v25 - v24) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v25[-(v27 & 0xFFFFFFFFFFFFFFF8)] - v26) < 0x20)
      goto LABEL_71;
    v52 = v27 >> 3;
    v53 = ((unint64_t)(v27 - 8) >> 3) + 1;
    v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
    v55 = &v25[-v54];
    v29 = &v28[-v54];
    v56 = &v26[8 * v52 - 16];
    v57 = (__int128 *)(v25 - 16);
    v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v59 = *v57;
      *((_OWORD *)v56 - 1) = *(v57 - 1);
      *(_OWORD *)v56 = v59;
      v56 -= 32;
      v57 -= 2;
      v58 -= 4;
    }
    while (v58);
    v25 = v55;
    if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_71;
  }
LABEL_72:
  *a3 = v29;
  a3[1] = v28;
  a3[2] = &v26[8 * v23];
  if (v24)
    operator delete(v24);
LABEL_74:
  v61 = a2[1] - *a2;
  v62 = v61 >> 4;
  v63 = *(char **)a4;
  if (v61 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)a4) >> 3))
  {
    if (v61 < 0)
LABEL_139:
      sub_20E92CED8();
    v64 = *(_BYTE **)(a4 + 8);
    v65 = (char *)operator new((unint64_t)v61 >> 1);
    v66 = v64 - v63;
    v67 = &v65[(v64 - v63) & 0xFFFFFFFFFFFFFFF8];
    v68 = v67;
    if (v64 == v63)
      goto LABEL_84;
    if ((unint64_t)(v66 - 8) >= 0x58)
    {
      v68 = &v65[(v64 - v63) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v64[-(v66 & 0xFFFFFFFFFFFFFFF8)] - v65) >= 0x20)
      {
        v69 = v66 >> 3;
        v70 = ((unint64_t)(v66 - 8) >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v72 = &v64[-v71];
        v68 = &v67[-v71];
        v73 = &v65[8 * v69 - 16];
        v74 = (__int128 *)(v64 - 16);
        v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v76 = *v74;
          *((_OWORD *)v73 - 1) = *(v74 - 1);
          *(_OWORD *)v73 = v76;
          v73 -= 32;
          v74 -= 2;
          v75 -= 4;
        }
        while (v75);
        v64 = v72;
        if (v70 == (v70 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_84:
          *(_QWORD *)a4 = v68;
          *(_QWORD *)(a4 + 8) = v67;
          *(_QWORD *)(a4 + 16) = &v65[8 * v62];
          if (v63)
            operator delete(v63);
          goto LABEL_86;
        }
      }
    }
    else
    {
      v68 = &v65[(v64 - v63) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v77 = *((_QWORD *)v64 - 1);
      v64 -= 8;
      *((_QWORD *)v68 - 1) = v77;
      v68 -= 8;
    }
    while (v64 != v63);
    goto LABEL_84;
  }
LABEL_86:
  v78 = *a1;
  v79 = a1[1];
  while (v78 != v79)
  {
    if ((*(_BYTE *)(v78 + 9) & 2) == 0)
    {
      v82 = (char *)a3[1];
      v81 = a3[2];
      if ((unint64_t)v82 >= v81)
      {
        v83 = (char *)*a3;
        v84 = (uint64_t)&v82[-*a3];
        v85 = v84 >> 3;
        v86 = (v84 >> 3) + 1;
        if (v86 >> 61)
          goto LABEL_141;
        v87 = v81 - (_QWORD)v83;
        if (v87 >> 2 > v86)
          v86 = v87 >> 2;
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8)
          v88 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v88 = v86;
        if (v88)
        {
          if (v88 >> 61)
            goto LABEL_140;
          v89 = operator new(8 * v88);
          v90 = &v89[8 * v85];
          *v90 = *(_QWORD *)v78;
          v80 = (uint64_t)(v90 + 1);
          v91 = v82 - v83;
          if (v82 == v83)
          {
LABEL_110:
            *a3 = v90;
            a3[1] = v80;
            a3[2] = &v89[8 * v88];
            if (v83)
              operator delete(v83);
            goto LABEL_88;
          }
        }
        else
        {
          v89 = 0;
          v90 = (_QWORD *)(8 * v85);
          *(_QWORD *)(8 * v85) = *(_QWORD *)v78;
          v80 = 8 * v85 + 8;
          v91 = v82 - v83;
          if (v82 == v83)
            goto LABEL_110;
        }
        v92 = v91 - 8;
        if (v92 < 0x58)
          goto LABEL_144;
        if ((unint64_t)(v82 - v89 - v84) < 0x20)
          goto LABEL_144;
        v93 = (v92 >> 3) + 1;
        v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
        v95 = &v82[-v94];
        v90 = (_QWORD *)((char *)v90 - v94);
        v96 = &v89[8 * v85 - 16];
        v97 = v82 - 16;
        v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v99 = *(_OWORD *)v97;
          *(v96 - 1) = *((_OWORD *)v97 - 1);
          *v96 = v99;
          v96 -= 2;
          v97 -= 32;
          v98 -= 4;
        }
        while (v98);
        v82 = v95;
        if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_144:
          do
          {
            v100 = *((_QWORD *)v82 - 1);
            v82 -= 8;
            *--v90 = v100;
          }
          while (v82 != v83);
        }
        goto LABEL_110;
      }
      *(_QWORD *)v82 = *(_QWORD *)v78;
      v80 = (uint64_t)(v82 + 8);
LABEL_88:
      a3[1] = v80;
    }
    v78 += 16;
  }
  v102 = *a2;
  v101 = a2[1];
  if (*a2 != v101)
  {
    while (1)
    {
      if ((*(_BYTE *)(v102 + 9) & 2) != 0)
        goto LABEL_116;
      v105 = *(char **)(a4 + 8);
      v104 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v105 >= v104)
        break;
      *(_QWORD *)v105 = *(_QWORD *)v102;
      v103 = (uint64_t)(v105 + 8);
LABEL_115:
      *(_QWORD *)(a4 + 8) = v103;
LABEL_116:
      v102 += 16;
      if (v102 == v101)
        return;
    }
    v106 = *(char **)a4;
    v107 = (uint64_t)&v105[-*(_QWORD *)a4];
    v108 = v107 >> 3;
    v109 = (v107 >> 3) + 1;
    if (v109 >> 61)
      goto LABEL_139;
    v110 = v104 - (_QWORD)v106;
    if (v110 >> 2 > v109)
      v109 = v110 >> 2;
    if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
      v111 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v111 = v109;
    if (v111)
    {
      if (v111 >> 61)
        goto LABEL_140;
      v112 = operator new(8 * v111);
      v113 = &v112[8 * v108];
      *v113 = *(_QWORD *)v102;
      v103 = (uint64_t)(v113 + 1);
      v114 = v105 - v106;
      if (v105 == v106)
        goto LABEL_136;
    }
    else
    {
      v112 = 0;
      v113 = (_QWORD *)(8 * v108);
      *(_QWORD *)(8 * v108) = *(_QWORD *)v102;
      v103 = 8 * v108 + 8;
      v114 = v105 - v106;
      if (v105 == v106)
      {
LABEL_136:
        *(_QWORD *)a4 = v113;
        *(_QWORD *)(a4 + 8) = v103;
        *(_QWORD *)(a4 + 16) = &v112[8 * v111];
        if (v106)
          operator delete(v106);
        goto LABEL_115;
      }
    }
    v115 = v114 - 8;
    if (v115 < 0x58)
      goto LABEL_145;
    if ((unint64_t)(v105 - v112 - v107) < 0x20)
      goto LABEL_145;
    v116 = (v115 >> 3) + 1;
    v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
    v118 = &v105[-v117];
    v113 = (_QWORD *)((char *)v113 - v117);
    v119 = &v112[8 * v108 - 16];
    v120 = v105 - 16;
    v121 = v116 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v122 = *(_OWORD *)v120;
      *(v119 - 1) = *((_OWORD *)v120 - 1);
      *v119 = v122;
      v119 -= 2;
      v120 -= 32;
      v121 -= 4;
    }
    while (v121);
    v105 = v118;
    if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_145:
      do
      {
        v123 = *((_QWORD *)v105 - 1);
        v105 -= 8;
        *--v113 = v123;
      }
      while (v105 != v106);
    }
    goto LABEL_136;
  }
}

void sub_20F384E04(void ***a1@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  void **v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  int *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD **v47;
  _QWORD *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  char v52;
  char v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _BYTE *v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD **v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD **v73;
  _OWORD *v74;
  __int128 v75;
  _QWORD *v76;
  _QWORD **v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int *v88;
  void *v89[2];
  void *__p[2];
  int v91;
  _QWORD *v92;
  std::__shared_weak_count *v93;
  void *v94[2];
  void *v95[2];
  int v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 v100;
  _QWORD *v101;
  unint64_t v102;
  float v103;
  __int128 v104;
  _QWORD *v105;
  _QWORD v106[3];
  _QWORD *v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = a1[1];
  v100 = 0uLL;
  v101 = 0;
  v6 = (char *)v5 - (char *)v4;
  if (v5 == v4)
  {
    v8 = 0;
    v7 = 0uLL;
  }
  else
  {
    if (v6 < 0)
      sub_20E867F44();
    *(_QWORD *)&v100 = operator new((char *)v5 - (char *)v4);
    *((_QWORD *)&v100 + 1) = v100;
    v101 = (_QWORD *)(v100 + 8 * (v6 >> 3));
    v94[0] = &v100;
    do
    {
      v89[0] = *v4;
      sub_20EA61104((void ***)v94, v89);
      ++v4;
    }
    while (v4 != v5);
    v7 = v100;
    v8 = v101;
  }
  v104 = v7;
  v105 = v8;
  v106[0] = &off_24C9FF040;
  v106[1] = a1;
  v107 = v106;
  sub_20F385850((uint64_t *)&v104, (uint64_t)&v100);
  v98 = 0;
  v99 = 0;
  v97 = &v98;
  v9 = *a1;
  v83 = a1[1];
  if (*a1 == v83)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    sub_20E9BCAA8(v98);
    v78 = v101;
    if (!v101)
      goto LABEL_162;
    goto LABEL_161;
  }
  do
  {
    *(_OWORD *)v94 = 0u;
    *(_OWORD *)v95 = 0u;
    v96 = 1065353216;
    v92 = 0;
    v93 = 0;
    *(_OWORD *)v89 = 0u;
    *(_OWORD *)__p = 0u;
    v91 = 1065353216;
    v10 = *(_QWORD *)(*((_QWORD *)*v9 + 2) + 160);
    v11 = *((_QWORD *)&v100 + 1);
    if (*((_QWORD *)&v100 + 1))
    {
      v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v100 + 8));
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        v6 = *(_QWORD *)(*((_QWORD *)*v9 + 2) + 160);
        if (*((_QWORD *)&v100 + 1) <= v10)
          v6 = v10 % *((_QWORD *)&v100 + 1);
      }
      else
      {
        v6 = (*((_QWORD *)&v100 + 1) - 1) & v10;
      }
      v13 = *(void ***)(v100 + 8 * v6);
      if (v13)
      {
        v14 = *v13;
        if (*v13)
        {
          if (v12.u32[0] < 2uLL)
          {
            while (1)
            {
              v16 = v14[1];
              if (v16 == v10)
              {
                if (v14[2] == v10)
                  goto LABEL_70;
              }
              else if ((v16 & (*((_QWORD *)&v100 + 1) - 1)) != v6)
              {
                goto LABEL_30;
              }
              v14 = (_QWORD *)*v14;
              if (!v14)
                goto LABEL_30;
            }
          }
          do
          {
            v15 = v14[1];
            if (v15 == v10)
            {
              if (v14[2] == v10)
                goto LABEL_70;
            }
            else
            {
              if (v15 >= *((_QWORD *)&v100 + 1))
                v15 %= *((_QWORD *)&v100 + 1);
              if (v15 != v6)
                break;
            }
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
      }
    }
LABEL_30:
    v14 = operator new(0x20uLL);
    *v14 = 0;
    v14[1] = v10;
    v14[2] = v10;
    *((_DWORD *)v14 + 6) = 0;
    v17 = (float)(v102 + 1);
    if (v11 && (float)(v103 * (float)v11) >= v17)
    {
      v18 = v100;
      v19 = *(_QWORD **)(v100 + 8 * v6);
      if (v19)
        goto LABEL_33;
    }
    else
    {
      v20 = (v11 & (v11 - 1)) != 0;
      if (v11 < 3)
        v20 = 1;
      v21 = v20 | (2 * v11);
      v22 = vcvtps_u32_f32(v17 / v103);
      if (v21 <= v22)
        prime = v22;
      else
        prime = v21;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v11 = *((_QWORD *)&v100 + 1);
      }
      if (prime > v11)
        goto LABEL_44;
      if (prime < v11)
      {
        v24 = vcvtps_u32_f32((float)v102 / v103);
        if (v11 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
        {
          v24 = std::__next_prime(v24);
        }
        else
        {
          v26 = 1 << -(char)__clz(v24 - 1);
          if (v24 >= 2)
            v24 = v26;
        }
        if (prime <= v24)
          prime = v24;
        if (prime < v11)
LABEL_44:
          sub_20E8D2B3C((uint64_t)&v100, prime);
      }
      v11 = *((_QWORD *)&v100 + 1);
      v27 = *((_QWORD *)&v100 + 1) - 1;
      if ((v11 & (v11 - 1)) != 0)
      {
        if (*((_QWORD *)&v100 + 1) <= v10)
        {
          v6 = v10 % *((_QWORD *)&v100 + 1);
          v18 = v100;
          v19 = *(_QWORD **)(v100 + 8 * (v10 % *((_QWORD *)&v100 + 1)));
          if (v19)
          {
LABEL_33:
            *v14 = *v19;
LABEL_68:
            *v19 = v14;
            goto LABEL_69;
          }
        }
        else
        {
          v6 = v10;
          v18 = v100;
          v19 = *(_QWORD **)(v100 + 8 * v10);
          if (v19)
            goto LABEL_33;
        }
      }
      else
      {
        v6 = v27 & v10;
        v18 = v100;
        v19 = *(_QWORD **)(v100 + 8 * (v27 & v10));
        if (v19)
          goto LABEL_33;
      }
    }
    *v14 = v101;
    v101 = v14;
    *(_QWORD *)(v18 + 8 * v6) = &v101;
    if (*v14)
    {
      v28 = *(_QWORD *)(*v14 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v28 >= v11)
          v28 %= v11;
      }
      else
      {
        v28 &= v11 - 1;
      }
      v19 = (_QWORD *)(v100 + 8 * v28);
      goto LABEL_68;
    }
LABEL_69:
    ++v102;
LABEL_70:
    v29 = *((unsigned int *)v14 + 6);
    sub_20F385F68(&v100, v94, (uint64_t)v106, (uint64_t *)&v92, (uint64_t)v89, 1u);
    v30 = (unsigned int *)(*v92 + 32 * v29);
    v86 = (uint64_t)(v92[1] - *v92) >> 5;
    sub_20F3B575C(v30, (unint64_t *)&v86, (uint64_t)&v87);
    v31 = v87;
    v6 = (uint64_t)v88;
    if (v87 == v88)
    {
      if (!v87)
        goto LABEL_73;
      goto LABEL_72;
    }
    do
    {
      v41 = sub_20F3A9C7C((uint64_t)v89, *v31, v31);
      v42 = *((_QWORD *)v41 + 3);
      v85 = *((_QWORD *)v41 + 4);
      v43 = sub_20F3A9C7C((uint64_t)v89, *v31, v31);
      v44 = *((_QWORD *)v43 + 6);
      v45 = *((_QWORD *)v43 + 7);
      v84 = v45;
      v46 = &v98;
      v47 = &v98;
      v48 = v98;
      if (v98)
      {
        while (1)
        {
          v47 = (_QWORD **)v48;
          v49 = *((_DWORD *)v48 + 10);
          if ((_DWORD)v85 == v49)
          {
            v50 = *((_DWORD *)v47 + 14);
            if (v45 >= v50)
            {
              v51 = v50 == (_DWORD)v45;
              if (v50 >= v45)
                v52 = 1;
              else
                v52 = -1;
              if (v51)
                v52 = 0;
              if ((v52 & 0x80) == 0)
                goto LABEL_89;
              goto LABEL_107;
            }
LABEL_92:
            v48 = *v47;
            v46 = v47;
            if (!*v47)
              break;
          }
          else
          {
            if (v85 < v49)
              goto LABEL_92;
            if (v49 >= v85)
              v53 = 1;
            else
              v53 = -1;
            if ((v53 & 0x80) == 0)
              goto LABEL_89;
LABEL_107:
            v48 = v47[1];
            if (!v48)
            {
              v46 = v47 + 1;
              break;
            }
          }
        }
      }
      v54 = operator new(0x40uLL);
      v54[4] = v42;
      v54[5] = v85;
      v54[6] = v44;
      v54[7] = v84;
      *v54 = 0;
      v54[1] = 0;
      v54[2] = v47;
      *v46 = v54;
      if (*v97)
      {
        v97 = (_QWORD *)*v97;
        v54 = (_QWORD *)*v46;
      }
      v55 = v98;
      v51 = v54 == v98;
      *((_BYTE *)v54 + 24) = v54 == v98;
      if (!v51)
      {
        do
        {
          v56 = v54[2];
          if (*(_BYTE *)(v56 + 24))
            break;
          v57 = *(_QWORD **)(v56 + 16);
          v58 = *v57;
          if (*v57 == v56)
          {
            v61 = v57[1];
            if (!v61 || (v62 = *(unsigned __int8 *)(v61 + 24), v59 = (_BYTE *)(v61 + 24), v62))
            {
              if (*(_QWORD **)v56 == v54)
              {
                *(_BYTE *)(v56 + 24) = 1;
                *((_BYTE *)v57 + 24) = 0;
                v65 = *(_QWORD *)(v56 + 8);
                *v57 = v65;
                if (v65)
                  goto LABEL_126;
              }
              else
              {
                v63 = *(uint64_t **)(v56 + 8);
                v64 = *v63;
                *(_QWORD *)(v56 + 8) = *v63;
                if (v64)
                {
                  *(_QWORD *)(v64 + 16) = v56;
                  v57 = *(_QWORD **)(v56 + 16);
                }
                v63[2] = (uint64_t)v57;
                *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v63;
                *v63 = v56;
                *(_QWORD *)(v56 + 16) = v63;
                v57 = (_QWORD *)v63[2];
                v56 = *v57;
                *((_BYTE *)v63 + 24) = 1;
                *((_BYTE *)v57 + 24) = 0;
                v65 = *(_QWORD *)(v56 + 8);
                *v57 = v65;
                if (v65)
LABEL_126:
                  *(_QWORD *)(v65 + 16) = v57;
              }
              *(_QWORD *)(v56 + 16) = v57[2];
              *(_QWORD *)(v57[2] + 8 * (*(_QWORD *)v57[2] != (_QWORD)v57)) = v56;
              *(_QWORD *)(v56 + 8) = v57;
LABEL_87:
              v57[2] = v56;
              break;
            }
          }
          else if (!v58 || (v60 = *(unsigned __int8 *)(v58 + 24), v59 = (_BYTE *)(v58 + 24), v60))
          {
            if (*(_QWORD **)v56 == v54)
            {
              v67 = v54[1];
              *(_QWORD *)v56 = v67;
              if (v67)
              {
                *(_QWORD *)(v67 + 16) = v56;
                v57 = *(_QWORD **)(v56 + 16);
              }
              v54[2] = v57;
              *(_QWORD *)(*(_QWORD *)(v56 + 16) + 8 * (**(_QWORD **)(v56 + 16) != v56)) = v54;
              v54[1] = v56;
              *(_QWORD *)(v56 + 16) = v54;
              v57 = (_QWORD *)v54[2];
              *((_BYTE *)v54 + 24) = 1;
              *((_BYTE *)v57 + 24) = 0;
              v56 = v57[1];
              v66 = *(_QWORD **)v56;
              v57[1] = *(_QWORD *)v56;
              if (!v66)
                goto LABEL_86;
            }
            else
            {
              *(_BYTE *)(v56 + 24) = 1;
              *((_BYTE *)v57 + 24) = 0;
              v56 = v57[1];
              v66 = *(_QWORD **)v56;
              v57[1] = *(_QWORD *)v56;
              if (!v66)
                goto LABEL_86;
            }
            v66[2] = v57;
LABEL_86:
            *(_QWORD *)(v56 + 16) = v57[2];
            *(_QWORD *)(v57[2] + 8 * (*(_QWORD *)v57[2] != (_QWORD)v57)) = v56;
            *(_QWORD *)v56 = v57;
            goto LABEL_87;
          }
          *(_BYTE *)(v56 + 24) = 1;
          v54 = v57;
          *((_BYTE *)v57 + 24) = v57 == v55;
          *v59 = 1;
        }
        while (v57 != v55);
      }
      ++v99;
LABEL_89:
      v31 += 6;
    }
    while (v31 != (int *)v6);
    v31 = v87;
    if (v87)
    {
LABEL_72:
      v88 = v31;
      operator delete(v31);
    }
LABEL_73:
    v32 = __p[0];
    if (__p[0])
    {
      do
      {
        v33 = (_QWORD *)*v32;
        operator delete(v32);
        v32 = v33;
      }
      while (v33);
    }
    v34 = v89[0];
    v89[0] = 0;
    if (v34)
      operator delete(v34);
    v35 = v93;
    if (!v93)
      goto LABEL_81;
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      v38 = v95[0];
      if (!v95[0])
        goto LABEL_83;
    }
    else
    {
LABEL_81:
      v38 = v95[0];
      if (!v95[0])
        goto LABEL_83;
    }
    do
    {
      v39 = (_QWORD *)*v38;
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
LABEL_83:
    v40 = v94[0];
    v94[0] = 0;
    if (v40)
      operator delete(v40);
    ++v9;
  }
  while (v9 != v83);
  v68 = v97;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v68 != &v98)
  {
    v69 = 0;
    v70 = (_QWORD **)v68;
    do
    {
      v71 = v69;
      v72 = v70[1];
      if (v72)
      {
        do
        {
          v73 = (_QWORD **)v72;
          v72 = (_QWORD *)*v72;
        }
        while (v72);
      }
      else
      {
        do
        {
          v73 = (_QWORD **)v70[2];
          v51 = *v73 == v70;
          v70 = v73;
        }
        while (!v51);
      }
      ++v69;
      v70 = v73;
    }
    while (v73 != &v98);
    if (v71 >= 0x7FFFFFFFFFFFFFFLL)
      sub_20E867F44();
    v74 = operator new(32 * v69);
    *a2 = v74;
    a2[1] = v74;
    a2[2] = &v74[2 * v69];
    do
    {
      v75 = *((_OWORD *)v68 + 3);
      *v74 = *((_OWORD *)v68 + 2);
      v74[1] = v75;
      v76 = (_QWORD *)v68[1];
      if (v76)
      {
        do
        {
          v77 = (_QWORD **)v76;
          v76 = (_QWORD *)*v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          v77 = (_QWORD **)v68[2];
          v51 = *v77 == v68;
          v68 = v77;
        }
        while (!v51);
      }
      v74 += 2;
      v68 = v77;
    }
    while (v77 != &v98);
    a2[1] = v74;
  }
  sub_20E9BCAA8(v98);
  v78 = v101;
  if (v101)
  {
    do
    {
LABEL_161:
      v79 = (_QWORD *)*v78;
      operator delete(v78);
      v78 = v79;
    }
    while (v79);
  }
LABEL_162:
  v80 = (void *)v100;
  *(_QWORD *)&v100 = 0;
  if (v80)
    operator delete(v80);
  v81 = v107;
  if (v107 == v106)
  {
    v82 = 4;
    v81 = v106;
  }
  else
  {
    if (!v107)
      goto LABEL_171;
    v82 = 5;
  }
  (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_171:
  if ((_QWORD)v104)
    operator delete((void *)v104);
}

void sub_20F385768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_QWORD *a35)
{
  void **v35;
  uint64_t v36;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;

  v38 = *v35;
  if (*v35)
  {
    *(_QWORD *)(a10 + 8) = v38;
    operator delete(v38);
  }
  sub_20E9BCAA8(a35);
  sub_20E8C25A8(v36 - 208);
  v39 = *(_QWORD **)(v36 - 104);
  if (v39 == (_QWORD *)(v36 - 128))
  {
    v40 = 4;
    v39 = (_QWORD *)(v36 - 128);
  }
  else
  {
    if (!v39)
      goto LABEL_8;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_8:
  v41 = *(void **)(v36 - 160);
  if (v41)
    operator delete(v41);
  _Unwind_Resume(a1);
}

void sub_20F385850(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  int v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void **v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  void *__p[2];
  __int128 v66;
  int64x2_t v67;
  unint64_t v68;
  void *v69[2];
  void *v70[2];
  int v71;

  *(_OWORD *)v69 = 0u;
  *(_OWORD *)v70 = 0u;
  v71 = 1065353216;
  v2 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  if ((uint64_t *)*a1 == v3)
  {
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_DWORD *)(a2 + 32) = 1065353216;
    goto LABEL_131;
  }
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*v2 + 16) + 160);
    v68 = v6;
    if (v69[1])
    {
      v7 = (uint8x8_t)vcnt_s8((int8x8_t)v69[1]);
      v7.i16[0] = vaddlv_u8(v7);
      if (v7.u32[0] > 1uLL)
      {
        v8 = v6;
        if ((void *)v6 >= v69[1])
          v8 = v6 % (unint64_t)v69[1];
      }
      else
      {
        v8 = ((unint64_t)v69[1] - 1) & v6;
      }
      v9 = (_QWORD *)*((_QWORD *)v69[0] + v8);
      if (v9)
      {
        v10 = (_QWORD *)*v9;
        if (v10)
        {
          if (v7.u32[0] < 2uLL)
          {
            while (1)
            {
              v12 = v10[1];
              if (v6 == v12)
              {
                if (v10[2] == v6)
                  goto LABEL_116;
              }
              else if ((v12 & ((uint64_t)v69[1] - 1)) != v8)
              {
                goto LABEL_23;
              }
              v10 = (_QWORD *)*v10;
              if (!v10)
                goto LABEL_23;
            }
          }
          do
          {
            v11 = v10[1];
            if (v6 == v11)
            {
              if (v10[2] == v6)
                goto LABEL_116;
            }
            else
            {
              if ((void *)v11 >= v69[1])
                v11 %= (unint64_t)v69[1];
              if (v11 != v8)
                break;
            }
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
      }
    }
LABEL_23:
    *((_DWORD *)sub_20F3A9FFC((uint64_t)v69, v6, &v68) + 6) = v5;
    v66 = 0u;
    v67 = 0u;
    *(_OWORD *)__p = 0u;
    sub_20F34605C((uint64_t)__p);
    v14 = v67.i64[1];
    v13 = v67.i64[0];
    v16 = (void **)__p[1];
    v15 = (void **)v66;
    *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v67.i64[1] + v67.i64[0]) >> 6) & 0x3FFFFFFFFFFFFF8))
              + 8 * ((v67.i64[1] + v67.i64[0]) & 0x1FF)) = v6;
    v17 = __CFADD__(v14, 1);
    v18 = v14 + 1;
    v67.i64[1] = v18;
    if (!v17)
    {
      while (1)
      {
        v22 = (uint64_t *)*a1;
        v23 = (uint64_t *)a1[1];
        if ((uint64_t *)*a1 != v23)
        {
          while (*(_QWORD *)(*(_QWORD *)(*v22 + 16) + 160) != (*(_QWORD **)((char *)v16
                                                                             + ((v13 >> 6) & 0x3FFFFFFFFFFFFF8)))[v13 & 0x1FF])
          {
            if (++v22 == v23)
              goto LABEL_47;
          }
        }
        if (v22 == v23 || (v24 = *v22) == 0)
        {
LABEL_47:
          --v18;
          v67.i64[0] = ++v13;
          v67.i64[1] = v18;
          if (v13 < 0x400)
            goto LABEL_32;
        }
        else
        {
          LOBYTE(v61) = 0;
          v62 = 0;
          LOBYTE(v63) = 0;
          v64 = 0;
          v25 = *(_QWORD *)(v24 + 16);
          v26 = *(_QWORD *)(v25 + 208);
          v27 = *(_QWORD *)(v25 + 216);
          if (v26 != v27)
          {
            v28 = 0;
            do
            {
              if (*(_DWORD *)(v26 + 464) == 2 && v28 <= 1)
              {
                v30 = (void **)(&v61 + 2 * v28);
                *v30 = *(void **)(v26 + 24);
                *((_BYTE *)v30 + 8) = 1;
                ++v28;
              }
              v26 += 472;
            }
            while (v26 != v27);
            if (v62)
            {
              v31 = v61;
              if (v69[1])
              {
                v32 = (uint8x8_t)vcnt_s8((int8x8_t)v69[1]);
                v32.i16[0] = vaddlv_u8(v32);
                if (v32.u32[0] > 1uLL)
                {
                  v33 = v61;
                  if ((void *)v61 >= v69[1])
                    v33 = v61 % (unint64_t)v69[1];
                }
                else
                {
                  v33 = ((unint64_t)v69[1] - 1) & v61;
                }
                v34 = (_QWORD *)*((_QWORD *)v69[0] + v33);
                if (v34)
                {
                  v35 = (_QWORD *)*v34;
                  if (v35)
                  {
                    if (v32.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        v37 = v35[1];
                        if (v61 == v37)
                        {
                          if (v35[2] == v61)
                            goto LABEL_76;
                        }
                        else if ((v37 & ((unint64_t)v69[1] - 1)) != v33)
                        {
                          goto LABEL_70;
                        }
                        v35 = (_QWORD *)*v35;
                        if (!v35)
                          goto LABEL_70;
                      }
                    }
                    do
                    {
                      v36 = v35[1];
                      if (v61 == v36)
                      {
                        if (v35[2] == v61)
                          goto LABEL_76;
                      }
                      else
                      {
                        if ((void *)v36 >= v69[1])
                          v36 %= (unint64_t)v69[1];
                        if (v36 != v33)
                          break;
                      }
                      v35 = (_QWORD *)*v35;
                    }
                    while (v35);
                  }
                }
              }
LABEL_70:
              if ((void **)v66 == v16)
                v38 = 0;
              else
                v38 = (((_QWORD)v66 - (_QWORD)v16) << 6) - 1;
              v39 = v18 + v13;
              if (v38 == v39)
              {
                sub_20F34605C((uint64_t)__p);
                v18 = v67.i64[1];
                v16 = (void **)__p[1];
                v39 = v67.i64[0] + v67.i64[1];
              }
              (*(_QWORD **)((char *)v16 + ((v39 >> 6) & 0x3FFFFFFFFFFFFF8)))[v39 & 0x1FF] = v31;
              v67.i64[1] = v18 + 1;
              *((_DWORD *)sub_20F3A9FFC((uint64_t)v69, v31, &v61) + 6) = v5;
            }
          }
LABEL_76:
          if (v64)
          {
            v40 = v63;
            if (v69[1])
            {
              v41 = (uint8x8_t)vcnt_s8((int8x8_t)v69[1]);
              v41.i16[0] = vaddlv_u8(v41);
              if (v41.u32[0] >= 2uLL)
              {
                v42 = v63;
                if ((void *)v63 >= v69[1])
                  v42 = v63 % (unint64_t)v69[1];
              }
              else
              {
                v42 = ((unint64_t)v69[1] - 1) & v63;
              }
              v43 = (_QWORD *)*((_QWORD *)v69[0] + v42);
              if (v43)
              {
                v44 = (_QWORD *)*v43;
                if (v44)
                {
                  if (v41.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      v46 = v44[1];
                      if (v63 == v46)
                      {
                        if (v44[2] == v63)
                          goto LABEL_103;
                      }
                      else if ((v46 & ((unint64_t)v69[1] - 1)) != v42)
                      {
                        goto LABEL_97;
                      }
                      v44 = (_QWORD *)*v44;
                      if (!v44)
                        goto LABEL_97;
                    }
                  }
                  do
                  {
                    v45 = v44[1];
                    if (v63 == v45)
                    {
                      if (v44[2] == v63)
                        goto LABEL_103;
                    }
                    else
                    {
                      if ((void *)v45 >= v69[1])
                        v45 %= (unint64_t)v69[1];
                      if (v45 != v42)
                        break;
                    }
                    v44 = (_QWORD *)*v44;
                  }
                  while (v44);
                }
              }
            }
LABEL_97:
            v47 = (char *)__p[1];
            if ((void *)v66 == __p[1])
              v48 = 0;
            else
              v48 = (((_QWORD)v66 - (unint64_t)__p[1]) << 6) - 1;
            v49 = v67.i64[1];
            v50 = v67.i64[1] + v67.i64[0];
            if (v48 == v67.i64[1] + v67.i64[0])
            {
              sub_20F34605C((uint64_t)__p);
              v49 = v67.i64[1];
              v47 = (char *)__p[1];
              v50 = v67.i64[0] + v67.i64[1];
            }
            *(_QWORD *)(*(_QWORD *)&v47[(v50 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v50 & 0x1FF)) = v40;
            v67.i64[1] = v49 + 1;
            *((_DWORD *)sub_20F3A9FFC((uint64_t)v69, v40, &v63) + 6) = v5;
          }
LABEL_103:
          v16 = (void **)__p[1];
          v67 = vaddq_s64(v67, (int64x2_t)xmmword_2102E3FB0);
          v13 = v67.i64[0];
          if (v67.i64[0] <= 0x3FFuLL)
            goto LABEL_31;
        }
        operator delete(*v16);
        v16 = (void **)((char *)__p[1] + 8);
        v13 = v67.i64[0] - 512;
        __p[1] = (char *)__p[1] + 8;
        v67.i64[0] -= 512;
LABEL_31:
        v18 = v67.i64[1];
LABEL_32:
        if (!v18)
        {
          v15 = (void **)v66;
          v67.i64[1] = 0;
          v19 = v66 - (_QWORD)v16;
          if ((_QWORD)v66 - (_QWORD)v16 < 0x11uLL)
            goto LABEL_27;
          goto LABEL_26;
        }
      }
    }
    v67.i64[1] = 0;
    v19 = (char *)v15 - (char *)v16;
    if ((unint64_t)((char *)v15 - (char *)v16) < 0x11)
      goto LABEL_27;
    do
    {
LABEL_26:
      operator delete(*v16);
      v15 = (void **)v66;
      v16 = (void **)((char *)__p[1] + 8);
      __p[1] = v16;
      v19 = v66 - (_QWORD)v16;
    }
    while ((_QWORD)v66 - (_QWORD)v16 > 0x10uLL);
LABEL_27:
    v20 = v19 >> 3;
    if (v20 == 1)
    {
      v21 = 256;
    }
    else
    {
      if (v20 != 2)
        goto LABEL_109;
      v21 = 512;
    }
    v67.i64[0] = v21;
LABEL_109:
    if (v16 != v15)
    {
      do
      {
        v51 = *v16++;
        operator delete(v51);
      }
      while (v16 != v15);
      if ((void *)v66 != __p[1])
        *(_QWORD *)&v66 = v66 + (((unint64_t)__p[1] - v66 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if (__p[0])
      operator delete(__p[0]);
    ++v5;
LABEL_116:
    ++v2;
  }
  while (v2 != v3);
  v52 = v70[0];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (v52)
  {
    do
    {
      v53 = v52[2];
      v54 = *a1;
      v55 = a1[1];
      if (*a1 != v55)
      {
        while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v54 + 16) + 160) != v53)
        {
          v54 += 8;
          if (v54 == v55)
            goto LABEL_119;
        }
      }
      if (v54 != v55 && *(_QWORD *)v54)
      {
        v56 = *((_DWORD *)v52 + 6);
        *((_DWORD *)sub_20F3A9FFC(a2, v53, v52 + 2) + 6) = v56;
      }
LABEL_119:
      v52 = (_QWORD *)*v52;
    }
    while (v52);
    v57 = v70[0];
    if (v70[0])
    {
      do
      {
        v58 = (_QWORD *)*v57;
        operator delete(v57);
        v57 = v58;
      }
      while (v58);
    }
  }
LABEL_131:
  v59 = v69[0];
  v69[0] = 0;
  if (v59)
    operator delete(v59);
}

void sub_20F385F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_20E8C25A8(v17);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F385F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20E8D41E8((uint64_t)va);
  sub_20E8C25A8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20F385F68(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned __int8 a6)
{
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t *v30;
  int v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t **v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  float v53;
  _BOOL8 v54;
  unint64_t v55;
  unint64_t v56;
  size_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  int8x8_t v62;
  uint8x8_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int **v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  int v85;
  int v86;
  unint64_t v87;
  int **v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v94;
  int v98;
  int v99;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  uint8x8_t v106;
  void **v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  __int128 v111;
  float v112;
  float v113;
  _BOOL8 v114;
  unint64_t v115;
  unint64_t v116;
  size_t prime;
  unint64_t v118;
  uint8x8_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  char v133;
  _QWORD *v134;
  _QWORD *v135;
  void *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  int v147;
  void *v148[2];
  void *__p[2];
  float v150;
  _DWORD *v151[2];

  v8 = (unsigned int *)a1[2];
  if (v8)
  {
    v9 = 0;
    do
    {
      v10 = v8[6];
      v11 = (int8x8_t)a2[1];
      if (v11)
      {
        v12 = (uint8x8_t)vcnt_s8(v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          v13 = v8[6];
          if (*(_QWORD *)&v11 <= v10)
            v13 = v10 % *(_QWORD *)&v11;
        }
        else
        {
          v13 = (v11.i32[0] - 1) & v10;
        }
        v14 = *(uint64_t ***)(*a2 + 8 * v13);
        if (v14)
        {
          v15 = *v14;
          if (v15)
          {
            if (v12.u32[0] < 2uLL)
            {
              v16 = *(_QWORD *)&v11 - 1;
              while (1)
              {
                v18 = v15[1];
                if (v18 == v10)
                {
                  if (*((_DWORD *)v15 + 4) == (_DWORD)v10)
                    goto LABEL_24;
                }
                else if ((v18 & v16) != v13)
                {
                  goto LABEL_23;
                }
                v15 = (uint64_t *)*v15;
                if (!v15)
                  goto LABEL_23;
              }
            }
            do
            {
              v17 = v15[1];
              if (v17 == v10)
              {
                if (*((_DWORD *)v15 + 4) == (_DWORD)v10)
                  goto LABEL_24;
              }
              else
              {
                if (v17 >= *(_QWORD *)&v11)
                  v17 %= *(_QWORD *)&v11;
                if (v17 != v13)
                  break;
              }
              v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
        }
      }
LABEL_23:
      v148[0] = v8 + 6;
      *((_DWORD *)sub_20F2CE5F0((uint64_t)a2, v8 + 6, (uint64_t)&unk_2102DB95C, (_DWORD **)v148) + 5) = v9;
      v9 = (v9 + 1);
LABEL_24:
      v8 = *(unsigned int **)v8;
    }
    while (v8);
  }
  else
  {
    v9 = 0;
  }
  v19 = operator new(0x48uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = &off_24C9FF0C0;
  v20 = sub_20F3B4D78((uint64_t)(v19 + 3), v9);
  v21 = (std::__shared_weak_count *)a4[1];
  *a4 = v20;
  a4[1] = (uint64_t)v19;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_OWORD *)v148 = 0u;
  *(_OWORD *)__p = 0u;
  v150 = 1.0;
  sub_20F3AA3B4((uint64_t)v148, (v9 * v9));
  v24 = a1[2];
  if (v24)
  {
    v137 = (_QWORD *)(a5 + 16);
    v138 = a6;
    v142 = (uint64_t)a2;
    while (1)
    {
      v151[0] = (_DWORD *)(v24 + 24);
      v25 = *((unsigned int *)sub_20F2CE5F0((uint64_t)a2, (unsigned int *)(v24 + 24), (uint64_t)&unk_2102DB95C, v151) + 5);
      v151[0] = *(_DWORD **)(v24 + 16);
      v26 = *(_QWORD *)(a3 + 24);
      if (!v26)
        sub_20E86D37C();
      v143 = (uint64_t *)v24;
      v144 = v25;
      v27 = (*(uint64_t (**)(uint64_t, _DWORD **))(*(_QWORD *)v26 + 48))(v26, v151);
      if (v27)
        break;
LABEL_34:
      a2 = (_QWORD *)v142;
      v24 = *v143;
      if (!*v143)
        goto LABEL_281;
    }
    v28 = *(_QWORD *)(v27 + 16);
    v30 = *(unint64_t **)(v28 + 208);
    v29 = *(uint64_t **)(v28 + 216);
    v145 = v29;
LABEL_40:
    if (v30 == (unint64_t *)v29)
      goto LABEL_34;
    v31 = *((_DWORD *)v30 + 116);
    if (v31 != 3 && v31 != 0)
      goto LABEL_39;
    v33 = v30[3];
    if (v33 <= *v30)
      v34 = *v30;
    else
      v34 = v30[3];
    if (v33 <= *v30)
      v35 = *((unsigned int *)v30 + 2);
    else
      v35 = *((unsigned int *)v30 + 8);
    if (v33 <= *v30)
      v36 = *((_DWORD *)v30 + 3);
    else
      v36 = *((_DWORD *)v30 + 9);
    if (v33 >= *v30)
      v37 = *v30;
    else
      v37 = v30[3];
    if (v33 <= *v30)
      v38 = *((_DWORD *)v30 + 8);
    else
      v38 = *((_DWORD *)v30 + 2);
    if (v33 <= *v30)
      v39 = *((_DWORD *)v30 + 9);
    else
      v39 = *((_DWORD *)v30 + 3);
    v147 = v39;
    v40 = (unint64_t)v148[1];
    v41 = 0xC6A4A7935BD1E995
        * (((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47)) + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47))))
         + ((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v34) ^ ((0xC6A4A7935BD1E995 * v34) >> 47)) + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v37) ^ ((0xC6A4A7935BD1E995 * v37) >> 47)))))
        + 0x1CCA8D6C8;
    if (v148[1])
    {
      v42 = (uint8x8_t)vcnt_s8((int8x8_t)v148[1]);
      v42.i16[0] = vaddlv_u8(v42);
      if (v42.u32[0] > 1uLL)
      {
        v43 = 0xC6A4A7935BD1E995
            * (((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47))
               + 3864292196u) ^ (0xC6A4A7935BD1E995
                               * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47))))
             + ((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v34) ^ ((0xC6A4A7935BD1E995 * v34) >> 47))
               + 3864292196u) ^ (0xC6A4A7935BD1E995
                               * ((0xC6A4A7935BD1E995 * v37) ^ ((0xC6A4A7935BD1E995 * v37) >> 47)))))
            + 0x1CCA8D6C8;
        if ((void *)v41 >= v148[1])
          v43 = v41 % (unint64_t)v148[1];
      }
      else
      {
        v43 = v41 & ((unint64_t)v148[1] - 1);
      }
      v44 = (uint64_t **)*((_QWORD *)v148[0] + v43);
      if (v44)
      {
        v45 = *v44;
        if (v45)
        {
          if (v42.u32[0] >= 2uLL)
          {
            while (1)
            {
              v46 = v45[1];
              if (v41 == v46)
              {
                if (v45[2] == v34
                  && *((_DWORD *)v45 + 6) == (_DWORD)v35
                  && v45[4] == v37
                  && *((_DWORD *)v45 + 10) == v38)
                {
                  goto LABEL_39;
                }
              }
              else
              {
                if ((void *)v46 >= v148[1])
                  v46 %= (unint64_t)v148[1];
                if (v46 != v43)
                  goto LABEL_91;
              }
              v45 = (uint64_t *)*v45;
              if (!v45)
                goto LABEL_91;
            }
          }
          do
          {
            v47 = v45[1];
            if (v41 == v47)
            {
              if (v45[2] == v34 && *((_DWORD *)v45 + 6) == (_DWORD)v35 && v45[4] == v37 && *((_DWORD *)v45 + 10) == v38)
                goto LABEL_39;
            }
            else if ((v47 & ((uint64_t)v148[1] - 1)) != v43)
            {
              break;
            }
            v45 = (uint64_t *)*v45;
          }
          while (v45);
        }
      }
LABEL_91:
      if (v42.u32[0] > 1uLL)
      {
        v9 = 0xC6A4A7935BD1E995
           * (((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47))
              + 3864292196u) ^ (0xC6A4A7935BD1E995
                              * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47))))
            + ((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v34) ^ ((0xC6A4A7935BD1E995 * v34) >> 47))
              + 3864292196u) ^ (0xC6A4A7935BD1E995
                              * ((0xC6A4A7935BD1E995 * v37) ^ ((0xC6A4A7935BD1E995 * v37) >> 47)))))
           + 0x1CCA8D6C8;
        if ((void *)v41 >= v148[1])
          v9 = v41 % (unint64_t)v148[1];
      }
      else
      {
        v9 = v41 & ((unint64_t)v148[1] - 1);
      }
      v48 = (uint64_t **)*((_QWORD *)v148[0] + v9);
      if (v48)
      {
        v49 = *v48;
        if (v49)
        {
          if (v42.u32[0] < 2uLL)
          {
            while (1)
            {
              v51 = v49[1];
              if (v51 == v41)
              {
                if (v49[2] == v34
                  && *((_DWORD *)v49 + 6) == (_DWORD)v35
                  && v49[4] == v37
                  && *((_DWORD *)v49 + 10) == v38)
                {
                  goto LABEL_140;
                }
              }
              else if ((v51 & ((uint64_t)v148[1] - 1)) != v9)
              {
                goto LABEL_117;
              }
              v49 = (uint64_t *)*v49;
              if (!v49)
                goto LABEL_117;
            }
          }
          do
          {
            v50 = v49[1];
            if (v50 == v41)
            {
              if (v49[2] == v34 && *((_DWORD *)v49 + 6) == (_DWORD)v35 && v49[4] == v37 && *((_DWORD *)v49 + 10) == v38)
                goto LABEL_140;
            }
            else
            {
              if ((void *)v50 >= v148[1])
                v50 %= (unint64_t)v148[1];
              if (v50 != v9)
                break;
            }
            v49 = (uint64_t *)*v49;
          }
          while (v49);
        }
      }
    }
LABEL_117:
    v52 = operator new(0x30uLL);
    *v52 = 0;
    v52[1] = v41;
    v52[2] = v34;
    *((_DWORD *)v52 + 6) = v35;
    *((_DWORD *)v52 + 7) = v36;
    v52[4] = v37;
    *((_DWORD *)v52 + 10) = v38;
    *((_DWORD *)v52 + 11) = v147;
    v53 = (float)((unint64_t)__p[1] + 1);
    if (!v40 || (float)(v150 * (float)v40) < v53)
    {
      v54 = (v40 & (v40 - 1)) != 0;
      if (v40 < 3)
        v54 = 1;
      v55 = v54 | (2 * v40);
      v56 = vcvtps_u32_f32(v53 / v150);
      if (v55 <= v56)
        v57 = v56;
      else
        v57 = v55;
      sub_20F3AA3B4((uint64_t)v148, v57);
      v40 = (unint64_t)v148[1];
      v58 = (unint64_t)v148[1] - 1;
      if (((unint64_t)v148[1] & ((unint64_t)v148[1] - 1)) == 0)
      {
        v9 = v58 & v41;
        v59 = v148[0];
        v60 = (_QWORD *)*((_QWORD *)v148[0] + (v58 & v41));
        if (!v60)
          goto LABEL_132;
LABEL_130:
        *v52 = *v60;
        goto LABEL_138;
      }
      if ((void *)v41 >= v148[1])
      {
        v9 = v41 % (unint64_t)v148[1];
        v59 = v148[0];
        v60 = (_QWORD *)*((_QWORD *)v148[0] + v41 % (unint64_t)v148[1]);
        if (v60)
          goto LABEL_130;
        goto LABEL_132;
      }
      v9 = 0xC6A4A7935BD1E995
         * (((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47)) + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v35) ^ ((0xC6A4A7935BD1E995 * v35) >> 47))))
          + ((0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v34) ^ ((0xC6A4A7935BD1E995 * v34) >> 47)) + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v37) ^ ((0xC6A4A7935BD1E995 * v37) >> 47)))))
         + 0x1CCA8D6C8;
    }
    v59 = v148[0];
    v60 = (_QWORD *)*((_QWORD *)v148[0] + v9);
    if (v60)
      goto LABEL_130;
LABEL_132:
    *v52 = __p[0];
    __p[0] = v52;
    v59[v9] = __p;
    if (!*v52)
      goto LABEL_139;
    v61 = *(_QWORD *)(*v52 + 8);
    if ((v40 & (v40 - 1)) != 0)
    {
      if (v61 >= v40)
        v61 %= v40;
    }
    else
    {
      v61 &= v40 - 1;
    }
    v60 = (char *)v148[0] + 8 * v61;
LABEL_138:
    *v60 = v52;
LABEL_139:
    ++__p[1];
    v33 = v30[3];
LABEL_140:
    v62 = (int8x8_t)a1[1];
    if (!*(_QWORD *)&v62)
      goto LABEL_39;
    v63 = (uint8x8_t)vcnt_s8(v62);
    v63.i16[0] = vaddlv_u8(v63);
    if (v63.u32[0] > 1uLL)
    {
      v64 = v33;
      if (v33 >= *(_QWORD *)&v62)
        v64 = v33 % *(_QWORD *)&v62;
    }
    else
    {
      v64 = (*(_QWORD *)&v62 - 1) & v33;
    }
    v65 = *(_QWORD **)(*a1 + 8 * v64);
    if (!v65)
      goto LABEL_39;
    v66 = (_QWORD *)*v65;
    if (!*v65)
      goto LABEL_39;
    v67 = *(_QWORD *)&v62 - 1;
    if (v63.u32[0] < 2uLL)
    {
      while (1)
      {
        v68 = v66[1];
        if (v33 == v68)
        {
          if (v66[2] == v33)
            goto LABEL_161;
        }
        else if ((v68 & v67) != v64)
        {
          goto LABEL_39;
        }
        v66 = (_QWORD *)*v66;
        if (!v66)
          goto LABEL_39;
      }
    }
    while (1)
    {
      v69 = v66[1];
      if (v33 == v69)
      {
        if (v66[2] == v33)
        {
LABEL_161:
          if (v63.u32[0] > 1uLL)
          {
            v70 = v33;
            if (v33 >= *(_QWORD *)&v62)
              v70 = v33 % *(_QWORD *)&v62;
          }
          else
          {
            v70 = v67 & v33;
          }
          v71 = *(unsigned int ***)(*a1 + 8 * v70);
          v72 = v144;
          if (!v71 || (v73 = *v71) == 0)
LABEL_286:
            sub_20E89FD20("unordered_map::at: key not found");
          if (v63.u32[0] < 2uLL)
          {
            while (1)
            {
              v74 = *((_QWORD *)v73 + 1);
              if (v33 == v74)
              {
                if (*((_QWORD *)v73 + 2) == v33)
                  goto LABEL_173;
              }
              else if ((v74 & v67) != v70)
              {
                goto LABEL_286;
              }
              v73 = *(unsigned int **)v73;
              if (!v73)
                goto LABEL_286;
            }
          }
          while (2)
          {
            v84 = *((_QWORD *)v73 + 1);
            if (v33 != v84)
            {
              if (v84 >= *(_QWORD *)&v62)
                v84 %= *(_QWORD *)&v62;
              if (v84 != v70)
                goto LABEL_286;
LABEL_178:
              v73 = *(unsigned int **)v73;
              if (!v73)
                goto LABEL_286;
              continue;
            }
            break;
          }
          if (*((_QWORD *)v73 + 2) != v33)
            goto LABEL_178;
LABEL_173:
          v151[0] = v73 + 6;
          v75 = *((_DWORD *)sub_20F2CE5F0(v142, v73 + 6, (uint64_t)&unk_2102DB95C, v151) + 5);
          if ((_DWORD)v144 == v75)
            goto LABEL_39;
          v76 = (_QWORD *)*a4;
          v77 = *(_QWORD *)*a4 + 32 * v144;
          v79 = *(_QWORD *)(v77 + 8);
          v78 = *(_QWORD *)(v77 + 16);
          if (v79 != v78)
          {
            v80 = v78 - v79 - 24;
            if (v80 < 0x18)
            {
              v81 = 0;
              v82 = v79;
              v83 = v144;
              goto LABEL_207;
            }
            v85 = 0;
            v86 = 0;
            v87 = v80 / 0x18 + 1;
            v82 = v79 + 24 * (v87 & 0x1FFFFFFFFFFFFFFELL);
            v88 = (int **)(v79 + 40);
            v89 = v87 & 0x1FFFFFFFFFFFFFFELL;
            v83 = v144;
            do
            {
              v90 = **(v88 - 4);
              v91 = **(v88 - 1);
              v92 = **(v88 - 3);
              if (v90 == (_DWORD)v144 && v92 == v75)
                ++v85;
              v94 = **v88;
              if (v91 == (_DWORD)v144 && v94 == v75)
                ++v86;
              if (v90 == v75 && v92 == (_DWORD)v144)
                ++v85;
              if (v91 == v75 && v94 == (_DWORD)v144)
                ++v86;
              v88 += 6;
              v89 -= 2;
            }
            while (v89);
            v81 = v86 + v85;
            if (v87 != (v87 & 0x1FFFFFFFFFFFFFFELL))
            {
              do
              {
LABEL_207:
                v98 = **(_DWORD **)(v82 + 8);
                v99 = **(_DWORD **)(v82 + 16);
                if (v98 == v83 && v99 == v75)
                  ++v81;
                if (v98 == v75 && v99 == v83)
                  ++v81;
                v82 += 24;
              }
              while (v82 != v78);
            }
            if (v81 >= 3)
              goto LABEL_39;
          }
          if (!v138)
          {
            sub_20F3B4E88(v76, v144, v75);
            goto LABEL_39;
          }
          v102 = sub_20F3B4E88(v76, v144, v75);
          v103 = v102;
          v104 = v102;
          v105 = *(_QWORD *)(a5 + 8);
          if (v105)
          {
            v106 = (uint8x8_t)vcnt_s8((int8x8_t)v105);
            v106.i16[0] = vaddlv_u8(v106);
            if (v106.u32[0] > 1uLL)
            {
              v72 = v102;
              if (v105 <= v102)
                v72 = v102 % v105;
            }
            else
            {
              v72 = (v105 - 1) & v102;
            }
            v107 = *(void ***)(*(_QWORD *)a5 + 8 * v72);
            if (v107)
            {
              v108 = (char *)*v107;
              if (*v107)
              {
                if (v106.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v110 = *((_QWORD *)v108 + 1);
                    if (v110 == v102)
                    {
                      if (*((_DWORD *)v108 + 4) == v102)
                        goto LABEL_280;
                    }
                    else if ((v110 & (v105 - 1)) != v72)
                    {
                      goto LABEL_240;
                    }
                    v108 = *(char **)v108;
                    if (!v108)
                      goto LABEL_240;
                  }
                }
                do
                {
                  v109 = *((_QWORD *)v108 + 1);
                  if (v109 == v102)
                  {
                    if (*((_DWORD *)v108 + 4) == v102)
                      goto LABEL_280;
                  }
                  else
                  {
                    if (v109 >= v105)
                      v109 %= v105;
                    if (v109 != v72)
                      break;
                  }
                  v108 = *(char **)v108;
                }
                while (v108);
              }
            }
          }
LABEL_240:
          v108 = (char *)operator new(0x1F0uLL);
          *((_DWORD *)v108 + 4) = v103;
          *(_QWORD *)v108 = 0;
          *((_QWORD *)v108 + 1) = v104;
          *((_QWORD *)v108 + 61) = 0;
          *(_QWORD *)&v111 = -1;
          *((_QWORD *)&v111 + 1) = -1;
          *(_OWORD *)(v108 + 40) = v111;
          *(_OWORD *)(v108 + 24) = v111;
          *(_OWORD *)(v108 + 56) = v111;
          *(_OWORD *)(v108 + 136) = xmmword_2103B06C0;
          *(_OWORD *)(v108 + 152) = unk_2103B06D0;
          *(_OWORD *)(v108 + 168) = xmmword_2103B06E0;
          *(_OWORD *)(v108 + 184) = unk_2103B06F0;
          *(_OWORD *)(v108 + 72) = xmmword_2103B0680;
          *(_OWORD *)(v108 + 88) = *(_OWORD *)algn_2103B0690;
          *(_OWORD *)(v108 + 104) = xmmword_2103B06A0;
          *(_OWORD *)(v108 + 120) = unk_2103B06B0;
          *(_QWORD *)(v108 + 485) = 0;
          *(_OWORD *)(v108 + 456) = 0u;
          *(_OWORD *)(v108 + 472) = 0u;
          *(_OWORD *)(v108 + 424) = 0u;
          *(_OWORD *)(v108 + 440) = 0u;
          *(_OWORD *)(v108 + 392) = 0u;
          *(_OWORD *)(v108 + 408) = 0u;
          *(_OWORD *)(v108 + 360) = 0u;
          *(_OWORD *)(v108 + 376) = 0u;
          *(_OWORD *)(v108 + 328) = 0u;
          *(_OWORD *)(v108 + 344) = 0u;
          *(_OWORD *)(v108 + 296) = 0u;
          *(_OWORD *)(v108 + 312) = 0u;
          *(_OWORD *)(v108 + 280) = 0u;
          *(_OWORD *)(v108 + 264) = 0u;
          *(_OWORD *)(v108 + 248) = 0u;
          *(_OWORD *)(v108 + 232) = 0u;
          *(_OWORD *)(v108 + 216) = 0u;
          *(_OWORD *)(v108 + 200) = 0u;
          v112 = (float)(unint64_t)(*(_QWORD *)(a5 + 24) + 1);
          v113 = *(float *)(a5 + 32);
          if (v105 && (float)(v113 * (float)v105) >= v112)
            goto LABEL_269;
          v114 = v105 < 3 || (v105 & (v105 - 1)) != 0;
          v115 = v114 | (2 * v105);
          v116 = vcvtps_u32_f32(v112 / v113);
          if (v115 <= v116)
            prime = v116;
          else
            prime = v115;
          if (prime == 1)
          {
            prime = 2;
          }
          else if ((prime & (prime - 1)) != 0)
          {
            prime = std::__next_prime(prime);
            v105 = *(_QWORD *)(a5 + 8);
          }
          if (prime > v105)
            goto LABEL_253;
          if (prime < v105)
          {
            v118 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 24) / *(float *)(a5 + 32));
            if (v105 < 3
              || (v119 = (uint8x8_t)vcnt_s8((int8x8_t)v105), v119.i16[0] = vaddlv_u8(v119), v119.u32[0] > 1uLL))
            {
              v118 = std::__next_prime(v118);
            }
            else
            {
              v120 = 1 << -(char)__clz(v118 - 1);
              if (v118 >= 2)
                v118 = v120;
            }
            if (prime <= v118)
              prime = v118;
            if (prime < v105)
LABEL_253:
              sub_20E8D2B3C(a5, prime);
          }
          v105 = *(_QWORD *)(a5 + 8);
          v121 = v105 - 1;
          if ((v105 & (v105 - 1)) != 0)
          {
            if (v105 <= v104)
            {
              v72 = v104 % v105;
              v122 = *(_QWORD *)a5;
              v123 = *(_QWORD **)(*(_QWORD *)a5 + 8 * (v104 % v105));
              if (!v123)
                goto LABEL_272;
            }
            else
            {
              v72 = v104;
LABEL_269:
              v122 = *(_QWORD *)a5;
              v123 = *(_QWORD **)(*(_QWORD *)a5 + 8 * v72);
              if (!v123)
                goto LABEL_272;
            }
LABEL_270:
            *(_QWORD *)v108 = *v123;
            goto LABEL_278;
          }
          v72 = v121 & v104;
          v122 = *(_QWORD *)a5;
          v123 = *(_QWORD **)(*(_QWORD *)a5 + 8 * (v121 & v104));
          if (v123)
            goto LABEL_270;
LABEL_272:
          *(_QWORD *)v108 = *v137;
          *v137 = v108;
          *(_QWORD *)(v122 + 8 * v72) = v137;
          if (*(_QWORD *)v108)
          {
            v124 = *(_QWORD *)(*(_QWORD *)v108 + 8);
            if ((v105 & (v105 - 1)) != 0)
            {
              if (v124 >= v105)
                v124 %= v105;
            }
            else
            {
              v124 &= v105 - 1;
            }
            v123 = (_QWORD *)(*(_QWORD *)a5 + 8 * v124);
LABEL_278:
            *v123 = v108;
          }
          ++*(_QWORD *)(a5 + 24);
LABEL_280:
          v125 = *(_OWORD *)v30;
          v126 = *((_OWORD *)v30 + 1);
          *(_OWORD *)(v108 + 52) = *(_OWORD *)((char *)v30 + 28);
          *(_OWORD *)(v108 + 40) = v126;
          *(_OWORD *)(v108 + 24) = v125;
          v127 = *((_OWORD *)v30 + 9);
          v128 = *((_OWORD *)v30 + 10);
          v129 = *((_OWORD *)v30 + 8);
          *(_OWORD *)(v108 + 136) = *((_OWORD *)v30 + 7);
          *(_OWORD *)(v108 + 184) = v128;
          *(_OWORD *)(v108 + 168) = v127;
          *(_OWORD *)(v108 + 152) = v129;
          v130 = *((_OWORD *)v30 + 3);
          v131 = *((_OWORD *)v30 + 4);
          v132 = *((_OWORD *)v30 + 5);
          *(_OWORD *)(v108 + 120) = *((_OWORD *)v30 + 6);
          *(_OWORD *)(v108 + 104) = v132;
          *(_OWORD *)(v108 + 88) = v131;
          *(_OWORD *)(v108 + 72) = v130;
          memcpy(v108 + 200, v30 + 22, 0x120uLL);
          v133 = *((_BYTE *)v30 + 468);
          *((_DWORD *)v108 + 122) = *((_DWORD *)v30 + 116);
          v108[492] = v133;
LABEL_39:
          v30 += 59;
          v29 = v145;
          goto LABEL_40;
        }
      }
      else
      {
        if (v69 >= *(_QWORD *)&v62)
          v69 %= *(_QWORD *)&v62;
        if (v69 != v64)
          goto LABEL_39;
      }
      v66 = (_QWORD *)*v66;
      if (!v66)
        goto LABEL_39;
    }
  }
LABEL_281:
  v134 = __p[0];
  if (__p[0])
  {
    do
    {
      v135 = (_QWORD *)*v134;
      operator delete(v134);
      v134 = v135;
    }
    while (v135);
  }
  v136 = v148[0];
  v148[0] = 0;
  if (v136)
    operator delete(v136);
}

void sub_20F386CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,_QWORD *__p)
{
  _QWORD *v24;
  _QWORD *v25;

  v24 = __p;
  if (__p)
  {
    do
    {
      v25 = (_QWORD *)*v24;
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void sub_20F386D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;

  operator delete(v21);
  sub_20E8C25A8((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_20F386DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F386DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20E8C25A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F386DF4(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  __int128 *v18;
  int v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  int v28;
  int v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  double v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  __int128 *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  double v51;
  unint64_t v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  double v56;
  double v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  __int128 *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  double v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  double v95;
  unint64_t v96;
  double v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  double v101;
  unint64_t v102;
  double *v103;
  double v104;
  double v105;
  double v106;
  double *v107;
  int v108;
  double v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  double v114;
  unint64_t v115;
  unint64_t v116;
  double v117;
  double v118;
  double v119;
  int v120;
  double v121;
  double v122;
  uint64_t v123;
  double v124;
  double v125;
  int v126;
  double v127;
  double v128;
  double v129;
  __int128 *v130;
  int v131;
  double v132;
  double v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  unint64_t v138;
  BOOL v140;
  uint64_t v141;
  unint64_t v142;
  double *v143;
  unint64_t v144;
  double v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  int64_t v149;
  int64_t v150;
  BOOL v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  double v155;
  double v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int64_t v162;
  uint64_t v163;
  double v164;
  _QWORD *v165;
  uint64_t *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  int64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  double *v174;
  double v175;
  double v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  unint64_t v182;
  uint64_t v183;
  double v184;
  double v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  __int128 *v189;
  uint64_t v190;
  double v191;
  uint64_t v192;
  uint64_t *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  int v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;

BOOL sub_20F387E70(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  __int128 *v12;
  int v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  __int128 *v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  __int128 *v29;
  uint64_t v30;
  double v31;
  int v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  double *v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(double *)(a2 - 24);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        *(double *)a1 = v6;
        *(double *)(a2 - 24) = v7;
        v42 = *(_OWORD *)(a1 + 8);
        v8 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 16) = v8;
        goto LABEL_26;
      }
      return result;
    case 3uLL:
      v9 = *(double *)(a1 + 24);
      v10 = *(double *)a1;
      v11 = *(double *)(a2 - 24);
      if (v9 >= *(double *)a1)
      {
        if (v11 < v9)
        {
          *(double *)(a1 + 24) = v11;
          *(double *)(a2 - 24) = v9;
          v48 = *(_OWORD *)(a1 + 32);
          v26 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(a1 + 40) = v26;
          *(_QWORD *)(a2 - 16) = v48;
          *(_DWORD *)(a2 - 8) = DWORD2(v48);
          v27 = *(double *)(a1 + 24);
          v28 = *(double *)a1;
          if (v27 < *(double *)a1)
          {
            *(double *)a1 = v27;
            *(double *)(a1 + 24) = v28;
            v49 = *(_OWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 32) = v49;
            *(_DWORD *)(a1 + 40) = DWORD2(v49);
          }
        }
      }
      else
      {
        v12 = (__int128 *)(a1 + 8);
        if (v11 >= v9)
        {
          *(double *)a1 = v9;
          v29 = (__int128 *)(a1 + 32);
          v30 = *(_QWORD *)(a1 + 32);
          *(double *)(a1 + 24) = v10;
          v52 = *v12;
          *(_QWORD *)v12 = v30;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 32) = v52;
          *(_DWORD *)(a1 + 40) = DWORD2(v52);
          v31 = *(double *)(a2 - 24);
          if (v31 >= v10)
            return result;
          *(double *)(a1 + 24) = v31;
          *(double *)(a2 - 24) = v10;
          v42 = *v29;
          v32 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v29 = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(a1 + 40) = v32;
        }
        else
        {
          *(double *)a1 = v11;
          *(double *)(a2 - 24) = v10;
          v42 = *v12;
          v13 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v12 = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(a1 + 16) = v13;
        }
LABEL_26:
        *(_QWORD *)(a2 - 16) = v42;
        *(_DWORD *)(a2 - 8) = DWORD2(v42);
      }
      return result;
    case 4uLL:
      sub_20F3883A8(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_20F3883A8(a1, a1 + 24, a1 + 48, a1 + 72);
      v19 = *(double *)(a2 - 24);
      v20 = *(double *)(a1 + 72);
      if (v19 >= v20)
        return 1;
      *(double *)(a1 + 72) = v19;
      *(double *)(a2 - 24) = v20;
      v44 = *(_OWORD *)(a1 + 80);
      v21 = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 - 16);
      *(_DWORD *)(a1 + 88) = v21;
      *(_QWORD *)(a2 - 16) = v44;
      *(_DWORD *)(a2 - 8) = DWORD2(v44);
      v22 = *(double *)(a1 + 72);
      v23 = *(double *)(a1 + 48);
      if (v22 >= v23)
        return 1;
      *(double *)(a1 + 48) = v22;
      *(double *)(a1 + 72) = v23;
      v45 = *(_OWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = v45;
      *(_DWORD *)(a1 + 88) = DWORD2(v45);
      v24 = *(double *)(a1 + 24);
      if (v22 >= v24)
        return 1;
      *(double *)(a1 + 24) = v22;
      *(double *)(a1 + 48) = v24;
      v46 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v46;
      *(_DWORD *)(a1 + 64) = DWORD2(v46);
      v25 = *(double *)a1;
      if (v22 >= *(double *)a1)
        return 1;
      *(double *)a1 = v22;
      *(double *)(a1 + 24) = v25;
      v47 = *(_OWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v47;
      *(_DWORD *)(a1 + 40) = DWORD2(v47);
      return 1;
    default:
      v14 = (double *)(a1 + 48);
      v15 = *(double *)(a1 + 48);
      v16 = *(double *)(a1 + 24);
      v17 = *(double *)a1;
      if (v16 >= *(double *)a1)
      {
        if (v15 < v16)
        {
          *(double *)(a1 + 24) = v15;
          *(double *)(a1 + 48) = v16;
          v50 = *(_OWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 56) = v50;
          *(_DWORD *)(a1 + 64) = DWORD2(v50);
          if (v15 < v17)
          {
            *(double *)a1 = v15;
            *(double *)(a1 + 24) = v17;
            v51 = *(_OWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 32) = v51;
            *(_DWORD *)(a1 + 40) = DWORD2(v51);
          }
        }
      }
      else
      {
        v18 = (__int128 *)(a1 + 8);
        if (v15 >= v16)
        {
          *(double *)a1 = v16;
          *(double *)(a1 + 24) = v17;
          v33 = (__int128 *)(a1 + 32);
          v53 = *v18;
          *(_QWORD *)v18 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 32) = v53;
          *(_DWORD *)(a1 + 40) = DWORD2(v53);
          if (v15 >= v17)
            goto LABEL_30;
          *(double *)(a1 + 24) = v15;
          *(double *)(a1 + 48) = v17;
          v43 = *v33;
          *(_QWORD *)v33 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
        }
        else
        {
          *(double *)a1 = v15;
          *(double *)(a1 + 48) = v17;
          v43 = *v18;
          *(_QWORD *)v18 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
        }
        *(_QWORD *)(a1 + 56) = v43;
        *(_DWORD *)(a1 + 64) = DWORD2(v43);
      }
LABEL_30:
      v34 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v35 = 0;
      v36 = 0;
      break;
  }
  while (1)
  {
    v38 = *(double *)v34;
    if (*(double *)v34 < *v14)
    {
      v54 = *(_QWORD *)(v34 + 8);
      v55 = *(_DWORD *)(v34 + 16);
      v39 = *v14;
      v40 = v35;
      do
      {
        v41 = a1 + v40;
        *(double *)(v41 + 72) = v39;
        *(_QWORD *)(v41 + 80) = *(_QWORD *)(a1 + v40 + 56);
        *(_DWORD *)(v41 + 88) = *(_DWORD *)(a1 + v40 + 64);
        if (v40 == -48)
        {
          v37 = (double *)a1;
          goto LABEL_33;
        }
        v39 = *(double *)(v41 + 24);
        v40 -= 24;
      }
      while (v38 < v39);
      v37 = (double *)(a1 + v40 + 72);
LABEL_33:
      *v37 = v38;
      *(_QWORD *)(v41 + 56) = v54;
      *(_DWORD *)(v41 + 64) = v55;
      if (++v36 == 8)
        return v34 + 24 == a2;
    }
    v14 = (double *)v34;
    v35 += 24;
    v34 += 24;
    if (v34 == a2)
      return 1;
  }
}

__n128 sub_20F3883A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  double v6;
  __int128 *v7;
  int v8;
  int v9;
  double v10;
  int v11;
  __int128 *v12;
  int v13;
  double v14;
  int v15;
  __n128 result;
  double v17;
  int v18;
  double v19;
  int v20;
  double v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = *(double *)a2;
  v5 = *(double *)a1;
  v6 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v6 < v4)
    {
      *(double *)a2 = v6;
      *(double *)a3 = v4;
      v24 = *(_OWORD *)(a2 + 8);
      v9 = *(_DWORD *)(a3 + 16);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 16) = v9;
      *(_QWORD *)(a3 + 8) = v24;
      *(_DWORD *)(a3 + 16) = DWORD2(v24);
      v10 = *(double *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(double *)a2 = v10;
        v25 = *(_OWORD *)(a1 + 8);
        v11 = *(_DWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = v11;
        *(_QWORD *)(a2 + 8) = v25;
        *(_DWORD *)(a2 + 16) = DWORD2(v25);
      }
    }
  }
  else
  {
    v7 = (__int128 *)(a1 + 8);
    if (v6 < v4)
    {
      *(double *)a1 = v6;
      *(double *)a3 = v5;
      v23 = *v7;
      v8 = *(_DWORD *)(a3 + 16);
      *(_QWORD *)v7 = *(_QWORD *)(a3 + 8);
      *(_DWORD *)(a1 + 16) = v8;
LABEL_9:
      *(_QWORD *)(a3 + 8) = v23;
      *(_DWORD *)(a3 + 16) = DWORD2(v23);
      goto LABEL_10;
    }
    *(double *)a1 = v4;
    *(double *)a2 = v5;
    v12 = (__int128 *)(a2 + 8);
    v26 = *v7;
    v13 = *(_DWORD *)(a2 + 16);
    *(_QWORD *)v7 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a2 + 8) = v26;
    *(_DWORD *)(a2 + 16) = DWORD2(v26);
    v14 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(double *)a3 = v14;
      v23 = *v12;
      v15 = *(_DWORD *)(a3 + 16);
      *(_QWORD *)v12 = *(_QWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 16) = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_u64[0] = *(_QWORD *)a4;
  v17 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    *(_QWORD *)a3 = result.n128_u64[0];
    *(double *)a4 = v17;
    v27 = *(_OWORD *)(a3 + 8);
    v18 = *(_DWORD *)(a4 + 16);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_DWORD *)(a3 + 16) = v18;
    *(_QWORD *)(a4 + 8) = v27;
    *(_DWORD *)(a4 + 16) = DWORD2(v27);
    result.n128_u64[0] = *(_QWORD *)a3;
    v19 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      *(_QWORD *)a2 = result.n128_u64[0];
      *(double *)a3 = v19;
      v28 = *(_OWORD *)(a2 + 8);
      v20 = *(_DWORD *)(a3 + 16);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 16) = v20;
      *(_QWORD *)(a3 + 8) = v28;
      *(_DWORD *)(a3 + 16) = DWORD2(v28);
      result.n128_u64[0] = *(_QWORD *)a2;
      v21 = *(double *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        *(_QWORD *)a1 = result.n128_u64[0];
        *(double *)a2 = v21;
        result = *(__n128 *)(a1 + 8);
        v22 = *(_DWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = v22;
        *(_QWORD *)(a2 + 8) = result.n128_u64[0];
        *(_DWORD *)(a2 + 16) = result.n128_u32[2];
      }
    }
  }
  return result;
}

void sub_20F3885B4(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  __int128 *v18;
  int v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  int v28;
  int v29;
  double v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  double v38;
  double v39;
  uint64_t v40;
  unint64_t v41;
  double *v42;
  double v43;
  double v44;
  double v45;
  __int128 *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  double v51;
  unint64_t v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  double v56;
  double v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  unint64_t v65;
  double *v66;
  double v67;
  double v68;
  double v69;
  __int128 *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  double v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  double v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  double v95;
  unint64_t v96;
  double v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  double v101;
  unint64_t v102;
  double *v103;
  double v104;
  double v105;
  double v106;
  double *v107;
  int v108;
  double v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  double v114;
  unint64_t v115;
  unint64_t v116;
  double v117;
  double v118;
  double v119;
  int v120;
  double v121;
  double v122;
  uint64_t v123;
  double v124;
  double v125;
  int v126;
  double v127;
  double v128;
  double v129;
  __int128 *v130;
  int v131;
  double v132;
  double v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  unint64_t v138;
  BOOL v140;
  uint64_t v141;
  unint64_t v142;
  double *v143;
  unint64_t v144;
  double v145;
  double v146;
  uint64_t v147;
  uint64_t v148;
  int64_t v149;
  int64_t v150;
  BOOL v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  double v155;
  double v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int64_t v162;
  uint64_t v163;
  double v164;
  _QWORD *v165;
  uint64_t *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  int64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  double *v174;
  double v175;
  double v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  unint64_t v182;
  uint64_t v183;
  double v184;
  double v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  __int128 *v189;
  uint64_t v190;
  double v191;
  uint64_t v192;
  uint64_t *v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  int v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;

BOOL sub_20F389630(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  __int128 *v12;
  int v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  __int128 *v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  double v28;
  __int128 *v29;
  uint64_t v30;
  double v31;
  int v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  double *v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(double *)(a2 - 24);
      v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        *(double *)a1 = v6;
        *(double *)(a2 - 24) = v7;
        v42 = *(_OWORD *)(a1 + 8);
        v8 = *(_DWORD *)(a2 - 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 16);
        *(_DWORD *)(a1 + 16) = v8;
        goto LABEL_26;
      }
      return result;
    case 3uLL:
      v9 = *(double *)(a1 + 24);
      v10 = *(double *)a1;
      v11 = *(double *)(a2 - 24);
      if (v9 >= *(double *)a1)
      {
        if (v11 < v9)
        {
          *(double *)(a1 + 24) = v11;
          *(double *)(a2 - 24) = v9;
          v48 = *(_OWORD *)(a1 + 32);
          v26 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(a1 + 40) = v26;
          *(_QWORD *)(a2 - 16) = v48;
          *(_DWORD *)(a2 - 8) = DWORD2(v48);
          v27 = *(double *)(a1 + 24);
          v28 = *(double *)a1;
          if (v27 < *(double *)a1)
          {
            *(double *)a1 = v27;
            *(double *)(a1 + 24) = v28;
            v49 = *(_OWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 32) = v49;
            *(_DWORD *)(a1 + 40) = DWORD2(v49);
          }
        }
      }
      else
      {
        v12 = (__int128 *)(a1 + 8);
        if (v11 >= v9)
        {
          *(double *)a1 = v9;
          v29 = (__int128 *)(a1 + 32);
          v30 = *(_QWORD *)(a1 + 32);
          *(double *)(a1 + 24) = v10;
          v52 = *v12;
          *(_QWORD *)v12 = v30;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 32) = v52;
          *(_DWORD *)(a1 + 40) = DWORD2(v52);
          v31 = *(double *)(a2 - 24);
          if (v31 >= v10)
            return result;
          *(double *)(a1 + 24) = v31;
          *(double *)(a2 - 24) = v10;
          v42 = *v29;
          v32 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v29 = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(a1 + 40) = v32;
        }
        else
        {
          *(double *)a1 = v11;
          *(double *)(a2 - 24) = v10;
          v42 = *v12;
          v13 = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v12 = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(a1 + 16) = v13;
        }
LABEL_26:
        *(_QWORD *)(a2 - 16) = v42;
        *(_DWORD *)(a2 - 8) = DWORD2(v42);
      }
      return result;
    case 4uLL:
      sub_20F3883A8(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_20F3883A8(a1, a1 + 24, a1 + 48, a1 + 72);
      v19 = *(double *)(a2 - 24);
      v20 = *(double *)(a1 + 72);
      if (v19 >= v20)
        return 1;
      *(double *)(a1 + 72) = v19;
      *(double *)(a2 - 24) = v20;
      v44 = *(_OWORD *)(a1 + 80);
      v21 = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 - 16);
      *(_DWORD *)(a1 + 88) = v21;
      *(_QWORD *)(a2 - 16) = v44;
      *(_DWORD *)(a2 - 8) = DWORD2(v44);
      v22 = *(double *)(a1 + 72);
      v23 = *(double *)(a1 + 48);
      if (v22 >= v23)
        return 1;
      *(double *)(a1 + 48) = v22;
      *(double *)(a1 + 72) = v23;
      v45 = *(_OWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = v45;
      *(_DWORD *)(a1 + 88) = DWORD2(v45);
      v24 = *(double *)(a1 + 24);
      if (v22 >= v24)
        return 1;
      *(double *)(a1 + 24) = v22;
      *(double *)(a1 + 48) = v24;
      v46 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v46;
      *(_DWORD *)(a1 + 64) = DWORD2(v46);
      v25 = *(double *)a1;
      if (v22 >= *(double *)a1)
        return 1;
      *(double *)a1 = v22;
      *(double *)(a1 + 24) = v25;
      v47 = *(_OWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v47;
      *(_DWORD *)(a1 + 40) = DWORD2(v47);
      return 1;
    default:
      v14 = (double *)(a1 + 48);
      v15 = *(double *)(a1 + 48);
      v16 = *(double *)(a1 + 24);
      v17 = *(double *)a1;
      if (v16 >= *(double *)a1)
      {
        if (v15 < v16)
        {
          *(double *)(a1 + 24) = v15;
          *(double *)(a1 + 48) = v16;
          v50 = *(_OWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 56) = v50;
          *(_DWORD *)(a1 + 64) = DWORD2(v50);
          if (v15 < v17)
          {
            *(double *)a1 = v15;
            *(double *)(a1 + 24) = v17;
            v51 = *(_OWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *(_QWORD *)(a1 + 32) = v51;
            *(_DWORD *)(a1 + 40) = DWORD2(v51);
          }
        }
      }
      else
      {
        v18 = (__int128 *)(a1 + 8);
        if (v15 >= v16)
        {
          *(double *)a1 = v16;
          *(double *)(a1 + 24) = v17;
          v33 = (__int128 *)(a1 + 32);
          v53 = *v18;
          *(_QWORD *)v18 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 32) = v53;
          *(_DWORD *)(a1 + 40) = DWORD2(v53);
          if (v15 >= v17)
            goto LABEL_30;
          *(double *)(a1 + 24) = v15;
          *(double *)(a1 + 48) = v17;
          v43 = *v33;
          *(_QWORD *)v33 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
        }
        else
        {
          *(double *)a1 = v15;
          *(double *)(a1 + 48) = v17;
          v43 = *v18;
          *(_QWORD *)v18 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
        }
        *(_QWORD *)(a1 + 56) = v43;
        *(_DWORD *)(a1 + 64) = DWORD2(v43);
      }
LABEL_30:
      v34 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v35 = 0;
      v36 = 0;
      break;
  }
  while (1)
  {
    v38 = *(double *)v34;
    if (*(double *)v34 < *v14)
    {
      v54 = *(_QWORD *)(v34 + 8);
      v55 = *(_DWORD *)(v34 + 16);
      v39 = *v14;
      v40 = v35;
      do
      {
        v41 = a1 + v40;
        *(double *)(v41 + 72) = v39;
        *(_QWORD *)(v41 + 80) = *(_QWORD *)(a1 + v40 + 56);
        *(_DWORD *)(v41 + 88) = *(_DWORD *)(a1 + v40 + 64);
        if (v40 == -48)
        {
          v37 = (double *)a1;
          goto LABEL_33;
        }
        v39 = *(double *)(v41 + 24);
        v40 -= 24;
      }
      while (v38 < v39);
      v37 = (double *)(a1 + v40 + 72);
LABEL_33:
      *v37 = v38;
      *(_QWORD *)(v41 + 56) = v54;
      *(_DWORD *)(v41 + 64) = v55;
      if (++v36 == 8)
        return v34 + 24 == a2;
    }
    v14 = (double *)v34;
    v35 += 24;
    v34 += 24;
    if (v34 == a2)
      return 1;
  }
}

void sub_20F389B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  double v7;
  _OWORD *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  float64x2_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  void **v28;
  void **v29;
  uint64_t v30;
  unint64_t v31;
  void **v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  uint64_t *v52;
  float64x2_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v67;
  uint64_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  float64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float64x2_t *v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t *v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _QWORD *v96;
  uint64_t v97;
  BOOL v101;
  unint64_t v102;
  char *v103;
  _DWORD *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  int v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  int v118;
  std::locale::__imp *v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t *v129;
  unsigned int v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  __int128 *v138;
  __int128 *v139;
  unsigned int v140;
  __int128 v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unsigned int v145;
  BOOL v146;
  uint64_t *v147;
  unsigned int v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  float32x2_t *v158;
  float v159;
  _QWORD *v160;
  unint64_t *v161;
  double v162;
  double v163;
  unint64_t v164;
  char v165;
  char v166;
  std::__shared_weak_count *size;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  double *v178;
  uint64_t v179;
  double *v180;
  double v181;
  double v182;
  double v183;
  float64x2_t v184;
  double v185;
  double v186;
  double v187;
  __int128 *v191;
  uint64_t v192;
  float64x2_t v194;
  double v198;
  char *v208;
  _DWORD *v209;
  char *v211;
  char *v212;
  char *v213;
  double v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t *v235;
  float64x2_t v236;
  uint64_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  double v241;
  float64x2_t v242;
  float64x2_t v243;
  uint64_t *v244;
  uint64_t *v245;
  uint64_t *v246;
  float64x2_t v247;
  float64x2_t v248;
  float32x2_t *v249;
  float v250;
  float32x2_t v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  char v256;
  double v257;
  double v258;
  double v260;
  double v263;
  float64x2_t v267;
  float64x2_t v268;
  double v269;
  float64x2_t v270;
  double v271;
  double v272;
  double v273;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  int v282;
  int v283;
  double v284;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  int v293;
  int v294;
  double v295;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  int v304;
  int v305;
  double v306;
  float64x2_t v307;
  float64x2_t v308;
  double v309;
  float64x2_t v310;
  double v311;
  double v312;
  double v313;
  double v314;
  float64x2_t v316;
  double v317;
  double v319;
  double v320;
  int v321;
  double v322;
  float64x2_t v323;
  BOOL v324;
  float64x2_t v325;
  double v326;
  double v328;
  double v329;
  int v330;
  double v331;
  float64x2_t v332;
  float64x2_t v333;
  BOOL v334;
  float64x2_t v335;
  double v336;
  double v338;
  double v339;
  int v340;
  double v341;
  float64x2_t v342;
  float64x2_t v343;
  double v349;
  float64x2_t v350;
  unint64_t v351;
  char *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  _BYTE *v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  char *v364;
  char *v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  char *v370;
  char *v371;
  uint64_t v372;
  __int128 v373;
  int v374;
  uint64_t v375;
  unint64_t v376;
  unsigned int v377;
  unsigned int v378;
  _QWORD *v379;
  uint64_t v380;
  unsigned int v381;
  BOOL v382;
  uint64_t *v383;
  unsigned int v384;
  _QWORD *v385;
  _QWORD *v386;
  uint64_t *v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int v392;
  std::string::size_type v393;
  BOOL v394;
  uint64_t v396;
  _QWORD *v397;
  _QWORD *v398;
  unsigned int v399;
  BOOL v400;
  uint64_t *v401;
  unsigned int v402;
  _QWORD *v403;
  _QWORD *v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t *v407;
  _QWORD *v408;
  std::string::size_type v409;
  std::string::size_type v410;
  uint64_t v411;
  float32x2_t *v412;
  float32x2_t v413;
  float v414;
  std::__shared_weak_count *v415;
  std::__shared_weak_count *v416;
  unint64_t *p_shared_owners;
  double v418;
  double v419;
  __n128 v420;
  unint64_t v421;
  unint64_t v422;
  std::locale::__imp *v423;
  std::locale::__imp *locale;
  unint64_t v425;
  unint64_t v426;
  unint64_t *v427;
  std::locale::__imp *v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  char *v434;
  uint64_t v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  std::__shared_weak_count *v439;
  char v440;
  std::locale::__imp *v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  __int128 v448;
  __int128 v449;
  uint64_t v450;
  uint64_t v451;
  std::locale::__imp *v452;
  uint64_t v453;
  __int128 v454;
  __int128 v455;
  uint64_t v456;
  __int128 v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  std::locale::__imp *v464;
  std::locale::__imp *v465;
  uint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  uint64_t v470;
  __int128 v471;
  _QWORD *v472;
  unint64_t v473;
  uint64_t v474;
  std::locale::__imp *v475;
  uint64_t v476;
  unint64_t v477;
  std::locale::__imp *v478;
  __int128 v479;
  unint64_t v480;
  char *v481;
  std::locale::__imp *v482;
  uint64_t v483;
  char *v484;
  char *v485;
  __int128 v486;
  __int128 v487;
  uint64_t v488;
  std::locale::__imp *v489;
  __int128 v490;
  __int128 v491;
  uint64_t v492;
  std::locale::__imp *v493;
  unint64_t v494;
  std::__shared_weak_count *v495;
  unint64_t *v496;
  unint64_t v497;
  unint64_t *v498;
  unint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t *v503;
  unint64_t v504;
  std::__shared_weak_count *v505;
  unint64_t *v506;
  unint64_t v507;
  std::__shared_weak_count *v508;
  unint64_t *v509;
  unint64_t v510;
  char v512;
  double v514;
  double v515;
  char v516;
  double v517;
  double v518;
  float64x2_t v519;
  double v520;
  double v521;
  _QWORD *v522;
  const std::locale::facet *v523;
  __int128 *v524;
  uint64_t v525;
  size_t v526;
  unint64_t v527;
  _OWORD *v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t *v532;
  unint64_t v533;
  _OWORD *v534;
  __int128 *v535;
  uint64_t v536;
  __int128 v537;
  uint64_t v538;
  double v539;
  double v540;
  double v541;
  double *v542;
  uint64_t v543;
  double v544;
  double v545;
  _QWORD *v546;
  const std::locale::facet *v547;
  _QWORD *v548;
  double v549;
  uint64_t v550;
  unsigned int v551;
  double v552;
  unsigned int v553;
  uint64_t v554;
  char *v555;
  double v556;
  double *v557;
  unint64_t v558;
  unint64_t v559;
  float64x2_t *v560;
  uint64_t v561;
  float64x2_t v562;
  float64x2_t v563;
  double *v564;
  double v565;
  double v566;
  double *v567;
  uint64_t v568;
  double v569;
  double v570;
  _BOOL4 v572;
  float64x2_t v573;
  double v574;
  double v575;
  double *v577;
  double v578;
  double v579;
  char *i;
  char *v581;
  uint64_t v582;
  _QWORD *v583;
  uint64_t v584;
  double v585;
  unsigned int v586;
  _QWORD *v587;
  _QWORD *v588;
  const std::locale::facet *v589;
  _QWORD *v590;
  const std::locale::facet *v591;
  _BYTE *v592;
  _QWORD *v593;
  _QWORD *v594;
  const std::locale::facet *v595;
  _QWORD *v596;
  const std::locale::facet *v597;
  int v598;
  char *v599;
  char *v600;
  char *v601;
  double v602;
  _QWORD *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  float64x2_t v607;
  float64x2_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  float64x2_t *v612;
  uint64_t v613;
  float64x2_t *v614;
  double v616;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v623;
  _QWORD *v624;
  uint64_t v625;
  _QWORD *v626;
  uint64_t v627;
  _QWORD *v628;
  uint64_t v629;
  _QWORD *v630;
  uint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  _QWORD *v634;
  uint64_t v635;
  _QWORD *v636;
  uint64_t v637;
  unint64_t v638;
  char *v639;
  uint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  _QWORD *v645;
  _QWORD *v646;
  const std::locale::facet *v647;
  _QWORD *v648;
  _QWORD *v649;
  void *v650;
  int64x2_t v651;
  std::__shared_weak_count *v652;
  int64x2_t v653;
  char v654;
  __int128 v655;
  uint64_t v656;
  double v657;
  unint64_t v658;
  __int128 v659;
  uint64_t v660;
  float64x2_t v661;
  unint64_t v662;
  double v663;
  uint64_t v664;
  uint64_t v665;
  _OWORD *v666;
  double v667;
  float64x2_t v668;
  uint64_t v669;
  int64x2_t v670;
  float64x2_t v671;
  _QWORD *v672;
  double v673;
  int64x2_t v674;
  double v675;
  uint64_t v676;
  uint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  _QWORD *v680;
  _QWORD *v681;
  _QWORD *v682;
  _OWORD *v683;
  float64_t **v684;
  int8x16_t v685;
  float64_t v686;
  double v687;
  unsigned int v688;
  double **v689;
  float64x2_t v690;
  int64x2_t v691;
  float64x2_t v692;
  unsigned int v693;
  uint64_t v694;
  int8x16_t v695;
  double v696;
  float64x2_t v697;
  unsigned int v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  uint64_t v702;
  char v703;
  void *v704[2];
  void *v705[2];
  int v706;
  uint64_t v707;
  std::__shared_weak_count *v708;
  std::__shared_weak_count *v709;
  std::__shared_weak_count *v710;
  std::__shared_weak_count *v711;
  std::__shared_weak_count *v712;
  unint64_t v713;
  char v714;
  __int128 v715;
  std::string v716;
  void *v717[2];
  uint64_t v718;
  std::string v719;
  uint64_t v720;
  int v721;
  __int128 v722;
  _QWORD v723[64];
  __int128 *v724;
  __int128 v725;
  void *v726[64];
  void *__src;
  unint64_t v728;
  uint64_t v729;
  uint64_t v730;
  _QWORD v731[64];
  _QWORD *v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  _QWORD v737[55];
  _QWORD *v738;
  __int128 v739;
  __int128 __dst;
  __int128 v741;
  std::locale v742[2];
  __int128 v743;
  unint64_t *v744;
  _BYTE v745[32];
  __int128 v746;
  __int128 v747;
  _QWORD *v748;
  uint64_t v749;
  __int128 v750;
  __int128 v751;
  unint64_t v752;
  char v753;
  __int128 v754;
  char v755;
  std::locale::__imp *v756;
  uint64_t v757;
  char v758;
  _BYTE v759[24];
  _BYTE *v760;
  _BYTE v761[24];
  _BYTE *v762;
  _BYTE v763[24];
  _BYTE *v764;
  _BYTE v765[24];
  _BYTE *v766;
  double v767;
  void *v768;
  uint64_t v769;
  int v770;
  __int128 v771;
  char v772;
  uint64_t v773;
  __int128 v774;
  __int128 v775;
  _BYTE __p[40];
  __int128 v777;
  _QWORD *v778;
  uint64_t v779;
  __int128 v780;
  __int128 v781;
  unint64_t v782;
  char v783;
  __int128 v784;
  char v785;
  _QWORD *v786;
  __int128 v787;
  __int16 v788;
  _BYTE v789[24];
  _BYTE *v790;
  _BYTE v791[24];
  _BYTE *v792;
  _BYTE v793[24];
  _BYTE *v794;
  _BYTE v795[24];
  _BYTE *v796;
  _BYTE v797[24];
  __int128 v798;
  uint64_t (**v799)();
  char *v800[12];
  __int128 v801;
  unint64_t v802;
  int64x2_t v803;
  int v804;
  __int128 v805;
  __int128 v806;
  __int128 v807;
  __int128 v808;
  unint64_t v809;
  uint64_t v810;
  uint64_t v811;
  _DWORD v812[4];
  uint64_t v813;
  char v814;
  __int128 v815;
  __int128 v816;
  unsigned int v817;
  uint64_t v818;
  _QWORD v819[18];
  _QWORD v820[6];
  __int128 v821;
  __int128 v822;
  __int128 v823;
  void (**v824)();
  uint64_t v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  uint64_t v829;
  int v830;
  uint64_t v831;
  _QWORD v832[18];
  __int16 v833;
  __int128 v834;
  __int128 v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  __int128 v839;
  __int128 v840;
  __int128 v841;
  __int128 v842;
  _BYTE v843[144];
  int v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  _QWORD *v848;
  __int128 v849;
  _BYTE v850[28];
  __int128 v851;
  __int128 v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v677 = v0;
  v673 = v7;
  v858 = *MEMORY[0x24BDAC8D0];
  v9 = v8[1];
  v699 = *v8;
  v700 = v9;
  v666 = v8;
  v701 = v8[2];
  v702 = 0;
  v703 = 0;
  *(_OWORD *)v704 = 0u;
  *(_OWORD *)v705 = 0u;
  v706 = 1065353216;
  sub_20F38F148((uint64_t)&v699, v5);
  v10 = v4[2];
  v11 = v10 / 0xA;
  v12 = *(char **)v2;
  if (v10 / 0xA > (uint64_t)(*(_QWORD *)(v2 + 16) - *(_QWORD *)v2) >> 4)
  {
    if (v10 >> 61 >= 5)
      sub_20E867F44();
    v13 = *(char **)(v2 + 8);
    v14 = (char *)operator new(16 * v11);
    v15 = &v14[v13 - v12];
    v16 = v15;
    if (v13 != v12)
    {
      v16 = &v14[v13 - v12];
      do
      {
        v17 = *((_QWORD *)v13 - 2);
        v13 -= 16;
        v18 = *((_DWORD *)v13 + 2);
        *((_QWORD *)v16 - 2) = v17;
        v16 -= 16;
        *((_DWORD *)v16 + 2) = v18;
      }
      while (v13 != v12);
    }
    *(_QWORD *)v2 = v16;
    *(_QWORD *)(v2 + 8) = v15;
    *(_QWORD *)(v2 + 16) = &v14[16 * v11];
    if (v12)
      operator delete(v12);
  }
  v21 = (_QWORD *)*v4;
  v20 = v4 + 1;
  v19 = v21;
  if (v21 != v20)
  {
    v681 = v6 + 38;
    v680 = v6 + 7;
    v678 = v6 + 223;
    v679 = v2;
    v682 = v20;
    do
    {
      v683 = v19 + 4;
      v22 = v19[6];
      if (!*(_BYTE *)(v22 + 528) || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v22 + 40) + 24))(v22 + 40))
        goto LABEL_149;
      v24 = *(uint64_t **)(v22 + 544);
      v25 = *(uint64_t **)(v22 + 536);
      v26 = ((char *)v24 - (char *)v25) >> 5;
      v27 = *(unsigned __int8 *)(v22 + 528);
      *(_OWORD *)v745 = xmmword_2103B0700;
      *(_QWORD *)&v745[16] = 0x3FF0000000000000;
      v742[0].__locale_ = 0;
      v716.__r_.__value_.__r.__words[0] = 0;
      memset(__p, 0, 24);
      if ((unint64_t)((char *)v24 - (char *)v25) > 0x29F)
      {
        sub_20EA6462C((void **)__p, ((char *)v24 - (char *)v25) >> 4);
        v24 = *(uint64_t **)(v22 + 544);
        v25 = *(uint64_t **)(v22 + 536);
        v28 = *(void ***)__p;
        v29 = (void **)(*(_QWORD *)__p + 8 * v26);
        if (*(_BYTE *)(v22 + 528))
          v30 = v22 + 40;
        else
          v30 = 0;
        if (v25 == v24)
        {
LABEL_76:
          v57 = 0;
          v58 = 1;
          v2 = v679;
          v59 = *(void **)__p;
          if (!*(_QWORD *)__p)
            goto LABEL_78;
LABEL_77:
          *(_QWORD *)&__p[8] = v59;
          operator delete(v59);
          goto LABEL_78;
        }
      }
      else
      {
        v28 = v717;
        v29 = &v717[v26];
        if (v27)
          v30 = v22 + 40;
        else
          v30 = 0;
        if (v25 == v24)
          goto LABEL_76;
      }
      v31 = 0;
      v694 = 0;
      v684 = (float64_t **)v29;
      v32 = v29;
      v689 = (double **)v28;
      do
      {
        v33 = v31;
        if (v704[1])
        {
          v34 = *((_DWORD *)v25 + 4);
          v35 = *((_DWORD *)v25 + 2);
          v36 = v35 ^ __ROR4__(v34, 13);
          v37 = (uint8x8_t)vcnt_s8((int8x8_t)v704[1]);
          v37.i16[0] = vaddlv_u8(v37);
          if (v37.u32[0] > 1uLL)
          {
            v38 = v36;
            if (v704[1] <= (void *)v36)
              v38 = v36 % (unint64_t)v704[1];
          }
          else
          {
            v38 = (LODWORD(v704[1]) - 1) & v36;
          }
          v39 = (uint64_t **)*((_QWORD *)v704[0] + v38);
          if (v39)
          {
            v40 = *v39;
            if (v40)
            {
              v41 = *v25;
              if (v37.u32[0] < 2uLL)
              {
                while (1)
                {
                  v43 = v40[1];
                  if (v43 == v36)
                  {
                    if (*((_DWORD *)v40 + 8) == v34 && v40[2] == v41 && *((_DWORD *)v40 + 6) == v35)
                      goto LABEL_47;
                  }
                  else if ((v43 & ((unint64_t)v704[1] - 1)) != v38)
                  {
                    goto LABEL_45;
                  }
                  v40 = (uint64_t *)*v40;
                  if (!v40)
                    goto LABEL_45;
                }
              }
              do
              {
                v42 = v40[1];
                if (v42 == v36)
                {
                  if (*((_DWORD *)v40 + 8) == v34 && v40[2] == v41 && *((_DWORD *)v40 + 6) == v35)
                    goto LABEL_47;
                }
                else
                {
                  if ((void *)v42 >= v704[1])
                    v42 %= (unint64_t)v704[1];
                  if (v42 != v38)
                    break;
                }
                v40 = (uint64_t *)*v40;
              }
              while (v40);
            }
          }
        }
LABEL_45:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 201, (uint64_t)"cameraPoseIter != camera_data_.end()", 36, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v40 = 0;
        v34 = *((_DWORD *)v25 + 4);
LABEL_47:
        v44 = v25[3] + 16;
        *v32 = v40 + 5;
        *v28 = (void *)v44;
        if (*(_DWORD *)(v30 + 48) == v34
          && *(_QWORD *)(v30 + 32) == *v25
          && *(_DWORD *)(v30 + 40) == *((_DWORD *)v25 + 2))
        {
          _Q0 = *(float64x2_t *)v44;
          v23.f64[0] = *(float64_t *)&v745[16];
          _Q2 = vmulq_f64(_Q0, _Q0);
          _D3 = *(_QWORD *)(v44 + 8);
          __asm { FMLA            D2, D3, V0.D[1] }
          _Q2.f64[0] = 1.0 / sqrt(_Q2.f64[0] + v23.f64[0] * v23.f64[0]);
          v23 = vmulq_f64(v23, _Q2);
          *(float64x2_t *)v745 = vmulq_n_f64(*(float64x2_t *)v44, _Q2.f64[0]);
          *(float64_t *)&v745[16] = v23.f64[0];
          v694 = v31;
        }
        ++v31;
        ++v28;
        ++v32;
        v25 += 4;
      }
      while (v25 != v24);
      v2 = v679;
      if (v31 <= 1)
      {
        v57 = 0;
        if (v33)
          v58 = 1;
        else
          v58 = 2;
        v59 = *(void **)__p;
        if (*(_QWORD *)__p)
          goto LABEL_77;
      }
      else
      {
        if (v703)
        {
          v49 = *(__int128 **)(v22 + 536);
          v50 = *(__int128 **)(v22 + 544);
          while (v49 != v50)
          {
            v51 = *v49;
            *(_QWORD *)&v797[16] = *((_QWORD *)v49 + 2);
            *(_OWORD *)v797 = v51;
            v52 = sub_20E9DF85C((_QWORD *)(v702 + 1784), (uint64_t *)v797);
            if (v52)
              v54 = v52 + 5;
            else
              v54 = 0;
            if (!v52
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 299, (uint64_t)"camera_pose_ref", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
LABEL_1084:
              abort();
            }
            if (*(double *)(v54[8] + 1424) > 0.0)
            {
              v55 = *((_QWORD *)v49 + 3);
              if (*(_BYTE *)(v22 + 528))
                v56 = v22 + 40;
              else
                v56 = 0;
              if (*(_DWORD *)(v56 + 48) == *(_DWORD *)&v797[16]
                && *(_QWORD *)(v56 + 32) == *(_QWORD *)v797
                && *(_DWORD *)(v56 + 40) == *(_DWORD *)&v797[8]
                && *(double *)(v56 + 88) == -1.79769313e308
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 311, (uint64_t)"!ExactlyEqual(track.getStructure()->anchor_row_measurement(), VIOAnchoredPoint3DBase<Float>::kInvalidAnchorRowMeasurement)", 122, (uint64_t)"The anchor row measurement has not been set in rolling-shutter compensation.", 76, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_1084;
              }
              v53.f64[0] = *(float *)(v55 + 12);
              sub_20F2B0AD8((uint64_t)&v699, (int8x16_t **)v54, (uint64_t)v797, v53);
            }
            v49 += 2;
          }
        }
        v57 = sub_20F2B04C8((__int128 *)v745, (double *)v742, (float64_t *)&v716, v689, v684, v31, v694);
        v58 = 5;
        v59 = *(void **)__p;
        if (*(_QWORD *)__p)
          goto LABEL_77;
      }
LABEL_78:
      if (!v57)
      {
        if (v677 != 1 || v58 != 2)
        {
LABEL_149:
          v103 = *(char **)(v2 + 8);
          v102 = *(_QWORD *)(v2 + 16);
          if ((unint64_t)v103 >= v102)
          {
            v105 = *(char **)v2;
            v106 = (uint64_t)&v103[-*(_QWORD *)v2] >> 4;
            v107 = v106 + 1;
            if ((unint64_t)(v106 + 1) >> 60)
              sub_20E867F44();
            v108 = v102 - (_QWORD)v105;
            if (v108 >> 3 > v107)
              v107 = v108 >> 3;
            if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFF0)
              v109 = 0xFFFFFFFFFFFFFFFLL;
            else
              v109 = v107;
            if (v109)
            {
              if (v109 >> 60)
                sub_20E877A38();
              v110 = (char *)operator new(16 * v109);
            }
            else
            {
              v110 = 0;
            }
            v111 = &v110[16 * v106];
            *(_OWORD *)v111 = *v683;
            v112 = v111;
            if (v103 != v105)
            {
              do
              {
                v113 = *((_QWORD *)v103 - 2);
                v103 -= 16;
                v114 = *((_DWORD *)v103 + 2);
                *((_QWORD *)v112 - 2) = v113;
                v112 -= 16;
                *((_DWORD *)v112 + 2) = v114;
              }
              while (v103 != v105);
              goto LABEL_163;
            }
            goto LABEL_164;
          }
          goto LABEL_150;
        }
        goto LABEL_167;
      }
      if (*(_BYTE *)(v22 + 528))
        v60 = v22 + 40;
      else
        v60 = 0;
      v61 = sub_20E9DF85C(v704, (uint64_t *)(v60 + 32));
      *(std::locale *)&v62.f64[0] = v742[0];
      v63.f64[0] = *(float64_t *)&v745[16];
      v64.f64[1] = *(float64_t *)&v745[8];
      *(_QWORD *)&v63.f64[0] = *(_OWORD *)&vmulq_f64(v63, v62);
      _Q0 = vmulq_n_f64(*(float64x2_t *)v745, *(double *)&v742[0].__locale_);
      _D4 = v61[39];
      v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v61 + 33), _Q0.f64[0]), *(float64x2_t *)(v61 + 37), _Q0, 1), *(float64x2_t *)(v61 + 41), v63.f64[0]);
      __asm { FMLA            D2, D4, V0.D[1] }
      v64.f64[0] = vmlad_n_f64(_D2, *((double *)v61 + 43), v63.f64[0]);
      *(_QWORD *)&_Q0.f64[0] = v61[47];
      v69 = *(_OWORD *)&vaddq_f64(_Q0, v64);
      v70 = vaddq_f64(*(float64x2_t *)(v61 + 45), v67);
      if (*(_BYTE *)(v22 + 528))
        v71 = v22 + 40;
      else
        v71 = 0;
      *(float64x2_t *)(v71 + 8) = v70;
      *(_QWORD *)(v71 + 24) = v69;
      if (*(_BYTE *)(v22 + 528))
        v72 = v22 + 40;
      else
        v72 = 0;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 16))(v72) & 1) == 0)
        goto LABEL_149;
      v73 = v22 + 40;
      if (!*(_BYTE *)(v22 + 528))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 432, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1083;
        }
        if (*(_BYTE *)(v22 + 528))
          v73 = v22 + 40;
        else
          v73 = 0;
      }
      v74 = sub_20E9DF85C(v704, (uint64_t *)(v73 + 32));
      if (!v74
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 435, (uint64_t)"anchorCameraIter != camera_data_.end()", 38, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
      {
LABEL_1083:
        abort();
      }
      if (*(_BYTE *)(v22 + 528))
        v76 = v22 + 40;
      else
        v76 = 0;
      v77 = *(_QWORD *)(v22 + 536);
      v78 = *(_QWORD *)(v22 + 544);
      if (v77 != v78)
      {
        v75.f64[0] = *(float64_t *)(v76 + 24);
        v690 = v75;
        v695 = *(int8x16_t *)(v76 + 8);
        v685 = vextq_s8(v695, v695, 8uLL);
        v79 = (float64x2_t *)(v74 + 45);
        v80 = 1.0;
        while (1)
        {
          if (*(_BYTE *)(v22 + 528))
            v82 = v22 + 40;
          else
            v82 = 0;
          if (*(_DWORD *)(v82 + 48) != *(_DWORD *)(v77 + 16)
            || *(_QWORD *)(v82 + 32) != *(_QWORD *)v77
            || *(_DWORD *)(v82 + 40) != *(_DWORD *)(v77 + 8))
          {
            v83 = sub_20E9DF85C(v704, (uint64_t *)v77);
            if (!v83
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 448, (uint64_t)"invPoseIter != camera_data_.end()", 33, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1083;
            }
            v84.f64[0] = v79[1].f64[0];
            *(_QWORD *)&v85.f64[1] = v685.i64[1];
            *(_QWORD *)&v84.f64[0] = *(_OWORD *)&vsubq_f64(v84, v690);
            *(_QWORD *)&v86.f64[0] = v695.i64[0];
            *(_QWORD *)&v86.f64[1] = v685.i64[0];
            v87 = vsubq_f64(*v79, v86);
            v81 = 1.0;
            if (fabs(v87.f64[0]) >= 1.0e-10 || fabs(v87.f64[1]) >= 1.0e-10 || fabs(v84.f64[0]) >= 1.0e-10)
            {
              *(_QWORD *)&v85.f64[0] = v83[47];
              *(_QWORD *)&v85.f64[0] = *(_OWORD *)&vsubq_f64(v85, v690);
              *(_QWORD *)&v88.f64[0] = v695.i64[0];
              *(_QWORD *)&v88.f64[1] = v685.i64[0];
              v89 = vsubq_f64(*(float64x2_t *)(v83 + 45), v88);
              if (fabs(v89.f64[0]) >= 1.0e-10 || fabs(v89.f64[1]) >= 1.0e-10 || fabs(v85.f64[0]) >= 1.0e-10)
              {
                v87.f64[1] = *(double *)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).i64;
                v89.f64[1] = *(double *)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).i64;
                v81 = (vmulq_f64(v87, v89).f64[0] + v87.f64[1] * v89.f64[1] + v84.f64[0] * v85.f64[0])
                    / sqrt((vmulq_f64(v87, v87).f64[0] + v87.f64[1] * v87.f64[1] + v84.f64[0] * v84.f64[0])* (vmulq_f64(v89, v89).f64[0] + v89.f64[1] * v89.f64[1] + v85.f64[0] * v85.f64[0]));
              }
            }
            if (v81 < v80)
              v80 = v81;
          }
          v77 += 32;
          if (v77 == v78)
            goto LABEL_131;
        }
      }
      v80 = 1.0;
LABEL_131:
      _NF = *(double *)&v742[0].__locale_ > *((double *)&v700 + 1) || *(double *)&v742[0].__locale_ < *(double *)&v700;
      if (_NF && v80 > *(double *)&v701)
        goto LABEL_149;
      if (*(_BYTE *)(v22 + 528))
        v92 = v22 + 40;
      else
        v92 = 0;
      *(double *)(v92 + 104) = v80;
      v93 = *((_DWORD *)v666 + 1);
      if (v93 != 2)
      {
        if (v93 != 1)
        {
          if (v93)
            goto LABEL_1056;
          v94 = v19[6];
          __asm { FMOV            V0.2D, #1.0 }
          *(_OWORD *)&v797[8] = _Q0;
          v798 = _Q0;
          *(_QWORD *)v797 = &unk_24C9FE8F8;
          v799 = &off_24C9FE968;
          memset(v800, 0, sizeof(v800));
          v801 = 0u;
          v802 = 0;
          v803 = 0uLL;
          v804 = 16842753;
          v805 = 0u;
          v806 = 0u;
          v807 = 0u;
          v808 = 0u;
          v809 = 0;
          *(_QWORD *)&v805 = operator new(0x100uLL);
          *((_QWORD *)&v805 + 1) = v805;
          *(_QWORD *)&v806 = v805 + 256;
          *((_QWORD *)&v806 + 1) = operator new(0x100uLL);
          *(_QWORD *)&v807 = *((_QWORD *)&v806 + 1);
          *((_QWORD *)&v807 + 1) = *((_QWORD *)&v806 + 1) + 256;
          *((_QWORD *)&v808 + 1) = operator new(0x100uLL);
          v809 = *((_QWORD *)&v808 + 1) + 256;
          v811 = 0;
          memset(v812, 0, 14);
          v810 = 0;
          *(_QWORD *)&v808 = *((_QWORD *)&v808 + 1);
          *(_QWORD *)v797 = &unk_24C9FE840;
          v814 = 0;
          v813 = 0;
          v818 = 0;
          v815 = 0u;
          v816 = 0u;
          v817 = 0;
          v96 = sub_20F2B36B4(v819, 0, 0, 0);
          memset(&v819[15], 0, 24);
          v819[14] = v96;
          *(_QWORD *)v797 = &unk_24C9FE788;
          v820[0] = &v799;
          v820[1] = &v816;
          memset(&v820[2], 0, 24);
          v821 = 0u;
          v822 = 0u;
          v823 = 0u;
          v824 = off_24C9FEA00;
          v831 = 0;
          v828 = 0;
          v829 = 0;
          v830 = 0;
          v825 = 0;
          v826 = 0;
          v827 = 0;
          v832[14] = sub_20F2B36B4(v832, 0, 0, 0);
          v846 = 0;
          v847 = 0;
          v845 = 0;
          memset(&v843[32], 0, 112);
          v844 = 0;
          memset(&v832[15], 0, 24);
          v833 = 0;
          v842 = 0u;
          memset(v843, 0, 28);
          v840 = 0u;
          v841 = 0u;
          v838 = 0u;
          v839 = 0u;
          v836 = 0u;
          v837 = 0u;
          v834 = 0u;
          v835 = 0u;
          v848 = v820;
          v851 = 0u;
          v852 = 0u;
          v853 = 0;
          v849 = 0u;
          memset(v850, 0, sizeof(v850));
          v824 = (void (**)())&off_24C9FE998;
          *(_QWORD *)v797 = off_24C9FE598;
          v854 = 2;
          v856 = 0;
          v857 = 0;
          v855 = 0;
          v97 = v94 + 40;
          if (!*(_BYTE *)(v94 + 528))
            goto LABEL_611;
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v94 + 40))
          {
            _Q1 = *(_OWORD *)(v94 + 104);
            _D3 = *(_QWORD *)(v94 + 112);
            __asm { FMLA            D2, D3, V1.D[1] }
            if (fabs(sqrt(_D2 + *(double *)(v94 + 120) * *(double *)(v94 + 120)) + -1.0) <= 0.000001)
              goto LABEL_270;
            v101 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          }
          else
          {
            v101 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 44, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
          }
          if (v101)
            goto LABEL_1094;
LABEL_270:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 24))(v94 + 40))
          {
            v663 = *(double *)(v94 + 64);
            v176 = *(uint64_t **)(v94 + 136);
            v177 = *v176;
            v178 = (double *)v176[2];
            v179 = v176[4];
            v180 = (double *)v176[6];
            v182 = *v178;
            v181 = v178[1];
            v183 = v178[2];
            v184.f64[0] = *(float64_t *)(v177 + 16);
            v653 = *(int64x2_t *)v177;
            v655 = *(_OWORD *)(v94 + 48);
            v651 = *(int64x2_t *)(v177 + 24);
            v667 = *(double *)(v177 + 64);
            v184.f64[1] = *(float64_t *)(v177 + 40);
            v659 = *(_OWORD *)(v177 + 48);
            v661 = v184;
            v185 = *v180;
            v657 = v180[1];
            v186 = v180[2];
            v686 = *(double *)(v179 + 16);
            v674 = *(int64x2_t *)v179;
            v696 = *(double *)(v179 + 40);
            v691 = *(int64x2_t *)(v179 + 24);
            v187 = *(double *)(v179 + 64);
            v670 = *(int64x2_t *)(v179 + 48);
            _Q1 = *(_OWORD *)(v94 + 104);
            _D3 = *(_QWORD *)(v94 + 112);
            __asm { FMLA            D2, D3, V1.D[1] }
            if (fabs(sqrt(_D2 + *(double *)(v94 + 120) * *(double *)(v94 + 120)) + -1.0) > 0.000001
              && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 82, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
LABEL_1094:
              abort();
            }
            v191 = (__int128 *)v800[0];
            if (v800[1] == v800[0] || *(_DWORD *)v800[0])
            {
              v192 = sub_20F398160((uint64_t)&v800[3]);
              _D1 = *((double *)&v655 + 1) - v181;
              v194 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v653, v651), *(double *)&v655 - v182), (float64x2_t)vzip2q_s64(v653, v651), *((double *)&v655 + 1) - v181), v661, v663 - v183);
              _V4.D[1] = *((_QWORD *)&v659 + 1);
              __asm { FMLA            D0, D1, V4.D[1] }
              _D2 = v194.f64[1] - v657;
              v198 = _D0 + v667 * (v663 - v183) - v186;
              _V16.D[1] = v691.i64[1];
              _V18.D[1] = v674.i64[1];
              _Q4.f64[0] = v686;
              _Q4.f64[1] = v696;
              _Q3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v674, v691), v194.f64[0] - v185), (float64x2_t)vzip2q_s64(v674, v691), v194.f64[1] - v657), _Q4, v198);
              _V5.D[1] = v670.i64[1];
              __asm
              {
                FMLA            D4, D2, V5.D[1]
                FMLA            D6, D2, V18.D[1]
                FMLA            D1, D2, V16.D[1]
              }
              _D1 = _D1 + v198 * v696;
              __asm { FMLA            D2, D1, V3.D[1] }
              *(_DWORD *)v192 = -1;
              *(_BYTE *)(v192 + 4) = 1;
              *(_DWORD *)(v192 + 8) = 0;
              *(_DWORD *)(v192 + 16) = 0;
              *(_BYTE *)(v192 + 20) = 1;
              *(_WORD *)(v192 + 21) = *(_WORD *)__p;
              *(_BYTE *)(v192 + 23) = __p[2];
              *(_QWORD *)(v192 + 24) = v97;
              *(double *)(v192 + 32) = sqrt(_D2 + (_Q4.f64[0] + v198 * v187) * (_Q4.f64[0] + v187 * v198));
              *(_DWORD *)v745 = 0;
              *(_QWORD *)&v745[8] = v192;
              sub_20F397EF8(v800, v191, (uint64_t)v745);
              v208 = (char *)*((_QWORD *)&v808 + 1);
              if (*((_QWORD *)&v808 + 1) >= v809)
              {
                v358 = (_BYTE *)v808;
                v359 = *((_QWORD *)&v808 + 1) - v808;
                v360 = (uint64_t)(*((_QWORD *)&v808 + 1) - v808) >> 2;
                v361 = v360 + 1;
                if ((unint64_t)(v360 + 1) >> 62)
                  sub_20E867F44();
                v362 = v809 - v808;
                if ((uint64_t)(v809 - v808) >> 1 > v361)
                  v361 = v362 >> 1;
                if ((unint64_t)v362 >= 0x7FFFFFFFFFFFFFFCLL)
                  v363 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v363 = v361;
                if (v363)
                {
                  if (v363 >> 62)
                    sub_20E877A38();
                  v364 = (char *)operator new(4 * v363);
                }
                else
                {
                  v364 = 0;
                }
                v365 = &v364[4 * v360];
                *(_DWORD *)v365 = 0;
                v209 = v365 + 4;
                if (v208 != v358)
                {
                  v366 = v208 - v358 - 4;
                  if (v366 < 0x2C)
                    goto LABEL_1104;
                  if ((unint64_t)(v208 - v364 - v359) < 0x20)
                    goto LABEL_1104;
                  v367 = (v366 >> 2) + 1;
                  v368 = 4 * (v367 & 0x7FFFFFFFFFFFFFF8);
                  v369 = &v208[-v368];
                  v365 -= v368;
                  v370 = &v364[4 * v360 - 16];
                  v371 = v208 - 16;
                  v372 = v367 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v373 = *(_OWORD *)v371;
                    *((_OWORD *)v370 - 1) = *((_OWORD *)v371 - 1);
                    *(_OWORD *)v370 = v373;
                    v370 -= 32;
                    v371 -= 32;
                    v372 -= 8;
                  }
                  while (v372);
                  v208 = v369;
                  if (v367 != (v367 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_1104:
                    do
                    {
                      v374 = *((_DWORD *)v208 - 1);
                      v208 -= 4;
                      *((_DWORD *)v365 - 1) = v374;
                      v365 -= 4;
                    }
                    while (v208 != v358);
                  }
                }
                *(_QWORD *)&v808 = v365;
                *((_QWORD *)&v808 + 1) = v209;
                v809 = (unint64_t)&v364[4 * v363];
                if (v358)
                  operator delete(v358);
              }
              else
              {
                **((_DWORD **)&v808 + 1) = 0;
                v209 = v208 + 4;
              }
              *((_QWORD *)&v808 + 1) = v209;
              BYTE2(v804) = 0;
              LOBYTE(v804) = 0;
              v812[2] = 0;
              LOBYTE(v812[3]) = 0;
            }
          }
LABEL_611:
          if (*(_BYTE *)(v94 + 528))
            v375 = v94 + 40;
          else
            v375 = 0;
          v376 = *(_QWORD *)(v375 + 32);
          v377 = *(_DWORD *)(v375 + 40);
          v378 = *(_DWORD *)(v375 + 48);
          v379 = v681;
          v380 = *v681;
          if (!*v681)
            goto LABEL_627;
          do
          {
            v381 = *(_DWORD *)(v380 + 32);
            v382 = v381 >= v378;
            if (v381 >= v378)
              v383 = (uint64_t *)v380;
            else
              v383 = (uint64_t *)(v380 + 8);
            if (v382)
              v379 = (_QWORD *)v380;
            v380 = *v383;
          }
          while (*v383);
          if (v379 == v681)
          {
LABEL_627:
            v672 = 0;
            v386 = v680;
            v387 = (uint64_t *)*v680;
            if (!*v680)
              goto LABEL_639;
          }
          else
          {
            v384 = *((_DWORD *)v379 + 8);
            v385 = v379 + 5;
            if (v384 > v378)
              v385 = 0;
            v672 = v385;
            v386 = v680;
            v387 = (uint64_t *)*v680;
            if (!*v680)
            {
LABEL_639:
              v669 = 0;
              v390 = *(_QWORD *)(v94 + 536);
              v391 = *(_QWORD *)(v94 + 544);
              if (v390 != v391)
                goto LABEL_640;
LABEL_812:
              __p[8] = 0;
              *(_OWORD *)&__p[16] = xmmword_21039D460;
              *(_QWORD *)&__p[32] = 0x3EB0C6F7A0B5ED8DLL;
              LOBYTE(v777) = 0;
              *((_QWORD *)&v777 + 1) = 0x3FF7B8BAC710CB29;
              v786 = &v778;
              v787 = xmmword_210378040;
              v788 = 0;
              v790 = 0;
              v792 = 0;
              v794 = 0;
              v796 = 0;
              *(_DWORD *)__p = 1;
              *(_DWORD *)&__p[4] = DWORD2(v699);
              *(_QWORD *)v745 = off_24C9FCF80;
              sub_20F2C2630((uint64_t)&v745[8], (__int128 *)__p);
              v768 = 0;
              v769 = 0;
              v770 = 0;
              v767 = -1.0;
              *(_QWORD *)v745 = &off_24C9FCEF0;
              v771 = xmmword_2103AB100;
              v772 = 1;
              v773 = 0x3FF0000000000000;
              __asm { FMOV            V0.2D, #2.0 }
              v774 = _Q0;
              v775 = xmmword_210315720;
              kdebug_trace();
              kdebug_trace();
              (*(void (**)(char *@<X8>))(*(_QWORD *)v745 + 16))((char *)v742);
              (**(void (***)(std::string *@<X8>))v797)(&v716);
              if (SBYTE7(v743) < 0)
              {
                sub_20E860C04(v717, v742[0].__locale_, (unint64_t)v742[1].__locale_);
              }
              else
              {
                *(_OWORD *)v717 = *(_OWORD *)&v742[0].__locale_;
                v718 = v743;
              }
              v512 = HIBYTE(v716.__r_.__value_.__r.__words[2]);
              if (SHIBYTE(v716.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_20E860C04(&v719, v716.__r_.__value_.__l.__data_, v716.__r_.__value_.__l.__size_);
                v512 = HIBYTE(v716.__r_.__value_.__r.__words[2]);
              }
              else
              {
                v719 = v716;
              }
              v720 = 0;
              v721 = 0;
              __asm { FMOV            V0.2D, #-1.0 }
              v722 = _Q0;
              v724 = (__int128 *)v723;
              v725 = xmmword_210378040;
              __src = v726;
              v728 = 64;
              v729 = 0;
              v730 = 0;
              v732 = v731;
              v733 = 64;
              v735 = 0;
              v736 = 0;
              v734 = 0;
              v738 = v737;
              v739 = xmmword_210378040;
              if (v512 < 0)
              {
                operator delete(v716.__r_.__value_.__l.__data_);
                if ((SBYTE7(v743) & 0x80000000) == 0)
                  goto LABEL_820;
              }
              else if ((SBYTE7(v743) & 0x80000000) == 0)
              {
                goto LABEL_820;
              }
              operator delete(v742[0].__locale_);
LABEL_820:
              sub_20F2C3BE8(v717, 1uLL, 1uLL);
              v716.__r_.__value_.__r.__words[0] = (std::string::size_type)v797;
              v716.__r_.__value_.__l.__size_ = (std::string::size_type)v717;
              (*(void (**)(uint64_t))(*(_QWORD *)v797 + 40))((uint64_t)v797);
              v515 = v514;
              v516 = v814;
              if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v745 + 24))())
              {
                v814 = 1;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v745 + 40))((uint64_t)v745))
                  (*(void (**)(double *, double))(*(_QWORD *)v745 + 48))((double *)v745, 0.0);
                else
                  (*(void (**)(uint64_t))(*(_QWORD *)v745 + 56))((uint64_t)v745);
                v517 = (*(double (**)(uint64_t))(*(_QWORD *)v745 + 32))((uint64_t)v745);
                (*(void (**)(uint64_t, double))(*(_QWORD *)v797 + 104))((uint64_t)v797, v517);
              }
              kdebug_trace();
              if (!(_BYTE)v747)
              {
LABEL_838:
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v797 + 8))((uint64_t)v797))
                {
                  if (v745[16])
                  {
                    v522 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
                    std::ios_base::getloc((const std::ios_base *)((char *)v522 + *(_QWORD *)(*v522 - 24)));
                    v523 = std::locale::use_facet(v742, MEMORY[0x24BEDB350]);
                    ((void (*)(const std::locale::facet *, uint64_t))v523->__vftable[2].~facet_0)(v523, 10);
                    std::locale::~locale(v742);
                    std::ostream::put();
                    std::ostream::flush();
                  }
                  v721 = 0;
                  v814 = v516;
                  sub_20F398FB8((uint64_t)v797, v731, &v730);
                  sub_20F399184((uint64_t)v797, v737, &v735, &v736);
                  goto LABEL_975;
                }
                sub_20F398FB8((uint64_t)v797, v731, &v730);
                sub_20F399184((uint64_t)v797, v737, &v735, &v736);
                *(_QWORD *)&v722 = sub_20F398460((uint64_t)v797, v723);
                *((_QWORD *)&v722 + 1) = v722;
                v767 = *(double *)&v722;
                v524 = v724;
                v525 = *((_QWORD *)&v725 + 1);
                v526 = 8 * *((_QWORD *)&v725 + 1);
                v729 = 0;
                v527 = *((_QWORD *)&v725 + 1) & 0x1FFFFFFFFFFFFFFFLL;
                if ((*((_QWORD *)&v725 + 1) & 0x1FFFFFFFFFFFFFFFuLL) <= v728)
                {
                  if (!*((_QWORD *)&v725 + 1))
                    goto LABEL_861;
                  v528 = __src;
                }
                else
                {
                  if (2 * v728 > v527)
                    v527 = 2 * v728;
                  v728 = v527;
                  v528 = (_OWORD *)operator new[]();
                  if (__src != v726 && __src)
                    MEMORY[0x212BC6368]();
                  __src = v528;
                  v529 = v729;
                  if (v729)
                  {
                    v729 += v525;
                    memmove((char *)v528 + 8 * v525, v528, 8 * v529);
                    memcpy(v528, v524, v526);
LABEL_861:
                    kdebug_trace();
                    if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v745 + 24))())
                    {
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v745 + 40))((uint64_t)v745))
                      {
                        v539 = (*(double (**)(uint64_t))(*(_QWORD *)v797 + 96))((uint64_t)v797);
                        (*(void (**)(double *, double))(*(_QWORD *)v745 + 48))((double *)v745, v539);
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v745 + 56))((uint64_t)v745);
                      }
                      v540 = (*(double (**)(uint64_t))(*(_QWORD *)v745 + 32))((uint64_t)v745);
                      (*(void (**)(uint64_t, double))(*(_QWORD *)v797 + 104))((uint64_t)v797, v540);
                    }
                    if (v817)
                    {
                      v541 = fabs(*(double *)v816);
                      if (v817 != 1)
                      {
                        v542 = (double *)(v816 + 8);
                        v543 = 8 * v817 - 8;
                        do
                        {
                          v544 = *v542++;
                          v545 = fabs(v544);
                          if (v541 < v545)
                            v541 = v545;
                          v543 -= 8;
                        }
                        while (v543);
                      }
                      if (v541 < v541 * *(double *)&v745[24])
                      {
LABEL_873:
                        if (v745[16])
                        {
                          v546 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
                          std::ios_base::getloc((const std::ios_base *)((char *)v546 + *(_QWORD *)(*v546 - 24)));
                          v547 = std::locale::use_facet(v742, MEMORY[0x24BEDB350]);
                          ((void (*)(const std::locale::facet *, uint64_t))v547->__vftable[2].~facet_0)(v547, 10);
                          std::locale::~locale(v742);
                          std::ostream::put();
                          std::ostream::flush();
                          sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
                          v548 = (_QWORD *)std::ostream::operator<<();
                          sub_20E86A980(v548, (uint64_t)"][", 2);
                          if (v541 == 0.0)
                            sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
                          else
                            std::ostream::operator<<();
                          sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
                          v587 = (_QWORD *)std::ostream::operator<<();
                          v588 = sub_20E86A980(v587, (uint64_t)"]", 1);
                          std::ios_base::getloc((const std::ios_base *)((char *)v588 + *(_QWORD *)(*v588 - 24)));
                          v589 = std::locale::use_facet(v742, MEMORY[0x24BEDB350]);
                          ((void (*)(const std::locale::facet *, uint64_t))v589->__vftable[2].~facet_0)(v589, 10);
                          std::locale::~locale(v742);
                          std::ostream::put();
                          std::ostream::flush();
                        }
                        v721 = 1;
                        goto LABEL_974;
                      }
                    }
                    else
                    {
                      v541 = 1.0;
                      if (1.0 * *(double *)&v745[24] > 1.0)
                        goto LABEL_873;
                    }
                    v549 = v767;
                    kdebug_trace();
                    v550 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v797 + 24))((uint64_t)v797);
                    if (v762)
                      (*(void (**)(_BYTE *))(*(_QWORD *)v762 + 48))(v762);
                    v551 = v720;
                    if (v720 >= *(_DWORD *)&v745[12])
                    {
LABEL_972:
                      *((double *)&v722 + 1) = v767;
                      v592 = v760;
                      if (v760)
LABEL_973:
                        (*(void (**)(_BYTE *))(*(_QWORD *)v592 + 48))(v592);
LABEL_974:
                      v814 = v516;
LABEL_975:
                      kdebug_trace();
                      *((_QWORD *)&v739 + 1) = 0;
                      if (v738 != v737 && v738)
                        MEMORY[0x212BC6368]();
                      v734 = 0;
                      if (v732 != v731 && v732)
                        MEMORY[0x212BC6368]();
                      v729 = 0;
                      if (__src != v726 && __src)
                        MEMORY[0x212BC6368]();
                      *((_QWORD *)&v725 + 1) = 0;
                      if (v724 != (__int128 *)v723 && v724)
                        MEMORY[0x212BC6368]();
                      if (SHIBYTE(v719.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v719.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v718) & 0x80000000) == 0)
                        {
LABEL_989:
                          v600 = v800[1];
                          v599 = v800[0];
                          if (v800[1] == v800[0])
                            goto LABEL_994;
LABEL_993:
                          v601 = v599;
                          if (!*(_DWORD *)v599)
                          {
LABEL_995:
                            v602 = *(double *)(*((_QWORD *)v601 + 1) + 32);
                            if (v600 != v599 && v602 >= 0.0)
                            {
                              do
                              {
                                v605 = *((_QWORD *)v599 + 1);
                                if (*(_BYTE *)(v605 + 20))
                                {
                                  v606 = *(_QWORD *)(v605 + 24);
                                  if ((!v606
                                     || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v606 + 24))(v606) & 1) == 0)
                                    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 90, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                                  {
                                    goto LABEL_1087;
                                  }
                                  v609 = *(_QWORD *)(v605 + 24);
                                  v610 = *(uint64_t **)(v609 + 96);
                                  v607.f64[0] = *(float64_t *)(v605 + 32);
                                  v611 = *v610;
                                  v612 = (float64x2_t *)v610[2];
                                  v613 = v610[4];
                                  v614 = (float64x2_t *)v610[6];
                                  v608.f64[0] = *(float64_t *)(v609 + 80);
                                  _Q2 = *(float64x2_t *)(v609 + 64);
                                  *(_QWORD *)&v616 = *(_OWORD *)&vmulq_f64(v607, v608);
                                  _Q0 = vmulq_n_f64(_Q2, v607.f64[0]);
                                  _D4 = *(_QWORD *)(v613 + 40);
                                  v619 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v613, _Q0.f64[0]), *(float64x2_t *)(v613 + 24), _Q0, 1), *(float64x2_t *)(v613 + 48), v616);
                                  __asm { FMLA            D2, D4, V0.D[1] }
                                  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v613 + 64), v616);
                                  _Q0.f64[0] = v614[1].f64[0];
                                  v620 = vaddq_f64(_Q2, _Q0);
                                  _Q1 = vaddq_f64(v619, *v614);
                                  _D4 = *(_QWORD *)(v611 + 40);
                                  v623 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)v611, _Q1.f64[0]), *(float64x2_t *)(v611 + 24), _Q1, 1), *(float64x2_t *)(v611 + 48), v620.f64[0]);
                                  __asm { FMLA            D2, D4, V1.D[1] }
                                  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], *(double *)(v611 + 64), v620.f64[0]);
                                  v620.f64[0] = v612[1].f64[0];
                                  *(float64x2_t *)(v609 + 8) = vaddq_f64(v623, *v612);
                                  *(_QWORD *)(v609 + 24) = *(_OWORD *)&vaddq_f64(_Q2, v620);
                                  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v605 + 24) + 16))(*(_QWORD *)(v605 + 24)) & 1) == 0
                                    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 117, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                                  {
LABEL_1087:
                                    abort();
                                  }
                                }
                                v599 += 16;
                              }
                              while (v599 != v600);
                            }
                            *(_QWORD *)v745 = off_24C9FCF80;
                            if (v768)
                              MEMORY[0x212BC6368](v768, 0x1000C8000313F17);
                            v603 = v766;
                            if (v766 == v765)
                            {
                              v603 = v765;
                              v604 = 4;
                            }
                            else
                            {
                              if (!v766)
                                goto LABEL_1012;
                              v604 = 5;
                            }
                            (*(void (**)(void))(*v603 + 8 * v604))();
LABEL_1012:
                            v624 = v764;
                            if (v764 == v763)
                            {
                              v624 = v763;
                              v625 = 4;
                            }
                            else
                            {
                              if (!v764)
                                goto LABEL_1017;
                              v625 = 5;
                            }
                            (*(void (**)(void))(*v624 + 8 * v625))();
LABEL_1017:
                            v626 = v762;
                            if (v762 == v761)
                            {
                              v626 = v761;
                              v627 = 4;
                            }
                            else
                            {
                              if (!v762)
                                goto LABEL_1022;
                              v627 = 5;
                            }
                            (*(void (**)(void))(*v626 + 8 * v627))();
LABEL_1022:
                            v628 = v760;
                            if (v760 == v759)
                            {
                              v628 = v759;
                              v629 = 4;
                            }
                            else
                            {
                              if (!v760)
                              {
LABEL_1027:
                                v757 = 0;
                                if (v756 != (std::locale::__imp *)&v748 && v756)
                                  MEMORY[0x212BC6368]();
                                v630 = v796;
                                if (v796 == v795)
                                {
                                  v630 = v795;
                                  v631 = 4;
                                }
                                else
                                {
                                  if (!v796)
                                    goto LABEL_1035;
                                  v631 = 5;
                                }
                                (*(void (**)(void))(*v630 + 8 * v631))();
LABEL_1035:
                                v632 = v794;
                                if (v794 == v793)
                                {
                                  v632 = v793;
                                  v633 = 4;
                                }
                                else
                                {
                                  if (!v794)
                                    goto LABEL_1040;
                                  v633 = 5;
                                }
                                (*(void (**)(void))(*v632 + 8 * v633))();
LABEL_1040:
                                v634 = v792;
                                if (v792 == v791)
                                {
                                  v634 = v791;
                                  v635 = 4;
                                }
                                else
                                {
                                  if (!v792)
                                    goto LABEL_1045;
                                  v635 = 5;
                                }
                                (*(void (**)(void))(*v634 + 8 * v635))();
LABEL_1045:
                                v636 = v790;
                                if (v790 == v789)
                                {
                                  v636 = v789;
                                  v637 = 4;
                                }
                                else
                                {
                                  if (!v790)
                                  {
LABEL_1050:
                                    *((_QWORD *)&v787 + 1) = 0;
                                    if (v786 != &v778 && v786)
                                      MEMORY[0x212BC6368]();
                                    *(_QWORD *)v797 = off_24C9FE598;
                                    if (v855)
                                      MEMORY[0x212BC6368](v855, 0x1000C8000313F17);
                                    sub_20F38F5B0(v797);
                                    if (v602 < 0.0)
                                      goto LABEL_1056;
                                    goto LABEL_356;
                                  }
                                  v637 = 5;
                                }
                                (*(void (**)(void))(*v636 + 8 * v637))();
                                goto LABEL_1050;
                              }
                              v629 = 5;
                            }
                            (*(void (**)(void))(*v628 + 8 * v629))();
                            goto LABEL_1027;
                          }
LABEL_994:
                          v601 = v600;
                          goto LABEL_995;
                        }
                      }
                      else if ((SHIBYTE(v718) & 0x80000000) == 0)
                      {
                        goto LABEL_989;
                      }
                      operator delete(v717[0]);
                      v600 = v800[1];
                      v599 = v800[0];
                      if (v800[1] == v800[0])
                        goto LABEL_994;
                      goto LABEL_993;
                    }
                    v552 = v541;
                    while (1)
                    {
                      v553 = v551 + 1;
                      LODWORD(v720) = v551 + 1;
                      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v797 + 16))((uint64_t)v797, (void **)v550))
                      {
                        if (v745[16])
                        {
                          v590 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
                          std::ios_base::getloc((const std::ios_base *)((char *)v590 + *(_QWORD *)(*v590 - 24)));
                          v591 = std::locale::use_facet(v742, MEMORY[0x24BEDB350]);
                          ((void (*)(const std::locale::facet *, uint64_t))v591->__vftable[2].~facet_0)(v591, 10);
                          std::locale::~locale(v742);
                          std::ostream::put();
                          std::ostream::flush();
                        }
                        v721 = 0;
                        *((double *)&v722 + 1) = v767;
                        v592 = v760;
                        if (v760)
                          goto LABEL_973;
                        goto LABEL_974;
                      }
                      ++HIDWORD(v720);
                      v554 = *(unsigned int *)(v550 + 16);
                      if ((_DWORD)v554)
                      {
                        v555 = *(char **)v550;
                        v556 = **(double **)v550 * **(double **)v550;
                        if ((_DWORD)v554 != 1)
                        {
                          v557 = (double *)(v555 + 8);
                          v558 = (v554 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
                          if (v558 < 3)
                            goto LABEL_889;
                          v559 = v558 + 1;
                          v557 += v559 & 0x3FFFFFFFFFFFFFFCLL;
                          v560 = (float64x2_t *)(v555 + 24);
                          v561 = v559 & 0x3FFFFFFFFFFFFFFCLL;
                          do
                          {
                            v562 = vmulq_f64(v560[-1], v560[-1]);
                            v563 = vmulq_f64(*v560, *v560);
                            v556 = v556 + v562.f64[0] + v562.f64[1] + v563.f64[0] + v563.f64[1];
                            v560 += 2;
                            v561 -= 4;
                          }
                          while (v561);
                          if (v559 != (v559 & 0x3FFFFFFFFFFFFFFCLL))
                          {
LABEL_889:
                            v564 = (double *)&v555[8 * v554];
                            do
                            {
                              v565 = *v557++;
                              v556 = v556 + v565 * v565;
                            }
                            while (v557 != v564);
                          }
                        }
                        v566 = sqrt(v556);
                        if (v551 < *(_DWORD *)&v745[8])
                          goto LABEL_899;
                      }
                      else
                      {
                        v566 = sqrt(0.0);
                        if (v551 < *(_DWORD *)&v745[8])
                          goto LABEL_899;
                      }
                      if (v766)
                      {
                        LODWORD(v742[0].__locale_) = *(_DWORD *)(v550 + 16);
                        v742[1] = *(std::locale *)v550;
                        LODWORD(v743) = 0;
                        *(double *)&v741 = v566;
                        if (((*(uint64_t (**)(_BYTE *, __int128 *, std::locale *))(*(_QWORD *)v766 + 48))(v766, &v741, v742) & 1) != 0)goto LABEL_1073;
                      }
                      else if ((_DWORD)v554 && v566 < *(double *)&v746 * (v515 + *(double *)&v746))
                      {
LABEL_1073:
                        if (v745[16])
                        {
                          v646 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
                          std::ios_base::getloc((const std::ios_base *)((char *)v646 + *(_QWORD *)(*v646 - 24)));
                          v647 = std::locale::use_facet(v742, MEMORY[0x24BEDB350]);
                          ((void (*)(const std::locale::facet *, uint64_t))v647->__vftable[2].~facet_0)(v647, 10);
                          std::locale::~locale(v742);
                          std::ostream::put();
                          std::ostream::flush();
                          (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)v745 + 64))((uint64_t)v745, v549, v566, v552, v541);
                        }
                        v721 = 2;
                        *((double *)&v722 + 1) = v767;
                        v592 = v760;
                        if (v760)
                          goto LABEL_973;
                        goto LABEL_974;
                      }
LABEL_899:
                      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v797 + 48))((uint64_t)v797, (uint64_t *)v550);
                      if (v764)
                        (*(void (**)(_BYTE *))(*(_QWORD *)v764 + 48))(v764);
                      if (v729)
                        memcpy(&__dst, __src, 8 * v729);
                      v549 = sub_20F398460((uint64_t)v797, v726);
                      if (!v817)
                      {
                        v552 = 1.0;
                        if (!v745[16])
                          goto LABEL_913;
LABEL_912:
                        (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)v745 + 64))((uint64_t)v745, v549, v566, v552, v541);
                        goto LABEL_913;
                      }
                      v552 = fabs(*(double *)v816);
                      if (v817 != 1)
                      {
                        v567 = (double *)(v816 + 8);
                        v568 = 8 * v817 - 8;
                        do
                        {
                          v569 = *v567++;
                          v570 = fabs(v569);
                          if (v552 < v570)
                            v552 = v570;
                          v568 -= 8;
                        }
                        while (v568);
                      }
                      if (v745[16])
                        goto LABEL_912;
LABEL_913:
                      if (v549 == 0.0)
                      {
                        if (v745[16])
                        {
                          v593 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
                          v594 = sub_20E86A980(v593, (uint64_t)"N.A.", 4);
                          std::ios_base::getloc((const std::ios_base *)((char *)v594 + *(_QWORD *)(*v594 - 24)));
                          v595 = std::locale::use_facet(v742, MEMORY[0x24BEDB350]);
                          ((void (*)(const std::locale::facet *, uint64_t))v595->__vftable[2].~facet_0)(v595, 10);
                          std::locale::~locale(v742);
                          std::ostream::put();
                          goto LABEL_969;
                        }
LABEL_970:
                        v767 = v549;
                        v598 = 3;
LABEL_971:
                        v721 = v598;
                        goto LABEL_972;
                      }
                      if (vabdd_f64(v549, v767) < v549 * *((double *)&v746 + 1) && v551 >= *(_DWORD *)&v745[8])
                      {
                        if (v745[16])
                        {
                          sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
                          v596 = (_QWORD *)std::ostream::operator<<();
                          std::ios_base::getloc((const std::ios_base *)((char *)v596 + *(_QWORD *)(*v596 - 24)));
                          v597 = std::locale::use_facet(v742, MEMORY[0x24BEDB350]);
                          ((void (*)(const std::locale::facet *, uint64_t))v597->__vftable[2].~facet_0)(v597, 10);
                          std::locale::~locale(v742);
                          std::ostream::put();
LABEL_969:
                          std::ostream::flush();
                        }
                        goto LABEL_970;
                      }
                      if (DWORD2(v815))
                      {
                        (*(void (**)(uint64_t, void **))(*(_QWORD *)v797 + 160))((uint64_t)v797, &v768);
                        v572 = (*(BOOL (**)(uint64_t, uint64_t, double **, double **, double))(*(_QWORD *)v745 + 80))((uint64_t)v745, v550, (double **)&v816, (double **)&v768, v549);
                      }
                      else
                      {
                        v572 = (*(BOOL (**)(uint64_t, uint64_t, double **, double))(*(_QWORD *)v745 + 72))((uint64_t)v745, v550, (double **)&v816, v549);
                      }
                      if (!v572)
                      {
                        --HIDWORD(v720);
                        v581 = v800[1];
                        for (i = v800[0]; i != v581; i += 16)
                        {
                          v582 = *((_QWORD *)i + 1);
                          if (*(_BYTE *)(v582 + 20))
                            *(_QWORD *)(v582 + 32) = *(_QWORD *)(v582 + 40);
                        }
                        BYTE1(v812[3]) = 0;
                        LOBYTE(v812[2]) = 0;
                        *(_WORD *)((char *)&v812[2] + 3) = 0;
                        BYTE1(v812[2]) = BYTE2(v812[2]);
                        v729 = 0;
                        if (v728)
                        {
                          v583 = __src;
                          v584 = __dst;
                          goto LABEL_943;
                        }
                        v728 = 1;
                        v583 = (_QWORD *)operator new[]();
                        if (__src != v726 && __src)
                          MEMORY[0x212BC6368]();
                        __src = v583;
                        v584 = __dst;
                        if (v729)
                        {
                          ++v729;
                          *v583 = __dst;
                        }
                        else
                        {
LABEL_943:
                          *v583 = v584;
                          v729 = 1;
                        }
                        if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v745 + 24))())
                        {
                          v585 = (*(double (**)(uint64_t))(*(_QWORD *)v745 + 32))((uint64_t)v745);
                          (*(void (**)(uint64_t, double))(*(_QWORD *)v797 + 104))((uint64_t)v797, v585);
                        }
                        goto LABEL_955;
                      }
                      if ((*(unsigned int (__cdecl **)())(*(_QWORD *)v745 + 24))())
                      {
                        v574 = (*(double (**)(uint64_t))(*(_QWORD *)v745 + 32))((uint64_t)v745);
                        (*(void (**)(uint64_t, double))(*(_QWORD *)v797 + 104))((uint64_t)v797, v574);
                      }
                      v575 = v541 * *(double *)&v745[24];
                      if (v552 < v541 * *(double *)&v745[24] && v551 >= *(_DWORD *)&v745[8])
                      {
                        if (v745[16])
                        {
                          v645 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
                          sub_20E8C81A0(v645);
                          (*(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)v745 + 64))((uint64_t)v745, v549, v566, v552, v541);
                        }
                        v598 = 1;
                        goto LABEL_971;
                      }
                      if (v553 < *(_DWORD *)&v745[12] && (_BYTE)v747)
                      {
                        if (v758)
                        {
                          if (v757)
                            v577 = (double *)v756;
                          else
                            v577 = (double *)&v747 + 1;
LABEL_934:
                          sub_20F3987AC((uint64_t)v797, (double *)v742, v577, v575, v573);
                          v578 = *(double *)&v742[0].__locale_;
                          if (*(double *)&v742[0].__locale_ > 0.0)
                            goto LABEL_935;
LABEL_953:
                          v579 = 1.0e20;
                          v578 = 1.0e-10;
                        }
                        else
                        {
                          v577 = (double *)&v747 + 1;
                          if (!v757)
                            goto LABEL_934;
                          v742[0].__locale_ = v756;
                          LODWORD(v742[1].__locale_) = 0;
                          sub_20F398DAC((uint64_t)v797, (double *)&v741, (double **)v742, v575, v573);
                          v578 = *(double *)&v741;
                          if (*(double *)&v741 <= 0.0)
                            goto LABEL_953;
LABEL_935:
                          v579 = 1.0 / (v578 * v578);
                        }
                        *(double *)&v797[8] = v578;
                        *(double *)&v797[16] = v579;
                        BYTE1(v812[3]) = 0;
                        v812[2] = 0;
                        v767 = sub_20F398460((uint64_t)v797, v726);
                      }
LABEL_955:
                      v586 = *(_DWORD *)&v745[12];
                      if (v553 < *(_DWORD *)&v745[12] && v760)
                      {
                        (*(void (**)(_BYTE *))(*(_QWORD *)v760 + 48))(v760);
                        v586 = *(_DWORD *)&v745[12];
                      }
                      v551 = v720;
                      if (v720 >= v586)
                        goto LABEL_972;
                    }
                  }
                }
                v530 = 0;
                v531 = (v525 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                if (v531 < 3)
                {
                  v532 = (uint64_t *)v524;
                }
                else
                {
                  v532 = (uint64_t *)v524;
                  if ((unint64_t)((char *)v528 - (char *)v524) >= 0x20)
                  {
                    v533 = v531 + 1;
                    v530 = v533 & 0x3FFFFFFFFFFFFFFCLL;
                    v532 = (uint64_t *)v524 + (v533 & 0x3FFFFFFFFFFFFFFCLL);
                    v534 = v528 + 1;
                    v535 = v524 + 1;
                    v536 = v533 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v537 = *v535;
                      *(v534 - 1) = *(v535 - 1);
                      *v534 = v537;
                      v534 += 2;
                      v535 += 2;
                      v536 -= 4;
                    }
                    while (v536);
                    if (v533 == v530)
                      goto LABEL_860;
                  }
                }
                do
                {
                  v538 = *v532++;
                  *((_QWORD *)v528 + v530++) = v538;
                }
                while (v532 != (uint64_t *)((char *)v524 + v526));
LABEL_860:
                v729 = v530;
                goto LABEL_861;
              }
              if (v758)
              {
                if (v757)
                {
                  sub_20F3987AC((uint64_t)v797, (double *)v742, (double *)v756, v518, v519);
                  v520 = *(double *)&v742[0].__locale_;
                  if (*(double *)&v742[0].__locale_ <= 0.0)
                  {
                    v521 = 1.0e20;
                    v520 = 1.0e-10;
LABEL_837:
                    *(double *)&v797[8] = v520;
                    *(double *)&v797[16] = v521;
                    BYTE1(v812[3]) = 0;
                    v812[2] = 0;
                    goto LABEL_838;
                  }
LABEL_836:
                  v521 = 1.0 / (v520 * v520);
                  goto LABEL_837;
                }
              }
              else if (v757)
              {
                v742[0].__locale_ = v756;
                LODWORD(v742[1].__locale_) = 0;
                sub_20F398DAC((uint64_t)v797, (double *)&v741, (double **)v742, v518, v519);
                v520 = *(double *)&v741;
                if (*(double *)&v741 > 0.0)
                  goto LABEL_836;
LABEL_834:
                v521 = 1.0e20;
                v520 = 1.0e-10;
                goto LABEL_837;
              }
              sub_20F3987AC((uint64_t)v797, (double *)v742, (double *)&v747 + 1, v518, v519);
              v520 = *(double *)&v742[0].__locale_;
              if (*(double *)&v742[0].__locale_ > 0.0)
                goto LABEL_836;
              goto LABEL_834;
            }
          }
          do
          {
            v388 = v387[4];
            if (v388 < v376)
            {
              ++v387;
            }
            else if (v388 == v376)
            {
              if (*((_DWORD *)v387 + 10) < v377)
                ++v387;
              else
                v386 = v387;
            }
            else
            {
              v386 = v387;
            }
            v387 = (uint64_t *)*v387;
          }
          while (v387);
          if (v386 == v680)
            goto LABEL_639;
          v389 = v386[4];
          if (v376 < v389 || v376 == v389 && *((_DWORD *)v386 + 10) > v377)
            goto LABEL_639;
          v669 = v386[6];
          v390 = *(_QWORD *)(v94 + 536);
          v391 = *(_QWORD *)(v94 + 544);
          if (v390 == v391)
            goto LABEL_812;
LABEL_640:
          v392 = 0;
          v662 = v376;
          v693 = v377;
          v688 = v378;
          v676 = v391;
          while (1)
          {
            v393 = *(_QWORD *)(v390 + 16);
            *(_OWORD *)&v716.__r_.__value_.__l.__data_ = *(_OWORD *)v390;
            v716.__r_.__value_.__r.__words[2] = v393;
            v394 = v378 == (_DWORD)v393 && v376 == v716.__r_.__value_.__r.__words[0];
            if (!v394 || LODWORD(v716.__r_.__value_.__r.__words[1]) != v377)
              break;
LABEL_642:
            v390 += 32;
            if (v390 == v391)
              goto LABEL_812;
          }
          v396 = *v681;
          if (*v681)
          {
            v397 = v681;
            v398 = v680;
            do
            {
              v399 = *(_DWORD *)(v396 + 32);
              v400 = v399 >= v393;
              if (v399 >= v393)
                v401 = (uint64_t *)v396;
              else
                v401 = (uint64_t *)(v396 + 8);
              if (v400)
                v397 = (_QWORD *)v396;
              v396 = *v401;
            }
            while (*v401);
            if (v397 == v681)
            {
              v404 = 0;
            }
            else
            {
              v402 = *((_DWORD *)v397 + 8);
              v403 = v397 + 5;
              if (v402 <= v393)
                v404 = v403;
              else
                v404 = 0;
            }
          }
          else
          {
            v404 = 0;
            v398 = v680;
          }
          v405 = sub_20E9DF85C(v678, (uint64_t *)&v716);
          if (v405)
          {
            v406 = v405[13];
            v407 = (uint64_t *)*v398;
            if (!*v398)
              goto LABEL_680;
          }
          else
          {
            v406 = 0;
            v407 = (uint64_t *)*v398;
            if (!*v398)
              goto LABEL_680;
          }
          v408 = v398;
          do
          {
            v409 = v407[4];
            if (v409 < v716.__r_.__value_.__r.__words[0])
            {
              ++v407;
            }
            else if (v409 == v716.__r_.__value_.__r.__words[0])
            {
              if (*((_DWORD *)v407 + 10) < LODWORD(v716.__r_.__value_.__r.__words[1]))
                ++v407;
              else
                v408 = v407;
            }
            else
            {
              v408 = v407;
            }
            v407 = (uint64_t *)*v407;
          }
          while (v407);
          if (v408 != v398)
          {
            v410 = v408[4];
            if (v716.__r_.__value_.__r.__words[0] >= v410
              && (v716.__r_.__value_.__r.__words[0] != v410
               || *((_DWORD *)v408 + 10) <= LODWORD(v716.__r_.__value_.__r.__words[1])))
            {
              v411 = v408[6];
LABEL_681:
              v412 = *(float32x2_t **)(v390 + 24);
              v413 = v412[1];
              v414 = v412[4].f32[0];
              v415 = (std::__shared_weak_count *)operator new(0x30uLL);
              v416 = v415;
              v415->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v415->__shared_owners_;
              v415->__shared_weak_owners_ = 0;
              v415->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FCE10;
              v415[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C9FCE60;
              v418 = (float)(v414 * v414);
              if (v418 < 1.0e-15)
                v419 = NAN;
              else
                v419 = 1.0 / sqrt(v418);
              v420 = (__n128)vcvtq_f64_f32(v413);
              *(double *)&v415[1].__shared_weak_owners_ = v419;
              LOBYTE(v415[1].__shared_owners_) = v418 >= 1.0e-15;
              v698 = v392 + 1;
              v421 = v392;
              v709 = v415 + 1;
              v710 = v415;
              v708 = 0;
              v707 = 0;
              v711 = v415 + 1;
              v712 = v415;
              do
                v422 = __ldxr(p_shared_owners);
              while (__stxr(v422 + 1, p_shared_owners));
              locale = (std::locale::__imp *)*((_QWORD *)&v801 + 1);
              v423 = (std::locale::__imp *)v801;
              if ((_QWORD)v801 == *((_QWORD *)&v801 + 1))
              {
                locale = (std::locale::__imp *)v801;
              }
              else if (*(_QWORD *)(*((_QWORD *)&v801 + 1) - 152) >= v421)
              {
                v425 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)&v801 + 1) - v801) >> 3);
                do
                {
                  v426 = v425 >> 1;
                  v427 = (unint64_t *)((char *)v423 + 152 * (v425 >> 1));
                  v429 = *v427;
                  v428 = (std::locale::__imp *)(v427 + 19);
                  v425 += ~(v425 >> 1);
                  if (v429 < v421)
                    v423 = v428;
                  else
                    v425 = v426;
                }
                while (v425);
                if (v423 != *((std::locale::__imp **)&v801 + 1))
                {
                  locale = v423;
                  if (*(_QWORD *)v423 == v421)
                  {
                    v430 = 0;
                    v2 = v679;
                    goto LABEL_790;
                  }
                }
              }
              do
                v431 = __ldxr(p_shared_owners);
              while (__stxr(v431 + 1, p_shared_owners));
              *(_QWORD *)__p = v421;
              *(__n128 *)&__p[8] = v420;
              *(_QWORD *)&__p[24] = v672;
              *(_QWORD *)&__p[32] = v404;
              *(_QWORD *)&v777 = v669;
              *((_QWORD *)&v777 + 1) = v411;
              v778 = (_QWORD *)v406;
              v779 = 0;
              *(_QWORD *)&v784 = v415 + 1;
              *((_QWORD *)&v784 + 1) = v415;
              do
                v432 = __ldxr(p_shared_owners);
              while (__stxr(v432 + 1, p_shared_owners));
              v782 = 0xBFF0000000000000;
              v783 = 0;
              v785 = 0;
              v2 = v679;
              do
                v433 = __ldaxr(p_shared_owners);
              while (__stlxr(v433 - 1, p_shared_owners));
              if (v433)
              {
                v434 = v800[0];
                if (v800[1] == v800[0])
                {
LABEL_707:
                  v430 = 0;
                  if (v779)
                    --*(_DWORD *)(v779 + 8);
LABEL_785:
                  v500 = (std::__shared_weak_count *)*((_QWORD *)&v784 + 1);
                  if (!*((_QWORD *)&v784 + 1))
                    goto LABEL_789;
                  v501 = (unint64_t *)(*((_QWORD *)&v784 + 1) + 8);
                  do
                    v502 = __ldaxr(v501);
                  while (__stlxr(v502 - 1, v501));
                  if (!v502)
                  {
                    ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
                    std::__shared_weak_count::__release_weak(v500);
                    v416 = v712;
                    if (!v712)
                      goto LABEL_793;
                  }
                  else
                  {
LABEL_789:
                    v416 = v712;
                    if (!v712)
                      goto LABEL_793;
                  }
LABEL_790:
                  v503 = (unint64_t *)&v416->__shared_owners_;
                  do
                    v504 = __ldaxr(v503);
                  while (__stlxr(v504 - 1, v503));
                  if (!v504)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v416->__on_zero_shared)(v416, v420);
                    std::__shared_weak_count::__release_weak(v416);
                    if (!v430)
                    {
LABEL_795:
                      v505 = v710;
                      v377 = v693;
                      v378 = v688;
                      v391 = v676;
                      if (v710)
                      {
                        v506 = (unint64_t *)&v710->__shared_owners_;
                        do
                          v507 = __ldaxr(v506);
                        while (__stlxr(v507 - 1, v506));
                        if (!v507)
                        {
                          ((void (*)(std::__shared_weak_count *))v505->__on_zero_shared)(v505);
                          std::__shared_weak_count::__release_weak(v505);
                        }
                      }
                      v508 = v708;
                      if (v708)
                      {
                        v509 = (unint64_t *)&v708->__shared_owners_;
                        do
                          v510 = __ldaxr(v509);
                        while (__stlxr(v510 - 1, v509));
                        if (!v510)
                        {
                          ((void (*)(std::__shared_weak_count *))v508->__on_zero_shared)(v508);
                          std::__shared_weak_count::__release_weak(v508);
                        }
                      }
                      v392 = v698;
                      goto LABEL_642;
                    }
LABEL_794:
                    LOBYTE(v812[3]) = 0;
                    v812[2] = 0;
                    goto LABEL_795;
                  }
LABEL_793:
                  if (!v430)
                    goto LABEL_795;
                  goto LABEL_794;
                }
              }
              else
              {
                ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
                std::__shared_weak_count::__release_weak(v416);
                v434 = v800[0];
                if (v800[1] == v800[0])
                  goto LABEL_707;
              }
              if (*(_DWORD *)v434)
                goto LABEL_707;
              v435 = *((_QWORD *)v434 + 1);
              v779 = v435;
              v436 = *(_DWORD *)(v435 + 8);
              *(_DWORD *)(v435 + 8) = v436 + 1;
              if (!*(_BYTE *)(v435 + 20))
              {
                v430 = 0;
                *(_DWORD *)(v435 + 8) = v436;
                v779 = 0;
                goto LABEL_785;
              }
              v437 = *(_QWORD *)__p;
              v438 = v784;
              *(_QWORD *)v745 = v421;
              *(_QWORD *)&v745[8] = *(_QWORD *)__p;
              *(_OWORD *)&v745[16] = *(_OWORD *)&__p[8];
              v746 = *(_OWORD *)&__p[24];
              v747 = v777;
              v748 = v778;
              v750 = v780;
              v751 = v781;
              v753 = v783;
              v752 = v782;
              v749 = v435;
              v754 = v784;
              v439 = (std::__shared_weak_count *)*((_QWORD *)&v784 + 1);
              v784 = 0uLL;
              v440 = v785;
              v755 = v785;
              v441 = (std::locale::__imp *)*((_QWORD *)&v801 + 1);
              if (*((std::locale::__imp **)&v801 + 1) != locale && *(_QWORD *)locale == v421)
              {
                if (!v439)
                  goto LABEL_784;
                goto LABEL_780;
              }
              v660 = v438;
              v442 = v801;
              v443 = (uint64_t)locale - v801;
              v444 = 0x86BCA1AF286BCA1BLL * ((uint64_t)((uint64_t)locale - v801) >> 3);
              if (*((_QWORD *)&v801 + 1) < v802)
              {
                if (locale == *((std::locale::__imp **)&v801 + 1))
                {
                  **((_QWORD **)&v801 + 1) = v421;
                  v470 = v442 + 152 * v444;
                  *(_QWORD *)(v470 + 8) = v437;
                  *(_OWORD *)(v470 + 16) = *(_OWORD *)&v745[16];
                  v471 = v747;
                  v472 = v748;
                  *(_OWORD *)(v470 + 32) = v746;
                  *(_OWORD *)(v470 + 48) = v471;
                  *(_QWORD *)(v470 + 64) = v472;
                  *(_QWORD *)(v470 + 72) = v435;
                  *(_OWORD *)(v470 + 80) = v750;
                  *(_OWORD *)(v470 + 96) = v751;
                  v473 = v752;
                  *(_BYTE *)(v470 + 120) = v753;
                  *(_QWORD *)(v470 + 112) = v473;
                  *(_QWORD *)(v470 + 128) = v438;
                  *(_QWORD *)(v470 + 136) = v439;
                  v754 = 0uLL;
                  *(_BYTE *)(v470 + 144) = v440;
                  *((_QWORD *)&v801 + 1) = (char *)v441 + 152;
                }
                else
                {
                  v654 = v785;
                  v658 = 0x86BCA1AF286BCA1BLL * ((uint64_t)((uint64_t)locale - v801) >> 3);
                  v656 = v801;
                  v664 = *(_QWORD *)__p;
                  v741 = *(_OWORD *)&__p[8];
                  *(_OWORD *)&v742[0].__locale_ = *(_OWORD *)&__p[24];
                  v743 = v777;
                  v744 = v778;
                  __dst = v780;
                  v715 = v781;
                  v713 = v782;
                  v714 = v783;
                  v445 = *((_QWORD *)&v801 + 1) - 152;
                  v446 = *((_QWORD *)&v801 + 1);
                  v447 = *((_QWORD *)&v801 + 1) - 152;
                  v754 = 0uLL;
                  if (*((_QWORD *)&v801 + 1) >= 0x98uLL)
                  {
                    do
                    {
                      *(_QWORD *)v446 = *(_QWORD *)v447;
                      *(_QWORD *)(v446 + 8) = *(_QWORD *)(v447 + 8);
                      *(_OWORD *)(v446 + 16) = *(_OWORD *)(v447 + 16);
                      v448 = *(_OWORD *)(v447 + 32);
                      v449 = *(_OWORD *)(v447 + 48);
                      *(_QWORD *)(v446 + 64) = *(_QWORD *)(v447 + 64);
                      *(_OWORD *)(v446 + 32) = v448;
                      *(_OWORD *)(v446 + 48) = v449;
                      *(_QWORD *)(v446 + 72) = *(_QWORD *)(v447 + 72);
                      *(_OWORD *)(v446 + 80) = *(_OWORD *)(v447 + 80);
                      *(_OWORD *)(v446 + 96) = *(_OWORD *)(v447 + 96);
                      v450 = *(_QWORD *)(v447 + 112);
                      *(_BYTE *)(v446 + 120) = *(_BYTE *)(v447 + 120);
                      *(_QWORD *)(v446 + 112) = v450;
                      *(_OWORD *)(v446 + 128) = *(_OWORD *)(v447 + 128);
                      *(_QWORD *)(v447 + 128) = 0;
                      *(_QWORD *)(v447 + 136) = 0;
                      *(_BYTE *)(v446 + 144) = *(_BYTE *)(v447 + 144);
                      v446 += 152;
                      v447 += 152;
                    }
                    while (v447 < (unint64_t)v441);
                  }
                  v652 = v439;
                  *((_QWORD *)&v801 + 1) = v446;
                  if (v441 != (std::locale::__imp *)((char *)locale + 152))
                  {
                    v451 = (uint64_t)v441 - 152;
                    v452 = v441;
                    do
                    {
                      v453 = *(_QWORD *)(v451 - 152);
                      v451 -= 152;
                      *((_QWORD *)v452 - 19) = v453;
                      v452 = (std::locale::__imp *)((char *)v452 - 152);
                      *((_QWORD *)v452 + 1) = *(_QWORD *)(v451 + 8);
                      *((_OWORD *)v452 + 1) = *(_OWORD *)(v451 + 16);
                      v454 = *(_OWORD *)(v451 + 32);
                      v455 = *(_OWORD *)(v451 + 48);
                      *((_QWORD *)v452 + 8) = *(_QWORD *)(v451 + 64);
                      *((_OWORD *)v452 + 2) = v454;
                      *((_OWORD *)v452 + 3) = v455;
                      *((_QWORD *)v452 + 9) = *(_QWORD *)(v451 + 72);
                      *((_OWORD *)v452 + 5) = *(_OWORD *)(v451 + 80);
                      *((_OWORD *)v452 + 6) = *(_OWORD *)(v451 + 96);
                      v456 = *(_QWORD *)(v451 + 112);
                      *((_BYTE *)v452 + 120) = *(_BYTE *)(v451 + 120);
                      *((_QWORD *)v452 + 14) = v456;
                      v457 = *(_OWORD *)(v451 + 128);
                      *(_QWORD *)(v451 + 128) = 0;
                      *(_QWORD *)(v451 + 136) = 0;
                      v458 = (std::__shared_weak_count *)*((_QWORD *)v452 + 17);
                      *((_OWORD *)v452 + 8) = v457;
                      if (v458)
                      {
                        v459 = (unint64_t *)&v458->__shared_owners_;
                        do
                          v460 = __ldaxr(v459);
                        while (__stlxr(v460 - 1, v459));
                        if (!v460)
                        {
                          ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                          std::__shared_weak_count::__release_weak(v458);
                        }
                      }
                      *((_BYTE *)v441 - 8) = *(_BYTE *)(v445 - 8);
                      v441 = v452;
                      v445 = v451;
                    }
                    while ((std::locale::__imp *)v451 != locale);
                  }
                  *(_QWORD *)locale = v421;
                  v466 = v656 + 152 * v658;
                  *(_QWORD *)(v466 + 8) = v664;
                  *(_OWORD *)(v466 + 16) = v741;
                  *(_OWORD *)(v466 + 32) = *(_OWORD *)&v742[0].__locale_;
                  *(_OWORD *)(v466 + 48) = v743;
                  *(_QWORD *)(v466 + 64) = v744;
                  *(_QWORD *)(v466 + 72) = v435;
                  *(_OWORD *)(v466 + 80) = __dst;
                  *(_OWORD *)(v466 + 96) = v715;
                  *(_BYTE *)(v466 + 120) = v714;
                  *(_QWORD *)(v466 + 112) = v713;
                  v467 = *(std::__shared_weak_count **)(v466 + 136);
                  *(_QWORD *)(v466 + 128) = v660;
                  *(_QWORD *)(v466 + 136) = v652;
                  v2 = v679;
                  v376 = v662;
                  if (v467)
                  {
                    v468 = (unint64_t *)&v467->__shared_owners_;
                    do
                      v469 = __ldaxr(v468);
                    while (__stlxr(v469 - 1, v468));
                    if (!v469)
                    {
                      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                      std::__shared_weak_count::__release_weak(v467);
                    }
                  }
                  *(_BYTE *)(v656 + 152 * v658 + 144) = v654;
                }
                goto LABEL_779;
              }
              v461 = 0x86BCA1AF286BCA1BLL * ((uint64_t)((uint64_t)locale - v801) >> 3);
              v462 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)&v801 + 1) - v801) >> 3) + 1;
              if (v462 > 0x1AF286BCA1AF286)
                sub_20E867F44();
              if (0xD79435E50D79436 * ((uint64_t)(v802 - v801) >> 3) > v462)
                v462 = 0xD79435E50D79436 * ((uint64_t)(v802 - v801) >> 3);
              if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v802 - v801) >> 3) >= 0xD79435E50D7943)
                v463 = 0x1AF286BCA1AF286;
              else
                v463 = v462;
              v744 = &v802;
              v665 = *(_QWORD *)__p;
              if (v463)
              {
                if (v463 > 0x1AF286BCA1AF286)
                  sub_20E877A38();
                v464 = (std::locale::__imp *)v801;
                v465 = (std::locale::__imp *)operator new(152 * v463);
              }
              else
              {
                v464 = (std::locale::__imp *)v801;
                v465 = 0;
              }
              v474 = v461;
              v475 = (std::locale::__imp *)((char *)v465 + 152 * v461);
              v742[0].__locale_ = v465;
              v742[1].__locale_ = v475;
              *(_QWORD *)&v743 = v475;
              *((_QWORD *)&v743 + 1) = (char *)v465 + 152 * v463;
              _ZF = v474 == v463;
              v376 = v662;
              if (_ZF)
              {
                if (v443 < 1)
                {
                  if (v464 == locale)
                    v477 = 1;
                  else
                    v477 = 2 * v474;
                  if (v477 > 0x1AF286BCA1AF286)
                    sub_20E877A38();
                  v478 = (std::locale::__imp *)operator new(152 * v477);
                  v475 = (std::locale::__imp *)((char *)v478 + 152 * (v477 >> 2));
                  v742[0].__locale_ = v478;
                  v742[1].__locale_ = v475;
                  *((_QWORD *)&v743 + 1) = (char *)v478 + 152 * v477;
                  if (v465)
                    operator delete(v465);
                  v376 = v662;
                }
                else
                {
                  v476 = v474 + 2;
                  if (v474 >= -1)
                    v476 = v474 + 1;
                  v475 = (std::locale::__imp *)((char *)v475 - 152 * (v476 >> 1));
                  v742[1].__locale_ = v475;
                }
              }
              *(_QWORD *)v475 = v421;
              *((_QWORD *)v475 + 1) = v665;
              *((_OWORD *)v475 + 1) = *(_OWORD *)&v745[16];
              *((_QWORD *)v475 + 8) = v748;
              v479 = v747;
              *((_OWORD *)v475 + 2) = v746;
              *((_OWORD *)v475 + 3) = v479;
              *((_QWORD *)v475 + 9) = v749;
              *((_OWORD *)v475 + 5) = v750;
              *((_OWORD *)v475 + 6) = v751;
              v480 = v752;
              *((_BYTE *)v475 + 120) = v753;
              *((_QWORD *)v475 + 14) = v480;
              *((_OWORD *)v475 + 8) = v754;
              v754 = 0uLL;
              *((_BYTE *)v475 + 144) = v755;
              v481 = (char *)v475 + 152;
              *(_QWORD *)&v743 = (char *)v475 + 152;
              v482 = (std::locale::__imp *)v801;
              if ((std::locale::__imp *)v801 == locale)
              {
                v489 = (std::locale::__imp *)*((_QWORD *)&v801 + 1);
                if (*((std::locale::__imp **)&v801 + 1) == locale)
                {
LABEL_768:
                  v493 = (std::locale::__imp *)v801;
                  v494 = v802;
                  *(_QWORD *)&v801 = v475;
                  *((_QWORD *)&v801 + 1) = v481;
                  v802 = *((_QWORD *)&v743 + 1);
                  *((_QWORD *)&v743 + 1) = v494;
                  v742[1].__locale_ = v493;
                  v742[0].__locale_ = v493;
                  if (locale != v493)
                  {
                    do
                    {
                      *(_QWORD *)&v743 = (char *)locale - 152;
                      v495 = (std::__shared_weak_count *)*((_QWORD *)locale - 2);
                      if (v495)
                      {
                        v496 = (unint64_t *)&v495->__shared_owners_;
                        do
                          v497 = __ldaxr(v496);
                        while (__stlxr(v497 - 1, v496));
                        if (!v497)
                        {
                          ((void (*)(std::__shared_weak_count *))v495->__on_zero_shared)(v495);
                          std::__shared_weak_count::__release_weak(v495);
                        }
                      }
                      locale = (std::locale::__imp *)v743;
                    }
                    while ((std::locale::__imp *)v743 != v493);
                    locale = v742[0].__locale_;
                  }
                  if (locale)
                    operator delete(locale);
LABEL_779:
                  v439 = (std::__shared_weak_count *)*((_QWORD *)&v754 + 1);
                  if (!*((_QWORD *)&v754 + 1))
                  {
LABEL_784:
                    BYTE2(v804) = 0;
                    LOBYTE(v804) = 0;
                    v420 = (__n128)vaddq_s64(v803, (int64x2_t)xmmword_210378060);
                    v803 = (int64x2_t)v420;
                    v430 = 1;
                    goto LABEL_785;
                  }
LABEL_780:
                  v498 = (unint64_t *)&v439->__shared_owners_;
                  do
                    v499 = __ldaxr(v498);
                  while (__stlxr(v499 - 1, v498));
                  if (!v499)
                  {
                    ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
                    std::__shared_weak_count::__release_weak(v439);
                  }
                  goto LABEL_784;
                }
              }
              else
              {
                v483 = 0;
                do
                {
                  v484 = (char *)locale + v483;
                  v485 = (char *)v475 + v483;
                  *((_QWORD *)v485 - 19) = *(_QWORD *)((char *)locale + v483 - 152);
                  *((_QWORD *)v485 - 18) = *(_QWORD *)((char *)locale + v483 - 144);
                  *(_OWORD *)(v485 - 136) = *(_OWORD *)((char *)locale + v483 - 136);
                  v486 = *(_OWORD *)((char *)locale + v483 - 120);
                  v487 = *(_OWORD *)((char *)locale + v483 - 104);
                  *((_QWORD *)v485 - 11) = *(_QWORD *)((char *)locale + v483 - 88);
                  *(_OWORD *)(v485 - 104) = v487;
                  *(_OWORD *)(v485 - 120) = v486;
                  *((_QWORD *)v485 - 10) = *(_QWORD *)((char *)locale + v483 - 80);
                  *(_OWORD *)(v485 - 72) = *(_OWORD *)((char *)locale + v483 - 72);
                  *(_OWORD *)(v485 - 56) = *(_OWORD *)((char *)locale + v483 - 56);
                  v488 = *(_QWORD *)((char *)locale + v483 - 40);
                  *(v485 - 32) = *((_BYTE *)locale + v483 - 32);
                  *((_QWORD *)v485 - 5) = v488;
                  *(_OWORD *)(v485 - 24) = *(_OWORD *)((char *)locale + v483 - 24);
                  *((_QWORD *)v484 - 3) = 0;
                  *((_QWORD *)v484 - 2) = 0;
                  *(v485 - 8) = *((_BYTE *)locale + v483 - 8);
                  v483 -= 152;
                }
                while ((std::locale::__imp *)((char *)locale + v483) != v482);
                v481 = (char *)v743;
                v475 = (std::locale::__imp *)((char *)v475 + v483);
                v489 = (std::locale::__imp *)*((_QWORD *)&v801 + 1);
                if (*((std::locale::__imp **)&v801 + 1) == locale)
                  goto LABEL_768;
              }
              do
              {
                *(_QWORD *)v481 = *(_QWORD *)locale;
                *((_QWORD *)v481 + 1) = *((_QWORD *)locale + 1);
                *((_OWORD *)v481 + 1) = *((_OWORD *)locale + 1);
                v490 = *((_OWORD *)locale + 2);
                v491 = *((_OWORD *)locale + 3);
                *((_QWORD *)v481 + 8) = *((_QWORD *)locale + 8);
                *((_OWORD *)v481 + 2) = v490;
                *((_OWORD *)v481 + 3) = v491;
                *((_QWORD *)v481 + 9) = *((_QWORD *)locale + 9);
                *((_OWORD *)v481 + 5) = *((_OWORD *)locale + 5);
                *((_OWORD *)v481 + 6) = *((_OWORD *)locale + 6);
                v492 = *((_QWORD *)locale + 14);
                v481[120] = *((_BYTE *)locale + 120);
                *((_QWORD *)v481 + 14) = v492;
                *((_OWORD *)v481 + 8) = *((_OWORD *)locale + 8);
                *((_QWORD *)locale + 16) = 0;
                *((_QWORD *)locale + 17) = 0;
                v481[144] = *((_BYTE *)locale + 144);
                v481 += 152;
                locale = (std::locale::__imp *)((char *)locale + 152);
              }
              while (locale != v489);
              locale = (std::locale::__imp *)*((_QWORD *)&v801 + 1);
              goto LABEL_768;
            }
          }
LABEL_680:
          v411 = 0;
          goto LABEL_681;
        }
        v117 = v19[6];
        sub_20F399FC4((uint64_t)v797);
        v853 = 0;
        v851 = 0u;
        v852 = 0u;
        v849 = 0u;
        memset(v850, 0, sizeof(v850));
        *(_QWORD *)v797 = off_24C9FEA40;
        v854 = 2;
        v856 = 0;
        v857 = 0;
        v855 = 0;
        v118 = *(unsigned __int8 *)(v117 + 528);
        if (*(_BYTE *)(v117 + 528))
          v119 = (std::locale::__imp *)(v117 + 40);
        else
          v119 = 0;
        LODWORD(v742[0].__locale_) = 0;
        BYTE4(v742[0].__locale_) = 1;
        v742[1].__locale_ = v119;
        if (v118
          && (sub_20F3A3F3C((uint64_t)v742) & 1) == 0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 448, (uint64_t)"initializeImpl()", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (sub_20F3A3F3C((uint64_t)v742))
        {
          sub_20F3A41D0((uint64_t)&v799, (int *)v742);
          if (v120)
          {
            LOBYTE(v812[3]) = 0;
            v812[2] = 0;
          }
        }
        if (*(_BYTE *)(v117 + 528))
          v121 = v117 + 40;
        else
          v121 = 0;
        v123 = *(_QWORD *)(v121 + 32);
        v122 = *(_QWORD *)(v121 + 40);
        v124 = v681;
        v125 = *v681;
        if (*v681)
        {
          v126 = *(_DWORD *)(v121 + 48);
          do
          {
            v127 = *(_DWORD *)(v125 + 32);
            _CF = v127 >= v126;
            if (v127 >= v126)
              v129 = (uint64_t *)v125;
            else
              v129 = (uint64_t *)(v125 + 8);
            if (_CF)
              v124 = (_QWORD *)v125;
            v125 = *v129;
          }
          while (*v129);
          if (v124 != v681)
          {
            v130 = *((_DWORD *)v124 + 8);
            v131 = v124 + 5;
            if (v130 <= v126)
              v132 = v131;
            else
              v132 = 0;
            v133 = v680;
            v134 = (uint64_t *)*v680;
            if (!*v680)
              goto LABEL_209;
            do
            {
LABEL_201:
              v135 = v134[4];
              if (v135 < v123)
              {
                ++v134;
              }
              else if (v135 == v123)
              {
                if (*((_DWORD *)v134 + 10) < v122)
                  ++v134;
                else
                  v133 = v134;
              }
              else
              {
                v133 = v134;
              }
              v134 = (uint64_t *)*v134;
            }
            while (v134);
            if (v133 == v680)
              goto LABEL_209;
            v136 = v133[4];
            if (v123 < v136 || v123 == v136 && *((_DWORD *)v133 + 10) > v122)
              goto LABEL_209;
            v137 = v133[6];
            v138 = *(__int128 **)(v117 + 536);
            v139 = *(__int128 **)(v117 + 544);
            if (v138 == v139)
              goto LABEL_280;
LABEL_210:
            v140 = 0;
            while (2)
            {
              v141 = *v138;
              v142 = *((_QWORD *)v138 + 2);
              *(_QWORD *)&__p[16] = v142;
              *(_OWORD *)__p = v141;
              v143 = v681;
              v144 = *v681;
              if (!*v681)
                goto LABEL_224;
              do
              {
                v145 = *(_DWORD *)(v144 + 32);
                v146 = v145 >= v142;
                if (v145 >= v142)
                  v147 = (uint64_t *)v144;
                else
                  v147 = (uint64_t *)(v144 + 8);
                if (v146)
                  v143 = (_QWORD *)v144;
                v144 = *v147;
              }
              while (*v147);
              if (v143 == v681)
              {
LABEL_224:
                v150 = 0;
              }
              else
              {
                v148 = *((_DWORD *)v143 + 8);
                v149 = v143 + 5;
                if (v148 <= v142)
                  v150 = v149;
                else
                  v150 = 0;
              }
              v151 = sub_20E9DF85C(v678, (uint64_t *)__p);
              if (v151)
              {
                v152 = v151[13];
                v153 = v680;
                v154 = (uint64_t *)*v680;
                if (!*v680)
                  goto LABEL_240;
              }
              else
              {
                v152 = 0;
                v153 = v680;
                v154 = (uint64_t *)*v680;
                if (!*v680)
                  goto LABEL_240;
              }
              do
              {
                v155 = v154[4];
                if (v155 < *(_QWORD *)__p)
                {
                  ++v154;
                }
                else if (v155 == *(_QWORD *)__p)
                {
                  if (*((_DWORD *)v154 + 10) < *(_DWORD *)&__p[8])
                    ++v154;
                  else
                    v153 = v154;
                }
                else
                {
                  v153 = v154;
                }
                v154 = (uint64_t *)*v154;
              }
              while (v154);
              if (v153 == v680
                || (v156 = v153[4], *(_QWORD *)__p < v156)
                || *(_QWORD *)__p == v156 && *((_DWORD *)v153 + 10) > *(_DWORD *)&__p[8])
              {
LABEL_240:
                v157 = 0;
              }
              else
              {
                v157 = v153[6];
              }
              v158 = (float32x2_t *)*((_QWORD *)v138 + 3);
              *(_QWORD *)v745 = v140;
              *(float64x2_t *)&v745[8] = vcvtq_f64_f32(v158[1]);
              *(_QWORD *)&v745[24] = v132;
              *(_QWORD *)&v746 = v150;
              *((_QWORD *)&v746 + 1) = v137;
              *(_QWORD *)&v747 = v157;
              *((_QWORD *)&v747 + 1) = v152;
              LODWORD(v715) = 0;
              v159 = *(float *)(*((_QWORD *)v138 + 3) + 32);
              v160 = operator new(0x30uLL);
              v160[1] = 0;
              v161 = v160 + 1;
              v160[2] = 0;
              *v160 = &off_24C9FCE10;
              v160[3] = &off_24C9FCE60;
              v162 = (float)(v159 * v159);
              if (v162 < 1.0e-15)
                v163 = NAN;
              else
                v163 = 1.0 / sqrt(v162);
              ++v140;
              *((double *)v160 + 5) = v163;
              *((_BYTE *)v160 + 32) = v162 >= 1.0e-15;
              *(_QWORD *)&v741 = v160 + 3;
              *((_QWORD *)&v741 + 1) = v160;
              __dst = 0uLL;
              v716.__r_.__value_.__r.__words[0] = (std::string::size_type)(v160 + 3);
              v716.__r_.__value_.__l.__size_ = (std::string::size_type)v160;
              do
                v164 = __ldxr(v161);
              while (__stxr(v164 + 1, v161));
              sub_20F3A4A18((uint64_t)&v799, (uint64_t *)v745, (unsigned int *)&v715, (uint64_t *)&v716);
              v166 = v165;
              size = (std::__shared_weak_count *)v716.__r_.__value_.__l.__size_;
              if (!v716.__r_.__value_.__l.__size_)
                goto LABEL_250;
              v168 = (unint64_t *)(v716.__r_.__value_.__l.__size_ + 8);
              do
                v169 = __ldaxr(v168);
              while (__stlxr(v169 - 1, v168));
              if (!v169)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
                if ((v166 & 1) != 0)
                {
LABEL_251:
                  LOBYTE(v812[3]) = 0;
                  v812[2] = 0;
                }
              }
              else
              {
LABEL_250:
                if ((v165 & 1) != 0)
                  goto LABEL_251;
              }
              v170 = (std::__shared_weak_count *)*((_QWORD *)&v741 + 1);
              if (!*((_QWORD *)&v741 + 1))
                goto LABEL_256;
              v171 = (unint64_t *)(*((_QWORD *)&v741 + 1) + 8);
              do
                v172 = __ldaxr(v171);
              while (__stlxr(v172 - 1, v171));
              if (!v172)
              {
                ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                std::__shared_weak_count::__release_weak(v170);
                v173 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                if (*((_QWORD *)&__dst + 1))
                {
LABEL_257:
                  v174 = (unint64_t *)&v173->__shared_owners_;
                  do
                    v175 = __ldaxr(v174);
                  while (__stlxr(v175 - 1, v174));
                  if (!v175)
                  {
                    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                    std::__shared_weak_count::__release_weak(v173);
                  }
                }
              }
              else
              {
LABEL_256:
                v173 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
                if (*((_QWORD *)&__dst + 1))
                  goto LABEL_257;
              }
              v138 += 2;
              if (v138 == v139)
                goto LABEL_280;
              continue;
            }
          }
        }
        v132 = 0;
        v133 = v680;
        v134 = (uint64_t *)*v680;
        if (*v680)
          goto LABEL_201;
LABEL_209:
        v137 = 0;
        v138 = *(__int128 **)(v117 + 536);
        v139 = *(__int128 **)(v117 + 544);
        if (v138 != v139)
          goto LABEL_210;
LABEL_280:
        __p[8] = 0;
        *(_OWORD *)&__p[16] = xmmword_21039D460;
        *(_QWORD *)&__p[32] = 0x3EB0C6F7A0B5ED8DLL;
        LOBYTE(v777) = 0;
        *((_QWORD *)&v777 + 1) = 0x3FF7B8BAC710CB29;
        v786 = &v778;
        v787 = xmmword_210378040;
        v788 = 0;
        v790 = 0;
        v792 = 0;
        v794 = 0;
        v796 = 0;
        *(_DWORD *)__p = 1;
        *(_DWORD *)&__p[4] = DWORD2(v699);
        *(_QWORD *)v745 = off_24C9FCF80;
        sub_20F2C2630((uint64_t)&v745[8], (__int128 *)__p);
        v768 = 0;
        v769 = 0;
        v770 = 0;
        v767 = -1.0;
        *(_QWORD *)v745 = &off_24C9FCEF0;
        v771 = xmmword_2103AB100;
        v772 = 1;
        v773 = 0x3FF0000000000000;
        __asm { FMOV            V0.2D, #2.0 }
        v774 = _Q0;
        v775 = xmmword_210315720;
        v716.__r_.__value_.__s.__data_[0] = 0;
        sub_20F3A5290((uint64_t *)v745, (uint64_t)v797, (unsigned __int8 *)&v716, (uint64_t)v717);
        *((_QWORD *)&v739 + 1) = 0;
        if (v738 != v737 && v738)
          MEMORY[0x212BC6368]();
        v734 = 0;
        if (v732 != v731 && v732)
          MEMORY[0x212BC6368]();
        v729 = 0;
        if (__src != v726 && __src)
          MEMORY[0x212BC6368]();
        *((_QWORD *)&v725 + 1) = 0;
        if (v724 != (__int128 *)v723 && v724)
          MEMORY[0x212BC6368]();
        if (SHIBYTE(v719.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v719.__r_.__value_.__l.__data_);
          if (SHIBYTE(v718) < 0)
            goto LABEL_297;
LABEL_294:
          v212 = v800[1];
          v211 = v800[0];
          if (v800[1] == v800[0])
            goto LABEL_299;
LABEL_298:
          v213 = v211;
          if (*(_DWORD *)v211)
            goto LABEL_299;
        }
        else
        {
          if ((SHIBYTE(v718) & 0x80000000) == 0)
            goto LABEL_294;
LABEL_297:
          operator delete(v717[0]);
          v212 = v800[1];
          v211 = v800[0];
          if (v800[1] != v800[0])
            goto LABEL_298;
LABEL_299:
          v213 = v212;
        }
        v214 = *(double *)(*((_QWORD *)v213 + 1) + 32);
        if (v212 != v211 && v214 >= 0.0)
        {
          do
          {
            v217 = *((_QWORD *)v211 + 1);
            if (*(_BYTE *)(v217 + 20))
              sub_20F3A7308(v217 + 16);
            v211 += 16;
          }
          while (v211 != v212);
        }
        *(_QWORD *)v745 = off_24C9FCF80;
        if (v768)
          MEMORY[0x212BC6368](v768, 0x1000C8000313F17);
        v215 = v766;
        if (v766 == v765)
        {
          v215 = v765;
          v216 = 4;
LABEL_311:
          (*(void (**)(void))(*v215 + 8 * v216))();
        }
        else if (v766)
        {
          v216 = 5;
          goto LABEL_311;
        }
        v218 = v764;
        if (v764 == v763)
        {
          v218 = v763;
          v219 = 4;
LABEL_316:
          (*(void (**)(void))(*v218 + 8 * v219))();
        }
        else if (v764)
        {
          v219 = 5;
          goto LABEL_316;
        }
        v220 = v762;
        if (v762 == v761)
        {
          v220 = v761;
          v221 = 4;
LABEL_321:
          (*(void (**)(void))(*v220 + 8 * v221))();
        }
        else if (v762)
        {
          v221 = 5;
          goto LABEL_321;
        }
        v222 = v760;
        if (v760 == v759)
        {
          v222 = v759;
          v223 = 4;
LABEL_326:
          (*(void (**)(void))(*v222 + 8 * v223))();
        }
        else if (v760)
        {
          v223 = 5;
          goto LABEL_326;
        }
        v757 = 0;
        if (v756 != (std::locale::__imp *)&v748 && v756)
          MEMORY[0x212BC6368]();
        v224 = v796;
        if (v796 == v795)
        {
          v224 = v795;
          v225 = 4;
LABEL_334:
          (*(void (**)(void))(*v224 + 8 * v225))();
        }
        else if (v796)
        {
          v225 = 5;
          goto LABEL_334;
        }
        v226 = v794;
        if (v794 == v793)
        {
          v226 = v793;
          v227 = 4;
LABEL_339:
          (*(void (**)(void))(*v226 + 8 * v227))();
        }
        else if (v794)
        {
          v227 = 5;
          goto LABEL_339;
        }
        v228 = v792;
        if (v792 == v791)
        {
          v228 = v791;
          v229 = 4;
LABEL_344:
          (*(void (**)(void))(*v228 + 8 * v229))();
        }
        else if (v792)
        {
          v229 = 5;
          goto LABEL_344;
        }
        v230 = v790;
        if (v790 == v789)
        {
          v230 = v789;
          v231 = 4;
LABEL_349:
          (*(void (**)(void))(*v230 + 8 * v231))();
        }
        else if (v790)
        {
          v231 = 5;
          goto LABEL_349;
        }
        *((_QWORD *)&v787 + 1) = 0;
        if (v786 != &v778 && v786)
          MEMORY[0x212BC6368]();
        *(_QWORD *)v797 = off_24C9FEA40;
        if (v855)
          MEMORY[0x212BC6368](v855, 0x1000C8000313F17);
        sub_20F3994C8(v797);
        if (v214 < 0.0)
        {
LABEL_1056:
          v103 = *(char **)(v2 + 8);
          v638 = *(_QWORD *)(v2 + 16);
          if ((unint64_t)v103 < v638)
            goto LABEL_150;
          v639 = *(char **)v2;
          v640 = (uint64_t)&v103[-*(_QWORD *)v2] >> 4;
          v641 = v640 + 1;
          if ((unint64_t)(v640 + 1) >> 60)
            sub_20E867F44();
          v642 = v638 - (_QWORD)v639;
          if (v642 >> 3 > v641)
            v641 = v642 >> 3;
          if ((unint64_t)v642 >= 0x7FFFFFFFFFFFFFF0)
            v109 = 0xFFFFFFFFFFFFFFFLL;
          else
            v109 = v641;
          if (v109)
          {
            if (v109 >> 60)
              sub_20E877A38();
            v110 = (char *)operator new(16 * v109);
          }
          else
          {
            v110 = 0;
          }
          v111 = &v110[16 * v640];
          *(_OWORD *)v111 = *v683;
          v112 = v111;
          if (v103 != v639)
          {
            do
            {
              v643 = *((_QWORD *)v103 - 2);
              v103 -= 16;
              v644 = *((_DWORD *)v103 + 2);
              *((_QWORD *)v112 - 2) = v643;
              v112 -= 16;
              *((_DWORD *)v112 + 2) = v644;
            }
            while (v103 != v639);
            goto LABEL_163;
          }
LABEL_164:
          v104 = v111 + 16;
          *(_QWORD *)v2 = v112;
          *(_QWORD *)(v2 + 8) = v111 + 16;
          *(_QWORD *)(v2 + 16) = &v110[16 * v109];
          if (v103)
            operator delete(v103);
          goto LABEL_166;
        }
      }
LABEL_356:
      v232 = v19[6];
      if (v677 > (unint64_t)((uint64_t)(*(_QWORD *)(v232 + 544) - *(_QWORD *)(v232 + 536)) >> 5))
        goto LABEL_577;
      if (*(_BYTE *)(v232 + 528))
      {
        v233 = v232 + 40;
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 771, (uint64_t)"track.getStructure()", 20, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_1091;
        }
        if (*(_BYTE *)(v232 + 528))
          v233 = v232 + 40;
        else
          v233 = 0;
      }
      *(_OWORD *)v717 = *(_OWORD *)(v233 + 32);
      v718 = *(_QWORD *)(v233 + 48);
      v234 = sub_20E9DF85C(v704, (uint64_t *)v717);
      v235 = sub_20E9DF85C(v704, (uint64_t *)(*(_QWORD *)(v232 + 544) - 32));
      if (*(_BYTE *)(v232 + 528))
        v237 = v232 + 40;
      else
        v237 = 0;
      v238 = *(float64x2_t *)(v237 + 8);
      v236.f64[0] = *(float64_t *)(v237 + 24);
      v239 = (float64x2_t)vextq_s8((int8x16_t)v238, (int8x16_t)v238, 8uLL);
      v687 = v239.f64[0];
      v692 = v236;
      *(_QWORD *)&v239.f64[0] = v234[47];
      v675 = v238.f64[0];
      v240 = vsubq_f64(*(float64x2_t *)(v234 + 45), v238);
      *(_QWORD *)&v241 = *(_OWORD *)&vsubq_f64(v239, v236);
      if (fabs(v240.f64[0]) >= 1.0e-10 || fabs(v240.f64[1]) >= 1.0e-10 || fabs(v241) >= 1.0e-10)
      {
        *(_QWORD *)&v236.f64[0] = v235[47];
        *(_QWORD *)&v236.f64[0] = *(_OWORD *)&vsubq_f64(v236, v692);
        v242.f64[0] = v238.f64[0];
        v242.f64[1] = v687;
        v243 = vsubq_f64(*(float64x2_t *)(v235 + 45), v242);
        if (fabs(v243.f64[0]) >= 1.0e-10 || fabs(v243.f64[1]) >= 1.0e-10 || fabs(v236.f64[0]) >= 1.0e-10)
        {
          v240.f64[1] = *(double *)vextq_s8((int8x16_t)v240, (int8x16_t)v240, 8uLL).i64;
          v243.f64[1] = *(double *)vextq_s8((int8x16_t)v243, (int8x16_t)v243, 8uLL).i64;
          if (fmin((vmulq_f64(v240, v243).f64[0] + v240.f64[1] * v243.f64[1] + v241 * v236.f64[0])/ sqrt((vmulq_f64(v240, v240).f64[0] + v240.f64[1] * v240.f64[1] + v241 * v241)* (vmulq_f64(v243, v243).f64[0] + v243.f64[1] * v243.f64[1] + v236.f64[0] * v236.f64[0])), 1.0) <= 1.0)goto LABEL_373;
LABEL_577:
          v103 = *(char **)(v2 + 8);
          v351 = *(_QWORD *)(v2 + 16);
          if ((unint64_t)v103 >= v351)
          {
            v352 = *(char **)v2;
            v353 = (uint64_t)&v103[-*(_QWORD *)v2] >> 4;
            v354 = v353 + 1;
            if ((unint64_t)(v353 + 1) >> 60)
              sub_20E867F44();
            v355 = v351 - (_QWORD)v352;
            if (v355 >> 3 > v354)
              v354 = v355 >> 3;
            if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF0)
              v109 = 0xFFFFFFFFFFFFFFFLL;
            else
              v109 = v354;
            if (v109)
            {
              if (v109 >> 60)
                sub_20E877A38();
              v110 = (char *)operator new(16 * v109);
            }
            else
            {
              v110 = 0;
            }
            v111 = &v110[16 * v353];
            *(_OWORD *)v111 = *v683;
            v112 = v111;
            if (v103 != v352)
            {
              do
              {
                v356 = *((_QWORD *)v103 - 2);
                v103 -= 16;
                v357 = *((_DWORD *)v103 + 2);
                *((_QWORD *)v112 - 2) = v356;
                v112 -= 16;
                *((_DWORD *)v112 + 2) = v357;
              }
              while (v103 != v352);
LABEL_163:
              v103 = *(char **)v2;
            }
            goto LABEL_164;
          }
LABEL_150:
          *(_OWORD *)v103 = *v683;
          v104 = v103 + 16;
LABEL_166:
          *(_QWORD *)(v2 + 8) = v104;
LABEL_167:
          v115 = (_QWORD *)v19[1];
          if (!v115)
            goto LABEL_573;
          goto LABEL_168;
        }
      }
      if (fmin(1.0, 1.0) > 1.0)
        goto LABEL_577;
LABEL_373:
      v244 = *(uint64_t **)(v232 + 536);
      v245 = *(uint64_t **)(v232 + 544);
      if (v244 != v245)
      {
        v668 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v692.f64[0], 0);
        v671 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v687, 0);
        do
        {
          v246 = sub_20E9DF85C(v704, v244);
          if (!v246
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 829, (uint64_t)"camPoseIter != camera_data_.end()", 33, (uint64_t)"Cannot find camera pose.", 24, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1091;
          }
          v248.f64[1] = v692.f64[1];
          v247.f64[0] = *((double *)v246 + 19) * v675
                      + *((double *)v246 + 23) * v687
                      + *((double *)v246 + 27) * v692.f64[0];
          *(_QWORD *)&v248.f64[0] = v246[31];
          *(float64x2_t *)v797 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(*(float64x2_t *)(v246 + 17), v675), v671, *(float64x2_t *)(v246 + 21)), v668, *(float64x2_t *)(v246 + 25)), *(float64x2_t *)(v246 + 29));
          *(_QWORD *)&v797[16] = *(_OWORD *)&vaddq_f64(v247, v248);
          v249 = (float32x2_t *)v244[3];
          if (!v249)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viotriangulator.hpp", 833, (uint64_t)"node.getFeaturePointer()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1091;
            }
            v249 = (float32x2_t *)v244[3];
          }
          v250 = v249[4].f32[0];
          v251 = v249[1];
          v252 = *(double *)&v797[16] <= 1.79769313e308 && *(double *)&v797[16] >= 0.0;
          v253 = v246[49];
          v254 = *(_DWORD *)(v253 + 992);
          if (v254 == -1)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_1091;
            }
            v254 = *(_DWORD *)(v253 + 992);
            if (v254 <= 7)
            {
LABEL_385:
              if (v254 > 3)
              {
                if (v254 > 5)
                {
                  if (v254 == 6)
                  {
                    v268 = vaddq_f64(vdivq_f64(*(float64x2_t *)v797, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v797[16], 0)), *(float64x2_t *)(v253 + 192));
                    v269 = sqrt(vaddvq_f64(vmulq_f64(v268, v268)));
                    *(float64x2_t *)v745 = vaddq_f64(*(float64x2_t *)(v253 + 208), vmulq_n_f64(v268, v269* (v269* (*(double *)(v253 + 168)+ v269 * (*(double *)(v253 + 176) + *(double *)(v253 + 184) * v269)))+ 1.0));
                    v255 = *(_DWORD *)(v253 + 992);
                    if (v255 != -1)
                      goto LABEL_469;
                    goto LABEL_415;
                  }
                  v256 = sub_20EB31FFC(v253, (float64x2_t *)v745, (float64x2_t *)v797);
                  goto LABEL_467;
                }
                if (v254 != 5)
                {
                  _V0.D[1] = *(_QWORD *)&v797[8];
                  _D1 = *(_QWORD *)&v797[8];
                  __asm { FMLA            D16, D1, V0.D[1] }
                  v288 = sqrt(_D16);
                  v289 = fabs(*(double *)&v797[16]);
                  v290 = fabs(v288);
                  v291 = v289 / v290;
                  if (v289 >= v290)
                    v291 = v290 / v289;
                  v292 = (v290 - v289) / (v289 + v290);
                  if (v289 >= v290)
                    v292 = -v292;
                  if (v291 > 0.414213562)
                    v293 = 1;
                  else
                    v293 = 2;
                  if (v291 > 0.414213562)
                    v294 = -1;
                  else
                    v294 = 1;
                  if (v291 <= 0.414213562)
                    v292 = v291;
                  if (_D16 >= 0.00000001)
                  {
                    if (v289 < v290)
                      v294 = -v294;
                    else
                      v293 = v291 > 0.414213562;
                    v324 = v288 == INFINITY && v289 == INFINITY;
                    v325 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v292 * v292), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v292 * v292), (float64x2_t)xmmword_210315370), v292 * v292 * (v292 * v292))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v292 * v292), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v292 * v292), (float64x2_t)xmmword_210315380), v292 * v292 * (v292 * v292))),
                               v292 * v292 * (v292 * v292) * (v292 * v292 * (v292 * v292))));
                    v326 = v292 + v292 * vdivq_f64(v325, (float64x2_t)vdupq_laneq_s64((int64x2_t)v325, 1)).f64[0];
                    if (v324)
                      v326 = 0.785398163;
                    if (v288 == 0.0 && *(double *)&v797[16] == 0.0)
                      v328 = 0.0;
                    else
                      v328 = v326;
                    if (*(uint64_t *)&v797[16] < 0)
                    {
                      v293 = 4 - v293;
                      v294 = -v294;
                    }
                    if (v288 < 0.0)
                      v293 = -v293;
                    v329 = (double)v293;
                    if (v288 >= 0.0)
                      v330 = v294;
                    else
                      v330 = -v294;
                    v331 = v329 * 3.061617e-17 + v329 * 0.785398163 + v328 * (double)v330;
                    v332 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v253 + 168), *(int64x2_t *)(v253 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v253 + 168), *(int64x2_t *)(v253 + 184)), v331 * v331)), v331 * v331);
                    v295 = 1.0
                         / v288
                         * (v331 + v331 * (v332.f64[0] + vmuld_lane_f64(v331 * v331 * (v331 * v331), v332, 1)));
                  }
                  else
                  {
                    v295 = 1.0 / *(double *)&v797[16];
                  }
                  v308 = vmulq_n_f64(*(float64x2_t *)v797, v295);
                  *(float64x2_t *)v745 = v308;
                  v309 = v308.f64[1];
LABEL_532:
                  v333.f64[0] = *(double *)(v253 + 16) + v308.f64[0] * *(double *)v253 + v309 * *(double *)(v253 + 8);
                  v333.f64[1] = v309 * *(double *)(v253 + 32) + *(double *)(v253 + 40);
                  v697 = v333;
                  if (!v252)
                    goto LABEL_577;
                  goto LABEL_563;
                }
                v257 = *(double *)v797 * *(double *)v797 + *(double *)&v797[8] * *(double *)&v797[8];
                if (v257 >= 0.00000001)
                {
                  v311 = sqrt(v257);
                  if (v311 <= *(double *)&v797[16])
                  {
                    v349 = v311 / *(double *)&v797[16] * 0.785398163
                         - v311
                         / *(double *)&v797[16]
                         * (v311 / *(double *)&v797[16] + -1.0)
                         * (v311 / *(double *)&v797[16] * 0.0663008339 + 0.244711287);
                  }
                  else
                  {
                    if (v311 <= -*(double *)&v797[16])
                    {
                      v313 = v311 / *(double *)&v797[16] * 0.785398163
                           - v311
                           / *(double *)&v797[16]
                           * (-1.0 - v311 / *(double *)&v797[16])
                           * (v311 / *(double *)&v797[16] * -0.0663008339 + 0.244711287);
                      v314 = 3.14159265;
                    }
                    else
                    {
                      v312 = fabs(*(double *)&v797[16] / v311);
                      v313 = *(double *)&v797[16] / v311 * (v312 + -1.0) * (v312 * 0.0663008339 + 0.244711287)
                           + *(double *)&v797[16] / v311 * -0.785398163;
                      v314 = 1.57079633;
                    }
                    v349 = v313 + v314;
                  }
                  v350 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v253 + 168), *(int64x2_t *)(v253 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v253 + 168), *(int64x2_t *)(v253 + 184)), v349 * v349)), v349 * v349);
                  v258 = (v349 + v349 * (v350.f64[0] + vmuld_lane_f64(v349 * v349 * (v349 * v349), v350, 1))) / v311;
                }
                else
                {
                  if (*(double *)&v797[16] == 0.0)
                    goto LABEL_577;
                  v258 = 1.0 / *(double *)&v797[16];
                }
                *(double *)v745 = *(double *)v797 * v258;
                *(double *)&v745[8] = *(double *)&v797[8] * v258;
                v255 = *(_DWORD *)(v253 + 992);
                if (v255 != -1)
                {
LABEL_469:
                  if (v255 > 7)
                    goto LABEL_417;
                  goto LABEL_470;
                }
              }
              else
              {
                if (v254 > 1)
                {
                  if (v254 == 2)
                  {
                    if (*(_DWORD *)(v253 + 212))
                    {
                      if (*(double *)&v797[16] < 0.00000001)
                        goto LABEL_577;
                      _Q2 = vmulq_n_f64(*(float64x2_t *)v797, 1.0 / *(double *)&v797[16]);
                      _D0 = vmuld_lane_f64(1.0 / *(double *)&v797[16], *(float64x2_t *)v797, 1);
                      __asm { FMLA            D1, D0, V2.D[1] }
                      v267 = vaddq_f64(vaddq_f64(vmulq_f64((float64x2_t)vextq_s8(*(int8x16_t *)(v253 + 192), *(int8x16_t *)(v253 + 192), 8uLL), vaddq_f64((float64x2_t)vdupq_lane_s64(_D1, 0), vmulq_f64(_Q2, vaddq_f64(_Q2, _Q2)))), vmulq_laneq_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(v253 + 192), *(float64x2_t *)(v253 + 192)), _Q2.f64[0]), _Q2, 1)), vmulq_n_f64(_Q2, *(double *)(v253 + 168) * *(double *)&_D1+ 1.0+ *(double *)&_D1 * (*(double *)(v253 + 176) * *(double *)&_D1)+ *(double *)&_D1 * (*(double *)&_D1 * (*(double *)(v253 + 184) * *(double *)&_D1))));
                    }
                    else
                    {
                      if (*(double *)&v797[16] < 0.00000001)
                        goto LABEL_577;
                      _Q2 = vmulq_n_f64(*(float64x2_t *)v797, 1.0 / *(double *)&v797[16]);
                      _D0 = vmuld_lane_f64(1.0 / *(double *)&v797[16], *(float64x2_t *)v797, 1);
                      __asm { FMLA            D1, D0, V2.D[1] }
                      v267 = vmulq_n_f64(_Q2, *(double *)(v253 + 168) * _D1+ 1.0+ _D1 * _D1 * (*(double *)(v253 + 176) + *(double *)(v253 + 184) * _D1));
                    }
                  }
                  else
                  {
                    _V0.D[1] = *(_QWORD *)&v797[8];
                    _D1 = *(_QWORD *)&v797[8];
                    __asm { FMLA            D16, D1, V0.D[1] }
                    v299 = sqrt(_D16);
                    v300 = fabs(*(double *)&v797[16]);
                    v301 = fabs(v299);
                    v302 = v300 / v301;
                    if (v300 >= v301)
                      v302 = v301 / v300;
                    v303 = (v301 - v300) / (v300 + v301);
                    if (v300 >= v301)
                      v303 = -v303;
                    if (v302 > 0.414213562)
                      v304 = 1;
                    else
                      v304 = 2;
                    if (v302 > 0.414213562)
                      v305 = -1;
                    else
                      v305 = 1;
                    if (v302 <= 0.414213562)
                      v303 = v302;
                    if (_D16 >= 0.00000001)
                    {
                      if (v300 < v301)
                        v305 = -v305;
                      else
                        v304 = v302 > 0.414213562;
                      v334 = v299 == INFINITY && v300 == INFINITY;
                      v335 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v303 * v303), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v303 * v303), (float64x2_t)xmmword_210315370), v303 * v303 * (v303 * v303))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v303 * v303), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v303 * v303), (float64x2_t)xmmword_210315380), v303 * v303 * (v303 * v303))),
                                 v303 * v303 * (v303 * v303) * (v303 * v303 * (v303 * v303))));
                      v336 = v303 + v303 * vdivq_f64(v335, (float64x2_t)vdupq_laneq_s64((int64x2_t)v335, 1)).f64[0];
                      if (v334)
                        v336 = 0.785398163;
                      if (v299 == 0.0 && *(double *)&v797[16] == 0.0)
                        v338 = 0.0;
                      else
                        v338 = v336;
                      if (*(uint64_t *)&v797[16] < 0)
                      {
                        v304 = 4 - v304;
                        v305 = -v305;
                      }
                      if (v299 < 0.0)
                        v304 = -v304;
                      v339 = (double)v304;
                      if (v299 >= 0.0)
                        v340 = v305;
                      else
                        v340 = -v305;
                      v341 = v339 * 3.061617e-17 + v339 * 0.785398163 + v338 * (double)v340;
                      v342 = vmulq_n_f64(vaddq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v253 + 168), *(int64x2_t *)(v253 + 184)), vmulq_n_f64((float64x2_t)vzip2q_s64(*(int64x2_t *)(v253 + 168), *(int64x2_t *)(v253 + 184)), v341 * v341)), v341 * v341);
                      v306 = 1.0
                           / v299
                           * (v341 + v341 * (v342.f64[0] + vmuld_lane_f64(v341 * v341 * (v341 * v341), v342, 1)));
                    }
                    else
                    {
                      v306 = 1.0 / *(double *)&v797[16];
                    }
                    v267 = vmulq_n_f64(*(float64x2_t *)v797, v306);
                  }
                  *(float64x2_t *)v745 = v267;
                  goto LABEL_558;
                }
                if (!v254)
                  goto LABEL_1090;
                if (*(double *)&v797[16] < 0.00000001)
                  goto LABEL_577;
                *(float64x2_t *)v745 = vmulq_n_f64(*(float64x2_t *)v797, 1.0 / *(double *)&v797[16]);
                v255 = *(_DWORD *)(v253 + 992);
                if (v255 != -1)
                  goto LABEL_469;
              }
              goto LABEL_415;
            }
          }
          else if (v254 <= 7)
          {
            goto LABEL_385;
          }
          if (v254 <= 0xB)
          {
            if (v254 > 9)
            {
              if (v254 == 10)
                v256 = sub_20EB24288((float64x2_t *)v745, (uint64_t)v797, (double *)(v253 + 168), (*(double *)v253 + *(double *)(v253 + 32)) * 0.5);
              else
                v256 = sub_20EB3A2E4(v253, (float64x2_t *)v745, (float64x2_t *)v797);
            }
            else
            {
              if (v254 != 9)
              {
                _V0.D[1] = *(_QWORD *)&v797[8];
                _D1 = *(_QWORD *)&v797[8];
                __asm { FMLA            D16, D1, V0.D[1] }
                v277 = sqrt(_D16);
                v278 = fabs(*(double *)&v797[16]);
                v279 = fabs(v277);
                v280 = v278 / v279;
                if (v278 >= v279)
                  v280 = v279 / v278;
                v281 = (v279 - v278) / (v278 + v279);
                if (v278 >= v279)
                  v281 = -v281;
                if (v280 > 0.414213562)
                  v282 = 1;
                else
                  v282 = 2;
                if (v280 > 0.414213562)
                  v283 = -1;
                else
                  v283 = 1;
                if (v280 <= 0.414213562)
                  v281 = v280;
                if (_D16 >= 0.00000001)
                {
                  if (v278 < v279)
                    v283 = -v283;
                  else
                    v282 = v280 > 0.414213562;
                  _ZF = v277 == INFINITY && v278 == INFINITY;
                  v316 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315320, v281 * v281), (float64x2_t)xmmword_2102DD520), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315360, v281 * v281), (float64x2_t)xmmword_210315370), v281 * v281 * (v281 * v281))), vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315330, v281 * v281), (float64x2_t)xmmword_210315340), vmulq_n_f64(vaddq_f64(vmulq_n_f64((float64x2_t)xmmword_210315350, v281 * v281), (float64x2_t)xmmword_210315380), v281 * v281 * (v281 * v281))),
                             v281 * v281 * (v281 * v281) * (v281 * v281 * (v281 * v281))));
                  v317 = v281 + v281 * vdivq_f64(v316, (float64x2_t)vdupq_laneq_s64((int64x2_t)v316, 1)).f64[0];
                  if (_ZF)
                    v317 = 0.785398163;
                  if (v277 == 0.0 && *(double *)&v797[16] == 0.0)
                    v319 = 0.0;
                  else
                    v319 = v317;
                  if (*(uint64_t *)&v797[16] < 0)
                  {
                    v282 = 4 - v282;
                    v283 = -v283;
                  }
                  if (v277 < 0.0)
                    v282 = -v282;
                  v320 = (double)v282;
                  if (v277 >= 0.0)
                    v321 = v283;
                  else
                    v321 = -v283;
                  v322 = v320 * 3.061617e-17 + v320 * 0.785398163 + v319 * (double)v321;
                  v284 = 1.0
                       / v277
                       * (v322
                        * (v322
                         * v322
                         * (*(double *)(v253 + 168)
                          + v322
                          * v322
                          * (*(double *)(v253 + 176)
                           + v322
                           * v322
                           * (*(double *)(v253 + 184)
                            + v322
                            * v322
                            * (*(double *)(v253 + 192)
                             + v322
                             * v322
                             * (*(double *)(v253 + 200)
                              + v322 * v322 * (*(double *)(v253 + 208) + v322 * v322 * *(double *)(v253 + 216)))))))
                         + 1.0));
                }
                else
                {
                  v284 = 1.0 / *(double *)&v797[16];
                }
                v270 = vmulq_n_f64(*(float64x2_t *)v797, v284);
                *(float64x2_t *)v745 = v270;
                v271 = v270.f64[1];
LABEL_507:
                v323.f64[0] = *(double *)(v253 + 16) + v270.f64[0] * *(double *)v253 + v271 * *(double *)(v253 + 8);
                v323.f64[1] = v271 * *(double *)(v253 + 32) + *(double *)(v253 + 40);
                v697 = v323;
                if (!v252)
                  goto LABEL_577;
                goto LABEL_563;
              }
              v256 = sub_20EB3641C(v253, (float64x2_t *)v745, (float64x2_t *)v797);
            }
LABEL_467:
            if ((v256 & 1) == 0)
              goto LABEL_577;
            v255 = *(_DWORD *)(v253 + 992);
            if (v255 != -1)
              goto LABEL_469;
            goto LABEL_415;
          }
          if (v254 > 0xD)
          {
            if (v254 == 14)
              v256 = sub_20EB247C0((float64x2_t *)v745, (uint64_t)v797, (double *)(v253 + 168), (*(double *)v253 + *(double *)(v253 + 32)) * 0.5);
            else
              v256 = sub_20EB3E39C(v253, (float64x2_t *)v745, (float64x2_t *)v797);
            goto LABEL_467;
          }
          if (v254 != 13 || *(double *)&v797[16] < 0.00000001)
            goto LABEL_577;
          _Q0 = vdivq_f64(*(float64x2_t *)v797, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v797[16], 0));
          v260 = (*(double *)v253 + *(double *)(v253 + 32)) * 0.5;
          _D3 = _Q0.f64[1];
          __asm { FMLA            D2, D3, V0.D[1] }
          v263 = v260 * (_D2 * v260);
          *(float64x2_t *)v745 = vdivq_f64(_Q0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v263* (*(double *)(v253 + 168)+ v260 * *(double *)(v253 + 224)+ v263* (*(double *)(v253 + 176)+ v260 * *(double *)(v253 + 232)+ v263* (*(double *)(v253 + 184)+ v260 * *(double *)(v253 + 240)+ v263* (*(double *)(v253 + 192)+ v260 * *(double *)(v253 + 248)+ v263* (*(double *)(v253 + 200)+ v260 * *(double *)(v253 + 256)+ v263
                                                       * (*(double *)(v253 + 208)
                                                        + v260 * *(double *)(v253 + 264)
                                                        + v263
                                                        * (*(double *)(v253 + 216)
                                                         + *(double *)(v253 + 272) * v260
                                                         + v263 * 0.0)))))))
                                                  / 100.0
                                                  + 1.0),
                                                  0));
          v255 = *(_DWORD *)(v253 + 992);
          if (v255 != -1)
            goto LABEL_469;
LABEL_415:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Variant.h", 255, (uint64_t)"!CV3D_VARIANT_VALUELESS_BY_EXC(*this)", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_1091;
          }
          v255 = *(_DWORD *)(v253 + 992);
          if (v255 > 7)
          {
LABEL_417:
            v270.f64[0] = *(float64_t *)v745;
            if (v255 <= 9)
            {
              v271 = *(double *)&v745[8];
              goto LABEL_507;
            }
            v272 = *(double *)(v253 + 8);
            v273 = *(double *)v745 * *(double *)v253;
            goto LABEL_479;
          }
LABEL_470:
          if (v255 > 3)
          {
            v308.f64[0] = *(float64_t *)v745;
            if (v255 <= 5)
            {
              v309 = *(double *)&v745[8];
              goto LABEL_532;
            }
            v272 = *(double *)(v253 + 8);
            v273 = *(double *)v745 * *(double *)v253;
LABEL_479:
            v310.f64[0] = *(double *)(v253 + 16) + v273 + v272 * *(double *)&v745[8];
            v310.f64[1] = *(double *)(v253 + 40) + *(double *)(v253 + 32) * *(double *)&v745[8];
            v697 = v310;
            if (!v252)
              goto LABEL_577;
            goto LABEL_563;
          }
          if (v255 > 1)
          {
            v267 = *(float64x2_t *)v745;
LABEL_558:
            v343.f64[0] = *(double *)(v253 + 16)
                        + *(double *)v253 * v267.f64[0]
                        + vmuld_lane_f64(*(double *)(v253 + 8), v267, 1);
            v343.f64[1] = vmuld_lane_f64(*(double *)(v253 + 32), v267, 1) + *(double *)(v253 + 40);
            v697 = v343;
            if (!v252)
              goto LABEL_577;
            goto LABEL_563;
          }
          if (!v255)
          {
LABEL_1090:
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Geometry/include/VIO/Geometry/LensModel.h", 1745, (uint64_t)"", 0, (uint64_t)"Empty variant lens model invoked.", 33, (void (*)(void **))sub_21023DDB0);
LABEL_1091:
            abort();
          }
          v307.f64[0] = *(double *)(v253 + 16)
                      + *(double *)v253 * *(double *)v745
                      + *(double *)(v253 + 8) * *(double *)&v745[8];
          v307.f64[1] = *(double *)&v745[8] * *(double *)(v253 + 32) + *(double *)(v253 + 40);
          v697 = v307;
          if (!v252)
            goto LABEL_577;
LABEL_563:
          _D3 = vsubq_f64(v697, vcvtq_f64_f32(v251)).f64[1];
          __asm { FMLA            D2, D3, V1.D[1] }
          if (_D2 > v250 * v673 * (v250 * v673))
            goto LABEL_577;
          v244 += 4;
        }
        while (v244 != v245);
      }
      v115 = (_QWORD *)v19[1];
      if (!v115)
      {
        do
        {
LABEL_573:
          v116 = (_QWORD *)v19[2];
          _ZF = *v116 == (_QWORD)v19;
          v19 = v116;
        }
        while (!_ZF);
        goto LABEL_10;
      }
      do
      {
LABEL_168:
        v116 = v115;
        v115 = (_QWORD *)*v115;
      }
      while (v115);
LABEL_10:
      v19 = v116;
    }
    while (v116 != v682);
  }
  v648 = v705[0];
  if (v705[0])
  {
    do
    {
      v649 = (_QWORD *)*v648;
      operator delete(v648);
      v648 = v649;
    }
    while (v649);
  }
  v650 = v704[0];
  v704[0] = 0;
  if (v650)
    operator delete(v650);
}

void sub_20F38EDCC(_Unwind_Exception *a1)
{
  char v1;
  uint64_t v2;

  std::locale::~locale((std::locale *)&STACK[0xD00]);
  *(_BYTE *)(v2 + 312) = v1;
  sub_20F2C524C((uint64_t)&STACK[0x410]);
  sub_20EDB4278((uint64_t)&STACK[0x3E0]);
  sub_20F2C539C(&STACK[0xD70]);
  sub_20F2B116C(&STACK[0x10B0]);
  sub_20F38F568(&STACK[0x1390]);
  sub_20F25CF20((uint64_t)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_20F38F148(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t prime;
  double v14;
  _QWORD *v15;
  _QWORD *v16;
  int8x8_t v18;
  size_t v19;
  uint8x8_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t *v23;
  uint64_t v28;
  uint64_t v29;
  float64x2_t v31;
  double v32;
  float64x2_t v33;
  double v34;
  float64x2_t *v36;
  double v37;
  float64x2_t v39;
  uint64_t v40;
  int64x2_t v41;
  float64x2_t v43;
  unint64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  int8x16_t v50;
  uint64_t v51;
  double v52;
  float64x2_t v53;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  float64x2_t v68;
  int8x16_t v69;
  uint64_t v70;
  int64x2_t v71;
  float64_t v72;
  __int128 v73;
  uint64_t v74;
  float64x2_t v75;
  int64x2_t v76;
  float64x2_t v77;
  int64x2_t v78;
  float64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  float64x2_t v87;
  int64x2_t v88;
  float64x2_t v89;
  __int128 v90;
  float64x2_t v91;
  __int128 v92;
  float64x2_t v93;
  __int128 v94;
  float64x2_t v95;
  float64x2_t v96;
  uint64_t v97;

  *(_QWORD *)(a1 + 48) = a2;
  v4 = (_QWORD *)(a1 + 64);
  v5 = a2;
  if (*(_QWORD *)(a1 + 88))
  {
    v6 = *(_QWORD **)(a1 + 80);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    *(_QWORD *)(a1 + 80) = 0;
    v8 = *(_QWORD *)(a1 + 72);
    if (v8)
    {
      for (i = 0; i != v8; ++i)
        *(_QWORD *)(*v4 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 88) = 0;
    v5 = *(_QWORD **)(a1 + 48);
  }
  v10 = (_QWORD *)v5[220];
  v11 = v5 + 221;
  if (v10 == v11)
  {
    v12 = 0;
  }
  else
  {
    do
    {
      v14 = *(double *)(v10[5] + 1424);
      v12 = v14 > 0.0;
      if (v14 > 0.0)
        break;
      v15 = (_QWORD *)v10[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v10[2];
          _ZF = *v16 == (_QWORD)v10;
          v10 = v16;
        }
        while (!_ZF);
      }
      v10 = v16;
    }
    while (v16 != v11);
  }
  *(_BYTE *)(a1 + 56) = v12;
  prime = vcvtps_u32_f32((float)(unint64_t)(a2[8] * a2[39]) / *(float *)(a1 + 96));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v18 = *(int8x8_t *)(a1 + 72);
  if (prime > *(_QWORD *)&v18)
    goto LABEL_35;
  if (prime >= *(_QWORD *)&v18)
    goto LABEL_36;
  v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
  if (*(_QWORD *)&v18 >= 3uLL)
  {
    v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] <= 1uLL)
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
      if (prime <= v19)
        prime = v19;
      if (prime >= *(_QWORD *)&v18)
        goto LABEL_36;
LABEL_35:
      sub_20E8D2B3C((uint64_t)v4, prime);
      goto LABEL_36;
    }
  }
  v22 = std::__next_prime(v19);
  if (prime <= v22)
    prime = v22;
  if (prime < *(_QWORD *)&v18)
    goto LABEL_35;
LABEL_36:
  v23 = (uint64_t *)a2[225];
  if (v23)
  {
    __asm { FMOV            V0.2D, #1.0 }
    v72 = *((double *)&_Q0 + 1);
    do
    {
      v29 = v23[4];
      v28 = v23[5];
      _Q0.f64[0] = *(float64_t *)(v28 + 16);
      v31 = *(float64x2_t *)v28;
      v32 = *(double *)(v28 + 40);
      v33 = *(float64x2_t *)(v28 + 24);
      v34 = *(double *)(v28 + 64);
      _Q5 = *(float64x2_t *)(v28 + 48);
      v36 = (float64x2_t *)v23[7];
      v37 = v36[1].f64[0];
      _Q7 = *v36;
      v39 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v31, (int64x2_t)v33), v36->f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v31, (int64x2_t)v33), *v36, 1);
      v40 = v23[9];
      v41 = *(int64x2_t *)(v40 + 24);
      _Q19 = *(float64x2_t *)(v40 + 48);
      v43 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v40, v41);
      v44 = *(_QWORD *)(v40 + 48);
      v45 = vmulq_n_f64(v43, _Q0.f64[0]);
      v46 = vmulq_n_f64((float64x2_t)v44, _Q0.f64[0]);
      _Q0.f64[1] = v32;
      v47 = vmlaq_n_f64(v39, _Q0, v37);
      _Q7.f64[0] = _Q7.f64[1];
      __asm { FMLA            D0, D7, V5.D[1] }
      _Q0.f64[0] = _Q0.f64[0] + v34 * v37;
      v48.f64[0] = *(float64_t *)(v40 + 16);
      _Q7.f64[0] = *(float64_t *)(v40 + 64);
      _Q17 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v40, v41);
      v48.f64[1] = *(float64_t *)(v40 + 40);
      v50 = vextq_s8((int8x16_t)_Q17, (int8x16_t)vdupq_laneq_s64((int64x2_t)_Q19, 1), 8uLL);
      v51 = v23[11];
      v52 = *(double *)(v51 + 16);
      v53 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v43, *(double *)v51), _Q17, *(float64x2_t *)v51, 1), v48, v52);
      _D25 = *(_QWORD *)(v51 + 8);
      __asm { FMLA            D27, D25, V19.D[1] }
      _Q19.f64[0] = _D27 + _Q7.f64[0] * v52;
      *(_QWORD *)&_Q17.f64[1] = v50.i64[0];
      v50.i64[0] = *(_QWORD *)&_Q7.f64[0];
      _Q7.f64[1] = v72;
      *(_QWORD *)&_Q7.f64[0] = *(_OWORD *)&vnegq_f64(_Q19);
      v56 = vmlaq_n_f64(vmulq_n_f64(v43, v31.f64[0]), _Q17, v33.f64[0]);
      v57 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)v44, v31.f64[0]), (float64x2_t)v50.u64[1], v33.f64[0]);
      v58 = vmlaq_laneq_f64(vmulq_laneq_f64(v43, v31, 1), _Q17, v33, 1);
      v59 = vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)v44, v31, 1), (float64x2_t)v50.u64[1], v33, 1);
      *(_QWORD *)&v33.f64[0] = *(_OWORD *)&vnegq_f64(v47);
      v60 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(v56, v48, _Q5.f64[0]), (float64x2_t)0, v53);
      v61 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(v57, (float64x2_t)v50.u64[0], _Q5.f64[0]), (float64x2_t)0, _Q7);
      v62 = (int64x2_t)vmlsq_f64(vmlaq_laneq_f64(v58, v48, _Q5, 1), (float64x2_t)0, v53);
      v63 = (int64x2_t)vmlaq_f64(vmlaq_laneq_f64(v59, (float64x2_t)v50.u64[0], _Q5, 1), (float64x2_t)0, _Q7);
      v64 = (int64x2_t)vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v45, _Q17, v32), v48, v34), (float64x2_t)0, v53);
      _Q23 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v46, (float64x2_t)v50.u64[1], v32), (float64x2_t)v50.u64[0], v34), (float64x2_t)0, _Q7);
      _Q2 = vsubq_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v43, v33.f64[0]), _Q17, v47, 1), v48, _Q0.f64[0], 0), v53);
      _Q0 = (int64x2_t)vaddq_f64(_Q7, vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)v44, v33.f64[0]), (float64x2_t)v50.u64[1], v47, 1), (float64x2_t)v50.u64[0], _Q0.f64[0], 0));
      v68 = (float64x2_t)vzip2q_s64(v60, v62);
      v69 = vextq_s8((int8x16_t)v68, (int8x16_t)vdupq_laneq_s64(v64, 1), 8uLL);
      *(_QWORD *)&_Q7.f64[0] = vdupq_lane_s64(*(uint64_t *)&v68.f64[0], 0).u64[0];
      *(_QWORD *)&_Q7.f64[1] = v69.i64[0];
      *(_QWORD *)&_Q17.f64[0] = v64.i64[1];
      __asm
      {
        FMLS            D5, D17, V2.D[1]
        FMLS            D5, D23, V0.D[0]
      }
      _Q5.f64[1] = 1.0;
      v70 = v23[13];
      v73 = *((_OWORD *)v23 + 1);
      v74 = v29;
      v75 = (float64x2_t)vzip1q_s64(v60, v62);
      v85 = v64;
      v71 = vzip2q_s64(v64, (int64x2_t)_Q2);
      v64.i64[1] = *(_QWORD *)&_Q2.f64[0];
      v76 = v64;
      v77 = v68;
      v78 = v71;
      v79 = (float64x2_t)vzip1q_s64(v61, v63);
      v80 = vzip1q_s64(_Q23, _Q0);
      v81 = v60;
      v82 = v61;
      v83 = v62;
      v84 = v63;
      v86 = _Q23;
      v88 = _Q0;
      v87 = _Q2;
      v92 = v69.u64[1];
      v93 = v79;
      v90 = v64.u64[0];
      v91 = _Q7;
      v94 = _Q23.u64[0];
      v95 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v75, vnegq_f64(_Q2).f64[0]), v68, _Q2, 1), v79, *(double *)_Q0.i64, 0);
      v96 = _Q5;
      v89 = v75;
      v97 = v70;
      sub_20F28CB6C((uint64_t)v4, (uint64_t *)&v73, (uint64_t)&v73);
      v23 = (uint64_t *)*v23;
    }
    while (v23);
  }
}

_QWORD *sub_20F38F568(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C9FE598;
  v2 = a1[159];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  return sub_20F38F5B0(a1);
}

_QWORD *sub_20F38F5B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = off_24C9FE6C8;
  v2 = a1[153];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[150];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[147];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  *a1 = &unk_24C9FE788;
  sub_20F394278(a1 + 76);
  v5 = (void *)a1[73];
  if (v5)
  {
    a1[74] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[70];
  if (v6)
  {
    a1[71] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[66];
  if (v7)
  {
    a1[67] = v7;
    operator delete(v7);
  }
  return sub_20F393100(a1);
}

void sub_20F38F674(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v5, "DenseHessian");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_20F38F740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F38F77C(uint64_t a1)
{
  float64x2_t v4;
  std::mutex *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  char **v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unsigned int v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t i;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  size_t v82;
  unsigned int v83;
  void *v84;
  size_t v85;
  unsigned int *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int *j;
  unsigned int *v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  char **v100;
  unint64_t v101;
  unint64_t k;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  char **v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  size_t v122;
  unint64_t v123;
  char *v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  char *v130;
  char *v131;
  unint64_t v132;
  int64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  float64_t v137;
  void *v138;
  int64_t v139;
  unsigned int v140;
  char *v141;
  float64_t v142;
  float64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  _OWORD *v147;
  __int128 *v148;
  uint64_t v149;
  __int128 v150;
  int v151;
  char *v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  size_t v157;
  uint64_t v158;
  unsigned int *v159;
  unint64_t v160;
  unsigned int *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _BYTE *v167;
  unsigned int *v168;
  int64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int *v173;
  _OWORD *v174;
  unsigned int *v175;
  uint64_t v176;
  __int128 v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  int64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  _BYTE *v192;
  uint64_t *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  _OWORD *v199;
  __int128 *v200;
  uint64_t v201;
  __int128 v202;
  double v203;
  unint64_t v204;
  _DWORD *v205;
  int v206;
  uint64_t v207;
  unsigned int v208;
  unint64_t v209;
  unint64_t v210;
  size_t v211;
  char *v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  size_t v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  int64x2_t v229;
  _QWORD *v230;
  _QWORD *v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  std::__shared_weak_count *v236;
  unint64_t *p_shared_owners;
  unint64_t v238;
  _QWORD *v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  void *v263;
  char *v264;
  void *v265;
  unint64_t v266;
  char *v267;
  int *v268;
  int *v269;
  uint64_t v270;
  int v271;
  unint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  _BYTE *v280;
  _DWORD *v281;
  int64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  _OWORD *v287;
  char *v288;
  uint64_t v289;
  __int128 v290;
  int v291;
  unsigned int *v292;
  unsigned int *v293;
  unsigned int *v294;
  unsigned int *v295;
  unsigned int v296;
  unint64_t v297;
  _DWORD *v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  char *v302;
  char *v303;
  char *v304;
  uint64_t v305;
  unsigned int v306;
  int v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unsigned int *v311;
  unsigned int *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unint64_t v319;
  int32x4_t *v320;
  int32x4_t *v321;
  unint64_t v322;
  uint64_t v323;
  int32x4_t *v324;
  uint64_t v325;
  int32x4_t v326;
  int32x4_t *v327;
  int32x4_t v328;
  int32x4_t v329;
  uint64_t v330;
  unint64_t v331;
  _DWORD *v332;
  unint64_t v333;
  _DWORD *v334;
  _DWORD *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int v339;
  uint64_t v340;
  void *v341;
  uint64_t v342;
  uint64_t v343;
  double v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  size_t v348;
  uint64_t v349;
  _DWORD *v350;
  _DWORD *v351;
  unsigned int v352;
  uint64_t v353;
  int v354;
  char v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void **v361;
  uint64_t v362;
  unsigned int v363;
  unsigned int v364;
  unint64_t v365;
  size_t v366;
  unsigned int v367;
  uint64_t v368;
  void **v369;
  unint64_t v370;
  void *v371;
  int v372;
  size_t v373;
  _DWORD *v374;
  _DWORD *v375;
  unsigned int v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  unsigned int *v380;
  unsigned int *v381;
  int v382;
  int v383;
  unsigned int *v384;
  unsigned int v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v392;
  uint64_t v393;
  unsigned int *v394;
  uint64_t v395;
  int v396;
  int v397;
  uint64_t v398;
  unsigned int v399;
  float64x2_t *v400;
  int v401;
  uint64_t v402;
  float64x2_t *v403;
  double v409;
  long double v410;
  long double v411;
  int v412;
  uint64_t v413;
  char *v414;
  char *v415;
  double *v416;
  uint64_t v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int **v441;
  void **v442;
  _QWORD *v443;
  uint64_t v444;
  int v445;
  char **v446;
  int v447[2];
  int v448[2];
  uint64_t v449;
  std::mutex *v450;
  char **v451;
  unsigned int **v452;
  char **v453;
  uint64_t v454;
  float64x2_t v455;
  __n128 v456;
  void *__dst[2];
  unsigned int v458;
  uint64_t v459;
  float64x2_t v460;
  float64x2_t v461;
  void *__p;
  _QWORD *v463;
  char *v464;
  uint64_t v465;
  uint64_t v466;
  int v467;
  std::mutex v468;
  uint64_t v469;

  v469 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  v454 = a1 + 608;
  v5 = *(std::mutex **)(a1 + 800);
  v6 = *(_QWORD *)(a1 + 792);
  if (*(_BYTE *)(a1 + 192))
    goto LABEL_430;
  v449 = *(_QWORD *)(a1 + 792);
  v450 = *(std::mutex **)(a1 + 800);
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 193))
    goto LABEL_289;
  if (*(_DWORD *)(a1 + 332) == 1)
    v7 = 3;
  else
    v7 = 1;
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 24))(v454) + 152))
    goto LABEL_7;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 24))(v454);
  v9 = (char **)sub_20F3944B8(v8);
  v10 = v9;
  if ((char **)(a1 + 856) != v9)
    sub_20E867E00((_QWORD *)(a1 + 856), *v9, v9[1], (v9[1] - *v9) >> 2);
  v11 = *(char **)(a1 + 856);
  v12 = *(char **)(a1 + 864);
  if (v11 != v12)
  {
    v446 = (char **)(a1 + 904);
    sub_20E867E00((_QWORD *)(a1 + 904), v11, v12, (v12 - v11) >> 2);
    sub_20F2B5CD8((char **)(a1 + 904), v10 + 3);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 40))(v454);
    v451 = (char **)(a1 + 880);
    if (a1 + 880 != v13 + 152)
      sub_20E867E00(v451, *(char **)(v13 + 152), *(char **)(v13 + 160), (uint64_t)(*(_QWORD *)(v13 + 160) - *(_QWORD *)(v13 + 152)) >> 2);
    v14 = *(char **)(a1 + 880);
    v15 = *(char **)(a1 + 888);
    if (v14 == v15)
    {
      v15 = *(char **)(a1 + 880);
    }
    else
    {
      v16 = *(char **)(a1 + 912);
      v17 = *v446;
      v18 = *(char **)(a1 + 880);
      v19 = v18;
      while (v17 != v16)
      {
        v20 = *(_DWORD *)v19;
        if (*(_DWORD *)v19 >= *(_DWORD *)v17)
        {
          v19 += 4 * (*(_DWORD *)v17 >= v20);
          v17 += 4;
          if (v19 == v15)
            goto LABEL_32;
        }
        else
        {
          *(_DWORD *)v18 = v20;
          v18 += 4;
          v19 += 4;
          if (v19 == v15)
            goto LABEL_32;
        }
      }
      if (v19 == v18)
        goto LABEL_34;
      v28 = v15 - v19;
      memmove(v18, v19, v15 - v19);
      v18 += v28;
      v15 = *(char **)(a1 + 888);
      v14 = *(char **)(a1 + 880);
LABEL_32:
      if (v18 != v15)
      {
        v15 = v18;
        *(_QWORD *)(a1 + 888) = v18;
      }
    }
LABEL_34:
    sub_20E867E00(v446, v14, v15, (v15 - v14) >> 2);
    sub_20F2B5CD8(v446, (char **)(a1 + 856));
    v29 = (*(_QWORD *)(a1 + 888) - *(_QWORD *)(a1 + 880)) >> 2;
    *(_DWORD *)(a1 + 632) = v29;
    v30 = v29;
    if (*(_QWORD *)(a1 + 624) < (unint64_t)v29)
    {
      v31 = *(_QWORD *)(a1 + 616);
      if (v31)
        MEMORY[0x212BC6368](v31, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 616) = 0;
      v32 = (8 * v30 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 624) = v32 >> 3;
      *(_QWORD *)(a1 + 616) = operator new(v32, (std::align_val_t)0x20uLL);
    }
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 24))(v454);
    v34 = *(_DWORD **)(a1 + 880);
    v35 = *(_DWORD **)(a1 + 888);
    if (v34 != v35)
    {
      v36 = 0;
      v37 = *(_QWORD *)(v33 + 8);
      do
      {
        v37 -= 16;
        do
        {
          v38 = *(_DWORD *)(v37 + 16);
          v37 += 16;
        }
        while (*v34 != v38);
        *(_QWORD *)(*(_QWORD *)(a1 + 616) + 8 * v36++) = *(_QWORD *)(*(_QWORD *)(v37 + 8) + 32);
        ++v34;
      }
      while (v34 != v35);
    }
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 24))(v454);
    v41 = *(_QWORD *)(v39 + 8);
    v40 = *(_QWORD *)(v39 + 16);
    v42 = *(_DWORD **)(a1 + 904);
    v43 = *(_DWORD **)(a1 + 912);
    _ZF = v41 == v40 || v42 == v43;
    if (!_ZF)
    {
      v45 = 0;
      do
      {
        v46 = *(_QWORD *)(v41 + 8);
        if (*v42 == *(_DWORD *)v41)
        {
          if (*(_BYTE *)(v46 + 20))
            v47 = v45;
          else
            v47 = -1;
          v45 += *(unsigned __int8 *)(v46 + 20);
          ++v42;
        }
        else
        {
          v47 = -1;
        }
        *(_DWORD *)v46 = v47;
        v41 += 16;
      }
      while (v41 != v40 && v42 != v43);
    }
    if (v41 != v40)
    {
      v48 = v40 - v41 - 16;
      if (v48 < 0x10)
      {
        v49 = v41;
        do
        {
LABEL_62:
          **(_DWORD **)(v49 + 8) = -1;
          v49 += 16;
        }
        while (v49 != v40);
        goto LABEL_63;
      }
      v50 = (v48 >> 4) + 1;
      v49 = v41 + 16 * (v50 & 0x1FFFFFFFFFFFFFFELL);
      v51 = (_DWORD **)(v41 + 24);
      v52 = v50 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        v53 = *(v51 - 2);
        v54 = *v51;
        v51 += 4;
        *v53 = -1;
        *v54 = -1;
        v52 -= 2;
      }
      while (v52);
      if (v50 != (v50 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_62;
    }
LABEL_63:
    v55 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 40))(v454);
    sub_20F2B5E9C(v55, v446);
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 40))(v454);
    v443 = (_QWORD *)(a1 + 856);
    v57 = *(unsigned int *)(v56 + 44);
    if ((_DWORD)v57)
    {
      for (i = 0; i < v57; ++i)
      {
        v60 = (uint64_t *)(*(_QWORD *)(v56 + 120) + 24 * i);
        v59 = *v60;
        v61 = v60[1];
        if (*v60 != v61)
        {
          v62 = *(_QWORD *)(v56 + 80);
          v63 = *(_QWORD *)(v56 + 88);
          v64 = *(_QWORD *)(v56 + 112);
          do
          {
            v65 = ((v63 - v62) << 6) - 1;
            if (v63 == v62)
              v65 = 0;
            v66 = *(_QWORD *)(v56 + 104) + v64;
            if (v65 == v66)
            {
              sub_20EDB36DC(v56 + 72);
              v62 = *(_QWORD *)(v56 + 80);
              v63 = *(_QWORD *)(v56 + 88);
              v66 = *(_QWORD *)(v56 + 112) + *(_QWORD *)(v56 + 104);
            }
            *(_QWORD *)(*(_QWORD *)(v62 + ((v66 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v66 & 0x1FF)) = *(_QWORD *)(v59 + 8);
            v64 = *(_QWORD *)(v56 + 112) + 1;
            *(_QWORD *)(v56 + 112) = v64;
            v59 += 16;
          }
          while (v59 != v61);
          v59 = *v60;
          v57 = *(unsigned int *)(v56 + 44);
        }
        v60[1] = v59;
      }
    }
    v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 40))(v454);
    v69 = *(unsigned int *)(v67 + 16);
    if ((_DWORD)v69)
      bzero(*(void **)v67, 8 * v69);
    if (((*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) & 0x3FFFFFFFCLL) != 0)
    {
      v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 40))(v454);
      v68.n128_f64[0] = sub_20F2B6060(v70, a1 + 640, (char **)(a1 + 928), (_QWORD *)(a1 + 952));
    }
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v454 + 16))(v454, v7, v68);
    v71 = *(unsigned __int8 *)(a1 + 816);
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 40))(v454);
    v73 = a1 + 1024;
    v439 = a1 + 1024;
    v440 = a1 + 1000;
    v441 = (unsigned int **)(a1 + 952);
    if (v71)
      sub_20F2B6634(v72, v443, v73, (unsigned int **)(a1 + 952));
    else
      v74.n128_f64[0] = sub_20F2B6404(v72, v443, v73, a1 + 1000, (unsigned int **)(a1 + 952));
    v75 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)(a1 + 608) + 40))(v454, v74);
    LODWORD(v460.f64[0]) = 1;
    sub_20F2B7B68(v443, v75 + 152, &v460, (uint64_t)v441);
    sub_20F2B7B68(v451, v75 + 152, &v460, a1 + 976);
    v76 = (void **)(a1 + 1048);
    v77 = (*(_QWORD *)(a1 + 960) - *(_QWORD *)(a1 + 952)) >> 3;
    v78 = (*(_QWORD *)(a1 + 984) - *(_QWORD *)(a1 + 976)) >> 3;
    *(_DWORD *)(a1 + 1064) = v77;
    *(_DWORD *)(a1 + 1068) = v78;
    v79 = v78 * (unint64_t)v77;
    v80 = v78;
    v81 = v77;
    if (*(_QWORD *)(a1 + 1056) < v79)
    {
      if (*v76)
        MEMORY[0x212BC6368](*v76, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 1048) = 0;
      v82 = (8 * v79 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 1056) = v82 >> 3;
      *(_QWORD *)(a1 + 1048) = operator new(v82, (std::align_val_t)0x20uLL);
      v81 = *(_DWORD *)(a1 + 1064);
      v80 = *(_DWORD *)(a1 + 1068);
    }
    v83 = v81 * v80;
    if (v83)
      bzero(*v76, 8 * v83);
    if (*(_DWORD *)(a1 + 1088) == (_DWORD)v78 && *(_DWORD *)(a1 + 1092) == (_DWORD)v77)
    {
      v84 = *(void **)(a1 + 1072);
    }
    else
    {
      *(_DWORD *)(a1 + 1088) = v78;
      *(_DWORD *)(a1 + 1092) = v77;
      v84 = *(void **)(a1 + 1072);
      if (*(_QWORD *)(a1 + 1080) < v79)
      {
        if (v84)
          MEMORY[0x212BC6368](v84, 0x1000C8000313F17);
        *(_QWORD *)(a1 + 1072) = 0;
        v85 = (8 * v79 + 31) & 0xFFFFFFFFFFFFFFE0;
        *(_QWORD *)(a1 + 1080) = v85 >> 3;
        v84 = operator new(v85, (std::align_val_t)0x20uLL);
        *(_QWORD *)(a1 + 1072) = v84;
        LODWORD(v78) = *(_DWORD *)(a1 + 1088);
        LODWORD(v77) = *(_DWORD *)(a1 + 1092);
      }
    }
    if ((_DWORD)v78 * (_DWORD)v77)
      bzero(v84, 8 * (v78 * v77));
    v86 = *(unsigned int **)(a1 + 952);
    v87 = *(unsigned int **)(a1 + 960);
    if (*(_QWORD *)(a1 + 976) != *(_QWORD *)(a1 + 984))
    {
      if (v86 == v87)
        goto LABEL_129;
      do
      {
        v88 = *(unsigned int **)(a1 + 976);
        v89 = *(unsigned int **)(a1 + 984);
        if (v88 != v89)
        {
          v91 = *(_QWORD *)(*(_QWORD *)(v75 + 120) + 24 * *v86);
          v90 = *(_QWORD *)(*(_QWORD *)(v75 + 120) + 24 * *v86 + 8);
          do
          {
            if (v91 == v90)
              break;
            v92 = *v88;
            while (*(_DWORD *)v91 < v92)
            {
              v91 += 16;
              if (v91 == v90)
                goto LABEL_99;
            }
            if (*(_DWORD *)v91 == v92)
              *(_QWORD *)(*(_QWORD *)(a1 + 1072) + 8 * (v88[1] + *(_DWORD *)(a1 + 1088) * v86[1])) = *(_QWORD *)(*(_QWORD *)(v75 + 48) + 8 * *(_QWORD *)(v91 + 8));
            if (v91 == v90)
              break;
            v88 += 2;
          }
          while (v88 != v89);
        }
LABEL_99:
        v86 += 2;
      }
      while (v86 != v87);
      v86 = *(unsigned int **)(a1 + 952);
      v87 = *(unsigned int **)(a1 + 960);
    }
    if (v86 != v87)
    {
      v93 = *(unsigned int **)(a1 + 976);
      for (j = *(unsigned int **)(a1 + 984); v93 != j; v93 += 2)
      {
        v95 = *(unsigned int **)(a1 + 952);
        v96 = *(unsigned int **)(a1 + 960);
        if (v95 != v96)
        {
          v98 = *(_QWORD *)(*(_QWORD *)(v75 + 120) + 24 * *v93);
          v97 = *(_QWORD *)(*(_QWORD *)(v75 + 120) + 24 * *v93 + 8);
          do
          {
            if (v98 == v97)
              break;
            v99 = *v95;
            while (*(_DWORD *)v98 < v99)
            {
              v98 += 16;
              if (v98 == v97)
                goto LABEL_116;
            }
            if (*(_DWORD *)v98 == v99)
              *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8 * (v95[1] + *(_DWORD *)(a1 + 1064) * v93[1])) = *(_QWORD *)(*(_QWORD *)(v75 + 48) + 8 * *(_QWORD *)(v98 + 8));
            if (v98 == v97)
              break;
            v95 += 2;
          }
          while (v95 != v96);
        }
LABEL_116:
        ;
      }
    }
LABEL_129:
    __p = (void *)(a1 + 1072);
    sub_20F2B809C(a1 + 1048, (uint64_t **)&__p);
    sub_20F2B5E9C((_QWORD *)(a1 + 640), v451);
    v100 = v10;
    v101 = *(unsigned int *)(a1 + 684);
    if ((_DWORD)v101)
    {
      for (k = 0; k < v101; ++k)
      {
        v104 = (uint64_t *)(*(_QWORD *)(a1 + 760) + 24 * k);
        v103 = *v104;
        v105 = v104[1];
        if (*v104 != v105)
        {
          v106 = *(_QWORD *)(a1 + 728);
          v107 = *(_QWORD *)(a1 + 720);
          v108 = *(_QWORD *)(a1 + 752);
          do
          {
            v109 = ((v106 - v107) << 6) - 1;
            if (v106 == v107)
              v109 = 0;
            v110 = *(_QWORD *)(a1 + 744) + v108;
            if (v109 == v110)
            {
              sub_20EDB36DC(a1 + 712);
              v107 = *(_QWORD *)(a1 + 720);
              v106 = *(_QWORD *)(a1 + 728);
              v110 = *(_QWORD *)(a1 + 752) + *(_QWORD *)(a1 + 744);
            }
            *(_QWORD *)(*(_QWORD *)(v107 + ((v110 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v110 & 0x1FF)) = *(_QWORD *)(v103 + 8);
            v108 = *(_QWORD *)(a1 + 752) + 1;
            *(_QWORD *)(a1 + 752) = v108;
            v103 += 16;
          }
          while (v103 != v105);
          v103 = *v104;
          v101 = *(unsigned int *)(a1 + 684);
        }
        v104[1] = v103;
      }
    }
    v111 = *(unsigned int *)(a1 + 656);
    if ((_DWORD)v111)
      bzero(*(void **)(a1 + 640), 8 * v111);
    v112 = *(unsigned __int8 *)(a1 + 816);
    v113 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 40))(v454);
    if (v112)
      sub_20F2B6634(v113, v451, a1 + 1096, v441);
    else
      v114.n128_f64[0] = sub_20F2B6404(v113, v451, a1 + 1096, a1 + 640, v441);
    if (*(_BYTE *)(a1 + 817))
    {
      LOBYTE(__p) = *(_BYTE *)(a1 + 816);
      v115 = *(_QWORD *)(a1 + 848);
      if (!v115)
        sub_20E86D37C();
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, uint64_t, __n128))(*(_QWORD *)v115 + 48))(v115, v439, v440, a1 + 1048, &__p, a1 + 1096, a1 + 640, v114) & 1) == 0)goto LABEL_7;
    }
    else if (!sub_20F2B67A0(v439, v440, a1 + 1048, *(_BYTE *)(a1 + 816) != 0, a1 + 1096, (unint64_t *)(a1 + 640)))
    {
LABEL_7:
      kdebug_trace();
LABEL_555:
      v336 = 1;
      goto LABEL_556;
    }
    sub_20F2B90DC(a1 + 672, (uint64_t *)(a1 + 1096), 0);
    v116 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 40))(v454);
    v452 = (unsigned int **)(a1 + 1144);
    sub_20F2B6B34(v116, v443, a1 + 1144);
    if (v446 != v100 + 6)
      sub_20E867E00(v446, v100[6], v100[7], (v100[7] - v100[6]) >> 2);
    v117 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 40))(v454);
    v118 = *(void **)(a1 + 1144);
    *(_QWORD *)(a1 + 1152) = v118;
    v119 = *(_QWORD *)(a1 + 904);
    v120 = *(_QWORD *)(a1 + 912);
    if (v119 == v120)
      goto LABEL_289;
    v121 = v117;
    v122 = v120 - v119;
    v123 = (v120 - v119) >> 2;
    if (v123 > (uint64_t)(*(_QWORD *)(a1 + 1160) - (_QWORD)v118) >> 2)
    {
      if ((v122 & 0x8000000000000000) != 0)
        goto LABEL_577;
      v124 = (char *)operator new(v122);
      *(_QWORD *)(a1 + 1144) = v124;
      *(_QWORD *)(a1 + 1152) = v124;
      *(_QWORD *)(a1 + 1160) = &v124[4 * v123];
      if (v118)
      {
        operator delete(v118);
        v123 = (uint64_t)(*(_QWORD *)(a1 + 912) - *(_QWORD *)(a1 + 904)) >> 2;
      }
    }
    v442 = (void **)(v121 + 152);
    v126 = *(_BYTE **)(v121 + 152);
    v125 = *(_BYTE **)(v121 + 160);
    v127 = (v125 - v126) >> 2;
    v128 = v127 + v123;
    if (v127 + v123 <= (uint64_t)(*(_QWORD *)(v121 + 168) - (_QWORD)v126) >> 2)
    {
      v130 = *(char **)(v121 + 160);
      v131 = *(char **)(v121 + 152);
      goto LABEL_191;
    }
    if (!(v128 >> 62))
    {
      v129 = operator new(4 * v128);
      v130 = &v129[4 * v127];
      v131 = v130;
      if (v125 == v126)
        goto LABEL_189;
      v132 = v125 - v126 - 4;
      if (v132 >= 0x2C)
      {
        v131 = &v129[4 * v127];
        if ((unint64_t)(v126 - v129) >= 0x20)
        {
          v144 = (v132 >> 2) + 1;
          v145 = 4 * (v144 & 0x7FFFFFFFFFFFFFF8);
          v146 = &v125[-v145];
          v131 = &v130[-v145];
          v147 = &v129[4 * v127 - 16];
          v148 = (__int128 *)(v125 - 16);
          v149 = v144 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v150 = *v148;
            *(v147 - 1) = *(v148 - 1);
            *v147 = v150;
            v147 -= 2;
            v148 -= 2;
            v149 -= 8;
          }
          while (v149);
          v125 = v146;
          if (v144 == (v144 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_189:
            *(_QWORD *)(v121 + 152) = v131;
            *(_QWORD *)(v121 + 160) = v130;
            *(_QWORD *)(v121 + 168) = &v129[4 * v128];
            if (v126)
            {
              operator delete(v126);
              v131 = *(char **)(v121 + 152);
              v130 = *(char **)(v121 + 160);
            }
LABEL_191:
            v152 = *(char **)(a1 + 904);
            *(_QWORD *)v447 = *(_QWORD *)(a1 + 912);
            if (v131 == v130)
            {
              v153 = 0;
            }
            else
            {
              v153 = 0;
              while (*(_DWORD *)v131 <= *(_DWORD *)v152)
              {
                v131 += 4;
                ++v153;
                if (v131 == v130)
                  goto LABEL_198;
              }
              v130 = v131;
            }
LABEL_198:
            v444 = v121;
            if (v152 == *(char **)v447)
            {
LABEL_199:
              v154 = *(_QWORD *)(a1 + 1144);
              v155 = *(_QWORD *)(a1 + 1152);
              if (v154 != v155)
              {
                v156 = v155 - v154;
                if (*(_QWORD *)(v121 + 40))
                {
                  sub_20F2B9E90(v121 + 32, v452, v156 >> 2);
                  sub_20F2B9FE8(v121 + 32, v452);
                }
                else
                {
                  (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)(v121 + 32) + 24))(v121 + 32, (unint64_t)v156 >> 2, (unint64_t)v156 >> 2);
                }
                __p = 0;
                v463 = 0;
                v464 = 0;
                v179 = *(unsigned int **)(a1 + 1152);
                v180 = *(unsigned int **)(a1 + 1144);
                v181 = (char *)v179 - (char *)v180;
                if (v179 != v180)
                {
                  if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_574:
                    sub_20E92CED8();
                  v182 = (char *)operator new(2 * v181);
                  __p = v182;
                  v463 = v182;
                  v464 = &v182[8 * (v181 >> 2)];
                  v121 = v444;
                  while (1)
                  {
                    while (1)
                    {
                      v184 = *v180;
                      v185 = (char *)__p;
                      if (__p == v182 || *((_DWORD *)v182 - 1) != (_DWORD)v184)
                        break;
                      *((_DWORD *)v182 - 1) = v184 + 1;
                      if (++v180 == v179)
                        goto LABEL_263;
                    }
                    v186 = (v184 + 1);
                    if (v182 < v464)
                    {
                      *(_QWORD *)v182 = v184 | (v186 << 32);
                      v183 = (uint64_t)(v182 + 8);
                      goto LABEL_232;
                    }
                    v187 = v182 - (_BYTE *)__p;
                    v188 = (v182 - (_BYTE *)__p) >> 3;
                    v189 = v188 + 1;
                    if ((unint64_t)(v188 + 1) >> 61)
                      goto LABEL_574;
                    v190 = v464 - (_BYTE *)__p;
                    if ((v464 - (_BYTE *)__p) >> 2 > v189)
                      v189 = v190 >> 2;
                    v191 = (unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v189;
                    if (!v191)
                      break;
                    if (v191 >> 61)
                      sub_20E877A38();
                    v192 = operator new(8 * v191);
                    v193 = (uint64_t *)&v192[8 * v188];
                    *v193 = v184 | (v186 << 32);
                    v183 = (uint64_t)(v193 + 1);
                    if (v185 == v182)
                    {
LABEL_253:
                      v121 = v444;
                      __p = v193;
                      v464 = &v192[8 * v191];
                      if (v182)
                        goto LABEL_254;
LABEL_232:
                      v463 = (_QWORD *)v183;
                      v182 = (char *)v183;
                      if (++v180 == v179)
                        goto LABEL_263;
                    }
                    else
                    {
LABEL_247:
                      if ((unint64_t)(v187 - 8) < 0x168
                        || (v196 = (v182 - 8 - v185) & 0xFFFFFFFFFFFFFFF8, &v192[v187 - 8 - v196] > &v192[v187 - 8])
                        || &v182[-v196 - 8] > v182 - 8
                        || (unint64_t)(v185 - v192) < 0x20)
                      {
                        v194 = v182;
                        v121 = v444;
                        do
                        {
LABEL_249:
                          v195 = *((_QWORD *)v194 - 1);
                          v194 -= 8;
                          *--v193 = v195;
                        }
                        while (v194 != v185);
                        goto LABEL_250;
                      }
                      v197 = ((unint64_t)(v187 - 8) >> 3) + 1;
                      v198 = 8 * (v197 & 0x3FFFFFFFFFFFFFFCLL);
                      v194 = &v182[-v198];
                      v193 = (uint64_t *)((char *)v193 - v198);
                      v199 = &v192[8 * v188 - 16];
                      v200 = (__int128 *)(v182 - 16);
                      v201 = v197 & 0x3FFFFFFFFFFFFFFCLL;
                      v121 = v444;
                      do
                      {
                        v202 = *v200;
                        *(v199 - 1) = *(v200 - 1);
                        *v199 = v202;
                        v199 -= 2;
                        v200 -= 2;
                        v201 -= 4;
                      }
                      while (v201);
                      if (v197 != (v197 & 0x3FFFFFFFFFFFFFFCLL))
                        goto LABEL_249;
LABEL_250:
                      v182 = (char *)__p;
                      __p = v193;
                      v464 = &v192[8 * v191];
                      if (!v182)
                        goto LABEL_232;
LABEL_254:
                      operator delete(v182);
                      v463 = (_QWORD *)v183;
                      v182 = (char *)v183;
                      if (++v180 == v179)
                      {
LABEL_263:
                        v203 = *(double *)&__p;
                        goto LABEL_265;
                      }
                    }
                  }
                  v192 = 0;
                  v193 = (uint64_t *)(8 * v188);
                  *(_QWORD *)(8 * v188) = v184 | (v186 << 32);
                  v183 = 8 * v188 + 8;
                  if (v185 != v182)
                    goto LABEL_247;
                  goto LABEL_253;
                }
                v203 = 0.0;
                v182 = 0;
LABEL_265:
                v204 = (unint64_t)&v182[-*(_QWORD *)&v203];
                if (((unint64_t)&v182[-*(_QWORD *)&v203] & 0x7FFFFFFF0) != 0)
                {
                  v205 = (_DWORD *)(*(_QWORD *)&v203 + 8);
                  v206 = **(_DWORD **)&v203;
                  v207 = (v204 >> 3) - 1;
                  do
                  {
                    v206 += *v205 - *(v205 - 1);
                    *v205 = v206;
                    v205 += 2;
                    --v207;
                  }
                  while (v207);
                }
                v208 = *(_DWORD *)(v121 + 24);
                v209 = v208 + ((*(_QWORD *)(a1 + 1152) - *(_QWORD *)(a1 + 1144)) >> 2);
                v210 = *(_QWORD *)(v121 + 8);
                if (v209 <= v210)
                {
                  if ((v204 & 0x7FFFFFFF8) != 0)
                  {
                    v220 = *(_QWORD *)v121;
                    v221 = (v204 >> 3) - 1;
                    do
                    {
                      v222 = v221;
                      v223 = *(unsigned int *)(*(_QWORD *)&v203 + 8 * v221);
                      v157 = 8 * v208 - 8 * v223;
                      if (8 * v208 != 8 * v223)
                        memmove((void *)(v220 + 8 * *(unsigned int *)(*(_QWORD *)&v203 + 8 * v221 + 4)), (const void *)(*(_QWORD *)v121 + 8 * *(unsigned int *)(v121 + 28) + 8 * v223), v157);
                      --v221;
                      v208 = v223;
                    }
                    while (v222);
                    v210 = *(_QWORD *)(v121 + 8);
                  }
                  *(_DWORD *)(v121 + 16) = v209;
                  if (v210 < v209)
                  {
                    if (*(_QWORD *)v121)
                      MEMORY[0x212BC6368](*(_QWORD *)v121, 0x1000C8000313F17, v157);
                    v224 = (8 * v209 + 31) & 0xFFFFFFFE0;
                    *(_QWORD *)v121 = 0;
                    *(_QWORD *)(v121 + 8) = v224 >> 3;
                    *(_QWORD *)v121 = operator new(v224, (std::align_val_t)0x20uLL);
                  }
                }
                else
                {
                  v212 = (char *)operator new((8* (v208 + ((*(_QWORD *)(a1 + 1152) - *(_QWORD *)(a1 + 1144)) >> 2))+ 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
                  v213 = *(_QWORD *)v121;
                  if ((v204 & 0x7FFFFFFF8) != 0)
                  {
                    v214 = v204 >> 3;
                    v215 = v213 + 8 * *(unsigned int *)(v444 + 28);
                    v216 = v214 - 1;
                    do
                    {
                      v217 = v216;
                      v218 = *(unsigned int *)(*(_QWORD *)&v203 + 8 * v216);
                      v219 = (char *)(v215 + 8 * v218);
                      v211 = 8 * v208 - 8 * v218;
                      if (&v219[8 * v208 + -8 * v218] != v219)
                        memmove(&v212[8 * *(unsigned int *)(*(_QWORD *)&v203 + 8 * v216 + 4)], v219, v211);
                      --v216;
                      v208 = v218;
                    }
                    while (v217);
                  }
                  v121 = v444;
                  *(_QWORD *)v444 = v212;
                  *(_QWORD *)(v444 + 8) = ((8 * v209 + 31) & 0xFFFFFFFE0uLL) >> 3;
                  *(_DWORD *)(v444 + 16) = v209;
                  if (v213)
                    MEMORY[0x212BC6368](v213, 0x1000C8000313F17, v211);
                }
                *(_DWORD *)(v121 + 24) += (*(_QWORD *)(a1 + 1152) - *(_QWORD *)(a1 + 1144)) >> 2;
                if (v203 != 0.0)
                {
                  v143 = v203;
                  goto LABEL_288;
                }
              }
              goto LABEL_289;
            }
            while (1)
            {
              if (v130 != *(char **)(v121 + 160) && *(_DWORD *)v152 == *(_DWORD *)v130)
                goto LABEL_204;
              v159 = *(unsigned int **)(a1 + 1152);
              v160 = *(_QWORD *)(a1 + 1160);
              if ((unint64_t)v159 >= v160)
                break;
              *v159 = v153;
              v158 = (uint64_t)(v159 + 1);
LABEL_203:
              *(_QWORD *)(a1 + 1152) = v158;
              v130 = sub_20EDB3C7C(v442, v130, v152);
              v152 += 4;
              v121 = v444;
LABEL_204:
              v130 += 4;
              ++v153;
              if (v152 == *(char **)v447)
                goto LABEL_199;
            }
            v161 = *v452;
            v162 = (char *)v159 - (char *)*v452;
            v163 = v162 >> 2;
            v164 = (v162 >> 2) + 1;
            if (v164 >> 62)
              goto LABEL_577;
            v165 = v160 - (_QWORD)v161;
            if (v165 >> 1 > v164)
              v164 = v165 >> 1;
            if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
              v166 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v166 = v164;
            if (v166)
            {
              if (v166 >> 62)
LABEL_573:
                sub_20E877A38();
              v167 = operator new(4 * v166);
              v168 = (unsigned int *)&v167[4 * v163];
              *v168 = v153;
              v158 = (uint64_t)(v168 + 1);
              v169 = (char *)v159 - (char *)v161;
              if (v159 == v161)
                goto LABEL_225;
            }
            else
            {
              v167 = 0;
              v168 = (unsigned int *)(4 * v163);
              *(_DWORD *)(4 * v163) = v153;
              v158 = 4 * v163 + 4;
              v169 = (char *)v159 - (char *)v161;
              if (v159 == v161)
              {
LABEL_225:
                *(_QWORD *)(a1 + 1144) = v168;
                *(_QWORD *)(a1 + 1152) = v158;
                *(_QWORD *)(a1 + 1160) = &v167[4 * v166];
                if (v161)
                  operator delete(v161);
                goto LABEL_203;
              }
            }
            v170 = v169 - 4;
            if (v170 < 0x2C)
              goto LABEL_580;
            if ((unint64_t)((char *)v159 - &v167[v162]) < 0x20)
              goto LABEL_580;
            v171 = (v170 >> 2) + 1;
            v172 = 4 * (v171 & 0x7FFFFFFFFFFFFFF8);
            v173 = &v159[v172 / 0xFFFFFFFFFFFFFFFCLL];
            v168 = (unsigned int *)((char *)v168 - v172);
            v174 = &v167[4 * v163 - 16];
            v175 = v159 - 4;
            v176 = v171 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v177 = *(_OWORD *)v175;
              *(v174 - 1) = *((_OWORD *)v175 - 1);
              *v174 = v177;
              v174 -= 2;
              v175 -= 8;
              v176 -= 8;
            }
            while (v176);
            v159 = v173;
            if (v171 != (v171 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_580:
              do
              {
                v178 = *--v159;
                *--v168 = v178;
              }
              while (v159 != v161);
            }
            goto LABEL_225;
          }
        }
      }
      else
      {
        v131 = &v129[4 * v127];
      }
      do
      {
        v151 = *((_DWORD *)v125 - 1);
        v125 -= 4;
        *((_DWORD *)v131 - 1) = v151;
        v131 -= 4;
      }
      while (v125 != v126);
      goto LABEL_189;
    }
LABEL_577:
    sub_20E867F44();
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 40))(v454);
  if (a1 + 880 != v21 + 152)
    sub_20E867E00((_QWORD *)(a1 + 880), *(char **)(v21 + 152), *(char **)(v21 + 160), (uint64_t)(*(_QWORD *)(v21 + 160) - *(_QWORD *)(v21 + 152)) >> 2);
  v22 = *(char **)(a1 + 880);
  v23 = *(char **)(a1 + 888);
  if (v22 != v23)
  {
    v24 = v10[4];
    v25 = v10[3];
    v26 = *(char **)(a1 + 880);
    while (v25 != v24)
    {
      v27 = *(_DWORD *)v26;
      if (*(_DWORD *)v26 >= *(_DWORD *)v25)
      {
        v26 += 4 * (*(_DWORD *)v25 >= v27);
        v25 += 4;
        if (v26 == v23)
          goto LABEL_164;
      }
      else
      {
        *(_DWORD *)v22 = v27;
        v22 += 4;
        v26 += 4;
        if (v26 == v23)
          goto LABEL_164;
      }
    }
    if (v26 == v22)
      goto LABEL_166;
    v133 = v23 - v26;
    memmove(v22, v26, v23 - v26);
    v22 += v133;
    v23 = *(char **)(a1 + 888);
LABEL_164:
    if (v22 != v23)
      *(_QWORD *)(a1 + 888) = v22;
  }
LABEL_166:
  v460 = 0uLL;
  v461.f64[0] = 0.0;
  v134 = *(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792);
  if (v134)
  {
    sub_20E93DC84((uint64_t)&v460, v134 >> 2);
    v135 = *(char **)(a1 + 792);
    v136 = *(char **)(a1 + 800);
    v137 = v460.f64[0];
    v138 = *(void **)(a1 + 888);
    __p = *(void **)(a1 + 880);
    __dst[0] = *(void **)&v460.f64[0];
    if (v135 == v136)
    {
      v139 = 0;
    }
    else
    {
      while (__p != v138)
      {
        v140 = *(_DWORD *)v135;
        if (*(_DWORD *)v135 >= *(_DWORD *)__p)
        {
          v135 += 4 * (*(_DWORD *)__p >= v140);
          __p = (char *)__p + 4;
          if (v135 == v136)
            goto LABEL_173;
        }
        else
        {
          v141 = (char *)__dst[0];
          *(_DWORD *)__dst[0] = v140;
          v135 += 4;
          __dst[0] = v141 + 4;
          if (v135 == v136)
          {
LABEL_173:
            v139 = 0;
            v137 = *(double *)__dst;
            goto LABEL_178;
          }
        }
      }
      v137 = *(double *)__dst;
      v139 = v136 - v135;
      if (v136 != v135)
        memmove(__dst[0], v135, v136 - v135);
    }
  }
  else
  {
    v139 = 0;
    v137 = 0.0;
  }
LABEL_178:
  *(_QWORD *)&v142 = *(_QWORD *)&v137 + v139;
  if (*(_QWORD *)&v142 != *(_QWORD *)&v460.f64[1])
    v460.f64[1] = v142;
  __p = 0;
  v463 = 0;
  v464 = 0;
  sub_20F2B6B34((char **)(a1 + 640), &v460, (uint64_t)&__p);
  if (__p)
  {
    v463 = __p;
    operator delete(__p);
  }
  v143 = v460.f64[0];
  if (*(_QWORD *)&v460.f64[0])
  {
    v460.f64[1] = v460.f64[0];
LABEL_288:
    operator delete(*(void **)&v143);
  }
LABEL_289:
  sub_20F3944B8(a1 + 40);
  if (*(_BYTE *)(a1 + 193))
  {
    v225 = *(_QWORD **)(a1 + 144);
    v226 = *(_QWORD **)(a1 + 152);
    if (v225 == v226)
    {
      v227 = *(_QWORD **)(a1 + 144);
    }
    else
    {
      v227 = *(_QWORD **)(a1 + 152);
      v228 = v225 + 19;
      while (!*((_BYTE *)v228 - 8))
      {
        _ZF = v228 == v226;
        v228 += 19;
        if (_ZF)
          goto LABEL_310;
      }
      --*(_DWORD *)(*(v228 - 10) + 8);
      *(v228 - 10) = 0;
      v229 = (int64x2_t)xmmword_210378050;
      *(int64x2_t *)(a1 + 176) = vaddq_s64(*(int64x2_t *)(a1 + 176), (int64x2_t)xmmword_210378050);
      v230 = v228 - 19;
      if (v228 - 19 != v226)
      {
        if (v228 == v226)
        {
          v227 = v228 - 19;
        }
        else
        {
          v227 = v228 - 19;
          do
          {
            while (1)
            {
              v231 = v228;
              if (!*((_BYTE *)v230 + 296))
                break;
              --*(_DWORD *)(v230[28] + 8);
              v230[28] = 0;
              *(int64x2_t *)(a1 + 176) = vaddq_s64(*(int64x2_t *)(a1 + 176), v229);
              v228 += 19;
              v230 = v231;
              if (v231 + 19 == v226)
                goto LABEL_310;
            }
            *v227 = *v228;
            v227[1] = v230[20];
            *((_OWORD *)v227 + 1) = *(_OWORD *)(v230 + 21);
            v232 = *(_OWORD *)(v230 + 23);
            v233 = *(_OWORD *)(v230 + 25);
            v227[8] = v230[27];
            *((_OWORD *)v227 + 2) = v232;
            *((_OWORD *)v227 + 3) = v233;
            v227[9] = v230[28];
            *((_OWORD *)v227 + 5) = *(_OWORD *)(v230 + 29);
            *((_OWORD *)v227 + 6) = *(_OWORD *)(v230 + 31);
            v234 = v230[33];
            *((_BYTE *)v227 + 120) = *((_BYTE *)v230 + 272);
            v227[14] = v234;
            v235 = *(_OWORD *)(v230 + 35);
            v230[35] = 0;
            v230[36] = 0;
            v236 = (std::__shared_weak_count *)v227[17];
            *((_OWORD *)v227 + 8) = v235;
            if (v236)
            {
              p_shared_owners = (unint64_t *)&v236->__shared_owners_;
              do
                v238 = __ldaxr(p_shared_owners);
              while (__stlxr(v238 - 1, p_shared_owners));
              if (!v238)
              {
                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                std::__shared_weak_count::__release_weak(v236);
                v229 = (int64x2_t)xmmword_210378050;
              }
            }
            *((_BYTE *)v227 + 144) = *((_BYTE *)v230 + 296);
            v227 += 19;
            v228 = v231 + 19;
            v230 = v231;
          }
          while (v231 + 19 != v226);
        }
      }
    }
LABEL_310:
    v239 = *(_QWORD **)(a1 + 152);
    if (v227 != v239)
    {
      while (v239 != v227)
      {
        v240 = (std::__shared_weak_count *)*(v239 - 2);
        if (v240)
        {
          v241 = (unint64_t *)&v240->__shared_owners_;
          do
            v242 = __ldaxr(v241);
          while (__stlxr(v242 - 1, v241));
          if (!v242)
          {
            ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
            std::__shared_weak_count::__release_weak(v240);
          }
        }
        v239 -= 19;
      }
      *(_QWORD *)(a1 + 152) = v227;
    }
  }
  v244 = *(_QWORD *)(a1 + 48);
  v243 = *(_QWORD *)(a1 + 56);
  if (v243 == v244)
  {
    v246 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v245 = -16 - v243;
    v246 = *(_QWORD *)(a1 + 56);
    do
    {
      while (1)
      {
        while (1)
        {
          v247 = *(_QWORD *)(v246 - 8);
          v246 -= 16;
          if ((*(_BYTE *)(v247 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v247 + 4) = 0;
          v245 += 16;
          if (v246 == v244)
            goto LABEL_335;
        }
        sub_20F394BB8(a1 + 72, v247);
        v248 = v246 + 16;
        v244 = *(_QWORD *)(a1 + 48);
        v249 = *(_QWORD *)(a1 + 56);
        if (v246 + 16 != v249)
          break;
        v243 = v246;
        *(_QWORD *)(a1 + 56) = v246;
        v245 += 16;
        if (v246 == v244)
          goto LABEL_335;
      }
      v250 = v249 - v246 - 32;
      v243 = v246;
      if (v250 < 0x10)
        goto LABEL_581;
      v251 = (v250 >> 4) + 1;
      v252 = 16 * (v251 & 0x1FFFFFFFFFFFFFFELL);
      v243 = v246 + v252;
      v248 += v252;
      v253 = (((unint64_t)(v249 + v245) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v254 = v244 + 16 * ((v246 - v244) >> 4) + 24;
      do
      {
        v255 = *(_DWORD *)(v254 + 8);
        *(_DWORD *)(v254 - 24) = *(_DWORD *)(v254 - 8);
        *(_DWORD *)(v254 - 8) = v255;
        v256 = *(_QWORD *)(v254 + 16);
        *(_QWORD *)(v254 - 16) = *(_QWORD *)v254;
        *(_QWORD *)v254 = v256;
        v254 += 32;
        v253 -= 2;
      }
      while (v253);
      if (v251 != (v251 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_581:
        do
        {
          *(_DWORD *)v243 = *(_DWORD *)v248;
          *(_QWORD *)(v243 + 8) = *(_QWORD *)(v248 + 8);
          v243 += 16;
          v248 += 16;
        }
        while (v248 != v249);
      }
      *(_QWORD *)(a1 + 56) = v243;
      v245 += 16;
    }
    while (v246 != v244);
  }
LABEL_335:
  *(_WORD *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a1 + 248);
  if (v246 != v243)
  {
    v257 = 0;
    do
    {
      v258 = *(_QWORD *)(v246 + 8);
      if (*(_BYTE *)(v258 + 20))
        v259 = v257;
      else
        v259 = -1;
      v257 += *(unsigned __int8 *)(v258 + 20);
      *(_DWORD *)v258 = v259;
      v246 += 16;
    }
    while (v246 != v243);
  }
  v445 = *(_DWORD *)(a1 + 308);
  v260 = *(_QWORD **)(a1 + 520);
  v453 = (char **)(v260 + 19);
  v261 = *(_QWORD *)(a1 + 512);
  v262 = v260;
  if (*(_BYTE *)(v261 + 152))
  {
    v263 = (void *)v260[19];
    v260[20] = v263;
    if (v260[21] - (_QWORD)v263 <= 0xFFuLL)
    {
      v264 = (char *)operator new(0x100uLL);
      v260[19] = v264;
      v260[20] = v264;
      v260[21] = v264 + 256;
      if (v263)
        operator delete(v263);
    }
    if (*(_BYTE *)(v261 + 152))
    {
      v265 = (void *)v260[19];
      v260[20] = v265;
      v266 = ((*(_QWORD *)(v261 + 16) - *(_QWORD *)(v261 + 8)) >> 4);
      if (v266 > (uint64_t)(v260[21] - (_QWORD)v265) >> 2)
      {
        v267 = (char *)operator new(4 * v266);
        v260[19] = v267;
        v260[20] = v267;
        v260[21] = &v267[4 * v266];
        if (v265)
          operator delete(v265);
      }
      v269 = *(int **)(v261 + 8);
      v268 = *(int **)(v261 + 16);
      if (v269 != v268)
      {
        *(_QWORD *)v448 = *(_QWORD *)(v261 + 16);
        while (1)
        {
          if (!*(_BYTE *)(*((_QWORD *)v269 + 1) + 20))
            goto LABEL_353;
          v271 = *v269;
          v273 = (char *)v260[20];
          v272 = v260[21];
          if ((unint64_t)v273 >= v272)
            break;
          *(_DWORD *)v273 = v271;
          v270 = (uint64_t)(v273 + 4);
LABEL_352:
          v260[20] = v270;
LABEL_353:
          v269 += 4;
          if (v269 == v268)
            goto LABEL_376;
        }
        v274 = *v453;
        v275 = v273 - *v453;
        v276 = v275 >> 2;
        v277 = (v275 >> 2) + 1;
        if (v277 >> 62)
          goto LABEL_577;
        v278 = v272 - (_QWORD)v274;
        if (v278 >> 1 > v277)
          v277 = v278 >> 1;
        if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFFCLL)
          v279 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v279 = v277;
        if (v279)
        {
          if (v279 >> 62)
            goto LABEL_573;
          v280 = operator new(4 * v279);
          v281 = &v280[4 * v276];
          *v281 = v271;
          v270 = (uint64_t)(v281 + 1);
          v282 = v273 - v274;
          if (v273 == v274)
            goto LABEL_373;
        }
        else
        {
          v280 = 0;
          v281 = (_DWORD *)(4 * v276);
          *(_DWORD *)(4 * v276) = v271;
          v270 = 4 * v276 + 4;
          v282 = v273 - v274;
          if (v273 == v274)
          {
LABEL_373:
            v260[19] = v281;
            v260[20] = v270;
            v260[21] = &v280[4 * v279];
            if (v274)
              operator delete(v274);
            v268 = *(int **)v448;
            goto LABEL_352;
          }
        }
        v283 = v282 - 4;
        if (v283 < 0x2C)
          goto LABEL_582;
        if ((unint64_t)(v273 - v280 - v275) < 0x20)
          goto LABEL_582;
        v284 = (v283 >> 2) + 1;
        v285 = 4 * (v284 & 0x7FFFFFFFFFFFFFF8);
        v286 = &v273[-v285];
        v281 = (_DWORD *)((char *)v281 - v285);
        v287 = &v280[4 * v276 - 16];
        v288 = v273 - 16;
        v289 = v284 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v290 = *(_OWORD *)v288;
          *(v287 - 1) = *((_OWORD *)v288 - 1);
          *v287 = v290;
          v287 -= 2;
          v288 -= 32;
          v289 -= 8;
        }
        while (v289);
        v273 = v286;
        if (v284 != (v284 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_582:
          do
          {
            v291 = *((_DWORD *)v273 - 1);
            v273 -= 4;
            *--v281 = v291;
          }
          while (v273 != v274);
        }
        goto LABEL_373;
      }
    }
LABEL_376:
    v262 = *(_QWORD **)(a1 + 520);
  }
  sub_20F2B5E9C(v262, v453);
  v292 = *(unsigned int **)(a1 + 528);
  *(_QWORD *)(a1 + 536) = v292;
  *(_QWORD *)(a1 + 552) = 0;
  v293 = (unsigned int *)v260[19];
  v294 = (unsigned int *)v260[20];
  if (v293 == v294)
  {
    v295 = v292;
    v307 = v445;
    if (v445 != 1)
      goto LABEL_398;
LABEL_406:
    v313 = *(_QWORD *)(a1 + 528);
    v314 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v295 - v313) >> 2));
    if (v295 == (unsigned int *)v313)
      v315 = 0;
    else
      v315 = v314;
    sub_20F3966D8(v313, v295, v315, 1);
    v311 = *(unsigned int **)(a1 + 528);
    v312 = *(unsigned int **)(a1 + 536);
    if (v311 == v312)
      goto LABEL_412;
LABEL_410:
    v316 = 0;
    do
    {
      v317 = v311[2];
      v311[2] = v316;
      v318 = *v311;
      v311 += 3;
      v316 += v317;
      ++*(_QWORD *)(a1 + 552 + 8 * v318);
    }
    while (v311 != v312);
    goto LABEL_412;
  }
  do
  {
    while (1)
    {
      v296 = *v293;
      v297 = *(_QWORD *)(a1 + 544);
      if ((unint64_t)v292 >= v297)
        break;
      *v292 = 0;
      v292[1] = v296;
      v295 = v292 + 3;
      v292[2] = 1;
      *(_QWORD *)(a1 + 536) = v292 + 3;
      ++v293;
      v292 += 3;
      if (v293 == v294)
        goto LABEL_397;
    }
    v298 = *(_DWORD **)(a1 + 528);
    v299 = 0xAAAAAAAAAAAAAAABLL * (v292 - v298) + 1;
    if (v299 > 0x1555555555555555)
      sub_20E867F44();
    v300 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v297 - (_QWORD)v298) >> 2);
    if (2 * v300 > v299)
      v299 = 2 * v300;
    if (v300 >= 0xAAAAAAAAAAAAAAALL)
      v301 = 0x1555555555555555;
    else
      v301 = v299;
    if (v301)
    {
      if (v301 > 0x1555555555555555)
        goto LABEL_573;
      v302 = (char *)operator new(12 * v301);
    }
    else
    {
      v302 = 0;
    }
    v303 = &v302[4 * (v292 - v298)];
    *(_DWORD *)v303 = 0;
    *((_DWORD *)v303 + 1) = v296;
    *((_DWORD *)v303 + 2) = 1;
    v304 = v303;
    if (v292 != v298)
    {
      do
      {
        v305 = *(_QWORD *)(v292 - 3);
        v292 -= 3;
        v306 = v292[2];
        *(_QWORD *)(v304 - 12) = v305;
        v304 -= 12;
        *((_DWORD *)v304 + 2) = v306;
      }
      while (v292 != v298);
      v292 = *(unsigned int **)(a1 + 528);
    }
    *(_QWORD *)(a1 + 528) = v304;
    v295 = (unsigned int *)(v303 + 12);
    *(_QWORD *)(a1 + 536) = v303 + 12;
    *(_QWORD *)(a1 + 544) = &v302[12 * v301];
    if (v292)
      operator delete(v292);
    *(_QWORD *)(a1 + 536) = v295;
    ++v293;
    v292 = v295;
  }
  while (v293 != v294);
LABEL_397:
  v307 = v445;
  if (v445 == 1)
    goto LABEL_406;
LABEL_398:
  if (!v307)
  {
    v308 = *(_QWORD *)(a1 + 528);
    v309 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v295 - v308) >> 2));
    if (v295 == (unsigned int *)v308)
      v310 = 0;
    else
      v310 = v309;
    sub_20F394EB8(v308, v295, v310, 1);
  }
  v311 = *(unsigned int **)(a1 + 528);
  v312 = *(unsigned int **)(a1 + 536);
  if (v311 != v312)
    goto LABEL_410;
LABEL_412:
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 584);
  v319 = *(_QWORD *)(a1 + 552);
  if (!v319)
    goto LABEL_420;
  sub_20E93DC84(a1 + 560, v319);
  v320 = *(int32x4_t **)(a1 + 560);
  v321 = *(int32x4_t **)(a1 + 568);
  if (v320 == v321)
    goto LABEL_420;
  v322 = (char *)v321 - (char *)v320 - 4;
  if (v322 >= 0x1C)
  {
    v325 = (v322 >> 2) + 1;
    v323 = v325 & 0x7FFFFFFFFFFFFFF8;
    v324 = (int32x4_t *)((char *)v320 + 4 * (v325 & 0x7FFFFFFFFFFFFFF8));
    v326 = (int32x4_t)xmmword_210365350;
    v327 = v320 + 1;
    v328.i64[0] = 0x400000004;
    v328.i64[1] = 0x400000004;
    v329.i64[0] = 0x800000008;
    v329.i64[1] = 0x800000008;
    v330 = v325 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v327[-1] = v326;
      *v327 = vaddq_s32(v326, v328);
      v326 = vaddq_s32(v326, v329);
      v327 += 2;
      v330 -= 8;
    }
    while (v330);
    if (v325 == v323)
      goto LABEL_420;
  }
  else
  {
    LODWORD(v323) = 0;
    v324 = *(int32x4_t **)(a1 + 560);
  }
  do
  {
    v324->i32[0] = v323;
    v324 = (int32x4_t *)((char *)v324 + 4);
    LODWORD(v323) = v323 + 1;
  }
  while (v324 != v321);
LABEL_420:
  v331 = *(_QWORD *)(a1 + 552);
  v332 = *(_DWORD **)(a1 + 584);
  v333 = (uint64_t)(*(_QWORD *)(a1 + 592) - (_QWORD)v332) >> 2;
  if (v331 <= v333)
  {
    v6 = v449;
    v5 = v450;
    if (v331 < v333)
      *(_QWORD *)(a1 + 592) = &v332[v331];
  }
  else
  {
    sub_20E93DC84(a1 + 584, v331 - v333);
    v332 = *(_DWORD **)(a1 + 584);
    v6 = v449;
    v5 = v450;
  }
  v334 = *(_DWORD **)(a1 + 528);
  v335 = *(_DWORD **)(a1 + 536);
  while (v334 != v335)
  {
    if (!*v334)
      *v332++ = v334[2];
    v334 += 3;
  }
  kdebug_trace();
LABEL_430:
  if ((((unint64_t)v5 - v6) & 0x3FFFFFFFCLL) != 0)
    goto LABEL_431;
  v337 = *(_QWORD *)(a1 + 48);
  v338 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 192))
  {
    if (v337 == v338)
      goto LABEL_555;
    v339 = 0;
    do
    {
      v340 = *(_QWORD *)(v337 + 8);
      if ((*(_BYTE *)(v340 + 4) & 6) == 0)
        v339 += *(unsigned __int8 *)(v340 + 20);
      v337 += 16;
    }
    while (v337 != v338);
  }
  else
  {
    if (v337 == v338)
      goto LABEL_555;
    v355 = 0;
    v356 = 0;
    v339 = 0;
    do
    {
      v357 = *(_QWORD *)(v337 + 8);
      if ((*(_BYTE *)(v357 + 4) & 6) != 0)
      {
        v355 = 1;
        ++v356;
      }
      v339 += *(unsigned __int8 *)(v357 + 20);
      v337 += 16;
    }
    while (v337 != v338);
    if (v355)
    {
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
      v358 = *(_QWORD *)(a1 + 144);
      v359 = *(_QWORD *)(a1 + 152);
      if (v358 == v359)
      {
        if (v339 >= v356)
          v339 -= v356;
        else
          v339 = 0;
      }
      else
      {
        do
        {
          v360 = *(_QWORD *)(v358 + 72);
          if (*(_BYTE *)(v358 + 144) || (*(_BYTE *)(v360 + 4) & 6) != 0)
            sub_20F394A20(a1 + 272, v360);
          v358 += 152;
        }
        while (v358 != v359);
        v420 = (*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 2;
        if (v356 > v420)
          LODWORD(v420) = v356;
        _CF = v339 >= v420;
        v421 = v339 - v420;
        if (_CF)
          v339 = v421;
        else
          v339 = 0;
        v422 = *(_QWORD *)(a1 + 144);
        v423 = *(_QWORD *)(a1 + 152);
        while (v422 != v423)
        {
          v424 = *(_QWORD *)(v422 + 72);
          if (*(_BYTE *)(v422 + 144) || (*(_BYTE *)(v424 + 4) & 6) != 0)
            ++*(_DWORD *)(v424 + 8);
          v422 += 152;
        }
      }
    }
  }
  if (!v339)
    goto LABEL_555;
  if (*(_BYTE *)(a1 + 192) || (v425 = *(_QWORD *)(a1 + 48), v426 = *(_QWORD *)(a1 + 56), v425 == v426))
  {
LABEL_553:
    v427 = *(_QWORD *)(a1 + 184);
    goto LABEL_554;
  }
  while ((*(_BYTE *)(*(_QWORD *)(v425 + 8) + 4) & 6) == 0)
  {
    v425 += 16;
    if (v425 == v426)
      goto LABEL_553;
  }
  v430 = *(_QWORD *)(a1 + 144);
  v429 = *(_QWORD *)(a1 + 152);
  if (v430 == v429)
  {
    v427 = 0;
    goto LABEL_554;
  }
  v431 = v429 - v430 - 152;
  if (v431 >= 0x98)
  {
    v434 = 0;
    v435 = 0;
    v436 = v431 / 0x98 + 1;
    v433 = v430 + 152 * (v436 & 0x3FFFFFFFFFFFFFELL);
    v437 = v430 + 224;
    v438 = v436 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v437 - 152) + 4) & 6) == 0)
        ++v434;
      if ((*(_BYTE *)(*(_QWORD *)v437 + 4) & 6) == 0)
        ++v435;
      v437 += 304;
      v438 -= 2;
    }
    while (v438);
    v432 = v435 + v434;
    if (v436 == (v436 & 0x3FFFFFFFFFFFFFELL))
      goto LABEL_571;
  }
  else
  {
    v432 = 0;
    v433 = *(_QWORD *)(a1 + 144);
  }
  do
  {
    if ((*(_BYTE *)(*(_QWORD *)(v433 + 72) + 4) & 6) == 0)
      ++v432;
    v433 += 152;
  }
  while (v433 != v429);
LABEL_571:
  v427 = 2 * v432;
LABEL_554:
  if (v427 < v339)
    goto LABEL_555;
LABEL_431:
  if (!*(_BYTE *)(a1 + 297))
  {
    v341 = *(void **)(a1 + 384);
    v342 = *(_QWORD *)(a1 + 392) - (_QWORD)v341;
    if (v342 >= 1)
      bzero(v341, 8 * (((unint64_t)v342 >> 3) - ((unint64_t)v342 > 7)) + 8);
    v343 = *(unsigned int *)(a1 + 352);
    if ((_DWORD)v343)
      bzero(*(void **)(a1 + 336), 8 * v343);
    if (((*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) & 0x3FFFFFFFCLL) != 0)
    {
      kdebug_trace();
      v344 = sub_20F2B6060(a1 + 336, a1 + 640, (char **)(a1 + 928), (_QWORD *)(a1 + 952));
      v345 = (*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) >> 2;
      *(_DWORD *)(a1 + 1016) = v345;
      v346 = v345;
      if (*(_QWORD *)(a1 + 1008) < (unint64_t)v345)
      {
        v347 = *(_QWORD *)(a1 + 1000);
        if (v347)
          MEMORY[0x212BC6368](v347, 0x1000C8000313F17, v344);
        *(_QWORD *)(a1 + 1000) = 0;
        v348 = (8 * v346 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(a1 + 1008) = v348 >> 3;
        *(_QWORD *)(a1 + 1000) = operator new(v348, (std::align_val_t)0x20uLL);
      }
      v349 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v454 + 24))(v454);
      v350 = *(_DWORD **)(a1 + 792);
      v351 = *(_DWORD **)(a1 + 800);
      if (v350 != v351)
      {
        v352 = 0;
        v353 = *(_QWORD *)(v349 + 8);
        do
        {
          v353 -= 16;
          do
          {
            v354 = *(_DWORD *)(v353 + 16);
            v353 += 16;
          }
          while (*v350 != v354);
          *(_QWORD *)(*(_QWORD *)(a1 + 1000) + 8 * v352++) = *(_QWORD *)(*(_QWORD *)(v353 + 8) + 32);
          ++v350;
        }
        while (v350 != v351);
        if (((*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) & 0x3FFFFFFFCLL) != 0)
        {
          v361 = (void **)(a1 + 1024);
          v362 = *(_QWORD *)(a1 + 784);
          v363 = *(_DWORD *)(v362 + 8);
          v364 = *(_DWORD *)(v362 + 12);
          *(_DWORD *)(a1 + 1040) = v363;
          *(_DWORD *)(a1 + 1044) = v364;
          v365 = v364 * (unint64_t)v363;
          if (*(_QWORD *)(a1 + 1032) < v365)
          {
            if (*v361)
              MEMORY[0x212BC6368](*v361, 0x1000C8000313F17);
            *(_QWORD *)(a1 + 1024) = 0;
            v366 = (8 * v365 + 31) & 0xFFFFFFFFFFFFFFE0;
            *(_QWORD *)(a1 + 1032) = v366 >> 3;
            *(_QWORD *)(a1 + 1024) = operator new(v366, (std::align_val_t)0x20uLL);
            v363 = *(_DWORD *)(a1 + 1040);
            v364 = *(_DWORD *)(a1 + 1044);
          }
          v367 = v363 * v364;
          if (v367)
            bzero(*v361, 8 * v367);
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 672) + 64))(a1 + 672, a1 + 1024, 0);
          sub_20F20B6B0(a1 + 1024);
          v368 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 32))(v454);
          v369 = (void **)(a1 + 1120);
          v370 = *(unsigned int *)(a1 + 632);
          if ((_DWORD)v370 == *(_DWORD *)(a1 + 1136))
          {
            v371 = *v369;
          }
          else
          {
            *(_DWORD *)(a1 + 1136) = v370;
            v371 = *(void **)(a1 + 1120);
            if (*(_QWORD *)(a1 + 1128) < v370)
            {
              v372 = v370;
              if (v371)
              {
                MEMORY[0x212BC6368](v371, 0x1000C8000313F17);
                v372 = *(_DWORD *)(a1 + 1136);
              }
              *(_QWORD *)(a1 + 1120) = 0;
              v373 = (8 * v370 + 31) & 0xFFFFFFFE0;
              *(_QWORD *)(a1 + 1128) = v373 >> 3;
              v371 = operator new(v373, (std::align_val_t)0x20uLL);
              *v369 = v371;
              LODWORD(v370) = v372;
            }
          }
          if ((_DWORD)v370)
            bzero(v371, 8 * v370);
          v374 = *(_DWORD **)(a1 + 792);
          v375 = *(_DWORD **)(a1 + 800);
          if (v374 != v375)
          {
            v376 = 0;
            v377 = *(_QWORD *)(a1 + 616);
            v378 = *(_QWORD *)(v368 + 8);
            do
            {
              v378 -= 16;
              do
              {
                v379 = *(_DWORD *)(v378 + 16);
                v378 += 16;
              }
              while (*v374 != v379);
              *((double *)*v369 + v376) = *(double *)(*(_QWORD *)(v378 + 8) + 32) - *(double *)(v377 + 8 * v376);
              ++v376;
              ++v374;
            }
            while (v374 != v375);
            v380 = *(unsigned int **)(a1 + 792);
            v381 = *(unsigned int **)(a1 + 800);
            if (v380 != v381)
            {
              v382 = 0;
              v383 = 0;
              v384 = *(unsigned int **)(a1 + 488);
              do
              {
                if (*v384 < *v380)
                {
                  do
                  {
                    v385 = v384[1];
                    ++v384;
                    ++v382;
                  }
                  while (v385 < *v380);
                }
                v386 = *(_DWORD *)(a1 + 668) + v383;
                v387 = *(_QWORD *)(a1 + 1024);
                __dst[0] = (void *)vrev64_s32(*(int32x2_t *)(a1 + 1040));
                __dst[1] = (void *)(v387 + 8 * v386);
                v458 = v386;
                v388 = (*(_DWORD *)(a1 + 364) + v382);
                v389 = *(_QWORD *)(a1 + 336);
                v459 = *(_QWORD *)(v389 + 8 * v388);
                *(_QWORD *)&v460.f64[0] = &v459;
                v463 = __dst;
                v464 = (char *)(a1 + 1120);
                v465 = 0x3FF0000000000000;
                sub_20F2BF1EC(&v460.f64[1], (uint64_t)&__p);
                *(double *)(v389 + 8 * v388) = **(double **)&v460.f64[0] - v460.f64[1];
                ++v380;
                ++v383;
              }
              while (v380 != v381);
            }
          }
        }
      }
      kdebug_trace();
    }
    v390 = *(_QWORD *)(a1 + 520);
    __p = *(void **)(a1 + 512);
    v463 = (_QWORD *)(a1 + 560);
    v464 = (char *)(a1 + 8);
    v465 = v390;
    v466 = 0;
    v467 = 2;
    v468.__m_.__sig = 850045863;
    _Q0 = 0uLL;
    memset(v468.__m_.__opaque, 0, sizeof(v468.__m_.__opaque));
    v392 = *((_QWORD *)__p + 13);
    v393 = *((_QWORD *)__p + 14);
    if (v392 == v393)
    {
LABEL_532:
      std::mutex::~mutex(&v468);
      v336 = 0;
      *(_WORD *)(a1 + 297) = 1;
      goto LABEL_556;
    }
    while (1)
    {
      v395 = v392 + 72;
      v394 = *(unsigned int **)(v392 + 72);
      if ((v394[1] & 4) != 0)
        v396 = 1;
      else
        v396 = 2;
      if ((v396 & v467) == 0)
        goto LABEL_497;
      v397 = *((unsigned __int8 *)v394 + 20);
      if (*((_BYTE *)v394 + 20))
      {
        v398 = *v394;
        if ((_DWORD)v398 == -1)
          goto LABEL_497;
        v399 = *(_DWORD *)(*v463 + 4 * v398);
      }
      else
      {
        v399 = -1;
      }
      v400 = (float64x2_t *)(v392 + 96);
      v401 = sub_20FC6CE8C(v392 + 8, (uint64_t *)(v392 + 72), (float64x2_t *)(v392 + 96), (float64x2_t *)__dst, _Q0, _Q1, *(double *)&_D2, v4);
      *(_BYTE *)(v392 + 120) = v401;
      if (v401)
      {
        v402 = *(_QWORD *)(v392 + 128);
        if (v402)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v402 + 24))(v402, v392 + 96);
          v403 = *(float64x2_t **)(v392 + 128);
        }
        else
        {
          v403 = 0;
        }
        *(float64x2_t *)(v392 + 80) = *v400;
        v455 = *(float64x2_t *)(v392 + 96);
        _D1 = v455.f64[1];
        __asm { FMLA            D0, D1, V2.D[1] }
        v409 = *(double *)(a1 + 24);
        v410 = *(double *)(a1 + 32) * (*(double *)(a1 + 16) * _D0);
        v411 = v410 + 1.0;
        *(long double *)(v392 + 112) = v409 * log1p(v410);
        _Q1.f64[0] = sqrt(1.0 / v411);
        _Q0 = vmulq_n_f64(v455, _Q1.f64[0]);
        *(float64x2_t *)(v392 + 96) = _Q0;
        if (v403)
        {
          v456 = (__n128)_Q1;
          v412 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v403->f64[0] + 16))(v403);
          _Q0 = (float64x2_t)v456;
          if (*(_BYTE *)(*(_QWORD *)v395 + 20))
          {
            switch(v412)
            {
              case 0:
                v4 = vmulq_n_f64(v403[1], v456.n128_f64[0]);
                _Q1 = vmulq_n_f64(v403[2], v456.n128_f64[0]);
                _D2 = __dst[0];
                _Q0 = vmlaq_laneq_f64(vmulq_n_f64(v4, *(double *)__dst), _Q1, *(float64x2_t *)__dst, 1);
                goto LABEL_520;
              case 1:
                _Q1 = *(float64x2_t *)__dst;
                _Q0 = vmulq_f64(vmulq_n_f64(v403[1], v456.n128_f64[0]), *(float64x2_t *)__dst);
                goto LABEL_520;
              case 2:
                _Q0.f64[0] = v456.n128_f64[0] * v403[1].f64[0];
                goto LABEL_518;
              case 3:
LABEL_518:
                _Q1 = *(float64x2_t *)__dst;
                _Q0 = vmulq_n_f64(*(float64x2_t *)__dst, _Q0.f64[0]);
                goto LABEL_520;
              case 4:
                (*(void (**)(float64x2_t *__return_ptr, float64x2_t *, __n128))(*(_QWORD *)&v403->f64[0]
                                                                                         + 64))(&v460, v403, v456);
                _Q1 = v461;
                _D2 = __dst[0];
                _Q0 = vmlaq_laneq_f64(vmulq_n_f64(v460, *(double *)__dst), v461, *(float64x2_t *)__dst, 1);
                goto LABEL_520;
              default:
                break;
            }
          }
        }
        else if (*(_BYTE *)(*(_QWORD *)v395 + 20))
        {
          _Q0 = vmulq_n_f64(*(float64x2_t *)__dst, _Q1.f64[0]);
LABEL_520:
          *(float64x2_t *)__dst = _Q0;
        }
        if (!v397)
          goto LABEL_497;
        v413 = *(_QWORD *)(v390 + 120) + 24 * v399;
        v415 = *(char **)v413;
        v414 = *(char **)(v413 + 8);
        if (*(char **)v413 != v414)
        {
          while (*(_DWORD *)v415 < v399)
          {
            v415 += 16;
            if (v415 == v414)
              goto LABEL_530;
          }
        }
        if (v415 != v414)
        {
          if (*(_DWORD *)v415 == v399)
          {
            v416 = (double *)(*(_QWORD *)(v390 + 48) + 8 * *((_QWORD *)v415 + 1));
LABEL_531:
            _D2 = __dst[1];
            __asm { FMLA            D1, D2, V0.D[1] }
            *v416 = *v416 + _D1;
            v419 = 8 * (*(_DWORD *)(v390 + 28) + v399);
            *(void **)&_Q0.f64[1] = __dst[1];
            _Q1 = *v400;
            _Q1.f64[0] = *(float64_t *)(v392 + 104);
            __asm { FMLA            D2, D1, V0.D[1] }
            _Q0.f64[0] = *(double *)(*(_QWORD *)v390 + v419) - *(double *)&_D2;
            *(float64_t *)(*(_QWORD *)v390 + v419) = _Q0.f64[0];
            goto LABEL_497;
          }
          v414 = v415;
        }
LABEL_530:
        v416 = (double *)sub_20F2B4550((unint64_t *)(v390 + 32), (char **)v413, v399, v414);
        goto LABEL_531;
      }
      *(_QWORD *)(v392 + 112) = 0;
LABEL_497:
      v392 += 152;
      if (v392 == v393)
        goto LABEL_532;
    }
  }
  v336 = 0;
LABEL_556:
  kdebug_trace();
  return v336;
}

void sub_20F391FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  void *v36;

  if (v36)
  {
    a36 = (uint64_t)v36;
    operator delete(v36);
  }
  sub_20EDB3070((uint64_t)&a29);
  sub_20EDB3030((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3920C0(uint64_t a1, void **a2)
{
  char v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  size_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  double v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  double v46;
  double *v47;
  unsigned int v48;
  uint64_t v49;
  double v50;
  unint64_t v51;
  size_t v52;
  uint64_t v53;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = *(_QWORD *)(a1 + 480);
  v7 = *(_DWORD *)(v6 + 8);
  if ((v5 & 1) != 0)
  {
    v8 = *(_DWORD *)(v6 + 12);
    *(_DWORD *)(a1 + 1192) = v7;
    *(_DWORD *)(a1 + 1196) = v8;
    v9 = v8 * (unint64_t)v7;
    if (*(_QWORD *)(a1 + 1184) < v9)
    {
      v10 = *(_QWORD *)(a1 + 1176);
      if (v10)
        MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 1176) = 0;
      v11 = (8 * v9 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 1184) = v11 >> 3;
      *(_QWORD *)(a1 + 1176) = operator new(v11, (std::align_val_t)0x20uLL);
      v7 = *(_DWORD *)(a1 + 1192);
      v8 = *(_DWORD *)(a1 + 1196);
    }
    v12 = v7 * v8;
    if (v12)
      bzero(*(void **)(a1 + 1176), 8 * v12);
    v13 = *(unsigned int *)(a1 + 380);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = *(unsigned int **)(a1 + 584);
      do
      {
        v16 = *(_QWORD *)(a1 + 456) + 24 * v14;
        v17 = *(unsigned int **)v16;
        v18 = *(unsigned int **)(v16 + 8);
        if (v17 != v18)
        {
          do
          {
            v19 = *v15;
            v20 = *(_DWORD *)(*(_QWORD *)(a1 + 584) + 4 * *v17);
            if (*v15 <= v20)
              v21 = *(_DWORD *)(*(_QWORD *)(a1 + 584) + 4 * *v17);
            else
              v21 = *v15;
            if (v19 >= v20)
              v19 = *(_DWORD *)(*(_QWORD *)(a1 + 584) + 4 * *v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 8 * (v19 + *(_DWORD *)(a1 + 1192) * v21)) = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * *((_QWORD *)v17 + 1));
            v17 += 4;
          }
          while (v17 != v18);
          v13 = *(unsigned int *)(a1 + 380);
        }
        ++v14;
        ++v15;
      }
      while (v14 < v13);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1192) = v7;
    *(_DWORD *)(a1 + 1196) = v7;
    v22 = v7 * (unint64_t)v7;
    v23 = v7;
    if (*(_QWORD *)(a1 + 1184) < v22)
    {
      v24 = *(_QWORD *)(a1 + 1176);
      if (v24)
        MEMORY[0x212BC6368](v24, 0x1000C8000313F17);
      *(_QWORD *)(a1 + 1176) = 0;
      v25 = (8 * v22 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(a1 + 1184) = v25 >> 3;
      *(_QWORD *)(a1 + 1176) = operator new(v25, (std::align_val_t)0x20uLL);
      v23 = *(_DWORD *)(a1 + 1192);
      v7 = *(_DWORD *)(a1 + 1196);
    }
    v26 = v23 * v7;
    if (v26)
      bzero(*(void **)(a1 + 1176), 8 * v26);
    v27 = *(unsigned int *)(a1 + 380);
    if ((_DWORD)v27)
    {
      v28 = 0;
      v29 = *(unsigned int **)(a1 + 584);
      do
      {
        v30 = *(_QWORD *)(a1 + 456) + 24 * v28;
        v31 = *(unsigned int **)v30;
        v32 = *(unsigned int **)(v30 + 8);
        if (v31 != v32)
        {
          do
          {
            v33 = *v29;
            v34 = *(_DWORD *)(*(_QWORD *)(a1 + 584) + 4 * *v31);
            if (*v29 >= v34)
              v35 = *(_DWORD *)(*(_QWORD *)(a1 + 584) + 4 * *v31);
            else
              v35 = *v29;
            if (v33 <= v34)
              v33 = *(_DWORD *)(*(_QWORD *)(a1 + 584) + 4 * *v31);
            *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 8 * (v33 + *(_DWORD *)(a1 + 1192) * v35)) = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * *((_QWORD *)v31 + 1));
            v31 += 4;
          }
          while (v31 != v32);
          v27 = *(unsigned int *)(a1 + 380);
        }
        ++v28;
        ++v29;
      }
      while (v28 < v27);
    }
  }
  if (*(_BYTE *)(a1 + 312))
  {
    v36 = *(_DWORD *)(a1 + 328);
    if (v36 == 1)
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 160))(a1, a2);
      v43 = *(_DWORD *)(a1 + 1192);
      LODWORD(v44) = *(_DWORD *)(a1 + 1196);
      if (v44 >= v43)
        v44 = v43;
      else
        v44 = v44;
      if ((_DWORD)v44)
      {
        v45 = 0;
        v46 = *(double *)(a1 + 320);
        v47 = (double *)*a2;
        v48 = v43 + 1;
        v49 = *(_QWORD *)(a1 + 1176);
        do
        {
          v50 = *v47++;
          *(double *)(v49 + 8 * v45) = v46 * v50 + *(double *)(v49 + 8 * v45);
          v45 += v48;
          --v44;
        }
        while (v44);
      }
    }
    else if (!v36)
    {
      v37 = *(_DWORD *)(a1 + 1192);
      LODWORD(v38) = *(_DWORD *)(a1 + 1196);
      v38 = v38 >= v37 ? v37 : v38;
      if ((_DWORD)v38)
      {
        v39 = 0;
        v40 = *(double *)(a1 + 320);
        v41 = v37 + 1;
        v42 = *(_QWORD *)(a1 + 1176);
        do
        {
          *(double *)(v42 + 8 * v39) = v40 + *(double *)(v42 + 8 * v39);
          v39 += v41;
          --v38;
        }
        while (v38);
      }
    }
  }
  v51 = *(unsigned int *)(a1 + 1192);
  *((_DWORD *)a2 + 4) = v51;
  if ((unint64_t)a2[1] < v51)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v52 = (8 * v51 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v52 >> 3);
    *a2 = operator new(v52, (std::align_val_t)0x20uLL);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, a2);
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 56))(a1, a2))
  {
    v53 = 1;
  }
  else
  {
    v53 = 0;
    *(_BYTE *)(a1 + 301) = 0;
  }
  kdebug_trace();
  return v53;
}

void sub_20F39250C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  sub_20EDB4044((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20F392524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB4004((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20F392538(uint64_t a1)
{
  return a1 + 1200;
}

double sub_20F392540(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  double result;
  int v6;
  size_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  size_t v19;
  unsigned int v20;
  uint64_t v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  double *v26;
  unint64_t v27;
  double *v28;
  unint64_t v29;
  uint64_t v30;
  float64x2_t *v31;
  float64x2_t *v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  float64x2_t *v41;
  uint64_t i;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double *v48;
  double *v49;
  double v50;
  double v51;
  double *v52;
  uint64_t v53;
  float64x2_t *v54;
  float64x2_t *v55;
  float64x2_t v56;
  float64x2_t v57;
  double *v58;
  double v59;
  double v60;
  double v61;
  float64x2_t *v62;
  float64x2_t *v63;
  uint64_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t *v72;
  uint64_t v74;
  float64x2_t v75;
  float64x2_t v76;
  uint64_t v77;
  double *v78;
  double v79;

  if (((*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) & 0x3FFFFFFFCLL) == 0)
    return 0.0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 608) + 32))(a1 + 608);
  v3 = *(unsigned int *)(a1 + 632);
  if ((_DWORD)v3 == *(_DWORD *)(a1 + 1136))
  {
    v4 = *(void **)(a1 + 1120);
  }
  else
  {
    *(_DWORD *)(a1 + 1136) = v3;
    v4 = *(void **)(a1 + 1120);
    if (*(_QWORD *)(a1 + 1128) < v3)
    {
      v6 = v3;
      if (v4)
      {
        MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
        v6 = *(_DWORD *)(a1 + 1136);
      }
      *(_QWORD *)(a1 + 1120) = 0;
      v7 = (8 * v3 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 1128) = v7 >> 3;
      v4 = operator new(v7, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 1120) = v4;
      LODWORD(v3) = v6;
    }
  }
  if ((_DWORD)v3)
    bzero(v4, 8 * v3);
  v8 = *(_DWORD **)(a1 + 792);
  v9 = *(_DWORD **)(a1 + 800);
  if (v8 != v9)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 616);
    v12 = *(_QWORD *)(v2 + 8);
    do
    {
      v12 -= 16;
      do
      {
        v13 = *(_DWORD *)(v12 + 16);
        v12 += 16;
      }
      while (*v8 != v13);
      *(double *)(*(_QWORD *)(a1 + 1120) + 8 * v10) = *(double *)(*(_QWORD *)(v12 + 8) + 32)
                                                      - *(double *)(v11 + 8 * v10);
      ++v10;
      ++v8;
    }
    while (v8 != v9);
  }
  v14 = (void **)(a1 + 1024);
  v15 = *(_QWORD *)(a1 + 784);
  v16 = *(_DWORD *)(v15 + 8);
  v17 = *(_DWORD *)(v15 + 12);
  *(_DWORD *)(a1 + 1040) = v16;
  *(_DWORD *)(a1 + 1044) = v17;
  v18 = v17 * (unint64_t)v16;
  if (*(_QWORD *)(a1 + 1032) < v18)
  {
    if (*v14)
      MEMORY[0x212BC6368](*v14, 0x1000C8000313F17);
    *(_QWORD *)(a1 + 1024) = 0;
    v19 = (8 * v18 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 1032) = v19 >> 3;
    *(_QWORD *)(a1 + 1024) = operator new(v19, (std::align_val_t)0x20uLL);
    v16 = *(_DWORD *)(a1 + 1040);
    v17 = *(_DWORD *)(a1 + 1044);
  }
  v20 = v16 * v17;
  if (v20)
    bzero(*v14, 8 * v20);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 672) + 64))(a1 + 672, a1 + 1024, 0);
  sub_20F20B6B0(a1 + 1024);
  v21 = *(unsigned int *)(a1 + 1136);
  if (!(_DWORD)v21)
    return -0.0;
  v22 = *(double **)(a1 + 1120);
  v23 = *(double **)(a1 + 640);
  v24 = *v22;
  v25 = *v22 * *v23;
  if ((_DWORD)v21 != 1)
  {
    v26 = v22 + 1;
    v27 = (v21 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v27 < 3)
    {
      v28 = *(double **)(a1 + 640);
LABEL_31:
      v36 = v28 + 1;
      do
      {
        v37 = *v26++;
        v38 = v37;
        v39 = *v36++;
        v25 = v25 + v38 * v39;
      }
      while (v26 != &v22[v21]);
      goto LABEL_33;
    }
    v29 = v27 + 1;
    v30 = (v27 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v26 += v30;
    v28 = &v23[v30];
    v31 = (float64x2_t *)(v23 + 3);
    v32 = (float64x2_t *)(v22 + 3);
    v33 = v30;
    do
    {
      v34 = vmulq_f64(v32[-1], v31[-1]);
      v35 = vmulq_f64(*v32, *v31);
      v25 = v25 + v34.f64[0] + v34.f64[1] + v35.f64[0] + v35.f64[1];
      v31 += 2;
      v32 += 2;
      v33 -= 4;
    }
    while (v33);
    if (v29 != v30)
      goto LABEL_31;
  }
LABEL_33:
  result = -v25;
  v40 = *(unsigned int *)(a1 + 1040);
  if (!(_DWORD)v40)
  {
    if (v21 >= 4)
    {
      v43 = v21 & 0xFFFFFFFC;
      v72 = (float64x2_t *)(v22 + 2);
      __asm { FMOV            V1.2D, #0.5 }
      v74 = v43;
      do
      {
        v75 = vmulq_f64(vmulq_f64(v72[-1], _Q1), (float64x2_t)0);
        v76 = vmulq_f64(vmulq_f64(*v72, _Q1), (float64x2_t)0);
        result = result + v75.f64[0] + v75.f64[1] + v76.f64[0] + v76.f64[1];
        v72 += 2;
        v74 -= 4;
      }
      while (v74);
      if (v43 == v21)
        return result;
    }
    else
    {
      v43 = 0;
    }
    v77 = v21 - v43;
    v78 = &v22[v43];
    do
    {
      v79 = *v78++;
      result = result + v79 * 0.5 * 0.0;
      --v77;
    }
    while (v77);
    return result;
  }
  v41 = *(float64x2_t **)(a1 + 1024);
  if ((_DWORD)v40 != 1)
  {
    v44 = 0;
    v45 = 0;
    v46 = (v40 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v47 = (v46 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v48 = &v41->f64[(v40 * v45)];
      v50 = *v48;
      v49 = v48 + 1;
      v51 = v24 * v50;
      if (v46 >= 3)
      {
        v49 += v47;
        v53 = (v46 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v54 = (float64x2_t *)(v22 + 3);
        v55 = (float64x2_t *)((char *)v41 + 8 * v44 + 24);
        do
        {
          v56 = vmulq_f64(v55[-1], v54[-1]);
          v57 = vmulq_f64(*v55, *v54);
          v51 = v51 + v56.f64[0] + v56.f64[1] + v57.f64[0] + v57.f64[1];
          v54 += 2;
          v55 += 2;
          v53 -= 4;
        }
        while (v53);
        v52 = &v22[v47];
        if (v46 + 1 == v47)
          goto LABEL_40;
      }
      else
      {
        v52 = *(double **)(a1 + 1120);
      }
      v58 = v52 + 1;
      do
      {
        v59 = *v49++;
        v60 = v59;
        v61 = *v58++;
        v51 = v51 + v60 * v61;
      }
      while (v49 != &v41->f64[(v40 * v45) + v40]);
LABEL_40:
      result = result + v22[v45++] * 0.5 * v51;
      v44 += v40;
      if (v45 == v21)
        return result;
    }
  }
  if (v21 < 4)
  {
    for (i = 0; i != v21; ++i)
LABEL_52:
      result = result + v22[i] * 0.5 * (v24 * v41->f64[i]);
    return result;
  }
  i = v21 & 0xFFFFFFFC;
  v62 = (float64x2_t *)(v22 + 2);
  v63 = v41 + 1;
  __asm { FMOV            V2.2D, #0.5 }
  v69 = i;
  do
  {
    v70 = vmulq_f64(vmulq_f64(v62[-1], _Q2), vmulq_n_f64(v63[-1], v24));
    v71 = vmulq_f64(vmulq_f64(*v62, _Q2), vmulq_n_f64(*v63, v24));
    result = result + v70.f64[0] + v70.f64[1] + v71.f64[0] + v71.f64[1];
    v62 += 2;
    v63 += 2;
    v69 -= 4;
  }
  while (v69);
  if (i != v21)
    goto LABEL_52;
  return result;
}

uint64_t sub_20F392A24(uint64_t result)
{
  uint64_t v1;
  double v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 48);
  v2 = 0.0;
  while (v1 != *(_QWORD *)(result + 56))
  {
    v3 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v3 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v3 + 20))
        v2 = v2 + *(double *)(v3 + 32) * *(double *)(v3 + 32);
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_20F392A64(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double v10;
  uint64_t result;

  kdebug_trace();
  v4 = *(_QWORD *)(a1 + 512);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if (v5 != v6)
  {
    v7 = *a2;
    do
    {
      v8 = *(double **)(v5 + 8);
      v9 = *(unsigned int *)v8;
      if ((_DWORD)v9 != -1)
      {
        v10 = v8[4];
        v8[5] = v10;
        v8[4] = v10 + *(double *)(v7 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 584) + 4 * v9));
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 298) = *(_BYTE *)(a1 + 297);
  *(_BYTE *)(a1 + 301) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 299) = 0;
  return result;
}

BOOL sub_20F392B2C(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v7;

  v4 = a1 + 1264;
  v7 = a1 + 1176;
  sub_20F2C01AC(a1 + 1264, &v7);
  v5 = *(_DWORD *)(a1 + 1264);
  *(_BYTE *)(a1 + 296) = v5 == 0;
  if (v5)
    return 1;
  sub_20F2BFF60(v4, (uint64_t)a2, a2);
  return *(_BYTE *)(a1 + 296) == 0;
}

uint64_t sub_20F392BBC()
{
  return 1;
}

uint64_t sub_20F392BC4()
{
  return 0;
}

void sub_20F392BCC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C9FE598;
  v2 = a1[159];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  sub_20F38F5B0(a1);
  JUMPOUT(0x212BC6398);
}

double sub_20F392C28(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  double v9;

  v1 = *(unsigned int *)(a1 + 376);
  if (!(_DWORD)v1)
    return 0.0;
  v2 = 0;
  v3 = *(_QWORD *)(a1 + 456);
  result = 0.0;
  do
  {
    v5 = *(unsigned int **)(v3 + 24 * v2);
    v6 = *(unsigned int **)(v3 + 24 * v2 + 8);
    if (v6 != v5)
    {
      while (1)
      {
        v7 = *v5;
        if (v2 <= v7)
          break;
        v5 += 4;
        if (v5 == v6)
          goto LABEL_3;
      }
      if (v5 != v6 && v2 == v7)
      {
        v8 = *(_QWORD *)(a1 + 384);
        if (v8)
        {
          v9 = fabs(*(double *)(v8 + 8 * *((_QWORD *)v5 + 1)));
          if (result < v9)
            result = v9;
        }
      }
    }
LABEL_3:
    ++v2;
  }
  while (v2 != v1);
  return result;
}

uint64_t sub_20F392CB8(uint64_t result, double a2)
{
  *(double *)(result + 320) = a2;
  return result;
}

uint64_t sub_20F392CC0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 816) = a2;
  return result;
}

uint64_t sub_20F392CC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 816);
}

BOOL sub_20F392CD0(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) & 0x3FFFFFFFCLL) != 0;
}

uint64_t sub_20F392CE8(uint64_t a1)
{
  return a1 + 640;
}

uint64_t sub_20F392CF0(uint64_t a1)
{
  return a1 + 640;
}

double sub_20F392CF8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = *(unsigned int *)(a1 + 352);
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v4)
  {
    *(_DWORD *)(a2 + 16) = v4;
    if (*(_QWORD *)(a2 + 8) < v4)
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v5 >> 3;
      *(_QWORD *)a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  v7 = *(unsigned int *)(a1 + 360);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 364);
    do
    {
      result = *(double *)(*(_QWORD *)(a1 + 336) + 8 * (v9 + v8));
      *(double *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 584) + 4 * v8++)) = result;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_20F392DB4(uint64_t a1, void **a2)
{
  unint64_t v4;
  unsigned int v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 480) + 8);
  v5 = v4;
  *((_DWORD *)a2 + 4) = v4;
  if ((unint64_t)a2[1] < v4)
  {
    if (*a2)
    {
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
      v5 = *((_DWORD *)a2 + 4);
    }
    v6 = (8 * v4 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v6 >> 3);
    *a2 = operator new(v6, (std::align_val_t)0x20uLL);
  }
  if (v5)
    bzero(*a2, 8 * v5);
  if (*(_QWORD *)(a1 + 584) != *(_QWORD *)(a1 + 592))
  {
    v7 = *(unsigned int *)(a1 + 380);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *(uint64_t **)(a1 + 456);
      v10 = *v9;
      v11 = v9[1];
      if (v10 != v11)
        goto LABEL_14;
LABEL_12:
      while (++v8 < v7)
      {
        v12 = (uint64_t *)(*(_QWORD *)(a1 + 456) + 24 * v8);
        v10 = *v12;
        v11 = v12[1];
        if (v10 != v11)
        {
LABEL_14:
          while (v8 != *(_DWORD *)v10)
          {
            v10 += 16;
            if (v10 == v11)
              goto LABEL_12;
          }
          v13 = *(_QWORD *)(a1 + 584);
          if (v8 >= (*(_QWORD *)(a1 + 592) - v13) >> 2)
            sub_20EDB40C4();
          v14 = *(unsigned int *)(v13 + 4 * v8);
          v15 = (_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * *(_QWORD *)(v10 + 8));
          v16 = *a2;
          if (v15 == *a2)
          {
            v16[v14] = *v15;
            v7 = *(unsigned int *)(a1 + 380);
          }
          else
          {
            v16[v14] = *v15;
          }
        }
      }
    }
  }
}

BOOL sub_20F392F0C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)(a1 + 1248) = *(_QWORD *)(a1 + 520) + 152;
  *(_QWORD *)(a1 + 1256) = a1 + 560;
  v2 = *(_DWORD *)(a1 + 1264);
  if (v2)
  {
    *(_QWORD *)(a1 + 1248) = 0;
    *(_QWORD *)(a1 + 1256) = 0;
    return v2 == 0;
  }
  v3 = *(unsigned int *)(a1 + 1288);
  v4 = operator new((8 * (v3 * v3) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v5 = v4;
  if ((_DWORD)v3 * (_DWORD)v3)
    bzero(v4, 8 * (v3 * v3));
  if ((_DWORD)v3)
  {
    v6 = v3 + 1;
    if ((_DWORD)v3 == 1)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      if (v6 < 0)
        v8 = ~(_DWORD)v3;
      else
        v8 = v3 + 1;
      v9 = (v3 - 1) * (unint64_t)v8;
      v10 = (_DWORD)v3 != -1 && (unint64_t)(v3 - 1) >> 32 != 0;
      if ((_DWORD)v9)
        v11 = v6 < 0;
      else
        v11 = 0;
      if (!v11 && (v9 & 0xFFFFFFFF00000000) == 0 && !v10)
      {
        v12 = 0;
        v7 = v3 & 0xFFFFFFFE;
        v13 = v7;
        do
        {
          v5[v12] = 0x3FF0000000000000;
          v5[v6 + v12] = 0x3FF0000000000000;
          v12 += 2 * v3 + 2;
          v13 -= 2;
        }
        while (v13);
        if (v7 == v3)
          goto LABEL_25;
      }
    }
    v14 = v3 - v7;
    v15 = v6 * v7;
    do
    {
      v5[v15] = 0x3FF0000000000000;
      v15 += v6;
      --v14;
    }
    while (v14);
  }
LABEL_25:
  if (*(_DWORD *)(a1 + 1292))
    sub_20E8BE8E4();
  v16 = *(_QWORD *)(a1 + 1224);
  *(_QWORD *)(a1 + 1224) = v5;
  *(_QWORD *)(a1 + 1232) = ((8 * (v3 * v3) + 31) & 0xFFFFFFFE0uLL) >> 3;
  *(_DWORD *)(a1 + 1240) = v3;
  *(_DWORD *)(a1 + 1244) = v3;
  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  return v2 == 0;
}

void sub_20F3930A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F3930CC(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "DenseHessian");
}

_QWORD *sub_20F393100(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  *a1 = &unk_24C9FE840;
  v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }
  a1[46] = off_24C9FCCA8;
  v3 = a1[57];
  if (v3)
  {
    v4 = a1[58];
    v5 = (void *)a1[57];
    if (v4 != v3)
    {
      v6 = a1[58];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[57];
    }
    a1[58] = v3;
    operator delete(v5);
  }
  a1[46] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 51));
  v9 = (void *)a1[48];
  if (v9)
  {
    a1[49] = v9;
    operator delete(v9);
  }
  v10 = a1[42];
  if (v10)
    MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  *a1 = &unk_24C9FE8F8;
  sub_20F393E34(a1 + 5);
  return a1;
}

double sub_20F3931F8()
{
  return 0.0;
}

uint64_t sub_20F393210(uint64_t a1)
{
  void *v2;

  sub_20F393270(a1 + 24);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F39324C(_QWORD *a1)
{
  sub_20F393E34(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F393270(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F393388((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F2B24F4(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20F393388(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F393B2C(v10, v57);
          v10 = v57 + 1;
          result = sub_20F393B2C(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F393388(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F393B2C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

_QWORD *sub_20F393E34(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;

  *a1 = &off_24C9FE968;
  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[26];
  if (v3)
  {
    a1[27] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[20];
  if (v5)
  {
    a1[21] = v5;
    operator delete(v5);
  }
  v6 = a1[13];
  if (v6)
  {
    v7 = a1[14];
    v8 = (void *)a1[13];
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 16);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 152;
      }
      while (v7 != v6);
      v8 = (void *)a1[13];
    }
    a1[14] = v6;
    operator delete(v8);
  }
  sub_20F393270((uint64_t)(a1 + 4));
  v12 = (void *)a1[1];
  if (v12)
  {
    a1[2] = v12;
    operator delete(v12);
  }
  return a1;
}

void sub_20F393F34(_QWORD *a1)
{
  sub_20F394278(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F393F58(uint64_t a1, int a2, double a3, float64x2_t _Q1, double _D2, float64x2_t a6)
{
  uint64_t *v6;
  uint64_t v12;
  uint64_t v14;
  uint64_t i;
  unsigned int *v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  float64x2_t *v21;
  int v22;
  uint64_t v23;
  float64x2_t *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  double *v31;
  uint64_t v34;
  __int128 v35;
  float64x2_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _QWORD *v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  std::mutex v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v6 = *(uint64_t **)(a1 + 560);
  __asm { FMOV            V0.2D, #1.0 }
  v35 = _Q0;
  v12 = v6[1];
  v38 = *v6;
  v39 = v6 + 6;
  v40 = &v35;
  v41 = v12;
  v42 = 0;
  v43 = a2;
  _Q0 = 0uLL;
  memset(v44.__m_.__opaque, 0, sizeof(v44.__m_.__opaque));
  v44.__m_.__sig = 850045863;
  v14 = *(_QWORD *)(v38 + 104);
  for (i = *(_QWORD *)(v38 + 112); v14 != i; v14 += 152)
  {
    v16 = *(unsigned int **)(v14 + 72);
    if ((v16[1] & 4) != 0)
      v17 = 1;
    else
      v17 = 2;
    if ((v17 & v43) == 0)
      continue;
    v18 = *((unsigned __int8 *)v16 + 20);
    if (*((_BYTE *)v16 + 20))
    {
      v19 = *v16;
      if ((_DWORD)v19 == -1)
        continue;
      v20 = *(_DWORD *)(*v39 + 4 * v19);
    }
    else
    {
      v20 = -1;
    }
    v21 = (float64x2_t *)(v14 + 96);
    v22 = sub_20FC6CE8C(v14 + 8, (uint64_t *)(v14 + 72), (float64x2_t *)(v14 + 96), &v36, _Q0, _Q1, _D2, a6);
    *(_BYTE *)(v14 + 120) = v22;
    if (v22)
    {
      v23 = *(_QWORD *)(v14 + 128);
      if (v23)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 24))(v23, v14 + 96);
        v24 = *(float64x2_t **)(v14 + 128);
        switch((*(unsigned int (**)(float64x2_t *))(*(_QWORD *)&v24->f64[0] + 16))(v24))
        {
          case 0u:
            v25 = v24[1];
            v26 = v24[2];
            goto LABEL_20;
          case 1u:
            v27 = vmulq_f64(v36, v24[1]);
            goto LABEL_21;
          case 2u:
            v27 = vmulq_n_f64(v36, v24[1].f64[0]);
            goto LABEL_21;
          case 4u:
            (*(void (**)(_OWORD *__return_ptr, float64x2_t *))(*(_QWORD *)&v24->f64[0] + 56))(v37, v24);
            v25 = (float64x2_t)v37[0];
            v26 = (float64x2_t)v37[1];
LABEL_20:
            v27 = vmlaq_laneq_f64(vmulq_n_f64(v25, v36.f64[0]), v26, v36, 1);
LABEL_21:
            v36 = v27;
            break;
          default:
            break;
        }
      }
      *(float64x2_t *)(v14 + 80) = *v21;
      _Q0 = *(float64x2_t *)(v14 + 96);
      _Q1 = vmulq_f64(_Q0, _Q0);
      _D2 = *(double *)(v14 + 104);
      __asm { FMLA            D1, D2, V0.D[1] }
      _Q0.f64[0] = *((double *)&v35 + 1) * _Q1.f64[0];
      *(double *)(v14 + 112) = *((double *)&v35 + 1) * _Q1.f64[0];
      if (!v18)
        continue;
      v28 = *(_QWORD *)(v12 + 120) + 24 * v20;
      v30 = *(char **)v28;
      v29 = *(char **)(v28 + 8);
      if (*(char **)v28 != v29)
      {
        while (*(_DWORD *)v30 < v20)
        {
          v30 += 16;
          if (v30 == v29)
            goto LABEL_31;
        }
      }
      if (v30 != v29)
      {
        if (*(_DWORD *)v30 == v20)
        {
          v31 = (double *)(*(_QWORD *)(v12 + 48) + 8 * *((_QWORD *)v30 + 1));
LABEL_32:
          _D2 = v36.f64[1];
          __asm { FMLA            D1, D2, V0.D[1] }
          *v31 = *v31 + _D1;
          v34 = 8 * (*(_DWORD *)(v12 + 28) + v20);
          _Q0.f64[1] = v36.f64[1];
          _Q1 = *v21;
          _Q1.f64[0] = *(float64_t *)(v14 + 104);
          __asm { FMLA            D2, D1, V0.D[1] }
          _Q0.f64[0] = *(double *)(*(_QWORD *)v12 + v34) - _D2;
          *(float64_t *)(*(_QWORD *)v12 + v34) = _Q0.f64[0];
          continue;
        }
        v29 = v30;
      }
LABEL_31:
      v31 = (double *)sub_20F2B4550((unint64_t *)(v12 + 32), (char **)v28, v20, v29);
      goto LABEL_32;
    }
    *(_QWORD *)(v14 + 112) = 0;
  }
  std::mutex::~mutex(&v44);
}

void sub_20F394238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10)
{
  std::mutex::~mutex(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20F39424C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_20F394258(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_20F394264(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8);
}

_QWORD *sub_20F394278(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = off_24C9FEA00;
  v2 = (void *)a1[67];
  if (v2)
  {
    a1[68] = v2;
    operator delete(v2);
  }
  v3 = a1[64];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[61];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[58];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = a1[55];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = a1[52];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = a1[49];
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9 = (void *)a1[46];
  if (v9)
  {
    a1[47] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[43];
  if (v10)
  {
    a1[44] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[40];
  if (v11)
  {
    a1[41] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[37];
  if (v12)
  {
    a1[38] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[34];
  if (v13)
  {
    a1[35] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[31];
  if (v14)
  {
    a1[32] = v14;
    operator delete(v14);
  }
  v15 = (_QWORD *)a1[30];
  if (v15 == a1 + 27)
  {
    v16 = 4;
    v15 = a1 + 27;
  }
  else
  {
    if (!v15)
      goto LABEL_32;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_32:
  v17 = (void *)a1[23];
  if (v17)
  {
    a1[24] = v17;
    operator delete(v17);
  }
  a1[8] = off_24C9FCCA8;
  v18 = a1[19];
  if (v18)
  {
    v19 = a1[20];
    v20 = (void *)a1[19];
    if (v19 != v18)
    {
      v21 = a1[20];
      do
      {
        v23 = *(void **)(v21 - 24);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *(_QWORD *)(v19 - 16) = v22;
          operator delete(v22);
        }
        v19 = v21;
      }
      while (v21 != v18);
      v20 = (void *)a1[19];
    }
    a1[20] = v18;
    operator delete(v20);
  }
  a1[8] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 13));
  v24 = (void *)a1[10];
  if (v24)
  {
    a1[11] = v24;
    operator delete(v24);
  }
  v25 = a1[4];
  if (v25)
    MEMORY[0x212BC6368](v25, 0x1000C8000313F17);
  v26 = a1[1];
  if (v26)
    MEMORY[0x212BC6368](v26, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_20F3944B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int *v35;
  char *v36;
  unsigned int v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  unsigned int *v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _OWORD *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  unsigned int v57;
  __n128 *v58;
  __n128 *v59;
  __n128 *v60;
  uint64_t v61;
  const std::nothrow_t *v62;
  char *v63;
  BOOL v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  void **v74;
  char v75;

  if (!*(_BYTE *)(a1 + 154))
  {
    if (!*(_BYTE *)(a1 + 153))
      *(_BYTE *)(a1 + 153) = *(_QWORD *)(a1 + 184) != *(_QWORD *)(a1 + 192);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (!*(_BYTE *)(a1 + 153))
    {
LABEL_83:
      *(_BYTE *)(a1 + 154) = 1;
      return a1 + 160;
    }
    v2 = *(void **)(a1 + 232);
    *(_QWORD *)(a1 + 240) = v2;
    v3 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    v4 = v3 >> 4;
    if (v3 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 248) - (_QWORD)v2) >> 2))
    {
      if (v3 < 0)
        sub_20E867F44();
      v5 = (char *)operator new((unint64_t)v3 >> 2);
      *(_QWORD *)(a1 + 232) = v5;
      *(_QWORD *)(a1 + 240) = v5;
      *(_QWORD *)(a1 + 248) = &v5[4 * v4];
      if (v2)
        operator delete(v2);
    }
    v6 = *(_QWORD *)(a1 + 104);
    for (i = *(_QWORD *)(a1 + 112); v6 != i; v6 += 152)
    {
      v8 = *(_QWORD *)(v6 + 72);
      if (*(_BYTE *)(v6 + 144) || (*(_BYTE *)(v8 + 4) & 6) != 0)
      {
        *(_BYTE *)(v6 + 144) = 1;
        sub_20F394A20(a1 + 232, v8);
      }
    }
    v9 = *(_QWORD *)(a1 + 184);
    v10 = *(_QWORD *)(a1 + 192);
    v74 = (void **)(a1 + 184);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v12 = *(unsigned int **)(a1 + 232);
    v11 = *(unsigned int **)(a1 + 240);
    v71 = v9;
    v72 = (v10 - v9) >> 2;
    v13 = v72 + v11 - v12;
    v14 = *(_BYTE **)(a1 + 184);
    v70 = v10;
    if (v13 <= (uint64_t)(*(_QWORD *)(a1 + 200) - (_QWORD)v14) >> 2)
    {
LABEL_28:
      if (v12 != v11)
      {
        v73 = v11;
        while (1)
        {
          v30 = *v12;
          v32 = *(char **)(a1 + 8);
          v31 = *(char **)(a1 + 16);
          if (v31 != v32)
          {
            v33 = (v31 - v32) >> 4;
            do
            {
              v34 = v33 >> 1;
              v35 = (unsigned int *)&v32[16 * (v33 >> 1)];
              v37 = *v35;
              v36 = (char *)(v35 + 4);
              v33 += ~(v33 >> 1);
              if (v37 < v30)
                v32 = v36;
              else
                v33 = v34;
            }
            while (v33);
          }
          if (v32 == v31 || *(_DWORD *)v32 != v30)
          {
            v30 = *(_DWORD *)v31;
            v32 = *(char **)(a1 + 16);
          }
          if ((*(_BYTE *)(*((_QWORD *)v32 + 1) + 4) & 6) != 0)
            goto LABEL_32;
          v39 = *(char **)(a1 + 192);
          v38 = *(_QWORD *)(a1 + 200);
          if ((unint64_t)v39 >= v38)
            break;
          *(_DWORD *)v39 = v30;
          v29 = (uint64_t)(v39 + 4);
LABEL_31:
          *(_QWORD *)(a1 + 192) = v29;
          *(_BYTE *)(*((_QWORD *)v32 + 1) + 4) ^= 2u;
LABEL_32:
          if (++v12 == v11)
            goto LABEL_64;
        }
        v40 = (char *)*v74;
        v41 = v39 - (_BYTE *)*v74;
        v42 = v41 >> 2;
        v43 = (v41 >> 2) + 1;
        if (v43 >> 62)
          goto LABEL_85;
        v44 = v38 - (_QWORD)v40;
        if (v44 >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 62)
            sub_20E877A38();
          v46 = operator new(4 * v45);
          v47 = (unsigned int *)&v46[4 * v42];
          *v47 = v30;
          v29 = (uint64_t)(v47 + 1);
          v48 = v39 - v40;
          if (v39 == v40)
            goto LABEL_61;
        }
        else
        {
          v46 = 0;
          v47 = (unsigned int *)(4 * v42);
          *(_DWORD *)(4 * v42) = v30;
          v29 = 4 * v42 + 4;
          v48 = v39 - v40;
          if (v39 == v40)
          {
LABEL_61:
            *(_QWORD *)(a1 + 184) = v47;
            *(_QWORD *)(a1 + 192) = v29;
            *(_QWORD *)(a1 + 200) = &v46[4 * v45];
            if (v40)
              operator delete(v40);
            v11 = v73;
            goto LABEL_31;
          }
        }
        v49 = v48 - 4;
        if (v49 < 0x2C)
          goto LABEL_90;
        if ((unint64_t)(v39 - v46 - v41) < 0x20)
          goto LABEL_90;
        v50 = (v49 >> 2) + 1;
        v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
        v52 = &v39[-v51];
        v47 = (unsigned int *)((char *)v47 - v51);
        v53 = &v46[4 * v42 - 16];
        v54 = v39 - 16;
        v55 = v50 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v56 = *(_OWORD *)v54;
          *(v53 - 1) = *((_OWORD *)v54 - 1);
          *v53 = v56;
          v53 -= 2;
          v54 -= 32;
          v55 -= 8;
        }
        while (v55);
        v39 = v52;
        if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_90:
          do
          {
            v57 = *((_DWORD *)v39 - 1);
            v39 -= 4;
            *--v47 = v57;
          }
          while (v39 != v40);
        }
        goto LABEL_61;
      }
LABEL_64:
      if (v70 != v71)
      {
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v58 = *(__n128 **)(a1 + 184);
        v59 = *(__n128 **)(a1 + 192);
        v60 = (__n128 *)((char *)v58 + 4 * v72);
        if (((char *)v59 - (char *)v60) >> 2 >= v72)
          v61 = v72;
        else
          v61 = ((char *)v59 - (char *)v60) >> 2;
        if (v61 < 1)
        {
LABEL_72:
          v65 = 0;
          v61 = 0;
        }
        else
        {
          v62 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
          while (1)
          {
            v63 = (char *)operator new(4 * v61, v62);
            if (v63)
              break;
            v64 = (unint64_t)v61 > 1;
            v61 = (unint64_t)v61 >> 1;
            if (!v64)
              goto LABEL_72;
          }
          v65 = v63;
        }
        sub_20EDB30B0(v58, v60, v59, (uint64_t)&v75, v72, ((char *)v59 - (char *)v60) >> 2, v65, v61);
        if (v65)
          operator delete(v65);
      }
      v66 = *(_QWORD *)(a1 + 104);
      v67 = *(_QWORD *)(a1 + 112);
      while (v66 != v67)
      {
        v68 = *(_QWORD *)(v66 + 72);
        if (*(_BYTE *)(v66 + 144) || (*(_BYTE *)(v68 + 4) & 6) != 0)
          ++*(_DWORD *)(v68 + 8);
        v66 += 152;
      }
      goto LABEL_83;
    }
    if (v13 >> 62)
LABEL_85:
      sub_20E867F44();
    v15 = *(_BYTE **)(a1 + 192);
    v16 = (char *)operator new(4 * v13);
    v17 = v15 - v14;
    v18 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFFCLL];
    v19 = v18;
    if (v15 != v14)
    {
      if ((unint64_t)(v17 - 4) < 0x2C)
      {
        v19 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_25:
          v28 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v19 - 1) = v28;
          v19 -= 4;
        }
        while (v15 != v14);
        goto LABEL_26;
      }
      v19 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v15[-(v17 & 0xFFFFFFFFFFFFFFFCLL)] - v16) < 0x20)
        goto LABEL_25;
      v20 = v17 >> 2;
      v21 = ((unint64_t)(v17 - 4) >> 2) + 1;
      v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
      v23 = &v15[-v22];
      v19 = &v18[-v22];
      v24 = &v16[4 * v20 - 16];
      v25 = (__int128 *)(v15 - 16);
      v26 = v21 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v27 = *v25;
        *((_OWORD *)v24 - 1) = *(v25 - 1);
        *(_OWORD *)v24 = v27;
        v24 -= 32;
        v25 -= 2;
        v26 -= 8;
      }
      while (v26);
      v15 = v23;
      if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_25;
    }
LABEL_26:
    *(_QWORD *)(a1 + 184) = v19;
    *(_QWORD *)(a1 + 192) = v18;
    *(_QWORD *)(a1 + 200) = &v16[4 * v13];
    if (v14)
    {
      operator delete(v14);
      v12 = *(unsigned int **)(a1 + 232);
      v11 = *(unsigned int **)(a1 + 240);
    }
    goto LABEL_28;
  }
  return a1 + 160;
}

void sub_20F394A20(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v2 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (!v2)
  {
    v4 = *(_DWORD *)(a2 + 16);
    v6 = *(char **)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v6 < v5)
    {
      *(_DWORD *)v6 = v4;
      v7 = (uint64_t)(v6 + 4);
LABEL_23:
      *(_QWORD *)(a1 + 8) = v7;
      return;
    }
    v8 = *(char **)a1;
    v9 = (uint64_t)&v6[-*(_QWORD *)a1];
    v10 = v9 >> 2;
    v11 = (v9 >> 2) + 1;
    if (v11 >> 62)
      sub_20E867F44();
    v12 = v5 - (_QWORD)v8;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 62)
        sub_20E877A38();
      v14 = operator new(4 * v13);
      v15 = &v14[4 * v10];
      v16 = &v14[4 * v13];
      *v15 = v4;
      v7 = (uint64_t)(v15 + 1);
      v17 = v6 - v8;
      if (v6 == v8)
        goto LABEL_21;
    }
    else
    {
      v14 = 0;
      v15 = (_DWORD *)(4 * v10);
      v16 = 0;
      *(_DWORD *)(4 * v10) = v4;
      v7 = 4 * v10 + 4;
      v17 = v6 - v8;
      if (v6 == v8)
      {
LABEL_21:
        *(_QWORD *)a1 = v15;
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v16;
        if (v8)
          operator delete(v8);
        goto LABEL_23;
      }
    }
    v18 = v17 - 4;
    if (v18 < 0x2C)
      goto LABEL_28;
    if ((unint64_t)(v6 - &v14[v9]) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 2) + 1;
    v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    v21 = &v6[-v20];
    v15 = (_DWORD *)((char *)v15 - v20);
    v22 = &v14[4 * v10 - 16];
    v23 = v6 - 16;
    v24 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    v6 = v21;
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_28:
      do
      {
        v26 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v15 = v26;
      }
      while (v6 != v8);
    }
    goto LABEL_21;
  }
}

void sub_20F394BB8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 48 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v12 = 8;
      do
      {
        v8 += v12;
        v12 *= 2;
        --v5;
      }
      while (v5);
    }
    v9 = v8 + v6;
LABEL_12:
    v15 = *(char **)(a1 + 48);
    v14 = *(char **)(a1 + 56);
    v13 = (char **)(a1 + 48);
    v16 = (v14 - v15) >> 3;
    if (v9 - v16 == 1)
    {
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v14 < v17)
    {
      *(_QWORD *)v14 = a2;
      v18 = (uint64_t)(v14 + 8);
LABEL_45:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v19 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v20 = v17 - (_QWORD)v15;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E877A38();
      v22 = (char *)operator new(8 * v21);
      v23 = &v22[8 * v16];
      v24 = &v22[8 * v21];
      *(_QWORD *)v23 = a2;
      v18 = (uint64_t)(v23 + 8);
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_43;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v16);
      v24 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_43:
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v24;
        if (v14)
          operator delete(v14);
        goto LABEL_45;
      }
    }
    v33 = (unint64_t)(v25 - 8);
    if (v33 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v15 - v22) < 0x20)
      goto LABEL_53;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v14[-v35];
    v23 -= v35;
    v37 = &v22[8 * v16 - 16];
    v38 = v14 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v14 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v41 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v23 - 1) = v41;
        v23 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v13;
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v10 = 0;
    v11 = v4 - 1;
    if (v4 == 1)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(char **)(a1 + 56);
    v31 = (unint64_t)&v30[-v29];
    if ((uint64_t)&v30[-v29] >> 3)
      return;
    goto LABEL_31;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v26 = v4 - 1;
  v10 = 0;
  v11 = v26 - 1;
  if (v26 != 1)
  {
LABEL_28:
    v27 = 8;
    do
    {
      v10 += v27;
      v27 *= 2;
      --v11;
    }
    while (v11);
  }
LABEL_30:
  v28 = v10 + v7;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(char **)(a1 + 56);
  v31 = (unint64_t)&v30[-v29];
  if (v28 != (uint64_t)&v30[-v29] >> 3)
    return;
LABEL_31:
  v42 = a1;
  v48 = &v42;
  v47 = a1;
  if ((char *)v29 != v30 && v31 >= 0xF0)
  {
    sub_20F393388(v29, v30, (uint64_t)v44, 126 - 2 * __clz(v28), 1);
    v32 = *(_QWORD *)(a1 + 48);
    v45 = *(_QWORD *)(a1 + 56);
    v46 = v32;
    v44[0] = v32;
    v44[1] = v45;
    v44[2] = &v48;
    v43[0] = a1;
    v43[1] = (uint64_t)&v46;
    v43[2] = (uint64_t)&v45;
    sub_20F2B24F4(&v47, (uint64_t)v44, v43);
    v29 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v29;
}

unint64_t sub_20F394EB8(unint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  BOOL v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  BOOL v49;
  BOOL v50;
  unsigned int v51;
  _BOOL4 v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  _BOOL4 v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  _BOOL4 v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  BOOL v113;
  BOOL v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  _BOOL4 v120;
  unsigned int v121;
  unsigned int v122;
  BOOL v123;
  BOOL v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  BOOL v130;
  unsigned int v131;
  unsigned int v132;
  _BOOL4 v133;
  _BOOL4 v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  BOOL v138;
  unsigned int v139;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unsigned int *v143;
  unsigned int v144;
  _BOOL4 v145;
  _BOOL4 v146;
  unsigned int *v147;
  unsigned int v148;
  unsigned int v149;
  BOOL v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  BOOL v160;
  BOOL v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned int v164;
  unsigned int v165;
  BOOL v166;
  unsigned int *v167;
  unsigned int v168;
  _BOOL4 v169;
  _BOOL4 v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int *v174;
  _BOOL4 v175;
  _BOOL4 v176;
  uint64_t v177;
  unsigned int *v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  uint64_t v189;
  char *v190;
  unsigned int v191;
  BOOL v192;
  BOOL v193;
  int64_t v194;
  int64_t v195;
  int64_t v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  _BOOL4 v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  _BOOL4 v206;
  _BOOL4 v207;
  _BOOL4 v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  int64_t v212;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  _BOOL4 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  _BOOL4 v229;
  int v230;
  char *v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  _BOOL4 v238;
  unsigned int *v239;
  unsigned int v240;
  unsigned int v241;
  _BOOL4 v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int *v245;
  uint64_t v246;
  unsigned int v247;
  BOOL v248;
  BOOL v249;
  unsigned int v250;
  unsigned int v251;
  _BOOL4 v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v256 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v172 = *(a2 - 3);
        v173 = *(a2 - 2);
        v174 = a2 - 3;
        v175 = v173 < v10[1];
        v179 = v172 == *v10;
        v176 = v172 < *v10;
        if (v179)
          v176 = v175;
        if (v176)
        {
          v301 = v10[2];
          v277 = *(_QWORD *)v10;
          v177 = *(_QWORD *)v174;
          v10[2] = v174[2];
          *(_QWORD *)v10 = v177;
          v174[2] = v301;
          *(_QWORD *)v174 = v277;
        }
        return result;
      case 3:
        v163 = v10 + 3;
        v164 = v10[3];
        v165 = v10[4];
        v166 = v164 < *v10;
        if (v164 == *v10)
          v166 = v165 < v10[1];
        v168 = *(a2 - 3);
        v167 = a2 - 3;
        v169 = *(a2 - 2) < v165;
        v179 = v168 == v164;
        v170 = v168 < v164;
        if (v179)
          v170 = v169;
        if (v166)
        {
          if (v170)
          {
            v300 = v10[2];
            v276 = *(_QWORD *)v10;
            v171 = *(_QWORD *)v167;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v171;
            *(a2 - 1) = v300;
            *(_QWORD *)v167 = v276;
          }
          else
          {
            v304 = v10[2];
            v280 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v280;
            v10[5] = v304;
            v250 = *(a2 - 3);
            v251 = v10[3];
            v179 = v250 == v251;
            v252 = v250 < v251;
            if (v179)
              v252 = *(a2 - 2) < v10[4];
            if (v252)
            {
              v253 = *v163;
              v254 = v10[5];
              v255 = *(a2 - 1);
              *v163 = *(_QWORD *)v167;
              v10[5] = v255;
              *(a2 - 1) = v254;
              *(_QWORD *)v167 = v253;
            }
          }
        }
        else if (v170)
        {
          v234 = *v163;
          v235 = v10[5];
          v236 = *(a2 - 1);
          *v163 = *(_QWORD *)v167;
          v10[5] = v236;
          *(a2 - 1) = v235;
          *(_QWORD *)v167 = v234;
          v237 = v10[3];
          v179 = v237 == *v10;
          v238 = v237 < *v10;
          if (v179)
            v238 = v10[4] < v10[1];
          if (v238)
          {
            v303 = v10[2];
            v279 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v163;
            v10[2] = v10[5];
            *v163 = v279;
            v10[5] = v303;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_20F2BCB74(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (unint64_t)sub_20F396580(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v194 = (unint64_t)(v12 - 2) >> 1;
              v195 = v194;
              do
              {
                v196 = v195;
                if (v194 >= v195)
                {
                  v197 = (2 * v195) | 1;
                  v198 = &v10[3 * v197];
                  if (2 * v196 + 2 >= v12)
                  {
                    v199 = *v198;
                  }
                  else
                  {
                    v199 = v198[3];
                    v200 = v10[3 * v197 + 1] < v198[4];
                    if (*v198 != v199)
                      v200 = *v198 < v199;
                    if (v200)
                    {
                      v198 += 3;
                      v197 = 2 * v196 + 2;
                    }
                    else
                    {
                      v199 = *v198;
                    }
                  }
                  v201 = &v10[3 * v196];
                  v202 = *v201;
                  v203 = v201[1];
                  v179 = v199 == *v201;
                  LODWORD(result) = v199 < *v201;
                  if (v179)
                    result = v198[1] < v203;
                  else
                    result = result;
                  if ((result & 1) == 0)
                  {
                    result = v201[2];
                    do
                    {
                      v209 = v201;
                      v201 = v198;
                      v210 = *(_QWORD *)v198;
                      v209[2] = v201[2];
                      *(_QWORD *)v209 = v210;
                      if (v194 < v197)
                        break;
                      v211 = (2 * v197) | 1;
                      v198 = &v10[3 * v211];
                      v197 = 2 * v197 + 2;
                      if (v197 < v12)
                      {
                        v204 = *v198;
                        v205 = v198[3];
                        v206 = v10[3 * v211 + 1] < v198[4];
                        if (*v198 != v205)
                          v206 = *v198 < v205;
                        if (v206)
                        {
                          v204 = v198[3];
                          v198 += 3;
                        }
                        else
                        {
                          v197 = v211;
                        }
                      }
                      else
                      {
                        v204 = *v198;
                        v197 = v211;
                      }
                      v207 = v198[1] < v203;
                      v179 = v204 == v202;
                      v208 = v204 < v202;
                      if (!v179)
                        v207 = v208;
                    }
                    while (!v207);
                    *v201 = v202;
                    v201[1] = v203;
                    v201[2] = result;
                  }
                }
                v195 = v196 - 1;
              }
              while (v196);
              v212 = v11 / 0xCuLL;
              do
              {
                v214 = 0;
                v302 = v10[2];
                v278 = *(_QWORD *)v10;
                v215 = v10;
                do
                {
                  v217 = v214 + 1;
                  v218 = (char *)&v215[3 * v214 + 3];
                  v219 = (2 * v214) | 1;
                  v220 = 2 * v214 + 2;
                  if (v220 < v212)
                  {
                    v221 = *((_DWORD *)v218 + 3);
                    v222 = v215[3 * v217 + 1] < *((_DWORD *)v218 + 4);
                    v179 = *(_DWORD *)v218 == v221;
                    result = *(_DWORD *)v218 < v221;
                    if (!v179)
                      v222 = result;
                    if (v222)
                    {
                      v218 += 12;
                      v219 = v220;
                    }
                  }
                  v216 = *(_QWORD *)v218;
                  v215[2] = *((_DWORD *)v218 + 2);
                  *(_QWORD *)v215 = v216;
                  v215 = (unsigned int *)v218;
                  v214 = v219;
                }
                while (v219 <= (uint64_t)((unint64_t)(v212 - 2) >> 1));
                a2 -= 3;
                if (v218 == (char *)a2)
                {
                  *((_DWORD *)v218 + 2) = v302;
                  *(_QWORD *)v218 = v278;
                }
                else
                {
                  v223 = *(_QWORD *)a2;
                  *((_DWORD *)v218 + 2) = a2[2];
                  *(_QWORD *)v218 = v223;
                  a2[2] = v302;
                  *(_QWORD *)a2 = v278;
                  v224 = v218 - (char *)v10 + 12;
                  if (v224 >= 13)
                  {
                    v225 = (v224 / 0xCuLL - 2) >> 1;
                    v226 = &v10[3 * v225];
                    v228 = *(_DWORD *)v218;
                    v227 = *((_DWORD *)v218 + 1);
                    v229 = *v226 < *(_DWORD *)v218;
                    if (*v226 == *(_DWORD *)v218)
                      v229 = v226[1] < v227;
                    if (v229)
                    {
                      v230 = *((_DWORD *)v218 + 2);
                      do
                      {
                        v231 = v218;
                        v218 = (char *)v226;
                        v232 = *(_QWORD *)v226;
                        result = *((unsigned int *)v218 + 2);
                        *((_DWORD *)v231 + 2) = result;
                        *(_QWORD *)v231 = v232;
                        if (!v225)
                          break;
                        v225 = (v225 - 1) >> 1;
                        v226 = &v10[3 * v225];
                        result = v226[1] < v227;
                        v233 = *v226 < v228;
                        if (*v226 == v228)
                          v233 = v226[1] < v227;
                      }
                      while (v233);
                      *(_DWORD *)v218 = v228;
                      *((_DWORD *)v218 + 1) = v227;
                      *((_DWORD *)v218 + 2) = v230;
                    }
                  }
                }
              }
              while (v212-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v15 = *(a2 - 3);
          v16 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v23 = *v10;
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (*v10 != *v14)
              v26 = *v10 < *v14;
            v27 = v16 < v24;
            v179 = v15 == v23;
            v28 = v15 < v23;
            if (v179)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v282 = v14[2];
                v258 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v282;
                *(_QWORD *)v8 = v258;
                goto LABEL_54;
              }
              v289 = v14[2];
              v265 = *(_QWORD *)v14;
              v63 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v63;
              v10[2] = v289;
              *(_QWORD *)v10 = v265;
              v64 = *(a2 - 3);
              v179 = v64 == *v10;
              v65 = v64 < *v10;
              if (v179)
                v65 = *(a2 - 2) < v10[1];
              if (v65)
              {
                v282 = v10[2];
                v258 = *(_QWORD *)v10;
                v66 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v66;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v285 = v10[2];
              v261 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v33;
              *(a2 - 1) = v285;
              *(_QWORD *)v8 = v261;
              v34 = v10[1] < *v25;
              if (*v10 != *v14)
                v34 = *v10 < *v14;
              if (v34)
              {
                v286 = v14[2];
                v262 = *(_QWORD *)v14;
                v35 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v35;
                v10[2] = v286;
                *(_QWORD *)v10 = v262;
                --a3;
                v36 = v262;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v36 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v108 = *(v10 - 3);
            v67 = v10[1];
            v179 = v108 == v36;
            v109 = v108 < v36;
            if (v179)
              v109 = *(v10 - 2) < v67;
            if (v109)
              goto LABEL_97;
            v137 = *(a2 - 3);
            v179 = v36 == v137;
            v138 = v36 < v137;
            if (v179)
              v138 = v67 < *(a2 - 2);
            if (v138)
            {
              do
              {
                v139 = v10[3];
                v140 = v10[4];
                v10 += 3;
                v141 = v67 < v140;
                v179 = v36 == v139;
                v142 = v36 < v139;
                if (v179)
                  v142 = v141;
              }
              while (!v142);
            }
            else
            {
              v143 = v10 + 3;
              do
              {
                v10 = v143;
                if (v143 >= a2)
                  break;
                v144 = *v143;
                v145 = v67 < v10[1];
                v179 = v36 == v144;
                v146 = v36 < v144;
                if (!v179)
                  v145 = v146;
                v143 = v10 + 3;
              }
              while (!v145);
            }
            v147 = a2;
            if (v10 < a2)
            {
              v147 = a2;
              do
              {
                v148 = *(v147 - 3);
                v149 = *(v147 - 2);
                v147 -= 3;
                v150 = v67 < v149;
                v179 = v36 == v148;
                v151 = v36 < v148;
                if (v179)
                  v151 = v150;
              }
              while (v151);
            }
            v152 = v7[2];
            while (v10 < v147)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v153 = *(_QWORD *)v147;
              v10[2] = v147[2];
              *(_QWORD *)v10 = v153;
              v147[2] = v299;
              *(_QWORD *)v147 = v275;
              do
              {
                v154 = v10[3];
                v155 = v10[4];
                v10 += 3;
                v156 = v67 < v155;
                v179 = v36 == v154;
                v157 = v36 < v154;
                if (v179)
                  v157 = v156;
              }
              while (!v157);
              do
              {
                v158 = *(v147 - 3);
                v159 = *(v147 - 2);
                v147 -= 3;
                v160 = v67 < v159;
                v179 = v36 == v158;
                v161 = v36 < v158;
                if (v179)
                  v161 = v160;
              }
              while (v161);
            }
            if (v10 - 3 != v7)
            {
              v162 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v162;
            }
            a4 = 0;
            *(v10 - 3) = v36;
            *(v10 - 2) = v67;
            *(v10 - 1) = v152;
            continue;
          }
          v17 = *v14;
          v18 = &v10[3 * v13 + 1];
          v19 = *v14 < *v10;
          if (*v14 == *v10)
            v19 = *v18 < v10[1];
          v20 = v16 < *v18;
          v179 = v15 == v17;
          v21 = v15 < v17;
          if (v179)
            v21 = v20;
          if (v19)
          {
            if (v21)
            {
              v281 = v10[2];
              v257 = *(_QWORD *)v10;
              v22 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v22;
LABEL_36:
              *(a2 - 1) = v281;
              *(_QWORD *)v8 = v257;
              goto LABEL_37;
            }
            v287 = v10[2];
            v263 = *(_QWORD *)v10;
            v37 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v37;
            v14[2] = v287;
            *(_QWORD *)v14 = v263;
            v38 = *(a2 - 3);
            v39 = v38 < v263;
            if (v38 == (_DWORD)v263)
              v39 = *(a2 - 2) < *v18;
            if (v39)
            {
              v281 = v14[2];
              v257 = *(_QWORD *)v14;
              v40 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v40;
              goto LABEL_36;
            }
          }
          else if (v21)
          {
            v283 = v14[2];
            v259 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v283;
            *(_QWORD *)v8 = v259;
            v31 = *v14 < *v10;
            if (*v14 == *v10)
              v31 = *v18 < v10[1];
            if (v31)
            {
              v284 = v10[2];
              v260 = *(_QWORD *)v10;
              v32 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v32;
              v14[2] = v284;
              *(_QWORD *)v14 = v260;
            }
          }
LABEL_37:
          v41 = (uint64_t *)(v10 + 3);
          v42 = v10[3];
          v43 = &v10[3 * v13];
          v46 = *(v43 - 3);
          v44 = v43 - 3;
          v45 = v46;
          v47 = v44 + 1;
          v48 = v44[1];
          v49 = v48 < v10[4];
          v179 = v46 == v42;
          v50 = v46 < v42;
          if (!v179)
            v49 = v50;
          v51 = *(a2 - 6);
          v52 = *(a2 - 5) < v48;
          v179 = v51 == v45;
          v53 = v51 < v45;
          if (v179)
            v53 = v52;
          if (v49)
          {
            if (v53)
            {
              v54 = *v41;
              v55 = v10[5];
              v56 = *(a2 - 4);
              *v41 = *(_QWORD *)v256;
              v10[5] = v56;
              *(a2 - 4) = v55;
              *(_QWORD *)v256 = v54;
            }
            else
            {
              v68 = *v41;
              v69 = v10[5];
              v70 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v70;
              v44[2] = v69;
              *(_QWORD *)v44 = v68;
              v71 = v68;
              LODWORD(v68) = *(a2 - 6);
              v179 = (_DWORD)v68 == v71;
              v72 = v68 < v71;
              if (v179)
                v72 = *(a2 - 5) < *v47;
              if (v72)
              {
                v290 = v44[2];
                v266 = *(_QWORD *)v44;
                v73 = *(_QWORD *)v256;
                v44[2] = *(a2 - 4);
                *(_QWORD *)v44 = v73;
                *(a2 - 4) = v290;
                *(_QWORD *)v256 = v266;
              }
            }
          }
          else if (v53)
          {
            v288 = v44[2];
            v264 = *(_QWORD *)v44;
            v57 = *(_QWORD *)v256;
            v44[2] = *(a2 - 4);
            *(_QWORD *)v44 = v57;
            *(a2 - 4) = v288;
            *(_QWORD *)v256 = v264;
            v58 = v10[3];
            v59 = *v44 < v58;
            if (*v44 == v58)
              v59 = *v47 < v10[4];
            if (v59)
            {
              v60 = *v41;
              v61 = v10[5];
              v62 = v44[2];
              *v41 = *(_QWORD *)v44;
              v10[5] = v62;
              v44[2] = v61;
              *(_QWORD *)v44 = v60;
            }
          }
          v74 = (uint64_t *)(v10 + 6);
          v75 = v10[6];
          v76 = &v10[3 * v13];
          v79 = v76[3];
          v77 = v76 + 3;
          v78 = v79;
          v80 = v77 + 1;
          v81 = v77[1];
          v82 = v81 < v10[7];
          v179 = v79 == v75;
          v83 = v79 < v75;
          if (!v179)
            v82 = v83;
          v84 = *(a2 - 9);
          v85 = *(a2 - 8) < v81;
          v179 = v84 == v78;
          v86 = v84 < v78;
          if (v179)
            v86 = v85;
          if (v82)
          {
            if (v86)
            {
              v87 = *v74;
              v88 = v10[8];
              v89 = *(a2 - 7);
              *v74 = *(_QWORD *)v9;
              v10[8] = v89;
              *(a2 - 7) = v88;
              *(_QWORD *)v9 = v87;
            }
            else
            {
              v96 = *v74;
              v97 = v10[8];
              v98 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v98;
              v77[2] = v97;
              *(_QWORD *)v77 = v96;
              v99 = v96;
              LODWORD(v96) = *(a2 - 9);
              v179 = (_DWORD)v96 == v99;
              v100 = v96 < v99;
              if (v179)
                v100 = *(a2 - 8) < *v80;
              if (v100)
              {
                v292 = v77[2];
                v268 = *(_QWORD *)v77;
                v101 = *(_QWORD *)v9;
                v77[2] = *(a2 - 7);
                *(_QWORD *)v77 = v101;
                *(a2 - 7) = v292;
                *(_QWORD *)v9 = v268;
              }
            }
          }
          else if (v86)
          {
            v291 = v77[2];
            v267 = *(_QWORD *)v77;
            v90 = *(_QWORD *)v9;
            v77[2] = *(a2 - 7);
            *(_QWORD *)v77 = v90;
            *(a2 - 7) = v291;
            *(_QWORD *)v9 = v267;
            v91 = v10[6];
            v92 = *v77 < v91;
            if (*v77 == v91)
              v92 = *v80 < v10[7];
            if (v92)
            {
              v93 = *v74;
              v94 = v10[8];
              v95 = v77[2];
              *v74 = *(_QWORD *)v77;
              v10[8] = v95;
              v77[2] = v94;
              *(_QWORD *)v77 = v93;
            }
          }
          v102 = *v14;
          v103 = *v14 < *v44;
          if (*v14 == *v44)
            v103 = *v18 < *v47;
          result = *v80;
          v179 = *v77 == v102;
          v104 = *v77 < v102;
          if (v179)
            v104 = result < *v18;
          if (v103)
          {
            if (v104)
            {
              v293 = v44[2];
              v269 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v77;
              v44[2] = v77[2];
LABEL_92:
              v77[2] = v293;
              *(_QWORD *)v77 = v269;
              goto LABEL_93;
            }
            v296 = v44[2];
            v272 = *(_QWORD *)v44;
            *(_QWORD *)v44 = *(_QWORD *)v14;
            v44[2] = v14[2];
            v14[2] = v296;
            *(_QWORD *)v14 = v272;
            v106 = *v80 < *v18;
            if (*v77 != *v14)
              v106 = *v77 < *v14;
            if (v106)
            {
              v293 = v14[2];
              v269 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v77;
              v14[2] = v77[2];
              goto LABEL_92;
            }
          }
          else if (v104)
          {
            v294 = v14[2];
            v270 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14[2] = v77[2];
            v77[2] = v294;
            *(_QWORD *)v77 = v270;
            v105 = *v18 < *v47;
            if (*v14 != *v44)
              v105 = *v14 < *v44;
            if (v105)
            {
              v295 = v44[2];
              v271 = *(_QWORD *)v44;
              *(_QWORD *)v44 = *(_QWORD *)v14;
              v44[2] = v14[2];
              v14[2] = v295;
              *(_QWORD *)v14 = v271;
            }
          }
LABEL_93:
          v297 = v10[2];
          v273 = *(_QWORD *)v10;
          v107 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v107;
          v14[2] = v297;
          *(_QWORD *)v14 = v273;
          --a3;
          v36 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v67 = v10[1];
LABEL_97:
          v110 = 0;
          v111 = v10[2];
          do
          {
            v112 = v10[v110 + 3];
            v113 = v10[v110 + 4] < v67;
            v179 = v112 == v36;
            v114 = v112 < v36;
            if (!v179)
              v113 = v114;
            v110 += 3;
          }
          while (v113);
          v115 = &v10[v110];
          v116 = a2;
          if (v110 == 3)
          {
            v116 = a2;
            do
            {
              if (v115 >= v116)
                break;
              v121 = *(v116 - 3);
              v122 = *(v116 - 2);
              v116 -= 3;
              v123 = v122 < v67;
              v179 = v121 == v36;
              v124 = v121 < v36;
              if (v179)
                v124 = v123;
            }
            while (!v124);
          }
          else
          {
            do
            {
              v117 = *(v116 - 3);
              v118 = *(v116 - 2);
              v116 -= 3;
              v119 = v118 < v67;
              v179 = v117 == v36;
              v120 = v117 < v36;
              if (v179)
                v120 = v119;
            }
            while (!v120);
          }
          v10 = v115;
          if (v115 < v116)
          {
            v125 = (unint64_t)v116;
            do
            {
              v298 = v10[2];
              v274 = *(_QWORD *)v10;
              v126 = *(_QWORD *)v125;
              v10[2] = *(_DWORD *)(v125 + 8);
              *(_QWORD *)v10 = v126;
              *(_DWORD *)(v125 + 8) = v298;
              *(_QWORD *)v125 = v274;
              do
              {
                v127 = v10[3];
                v128 = v10[4];
                v10 += 3;
                v129 = v128 < v67;
                v179 = v127 == v36;
                v130 = v127 < v36;
                if (v179)
                  v130 = v129;
              }
              while (v130);
              do
              {
                v131 = *(_DWORD *)(v125 - 12);
                v132 = *(_DWORD *)(v125 - 8);
                v125 -= 12;
                v133 = v132 < v67;
                v179 = v131 == v36;
                v134 = v131 < v36;
                if (v179)
                  v134 = v133;
              }
              while (!v134);
            }
            while ((unint64_t)v10 < v125);
          }
          if (v10 - 3 != v7)
          {
            v135 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v135;
          }
          *(v10 - 3) = v36;
          *(v10 - 2) = v67;
          *(v10 - 1) = v111;
          if (v115 < v116)
            goto LABEL_126;
          v136 = sub_20F3960EC(v7, v10 - 3);
          result = sub_20F3960EC(v10, a2);
          if (!(_DWORD)result)
          {
            if (v136)
              continue;
LABEL_126:
            result = sub_20F394EB8(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v136)
            return result;
          goto LABEL_2;
        }
        v178 = v10 + 3;
        v179 = v10 == a2 || v178 == a2;
        v180 = v179;
        if ((a4 & 1) != 0)
        {
          if ((v180 & 1) == 0)
          {
            v181 = 0;
            v182 = v10;
            do
            {
              v184 = v178;
              v185 = v182[3];
              v186 = v182[4];
              v187 = v185 < *v182;
              if (v185 == *v182)
                v187 = v186 < v182[1];
              if (v187)
              {
                v188 = v182[5];
                v189 = v181;
                do
                {
                  v190 = (char *)v10 + v189;
                  *(_QWORD *)(v190 + 12) = *(_QWORD *)((char *)v10 + v189);
                  *((_DWORD *)v190 + 5) = *(unsigned int *)((char *)v10 + v189 + 8);
                  if (!v189)
                  {
                    v183 = v10;
                    goto LABEL_184;
                  }
                  v191 = *((_DWORD *)v190 - 3);
                  v192 = v186 < *((_DWORD *)v190 - 2);
                  v179 = v185 == v191;
                  v193 = v185 < v191;
                  if (!v179)
                    v192 = v193;
                  v189 -= 12;
                }
                while (v192);
                v183 = (unsigned int *)((char *)v10 + v189 + 12);
LABEL_184:
                *v183 = v185;
                v183[1] = v186;
                v183[2] = v188;
              }
              v178 = v184 + 3;
              v181 += 12;
              v182 = v184;
            }
            while (v184 + 3 != a2);
          }
        }
        else if ((v180 & 1) == 0)
        {
          do
          {
            v239 = v178;
            v240 = v7[3];
            v241 = v7[4];
            v242 = v240 < *v7;
            if (v240 == *v7)
              v242 = v241 < v7[1];
            if (v242)
            {
              v243 = v7[5];
              v244 = v239;
              do
              {
                v245 = v244;
                v246 = *(_QWORD *)(v244 - 3);
                v244 -= 3;
                *(_QWORD *)v245 = v246;
                v245[2] = *(v245 - 1);
                v247 = *(v245 - 6);
                v248 = v241 < *(v245 - 5);
                v179 = v240 == v247;
                v249 = v240 < v247;
                if (!v179)
                  v248 = v249;
              }
              while (v248);
              *v244 = v240;
              v244[1] = v241;
              v244[2] = v243;
            }
            v178 = v239 + 3;
            v7 = v239;
          }
          while (v239 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F3960EC(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BCB74(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F396580(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

unsigned int *sub_20F396580(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int *result;
  _BOOL4 v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _BOOL4 v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;

  result = sub_20F2BCB74(a1, a2, a3, a4);
  v11 = *a5 < *a4;
  if (*a5 == *a4)
    v11 = a5[1] < a4[1];
  if (v11)
  {
    v12 = a4[2];
    v13 = *(_QWORD *)a4;
    v14 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v14;
    *(_QWORD *)a5 = v13;
    a5[2] = v12;
    v15 = *a4 < *a3;
    if (*a4 == *a3)
      v15 = a4[1] < a3[1];
    if (v15)
    {
      v16 = a3[2];
      v17 = *(_QWORD *)a3;
      v18 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v18;
      *(_QWORD *)a4 = v17;
      a4[2] = v16;
      v19 = *a3 < *a2;
      if (*a3 == *a2)
        v19 = a3[1] < a2[1];
      if (v19)
      {
        v20 = a2[2];
        v21 = *(_QWORD *)a2;
        v22 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v22;
        *(_QWORD *)a3 = v21;
        a3[2] = v20;
        v23 = *a2 < *a1;
        if (*a2 == *a1)
          v23 = a2[1] < a1[1];
        if (v23)
        {
          v24 = a1[2];
          v25 = *(_QWORD *)a1;
          v26 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v26;
          *(_QWORD *)a2 = v25;
          a2[2] = v24;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20F3966D8(uint64_t result, unsigned int *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  BOOL v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  BOOL v117;
  BOOL v118;
  unsigned int *v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int v122;
  _BOOL4 v123;
  _BOOL4 v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  BOOL v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  BOOL v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  BOOL v140;
  unsigned int v141;
  BOOL v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;
  BOOL v146;
  unsigned int *v147;
  unsigned int v148;
  _BOOL4 v149;
  _BOOL4 v150;
  unsigned int *v151;
  unsigned int v152;
  unsigned int v153;
  BOOL v154;
  BOOL v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  _BOOL4 v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  _QWORD *v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  BOOL v171;
  unsigned int *v172;
  unsigned int v173;
  _BOOL4 v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  _BOOL4 v180;
  _BOOL4 v181;
  uint64_t v182;
  unsigned int *v183;
  BOOL v184;
  char v185;
  uint64_t v186;
  unsigned int *v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  _BOOL4 v193;
  unsigned int v194;
  uint64_t v195;
  char *v196;
  unsigned int v197;
  BOOL v198;
  BOOL v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int v214;
  unsigned int v215;
  _BOOL4 v216;
  BOOL v217;
  unsigned int v218;
  unsigned int v219;
  _BOOL4 v220;
  _BOOL4 v221;
  unsigned int *v222;
  uint64_t v223;
  uint64_t v224;
  int64_t v225;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  _BOOL4 v244;
  int v245;
  char *v246;
  uint64_t v247;
  unsigned int v248;
  BOOL v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  _BOOL4 v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  uint64_t v264;
  unsigned int v265;
  BOOL v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 3;
  v274 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v176 = *(a2 - 3);
        v177 = *(a2 - 2);
        v178 = a2 - 3;
        v179 = v10[1];
        v180 = v176 < *v10;
        v184 = v177 == v179;
        v181 = v177 < v179;
        if (!v184)
          v180 = v181;
        if (v180)
        {
          v319 = v10[2];
          v295 = *(_QWORD *)v10;
          v182 = *(_QWORD *)v178;
          v10[2] = v178[2];
          *(_QWORD *)v10 = v182;
          v178[2] = v319;
          *(_QWORD *)v178 = v295;
        }
        return result;
      case 3:
        v167 = v10 + 3;
        v168 = v10[3];
        v169 = v10[4];
        v170 = v10[1];
        v184 = v169 == v170;
        v171 = v169 < v170;
        if (v184)
          v171 = v168 < *v10;
        v173 = *(a2 - 2);
        v172 = a2 - 3;
        v174 = *(a2 - 3) < v168;
        if (v173 != v169)
          v174 = v173 < v169;
        if (v171)
        {
          if (v174)
          {
            v318 = v10[2];
            v294 = *(_QWORD *)v10;
            v175 = *(_QWORD *)v172;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v175;
            *(a2 - 1) = v318;
            *(_QWORD *)v172 = v294;
          }
          else
          {
            v322 = v10[2];
            v298 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v298;
            v10[5] = v322;
            v268 = *(a2 - 2);
            v269 = v10[4];
            v184 = v268 == v269;
            v270 = v268 < v269;
            if (v184)
              v270 = *(a2 - 3) < v10[3];
            if (v270)
            {
              v271 = *v167;
              v272 = v10[5];
              v273 = *(a2 - 1);
              *v167 = *(_QWORD *)v172;
              v10[5] = v273;
              *(a2 - 1) = v272;
              *(_QWORD *)v172 = v271;
            }
          }
        }
        else if (v174)
        {
          v250 = *v167;
          v251 = v10[5];
          v252 = *(a2 - 1);
          *v167 = *(_QWORD *)v172;
          v10[5] = v252;
          *(a2 - 1) = v251;
          *(_QWORD *)v172 = v250;
          v253 = v10[4];
          v254 = v10[1];
          v184 = v253 == v254;
          v255 = v253 < v254;
          if (v184)
            v255 = v10[3] < *v10;
          if (v255)
          {
            v321 = v10[2];
            v297 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v167;
            v10[2] = v10[5];
            *v167 = v297;
            v10[5] = v321;
          }
        }
        return result;
      case 4:
        return (uint64_t)sub_20F2BE75C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5:
        return (uint64_t)sub_20F397DA0(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v11 > 287)
        {
          if (!a3)
          {
            if (v10 != a2)
            {
              v200 = (unint64_t)(v12 - 2) >> 1;
              v201 = v200;
              do
              {
                v202 = v201;
                if (v200 >= v201)
                {
                  v203 = (2 * v201) | 1;
                  v204 = &v10[3 * v203];
                  if (2 * v202 + 2 >= v12)
                  {
                    v207 = *v204;
                  }
                  else
                  {
                    v205 = v10[3 * v203 + 1];
                    v206 = v204[4];
                    v207 = *v204;
                    v184 = v205 == v206;
                    v208 = v205 < v206;
                    if (v184)
                      v208 = *v204 < v204[3];
                    if (v208)
                    {
                      v207 = v204[3];
                      v204 += 3;
                      v203 = 2 * v202 + 2;
                    }
                  }
                  v209 = &v10[3 * v202];
                  v210 = v204[1];
                  v211 = v209[1];
                  v212 = *v209;
                  LODWORD(result) = v207 < *v209;
                  v184 = v210 == v211;
                  v213 = v210 < v211;
                  if (v184)
                    result = result;
                  else
                    result = v213;
                  if ((result & 1) == 0)
                  {
                    result = v209[2];
                    do
                    {
                      v222 = v209;
                      v209 = v204;
                      v223 = *(_QWORD *)v204;
                      v222[2] = v209[2];
                      *(_QWORD *)v222 = v223;
                      if (v200 < v203)
                        break;
                      v224 = (2 * v203) | 1;
                      v204 = &v10[3 * v224];
                      v203 = 2 * v203 + 2;
                      if (v203 < v12)
                      {
                        v214 = v10[3 * v224 + 1];
                        v215 = v204[4];
                        v184 = v214 == v215;
                        v216 = v214 < v215;
                        if (v184)
                          v216 = *v204 < v204[3];
                        v217 = !v216;
                        v218 = v216 ? v204[3] : *v204;
                        if (v217)
                          v203 = v224;
                        else
                          v204 += 3;
                      }
                      else
                      {
                        v218 = *v204;
                        v203 = v224;
                      }
                      v219 = v204[1];
                      v220 = v218 < v212;
                      v184 = v219 == v211;
                      v221 = v219 < v211;
                      if (v184)
                        v221 = v220;
                    }
                    while (!v221);
                    *v209 = v212;
                    v209[1] = v211;
                    v209[2] = result;
                  }
                }
                v201 = v202 - 1;
              }
              while (v202);
              v225 = v11 / 0xCuLL;
              do
              {
                v227 = 0;
                v320 = v10[2];
                v296 = *(_QWORD *)v10;
                v228 = (char *)v10;
                do
                {
                  v230 = v227 + 1;
                  v231 = &v228[12 * v227 + 12];
                  v232 = (2 * v227) | 1;
                  v233 = 2 * v227 + 2;
                  if (v233 < v225)
                  {
                    v234 = *(_DWORD *)&v228[12 * v230 + 4];
                    v235 = *((_DWORD *)v231 + 4);
                    result = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    v184 = v234 == v235;
                    v236 = v234 < v235;
                    if (v184)
                      v236 = *(_DWORD *)v231 < *((_DWORD *)v231 + 3);
                    if (v236)
                    {
                      v231 += 12;
                      v232 = v233;
                    }
                  }
                  v229 = *(_QWORD *)v231;
                  *((_DWORD *)v228 + 2) = *((_DWORD *)v231 + 2);
                  *(_QWORD *)v228 = v229;
                  v228 = v231;
                  v227 = v232;
                }
                while (v232 <= (uint64_t)((unint64_t)(v225 - 2) >> 1));
                a2 -= 3;
                if (v231 == (char *)a2)
                {
                  *((_DWORD *)v231 + 2) = v320;
                  *(_QWORD *)v231 = v296;
                }
                else
                {
                  v237 = *(_QWORD *)a2;
                  *((_DWORD *)v231 + 2) = a2[2];
                  *(_QWORD *)v231 = v237;
                  a2[2] = v320;
                  *(_QWORD *)a2 = v296;
                  v238 = v231 - (char *)v10 + 12;
                  if (v238 >= 13)
                  {
                    v239 = (v238 / 0xCuLL - 2) >> 1;
                    v240 = (char *)&v10[3 * v239];
                    v241 = *((_DWORD *)v240 + 1);
                    v243 = *(_DWORD *)v231;
                    v242 = *((_DWORD *)v231 + 1);
                    v184 = v241 == v242;
                    v244 = v241 < v242;
                    if (v184)
                      v244 = *(_DWORD *)v240 < *(_DWORD *)v231;
                    if (v244)
                    {
                      v245 = *((_DWORD *)v231 + 2);
                      do
                      {
                        v246 = v231;
                        v231 = v240;
                        v247 = *(_QWORD *)v240;
                        result = *((unsigned int *)v231 + 2);
                        *((_DWORD *)v246 + 2) = result;
                        *(_QWORD *)v246 = v247;
                        if (!v239)
                          break;
                        v239 = (v239 - 1) >> 1;
                        v240 = (char *)&v10[3 * v239];
                        v248 = *((_DWORD *)v240 + 1);
                        result = *(_DWORD *)v240 < v243;
                        v184 = v248 == v242;
                        v249 = v248 < v242;
                        if (v184)
                          v249 = *(_DWORD *)v240 < v243;
                      }
                      while (v249);
                      *(_DWORD *)v231 = v243;
                      *((_DWORD *)v231 + 1) = v242;
                      *((_DWORD *)v231 + 2) = v245;
                    }
                  }
                }
              }
              while (v225-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          v16 = *(a2 - 3);
          v15 = *(a2 - 2);
          if ((unint64_t)v11 < 0x601)
          {
            v24 = v10[1];
            v25 = &v10[3 * v13 + 1];
            v26 = v24 < *v25;
            if (v24 == *v25)
              v26 = *v10 < *v14;
            v27 = v16 < *v10;
            v184 = v15 == v24;
            v28 = v15 < v24;
            if (v184)
              v28 = v27;
            if (v26)
            {
              if (v28)
              {
                v300 = v14[2];
                v276 = *(_QWORD *)v14;
                v29 = *(_QWORD *)v8;
                v14[2] = *(a2 - 1);
                *(_QWORD *)v14 = v29;
LABEL_53:
                *(a2 - 1) = v300;
                *(_QWORD *)v8 = v276;
                goto LABEL_54;
              }
              v307 = v14[2];
              v283 = *(_QWORD *)v14;
              v65 = *(_QWORD *)v10;
              v14[2] = v10[2];
              *(_QWORD *)v14 = v65;
              v10[2] = v307;
              *(_QWORD *)v10 = v283;
              v66 = *(a2 - 2);
              v67 = v10[1];
              v184 = v66 == v67;
              v68 = v66 < v67;
              if (v184)
                v68 = *(a2 - 3) < *v10;
              if (v68)
              {
                v300 = v10[2];
                v276 = *(_QWORD *)v10;
                v69 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v69;
                goto LABEL_53;
              }
            }
            else if (v28)
            {
              v303 = v10[2];
              v279 = *(_QWORD *)v10;
              v34 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v34;
              *(a2 - 1) = v303;
              *(_QWORD *)v8 = v279;
              v35 = *v25;
              LODWORD(v34) = v10[1];
              v184 = (_DWORD)v34 == v35;
              v36 = v34 < v35;
              if (v184)
                v36 = *v10 < *v14;
              if (v36)
              {
                v304 = v14[2];
                v280 = *(_QWORD *)v14;
                v37 = *(_QWORD *)v10;
                v14[2] = v10[2];
                *(_QWORD *)v14 = v37;
                v10[2] = v304;
                *(_QWORD *)v10 = v280;
                --a3;
                v38 = v280;
                if ((a4 & 1) != 0)
                  goto LABEL_55;
                goto LABEL_94;
              }
            }
LABEL_54:
            --a3;
            v38 = *v10;
            if ((a4 & 1) != 0)
              goto LABEL_55;
LABEL_94:
            v70 = v10[1];
            v112 = *(v10 - 2);
            v184 = v112 == v70;
            v113 = v112 < v70;
            if (v184)
              v113 = *(v10 - 3) < v38;
            if (v113)
              goto LABEL_97;
            v141 = *(a2 - 2);
            v184 = v70 == v141;
            v142 = v70 < v141;
            if (v184)
              v142 = v38 < *(a2 - 3);
            if (v142)
            {
              do
              {
                v143 = v10[3];
                v144 = v10[4];
                v10 += 3;
                v145 = v38 < v143;
                v184 = v70 == v144;
                v146 = v70 < v144;
                if (!v184)
                  v145 = v146;
              }
              while (!v145);
            }
            else
            {
              v147 = v10 + 3;
              do
              {
                v10 = v147;
                if (v147 >= a2)
                  break;
                v148 = v147[1];
                v149 = v38 < *v10;
                v184 = v70 == v148;
                v150 = v70 < v148;
                if (!v184)
                  v149 = v150;
                v147 = v10 + 3;
              }
              while (!v149);
            }
            v151 = a2;
            if (v10 < a2)
            {
              v151 = a2;
              do
              {
                v152 = *(v151 - 3);
                v153 = *(v151 - 2);
                v151 -= 3;
                v154 = v38 < v152;
                v184 = v70 == v153;
                v155 = v70 < v153;
                if (!v184)
                  v154 = v155;
              }
              while (v154);
            }
            v156 = v7[2];
            while (v10 < v151)
            {
              v317 = v10[2];
              v293 = *(_QWORD *)v10;
              v157 = *(_QWORD *)v151;
              v10[2] = v151[2];
              *(_QWORD *)v10 = v157;
              v151[2] = v317;
              *(_QWORD *)v151 = v293;
              do
              {
                v158 = v10[3];
                v159 = v10[4];
                v10 += 3;
                v160 = v38 < v158;
                v184 = v70 == v159;
                v161 = v70 < v159;
                if (!v184)
                  v160 = v161;
              }
              while (!v160);
              do
              {
                v162 = *(v151 - 3);
                v163 = *(v151 - 2);
                v151 -= 3;
                v164 = v38 < v162;
                v184 = v70 == v163;
                v165 = v70 < v163;
                if (!v184)
                  v164 = v165;
              }
              while (v164);
            }
            if (v10 - 3 != v7)
            {
              v166 = *(_QWORD *)(v10 - 3);
              v7[2] = *(v10 - 1);
              *(_QWORD *)v7 = v166;
            }
            a4 = 0;
            *(v10 - 3) = v38;
            *(v10 - 2) = v70;
            *(v10 - 1) = v156;
            continue;
          }
          v17 = v10[1];
          v18 = &v10[3 * v13 + 1];
          v19 = *v18;
          v184 = *v18 == v17;
          v20 = *v18 < v17;
          if (v184)
            v20 = *v14 < *v10;
          v21 = v16 < *v14;
          v184 = v15 == v19;
          v22 = v15 < v19;
          if (v184)
            v22 = v21;
          if (v20)
          {
            if (v22)
            {
              v299 = v10[2];
              v275 = *(_QWORD *)v10;
              v23 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v23;
LABEL_36:
              *(a2 - 1) = v299;
              *(_QWORD *)v8 = v275;
              goto LABEL_37;
            }
            v305 = v10[2];
            v281 = *(_QWORD *)v10;
            v39 = *(_QWORD *)v14;
            v10[2] = v14[2];
            *(_QWORD *)v10 = v39;
            v14[2] = v305;
            *(_QWORD *)v14 = v281;
            v40 = *(a2 - 2);
            v41 = v40 < *v18;
            if (v40 == *v18)
              v41 = *(a2 - 3) < *v14;
            if (v41)
            {
              v299 = v14[2];
              v275 = *(_QWORD *)v14;
              v42 = *(_QWORD *)v8;
              v14[2] = *(a2 - 1);
              *(_QWORD *)v14 = v42;
              goto LABEL_36;
            }
          }
          else if (v22)
          {
            v301 = v14[2];
            v277 = *(_QWORD *)v14;
            v30 = *(_QWORD *)v8;
            v14[2] = *(a2 - 1);
            *(_QWORD *)v14 = v30;
            *(a2 - 1) = v301;
            *(_QWORD *)v8 = v277;
            v31 = v10[1];
            v32 = *v18 < v31;
            if (*v18 == v31)
              v32 = *v14 < *v10;
            if (v32)
            {
              v302 = v10[2];
              v278 = *(_QWORD *)v10;
              v33 = *(_QWORD *)v14;
              v10[2] = v14[2];
              *(_QWORD *)v10 = v33;
              v14[2] = v302;
              *(_QWORD *)v14 = v278;
            }
          }
LABEL_37:
          v43 = (uint64_t *)(v10 + 3);
          v44 = &v10[3 * v13];
          v47 = *(v44 - 3);
          v45 = v44 - 3;
          v46 = v47;
          v48 = v45 + 1;
          v49 = v45[1];
          v50 = v10[4];
          v51 = v47 < v10[3];
          v184 = v49 == v50;
          v52 = v49 < v50;
          if (v184)
            v52 = v51;
          v53 = *(a2 - 5);
          v54 = *(a2 - 6) < v46;
          v184 = v53 == v49;
          v55 = v53 < v49;
          if (v184)
            v55 = v54;
          if (v52)
          {
            if (v55)
            {
              v56 = *v43;
              v57 = v10[5];
              v58 = *(a2 - 4);
              *v43 = *(_QWORD *)v274;
              v10[5] = v58;
              *(a2 - 4) = v57;
              *(_QWORD *)v274 = v56;
            }
            else
            {
              v71 = *v43;
              v72 = v10[5];
              v73 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v73;
              v45[2] = v72;
              *(_QWORD *)v45 = v71;
              LODWORD(v71) = *(a2 - 5);
              v74 = v71 < *v48;
              if ((_DWORD)v71 == *v48)
                v74 = *(a2 - 6) < *v45;
              if (v74)
              {
                v308 = v45[2];
                v284 = *(_QWORD *)v45;
                v75 = *(_QWORD *)v274;
                v45[2] = *(a2 - 4);
                *(_QWORD *)v45 = v75;
                *(a2 - 4) = v308;
                *(_QWORD *)v274 = v284;
              }
            }
          }
          else if (v55)
          {
            v306 = v45[2];
            v282 = *(_QWORD *)v45;
            v59 = *(_QWORD *)v274;
            v45[2] = *(a2 - 4);
            *(_QWORD *)v45 = v59;
            *(a2 - 4) = v306;
            *(_QWORD *)v274 = v282;
            v60 = v10[4];
            v61 = *v48 < v60;
            if (*v48 == v60)
              v61 = *v45 < v10[3];
            if (v61)
            {
              v62 = *v43;
              v63 = v10[5];
              v64 = v45[2];
              *v43 = *(_QWORD *)v45;
              v10[5] = v64;
              v45[2] = v63;
              *(_QWORD *)v45 = v62;
            }
          }
          v76 = (uint64_t *)(v10 + 6);
          v77 = &v10[3 * v13];
          v80 = v77[3];
          v78 = v77 + 3;
          v79 = v80;
          v81 = v78 + 1;
          v82 = v78[1];
          v83 = v10[7];
          v84 = v80 < v10[6];
          v184 = v82 == v83;
          v85 = v82 < v83;
          if (v184)
            v85 = v84;
          v86 = *(a2 - 8);
          v87 = *(a2 - 9) < v79;
          v184 = v86 == v82;
          v88 = v86 < v82;
          if (v184)
            v88 = v87;
          if (v85)
          {
            if (v88)
            {
              v89 = *v76;
              v90 = v10[8];
              v91 = *(a2 - 7);
              *v76 = *(_QWORD *)v9;
              v10[8] = v91;
              *(a2 - 7) = v90;
              *(_QWORD *)v9 = v89;
            }
            else
            {
              v98 = *v76;
              v99 = v10[8];
              v100 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v100;
              v78[2] = v99;
              *(_QWORD *)v78 = v98;
              LODWORD(v98) = *(a2 - 8);
              v101 = v98 < *v81;
              if ((_DWORD)v98 == *v81)
                v101 = *(a2 - 9) < *v78;
              if (v101)
              {
                v310 = v78[2];
                v286 = *(_QWORD *)v78;
                v102 = *(_QWORD *)v9;
                v78[2] = *(a2 - 7);
                *(_QWORD *)v78 = v102;
                *(a2 - 7) = v310;
                *(_QWORD *)v9 = v286;
              }
            }
          }
          else if (v88)
          {
            v309 = v78[2];
            v285 = *(_QWORD *)v78;
            v92 = *(_QWORD *)v9;
            v78[2] = *(a2 - 7);
            *(_QWORD *)v78 = v92;
            *(a2 - 7) = v309;
            *(_QWORD *)v9 = v285;
            v93 = v10[7];
            v94 = *v81 < v93;
            if (*v81 == v93)
              v94 = *v78 < v10[6];
            if (v94)
            {
              v95 = *v76;
              v96 = v10[8];
              v97 = v78[2];
              *v76 = *(_QWORD *)v78;
              v10[8] = v97;
              v78[2] = v96;
              *(_QWORD *)v78 = v95;
            }
          }
          v103 = *v18;
          v104 = *v18 < *v48;
          if (*v18 == *v48)
            v104 = *v14 < *v45;
          result = *v78;
          v184 = *v81 == v103;
          v105 = *v81 < v103;
          if (v184)
            v105 = result < *v14;
          if (v104)
          {
            if (v105)
            {
              v311 = v45[2];
              v287 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v78;
              v45[2] = v78[2];
LABEL_92:
              v78[2] = v311;
              *(_QWORD *)v78 = v287;
              goto LABEL_93;
            }
            v314 = v45[2];
            v290 = *(_QWORD *)v45;
            *(_QWORD *)v45 = *(_QWORD *)v14;
            v45[2] = v14[2];
            v14[2] = v314;
            *(_QWORD *)v14 = v290;
            v109 = *v18;
            v184 = *v81 == v109;
            v110 = *v81 < v109;
            if (v184)
              v110 = *v78 < *v14;
            if (v110)
            {
              v311 = v14[2];
              v287 = *(_QWORD *)v14;
              *(_QWORD *)v14 = *(_QWORD *)v78;
              v14[2] = v78[2];
              goto LABEL_92;
            }
          }
          else if (v105)
          {
            v312 = v14[2];
            v288 = *(_QWORD *)v14;
            *(_QWORD *)v14 = *(_QWORD *)v78;
            v14[2] = v78[2];
            v78[2] = v312;
            *(_QWORD *)v78 = v288;
            v106 = *v18;
            v107 = *v48;
            v184 = v106 == v107;
            v108 = v106 < v107;
            if (v184)
              v108 = *v14 < *v45;
            if (v108)
            {
              v313 = v45[2];
              v289 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v14;
              v45[2] = v14[2];
              v14[2] = v313;
              *(_QWORD *)v14 = v289;
            }
          }
LABEL_93:
          v315 = v10[2];
          v291 = *(_QWORD *)v10;
          v111 = *(_QWORD *)v14;
          v10[2] = v14[2];
          *(_QWORD *)v10 = v111;
          v14[2] = v315;
          *(_QWORD *)v14 = v291;
          --a3;
          v38 = *v10;
          if ((a4 & 1) == 0)
            goto LABEL_94;
LABEL_55:
          v70 = v10[1];
LABEL_97:
          v114 = 0;
          v115 = v10[2];
          do
          {
            v116 = v10[v114 + 4];
            v117 = v10[v114 + 3] < v38;
            v184 = v116 == v70;
            v118 = v116 < v70;
            if (!v184)
              v117 = v118;
            v114 += 3;
          }
          while (v117);
          v119 = &v10[v114];
          v120 = a2;
          if (v114 == 3)
          {
            v120 = a2;
            do
            {
              if (v119 >= v120)
                break;
              v125 = *(v120 - 3);
              v126 = *(v120 - 2);
              v120 -= 3;
              v127 = v125 < v38;
              v184 = v126 == v70;
              v128 = v126 < v70;
              if (!v184)
                v127 = v128;
            }
            while (!v127);
          }
          else
          {
            do
            {
              v121 = *(v120 - 3);
              v122 = *(v120 - 2);
              v120 -= 3;
              v123 = v121 < v38;
              v184 = v122 == v70;
              v124 = v122 < v70;
              if (!v184)
                v123 = v124;
            }
            while (!v123);
          }
          v10 = v119;
          if (v119 < v120)
          {
            v129 = (unint64_t)v120;
            do
            {
              v316 = v10[2];
              v292 = *(_QWORD *)v10;
              v130 = *(_QWORD *)v129;
              v10[2] = *(_DWORD *)(v129 + 8);
              *(_QWORD *)v10 = v130;
              *(_DWORD *)(v129 + 8) = v316;
              *(_QWORD *)v129 = v292;
              do
              {
                v131 = v10[3];
                v132 = v10[4];
                v10 += 3;
                v133 = v131 < v38;
                v184 = v132 == v70;
                v134 = v132 < v70;
                if (!v184)
                  v133 = v134;
              }
              while (v133);
              do
              {
                v135 = *(_DWORD *)(v129 - 12);
                v136 = *(_DWORD *)(v129 - 8);
                v129 -= 12;
                v137 = v135 < v38;
                v184 = v136 == v70;
                v138 = v136 < v70;
                if (!v184)
                  v137 = v138;
              }
              while (!v137);
            }
            while ((unint64_t)v10 < v129);
          }
          if (v10 - 3 != v7)
          {
            v139 = *(_QWORD *)(v10 - 3);
            v7[2] = *(v10 - 1);
            *(_QWORD *)v7 = v139;
          }
          *(v10 - 3) = v38;
          *(v10 - 2) = v70;
          *(v10 - 1) = v115;
          if (v119 < v120)
            goto LABEL_126;
          v140 = sub_20F39790C(v7, v10 - 3);
          result = sub_20F39790C(v10, a2);
          if (!(_DWORD)result)
          {
            if (v140)
              continue;
LABEL_126:
            result = sub_20F3966D8(v7, v10 - 3, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v10 - 3;
          if (v140)
            return result;
          goto LABEL_2;
        }
        v183 = v10 + 3;
        v184 = v10 == a2 || v183 == a2;
        v185 = v184;
        if ((a4 & 1) != 0)
        {
          if ((v185 & 1) == 0)
          {
            v186 = 0;
            v187 = v10;
            do
            {
              v189 = v183;
              v191 = v187[3];
              v190 = v187[4];
              v192 = v187[1];
              v184 = v190 == v192;
              v193 = v190 < v192;
              if (v184)
                v193 = v191 < *v187;
              if (v193)
              {
                v194 = v187[5];
                v195 = v186;
                do
                {
                  v196 = (char *)v10 + v195;
                  *(_QWORD *)(v196 + 12) = *(_QWORD *)((char *)v10 + v195);
                  *((_DWORD *)v196 + 5) = *(unsigned int *)((char *)v10 + v195 + 8);
                  if (!v195)
                  {
                    v188 = v10;
                    goto LABEL_184;
                  }
                  v197 = *((_DWORD *)v196 - 2);
                  v198 = v191 < *((_DWORD *)v196 - 3);
                  v184 = v190 == v197;
                  v199 = v190 < v197;
                  if (!v184)
                    v198 = v199;
                  v195 -= 12;
                }
                while (v198);
                v188 = (unsigned int *)((char *)v10 + v195 + 12);
LABEL_184:
                *v188 = v191;
                v188[1] = v190;
                v188[2] = v194;
              }
              v183 = v189 + 3;
              v186 += 12;
              v187 = v189;
            }
            while (v189 + 3 != a2);
          }
        }
        else if ((v185 & 1) == 0)
        {
          do
          {
            v256 = v183;
            v258 = v7[3];
            v257 = v7[4];
            v259 = v7[1];
            v184 = v257 == v259;
            v260 = v257 < v259;
            if (v184)
              v260 = v258 < *v7;
            if (v260)
            {
              v261 = v7[5];
              v262 = v256;
              do
              {
                v263 = v262;
                v264 = *(_QWORD *)(v262 - 3);
                v262 -= 3;
                *(_QWORD *)v263 = v264;
                v263[2] = *(v263 - 1);
                v265 = *(v263 - 5);
                v266 = v258 < *(v263 - 6);
                v184 = v257 == v265;
                v267 = v257 < v265;
                if (!v184)
                  v266 = v267;
              }
              while (v266);
              *v262 = v258;
              v262[1] = v257;
              v262[2] = v261;
            }
            v183 = v256 + 3;
            v7 = v256;
          }
          while (v256 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F39790C(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BE75C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F397DA0(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

_DWORD *sub_20F397DA0(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  _DWORD *result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  int v35;

  result = sub_20F2BE75C(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  v13 = v11 == v12;
  v14 = v11 < v12;
  if (v13)
    v14 = *a5 < *a4;
  if (v14)
  {
    v15 = a4[2];
    v16 = *(_QWORD *)a4;
    v17 = a5[2];
    *(_QWORD *)a4 = *(_QWORD *)a5;
    a4[2] = v17;
    *(_QWORD *)a5 = v16;
    a5[2] = v15;
    v18 = a4[1];
    v19 = a3[1];
    v13 = v18 == v19;
    v20 = v18 < v19;
    if (v13)
      v20 = *a4 < *a3;
    if (v20)
    {
      v21 = a3[2];
      v22 = *(_QWORD *)a3;
      v23 = a4[2];
      *(_QWORD *)a3 = *(_QWORD *)a4;
      a3[2] = v23;
      *(_QWORD *)a4 = v22;
      a4[2] = v21;
      v24 = a3[1];
      v25 = a2[1];
      v13 = v24 == v25;
      v26 = v24 < v25;
      if (v13)
        v26 = *a3 < *a2;
      if (v26)
      {
        v27 = a2[2];
        v28 = *(_QWORD *)a2;
        v29 = a3[2];
        *(_QWORD *)a2 = *(_QWORD *)a3;
        a2[2] = v29;
        *(_QWORD *)a3 = v28;
        a3[2] = v27;
        v30 = a2[1];
        v31 = a1[1];
        v13 = v30 == v31;
        v32 = v30 < v31;
        if (v13)
          v32 = *a2 < *a1;
        if (v32)
        {
          v33 = a1[2];
          v34 = *(_QWORD *)a1;
          v35 = a2[2];
          *(_QWORD *)a1 = *(_QWORD *)a2;
          a1[2] = v35;
          *(_QWORD *)a2 = v34;
          a2[2] = v33;
        }
      }
    }
  }
  return result;
}

char *sub_20F397EF8(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F398148(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F398160(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 48 * v5;
    }
    v7 = 48 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 384;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F3982A0(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F3982A0(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

double sub_20F398460(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  float64x2_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double i;
  unint64_t v12;
  double *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double v23;
  long double v24;
  long double v25;
  double v26;
  double v27;
  double v31;
  long double v32;
  long double v33;
  long double v34;
  float64x2_t v35;
  float64x2_t v36;

  kdebug_trace();
  if (!a2[66])
  {
    if (a2[65])
    {
      v6 = (_QWORD *)a2[64];
LABEL_4:
      *v6 = 0;
      goto LABEL_9;
    }
    a2[65] = 1;
    v6 = (_QWORD *)operator new[]();
    v7 = (_QWORD *)a2[64];
    if (v7 != a2 && v7)
      MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
    a2[64] = v6;
    if (!a2[66])
      goto LABEL_4;
  }
LABEL_9:
  a2[66] = 1;
  v9 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(a1 + 300))
  {
    if (v9 == v8)
    {
      i = 0.0;
    }
    else if (*(_BYTE *)(a1 + 299))
    {
      v10 = v8 - v9 - 152;
      i = 0.0;
      if (v10 < 0x98)
        goto LABEL_34;
      v12 = v10 / 0x98 + 1;
      v13 = (double *)(v9 + 264);
      v14 = v12 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        i = i + *(v13 - 19) + *v13;
        v13 += 38;
        v14 -= 2;
      }
      while (v14);
      v9 += 152 * (v12 & 0x3FFFFFFFFFFFFFELL);
      if (v12 != (v12 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          i = i + *(double *)(v9 + 112);
          v9 += 152;
        }
        while (v9 != v8);
      }
    }
    else
    {
      i = 0.0;
      do
      {
        if (*(_BYTE *)(v9 + 120))
        {
          *(_OWORD *)(v9 + 96) = *(_OWORD *)(v9 + 80);
          v36 = *(float64x2_t *)(v9 + 96);
          _D1 = v36.f64[1];
          __asm { FMLA            D0, D1, V2.D[1] }
          v31 = *(double *)(a1 + 24);
          v32 = *(double *)(a1 + 32) * (*(double *)(a1 + 16) * _D0);
          v33 = v32 + 1.0;
          v34 = v31 * log1p(v32);
          *(long double *)(v9 + 112) = v34;
          *(float64x2_t *)(v9 + 96) = vmulq_n_f64(v36, sqrt(1.0 / v33));
          i = i + v34;
        }
        v9 += 152;
      }
      while (v9 != v8);
    }
  }
  else
  {
    for (i = 0.0; v9 != v8; v9 += 152)
    {
      while (1)
      {
        v15 = sub_20FC6C04C(v9 + 8, v9 + 72, (float64x2_t *)(v9 + 96), v4, v5);
        *(_BYTE *)(v9 + 120) = v15;
        if (v15)
          break;
        *(_QWORD *)(v9 + 112) = 0;
        v9 += 152;
        if (v9 == v8)
          goto LABEL_27;
      }
      v16 = *(_QWORD *)(v9 + 128);
      if (v16)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v9 + 96);
      *(_OWORD *)(v9 + 80) = *(_OWORD *)(v9 + 96);
      v35 = *(float64x2_t *)(v9 + 96);
      _D1 = v35.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v23 = *(double *)(a1 + 24);
      v24 = *(double *)(a1 + 32) * (*(double *)(a1 + 16) * _D0);
      v25 = v24 + 1.0;
      v4.f64[0] = v23 * log1p(v24);
      *(float64_t *)(v9 + 112) = v4.f64[0];
      v5 = vmulq_n_f64(v35, sqrt(1.0 / v25));
      *(float64x2_t *)(v9 + 96) = v5;
      i = i + v4.f64[0];
    }
  }
LABEL_27:
  *(double *)a2[64] = i * 0.5;
  *(_WORD *)(a1 + 299) = 257;
  v26 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v27 = *(double *)a2[64];
  kdebug_trace();
  return v26 + v27;
}

void sub_20F39876C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EDB42B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F398784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EDB42B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F398798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EDB42B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double *sub_20F3987AC(uint64_t a1, double *a2, double *a3, double a4, float64x2_t a5)
{
  float64x2_t v8;
  unint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  double *result;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD v17[64];
  double *v18;
  __int128 v19;
  uint64_t v20;

  v18 = (double *)v17;
  v8 = (float64x2_t)xmmword_210378040;
  v19 = xmmword_210378040;
  v9 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if (v9 >= 0x41)
  {
    if (v9 <= 0x80)
      v9 = 128;
    *(_QWORD *)&v19 = v9;
    v10 = (double *)operator new[]();
    if (v18 != (double *)v17 && v18)
      MEMORY[0x212BC6368]();
    v18 = v10;
  }
  v11 = *a3;
  *((_QWORD *)&v19 + 1) = 0;
  if (*(_BYTE *)(a1 + 300))
  {
    v20 = a1 + 40;
    sub_20F3989B4((uint64_t)&v20, v17);
  }
  else
  {
    v20 = a1 + 40;
    sub_20F398B84((uint64_t)&v20, v17, v8, a5);
  }
  v12 = *((_QWORD *)&v19 + 1);
  result = v18;
  if (!*((_QWORD *)&v19 + 1))
  {
    *a2 = 1.0;
    *((_QWORD *)&v19 + 1) = 0;
    if (result == (double *)v17)
      return result;
    goto LABEL_19;
  }
  v14 = *((_QWORD *)&v19 + 1) >> 1;
  sub_20E8FB210(v18, &v18[*((_QWORD *)&v19 + 1) >> 1], &v18[*((_QWORD *)&v19 + 1)]);
  result = v18;
  v15 = v18[v14];
  if ((v12 & 1) == 0)
  {
    v16 = v14 - 1;
    if (v16 != v12)
    {
      sub_20E8FB210(v18, &v18[v16], &v18[v12]);
      result = v18;
    }
    v15 = (v15 + result[v16]) * 0.5;
  }
  *a2 = v11 * sqrt(v15);
  *((_QWORD *)&v19 + 1) = 0;
  if (result != (double *)v17)
  {
LABEL_19:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F398978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20F3989B4(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v35;

  v4 = a2[66];
  v5 = v4
     - 0x79435E50D79435E5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  if (v4 >= v5)
    goto LABEL_22;
  v6 = a2[65];
  if (v6 >= v5)
  {
    v23 = a2[66];
    v24 = 0x86BCA1AF286BCA1BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
    if (v5 <= v4)
      goto LABEL_22;
LABEL_21:
    bzero((void *)(a2[64] + 8 * v23), 8 * v24);
    goto LABEL_22;
  }
  v7 = 2 * v6;
  if (v7 <= v5)
    v7 = v4
       - 0x79435E50D79435E5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  a2[65] = v7;
  v8 = a2[64];
  v9 = operator new[]();
  v10 = v9;
  if (v4)
  {
    v11 = 0;
    if (v4 < 4)
      goto LABEL_11;
    if ((unint64_t)(v9 - v8) < 0x20)
      goto LABEL_11;
    v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (_OWORD *)(v9 + 16);
    v13 = (__int128 *)(v8 + 16);
    v14 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v13;
      *(v12 - 1) = *(v13 - 1);
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v4 != v11)
    {
LABEL_11:
      v16 = v4 - v11;
      v17 = 8 * v11;
      v18 = (uint64_t *)(v8 + 8 * v11);
      v19 = (_QWORD *)(v9 + v17);
      do
      {
        v20 = *v18++;
        *v19++ = v20;
        --v16;
      }
      while (v16);
    }
  }
  v21 = (_QWORD *)a2[64];
  if (v21 != a2 && v21 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v10;
  v23 = a2[66];
  v24 = v5 - v23;
  if (v5 > v23)
    goto LABEL_21;
LABEL_22:
  a2[66] = v5;
  v25 = a2[64];
  v26 = (char *)(v25 + 8 * v4);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  while (v27 != v28)
  {
    if (*(_BYTE *)(v27 + 120))
    {
      _Q0 = *(_OWORD *)(v27 + 80);
      _D2 = *(_QWORD *)(v27 + 88);
      __asm { FMLA            D1, D2, V0.D[1] }
      *(_QWORD *)v26 = _D1;
      v26 += 8;
    }
    v27 += 152;
  }
  v35 = (char *)(v25 + 8 * v5);
  if (v26 != v35)
    a2[66] = v5 + ~((unint64_t)(v35 - v26 - 8) >> 3);
}

void sub_20F398B84(uint64_t a1, _QWORD *a2, float64x2_t _Q0, float64x2_t _Q1)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  float64x2_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  float64x2_t v39;
  char v40;

  v6 = a2[66];
  v7 = v6
     - 0x79435E50D79435E5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  if (v6 >= v7)
    goto LABEL_22;
  v8 = a2[65];
  if (v8 >= v7)
  {
    v24 = a2[66];
    v25 = 0x86BCA1AF286BCA1BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
    if (v7 <= v6)
      goto LABEL_22;
    goto LABEL_21;
  }
  v9 = 2 * v8;
  if (v9 <= v7)
    v9 = v6
       - 0x79435E50D79435E5
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  a2[65] = v9;
  v10 = (float64x2_t *)a2[64];
  v11 = operator new[]();
  v12 = v11;
  if (v6)
  {
    v13 = 0;
    if (v6 < 4)
      goto LABEL_11;
    if ((unint64_t)(v11 - (_QWORD)v10) < 0x20)
      goto LABEL_11;
    v13 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    v14 = (__n128 *)(v11 + 16);
    v15 = v10 + 1;
    v16 = v6 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0 = v15[-1];
      _Q1 = *v15;
      v14[-1] = (__n128)_Q0;
      *v14 = (__n128)_Q1;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v6 != v13)
    {
LABEL_11:
      v17 = v6 - v13;
      v18 = 8 * v13;
      v19 = (unint64_t *)&v10->f64[v13];
      v20 = (unint64_t *)(v11 + v18);
      do
      {
        v21 = *v19++;
        *(_QWORD *)&_Q0.f64[0] = v21;
        *v20++ = v21;
        --v17;
      }
      while (v17);
    }
  }
  v22 = (_QWORD *)a2[64];
  if (v22 != a2 && v22 != 0)
    MEMORY[0x212BC6368]();
  a2[64] = v12;
  v24 = a2[66];
  v25 = v7 - v24;
  if (v7 > v24)
LABEL_21:
    bzero((void *)(a2[64] + 8 * v24), 8 * v25);
LABEL_22:
  a2[66] = v7;
  v26 = a2[64];
  v27 = (char *)(v26 + 8 * v6);
  v28 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v29 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  if (v28 != v29)
  {
    v30 = v28 + 72;
    do
    {
      v36 = sub_20FC6C04C(v30 - 64, v30, &v39, _Q0, _Q1);
      v40 = v36;
      if (v36)
      {
        v37 = *(_QWORD *)(v30 + 56);
        if (!v37 || ((*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v37 + 24))(v37, &v39), v40))
        {
          _Q1 = v39;
          _Q0 = vmulq_f64(_Q1, _Q1);
          _D2 = v39.f64[1];
          __asm { FMLA            D0, D2, V1.D[1] }
          *(float64_t *)v27 = _Q0.f64[0];
          v27 += 8;
        }
      }
      v35 = v30 + 80;
      v30 += 152;
    }
    while (v35 != v29);
    v26 = a2[64];
    v7 = a2[66];
  }
  v38 = (char *)(v26 + 8 * v7);
  if (v27 != v38)
    a2[66] = v7 + ~((unint64_t)(v38 - v27 - 8) >> 3);
}

double *sub_20F398DAC(uint64_t a1, double *a2, double **a3, double a4, float64x2_t a5)
{
  float64x2_t v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  double *result;
  uint64_t v13;
  double v14;
  uint64_t v15;
  _QWORD v16[64];
  double *v17;
  __int128 v18;
  uint64_t v19;

  v17 = (double *)v16;
  v8 = (float64x2_t)xmmword_210378040;
  v18 = xmmword_210378040;
  v9 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if (v9 >= 0x41)
  {
    if (v9 <= 0x80)
      v9 = 128;
    *(_QWORD *)&v18 = v9;
    v10 = (double *)operator new[]();
    if (v17 != (double *)v16 && v17)
      MEMORY[0x212BC6368]();
    v17 = v10;
  }
  *((_QWORD *)&v18 + 1) = 0;
  if (*(_BYTE *)(a1 + 300))
  {
    v19 = a1 + 40;
    sub_20F3989B4((uint64_t)&v19, v16);
  }
  else
  {
    v19 = a1 + 40;
    sub_20F398B84((uint64_t)&v19, v16, v8, a5);
  }
  v11 = *((_QWORD *)&v18 + 1);
  result = v17;
  if (!*((_QWORD *)&v18 + 1))
  {
    *a2 = 1.0;
    *((_QWORD *)&v18 + 1) = 0;
    if (result == (double *)v16)
      return result;
    goto LABEL_19;
  }
  v13 = *((_QWORD *)&v18 + 1) >> 1;
  sub_20E8FB210(v17, &v17[*((_QWORD *)&v18 + 1) >> 1], &v17[*((_QWORD *)&v18 + 1)]);
  result = v17;
  v14 = v17[v13];
  if ((v11 & 1) == 0)
  {
    v15 = v13 - 1;
    if (v15 != v11)
    {
      sub_20E8FB210(v17, &v17[v15], &v17[v11]);
      result = v17;
    }
    v14 = (v14 + result[v15]) * 0.5;
  }
  *a2 = sqrt(v14) * **a3;
  *((_QWORD *)&v18 + 1) = 0;
  if (result != (double *)v16)
  {
LABEL_19:
    if (result)
      return (double *)MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  }
  return result;
}

void sub_20F398F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;

  STACK[0x210] = 0;
  v10 = STACK[0x200];
  if ((uint64_t *)STACK[0x200] != &a9)
  {
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F398FB8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(_BYTE *)(result + 192) || (v23 = *(_QWORD *)(result + 48), v24 = *(_QWORD *)(result + 56), v23 == v24))
  {
LABEL_2:
    v4 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(result + 152) - *(_QWORD *)(result + 144)) >> 3);
  }
  else
  {
    while ((*(_BYTE *)(*(_QWORD *)(v23 + 8) + 4) & 6) == 0)
    {
      v23 += 16;
      if (v23 == v24)
        goto LABEL_2;
    }
    v25 = *(_QWORD *)(result + 144);
    v26 = *(_QWORD *)(result + 152);
    if (v25 == v26)
    {
      v4 = 0;
    }
    else
    {
      v4 = 0;
      v27 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v25 + 72) + 4) & 6) == 0)
          v4 = ++v27;
        v25 += 152;
      }
      while (v25 != v26);
    }
  }
  *a3 += v4;
  v5 = a2[66];
  v6 = v5 + 1;
  v7 = a2[65];
  if (v5 + 1 <= v7)
  {
    v11 = a2[64];
  }
  else
  {
    v8 = 2 * v7;
    if (v8 > v6)
      v6 = v8;
    a2[65] = v6;
    v9 = a2[64];
    v10 = operator new[]();
    v11 = v10;
    if (v5)
    {
      v12 = 0;
      if (v5 < 4)
        goto LABEL_12;
      if ((unint64_t)(v10 - v9) < 0x20)
        goto LABEL_12;
      v12 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = (_OWORD *)(v10 + 16);
      v14 = (__int128 *)(v9 + 16);
      v15 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v5 != v12)
      {
LABEL_12:
        v17 = v5 - v12;
        v18 = 8 * v12;
        v19 = (uint64_t *)(v9 + 8 * v12);
        v20 = (_QWORD *)(v10 + v18);
        do
        {
          v21 = *v19++;
          *v20++ = v21;
          --v17;
        }
        while (v17);
      }
    }
    result = a2[64];
    if ((_QWORD *)result != a2 && result != 0)
      result = MEMORY[0x212BC6368]();
    a2[64] = v11;
    v5 = a2[66];
  }
  *(_QWORD *)(v11 + 8 * v5) = v4;
  ++a2[66];
  return result;
}

void sub_20F399184(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int i;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(a1 + 192))
  {
    for (i = 0; v7 != v8; v7 += 16)
    {
      v10 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v10 + 4) & 6) == 0)
        i += *(unsigned __int8 *)(v10 + 20);
    }
  }
  else if (v7 == v8)
  {
    i = 0;
  }
  else
  {
    v12 = 0;
    i = 0;
    do
    {
      v13 = *(_QWORD *)(v7 + 8);
      if ((*(_BYTE *)(v13 + 4) & 6) != 0)
        v12 = 1;
      i += *(unsigned __int8 *)(v13 + 20);
      v7 += 16;
    }
    while (v7 != v8);
    if (v12)
    {
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a1 + 272);
      v14 = *(_QWORD *)(a1 + 144);
      v15 = *(_QWORD *)(a1 + 152);
      if (v14 != v15)
      {
        do
        {
          v16 = *(_QWORD *)(v14 + 72);
          if (*(_BYTE *)(v14 + 144) || (*(_BYTE *)(v16 + 4) & 6) != 0)
            sub_20F394A20(a1 + 272, v16);
          v14 += 152;
        }
        while (v14 != v15);
        v36 = (uint64_t)(*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 2;
        if (v36 <= i)
          i -= v36;
        else
          i = 0;
        v37 = *(_QWORD *)(a1 + 144);
        v38 = *(_QWORD *)(a1 + 152);
        while (v37 != v38)
        {
          v39 = *(_QWORD *)(v37 + 72);
          if (*(_BYTE *)(v37 + 144) || (*(_BYTE *)(v39 + 4) & 6) != 0)
            ++*(_DWORD *)(v39 + 8);
          v37 += 152;
        }
      }
    }
  }
  *a3 += i;
  *a4 += i;
  v17 = a2[66];
  v18 = v17 + 1;
  v19 = a2[65];
  if (v17 + 1 <= v19)
  {
    v23 = a2[64];
  }
  else
  {
    v20 = 2 * v19;
    if (v20 > v18)
      v18 = v20;
    a2[65] = v18;
    v21 = a2[64];
    v22 = operator new[]();
    v23 = v22;
    if (v17)
    {
      v24 = 0;
      if (v17 < 4)
        goto LABEL_30;
      if ((unint64_t)(v22 - v21) < 0x20)
        goto LABEL_30;
      v24 = v17 & 0xFFFFFFFFFFFFFFFCLL;
      v25 = (_OWORD *)(v22 + 16);
      v26 = (__int128 *)(v21 + 16);
      v27 = v17 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *v26;
        *(v25 - 1) = *(v26 - 1);
        *v25 = v28;
        v25 += 2;
        v26 += 2;
        v27 -= 4;
      }
      while (v27);
      if (v17 != v24)
      {
LABEL_30:
        v29 = v17 - v24;
        v30 = 8 * v24;
        v31 = (uint64_t *)(v21 + 8 * v24);
        v32 = (_QWORD *)(v22 + v30);
        do
        {
          v33 = *v31++;
          *v32++ = v33;
          --v29;
        }
        while (v29);
      }
    }
    v34 = (_QWORD *)a2[64];
    if (v34 != a2 && v34 != 0)
      MEMORY[0x212BC6368]();
    a2[64] = v23;
    v17 = a2[66];
  }
  *(_QWORD *)(v23 + 8 * v17) = i;
  ++a2[66];
}

void sub_20F399400(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 144);
  v3 = *(_QWORD *)(v1 + 152);
  while (v2 != v3)
  {
    v4 = *(_QWORD *)(v2 + 72);
    if (*(_BYTE *)(v2 + 144) || (*(_BYTE *)(v4 + 4) & 6) != 0)
      ++*(_DWORD *)(v4 + 8);
    v2 += 152;
  }
  _Unwind_Resume(a1);
}

void sub_20F399440(uint64_t *a1)
{
  sub_20F398FB8(*a1, (_QWORD *)(a1[1] + 1160), (_QWORD *)(a1[1] + 1152));
  sub_20F399184(*a1, (_QWORD *)(a1[1] + 1712), (_QWORD *)(a1[1] + 1696), (_QWORD *)(a1[1] + 1704));
}

_QWORD *sub_20F399480(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C9FEA40;
  v2 = a1[159];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  return sub_20F3994C8(a1);
}

_QWORD *sub_20F3994C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = off_24C9FEB70;
  v2 = a1[153];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[150];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[147];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  *a1 = &unk_24C9FEC30;
  sub_20F39BA2C(a1 + 76);
  v5 = (void *)a1[73];
  if (v5)
  {
    a1[74] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[70];
  if (v6)
  {
    a1[71] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[66];
  if (v7)
  {
    a1[67] = v7;
    operator delete(v7);
  }
  return sub_20F39A220(a1);
}

void sub_20F39958C(std::string *a1@<X8>)
{
  std::string *v2;
  void *__p[2];
  char v4;
  std::string v5;

  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v5, "DenseHessian");
  v4 = 8;
  strcpy((char *)__p, "Cholesky");
  v2 = std::string::append(&v5, (const std::string::value_type *)__p, 8uLL);
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if ((v4 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v5.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
}

void sub_20F399658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F399694(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD v16[5];
  int v17;
  std::mutex v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  if (sub_20F39BFD0(a1))
  {
    v2 = 1;
  }
  else if (*(_BYTE *)(a1 + 297))
  {
    v2 = 0;
  }
  else
  {
    v3 = *(void **)(a1 + 384);
    v4 = *(_QWORD *)(a1 + 392) - (_QWORD)v3;
    if (v4 >= 1)
      bzero(v3, 8 * (((unint64_t)v4 >> 3) - ((unint64_t)v4 > 7)) + 8);
    v5 = *(unsigned int *)(a1 + 352);
    if ((_DWORD)v5)
      bzero(*(void **)(a1 + 336), 8 * v5);
    if (((*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) & 0x3FFFFFFFCLL) != 0)
    {
      kdebug_trace();
      sub_20F39C284((int32x2_t *)(a1 + 608), a1 + 336);
      kdebug_trace();
    }
    v6 = *(_QWORD *)(a1 + 520);
    v16[0] = *(_QWORD *)(a1 + 512);
    v16[1] = a1 + 560;
    v16[2] = a1 + 8;
    v16[3] = v6;
    v16[4] = 0;
    v17 = 2;
    v18.__m_.__sig = 850045863;
    v7 = 0uLL;
    memset(v18.__m_.__opaque, 0, sizeof(v18.__m_.__opaque));
    v13 = v6;
    v14 = v6;
    v8 = *(_QWORD *)(v16[0] + 104);
    v9 = *(_QWORD *)(v16[0] + 112);
    v11[0] = v16;
    v11[1] = &v12;
    v11[2] = a1 + 8;
    v11[3] = &v15;
    v11[4] = &v14;
    for (v11[5] = &v13; v8 != v9; v8 += 152)
      v7 = sub_20F3A2B64((uint64_t)v11, v8, v7);
    std::mutex::~mutex(&v18);
    v2 = 0;
    *(_WORD *)(a1 + 297) = 1;
  }
  kdebug_trace();
  return v2;
}

void sub_20F39989C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3998E8(uint64_t a1, void **a2)
{
  int v5;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  double v17;
  double *v18;
  unsigned int v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 1;
  kdebug_trace();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v6 = (uint64_t *)(a1 + 1176);
  sub_20F3A2FF4(a1 + 336, (uint64_t *)(a1 + 584), (void **)(a1 + 1176), 1u, v5);
  if (*(_BYTE *)(a1 + 312))
  {
    v7 = *(_DWORD *)(a1 + 328);
    if (v7 == 1)
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 160))(a1, a2);
      v14 = *(_DWORD *)(a1 + 1192);
      LODWORD(v15) = *(_DWORD *)(a1 + 1196);
      if (v15 >= v14)
        v15 = v14;
      else
        v15 = v15;
      if ((_DWORD)v15)
      {
        v16 = 0;
        v17 = *(double *)(a1 + 320);
        v18 = (double *)*a2;
        v19 = v14 + 1;
        v20 = *v6;
        do
        {
          v21 = *v18++;
          *(double *)(v20 + 8 * v16) = v17 * v21 + *(double *)(v20 + 8 * v16);
          v16 += v19;
          --v15;
        }
        while (v15);
      }
    }
    else if (!v7)
    {
      v8 = *(_DWORD *)(a1 + 1192);
      LODWORD(v9) = *(_DWORD *)(a1 + 1196);
      v9 = v9 >= v8 ? v8 : v9;
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = *(double *)(a1 + 320);
        v12 = v8 + 1;
        v13 = *v6;
        do
        {
          *(double *)(v13 + 8 * v10) = v11 + *(double *)(v13 + 8 * v10);
          v10 += v12;
          --v9;
        }
        while (v9);
      }
    }
  }
  v22 = *(unsigned int *)(a1 + 1192);
  *((_DWORD *)a2 + 4) = v22;
  if ((unint64_t)a2[1] < v22)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v23 = (8 * v22 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v23 >> 3);
    *a2 = operator new(v23, (std::align_val_t)0x20uLL);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, a2);
  kdebug_trace();
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 56))(a1, a2))
  {
    v24 = 1;
  }
  else
  {
    v24 = 0;
    *(_BYTE *)(a1 + 301) = 0;
  }
  kdebug_trace();
  return v24;
}

void sub_20F399B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  sub_20EDB4044((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20F399B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB4004((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20F399B70(uint64_t a1)
{
  return a1 + 1200;
}

double sub_20F399B78(uint64_t a1)
{
  double v2;

  v2 = 0.0;
  sub_20F3A3680(a1 + 608, &v2);
  return v2;
}

uint64_t sub_20F399BA4(uint64_t result)
{
  uint64_t v1;
  double v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 48);
  v2 = 0.0;
  while (v1 != *(_QWORD *)(result + 56))
  {
    v3 = *(_QWORD *)(v1 + 8);
    if ((*(_BYTE *)(v3 + 4) & 2) == 0)
    {
      if (*(_BYTE *)(v3 + 20))
      {
        _Q2 = *(_OWORD *)(v3 + 32);
        _D4 = *(_QWORD *)(v3 + 40);
        __asm { FMLA            D3, D4, V2.D[1] }
        v2 = v2 + _D3 + *(double *)(v3 + 48) * *(double *)(v3 + 48);
      }
    }
    v1 += 16;
  }
  return result;
}

uint64_t sub_20F399BF4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t result;

  kdebug_trace();
  v4 = *(_QWORD *)(a1 + 512);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  while (v5 != v6)
  {
    v7 = *(unsigned int **)(v5 + 8);
    v8 = *v7;
    if ((_DWORD)v8 != -1)
    {
      *((_QWORD *)v7 + 18) = *((_QWORD *)v7 + 6);
      *((_OWORD *)v7 + 8) = *((_OWORD *)v7 + 2);
      v9 = (double *)(*a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 584) + 4 * v8));
      v10 = *((double *)v7 + 5);
      *((double *)v7 + 4) = *v9 + *((double *)v7 + 4);
      *((double *)v7 + 5) = v9[1] + v10;
      *((double *)v7 + 6) = v9[2] + *((double *)v7 + 6);
    }
    v5 += 16;
  }
  result = kdebug_trace();
  *(_BYTE *)(a1 + 298) = *(_BYTE *)(a1 + 297);
  *(_BYTE *)(a1 + 301) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 299) = 0;
  return result;
}

BOOL sub_20F399CE0(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  uint64_t v7;

  v4 = a1 + 1264;
  v7 = a1 + 1176;
  sub_20F2C01AC(a1 + 1264, &v7);
  v5 = *(_DWORD *)(a1 + 1264);
  *(_BYTE *)(a1 + 296) = v5 == 0;
  if (v5)
    return 1;
  sub_20F2BFF60(v4, (uint64_t)a2, a2);
  return *(_BYTE *)(a1 + 296) == 0;
}

uint64_t sub_20F399D70()
{
  return 1;
}

uint64_t sub_20F399D78()
{
  return 0;
}

void sub_20F399D80(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24C9FEA40;
  v2 = a1[159];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  sub_20F3994C8(a1);
  JUMPOUT(0x212BC6398);
}

double sub_20F399DDC(uint64_t a1, double a2, double a3, float64x2_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  double result;
  unsigned int *v8;
  unsigned int *v9;
  unint64_t v10;
  uint64_t v11;
  float64_t *v12;
  float64x2_t v13;
  double v14;

  v4 = *(unsigned int *)(a1 + 376);
  if (!(_DWORD)v4)
    return 0.0;
  v5 = 0;
  v6 = *(_QWORD *)(a1 + 456);
  result = 0.0;
  do
  {
    v8 = *(unsigned int **)(v6 + 24 * v5);
    v9 = *(unsigned int **)(v6 + 24 * v5 + 8);
    if (v9 != v8)
    {
      while (1)
      {
        v10 = *v8;
        if (v5 <= v10)
          break;
        v8 += 4;
        if (v8 == v9)
          goto LABEL_3;
      }
      if (v8 != v9 && v5 == v10)
      {
        v11 = *(_QWORD *)(a1 + 384);
        if (v11)
        {
          v12 = (float64_t *)(v11 + 8 * *((_QWORD *)v8 + 1));
          v13.f64[0] = *v12;
          a4.f64[0] = v12[8];
          v13.f64[1] = v12[4];
          *(_QWORD *)&a4.f64[0] = *(_OWORD *)&vabsq_f64(a4);
          a4.f64[1] = NAN;
          v14 = vmaxnmvq_f64(vmaxnmq_f64(vabsq_f64(v13), a4));
          if (result < v14)
            result = v14;
        }
      }
    }
LABEL_3:
    ++v5;
  }
  while (v5 != v4);
  return result;
}

uint64_t sub_20F399E94(uint64_t result, double a2)
{
  *(double *)(result + 320) = a2;
  return result;
}

uint64_t sub_20F399E9C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 816) = a2;
  return result;
}

uint64_t sub_20F399EA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 816);
}

BOOL sub_20F399EAC(uint64_t a1)
{
  return ((*(_QWORD *)(a1 + 800) - *(_QWORD *)(a1 + 792)) & 0x3FFFFFFFCLL) != 0;
}

uint64_t sub_20F399EC4(uint64_t a1)
{
  return a1 + 640;
}

uint64_t sub_20F399ECC(uint64_t a1)
{
  return a1 + 640;
}

__n128 sub_20F399ED4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  size_t v5;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;

  v4 = *(unsigned int *)(a1 + 352);
  if (*(_DWORD *)(a2 + 16) != (_DWORD)v4)
  {
    *(_DWORD *)(a2 + 16) = v4;
    if (*(_QWORD *)(a2 + 8) < v4)
    {
      if (*(_QWORD *)a2)
        MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
      v5 = (8 * v4 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = v5 >> 3;
      *(_QWORD *)a2 = operator new(v5, (std::align_val_t)0x20uLL);
    }
  }
  v7 = *(unsigned int *)(a1 + 360);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(_DWORD *)(a1 + 364);
    v10 = 4 * v7;
    do
    {
      v11 = (__n128 *)(*(_QWORD *)(a1 + 336) + 8 * v9);
      v12 = (__n128 *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 584) + v8));
      result = *v11;
      v12[1].n128_u64[0] = v11[1].n128_u64[0];
      *v12 = result;
      v8 += 4;
      v9 += 3;
    }
    while (v10 != v8);
  }
  return result;
}

void sub_20F399FA4(uint64_t a1, void **a2)
{
  sub_20F3A3C00(a1 + 368, a2, (_QWORD *)(a1 + 584), 1);
}

BOOL sub_20F399FB8(uint64_t a1)
{
  return sub_20F3A3D84((uint64_t *)(a1 + 1224), a1);
}

uint64_t sub_20F399FC4(uint64_t a1)
{
  uint64_t v7;

  *(_QWORD *)a1 = &unk_24C9FEDA0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = _Q0;
  v7 = a1 + 40;
  sub_20F39A330(a1 + 40);
  *(_WORD *)(a1 + 300) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)a1 = &unk_24C9FECE8;
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 480) = sub_20F39B2CC((_QWORD *)(a1 + 368), 0, 0, 0);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)a1 = &unk_24C9FEC30;
  *(_QWORD *)(a1 + 512) = v7;
  *(_QWORD *)(a1 + 520) = a1 + 336;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = off_24C9FEEA8;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 784) = sub_20F39B2CC((_QWORD *)(a1 + 672), 0, 0, 0);
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 800) = 0;
  *(_WORD *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_QWORD *)(a1 + 608) = &off_24C9FEE40;
  *(_QWORD *)(a1 + 1168) = a1 + 512;
  return a1;
}

void sub_20F39A140(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v7;

  v5 = v3;
  if (*v5)
  {
    MEMORY[0x212BC6368](*v5, 0x1000C8000313F17);
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_20F2B1FA8(v2);
      sub_20F39A220(v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v7 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  sub_20F2B1FA8(v2);
  sub_20F39A220(v1);
  _Unwind_Resume(a1);
}

void sub_20F39A1B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v5 = v1[42];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  *v1 = v2;
  sub_20F39B1D0(v3);
  _Unwind_Resume(a1);
}

void sub_20F39A1EC(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "DenseHessian");
}

_QWORD *sub_20F39A220(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  *a1 = &unk_24C9FECE8;
  v2 = (void *)a1[61];
  if (v2)
  {
    a1[62] = v2;
    operator delete(v2);
  }
  a1[46] = off_24C9FCCA8;
  v3 = a1[57];
  if (v3)
  {
    v4 = a1[58];
    v5 = (void *)a1[57];
    if (v4 != v3)
    {
      v6 = a1[58];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)a1[57];
    }
    a1[58] = v3;
    operator delete(v5);
  }
  a1[46] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 51));
  v9 = (void *)a1[48];
  if (v9)
  {
    a1[49] = v9;
    operator delete(v9);
  }
  v10 = a1[42];
  if (v10)
    MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  *a1 = &unk_24C9FEDA0;
  sub_20F39B1D0(a1 + 5);
  return a1;
}

double sub_20F39A318()
{
  return 0.0;
}

uint64_t sub_20F39A330(uint64_t a1)
{
  char *v2;
  char *v3;
  char *v4;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_24C9FEE10;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 16842753;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  v2 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 160) = v2;
  *(_QWORD *)(a1 + 168) = v2;
  *(_QWORD *)(a1 + 176) = v2 + 256;
  v3 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 184) = v3;
  *(_QWORD *)(a1 + 192) = v3;
  *(_QWORD *)(a1 + 200) = v3 + 256;
  v4 = (char *)operator new(0x100uLL);
  *(_QWORD *)(a1 + 208) = v4;
  *(_QWORD *)(a1 + 216) = v4;
  *(_QWORD *)(a1 + 224) = v4 + 256;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  return a1;
}

void sub_20F39A3F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v6;

  v4 = v3;
  *(_QWORD *)(v1 + 192) = v4;
  operator delete(v4);
  v6 = *(void **)(v1 + 160);
  if (v6)
  {
    *(_QWORD *)(v1 + 168) = v6;
    operator delete(v6);
  }
  sub_20F2B2214((void **)(v1 + 104));
  sub_20F39A43C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20F39A43C(uint64_t a1)
{
  void *v2;

  sub_20F39A49C(a1 + 24);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F39A478(_QWORD *a1)
{
  sub_20F39B1D0(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F39A49C(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[3];
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v11 = a1;
  v16 = a1;
  v17 = &v11;
  v2 = *(char **)(a1 + 48);
  v3 = *(char **)(a1 + 56);
  if (v2 != v3 && (unint64_t)(v3 - v2) >= 0xF0)
  {
    sub_20F39A724((uint64_t)v2, v3, (uint64_t)v13, 126 - 2 * __clz((v3 - v2) >> 3), 1);
    v4 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 48);
    v13[0] = v15;
    v13[1] = v4;
    v13[2] = &v17;
    v14 = v4;
    v12[0] = a1;
    v12[1] = (uint64_t)&v15;
    v12[2] = (uint64_t)&v14;
    sub_20F39A5B4(&v16, (uint64_t)v13, v12);
    v2 = *(char **)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
    operator delete(v2);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if (v6 != v5)
    {
      v8 = *(_QWORD **)(a1 + 16);
      do
      {
        v9 = *(v8 - 2);
        v8 -= 2;
        *v8 = 0;
        if (v9)
          ((void (*)(void))*(v6 - 1))();
        v6 = v8;
      }
      while (v8 != v5);
      v7 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v7);
  }
  return a1;
}

_QWORD *sub_20F39A5B4(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;

  v3 = *result;
  v4 = *(unsigned int *)(*result + 32);
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 1)
    {
      v23 = 8;
      for (i = 1; i != v4; ++i)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * i - 16);
        v26 = *a3;
        v27 = *(_QWORD **)(*a3 + 48);
        v28 = *(_QWORD *)(*a3 + 56) - (_QWORD)v27;
        if (v28)
        {
          v29 = v28 >> 3;
          do
          {
            v30 = v29 >> 1;
            v31 = &v27[v29 >> 1];
            v32 = *v31;
            result = v31 + 1;
            v29 += ~(v29 >> 1);
            if (v32 < v25)
              v27 = result;
            else
              v29 = v30;
          }
          while (v29);
        }
        *(_QWORD *)a3[1] = v27;
        v33 = *(_QWORD **)a3[1];
        v34 = *(_QWORD *)(v26 + 56) - (_QWORD)v33;
        if (v34)
        {
          v35 = v25 + 152 * v23;
          v36 = v34 >> 3;
          do
          {
            v37 = v36 >> 1;
            v38 = &v33[v36 >> 1];
            v40 = (_QWORD *)*v38;
            v39 = v38 + 1;
            result = v40;
            v36 += ~(v36 >> 1);
            if (v35 < (unint64_t)v40)
              v36 = v37;
            else
              v33 = v39;
          }
          while (v36);
        }
        *(_QWORD *)a3[2] = v33;
        v23 *= 2;
      }
    }
    v5 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16 * (v4 - 1));
    v6 = *a3;
    v7 = *(_QWORD **)(*a3 + 48);
    v8 = *(_QWORD *)(*a3 + 56) - (_QWORD)v7;
    if (v8)
    {
      v9 = v8 >> 3;
      do
      {
        v10 = v9 >> 1;
        v11 = &v7[v9 >> 1];
        v13 = *v11;
        v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v5)
          v7 = v12;
        else
          v9 = v10;
      }
      while (v9);
    }
    v14 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a3[1] = v7;
    v15 = *(_QWORD **)a3[1];
    v16 = *(_QWORD *)(v6 + 56) - (_QWORD)v15;
    if (v16)
    {
      v17 = v5 + 152 * v14;
      v18 = v16 >> 3;
      do
      {
        v19 = v18 >> 1;
        v20 = &v15[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v17 < v22)
          v18 = v19;
        else
          v15 = v21;
      }
      while (v18);
    }
    *(_QWORD *)a3[2] = v15;
  }
  return result;
}

uint64_t sub_20F39A724(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t *v79;
  unint64_t **v80;
  char *v81;
  BOOL v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;

  v9 = (unint64_t *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = a2 - (char *)v10;
    v12 = (a2 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v69 = *((_QWORD *)a2 - 1);
        v70 = *v10;
        if (v69 < *v10)
        {
          *v10 = v69;
          *((_QWORD *)a2 - 1) = v70;
        }
        return result;
      case 3uLL:
        v71 = *v10;
        v72 = v10[1];
        v73 = *((_QWORD *)a2 - 1);
        if (v72 >= *v10)
        {
          if (v73 < v72)
          {
            v10[1] = v73;
            *((_QWORD *)a2 - 1) = v72;
            v92 = *v10;
            v91 = v10[1];
            if (v91 < *v10)
            {
              *v10 = v91;
              v10[1] = v92;
            }
          }
        }
        else
        {
          if (v73 >= v72)
          {
            *v10 = v72;
            v10[1] = v71;
            v99 = *((_QWORD *)a2 - 1);
            if (v99 >= v71)
              return result;
            v10[1] = v99;
          }
          else
          {
            *v10 = v73;
          }
          *((_QWORD *)a2 - 1) = v71;
        }
        return result;
      case 4uLL:
        v74 = v10 + 1;
        v75 = (unint64_t *)v10[1];
        v76 = v10 + 2;
        v77 = v10[2];
        v78 = (unint64_t *)*v10;
        if ((unint64_t)v75 >= *v10)
        {
          if (v77 >= (unint64_t)v75)
          {
LABEL_144:
            v75 = (unint64_t *)v77;
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
LABEL_145:
            *v76 = v93;
            *((_QWORD *)a2 - 1) = v75;
            v96 = *v76;
            v97 = *v74;
            if (v96 < v97)
            {
              v10[1] = v96;
              v10[2] = v97;
              v98 = *v10;
              if (v96 < *v10)
              {
                *v10 = v96;
                v10[1] = v98;
              }
            }
            return result;
          }
          *v74 = v77;
          *v76 = (unint64_t)v75;
          v79 = v10;
          v80 = (unint64_t **)(v10 + 1);
          result = (uint64_t)v75;
          if (v77 >= (unint64_t)v78)
          {
LABEL_136:
            v93 = *((_QWORD *)a2 - 1);
            if (v93 >= (unint64_t)v75)
              return result;
            goto LABEL_145;
          }
        }
        else
        {
          v79 = v10;
          v80 = (unint64_t **)(v10 + 2);
          result = *v10;
          if (v77 >= (unint64_t)v75)
          {
            *v10 = (unint64_t)v75;
            v10[1] = (unint64_t)v78;
            v79 = v10 + 1;
            v80 = (unint64_t **)(v10 + 2);
            result = (uint64_t)v78;
            if (v77 >= (unint64_t)v78)
              goto LABEL_144;
          }
        }
        *v79 = v77;
        *v80 = v78;
        v75 = (unint64_t *)result;
        goto LABEL_136;
      case 5uLL:
        return (uint64_t)sub_20F2B3110(v10, v10 + 1, v10 + 2, v10 + 3, (unint64_t *)a2 - 1);
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != (unint64_t *)a2)
              return (uint64_t)sub_20F2B324C((char *)v10, a2, a2);
            return result;
          }
          v13 = v12 >> 1;
          v14 = &v10[v12 >> 1];
          v15 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v11 < 0x401)
          {
            v18 = *v10;
            v19 = *v14;
            if (*v10 >= *v14)
            {
              if (v15 < v18)
              {
                *v10 = v15;
                *((_QWORD *)a2 - 1) = v18;
                v21 = *v14;
                if (*v10 < *v14)
                {
                  *v14 = *v10;
                  *v10 = v21;
                  --a4;
                  v22 = v21;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v15 < v18)
              {
                *v14 = v15;
                goto LABEL_31;
              }
              *v14 = v18;
              *v10 = v19;
              v31 = *((_QWORD *)a2 - 1);
              if (v31 < v19)
              {
                *v10 = v31;
LABEL_31:
                *((_QWORD *)a2 - 1) = v19;
              }
            }
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v16 = *v14;
          v17 = *v10;
          if (*v14 >= *v10)
          {
            if (v15 < v16)
            {
              *v14 = v15;
              *((_QWORD *)a2 - 1) = v16;
              v20 = *v10;
              if (*v14 < *v10)
              {
                *v10 = *v14;
                *v14 = v20;
              }
            }
          }
          else
          {
            if (v15 >= v16)
            {
              *v10 = v16;
              *v14 = v17;
              v23 = *((_QWORD *)a2 - 1);
              if (v23 >= v17)
                goto LABEL_23;
              *v14 = v23;
            }
            else
            {
              *v10 = v15;
            }
            *((_QWORD *)a2 - 1) = v17;
          }
LABEL_23:
          v24 = &v10[v13];
          v27 = *(v24 - 1);
          v25 = v24 - 1;
          v26 = v27;
          v28 = v10[1];
          v29 = *((_QWORD *)a2 - 2);
          if (v27 >= v28)
          {
            if (v29 < v26)
            {
              *v25 = v29;
              *((_QWORD *)a2 - 2) = v26;
              v30 = v10[1];
              if (*v25 < v30)
              {
                v10[1] = *v25;
                *v25 = v30;
              }
            }
          }
          else
          {
            if (v29 >= v26)
            {
              v10[1] = v26;
              *v25 = v28;
              v32 = *((_QWORD *)a2 - 2);
              if (v32 >= v28)
                goto LABEL_37;
              *v25 = v32;
            }
            else
            {
              v10[1] = v29;
            }
            *((_QWORD *)a2 - 2) = v28;
          }
LABEL_37:
          v33 = &v10[v13];
          v36 = v33[1];
          v34 = v33 + 1;
          v35 = v36;
          v37 = v10[2];
          v38 = *((_QWORD *)a2 - 3);
          if (v36 >= v37)
          {
            if (v38 < v35)
            {
              *v34 = v38;
              *((_QWORD *)a2 - 3) = v35;
              v39 = v10[2];
              if (*v34 < v39)
              {
                v10[2] = *v34;
                *v34 = v39;
              }
            }
          }
          else
          {
            if (v38 >= v35)
            {
              v10[2] = v35;
              *v34 = v37;
              v40 = *((_QWORD *)a2 - 3);
              if (v40 >= v37)
                goto LABEL_46;
              *v34 = v40;
            }
            else
            {
              v10[2] = v38;
            }
            *((_QWORD *)a2 - 3) = v37;
          }
LABEL_46:
          v41 = *v14;
          v42 = *v25;
          v43 = *v34;
          if (*v14 < *v25)
          {
            if (v43 >= v41)
            {
              *v25 = v41;
              *v14 = v42;
              v25 = v14;
              v41 = v43;
              if (v43 >= v42)
              {
                v44 = *v10;
                *v10 = v42;
                *v14 = v44;
                --a4;
                v22 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v43 >= v41)
            goto LABEL_54;
          *v14 = v43;
          *v34 = v41;
          v34 = v14;
          v41 = v42;
          if (v43 < v42)
          {
LABEL_53:
            *v25 = v43;
            *v34 = v42;
LABEL_54:
            v45 = *v10;
            *v10 = v41;
            *v14 = v45;
            --a4;
            v22 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            if (*(v10 - 1) < v22)
              goto LABEL_56;
            if (v22 >= *((_QWORD *)a2 - 1))
            {
              v61 = v10 + 1;
              do
              {
                v10 = v61;
                if (v61 >= (unint64_t *)a2)
                  break;
                ++v61;
              }
              while (v22 >= *v10);
            }
            else
            {
              do
              {
                v60 = v10[1];
                ++v10;
              }
              while (v22 >= v60);
            }
            v62 = (unint64_t *)a2;
            if (v10 < (unint64_t *)a2)
            {
              v62 = (unint64_t *)a2;
              do
                v63 = *--v62;
              while (v22 < v63);
            }
            if (v10 < v62)
            {
              v64 = *v10;
              v65 = *v62;
              do
              {
                *v10 = v65;
                *v62 = v64;
                do
                {
                  v66 = v10[1];
                  ++v10;
                  v64 = v66;
                }
                while (v22 >= v66);
                do
                {
                  v67 = *--v62;
                  v65 = v67;
                }
                while (v22 < v67);
              }
              while (v10 < v62);
            }
            v68 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v68;
            a5 = 0;
            *v68 = v22;
            continue;
          }
          v59 = *v10;
          *v10 = v43;
          *v14 = v59;
          --a4;
          v22 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v46 = 0;
          do
            v47 = v10[++v46];
          while (v47 < v22);
          v48 = &v10[v46];
          v49 = a2;
          if (v46 == 1)
          {
            v49 = a2;
            do
            {
              if (v48 >= (unint64_t *)v49)
                break;
              v51 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v51 >= v22);
          }
          else
          {
            do
            {
              v50 = *((_QWORD *)v49 - 1);
              v49 -= 8;
            }
            while (v50 >= v22);
          }
          if (v48 >= (unint64_t *)v49)
          {
            v57 = v48 - 1;
            if (v48 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v52 = *(_QWORD *)v49;
            v53 = &v10[v46];
            v54 = (unint64_t *)v49;
            do
            {
              *v53 = v52;
              *v54 = v47;
              do
              {
                v55 = v53[1];
                ++v53;
                v47 = v55;
              }
              while (v55 < v22);
              do
              {
                v56 = *--v54;
                v52 = v56;
              }
              while (v56 >= v22);
            }
            while (v53 < v54);
            v57 = v53 - 1;
            if (v53 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v57;
          }
LABEL_74:
          *v57 = v22;
          if (v48 < (unint64_t *)v49)
            goto LABEL_77;
          v58 = sub_20F39AEC8(v10, v57);
          v10 = v57 + 1;
          result = sub_20F39AEC8(v57 + 1, (unint64_t *)a2);
          if (!(_DWORD)result)
          {
            if (v58)
              continue;
LABEL_77:
            result = sub_20F39A724(v9, v57, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v57 + 1;
            continue;
          }
          a2 = (char *)v57;
          if (v58)
            return result;
          goto LABEL_2;
        }
        v81 = (char *)(v10 + 1);
        v83 = v10 == (unint64_t *)a2 || v81 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v83)
          {
            v84 = 8;
            v85 = v10;
            do
            {
              v88 = *v85;
              v87 = v85[1];
              v85 = (unint64_t *)v81;
              if (v87 < v88)
              {
                v89 = v84;
                do
                {
                  *(unint64_t *)((char *)v10 + v89) = v88;
                  v90 = v89 - 8;
                  if (v89 == 8)
                  {
                    v86 = v10;
                    goto LABEL_121;
                  }
                  v88 = *(unint64_t *)((char *)v10 + v89 - 16);
                  v89 -= 8;
                }
                while (v87 < v88);
                v86 = (unint64_t *)((char *)v10 + v90);
LABEL_121:
                *v86 = v87;
              }
              v81 = (char *)(v85 + 1);
              v84 += 8;
            }
            while (v85 + 1 != (unint64_t *)a2);
          }
        }
        else if (!v83)
        {
          do
          {
            v95 = *v9;
            v94 = v9[1];
            v9 = (unint64_t *)v81;
            if (v94 < v95)
            {
              do
              {
                *(_QWORD *)v81 = v95;
                v95 = *((_QWORD *)v81 - 2);
                v81 -= 8;
              }
              while (v94 < v95);
              *(_QWORD *)v81 = v94;
            }
            v81 = (char *)(v9 + 1);
          }
          while (v9 + 1 != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_20F39AEC8(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int v23;
  uint64_t i;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v9 = *(a2 - 1);
      v10 = *a1;
      if (v9 >= *a1)
        return 1;
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      v11 = *a1;
      v12 = a1[1];
      v13 = *(a2 - 1);
      if (v12 >= *a1)
      {
        if (v13 >= v12)
          return 1;
        a1[1] = v13;
        *(a2 - 1) = v12;
        v30 = *a1;
        v29 = a1[1];
        if (v29 >= *a1)
          return 1;
        *a1 = v29;
        a1[1] = v30;
        return 1;
      }
      else if (v13 >= v12)
      {
        *a1 = v12;
        a1[1] = v11;
        v35 = *(a2 - 1);
        if (v35 >= v11)
          return 1;
        a1[1] = v35;
        *(a2 - 1) = v11;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v11;
        return 1;
      }
    case 4:
      v14 = a1 + 1;
      v15 = a1[1];
      v16 = a1 + 2;
      v17 = a1[2];
      v18 = *a1;
      if (v15 < *a1)
      {
        v19 = a1;
        v20 = a1 + 2;
        v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          v19 = a1 + 1;
          v20 = a1 + 2;
          v21 = v18;
          if (v17 >= v18)
            goto LABEL_38;
        }
LABEL_35:
        *v19 = v17;
        *v20 = v18;
        v15 = v21;
LABEL_36:
        v31 = *(a2 - 1);
        if (v31 >= v15)
          return 1;
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        *v14 = v17;
        *v16 = v15;
        v19 = a1;
        v20 = a1 + 1;
        v21 = v15;
        if (v17 >= v18)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_38:
      v15 = v17;
      v31 = *(a2 - 1);
      if (v31 >= v15)
        return 1;
LABEL_39:
      *v16 = v31;
      *(a2 - 1) = v15;
      v32 = *v16;
      v33 = *v14;
      if (v32 >= v33)
        return 1;
      a1[1] = v32;
      a1[2] = v33;
      v34 = *a1;
      if (v32 >= *a1)
        return 1;
      *a1 = v32;
      a1[1] = v34;
      return 1;
    case 5:
      sub_20F2B3110(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v4 = a1 + 2;
      v3 = a1[2];
      v5 = a1[1];
      v6 = *a1;
      if (v5 >= *a1)
      {
        if (v3 >= v5)
          goto LABEL_20;
        a1[1] = v3;
        *v4 = v5;
        v7 = a1;
        v8 = a1 + 1;
      }
      else
      {
        v7 = a1;
        v8 = a1 + 2;
        if (v3 < v5)
          goto LABEL_19;
        *a1 = v5;
        a1[1] = v6;
        v7 = a1 + 1;
        v8 = a1 + 2;
      }
      if (v3 >= v6)
        goto LABEL_20;
LABEL_19:
      *v7 = v3;
      *v8 = v6;
LABEL_20:
      v22 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v23 = 0;
      for (i = 24; ; i += 8)
      {
        v25 = *v22;
        v26 = *v4;
        if (*v22 < v26)
          break;
LABEL_23:
        v4 = v22++;
        if (v22 == a2)
          return 1;
      }
      v27 = i;
      do
      {
        *(unint64_t *)((char *)a1 + v27) = v26;
        v28 = v27 - 8;
        if (v27 == 8)
        {
          *a1 = v25;
          if (++v23 != 8)
            goto LABEL_23;
          return v22 + 1 == a2;
        }
        v26 = *(unint64_t *)((char *)a1 + v27 - 16);
        v27 -= 8;
      }
      while (v25 < v26);
      *(unint64_t *)((char *)a1 + v28) = v25;
      if (++v23 != 8)
        goto LABEL_23;
      return v22 + 1 == a2;
  }
}

_QWORD *sub_20F39B1D0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;

  *a1 = &off_24C9FEE10;
  v2 = (void *)a1[29];
  if (v2)
  {
    a1[30] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[26];
  if (v3)
  {
    a1[27] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[20];
  if (v5)
  {
    a1[21] = v5;
    operator delete(v5);
  }
  v6 = a1[13];
  if (v6)
  {
    v7 = a1[14];
    v8 = (void *)a1[13];
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 16);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 152;
      }
      while (v7 != v6);
      v8 = (void *)a1[13];
    }
    a1[14] = v6;
    operator delete(v8);
  }
  sub_20F39A49C((uint64_t)(a1 + 4));
  v12 = (void *)a1[1];
  if (v12)
  {
    a1[2] = v12;
    operator delete(v12);
  }
  return a1;
}

_QWORD *sub_20F39B2CC(_QWORD *a1, unsigned int a2, unsigned int a3, int a4)
{
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v6 = (_QWORD *)sub_20F2B3854((uint64_t)a1, a2, a3);
  *v6 = &off_24C9FF110;
  v7 = (_BYTE *)v6[2];
  v8 = (9 * a4);
  if (v8 <= (uint64_t)(v6[4] - (_QWORD)v7) >> 3)
    return a1;
  v9 = (_BYTE *)a1[3];
  v10 = (char *)operator new(8 * v8);
  v11 = v9 - v7;
  v12 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
  v13 = v12;
  if (v9 != v7)
  {
    if ((unint64_t)(v11 - 8) < 0x58)
    {
      v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_9:
        v22 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v13 - 1) = v22;
        v13 -= 8;
      }
      while (v9 != v7);
      goto LABEL_10;
    }
    v13 = &v10[(v9 - v7) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v9 - &v10[v11 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_9;
    v14 = v11 >> 3;
    v15 = ((unint64_t)(v11 - 8) >> 3) + 1;
    v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
    v17 = &v9[-v16];
    v13 = &v12[-v16];
    v18 = &v10[8 * v14 - 16];
    v19 = (__int128 *)(v9 - 16);
    v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v21 = *v19;
      *((_OWORD *)v18 - 1) = *(v19 - 1);
      *(_OWORD *)v18 = v21;
      v18 -= 32;
      v19 -= 2;
      v20 -= 4;
    }
    while (v20);
    v9 = v17;
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_9;
  }
LABEL_10:
  a1[2] = v13;
  a1[3] = v12;
  a1[4] = &v10[8 * v8];
  if (v7)
    operator delete(v7);
  return a1;
}

void sub_20F39B3E4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  *v1 = off_24C9FCCA8;
  v3 = v1[11];
  if (v3)
  {
    v4 = v1[12];
    v5 = (void *)v1[11];
    if (v4 != v3)
    {
      v6 = v1[12];
      do
      {
        v8 = *(void **)(v6 - 24);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v3);
      v5 = (void *)v1[11];
    }
    v1[12] = v3;
    operator delete(v5);
  }
  *v1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(v1 + 5));
  v9 = (void *)v1[2];
  if (v9)
  {
    v1[3] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F39B46C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_20F39B510(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_24C9FCCA8;
  v2 = a1[11];
  if (v2)
  {
    v3 = a1[12];
    v4 = (void *)a1[11];
    if (v3 != v2)
    {
      v5 = a1[12];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }
  *a1 = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 5));
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F39B5C4(_QWORD *a1, int a2, int a3)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v3 = (_BYTE *)a1[2];
  v4 = (uint64_t)(a1[4] - (_QWORD)v3) >> 3;
  v5 = (9 * a2);
  v6 = (v5 * a3);
  if (v4 >= v5 || v4 >= v6)
    return v4 < v5;
  v10 = (_BYTE *)a1[3];
  v11 = 8 * v6;
  v12 = (char *)operator new(8 * v6);
  v13 = v10 - v3;
  v14 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
  v15 = v14;
  if (v10 != v3)
  {
    if ((unint64_t)(v13 - 8) < 0x58)
    {
      v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_14:
        v24 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v15 - 1) = v24;
        v15 -= 8;
      }
      while (v10 != v3);
      goto LABEL_15;
    }
    v15 = &v12[(v10 - v3) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFF8)] - v12) < 0x20)
      goto LABEL_14;
    v16 = v13 >> 3;
    v17 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[8 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  a1[2] = v15;
  a1[3] = v14;
  a1[4] = &v12[v11];
  if (v3)
    operator delete(v3);
  return v4 < v5;
}

uint64_t sub_20F39B6E8(uint64_t a1)
{
  return (((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) / 9uLL) - *(_DWORD *)(a1 + 80);
}

uint64_t sub_20F39B718()
{
  return 3;
}

uint64_t sub_20F39B720()
{
  return 3;
}

uint64_t sub_20F39B728(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  int **v5;
  int *v6;
  int *v7;
  int8x16_t v8;
  __int128 v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t *v20;
  uint64_t v21;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = (int **)(*(_QWORD *)(result + 88) + 24 * i);
      v6 = *v5;
      v7 = v5[1];
      if (v6 != v7)
      {
        do
        {
          v21 = *(_QWORD *)(result + 16) + 8 * *((_QWORD *)v6 + 1);
          if (v21 == *(_QWORD *)a2)
          {
            v14 = *(_QWORD *)(v21 + 64);
            v13 = *(int8x16_t *)(v21 + 32);
            v10 = *(int8x16_t *)(v21 + 48);
            v8 = *(int8x16_t *)v21;
            v12 = *(int8x16_t *)(v21 + 16);
            v15 = vextq_s8(v10, v10, 8uLL).u64[0];
            v11 = vextq_s8(v13, v13, 8uLL).u64[0];
            *(_QWORD *)&v9 = vextq_s8(v12, v12, 8uLL).u64[0];
          }
          else
          {
            v8 = *(int8x16_t *)v21;
            v9 = *(_OWORD *)(v21 + 24);
            v10 = *(int8x16_t *)(v21 + 48);
            v11 = *(_QWORD *)(v21 + 40);
            v12.i64[0] = *(_QWORD *)(v21 + 16);
            v13.i64[0] = *(_QWORD *)(v21 + 32);
            v14 = *(_QWORD *)(v21 + 64);
            v15 = vextq_s8(v10, v10, 8uLL).u64[0];
          }
          v16 = *v6;
          v6 += 4;
          v17 = *(unsigned int *)(a2 + 16);
          v18 = *(_QWORD *)a2 + 8 * (3 * v16 + a3 + v17 * (3 * i + HIDWORD(a3)));
          v8.i64[1] = vextq_s8(v8, v8, 8uLL).u64[0];
          *((_QWORD *)&v9 + 1) = v13.i64[0];
          v10.i64[1] = v15;
          *(_QWORD *)(v18 + 16) = v12.i64[0];
          *(int8x16_t *)v18 = v8;
          v19 = v18 + 8 * v17;
          *(_QWORD *)(v19 + 16) = v11;
          *(_OWORD *)v19 = v9;
          v20 = (int8x16_t *)(v18 + 16 * v17);
          v20[1].i64[0] = v14;
          *v20 = v10;
        }
        while (v6 != v7);
        v3 = *(unsigned int *)(result + 12);
      }
    }
  }
  return result;
}

uint64_t sub_20F39B818(uint64_t result, _QWORD *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;

  v3 = *(unsigned int *)(result + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(uint64_t **)(result + 88);
    v6 = *v5;
    v7 = v5[1];
    if (v6 != v7)
      goto LABEL_8;
LABEL_6:
    while (++v4 < v3)
    {
      v11 = (uint64_t *)(*(_QWORD *)(result + 88) + 24 * v4);
      v6 = *v11;
      v7 = v11[1];
      if (v6 != v7)
      {
LABEL_8:
        while (v4 != *(_DWORD *)v6)
        {
          v6 += 16;
          if (v6 == v7)
            goto LABEL_6;
        }
        v8 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * *(_QWORD *)(v6 + 8));
        v9 = *a2 + 8 * (3 * v4 + a3);
        *(_QWORD *)&v10 = *v8;
        if (v8 == (_QWORD *)*a2)
        {
          *((_QWORD *)&v10 + 1) = v8[4];
          *(_QWORD *)(v9 + 16) = v8[8];
          *(_OWORD *)v9 = v10;
          v3 = *(unsigned int *)(result + 12);
        }
        else
        {
          *(_QWORD *)v9 = v10;
          *(_QWORD *)(v9 + 8) = v8[4];
          *(_QWORD *)(v9 + 16) = v8[8];
        }
      }
    }
  }
  return result;
}

void sub_20F39B8DC(_QWORD *a1)
{
  sub_20F39BA2C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20F39B900(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v8;
  float64x2_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[6];
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[5];
  int v19;
  std::mutex v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 560);
  __asm { FMOV            V0.2D, #1.0 }
  v12 = _Q0;
  v8 = v2[1];
  v18[0] = *v2;
  v18[1] = v2 + 6;
  v18[2] = &v12;
  v18[3] = v8;
  v18[4] = 0;
  v19 = a2;
  v9 = 0uLL;
  memset(v20.__m_.__opaque, 0, sizeof(v20.__m_.__opaque));
  v20.__m_.__sig = 850045863;
  v15 = v8;
  v16 = v8;
  v10 = *(_QWORD *)(v18[0] + 104);
  v11 = *(_QWORD *)(v18[0] + 112);
  v13[0] = v18;
  v13[1] = &v14;
  v13[2] = &v12;
  v13[3] = &v17;
  v13[4] = &v16;
  for (v13[5] = &v15; v10 != v11; v10 += 152)
    v9 = sub_20F39BB58((uint64_t)v13, v10, v9);
  std::mutex::~mutex(&v20);
}

void sub_20F39B9EC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F39BA00(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_20F39BA0C(uint64_t a1)
{
  return **(_QWORD **)(a1 + 560);
}

uint64_t sub_20F39BA18(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8);
}

_QWORD *sub_20F39BA2C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = off_24C9FEEA8;
  sub_20F2B4190((uint64_t)(a1 + 31));
  v2 = (_QWORD *)a1[30];
  if (v2 == a1 + 27)
  {
    v3 = 4;
    v2 = a1 + 27;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = (void *)a1[23];
  if (v4)
  {
    a1[24] = v4;
    operator delete(v4);
  }
  a1[8] = off_24C9FCCA8;
  v5 = a1[19];
  if (v5)
  {
    v6 = a1[20];
    v7 = (void *)a1[19];
    if (v6 != v5)
    {
      v8 = a1[20];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v6 - 16) = v9;
          operator delete(v9);
        }
        v6 = v8;
      }
      while (v8 != v5);
      v7 = (void *)a1[19];
    }
    a1[20] = v5;
    operator delete(v7);
  }
  a1[8] = off_24C9FCD08;
  sub_20E8D41E8((uint64_t)(a1 + 13));
  v11 = (void *)a1[10];
  if (v11)
  {
    a1[11] = v11;
    operator delete(v11);
  }
  v12 = a1[4];
  if (v12)
    MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
  v13 = a1[1];
  if (v13)
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  return a1;
}

float64x2_t sub_20F39BB58(uint64_t a1, uint64_t a2, float64x2_t result)
{
  uint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  float64x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float64x2_t v18;
  float64x2_t v19;
  uint64_t v20;
  float64x2_t *v21;
  int v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  float64x2_t v30;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  float64x2_t v47;
  float64x2_t v49;
  float64x2_t v52;
  float64x2_t v54;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD v64[2];

  v6 = *(unsigned int **)(a2 + 72);
  v4 = (uint64_t *)(a2 + 72);
  v5 = v6;
  if ((v6[1] & 4) != 0)
    v7 = 1;
  else
    v7 = 2;
  if ((v7 & *(_DWORD *)(*(_QWORD *)a1 + 40)) != 0)
  {
    if (*((_BYTE *)v5 + 20))
    {
      v9 = *v5;
      if ((_DWORD)v9 == -1)
        return result;
      v11 = a1 + 8;
      v10 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD **)(*(_QWORD *)a1 + 8);
      *(_BYTE *)v10 = 1;
      v13 = *(_DWORD *)(*v12 + 4 * v9);
    }
    else
    {
      v11 = a1 + 8;
      v10 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)v10 = 0;
      v13 = -1;
    }
    *(_DWORD *)(v10 + 4) = v13;
    v15 = *(_QWORD *)(a1 + 16);
    v14 = *(float64x2_t **)(a1 + 24);
    v16 = a2 + 96;
    v17 = sub_20FC6EA84((uint64_t)(v4 - 8), v4, (float64x2_t *)(a2 + 96), v14, result);
    *(_BYTE *)(a2 + 120) = v17;
    if (!v17)
    {
      *(_QWORD *)(a2 + 112) = 0;
      return result;
    }
    v20 = *(_QWORD *)(a2 + 128);
    if (v20)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 24))(v20, a2 + 96);
      v21 = *(float64x2_t **)(a2 + 128);
      v22 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v21->f64[0] + 16))(v21);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 72) + 20))
      {
        switch(v22)
        {
          case 0:
            v23 = v21[1];
            v24 = v21[2];
            goto LABEL_18;
          case 1:
            v25 = v14[1];
            v26 = vmulq_f64(*v14, v21[1]);
            v27 = v14[2];
            *v14 = v26;
            v18 = vmulq_f64(v25, v21[1]);
            *v14 = v26;
            v14[1] = v18;
            v28 = vmulq_f64(v27, v21[1]);
            *v14 = v26;
            v14[1] = v18;
            v14[2] = v28;
            break;
          case 2:
            v29 = v21[1].f64[0];
            v30 = vmulq_n_f64(v14[2], v29);
            v18 = vmulq_n_f64(v14[1], v29);
            *v14 = vmulq_n_f64(*v14, v29);
            v14[1] = v18;
            v14[2] = v30;
            break;
          case 4:
            (*(void (**)(_OWORD *__return_ptr, float64x2_t *))(*(_QWORD *)&v21->f64[0] + 56))(v64, v21);
            v23 = (float64x2_t)v64[0];
            v24 = (float64x2_t)v64[1];
LABEL_18:
            v19 = v14[2];
            v18 = vmlaq_laneq_f64(vmulq_n_f64(v23, v14[1].f64[0]), v24, v14[1], 1);
            *v14 = vmlaq_laneq_f64(vmulq_n_f64(v23, v14->f64[0]), v24, *v14, 1);
            v14[1] = v18;
            v14[2] = vmlaq_laneq_f64(vmulq_n_f64(v23, v19.f64[0]), v24, v19, 1);
            break;
          default:
            break;
        }
      }
    }
    *(_OWORD *)(a2 + 80) = *(_OWORD *)v16;
    result = *(float64x2_t *)(a2 + 96);
    _D2 = *(_QWORD *)(a2 + 104);
    __asm { FMLA            D1, D2, V0.D[1] }
    result.f64[0] = *(double *)(v15 + 8) * _D1;
    *(float64_t *)(a2 + 112) = result.f64[0];
    v37 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)v37)
    {
      v38 = *(_QWORD *)(a1 + 24);
      v39 = **(unint64_t ***)(a1 + 32);
      v40 = *(_DWORD *)(v37 + 4);
      v41 = v39[15] + 24 * v40;
      v43 = *(char **)v41;
      v42 = *(char **)(v41 + 8);
      if (*(char **)v41 != v42)
      {
        while (*(_DWORD *)v43 < v40)
        {
          v43 += 16;
          if (v43 == v42)
            goto LABEL_28;
        }
      }
      if (v43 != v42)
      {
        if (*(_DWORD *)v43 == v40)
        {
          v44 = v39[6] + 8 * *((_QWORD *)v43 + 1);
          goto LABEL_29;
        }
        v42 = v43;
      }
LABEL_28:
      v44 = sub_20F39BECC(v39 + 4, (char **)v41, v40, v42);
LABEL_29:
      result.f64[0] = *(float64_t *)(v44 + 16);
      v18.f64[0] = *(float64_t *)(v44 + 40);
      v19.f64[0] = *(float64_t *)(v44 + 64);
      _Q7 = *(float64x2_t *)(v38 + 16);
      _Q16 = *(float64x2_t *)(v38 + 32);
      v47 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v38, (int64x2_t)_Q7);
      _Q19 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v38, (int64x2_t)_Q7);
      v49 = vmlaq_laneq_f64(vmulq_n_f64(v47, *(double *)v38), _Q19, *(float64x2_t *)v38, 1);
      _Q20 = vmulq_f64(_Q16, *(float64x2_t *)v38);
      _D6 = *(_QWORD *)(v38 + 8);
      __asm { FMLA            D20, D6, V16.D[1] }
      v52 = vmlaq_laneq_f64(vmulq_n_f64(v47, _Q7.f64[0]), _Q19, _Q7, 1);
      _Q21 = vmulq_f64(_Q16, _Q7);
      _Q7.f64[0] = *(float64_t *)(v38 + 24);
      __asm { FMLA            D21, D7, V16.D[1] }
      v54 = vmlaq_laneq_f64(vmulq_n_f64(v47, _Q16.f64[0]), _Q19, _Q16, 1);
      _Q17 = vmulq_f64(_Q16, _Q16);
      _Q19.f64[0] = *(float64_t *)(v38 + 40);
      __asm { FMLA            D17, D19, V16.D[1] }
      *(_QWORD *)&result.f64[0] = *(_OWORD *)&vaddq_f64(result, _Q20);
      v56 = vaddq_f64(*(float64x2_t *)v44, v49);
      v57 = vaddq_f64(*(float64x2_t *)(v44 + 24), v52);
      v58 = vaddq_f64(*(float64x2_t *)(v44 + 48), v54);
      *(float64x2_t *)v44 = v56;
      *(float64_t *)(v44 + 16) = result.f64[0];
      *(float64x2_t *)(v44 + 24) = v57;
      *(_QWORD *)(v44 + 40) = *(_OWORD *)&vaddq_f64(v18, _Q21);
      *(float64x2_t *)(v44 + 48) = v58;
      *(_QWORD *)(v44 + 64) = *(_OWORD *)&vaddq_f64(v19, _Q17);
      if (**(_BYTE **)v11)
      {
        v59 = *(_QWORD *)(a1 + 24);
        v60 = ***(_QWORD ***)(a1 + 40)
            + 8 * (*(_DWORD *)(**(_QWORD **)(a1 + 40) + 28) + 3 * *(_DWORD *)(*(_QWORD *)v11 + 4));
        v56.f64[0] = *(float64_t *)(v60 + 16);
        _Q4 = *(float64x2_t *)(v59 + 32);
        _Q2 = vmulq_f64(_Q4, *(float64x2_t *)v16);
        _D3 = *(_QWORD *)(v16 + 8);
        __asm { FMLA            D2, D3, V4.D[1] }
        result = vsubq_f64(*(float64x2_t *)v60, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v59, *(int64x2_t *)(v59 + 16)), *(double *)v16), (float64x2_t)vzip2q_s64(*(int64x2_t *)v59, *(int64x2_t *)(v59 + 16)), *(float64x2_t *)v16, 1));
        *(float64x2_t *)v60 = result;
        *(_QWORD *)(v60 + 16) = *(_OWORD *)&vsubq_f64(v56, _Q2);
      }
    }
  }
  return result;
}

uint64_t sub_20F39BECC(unint64_t *a1, char **a2, int a3, char *a4)
{
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v18;

  v8 = a1[10];
  v9 = a1 + 2;
  if (v8)
  {
    v11 = a1[6];
    v10 = a1[7];
    v12 = ((v10 - v11) << 6) - 1;
    v13 = a1[9];
    if (v10 == v11)
      v12 = 0;
    v14 = a1[2]
        + 8
        * *(_QWORD *)(*(_QWORD *)(v11 + (((v13 + v8 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13 + v8 - 1) & 0x1FF));
    a1[10] = v8 - 1;
    if (v12 - (v8 + v13) + 1 >= 0x400)
    {
      operator delete(*(void **)(v10 - 8));
      a1[7] -= 8;
    }
  }
  else
  {
    v15 = (void *)a1[3];
    *(_QWORD *)&v18 = 0;
    sub_20F1C5A3C(a1 + 2, v15, 9uLL, (uint64_t *)&v18);
    v14 = a1[3] - 72;
  }
  v16 = (v14 - *v9) >> 3;
  LODWORD(v18) = a3;
  *((_QWORD *)&v18 + 1) = v16;
  sub_20F2B4654(a2, a4, &v18);
  return v14;
}

uint64_t sub_20F39BFD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  char **v9;
  uint64_t v10;
  void *v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 800);
  v3 = *(_QWORD *)(a1 + 792);
  v4 = a1 + 40;
  if (*(_BYTE *)(a1 + 192))
    goto LABEL_14;
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 193)
    || (*(_DWORD *)(a1 + 332) != 1 ? (v5 = 1) : (v5 = 3), !sub_20F39C394(a1 + 608, v5)))
  {
    sub_20F39CCBC(v4);
    v7 = *(_DWORD *)(a1 + 308);
    v8 = *(_QWORD **)(a1 + 520);
    v9 = (char **)(v8 + 19);
    v10 = *(_QWORD *)(a1 + 512);
    if (*(_BYTE *)(v10 + 152))
    {
      v11 = (void *)v8[19];
      v8[20] = v11;
      if (v8[21] - (_QWORD)v11 <= 0xFFuLL)
      {
        v12 = (char *)operator new(0x100uLL);
        v8[19] = v12;
        v8[20] = v12;
        v8[21] = v12 + 256;
        if (v11)
          operator delete(v11);
      }
      sub_20F2BB1A4(v10, (uint64_t)(v8 + 19));
      v8 = *(_QWORD **)(a1 + 520);
    }
    sub_20F39D47C(v8, v9);
    sub_20F3A0078(a1 + 528, (uint64_t)v9, v7);
    kdebug_trace();
LABEL_14:
    if (((v2 - v3) & 0x3FFFFFFFCLL) != 0)
      return 0;
    v6 = 1;
    v13 = sub_20F39CEA0(v4, 0, 1);
    if (!v13)
      return v6;
    if (*(_BYTE *)(a1 + 192) || (v16 = *(_QWORD *)(a1 + 48), v17 = *(_QWORD *)(a1 + 56), v16 == v17))
    {
LABEL_18:
      v14 = *(_QWORD *)(a1 + 184);
    }
    else
    {
      while ((*(_BYTE *)(*(_QWORD *)(v16 + 8) + 4) & 6) == 0)
      {
        v16 += 16;
        if (v16 == v17)
          goto LABEL_18;
      }
      v19 = *(_QWORD *)(a1 + 144);
      v18 = *(_QWORD *)(a1 + 152);
      if (v19 != v18)
      {
        v20 = v18 - v19 - 152;
        if (v20 >= 0x98)
        {
          v23 = 0;
          v24 = 0;
          v25 = v20 / 0x98 + 1;
          v22 = v19 + 152 * (v25 & 0x3FFFFFFFFFFFFFELL);
          v26 = v19 + 224;
          v27 = v25 & 0x3FFFFFFFFFFFFFELL;
          do
          {
            if ((*(_BYTE *)(*(_QWORD *)(v26 - 152) + 4) & 6) == 0)
              ++v23;
            if ((*(_BYTE *)(*(_QWORD *)v26 + 4) & 6) == 0)
              ++v24;
            v26 += 304;
            v27 -= 2;
          }
          while (v27);
          v21 = v24 + v23;
          if (v25 == (v25 & 0x3FFFFFFFFFFFFFELL))
            goto LABEL_39;
        }
        else
        {
          v21 = 0;
          v22 = *(_QWORD *)(a1 + 144);
        }
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 4) & 6) == 0)
            ++v21;
          v22 += 152;
        }
        while (v22 != v18);
LABEL_39:
        v14 = 2 * v21;
        return v14 < v13;
      }
      v14 = 0;
    }
    return v14 < v13;
  }
  kdebug_trace();
  return 1;
}

void sub_20F39C270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_20EDB3070((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL sub_20F39C284(int32x2_t *a1, uint64_t a2)
{
  __n128 v4;
  int32x2_t *v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_20F39D640(a2, (uint64_t)&a1[4], (char **)&a1[40], &a1[43]);
  v5 = a1 + 49;
  v6 = 3 * ((*(_QWORD *)&a1[24] - *(_QWORD *)&a1[23]) >> 2);
  a1[51].i32[0] = v6;
  if (*(_QWORD *)&a1[50] < v6)
  {
    if (*v5)
      ((void (*)(_QWORD, _QWORD, __n128))MEMORY[0x212BC6368])(*v5, 0x1000C8000313F17, v4);
    v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
    a1[49] = 0;
    a1[50] = (int32x2_t)(v7 >> 3);
    a1[49] = (int32x2_t)operator new(v7, (std::align_val_t)0x20uLL);
  }
  v8 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 24))(a1);
  v9 = (_DWORD *)a1[23];
  v10 = (_DWORD *)a1[24];
  if (v9 != v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 8);
    do
    {
      v12 -= 16;
      do
      {
        v13 = *(_DWORD *)(v12 + 16);
        v12 += 16;
      }
      while (*v9 != v13);
      v14 = *(_QWORD *)(v12 + 8);
      v15 = *(_OWORD *)(v14 + 32);
      v16 = *(_QWORD *)(v14 + 48);
      v17 = *(_QWORD *)v5 + 8 * v11;
      *(_QWORD *)(v17 + 16) = v16;
      *(_OWORD *)v17 = v15;
      v11 += 3;
      ++v9;
    }
    while (v9 != v10);
  }
  return sub_20F3A2770(a1, (uint64_t)&a1[49], (unsigned int **)(a2 + 152), a2);
}

uint64_t sub_20F39C394(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  char **v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unsigned int *v13;
  unsigned int *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD **v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int8x16_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t i;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  char **v94;
  _QWORD *v95;
  int64_t v96;
  char **v97;
  uint64_t v98;
  uint64_t v99;
  char **v100;
  char **v101;
  void *v102[3];
  void *__p;
  void *v104;
  uint64_t v105;

  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) + 152))
    return 1;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = (char **)sub_20F39D164(v5);
  v7 = v6;
  if ((char **)(a1 + 248) != v6)
    sub_20E867E00((_QWORD *)(a1 + 248), *v6, v6[1], (v6[1] - *v6) >> 2);
  v8 = *(char **)(a1 + 248);
  v9 = *(char **)(a1 + 256);
  if (v8 == v9)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (a1 + 272 != v18 + 152)
      sub_20E867E00((_QWORD *)(a1 + 272), *(char **)(v18 + 152), *(char **)(v18 + 160), (uint64_t)(*(_QWORD *)(v18 + 160) - *(_QWORD *)(v18 + 152)) >> 2);
    v20 = *(char **)(a1 + 272);
    v19 = *(char **)(a1 + 280);
    if (v20 != v19)
    {
      v21 = v7[4];
      v22 = v7[3];
      v23 = *(char **)(a1 + 272);
      while (v22 != v21)
      {
        v24 = *(_DWORD *)v23;
        if (*(_DWORD *)v23 >= *(_DWORD *)v22)
        {
          v23 += 4 * (*(_DWORD *)v22 >= v24);
          v22 += 4;
          if (v23 == v19)
            goto LABEL_100;
        }
        else
        {
          *(_DWORD *)v20 = v24;
          v20 += 4;
          v23 += 4;
          if (v23 == v19)
            goto LABEL_100;
        }
      }
      if (v23 == v20)
        goto LABEL_102;
      v96 = v19 - v23;
      memmove(v20, v23, v19 - v23);
      v20 += v96;
      v19 = *(char **)(a1 + 280);
LABEL_100:
      if (v20 != v19)
        *(_QWORD *)(a1 + 280) = v20;
    }
LABEL_102:
    sub_20F39D32C((char **)(a1 + 184), (unsigned int **)(a1 + 272), (unsigned int **)v102);
    __p = 0;
    v104 = 0;
    v105 = 0;
    sub_20F39DEA0((char **)(a1 + 32), v102, (uint64_t)&__p);
    if (__p)
    {
      v104 = __p;
      operator delete(__p);
    }
    if (v102[0])
    {
      v102[1] = v102[0];
      operator delete(v102[0]);
    }
    return 0;
  }
  sub_20E867E00((_QWORD *)(a1 + 296), v8, v9, (v9 - v8) >> 2);
  sub_20F2B5CD8((char **)(a1 + 296), v7 + 3);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (a1 + 272 != v10 + 152)
    sub_20E867E00((_QWORD *)(a1 + 272), *(char **)(v10 + 152), *(char **)(v10 + 160), (uint64_t)(*(_QWORD *)(v10 + 160) - *(_QWORD *)(v10 + 152)) >> 2);
  v11 = *(char **)(a1 + 272);
  v12 = *(char **)(a1 + 280);
  if (v11 == v12)
  {
    v12 = *(char **)(a1 + 272);
  }
  else
  {
    v13 = *(unsigned int **)(a1 + 304);
    v14 = *(unsigned int **)(a1 + 296);
    v15 = *(char **)(a1 + 272);
    v16 = v15;
    while (v14 != v13)
    {
      v17 = *(_DWORD *)v16;
      if (*(_DWORD *)v16 >= *v14)
      {
        v16 += 4 * (*v14++ >= v17);
        if (v16 == v12)
          goto LABEL_27;
      }
      else
      {
        *(_DWORD *)v15 = v17;
        v15 += 4;
        v16 += 4;
        if (v16 == v12)
          goto LABEL_27;
      }
    }
    if (v16 == v15)
      goto LABEL_29;
    v25 = v12 - v16;
    memmove(v15, v16, v12 - v16);
    v15 += v25;
    v11 = *(char **)(a1 + 272);
    v12 = *(char **)(a1 + 280);
LABEL_27:
    if (v15 != v12)
    {
      v12 = v15;
      *(_QWORD *)(a1 + 280) = v15;
    }
  }
LABEL_29:
  v101 = (char **)(a1 + 272);
  sub_20E867E00((_QWORD *)(a1 + 296), v11, v12, (v12 - v11) >> 2);
  sub_20F2B5CD8((char **)(a1 + 296), (char **)(a1 + 248));
  v26 = 3 * ((*(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272)) >> 2);
  *(_DWORD *)(a1 + 24) = v26;
  if (*(_QWORD *)(a1 + 16) < v26)
  {
    v27 = *(_QWORD *)(a1 + 8);
    if (v27)
      MEMORY[0x212BC6368](v27, 0x1000C8000313F17);
    v28 = (8 * v26 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = v28 >> 3;
    *(_QWORD *)(a1 + 8) = operator new(v28, (std::align_val_t)0x20uLL);
  }
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v30 = *(_DWORD **)(a1 + 272);
  v31 = *(_DWORD **)(a1 + 280);
  if (v30 != v31)
  {
    v32 = 0;
    v33 = *(_QWORD *)(v29 + 8);
    do
    {
      v33 -= 16;
      do
      {
        v34 = *(_DWORD *)(v33 + 16);
        v33 += 16;
      }
      while (*v30 != v34);
      v35 = *(_QWORD *)(v33 + 8);
      v36 = *(_OWORD *)(v35 + 32);
      v37 = *(_QWORD *)(v35 + 48);
      v38 = *(_QWORD *)(a1 + 8) + 8 * v32;
      *(_QWORD *)(v38 + 16) = v37;
      *(_OWORD *)v38 = v36;
      v32 += 3;
      ++v30;
    }
    while (v30 != v31);
  }
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v41 = *(_QWORD *)(v39 + 8);
  v40 = *(_QWORD *)(v39 + 16);
  v42 = *(_DWORD **)(a1 + 296);
  v43 = *(_DWORD **)(a1 + 304);
  if (v41 != v40 && v42 != v43)
  {
    v45 = 0;
    do
    {
      v46 = *(_QWORD *)(v41 + 8);
      if (*v42 == *(_DWORD *)v41)
      {
        if (*(_BYTE *)(v46 + 20))
          v47 = v45;
        else
          v47 = -1;
        v45 += *(unsigned __int8 *)(v46 + 20);
        ++v42;
        *(_DWORD *)v46 = v47;
        v41 += 16;
        if (v41 == v40)
          break;
      }
      else
      {
        *(_DWORD *)v46 = -1;
        v41 += 16;
        if (v41 == v40)
          break;
      }
    }
    while (v42 != v43);
  }
  if (v41 != v40)
  {
    v48 = v40 - v41 - 16;
    if (v48 < 0x10)
    {
      v49 = v41;
      do
      {
LABEL_56:
        **(_DWORD **)(v49 + 8) = -1;
        v49 += 16;
      }
      while (v49 != v40);
      goto LABEL_57;
    }
    v50 = (v48 >> 4) + 1;
    v49 = v41 + 16 * (v50 & 0x1FFFFFFFFFFFFFFELL);
    v51 = (_DWORD **)(v41 + 24);
    v52 = v50 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v53 = *(v51 - 2);
      v54 = *v51;
      v51 += 4;
      *v53 = -1;
      *v54 = -1;
      v52 -= 2;
    }
    while (v52);
    if (v50 != (v50 & 0x1FFFFFFFFFFFFFFELL))
      goto LABEL_56;
  }
LABEL_57:
  v97 = v7;
  v55 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v100 = (char **)(a1 + 296);
  sub_20F39D47C(v55, (char **)(a1 + 296));
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v57 = *(unsigned int *)(v56 + 44);
  if ((_DWORD)v57)
  {
    v58 = v56;
    v59 = 0;
    v60 = v56 + 72;
    do
    {
      v62 = (uint64_t *)(*(_QWORD *)(v58 + 120) + 24 * v59);
      v61 = *v62;
      v63 = v62[1];
      if (*v62 != v63)
      {
        v64 = *(_QWORD *)(v58 + 80);
        v65 = *(_QWORD *)(v58 + 88);
        v66 = *(_QWORD *)(v58 + 112);
        do
        {
          v67 = ((v65 - v64) << 6) - 1;
          if (v65 == v64)
            v67 = 0;
          v68 = *(_QWORD *)(v58 + 104) + v66;
          if (v67 == v68)
          {
            sub_20EDB36DC(v60);
            v64 = *(_QWORD *)(v58 + 80);
            v65 = *(_QWORD *)(v58 + 88);
            v68 = *(_QWORD *)(v58 + 112) + *(_QWORD *)(v58 + 104);
          }
          *(_QWORD *)(*(_QWORD *)(v64 + ((v68 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v68 & 0x1FF)) = *(_QWORD *)(v61 + 8);
          v66 = *(_QWORD *)(v58 + 112) + 1;
          *(_QWORD *)(v58 + 112) = v66;
          v61 += 16;
        }
        while (v61 != v63);
        v61 = *v62;
        v57 = *(unsigned int *)(v58 + 44);
      }
      v62[1] = v61;
      ++v59;
    }
    while (v59 < v57);
  }
  v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v71 = *(unsigned int *)(v69 + 16);
  if ((_DWORD)v71)
    bzero(*(void **)v69, 8 * v71);
  if (((*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) & 0x3FFFFFFFCLL) != 0)
  {
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v70 = sub_20F39D640(v72, a1 + 32, (char **)(a1 + 320), (_QWORD *)(a1 + 344));
  }
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 16))(a1, a2, v70);
  v73 = *(unsigned __int8 *)(a1 + 208);
  v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v98 = a1 + 416;
  v99 = a1 + 392;
  v75 = (_QWORD *)(a1 + 248);
  v76 = a1 + 416;
  if (v73)
    sub_20F39DCBC(v74, v75, v76, (unsigned int **)(a1 + 344));
  else
    v77 = sub_20F39D9FC(v74, v75, v76, a1 + 392, (unsigned int **)(a1 + 344));
  v78 = (*(uint64_t (**)(uint64_t, int8x16_t))(*(_QWORD *)a1 + 40))(a1, v77);
  LODWORD(__p) = 3;
  sub_20F2B7B68((_QWORD *)(a1 + 248), v78 + 152, &__p, a1 + 344);
  sub_20F2B7B68(v101, v78 + 152, &__p, a1 + 368);
  sub_20F39ED0C(v78 + 32, a1 + 440, a1 + 464, (unsigned int **)(a1 + 344), (unsigned int **)(a1 + 368), 1);
  sub_20F39D47C((_QWORD *)(a1 + 32), v101);
  v79 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v79)
  {
    for (i = 0; i < v79; ++i)
    {
      v82 = (uint64_t *)(*(_QWORD *)(a1 + 152) + 24 * i);
      v81 = *v82;
      v83 = v82[1];
      if (*v82 != v83)
      {
        v84 = *(_QWORD *)(a1 + 112);
        v85 = *(_QWORD *)(a1 + 120);
        v86 = *(_QWORD *)(a1 + 144);
        do
        {
          v87 = ((v85 - v84) << 6) - 1;
          if (v85 == v84)
            v87 = 0;
          v88 = *(_QWORD *)(a1 + 136) + v86;
          if (v87 == v88)
          {
            sub_20EDB36DC(a1 + 104);
            v84 = *(_QWORD *)(a1 + 112);
            v85 = *(_QWORD *)(a1 + 120);
            v88 = *(_QWORD *)(a1 + 144) + *(_QWORD *)(a1 + 136);
          }
          *(_QWORD *)(*(_QWORD *)(v84 + ((v88 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v88 & 0x1FF)) = *(_QWORD *)(v81 + 8);
          v86 = *(_QWORD *)(a1 + 144) + 1;
          *(_QWORD *)(a1 + 144) = v86;
          v81 += 16;
        }
        while (v81 != v83);
        v81 = *v82;
        v79 = *(unsigned int *)(a1 + 76);
      }
      v82[1] = v81;
    }
  }
  v89 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v89)
    bzero(*(void **)(a1 + 32), 8 * v89);
  v90 = *(unsigned __int8 *)(a1 + 208);
  v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (v90)
  {
    sub_20F39DCBC(v91, v101, a1 + 488, (unsigned int **)(a1 + 344));
    v92 = *(unsigned __int8 *)(a1 + 208);
    if (*(_BYTE *)(a1 + 209))
      goto LABEL_90;
LABEL_94:
    if (!sub_20F2B67A0(v98, v99, a1 + 440, v92 != 0, a1 + 488, (unint64_t *)(a1 + 32)))
      return 1;
    goto LABEL_95;
  }
  sub_20F39D9FC(v91, v101, a1 + 488, a1 + 32, (unsigned int **)(a1 + 344));
  v92 = *(unsigned __int8 *)(a1 + 208);
  if (!*(_BYTE *)(a1 + 209))
    goto LABEL_94;
LABEL_90:
  LOBYTE(__p) = v92;
  v93 = *(_QWORD *)(a1 + 240);
  if (!v93)
    sub_20E86D37C();
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)v93 + 48))(v93, v98, v99, a1 + 440, &__p, a1 + 488, a1 + 32) & 1) == 0)return 1;
LABEL_95:
  sub_20F39F0C8(a1 + 64, (uint64_t *)(a1 + 488), 0);
  v94 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F39DEA0(v94, (_QWORD *)(a1 + 248), a1 + 536);
  if (v100 != v97 + 6)
    sub_20E867E00(v100, v97[6], v97[7], (v97[7] - v97[6]) >> 2);
  v95 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_20F39E298(v95, v100, a1 + 536);
  return 0;
}

void sub_20F39CC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_20F39CCBC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _QWORD v21[3];

  sub_20F39D164(a1);
  if (*(_BYTE *)(a1 + 153))
  {
    v2 = *(_QWORD **)(a1 + 104);
    v21[0] = a1 + 104;
    v21[1] = a1 + 136;
    v21[2] = a1 + 144;
    v3 = sub_20F2BAB60(v2, *(_QWORD **)(a1 + 112), (uint64_t)v21);
    sub_20F2BAD48(a1 + 104, (uint64_t)v3, *(_QWORD *)(a1 + 112));
  }
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v6 = -16 - v4;
    v7 = *(_QWORD *)(a1 + 16);
    do
    {
      while (1)
      {
        while (1)
        {
          v8 = *(_QWORD *)(v7 - 8);
          v7 -= 16;
          if ((*(_BYTE *)(v8 + 4) & 6) != 0)
            break;
          *(_BYTE *)(v8 + 4) = 0;
          v6 += 16;
          if (v7 == v5)
            goto LABEL_18;
        }
        sub_20F39FD78(a1 + 32, v8);
        v9 = v7 + 16;
        v5 = *(_QWORD *)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 16);
        if (v7 + 16 != v10)
          break;
        v4 = v7;
        *(_QWORD *)(a1 + 16) = v7;
        v6 += 16;
        if (v7 == v5)
          goto LABEL_18;
      }
      v11 = v10 - v7 - 32;
      v4 = v7;
      if (v11 < 0x10)
        goto LABEL_26;
      v12 = (v11 >> 4) + 1;
      v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFELL);
      v4 = v7 + v13;
      v9 += v13;
      v14 = (((unint64_t)(v10 + v6) >> 4) + 1) & 0x1FFFFFFFFFFFFFFELL;
      v15 = v5 + 16 * ((v7 - v5) >> 4) + 24;
      do
      {
        v16 = *(_DWORD *)(v15 + 8);
        *(_DWORD *)(v15 - 24) = *(_DWORD *)(v15 - 8);
        *(_DWORD *)(v15 - 8) = v16;
        v17 = *(_QWORD *)(v15 + 16);
        *(_QWORD *)(v15 - 16) = *(_QWORD *)v15;
        *(_QWORD *)v15 = v17;
        v15 += 32;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_26:
        do
        {
          *(_DWORD *)v4 = *(_DWORD *)v9;
          *(_QWORD *)(v4 + 8) = *(_QWORD *)(v9 + 8);
          v4 += 16;
          v9 += 16;
        }
        while (v9 != v10);
      }
      *(_QWORD *)(a1 + 16) = v4;
      v6 += 16;
    }
    while (v7 != v5);
  }
LABEL_18:
  *(_WORD *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 208);
  if (v7 != v4)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(v7 + 8);
      if (*(_BYTE *)(v19 + 20))
        v20 = v18;
      else
        v20 = -1;
      v18 += *(unsigned __int8 *)(v19 + 20);
      *(_DWORD *)v19 = v20;
      v7 += 16;
    }
    while (v7 != v4);
  }
}

uint64_t sub_20F39CEA0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 152))
  {
    result = 0;
    if (v3 != v4)
    {
      if (a2)
      {
        if ((a3 & 1) != 0)
        {
          do
          {
            v6 = *(_QWORD *)(v3 + 8);
            if ((*(_BYTE *)(v6 + 4) & 2) == 0)
            {
              if (*(_BYTE *)(v6 + 20))
                result = (result + 3);
              else
                result = result;
            }
            v3 += 16;
          }
          while (v3 != v4);
        }
        else
        {
          do
          {
            v7 = *(_QWORD *)(v3 + 8);
            if ((*(_BYTE *)(v7 + 4) & 2) == 0 && *(_BYTE *)(v7 + 20))
            {
              if ((*(_BYTE *)(v7 + 4) & 1) != 0)
                result = result;
              else
                result = (result + 3);
            }
            v3 += 16;
          }
          while (v3 != v4);
        }
      }
      else if ((a3 & 1) != 0)
      {
        do
        {
          v27 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v27 + 4) & 6) == 0)
          {
            if (*(_BYTE *)(v27 + 20))
              result = (result + 3);
            else
              result = result;
          }
          v3 += 16;
        }
        while (v3 != v4);
      }
      else
      {
        do
        {
          v28 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v28 + 4) & 6) == 0)
          {
            if (*(_BYTE *)(v28 + 20))
              v29 = (*(_BYTE *)(v28 + 4) & 1) == 0;
            else
              v29 = 0;
            if (v29)
              result = (result + 3);
            else
              result = result;
          }
          v3 += 16;
        }
        while (v3 != v4);
      }
    }
    return result;
  }
  if (v3 == v4)
  {
    v11 = 0;
    return 3 * v11;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    do
    {
      v12 = *(_QWORD *)(v3 + 8);
      v13 = *(_BYTE *)(v12 + 4);
      if ((v13 & 2) != 0)
        v9 = 1;
      v10 += (v13 & 2) >> 1;
      v14 = *(unsigned __int8 *)(v12 + 20);
      if ((v13 & 1) != 0)
        v15 = a3;
      else
        v15 = 1;
      v16 = v11 + v15;
      if (v14)
        v11 = v16;
      v3 += 16;
    }
    while (v3 != v4);
  }
  else
  {
    do
    {
      v17 = *(_QWORD *)(v3 + 8);
      v18 = *(_BYTE *)(v17 + 4);
      if ((v18 & 6) != 0)
      {
        v9 = 1;
        ++v10;
      }
      v19 = *(unsigned __int8 *)(v17 + 20);
      if ((v18 & 1) != 0)
        v20 = a3;
      else
        v20 = 1;
      v21 = v11 + v20;
      if (v19)
        v11 = v21;
      v3 += 16;
    }
    while (v3 != v4);
  }
  if (!v9)
    return 3 * v11;
  v22 = *(_QWORD *)(a1 + 232);
  v38 = a1 + 232;
  *(_QWORD *)(a1 + 240) = v22;
  v23 = *(_QWORD *)(a1 + 104);
  v24 = *(_QWORD *)(a1 + 112);
  if (v23 == v24)
  {
    v30 = v22;
  }
  else
  {
    v25 = v23 + 72;
    do
    {
      if (*(_BYTE *)(v25 + 72) || (*(_BYTE *)(*(_QWORD *)v25 + 4) & 6) != 0)
        sub_20F2B734C(&v38, (uint64_t *)v25);
      v26 = v25 + 80;
      v25 += 152;
    }
    while (v26 != v24);
    v22 = *(_QWORD *)(a1 + 232);
    v30 = *(_QWORD *)(a1 + 240);
  }
  v31 = (unint64_t)(v30 - v22) >> 2;
  if (v10 > v31)
    LODWORD(v31) = v10;
  v32 = v11 >= v31;
  v33 = v11 - v31;
  if (!v32)
    v33 = 0;
  result = (3 * v33);
  v34 = *(_QWORD *)(a1 + 104);
  v35 = *(_QWORD *)(a1 + 112);
  while (v34 != v35)
  {
    v36 = *(_QWORD *)(v34 + 72);
    if (*(_BYTE *)(v34 + 144) || (*(_BYTE *)(v36 + 4) & 6) != 0)
      ++*(_DWORD *)(v36 + 8);
    v34 += 152;
  }
  return result;
}

void sub_20F39D144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (!a10)
    sub_20F2B78E4(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F39D164(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 154))
  {
    if (!*(_BYTE *)(a1 + 153))
      *(_BYTE *)(a1 + 153) = *(_QWORD *)(a1 + 184) != *(_QWORD *)(a1 + 192);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    if (*(_BYTE *)(a1 + 153))
    {
      v2 = *(void **)(a1 + 232);
      *(_QWORD *)(a1 + 240) = v2;
      v3 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
      v4 = v3 >> 4;
      if (v3 >> 4 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 248) - (_QWORD)v2) >> 2))
      {
        if (v3 < 0)
          sub_20E867F44();
        v5 = (char *)operator new((unint64_t)v3 >> 2);
        *(_QWORD *)(a1 + 232) = v5;
        *(_QWORD *)(a1 + 240) = v5;
        *(_QWORD *)(a1 + 248) = &v5[4 * v4];
        if (v2)
          operator delete(v2);
      }
      v15 = 0;
      v16 = a1;
      v14[0] = a1 + 232;
      v6 = *(_QWORD *)(a1 + 104);
      v7 = *(_QWORD *)(a1 + 112);
      if (v6 != v7)
      {
        v8 = v6 + 72;
        do
        {
          if (*(_BYTE *)(v8 + 72) || (*(_BYTE *)(*(_QWORD *)v8 + 4) & 6) != 0)
          {
            *(_BYTE *)(v8 + 72) = 1;
            sub_20F2B734C(v14, (uint64_t *)v8);
          }
          v9 = v8 + 80;
          v8 += 152;
        }
        while (v9 != v7);
      }
      v14[0] = a1 + 160;
      v14[1] = a1 + 232;
      sub_20F39E6C0(v14, (unsigned int **)(a1 + 8));
      if (!v15)
      {
        v11 = *(_QWORD *)(v16 + 104);
        v12 = *(_QWORD *)(v16 + 112);
        while (v11 != v12)
        {
          v13 = *(_QWORD *)(v11 + 72);
          if (*(_BYTE *)(v11 + 144) || (*(_BYTE *)(v13 + 4) & 6) != 0)
            ++*(_DWORD *)(v13 + 8);
          v11 += 152;
        }
      }
    }
    *(_BYTE *)(a1 + 154) = 1;
  }
  return a1 + 160;
}

void sub_20F39D304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  if (!a11)
    sub_20F2B78E4((uint64_t)&a12);
  _Unwind_Resume(exception_object);
}

void sub_20F39D32C(char **a1@<X0>, unsigned int **a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  char *v7;
  char *v8;
  unsigned int *v9;
  unsigned int *v10;
  int64_t v11;
  unsigned int v12;
  char *v13;
  unsigned int *__dst;
  unsigned int *v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = a1[1] - *a1;
  if (v4)
  {
    sub_20E93DC84((uint64_t)a3, v4 >> 2);
    v7 = *a1;
    v8 = a1[1];
    v9 = *a3;
    v10 = a2[1];
    __dst = *a3;
    v15 = *a2;
    if (v7 == v8)
    {
      v11 = 0;
    }
    else
    {
      while (v15 != v10)
      {
        v12 = *(_DWORD *)v7;
        if (*(_DWORD *)v7 >= *v15)
        {
          v7 += 4 * (*v15++ >= v12);
          if (v7 == v8)
            goto LABEL_8;
        }
        else
        {
          *__dst = v12;
          v7 += 4;
          ++__dst;
          if (v7 == v8)
          {
LABEL_8:
            v11 = 0;
            v9 = __dst;
            goto LABEL_12;
          }
        }
      }
      v9 = __dst;
      v11 = v8 - v7;
      if (v8 != v7)
        memmove(__dst, v7, v8 - v7);
    }
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
LABEL_12:
  v13 = (char *)v9 + v11;
  if (v13 != (char *)a3[1])
    a3[1] = (unsigned int *)v13;
}

void sub_20F39D460(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20F39D47C(_QWORD *a1, char **a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  void *result;
  unint64_t v21;
  size_t v22;

  sub_20F20CEEC(a1, 0, 1u);
  a1[3] = 0;
  (*(void (**)(_QWORD *))(a1[4] + 16))(a1 + 4);
  v4 = (_BYTE *)a1[19];
  if (a1[21] - (_QWORD)v4 > 0xFFuLL)
    goto LABEL_12;
  v5 = (_BYTE *)a1[20];
  v6 = (char *)operator new(0x100uLL);
  v7 = v5 - v4;
  v8 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
  v9 = v8;
  if (v5 != v4)
  {
    if ((unint64_t)(v7 - 4) < 0x2C)
    {
      v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_9:
        v18 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v9 - 1) = v18;
        v9 -= 4;
      }
      while (v5 != v4);
      goto LABEL_10;
    }
    v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFFCLL];
    if (v5 - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) < 0x20)
      goto LABEL_9;
    v10 = v7 >> 2;
    v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
    v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
    v13 = &v5[-v12];
    v9 = &v8[-v12];
    v14 = &v6[4 * v10 - 16];
    v15 = (__int128 *)(v5 - 16);
    v16 = v11 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v17 = *v15;
      *((_OWORD *)v14 - 1) = *(v15 - 1);
      *(_OWORD *)v14 = v17;
      v14 -= 32;
      v15 -= 2;
      v16 -= 8;
    }
    while (v16);
    v5 = v13;
    if (v11 != (v11 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
LABEL_10:
  a1[19] = v9;
  a1[20] = v8;
  a1[21] = v6 + 256;
  if (v4)
    operator delete(v4);
LABEL_12:
  if (a1 + 19 != a2)
    sub_20E867E00(a1 + 19, *a2, a2[1], (a2[1] - *a2) >> 2);
  v19 = (a1[20] - a1[19]) >> 2;
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a1[4] + 24))(a1 + 4, v19, v19);
  a1[3] = v19;
  v21 = (3 * v19);
  *((_DWORD *)a1 + 4) = v21;
  if (a1[1] < v21)
  {
    if (*a1)
      MEMORY[0x212BC6368](*a1, 0x1000C8000313F17);
    v22 = (8 * v21 + 31) & 0xFFFFFFFE0;
    *a1 = 0;
    a1[1] = v22 >> 3;
    result = operator new(v22, (std::align_val_t)0x20uLL);
    *a1 = result;
  }
  return result;
}

__n128 sub_20F39D640(uint64_t a1, uint64_t a2, char **a3, _QWORD *a4)
{
  unsigned int **v8;
  char *v9;
  char *v10;
  unsigned int *v11;
  unsigned int *v12;
  BOOL v13;
  char *v14;
  char *v15;
  unsigned int v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  __n128 result;
  int *v50;
  int *v51;
  int v52;
  int v53;
  __n128 *v54;
  __n128 *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t **v59;
  unint64_t v60;

  v8 = (unsigned int **)(a1 + 152);
  if ((char **)(a1 + 152) != a3)
    sub_20E867E00(a3, *(char **)(a1 + 152), *(char **)(a1 + 160), (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  v9 = *a3;
  v10 = a3[1];
  v11 = *(unsigned int **)(a2 + 152);
  v12 = *(unsigned int **)(a2 + 160);
  v13 = *a3 == v10 || v11 == v12;
  v14 = *a3;
  if (!v13)
  {
    v14 = *a3;
    v15 = *a3;
    do
    {
      v16 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 >= *v11)
      {
        if (*v11 >= v16)
        {
          *(_DWORD *)v14 = v16;
          v14 += 4;
          v15 += 4;
        }
        ++v11;
        if (v15 == v10)
          break;
      }
      else
      {
        v15 += 4;
        if (v15 == v10)
          break;
      }
    }
    while (v11 != v12);
  }
  v56 = a1;
  v57 = a2;
  if (v14 != v10)
  {
    v10 = v14;
    a3[1] = v14;
  }
  v17 = (unint64_t *)*a4;
  a4[1] = *a4;
  if (v9 != v10)
  {
    v18 = v10 - v9;
    v19 = v18 >> 2;
    if (v18 >> 2 > (unint64_t)((uint64_t)(a4[2] - (_QWORD)v17) >> 3))
    {
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFDLL)
        sub_20E92CED8();
      v20 = (char *)operator new(2 * v18);
      *a4 = v20;
      a4[1] = v20;
      a4[2] = &v20[8 * v19];
      if (v17)
        operator delete(v17);
    }
    v22 = *a3;
    v21 = a3[1];
    if (*a3 != v21)
    {
      v23 = 0;
      v24 = 0;
      v25 = *(_DWORD **)(v57 + 152);
      v26 = *v8;
      v58 = a3[1];
      v59 = (unint64_t **)a4;
      v27 = *(_DWORD *)v22;
      if (*v25 < *(_DWORD *)v22)
        goto LABEL_27;
      while (1)
      {
        if (*v26 < v27)
        {
          do
          {
            v29 = v26[1];
            ++v26;
            v23 = (v23 + 1);
          }
          while (v29 < v27);
        }
        v31 = (char *)a4[1];
        v30 = a4[2];
        if ((unint64_t)v31 < v30)
        {
          *(_QWORD *)v31 = v24 | (unint64_t)(v23 << 32);
          a4[1] = v31 + 8;
          v22 += 4;
          if (v22 == v21)
            break;
          goto LABEL_26;
        }
        v32 = (char *)*a4;
        v33 = (uint64_t)&v31[-*a4];
        v34 = v33 >> 3;
        v35 = (v33 >> 3) + 1;
        if (v35 >> 61)
          sub_20E92CED8();
        v36 = v30 - (_QWORD)v32;
        if (v36 >> 2 > v35)
          v35 = v36 >> 2;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        v60 = v35;
        if (v35)
        {
          if (v35 >> 61)
            sub_20E877A38();
          v37 = operator new(8 * v35);
        }
        else
        {
          v37 = 0;
        }
        v38 = (unint64_t *)&v37[8 * v34];
        *v38 = v24 | (unint64_t)(v23 << 32);
        v39 = v38 + 1;
        if (v31 == v32)
        {
          a4 = v59;
          *v59 = v38;
          v59[1] = v39;
          v59[2] = (unint64_t *)&v37[8 * v60];
          if (v31)
            goto LABEL_48;
        }
        else
        {
          v40 = v31 - v32 - 8;
          if (v40 < 0x58)
            goto LABEL_61;
          if ((unint64_t)(v31 - v37 - v33) < 0x20)
            goto LABEL_61;
          v41 = (v40 >> 3) + 1;
          v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v31[-v42];
          v38 = (unint64_t *)((char *)v38 - v42);
          v44 = &v37[8 * v34 - 16];
          v45 = v31 - 16;
          v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 4;
          }
          while (v46);
          v31 = v43;
          if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_61:
            do
            {
              v48 = *((_QWORD *)v31 - 1);
              v31 -= 8;
              *--v38 = v48;
            }
            while (v31 != v32);
          }
          a4 = v59;
          v31 = (char *)*v59;
          *v59 = v38;
          v59[1] = v39;
          v59[2] = (unint64_t *)&v37[8 * v60];
          if (v31)
LABEL_48:
            operator delete(v31);
        }
        v21 = v58;
        a4[1] = v39;
        v22 += 4;
        if (v22 == v58)
          break;
LABEL_26:
        v27 = *(_DWORD *)v22;
        if (*v25 < *(_DWORD *)v22)
        {
          do
          {
LABEL_27:
            v28 = v25[1];
            ++v25;
            ++v24;
          }
          while (v28 < v27);
        }
      }
    }
  }
  sub_20F39EABC((_QWORD *)(v56 + 32), v57 + 32, a4, (unsigned int **)a4);
  v50 = (int *)*a4;
  v51 = (int *)a4[1];
  if ((int *)*a4 != v51)
  {
    do
    {
      v52 = *v50;
      v53 = v50[1];
      v50 += 2;
      v54 = (__n128 *)(*(_QWORD *)v57 + 8 * (*(_DWORD *)(v57 + 28) + 3 * v52));
      v55 = (__n128 *)(*(_QWORD *)v56 + 8 * (*(_DWORD *)(v56 + 28) + 3 * v53));
      result = *v54;
      v55[1].n128_u64[0] = v54[1].n128_u64[0];
      *v55 = result;
    }
    while (v50 != v51);
  }
  return result;
}

int8x16_t sub_20F39D9FC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned int **a5)
{
  int8x16_t result;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  size_t v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t v23;
  __int128 v24;
  unint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  unsigned int *v34;
  unint64_t v35;
  size_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int8x16_t *v40;
  __n128 *v41;
  int v42;

  v42 = 3;
  sub_20F2B7B68(a2, a1 + 152, &v42, (uint64_t)a5);
  v10 = 3 * ((unint64_t)((char *)a5[1] - (char *)*a5) >> 3);
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v10;
  v11 = v10 * (unint64_t)v10;
  v12 = v10;
  if (*(_QWORD *)(a3 + 8) < v11)
  {
    if (*(_QWORD *)a3)
      MEMORY[0x212BC6368](*(_QWORD *)a3, 0x1000C8000313F17);
    v13 = (8 * v11 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v13 >> 3;
    *(_QWORD *)a3 = operator new(v13, (std::align_val_t)0x20uLL);
    v12 = *(_DWORD *)(a3 + 16);
    v10 = *(_DWORD *)(a3 + 20);
  }
  v14 = v12 * v10;
  if (v14)
    bzero(*(void **)a3, 8 * v14);
  v16 = *a5;
  v15 = a5[1];
  if (*a5 == v15)
  {
    v34 = *a5;
    v35 = 0;
    if (!*(_DWORD *)(a4 + 16))
      goto LABEL_32;
    goto LABEL_28;
  }
  do
  {
    v17 = *a5;
    v18 = a5[1];
    if (*a5 != v18)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v16);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v16 + 8);
      do
      {
        if (v20 == v19)
          break;
        v21 = *v17;
        while (*(_DWORD *)v20 < v21)
        {
          v20 += 16;
          if (v20 == v19)
            goto LABEL_9;
        }
        if (*(_DWORD *)v20 == v21)
        {
          v22 = *(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(v20 + 8);
          if (v22 == *(_QWORD *)a3)
          {
            v28 = *(_QWORD *)(v22 + 64);
            v27 = *(int8x16_t *)(v22 + 32);
            result = *(int8x16_t *)(v22 + 48);
            v23 = *(int8x16_t *)v22;
            v26 = *(int8x16_t *)(v22 + 16);
            v29 = vextq_s8(result, result, 8uLL).u64[0];
            v25 = vextq_s8(v27, v27, 8uLL).u64[0];
            *(_QWORD *)&v24 = vextq_s8(v26, v26, 8uLL).u64[0];
          }
          else
          {
            v23 = *(int8x16_t *)v22;
            v24 = *(_OWORD *)(v22 + 24);
            result = *(int8x16_t *)(v22 + 48);
            v25 = *(_QWORD *)(v22 + 40);
            v26.i64[0] = *(_QWORD *)(v22 + 16);
            v27.i64[0] = *(_QWORD *)(v22 + 32);
            v28 = *(_QWORD *)(v22 + 64);
            v29 = vextq_s8(result, result, 8uLL).u64[0];
          }
          v30 = *(unsigned int *)(a3 + 16);
          v31 = *(_QWORD *)a3 + 8 * (v17[1] + (_DWORD)v30 * v16[1]);
          v23.i64[1] = vextq_s8(v23, v23, 8uLL).u64[0];
          *((_QWORD *)&v24 + 1) = v27.i64[0];
          result.i64[1] = v29;
          *(_QWORD *)(v31 + 16) = v26.i64[0];
          *(int8x16_t *)v31 = v23;
          v32 = v31 + 8 * v30;
          *(_QWORD *)(v32 + 16) = v25;
          *(_OWORD *)v32 = v24;
          v33 = (__n128 *)(v31 + 16 * v30);
          v33[1].n128_u64[0] = v28;
          *v33 = (__n128)result;
        }
        if (v20 == v19)
          break;
        v17 += 2;
      }
      while (v17 != v18);
    }
LABEL_9:
    v16 += 2;
  }
  while (v16 != v15);
  v16 = *a5;
  v34 = a5[1];
  v35 = 3 * ((unint64_t)((char *)v34 - (char *)*a5) >> 3);
  if (*(_DWORD *)(a4 + 16) != (_DWORD)v35)
  {
LABEL_28:
    *(_DWORD *)(a4 + 16) = v35;
    if (*(_QWORD *)(a4 + 8) < v35)
    {
      if (*(_QWORD *)a4)
      {
        MEMORY[0x212BC6368](*(_QWORD *)a4, 0x1000C8000313F17);
        v16 = *a5;
        v34 = a5[1];
      }
      v36 = (8 * v35 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = v36 >> 3;
      *(_QWORD *)a4 = operator new(v36, (std::align_val_t)0x20uLL);
    }
  }
LABEL_32:
  if (v16 != v34)
  {
    v37 = *(_DWORD *)(a1 + 28);
    do
    {
      v38 = *v16;
      v39 = v16[1];
      v16 += 2;
      v40 = (int8x16_t *)(*(_QWORD *)a1 + 8 * (3 * v38 + v37));
      v41 = (__n128 *)(*(_QWORD *)a4 + 8 * v39);
      result = *v40;
      v41[1].n128_u64[0] = v40[1].u64[0];
      *v41 = (__n128)result;
    }
    while (v16 != v34);
  }
  return result;
}

void sub_20F39DCBC(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int **a4)
{
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int8x16_t v20;
  __int128 v21;
  int8x16_t v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  int v32;

  v32 = 3;
  sub_20F2B7B68(a2, a1 + 152, &v32, (uint64_t)a4);
  v7 = 3 * ((unint64_t)((char *)a4[1] - (char *)*a4) >> 3);
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v7;
  v8 = v7 * (unint64_t)v7;
  v9 = v7;
  if (*(_QWORD *)(a3 + 8) < v8)
  {
    if (*(_QWORD *)a3)
      MEMORY[0x212BC6368](*(_QWORD *)a3, 0x1000C8000313F17);
    v10 = (8 * v8 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v10 >> 3;
    *(_QWORD *)a3 = operator new(v10, (std::align_val_t)0x20uLL);
    v9 = *(_DWORD *)(a3 + 16);
    v7 = *(_DWORD *)(a3 + 20);
  }
  v11 = v9 * v7;
  if (v11)
    bzero(*(void **)a3, 8 * v11);
  v12 = *a4;
  v13 = a4[1];
  if (*a4 != v13)
  {
    do
    {
      v14 = *a4;
      v15 = a4[1];
      if (*a4 != v15)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v12);
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 24 * *v12 + 8);
        do
        {
          if (v17 == v16)
            break;
          v18 = *v14;
          while (*(_DWORD *)v17 < v18)
          {
            v17 += 16;
            if (v17 == v16)
              goto LABEL_9;
          }
          if (*(_DWORD *)v17 == v18)
          {
            v19 = *(_QWORD *)(a1 + 48) + 8 * *(_QWORD *)(v17 + 8);
            if (v19 == *(_QWORD *)a3)
            {
              v26 = *(_QWORD *)(v19 + 64);
              v25 = *(int8x16_t *)(v19 + 32);
              v22 = *(int8x16_t *)(v19 + 48);
              v20 = *(int8x16_t *)v19;
              v24 = *(int8x16_t *)(v19 + 16);
              v27 = vextq_s8(v22, v22, 8uLL).u64[0];
              v23 = vextq_s8(v25, v25, 8uLL).u64[0];
              *(_QWORD *)&v21 = vextq_s8(v24, v24, 8uLL).u64[0];
            }
            else
            {
              v20 = *(int8x16_t *)v19;
              v21 = *(_OWORD *)(v19 + 24);
              v22 = *(int8x16_t *)(v19 + 48);
              v23 = *(_QWORD *)(v19 + 40);
              v24.i64[0] = *(_QWORD *)(v19 + 16);
              v25.i64[0] = *(_QWORD *)(v19 + 32);
              v26 = *(_QWORD *)(v19 + 64);
              v27 = vextq_s8(v22, v22, 8uLL).u64[0];
            }
            v28 = *(unsigned int *)(a3 + 16);
            v29 = *(_QWORD *)a3 + 8 * (v14[1] + (_DWORD)v28 * v12[1]);
            v20.i64[1] = vextq_s8(v20, v20, 8uLL).u64[0];
            *((_QWORD *)&v21 + 1) = v25.i64[0];
            v22.i64[1] = v27;
            *(_QWORD *)(v29 + 16) = v24.i64[0];
            *(int8x16_t *)v29 = v20;
            v30 = v29 + 8 * v28;
            *(_QWORD *)(v30 + 16) = v23;
            *(_OWORD *)v30 = v21;
            v31 = (int8x16_t *)(v29 + 16 * v28);
            v31[1].i64[0] = v26;
            *v31 = v22;
          }
          if (v17 == v16)
            break;
          v14 += 2;
        }
        while (v14 != v15);
      }
LABEL_9:
      v12 += 2;
    }
    while (v12 != v13);
  }
}

void sub_20F39DEA0(char **a1, _QWORD *a2, uint64_t a3)
{
  void *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  unint64_t v17;
  char *v18;
  const void *v19;
  char *v20;
  size_t v21;
  void **v22;
  char **v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  char *v43;
  unsigned int *v44;
  unsigned int *v45;
  char *v46;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  char *v53;
  int64_t v54;
  uint64_t v55;
  int v56;
  char *v57;
  _DWORD *v58;
  uint64_t v59;
  unint64_t v60;

  v3 = *(void **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v4 = (_DWORD *)*a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = a3;
    v9 = v5 - (_QWORD)v4;
    v10 = (v5 - (uint64_t)v4) >> 2;
    if (v10 > (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v3) >> 2)
    {
      if ((v9 & 0x8000000000000000) != 0)
        sub_20E867F44();
      v11 = (char *)operator new(v9);
      *(_QWORD *)v6 = v11;
      *(_QWORD *)(v6 + 8) = v11;
      *(_QWORD *)(v6 + 16) = &v11[4 * v10];
      if (v3)
        operator delete(v3);
    }
    v12 = a1[19];
    v13 = a1[20];
    v15 = (_DWORD *)*a2;
    v14 = (_DWORD *)a2[1];
    if (v12 == v13)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      while (*(_DWORD *)v12 < *v15)
      {
        v12 += 4;
        ++v16;
        if (v12 == v13)
          goto LABEL_45;
      }
    }
    if (v15 != v14 && v12 != v13)
    {
      v58 = (_DWORD *)a2[1];
      v59 = v6;
      while (1)
      {
        if (*v15 != *(_DWORD *)v12)
        {
          v12 += 4;
          if (++v15 == v14)
            goto LABEL_45;
          goto LABEL_22;
        }
        v18 = *(char **)(v6 + 8);
        v17 = *(_QWORD *)(v6 + 16);
        if ((unint64_t)v18 < v17)
        {
          *(_DWORD *)v18 = v16;
          *(_QWORD *)(v6 + 8) = v18 + 4;
          v19 = v12 + 4;
          v20 = a1[20];
          v21 = v20 - (v12 + 4);
          if (v20 == v12 + 4)
            goto LABEL_19;
LABEL_18:
          memmove(v12, v19, v21);
          goto LABEL_19;
        }
        v22 = (void **)v6;
        v23 = a1;
        v24 = (char *)*v22;
        v25 = v18 - (_BYTE *)*v22;
        v26 = v25 >> 2;
        v27 = (v25 >> 2) + 1;
        if (v27 >> 62)
          sub_20E867F44();
        v28 = v17 - (_QWORD)v24;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        v60 = v27;
        if (v27)
        {
          if (v27 >> 62)
            sub_20E877A38();
          v29 = operator new(4 * v27);
          v30 = &v29[4 * v26];
          *v30 = v16;
          v31 = (uint64_t)(v30 + 1);
          v32 = v18 - v24;
          if (v18 == v24)
          {
LABEL_35:
            a1 = v23;
            v6 = v59;
            goto LABEL_41;
          }
        }
        else
        {
          v29 = 0;
          v30 = (_DWORD *)(4 * v26);
          *(_DWORD *)(4 * v26) = v16;
          v31 = 4 * v26 + 4;
          v32 = v18 - v24;
          if (v18 == v24)
            goto LABEL_35;
        }
        v33 = v32 - 4;
        if (v33 < 0x2C)
          break;
        v34 = v18 - &v29[v25];
        a1 = v23;
        v6 = v59;
        if (v34 < 0x20)
          goto LABEL_40;
        v35 = (v33 >> 2) + 1;
        v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
        v37 = &v18[-v36];
        v30 = (_DWORD *)((char *)v30 - v36);
        v38 = &v29[4 * v26 - 16];
        v39 = v18 - 16;
        v40 = v35 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v41 = *(_OWORD *)v39;
          *(v38 - 1) = *((_OWORD *)v39 - 1);
          *v38 = v41;
          v38 -= 2;
          v39 -= 32;
          v40 -= 8;
        }
        while (v40);
        v18 = v37;
        if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_40;
LABEL_41:
        *(_QWORD *)v6 = v30;
        *(_QWORD *)(v6 + 8) = v31;
        *(_QWORD *)(v6 + 16) = &v29[4 * v60];
        if (v24)
          operator delete(v24);
        v14 = v58;
        *(_QWORD *)(v6 + 8) = v31;
        v19 = v12 + 4;
        v43 = a1[20];
        v21 = v43 - (v12 + 4);
        if (v43 != v12 + 4)
          goto LABEL_18;
LABEL_19:
        a1[20] = &v12[v21];
        v13 -= 4;
        if (++v15 == v14)
          goto LABEL_45;
LABEL_22:
        ++v16;
        if (v12 == v13)
          goto LABEL_45;
      }
      a1 = v23;
      v6 = v59;
      do
      {
LABEL_40:
        v42 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *--v30 = v42;
      }
      while (v18 != v24);
      goto LABEL_41;
    }
LABEL_45:
    if (*(_QWORD *)v6 != *(_QWORD *)(v6 + 8))
    {
      sub_20F2B9678((uint64_t)(a1 + 4), (unsigned int **)v6);
      sub_20F2B9818((uint64_t)(a1 + 4), (unint64_t *)v6);
      v44 = *(unsigned int **)v6;
      v45 = *(unsigned int **)(v6 + 8);
      if (*(unsigned int **)v6 == v45)
      {
        v56 = 0;
      }
      else
      {
        v46 = *a1;
        v47 = *((_DWORD *)a1 + 7);
        v48 = *a1;
        v49 = *a1;
        v50 = *a1;
        do
        {
          while (1)
          {
            v51 = 3 * *v44 + v47;
            v52 = &v46[8 * v51];
            if (v49 != v52)
              break;
            v49 += 24;
            if (++v44 == v45)
              goto LABEL_53;
          }
          v53 = &v46[8 * v51];
          if (v48 != v49)
          {
            v54 = v52 - v49;
            memmove(v50, v49, v52 - v49);
            v53 = &v50[v54];
            v46 = *a1;
          }
          v49 = &v46[8 * (v51 + 3)];
          v50 = v53;
          v48 = v52;
          ++v44;
        }
        while (v44 != v45);
LABEL_53:
        v55 = (*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2;
        *((_DWORD *)a1 + 6) -= v55;
        v56 = -3 * v55;
        if (v48 != v49)
        {
          v57 = &v46[8 * *((unsigned int *)a1 + 4)];
          if (v57 != v49)
            memmove(v50, v49, v57 - v49);
        }
      }
      sub_20F20CEEC(a1, *((_DWORD *)a1 + 4) + v56, 1u);
    }
  }
}

void sub_20F39E298(_QWORD *a1, char **a2, size_t __sz)
{
  void *v3;
  char *v4;
  char *v5;
  size_t v6;
  size_t v9;
  unint64_t v10;
  char *v11;
  void **v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  size_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  int64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  void **v61;

  v3 = *(void **)__sz;
  *(_QWORD *)(__sz + 8) = *(_QWORD *)__sz;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
    return;
  v6 = __sz;
  v9 = v5 - v4;
  v10 = (v5 - v4) >> 2;
  if (v10 > (uint64_t)(*(_QWORD *)(__sz + 16) - (_QWORD)v3) >> 2)
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v11 = (char *)operator new(v9);
    *(_QWORD *)v6 = v11;
    *(_QWORD *)(v6 + 8) = v11;
    *(_QWORD *)(v6 + 16) = &v11[4 * v10];
    if (v3)
      operator delete(v3);
  }
  v12 = (void **)(a1 + 19);
  v14 = (_BYTE *)a1[19];
  v13 = (_BYTE *)a1[20];
  v15 = (v13 - v14) >> 2;
  v16 = v15 + ((a2[1] - *a2) >> 2);
  v61 = (void **)(a1 + 19);
  if (v16 > (uint64_t)(a1[21] - (_QWORD)v14) >> 2)
  {
    if (v16 >> 62)
      sub_20E867F44();
    v17 = v6;
    v18 = 4 * v16;
    v19 = operator new(4 * v16);
    v20 = &v19[4 * v15];
    v21 = v20;
    if (v13 == v14)
      goto LABEL_17;
    v22 = v13 - v14 - 4;
    if (v22 >= 0x2C)
    {
      v21 = &v19[4 * v15];
      if ((unint64_t)(v14 - v19) >= 0x20)
      {
        v23 = (v22 >> 2) + 1;
        v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
        v25 = &v13[-v24];
        v21 = &v20[-v24];
        v26 = &v19[4 * v15 - 16];
        v27 = (__int128 *)(v13 - 16);
        v28 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v29 = *v27;
          *(v26 - 1) = *(v27 - 1);
          *v26 = v29;
          v26 -= 2;
          v27 -= 2;
          v28 -= 8;
        }
        while (v28);
        v13 = v25;
        if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_17:
          a1[19] = v21;
          a1[20] = v20;
          a1[21] = &v19[v18];
          v6 = v17;
          v12 = (void **)(a1 + 19);
          if (v14)
          {
            operator delete(v14);
            v21 = (char *)a1[19];
            v20 = (char *)a1[20];
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      v21 = &v19[4 * v15];
    }
    do
    {
      v30 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v21 - 1) = v30;
      v21 -= 4;
    }
    while (v13 != v14);
    goto LABEL_17;
  }
  v20 = (char *)a1[20];
  v21 = (char *)a1[19];
LABEL_19:
  v32 = *a2;
  v31 = a2[1];
  if (v21 == v20)
  {
    v33 = 0;
LABEL_25:
    if (v32 != v31)
      goto LABEL_28;
  }
  else
  {
    v33 = 0;
    while (*(_DWORD *)v21 <= *(_DWORD *)v32)
    {
      v21 += 4;
      ++v33;
      if (v21 == v20)
        goto LABEL_25;
    }
    v20 = v21;
    if (v32 != v31)
    {
LABEL_28:
      v59 = a2[1];
      v60 = a1;
      while (1)
      {
        if (v20 != (char *)a1[20] && *(_DWORD *)v32 == *(_DWORD *)v20)
          goto LABEL_31;
        v36 = *(char **)(v6 + 8);
        v35 = *(_QWORD *)(v6 + 16);
        if ((unint64_t)v36 >= v35)
          break;
        *(_DWORD *)v36 = v33;
        v34 = (uint64_t)(v36 + 4);
LABEL_30:
        *(_QWORD *)(v6 + 8) = v34;
        v20 = sub_20EDB3C7C(v12, v20, v32);
        v32 += 4;
LABEL_31:
        v20 += 4;
        ++v33;
        if (v32 == v31)
          goto LABEL_56;
      }
      v37 = v6;
      v38 = *(char **)v6;
      v39 = (uint64_t)&v36[-*(_QWORD *)v6];
      v40 = v39 >> 2;
      v41 = (v39 >> 2) + 1;
      if (v41 >> 62)
        sub_20E867F44();
      v42 = v35 - (_QWORD)v38;
      if (v42 >> 1 > v41)
        v41 = v42 >> 1;
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
        v43 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v43 = v41;
      if (v43)
      {
        if (v43 >> 62)
          sub_20E877A38();
        v44 = operator new(4 * v43);
        v45 = &v44[4 * v40];
        *v45 = v33;
        v34 = (uint64_t)(v45 + 1);
        v46 = v36 - v38;
        if (v36 != v38)
          goto LABEL_44;
      }
      else
      {
        v44 = 0;
        v45 = (_DWORD *)(4 * v40);
        *(_DWORD *)(4 * v40) = v33;
        v34 = 4 * v40 + 4;
        v46 = v36 - v38;
        if (v36 != v38)
        {
LABEL_44:
          v47 = v46 - 4;
          if (v47 >= 0x2C)
          {
            v48 = v36 - &v44[v39];
            v6 = v37;
            v12 = v61;
            if (v48 >= 0x20)
            {
              v49 = (v47 >> 2) + 1;
              v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
              v51 = &v36[-v50];
              v45 = (_DWORD *)((char *)v45 - v50);
              v52 = &v44[4 * v40 - 16];
              v53 = v36 - 16;
              v54 = v49 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v55 = *(_OWORD *)v53;
                *(v52 - 1) = *((_OWORD *)v53 - 1);
                *v52 = v55;
                v52 -= 2;
                v53 -= 32;
                v54 -= 8;
              }
              while (v54);
              v36 = v51;
              if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_53;
            }
          }
          else
          {
            v6 = v37;
            v12 = v61;
          }
          do
          {
            v56 = *((_DWORD *)v36 - 1);
            v36 -= 4;
            *--v45 = v56;
          }
          while (v36 != v38);
LABEL_53:
          *(_QWORD *)v6 = v45;
          *(_QWORD *)(v6 + 8) = v34;
          *(_QWORD *)(v6 + 16) = &v44[4 * v43];
          if (v38)
            operator delete(v38);
          v31 = v59;
          a1 = v60;
          goto LABEL_30;
        }
      }
      v6 = v37;
      v12 = v61;
      goto LABEL_53;
    }
  }
LABEL_56:
  v57 = *(_QWORD *)(v6 + 8);
  if (*(_QWORD *)v6 != v57)
  {
    v58 = v57 - *(_QWORD *)v6;
    if (a1[5])
    {
      sub_20F2B9E90((uint64_t)(a1 + 4), (unsigned int **)v6, v58 >> 2);
      sub_20F2B9FE8((uint64_t)(a1 + 4), (unsigned int **)v6);
    }
    else
    {
      (*(void (**)(_QWORD *, unint64_t, unint64_t))(a1[4] + 24))(a1 + 4, (unint64_t)v58 >> 2, (unint64_t)v58 >> 2);
    }
    sub_20F39F794((uint64_t)a1, (_QWORD *)v6);
  }
}

void sub_20F39E6C0(_QWORD *a1, unsigned int **a2)
{
  unsigned int **v3;
  _QWORD *v4;
  void **v5;
  _BYTE *v6;
  _BYTE *v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  unsigned int *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  unsigned int v55;
  __n128 *v56;
  __n128 *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const std::nothrow_t *v61;
  char *v62;
  BOOL v63;
  char *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  unsigned int *v68;
  _QWORD *v69;
  void **v70;
  char v71;

  v4 = (_QWORD *)*a1;
  v3 = (unsigned int **)a1[1];
  v5 = (void **)(*a1 + 24);
  v6 = *v5;
  v7 = *(_BYTE **)(*a1 + 32);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  v67 = (v7 - v6) >> 2;
  v8 = v67 + v3[1] - *v3;
  v70 = v5;
  v9 = *v5;
  if (v8 <= (uint64_t)(v4[5] - (_QWORD)*v5) >> 2)
    goto LABEL_13;
  if (v8 >> 62)
LABEL_62:
    sub_20E867F44();
  v10 = (_BYTE *)v4[4];
  v11 = 4 * v8;
  v12 = (char *)operator new(4 * v8);
  v13 = v10 - v9;
  v14 = &v12[(v10 - v9) & 0xFFFFFFFFFFFFFFFCLL];
  v15 = v14;
  if (v10 != v9)
  {
    if ((unint64_t)(v13 - 4) < 0x2C)
    {
      v15 = &v12[(v10 - v9) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        v24 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v15 - 1) = v24;
        v15 -= 4;
      }
      while (v10 != v9);
      goto LABEL_11;
    }
    v15 = &v12[(v10 - v9) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v10[-(v13 & 0xFFFFFFFFFFFFFFFCLL)] - v12) < 0x20)
      goto LABEL_10;
    v16 = v13 >> 2;
    v17 = ((unint64_t)(v13 - 4) >> 2) + 1;
    v18 = 4 * (v17 & 0x7FFFFFFFFFFFFFF8);
    v19 = &v10[-v18];
    v15 = &v14[-v18];
    v20 = &v12[4 * v16 - 16];
    v21 = (__int128 *)(v10 - 16);
    v22 = v17 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    v10 = v19;
    if (v17 != (v17 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_10;
  }
LABEL_11:
  v4[3] = v15;
  v4[4] = v14;
  v4[5] = &v12[v11];
  if (v9)
    operator delete(v9);
LABEL_13:
  v65 = v7;
  v66 = v6;
  v26 = *v3;
  v25 = v3[1];
  if (*v3 != v25)
  {
    v68 = v3[1];
    v69 = v4;
    while (1)
    {
      v28 = *v26;
      v30 = *a2;
      v29 = a2[1];
      if (v29 != *a2)
      {
        v31 = ((char *)v29 - (char *)*a2) >> 4;
        do
        {
          v32 = v31 >> 1;
          v33 = &v30[4 * (v31 >> 1)];
          v35 = *v33;
          v34 = v33 + 4;
          v31 += ~(v31 >> 1);
          if (v35 < v28)
            v30 = v34;
          else
            v31 = v32;
        }
        while (v31);
      }
      if (v30 == v29 || *v30 != v28)
      {
        v28 = *v29;
        v30 = a2[1];
      }
      if ((*(_BYTE *)(*((_QWORD *)v30 + 1) + 4) & 6) != 0)
        goto LABEL_17;
      v37 = (char *)v4[4];
      v36 = v4[5];
      if ((unint64_t)v37 >= v36)
        break;
      *(_DWORD *)v37 = v28;
      v27 = (uint64_t)(v37 + 4);
LABEL_16:
      v4[4] = v27;
      *(_BYTE *)(*((_QWORD *)v30 + 1) + 4) ^= 2u;
LABEL_17:
      if (++v26 == v25)
        goto LABEL_49;
    }
    v38 = (char *)*v70;
    v39 = v37 - (_BYTE *)*v70;
    v40 = v39 >> 2;
    v41 = (v39 >> 2) + 1;
    if (v41 >> 62)
      goto LABEL_62;
    v42 = v36 - (_QWORD)v38;
    if (v42 >> 1 > v41)
      v41 = v42 >> 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
      v43 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      if (v43 >> 62)
        sub_20E877A38();
      v44 = operator new(4 * v43);
      v45 = (unsigned int *)&v44[4 * v40];
      *v45 = v28;
      v27 = (uint64_t)(v45 + 1);
      v46 = v37 - v38;
      if (v37 == v38)
        goto LABEL_46;
    }
    else
    {
      v44 = 0;
      v45 = (unsigned int *)(4 * v40);
      *(_DWORD *)(4 * v40) = v28;
      v27 = 4 * v40 + 4;
      v46 = v37 - v38;
      if (v37 == v38)
      {
LABEL_46:
        v4 = v69;
        v69[3] = v45;
        v69[4] = v27;
        v69[5] = &v44[4 * v43];
        if (v38)
          operator delete(v38);
        v25 = v68;
        goto LABEL_16;
      }
    }
    v47 = v46 - 4;
    if (v47 < 0x2C)
      goto LABEL_66;
    if ((unint64_t)(v37 - v44 - v39) < 0x20)
      goto LABEL_66;
    v48 = (v47 >> 2) + 1;
    v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
    v50 = &v37[-v49];
    v45 = (unsigned int *)((char *)v45 - v49);
    v51 = &v44[4 * v40 - 16];
    v52 = v37 - 16;
    v53 = v48 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 8;
    }
    while (v53);
    v37 = v50;
    if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_66:
      do
      {
        v55 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *--v45 = v55;
      }
      while (v37 != v38);
    }
    goto LABEL_46;
  }
LABEL_49:
  if (v65 != v66)
  {
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v56 = (__n128 *)v4[3];
    v57 = (__n128 *)v4[4];
    v58 = (char *)v57 - ((char *)v56 + 4 * v67);
    v59 = v58 >> 2;
    if (v58 >> 2 >= v67)
      v60 = v67;
    else
      v60 = v58 >> 2;
    if (v60 < 1)
    {
LABEL_57:
      v64 = 0;
      v60 = 0;
    }
    else
    {
      v61 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      while (1)
      {
        v62 = (char *)operator new(4 * v60, v61);
        if (v62)
          break;
        v63 = (unint64_t)v60 > 1;
        v60 = (unint64_t)v60 >> 1;
        if (!v63)
          goto LABEL_57;
      }
      v64 = v62;
    }
    sub_20EDB30B0(v56, (__n128 *)((char *)v56 + 4 * v67), v57, (uint64_t)&v71, v67, v59, v64, v60);
    if (v64)
      operator delete(v64);
  }
}

void sub_20F39EAA4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F39EABC(_QWORD *result, uint64_t a2, _QWORD *a3, unsigned int **a4)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  unsigned int *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;

  v5 = *a4;
  v4 = a4[1];
  if (*a4 != v4 && *a3 != a3[1])
  {
    v35 = a3;
    v36 = result + 2;
    v33 = a4[1];
    v34 = a2;
    v32 = result;
    while (1)
    {
      v7 = (unsigned int *)*a3;
      v6 = (unsigned int *)a3[1];
      if ((unsigned int *)*a3 != v6)
        break;
LABEL_4:
      v5 += 2;
      if (v5 == v4)
        return result;
    }
    v8 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 24 * *v5);
    v9 = result[11] + 24 * v5[1];
    v11 = *v8;
    v10 = v8[1];
    while (1)
    {
      if (v11 == v10)
        goto LABEL_4;
      v12 = *v7;
      while (*(_DWORD *)v11 != v12)
      {
        if (*(_DWORD *)v11 > v12)
          goto LABEL_31;
        v11 += 16;
        if (v11 == v10)
          goto LABEL_4;
      }
      v13 = v7[1];
      v14 = *(char **)v9;
      v15 = *(char **)(v9 + 8);
      if (*(char **)v9 != v15)
      {
        while (*(_DWORD *)v14 < v13)
        {
          v14 += 16;
          if (v14 == v15)
            goto LABEL_22;
        }
      }
      if (v14 == v15)
        goto LABEL_22;
      if (*(_DWORD *)v14 != v13)
        break;
      v16 = *v36 + 8 * *((_QWORD *)v14 + 1);
      v17 = *(_QWORD *)(a2 + 16) + 8 * *(_QWORD *)(v11 + 8);
      if (v17 != v16)
        goto LABEL_30;
LABEL_31:
      if (v11 != v10)
      {
        v7 += 2;
        if (v7 != v6)
          continue;
      }
      goto LABEL_4;
    }
    v15 = v14;
LABEL_22:
    v18 = result[10];
    v37 = *(_QWORD *)(a2 + 16);
    v38 = *(_QWORD *)(v11 + 8);
    if (v18)
    {
      v20 = result[6];
      v19 = result[7];
      v21 = ((v19 - v20) << 6) - 1;
      v22 = result[9];
      if (v19 == v20)
        v21 = 0;
      v16 = result[2]
          + 8
          * *(_QWORD *)(*(_QWORD *)(v20 + (((unint64_t)(v22 + v18 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v22 + v18 - 1) & 0x1FF));
      result[10] = v18 - 1;
      if ((unint64_t)(v21 - (v18 + v22) + 1) >= 0x400)
      {
        v23 = result;
        operator delete(*(void **)(v19 - 8));
        v23[7] -= 8;
      }
      v24 = v36;
    }
    else
    {
      v25 = (void *)result[3];
      *(_QWORD *)&v39 = 0;
      v24 = v36;
      v26 = result;
      sub_20F1C5A3C(v36, v25, 9uLL, (uint64_t *)&v39);
      v16 = v26[3] - 72;
    }
    v27 = (uint64_t)(v16 - *v24) >> 3;
    LODWORD(v39) = v13;
    *((_QWORD *)&v39 + 1) = v27;
    sub_20F2B4654((char **)v9, v15, &v39);
    a2 = v34;
    a3 = v35;
    result = v32;
    v4 = v33;
    v17 = v37 + 8 * v38;
    if (v17 == v16)
      goto LABEL_31;
LABEL_30:
    v28 = *(_OWORD *)v17;
    v29 = *(_OWORD *)(v17 + 16);
    v30 = *(_OWORD *)(v17 + 32);
    v31 = *(_OWORD *)(v17 + 48);
    *(_QWORD *)(v16 + 64) = *(_QWORD *)(v17 + 64);
    *(_OWORD *)(v16 + 32) = v30;
    *(_OWORD *)(v16 + 48) = v31;
    *(_OWORD *)v16 = v28;
    *(_OWORD *)(v16 + 16) = v29;
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_20F39ED0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4, unsigned int **a5, int a6)
{
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  size_t v15;
  int v16;
  void *v17;
  size_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int8x16_t v27;
  __int128 v28;
  int8x16_t v29;
  unint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t *v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int8x16_t v47;
  __int128 v48;
  int8x16_t v49;
  unint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x16_t *v58;
  uint64_t *v60;

  v12 = 3 * ((unint64_t)((char *)a4[1] - (char *)*a4) >> 3);
  v13 = 3 * ((unint64_t)((char *)a5[1] - (char *)*a5) >> 3);
  *(_DWORD *)(a2 + 16) = v12;
  *(_DWORD *)(a2 + 20) = v13;
  v14 = v13 * (unint64_t)v12;
  if (*(_QWORD *)(a2 + 8) < v14)
  {
    if (*(_QWORD *)a2)
      MEMORY[0x212BC6368](*(_QWORD *)a2, 0x1000C8000313F17);
    v15 = (8 * v14 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v15 >> 3;
    *(_QWORD *)a2 = operator new(v15, (std::align_val_t)0x20uLL);
  }
  if (a6)
  {
    v16 = *(_DWORD *)(a2 + 20);
    if (v16 * *(_DWORD *)(a2 + 16))
      bzero(*(void **)a2, 8 * (v16 * *(_DWORD *)(a2 + 16)));
  }
  if (v13 == *(_DWORD *)(a3 + 16) && v12 == *(_DWORD *)(a3 + 20))
  {
    v17 = *(void **)a3;
  }
  else
  {
    *(_DWORD *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 20) = v12;
    v17 = *(void **)a3;
    if (*(_QWORD *)(a3 + 8) < v14)
    {
      if (v17)
        MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
      v18 = (8 * v14 + 31) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v18 >> 3;
      v17 = operator new(v18, (std::align_val_t)0x20uLL);
      *(_QWORD *)a3 = v17;
      v13 = *(_DWORD *)(a3 + 16);
      v12 = *(_DWORD *)(a3 + 20);
    }
  }
  if (v13 * v12)
    bzero(v17, 8 * v13 * v12);
  v19 = *a4;
  v20 = a4[1];
  if (*a5 != a5[1])
  {
    if (v19 == v20)
      goto LABEL_56;
    do
    {
      v21 = *a5;
      v22 = a5[1];
      if (*a5 != v22)
      {
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24 * *v19);
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24 * *v19 + 8);
        do
        {
          if (v24 == v23)
            break;
          v25 = *v21;
          while (*(_DWORD *)v24 < v25)
          {
            v24 += 16;
            if (v24 == v23)
              goto LABEL_20;
          }
          if (*(_DWORD *)v24 == v25)
          {
            v26 = *(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(v24 + 8);
            if (v26 == *(_QWORD *)a3)
            {
              v33 = *(_QWORD *)(v26 + 64);
              v32 = *(int8x16_t *)(v26 + 32);
              v29 = *(int8x16_t *)(v26 + 48);
              v27 = *(int8x16_t *)v26;
              v31 = *(int8x16_t *)(v26 + 16);
              v34 = vextq_s8(v29, v29, 8uLL).u64[0];
              v30 = vextq_s8(v32, v32, 8uLL).u64[0];
              *(_QWORD *)&v28 = vextq_s8(v31, v31, 8uLL).u64[0];
            }
            else
            {
              v27 = *(int8x16_t *)v26;
              v28 = *(_OWORD *)(v26 + 24);
              v29 = *(int8x16_t *)(v26 + 48);
              v30 = *(_QWORD *)(v26 + 40);
              v31.i64[0] = *(_QWORD *)(v26 + 16);
              v32.i64[0] = *(_QWORD *)(v26 + 32);
              v33 = *(_QWORD *)(v26 + 64);
              v34 = vextq_s8(v29, v29, 8uLL).u64[0];
            }
            v35 = *(unsigned int *)(a3 + 16);
            v36 = *(_QWORD *)a3 + 8 * (v21[1] + (_DWORD)v35 * v19[1]);
            v27.i64[1] = vextq_s8(v27, v27, 8uLL).u64[0];
            *((_QWORD *)&v28 + 1) = v32.i64[0];
            v29.i64[1] = v34;
            *(_QWORD *)(v36 + 16) = v31.i64[0];
            *(int8x16_t *)v36 = v27;
            v37 = v36 + 8 * v35;
            *(_QWORD *)(v37 + 16) = v30;
            *(_OWORD *)v37 = v28;
            v38 = (int8x16_t *)(v36 + 16 * v35);
            v38[1].i64[0] = v33;
            *v38 = v29;
          }
          if (v24 == v23)
            break;
          v21 += 2;
        }
        while (v21 != v22);
      }
LABEL_20:
      v19 += 2;
    }
    while (v19 != v20);
    v19 = *a4;
    v20 = a4[1];
  }
  if (v19 != v20)
  {
    v39 = *a5;
    v40 = a5[1];
    if (*a5 != v40)
    {
      do
      {
        v41 = *a4;
        v42 = a4[1];
        if (*a4 != v42)
        {
          v44 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24 * *v39);
          v43 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 24 * *v39 + 8);
          do
          {
            if (v44 == v43)
              break;
            v45 = *v41;
            while (*(_DWORD *)v44 < v45)
            {
              v44 += 16;
              if (v44 == v43)
                goto LABEL_40;
            }
            if (*(_DWORD *)v44 == v45)
            {
              v46 = *(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(v44 + 8);
              if (v46 == *(_QWORD *)a2)
              {
                v53 = *(_QWORD *)(v46 + 64);
                v52 = *(int8x16_t *)(v46 + 32);
                v49 = *(int8x16_t *)(v46 + 48);
                v47 = *(int8x16_t *)v46;
                v51 = *(int8x16_t *)(v46 + 16);
                v54 = vextq_s8(v49, v49, 8uLL).u64[0];
                v50 = vextq_s8(v52, v52, 8uLL).u64[0];
                *(_QWORD *)&v48 = vextq_s8(v51, v51, 8uLL).u64[0];
              }
              else
              {
                v47 = *(int8x16_t *)v46;
                v48 = *(_OWORD *)(v46 + 24);
                v49 = *(int8x16_t *)(v46 + 48);
                v50 = *(_QWORD *)(v46 + 40);
                v51.i64[0] = *(_QWORD *)(v46 + 16);
                v52.i64[0] = *(_QWORD *)(v46 + 32);
                v53 = *(_QWORD *)(v46 + 64);
                v54 = vextq_s8(v49, v49, 8uLL).u64[0];
              }
              v55 = *(unsigned int *)(a2 + 16);
              v56 = *(_QWORD *)a2 + 8 * (v41[1] + (_DWORD)v55 * v39[1]);
              v47.i64[1] = vextq_s8(v47, v47, 8uLL).u64[0];
              *((_QWORD *)&v48 + 1) = v52.i64[0];
              v49.i64[1] = v54;
              *(_QWORD *)(v56 + 16) = v51.i64[0];
              *(int8x16_t *)v56 = v47;
              v57 = v56 + 8 * v55;
              *(_QWORD *)(v57 + 16) = v50;
              *(_OWORD *)v57 = v48;
              v58 = (int8x16_t *)(v56 + 16 * v55);
              v58[1].i64[0] = v53;
              *v58 = v49;
            }
            if (v44 == v43)
              break;
            v41 += 2;
          }
          while (v41 != v42);
        }
LABEL_40:
        v39 += 2;
      }
      while (v39 != v40);
    }
  }
LABEL_56:
  v60 = (uint64_t *)a3;
  return sub_20F2B809C(a2, &v60);
}

void sub_20F39F0C8(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int v3;
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char **v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char *v59;
  char *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  size_t v70;
  __int128 *v71;
  _BYTE *v72;
  BOOL v73;
  uint64_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  __int128 *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  const double *v92;
  uint64_t v93;
  unint64_t v94;
  float64x2_t v95;
  float64x2_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  _QWORD *v103;
  int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  __int128 v109;

  if (*(_DWORD *)(a1 + 12))
  {
    v3 = a3;
    v4 = a2;
    v6 = 0;
    v7 = a1 + 40;
    v8 = (_QWORD *)(a1 + 16);
    v98 = HIDWORD(a3);
    v101 = 1;
    v105 = a3;
    v103 = (_QWORD *)(a1 + 16);
    v99 = a1 + 40;
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 88);
      v10 = (uint64_t *)(v9 + 24 * v6);
      v11 = *v10;
      v12 = v10[1];
      if (*v10 != v12)
      {
        v13 = *(_QWORD *)(a1 + 48);
        v14 = *(_QWORD *)(a1 + 56);
        v15 = *(_QWORD *)(a1 + 80);
        do
        {
          v16 = ((v14 - v13) << 6) - 1;
          if (v14 == v13)
            v16 = 0;
          v17 = *(_QWORD *)(a1 + 72) + v15;
          if (v16 == v17)
          {
            sub_20EDB36DC(v7);
            v13 = *(_QWORD *)(a1 + 48);
            v14 = *(_QWORD *)(a1 + 56);
            v17 = *(_QWORD *)(a1 + 80) + *(_QWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(v13 + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v17 & 0x1FF)) = *(_QWORD *)(v11 + 8);
          v15 = *(_QWORD *)(a1 + 80) + 1;
          *(_QWORD *)(a1 + 80) = v15;
          v11 += 16;
        }
        while (v11 != v12);
        v11 = *v10;
        v9 = *(_QWORD *)(a1 + 88);
      }
      v10[1] = v11;
      v18 = v6 + 1;
      v19 = *(_DWORD *)(a1 + 8);
      v100 = v6 + 1;
      if (v19 < (int)v6 + 1)
        v18 = *(_DWORD *)(a1 + 8);
      if (v18)
        break;
LABEL_3:
      ++v101;
      v7 = v99;
      v6 = v100;
      if (v100 >= *(unsigned int *)(a1 + 12))
        return;
    }
    v20 = 0;
    v21 = (char **)(v9 + 24 * v6);
    v22 = 3 * v6 + v98;
    v23 = v101;
    if (v19 < v101)
      v23 = *(_DWORD *)(a1 + 8);
    v106 = 3 * v6 + v98;
    v107 = v23;
    while (1)
    {
      v26 = *v4;
      v36 = *((unsigned int *)v4 + 4);
      v37 = *v21;
      v38 = v21[1];
      if (*v21 != v38)
      {
        while (*(_DWORD *)v37 < v20)
        {
          v37 += 16;
          if (v37 == v38)
            goto LABEL_29;
        }
      }
      if (v37 != v38)
      {
        if (*(_DWORD *)v37 == v20)
        {
          v24 = *v8 + 8 * *((_QWORD *)v37 + 1);
          goto LABEL_20;
        }
        v38 = v37;
      }
LABEL_29:
      v39 = *(_QWORD *)(a1 + 80);
      v108 = *v4;
      if (v39)
      {
        v41 = *(_QWORD *)(a1 + 48);
        v40 = *(_QWORD *)(a1 + 56);
        v42 = ((v40 - v41) << 6) - 1;
        v43 = *(_QWORD *)(a1 + 72);
        if (v40 == v41)
          v42 = 0;
        v24 = *(_QWORD *)(a1 + 16)
            + 8
            * *(_QWORD *)(*(_QWORD *)(v41 + (((unint64_t)(v43 + v39 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v43 + v39 - 1) & 0x1FF));
        *(_QWORD *)(a1 + 80) = v39 - 1;
        if ((unint64_t)(v42 - (v39 + v43) + 1) >= 0x400)
        {
          operator delete(*(void **)(v40 - 8));
          *(_QWORD *)(a1 + 56) -= 8;
        }
        goto LABEL_19;
      }
      *(_QWORD *)&v109 = 0;
      v45 = *(_QWORD *)(a1 + 16);
      v44 = *(_QWORD *)(a1 + 24);
      v46 = v44 - v45;
      v47 = (uint64_t)(v44 - v45) >> 3;
      v48 = (__int128 *)(v45 + ((v44 - v45) & 0xFFFFFFFFFFFFFFF8));
      v49 = *(_QWORD *)(a1 + 32);
      if (v49 - v44 < 0x48)
      {
        v50 = v47 + 9;
        if ((unint64_t)(v47 + 9) >> 61)
          sub_20E867F44();
        v51 = v49 - v45;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        v102 = v50;
        if (v50)
        {
          if (v50 >> 61)
            sub_20E877A38();
          v52 = operator new(8 * v50);
          v47 = (uint64_t)(v44 - v45) >> 3;
        }
        else
        {
          v52 = 0;
        }
        v59 = &v52[8 * v47];
        *((_QWORD *)v59 + 8) = 0;
        *((_OWORD *)v59 + 2) = 0u;
        *((_OWORD *)v59 + 3) = 0u;
        *(_OWORD *)v59 = 0u;
        *((_OWORD *)v59 + 1) = 0u;
        if (v45 == v44)
        {
          v61 = &v52[8 * v47];
        }
        else
        {
          if (v46 - 8 < 0x68)
          {
            v60 = (char *)(v45 + ((v44 - v45) & 0xFFFFFFFFFFFFFFF8));
            v61 = &v52[8 * v47];
            goto LABEL_56;
          }
          v60 = (char *)(v45 + ((v44 - v45) & 0xFFFFFFFFFFFFFFF8));
          v61 = &v52[8 * v47];
          if (v45 + (v46 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)&v52[v46 & 0xFFFFFFFFFFFFFFF8] < 0x20)
            goto LABEL_98;
          v62 = ((v46 - 8) >> 3) + 1;
          v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
          v60 = (char *)v48 - v63;
          v61 = &v59[-v63];
          v64 = &v52[8 * v47 - 16];
          v65 = (__int128 *)(v45 + 8 * v47 - 16);
          v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *v65;
            *(v64 - 1) = *(v65 - 1);
            *v64 = v67;
            v64 -= 2;
            v65 -= 2;
            v66 -= 4;
          }
          while (v66);
          if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_98:
            do
            {
LABEL_56:
              v68 = *((_QWORD *)v60 - 1);
              v60 -= 8;
              *((_QWORD *)v61 - 1) = v68;
              v61 -= 8;
            }
            while (v60 != (char *)v45);
          }
        }
        v69 = v59 + 72;
        v70 = v44 - (_QWORD)v48;
        if (v70)
        {
          v71 = v48;
          v72 = v52;
          memmove(v59 + 72, v71, v70);
          v52 = v72;
        }
        *(_QWORD *)(a1 + 16) = v61;
        *(_QWORD *)(a1 + 24) = &v69[v70];
        *(_QWORD *)(a1 + 32) = &v52[8 * v102];
        if (v45)
          operator delete((void *)v45);
        goto LABEL_18;
      }
      v53 = v44 - (_QWORD)v48;
      if (v44 - (unint64_t)v48 > 0x47)
      {
        v55 = *(_QWORD *)(a1 + 24);
        v54 = 9;
        goto LABEL_68;
      }
      v54 = v53 >> 3;
      v55 = v44 + 8 * (9 - (v53 >> 3));
      v56 = v53 & 0xFFFFFFFFFFFFFFF8;
      v57 = 64 - v56;
      if (64 - v56 < 0x68)
        break;
      v73 = (unint64_t)&v109 < v44 - v56 + 72;
      if (v44 < (unint64_t)&v109 + 8)
      {
        v58 = *(_QWORD **)(a1 + 24);
        if (v73)
          goto LABEL_66;
      }
      v74 = (v57 >> 3) + 1;
      v58 = (_QWORD *)(v44 + 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL));
      v75 = vdupq_lane_s64(v109, 0);
      v76 = (int64x2_t *)(v44 + 16);
      v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76[-1] = v75;
        *v76 = v75;
        v76 += 2;
        v77 -= 4;
      }
      while (v77);
      if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_66;
LABEL_67:
      *(_QWORD *)(a1 + 24) = v55;
      if ((__int128 *)v44 == v48)
        goto LABEL_18;
LABEL_68:
      v78 = v55 - ((_QWORD)v48 + 72);
      v79 = v78 >> 3;
      v80 = (uint64_t *)(v55 - 72);
      v81 = (_QWORD *)v55;
      if (v55 - 72 < v44)
      {
        v82 = (v46 & 0xFFFFFFFFFFFFFFF8) + v78;
        v83 = v45 + v82 + 8;
        if (v44 > v83)
          v83 = v44;
        v84 = v83 + ~v45 - v82;
        if (v84 >= 0x58)
        {
          v85 = (v84 >> 3) + 1;
          v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
          v80 = (uint64_t *)((char *)v80 + v86);
          v81 = (_QWORD *)(v55 + v86);
          v87 = (_OWORD *)(v55 + 16);
          v88 = (__int128 *)(v45 + 8 * v79 + 8 * v47 + 16);
          v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v90 = *v88;
            *(v87 - 1) = *(v88 - 1);
            *v87 = v90;
            v87 += 2;
            v88 += 2;
            v89 -= 4;
          }
          while (v89);
          if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_77;
        }
        else
        {
          v81 = (_QWORD *)v55;
        }
        do
        {
          v91 = *v80++;
          *v81++ = v91;
        }
        while ((unint64_t)v80 < v44);
      }
LABEL_77:
      *(_QWORD *)(a1 + 24) = v81;
      if ((__int128 *)v55 != (__int128 *)((char *)v48 + 72))
      {
        memmove((void *)(v55 - 8 * v79), (const void *)(v45 + ((v44 - v45) & 0xFFFFFFFFFFFFFFF8)), v78);
        v47 = (uint64_t)(v44 - v45) >> 3;
      }
      v92 = (const double *)&v109;
      if (v48 <= &v109)
      {
        v93 = 72;
        if (*(_QWORD *)(a1 + 24) <= (unint64_t)&v109)
          v93 = 0;
        v92 = (const double *)((char *)&v109 + v93);
      }
      if (v54 >= 0xA)
      {
        if (v48 >= (__int128 *)(v92 + 1) || (unint64_t)v92 >= v45 + (v46 & 0xFFFFFFFFFFFFFFF8) + 8 * v54)
        {
          v48 = (__int128 *)((char *)v48 + 8 * (v54 & 0xFFFFFFFFFFFFFFFCLL));
          v94 = v54 & 3;
          v95 = vld1q_dup_f64(v92);
          v96 = (float64x2_t *)(v45 + 8 * v47 + 16);
          v97 = v54 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v96[-1] = v95;
            *v96 = v95;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v54 == (v54 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_18;
        }
        else
        {
          v94 = v54;
        }
      }
      else
      {
        v94 = v54;
      }
      do
      {
        *(double *)v48 = *v92;
        v48 = (__int128 *)((char *)v48 + 8);
        --v94;
      }
      while (v94);
LABEL_18:
      v24 = *(_QWORD *)(a1 + 24) - 72;
      v4 = a2;
      v3 = v105;
      v8 = v103;
      v22 = v106;
LABEL_19:
      v25 = (v24 - *v8) >> 3;
      LODWORD(v109) = v20;
      *((_QWORD *)&v109 + 1) = v25;
      sub_20F2B4654(v21, v38, &v109);
      v26 = v108;
LABEL_20:
      v27 = (__int128 *)(v26 + 8 * (3 * v20 + v3 + (_DWORD)v36 * v22));
      v28 = *((_QWORD *)v27 + 2);
      v29 = *v27;
      v30 = (__int128 *)((char *)v27 + 8 * v36);
      v31 = *((_QWORD *)v30 + 2);
      v32 = *v30;
      v33 = &v27[v36];
      v34 = *((_QWORD *)v33 + 2);
      v35 = *v33;
      *(_OWORD *)v24 = v29;
      *(_QWORD *)(v24 + 16) = v28;
      *(_OWORD *)(v24 + 24) = v32;
      *(_QWORD *)(v24 + 40) = v31;
      *(_OWORD *)(v24 + 48) = v35;
      *(_QWORD *)(v24 + 64) = v34;
      if (++v20 == v107)
        goto LABEL_3;
    }
    v58 = *(_QWORD **)(a1 + 24);
    do
LABEL_66:
      *v58++ = v109;
    while (v58 != (_QWORD *)v55);
    goto LABEL_67;
  }
}

void sub_20F39F794(uint64_t a1, _QWORD *a2)
{
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  char *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  char v28;
  unsigned int v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;

  __p = 0;
  v31 = 0;
  v32 = 0;
  sub_20F39F9DC((uint64_t)&v28, a2, a1, (uint64_t)&__p, &v29);
  v5 = v29;
  v6 = *(_QWORD *)(a1 + 8);
  if (v29 <= v6)
  {
    if (((v31 - (_BYTE *)__p) & 0x7FFFFFFF8) != 0)
    {
      v19 = *(_QWORD *)a1;
      v20 = 3 * *(_DWORD *)(a1 + 24);
      v21 = ((unint64_t)(v31 - (_BYTE *)__p) >> 3) - 1;
      do
      {
        v22 = v21;
        v23 = *((unsigned int *)__p + 2 * v21);
        v24 = (const void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 28) + 8 * v23);
        v25 = (uint64_t)v24 + 8 * v20 + -8 * v23;
        v4 = v25 - (_QWORD)v24;
        if ((const void *)v25 != v24)
          memmove((void *)(v19 + 8 * *((unsigned int *)__p + 2 * v21 + 1)), v24, v4);
        --v21;
        v20 = v23;
      }
      while (v22);
      v6 = *(_QWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 16) = v5;
    if (v6 < v5)
    {
      if (*(_QWORD *)a1)
        MEMORY[0x212BC6368](*(_QWORD *)a1, 0x1000C8000313F17, v4);
      v26 = (8 * v5 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = v26 >> 3;
      *(_QWORD *)a1 = operator new(v26, (std::align_val_t)0x20uLL);
    }
  }
  else
  {
    v7 = (8 * v29 + 31) & 0xFFFFFFFE0;
    v9 = (char *)operator new(v7, (std::align_val_t)0x20uLL);
    v27 = v7 >> 3;
    v10 = (unsigned int *)__p;
    v11 = *(_QWORD *)a1;
    if (((v31 - (_BYTE *)__p) & 0x7FFFFFFF8) != 0)
    {
      v12 = 3 * *(_DWORD *)(a1 + 24);
      v13 = v11 + 8 * *(unsigned int *)(a1 + 28);
      v14 = ((unint64_t)(v31 - (_BYTE *)__p) >> 3) - 1;
      do
      {
        v15 = v14;
        v16 = v10[2 * v14];
        v17 = (const void *)(v13 + 8 * v16);
        v18 = (uint64_t)v17 + 8 * v12 + -8 * v16;
        v8 = v18 - (_QWORD)v17;
        if ((const void *)v18 != v17)
          memmove(&v9[8 * v10[2 * v14 + 1]], v17, v8);
        --v14;
        v12 = v16;
      }
      while (v15);
    }
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v27;
    *(_DWORD *)(a1 + 16) = v5;
    if (v11)
      MEMORY[0x212BC6368](v11, 0x1000C8000313F17, v8);
  }
  *(_DWORD *)(a1 + 24) += (a2[1] - *a2) >> 2;
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
}

void sub_20F39F9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F39F9DC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _DWORD *v59;

  v9 = a2[1] - *a2;
  v10 = v9 >> 2;
  v11 = *(char **)a4;
  if (v9 >> 2 <= (unint64_t)((uint64_t)(*(_QWORD *)(a4 + 16) - *(_QWORD *)a4) >> 3))
    goto LABEL_13;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFDLL)
LABEL_52:
    sub_20E92CED8();
  v12 = *(_BYTE **)(a4 + 8);
  v13 = (char *)operator new(2 * v9);
  v14 = v12 - v11;
  v15 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
  v16 = v15;
  if (v12 != v11)
  {
    if ((unint64_t)(v14 - 8) < 0x58)
    {
      v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        v25 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v16 - 1) = v25;
        v16 -= 8;
      }
      while (v12 != v11);
      goto LABEL_11;
    }
    v16 = &v13[(v12 - v11) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(&v12[-(v14 & 0xFFFFFFFFFFFFFFF8)] - v13) < 0x20)
      goto LABEL_10;
    v17 = v14 >> 3;
    v18 = ((unint64_t)(v14 - 8) >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = &v12[-v19];
    v16 = &v15[-v19];
    v21 = &v13[8 * v17 - 16];
    v22 = (__int128 *)(v12 - 16);
    v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    v12 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_10;
  }
LABEL_11:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v15;
  *(_QWORD *)(a4 + 16) = &v13[8 * v10];
  if (v11)
    operator delete(v11);
LABEL_13:
  v57 = a3;
  v58 = a2;
  v59 = a5;
  v26 = (_DWORD *)*a2;
  v27 = (_DWORD *)a2[1];
  v28 = *(char **)(a4 + 8);
  if (v26 != v27)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v30 = (3 * *v26);
          v31 = *(char **)a4;
          if (*(char **)a4 == v28 || *((_DWORD *)v28 - 1) != (_DWORD)v30)
            break;
          *((_DWORD *)v28 - 1) = v30 + 3;
          if (++v26 == v27)
            goto LABEL_48;
        }
        v32 = (v30 + 3);
        v33 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v28 >= v33)
          break;
        *(_QWORD *)v28 = v30 | (v32 << 32);
        v29 = (uint64_t)(v28 + 8);
LABEL_16:
        *(_QWORD *)(a4 + 8) = v29;
        v28 = (char *)v29;
        if (++v26 == v27)
          goto LABEL_48;
      }
      v34 = (char *)(v28 - v31);
      v35 = (v28 - v31) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        goto LABEL_52;
      v37 = v33 - (_QWORD)v31;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v36;
      if (!v38)
        break;
      if (v38 >> 61)
        sub_20E877A38();
      v39 = (char *)operator new(8 * v38);
      v40 = &v39[8 * v35];
      *(_QWORD *)v40 = v30 | (v32 << 32);
      v29 = (uint64_t)(v40 + 8);
      if (v31 != v28)
        goto LABEL_33;
LABEL_46:
      *(_QWORD *)a4 = v40;
      *(_QWORD *)(a4 + 8) = v29;
      *(_QWORD *)(a4 + 16) = &v39[8 * v38];
      if (!v28)
        goto LABEL_16;
      operator delete(v28);
      *(_QWORD *)(a4 + 8) = v29;
      v28 = (char *)v29;
      if (++v26 == v27)
        goto LABEL_48;
    }
    v39 = 0;
    v40 = (char *)(8 * v35);
    *(_QWORD *)(8 * v35) = v30 | (v32 << 32);
    v29 = 8 * v35 + 8;
    if (v31 == v28)
      goto LABEL_46;
LABEL_33:
    if ((unint64_t)(v34 - 8) >= 0x168)
    {
      v42 = (v28 - 8 - v31) & 0xFFFFFFFFFFFFFFF8;
      if (&v34[(_QWORD)v39 - 8 - v42] > &v34[(_QWORD)v39 - 8])
      {
        v41 = v28;
      }
      else if (&v28[-v42 - 8] > v28 - 8)
      {
        v41 = v28;
      }
      else if ((unint64_t)(v31 - v39) >= 0x20)
      {
        v43 = ((unint64_t)(v34 - 8) >> 3) + 1;
        v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        v41 = &v28[-v44];
        v40 -= v44;
        v45 = &v39[8 * v35 - 16];
        v46 = v28 - 16;
        v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v48 = *(_OWORD *)v46;
          *((_OWORD *)v45 - 1) = *((_OWORD *)v46 - 1);
          *(_OWORD *)v45 = v48;
          v45 -= 32;
          v46 -= 32;
          v47 -= 4;
        }
        while (v47);
        if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_45;
      }
      else
      {
        v41 = v28;
      }
    }
    else
    {
      v41 = v28;
    }
    do
    {
      v49 = *((_QWORD *)v41 - 1);
      v41 -= 8;
      *((_QWORD *)v40 - 1) = v49;
      v40 -= 8;
    }
    while (v41 != v31);
LABEL_45:
    v28 = *(char **)a4;
    goto LABEL_46;
  }
LABEL_48:
  v50 = *(char **)a4;
  v51 = (unint64_t)&v28[-*(_QWORD *)a4];
  if ((v51 & 0x7FFFFFFF0) != 0)
  {
    v52 = (v51 >> 3);
    v55 = *(_DWORD *)v50;
    v53 = v50 + 8;
    v54 = v55;
    v56 = v52 - 1;
    do
    {
      v54 += *v53 - *(v53 - 1);
      *v53 = v54;
      v53 += 2;
      --v56;
    }
    while (v56);
  }
  *v59 = 3 * (*(_DWORD *)(v57 + 24) + ((v58[1] - *v58) >> 2));
}

void sub_20F39FD78(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v5 = v4 - 1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = v6 - 1;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1)) + 152 * (v6 - 1) != a2)
  {
    if (v4 == 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v12 = 8;
      do
      {
        v8 += v12;
        v12 *= 2;
        --v5;
      }
      while (v5);
    }
    v9 = v8 + v6;
LABEL_12:
    v15 = *(char **)(a1 + 48);
    v14 = *(char **)(a1 + 56);
    v13 = (char **)(a1 + 48);
    v16 = (v14 - v15) >> 3;
    if (v9 - v16 == 1)
    {
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      return;
    }
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v14 < v17)
    {
      *(_QWORD *)v14 = a2;
      v18 = (uint64_t)(v14 + 8);
LABEL_45:
      *(_QWORD *)(a1 + 56) = v18;
      return;
    }
    v19 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      sub_20E867F44();
    v20 = v17 - (_QWORD)v15;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_20E877A38();
      v22 = (char *)operator new(8 * v21);
      v23 = &v22[8 * v16];
      v24 = &v22[8 * v21];
      *(_QWORD *)v23 = a2;
      v18 = (uint64_t)(v23 + 8);
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
        goto LABEL_43;
    }
    else
    {
      v22 = 0;
      v23 = (char *)(8 * v16);
      v24 = 0;
      *(_QWORD *)(8 * v16) = a2;
      v18 = 8 * v16 + 8;
      v25 = (char *)(v14 - v15);
      if (v14 == v15)
      {
LABEL_43:
        *(_QWORD *)(a1 + 48) = v23;
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v24;
        if (v14)
          operator delete(v14);
        goto LABEL_45;
      }
    }
    v33 = (unint64_t)(v25 - 8);
    if (v33 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v15 - v22) < 0x20)
      goto LABEL_53;
    v34 = (v33 >> 3) + 1;
    v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
    v36 = &v14[-v35];
    v23 -= v35;
    v37 = &v22[8 * v16 - 16];
    v38 = v14 - 16;
    v39 = v34 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v40 = *(_OWORD *)v38;
      *((_OWORD *)v37 - 1) = *((_OWORD *)v38 - 1);
      *(_OWORD *)v37 = v40;
      v37 -= 32;
      v38 -= 32;
      v39 -= 4;
    }
    while (v39);
    v14 = v36;
    if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v41 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v23 - 1) = v41;
        v23 -= 8;
      }
      while (v14 != v15);
    }
    v14 = *v13;
    goto LABEL_43;
  }
  *(_QWORD *)(a1 + 40) = v7;
  if (v6 != 1)
  {
    v10 = 0;
    v11 = v4 - 1;
    if (v4 == 1)
      goto LABEL_30;
    goto LABEL_28;
  }
  *(_DWORD *)(a1 + 32) = v5;
  if (v4 == 1)
  {
    v28 = 0;
    v29 = *(_QWORD *)(a1 + 48);
    v30 = *(char **)(a1 + 56);
    v31 = (unint64_t)&v30[-v29];
    if ((uint64_t)&v30[-v29] >> 3)
      return;
    goto LABEL_31;
  }
  v7 = 8 << (v4 - 2);
  *(_QWORD *)(a1 + 40) = v7;
  v26 = v4 - 1;
  v10 = 0;
  v11 = v26 - 1;
  if (v26 != 1)
  {
LABEL_28:
    v27 = 8;
    do
    {
      v10 += v27;
      v27 *= 2;
      --v11;
    }
    while (v11);
  }
LABEL_30:
  v28 = v10 + v7;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(char **)(a1 + 56);
  v31 = (unint64_t)&v30[-v29];
  if (v28 != (uint64_t)&v30[-v29] >> 3)
    return;
LABEL_31:
  v42 = a1;
  v48 = &v42;
  v47 = a1;
  if ((char *)v29 != v30 && v31 >= 0xF0)
  {
    sub_20F39A724(v29, v30, (uint64_t)v44, 126 - 2 * __clz(v28), 1);
    v32 = *(_QWORD *)(a1 + 48);
    v45 = *(_QWORD *)(a1 + 56);
    v46 = v32;
    v44[0] = v32;
    v44[1] = v45;
    v44[2] = &v48;
    v43[0] = a1;
    v43[1] = (uint64_t)&v46;
    v43[2] = (uint64_t)&v45;
    sub_20F39A5B4(&v47, (uint64_t)v44, v43);
    v29 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = v29;
}

void sub_20F3A0078(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int32x4_t *v18;
  int32x4_t *v19;
  unint64_t v20;
  uint64_t v21;
  int32x4_t *v22;
  uint64_t v23;
  int32x4_t v24;
  int32x4_t *v25;
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  _QWORD v34[2];

  *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = a1 + 24;
  v34[0] = a2;
  v34[1] = a1;
  sub_20F3A0288((uint64_t)v34);
  if (a3 == 1)
  {
    v11 = *(unsigned int **)(a1 + 8);
    v12 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(_QWORD *)a1) >> 2));
    if (v11 == *(unsigned int **)a1)
      v13 = 0;
    else
      v13 = v12;
    sub_20F3A15B8(*(unsigned int **)a1, v11, (uint64_t)v34, v13, 1);
    v9 = *(unsigned int **)a1;
    v10 = *(unsigned int **)(a1 + 8);
    if (*(unsigned int **)a1 == v10)
      goto LABEL_15;
LABEL_13:
    v14 = 0;
    do
    {
      v15 = v9[2];
      v9[2] = v14;
      v16 = *v9;
      v9 += 3;
      v14 += v15;
      ++*(_QWORD *)(v5 + 8 * v16);
    }
    while (v9 != v10);
    goto LABEL_15;
  }
  if (!a3)
  {
    v6 = *(unsigned int **)(a1 + 8);
    v7 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a1) >> 2));
    if (v6 == *(unsigned int **)a1)
      v8 = 0;
    else
      v8 = v7;
    sub_20F3A0400(*(unsigned int **)a1, v6, (uint64_t)v34, v8, 1);
  }
  v9 = *(unsigned int **)a1;
  v10 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 != v10)
    goto LABEL_13;
LABEL_15:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
  {
    sub_20E93DC84(a1 + 32, v17);
    v19 = *(int32x4_t **)(a1 + 32);
    v18 = *(int32x4_t **)(a1 + 40);
    if (v19 != v18)
    {
      v20 = (char *)v18 - (char *)v19 - 4;
      if (v20 < 0x1C)
      {
        LODWORD(v21) = 0;
        v22 = *(int32x4_t **)(a1 + 32);
        do
        {
LABEL_22:
          v22->i32[0] = v21;
          v22 = (int32x4_t *)((char *)v22 + 4);
          LODWORD(v21) = v21 + 1;
        }
        while (v22 != v18);
        goto LABEL_23;
      }
      v23 = (v20 >> 2) + 1;
      v21 = v23 & 0x7FFFFFFFFFFFFFF8;
      v22 = (int32x4_t *)((char *)v19 + 4 * (v23 & 0x7FFFFFFFFFFFFFF8));
      v24 = (int32x4_t)xmmword_210365350;
      v25 = v19 + 1;
      v26.i64[0] = 0x400000004;
      v26.i64[1] = 0x400000004;
      v27.i64[0] = 0x800000008;
      v27.i64[1] = 0x800000008;
      v28 = v23 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25[-1] = v24;
        *v25 = vaddq_s32(v24, v26);
        v24 = vaddq_s32(v24, v27);
        v25 += 2;
        v28 -= 8;
      }
      while (v28);
      if (v23 != v21)
        goto LABEL_22;
    }
  }
LABEL_23:
  v29 = *(_QWORD *)(a1 + 24);
  v30 = *(_DWORD **)(a1 + 56);
  v31 = (uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v30) >> 2;
  if (v29 <= v31)
  {
    if (v29 < v31)
      *(_QWORD *)(a1 + 64) = &v30[v29];
  }
  else
  {
    sub_20E93DC84(a1 + 56, v29 - v31);
    v30 = *(_DWORD **)(a1 + 56);
  }
  v32 = *(unsigned int **)a1;
  v33 = *(unsigned int **)(a1 + 8);
  while (v32 != v33)
  {
    if (!*v32)
      *v30++ = v32[2];
    v32 += 3;
  }
}

void sub_20F3A0288(uint64_t a1)
{
  int *v1;
  int *i;
  char **v4;
  int v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;

  v1 = **(int ***)a1;
  for (i = *(int **)(*(_QWORD *)a1 + 8); v1 != i; ++v1)
  {
    while (1)
    {
      v4 = *(char ***)(a1 + 8);
      v5 = *v1;
      v7 = v4[1];
      v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
        break;
      *(_DWORD *)v7 = 0;
      *((_DWORD *)v7 + 1) = v5;
      *((_DWORD *)v7 + 2) = 3;
      v4[1] = v7 + 12;
      if (++v1 == i)
        return;
    }
    v8 = *v4;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *v4) >> 2);
    v10 = v9 + 1;
    if (v9 + 1 > 0x1555555555555555)
      sub_20E867F44();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (_QWORD)v8) >> 2);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x1555555555555555)
        sub_20E877A38();
      v13 = (char *)operator new(12 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[12 * v9];
    *(_DWORD *)v14 = 0;
    *((_DWORD *)v14 + 1) = v5;
    *((_DWORD *)v14 + 2) = 3;
    v15 = v14;
    if (v7 != v8)
    {
      do
      {
        v16 = *(_QWORD *)(v7 - 12);
        v7 -= 12;
        v17 = *((_DWORD *)v7 + 2);
        *(_QWORD *)(v15 - 12) = v16;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v17;
      }
      while (v7 != v8);
      v7 = *v4;
    }
    v18 = &v13[12 * v12];
    v19 = v14 + 12;
    *v4 = v15;
    v4[1] = v14 + 12;
    v4[2] = v18;
    if (v7)
      operator delete(v7);
    v4[1] = v19;
  }
}

unsigned int *sub_20F3A0400(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  BOOL v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  BOOL v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  BOOL v50;
  BOOL v51;
  unsigned int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  _BOOL4 v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  BOOL v82;
  BOOL v83;
  unsigned int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  _BOOL4 v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  _BOOL4 v104;
  _BOOL4 v105;
  _BOOL4 v106;
  uint64_t v107;
  unsigned int v108;
  BOOL v109;
  unsigned int *v110;
  char v111;
  BOOL v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  _BOOL4 v116;
  _BOOL4 v117;
  uint64_t v118;
  _QWORD *v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  unsigned int *v123;
  unsigned int v124;
  _BOOL4 v125;
  _BOOL4 v126;
  uint64_t v127;
  unsigned int *v128;
  BOOL v129;
  char v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  _BOOL4 v137;
  unsigned int v138;
  uint64_t v139;
  char *v140;
  unsigned int v141;
  BOOL v142;
  BOOL v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  _BOOL4 v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  _BOOL4 v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int *v155;
  uint64_t v156;
  unsigned int v157;
  BOOL v158;
  BOOL v159;
  unsigned int v160;
  unsigned int v161;
  _BOOL4 v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int *v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;

  v7 = result;
LABEL_2:
  v8 = a2 - 3;
  v166 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v7 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v113 = *(a2 - 3);
        v114 = *(a2 - 2);
        v115 = a2 - 3;
        v116 = v114 < v10[1];
        v129 = v113 == *v10;
        v117 = v113 < *v10;
        if (v129)
          v117 = v116;
        if (v117)
        {
          v206 = v10[2];
          v185 = *(_QWORD *)v10;
          v118 = *(_QWORD *)v115;
          v10[2] = v115[2];
          *(_QWORD *)v10 = v118;
          *(_QWORD *)v115 = v185;
          v115[2] = v206;
        }
        return result;
      case 3uLL:
        v119 = v10 + 3;
        v120 = v10[3];
        v121 = v10[4];
        v122 = v120 < *v10;
        if (v120 == *v10)
          v122 = v121 < v10[1];
        v124 = *(a2 - 3);
        v123 = a2 - 3;
        v125 = *(a2 - 2) < v121;
        v129 = v124 == v120;
        v126 = v124 < v120;
        if (v129)
          v126 = v125;
        if (v122)
        {
          if (v126)
          {
            v207 = v10[2];
            v186 = *(_QWORD *)v10;
            v127 = *(_QWORD *)v123;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v127;
            *(_QWORD *)v123 = v186;
            *(a2 - 1) = v207;
          }
          else
          {
            v209 = v10[2];
            v188 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v119;
            v10[2] = v10[5];
            *v119 = v188;
            v10[5] = v209;
            v160 = *(a2 - 3);
            v161 = v10[3];
            v129 = v160 == v161;
            v162 = v160 < v161;
            if (v129)
              v162 = *(a2 - 2) < v10[4];
            if (v162)
            {
              v163 = v10[5];
              v164 = *v119;
              v165 = *(a2 - 1);
              *v119 = *(_QWORD *)v123;
              v10[5] = v165;
              *(_QWORD *)v123 = v164;
              *(a2 - 1) = v163;
            }
          }
        }
        else if (v126)
        {
          v144 = v10[5];
          v145 = *v119;
          v146 = *(a2 - 1);
          *v119 = *(_QWORD *)v123;
          v10[5] = v146;
          *(_QWORD *)v123 = v145;
          *(a2 - 1) = v144;
          v147 = v10[3];
          v129 = v147 == *v10;
          v148 = v147 < *v10;
          if (v129)
            v148 = v10[4] < v10[1];
          if (v148)
          {
            v208 = v10[2];
            v187 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v119;
            v10[2] = v10[5];
            *v119 = v187;
            v10[5] = v208;
          }
        }
        return result;
      case 4uLL:
        return sub_20F2BCB74(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5uLL:
        return sub_20F2BCD74(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v13 > 287)
        {
          if (v12 == 1)
          {
            if (v10 != a2)
              return sub_20F2BCED0(v10, a2, a2, a3);
            return result;
          }
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          v17 = *(a2 - 3);
          v18 = *(a2 - 2);
          if ((unint64_t)v13 >= 0x601)
          {
            v19 = *v16;
            v20 = &v10[3 * v15 + 1];
            v21 = *v16 < *v10;
            if (*v16 == *v10)
              v21 = *v20 < v10[1];
            v22 = v18 < *v20;
            v129 = v17 == v19;
            v23 = v17 < v19;
            if (v129)
              v23 = v22;
            if (v21)
            {
              if (v23)
              {
                v189 = v10[2];
                v168 = *(_QWORD *)v10;
                v24 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v24;
LABEL_37:
                *(_QWORD *)v8 = v168;
                *(a2 - 1) = v189;
                goto LABEL_38;
              }
              v195 = v10[2];
              v174 = *(_QWORD *)v10;
              v38 = *(_QWORD *)v16;
              v10[2] = v16[2];
              *(_QWORD *)v10 = v38;
              v16[2] = v195;
              *(_QWORD *)v16 = v174;
              v39 = *(a2 - 3);
              v40 = v39 < v174;
              if (v39 == (_DWORD)v174)
                v40 = *(a2 - 2) < *v20;
              if (v40)
              {
                v189 = v16[2];
                v168 = *(_QWORD *)v16;
                v41 = *(_QWORD *)v8;
                v16[2] = *(a2 - 1);
                *(_QWORD *)v16 = v41;
                goto LABEL_37;
              }
            }
            else if (v23)
            {
              v191 = v16[2];
              v170 = *(_QWORD *)v16;
              v32 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v32;
              *(_QWORD *)v8 = v170;
              *(a2 - 1) = v191;
              v33 = *v16 < *v10;
              if (*v16 == *v10)
                v33 = *v20 < v10[1];
              if (v33)
              {
                v192 = v10[2];
                v171 = *(_QWORD *)v10;
                v34 = *(_QWORD *)v16;
                v10[2] = v16[2];
                *(_QWORD *)v10 = v34;
                v16[2] = v192;
                *(_QWORD *)v16 = v171;
              }
            }
LABEL_38:
            v42 = (uint64_t *)(v10 + 3);
            v43 = v10[3];
            v44 = &v10[3 * v15];
            v47 = *(v44 - 3);
            v45 = v44 - 3;
            v46 = v47;
            v48 = v45 + 1;
            v49 = v45[1];
            v50 = v49 < v10[4];
            v129 = v47 == v43;
            v51 = v47 < v43;
            if (!v129)
              v50 = v51;
            v52 = *(a2 - 6);
            v53 = *(a2 - 5) < v49;
            v129 = v52 == v46;
            v54 = v52 < v46;
            if (v129)
              v54 = v53;
            if (v50)
            {
              if (v54)
              {
                v55 = v10[5];
                v56 = *v42;
                v57 = *(a2 - 4);
                *v42 = *(_QWORD *)v166;
                v10[5] = v57;
                *(_QWORD *)v166 = v56;
                *(a2 - 4) = v55;
              }
              else
              {
                v68 = *v42;
                v69 = v10[5];
                v70 = v45[2];
                *v42 = *(_QWORD *)v45;
                v10[5] = v70;
                v45[2] = v69;
                *(_QWORD *)v45 = v68;
                v71 = v68;
                LODWORD(v68) = *(a2 - 6);
                v129 = (_DWORD)v68 == v71;
                v72 = v68 < v71;
                if (v129)
                  v72 = *(a2 - 5) < *v48;
                if (v72)
                {
                  v198 = v45[2];
                  v177 = *(_QWORD *)v45;
                  v73 = *(_QWORD *)v166;
                  v45[2] = *(a2 - 4);
                  *(_QWORD *)v45 = v73;
                  *(_QWORD *)v166 = v177;
                  *(a2 - 4) = v198;
                }
              }
            }
            else if (v54)
            {
              v196 = v45[2];
              v175 = *(_QWORD *)v45;
              v58 = *(_QWORD *)v166;
              v45[2] = *(a2 - 4);
              *(_QWORD *)v45 = v58;
              *(_QWORD *)v166 = v175;
              *(a2 - 4) = v196;
              v59 = v10[3];
              v60 = *v45 < v59;
              if (*v45 == v59)
                v60 = *v48 < v10[4];
              if (v60)
              {
                v61 = *v42;
                v62 = v10[5];
                v63 = v45[2];
                *v42 = *(_QWORD *)v45;
                v10[5] = v63;
                v45[2] = v62;
                *(_QWORD *)v45 = v61;
              }
            }
            v74 = (uint64_t *)(v10 + 6);
            v75 = v10[6];
            v76 = &v10[3 * v15];
            v79 = v76[3];
            v77 = v76 + 3;
            v78 = v79;
            v80 = v77 + 1;
            v81 = v77[1];
            v82 = v81 < v10[7];
            v129 = v79 == v75;
            v83 = v79 < v75;
            if (!v129)
              v82 = v83;
            v84 = *(a2 - 9);
            v85 = *(a2 - 8) < v81;
            v129 = v84 == v78;
            v86 = v84 < v78;
            if (v129)
              v86 = v85;
            if (v82)
            {
              if (v86)
              {
                v87 = v10[8];
                v88 = *v74;
                v89 = *(a2 - 7);
                *v74 = *(_QWORD *)v9;
                v10[8] = v89;
                *(_QWORD *)v9 = v88;
                *(a2 - 7) = v87;
              }
              else
              {
                v96 = *v74;
                v97 = v10[8];
                v98 = v77[2];
                *v74 = *(_QWORD *)v77;
                v10[8] = v98;
                v77[2] = v97;
                *(_QWORD *)v77 = v96;
                v99 = v96;
                LODWORD(v96) = *(a2 - 9);
                v129 = (_DWORD)v96 == v99;
                v100 = v96 < v99;
                if (v129)
                  v100 = *(a2 - 8) < *v80;
                if (v100)
                {
                  v200 = v77[2];
                  v179 = *(_QWORD *)v77;
                  v101 = *(_QWORD *)v9;
                  v77[2] = *(a2 - 7);
                  *(_QWORD *)v77 = v101;
                  *(_QWORD *)v9 = v179;
                  *(a2 - 7) = v200;
                }
              }
            }
            else if (v86)
            {
              v199 = v77[2];
              v178 = *(_QWORD *)v77;
              v90 = *(_QWORD *)v9;
              v77[2] = *(a2 - 7);
              *(_QWORD *)v77 = v90;
              *(_QWORD *)v9 = v178;
              *(a2 - 7) = v199;
              v91 = v10[6];
              v92 = *v77 < v91;
              if (*v77 == v91)
                v92 = *v80 < v10[7];
              if (v92)
              {
                v93 = *v74;
                v94 = v10[8];
                v95 = v77[2];
                *v74 = *(_QWORD *)v77;
                v10[8] = v95;
                v77[2] = v94;
                *(_QWORD *)v77 = v93;
              }
            }
            v102 = *v16;
            v103 = *v16 < *v45;
            if (*v16 == *v45)
              v103 = *v20 < *v48;
            v129 = *v77 == v102;
            v104 = *v77 < v102;
            if (v129)
              v104 = *v80 < *v20;
            if (v103)
            {
              if (v104)
              {
                v201 = v45[2];
                v180 = *(_QWORD *)v45;
                *(_QWORD *)v45 = *(_QWORD *)v77;
                v45[2] = v77[2];
LABEL_93:
                v77[2] = v201;
                *(_QWORD *)v77 = v180;
                goto LABEL_94;
              }
              v204 = v45[2];
              v183 = *(_QWORD *)v45;
              *(_QWORD *)v45 = *(_QWORD *)v16;
              v45[2] = v16[2];
              v16[2] = v204;
              *(_QWORD *)v16 = v183;
              v106 = *v80 < *v20;
              if (*v77 != *v16)
                v106 = *v77 < *v16;
              if (v106)
              {
                v201 = v16[2];
                v180 = *(_QWORD *)v16;
                *(_QWORD *)v16 = *(_QWORD *)v77;
                v16[2] = v77[2];
                goto LABEL_93;
              }
            }
            else if (v104)
            {
              v202 = v16[2];
              v181 = *(_QWORD *)v16;
              *(_QWORD *)v16 = *(_QWORD *)v77;
              v16[2] = v77[2];
              v77[2] = v202;
              *(_QWORD *)v77 = v181;
              v105 = *v20 < *v48;
              if (*v16 != *v45)
                v105 = *v16 < *v45;
              if (v105)
              {
                v203 = v45[2];
                v182 = *(_QWORD *)v45;
                *(_QWORD *)v45 = *(_QWORD *)v16;
                v45[2] = v16[2];
                v16[2] = v203;
                *(_QWORD *)v16 = v182;
              }
            }
LABEL_94:
            v205 = v10[2];
            v184 = *(_QWORD *)v10;
            v107 = *(_QWORD *)v16;
            v10[2] = v16[2];
            *(_QWORD *)v10 = v107;
            v16[2] = v205;
            *(_QWORD *)v16 = v184;
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          v25 = *v10;
          v26 = v10[1];
          v27 = &v10[3 * v15 + 1];
          v28 = v26 < *v27;
          if (*v10 != *v16)
            v28 = *v10 < *v16;
          v29 = v18 < v26;
          v129 = v17 == v25;
          v30 = v17 < v25;
          if (v129)
            v30 = v29;
          if (v28)
          {
            if (v30)
            {
              v190 = v16[2];
              v169 = *(_QWORD *)v16;
              v31 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v31;
              goto LABEL_54;
            }
            v197 = v16[2];
            v176 = *(_QWORD *)v16;
            v64 = *(_QWORD *)v10;
            v16[2] = v10[2];
            *(_QWORD *)v16 = v64;
            v10[2] = v197;
            *(_QWORD *)v10 = v176;
            v65 = *(a2 - 3);
            v129 = v65 == *v10;
            v66 = v65 < *v10;
            if (v129)
              v66 = *(a2 - 2) < v10[1];
            if (v66)
            {
              v190 = v10[2];
              v169 = *(_QWORD *)v10;
              v67 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v67;
LABEL_54:
              *(_QWORD *)v8 = v169;
              *(a2 - 1) = v190;
            }
LABEL_55:
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          if (!v30)
            goto LABEL_55;
          v193 = v10[2];
          v172 = *(_QWORD *)v10;
          v35 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v35;
          *(_QWORD *)v8 = v172;
          *(a2 - 1) = v193;
          v36 = v10[1] < *v27;
          if (*v10 != *v16)
            v36 = *v10 < *v16;
          if (!v36)
            goto LABEL_55;
          v194 = v16[2];
          v173 = *(_QWORD *)v16;
          v37 = *(_QWORD *)v10;
          v16[2] = v10[2];
          *(_QWORD *)v16 = v37;
          v10[2] = v194;
          *(_QWORD *)v10 = v173;
          if ((a5 & 1) != 0)
            goto LABEL_98;
LABEL_95:
          v108 = *(v10 - 3);
          v129 = v108 == *v10;
          v109 = v108 < *v10;
          if (v129)
            v109 = *(v10 - 2) < v10[1];
          if (!v109)
          {
            result = sub_20F2BC448(v10, (unint64_t)a2);
            v10 = result;
            goto LABEL_103;
          }
LABEL_98:
          v110 = (unsigned int *)sub_20F2BC598((int *)v10, (unint64_t)a2);
          if ((v111 & 1) == 0)
            goto LABEL_101;
          v112 = sub_20F3A111C(v10, v110);
          v10 = v110 + 3;
          result = (unsigned int *)sub_20F3A111C(v110 + 3, a2);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v112)
              continue;
LABEL_101:
            result = (unsigned int *)sub_20F3A0400(v7, v110, a3, -v12, a5 & 1);
            v10 = v110 + 3;
LABEL_103:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v110;
          if (v112)
            return result;
          goto LABEL_2;
        }
        v128 = v10 + 3;
        v129 = v10 == a2 || v128 == a2;
        v130 = v129;
        if ((a5 & 1) != 0)
        {
          if ((v130 & 1) == 0)
          {
            v131 = 0;
            v132 = v10;
            do
            {
              v134 = v128;
              v135 = v132[3];
              v136 = v132[4];
              v137 = v135 < *v132;
              if (v135 == *v132)
                v137 = v136 < v132[1];
              if (v137)
              {
                v138 = v132[5];
                v139 = v131;
                do
                {
                  v140 = (char *)v10 + v139;
                  *(_QWORD *)(v140 + 12) = *(_QWORD *)((char *)v10 + v139);
                  *((_DWORD *)v140 + 5) = *(unsigned int *)((char *)v10 + v139 + 8);
                  if (!v139)
                  {
                    v133 = v10;
                    goto LABEL_131;
                  }
                  v141 = *((_DWORD *)v140 - 3);
                  v142 = v136 < *((_DWORD *)v140 - 2);
                  v129 = v135 == v141;
                  v143 = v135 < v141;
                  if (!v129)
                    v142 = v143;
                  v139 -= 12;
                }
                while (v142);
                v133 = (unsigned int *)((char *)v10 + v139 + 12);
LABEL_131:
                *v133 = v135;
                v133[1] = v136;
                v133[2] = v138;
              }
              v128 = v134 + 3;
              v131 += 12;
              v132 = v134;
            }
            while (v134 + 3 != a2);
          }
        }
        else if ((v130 & 1) == 0)
        {
          do
          {
            v149 = v128;
            v150 = v7[3];
            v151 = v7[4];
            v152 = v150 < *v7;
            if (v150 == *v7)
              v152 = v151 < v7[1];
            if (v152)
            {
              v153 = v7[5];
              v154 = v149;
              do
              {
                v155 = v154;
                v156 = *(_QWORD *)(v154 - 3);
                v154 -= 3;
                *(_QWORD *)v155 = v156;
                v155[2] = *(v155 - 1);
                v157 = *(v155 - 6);
                v158 = v151 < *(v155 - 5);
                v129 = v150 == v157;
                v159 = v150 < v157;
                if (!v129)
                  v158 = v159;
              }
              while (v158);
              *v154 = v150;
              v154[1] = v151;
              v154[2] = v153;
            }
            v128 = v149 + 3;
            v7 = v149;
          }
          while (v149 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F3A111C(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _BOOL4 v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  _BOOL4 v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  _BOOL4 v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  _BOOL4 v71;
  unsigned int v72;
  uint64_t v73;
  char *v74;
  unsigned int v75;
  BOOL v76;
  BOOL v77;
  _DWORD *v78;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = v5 < a1[1];
      v7 = v4 == *a1;
      v8 = v4 < *a1;
      if (v7)
        v8 = v6;
      if (v8)
      {
        v9 = a1[2];
        v10 = *(_QWORD *)a1;
        v11 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v11;
        *(_QWORD *)v3 = v10;
        v3[2] = v9;
      }
      return 1;
    case 3uLL:
      v12 = a1 + 3;
      v13 = a1[3];
      v14 = a1[4];
      v15 = v13 < *a1;
      if (v13 == *a1)
        v15 = v14 < a1[1];
      v17 = *(a2 - 3);
      v16 = a2 - 3;
      v18 = *(a2 - 2) < v14;
      v7 = v17 == v13;
      v19 = v17 < v13;
      if (v7)
        v19 = v18;
      if (v15)
      {
        if (v19)
        {
          v20 = a1[2];
          v21 = *(_QWORD *)a1;
          v22 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v16;
          a1[2] = v22;
          *(_QWORD *)v16 = v21;
          *(a2 - 1) = v20;
          return 1;
        }
        v50 = a1[2];
        v51 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v12;
        a1[2] = a1[5];
        *v12 = v51;
        a1[5] = v50;
        v52 = *(a2 - 3);
        v53 = a1[3];
        v7 = v52 == v53;
        v54 = v52 < v53;
        if (v7)
          v54 = *(a2 - 2) < a1[4];
        if (v54)
        {
          v55 = a1[5];
          v56 = *v12;
          v57 = *(a2 - 1);
          *v12 = *(_QWORD *)v16;
          a1[5] = v57;
          *(_QWORD *)v16 = v56;
          *(a2 - 1) = v55;
          return 1;
        }
      }
      else if (v19)
      {
        v36 = a1[5];
        v37 = *v12;
        v38 = *(a2 - 1);
        *v12 = *(_QWORD *)v16;
        a1[5] = v38;
        *(_QWORD *)v16 = v37;
        *(a2 - 1) = v36;
        v39 = a1[3];
        v7 = v39 == *a1;
        v40 = v39 < *a1;
        if (v7)
          v40 = a1[4] < a1[1];
        if (v40)
        {
          v41 = a1[2];
          v42 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          a1[2] = a1[5];
          *v12 = v42;
          a1[5] = v41;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BCB74(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F2BCD74(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v23 = a1 + 6;
      v24 = a1[6];
      v25 = a1 + 3;
      v26 = a1[3];
      v27 = a1[4];
      v28 = *a1;
      v29 = a1[1];
      v30 = v26 < *a1;
      if (v26 == *a1)
        v30 = v27 < v29;
      v31 = a1[7];
      v32 = v31 < v27;
      v7 = v24 == v26;
      v33 = v24 < v26;
      if (v7)
        v33 = v32;
      if (v30)
      {
        if (v33)
        {
          v34 = a1[2];
          v35 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v23;
          a1[2] = a1[8];
          *(_QWORD *)v23 = v35;
          a1[8] = v34;
        }
        else
        {
          v58 = a1[2];
          v59 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v59;
          a1[5] = v58;
          v60 = a1[3];
          v7 = v24 == v60;
          v61 = v24 < v60;
          if (v7)
            v61 = v31 < a1[4];
          if (v61)
          {
            v62 = a1[5];
            v63 = *v25;
            *v25 = *(_QWORD *)v23;
            a1[5] = a1[8];
            *(_QWORD *)v23 = v63;
            a1[8] = v62;
          }
        }
      }
      else if (v33)
      {
        v43 = a1[5];
        v44 = *v25;
        *v25 = *(_QWORD *)v23;
        a1[5] = a1[8];
        *(_QWORD *)v23 = v44;
        a1[8] = v43;
        v45 = a1[3];
        v46 = a1[4] < v29;
        v7 = v45 == v28;
        v47 = v45 < v28;
        if (v7)
          v47 = v46;
        if (v47)
        {
          v48 = a1[2];
          v49 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v25;
          a1[2] = a1[5];
          *v25 = v49;
          a1[5] = v48;
        }
      }
      v64 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v65 = 0;
      v66 = 0;
      break;
  }
  while (1)
  {
    v67 = *v64;
    v68 = v64[1];
    v69 = *v23;
    v70 = v68 < v23[1];
    v7 = *v64 == v69;
    v71 = *v64 < v69;
    if (!v7)
      v70 = v71;
    if (v70)
      break;
LABEL_55:
    v23 = v64;
    v65 += 12;
    v64 += 3;
    if (v64 == a2)
      return 1;
  }
  v72 = v64[2];
  v73 = v65;
  do
  {
    v74 = (char *)a1 + v73;
    *(_QWORD *)(v74 + 36) = *(_QWORD *)((char *)a1 + v73 + 24);
    *((_DWORD *)v74 + 11) = *(unsigned int *)((char *)a1 + v73 + 32);
    if (v73 == -24)
    {
      *a1 = v67;
      a1[1] = v68;
      a1[2] = v72;
      if (++v66 != 8)
        goto LABEL_55;
      return v64 + 3 == a2;
    }
    v75 = *((_DWORD *)v74 + 3);
    v76 = v68 < *((_DWORD *)v74 + 4);
    v7 = v67 == v75;
    v77 = v67 < v75;
    if (!v7)
      v76 = v77;
    v73 -= 12;
  }
  while (v76);
  v78 = (unsigned int *)((char *)a1 + v73);
  v78[9] = v67;
  v78[10] = v68;
  v78[11] = v72;
  if (++v66 != 8)
    goto LABEL_55;
  return v64 + 3 == a2;
}

unsigned int *sub_20F3A15B8(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  BOOL v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  BOOL v28;
  _BOOL4 v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  BOOL v53;
  unsigned int v54;
  _BOOL4 v55;
  _BOOL4 v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  uint64_t v75;
  uint64_t *v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v86;
  _BOOL4 v87;
  _BOOL4 v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int v109;
  _BOOL4 v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  unsigned int *v115;
  char v116;
  BOOL v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int *v120;
  unsigned int v121;
  _BOOL4 v122;
  _BOOL4 v123;
  uint64_t v124;
  _QWORD *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  unsigned int *v130;
  unsigned int v131;
  _BOOL4 v132;
  uint64_t v133;
  unsigned int *v134;
  BOOL v135;
  char v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  _BOOL4 v144;
  unsigned int v145;
  uint64_t v146;
  char *v147;
  unsigned int v148;
  BOOL v149;
  BOOL v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  _BOOL4 v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int *v163;
  uint64_t v164;
  unsigned int v165;
  BOOL v166;
  BOOL v167;
  unsigned int v168;
  unsigned int v169;
  _BOOL4 v170;
  unsigned int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int *v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int v217;

  v7 = result;
LABEL_2:
  v8 = a2 - 3;
  v174 = a2 - 6;
  v9 = a2 - 9;
  v10 = v7;
LABEL_3:
  v11 = 1 - a4;
  while (2)
  {
    v7 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v118 = *(a2 - 3);
        v119 = *(a2 - 2);
        v120 = a2 - 3;
        v121 = v10[1];
        v122 = v118 < *v10;
        v135 = v119 == v121;
        v123 = v119 < v121;
        if (!v135)
          v122 = v123;
        if (v122)
        {
          v214 = v10[2];
          v193 = *(_QWORD *)v10;
          v124 = *(_QWORD *)v120;
          v10[2] = v120[2];
          *(_QWORD *)v10 = v124;
          *(_QWORD *)v120 = v193;
          v120[2] = v214;
        }
        return result;
      case 3uLL:
        v125 = v10 + 3;
        v126 = v10[3];
        v127 = v10[4];
        v128 = v10[1];
        v135 = v127 == v128;
        v129 = v127 < v128;
        if (v135)
          v129 = v126 < *v10;
        v131 = *(a2 - 2);
        v130 = a2 - 3;
        v132 = *(a2 - 3) < v126;
        if (v131 != v127)
          v132 = v131 < v127;
        if (v129)
        {
          if (v132)
          {
            v215 = v10[2];
            v194 = *(_QWORD *)v10;
            v133 = *(_QWORD *)v130;
            v10[2] = *(a2 - 1);
            *(_QWORD *)v10 = v133;
            *(_QWORD *)v130 = v194;
            *(a2 - 1) = v215;
          }
          else
          {
            v217 = v10[2];
            v196 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v125;
            v10[2] = v10[5];
            *v125 = v196;
            v10[5] = v217;
            v168 = *(a2 - 2);
            v169 = v10[4];
            v135 = v168 == v169;
            v170 = v168 < v169;
            if (v135)
              v170 = *(a2 - 3) < v10[3];
            if (v170)
            {
              v171 = v10[5];
              v172 = *v125;
              v173 = *(a2 - 1);
              *v125 = *(_QWORD *)v130;
              v10[5] = v173;
              *(_QWORD *)v130 = v172;
              *(a2 - 1) = v171;
            }
          }
        }
        else if (v132)
        {
          v151 = v10[5];
          v152 = *v125;
          v153 = *(a2 - 1);
          *v125 = *(_QWORD *)v130;
          v10[5] = v153;
          *(_QWORD *)v130 = v152;
          *(a2 - 1) = v151;
          v154 = v10[4];
          LODWORD(v152) = v10[1];
          v135 = v154 == (_DWORD)v152;
          v155 = v154 < v152;
          if (v135)
            v155 = v10[3] < *v10;
          if (v155)
          {
            v216 = v10[2];
            v195 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v125;
            v10[2] = v10[5];
            *v125 = v195;
            v10[5] = v216;
          }
        }
        return result;
      case 4uLL:
        return sub_20F2BE75C(v10, v10 + 3, v10 + 6, a2 - 3);
      case 5uLL:
        return sub_20F2BE95C(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3);
      default:
        if (v13 > 287)
        {
          if (v12 == 1)
          {
            if (v10 != a2)
              return sub_20F2BEAB8(v10, a2, a2, a3);
            return result;
          }
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          v18 = *(a2 - 3);
          v17 = *(a2 - 2);
          if ((unint64_t)v13 >= 0x601)
          {
            v19 = v10[1];
            v20 = &v10[3 * v15 + 1];
            v21 = *v20;
            v135 = *v20 == v19;
            v22 = *v20 < v19;
            if (v135)
              v22 = *v16 < *v10;
            v23 = v18 < *v16;
            v135 = v17 == v21;
            v24 = v17 < v21;
            if (v135)
              v24 = v23;
            if (v22)
            {
              if (v24)
              {
                v197 = v10[2];
                v176 = *(_QWORD *)v10;
                v25 = *(_QWORD *)v8;
                v10[2] = *(a2 - 1);
                *(_QWORD *)v10 = v25;
LABEL_37:
                *(_QWORD *)v8 = v176;
                *(a2 - 1) = v197;
                goto LABEL_38;
              }
              v203 = v10[2];
              v182 = *(_QWORD *)v10;
              v40 = *(_QWORD *)v16;
              v10[2] = v16[2];
              *(_QWORD *)v10 = v40;
              v16[2] = v203;
              *(_QWORD *)v16 = v182;
              v41 = *(a2 - 2);
              v42 = v41 < *v20;
              if (v41 == *v20)
                v42 = *(a2 - 3) < *v16;
              if (v42)
              {
                v197 = v16[2];
                v176 = *(_QWORD *)v16;
                v43 = *(_QWORD *)v8;
                v16[2] = *(a2 - 1);
                *(_QWORD *)v16 = v43;
                goto LABEL_37;
              }
            }
            else if (v24)
            {
              v199 = v16[2];
              v178 = *(_QWORD *)v16;
              v32 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v32;
              *(_QWORD *)v8 = v178;
              *(a2 - 1) = v199;
              v33 = v10[1];
              v34 = *v20 < v33;
              if (*v20 == v33)
                v34 = *v16 < *v10;
              if (v34)
              {
                v200 = v10[2];
                v179 = *(_QWORD *)v10;
                v35 = *(_QWORD *)v16;
                v10[2] = v16[2];
                *(_QWORD *)v10 = v35;
                v16[2] = v200;
                *(_QWORD *)v16 = v179;
              }
            }
LABEL_38:
            v44 = (uint64_t *)(v10 + 3);
            v45 = &v10[3 * v15];
            v48 = *(v45 - 3);
            v46 = v45 - 3;
            v47 = v48;
            v49 = v46 + 1;
            v50 = v46[1];
            v51 = v10[4];
            v52 = v48 < v10[3];
            v135 = v50 == v51;
            v53 = v50 < v51;
            if (v135)
              v53 = v52;
            v54 = *(a2 - 5);
            v55 = *(a2 - 6) < v47;
            v135 = v54 == v50;
            v56 = v54 < v50;
            if (v135)
              v56 = v55;
            if (v53)
            {
              if (v56)
              {
                v57 = v10[5];
                v58 = *v44;
                v59 = *(a2 - 4);
                *v44 = *(_QWORD *)v174;
                v10[5] = v59;
                *(_QWORD *)v174 = v58;
                *(a2 - 4) = v57;
              }
              else
              {
                v71 = *v44;
                v72 = v10[5];
                v73 = v46[2];
                *v44 = *(_QWORD *)v46;
                v10[5] = v73;
                v46[2] = v72;
                *(_QWORD *)v46 = v71;
                LODWORD(v71) = *(a2 - 5);
                v74 = v71 < *v49;
                if ((_DWORD)v71 == *v49)
                  v74 = *(a2 - 6) < *v46;
                if (v74)
                {
                  v206 = v46[2];
                  v185 = *(_QWORD *)v46;
                  v75 = *(_QWORD *)v174;
                  v46[2] = *(a2 - 4);
                  *(_QWORD *)v46 = v75;
                  *(_QWORD *)v174 = v185;
                  *(a2 - 4) = v206;
                }
              }
            }
            else if (v56)
            {
              v204 = v46[2];
              v183 = *(_QWORD *)v46;
              v60 = *(_QWORD *)v174;
              v46[2] = *(a2 - 4);
              *(_QWORD *)v46 = v60;
              *(_QWORD *)v174 = v183;
              *(a2 - 4) = v204;
              v61 = v10[4];
              v62 = *v49 < v61;
              if (*v49 == v61)
                v62 = *v46 < v10[3];
              if (v62)
              {
                v63 = *v44;
                v64 = v10[5];
                v65 = v46[2];
                *v44 = *(_QWORD *)v46;
                v10[5] = v65;
                v46[2] = v64;
                *(_QWORD *)v46 = v63;
              }
            }
            v76 = (uint64_t *)(v10 + 6);
            v77 = &v10[3 * v15];
            v80 = v77[3];
            v78 = v77 + 3;
            v79 = v80;
            v81 = v78 + 1;
            v82 = v78[1];
            v83 = v10[7];
            v84 = v80 < v10[6];
            v135 = v82 == v83;
            v85 = v82 < v83;
            if (v135)
              v85 = v84;
            v86 = *(a2 - 8);
            v87 = *(a2 - 9) < v79;
            v135 = v86 == v82;
            v88 = v86 < v82;
            if (v135)
              v88 = v87;
            if (v85)
            {
              if (v88)
              {
                v89 = v10[8];
                v90 = *v76;
                v91 = *(a2 - 7);
                *v76 = *(_QWORD *)v9;
                v10[8] = v91;
                *(_QWORD *)v9 = v90;
                *(a2 - 7) = v89;
              }
              else
              {
                v98 = *v76;
                v99 = v10[8];
                v100 = v78[2];
                *v76 = *(_QWORD *)v78;
                v10[8] = v100;
                v78[2] = v99;
                *(_QWORD *)v78 = v98;
                LODWORD(v98) = *(a2 - 8);
                v101 = v98 < *v81;
                if ((_DWORD)v98 == *v81)
                  v101 = *(a2 - 9) < *v78;
                if (v101)
                {
                  v208 = v78[2];
                  v187 = *(_QWORD *)v78;
                  v102 = *(_QWORD *)v9;
                  v78[2] = *(a2 - 7);
                  *(_QWORD *)v78 = v102;
                  *(_QWORD *)v9 = v187;
                  *(a2 - 7) = v208;
                }
              }
            }
            else if (v88)
            {
              v207 = v78[2];
              v186 = *(_QWORD *)v78;
              v92 = *(_QWORD *)v9;
              v78[2] = *(a2 - 7);
              *(_QWORD *)v78 = v92;
              *(_QWORD *)v9 = v186;
              *(a2 - 7) = v207;
              v93 = v10[7];
              v94 = *v81 < v93;
              if (*v81 == v93)
                v94 = *v78 < v10[6];
              if (v94)
              {
                v95 = *v76;
                v96 = v10[8];
                v97 = v78[2];
                *v76 = *(_QWORD *)v78;
                v10[8] = v97;
                v78[2] = v96;
                *(_QWORD *)v78 = v95;
              }
            }
            v103 = *v20;
            v104 = *v20 < *v49;
            if (*v20 == *v49)
              v104 = *v16 < *v46;
            v135 = *v81 == v103;
            v105 = *v81 < v103;
            if (v135)
              v105 = *v78 < *v16;
            if (v104)
            {
              if (v105)
              {
                v209 = v46[2];
                v188 = *(_QWORD *)v46;
                *(_QWORD *)v46 = *(_QWORD *)v78;
                v46[2] = v78[2];
LABEL_93:
                v78[2] = v209;
                *(_QWORD *)v78 = v188;
                goto LABEL_94;
              }
              v212 = v46[2];
              v191 = *(_QWORD *)v46;
              *(_QWORD *)v46 = *(_QWORD *)v16;
              v46[2] = v16[2];
              v16[2] = v212;
              *(_QWORD *)v16 = v191;
              v109 = *v20;
              v135 = *v81 == v109;
              v110 = *v81 < v109;
              if (v135)
                v110 = *v78 < *v16;
              if (v110)
              {
                v209 = v16[2];
                v188 = *(_QWORD *)v16;
                *(_QWORD *)v16 = *(_QWORD *)v78;
                v16[2] = v78[2];
                goto LABEL_93;
              }
            }
            else if (v105)
            {
              v210 = v16[2];
              v189 = *(_QWORD *)v16;
              *(_QWORD *)v16 = *(_QWORD *)v78;
              v16[2] = v78[2];
              v78[2] = v210;
              *(_QWORD *)v78 = v189;
              v106 = *v20;
              v107 = *v49;
              v135 = v106 == v107;
              v108 = v106 < v107;
              if (v135)
                v108 = *v16 < *v46;
              if (v108)
              {
                v211 = v46[2];
                v190 = *(_QWORD *)v46;
                *(_QWORD *)v46 = *(_QWORD *)v16;
                v46[2] = v16[2];
                v16[2] = v211;
                *(_QWORD *)v16 = v190;
              }
            }
LABEL_94:
            v213 = v10[2];
            v192 = *(_QWORD *)v10;
            v111 = *(_QWORD *)v16;
            v10[2] = v16[2];
            *(_QWORD *)v10 = v111;
            v16[2] = v213;
            *(_QWORD *)v16 = v192;
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          v26 = v10[1];
          v27 = &v10[3 * v15 + 1];
          v28 = v26 < *v27;
          if (v26 == *v27)
            v28 = *v10 < *v16;
          v29 = v18 < *v10;
          v135 = v17 == v26;
          v30 = v17 < v26;
          if (v135)
            v30 = v29;
          if (v28)
          {
            if (v30)
            {
              v198 = v16[2];
              v177 = *(_QWORD *)v16;
              v31 = *(_QWORD *)v8;
              v16[2] = *(a2 - 1);
              *(_QWORD *)v16 = v31;
              goto LABEL_54;
            }
            v205 = v16[2];
            v184 = *(_QWORD *)v16;
            v66 = *(_QWORD *)v10;
            v16[2] = v10[2];
            *(_QWORD *)v16 = v66;
            v10[2] = v205;
            *(_QWORD *)v10 = v184;
            v67 = *(a2 - 2);
            v68 = v10[1];
            v135 = v67 == v68;
            v69 = v67 < v68;
            if (v135)
              v69 = *(a2 - 3) < *v10;
            if (v69)
            {
              v198 = v10[2];
              v177 = *(_QWORD *)v10;
              v70 = *(_QWORD *)v8;
              v10[2] = *(a2 - 1);
              *(_QWORD *)v10 = v70;
LABEL_54:
              *(_QWORD *)v8 = v177;
              *(a2 - 1) = v198;
            }
LABEL_55:
            if ((a5 & 1) != 0)
              goto LABEL_98;
            goto LABEL_95;
          }
          if (!v30)
            goto LABEL_55;
          v201 = v10[2];
          v180 = *(_QWORD *)v10;
          v36 = *(_QWORD *)v8;
          v10[2] = *(a2 - 1);
          *(_QWORD *)v10 = v36;
          *(_QWORD *)v8 = v180;
          *(a2 - 1) = v201;
          v37 = *v27;
          LODWORD(v36) = v10[1];
          v135 = (_DWORD)v36 == v37;
          v38 = v36 < v37;
          if (v135)
            v38 = *v10 < *v16;
          if (!v38)
            goto LABEL_55;
          v202 = v16[2];
          v181 = *(_QWORD *)v16;
          v39 = *(_QWORD *)v10;
          v16[2] = v10[2];
          *(_QWORD *)v16 = v39;
          v10[2] = v202;
          *(_QWORD *)v10 = v181;
          if ((a5 & 1) != 0)
            goto LABEL_98;
LABEL_95:
          v112 = *(v10 - 2);
          v113 = v10[1];
          v135 = v112 == v113;
          v114 = v112 < v113;
          if (v135)
            v114 = *(v10 - 3) < *v10;
          if (!v114)
          {
            result = sub_20F2BE030(v10, (unint64_t)a2);
            v10 = result;
            goto LABEL_103;
          }
LABEL_98:
          v115 = (unsigned int *)sub_20F2BE180((int *)v10, (unint64_t)a2);
          if ((v116 & 1) == 0)
            goto LABEL_101;
          v117 = sub_20F3A22D4(v10, v115);
          v10 = v115 + 3;
          result = (unsigned int *)sub_20F3A22D4(v115 + 3, a2);
          if (!(_DWORD)result)
          {
            v11 = v12 + 1;
            if (v117)
              continue;
LABEL_101:
            result = (unsigned int *)sub_20F3A15B8(v7, v115, a3, -v12, a5 & 1);
            v10 = v115 + 3;
LABEL_103:
            a5 = 0;
            a4 = -v12;
            goto LABEL_3;
          }
          a4 = -v12;
          a2 = v115;
          if (v117)
            return result;
          goto LABEL_2;
        }
        v134 = v10 + 3;
        v135 = v10 == a2 || v134 == a2;
        v136 = v135;
        if ((a5 & 1) != 0)
        {
          if ((v136 & 1) == 0)
          {
            v137 = 0;
            v138 = v10;
            do
            {
              v140 = v134;
              v142 = v138[3];
              v141 = v138[4];
              v143 = v138[1];
              v135 = v141 == v143;
              v144 = v141 < v143;
              if (v135)
                v144 = v142 < *v138;
              if (v144)
              {
                v145 = v138[5];
                v146 = v137;
                do
                {
                  v147 = (char *)v10 + v146;
                  *(_QWORD *)(v147 + 12) = *(_QWORD *)((char *)v10 + v146);
                  *((_DWORD *)v147 + 5) = *(unsigned int *)((char *)v10 + v146 + 8);
                  if (!v146)
                  {
                    v139 = v10;
                    goto LABEL_131;
                  }
                  v148 = *((_DWORD *)v147 - 2);
                  v149 = v142 < *((_DWORD *)v147 - 3);
                  v135 = v141 == v148;
                  v150 = v141 < v148;
                  if (!v135)
                    v149 = v150;
                  v146 -= 12;
                }
                while (v149);
                v139 = (unsigned int *)((char *)v10 + v146 + 12);
LABEL_131:
                *v139 = v142;
                v139[1] = v141;
                v139[2] = v145;
              }
              v134 = v140 + 3;
              v137 += 12;
              v138 = v140;
            }
            while (v140 + 3 != a2);
          }
        }
        else if ((v136 & 1) == 0)
        {
          do
          {
            v156 = v134;
            v158 = v7[3];
            v157 = v7[4];
            v159 = v7[1];
            v135 = v157 == v159;
            v160 = v157 < v159;
            if (v135)
              v160 = v158 < *v7;
            if (v160)
            {
              v161 = v7[5];
              v162 = v156;
              do
              {
                v163 = v162;
                v164 = *(_QWORD *)(v162 - 3);
                v162 -= 3;
                *(_QWORD *)v163 = v164;
                v163[2] = *(v163 - 1);
                v165 = *(v163 - 5);
                v166 = v158 < *(v163 - 6);
                v135 = v157 == v165;
                v167 = v157 < v165;
                if (!v135)
                  v166 = v167;
              }
              while (v166);
              *v162 = v158;
              v162[1] = v157;
              v162[2] = v161;
            }
            v134 = v156 + 3;
            v7 = v156;
          }
          while (v156 + 3 != a2);
        }
        return result;
    }
  }
}

BOOL sub_20F3A22D4(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int *v18;
  unsigned int v19;
  _BOOL4 v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _BOOL4 v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  _BOOL4 v62;
  _BOOL4 v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  BOOL v78;
  BOOL v79;
  _DWORD *v80;

  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v4 = *(a2 - 3);
      v5 = *(a2 - 2);
      v3 = a2 - 3;
      v6 = a1[1];
      v7 = v4 < *a1;
      v8 = v5 == v6;
      v9 = v5 < v6;
      if (!v8)
        v7 = v9;
      if (v7)
      {
        v10 = a1[2];
        v11 = *(_QWORD *)a1;
        v12 = v3[2];
        *(_QWORD *)a1 = *(_QWORD *)v3;
        a1[2] = v12;
        *(_QWORD *)v3 = v11;
        v3[2] = v10;
      }
      return 1;
    case 3uLL:
      v13 = a1 + 3;
      v14 = a1[3];
      v15 = a1[4];
      v16 = a1[1];
      v8 = v15 == v16;
      v17 = v15 < v16;
      if (v8)
        v17 = v14 < *a1;
      v19 = *(a2 - 2);
      v18 = a2 - 3;
      v20 = *(a2 - 3) < v14;
      if (v19 != v15)
        v20 = v19 < v15;
      if (v17)
      {
        if (v20)
        {
          v21 = a1[2];
          v22 = *(_QWORD *)a1;
          v23 = *(a2 - 1);
          *(_QWORD *)a1 = *(_QWORD *)v18;
          a1[2] = v23;
          *(_QWORD *)v18 = v22;
          *(a2 - 1) = v21;
          return 1;
        }
        v51 = a1[2];
        v52 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *v13;
        a1[2] = a1[5];
        *v13 = v52;
        a1[5] = v51;
        v53 = *(a2 - 2);
        v54 = a1[4];
        v8 = v53 == v54;
        v55 = v53 < v54;
        if (v8)
          v55 = *(a2 - 3) < a1[3];
        if (v55)
        {
          v56 = a1[5];
          v57 = *v13;
          v58 = *(a2 - 1);
          *v13 = *(_QWORD *)v18;
          a1[5] = v58;
          *(_QWORD *)v18 = v57;
          *(a2 - 1) = v56;
          return 1;
        }
      }
      else if (v20)
      {
        v37 = a1[5];
        v38 = *v13;
        v39 = *(a2 - 1);
        *v13 = *(_QWORD *)v18;
        a1[5] = v39;
        *(_QWORD *)v18 = v38;
        *(a2 - 1) = v37;
        v40 = a1[4];
        LODWORD(v38) = a1[1];
        v8 = v40 == (_DWORD)v38;
        v41 = v40 < v38;
        if (v8)
          v41 = a1[3] < *a1;
        if (v41)
        {
          v42 = a1[2];
          v43 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v13;
          a1[2] = a1[5];
          *v13 = v43;
          a1[5] = v42;
          return 1;
        }
      }
      return 1;
    case 4uLL:
      sub_20F2BE75C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20F2BE95C(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v24 = a1 + 6;
      v25 = a1[6];
      v26 = a1 + 3;
      v27 = a1[3];
      v28 = a1[4];
      v30 = *a1;
      v29 = a1[1];
      v31 = __PAIR64__(v28, v27) < *(_QWORD *)a1;
      v32 = a1[7];
      v33 = v25 < v27;
      v8 = v32 == v28;
      v34 = v32 < v28;
      if (!v8)
        v33 = v34;
      if (v31)
      {
        if (v33)
        {
          v35 = a1[2];
          v36 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v24;
          a1[2] = a1[8];
          *(_QWORD *)v24 = v36;
          a1[8] = v35;
        }
        else
        {
          v59 = a1[2];
          v60 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v60;
          a1[5] = v59;
          v61 = a1[4];
          v62 = v25 < a1[3];
          v8 = v32 == v61;
          v63 = v32 < v61;
          if (!v8)
            v62 = v63;
          if (v62)
          {
            v64 = a1[5];
            v65 = *v26;
            *v26 = *(_QWORD *)v24;
            a1[5] = a1[8];
            *(_QWORD *)v24 = v65;
            a1[8] = v64;
          }
        }
      }
      else if (v33)
      {
        v44 = a1[5];
        v45 = *v26;
        *v26 = *(_QWORD *)v24;
        a1[5] = a1[8];
        *(_QWORD *)v24 = v45;
        a1[8] = v44;
        v46 = a1[4];
        v47 = a1[3] < v30;
        v8 = v46 == v29;
        v48 = v46 < v29;
        if (v8)
          v48 = v47;
        if (v48)
        {
          v49 = a1[2];
          v50 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v26;
          a1[2] = a1[5];
          *v26 = v50;
          a1[5] = v49;
        }
      }
      v66 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v67 = 0;
      v68 = 0;
      break;
  }
  while (1)
  {
    v70 = *v66;
    v69 = v66[1];
    v71 = v24[1];
    v72 = *v66 < *v24;
    v8 = v69 == v71;
    v73 = v69 < v71;
    if (!v8)
      v72 = v73;
    if (v72)
      break;
LABEL_53:
    v24 = v66;
    v67 += 12;
    v66 += 3;
    if (v66 == a2)
      return 1;
  }
  v74 = v66[2];
  v75 = v67;
  do
  {
    v76 = (char *)a1 + v75;
    *(_QWORD *)(v76 + 36) = *(_QWORD *)((char *)a1 + v75 + 24);
    *((_DWORD *)v76 + 11) = *(unsigned int *)((char *)a1 + v75 + 32);
    if (v75 == -24)
    {
      *a1 = v70;
      a1[1] = v69;
      a1[2] = v74;
      if (++v68 != 8)
        goto LABEL_53;
      return v66 + 3 == a2;
    }
    v77 = *((_DWORD *)v76 + 4);
    v78 = v70 < *((_DWORD *)v76 + 3);
    v8 = v69 == v77;
    v79 = v69 < v77;
    if (!v8)
      v78 = v79;
    v75 -= 12;
  }
  while (v78);
  v80 = (unsigned int *)((char *)a1 + v75);
  v80[9] = v70;
  v80[10] = v69;
  v80[11] = v74;
  if (++v68 != 8)
    goto LABEL_53;
  return v66 + 3 == a2;
}

BOOL sub_20F3A2770(int32x2_t *a1, uint64_t a2, unsigned int **a3, uint64_t a4)
{
  void **v7;
  int32x2_t *v8;
  int32x2_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  size_t v14;
  unsigned int v15;
  void **v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  unint64_t v20;
  void *v21;
  __int32 v22;
  size_t v23;
  _DWORD *v24;
  _DWORD *v25;
  unsigned int v26;
  int32x2_t v27;
  uint64_t v28;
  int v29;
  float64x2_t *v30;
  uint64_t v31;
  float64x2_t v32;
  float64x2_t *v33;
  unsigned int *v34;
  unsigned int *v35;
  int v36;
  int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int32x2_t v41;
  uint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  uint64_t v47;
  _QWORD v48[2];
  unsigned int v49;
  float64x2_t *v50;
  float64x2_t v51;
  float64_t v52;
  float64x2_t v53;
  uint64_t v54;
  _BYTE v55[8];
  _QWORD *v56;
  int32x2_t *v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v47 = (*(_QWORD *)&a1[24] - *(_QWORD *)&a1[23]) & 0x3FFFFFFFCLL;
  if (v47)
  {
    v7 = (void **)&a1[52];
    v8 = a1 + 8;
    v9 = a1[22];
    v10 = *(_DWORD *)(*(_QWORD *)&v9 + 12);
    v11 = 3 * *(_DWORD *)(*(_QWORD *)&v9 + 8);
    v12 = 3 * v10;
    a1[54].i32[0] = v11;
    a1[54].i32[1] = 3 * v10;
    v13 = (3 * v10) * (unint64_t)v11;
    if (*(_QWORD *)&a1[53] < v13)
    {
      if (*v7)
        MEMORY[0x212BC6368](*v7, 0x1000C8000313F17);
      v14 = (8 * v13 + 31) & 0xFFFFFFFFFFFFFFE0;
      a1[52] = 0;
      a1[53] = (int32x2_t)(v14 >> 3);
      a1[52] = (int32x2_t)operator new(v14, (std::align_val_t)0x20uLL);
      v11 = a1[54].u32[0];
      v12 = a1[54].i32[1];
    }
    v15 = v11 * v12;
    if (v15)
      bzero(*v7, 8 * v15);
    (*(void (**)(int32x2_t *, void **, _QWORD))(*(_QWORD *)&a1[8] + 64))(v8, v7, 0);
    sub_20F20B6B0((uint64_t)v7);
    v16 = (void **)&a1[64];
    v17 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 32))(a1);
    v20 = a1[3].u32[0];
    if ((_DWORD)v20 == a1[66].i32[0])
    {
      v21 = *v16;
    }
    else
    {
      a1[66].i32[0] = v20;
      v21 = (void *)a1[64];
      if (*(_QWORD *)&a1[65] < v20)
      {
        v22 = v20;
        if (v21)
        {
          MEMORY[0x212BC6368](v21, 0x1000C8000313F17);
          v22 = a1[66].i32[0];
        }
        a1[64] = 0;
        v23 = (8 * v20 + 31) & 0xFFFFFFFE0;
        a1[65] = (int32x2_t)(v23 >> 3);
        v21 = operator new(v23, (std::align_val_t)0x20uLL);
        a1[64] = (int32x2_t)v21;
        LODWORD(v20) = v22;
      }
    }
    if ((_DWORD)v20)
      bzero(v21, 8 * v20);
    v24 = (_DWORD *)a1[23];
    v25 = (_DWORD *)a1[24];
    if (v24 != v25)
    {
      v26 = 0;
      v27 = a1[1];
      v28 = *(_QWORD *)(v17 + 8);
      do
      {
        v28 -= 16;
        do
        {
          v29 = *(_DWORD *)(v28 + 16);
          v28 += 16;
        }
        while (*v24 != v29);
        v30 = *(float64x2_t **)(v28 + 8);
        v31 = 8 * v26;
        v18.f64[0] = v30[3].f64[0];
        v19.f64[0] = *(float64_t *)(*(_QWORD *)&v27 + v31 + 16);
        v18 = vsubq_f64(v18, v19);
        v32 = vsubq_f64(v30[2], *(float64x2_t *)(*(_QWORD *)&v27 + v31));
        v33 = (float64x2_t *)((char *)*v16 + v31);
        *v33 = v32;
        v33[1].f64[0] = v18.f64[0];
        v26 += 3;
        ++v24;
      }
      while (v24 != v25);
      v34 = (unsigned int *)a1[23];
      v35 = (unsigned int *)a1[24];
      if (v34 != v35)
      {
        v36 = 0;
        v37 = 0;
        v38 = *a3;
        do
        {
          if (*v38 < *v34)
          {
            do
            {
              v39 = v38[1];
              ++v38;
              ++v36;
            }
            while (v39 < *v34);
          }
          v40 = a1[7].i32[1] + 3 * v37;
          v41 = a1[52];
          v48[0] = vrev64_s32(a1[54]);
          v48[1] = *(_QWORD *)&v41 + 8 * v40;
          v49 = v40;
          v42 = *(_QWORD *)a4 + 8 * (*(_DWORD *)(a4 + 28) + 3 * v36);
          v43 = *(float64x2_t *)v42;
          v54 = *(_QWORD *)(v42 + 16);
          v53 = v43;
          v50 = &v53;
          v56 = v48;
          v57 = a1 + 64;
          v58 = 0x3FF0000000000000;
          sub_20F3A2AA0(&v51, (uint64_t)v55);
          v44.f64[0] = v50[1].f64[0];
          v45.f64[0] = v52;
          *(float64x2_t *)v42 = vsubq_f64(*v50, v51);
          *(_QWORD *)(v42 + 16) = *(_OWORD *)&vsubq_f64(v44, v45);
          ++v34;
          ++v37;
        }
        while (v34 != v35);
      }
    }
  }
  return v47 != 0;
}

_QWORD *sub_20F3A2AA0(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 8);
  if ((_QWORD *)(*(_QWORD *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 16)) == result
    || (v4 = *(_QWORD *)(a2 + 16), *(_QWORD **)v4 == result))
  {
    result = (_QWORD *)sub_20F3A2AA0(&v5);
    *(_OWORD *)v2 = v5;
    v2[2] = v6;
  }
  else if (*(_DWORD *)v3 && *(_DWORD *)(v4 + 16))
  {
    return (_QWORD *)sub_20E8BE6CC();
  }
  else
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

float64x2_t sub_20F3A2B64(uint64_t a1, uint64_t a2, float64x2_t result)
{
  unsigned int *v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v33;
  float64x2_t v35;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  uint64_t v40;
  uint64_t v41;
  float64x2_t v43;

  v3 = *(unsigned int **)(a2 + 72);
  if ((v3[1] & 4) != 0)
    v4 = 1;
  else
    v4 = 2;
  if ((v4 & *(_DWORD *)(*(_QWORD *)a1 + 40)) != 0)
  {
    if (*((_BYTE *)v3 + 20))
    {
      v7 = *v3;
      if ((_DWORD)v7 == -1)
        return result;
      v9 = a1 + 8;
      v8 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD **)(*(_QWORD *)a1 + 8);
      *(_BYTE *)v8 = 1;
      *(_DWORD *)(v8 + 4) = *(_DWORD *)(*v10 + 4 * v7);
      if (!sub_20F3A2DB0(a2 + 8, *(double **)(a1 + 16), *(float64x2_t **)(a1 + 24), result))
        return result;
    }
    else
    {
      v9 = a1 + 8;
      v13 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)v13 = 0;
      *(_DWORD *)(v13 + 4) = -1;
      if (!sub_20F3A2DB0(a2 + 8, *(double **)(a1 + 16), *(float64x2_t **)(a1 + 24), result))
        return result;
    }
    v14 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)v14)
      return result;
    v15 = *(_QWORD *)(a1 + 24);
    v16 = **(unint64_t ***)(a1 + 32);
    v17 = *(_DWORD *)(v14 + 4);
    v18 = v16[15] + 24 * v17;
    v20 = *(char **)v18;
    v19 = *(char **)(v18 + 8);
    if (*(char **)v18 != v19)
    {
      while (*(_DWORD *)v20 < v17)
      {
        v20 += 16;
        if (v20 == v19)
          goto LABEL_19;
      }
    }
    if (v20 != v19)
    {
      if (*(_DWORD *)v20 == v17)
      {
        v21 = v16[6] + 8 * *((_QWORD *)v20 + 1);
        goto LABEL_20;
      }
      v19 = v20;
    }
LABEL_19:
    v21 = sub_20F39BECC(v16 + 4, (char **)v18, v17, v19);
LABEL_20:
    result.f64[0] = *(float64_t *)(v21 + 16);
    v11.f64[0] = *(float64_t *)(v21 + 40);
    v12.f64[0] = *(float64_t *)(v21 + 64);
    _Q7 = *(float64x2_t *)(v15 + 16);
    _Q16 = *(float64x2_t *)(v15 + 32);
    v24 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v15, (int64x2_t)_Q7);
    _Q19 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v15, (int64x2_t)_Q7);
    v26 = vmlaq_laneq_f64(vmulq_n_f64(v24, *(double *)v15), _Q19, *(float64x2_t *)v15, 1);
    _Q20 = vmulq_f64(_Q16, *(float64x2_t *)v15);
    _D6 = *(_QWORD *)(v15 + 8);
    __asm { FMLA            D20, D6, V16.D[1] }
    v33 = vmlaq_laneq_f64(vmulq_n_f64(v24, _Q7.f64[0]), _Q19, _Q7, 1);
    _Q21 = vmulq_f64(_Q16, _Q7);
    _Q7.f64[0] = *(float64_t *)(v15 + 24);
    __asm { FMLA            D21, D7, V16.D[1] }
    v35 = vmlaq_laneq_f64(vmulq_n_f64(v24, _Q16.f64[0]), _Q19, _Q16, 1);
    _Q17 = vmulq_f64(_Q16, _Q16);
    _Q19.f64[0] = *(float64_t *)(v15 + 40);
    __asm { FMLA            D17, D19, V16.D[1] }
    *(_QWORD *)&result.f64[0] = *(_OWORD *)&vaddq_f64(result, _Q20);
    v37 = vaddq_f64(*(float64x2_t *)v21, v26);
    v38 = vaddq_f64(*(float64x2_t *)(v21 + 24), v33);
    v39 = vaddq_f64(*(float64x2_t *)(v21 + 48), v35);
    *(float64x2_t *)v21 = v37;
    *(float64_t *)(v21 + 16) = result.f64[0];
    *(float64x2_t *)(v21 + 24) = v38;
    *(_QWORD *)(v21 + 40) = *(_OWORD *)&vaddq_f64(v11, _Q21);
    *(float64x2_t *)(v21 + 48) = v39;
    *(_QWORD *)(v21 + 64) = *(_OWORD *)&vaddq_f64(v12, _Q17);
    if (**(_BYTE **)v9)
    {
      v40 = *(_QWORD *)(a1 + 24);
      v41 = ***(_QWORD ***)(a1 + 40)
          + 8 * (*(_DWORD *)(**(_QWORD **)(a1 + 40) + 28) + 3 * *(_DWORD *)(*(_QWORD *)v9 + 4));
      v37.f64[0] = *(float64_t *)(v41 + 16);
      _Q4 = *(float64x2_t *)(v40 + 32);
      v43 = *(float64x2_t *)(a2 + 96);
      _Q2 = vmulq_f64(_Q4, v43);
      _D3 = *(_QWORD *)(a2 + 104);
      __asm { FMLA            D2, D3, V4.D[1] }
      result = vsubq_f64(*(float64x2_t *)v41, vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v40, *(int64x2_t *)(v40 + 16)), v43.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)v40, *(int64x2_t *)(v40 + 16)), v43, 1));
      *(float64x2_t *)v41 = result;
      *(_QWORD *)(v41 + 16) = *(_OWORD *)&vsubq_f64(v37, _Q2);
    }
  }
  return result;
}

uint64_t sub_20F3A2DB0(uint64_t a1, double *a2, float64x2_t *a3, float64x2_t a4)
{
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  float64x2_t *v11;
  double v18;
  long double v19;
  long double v20;
  __n128 v21;
  int v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  double v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v39;
  __n128 v40;
  float64x2_t v41;
  float64x2_t v42;

  v7 = a1 + 64;
  v8 = (_OWORD *)(a1 + 88);
  v9 = sub_20FC6EA84(a1, (uint64_t *)(a1 + 64), (float64x2_t *)(a1 + 88), a3, a4);
  *(_BYTE *)(a1 + 112) = v9;
  if ((v9 & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 120);
    if (v10)
    {
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v10 + 24))(v10, v8);
      v11 = *(float64x2_t **)(a1 + 120);
    }
    else
    {
      v11 = 0;
    }
    *(_OWORD *)(a1 + 72) = *v8;
    v39 = *(float64x2_t *)(a1 + 88);
    _D1 = v39.f64[1];
    __asm { FMLA            D0, D1, V2.D[1] }
    v18 = a2[2];
    v19 = a2[3] * (a2[1] * _D0);
    v20 = v19 + 1.0;
    *(long double *)(a1 + 104) = v18 * log1p(v19);
    v21.n128_f64[0] = sqrt(1.0 / v20);
    *(float64x2_t *)(a1 + 88) = vmulq_n_f64(v39, v21.n128_f64[0]);
    if (v11)
    {
      v40 = v21;
      v22 = (*(uint64_t (**)(float64x2_t *))(*(_QWORD *)&v11->f64[0] + 16))(v11);
      if (*(_BYTE *)(*(_QWORD *)v7 + 20))
      {
        switch(v22)
        {
          case 0:
            v23 = vmulq_n_f64(v11[1], v40.n128_f64[0]);
            v24 = vmulq_n_f64(v11[2], v40.n128_f64[0]);
            v25 = a3[2];
            v26 = vmlaq_laneq_f64(vmulq_n_f64(v23, a3->f64[0]), v24, *a3, 1);
            v27 = vmlaq_laneq_f64(vmulq_n_f64(v23, a3[1].f64[0]), v24, a3[1], 1);
            v28 = vmulq_n_f64(v23, v25.f64[0]);
            goto LABEL_17;
          case 1:
            v32 = vmulq_n_f64(v11[1], v40.n128_f64[0]);
            v33 = vmulq_f64(v32, *a3);
            v27 = vmulq_f64(v32, a3[1]);
            v34 = vmulq_f64(v32, a3[2]);
            *a3 = v33;
            goto LABEL_18;
          case 2:
            v35 = v40.n128_f64[0] * v11[1].f64[0];
            v36 = vmulq_n_f64(a3[2], v35);
            v37 = vmulq_n_f64(a3[1], v35);
            *a3 = vmulq_n_f64(*a3, v35);
            a3[1] = v37;
            a3[2] = v36;
            return v9;
          case 3:
            v29 = vmulq_n_f64(a3[2], v40.n128_f64[0]);
            v30 = vmulq_n_f64(a3[1], v40.n128_f64[0]);
            v31 = vmulq_n_f64(*a3, v40.n128_f64[0]);
            goto LABEL_15;
          case 4:
            (*(void (**)(float64x2_t *__return_ptr, float64x2_t *, __n128))(*(_QWORD *)&v11->f64[0] + 64))(&v41, v11, v40);
            v24 = v42;
            v25 = a3[2];
            v26 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3->f64[0]), v42, *a3, 1);
            v27 = vmlaq_laneq_f64(vmulq_n_f64(v41, a3[1].f64[0]), v42, a3[1], 1);
            v28 = vmulq_n_f64(v41, v25.f64[0]);
LABEL_17:
            v34 = vmlaq_laneq_f64(v28, v24, v25, 1);
            *a3 = v26;
LABEL_18:
            a3[1] = v27;
            a3[2] = v34;
            break;
          default:
            return v9;
        }
      }
    }
    else if (*(_BYTE *)(*(_QWORD *)v7 + 20))
    {
      v29 = vmulq_n_f64(a3[2], v21.n128_f64[0]);
      v30 = vmulq_n_f64(a3[1], v21.n128_f64[0]);
      v31 = vmulq_n_f64(*a3, v21.n128_f64[0]);
LABEL_15:
      *a3 = v31;
      a3[1] = v30;
      a3[2] = v29;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 104) = 0;
  }
  return v9;
}

void sub_20F3A2FF4(uint64_t a1, uint64_t *a2, void **a3, unsigned int a4, int a5)
{
  int v5;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int *v36;
  int64x2_t *v37;
  int64x2_t v38;
  int64x2_t v39;
  uint64_t v40;
  __int128 v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t *v44;
  int64x2_t *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int64x2_t *v51;
  __int8 *v52;
  int64x2_t *v53;
  int64x2_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int64x2_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  uint64_t v65;
  int64x2_t *v66;
  int64x2_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  unint64_t v72;
  __int8 *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int64x2_t *v80;
  int64x2_t v81;
  __int128 v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t *v85;
  unsigned int v86;
  uint64_t v87;
  int v88;

  v5 = a5;
  if (a4 <= 1 && (a5 & 1) != 0)
  {
    sub_20F3A345C(a1 + 32, a3, a2, (unsigned int **)a2, 1, 1);
    return;
  }
  v9 = 3 * *(_DWORD *)(*(_QWORD *)(a1 + 144) + 8);
  v10 = (a4 + v9 - 1) & -a4;
  *((_DWORD *)a3 + 4) = v10;
  *((_DWORD *)a3 + 5) = v10;
  v11 = v10 * (unint64_t)v10;
  v12 = v10;
  v13 = v10;
  if ((unint64_t)a3[1] < v11)
  {
    if (*a3)
      MEMORY[0x212BC6368](*a3, 0x1000C8000313F17);
    v14 = (8 * v11 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a3 = 0;
    a3[1] = (void *)(v14 >> 3);
    *a3 = operator new(v14, (std::align_val_t)0x20uLL);
    v13 = *((_DWORD *)a3 + 4);
    v12 = *((_DWORD *)a3 + 5);
  }
  if (v13 * v12)
    bzero(*a3, 8 * v13 * v12);
  v15 = v10 - v9;
  if (v10 > v9)
  {
    v86 = v9;
    v88 = v5;
    v16 = v13 - v15 + (v12 - v15) * v13;
    v17 = (char *)*a3;
    v18 = (uint64_t)*a3 + 8 * v16;
    v19 = 8 * v15;
    v87 = v15;
    v20 = v15;
    do
    {
      bzero(&v17[8 * v16], v19);
      v16 += v13;
      --v20;
    }
    while (v20);
    v5 = v88;
    if (v10 != v86)
    {
      v21 = v13 + 1;
      if (v87 < 2)
      {
        v22 = 0;
LABEL_31:
        v29 = v87 - v22;
        v30 = v21 * v22;
        do
        {
          *(_QWORD *)(v18 + 8 * v30) = 0x3FF0000000000000;
          v30 += v21;
          --v29;
        }
        while (v29);
        goto LABEL_33;
      }
      v22 = 0;
      if (v21 < 0)
        v23 = ~v13;
      else
        v23 = v13 + 1;
      v24 = (v87 - 1) * (unint64_t)v23;
      v25 = v13 != -1 && (unint64_t)(v87 - 1) >> 32 != 0;
      if ((_DWORD)v24)
        v26 = v21 < 0;
      else
        v26 = 0;
      if (v26)
        goto LABEL_31;
      if ((v24 & 0xFFFFFFFF00000000) != 0)
        goto LABEL_31;
      if (v25)
        goto LABEL_31;
      v27 = 0;
      v22 = v87 & 0xFFFFFFFE;
      v28 = v22;
      do
      {
        *(_QWORD *)(v18 + 8 * v27) = 0x3FF0000000000000;
        *(_QWORD *)(v18 + 8 * (v21 + v27)) = 0x3FF0000000000000;
        v27 += 2 * v13 + 2;
        v28 -= 2;
      }
      while (v28);
      if (v22 != v87)
        goto LABEL_31;
    }
  }
LABEL_33:
  v31 = *(unsigned int *)(a1 + 44);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 44))
    {
      v32 = 0;
      v33 = (unsigned int *)*a2;
      do
      {
        v34 = *(_QWORD *)(a1 + 120) + 24 * v32;
        v35 = *(unsigned int **)v34;
        v36 = *(unsigned int **)(v34 + 8);
        if (v35 != v36)
        {
          do
          {
            while (1)
            {
              v46 = *v33;
              v47 = *(_DWORD *)(*a2 + 4 * *v35);
              v48 = *((unsigned int *)a3 + 4);
              v49 = (char *)*a3;
              v50 = *(_QWORD *)(a1 + 48) + 8 * *((_QWORD *)v35 + 1);
              if (*v33 >= v47)
                break;
              v37 = (int64x2_t *)&v49[8 * v46 + 8 * (_DWORD)v48 * v47];
              v38.i64[0] = *(_QWORD *)(v50 + 16);
              v39 = *(int64x2_t *)(v50 + 24);
              v40 = *(_QWORD *)(v50 + 64);
              v41 = *(_OWORD *)(v50 + 48);
              v42 = vzip1q_s64(*(int64x2_t *)v50, v39);
              v43 = vzip2q_s64(*(int64x2_t *)v50, v39);
              v38.i64[1] = *(_QWORD *)(v50 + 40);
              v37[1].i64[0] = v41;
              *v37 = v42;
              v44 = (int64x2_t *)((char *)v37 + 8 * v48);
              *v44 = v43;
              v44[1].i64[0] = *((_QWORD *)&v41 + 1);
              v45 = &v37[v48];
              v45[1].i64[0] = v40;
              *v45 = v38;
              v35 += 4;
              if (v35 == v36)
                goto LABEL_36;
            }
            v51 = (int64x2_t *)&v49[8 * v47 + 8 * (_DWORD)v48 * v46];
            v52 = &v51->i8[8 * v48];
            v53 = &v51[v48];
            if ((char *)v50 == v49)
            {
              v54 = *(int64x2_t *)v49;
              v55 = *((_QWORD *)v49 + 2);
              v56 = *(_OWORD *)(v49 + 24);
              v57 = *((_QWORD *)v49 + 5);
              v58 = *((int64x2_t *)v49 + 3);
              v59 = *((_QWORD *)v49 + 8);
            }
            else
            {
              v54 = *(int64x2_t *)v50;
              v55 = *(_QWORD *)(v50 + 16);
              v56 = *(_OWORD *)(v50 + 24);
              v57 = *(_QWORD *)(v50 + 40);
              v58 = *(int64x2_t *)(v50 + 48);
              v59 = *(_QWORD *)(v50 + 64);
            }
            v51[1].i64[0] = v55;
            *v51 = v54;
            *((_QWORD *)v52 + 2) = v57;
            *(_OWORD *)v52 = v56;
            v53[1].i64[0] = v59;
            *v53 = v58;
            v35 += 4;
          }
          while (v35 != v36);
LABEL_36:
          v31 = *(unsigned int *)(a1 + 44);
        }
        ++v32;
        ++v33;
      }
      while (v32 < v31);
    }
  }
  else if (*(_DWORD *)(a1 + 44))
  {
    v60 = 0;
    v61 = (unsigned int *)*a2;
    do
    {
      v62 = *(_QWORD *)(a1 + 120) + 24 * v60;
      v63 = *(unsigned int **)v62;
      v64 = *(unsigned int **)(v62 + 8);
      if (v63 != v64)
      {
        do
        {
          v75 = *v61;
          v76 = *(_DWORD *)(*a2 + 4 * *v63);
          v77 = *(_QWORD *)(a1 + 48) + 8 * *((_QWORD *)v63 + 1);
          v78 = *((unsigned int *)a3 + 4);
          v79 = (char *)*a3;
          if (*v61 < v76)
          {
            v65 = v76 + (_DWORD)v78 * v75;
            v66 = (int64x2_t *)&v79[8 * v65];
            v67 = *(int64x2_t *)v77;
            v68 = *(_OWORD *)(v77 + 24);
            v69 = *(_QWORD *)(v77 + 40);
            v70 = *(_QWORD *)(v77 + 64);
            v71 = *(int8x16_t *)(v77 + 48);
            v72 = vextq_s8(v71, v71, 8uLL).u64[0];
            v66[1].i64[0] = *(_QWORD *)(v77 + 16);
            *v66 = v67;
            v73 = &v66->i8[8 * v78];
            *((_QWORD *)v73 + 2) = v69;
            *(_OWORD *)v73 = v68;
          }
          else
          {
            v65 = v75 + (_DWORD)v78 * v76;
            v80 = (int64x2_t *)&v79[8 * v65];
            v71.i64[0] = *(_QWORD *)(v77 + 16);
            v72 = *(_QWORD *)(v77 + 40);
            v81 = *(int64x2_t *)(v77 + 24);
            v70 = *(_QWORD *)(v77 + 64);
            v82 = *(_OWORD *)(v77 + 48);
            v83 = vzip1q_s64(*(int64x2_t *)v77, v81);
            v84 = vzip2q_s64(*(int64x2_t *)v77, v81);
            v80[1].i64[0] = v82;
            *v80 = v83;
            v85 = (int64x2_t *)((char *)v80 + 8 * v78);
            *v85 = v84;
            v85[1].i64[0] = *((_QWORD *)&v82 + 1);
          }
          v74 = (uint64_t)&v79[16 * v78 + 8 * v65];
          *(_QWORD *)(v74 + 16) = v70;
          v71.i64[1] = v72;
          *(int8x16_t *)v74 = v71;
          v63 += 4;
        }
        while (v63 != v64);
        v31 = *(unsigned int *)(a1 + 44);
      }
      ++v60;
      ++v61;
    }
    while (v60 < v31);
  }
}

void sub_20F3A345C(uint64_t a1, void **a2, uint64_t *a3, unsigned int **a4, int a5, char a6)
{
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  size_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *i;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  int64x2_t *v35;
  int64x2_t v36;
  int64x2_t v37;
  uint64_t v38;
  __int128 v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t *v42;
  int64x2_t *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;

  v12 = *(_QWORD *)(a1 + 112);
  v13 = 3 * *(_DWORD *)(v12 + 8);
  LODWORD(v12) = 3 * *(_DWORD *)(v12 + 12);
  *((_DWORD *)a2 + 4) = v13;
  *((_DWORD *)a2 + 5) = v12;
  v14 = v12 * (unint64_t)v13;
  if ((unint64_t)a2[1] < v14)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v15 = (8 * v14 + 31) & 0xFFFFFFFFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v15 >> 3);
    *a2 = operator new(v15, (std::align_val_t)0x20uLL);
  }
  if (a5)
  {
    v16 = *((_DWORD *)a2 + 5);
    if (v16 * *((_DWORD *)a2 + 4))
      bzero(*a2, 8 * (v16 * *((_DWORD *)a2 + 4)));
  }
  v17 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v17)
  {
    v18 = 0;
    for (i = *a4; ; ++i)
    {
      v20 = *(_QWORD *)(a1 + 88) + 24 * v18;
      v21 = *(unsigned int **)v20;
      v22 = *(unsigned int **)(v20 + 8);
      if (v21 != v22)
        break;
LABEL_11:
      if (++v18 >= v17)
        return;
    }
    while (1)
    {
      v29 = *v21;
      v30 = *a3;
      if ((a6 & 1) == 0)
        break;
      v31 = *i;
      v32 = *(_DWORD *)(v30 + 4 * v29);
      v29 = *((unsigned int *)a2 + 4);
      v33 = (char *)*a2;
      if (*i >= v32)
      {
LABEL_21:
        v44 = *(_QWORD *)(a1 + 16) + 8 * *((_QWORD *)v21 + 1);
        v45 = &v33[8 * v32 + 8 * v31 * (_DWORD)v29];
        v46 = &v45[8 * v29];
        v47 = &v45[16 * v29];
        if ((char *)v44 == v33)
        {
          v23 = *(_OWORD *)v33;
          v24 = *((_QWORD *)v33 + 2);
          v25 = *(_OWORD *)(v33 + 24);
          v26 = *((_QWORD *)v33 + 5);
          v27 = *((_OWORD *)v33 + 3);
          v28 = *((_QWORD *)v33 + 8);
        }
        else
        {
          v23 = *(_OWORD *)v44;
          v24 = *(_QWORD *)(v44 + 16);
          v25 = *(_OWORD *)(v44 + 24);
          v26 = *(_QWORD *)(v44 + 40);
          v27 = *(_OWORD *)(v44 + 48);
          v28 = *(_QWORD *)(v44 + 64);
        }
        *((_QWORD *)v45 + 2) = v24;
        *(_OWORD *)v45 = v23;
        *((_QWORD *)v46 + 2) = v26;
        *(_OWORD *)v46 = v25;
        *((_QWORD *)v47 + 2) = v28;
        *(_OWORD *)v47 = v27;
        v21 += 4;
        if (v21 == v22)
        {
LABEL_10:
          v17 = *(unsigned int *)(a1 + 12);
          goto LABEL_11;
        }
      }
      else
      {
        v34 = *(_QWORD *)(a1 + 16) + 8 * *((_QWORD *)v21 + 1);
        v35 = (int64x2_t *)&v33[8 * v31 + 8 * (_DWORD)v29 * v32];
        v36.i64[0] = *(_QWORD *)(v34 + 16);
        v37 = *(int64x2_t *)(v34 + 24);
        v38 = *(_QWORD *)(v34 + 64);
        v39 = *(_OWORD *)(v34 + 48);
        v40 = vzip1q_s64(*(int64x2_t *)v34, v37);
        v41 = vzip2q_s64(*(int64x2_t *)v34, v37);
        v36.i64[1] = *(_QWORD *)(v34 + 40);
        v35[1].i64[0] = v39;
        *v35 = v40;
        v42 = (int64x2_t *)((char *)v35 + 8 * v29);
        v42[1].i64[0] = *((_QWORD *)&v39 + 1);
        *v42 = v41;
        v43 = &v35[v29];
        v43[1].i64[0] = v38;
        *v43 = v36;
        v21 += 4;
        if (v21 == v22)
          goto LABEL_10;
      }
    }
    v32 = *(_DWORD *)(v30 + 4 * v29);
    v31 = *i;
    LODWORD(v29) = *((_DWORD *)a2 + 4);
    v33 = (char *)*a2;
    goto LABEL_21;
  }
}

BOOL sub_20F3A3680(uint64_t a1, double *a2)
{
  uint64_t v3;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  unint64_t v8;
  void *v9;
  int v10;
  size_t v11;
  _DWORD *v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float64x2_t *v18;
  uint64_t v19;
  float64x2_t v20;
  float64x2_t *v21;
  void **v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  size_t v28;
  unsigned int v29;
  uint64_t v30;
  double *v31;
  double *v32;
  double *v33;
  double v34;
  double *v35;
  unint64_t v36;
  double *v37;
  unint64_t v38;
  uint64_t v39;
  float64x2_t *v40;
  float64x2_t *v41;
  uint64_t v42;
  float64x2_t v43;
  float64x2_t v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  float64x2_t *v51;
  uint64_t i;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  double v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  double *v61;
  double *v62;
  double v63;
  double v64;
  double *v65;
  uint64_t v66;
  float64x2_t *v67;
  float64x2_t *v68;
  float64x2_t v69;
  float64x2_t v70;
  double *v71;
  double v72;
  double v73;
  double v74;
  float64x2_t *v75;
  BOOL v76;
  BOOL v77;
  BOOL v79;
  float64x2_t *v80;
  double v81;
  float64x2_t *v82;
  uint64_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t *v91;
  uint64_t v93;
  float64x2_t v94;
  float64x2_t v95;

  v3 = (*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) & 0x3FFFFFFFCLL;
  if (!v3)
  {
    *a2 = 0.0;
    return v3 != 0;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v8 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 528))
  {
    v9 = *(void **)(a1 + 512);
  }
  else
  {
    *(_DWORD *)(a1 + 528) = v8;
    v9 = *(void **)(a1 + 512);
    if (*(_QWORD *)(a1 + 520) < v8)
    {
      v10 = v8;
      if (v9)
      {
        MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
        v10 = *(_DWORD *)(a1 + 528);
      }
      *(_QWORD *)(a1 + 512) = 0;
      v11 = (8 * v8 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)(a1 + 520) = v11 >> 3;
      v9 = operator new(v11, (std::align_val_t)0x20uLL);
      *(_QWORD *)(a1 + 512) = v9;
      LODWORD(v8) = v10;
    }
  }
  if ((_DWORD)v8)
    bzero(v9, 8 * v8);
  v12 = *(_DWORD **)(a1 + 184);
  v13 = *(_DWORD **)(a1 + 192);
  if (v12 != v13)
  {
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(v5 + 8);
    do
    {
      v16 -= 16;
      do
      {
        v17 = *(_DWORD *)(v16 + 16);
        v16 += 16;
      }
      while (*v12 != v17);
      v18 = *(float64x2_t **)(v16 + 8);
      v19 = 8 * v14;
      v6.f64[0] = v18[3].f64[0];
      v7.f64[0] = *(float64_t *)(v15 + v19 + 16);
      v6 = vsubq_f64(v6, v7);
      v20 = vsubq_f64(v18[2], *(float64x2_t *)(v15 + v19));
      v21 = (float64x2_t *)(*(_QWORD *)(a1 + 512) + v19);
      *v21 = v20;
      v21[1].f64[0] = v6.f64[0];
      v14 += 3;
      ++v12;
    }
    while (v12 != v13);
  }
  v22 = (void **)(a1 + 416);
  v23 = *(_QWORD *)(a1 + 176);
  v24 = *(_DWORD *)(v23 + 12);
  v25 = 3 * *(_DWORD *)(v23 + 8);
  v26 = 3 * v24;
  *(_DWORD *)(a1 + 432) = v25;
  *(_DWORD *)(a1 + 436) = 3 * v24;
  v27 = (3 * v24) * (unint64_t)v25;
  if (*(_QWORD *)(a1 + 424) < v27)
  {
    if (*v22)
      MEMORY[0x212BC6368](*v22, 0x1000C8000313F17);
    v28 = (8 * v27 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = v28 >> 3;
    *(_QWORD *)(a1 + 416) = operator new(v28, (std::align_val_t)0x20uLL);
    v25 = *(_DWORD *)(a1 + 432);
    v26 = *(_DWORD *)(a1 + 436);
  }
  v29 = v25 * v26;
  if (v29)
    bzero(*v22, 8 * v29);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 64) + 64))(a1 + 64, a1 + 416, 0);
  sub_20F20B6B0(a1 + 416);
  v30 = *(unsigned int *)(a1 + 528);
  if (!(_DWORD)v30)
  {
    *a2 = -0.0;
    return v3 != 0;
  }
  v31 = *(double **)(a1 + 512);
  v32 = *(double **)(a1 + 32);
  v33 = &v31[v30];
  v34 = *v31 * *v32;
  if ((_DWORD)v30 != 1)
  {
    v35 = v31 + 1;
    v36 = (v30 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    if (v36 < 3)
    {
      v37 = *(double **)(a1 + 32);
LABEL_30:
      v45 = v37 + 1;
      do
      {
        v46 = *v35++;
        v47 = v46;
        v48 = *v45++;
        v34 = v34 + v47 * v48;
      }
      while (v35 != v33);
      goto LABEL_32;
    }
    v38 = v36 + 1;
    v39 = (v36 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    v35 += v39;
    v37 = &v32[v39];
    v40 = (float64x2_t *)(v32 + 3);
    v41 = (float64x2_t *)(v31 + 3);
    v42 = v39;
    do
    {
      v43 = vmulq_f64(v41[-1], v40[-1]);
      v44 = vmulq_f64(*v41, *v40);
      v34 = v34 + v43.f64[0] + v43.f64[1] + v44.f64[0] + v44.f64[1];
      v40 += 2;
      v41 += 2;
      v42 -= 4;
    }
    while (v42);
    if (v38 != v39)
      goto LABEL_30;
  }
LABEL_32:
  v49 = -v34;
  *a2 = v49;
  v50 = *(unsigned int *)(a1 + 432);
  if (!(_DWORD)v50)
  {
    if (v30 >= 4 && (v33 <= a2 || v31 >= a2 + 1))
    {
      v53 = v30 & 0xFFFFFFFC;
      v91 = (float64x2_t *)(v31 + 2);
      __asm { FMOV            V1.2D, #0.5 }
      v93 = v53;
      do
      {
        v94 = vmulq_f64(vmulq_f64(v91[-1], _Q1), (float64x2_t)0);
        v95 = vmulq_f64(vmulq_f64(*v91, _Q1), (float64x2_t)0);
        v49 = v49 + v94.f64[0] + v94.f64[1] + v95.f64[0] + v95.f64[1];
        v91 += 2;
        v93 -= 4;
      }
      while (v93);
      *a2 = v49;
      if (v53 == v30)
        return v3 != 0;
    }
    else
    {
      v53 = 0;
    }
    v54 = v30 - v53;
    v55 = &v31[v53];
    do
    {
      v56 = *v55++;
      v49 = v49 + v56 * 0.5 * 0.0;
      *a2 = v49;
      --v54;
    }
    while (v54);
    return v3 != 0;
  }
  v51 = *(float64x2_t **)(a1 + 416);
  if ((_DWORD)v50 != 1)
  {
    v57 = 0;
    v58 = 0;
    v59 = (v50 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
    v60 = (v59 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v61 = &v51->f64[(v50 * v58)];
      v63 = *v61;
      v62 = v61 + 1;
      v64 = v63 * *v31;
      if (v59 >= 3)
      {
        v62 += v60;
        v66 = (v59 + 1) & 0x3FFFFFFFFFFFFFFCLL;
        v67 = (float64x2_t *)(v31 + 3);
        v68 = (float64x2_t *)((char *)v51 + 8 * v57 + 24);
        do
        {
          v69 = vmulq_f64(v68[-1], v67[-1]);
          v70 = vmulq_f64(*v68, *v67);
          v64 = v64 + v69.f64[0] + v69.f64[1] + v70.f64[0] + v70.f64[1];
          v67 += 2;
          v68 += 2;
          v66 -= 4;
        }
        while (v66);
        v65 = &v31[v60];
        if (v59 + 1 == v60)
          goto LABEL_44;
      }
      else
      {
        v65 = v31;
      }
      v71 = v65 + 1;
      do
      {
        v72 = *v62++;
        v73 = v72;
        v74 = *v71++;
        v64 = v64 + v73 * v74;
      }
      while (v62 != &v51->f64[(v50 * v58) + v50]);
LABEL_44:
      v49 = v49 + v31[v58] * 0.5 * v64;
      *a2 = v49;
      ++v58;
      v57 += v50;
      if (v58 == v30)
        return v3 != 0;
    }
  }
  if (v30 < 0xA)
  {
    for (i = 0; i != v30; ++i)
    {
LABEL_69:
      v49 = v49 + v31[i] * 0.5 * (v51->f64[i] * *v31);
      *a2 = v49;
    }
    return v3 != 0;
  }
  i = 0;
  v75 = (float64x2_t *)(a2 + 1);
  v76 = v31 + 1 > a2;
  v77 = v33 > a2;
  if (v31 >= a2 + 1)
    v76 = 0;
  if (v31 >= (double *)v75)
    v77 = 0;
  v79 = &v51->f64[v30] > a2 && v51 < v75;
  if (v76)
    goto LABEL_69;
  if (v77)
    goto LABEL_69;
  if (v79)
    goto LABEL_69;
  i = v30 & 0xFFFFFFFC;
  v80 = (float64x2_t *)(v31 + 2);
  v81 = *v31;
  v82 = v51 + 1;
  __asm { FMOV            V2.2D, #0.5 }
  v87 = i;
  do
  {
    v88 = vmulq_f64(vmulq_f64(v80[-1], _Q2), vmulq_n_f64(v82[-1], v81));
    v89 = vmulq_f64(vmulq_f64(*v80, _Q2), vmulq_n_f64(*v82, v81));
    v49 = v49 + v88.f64[0] + v88.f64[1] + v89.f64[0] + v89.f64[1];
    v80 += 2;
    v82 += 2;
    v87 -= 4;
  }
  while (v87);
  *a2 = v49;
  if (i != v30)
    goto LABEL_69;
  return v3 != 0;
}

void sub_20F3A3C00(uint64_t a1, void **a2, _QWORD *a3, int a4)
{
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;

  v8 = (3 * *(_DWORD *)(*(_QWORD *)(a1 + 112) + 8));
  *((_DWORD *)a2 + 4) = v8;
  if ((unint64_t)a2[1] < v8)
  {
    if (*a2)
      MEMORY[0x212BC6368](*a2, 0x1000C8000313F17);
    v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
    *a2 = 0;
    a2[1] = (void *)(v9 >> 3);
    *a2 = operator new(v9, (std::align_val_t)0x20uLL);
  }
  if (a4)
  {
    v10 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v10)
      bzero(*a2, 8 * v10);
  }
  if (*a3 != a3[1])
  {
    v11 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = *(uint64_t **)(a1 + 88);
      v14 = *v13;
      v15 = v13[1];
      if (v14 != v15)
        goto LABEL_15;
LABEL_13:
      while (++v12 < v11)
      {
        v16 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 24 * v12);
        v14 = *v16;
        v15 = v16[1];
        if (v14 != v15)
        {
LABEL_15:
          while (v12 != *(_DWORD *)v14)
          {
            v14 += 16;
            if (v14 == v15)
              goto LABEL_13;
          }
          if (v12 >= (uint64_t)(a3[1] - *a3) >> 2)
            sub_20EDB40C4();
          v17 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(_QWORD *)(v14 + 8));
          v18 = (uint64_t)*a2 + 8 * *(unsigned int *)(*a3 + 4 * v12);
          *(_QWORD *)&v19 = *v17;
          if (v17 == *a2)
          {
            *((_QWORD *)&v19 + 1) = v17[4];
            *(_QWORD *)(v18 + 16) = v17[8];
            *(_OWORD *)v18 = v19;
            v11 = *(unsigned int *)(a1 + 12);
          }
          else
          {
            *(_QWORD *)v18 = v19;
            *(_QWORD *)(v18 + 8) = v17[4];
            *(_QWORD *)(v18 + 16) = v17[8];
          }
        }
      }
    }
  }
}

BOOL sub_20F3A3D84(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  a1[3] = *(_QWORD *)(a2 + 520) + 152;
  a1[4] = a2 + 560;
  v2 = *(_DWORD *)(a2 + 1264);
  if (v2)
  {
    a1[3] = 0;
    a1[4] = 0;
    return v2 == 0;
  }
  v5 = *(unsigned int *)(a2 + 1288);
  v6 = operator new((8 * (v5 * v5) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v7 = v6;
  if ((_DWORD)v5 * (_DWORD)v5)
    bzero(v6, 8 * (v5 * v5));
  if ((_DWORD)v5)
  {
    v8 = v5 + 1;
    if ((_DWORD)v5 == 1)
    {
      v9 = 0;
    }
    else
    {
      v9 = 0;
      if (v8 < 0)
        v10 = ~(_DWORD)v5;
      else
        v10 = v5 + 1;
      v11 = (v5 - 1) * (unint64_t)v10;
      v12 = (_DWORD)v5 != -1 && (unint64_t)(v5 - 1) >> 32 != 0;
      if ((_DWORD)v11)
        v13 = v8 < 0;
      else
        v13 = 0;
      if (!v13 && (v11 & 0xFFFFFFFF00000000) == 0 && !v12)
      {
        v14 = 0;
        v9 = v5 & 0xFFFFFFFE;
        v15 = v9;
        do
        {
          v7[v14] = 0x3FF0000000000000;
          v7[v8 + v14] = 0x3FF0000000000000;
          v14 += 2 * v5 + 2;
          v15 -= 2;
        }
        while (v15);
        if (v9 == v5)
          goto LABEL_25;
      }
    }
    v16 = v5 - v9;
    v17 = v8 * v9;
    do
    {
      v7[v17] = 0x3FF0000000000000;
      v17 += v8;
      --v16;
    }
    while (v16);
  }
LABEL_25:
  if (*(_DWORD *)(a2 + 1292))
    sub_20E8BE8E4();
  v18 = *a1;
  *a1 = (uint64_t)v7;
  a1[1] = ((8 * (v5 * v5) + 31) & 0xFFFFFFFE0uLL) >> 3;
  *((_DWORD *)a1 + 4) = v5;
  *((_DWORD *)a1 + 5) = v5;
  if (v18)
    MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
  return v2 == 0;
}

void sub_20F3A3F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3A3F3C(uint64_t a1)
{
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  double *v9;
  double v11;
  float64x2_t v14;
  double v20;
  double v21;
  double v23;
  uint64_t v32;
  double v33;
  int8x16_t v34;
  double v35;
  double v36;
  unint64_t v37;
  float64x2_t v38;
  float64x2_t v42;
  float64x2_t v43;
  double v45;

  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(uint64_t **)(v4 + 96);
      v6 = *v5;
      v7 = (double *)v5[2];
      v8 = v5[4];
      v9 = (double *)v5[6];
      _D1 = *(double *)(v4 + 16) - v7[1];
      v11 = *(double *)(v4 + 24) - v7[2];
      _Q3.f64[0] = *(float64_t *)(v6 + 16);
      _Q7 = *(_OWORD *)(v6 + 48);
      _Q3.f64[1] = *(float64_t *)(v6 + 40);
      v14 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v6, *(int64x2_t *)(v6 + 24)), *(double *)(v4 + 8) - *v7), (float64x2_t)vzip2q_s64(*(int64x2_t *)v6, *(int64x2_t *)(v6 + 24)), _D1), _Q3, v11);
      __asm { FMLA            D2, D1, V7.D[1] }
      v20 = _D2 + *(double *)(v6 + 64) * v11;
      v21 = v14.f64[0] - *v9;
      _D2 = v14.f64[1] - v9[1];
      v23 = v20 - v9[2];
      _Q3.f64[0] = *(float64_t *)(v8 + 16);
      _Q4 = *(int64x2_t *)v8;
      _Q6 = *(int64x2_t *)(v8 + 24);
      _Q16 = *(_OWORD *)(v8 + 48);
      __asm { FMLA            D18, D2, V4.D[1] }
      _Q3.f64[1] = *(float64_t *)(v8 + 40);
      _Q17 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v8, _Q6), v21), (float64x2_t)vzip2q_s64(*(int64x2_t *)v8, _Q6), _D2), _Q3, v23);
      __asm
      {
        FMLA            D3, D2, V16.D[1]
        FMLA            D1, D2, V6.D[1]
      }
      _D1 = _D1 + v23 * _Q3.f64[1];
      __asm { FMLA            D2, D1, V17.D[1] }
      *(double *)(a1 + 16) = sqrt(_D2+ (_Q3.f64[0] + v23 * *(double *)(v8 + 64)) * (_Q3.f64[0] + *(double *)(v8 + 64) * v23));
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v32 = *(_QWORD *)(v4 + 80);
      v34 = *(int8x16_t *)(v4 + 64);
      *(int8x16_t *)(a1 + 88) = v34;
      *(_QWORD *)(a1 + 104) = v32;
      v33 = *(double *)(v4 + 64);
      v34.i64[0] = *(_QWORD *)(v4 + 72);
      if (fabs(v33) <= fabs(*(double *)v34.i64))
      {
        _Q0 = *(float64x2_t *)(v4 + 72);
        _Q2 = vmulq_f64(_Q0, _Q0);
        _D3 = *(double *)(v4 + 80);
        __asm { FMLA            D2, D3, V0.D[1] }
        _Q0.f64[0] = sqrt(_Q2.f64[0]);
        _Q2.f64[0] = _D3 / _Q0.f64[0];
        *(double *)v34.i64 = -*(double *)v34.i64 / _Q0.f64[0];
        v38.f64[0] = 0.0;
        v38.f64[1] = _Q2.f64[0];
      }
      else
      {
        v35 = *(double *)(v4 + 80);
        v36 = sqrt(v33 * v33 + v35 * v35);
        *(double *)&v37 = -v35 / v36;
        *(double *)v34.i64 = v33 / v36;
        v38 = (float64x2_t)v37;
      }
      _Q2.f64[0] = *(float64_t *)(v4 + 80);
      _Q3 = *(float64x2_t *)(v4 + 64);
      *(_QWORD *)&v42.f64[0] = v34.i64[0];
      v42.f64[1] = v38.f64[0];
      v43 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)_Q2, 8uLL), v42);
      _Q2.f64[1] = *(float64_t *)(v4 + 64);
      _Q2 = (int8x16_t)vsubq_f64(v43, vmulq_f64(_Q2, (float64x2_t)vextq_s8((int8x16_t)v38, v34, 8uLL)));
      *(int64x2_t *)(a1 + 56) = vzip1q_s64((int64x2_t)v34, (int64x2_t)_Q2);
      *(int8x16_t *)(a1 + 72) = vextq_s8(_Q2, (int8x16_t)vsubq_f64(vmulq_laneq_f64(_Q3, v38, 1), vmulq_laneq_f64(v38, _Q3, 1)), 8uLL);
      *(float64x2_t *)(a1 + 40) = v38;
      v45 = *(double *)(a1 + 104) + *(double *)(a1 + 56) * 0.0 + *(double *)(a1 + 80) * 0.0;
      _Q3.f64[0] = vaddq_f64(*(float64x2_t *)(a1 + 88), vmlaq_f64(vmulq_f64(v38, (float64x2_t)0), (float64x2_t)0, *(float64x2_t *)(a1 + 64))).f64[1];
      __asm { FMLA            D2, D3, V0.D[1] }
      if (fabs(sqrt(*(double *)_Q2.i64 + v45 * v45) + -1.0) > 0.000001
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 486, (uint64_t)"std::fabs(anchor_direction().norm2() - 1) <= 1e-6", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      return 1;
    }
  }
  return result;
}

char *sub_20F3A41D0(uint64_t a1, int *a2)
{
  char *v3;
  char **v4;
  __int128 *v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unsigned int *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  unsigned int v40;
  __int128 v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v5 = *(__int128 **)(a1 + 8);
  v3 = *(char **)(a1 + 16);
  v4 = (char **)(a1 + 8);
  v6 = *a2;
  if (v3 == (char *)v5)
  {
    v5 = *(__int128 **)(a1 + 16);
    goto LABEL_11;
  }
  v7 = (v3 - (char *)v5) >> 4;
  do
  {
    v8 = v7 >> 1;
    v9 = &v5[v7 >> 1];
    v11 = *(_DWORD *)v9;
    v10 = v9 + 1;
    v7 += ~(v7 >> 1);
    if (v11 < v6)
      v5 = v10;
    else
      v7 = v8;
  }
  while (v7);
  if (v3 == (char *)v5 || v6 != *(_DWORD *)v5)
  {
LABEL_11:
    v12 = *((unsigned __int8 *)a2 + 4);
    v13 = *(_QWORD *)a2;
    v14 = *((_QWORD *)a2 + 1);
    v42 = *((_OWORD *)a2 + 1);
    v43 = *((_QWORD *)a2 + 4);
    v15 = *(_OWORD *)(a2 + 14);
    v16 = *(_OWORD *)(a2 + 22);
    v48 = *(_OWORD *)(a2 + 18);
    v49 = v16;
    v50 = *((_QWORD *)a2 + 13);
    v46 = *(_OWORD *)(a2 + 10);
    v47 = v15;
    if (v3 == (char *)v5 || v6 != *(_DWORD *)v5)
    {
      v17 = sub_20F3A4718(a1 + 32);
      *(_OWORD *)(v17 + 32) = v42;
      v18 = v46;
      *(_OWORD *)(v17 + 72) = v47;
      v19 = v49;
      *(_OWORD *)(v17 + 88) = v48;
      *(_OWORD *)(v17 + 104) = v19;
      *(_DWORD *)v17 = -1;
      *(_BYTE *)(v17 + 4) = 1;
      *(_DWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = v13;
      *(_QWORD *)(v17 + 24) = v14;
      *(_QWORD *)(v17 + 48) = v43;
      *(_QWORD *)(v17 + 120) = v50;
      *(_OWORD *)(v17 + 56) = v18;
      v44 = v6;
      v45 = v17;
      v3 = sub_20F3A44B0(v4, v5, (uint64_t)&v44);
    }
    if (!v12)
      goto LABEL_37;
    v21 = *(char **)(a1 + 216);
    v20 = *(_QWORD *)(a1 + 224);
    if ((unint64_t)v21 < v20)
    {
      *(_DWORD *)v21 = v6;
      v22 = (uint64_t)(v21 + 4);
LABEL_36:
      *(_QWORD *)(a1 + 216) = v22;
LABEL_37:
      *(_BYTE *)(a1 + 154) = 0;
      *(_BYTE *)(a1 + 152) = 0;
      return v3;
    }
    v23 = *(char **)(a1 + 208);
    v24 = (v21 - v23) >> 2;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 62)
      sub_20E867F44();
    v26 = v20 - (_QWORD)v23;
    if (v26 >> 1 > v25)
      v25 = v26 >> 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 62)
        sub_20E877A38();
      v28 = operator new(4 * v27);
      v29 = (unsigned int *)&v28[4 * v24];
      v30 = &v28[4 * v27];
      *v29 = v6;
      v22 = (uint64_t)(v29 + 1);
      v31 = v21 - v23;
      if (v21 == v23)
        goto LABEL_34;
    }
    else
    {
      v28 = 0;
      v29 = (unsigned int *)(4 * v24);
      v30 = 0;
      *(_DWORD *)(4 * v24) = v6;
      v22 = 4 * v24 + 4;
      v31 = v21 - v23;
      if (v21 == v23)
      {
LABEL_34:
        *(_QWORD *)(a1 + 208) = v29;
        *(_QWORD *)(a1 + 216) = v22;
        *(_QWORD *)(a1 + 224) = v30;
        if (v23)
          operator delete(v23);
        goto LABEL_36;
      }
    }
    v32 = v31 - 4;
    if (v32 < 0x2C)
      goto LABEL_43;
    if ((unint64_t)(v23 - v28) < 0x20)
      goto LABEL_43;
    v33 = (v32 >> 2) + 1;
    v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
    v35 = &v21[-v34];
    v29 = (unsigned int *)((char *)v29 - v34);
    v36 = &v28[4 * v24 - 16];
    v37 = v21 - 16;
    v38 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 8;
    }
    while (v38);
    v21 = v35;
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_43:
      do
      {
        v40 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *--v29 = v40;
      }
      while (v21 != v23);
    }
    goto LABEL_34;
  }
  return v3;
}

char *sub_20F3A44B0(char **a1, __int128 *a2, uint64_t a3)
{
  unint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  char *v30;
  __int128 *i;
  __int128 v32;
  char *v33;

  v6 = (__int128 *)*a1;
  v5 = (unint64_t)a1[1];
  v7 = (char *)a2 - *a1;
  v8 = v7 >> 4;
  v9 = (__int128 *)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (__int128 *)v5)
    {
      *v9 = *(_OWORD *)a3;
      a1[1] = (char *)(v9 + 1);
    }
    else
    {
      v11 = v9 + 1;
      v12 = (__int128 *)(v5 - 16);
      v13 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          v14 = *v12++;
          *(_OWORD *)v13 = v14;
          v13 += 16;
        }
        while ((unint64_t)v12 < v5);
      }
      a1[1] = v13;
      if ((_OWORD *)v5 != v11)
      {
        v15 = (uint64_t)(v5 - (_QWORD)v11) >> 4;
        v16 = (_QWORD *)(v5 - 8);
        v17 = v15;
        do
        {
          *((_DWORD *)v16 - 2) = v9[v17 - 1];
          *v16 = *((_QWORD *)&v9[v17 - 1] + 1);
          v16 -= 2;
          --v17;
        }
        while (v17 * 16);
      }
      *(_DWORD *)v9 = *(_DWORD *)a3;
      *((_QWORD *)&v6[v8] + 1) = *(_QWORD *)(a3 + 8);
    }
    return (char *)v9;
  }
  v18 = ((uint64_t)(v5 - (_QWORD)v6) >> 4) + 1;
  if (v18 >> 60)
    sub_20E867F44();
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 3 > v18)
    v18 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v18;
  if (v21)
  {
    if (v21 >> 60)
      sub_20E877A38();
    v22 = (char *)operator new(16 * v21);
    v23 = &v22[16 * v8];
    v24 = &v22[16 * v21];
    if (v8 != v21)
      goto LABEL_31;
    goto LABEL_21;
  }
  v22 = 0;
  v23 = (char *)(16 * v8);
  v24 = 0;
  if (!v8)
  {
LABEL_21:
    if (v7 < 1)
    {
      if (v6 == a2)
        v26 = 1;
      else
        v26 = v7 >> 3;
      if (v26 >> 60)
        sub_20E877A38();
      v23 = (char *)operator new(16 * v26);
      v24 = &v23[16 * v26];
      if (v22)
      {
        operator delete(v22);
        v24 = &v23[16 * v26];
        v6 = (__int128 *)*a1;
      }
    }
    else
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v23 -= 16 * (v25 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v27 = v23 + 16;
  v28 = v23;
  if (v6 != v9)
  {
    v29 = v9;
    v30 = v23;
    do
    {
      v28 = v30 - 16;
      *((_OWORD *)v30 - 1) = *--v29;
      v30 -= 16;
    }
    while (v29 != v6);
  }
  for (i = (__int128 *)a1[1]; v9 != i; v27 += 16)
  {
    v32 = *v9++;
    *(_OWORD *)v27 = v32;
  }
  v33 = *a1;
  *a1 = v28;
  a1[1] = v27;
  a1[2] = v24;
  if (v33)
    operator delete(v33);
  return v23;
}

void sub_20F3A4700(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3A4718(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char **v9;
  void *v10;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 48) != v2)
  {
    result = *(_QWORD *)(v2 - 8);
    *(_QWORD *)(a1 + 56) = v2 - 8;
    return result;
  }
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    if (v5 < 8 << (v4 - 1))
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * (v4 - 1));
      *(_QWORD *)(a1 + 40) = v5 + 1;
      return v6 + 152 * v5;
    }
    v7 = 152 * (16 << (v4 - 1));
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
      goto LABEL_9;
  }
  else
  {
    v7 = 1216;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (char **)(a1 + 8);
    if (v4 == (*(_QWORD *)(a1 + 16) - v8) >> 4)
    {
LABEL_9:
      v10 = malloc_type_aligned_alloc(8uLL, v7, 0x8BB35E2BuLL);
      v14 = v10;
      v11 = *(_QWORD **)(a1 + 16);
      if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
      {
        v13 = sub_20F3A4858(v9, &v14);
      }
      else
      {
        v12 = MEMORY[0x24BDAE450];
        *v11 = v10;
        v11[1] = v12;
        v13 = (char *)(v11 + 2);
      }
      *(_QWORD *)(a1 + 16) = v13;
      v4 = *(unsigned int *)(a1 + 32);
      v8 = *(_QWORD *)(a1 + 8);
    }
  }
  *(_DWORD *)(a1 + 32) = v4 + 1;
  *(_QWORD *)(a1 + 40) = 1;
  return *(_QWORD *)(v8 + 16 * v4);
}

char *sub_20F3A4858(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  double *v20;
  const double *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  float64x2x2_t v28;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    sub_20E867F44();
  v8 = a1[2] - v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_20E877A38();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * (v5 >> 4)];
  v12 = MEMORY[0x24BDAE450];
  v13 = &v10[16 * v9];
  *(_QWORD *)v11 = *a2;
  *((_QWORD *)v11 + 1) = v12;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    v15 = v3 - v4 - 16;
    if (v15 < 0x90
      || &v3[-(v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v11 && &v10[v5 - (v15 & 0xFFFFFFFFFFFFFFF0) - 16] < v3)
    {
      goto LABEL_18;
    }
    v16 = (v15 >> 4) + 1;
    v17 = 16 * (v16 & 0x1FFFFFFFFFFFFFFELL);
    v18 = &v11[-v17];
    v19 = &v3[-v17];
    v20 = (double *)(v11 - 32);
    v21 = (const double *)(v3 - 32);
    v22 = v16 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v28 = vld2q_f64(v21);
      v21[2] = 0.0;
      *v21 = 0.0;
      v21 -= 4;
      vst2q_f64(v20, v28);
      v20 -= 4;
      v22 -= 2;
    }
    while (v22);
    v11 = v18;
    v3 = v19;
    if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      v18 = v11;
      do
      {
        v23 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        *(_QWORD *)v3 = 0;
        *((_QWORD *)v18 - 2) = v23;
        v18 -= 16;
        *((_QWORD *)v18 + 1) = *((_QWORD *)v3 + 1);
      }
      while (v3 != v4);
    }
    v3 = *a1;
    v24 = a1[1];
    *a1 = v18;
    a1[1] = v14;
    a1[2] = v13;
    if (v24 != v3)
    {
      v25 = v24;
      do
      {
        v26 = *((_QWORD *)v25 - 2);
        v25 -= 16;
        *(_QWORD *)v25 = 0;
        if (v26)
          (*((void (**)(void))v24 - 1))();
        v24 = v25;
      }
      while (v25 != v3);
    }
  }
  if (v3)
    operator delete(v3);
  return v14;
}

char *sub_20F3A4A18(uint64_t a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  char v60;

  v6 = *a2;
  v8 = *(char **)(a1 + 104);
  v9 = *(char **)(a1 + 112);
  v7 = (_QWORD *)(a1 + 104);
  if (v8 != v9)
  {
    if (*((_QWORD *)v9 - 19) < v6)
      goto LABEL_11;
    v10 = 0x86BCA1AF286BCA1BLL * ((v9 - v8) >> 3);
    do
    {
      v11 = v10 >> 1;
      v12 = &v8[152 * (v10 >> 1)];
      v14 = *(_QWORD *)v12;
      v13 = v12 + 152;
      v10 += ~(v10 >> 1);
      if (v14 < v6)
        v8 = v13;
      else
        v10 = v11;
    }
    while (v10);
    if (v8 == v9)
    {
LABEL_11:
      v8 = *(char **)(a1 + 112);
    }
    else if (*(_QWORD *)v8 == v6)
    {
      return v9;
    }
  }
  v15 = *a4;
  v16 = (std::__shared_weak_count *)a4[1];
  v17 = *a2;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v17 = *a2;
  }
  v39 = v17;
  v40 = *(_OWORD *)(a2 + 1);
  v41 = *(_OWORD *)(a2 + 3);
  v42 = *(_OWORD *)(a2 + 5);
  v43 = a2[7];
  v46 = v15;
  v47 = v16;
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v23 = *a3;
  v24 = *(char **)(a1 + 8);
  v25 = *(char **)(a1 + 16);
  if (v25 != v24)
  {
    v26 = (v25 - v24) >> 4;
    do
    {
      v27 = v26 >> 1;
      v28 = (unsigned int *)&v24[16 * (v26 >> 1)];
      v30 = *v28;
      v29 = (char *)(v28 + 4);
      v26 += ~(v26 >> 1);
      if (v30 < v23)
        v24 = v29;
      else
        v26 = v27;
    }
    while (v26);
  }
  if (v24 == v25 || *(_DWORD *)v24 != v23)
  {
    v9 = *(char **)(a1 + 112);
    v35 = v47;
    if (!v47)
      return v9;
  }
  else
  {
    v31 = *((_QWORD *)v24 + 1);
    ++*(_DWORD *)(v31 + 8);
    if (*(_BYTE *)(v31 + 20))
    {
      v48[0] = v6;
      v48[1] = v39;
      v49 = v40;
      v50 = v41;
      v51 = v42;
      v52 = v43;
      v53 = v31;
      v54 = v44;
      v55 = v45;
      v57 = 0;
      v56 = 0xBFF0000000000000;
      v32 = v16;
      v58 = v46;
      v59 = v16;
      v60 = 0;
      v9 = *(char **)(a1 + 112);
      if (v9 == v8 || *(_QWORD *)v8 != v6)
      {
        v9 = sub_20F3A4D9C(v7, v8, (uint64_t)v48);
        v32 = v59;
      }
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      *(_BYTE *)(a1 + 154) = 0;
      *(_BYTE *)(a1 + 152) = 0;
      *(int64x2_t *)(a1 + 136) = vaddq_s64(*(int64x2_t *)(a1 + 136), (int64x2_t)xmmword_210378060);
      return v9;
    }
    --*(_DWORD *)(v31 + 8);
    v9 = *(char **)(a1 + 112);
    v35 = v47;
    if (!v47)
      return v9;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  return v9;
}

void sub_20F3A4D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20F2B230C((uint64_t)&a28);
  sub_20F2B2374((uint64_t)&a10);
  _Unwind_Resume(a1);
}

char *sub_20F3A4D9C(_QWORD *a1, char *a2, uint64_t a3)
{
  char *v4;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  char v67;
  _QWORD *v68;

  v4 = a2;
  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  v8 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&a2[-*a1] >> 3);
  v9 = a1[2];
  if ((unint64_t)v6 >= v9)
  {
    v26 = 0x86BCA1AF286BCA1BLL * ((v6 - v7) >> 3) + 1;
    if (v26 > 0x1AF286BCA1AF286)
      sub_20E867F44();
    v27 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v9 - (_QWORD)v7) >> 3);
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0xD79435E50D7943)
      v28 = 0x1AF286BCA1AF286;
    else
      v28 = v26;
    *(_QWORD *)&v57 = a1 + 2;
    if (v28)
    {
      if (v28 > 0x1AF286BCA1AF286)
        sub_20E877A38();
      v29 = (char *)operator new(152 * v28);
    }
    else
    {
      v29 = 0;
    }
    v54 = v29;
    v55 = &v29[152 * v8];
    *(_QWORD *)&v56 = v55;
    *((_QWORD *)&v56 + 1) = &v29[152 * v28];
    sub_20F2C17B0((uint64_t)&v54, (__n128 *)a3);
    v34 = v55;
    v35 = (char *)*a1;
    v36 = v55;
    if ((char *)*a1 != v4)
    {
      v37 = 0;
      do
      {
        v38 = &v4[v37];
        v39 = &v34[v37];
        *((_QWORD *)v39 - 19) = *(_QWORD *)&v4[v37 - 152];
        *((_QWORD *)v39 - 18) = *(_QWORD *)&v4[v37 - 144];
        *(_OWORD *)(v39 - 136) = *(_OWORD *)&v4[v37 - 136];
        v40 = *(_OWORD *)&v4[v37 - 120];
        v41 = *(_OWORD *)&v4[v37 - 104];
        *((_QWORD *)v39 - 11) = *(_QWORD *)&v4[v37 - 88];
        *(_OWORD *)(v39 - 104) = v41;
        *(_OWORD *)(v39 - 120) = v40;
        *((_QWORD *)v39 - 10) = *(_QWORD *)&v4[v37 - 80];
        *(_OWORD *)(v39 - 72) = *(_OWORD *)&v4[v37 - 72];
        *(_OWORD *)(v39 - 56) = *(_OWORD *)&v4[v37 - 56];
        v42 = *(_QWORD *)&v4[v37 - 40];
        *(v39 - 32) = v4[v37 - 32];
        *((_QWORD *)v39 - 5) = v42;
        *(_OWORD *)(v39 - 24) = *(_OWORD *)&v4[v37 - 24];
        *((_QWORD *)v38 - 3) = 0;
        *((_QWORD *)v38 - 2) = 0;
        *(v39 - 8) = v4[v37 - 8];
        v37 -= 152;
      }
      while (&v4[v37] != v35);
      v36 = &v34[v37];
    }
    v43 = (char *)a1[1];
    v44 = v56;
    if (v43 != v4)
    {
      do
      {
        *(_QWORD *)v44 = *(_QWORD *)v4;
        *(_QWORD *)(v44 + 8) = *((_QWORD *)v4 + 1);
        *(_OWORD *)(v44 + 16) = *((_OWORD *)v4 + 1);
        v45 = *((_OWORD *)v4 + 2);
        v46 = *((_OWORD *)v4 + 3);
        *(_QWORD *)(v44 + 64) = *((_QWORD *)v4 + 8);
        *(_OWORD *)(v44 + 32) = v45;
        *(_OWORD *)(v44 + 48) = v46;
        *(_QWORD *)(v44 + 72) = *((_QWORD *)v4 + 9);
        *(_OWORD *)(v44 + 80) = *((_OWORD *)v4 + 5);
        *(_OWORD *)(v44 + 96) = *((_OWORD *)v4 + 6);
        v47 = *((_QWORD *)v4 + 14);
        *(_BYTE *)(v44 + 120) = v4[120];
        *(_QWORD *)(v44 + 112) = v47;
        *(_OWORD *)(v44 + 128) = *((_OWORD *)v4 + 8);
        *((_QWORD *)v4 + 16) = 0;
        *((_QWORD *)v4 + 17) = 0;
        *(_BYTE *)(v44 + 144) = v4[144];
        v44 += 152;
        v4 += 152;
      }
      while (v4 != v43);
      v4 = (char *)a1[1];
    }
    v48 = (char *)*a1;
    *a1 = v36;
    a1[1] = v44;
    v49 = a1[2];
    a1[2] = *((_QWORD *)&v56 + 1);
    *(_QWORD *)&v56 = v4;
    *((_QWORD *)&v56 + 1) = v49;
    v54 = v48;
    v55 = v48;
    if (v4 == v48)
    {
      if (!v4)
        return v34;
    }
    else
    {
      do
      {
        *(_QWORD *)&v56 = v4 - 152;
        v51 = (std::__shared_weak_count *)*((_QWORD *)v4 - 2);
        if (v51)
        {
          p_shared_owners = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(p_shared_owners);
          while (__stlxr(v53 - 1, p_shared_owners));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v4 = (char *)v56;
      }
      while ((char *)v56 != v48);
      v4 = v54;
      if (!v54)
        return v34;
    }
    operator delete(v4);
    return v34;
  }
  if (a2 == v6)
  {
    *(_QWORD *)a2 = *(_QWORD *)a3;
    v30 = &v7[152 * v8];
    *((_QWORD *)v30 + 1) = *(_QWORD *)(a3 + 8);
    *((_OWORD *)v30 + 1) = *(_OWORD *)(a3 + 16);
    v31 = *(_OWORD *)(a3 + 32);
    v32 = *(_OWORD *)(a3 + 48);
    *((_QWORD *)v30 + 8) = *(_QWORD *)(a3 + 64);
    *((_OWORD *)v30 + 2) = v31;
    *((_OWORD *)v30 + 3) = v32;
    *((_QWORD *)v30 + 9) = *(_QWORD *)(a3 + 72);
    *((_OWORD *)v30 + 5) = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v30 + 6) = *(_OWORD *)(a3 + 96);
    v33 = *(_QWORD *)(a3 + 112);
    v30[120] = *(_BYTE *)(a3 + 120);
    *((_QWORD *)v30 + 14) = v33;
    *((_OWORD *)v30 + 8) = *(_OWORD *)(a3 + 128);
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    v30[144] = *(_BYTE *)(a3 + 144);
    a1[1] = a2 + 152;
  }
  else
  {
    v68 = a1 + 2;
    v10 = *(char **)(a3 + 8);
    v54 = *(char **)a3;
    v11 = v54;
    v55 = v10;
    v12 = *(_OWORD *)(a3 + 32);
    v56 = *(_OWORD *)(a3 + 16);
    v57 = v12;
    v58 = *(_OWORD *)(a3 + 48);
    v13 = *(_QWORD *)(a3 + 72);
    v59 = *(_QWORD *)(a3 + 64);
    v60 = v13;
    v14 = *(_OWORD *)(a3 + 96);
    v61 = *(_OWORD *)(a3 + 80);
    v62 = v14;
    v63 = *(_QWORD *)(a3 + 112);
    v64 = *(_BYTE *)(a3 + 120);
    v16 = *(std::__shared_weak_count **)(a3 + 136);
    v65 = *(_QWORD *)(a3 + 128);
    v15 = v65;
    v66 = v16;
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    v67 = *(_BYTE *)(a3 + 144);
    sub_20F2C1628((uint64_t)a1, (uint64_t)a2, a1[1], (uint64_t)(a2 + 152));
    *(_QWORD *)v4 = v11;
    v17 = &v7[152 * v8];
    *((_QWORD *)v17 + 1) = v10;
    *((_OWORD *)v17 + 1) = v56;
    v18 = v58;
    v19 = v59;
    *((_OWORD *)v17 + 2) = v57;
    *((_OWORD *)v17 + 3) = v18;
    *((_QWORD *)v17 + 8) = v19;
    *((_QWORD *)v17 + 9) = v13;
    *((_OWORD *)v17 + 5) = v61;
    *((_OWORD *)v17 + 6) = v62;
    v20 = v63;
    v17[120] = v64;
    *((_QWORD *)v17 + 14) = v20;
    v65 = 0;
    v66 = 0;
    v21 = (std::__shared_weak_count *)*((_QWORD *)v17 + 17);
    *((_QWORD *)v17 + 16) = v15;
    *((_QWORD *)v17 + 17) = v16;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v7[152 * v8 + 144] = v67;
    if (v66)
    {
      v24 = &v66->__shared_owners_;
      do
        v25 = __ldaxr((unint64_t *)v24);
      while (__stlxr(v25 - 1, (unint64_t *)v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
  }
  return v4;
}

void sub_20F3A5268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F2B230C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F3A527C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20F2C1AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3A5290@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v7;
  char v8;
  uint64_t v14;
  double v15;
  char v16;
  int v17;
  uint64_t v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;
  double v23;
  double v24;
  int v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  double v28;
  uint64_t *v29;
  __int128 *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  double **v47;
  uint64_t v48;
  double v49;
  double *v50;
  uint64_t v51;
  double v52;
  double v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  _QWORD *v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  double v61;
  unsigned __int8 v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  double *v66;
  double v67;
  double *v68;
  unint64_t v69;
  unint64_t v70;
  float64x2_t *v71;
  uint64_t v72;
  float64x2_t v73;
  float64x2_t v74;
  double *v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double *v81;
  uint64_t v82;
  double v83;
  double v84;
  int v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t locale;
  double v100;
  _QWORD *v101;
  _QWORD *v102;
  const std::locale::facet *v103;
  _QWORD *v105;
  const std::locale::facet *v106;
  _QWORD *v107;
  _QWORD *v108;
  const std::locale::facet *v109;
  _QWORD *v110;
  const std::locale::facet *v111;
  int v112;
  _QWORD *v113;
  const std::locale::facet *v114;
  _QWORD *v115;
  uint64_t v116;
  char v117;
  char v119;
  void *__p[2];
  uint64_t v121;
  std::locale v122[2];
  uint64_t v123;
  double __dst[2];

  kdebug_trace();
  kdebug_trace();
  (*(void (**)(std::locale *__return_ptr, uint64_t *))(*a1 + 16))(v122, a1);
  (**(void (***)(void **__return_ptr, uint64_t))a2)(__p, a2);
  if (SHIBYTE(v123) < 0)
  {
    sub_20E860C04((_BYTE *)a4, v122[0].__locale_, (unint64_t)v122[1].__locale_);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)&v122[0].__locale_;
    *(_QWORD *)(a4 + 16) = v123;
  }
  v7 = (_BYTE *)(a4 + 24);
  v8 = HIBYTE(v121);
  if (SHIBYTE(v121) < 0)
  {
    sub_20E860C04(v7, __p[0], (unint64_t)__p[1]);
    v8 = HIBYTE(v121);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)__p;
    *(_QWORD *)(a4 + 40) = v121;
  }
  *(_QWORD *)(a4 + 48) = 0;
  *(_DWORD *)(a4 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a4 + 64) = _Q0;
  *(_QWORD *)(a4 + 592) = a4 + 80;
  *(_OWORD *)(a4 + 600) = xmmword_210378040;
  v14 = a4 + 616;
  *(_QWORD *)(a4 + 1128) = a4 + 616;
  *(_QWORD *)(a4 + 1136) = 64;
  *(_OWORD *)(a4 + 1144) = 0u;
  *(_QWORD *)(a4 + 1672) = a4 + 1160;
  *(_QWORD *)(a4 + 1680) = 64;
  *(_QWORD *)(a4 + 1688) = 0;
  *(_QWORD *)(a4 + 1704) = 0;
  *(_QWORD *)(a4 + 1696) = 0;
  *(_QWORD *)(a4 + 2224) = a4 + 1712;
  *(_QWORD *)(a4 + 2232) = 64;
  *(_QWORD *)(a4 + 2240) = 0;
  if (v8 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v123) & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((SHIBYTE(v123) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v122[0].__locale_);
LABEL_9:
  sub_20F2C3BE8((_QWORD *)a4, 1uLL, 1uLL);
  __p[0] = (void *)a2;
  __p[1] = (void *)a4;
  v119 = 0;
  v15 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v16 = *(_BYTE *)(a2 + 312);
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 24))(a1))
  {
    *(_BYTE *)(a2 + 312) = 1;
    v17 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
    v18 = *a1;
    if (v17)
      (*(void (**)(uint64_t *, double))(v18 + 48))(a1, 0.0);
    else
      (*(void (**)(uint64_t *))(v18 + 56))(a1);
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  }
  kdebug_trace();
  if (*((_BYTE *)a1 + 48))
  {
    v22 = a1[74];
    if (*((_BYTE *)a1 + 601))
    {
      if (v22)
      {
        sub_20F3A67FC(a2, (uint64_t)v122, (uint64_t *)a1[72], v19, v20, v21);
        goto LABEL_24;
      }
    }
    else if (v22)
    {
      v122[0].__locale_ = (std::locale::__imp *)a1[72];
      LODWORD(v122[1].__locale_) = 0;
      sub_20F3A6C90(a2, (uint64_t)__dst, (uint64_t)v122, v19, v20, v21);
      v23 = __dst[0];
      if (__dst[0] > 0.0)
      {
LABEL_25:
        v24 = 1.0 / (v23 * v23);
        goto LABEL_26;
      }
LABEL_22:
      v24 = 1.0e20;
      v23 = 1.0e-10;
LABEL_26:
      *(double *)(a2 + 8) = v23;
      *(double *)(a2 + 16) = v24;
      *(_BYTE *)(a2 + 301) = 0;
      *(_DWORD *)(a2 + 296) = 0;
      goto LABEL_27;
    }
    sub_20F3A67FC(a2, (uint64_t)v122, a1 + 7, v19, v20, v21);
LABEL_24:
    v23 = *(double *)&v122[0].__locale_;
    if (*(double *)&v122[0].__locale_ > 0.0)
      goto LABEL_25;
    goto LABEL_22;
  }
LABEL_27:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2))
  {
    v25 = *((unsigned __int8 *)a1 + 16);
    if (*((_BYTE *)a1 + 16))
    {
      v26 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Linearize FAILED", 16);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
      v27 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(v122);
      std::ostream::put();
      std::ostream::flush();
      v25 = 0;
    }
LABEL_146:
    *(_DWORD *)(a4 + 56) = v25;
    goto LABEL_147;
  }
  v119 = 1;
  v122[0] = (std::locale)__p[0];
  sub_20F2C4C68((uint64_t)v122, (_QWORD *)__p[1] + 145, (_QWORD *)__p[1] + 144);
  __dst[0] = *(double *)__p;
  sub_20F3A6EF0(__dst, (_QWORD *)__p[1] + 214, (_QWORD *)__p[1] + 212, (_QWORD *)__p[1] + 213);
  v28 = sub_20F3A64B0(a2, (_QWORD *)(a4 + 80));
  v29 = (uint64_t *)(a4 + 1144);
  *(double *)(a4 + 64) = v28;
  *(double *)(a4 + 72) = v28;
  *((double *)a1 + 92) = v28;
  v30 = *(__int128 **)(a4 + 592);
  v31 = *(_QWORD *)(a4 + 608);
  *(_QWORD *)(a4 + 1144) = 0;
  v32 = v31 & 0x1FFFFFFFFFFFFFFFLL;
  v33 = *(_QWORD *)(a4 + 1136);
  if ((v31 & 0x1FFFFFFFFFFFFFFFuLL) <= v33)
  {
    if (!v31)
      goto LABEL_49;
    v35 = *(_OWORD **)(a4 + 1128);
  }
  else
  {
    v34 = 2 * v33;
    if (v34 > v32)
      v32 = v34;
    *(_QWORD *)(a4 + 1136) = v32;
    v35 = (_OWORD *)operator new[]();
    v36 = *(_QWORD *)(a4 + 1128);
    if (v36 != v14 && v36)
      MEMORY[0x212BC6368](v36, 0x1000C8000313F17);
    *(_QWORD *)(a4 + 1128) = v35;
    v37 = *(_QWORD *)(a4 + 1144);
    if (v37)
    {
      *v29 = v37 + v31;
      memmove((char *)v35 + 8 * v31, v35, 8 * v37);
      memcpy(v35, v30, 8 * v31);
      goto LABEL_49;
    }
  }
  v38 = 0;
  v39 = (v31 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v39 < 3)
  {
    v40 = (uint64_t *)v30;
  }
  else
  {
    v40 = (uint64_t *)v30;
    if ((unint64_t)((char *)v35 - (char *)v30) >= 0x20)
    {
      v41 = v39 + 1;
      v38 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      v40 = (uint64_t *)v30 + (v41 & 0x3FFFFFFFFFFFFFFCLL);
      v42 = v35 + 1;
      v43 = v30 + 1;
      v44 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = *v43;
        *(v42 - 1) = *(v43 - 1);
        *v42 = v45;
        v42 += 2;
        v43 += 2;
        v44 -= 4;
      }
      while (v44);
      if (v41 == v38)
        goto LABEL_48;
    }
  }
  do
  {
    v46 = *v40++;
    *((_QWORD *)v35 + v38++) = v46;
  }
  while (v40 != (uint64_t *)((char *)v30 + 8 * v31));
LABEL_48:
  *v29 = v38;
LABEL_49:
  kdebug_trace();
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 24))(a1))
  {
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 40))(a1))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
      (*(void (**)(uint64_t *))(*a1 + 48))(a1);
    }
    else
    {
      (*(void (**)(uint64_t *))(*a1 + 56))(a1);
    }
    (*(void (**)(uint64_t *))(*a1 + 32))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  }
  v47 = (double **)(a2 + 336);
  v48 = *(unsigned int *)(a2 + 352);
  if ((_DWORD)v48)
  {
    v49 = fabs(**v47);
    if ((_DWORD)v48 != 1)
    {
      v50 = *v47 + 1;
      v51 = 8 * v48 - 8;
      do
      {
        v52 = *v50++;
        v53 = fabs(v52);
        if (v49 < v53)
          v49 = v53;
        v51 -= 8;
      }
      while (v51);
    }
    if (v49 < v49 * *((double *)a1 + 3))
      goto LABEL_61;
  }
  else
  {
    v49 = 1.0;
    if (1.0 * *((double *)a1 + 3) > 1.0)
    {
LABEL_61:
      if (*((_BYTE *)a1 + 16))
      {
        v54 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(*v54 - 24)));
        v55 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(v122);
        std::ostream::put();
        std::ostream::flush();
        sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"[error][grad < gtol][", 21);
        v56 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v56, (uint64_t)"][", 2);
        if (v49 == 0.0)
          sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"NaN", 3);
        else
          std::ostream::operator<<();
        sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)" < ", 3);
        v101 = (_QWORD *)std::ostream::operator<<();
        v102 = sub_20E86A980(v101, (uint64_t)"]", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(_QWORD *)(*v102 - 24)));
        v103 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
        ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
        std::locale::~locale(v122);
        std::ostream::put();
        std::ostream::flush();
      }
      v25 = 1;
      goto LABEL_146;
    }
  }
  v57 = *((double *)a1 + 92);
  kdebug_trace();
  v117 = v16;
  v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v59 = a1[83];
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59);
  v60 = atomic_load(a3);
  if ((v60 & 1) == 0)
  {
    v61 = v49;
    do
    {
      v63 = *(unsigned int *)(a4 + 48);
      if (v63 >= *((_DWORD *)a1 + 3))
        break;
      v64 = v63 + 1;
      *(_DWORD *)(a4 + 48) = v63 + 1;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v58))
      {
        if (*((_BYTE *)a1 + 16))
        {
          v105 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Solve FAILED", 12);
          std::ios_base::getloc((const std::ios_base *)((char *)v105 + *(_QWORD *)(*v105 - 24)));
          v106 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
          std::locale::~locale(v122);
          std::ostream::put();
          std::ostream::flush();
        }
        *(_DWORD *)(a4 + 56) = 0;
        break;
      }
      ++*(_DWORD *)(a4 + 52);
      v65 = *(unsigned int *)(v58 + 16);
      if ((_DWORD)v65)
      {
        v66 = *(double **)v58;
        v67 = **(double **)v58 * **(double **)v58;
        if ((_DWORD)v65 != 1)
        {
          v68 = v66 + 1;
          v69 = (v65 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
          if (v69 < 3)
            goto LABEL_78;
          v70 = v69 + 1;
          v68 += v70 & 0x3FFFFFFFFFFFFFFCLL;
          v71 = (float64x2_t *)(v66 + 3);
          v72 = v70 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v73 = vmulq_f64(v71[-1], v71[-1]);
            v74 = vmulq_f64(*v71, *v71);
            v67 = v67 + v73.f64[0] + v73.f64[1] + v74.f64[0] + v74.f64[1];
            v71 += 2;
            v72 -= 4;
          }
          while (v72);
          if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_78:
            v75 = &v66[v65];
            do
            {
              v76 = *v68++;
              v67 = v67 + v76 * v76;
            }
            while (v68 != v75);
          }
        }
        v77 = sqrt(v67);
        if (v63 < *((_DWORD *)a1 + 2))
          goto LABEL_88;
      }
      else
      {
        v77 = sqrt(0.0);
        if (v63 < *((_DWORD *)a1 + 2))
          goto LABEL_88;
      }
      v78 = a1[91];
      if (v78)
      {
        LODWORD(v122[0].__locale_) = *(_DWORD *)(v58 + 16);
        v122[1] = *(std::locale *)v58;
        LODWORD(v123) = 0;
        __dst[0] = v77;
        if (((*(uint64_t (**)(uint64_t, double *, std::locale *))(*(_QWORD *)v78 + 48))(v78, __dst, v122) & 1) != 0)
          goto LABEL_159;
      }
      else if ((_DWORD)v65 && v77 < *((double *)a1 + 4) * (v15 + *((double *)a1 + 4)))
      {
LABEL_159:
        if (*((_BYTE *)a1 + 16))
        {
          v113 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the parameters", 29);
          std::ios_base::getloc((const std::ios_base *)((char *)v113 + *(_QWORD *)(*v113 - 24)));
          v114 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 10);
          std::locale::~locale(v122);
          std::ostream::put();
          std::ostream::flush();
          (*(void (**)(uint64_t *, uint64_t, double, double, double, double, double))(*a1 + 64))(a1, v63, v57, v77, v61, v49, v15);
        }
        v112 = 2;
        goto LABEL_165;
      }
LABEL_88:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v58);
      v79 = a1[87];
      if (v79)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 48))(v79);
      if (*v29)
        memcpy(__dst, *(const void **)(a4 + 1128), 8 * *v29);
      v57 = sub_20F3A64B0(a2, (_QWORD *)(a4 + 616));
      v80 = *(unsigned int *)(a2 + 352);
      if (!(_DWORD)v80)
      {
        v61 = 1.0;
        if (!*((_BYTE *)a1 + 16))
          goto LABEL_102;
LABEL_101:
        (*(void (**)(uint64_t *, uint64_t, double, double, double, double, double))(*a1 + 64))(a1, v63, v57, v77, v61, v49, v15);
        goto LABEL_102;
      }
      v61 = fabs(**v47);
      if ((_DWORD)v80 != 1)
      {
        v81 = *v47 + 1;
        v82 = 8 * v80 - 8;
        do
        {
          v83 = *v81++;
          v84 = fabs(v83);
          if (v61 < v84)
            v61 = v84;
          v82 -= 8;
        }
        while (v82);
      }
      if (*((_BYTE *)a1 + 16))
        goto LABEL_101;
LABEL_102:
      if (v57 == 0.0)
      {
        if (*((_BYTE *)a1 + 16))
        {
          v107 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
          v108 = sub_20E86A980(v107, (uint64_t)"N.A.", 4);
          std::ios_base::getloc((const std::ios_base *)((char *)v108 + *(_QWORD *)(*v108 - 24)));
          v109 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10);
          std::locale::~locale(v122);
          std::ostream::put();
          goto LABEL_157;
        }
LABEL_158:
        *((double *)a1 + 92) = v57;
        v112 = 3;
LABEL_165:
        *(_DWORD *)(a4 + 56) = v112;
        break;
      }
      if (vabdd_f64(v57, *((double *)a1 + 92)) < v57 * *((double *)a1 + 5) && v63 >= *((_DWORD *)a1 + 2))
      {
        if (*((_BYTE *)a1 + 16))
        {
          sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the cost: ", 25);
          v110 = (_QWORD *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v110 + *(_QWORD *)(*v110 - 24)));
          v111 = std::locale::use_facet(v122, MEMORY[0x24BEDB350]);
          ((void (*)(const std::locale::facet *, uint64_t))v111->__vftable[2].~facet_0)(v111, 10);
          std::locale::~locale(v122);
          std::ostream::put();
LABEL_157:
          std::ostream::flush();
        }
        goto LABEL_158;
      }
      if (*(_DWORD *)(a2 + 328))
      {
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 160))(a2, a1 + 93);
        v85 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t *, double))(*a1 + 80))(a1, v58, a2 + 336, a1 + 93, v57);
      }
      else
      {
        v85 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(*a1 + 72))(a1, v58, a2 + 336, v57);
      }
      if (!v85)
      {
        --*(_DWORD *)(a4 + 52);
        v91 = *(_QWORD *)(a2 + 48);
        v92 = *(_QWORD *)(a2 + 56);
        while (v91 != v92)
        {
          v93 = *(_QWORD *)(v91 + 8);
          if (*(_BYTE *)(v93 + 20))
          {
            *(_OWORD *)(v93 + 32) = *(_OWORD *)(v93 + 128);
            *(_QWORD *)(v93 + 48) = *(_QWORD *)(v93 + 144);
          }
          v91 += 16;
        }
        *(_BYTE *)(a2 + 301) = 0;
        *(_BYTE *)(a2 + 296) = 0;
        *(_WORD *)(a2 + 299) = 0;
        *(_BYTE *)(a2 + 297) = *(_BYTE *)(a2 + 298);
        *(_QWORD *)(a4 + 1144) = 0;
        if (*(_QWORD *)(a4 + 1136))
        {
          v94 = *(double **)(a4 + 1128);
          v95 = __dst[0];
          goto LABEL_125;
        }
        *(_QWORD *)(a4 + 1136) = 1;
        v94 = (double *)operator new[]();
        v96 = *(_QWORD *)(a4 + 1128);
        if (v96 != v14 && v96)
          MEMORY[0x212BC6368](v96, 0x1000C8000313F17);
        *(_QWORD *)(a4 + 1128) = v94;
        v97 = *(_QWORD *)(a4 + 1144);
        v95 = __dst[0];
        if (v97)
        {
          *v29 = v97 + 1;
          *v94 = v95;
        }
        else
        {
LABEL_125:
          *v94 = v95;
          *v29 = 1;
        }
        if ((*(unsigned int (**)(uint64_t *))(*a1 + 24))(a1))
        {
          (*(void (**)(uint64_t *))(*a1 + 32))(a1);
          (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
        }
LABEL_133:
        if (v64 < *((_DWORD *)a1 + 3))
          goto LABEL_134;
        goto LABEL_69;
      }
      if ((*(unsigned int (**)(uint64_t *))(*a1 + 24))(a1))
      {
        (*(void (**)(uint64_t *))(*a1 + 32))(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
      }
      v88 = v49 * *((double *)a1 + 3);
      if (v61 < v88 && v63 >= *((_DWORD *)a1 + 2))
      {
        if (*((_BYTE *)a1 + 16))
        {
          v115 = sub_20E86A980(MEMORY[0x24BEDB318], (uint64_t)"Convergence in the gradient", 27);
          sub_20E8C81A0(v115);
          (*(void (**)(uint64_t *, uint64_t, double, double, double, double, double))(*a1 + 64))(a1, v63, v57, v77, v61, v49, v15);
        }
        v112 = 1;
        goto LABEL_165;
      }
      if (v64 >= *((_DWORD *)a1 + 3) || !*((_BYTE *)a1 + 48))
        goto LABEL_133;
      v89 = a1[74];
      if (*((_BYTE *)a1 + 601))
      {
        v90 = a1 + 7;
        if (v89)
          v90 = (uint64_t *)a1[72];
      }
      else
      {
        v90 = a1 + 7;
        if (v89)
        {
          v122[0].__locale_ = (std::locale::__imp *)a1[72];
          LODWORD(v122[1].__locale_) = 0;
          sub_20F3A6448(a2, (uint64_t)v122, v88, v86, v87);
          goto LABEL_141;
        }
      }
      sub_20F3A67FC(a2, (uint64_t)v122, v90, v88, v86, v87);
      locale = 0x3DDB7CDFD9D7BDBBLL;
      v100 = 1.0e20;
      if (*(double *)&v122[0].__locale_ > 0.0)
      {
        locale = (uint64_t)v122[0].__locale_;
        v100 = 1.0 / (*(double *)&v122[0].__locale_ * *(double *)&v122[0].__locale_);
      }
      *(_QWORD *)(a2 + 8) = locale;
      *(double *)(a2 + 16) = v100;
      *(_BYTE *)(a2 + 301) = 0;
      *(_DWORD *)(a2 + 296) = 0;
LABEL_141:
      *((double *)a1 + 92) = sub_20F3A64B0(a2, (_QWORD *)(a4 + 616));
      if (v64 < *((_DWORD *)a1 + 3))
      {
LABEL_134:
        v98 = a1[79];
        if (v98)
          (*(void (**)(uint64_t))(*(_QWORD *)v98 + 48))(v98);
      }
LABEL_69:
      v62 = atomic_load(a3);
    }
    while ((v62 & 1) == 0);
  }
  *(_QWORD *)(a4 + 72) = a1[92];
  v116 = a1[79];
  v16 = v117;
  if (v116)
    (*(void (**)(uint64_t))(*(_QWORD *)v116 + 48))(v116);
LABEL_147:
  *(_BYTE *)(a2 + 312) = v16;
  if (!v119)
  {
    v122[0] = (std::locale)__p[0];
    sub_20F2C4C68((uint64_t)v122, (_QWORD *)__p[1] + 145, (_QWORD *)__p[1] + 144);
    __dst[0] = *(double *)__p;
    sub_20F3A6EF0(__dst, (_QWORD *)__p[1] + 214, (_QWORD *)__p[1] + 212, (_QWORD *)__p[1] + 213);
  }
  return kdebug_trace();
}

void sub_20F3A62D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::locale a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  *(_BYTE *)(v31 + 312) = a11;
  if (!a13)
    sub_20F3A72B0((uint64_t **)&a14);
  sub_20F2C524C(v30);
  sub_20EDB4278((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3A6448(uint64_t a1, uint64_t a2, double a3, float64x2_t a4, float64x2_t a5)
{
  uint64_t result;
  uint64_t v7;
  double v8;
  double v9;

  result = sub_20F3A6C90(a1, (uint64_t)&v9, a2, a3, a4, a5);
  v7 = *(_QWORD *)&v9;
  if (v9 <= 0.0)
  {
    v8 = 1.0e20;
    v7 = 0x3DDB7CDFD9D7BDBBLL;
  }
  else
  {
    v8 = 1.0 / (v9 * v9);
  }
  *(_QWORD *)(a1 + 8) = v7;
  *(double *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 301) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  return result;
}

double sub_20F3A64B0(uint64_t a1, _QWORD *a2)
{
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double i;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v24;
  long double v25;
  long double v26;
  double v27;
  double v28;
  double v32;
  long double v33;
  long double v34;
  long double v35;
  float64x2_t v36;
  float64x2_t v37;

  kdebug_trace();
  if (!a2[66])
  {
    if (a2[65])
    {
      v7 = (_QWORD *)a2[64];
LABEL_4:
      *v7 = 0;
      goto LABEL_9;
    }
    a2[65] = 1;
    v7 = (_QWORD *)operator new[]();
    v8 = (_QWORD *)a2[64];
    if (v8 != a2 && v8)
      MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
    a2[64] = v7;
    if (!a2[66])
      goto LABEL_4;
  }
LABEL_9:
  a2[66] = 1;
  v10 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 152);
  if (*(_BYTE *)(a1 + 300))
  {
    if (v10 == v9)
    {
      i = 0.0;
    }
    else if (*(_BYTE *)(a1 + 299))
    {
      v11 = v9 - v10 - 152;
      i = 0.0;
      if (v11 < 0x98)
        goto LABEL_34;
      v13 = v11 / 0x98 + 1;
      v14 = (double *)(v10 + 264);
      v15 = v13 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        i = i + *(v14 - 19) + *v14;
        v14 += 38;
        v15 -= 2;
      }
      while (v15);
      v10 += 152 * (v13 & 0x3FFFFFFFFFFFFFELL);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFELL))
      {
LABEL_34:
        do
        {
          i = i + *(double *)(v10 + 112);
          v10 += 152;
        }
        while (v10 != v9);
      }
    }
    else
    {
      i = 0.0;
      do
      {
        if (*(_BYTE *)(v10 + 120))
        {
          *(_OWORD *)(v10 + 96) = *(_OWORD *)(v10 + 80);
          v37 = *(float64x2_t *)(v10 + 96);
          _D1 = v37.f64[1];
          __asm { FMLA            D0, D1, V2.D[1] }
          v32 = *(double *)(a1 + 24);
          v33 = *(double *)(a1 + 32) * (*(double *)(a1 + 16) * _D0);
          v34 = v33 + 1.0;
          v35 = v32 * log1p(v33);
          *(long double *)(v10 + 112) = v35;
          *(float64x2_t *)(v10 + 96) = vmulq_n_f64(v37, sqrt(1.0 / v34));
          i = i + v35;
        }
        v10 += 152;
      }
      while (v10 != v9);
    }
  }
  else
  {
    for (i = 0.0; v10 != v9; v10 += 152)
    {
      while (1)
      {
        v16 = sub_20FC6DB14(v10 + 8, (uint64_t *)(v10 + 72), (float64x2_t *)(v10 + 96), v4, v5, v6);
        *(_BYTE *)(v10 + 120) = v16;
        if (v16)
          break;
        *(_QWORD *)(v10 + 112) = 0;
        v10 += 152;
        if (v10 == v9)
          goto LABEL_27;
      }
      v17 = *(_QWORD *)(v10 + 128);
      if (v17)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v10 + 96);
      *(_OWORD *)(v10 + 80) = *(_OWORD *)(v10 + 96);
      v36 = *(float64x2_t *)(v10 + 96);
      _D1 = v36.f64[1];
      __asm { FMLA            D0, D1, V2.D[1] }
      v24 = *(double *)(a1 + 24);
      v25 = *(double *)(a1 + 32) * (*(double *)(a1 + 16) * _D0);
      v26 = v25 + 1.0;
      v4.f64[0] = v24 * log1p(v25);
      *(float64_t *)(v10 + 112) = v4.f64[0];
      v6 = v36;
      v5 = vmulq_n_f64(v36, sqrt(1.0 / v26));
      *(float64x2_t *)(v10 + 96) = v5;
      i = i + v4.f64[0];
    }
  }
LABEL_27:
  *(double *)a2[64] = i * 0.5;
  *(_WORD *)(a1 + 299) = 257;
  v27 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v28 = *(double *)a2[64];
  kdebug_trace();
  return v27 + v28;
}

void sub_20F3A67BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EDB42B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F3A67D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EDB42B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_20F3A67E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20EDB42B8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20F3A67FC(uint64_t a1, uint64_t a2, uint64_t *a3, double a4, float64x2_t a5, float64x2_t a6)
{
  float64x2_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14[4];
  _QWORD v15[2];
  _BYTE v16[512];
  _BYTE *v17;
  __int128 v18;

  v17 = v16;
  v9 = (float64x2_t)xmmword_210378040;
  v18 = xmmword_210378040;
  v10 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if (v10 >= 0x41)
  {
    if (v10 <= 0x80)
      v10 = 128;
    *(_QWORD *)&v18 = v10;
    v11 = operator new[]();
    if (v17 != v16 && v17)
      MEMORY[0x212BC6368]();
    v17 = (_BYTE *)v11;
  }
  v12 = *a3;
  v15[0] = 1;
  v15[1] = v12;
  v14[0] = a1;
  v14[1] = (uint64_t)v15;
  v14[2] = a2;
  v14[3] = (uint64_t)v16;
  sub_20F3A6964(v14, v9, a5, a6);
  *((_QWORD *)&v18 + 1) = 0;
  result = (uint64_t)v17;
  if (v17 != v16)
  {
    if (v17)
      return MEMORY[0x212BC6368]();
  }
  return result;
}

void sub_20F3A6928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  unint64_t v17;

  STACK[0x248] = 0;
  v17 = STACK[0x238];
  if ((char *)STACK[0x238] != &a16)
  {
    if (v17)
      MEMORY[0x212BC6368](v17, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20F3A6964(uint64_t *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  v5 = a1[3];
  *(_QWORD *)(v5 + 528) = 0;
  v6 = *a1;
  if (!*(_BYTE *)(*a1 + 300))
  {
    v13 = *a1 + 40;
    sub_20F3A6A68((uint64_t)&v13, a2, a3, a4, *(unsigned __int8 *)(v6 + 299), (_QWORD *)v5);
    v7 = *(_QWORD *)(v5 + 528);
    if (v7)
      goto LABEL_3;
LABEL_9:
    v12 = 1.0;
    goto LABEL_10;
  }
  v13 = *a1 + 40;
  sub_20F2C4610((uint64_t)&v13, *(unsigned __int8 *)(v6 + 299), (_QWORD *)v5);
  v7 = *(_QWORD *)(v5 + 528);
  if (!v7)
    goto LABEL_9;
LABEL_3:
  v8 = v7 >> 1;
  sub_20E8FB210(*(double **)(v5 + 512), (double *)(*(_QWORD *)(v5 + 512) + v8 * 8), (double *)(*(_QWORD *)(v5 + 512) + 8 * v7));
  v9 = *(double **)(v5 + 512);
  v10 = v9[v8];
  if ((v7 & 1) == 0)
  {
    v11 = (v7 >> 1) - 1;
    if (v11 != v7)
    {
      sub_20E8FB210(v9, &v9[v11], &v9[v7]);
      v9 = *(double **)(v5 + 512);
    }
    v10 = (v10 + v9[v11]) * 0.5;
  }
  v12 = sqrt(v10) * *(double *)(a1[1] + 8);
LABEL_10:
  *(double *)a1[2] = v12;
}

void sub_20F3A6A68(uint64_t a1, float64x2_t _Q0, float64x2_t _Q1, float64x2_t _Q2, uint64_t a5, _QWORD *a6)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float64x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  float64x2_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  char *v39;
  float64x2_t v40;
  char v41;

  v8 = a6[66];
  v9 = v8
     - 0x79435E50D79435E5 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  if (v8 >= v9)
    goto LABEL_22;
  v10 = a6[65];
  if (v10 >= v9)
  {
    v26 = a6[66];
    v27 = 0x86BCA1AF286BCA1BLL
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
    if (v9 <= v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  v11 = 2 * v10;
  if (v11 <= v9)
    v11 = v8
        - 0x79435E50D79435E5
        * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 112) - *(_QWORD *)(*(_QWORD *)a1 + 104)) >> 3);
  a6[65] = v11;
  v12 = (float64x2_t *)a6[64];
  v13 = operator new[]();
  v14 = v13;
  if (v8)
  {
    v15 = 0;
    if (v8 < 4)
      goto LABEL_11;
    if ((unint64_t)(v13 - (_QWORD)v12) < 0x20)
      goto LABEL_11;
    v15 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v16 = (__n128 *)(v13 + 16);
    v17 = v12 + 1;
    v18 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      _Q0 = v17[-1];
      _Q1 = *v17;
      v16[-1] = (__n128)_Q0;
      *v16 = (__n128)_Q1;
      v16 += 2;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    if (v8 != v15)
    {
LABEL_11:
      v19 = v8 - v15;
      v20 = 8 * v15;
      v21 = (unint64_t *)&v12->f64[v15];
      v22 = (unint64_t *)(v13 + v20);
      do
      {
        v23 = *v21++;
        *(_QWORD *)&_Q0.f64[0] = v23;
        *v22++ = v23;
        --v19;
      }
      while (v19);
    }
  }
  v24 = (_QWORD *)a6[64];
  if (v24 != a6 && v24 != 0)
    MEMORY[0x212BC6368]();
  a6[64] = v14;
  v26 = a6[66];
  v27 = v9 - v26;
  if (v9 > v26)
LABEL_21:
    bzero((void *)(a6[64] + 8 * v26), 8 * v27);
LABEL_22:
  a6[66] = v9;
  v28 = a6[64];
  v29 = (char *)(v28 + 8 * v8);
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 104);
  v31 = *(uint64_t **)(*(_QWORD *)a1 + 112);
  if (v30 != v31)
  {
    v32 = v30 + 9;
    do
    {
      v37 = sub_20FC6DB14((uint64_t)(v32 - 8), v32, &v40, _Q0, _Q1, _Q2);
      v41 = v37;
      if (v37)
      {
        v38 = v32[7];
        if (!v38 || ((*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v38 + 24))(v38, &v40), v41))
        {
          _Q1 = v40;
          _Q0 = vmulq_f64(_Q1, _Q1);
          _Q2.f64[0] = v40.f64[1];
          __asm { FMLA            D0, D2, V1.D[1] }
          *(float64_t *)v29 = _Q0.f64[0];
          v29 += 8;
        }
      }
      v36 = v32 + 10;
      v32 += 19;
    }
    while (v36 != v31);
    v28 = a6[64];
    v9 = a6[66];
  }
  v39 = (char *)(v28 + 8 * v9);
  if (v29 != v39)
    a6[66] = v9 + ~((unint64_t)(v39 - v29 - 8) >> 3);
}

uint64_t sub_20F3A6C90(uint64_t a1, uint64_t a2, uint64_t a3, double a4, float64x2_t a5, float64x2_t a6)
{
  float64x2_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13[4];
  _BYTE v14[512];
  _BYTE *v15;
  __int128 v16;

  v15 = v14;
  v9 = (float64x2_t)xmmword_210378040;
  v16 = xmmword_210378040;
  v10 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3);
  if (v10 >= 0x41)
  {
    if (v10 <= 0x80)
      v10 = 128;
    *(_QWORD *)&v16 = v10;
    v11 = operator new[]();
    if (v15 != v14 && v15)
      MEMORY[0x212BC6368]();
    v15 = (_BYTE *)v11;
  }
  v13[0] = a1;
  v13[1] = a3;
  v13[2] = a2;
  v13[3] = (uint64_t)v14;
  sub_20F3A6DE8(v13, v9, a5, a6);
  *((_QWORD *)&v16 + 1) = 0;
  result = (uint64_t)v15;
  if (v15 != v14)
  {
    if (v15)
      return MEMORY[0x212BC6368]();
  }
  return result;
}

void sub_20F3A6DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  unint64_t v15;

  STACK[0x238] = 0;
  v15 = STACK[0x228];
  if ((char *)STACK[0x228] != &a14)
  {
    if (v15)
      MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
  }
  _Unwind_Resume(a1);
}

void sub_20F3A6DE8(uint64_t *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  v5 = a1[3];
  *(_QWORD *)(v5 + 528) = 0;
  v6 = *a1;
  if (!*(_BYTE *)(*a1 + 300))
  {
    v13 = *a1 + 40;
    sub_20F3A6A68((uint64_t)&v13, a2, a3, a4, *(unsigned __int8 *)(v6 + 299), (_QWORD *)v5);
    v7 = *(_QWORD *)(v5 + 528);
    if (v7)
      goto LABEL_3;
LABEL_9:
    v12 = 1.0;
    goto LABEL_10;
  }
  v13 = *a1 + 40;
  sub_20F2C4610((uint64_t)&v13, *(unsigned __int8 *)(v6 + 299), (_QWORD *)v5);
  v7 = *(_QWORD *)(v5 + 528);
  if (!v7)
    goto LABEL_9;
LABEL_3:
  v8 = v7 >> 1;
  sub_20E8FB210(*(double **)(v5 + 512), (double *)(*(_QWORD *)(v5 + 512) + v8 * 8), (double *)(*(_QWORD *)(v5 + 512) + 8 * v7));
  v9 = *(double **)(v5 + 512);
  v10 = v9[v8];
  if ((v7 & 1) == 0)
  {
    v11 = (v7 >> 1) - 1;
    if (v11 != v7)
    {
      sub_20E8FB210(v9, &v9[v11], &v9[v7]);
      v9 = *(double **)(v5 + 512);
    }
    v10 = (v10 + v9[v11]) * 0.5;
  }
  v12 = sqrt(v10) * **(double **)a1[1];
LABEL_10:
  *(double *)a1[2] = v12;
}

uint64_t sub_20F3A6EF0(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;

  result = sub_20F3A7058(*a1 + 40, 0, 1);
  v8 = result;
  *a3 += result;
  *a4 += 3 * result;
  v9 = a2[66];
  v10 = v9 + 1;
  v11 = a2[65];
  if (v9 + 1 <= v11)
  {
    v15 = a2[64];
  }
  else
  {
    v12 = 2 * v11;
    if (v12 > v10)
      v10 = v12;
    a2[65] = v10;
    v13 = a2[64];
    v14 = operator new[]();
    v15 = v14;
    if (v9)
    {
      v16 = 0;
      if (v9 < 4)
        goto LABEL_10;
      if ((unint64_t)(v14 - v13) < 0x20)
        goto LABEL_10;
      v16 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      v17 = (_OWORD *)(v14 + 16);
      v18 = (__int128 *)(v13 + 16);
      v19 = v9 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *v18;
        *(v17 - 1) = *(v18 - 1);
        *v17 = v20;
        v17 += 2;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v9 != v16)
      {
LABEL_10:
        v21 = v9 - v16;
        v22 = 8 * v16;
        v23 = (uint64_t *)(v13 + 8 * v16);
        v24 = (_QWORD *)(v14 + v22);
        do
        {
          v25 = *v23++;
          *v24++ = v25;
          --v21;
        }
        while (v21);
      }
    }
    result = a2[64];
    if ((_QWORD *)result != a2 && result != 0)
      result = MEMORY[0x212BC6368]();
    a2[64] = v15;
    v9 = a2[66];
  }
  *(_QWORD *)(v15 + 8 * v9) = v8;
  ++a2[66];
  return result;
}

uint64_t sub_20F3A7058(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  char v14;
  uint64_t v15;
  char v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 152))
  {
    v5 = 0;
    if (v3 != v4)
    {
      if (a2)
      {
        do
        {
          v6 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v6 + 4) & 2) == 0 && *(_BYTE *)(v6 + 20))
          {
            if ((*(_BYTE *)(v6 + 4) & 1) != 0)
              v7 = a3;
            else
              v7 = 1;
            v5 = (v5 + v7);
          }
          v3 += 16;
        }
        while (v3 != v4);
      }
      else if ((a3 & 1) != 0)
      {
        do
        {
          v8 = *(_QWORD *)(v3 + 8);
          if ((*(_BYTE *)(v8 + 4) & 6) == 0)
            v5 = v5 + *(unsigned __int8 *)(v8 + 20);
          v3 += 16;
        }
        while (v3 != v4);
      }
      else
      {
        do
        {
          v9 = *(_QWORD *)(v3 + 8);
          v10 = *(_BYTE *)(v9 + 4);
          if ((v10 & 6) == 0)
          {
            v11 = *(unsigned __int8 *)(v9 + 20);
            if ((v10 & 1) != 0 || v11 == 0)
              v5 = v5;
            else
              v5 = (v5 + 1);
          }
          v3 += 16;
        }
        while (v3 != v4);
      }
    }
  }
  else if (v3 == v4)
  {
    return 0;
  }
  else
  {
    v14 = 0;
    LODWORD(v5) = 0;
    if ((a2 & 1) != 0)
    {
      do
      {
        v15 = *(_QWORD *)(v3 + 8);
        v16 = *(_BYTE *)(v15 + 4);
        if ((v16 & 2) != 0)
          v14 = 1;
        v17 = *(unsigned __int8 *)(v15 + 20);
        if ((v16 & 1) != 0)
          v18 = a3;
        else
          v18 = 1;
        v19 = v5 + v18;
        if (v17)
          v5 = v19;
        else
          v5 = v5;
        v3 += 16;
      }
      while (v3 != v4);
    }
    else
    {
      do
      {
        v20 = *(_QWORD *)(v3 + 8);
        v21 = *(_BYTE *)(v20 + 4);
        if ((v21 & 6) != 0)
          v14 = 1;
        v22 = *(unsigned __int8 *)(v20 + 20);
        if ((v21 & 1) != 0)
          v23 = a3;
        else
          v23 = 1;
        v24 = v5 + v23;
        if (v22)
          v5 = v24;
        else
          v5 = v5;
        v3 += 16;
      }
      while (v3 != v4);
    }
    if (v14)
    {
      v25 = *(_QWORD *)(a1 + 232);
      v36 = a1 + 232;
      *(_QWORD *)(a1 + 240) = v25;
      v26 = *(_QWORD *)(a1 + 104);
      v27 = *(_QWORD *)(a1 + 112);
      if (v26 != v27)
      {
        v28 = v26 + 72;
        do
        {
          if (*(_BYTE *)(v28 + 72) || (*(_BYTE *)(*(_QWORD *)v28 + 4) & 6) != 0)
            sub_20F2B734C(&v36, (uint64_t *)v28);
          v29 = v28 + 80;
          v28 += 152;
        }
        while (v29 != v27);
        v30 = (uint64_t)(*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 2;
        if (v30 <= v5)
          v5 = (v5 - v30);
        else
          v5 = 0;
        v32 = *(_QWORD *)(a1 + 104);
        v33 = *(_QWORD *)(a1 + 112);
        while (v32 != v33)
        {
          v34 = *(_QWORD *)(v32 + 72);
          if (*(_BYTE *)(v32 + 144) || (*(_BYTE *)(v34 + 4) & 6) != 0)
            ++*(_DWORD *)(v34 + 8);
          v32 += 152;
        }
      }
    }
  }
  return v5;
}

void sub_20F3A7290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (!a10)
    sub_20F2B78E4(v10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F3A72B0(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (*a1)[1];
  v6 = **a1;
  sub_20F2C4C68((uint64_t)&v6, (_QWORD *)(v2 + 1160), (_QWORD *)(v2 + 1152));
  v3 = (_QWORD *)v1[1];
  v5 = *v1;
  return sub_20F3A6EF0(&v5, v3 + 214, v3 + 212, v3 + 213);
}

uint64_t sub_20F3A7308(uint64_t a1)
{
  uint64_t v2;
  float64x2_t v3;
  float64x2_t v4;
  uint64_t v6;
  float64x2_t **v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v12;
  double v13;
  double v14;
  float64x2_t *v16;
  float64x2_t *v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v21;
  float64x2_t v26;
  float64x2_t v28;
  float64x2_t *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double cosval;
  double v36;
  __double2 v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  float64x2_t v43;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  if ((!v2 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2) & 1) == 0)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 494, (uint64_t)"this->m_entity && this->m_entity->isSetup()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(float64x2_t ***)(v6 + 96);
  v8 = *(double *)(a1 + 24);
  v9 = *(double *)(a1 + 32);
  v10 = v8 * v8 + v9 * v9;
  if (v10 >= 0.0000002635)
  {
    v11 = sqrt(v10);
    v12 = __sincos_stret(v11);
    v4.f64[0] = v12.__cosval;
    _Q2.f64[0] = v12.__sinval / v11;
    v3.f64[0] = 1.0 / v10 * (1.0 - v12.__cosval);
  }
  else
  {
    v3.f64[0] = 0.5 - v10 * (v10 / -720.0 + 0.0416666667);
    _Q2.f64[0] = 1.0 - v10 * (0.166666667 - v10 * (v10 / -5040.0 + 0.00833333333));
    v4.f64[0] = 1.0 - v10 * v3.f64[0];
  }
  v13 = v8 * v3.f64[0];
  v14 = v9 * v3.f64[0];
  v3.f64[0] = v4.f64[0] + v3.f64[0] * 0.0 * 0.0;
  v4.f64[0] = v9 * _Q2.f64[0] + v13 * 0.0;
  _Q2.f64[0] = v14 * 0.0 - v8 * _Q2.f64[0];
  _Q4 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 40), v4.f64[0]), *(float64x2_t *)(a1 + 64), _Q2.f64[0]), *(float64x2_t *)(a1 + 88), v3.f64[0]);
  v3.f64[0] = *(double *)(a1 + 56) * v4.f64[0] + *(double *)(a1 + 80) * _Q2.f64[0] + *(double *)(a1 + 104) * v3.f64[0];
  v16 = v7[2];
  v17 = v7[4];
  v18 = v7[6];
  v4.f64[0] = *(float64_t *)(a1 + 16);
  v19 = vmulq_f64(v3, v4);
  _Q1 = vmulq_n_f64(_Q4, v4.f64[0]);
  _Q4.f64[0] = v17[2].f64[1];
  v21 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*v17, _Q1.f64[0]), *(float64x2_t *)((char *)v17 + 24), _Q1, 1), v17[3], v19.f64[0]);
  __asm { FMLA            D2, D4, V1.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v17[4].f64[0], v19.f64[0]);
  v19.f64[0] = v18[1].f64[0];
  v26 = vaddq_f64(v19, _Q2);
  _Q1 = vaddq_f64(*v18, v21);
  _Q4.f64[0] = (*v7)[2].f64[1];
  v28 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(**v7, _Q1.f64[0]), *(float64x2_t *)((char *)*v7 + 24), _Q1, 1), (*v7)[3], v26.f64[0]);
  __asm { FMLA            D2, D4, V1.D[1] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], (*v7)[4].f64[0], v26.f64[0]);
  v26.f64[0] = v16[1].f64[0];
  *(float64x2_t *)(v6 + 8) = vaddq_f64(*v16, v28);
  *(_QWORD *)(v6 + 24) = *(_OWORD *)&vaddq_f64(v26, _Q2);
  v29 = *(float64x2_t **)(a1 + 8);
  v30 = *(double *)(a1 + 24);
  v31 = *(double *)(a1 + 32);
  v32 = v30 * v30 + v31 * v31;
  if (v32 >= 0.0000002635)
  {
    v36 = sqrt(v32);
    v37 = __sincos_stret(v36);
    cosval = v37.__cosval;
    v34 = v37.__sinval / v36;
    v33 = 1.0 / v32 * (1.0 - v37.__cosval);
  }
  else
  {
    v33 = 0.5 - v32 * (v32 / -720.0 + 0.0416666667);
    v34 = 1.0 - v32 * (0.166666667 - v32 * (v32 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v32 * v33;
  }
  v38 = v30 * v33;
  v39 = v31 * v33;
  v40 = cosval + v33 * 0.0 * 0.0;
  v41 = v31 * v34 + v38 * 0.0;
  v42 = v39 * 0.0 - v30 * v34;
  v43 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 40), v41), *(float64x2_t *)(a1 + 64), v42), *(float64x2_t *)(a1 + 88), v40);
  v29[5].f64[0] = *(double *)(a1 + 56) * v41 + *(double *)(a1 + 80) * v42 + *(double *)(a1 + 104) * v40;
  v29[4] = v43;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if ((result & 1) == 0)
  {
    result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/VIOEstimator/include/VIO/VIOEstimator/viovariables.hpp", 513, (uint64_t)"this->m_entity->update()", 24, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
LABEL_13:
      abort();
  }
  return result;
}

double sub_20F3A76B4(uint64_t a1, double *a2)
{
  double *v2;
  double *v3;
  uint64_t v4;
  double result;

  v2 = *(double **)a1;
  v3 = *(double **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = a2[11] + a2[9] * *v3 + a2[10] * v3[1];
  result = a2[13] * v3[1] + a2[14];
  v2[1] = result;
  if (v4)
  {
    *(double *)v4 = a2[9];
    *(double *)(v4 + 8) = a2[10];
    *(_QWORD *)(v4 + 16) = 0;
    result = a2[13];
    *(double *)(v4 + 24) = result;
  }
  return result;
}

void sub_20F3A7714(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F3A7AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

