void sub_20FE52E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE52EF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE53070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE530D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE53248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE532A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE53420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE53480(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE53528(a2);
      break;
    case 1:
      sub_20FE536E4(a2);
      break;
    case 2:
      sub_20FE538B8(a2);
      break;
    case 3:
      sub_20FE53A90(a2);
      break;
    case 5:
      sub_20FE53C68(a2);
      break;
    case 6:
      sub_20FE53E24(a2);
      break;
    case 7:
      sub_20FE53FF8(a2);
      break;
    case 8:
      sub_20FE541D0(a2);
      break;
    case 11:
      sub_20FE543A8(a2);
      break;
    case 12:
      sub_20FE54580(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE53528(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1DF0(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE53684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE536E4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20E867F44();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE53858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE538B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE53A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE53A90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E92CED8();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE53C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE53C68(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(3 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1C50(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE53DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE53E24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if (3 * v2 < 0)
      sub_20FDFA718();
    v4 = 6 * v2;
    v5 = (char *)operator new(6 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE53F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE53FF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20EABADD4();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE54170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE541D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20FDFA718();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE54348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE543A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE54520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE54580(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (v2)
  {
    v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56) >= 0x5555555555555556
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)&unk_2102D0105, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE546F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FE54758@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  unsigned __int128 *v8;
  unsigned __int128 v9;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24CA09C58;
  *(_QWORD *)(v4 + 8) = &off_24CA17CC8;
  v6 = *(_OWORD *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = v7;
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v8 = (unsigned __int128 *)(a1 + 176);
    do
      v9 = __ldaxp(v8);
    while (__stlxp(v9, v8));
    *(_OWORD *)(v4 + 176) = v9;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24CA09BD8;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FE548F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE5490C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA09C58;
  sub_20EB0580C((uint64_t)(a1 + 4));
  a1[1] = &off_24CA17CC8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE54990(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA09C58;
  sub_20EB0580C((uint64_t)(a1 + 4));
  a1[1] = &off_24CA17CC8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE54A14(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20FE54A1C(void *a1, void *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA09C18, 0);
  if (result)
    return a1 == lpsrc || sub_2100D09C8((uint64_t)a1 + 8, result + 8);
  return result;
}

void sub_20FE54A80(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FE55B6C();
  sub_20FE54B34(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FE54B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE54B34(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A564F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A564F8))
  {
    v4 = sub_20FE55970();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A564E0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A564F0 = *(_QWORD *)(v9 - 8);
      xmmword_254A564E0 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A564E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A564F8);
  }
  return sub_20FE55F2C(&xmmword_254A564E0, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_20FE54C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A564F8);
  _Unwind_Resume(a1);
}

void sub_20FE54C64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A564F8);
  _Unwind_Resume(a1);
}

void sub_20FE54C7C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 5;
}

void sub_20FE54CA8(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 5, a2);
}

_QWORD *sub_20FE54CE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA09C58;
  sub_20EB0580C((uint64_t)(a1 + 4));
  a1[1] = &off_24CA17CC8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE54D64(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA09C58;
  sub_20EB0580C((uint64_t)(a1 + 4));
  a1[1] = &off_24CA17CC8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE54DE8(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FE5540C();
  return sub_20FE54F3C(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20FE54E40(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FE55168((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v5, v2);
  return result;
}

void sub_20FE54ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FE54F10(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FE54F3C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FE55168((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FE550D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE550F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE55104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE55118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5512C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE55140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE55154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE55168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_2100D13AC((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FE553B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FE553DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE553F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE5540C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A563B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A563B8))
    return &xmmword_254A563A0;
  v2 = sub_20FE554E8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A563A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A563B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A563A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A563A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A563B8);
  return &xmmword_254A563A0;
}

void sub_20FE554D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A563B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE554E8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A563D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A563D8))
    return &stru_254A563C0;
  sub_20FE5578C((uint64_t)__p);
  sub_20FE555D8((char *)__p, &stru_254A563C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A563C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A563D8);
  return &stru_254A563C0;
}

void sub_20FE55598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A563D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A563D8);
  _Unwind_Resume(a1);
}

void sub_20FE555D8(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FE55970();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FE5573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FE5578C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56458);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56458))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::cam::Camera>]", qword_254A56440);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56440, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56458);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56478);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56478))
  {
    v5 = sub_20E8A2354(qword_254A56440, "<", 0);
    sub_20E89FC08(qword_254A56440, 0, v5, qword_254A56460);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56460, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56478);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56498);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56498))
  {
    sub_21023CD84((uint64_t)qword_254A56460, (uint64_t)&xmmword_254A56480);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56480, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56498);
  }
  if (byte_254A56497 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56480, *((unint64_t *)&xmmword_254A56480 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56480;
    *(_QWORD *)(a1 + 16) = unk_254A56490;
  }
}

void sub_20FE55928(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56498);
  _Unwind_Resume(a1);
}

void sub_20FE55940(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56478);
  _Unwind_Resume(a1);
}

void sub_20FE55958(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56458);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE55970()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A563F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A563F8))
    return &xmmword_254A563E0;
  v2 = (char *)sub_20FE55A4C();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A563E0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A563F0 = *((_QWORD *)v2 + 2);
    xmmword_254A563E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A563E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A563F8);
  return &xmmword_254A563E0;
}

void sub_20FE55A34(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A563F8);
  _Unwind_Resume(a1);
}

void *sub_20FE55A4C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56418);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A56418))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::Camera]", qword_254A56400);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56400, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56418);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A56438);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56438))
    return &unk_254A56420;
  sub_21023CD84((uint64_t)qword_254A56400, (uint64_t)&unk_254A56420);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A56420, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56438);
  return &unk_254A56420;
}

void sub_20FE55B3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56438);
  _Unwind_Resume(a1);
}

void sub_20FE55B54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56418);
  _Unwind_Resume(a1);
}

std::string *sub_20FE55B6C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A564B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A564B8))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20FE55970();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20FE55E34();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A564A0, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A564A0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A564B8);
        return &stru_254A564A0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A564A0;
}

void sub_20FE55D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A564B8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A564B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE55E34()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A564D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A564D8))
    return &stru_254A564C0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 5U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A564C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A564C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A564D8);
  return &stru_254A564C0;
}

void sub_20FE55EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A564D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A564D8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE55F2C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FE55168((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FE5606C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE56084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE56098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE560AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE560C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE560D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  sub_2101FAEA0(a2);
  v10 = "version";
  v11 = 7;
  LODWORD(v12[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, v12);
  LODWORD(v10) = *(_DWORD *)a3;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))(a3 + 8);
  v7 = a3 + 8;
  v6 = v8;
  v11 = 0;
  v12[0] = 0;
  if (v8)
    v6(1, v7, &v11, 0, 0);
  sub_20FE56254(a2, (uint64_t)&v10);
  if (v11)
    ((void (*)(_QWORD, uint64_t *, _QWORD, _QWORD, _QWORD))v11)(0, &v11, 0, 0, 0);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE5620C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE56254(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v32;
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v41;
  int *v42;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "camera_type";
    *(_QWORD *)(a1 + 80) = 11;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v42 = (int *)a2;
  sub_20FE566F8(a1, &v42);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v12 = a2 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_55;
      v14 = v11(3, v12, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v15 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_18;
    case 1:
      v18 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v17 = a2 + 8;
      v16 = v18;
      if (!v18)
        goto LABEL_55;
      v19 = v16(3, v17, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v19)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v20 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v20)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_24;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v23 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v22 = a2 + 8;
      v21 = v23;
      if (!v23)
        goto LABEL_55;
      v14 = v21(3, v22, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v24)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_18:
      sub_20FE56AA4((uint64_t)&v42, a1, v14);
      break;
    case 11:
      v27 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v26 = a2 + 8;
      v25 = v27;
      if (!v27 || (v19 = v25(3, v26, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_55:
        sub_20FE56C30();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v28 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v28)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_24:
      sub_20FE56C84((uint64_t)&v42, a1, v19);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_55;
          v9 = v6(3, v7, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v10 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v10)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_11;
        case 'e':
          v31 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v30 = a2 + 8;
          v29 = v31;
          if (!v31)
            goto LABEL_55;
          v32 = v29(3, v30, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v33 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v33)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_42;
        case 'n':
          v36 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v35 = a2 + 8;
          v34 = v36;
          if (!v36)
            goto LABEL_55;
          v9 = v34(3, v35, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v37 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v37)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_11:
          sub_20FE56E10((uint64_t)&v42, a1, v9);
          break;
        case 'o':
          v40 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v39 = a2 + 8;
          v38 = v40;
          if (!v40)
            goto LABEL_55;
          v32 = v38(3, v39, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v41 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v41)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_42:
          sub_20FE56FE4((uint64_t)&v42, a1, v32);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20FE566F8(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FE56800((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FD70C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FE567BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE567D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE567EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE56800(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_2100CAD60((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FE56A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FE56A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE56A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FE56AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_2101FAEA0(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FD244(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FD244(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_2101FE8F4(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 8;
  sub_2101FE8F4(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_2101FDE34(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE56C30()
{
  std::bad_cast *exception;
  std::bad_cast *v1;

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  v1 = sub_20FE56C5C(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB728], (void (*)(void *))std::exception::~exception);
}

std::bad_cast *sub_20FE56C5C(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB8A8] + 16);
  return result;
}

void sub_20FE56C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_2101FAEA0(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FD244(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FD244(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_2101FEC64(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_2101FEC64(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 32;
  sub_2101FDE34(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE56E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_2101FAEA0(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FD244(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FD244(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_2101FE8F4(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 8;
  sub_2101FE8F4(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 16;
  sub_2101FE8F4(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 36;
  sub_2101FDE34(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE56FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_2101FAEA0(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FD244(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FD244(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_2101FEC64(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 16;
  sub_2101FEC64(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 32;
  sub_2101FEC64(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 72;
  sub_2101FDE34(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE571B8(uint64_t a1, uint64_t a2, int *a3)
{
  void (*v5)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  int *v6;
  void (*v7)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  v13 = *a3;
  v7 = (void (*)(uint64_t, int *, _QWORD *, _QWORD, _QWORD))*((_QWORD *)a3 + 1);
  v6 = a3 + 2;
  v5 = v7;
  v14[0] = 0;
  v14[1] = 0;
  if (v7)
    v5(1, v6, v14, 0, 0);
  sub_20FE57340(a2, (uint64_t)&v13);
  if (v14[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v14[0])(0, v14, 0, 0, 0);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v8 + 48), *(_QWORD *)(v8 + 16) - v9 - 9);
  v10 = *(_QWORD *)(v8 + 48);
  if (v10)
    memmove((void *)(*(_QWORD *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  *(_QWORD *)(v8 + 48) = 0;
  v11 = *(_QWORD *)(v8 + 80);
  v12 = *(_QWORD *)(v8 + 88) - 8;
  *(_QWORD *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(_BYTE *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(_BYTE *)(v8 + 40) = 0;
    }
  }
}

void sub_20FE572F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE57340(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, void *, void *);
  unsigned int *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, _QWORD, void *, void *);
  unsigned int *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _BYTE v113[9];
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    *(_QWORD *)v113 = v5 + 16;
    sub_20E9F3D4C((uint64_t **)v113, v4);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)v113, v5 + 8);
  }
  v6 = *(_DWORD *)a2;
  switch(v6)
  {
    case 0u:
      v14 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v13 = a2 + 8;
      v12 = v14;
      if (!v14 || (v15 = (unsigned int *)v12(3, v13, 0, &unk_24CA09CD0, &unk_2103ECE3C)) == 0)
        sub_20FE56C30();
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
      {
        *(_QWORD *)v113 = v16 + 16;
        sub_20E9F3D4C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v113, v16 + 8);
      }
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      v45 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v45 + 40))
      {
        *(_QWORD *)v113 = v45 + 16;
        sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v15);
        sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v15 + 1);
      }
      else
      {
        v52 = *v15;
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v52);
        std::ostream::write();
        v53 = v15[1];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v53);
        std::ostream::write();
      }
      v54 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v54 + 40))
      {
        *(_QWORD *)v113 = v54 + 16;
        sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v15 + 2);
        sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v15 + 3);
      }
      else
      {
        v61 = v15[2];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v61);
        std::ostream::write();
        v62 = v15[3];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v62);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
        goto LABEL_68;
      goto LABEL_125;
    case 1u:
      v28 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v27 = a2 + 8;
      v26 = v28;
      if (!v28 || (v20 = v26(3, v27, 0, &unk_24CA09D20, &unk_2103ECF10)) == 0)
        sub_20FE56C30();
      v29 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v29 + 40))
      {
        *(_QWORD *)v113 = v29 + 16;
        sub_20E9F3D4C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v113, v29 + 8);
      }
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      v46 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v46 + 40))
      {
        *(_QWORD *)v113 = v46 + 16;
        sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v20);
        sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 8));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v20);
        v113[0] = -53;
        std::ostream::write();
        v55 = *(_QWORD *)(v20 + 8);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v55);
        std::ostream::write();
      }
      v56 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v56 + 40))
      {
        *(_QWORD *)v113 = v56 + 16;
        sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 16));
        sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 24));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v20 + 16));
        v113[0] = -53;
        std::ostream::write();
        v63 = *(_QWORD *)(v20 + 24);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v63);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
        goto LABEL_65;
      goto LABEL_125;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      return;
    case 0xAu:
      v24 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24 || (v15 = (unsigned int *)v22(3, v23, 0, &unk_24CA09D70, &unk_2103ECFE4)) == 0)
        sub_20FE56C30();
      v25 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v25 + 40))
      {
        *(_QWORD *)v113 = v25 + 16;
        sub_20E9F3D4C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v113, v25 + 8);
      }
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      v44 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)v113 = v44 + 16;
        sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v15);
        sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v15 + 1);
      }
      else
      {
        v49 = *v15;
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v49);
        std::ostream::write();
        v50 = v15[1];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v50);
        std::ostream::write();
      }
      v51 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v51 + 40))
      {
        *(_QWORD *)v113 = v51 + 16;
        sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v15 + 2);
        sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v15 + 3);
      }
      else
      {
        v59 = v15[2];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v59);
        std::ostream::write();
        v60 = v15[3];
        v113[0] = -54;
        *(_DWORD *)&v113[1] = bswap32(v60);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v58 + 40))
        goto LABEL_125;
LABEL_68:
      *(_QWORD *)v113 = v58 + 16;
      sub_20E9F3D4C((uint64_t **)v113, v15[4]);
      sub_20E9F3D4C((uint64_t **)v113, v15[5]);
      break;
    case 0xBu:
      v19 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v18 = a2 + 8;
      v17 = v19;
      if (!v19 || (v20 = v17(3, v18, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
        sub_20FE56C30();
      v21 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v21 + 40))
      {
        *(_QWORD *)v113 = v21 + 16;
        sub_20E9F3D4C((uint64_t **)v113, 2u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)v113, v21 + 8);
      }
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      v43 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v43 + 40))
      {
        *(_QWORD *)v113 = v43 + 16;
        sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v20);
        sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 8));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v20);
        v113[0] = -53;
        std::ostream::write();
        v47 = *(_QWORD *)(v20 + 8);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v47);
        std::ostream::write();
      }
      v48 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v48 + 40))
      {
        *(_QWORD *)v113 = v48 + 16;
        sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 16));
        sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v20 + 24));
      }
      else
      {
        *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v20 + 16));
        v113[0] = -53;
        std::ostream::write();
        v57 = *(_QWORD *)(v20 + 24);
        v113[0] = -53;
        *(_QWORD *)&v113[1] = bswap64(v57);
        std::ostream::write();
      }
      v58 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v58 + 40))
      {
LABEL_65:
        *(_QWORD *)v113 = v58 + 16;
        sub_20E9F3D4C((uint64_t **)v113, *(_DWORD *)(v20 + 32));
        sub_20E9F3D4C((uint64_t **)v113, *(_DWORD *)(v20 + 36));
      }
      else
      {
LABEL_125:
        v106 = v58 + 8;
        sub_20E9F3FC0((uint64_t)v113, v58 + 8);
        sub_20E9F3FC0((uint64_t)v113, v106);
      }
      break;
    default:
      switch(v6)
      {
        case 'd':
          v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v8 = a2 + 8;
          v7 = v9;
          if (!v9 || (v10 = (unsigned int *)v7(3, v8, 0, &unk_24CA09E10, &unk_2103ED190)) == 0)
            sub_20FE56C30();
          v11 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v11 + 40))
          {
            *(_QWORD *)v113 = v11 + 16;
            sub_20E9F3D4C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_20E9F3FC0((uint64_t)v113, v11 + 8);
          }
          sub_20E9EE95C(*(_QWORD *)(a1 + 24));
          v66 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v66 + 40))
          {
            *(_QWORD *)v113 = v66 + 16;
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 1);
          }
          else
          {
            v73 = *v10;
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v73);
            std::ostream::write();
            v74 = v10[1];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v74);
            std::ostream::write();
          }
          v75 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v75 + 40))
          {
            *(_QWORD *)v113 = v75 + 16;
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 2);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 3);
          }
          else
          {
            v83 = v10[2];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v83);
            std::ostream::write();
            v84 = v10[3];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v84);
            std::ostream::write();
          }
          v85 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v85 + 40))
          {
            *(_QWORD *)v113 = v85 + 16;
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 4);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 5);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 6);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 7);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 8);
          }
          else
          {
            v97 = v10[4];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v97);
            std::ostream::write();
            v98 = v10[5];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v98);
            std::ostream::write();
            v99 = v10[6];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v99);
            std::ostream::write();
            v100 = v10[7];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v100);
            std::ostream::write();
            v101 = v10[8];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v101);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
          goto LABEL_119;
        case 'e':
          v41 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v40 = a2 + 8;
          v39 = v41;
          if (!v41 || (v33 = v39(3, v40, 0, &unk_24CA09E60, &unk_2103ED268)) == 0)
            sub_20FE56C30();
          v42 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v42 + 40))
          {
            *(_QWORD *)v113 = v42 + 16;
            sub_20E9F3D4C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_20E9F3FC0((uint64_t)v113, v42 + 8);
          }
          sub_20E9EE95C(*(_QWORD *)(a1 + 24));
          v67 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v67 + 40))
          {
            *(_QWORD *)v113 = v67 + 16;
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v33);
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 8));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v33);
            v113[0] = -53;
            std::ostream::write();
            v76 = *(_QWORD *)(v33 + 8);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v76);
            std::ostream::write();
          }
          v77 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v77 + 40))
          {
            *(_QWORD *)v113 = v77 + 16;
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 16));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 24));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 16));
            v113[0] = -53;
            std::ostream::write();
            v86 = *(_QWORD *)(v33 + 24);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v86);
            std::ostream::write();
          }
          v87 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v87 + 40))
          {
            *(_QWORD *)v113 = v87 + 16;
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 32));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 40));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 48));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 56));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 64));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 32));
            v113[0] = -53;
            std::ostream::write();
            v102 = *(_QWORD *)(v33 + 40);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v102);
            std::ostream::write();
            v103 = *(_QWORD *)(v33 + 48);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v103);
            std::ostream::write();
            v104 = *(_QWORD *)(v33 + 56);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v104);
            std::ostream::write();
            v105 = *(_QWORD *)(v33 + 64);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v105);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
          goto LABEL_116;
        case 'n':
          v37 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v36 = a2 + 8;
          v35 = v37;
          if (!v37 || (v10 = (unsigned int *)v35(3, v36, 0, &unk_24CA09EB0, &unk_2103ED340)) == 0)
            sub_20FE56C30();
          v38 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v38 + 40))
          {
            *(_QWORD *)v113 = v38 + 16;
            sub_20E9F3D4C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_20E9F3FC0((uint64_t)v113, v38 + 8);
          }
          sub_20E9EE95C(*(_QWORD *)(a1 + 24));
          v65 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v65 + 40))
          {
            *(_QWORD *)v113 = v65 + 16;
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 1);
          }
          else
          {
            v70 = *v10;
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v70);
            std::ostream::write();
            v71 = v10[1];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v71);
            std::ostream::write();
          }
          v72 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v72 + 40))
          {
            *(_QWORD *)v113 = v72 + 16;
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 2);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 3);
          }
          else
          {
            v80 = v10[2];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v80);
            std::ostream::write();
            v81 = v10[3];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v81);
            std::ostream::write();
          }
          v82 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v82 + 40))
          {
            *(_QWORD *)v113 = v82 + 16;
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 4);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 5);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 6);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 7);
            sub_20E9F4B2C((uint64_t)&v112, (uint64_t **)v113, v10 + 8);
          }
          else
          {
            v92 = v10[4];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v92);
            std::ostream::write();
            v93 = v10[5];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v93);
            std::ostream::write();
            v94 = v10[6];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v94);
            std::ostream::write();
            v95 = v10[7];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v95);
            std::ostream::write();
            v96 = v10[8];
            v113[0] = -54;
            *(_DWORD *)&v113[1] = bswap32(v96);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
LABEL_119:
          *(_QWORD *)v113 = v58 + 16;
          sub_20E9F3D4C((uint64_t **)v113, v10[9]);
          sub_20E9F3D4C((uint64_t **)v113, v10[10]);
          goto LABEL_126;
        case 'o':
          v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v31 = a2 + 8;
          v30 = v32;
          if (!v32 || (v33 = v30(3, v31, 0, &unk_24CA09F00, &unk_2103ED418)) == 0)
            sub_20FE56C30();
          v34 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v34 + 40))
          {
            *(_QWORD *)v113 = v34 + 16;
            sub_20E9F3D4C((uint64_t **)v113, 2u);
          }
          else
          {
            sub_20E9F3FC0((uint64_t)v113, v34 + 8);
          }
          sub_20E9EE95C(*(_QWORD *)(a1 + 24));
          v64 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v64 + 40))
          {
            *(_QWORD *)v113 = v64 + 16;
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)v33);
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 8));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)v33);
            v113[0] = -53;
            std::ostream::write();
            v68 = *(_QWORD *)(v33 + 8);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v68);
            std::ostream::write();
          }
          v69 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v69 + 40))
          {
            *(_QWORD *)v113 = v69 + 16;
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 16));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 24));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 16));
            v113[0] = -53;
            std::ostream::write();
            v78 = *(_QWORD *)(v33 + 24);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v78);
            std::ostream::write();
          }
          v79 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v79 + 40))
          {
            *(_QWORD *)v113 = v79 + 16;
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 32));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 40));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 48));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 56));
            sub_20E9F4C08((uint64_t)&v112, (uint64_t **)v113, (unint64_t *)(v33 + 64));
          }
          else
          {
            *(_QWORD *)&v113[1] = bswap64(*(_QWORD *)(v33 + 32));
            v113[0] = -53;
            std::ostream::write();
            v88 = *(_QWORD *)(v33 + 40);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v88);
            std::ostream::write();
            v89 = *(_QWORD *)(v33 + 48);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v89);
            std::ostream::write();
            v90 = *(_QWORD *)(v33 + 56);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v90);
            std::ostream::write();
            v91 = *(_QWORD *)(v33 + 64);
            v113[0] = -53;
            *(_QWORD *)&v113[1] = bswap64(v91);
            std::ostream::write();
          }
          v58 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v58 + 40))
            goto LABEL_125;
LABEL_116:
          *(_QWORD *)v113 = v58 + 16;
          sub_20E9F3D4C((uint64_t **)v113, *(_DWORD *)(v33 + 72));
          sub_20E9F3D4C((uint64_t **)v113, *(_DWORD *)(v33 + 76));
          goto LABEL_126;
        default:
          return;
      }
  }
LABEL_126:
  v107 = *(_QWORD *)(a1 + 24);
  v108 = *(_QWORD *)(*(_QWORD *)(v107 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v107 + 48), *(_QWORD *)(v107 + 16) - v108 - 9);
  v109 = *(_QWORD *)(v107 + 48);
  if (v109)
    memmove((void *)(*(_QWORD *)(v107 + 24) + v108), *(const void **)(v107 + 56), v109);
  *(_QWORD *)(v107 + 48) = 0;
  v110 = *(_QWORD *)(v107 + 80);
  v111 = *(_QWORD *)(v107 + 88) - 8;
  *(_QWORD *)(v107 + 88) = v111;
  if (v110 == v111)
  {
    std::ostream::write();
    if (*(_BYTE *)(v107 + 40))
    {
      free(*(void **)(v107 + 24));
      *(_BYTE *)(v107 + 40) = 0;
    }
  }
}

void sub_20FE587A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

void sub_20FE587E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD);
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  sub_2101FA8A4(a2);
  v10 = "version";
  v11 = 7;
  LODWORD(v12[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, v12);
  LODWORD(v10) = *(_DWORD *)a3;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD))(a3 + 8);
  v7 = a3 + 8;
  v6 = v8;
  v11 = 0;
  v12[0] = 0;
  if (v8)
    v6(1, v7, &v11, 0, 0);
  sub_20FE58964(a2, (uint64_t)&v10);
  if (v11)
    ((void (*)(_QWORD, uint64_t *, _QWORD, _QWORD, _QWORD))v11)(0, &v11, 0, 0, 0);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE5891C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE58964(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v28;
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v32;
  int v33;
  uint64_t (*v34)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v37;
  uint64_t (*v38)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, _QWORD, void *, void *);
  int v41;
  int *v42;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "camera_type";
    *(_QWORD *)(a1 + 80) = 11;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v42 = (int *)a2;
  sub_20FE58E08(a1, &v42);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v12 = a2 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_55;
      v14 = v11(3, v12, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v15 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v15)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_18;
    case 1:
      v18 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v17 = a2 + 8;
      v16 = v18;
      if (!v18)
        goto LABEL_55;
      v19 = v16(3, v17, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v19)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v20 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v20)
          *(_BYTE *)(a1 + 88) = 1;
      }
      goto LABEL_24;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v23 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v22 = a2 + 8;
      v21 = v23;
      if (!v23)
        goto LABEL_55;
      v14 = v21(3, v22, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v14)
        goto LABEL_55;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v24 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v24)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_18:
      sub_20FE58F10((uint64_t)&v42, a1, v14);
      break;
    case 11:
      v27 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v26 = a2 + 8;
      v25 = v27;
      if (!v27 || (v19 = v25(3, v26, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_55:
        sub_20FE56C30();
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v28 = *(unsigned __int8 *)(a1 + 88);
        *(_QWORD *)(a1 + 72) = "camera";
        *(_QWORD *)(a1 + 80) = 6;
        if (!v28)
          *(_BYTE *)(a1 + 88) = 1;
      }
LABEL_24:
      sub_20FE5909C((uint64_t)&v42, a1, v19);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_55;
          v9 = v6(3, v7, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v10 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v10)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_11;
        case 'e':
          v31 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v30 = a2 + 8;
          v29 = v31;
          if (!v31)
            goto LABEL_55;
          v32 = v29(3, v30, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v33 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v33)
              *(_BYTE *)(a1 + 88) = 1;
          }
          goto LABEL_42;
        case 'n':
          v36 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v35 = a2 + 8;
          v34 = v36;
          if (!v36)
            goto LABEL_55;
          v9 = v34(3, v35, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v9)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v37 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v37)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_11:
          sub_20FE59228((uint64_t)&v42, a1, v9);
          break;
        case 'o':
          v40 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v39 = a2 + 8;
          v38 = v40;
          if (!v40)
            goto LABEL_55;
          v32 = v38(3, v39, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v32)
            goto LABEL_55;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v41 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "camera";
            *(_QWORD *)(a1 + 80) = 6;
            if (!v41)
              *(_BYTE *)(a1 + 88) = 1;
          }
LABEL_42:
          sub_20FE593FC((uint64_t)&v42, a1, v32);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20FE58E08(uint64_t a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20FE56800((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20E877AB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24CA08168[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24CA08150[v7])(&v9, v6);
  sub_2101FB61C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20FE58ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE58EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE58EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE58F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_2101FA8A4(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FB154(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FB154(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_2101FC804(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 8;
  sub_2101FC804(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_2101FBD44(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE5909C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_2101FA8A4(a2);
  v10 = (uint64_t)"version";
  v11 = 7;
  v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FB154(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FB154(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v10 = 2;
  v11 = a3;
  sub_2101FCC24(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 16;
  sub_2101FCC24(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v10 = 2;
  v11 = a3 + 32;
  sub_2101FBD44(a2, (uint64_t)&v10);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(a2 + 56) = v9 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE59228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_2101FA8A4(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FB154(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FB154(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_2101FC804(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 8;
  sub_2101FC804(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 16;
  sub_2101FC804(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 36;
  sub_2101FBD44(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE593FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  sub_2101FA8A4(a2);
  v11 = (uint64_t)"version";
  v12 = 7;
  v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v5 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v5))
  {
    sub_2101FB154(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a2 + 88) = 1;
    sub_2101FB154(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u)
      goto LABEL_7;
  }
  v6 = *(unsigned __int8 *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = "focal_length";
  *(_QWORD *)(a2 + 80) = 12;
  if (!v6)
    *(_BYTE *)(a2 + 88) = 1;
LABEL_7:
  v11 = 2;
  v12 = a3;
  sub_2101FCC24(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "principal_point";
    *(_QWORD *)(a2 + 80) = 15;
    if (!v7)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 16;
  sub_2101FCC24(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v8 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "distortion_coeff";
    *(_QWORD *)(a2 + 80) = 16;
    if (!v8)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 5;
  v12 = a3 + 32;
  sub_2101FCC24(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v9 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "image_size";
    *(_QWORD *)(a2 + 80) = 10;
    if (!v9)
      *(_BYTE *)(a2 + 88) = 1;
  }
  v11 = 2;
  v12 = a3 + 72;
  sub_2101FBD44(a2, (uint64_t)&v11);
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(a2 + 56) = v10 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20FE595D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  void (*v6)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *result;
  int v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)a3;
  v6 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(a3 + 8);
  v4 = a3 + 8;
  v5 = v6;
  v12[0] = 0;
  v12[1] = 0;
  if (v6)
    v5(1, v4, v12, 0, 0);
  sub_20FE5971C(a2, &v11);
  if (v12[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v12[0])(0, v12, 0, 0, 0);
  v7 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v8 = *(_QWORD **)(a2 + 24);
    LOBYTE(v11) = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v8, (uint64_t)&v11, 1);
  }
  v9 = *(_QWORD **)(a2 + 24);
  LOBYTE(v11) = v7;
  result = sub_20E86A980(v9, (uint64_t)&v11, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FE596D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE5971C(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t result;
  int v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  int *v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  int *v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  int *v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  int *v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int *, _QWORD, void *, void *);
  int *v35;
  uint64_t (*v36)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, int *, _QWORD, void *, void *);
  int *v50;
  uint64_t (*v51)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v52;
  uint64_t (*v53)(uint64_t, int *, _QWORD, void *, void *);
  int *v54;
  uint64_t (*v55)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, int *, _QWORD, void *, void *);
  int *v79;
  uint64_t (*v80)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char v105;
  _QWORD *v106;
  _QWORD *v107;
  char v108;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    v108 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)&v108, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v6 = *a2;
  switch(v6)
  {
    case 0:
      v13 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v12 = a2 + 2;
      v11 = v13;
      if (!v13)
        goto LABEL_105;
      v14 = v11(3, v12, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      goto LABEL_14;
    case 1:
      v17 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v16 = a2 + 2;
      v15 = v17;
      if (!v17)
        goto LABEL_105;
      v18 = v15(3, v16, 0, &unk_24CA09D20, &unk_2103ECF10);
      goto LABEL_31;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return result;
    case 10:
      v21 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v20 = a2 + 2;
      v19 = v21;
      if (!v21)
        goto LABEL_105;
      v14 = v19(3, v20, 0, &unk_24CA09D70, &unk_2103ECFE4);
LABEL_14:
      if (!v14)
        goto LABEL_105;
      if (*(_QWORD *)(a1 + 40))
      {
        v22 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v22, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v23 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v23 + 1;
      if (v23 != -1)
      {
        v24 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v24, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v25 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v25 + 1;
      if (v25 != -1)
      {
        v26 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v26, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v27 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v27 + 1;
      if (v27 != -1)
      {
        v28 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v28, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v29 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v29 + 1;
      if (v29 != -1)
      {
        v30 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v30, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      v31 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v31 + 1;
      if (v31 != -1)
      {
        v32 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v32, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v33 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v33 + 1;
      if (v33 == -1)
        goto LABEL_102;
      goto LABEL_101;
    case 11:
      v36 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v35 = a2 + 2;
      v34 = v36;
      if (!v36)
        goto LABEL_105;
      v18 = v34(3, v35, 0, &unk_24CA09DC0, &unk_2103ED0B8);
LABEL_31:
      if (!v18)
LABEL_105:
        sub_20FE56C30();
      if (*(_QWORD *)(a1 + 40))
      {
        v37 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v37, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v38 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v38 + 1;
      if (v38 != -1)
      {
        v39 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v39, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v40 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v40 + 1;
      if (v40 != -1)
      {
        v41 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v41, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v42 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v42 + 1;
      if (v42 != -1)
      {
        v43 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v43, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v44 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v44 + 1;
      if (v44 != -1)
      {
        v45 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v45, (uint64_t)&v108, 1);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      v46 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v46 + 1;
      if (v46 != -1)
      {
        v47 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v47, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      v48 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v48 + 1;
      if (v48 == -1)
        goto LABEL_102;
LABEL_101:
      v103 = *(_QWORD **)(a1 + 24);
      v108 = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v103, (uint64_t)&v108, 1);
LABEL_102:
      std::ostream::operator<<();
      v104 = *(_QWORD *)(a1 + 40);
      v105 = *(_BYTE *)(a1 + 34);
      *(_QWORD *)(a1 + 40) = v104 + 1;
      if (v104 != -1)
      {
        v106 = *(_QWORD **)(a1 + 24);
        v108 = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v106, (uint64_t)&v108, 1);
      }
      v107 = *(_QWORD **)(a1 + 24);
      v108 = v105;
      result = (uint64_t)sub_20E86A980(v107, (uint64_t)&v108, 1);
      ++*(_QWORD *)(a1 + 40);
      return result;
    default:
      switch(v6)
      {
        case 'd':
          v9 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v8 = a2 + 2;
          v7 = v9;
          if (!v9)
            goto LABEL_105;
          v10 = v7(3, v8, 0, &unk_24CA09E10, &unk_2103ED190);
          goto LABEL_50;
        case 'e':
          v51 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v50 = a2 + 2;
          v49 = v51;
          if (!v51)
            goto LABEL_105;
          v52 = v49(3, v50, 0, &unk_24CA09E60, &unk_2103ED268);
          goto LABEL_77;
        case 'n':
          v55 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v54 = a2 + 2;
          v53 = v55;
          if (!v55)
            goto LABEL_105;
          v10 = v53(3, v54, 0, &unk_24CA09EB0, &unk_2103ED340);
LABEL_50:
          if (!v10)
            goto LABEL_105;
          if (*(_QWORD *)(a1 + 40))
          {
            v56 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v56, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v57 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v57 + 1;
          if (v57 != -1)
          {
            v58 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v58, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v59 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v59 + 1;
          if (v59 != -1)
          {
            v60 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v60, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v61 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v61 + 1;
          if (v61 != -1)
          {
            v62 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v62, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v63 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v63 + 1;
          if (v63 != -1)
          {
            v64 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v64, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v65 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v65 + 1;
          if (v65 != -1)
          {
            v66 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v66, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v67 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v67 + 1;
          if (v67 != -1)
          {
            v68 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v68, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v69 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v69 + 1;
          if (v69 != -1)
          {
            v70 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v70, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v71 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v71 + 1;
          if (v71 != -1)
          {
            v72 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v72, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v73 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v73 + 1;
          if (v73 != -1)
          {
            v74 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v74, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
          std::ostream::operator<<();
          v75 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v75 + 1;
          if (v75 != -1)
          {
            v76 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v76, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v77 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v77 + 1;
          if (v77 == -1)
            goto LABEL_102;
          goto LABEL_101;
        case 'o':
          v80 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v79 = a2 + 2;
          v78 = v80;
          if (!v80)
            goto LABEL_105;
          v52 = v78(3, v79, 0, &unk_24CA09F00, &unk_2103ED418);
LABEL_77:
          if (!v52)
            goto LABEL_105;
          if (*(_QWORD *)(a1 + 40))
          {
            v81 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v81, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v82 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v82 + 1;
          if (v82 != -1)
          {
            v83 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v83, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v84 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v84 + 1;
          if (v84 != -1)
          {
            v85 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v85, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v86 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v86 + 1;
          if (v86 != -1)
          {
            v87 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v87, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v88 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v88 + 1;
          if (v88 != -1)
          {
            v89 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v89, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v90 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v90 + 1;
          if (v90 != -1)
          {
            v91 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v91, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v92 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v92 + 1;
          if (v92 != -1)
          {
            v93 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v93, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v94 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v94 + 1;
          if (v94 != -1)
          {
            v95 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v95, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v96 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v96 + 1;
          if (v96 != -1)
          {
            v97 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v97, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v98 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v98 + 1;
          if (v98 != -1)
          {
            v99 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v99, (uint64_t)&v108, 1);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
          std::ostream::operator<<();
          v100 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v100 + 1;
          if (v100 != -1)
          {
            v101 = *(_QWORD **)(a1 + 24);
            v108 = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v101, (uint64_t)&v108, 1);
          }
          std::ostream::operator<<();
          v102 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v102 + 1;
          if (v102 != -1)
            goto LABEL_101;
          goto LABEL_102;
        default:
          return result;
      }
  }
}

char *sub_20FE5A300(uint64_t a1, _QWORD *a2, int *a3)
{
  void (*v5)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  int *v6;
  void (*v7)(uint64_t, int *, _QWORD *, _QWORD, _QWORD);
  char *result;
  int v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  sub_2100B6A04(a2);
  v9 = *a3;
  v7 = (void (*)(uint64_t, int *, _QWORD *, _QWORD, _QWORD))*((_QWORD *)a3 + 1);
  v6 = a3 + 2;
  v5 = v7;
  v10[0] = 0;
  v10[1] = 0;
  if (v7)
    v5(1, v6, v10, 0, 0);
  result = sub_20FE5A43C((uint64_t)a2, (uint64_t)&v9);
  if (v10[0])
    result = (char *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  *(_QWORD *)(*(_QWORD *)(a2[7] - 8) + a2[3] + 10) = a2[4] - (*(_QWORD *)(a2[7] - 8) + a2[3]) - 18;
  a2[7] -= 8;
  return result;
}

void sub_20FE5A3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

char *sub_20FE5A43C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  int v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v33;
  char *v34;
  uint64_t (*v35)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v42;
  char *v43;
  uint64_t (*v44)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, _QWORD, void *, void *);
  char *v47;
  char *v48;
  uint64_t v49;
  int __src;
  uint64_t v51;

  __src = *(_DWORD *)a2;
  v4 = a1 + 24;
  result = sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
  v6 = *(_DWORD *)a2;
  switch(v6)
  {
    case 0:
      v13 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v12 = a2 + 8;
      v11 = v13;
      if (!v13)
        goto LABEL_29;
      v14 = v11(3, v12, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      goto LABEL_12;
    case 1:
      v17 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v16 = a2 + 8;
      v15 = v17;
      if (!v17)
        goto LABEL_29;
      v18 = v15(3, v16, 0, &unk_24CA09D20, &unk_2103ECF10);
      goto LABEL_16;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return result;
    case 10:
      v21 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v20 = a2 + 8;
      v19 = v21;
      if (!v21)
        goto LABEL_29;
      v14 = v19(3, v20, 0, &unk_24CA09D70, &unk_2103ECFE4);
LABEL_12:
      v22 = (char *)v14;
      if (!v14)
        goto LABEL_29;
      __src = 2;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
      sub_2100B6A04((_QWORD *)a1);
      v23 = v22 + 8;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v22, v22 + 8, 8);
      v24 = *(char **)(a1 + 32);
      v25 = v22 + 16;
      v26 = v4;
      v27 = v23;
      v28 = v25;
      v29 = 8;
      break;
    case 11:
      v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_29;
      v18 = v30(3, v31, 0, &unk_24CA09DC0, &unk_2103ED0B8);
LABEL_16:
      v33 = (char *)v18;
      if (!v18)
LABEL_29:
        sub_20FE56C30();
      __src = 2;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
      sub_2100B6A04((_QWORD *)a1);
      v34 = v33 + 16;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), v33, v33 + 16, 16);
      v24 = *(char **)(a1 + 32);
      v25 = v33 + 32;
      v26 = v4;
      v27 = v34;
      v28 = v25;
      v29 = 16;
      break;
    default:
      switch(v6)
      {
        case 'd':
          v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v8 = a2 + 8;
          v7 = v9;
          if (!v9)
            goto LABEL_29;
          v10 = v7(3, v8, 0, &unk_24CA09E10, &unk_2103ED190);
          goto LABEL_22;
        case 'e':
          v37 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v36 = a2 + 8;
          v35 = v37;
          if (!v37)
            goto LABEL_29;
          v38 = v35(3, v36, 0, &unk_24CA09E60, &unk_2103ED268);
          goto LABEL_26;
        case 'n':
          v41 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v40 = a2 + 8;
          v39 = v41;
          if (!v41)
            goto LABEL_29;
          v10 = v39(3, v40, 0, &unk_24CA09EB0, &unk_2103ED340);
LABEL_22:
          v42 = (char *)v10;
          if (!v10)
            goto LABEL_29;
          __src = 2;
          sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
          sub_2100B6A04((_QWORD *)a1);
          sub_2100B8FD4(v4, *(char **)(a1 + 32), v42, v42 + 8, 8);
          v43 = v42 + 16;
          sub_2100B8FD4(v4, *(char **)(a1 + 32), v42 + 8, v42 + 16, 8);
          v24 = *(char **)(a1 + 32);
          v25 = v42 + 36;
          v26 = v4;
          v27 = v43;
          v28 = v25;
          v29 = 20;
          break;
        case 'o':
          v46 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v45 = a2 + 8;
          v44 = v46;
          if (!v46)
            goto LABEL_29;
          v38 = v44(3, v45, 0, &unk_24CA09F00, &unk_2103ED418);
LABEL_26:
          v47 = (char *)v38;
          if (!v38)
            goto LABEL_29;
          __src = 2;
          sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v51, 4);
          sub_2100B6A04((_QWORD *)a1);
          sub_2100B8FD4(v4, *(char **)(a1 + 32), v47, v47 + 16, 16);
          v48 = v47 + 32;
          sub_2100B8FD4(v4, *(char **)(a1 + 32), v47 + 16, v47 + 32, 16);
          v24 = *(char **)(a1 + 32);
          v25 = v47 + 72;
          v26 = v4;
          v27 = v48;
          v28 = v25;
          v29 = 40;
          break;
        default:
          return result;
      }
      break;
  }
  sub_2100B8FD4(v26, v24, v27, v28, v29);
  result = sub_2100B8FD4(v4, *(char **)(a1 + 32), v25, v25 + 8, 8);
  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v49 + 10) = *(_QWORD *)(a1 + 32) - v49 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  return result;
}

void sub_20FE5A880(int *a1, uint64_t a2, uint64_t a3)
{
  void (*v6)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  int v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x24BDAC8D0];
  v9 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  if (*a1 < 1)
  {
    v9 = *(_DWORD *)a3;
    v8 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(a3 + 8);
    v7 = a3 + 8;
    v6 = v8;
    v10[0] = 0;
    v10[1] = 0;
    if (v8)
      v6(1, v7, v10, 0, 0);
    sub_20FE5AB44(a2, (uint64_t)&v9);
    if (v10[0])
      ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v10[0])(0, v10, 0, 0, 0);
  }
  else
  {
    sub_20FE5A9D0(a1, a2, a3);
  }
}

void sub_20FE5A988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE5A9D0(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  void (*v7)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD);
  int v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  if (*a1 == 2)
  {
    v10 = 2;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v10);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v10 = *(_DWORD *)a3;
  v9 = *(void (**)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD))(a3 + 8);
  v8 = a3 + 8;
  v7 = v9;
  v11[0] = 0;
  v11[1] = 0;
  if (v9)
    v7(1, v8, v11, 0, 0);
  sub_20FE5AB44(a2, (uint64_t)&v10);
  if (v11[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v11[0])(0, v11, 0, 0, 0);
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

void sub_20FE5AAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE5AB44(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v23)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, void *, void *);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, _QWORD, void *, void *);
  int *v33;

  v33 = (int *)a2;
  sub_20FE5AE74((_BYTE *)a1, &v33);
  v4 = *(_DWORD *)a2;
  switch(v4)
  {
    case 0:
      v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v10 = a2 + 8;
      v9 = v11;
      if (v11)
      {
        v12 = v9(3, v10, 0, &unk_24CA09CD0, &unk_2103ECE3C);
        if (v12)
          goto LABEL_9;
      }
      goto LABEL_27;
    case 1:
      v15 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v14 = a2 + 8;
      v13 = v15;
      if (v15)
      {
        v16 = v13(3, v14, 0, &unk_24CA09D20, &unk_2103ECF10);
        if (v16)
          goto LABEL_12;
      }
      goto LABEL_27;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v18 = a2 + 8;
      v17 = v19;
      if (!v19)
        goto LABEL_27;
      v12 = v17(3, v18, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v12)
        goto LABEL_27;
LABEL_9:
      v33 = *(int **)(a1 + 8);
      sub_20FE5AFAC((int *)&v33, a1, v12);
      break;
    case 11:
      v22 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
      v21 = a2 + 8;
      v20 = v22;
      if (!v22 || (v16 = v20(3, v21, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_27:
        sub_20FE56C30();
LABEL_12:
      v33 = *(int **)(a1 + 8);
      sub_20FE5B168((int *)&v33, a1, v16);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v6 = a2 + 8;
          v5 = v7;
          if (v7)
          {
            v8 = v5(3, v6, 0, &unk_24CA09E10, &unk_2103ED190);
            if (v8)
              goto LABEL_5;
          }
          goto LABEL_27;
        case 'e':
          v25 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v24 = a2 + 8;
          v23 = v25;
          if (v25)
          {
            v26 = v23(3, v24, 0, &unk_24CA09E60, &unk_2103ED268);
            if (v26)
              goto LABEL_21;
          }
          goto LABEL_27;
        case 'n':
          v29 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v28 = a2 + 8;
          v27 = v29;
          if (!v29)
            goto LABEL_27;
          v8 = v27(3, v28, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v8)
            goto LABEL_27;
LABEL_5:
          v33 = *(int **)(a1 + 8);
          sub_20FE5B324((int *)&v33, a1, v8);
          break;
        case 'o':
          v32 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, void *, void *))(a2 + 8);
          v31 = a2 + 8;
          v30 = v32;
          if (!v32)
            goto LABEL_27;
          v26 = v30(3, v31, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v26)
            goto LABEL_27;
LABEL_21:
          v33 = *(int **)(a1 + 8);
          sub_20FE5B5F0((int *)&v33, a1, v26);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20FE5AE74(_BYTE *a1, int **a2)
{
  int *v3;
  void *__p[2];
  char v5;
  _DWORD v6[6];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20FE56800((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20E877AB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _DWORD *))off_24CA08168[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _DWORD *))off_24CA08150[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)a1 + 104))(a1, v6);
  }
}

void sub_20FE5AF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE5AF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5AF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE5AFAC(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;

  v8 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  }
  else
  {
    if (*a1 == 2 && (v9 = 2, (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_20FE5B168(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;

  v8 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 32);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
  }
  else
  {
    if (*a1 == 2 && (v9 = 2, (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v9), *a1 < 1))
    {
      v6 = 0;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      v6 = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 32);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_20FE5B324(int *a1, uint64_t a2, uint64_t a3)
{
  int v7;

  v7 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_20FE5B484(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
}

uint64_t sub_20FE5B484(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  int v8;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

uint64_t sub_20FE5B5F0(int *a1, uint64_t a2, uint64_t a3)
{
  int v7;

  v7 = 2;
  (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 >= 1)
    return sub_20FE5B750(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
}

uint64_t sub_20FE5B750(int *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t result;
  int v8;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(uint64_t, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
  if (v5 >= 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  return result;
}

uint64_t sub_20FE5B8BC(uint64_t a1, unint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF7D8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DB048(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20FE5B9B8((uint64_t)&v11, a1, a2);
  else
    sub_20FE5BBB4(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

_QWORD *sub_20FE5B9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_2100D0804(&v14);
  sub_2100C6C9C((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24CA17CC8;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20FE5E900(a2, (unint64_t)&v17);
  sub_2100C81F8(&v17, v12);
  sub_2100C9280((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24CA17CC8;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20FE5F010((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20FE5BB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE5BBB4(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_20FE5C2C4((uint64_t *)a1, (_DWORD **)&v73);
  sub_2100CA694((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DB048(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_20FE5C4B4(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DB048(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_20FE5C8B8(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DB048(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_20FE5CCF0(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_95:
        sub_20FE56C30();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DB048(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_20FE5D0F4(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF7D8(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2101FFA90((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DB048(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_20FE5D52C(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF7D8(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_2101FFA90((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DB048(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_20FE5D9D8(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF7D8(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_2101FFA90((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DB048(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_20FE5DEF4(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF7D8(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_2101FFA90((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DB048(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_20FE5E3A0(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

void sub_20FE5C2C4(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FFA90(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DB548(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_2100CAE38((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FE5C428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE5C4B4(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20FE5C5D8((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v10, (uint64_t)v11);
  }
}

void sub_20FE5C5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A48;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9F0A28;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200E84(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24CA17B88;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C9F0A28;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20FE5C890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5C8B8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20FE5C9DC((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v10, (uint64_t)v11);
  }
}

void sub_20FE5C9DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17AE8;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17618;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200E84(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_24CA17C28;
  *((_QWORD *)v26 + 4) = &off_24CA17670;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24CA17618;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20FE5CCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5CCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5CCF0(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20FE5CE14((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v10, (uint64_t)v11);
  }
}

void sub_20FE5CE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A98;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9AD150;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200E84(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24CA17BD8;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C9AD150;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20FE5D0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5D0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5D0F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20FE5D218((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v10, (uint64_t)v11);
  }
}

void sub_20FE5D218(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17B38;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17728;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200E84(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_24CA17C78;
  *((_QWORD *)v26 + 4) = &off_24CA17670;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24CA17728;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20FE5D504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5D518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5D52C(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20FE5D690((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v12, (uint64_t)v13);
  }
}

void sub_20FE5D690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17780;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17298;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200E84(v14, (uint64_t)&v36);
  v15 = sub_2100CEEE8((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24CA178C0;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24CA172F0;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24CA17298;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE5D9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5D9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5D9D8(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20FE5DB3C((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v12, (uint64_t)v13);
  }
}

void sub_20FE5DB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17820;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17458;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200E84(v14, (uint64_t)&v44);
  v15 = sub_2100CF010((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA17960;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24CA174B0;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24CA17458;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20FE5DECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5DEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5DEF4(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20FE5E058((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201290(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v12, (uint64_t)v13);
  }
}

void sub_20FE5E058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA177D0;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA173A8;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201290(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200E84(v14, (uint64_t)&v36);
  v15 = sub_2100CEEE8((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24CA17910;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24CA172F0;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24CA173A8;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE5E378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5E38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5E3A0(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20FE5E504((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210201398(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200E84(v12, (uint64_t)v13);
  }
}

void sub_20FE5E504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17870;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17568;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210201398(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200E84(v14, (uint64_t)&v44);
  v15 = sub_2100CF010((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA179B0;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24CA174B0;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24CA17568;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20FE5E894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5E8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE5E8BC(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);

  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 8);
  if (v2)
    v2(0, a1 + 8, 0, 0, 0);
  return a1;
}

void sub_20FE5E900(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_20FE5C2C4((uint64_t *)a1, (_DWORD **)&v73);
  sub_2100C8BB4((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DB048(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_20FE5C4B4(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DB048(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_20FE5C8B8(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DB048(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_20FE5CCF0(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_95:
        sub_20FE56C30();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF7D8(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_2101FFA90((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DB048(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_20FE5D0F4(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF7D8(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2101FFA90((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DB048(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_20FE5D52C(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF7D8(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_2101FFA90((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DB048(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_20FE5D9D8(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF7D8(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_2101FFA90((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DB048(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_20FE5DEF4(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF7D8(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_2101FFA90((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DB048(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_20FE5E3A0(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

_QWORD *sub_20FE5F010(_QWORD *a1, void (**a2)(uint64_t))
{
  _QWORD v4[9];

  v4[8] = *MEMORY[0x24BDAC8D0];
  v4[0] = 0;
  v4[1] = 0;
  if (*a2)
    (*a2)(2);
  if (v4 != a1 && *a1 != (unsigned __int128)0)
    ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))*a1)(2, a1, v4, 0, 0);
  if (v4[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v4[0])(0, v4, 0, 0, 0);
  return a1;
}

void sub_20FE5F168(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE5F188(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20E9EDADC(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_20FE5F260((uint64_t)&v8, a1, (uint64_t)a2);
    return a1;
  }
  else
  {
    sub_20E90A71C(a1 + 2);
    sub_20FE5F45C(a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

_QWORD *sub_20FE5F260(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_2100D0804(&v14);
  sub_2100C6C9C((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24CA17CC8;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20FE61988(a2, &v17);
  sub_2100C81F8(&v17, v12);
  sub_2100C9280((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24CA17CC8;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20FE5F010((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20FE5F3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE5F45C(_QWORD *a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20E9EDADC(a1[6], &v37);
  *a2 = v37;
  sub_2100CA694((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = v9(3, v10, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v12)
        goto LABEL_28;
      v37 = 2;
      sub_20E9EDADC(a1[6], &v37);
      sub_20FE5F840((uint64_t)&v37, a1, v12, v37);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v16)
        goto LABEL_28;
      v37 = 2;
      sub_20E9EDADC(a1[6], &v37);
      sub_20FE5FBDC((uint64_t)&v37, a1, v16, v37);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = v17(3, v18, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v20)
        goto LABEL_28;
      v37 = 2;
      sub_20E9EDADC(a1[6], &v37);
      sub_20FE5FFAC((uint64_t)&v37, a1, v20, v37);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_28:
        sub_20FE56C30();
      v37 = 2;
      sub_20E9EDADC(a1[6], &v37);
      sub_20FE60348((uint64_t)&v37, a1, v24, v37);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = v5(3, v6, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20E9EDADC(a1[6], &v37);
          sub_20FE60718((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20E9EDADC(a1[6], &v37);
          sub_20FE60B7C((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = v29(3, v30, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20E9EDADC(a1[6], &v37);
          sub_20FE61050((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20E9EDADC(a1[6], &v37);
          sub_20FE614B4((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20FE5F840(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_20FE5F93C((uint64_t)&v12, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v7 = a2[6];
    sub_20E9EDF48(v7, (float *)a3);
    sub_20E9EDF48(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20E9EDF48(v8, (float *)(a3 + 8));
    sub_20E9EDF48(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20E9EDADC(v9, (_DWORD *)(a3 + 16));
    sub_20E9EDADC(v9, (_DWORD *)(a3 + 20));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_20FE5F93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v19;
  float32x2_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t *v39;
  std::__shared_weak_count *v40;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A48;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9F0A28;
  v39 = (int8x16_t *)(v5 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v7, (float *)&v36);
  sub_20E9EDF48(v7, (float *)&v36 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v8, (float *)&v37);
  sub_20E9EDF48(v8, (float *)&v37 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20E9EDADC(v9, &v38);
  sub_20E9EDADC(v9, (_DWORD *)&v38 + 1);
  v10 = v38;
  v11 = (float32x2_t *)v39;
  v12 = v36;
  v13 = v37;
  __asm { FMOV            V2.2S, #1.0 }
  v19 = vdiv_f32(_D2, v36);
  v20 = vmul_f32(v19, vneg_f32(v37));
  v21 = vzip1_s32((int32x2_t)v36, (int32x2_t)v37);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v39[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v36, (int32x2_t)v37), 0x20uLL), v22);
  v11[4] = v19;
  v11[5] = v20;
  v11[6].i32[0] = v12.i32[0];
  v11[7] = 0;
  v11[6].i32[1] = 0;
  v11[8].i32[0] = v12.i32[1];
  v11[8].i32[1] = 0;
  v11[9] = v13;
  v11[10].i32[0] = 1065353216;
  v11[11] = v10;
  v23 = v39;
  v35 = v39[1];
  v24 = v39[5].i64[1];
  v25 = (char *)operator new(0x78uLL);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = &off_24CA17B88;
  v26 = v23[1];
  *((_QWORD *)v25 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v25 + 40) = v26;
  *(int8x16_t *)(v25 + 56) = v23[2];
  v27 = v23[3];
  v28 = v23[4];
  *((_DWORD *)v25 + 26) = v23[5].i32[0];
  *(int8x16_t *)(v25 + 88) = v28;
  *(int8x16_t *)(v25 + 72) = v27;
  *((_QWORD *)v25 + 3) = &off_24C9F0A28;
  *((_QWORD *)v25 + 14) = v24;
  *(int8x16_t *)a3 = v35;
  *(_QWORD *)(a3 + 16) = v24;
  *(_QWORD *)(a3 + 24) = v25 + 24;
  v29 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v25;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_20FE5FB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5FBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5FBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5FBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE5FBDC(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_20FE5FCD8((uint64_t)&v12, (uint64_t)a2, (_QWORD *)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v7 = a2[6];
    sub_20E9EE078(v7, (double *)a3);
    sub_20E9EE078(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20E9EE078(v8, (double *)(a3 + 16));
    sub_20E9EE078(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20E9EDADC(v9, (_DWORD *)(a3 + 32));
    sub_20E9EDADC(v9, (_DWORD *)(a3 + 36));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_20FE5FCD8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  __int128 v39;

  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17AE8;
  v39 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v39;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v38 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17618;
  v37 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v7, (double *)&v34);
  sub_20E9EE078(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v8, (double *)&v35);
  sub_20E9EE078(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20E9EDADC(v9, &v36);
  sub_20E9EDADC(v9, (_DWORD *)&v36 + 1);
  v10 = v34;
  v11 = v35;
  v12 = 1.0 / *(double *)&v34;
  v13 = v36;
  v14 = v37;
  *((_OWORD *)v37 + 1) = v34;
  *((_OWORD *)v14 + 2) = v11;
  *((double *)v14 + 6) = v12;
  *((double *)v14 + 7) = 1.0 / *((double *)&v10 + 1);
  *((double *)v14 + 8) = -(*(double *)&v11 * v12);
  *((double *)v14 + 9) = -(*((double *)&v11 + 1) * (1.0 / *((double *)&v10 + 1)));
  *((_QWORD *)v14 + 10) = v10;
  *((_QWORD *)v14 + 12) = 0;
  *((_QWORD *)v14 + 13) = 0;
  *((_QWORD *)v14 + 11) = 0;
  *((_QWORD *)v14 + 14) = *((_QWORD *)&v10 + 1);
  *((_QWORD *)v14 + 15) = 0;
  *((_OWORD *)v14 + 8) = v11;
  *((_QWORD *)v14 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v14 + 19) = v13;
  v15 = v37;
  v16 = v37 + 16;
  v17 = *((_QWORD *)v37 + 2);
  v18 = *((_QWORD *)v37 + 3);
  v19 = v37 + 32;
  v20 = *((_QWORD *)v37 + 4);
  v21 = *((_QWORD *)v37 + 5);
  v22 = *((_QWORD *)v37 + 19);
  v23 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_24CA17C28;
  *((_QWORD *)v23 + 4) = &off_24CA17670;
  *(_OWORD *)(v23 + 40) = *v16;
  *(_OWORD *)(v23 + 56) = *v19;
  v24 = *((_OWORD *)v15 + 3);
  *(_OWORD *)(v23 + 88) = *((_OWORD *)v15 + 4);
  *(_OWORD *)(v23 + 72) = v24;
  v25 = *((_OWORD *)v15 + 6);
  v26 = *((_OWORD *)v15 + 7);
  v27 = *((_OWORD *)v15 + 8);
  *((_QWORD *)v23 + 21) = *((_QWORD *)v15 + 18);
  *(_OWORD *)(v23 + 152) = v27;
  *(_OWORD *)(v23 + 136) = v26;
  *(_OWORD *)(v23 + 120) = v25;
  *(_OWORD *)(v23 + 104) = *((_OWORD *)v15 + 5);
  *((_QWORD *)v23 + 22) = v22;
  *((_QWORD *)v23 + 3) = &off_24CA17618;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23 + 24;
  v28 = (std::__shared_weak_count *)a3[6];
  a3[6] = v23;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v38;
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20FE5FF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5FF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5FF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE5FFAC(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_20FE600A8((uint64_t)&v12, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v7 = a2[6];
    sub_20E9EDF48(v7, (float *)a3);
    sub_20E9EDF48(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20E9EDF48(v8, (float *)(a3 + 8));
    sub_20E9EDF48(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20E9EDADC(v9, (_DWORD *)(a3 + 16));
    sub_20E9EDADC(v9, (_DWORD *)(a3 + 20));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_20FE600A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t *v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v19;
  float32x2_t v20;
  int32x2_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  uint64_t v24;
  char *v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int8x16_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  int8x16_t *v39;
  std::__shared_weak_count *v40;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A98;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9AD150;
  v39 = (int8x16_t *)(v5 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v7, (float *)&v36);
  sub_20E9EDF48(v7, (float *)&v36 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v8, (float *)&v37);
  sub_20E9EDF48(v8, (float *)&v37 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20E9EDADC(v9, &v38);
  sub_20E9EDADC(v9, (_DWORD *)&v38 + 1);
  v10 = v38;
  v11 = (float32x2_t *)v39;
  v12 = v36;
  v13 = v37;
  __asm { FMOV            V2.2S, #1.0 }
  v19 = vdiv_f32(_D2, v36);
  v20 = vmul_f32(v19, vneg_f32(v37));
  v21 = vzip1_s32((int32x2_t)v36, (int32x2_t)v37);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  v39[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v36, (int32x2_t)v37), 0x20uLL), v22);
  v11[4] = v19;
  v11[5] = v20;
  v11[6].i32[0] = v12.i32[0];
  v11[7] = 0;
  v11[6].i32[1] = 0;
  v11[8].i32[0] = v12.i32[1];
  v11[8].i32[1] = 0;
  v11[9] = v13;
  v11[10].i32[0] = 1065353216;
  v11[11] = v10;
  v23 = v39;
  v35 = v39[1];
  v24 = v39[5].i64[1];
  v25 = (char *)operator new(0x78uLL);
  *((_QWORD *)v25 + 1) = 0;
  *((_QWORD *)v25 + 2) = 0;
  *(_QWORD *)v25 = &off_24CA17BD8;
  v26 = v23[1];
  *((_QWORD *)v25 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v25 + 40) = v26;
  *(int8x16_t *)(v25 + 56) = v23[2];
  v27 = v23[3];
  v28 = v23[4];
  *((_DWORD *)v25 + 26) = v23[5].i32[0];
  *(int8x16_t *)(v25 + 88) = v28;
  *(int8x16_t *)(v25 + 72) = v27;
  *((_QWORD *)v25 + 3) = &off_24C9AD150;
  *((_QWORD *)v25 + 14) = v24;
  *(int8x16_t *)a3 = v35;
  *(_QWORD *)(a3 + 16) = v24;
  *(_QWORD *)(a3 + 24) = v25 + 24;
  v29 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v25;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v40;
  if (v40)
  {
    v33 = (unint64_t *)&v40->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_20FE602F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6030C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE60320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE60334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE60348(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (a4 < 2)
  {
    sub_20FE60444((uint64_t)&v12, (uint64_t)a2, (_QWORD *)a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v7 = a2[6];
    sub_20E9EE078(v7, (double *)a3);
    sub_20E9EE078(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20E9EE078(v8, (double *)(a3 + 16));
    sub_20E9EE078(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20E9EDADC(v9, (_DWORD *)(a3 + 32));
    sub_20E9EDADC(v9, (_DWORD *)(a3 + 36));
    v10 = a2[4];
    v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v10 - 8);
    if (v11)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    a2[4] -= 16;
  }
}

void sub_20FE60444(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  __int128 v39;

  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17B38;
  v39 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v39;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v38 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17728;
  v37 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v7, (double *)&v34);
  sub_20E9EE078(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v8, (double *)&v35);
  sub_20E9EE078(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20E9EDADC(v9, &v36);
  sub_20E9EDADC(v9, (_DWORD *)&v36 + 1);
  v10 = v34;
  v11 = v35;
  v12 = 1.0 / *(double *)&v34;
  v13 = v36;
  v14 = v37;
  *((_OWORD *)v37 + 1) = v34;
  *((_OWORD *)v14 + 2) = v11;
  *((double *)v14 + 6) = v12;
  *((double *)v14 + 7) = 1.0 / *((double *)&v10 + 1);
  *((double *)v14 + 8) = -(*(double *)&v11 * v12);
  *((double *)v14 + 9) = -(*((double *)&v11 + 1) * (1.0 / *((double *)&v10 + 1)));
  *((_QWORD *)v14 + 10) = v10;
  *((_QWORD *)v14 + 12) = 0;
  *((_QWORD *)v14 + 13) = 0;
  *((_QWORD *)v14 + 11) = 0;
  *((_QWORD *)v14 + 14) = *((_QWORD *)&v10 + 1);
  *((_QWORD *)v14 + 15) = 0;
  *((_OWORD *)v14 + 8) = v11;
  *((_QWORD *)v14 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v14 + 19) = v13;
  v15 = v37;
  v16 = v37 + 16;
  v17 = *((_QWORD *)v37 + 2);
  v18 = *((_QWORD *)v37 + 3);
  v19 = v37 + 32;
  v20 = *((_QWORD *)v37 + 4);
  v21 = *((_QWORD *)v37 + 5);
  v22 = *((_QWORD *)v37 + 19);
  v23 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_24CA17C78;
  *((_QWORD *)v23 + 4) = &off_24CA17670;
  *(_OWORD *)(v23 + 40) = *v16;
  *(_OWORD *)(v23 + 56) = *v19;
  v24 = *((_OWORD *)v15 + 3);
  *(_OWORD *)(v23 + 88) = *((_OWORD *)v15 + 4);
  *(_OWORD *)(v23 + 72) = v24;
  v25 = *((_OWORD *)v15 + 6);
  v26 = *((_OWORD *)v15 + 7);
  v27 = *((_OWORD *)v15 + 8);
  *((_QWORD *)v23 + 21) = *((_QWORD *)v15 + 18);
  *(_OWORD *)(v23 + 152) = v27;
  *(_OWORD *)(v23 + 136) = v26;
  *(_OWORD *)(v23 + 120) = v25;
  *(_OWORD *)(v23 + 104) = *((_OWORD *)v15 + 5);
  *((_QWORD *)v23 + 22) = v22;
  *((_QWORD *)v23 + 3) = &off_24CA17728;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23 + 24;
  v28 = (std::__shared_weak_count *)a3[6];
  a3[6] = v23;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v38;
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20FE606C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE606DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE606F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE60704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE60718(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_20FE60854((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v7 = a2[6];
    sub_20E9EDF48(v7, (float *)a3);
    sub_20E9EDF48(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20E9EDF48(v8, (float *)(a3 + 8));
    sub_20E9EDF48(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20E9EDF48(v9, (float *)(a3 + 16));
    sub_20E9EDF48(v9, (float *)(a3 + 20));
    sub_20E9EDF48(v9, (float *)(a3 + 24));
    sub_20E9EDF48(v9, (float *)(a3 + 28));
    sub_20E9EDF48(v9, (float *)(a3 + 32));
    v10 = a2[6];
    sub_20E9EDADC(v10, (_DWORD *)(a3 + 36));
    sub_20E9EDADC(v10, (_DWORD *)(a3 + 40));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_20FE60854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  float v29[8];
  char *v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  memset(v29, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17780;
  v33 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v33;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v31 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17298;
  v30 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v7, (float *)&v28);
  sub_20E9EDF48(v7, (float *)&v28 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v8, (float *)&v28 + 2);
  sub_20E9EDF48(v8, (float *)((unint64_t)&v28 | 0xC));
  v9 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v9, v29);
  sub_20E9EDF48(v9, &v29[1]);
  sub_20E9EDF48(v9, &v29[2]);
  sub_20E9EDF48(v9, &v29[3]);
  sub_20E9EDF48(v9, &v29[4]);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20E9EDADC(v10, &v29[5]);
  sub_20E9EDADC(v10, &v29[6]);
  v11 = sub_2100CEEE8((uint64_t)&v28);
  v27 = *(_OWORD *)(v11 + 16);
  v32 = *(_OWORD *)(v11 + 32);
  LODWORD(v33) = *(_DWORD *)(v11 + 48);
  v12 = *(_QWORD *)(v11 + 120);
  v13 = (char *)operator new(0x98uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24CA178C0;
  v14 = *(_QWORD *)(v11 + 52);
  v15 = *(_WORD *)(v11 + 112);
  v16 = *(_OWORD *)(v11 + 16);
  *((_QWORD *)v13 + 4) = &off_24CA172F0;
  *(_OWORD *)(v13 + 40) = v16;
  v17 = *(_OWORD *)(v11 + 32);
  *((_DWORD *)v13 + 18) = *(_DWORD *)(v11 + 48);
  *(_OWORD *)(v13 + 56) = v17;
  *(_QWORD *)(v13 + 76) = v14;
  *(_OWORD *)(v13 + 84) = *(_OWORD *)(v11 + 60);
  v18 = *(_OWORD *)(v11 + 76);
  v19 = *(_OWORD *)(v11 + 92);
  *((_DWORD *)v13 + 33) = *(_DWORD *)(v11 + 108);
  *(_OWORD *)(v13 + 116) = v19;
  *(_OWORD *)(v13 + 100) = v18;
  *((_WORD *)v13 + 68) = v15;
  *((_QWORD *)v13 + 18) = v12;
  *((_QWORD *)v13 + 3) = &off_24CA17298;
  v20 = v32;
  *(_OWORD *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v20;
  *(_DWORD *)(a3 + 32) = v33;
  *(_QWORD *)(a3 + 36) = v12;
  v21 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v13 + 24;
  *(_QWORD *)(a3 + 56) = v13;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_20FE60B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE60B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE60B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE60B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE60B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE60B7C(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_20FE60CB8((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v7 = a2[6];
    sub_20E9EE078(v7, (double *)a3);
    sub_20E9EE078(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20E9EE078(v8, (double *)(a3 + 16));
    sub_20E9EE078(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20E9EE078(v9, (double *)(a3 + 32));
    sub_20E9EE078(v9, (double *)(a3 + 40));
    sub_20E9EE078(v9, (double *)(a3 + 48));
    sub_20E9EE078(v9, (double *)(a3 + 56));
    sub_20E9EE078(v9, (double *)(a3 + 64));
    v10 = a2[6];
    sub_20E9EDADC(v10, (_DWORD *)(a3 + 72));
    sub_20E9EDADC(v10, (_DWORD *)(a3 + 76));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_20FE60CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17820;
  v45 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v44;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17458;
  v39 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v7, (double *)&v34);
  sub_20E9EE078(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v8, (double *)&v35);
  sub_20E9EE078(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v9, (double *)&v36);
  sub_20E9EE078(v9, (double *)&v36 + 1);
  sub_20E9EE078(v9, (double *)&v37);
  sub_20E9EE078(v9, (double *)&v37 + 1);
  sub_20E9EE078(v9, (double *)&v38);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20E9EDADC(v10, (_DWORD *)&v38 + 2);
  sub_20E9EDADC(v10, (_DWORD *)&v38 + 3);
  v11 = sub_2100CF010((uint64_t)&v34);
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)(v11 + 40);
  v16 = *(_OWORD *)(v11 + 64);
  v41 = *(_OWORD *)(v11 + 48);
  v42 = v16;
  *(_QWORD *)&v43 = *(_QWORD *)(v11 + 80);
  v17 = *(_QWORD *)(v11 + 216);
  v18 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24CA17960;
  v19 = *(_WORD *)(v11 + 208);
  *((_QWORD *)v18 + 4) = &off_24CA174B0;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)(v11 + 16);
  *(_OWORD *)(v18 + 56) = *(_OWORD *)(v11 + 32);
  v20 = *(_OWORD *)(v11 + 48);
  v21 = *(_OWORD *)(v11 + 64);
  *((_QWORD *)v18 + 13) = *(_QWORD *)(v11 + 80);
  *(_OWORD *)(v18 + 88) = v21;
  *(_OWORD *)(v18 + 72) = v20;
  v22 = *(_QWORD *)(v11 + 88);
  *((_DWORD *)v18 + 30) = *(_DWORD *)(v11 + 96);
  *((_QWORD *)v18 + 14) = v22;
  v23 = *(_OWORD *)(v11 + 120);
  *((_OWORD *)v18 + 8) = *(_OWORD *)(v11 + 104);
  *((_OWORD *)v18 + 9) = v23;
  v24 = *(_OWORD *)(v11 + 152);
  v25 = *(_OWORD *)(v11 + 168);
  v26 = *(_OWORD *)(v11 + 184);
  *((_QWORD *)v18 + 28) = *(_QWORD *)(v11 + 200);
  *((_OWORD *)v18 + 12) = v25;
  *((_OWORD *)v18 + 13) = v26;
  *((_OWORD *)v18 + 11) = v24;
  *((_OWORD *)v18 + 10) = *(_OWORD *)(v11 + 136);
  *((_WORD *)v18 + 116) = v19;
  *((_QWORD *)v18 + 30) = v17;
  *((_QWORD *)v18 + 3) = &off_24CA17458;
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v15;
  v27 = v42;
  *(_OWORD *)(a3 + 32) = v41;
  *(_OWORD *)(a3 + 48) = v27;
  *(_QWORD *)(a3 + 64) = v43;
  *(_QWORD *)(a3 + 72) = v17;
  v28 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v18 + 24;
  *(_QWORD *)(a3 + 88) = v18;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20FE60FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE61000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE61014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE61028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE6103C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE61050(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_20FE6118C((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v7 = a2[6];
    sub_20E9EDF48(v7, (float *)a3);
    sub_20E9EDF48(v7, (float *)(a3 + 4));
    v8 = a2[6];
    sub_20E9EDF48(v8, (float *)(a3 + 8));
    sub_20E9EDF48(v8, (float *)(a3 + 12));
    v9 = a2[6];
    sub_20E9EDF48(v9, (float *)(a3 + 16));
    sub_20E9EDF48(v9, (float *)(a3 + 20));
    sub_20E9EDF48(v9, (float *)(a3 + 24));
    sub_20E9EDF48(v9, (float *)(a3 + 28));
    sub_20E9EDF48(v9, (float *)(a3 + 32));
    v10 = a2[6];
    sub_20E9EDADC(v10, (_DWORD *)(a3 + 36));
    sub_20E9EDADC(v10, (_DWORD *)(a3 + 40));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_20FE6118C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  float v29[8];
  char *v30;
  std::__shared_weak_count *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  memset(v29, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA177D0;
  v33 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v33;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v31 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA173A8;
  v30 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v7, (float *)&v28);
  sub_20E9EDF48(v7, (float *)&v28 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v8, (float *)&v28 + 2);
  sub_20E9EDF48(v8, (float *)((unint64_t)&v28 | 0xC));
  v9 = *(_QWORD *)(a2 + 48);
  sub_20E9EDF48(v9, v29);
  sub_20E9EDF48(v9, &v29[1]);
  sub_20E9EDF48(v9, &v29[2]);
  sub_20E9EDF48(v9, &v29[3]);
  sub_20E9EDF48(v9, &v29[4]);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20E9EDADC(v10, &v29[5]);
  sub_20E9EDADC(v10, &v29[6]);
  v11 = sub_2100CEEE8((uint64_t)&v28);
  v27 = *(_OWORD *)(v11 + 16);
  v32 = *(_OWORD *)(v11 + 32);
  LODWORD(v33) = *(_DWORD *)(v11 + 48);
  v12 = *(_QWORD *)(v11 + 120);
  v13 = (char *)operator new(0x98uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_24CA17910;
  v14 = *(_QWORD *)(v11 + 52);
  v15 = *(_WORD *)(v11 + 112);
  v16 = *(_OWORD *)(v11 + 16);
  *((_QWORD *)v13 + 4) = &off_24CA172F0;
  *(_OWORD *)(v13 + 40) = v16;
  v17 = *(_OWORD *)(v11 + 32);
  *((_DWORD *)v13 + 18) = *(_DWORD *)(v11 + 48);
  *(_OWORD *)(v13 + 56) = v17;
  *(_QWORD *)(v13 + 76) = v14;
  *(_OWORD *)(v13 + 84) = *(_OWORD *)(v11 + 60);
  v18 = *(_OWORD *)(v11 + 76);
  v19 = *(_OWORD *)(v11 + 92);
  *((_DWORD *)v13 + 33) = *(_DWORD *)(v11 + 108);
  *(_OWORD *)(v13 + 116) = v19;
  *(_OWORD *)(v13 + 100) = v18;
  *((_WORD *)v13 + 68) = v15;
  *((_QWORD *)v13 + 18) = v12;
  *((_QWORD *)v13 + 3) = &off_24CA173A8;
  v20 = v32;
  *(_OWORD *)a3 = v27;
  *(_OWORD *)(a3 + 16) = v20;
  *(_DWORD *)(a3 + 32) = v33;
  *(_QWORD *)(a3 + 36) = v12;
  v21 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v13 + 24;
  *(_QWORD *)(a3 + 56) = v13;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v31;
  if (v31)
  {
    v25 = (unint64_t *)&v31->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_20FE61450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE61464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE61478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6148C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE614A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE614B4(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  if (a4 < 2)
  {
    sub_20FE615F0((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    v6 = a2 + 2;
    sub_20E90A71C(a2 + 2);
    v7 = a2[6];
    sub_20E9EE078(v7, (double *)a3);
    sub_20E9EE078(v7, (double *)(a3 + 8));
    v8 = a2[6];
    sub_20E9EE078(v8, (double *)(a3 + 16));
    sub_20E9EE078(v8, (double *)(a3 + 24));
    v9 = a2[6];
    sub_20E9EE078(v9, (double *)(a3 + 32));
    sub_20E9EE078(v9, (double *)(a3 + 40));
    sub_20E9EE078(v9, (double *)(a3 + 48));
    sub_20E9EE078(v9, (double *)(a3 + 56));
    sub_20E9EE078(v9, (double *)(a3 + 64));
    v10 = a2[6];
    sub_20E9EDADC(v10, (_DWORD *)(a3 + 72));
    sub_20E9EDADC(v10, (_DWORD *)(a3 + 76));
    v11 = a2[4];
    v12 = *(_QWORD *)(v11 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v11 - 8);
    if (v12)
      (*(void (**)(_QWORD *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    a2[4] -= 16;
  }
}

void sub_20FE615F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v34 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17870;
  v45 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v44;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v40 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17568;
  v39 = v5 + 24;
  v7 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v7, (double *)&v34);
  sub_20E9EE078(v7, (double *)&v34 + 1);
  v8 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v8, (double *)&v35);
  sub_20E9EE078(v8, (double *)&v35 + 1);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20E9EE078(v9, (double *)&v36);
  sub_20E9EE078(v9, (double *)&v36 + 1);
  sub_20E9EE078(v9, (double *)&v37);
  sub_20E9EE078(v9, (double *)&v37 + 1);
  sub_20E9EE078(v9, (double *)&v38);
  v10 = *(_QWORD *)(a2 + 48);
  sub_20E9EDADC(v10, (_DWORD *)&v38 + 2);
  sub_20E9EDADC(v10, (_DWORD *)&v38 + 3);
  v11 = sub_2100CF010((uint64_t)&v34);
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(_QWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)(v11 + 40);
  v16 = *(_OWORD *)(v11 + 64);
  v41 = *(_OWORD *)(v11 + 48);
  v42 = v16;
  *(_QWORD *)&v43 = *(_QWORD *)(v11 + 80);
  v17 = *(_QWORD *)(v11 + 216);
  v18 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = &off_24CA179B0;
  v19 = *(_WORD *)(v11 + 208);
  *((_QWORD *)v18 + 4) = &off_24CA174B0;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)(v11 + 16);
  *(_OWORD *)(v18 + 56) = *(_OWORD *)(v11 + 32);
  v20 = *(_OWORD *)(v11 + 48);
  v21 = *(_OWORD *)(v11 + 64);
  *((_QWORD *)v18 + 13) = *(_QWORD *)(v11 + 80);
  *(_OWORD *)(v18 + 88) = v21;
  *(_OWORD *)(v18 + 72) = v20;
  v22 = *(_QWORD *)(v11 + 88);
  *((_DWORD *)v18 + 30) = *(_DWORD *)(v11 + 96);
  *((_QWORD *)v18 + 14) = v22;
  v23 = *(_OWORD *)(v11 + 120);
  *((_OWORD *)v18 + 8) = *(_OWORD *)(v11 + 104);
  *((_OWORD *)v18 + 9) = v23;
  v24 = *(_OWORD *)(v11 + 152);
  v25 = *(_OWORD *)(v11 + 168);
  v26 = *(_OWORD *)(v11 + 184);
  *((_QWORD *)v18 + 28) = *(_QWORD *)(v11 + 200);
  *((_OWORD *)v18 + 12) = v25;
  *((_OWORD *)v18 + 13) = v26;
  *((_OWORD *)v18 + 11) = v24;
  *((_OWORD *)v18 + 10) = *(_OWORD *)(v11 + 136);
  *((_WORD *)v18 + 116) = v19;
  *((_QWORD *)v18 + 30) = v17;
  *((_QWORD *)v18 + 3) = &off_24CA17568;
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v12;
  *(_QWORD *)(a3 + 24) = v15;
  v27 = v42;
  *(_OWORD *)(a3 + 32) = v41;
  *(_OWORD *)(a3 + 48) = v27;
  *(_QWORD *)(a3 + 64) = v43;
  *(_QWORD *)(a3 + 72) = v17;
  v28 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v18 + 24;
  *(_QWORD *)(a3 + 88) = v18;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v40;
  if (v40)
  {
    v32 = (unint64_t *)&v40->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_20FE61924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE61938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE6194C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE61960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE61974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE61988(_QWORD *a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20E9EDADC(a1[6], &v37);
  *a2 = v37;
  sub_2100C8BB4((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = v9(3, v10, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v12)
        goto LABEL_28;
      v37 = 2;
      sub_20E9EDADC(a1[6], &v37);
      sub_20FE5F840((uint64_t)&v37, a1, v12, v37);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v16)
        goto LABEL_28;
      v37 = 2;
      sub_20E9EDADC(a1[6], &v37);
      sub_20FE5FBDC((uint64_t)&v37, a1, v16, v37);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = v17(3, v18, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v20)
        goto LABEL_28;
      v37 = 2;
      sub_20E9EDADC(a1[6], &v37);
      sub_20FE5FFAC((uint64_t)&v37, a1, v20, v37);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_28:
        sub_20FE56C30();
      v37 = 2;
      sub_20E9EDADC(a1[6], &v37);
      sub_20FE60348((uint64_t)&v37, a1, v24, v37);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = v5(3, v6, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20E9EDADC(a1[6], &v37);
          sub_20FE60718((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20E9EDADC(a1[6], &v37);
          sub_20FE60B7C((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = v29(3, v30, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20E9EDADC(a1[6], &v37);
          sub_20FE61050((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20E9EDADC(a1[6], &v37);
          sub_20FE614B4((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

uint64_t sub_20FE61D6C(uint64_t a1, unint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF2E8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DA8B0(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20FE61E68((uint64_t)&v11, a1, a2);
  else
    sub_20FE62064(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

_QWORD *sub_20FE61E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_2100D0804(&v14);
  sub_2100C6C9C((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24CA17CC8;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20FE64D6C(a2, (unint64_t)&v17);
  sub_2100C81F8(&v17, v12);
  sub_2100C9280((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24CA17CC8;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20FE5F010((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20FE61FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE62064(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_20FE62774((uint64_t *)a1, (_DWORD **)&v73);
  sub_2100CA694((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DA8B0(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_20FE62964(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DA8B0(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_20FE62D68(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DA8B0(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_20FE631A0(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_95:
        sub_20FE56C30();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DA8B0(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_20FE635A4(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF2E8(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DA8B0(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_20FE639DC(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF2E8(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DA8B0(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_20FE63E88(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF2E8(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DA8B0(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_20FE643A4(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF2E8(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DA8B0(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_20FE64850(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

void sub_20FE62774(uint64_t *a1, _DWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_2101FF5A0(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_2100DADB0(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_21023865C(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_2100CAE38((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](v8 + 128);
  MEMORY[0x212BC6398](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20FE628D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20FD0DE48((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE62964(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20FE62A88((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v10, (uint64_t)v11);
  }
}

void sub_20FE62A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A48;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9F0A28;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200078(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24CA17B88;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C9F0A28;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20FE62D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE62D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE62D68(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20FE62E8C((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v10, (uint64_t)v11);
  }
}

void sub_20FE62E8C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17AE8;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17618;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200078(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_24CA17C28;
  *((_QWORD *)v26 + 4) = &off_24CA17670;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24CA17618;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20FE63178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE6318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE631A0(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20FE632C4((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 4;
    v10 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v10, (uint64_t)v11);
  }
}

void sub_20FE632C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  float32x2_t v13;
  float32x2_t *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v22;
  float32x2_t v23;
  int32x2_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int8x16_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  int8x16_t *v42;
  std::__shared_weak_count *v43;
  _QWORD v44[2];

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A98;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9AD150;
  v42 = (int8x16_t *)(v5 + 24);
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v8, (float *)&v39);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v10, (float *)&v40);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v44[0] = 2;
  v44[1] = &v41;
  v12 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200078(v12, (uint64_t)v44);
  v13 = v41;
  v14 = (float32x2_t *)v42;
  v15 = v39;
  v16 = v40;
  __asm { FMOV            V2.2S, #1.0 }
  v22 = vdiv_f32(_D2, v39);
  v23 = vmul_f32(v22, vneg_f32(v40));
  v24 = vzip1_s32((int32x2_t)v39, (int32x2_t)v40);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v42[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v39, (int32x2_t)v40), 0x20uLL), v25);
  v14[4] = v22;
  v14[5] = v23;
  v14[6].i32[0] = v15.i32[0];
  v14[7] = 0;
  v14[6].i32[1] = 0;
  v14[8].i32[0] = v15.i32[1];
  v14[8].i32[1] = 0;
  v14[9] = v16;
  v14[10].i32[0] = 1065353216;
  v14[11] = v13;
  v26 = v42;
  v38 = v42[1];
  v27 = v42[5].i64[1];
  v28 = (char *)operator new(0x78uLL);
  *((_QWORD *)v28 + 1) = 0;
  *((_QWORD *)v28 + 2) = 0;
  *(_QWORD *)v28 = &off_24CA17BD8;
  v29 = v26[1];
  *((_QWORD *)v28 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v28 + 40) = v29;
  *(int8x16_t *)(v28 + 56) = v26[2];
  v30 = v26[3];
  v31 = v26[4];
  *((_DWORD *)v28 + 26) = v26[5].i32[0];
  *(int8x16_t *)(v28 + 88) = v31;
  *(int8x16_t *)(v28 + 72) = v30;
  *((_QWORD *)v28 + 3) = &off_24C9AD150;
  *((_QWORD *)v28 + 14) = v27;
  *(int8x16_t *)a3 = v38;
  *(_QWORD *)(a3 + 16) = v27;
  *(_QWORD *)(a3 + 24) = v28 + 24;
  v32 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v28;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20FE6357C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE63590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE635A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  char *v10;
  _QWORD v11[2];

  if (a3 < 2)
  {
    sub_20FE636C8((uint64_t)v11, a1, (_QWORD *)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v6, (double *)a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v8, (double *)(a2 + 16));
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v11[0] = 2;
    v11[1] = a2 + 32;
    v10 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v10, (uint64_t)v11);
  }
}

void sub_20FE636C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  __int128 v43;

  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17B38;
  v43 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v43;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v41 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17728;
  v40 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v8, (double *)&v37);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v10, (double *)&v38);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v42[0] = 2;
  v42[1] = &v39;
  v12 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200078(v12, (uint64_t)v42);
  v13 = v37;
  v14 = v38;
  v15 = 1.0 / *(double *)&v37;
  v16 = v39;
  v17 = v40;
  *((_OWORD *)v40 + 1) = v37;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((_QWORD *)v17 + 10) = v13;
  *((_QWORD *)v17 + 12) = 0;
  *((_QWORD *)v17 + 13) = 0;
  *((_QWORD *)v17 + 11) = 0;
  *((_QWORD *)v17 + 14) = *((_QWORD *)&v13 + 1);
  *((_QWORD *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((_QWORD *)v17 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v17 + 19) = v16;
  v18 = v40;
  v19 = v40 + 16;
  v20 = *((_QWORD *)v40 + 2);
  v21 = *((_QWORD *)v40 + 3);
  v22 = v40 + 32;
  v23 = *((_QWORD *)v40 + 4);
  v24 = *((_QWORD *)v40 + 5);
  v25 = *((_QWORD *)v40 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = &off_24CA17C78;
  *((_QWORD *)v26 + 4) = &off_24CA17670;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  v28 = *((_OWORD *)v18 + 6);
  v29 = *((_OWORD *)v18 + 7);
  v30 = *((_OWORD *)v18 + 8);
  *((_QWORD *)v26 + 21) = *((_QWORD *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((_QWORD *)v26 + 22) = v25;
  *((_QWORD *)v26 + 3) = &off_24CA17728;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v41;
  if (v41)
  {
    v35 = (unint64_t *)&v41->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_20FE639B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE639C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE639DC(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20FE63B40((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v12, (uint64_t)v13);
  }
}

void sub_20FE63B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17780;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17298;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200078(v14, (uint64_t)&v36);
  v15 = sub_2100CEEE8((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24CA178C0;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24CA172F0;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24CA17298;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE63E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE63E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE63E88(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20FE63FEC((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v12, (uint64_t)v13);
  }
}

void sub_20FE63FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17820;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17458;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200078(v14, (uint64_t)&v44);
  v15 = sub_2100CF010((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA17960;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24CA174B0;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24CA17458;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20FE6437C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE64390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE643A4(uint64_t a1, float *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20FE64508((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102004AC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v12, (uint64_t)v13);
  }
}

void sub_20FE64508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  float v33[8];
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = 0u;
  memset(v33, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA177D0;
  v37 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v37;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA173A8;
  v34 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v8, (float *)&v32);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v10, (float *)&v32 + 2);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102004AC(v12, v33);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v36 = 2;
  *((_QWORD *)&v36 + 1) = &v33[5];
  v14 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200078(v14, (uint64_t)&v36);
  v15 = sub_2100CEEE8((uint64_t)&v32);
  v31 = *(_OWORD *)(v15 + 16);
  v36 = *(_OWORD *)(v15 + 32);
  LODWORD(v37) = *(_DWORD *)(v15 + 48);
  v16 = *(_QWORD *)(v15 + 120);
  v17 = (char *)operator new(0x98uLL);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *(_QWORD *)v17 = &off_24CA17910;
  v18 = *(_QWORD *)(v15 + 52);
  v19 = *(_WORD *)(v15 + 112);
  v20 = *(_OWORD *)(v15 + 16);
  *((_QWORD *)v17 + 4) = &off_24CA172F0;
  *(_OWORD *)(v17 + 40) = v20;
  v21 = *(_OWORD *)(v15 + 32);
  *((_DWORD *)v17 + 18) = *(_DWORD *)(v15 + 48);
  *(_OWORD *)(v17 + 56) = v21;
  *(_QWORD *)(v17 + 76) = v18;
  *(_OWORD *)(v17 + 84) = *(_OWORD *)(v15 + 60);
  v22 = *(_OWORD *)(v15 + 76);
  v23 = *(_OWORD *)(v15 + 92);
  *((_DWORD *)v17 + 33) = *(_DWORD *)(v15 + 108);
  *(_OWORD *)(v17 + 116) = v23;
  *(_OWORD *)(v17 + 100) = v22;
  *((_WORD *)v17 + 68) = v19;
  *((_QWORD *)v17 + 18) = v16;
  *((_QWORD *)v17 + 3) = &off_24CA173A8;
  v24 = v36;
  *(_OWORD *)a3 = v31;
  *(_OWORD *)(a3 + 16) = v24;
  *(_DWORD *)(a3 + 32) = v37;
  *(_QWORD *)(a3 + 36) = v16;
  v25 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v17 + 24;
  *(_QWORD *)(a3 + 56) = v17;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE64828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6483C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE64850(uint64_t a1, double *a2, unsigned int a3)
{
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  char *v12;
  _QWORD v13[2];

  if (a3 < 2)
  {
    sub_20FE649B4((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "focal_length";
    *(_QWORD *)(a1 + 96) = 12;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v6, a2);
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "principal_point";
    *(_QWORD *)(a1 + 96) = 15;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    v8 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v8, a2 + 2);
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "distortion_coeff";
    *(_QWORD *)(a1 + 96) = 16;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_2102005DC(v10, a2 + 4);
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "image_size";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v13[0] = 2;
    v13[1] = a2 + 9;
    v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_210200078(v12, (uint64_t)v13);
  }
}

void sub_20FE649B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v41 = 0u;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17870;
  v48 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v47;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v43 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17568;
  v42 = v5 + 24;
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "focal_length";
  *(_QWORD *)(a2 + 96) = 12;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v8 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v8, (double *)&v38);
  v9 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "principal_point";
  *(_QWORD *)(a2 + 96) = 15;
  if (!v9)
    *(_BYTE *)(a2 + 104) = 1;
  v10 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v10, (double *)&v39);
  v11 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "distortion_coeff";
  *(_QWORD *)(a2 + 96) = 16;
  if (!v11)
    *(_BYTE *)(a2 + 104) = 1;
  v12 = sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_2102005DC(v12, (double *)v40);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "image_size";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v13)
    *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)&v44 = 2;
  *((_QWORD *)&v44 + 1) = (char *)&v41 + 8;
  v14 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  sub_210200078(v14, (uint64_t)&v44);
  v15 = sub_2100CF010((uint64_t)&v38);
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_QWORD *)(v15 + 16);
  v18 = *(_QWORD *)(v15 + 24);
  v19 = *(_QWORD *)(v15 + 40);
  v20 = *(_OWORD *)(v15 + 64);
  v44 = *(_OWORD *)(v15 + 48);
  v45 = v20;
  *(_QWORD *)&v46 = *(_QWORD *)(v15 + 80);
  v21 = *(_QWORD *)(v15 + 216);
  v22 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA179B0;
  v23 = *(_WORD *)(v15 + 208);
  *((_QWORD *)v22 + 4) = &off_24CA174B0;
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v15 + 16);
  *(_OWORD *)(v22 + 56) = *(_OWORD *)(v15 + 32);
  v24 = *(_OWORD *)(v15 + 48);
  v25 = *(_OWORD *)(v15 + 64);
  *((_QWORD *)v22 + 13) = *(_QWORD *)(v15 + 80);
  *(_OWORD *)(v22 + 88) = v25;
  *(_OWORD *)(v22 + 72) = v24;
  v26 = *(_QWORD *)(v15 + 88);
  *((_DWORD *)v22 + 30) = *(_DWORD *)(v15 + 96);
  *((_QWORD *)v22 + 14) = v26;
  v27 = *(_OWORD *)(v15 + 120);
  *((_OWORD *)v22 + 8) = *(_OWORD *)(v15 + 104);
  *((_OWORD *)v22 + 9) = v27;
  v28 = *(_OWORD *)(v15 + 152);
  v29 = *(_OWORD *)(v15 + 168);
  v30 = *(_OWORD *)(v15 + 184);
  *((_QWORD *)v22 + 28) = *(_QWORD *)(v15 + 200);
  *((_OWORD *)v22 + 12) = v29;
  *((_OWORD *)v22 + 13) = v30;
  *((_OWORD *)v22 + 11) = v28;
  *((_OWORD *)v22 + 10) = *(_OWORD *)(v15 + 136);
  *((_WORD *)v22 + 116) = v23;
  *((_QWORD *)v22 + 30) = v21;
  *((_QWORD *)v22 + 3) = &off_24CA17568;
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a3 + 16) = v16;
  *(_QWORD *)(a3 + 24) = v19;
  v31 = v45;
  *(_OWORD *)(a3 + 32) = v44;
  *(_OWORD *)(a3 + 48) = v31;
  *(_QWORD *)(a3 + 64) = v46;
  *(_QWORD *)(a3 + 72) = v21;
  v32 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v22 + 24;
  *(_QWORD *)(a3 + 88) = v22;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_20FE64D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE64D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE64D6C(uint64_t a1, unint64_t a2)
{
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v7;
  uint64_t (*v8)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v9;
  int v10;
  int v11;
  char *v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v17;
  int v18;
  int v19;
  char *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v23;
  uint64_t (*v24)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v25;
  int v26;
  int v27;
  char *v28;
  unsigned int v29;
  uint64_t (*v30)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v31;
  uint64_t (*v32)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v33;
  int v34;
  int v35;
  char *v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v39;
  uint64_t (*v40)(uint64_t, unint64_t, _QWORD, void *, void *);
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v47;
  uint64_t (*v48)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v49;
  int v50;
  int v51;
  char *v52;
  unsigned int v53;
  uint64_t (*v54)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v55;
  uint64_t (*v56)(uint64_t, unint64_t, _QWORD, void *, void *);
  float *v57;
  int v58;
  int v59;
  char *v60;
  unsigned int v61;
  uint64_t (*v62)(uint64_t, unint64_t, _QWORD, void *, void *);
  unint64_t v63;
  uint64_t (*v64)(uint64_t, unint64_t, _QWORD, void *, void *);
  double *v65;
  int v66;
  int v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *exception;
  unint64_t v73;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "camera_type";
  *(_QWORD *)(a1 + 96) = 11;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v73 = a2;
  sub_20FE62774((uint64_t *)a1, (_DWORD **)&v73);
  sub_2100C8BB4((void (**)(int))a2);
  v5 = *(_DWORD *)a2;
  switch(v5)
  {
    case 0:
      v16 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v15 = a2 + 8;
      v14 = v16;
      if (!v16)
        goto LABEL_95;
      v17 = (float *)v14(3, v15, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v17)
        goto LABEL_95;
      v18 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v18)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v19 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v19)
        *(_BYTE *)(a1 + 104) = 1;
      v20 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DA8B0(v20, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v21 = 2;
      else
        v21 = v73;
      sub_20FE62964(a1, v17, v21);
      break;
    case 1:
      v24 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v23 = a2 + 8;
      v22 = v24;
      if (!v24)
        goto LABEL_95;
      v25 = v22(3, v23, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v25)
        goto LABEL_95;
      v26 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v26)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v27 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v27)
        *(_BYTE *)(a1 + 104) = 1;
      v28 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DA8B0(v28, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v29 = 2;
      else
        v29 = v73;
      sub_20FE62D68(a1, v25, v29);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v32 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v31 = a2 + 8;
      v30 = v32;
      if (!v32)
        goto LABEL_95;
      v33 = (float *)v30(3, v31, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v33)
        goto LABEL_95;
      v34 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v34)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v35 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v35)
        *(_BYTE *)(a1 + 104) = 1;
      v36 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DA8B0(v36, &v73);
      if (HIDWORD(v73))
        goto LABEL_96;
      if (v73 >= 2)
        v37 = 2;
      else
        v37 = v73;
      sub_20FE631A0(a1, v33, v37);
      break;
    case 11:
      v40 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
      v39 = a2 + 8;
      v38 = v40;
      if (!v40 || (v41 = v38(3, v39, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_95:
        sub_20FE56C30();
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "camera";
      *(_QWORD *)(a1 + 96) = 6;
      if (!v42)
        *(_BYTE *)(a1 + 104) = 1;
      sub_2101FF2E8(a1);
      v43 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (!v43)
        *(_BYTE *)(a1 + 104) = 1;
      v44 = (char *)sub_2101FF5A0((uint64_t *)a1);
      ++*(_QWORD *)(a1 + 112);
      v73 = 0;
      sub_2100DA8B0(v44, &v73);
      if (HIDWORD(v73))
      {
LABEL_96:
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24CA1FAE0;
        __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
      }
      if (v73 >= 2)
        v45 = 2;
      else
        v45 = v73;
      sub_20FE635A4(a1, v41, v45);
      break;
    default:
      switch(v5)
      {
        case 'd':
          v8 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v7 = a2 + 8;
          v6 = v8;
          if (!v8)
            goto LABEL_95;
          v9 = (float *)v6(3, v7, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v9)
            goto LABEL_95;
          v10 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v10)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF2E8(a1);
          v11 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v11)
            *(_BYTE *)(a1 + 104) = 1;
          v12 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DA8B0(v12, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v13 = 2;
          else
            v13 = v73;
          sub_20FE639DC(a1, v9, v13);
          break;
        case 'e':
          v48 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v47 = a2 + 8;
          v46 = v48;
          if (!v48)
            goto LABEL_95;
          v49 = (double *)v46(3, v47, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v49)
            goto LABEL_95;
          v50 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v50)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF2E8(a1);
          v51 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v51)
            *(_BYTE *)(a1 + 104) = 1;
          v52 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DA8B0(v52, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v53 = 2;
          else
            v53 = v73;
          sub_20FE63E88(a1, v49, v53);
          break;
        case 'n':
          v56 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v55 = a2 + 8;
          v54 = v56;
          if (!v56)
            goto LABEL_95;
          v57 = (float *)v54(3, v55, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v57)
            goto LABEL_95;
          v58 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v58)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF2E8(a1);
          v59 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v59)
            *(_BYTE *)(a1 + 104) = 1;
          v60 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DA8B0(v60, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v61 = 2;
          else
            v61 = v73;
          sub_20FE643A4(a1, v57, v61);
          break;
        case 'o':
          v64 = *(uint64_t (**)(uint64_t, unint64_t, _QWORD, void *, void *))(a2 + 8);
          v63 = a2 + 8;
          v62 = v64;
          if (!v64)
            goto LABEL_95;
          v65 = (double *)v62(3, v63, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v65)
            goto LABEL_95;
          v66 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "camera";
          *(_QWORD *)(a1 + 96) = 6;
          if (!v66)
            *(_BYTE *)(a1 + 104) = 1;
          sub_2101FF2E8(a1);
          v67 = *(unsigned __int8 *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = "version";
          *(_QWORD *)(a1 + 96) = 7;
          if (!v67)
            *(_BYTE *)(a1 + 104) = 1;
          v68 = (char *)sub_2101FF5A0((uint64_t *)a1);
          ++*(_QWORD *)(a1 + 112);
          v73 = 0;
          sub_2100DA8B0(v68, &v73);
          if (HIDWORD(v73))
            goto LABEL_96;
          if (v73 >= 2)
            v69 = 2;
          else
            v69 = v73;
          sub_20FE64850(a1, v65, v69);
          break;
        default:
          return;
      }
      break;
  }
  v70 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v70 - 8);
  v71 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v71 - 8);
  *(_QWORD *)(a1 + 48) = v70 - 8;
  *(_QWORD *)(a1 + 72) = v71 - 8;
}

_QWORD *sub_20FE6547C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_2100D0804(&v14);
  sub_2100C6C9C((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24CA17CC8;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20FE67DD0(a2, &v17);
  sub_2100C81F8(&v17, v12);
  sub_2100C9280((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24CA17CC8;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20FE5F010((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20FE65600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE65678(uint64_t a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20E9E840C(a1, &v37);
  *a2 = v37;
  sub_2100CA694((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = (_DWORD *)v9(3, v10, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v12)
        goto LABEL_28;
      sub_20FE659E8((uint64_t)&v37, a1, v12);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v16)
        goto LABEL_28;
      sub_20FE65DE4((uint64_t)&v37, a1, v16);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = (_DWORD *)v17(3, v18, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v20)
        goto LABEL_28;
      sub_20FE66214((uint64_t)&v37, a1, v20);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_28:
        sub_20FE56C30();
      sub_20FE66610((uint64_t)&v37, a1, v24);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = (_DWORD *)v5(3, v6, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20E9E840C(a1, &v37);
          sub_20FE66A40((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20E9E840C(a1, &v37);
          sub_20FE66EEC((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = (_DWORD *)v29(3, v30, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20E9E840C(a1, &v37);
          sub_20FE67408((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20E9E840C(a1, &v37);
          sub_20FE678B4((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20FE659E8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20E9E840C(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20FE65B50((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20E9E8D84(a2, a3);
    sub_20E9E8D84(a2, a3 + 1);
    sub_20E9E8D84(a2, a3 + 2);
    sub_20E9E8D84(a2, a3 + 3);
    sub_20E9E840C(a2, a3 + 4);
    sub_20E9E840C(a2, a3 + 5);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20FE65B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A48;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9F0A28;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20E9E8D84(a2, &v33);
  sub_20E9E8D84(a2, (_DWORD *)&v33 + 1);
  sub_20E9E8D84(a2, &v34);
  sub_20E9E8D84(a2, (_DWORD *)&v34 + 1);
  sub_20E9E840C(a2, &v35);
  sub_20E9E840C(a2, (_DWORD *)&v35 + 1);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA17B88;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C9F0A28;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20FE65D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE65DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE65DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE65DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE65DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20E9E840C(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20FE65F4C((uint64_t)__p, a2, (_QWORD *)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20E9E8FD8(a2, (_QWORD *)a3);
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 8));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 16));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 24));
    sub_20E9E840C(a2, (_DWORD *)(a3 + 32));
    sub_20E9E840C(a2, (_DWORD *)(a3 + 36));
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20FE65F4C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17AE8;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17618;
  v34 = v5 + 24;
  sub_20E9E8FD8(a2, &v31);
  sub_20E9E8FD8(a2, (_QWORD *)&v31 + 1);
  sub_20E9E8FD8(a2, &v32);
  sub_20E9E8FD8(a2, (_QWORD *)&v32 + 1);
  sub_20E9E840C(a2, &v33);
  sub_20E9E840C(a2, (_DWORD *)&v33 + 1);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24CA17C28;
  *((_QWORD *)v20 + 4) = &off_24CA17670;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24CA17618;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE661C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE661D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE661EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE66200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE66214(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20E9E840C(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20FE6637C((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20E9E8D84(a2, a3);
    sub_20E9E8D84(a2, a3 + 1);
    sub_20E9E8D84(a2, a3 + 2);
    sub_20E9E8D84(a2, a3 + 3);
    sub_20E9E840C(a2, a3 + 4);
    sub_20E9E840C(a2, a3 + 5);
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20FE6637C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A98;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9AD150;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20E9E8D84(a2, &v33);
  sub_20E9E8D84(a2, (_DWORD *)&v33 + 1);
  sub_20E9E8D84(a2, &v34);
  sub_20E9E8D84(a2, (_DWORD *)&v34 + 1);
  sub_20E9E840C(a2, &v35);
  sub_20E9E840C(a2, (_DWORD *)&v35 + 1);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA17BD8;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C9AD150;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20FE665C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE665D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE665E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE665FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE66610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  LODWORD(__p[0]) = 2;
  sub_20E9E840C(a2, __p);
  v5 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v6 = 2;
  else
    v6 = __p[0];
  if (v6 < 2)
  {
    sub_20FE66778((uint64_t)__p, a2, (_QWORD *)a3);
    if (v5 < 2)
      return;
  }
  else
  {
    sub_20E9E8FD8(a2, (_QWORD *)a3);
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 8));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 16));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 24));
    sub_20E9E840C(a2, (_DWORD *)(a3 + 32));
    sub_20E9E840C(a2, (_DWORD *)(a3 + 36));
    if (v5 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_24;
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_24:
        operator delete(__p[0]);
LABEL_10:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20FE66778(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17B38;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17728;
  v34 = v5 + 24;
  sub_20E9E8FD8(a2, &v31);
  sub_20E9E8FD8(a2, (_QWORD *)&v31 + 1);
  sub_20E9E8FD8(a2, &v32);
  sub_20E9E8FD8(a2, (_QWORD *)&v32 + 1);
  sub_20E9E840C(a2, &v33);
  sub_20E9E840C(a2, (_DWORD *)&v33 + 1);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24CA17C78;
  *((_QWORD *)v20 + 4) = &off_24CA17670;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24CA17728;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE669F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE66A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE66A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE66A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE66A40(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_20FE66BD4((uint64_t)__p, a2, (uint64_t)a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20E9E8D84(a2, a3);
    sub_20E9E8D84(a2, a3 + 1);
    sub_20E9E8D84(a2, a3 + 2);
    sub_20E9E8D84(a2, a3 + 3);
    sub_20E9E8D84(a2, a3 + 4);
    sub_20E9E8D84(a2, a3 + 5);
    sub_20E9E8D84(a2, a3 + 6);
    sub_20E9E8D84(a2, a3 + 7);
    sub_20E9E8D84(a2, a3 + 8);
    sub_20E9E840C(a2, a3 + 9);
    sub_20E9E840C(a2, a3 + 10);
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20FE66BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17780;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17298;
  v26 = v5 + 24;
  sub_20E9E8D84(a2, &v24);
  sub_20E9E8D84(a2, (_DWORD *)&v24 + 1);
  sub_20E9E8D84(a2, (_DWORD *)&v24 + 2);
  sub_20E9E8D84(a2, (_DWORD *)((unint64_t)&v24 | 0xC));
  sub_20E9E8D84(a2, v25);
  sub_20E9E8D84(a2, &v25[1]);
  sub_20E9E8D84(a2, &v25[2]);
  sub_20E9E8D84(a2, &v25[3]);
  sub_20E9E8D84(a2, &v25[4]);
  sub_20E9E840C(a2, &v25[5]);
  sub_20E9E840C(a2, &v25[6]);
  v7 = sub_2100CEEE8((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24CA178C0;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24CA172F0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24CA17298;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20FE66E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE66E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE66EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE66EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE66ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE66EEC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_20FE67080((uint64_t)__p, a2, a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20E9E8FD8(a2, (_QWORD *)a3);
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 8));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 16));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 24));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 32));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 40));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 48));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 56));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 64));
    sub_20E9E840C(a2, (_DWORD *)(a3 + 72));
    sub_20E9E840C(a2, (_DWORD *)(a3 + 76));
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20FE67080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17820;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17458;
  v35 = v5 + 24;
  sub_20E9E8FD8(a2, &v30);
  sub_20E9E8FD8(a2, (_QWORD *)&v30 + 1);
  sub_20E9E8FD8(a2, &v31);
  sub_20E9E8FD8(a2, (_QWORD *)&v31 + 1);
  sub_20E9E8FD8(a2, &v32);
  sub_20E9E8FD8(a2, (_QWORD *)&v32 + 1);
  sub_20E9E8FD8(a2, &v33);
  sub_20E9E8FD8(a2, (_QWORD *)&v33 + 1);
  sub_20E9E8FD8(a2, &v34);
  sub_20E9E840C(a2, (_DWORD *)&v34 + 2);
  sub_20E9E840C(a2, (_DWORD *)&v34 + 3);
  v7 = sub_2100CF010((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24CA17960;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24CA174B0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24CA17458;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20FE673A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE673B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE673CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE673E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE673F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE67408(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_20FE6759C((uint64_t)__p, a2, (uint64_t)a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20E9E8D84(a2, a3);
    sub_20E9E8D84(a2, a3 + 1);
    sub_20E9E8D84(a2, a3 + 2);
    sub_20E9E8D84(a2, a3 + 3);
    sub_20E9E8D84(a2, a3 + 4);
    sub_20E9E8D84(a2, a3 + 5);
    sub_20E9E8D84(a2, a3 + 6);
    sub_20E9E8D84(a2, a3 + 7);
    sub_20E9E8D84(a2, a3 + 8);
    sub_20E9E840C(a2, a3 + 9);
    sub_20E9E840C(a2, a3 + 10);
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20FE6759C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA177D0;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA173A8;
  v26 = v5 + 24;
  sub_20E9E8D84(a2, &v24);
  sub_20E9E8D84(a2, (_DWORD *)&v24 + 1);
  sub_20E9E8D84(a2, (_DWORD *)&v24 + 2);
  sub_20E9E8D84(a2, (_DWORD *)((unint64_t)&v24 | 0xC));
  sub_20E9E8D84(a2, v25);
  sub_20E9E8D84(a2, &v25[1]);
  sub_20E9E8D84(a2, &v25[2]);
  sub_20E9E8D84(a2, &v25[3]);
  sub_20E9E8D84(a2, &v25[4]);
  sub_20E9E840C(a2, &v25[5]);
  sub_20E9E840C(a2, &v25[6]);
  v7 = sub_2100CEEE8((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24CA17910;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24CA172F0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24CA173A8;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20FE67850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE67864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE67878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6788C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE678A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE678B4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  char v7;
  char v8;
  void *__p[2];
  char v10;

  v4 = a4;
  if (a4 >= 2)
    a4 = 2;
  if (a4 < 2)
  {
    sub_20FE67A48((uint64_t)__p, a2, a3);
    if (v4 < 2)
      return;
  }
  else
  {
    sub_20E9E8FD8(a2, (_QWORD *)a3);
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 8));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 16));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 24));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 32));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 40));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 48));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 56));
    sub_20E9E8FD8(a2, (_QWORD *)(a3 + 64));
    sub_20E9E840C(a2, (_DWORD *)(a3 + 72));
    sub_20E9E840C(a2, (_DWORD *)(a3 + 76));
    if (v4 < 2)
      return;
  }
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          v8 = 0;
          if (v10 < 0)
            goto LABEL_23;
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      v8 = 1;
      if (v10 < 0)
LABEL_23:
        operator delete(__p[0]);
LABEL_9:
      if (*(_BYTE *)(a2 + 131))
        v7 = 0;
      else
        v7 = v8;
    }
    while ((v7 & 1) != 0);
  }
}

void sub_20FE67A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17870;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17568;
  v35 = v5 + 24;
  sub_20E9E8FD8(a2, &v30);
  sub_20E9E8FD8(a2, (_QWORD *)&v30 + 1);
  sub_20E9E8FD8(a2, &v31);
  sub_20E9E8FD8(a2, (_QWORD *)&v31 + 1);
  sub_20E9E8FD8(a2, &v32);
  sub_20E9E8FD8(a2, (_QWORD *)&v32 + 1);
  sub_20E9E8FD8(a2, &v33);
  sub_20E9E8FD8(a2, (_QWORD *)&v33 + 1);
  sub_20E9E8FD8(a2, &v34);
  sub_20E9E840C(a2, (_DWORD *)&v34 + 2);
  sub_20E9E840C(a2, (_DWORD *)&v34 + 3);
  v7 = sub_2100CF010((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24CA179B0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24CA174B0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24CA17568;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20FE67D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE67D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE67D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE67DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE67DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE67DD0(uint64_t a1, int *a2)
{
  int v4;
  uint64_t (*v5)(uint64_t, int *, _QWORD, void *, void *);
  int *v6;
  uint64_t (*v7)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v8;
  uint64_t (*v9)(uint64_t, int *, _QWORD, void *, void *);
  int *v10;
  uint64_t (*v11)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v12;
  uint64_t (*v13)(uint64_t, int *, _QWORD, void *, void *);
  int *v14;
  uint64_t (*v15)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, int *, _QWORD, void *, void *);
  int *v18;
  uint64_t (*v19)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v20;
  uint64_t (*v21)(uint64_t, int *, _QWORD, void *, void *);
  int *v22;
  uint64_t (*v23)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t (*v25)(uint64_t, int *, _QWORD, void *, void *);
  int *v26;
  uint64_t (*v27)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, int *, _QWORD, void *, void *);
  int *v30;
  uint64_t (*v31)(uint64_t, int *, _QWORD, void *, void *);
  _DWORD *v32;
  uint64_t (*v33)(uint64_t, int *, _QWORD, void *, void *);
  int *v34;
  uint64_t (*v35)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v36;
  unsigned int v37;

  v37 = 0;
  sub_20E9E840C(a1, &v37);
  *a2 = v37;
  sub_2100C8BB4((void (**)(int))a2);
  v4 = *a2;
  switch(v4)
  {
    case 0:
      v11 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v10 = a2 + 2;
      v9 = v11;
      if (!v11)
        goto LABEL_28;
      v12 = (_DWORD *)v9(3, v10, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v12)
        goto LABEL_28;
      sub_20FE659E8((uint64_t)&v37, a1, v12);
      break;
    case 1:
      v15 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v14 = a2 + 2;
      v13 = v15;
      if (!v15)
        goto LABEL_28;
      v16 = v13(3, v14, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v16)
        goto LABEL_28;
      sub_20FE65DE4((uint64_t)&v37, a1, v16);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v19 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v18 = a2 + 2;
      v17 = v19;
      if (!v19)
        goto LABEL_28;
      v20 = (_DWORD *)v17(3, v18, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v20)
        goto LABEL_28;
      sub_20FE66214((uint64_t)&v37, a1, v20);
      break;
    case 11:
      v23 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v22 = a2 + 2;
      v21 = v23;
      if (!v23 || (v24 = v21(3, v22, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_28:
        sub_20FE56C30();
      sub_20FE66610((uint64_t)&v37, a1, v24);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v6 = a2 + 2;
          v5 = v7;
          if (!v7)
            goto LABEL_28;
          v8 = (_DWORD *)v5(3, v6, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v8)
            goto LABEL_28;
          v37 = 2;
          sub_20E9E840C(a1, &v37);
          sub_20FE66A40((uint64_t)&v37, a1, v8, v37);
          break;
        case 'e':
          v27 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v26 = a2 + 2;
          v25 = v27;
          if (!v27)
            goto LABEL_28;
          v28 = v25(3, v26, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v28)
            goto LABEL_28;
          v37 = 2;
          sub_20E9E840C(a1, &v37);
          sub_20FE66EEC((uint64_t)&v37, a1, v28, v37);
          break;
        case 'n':
          v31 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v30 = a2 + 2;
          v29 = v31;
          if (!v31)
            goto LABEL_28;
          v32 = (_DWORD *)v29(3, v30, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v32)
            goto LABEL_28;
          v37 = 2;
          sub_20E9E840C(a1, &v37);
          sub_20FE67408((uint64_t)&v37, a1, v32, v37);
          break;
        case 'o':
          v35 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v34 = a2 + 2;
          v33 = v35;
          if (!v35)
            goto LABEL_28;
          v36 = v33(3, v34, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v36)
            goto LABEL_28;
          v37 = 2;
          sub_20E9E840C(a1, &v37);
          sub_20FE678B4((uint64_t)&v37, a1, v36, v37);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20FE68140(uint64_t a1, _QWORD *a2, int *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE68234((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE68430(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE68220(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE68234(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_2100D0804(&v14);
  sub_2100C6C9C((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24CA17CC8;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20FE6B910(a2, &v17);
  sub_2100C81F8(&v17, v12);
  sub_2100C9280((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24CA17CC8;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20FE5F010((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20FE683B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE68430(_QWORD *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t, int *, _QWORD, void *, void *);
  int *v11;
  uint64_t (*v12)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, int *, _QWORD, void *, void *);
  int *v15;
  uint64_t (*v16)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, int *, _QWORD, void *, void *);
  int *v19;
  uint64_t (*v20)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, int *, _QWORD, void *, void *);
  int *v23;
  uint64_t (*v24)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, int *, _QWORD, void *, void *);
  int *v27;
  uint64_t (*v28)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, int *, _QWORD, void *, void *);
  int *v31;
  uint64_t (*v32)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int *, _QWORD, void *, void *);
  int *v35;
  uint64_t (*v36)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, int *, _QWORD, void *, void *);
  int *v39;
  uint64_t (*v40)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v41;
  std::logic_error *exception;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  *a2 = v8;
  sub_2100CA694((void (**)(int))a2);
  v9 = *a2;
  switch(v9)
  {
    case 0:
      v16 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v15 = a2 + 2;
      v14 = v16;
      if (!v16)
        goto LABEL_31;
      v17 = (_QWORD *)v14(3, v15, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v17)
        goto LABEL_31;
      sub_20FE68788((uint64_t)&v43, a1, v17);
      break;
    case 1:
      v20 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v19 = a2 + 2;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = (_QWORD *)v18(3, v19, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v21)
        goto LABEL_31;
      sub_20FE68D18((uint64_t)&v44, a1, v21);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v24 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v23 = a2 + 2;
      v22 = v24;
      if (!v24)
        goto LABEL_31;
      v25 = (_QWORD *)v22(3, v23, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v25)
        goto LABEL_31;
      sub_20FE692DC((uint64_t)&v45, a1, v25);
      break;
    case 11:
      v28 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v27 = a2 + 2;
      v26 = v28;
      if (!v28 || (v29 = (_QWORD *)v26(3, v27, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_31:
        sub_20FE56C30();
      sub_20FE6986C((uint64_t)&v46, a1, v29);
      break;
    default:
      switch(v9)
      {
        case 'd':
          v12 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v11 = a2 + 2;
          v10 = v12;
          if (!v12)
            goto LABEL_31;
          v13 = v10(3, v11, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v13)
            goto LABEL_31;
          sub_20FE69E30((uint64_t)&v47, a1, v13);
          break;
        case 'e':
          v32 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v31 = a2 + 2;
          v30 = v32;
          if (!v32)
            goto LABEL_31;
          v33 = v30(3, v31, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v33)
            goto LABEL_31;
          sub_20FE6A4B0((uint64_t)&v48, a1, v33);
          break;
        case 'n':
          v36 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v35 = a2 + 2;
          v34 = v36;
          if (!v36)
            goto LABEL_31;
          v37 = v34(3, v35, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v37)
            goto LABEL_31;
          sub_20FE6ABA0((uint64_t)&v49, a1, v37);
          break;
        case 'o':
          v40 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v39 = a2 + 2;
          v38 = v40;
          if (!v40)
            goto LABEL_31;
          v41 = v38(3, v39, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v41)
            goto LABEL_31;
          sub_20FE6B220((uint64_t)&v50, a1, v41);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20FE68774(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE68788(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE6887C((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE68AA8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE68868(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6887C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A48;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9F0A28;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20FE68BE0(a2, &v33);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA17B88;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C9F0A28;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20FE68A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE68A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE68AA8(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20FE68BA4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE68BB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE68BCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE68BE0(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20FE68CDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE68CF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE68D04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE68D18(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE68E0C((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE6906C(a2, (uint64_t)a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE68DF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE68E0C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17AE8;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17618;
  v34 = v5 + 24;
  sub_20FE691A4(a2, (uint64_t)&v31);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24CA17C28;
  *((_QWORD *)v20 + 4) = &off_24CA17670;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24CA17618;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE69044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE69058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6906C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20FE69168(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6917C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69190(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE691A4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20FE692A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE692B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE692C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE692DC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE693D0((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE695FC(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE693BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE693D0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A98;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9AD150;
  v36 = (int8x16_t *)(v5 + 24);
  sub_20FE69734(a2, &v33);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA17BD8;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C9AD150;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20FE695D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE695E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE695FC(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20FE696F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6970C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69720(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE69734(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_11;
  *a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_11;
  a2[1] = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[2] = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20FE69830(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69844(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69858(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6986C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE69960((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE69BC0(a2, (uint64_t)a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE6994C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69960(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17B38;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17728;
  v34 = v5 + 24;
  sub_20FE69CF8(a2, (uint64_t)&v31);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24CA17C78;
  *((_QWORD *)v20 + 4) = &off_24CA17670;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24CA17728;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE69B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE69BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE69BC0(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20FE69CBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69CD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69CE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE69CF8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_11;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_20FE69DF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69E08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69E1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69E30(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE69F24((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE6A178(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE69F10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE69F24(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  _OWORD v24[3];
  char *v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(v24, 0, 44);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17780;
  v28 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v28;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v26 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17298;
  v25 = v5 + 24;
  sub_20FE6A314(a2, (uint64_t)v24);
  v7 = sub_2100CEEE8((uint64_t)v24);
  v23 = *(_OWORD *)(v7 + 16);
  v27 = *(_OWORD *)(v7 + 32);
  LODWORD(v28) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24CA178C0;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24CA172F0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24CA17298;
  v16 = v27;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v28;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v26;
  if (v26)
  {
    v21 = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20FE6A150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6A164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6A178(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_20FE6A2C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A2D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A2EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A300(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6A314(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_20FE6A460(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A474(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A488(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A49C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A4B0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE6A5A4((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE6A868(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE6A590(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A5A4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD v30[5];
  char *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  memset(v30, 0, sizeof(v30));
  v5 = (char *)operator new(0xF8uLL);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17820;
  v37 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v36;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v32 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17458;
  v31 = v5 + 24;
  sub_20FE6AA04(a2, (uint64_t)v30);
  v7 = sub_2100CF010((uint64_t)v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v33 = *(_OWORD *)(v7 + 48);
  v34 = v12;
  *(_QWORD *)&v35 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24CA17960;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24CA174B0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24CA17458;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v34;
  *(_OWORD *)(a3 + 32) = v33;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v35;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20FE6A840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE6A854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6A868(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_20FE6A9B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A9C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A9DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6A9F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6AA04(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_20FE6AB50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6AB64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6AB78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6AB8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6ABA0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE6AC94((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE6AEE8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE6AC80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6AC94(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  _OWORD v24[3];
  char *v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(v24, 0, 44);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA177D0;
  v28 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v28;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v26 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA173A8;
  v25 = v5 + 24;
  sub_20FE6B084(a2, (uint64_t)v24);
  v7 = sub_2100CEEE8((uint64_t)v24);
  v23 = *(_OWORD *)(v7 + 16);
  v27 = *(_OWORD *)(v7 + 32);
  LODWORD(v28) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24CA17910;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24CA172F0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24CA173A8;
  v16 = v27;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v28;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v26;
  if (v26)
  {
    v21 = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20FE6AEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6AED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6AEE8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_20FE6B034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B048(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B05C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B070(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6B084(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
    goto LABEL_14;
  *(_QWORD *)a2 = *(_QWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 8;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 7)
    goto LABEL_14;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 8;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x13)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  v14 = result[7];
  v15 = result[6] + 20;
  result[6] = v15;
  v4 = v14 >= v15;
  v16 = v14 - v15;
  if (!v4)
    v16 = 0;
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_20FE6B1D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B1E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B1F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B20C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B220(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE6B314((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE6B5D8(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE6B300(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B314(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD v30[5];
  char *v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  memset(v30, 0, sizeof(v30));
  v5 = (char *)operator new(0xF8uLL);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17870;
  v37 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v36;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_DWORD *)v5 + 30) = 10;
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v32 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17568;
  v31 = v5 + 24;
  sub_20FE6B774(a2, (uint64_t)v30);
  v7 = sub_2100CF010((uint64_t)v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v33 = *(_OWORD *)(v7 + 48);
  v34 = v12;
  *(_QWORD *)&v35 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24CA179B0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24CA174B0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24CA17568;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v34;
  *(_OWORD *)(a3 + 32) = v33;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v35;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20FE6B5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE6B5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6B5D8(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_20FE6B724(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B738(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B74C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B760(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6B774(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  v6 = result[7];
  v7 = result[6] + 16;
  result[6] = v7;
  v4 = v6 >= v7;
  v8 = v6 - v7;
  if (!v4)
    v8 = 0;
  if (v8 <= 0xF)
    goto LABEL_14;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  v9 = result[7];
  v10 = result[6] + 16;
  result[6] = v10;
  v4 = v9 >= v10;
  v11 = v9 - v10;
  if (!v4)
    v11 = 0;
  if (v11 <= 0x27)
    goto LABEL_14;
  v12 = result[3] + v10;
  v13 = *(_OWORD *)v12;
  v14 = *(_OWORD *)(v12 + 16);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  v15 = result[7];
  v16 = result[6] + 40;
  result[6] = v16;
  v4 = v15 >= v16;
  v17 = v15 - v16;
  if (!v4)
    v17 = 0;
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_20FE6B8C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B8D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B8E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B8FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6B910(_QWORD *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t, int *, _QWORD, void *, void *);
  int *v11;
  uint64_t (*v12)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v13;
  uint64_t (*v14)(uint64_t, int *, _QWORD, void *, void *);
  int *v15;
  uint64_t (*v16)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, int *, _QWORD, void *, void *);
  int *v19;
  uint64_t (*v20)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, int *, _QWORD, void *, void *);
  int *v23;
  uint64_t (*v24)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v25;
  uint64_t (*v26)(uint64_t, int *, _QWORD, void *, void *);
  int *v27;
  uint64_t (*v28)(uint64_t, int *, _QWORD, void *, void *);
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, int *, _QWORD, void *, void *);
  int *v31;
  uint64_t (*v32)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v33;
  uint64_t (*v34)(uint64_t, int *, _QWORD, void *, void *);
  int *v35;
  uint64_t (*v36)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v37;
  uint64_t (*v38)(uint64_t, int *, _QWORD, void *, void *);
  int *v39;
  uint64_t (*v40)(uint64_t, int *, _QWORD, void *, void *);
  uint64_t v41;
  std::logic_error *exception;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  *a2 = v8;
  sub_2100C8BB4((void (**)(int))a2);
  v9 = *a2;
  switch(v9)
  {
    case 0:
      v16 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v15 = a2 + 2;
      v14 = v16;
      if (!v16)
        goto LABEL_31;
      v17 = (_QWORD *)v14(3, v15, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v17)
        goto LABEL_31;
      sub_20FE68788((uint64_t)&v43, a1, v17);
      break;
    case 1:
      v20 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v19 = a2 + 2;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = (_QWORD *)v18(3, v19, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v21)
        goto LABEL_31;
      sub_20FE68D18((uint64_t)&v44, a1, v21);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v24 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v23 = a2 + 2;
      v22 = v24;
      if (!v24)
        goto LABEL_31;
      v25 = (_QWORD *)v22(3, v23, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v25)
        goto LABEL_31;
      sub_20FE692DC((uint64_t)&v45, a1, v25);
      break;
    case 11:
      v28 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
      v27 = a2 + 2;
      v26 = v28;
      if (!v28 || (v29 = (_QWORD *)v26(3, v27, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
LABEL_31:
        sub_20FE56C30();
      sub_20FE6986C((uint64_t)&v46, a1, v29);
      break;
    default:
      switch(v9)
      {
        case 'd':
          v12 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v11 = a2 + 2;
          v10 = v12;
          if (!v12)
            goto LABEL_31;
          v13 = v10(3, v11, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v13)
            goto LABEL_31;
          sub_20FE69E30((uint64_t)&v47, a1, v13);
          break;
        case 'e':
          v32 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v31 = a2 + 2;
          v30 = v32;
          if (!v32)
            goto LABEL_31;
          v33 = v30(3, v31, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v33)
            goto LABEL_31;
          sub_20FE6A4B0((uint64_t)&v48, a1, v33);
          break;
        case 'n':
          v36 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v35 = a2 + 2;
          v34 = v36;
          if (!v36)
            goto LABEL_31;
          v37 = v34(3, v35, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v37)
            goto LABEL_31;
          sub_20FE6ABA0((uint64_t)&v49, a1, v37);
          break;
        case 'o':
          v40 = (uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))*((_QWORD *)a2 + 1);
          v39 = a2 + 2;
          v38 = v40;
          if (!v40)
            goto LABEL_31;
          v41 = v38(3, v39, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v41)
            goto LABEL_31;
          sub_20FE6B220((uint64_t)&v50, a1, v41);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20FE6BC54(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE6BC68(int *a1, uint64_t a2, void (**a3)(int a1), unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FE6BD94();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE6C340(a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20FE6C144((uint64_t)&v13, a2, (uint64_t)a3);
  else
    sub_20FE6C340(a2, a3);
}

__int128 *sub_20FE6BD94()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56518);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56518))
    return &xmmword_254A56500;
  v2 = sub_20FE6BE70();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56500, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56510 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56500 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56500, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56518);
  return &xmmword_254A56500;
}

void sub_20FE6BE58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56518);
  _Unwind_Resume(a1);
}

std::string *sub_20FE6BE70()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56538);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56538))
    return &stru_254A56520;
  sub_20FE6BF60((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A56520);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56520, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56538);
  return &stru_254A56520;
}

void sub_20FE6BF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56538);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56538);
  _Unwind_Resume(a1);
}

void sub_20FE6BF60(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56558);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56558))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::CameraSample<>]", qword_254A56540);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56540, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56558);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56578);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56578))
  {
    v5 = sub_20E8A2354(qword_254A56540, "<", 0);
    sub_20E89FC08(qword_254A56540, 0, v5, qword_254A56560);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56560, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56578);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56598);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56598))
  {
    sub_21023CD84((uint64_t)qword_254A56560, (uint64_t)&xmmword_254A56580);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56580, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56598);
  }
  if (byte_254A56597 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56580, *((unint64_t *)&xmmword_254A56580 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56580;
    *(_QWORD *)(a1 + 16) = unk_254A56590;
  }
}

void sub_20FE6C0FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56598);
  _Unwind_Resume(a1);
}

void sub_20FE6C114(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56578);
  _Unwind_Resume(a1);
}

void sub_20FE6C12C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56558);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE6C144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  _QWORD v12[2];
  std::__shared_weak_count *v13;
  uint64_t (**v14)();
  void (*v15)(uint64_t);
  std::__shared_weak_count *v16;
  void (*v17)(int);
  _QWORD v18[5];

  v18[4] = *MEMORY[0x24BDAC8D0];
  sub_2100D0804(&v14);
  sub_2100C6C9C((uint64_t)&v17, (uint64_t)&v14);
  v14 = &off_24CA17CC8;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20FE72078(a2, &v17);
  sub_2100C81F8((int *)&v17, v12);
  sub_2100C9280((uint64_t)&v14, (uint64_t)v12);
  v12[0] = &off_24CA17CC8;
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_DWORD *)a3 = (_DWORD)v14;
  result = sub_20FE5F010((_QWORD *)(a3 + 8), &v15);
  if (v15)
    result = (_QWORD *)((uint64_t (*)(_QWORD, void (**)(uint64_t), _QWORD, _QWORD, _QWORD))v15)(0, &v15, 0, 0, 0);
  if (v18[0])
    return (_QWORD *)((uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v18[0])(0, v18, 0, 0, 0);
  return result;
}

void sub_20FE6C2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE6C340(uint64_t a1, void (**a2)(int a1))
{
  int v4;
  void (*v5)(int);
  int *v6;
  void (*v7)(int);
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(int);
  int *v12;
  void (*v13)(int);
  uint64_t v14;
  void (*v15)(int);
  int *v16;
  void (*v17)(int);
  _QWORD *v18;
  void (*v19)(int);
  int *v20;
  void (*v21)(int);
  uint64_t v22;
  void (*v23)(int);
  int *v24;
  void (*v25)(int);
  _QWORD *v26;
  void (*v27)(int);
  int *v28;
  void (*v29)(int);
  uint64_t v30;
  uint64_t v31;
  int v32;
  void (*v33)(int);
  int *v34;
  void (*v35)(int);
  uint64_t v36;
  uint64_t v37;
  int v38;
  void (*v39)(int);
  int *v40;
  void (*v41)(int);
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45[3];
  unsigned int v46;

  *(_QWORD *)v45 = a2;
  sub_20FE6C7CC((_BYTE *)a1, (_DWORD **)v45);
  sub_2100CA694(a2);
  v4 = *(_DWORD *)a2;
  switch(v4)
  {
    case 0:
      v13 = a2[1];
      v12 = (int *)(a2 + 1);
      v11 = v13;
      if (!v13)
        goto LABEL_36;
      v14 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v11)(3, v12, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v14)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20FE6C980(v45, a1, v14);
      break;
    case 1:
      v17 = a2[1];
      v16 = (int *)(a2 + 1);
      v15 = v17;
      if (!v17)
        goto LABEL_36;
      v18 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v15)(3, v16, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v18)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20FE6D590(v45, a1, v18);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v21 = a2[1];
      v20 = (int *)(a2 + 1);
      v19 = v21;
      if (!v21)
        goto LABEL_36;
      v22 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v19)(3, v20, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v22)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20FE6E0DC(v45, a1, v22);
      break;
    case 11:
      v25 = a2[1];
      v24 = (int *)(a2 + 1);
      v23 = v25;
      if (!v25
        || (v26 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v23)(3, v24, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
      {
LABEL_36:
        sub_20FE56C30();
      }
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20FE6ECEC(v45, a1, v26);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = a2[1];
          v6 = (int *)(a2 + 1);
          v5 = v7;
          if (!v7)
            goto LABEL_36;
          v8 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v5)(3, v6, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v8)
            goto LABEL_36;
          v9 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v10 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v9 + 104))(a1, &v46);
          if (v10 < 1)
            sub_20FE6FDB0(a1, v8, v46);
          else
            sub_20FE6F838(v45, a1, v8, v46);
          break;
        case 'e':
          v29 = a2[1];
          v28 = (int *)(a2 + 1);
          v27 = v29;
          if (!v29)
            goto LABEL_36;
          v30 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v27)(3, v28, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v30)
            goto LABEL_36;
          v31 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v32 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v31 + 104))(a1, &v46);
          if (v32 < 1)
            sub_20FE70788(a1, v30, v46);
          else
            sub_20FE70210(v45, a1, v30, v46);
          break;
        case 'n':
          v35 = a2[1];
          v34 = (int *)(a2 + 1);
          v33 = v35;
          if (!v35)
            goto LABEL_36;
          v36 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v33)(3, v34, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v36)
            goto LABEL_36;
          v37 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v38 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v37 + 104))(a1, &v46);
          if (v38 < 1)
            sub_20FE711D0(a1, v36, v46);
          else
            sub_20FE70C58(v45, a1, v36, v46);
          break;
        case 'o':
          v41 = a2[1];
          v40 = (int *)(a2 + 1);
          v39 = v41;
          if (!v41)
            goto LABEL_36;
          v42 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v39)(3, v40, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v42)
            goto LABEL_36;
          v43 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v44 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v43 + 104))(a1, &v46);
          if (v44 < 1)
            sub_20FE71BA8(a1, v42, v46);
          else
            sub_20FE71630(v45, a1, v42, v46);
          break;
        default:
          return;
      }
      break;
  }
}

void sub_20FE6C7CC(_BYTE *a1, _DWORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  int v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_21023865C(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_2100CAE38((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v6 + 128);
    MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 104))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20FE6C934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20FD0DE48(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE6C980(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20FE6D2F4((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    }
  }
  else
  {
    sub_20FE6CAA8(a1, a2, a3, v6);
  }
}

void sub_20FE6CAA8(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20FE6CC28();
      sub_20E9F5C70((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20FE6D2F4((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FE6CC28()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A565B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A565B8))
    return &xmmword_254A565A0;
  v2 = sub_20FE6CD04();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A565A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A565B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A565A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A565A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A565B8);
  return &xmmword_254A565A0;
}

void sub_20FE6CCEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A565B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE6CD04()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A565D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A565D8))
    return &stru_254A565C0;
  sub_20FE6D018((uint64_t)__p);
  sub_20FE6CDF4((char *)__p, &stru_254A565C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A565C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A565D8);
  return &stru_254A565C0;
}

void sub_20FE6CDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A565D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A565D8);
  _Unwind_Resume(a1);
}

void sub_20FE6CDF4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float32";
  v16 = 0x700000000000000;
  v4 = sub_20FE6D1FC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_20EB0B518();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)v15, 3uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_20FE6CF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20FE6CFF0()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20FE6CFE8);
  }
}

void sub_20FE6D018(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56618);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56618))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_254A56600);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56600, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56618);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56638);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56638))
  {
    v5 = sub_20E8A2354(qword_254A56600, "<", 0);
    sub_20E89FC08(qword_254A56600, 0, v5, qword_254A56620);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56620, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56638);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56658);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56658))
  {
    sub_21023CD84((uint64_t)qword_254A56620, (uint64_t)&xmmword_254A56640);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56640, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56658);
  }
  if (byte_254A56657 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56640, *((unint64_t *)&xmmword_254A56640 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56640;
    *(_QWORD *)(a1 + 16) = unk_254A56650;
  }
}

void sub_20FE6D1B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56658);
  _Unwind_Resume(a1);
}

void sub_20FE6D1CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56638);
  _Unwind_Resume(a1);
}

void sub_20FE6D1E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56618);
  _Unwind_Resume(a1);
}

std::string *sub_20FE6D1FC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A565F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A565F8))
    return &stru_254A565E0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PixelOrigin::Center]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A565E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A565E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A565F8);
  return &stru_254A565E0;
}

void sub_20FE6D2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A565F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A565F8);
  _Unwind_Resume(a1);
}

void sub_20FE6D2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A48;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9F0A28;
  v36 = (int8x16_t *)(v5 + 24);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v33);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v33 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v34);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v34 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 104))(a2, &v35);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v35 + 4);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA17B88;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C9F0A28;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20FE6D568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6D57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6D590(int *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20FE6DE0C((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
    }
  }
  else
  {
    sub_20FE6D6B8(a1, a2, a3, v6);
  }
}

void sub_20FE6D6B8(int *a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20FE6D838();
      sub_20E9F5C70((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20FE6DE0C((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FE6D838()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56678);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56678))
    return &xmmword_254A56660;
  v2 = sub_20FE6D914();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56660, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56670 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56660 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56660, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56678);
  return &xmmword_254A56660;
}

void sub_20FE6D8FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56678);
  _Unwind_Resume(a1);
}

std::string *sub_20FE6D914()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56698);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56698))
    return &stru_254A56680;
  sub_20FE6DC28((uint64_t)__p);
  sub_20FE6DA04((char *)__p, &stru_254A56680);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56680, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56698);
  return &stru_254A56680;
}

void sub_20FE6D9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56698);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56698);
  _Unwind_Resume(a1);
}

void sub_20FE6DA04(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float64";
  v16 = 0x700000000000000;
  v4 = sub_20FE6D1FC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_20EB0B518();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)v15, 3uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_20FE6DBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20FE6DC00()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20FE6DBF8);
  }
}

void sub_20FE6DC28(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A566B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A566B8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_254A566A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A566A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A566B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A566D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A566D8))
  {
    v5 = sub_20E8A2354(qword_254A566A0, "<", 0);
    sub_20E89FC08(qword_254A566A0, 0, v5, qword_254A566C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A566C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A566D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A566F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A566F8))
  {
    sub_21023CD84((uint64_t)qword_254A566C0, (uint64_t)&xmmword_254A566E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A566E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A566F8);
  }
  if (byte_254A566F7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A566E0, *((unint64_t *)&xmmword_254A566E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A566E0;
    *(_QWORD *)(a1 + 16) = unk_254A566F0;
  }
}

void sub_20FE6DDC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A566F8);
  _Unwind_Resume(a1);
}

void sub_20FE6DDDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A566D8);
  _Unwind_Resume(a1);
}

void sub_20FE6DDF4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A566B8);
  _Unwind_Resume(a1);
}

void sub_20FE6DE0C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17AE8;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17618;
  v34 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v33 + 4);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24CA17C28;
  *((_QWORD *)v20 + 4) = &off_24CA17670;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24CA17618;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE6E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE6E0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE6E0DC(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20FE6EA50((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
    }
  }
  else
  {
    sub_20FE6E204(a1, a2, a3, v6);
  }
}

void sub_20FE6E204(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20FE6E384();
      sub_20E9F5C70((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20FE6EA50((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 20);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FE6E384()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56718);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56718))
    return &xmmword_254A56700;
  v2 = sub_20FE6E460();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56700, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56710 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56700 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56700, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56718);
  return &xmmword_254A56700;
}

void sub_20FE6E448(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56718);
  _Unwind_Resume(a1);
}

std::string *sub_20FE6E460()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56738);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56738))
    return &stru_254A56720;
  sub_20FE6E774((uint64_t)__p);
  sub_20FE6E550((char *)__p, &stru_254A56720);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56720, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56738);
  return &stru_254A56720;
}

void sub_20FE6E510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56738);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56738);
  _Unwind_Resume(a1);
}

void sub_20FE6E550(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float32";
  v16 = 0x700000000000000;
  v4 = sub_20FE6E958();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_20EB0B518();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)v15, 3uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_20FE6E6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20FE6E74C()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20FE6E744);
  }
}

void sub_20FE6E774(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56778);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56778))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_254A56760);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56760, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56778);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56798);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56798))
  {
    v5 = sub_20E8A2354(qword_254A56760, "<", 0);
    sub_20E89FC08(qword_254A56760, 0, v5, qword_254A56780);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56780, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56798);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A567B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A567B8))
  {
    sub_21023CD84((uint64_t)qword_254A56780, (uint64_t)&xmmword_254A567A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A567A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A567B8);
  }
  if (byte_254A567B7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A567A0, *((unint64_t *)&xmmword_254A567A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A567A0;
    *(_QWORD *)(a1 + 16) = unk_254A567B0;
  }
}

void sub_20FE6E910(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A567B8);
  _Unwind_Resume(a1);
}

void sub_20FE6E928(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56798);
  _Unwind_Resume(a1);
}

void sub_20FE6E940(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56778);
  _Unwind_Resume(a1);
}

std::string *sub_20FE6E958()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56758);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56758))
    return &stru_254A56740;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cam::PixelOrigin::Corner]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A56740);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56740, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56758);
  return &stru_254A56740;
}

void sub_20FE6EA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56758);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56758);
  _Unwind_Resume(a1);
}

void sub_20FE6EA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  int8x16_t *v36;
  std::__shared_weak_count *v37;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (char *)operator new(0x78uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17A98;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24C9AD020;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((_QWORD *)v5 + 14) = 0;
  v37 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24C9AD150;
  v36 = (int8x16_t *)(v5 + 24);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v33);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v33 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 128))(a2, &v34);
  (*(void (**)(uint64_t, __int32 *))(*(_QWORD *)a2 + 128))(a2, (__int32 *)&v34 + 1);
  (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)a2 + 104))(a2, &v35);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v35 + 4);
  v7 = v35;
  v8 = (float32x2_t *)v36;
  v9 = v33;
  v10 = v34;
  __asm { FMOV            V2.2S, #1.0 }
  v16 = vdiv_f32(_D2, v33);
  v17 = vmul_f32(v16, vneg_f32(v34));
  v18 = vzip1_s32((int32x2_t)v33, (int32x2_t)v34);
  v19.i64[0] = v18.u32[0];
  v19.i64[1] = v18.u32[1];
  v36[1] = vorrq_s8((int8x16_t)vshll_n_s32(vzip2_s32((int32x2_t)v33, (int32x2_t)v34), 0x20uLL), v19);
  v8[4] = v16;
  v8[5] = v17;
  v8[6].i32[0] = v9.i32[0];
  v8[7] = 0;
  v8[6].i32[1] = 0;
  v8[8].i32[0] = v9.i32[1];
  v8[8].i32[1] = 0;
  v8[9] = v10;
  v8[10].i32[0] = 1065353216;
  v8[11] = v7;
  v20 = v36;
  v32 = v36[1];
  v21 = v36[5].i64[1];
  v22 = (char *)operator new(0x78uLL);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *(_QWORD *)v22 = &off_24CA17BD8;
  v23 = v20[1];
  *((_QWORD *)v22 + 4) = &off_24C9AD020;
  *(int8x16_t *)(v22 + 40) = v23;
  *(int8x16_t *)(v22 + 56) = v20[2];
  v24 = v20[3];
  v25 = v20[4];
  *((_DWORD *)v22 + 26) = v20[5].i32[0];
  *(int8x16_t *)(v22 + 88) = v25;
  *(int8x16_t *)(v22 + 72) = v24;
  *((_QWORD *)v22 + 3) = &off_24C9AD150;
  *((_QWORD *)v22 + 14) = v21;
  *(int8x16_t *)a3 = v32;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v22 + 24;
  v26 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v22;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20FE6ECC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6ECD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E96B498((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE6ECEC(int *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  char v7;

  v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_20FE6F568((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
    }
  }
  else
  {
    sub_20FE6EE14(a1, a2, a3, v6);
  }
}

void sub_20FE6EE14(int *a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 *v12;
  unsigned int v13;
  char v14;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20FE6EF94();
      sub_20E9F5C70((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2)
    v10 = 2;
  else
    v10 = a4;
  if (v10 <= 1)
  {
    sub_20FE6F568((uint64_t)&v14, a2, a3);
    return;
  }
  v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 1);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3 + 3);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 104))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, (uint64_t)a3 + 36);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FE6EF94()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A567D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A567D8))
    return &xmmword_254A567C0;
  v2 = sub_20FE6F070();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A567C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A567D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A567C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A567C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A567D8);
  return &xmmword_254A567C0;
}

void sub_20FE6F058(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A567D8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE6F070()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A567F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A567F8))
    return &stru_254A567E0;
  sub_20FE6F384((uint64_t)__p);
  sub_20FE6F160((char *)__p, &stru_254A567E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A567E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A567F8);
  return &stru_254A567E0;
}

void sub_20FE6F120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A567F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A567F8);
  _Unwind_Resume(a1);
}

void sub_20FE6F160(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  __int128 v19;
  std::string::size_type v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v15 = *(_OWORD *)"float64";
  v16 = 0x700000000000000;
  v4 = sub_20FE6E958();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v18 = v4->__r_.__value_.__r.__words[2];
    v17 = v5;
  }
  v6 = sub_20EB0B518();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20 = v6->__r_.__value_.__r.__words[2];
    v19 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)v15, 3uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_21;
}

void sub_20FE6F2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_20E89FB98(&a10);
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_20FE6F35C()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20FE6F354);
  }
}

void sub_20FE6F384(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56818);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56818))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_254A56800);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56800, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56818);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56838);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56838))
  {
    v5 = sub_20E8A2354(qword_254A56800, "<", 0);
    sub_20E89FC08(qword_254A56800, 0, v5, qword_254A56820);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56820, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56838);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56858);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56858))
  {
    sub_21023CD84((uint64_t)qword_254A56820, (uint64_t)&xmmword_254A56840);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56840, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56858);
  }
  if (byte_254A56857 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56840, *((unint64_t *)&xmmword_254A56840 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56840;
    *(_QWORD *)(a1 + 16) = unk_254A56850;
  }
}

void sub_20FE6F520(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56858);
  _Unwind_Resume(a1);
}

void sub_20FE6F538(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56838);
  _Unwind_Resume(a1);
}

void sub_20FE6F550(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56818);
  _Unwind_Resume(a1);
}

void sub_20FE6F568(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  int64x2_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v5 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17B38;
  v36 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = v36;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((_QWORD *)v5 + 4) = &off_24CA17670;
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((_QWORD *)v5 + 21) = 0x7FF8000000000000;
  *((_QWORD *)v5 + 22) = 0;
  v35 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17728;
  v34 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v33 + 4);
  v7 = v31;
  v8 = v32;
  v9 = 1.0 / *(double *)&v31;
  v10 = v33;
  v11 = v34;
  *((_OWORD *)v34 + 1) = v31;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((_QWORD *)v11 + 10) = v7;
  *((_QWORD *)v11 + 12) = 0;
  *((_QWORD *)v11 + 13) = 0;
  *((_QWORD *)v11 + 11) = 0;
  *((_QWORD *)v11 + 14) = *((_QWORD *)&v7 + 1);
  *((_QWORD *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 19) = v10;
  v12 = v34;
  v13 = v34 + 16;
  v14 = *((_QWORD *)v34 + 2);
  v15 = *((_QWORD *)v34 + 3);
  v16 = v34 + 32;
  v17 = *((_QWORD *)v34 + 4);
  v18 = *((_QWORD *)v34 + 5);
  v19 = *((_QWORD *)v34 + 19);
  v20 = (char *)operator new(0xB8uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_24CA17C78;
  *((_QWORD *)v20 + 4) = &off_24CA17670;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  v22 = *((_OWORD *)v12 + 6);
  v23 = *((_OWORD *)v12 + 7);
  v24 = *((_OWORD *)v12 + 8);
  *((_QWORD *)v20 + 21) = *((_QWORD *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((_QWORD *)v20 + 22) = v19;
  *((_QWORD *)v20 + 3) = &off_24CA17728;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_20FE6F810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE6F824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20EEF0364((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE6F838(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FE6FA00();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_20FE6FDB0(a2, a3, v9);
}

__int128 *sub_20FE6FA00()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56878);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56878))
    return &xmmword_254A56860;
  v2 = sub_20FE6FADC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56860, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56870 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56860 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56860, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56878);
  return &xmmword_254A56860;
}

void sub_20FE6FAC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56878);
  _Unwind_Resume(a1);
}

std::string *sub_20FE6FADC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56898);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56898))
    return &stru_254A56880;
  sub_20FE6FBCC((uint64_t)__p);
  sub_20FE6CDF4((char *)__p, &stru_254A56880);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56880, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56898);
  return &stru_254A56880;
}

void sub_20FE6FB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56898);
  _Unwind_Resume(a1);
}

void sub_20FE6FBCC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A568B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A568B8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_254A568A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A568A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A568B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A568D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A568D8))
  {
    v5 = sub_20E8A2354(qword_254A568A0, "<", 0);
    sub_20E89FC08(qword_254A568A0, 0, v5, qword_254A568C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A568C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A568D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A568F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A568F8))
  {
    sub_21023CD84((uint64_t)qword_254A568C0, (uint64_t)&xmmword_254A568E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A568E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A568F8);
  }
  if (byte_254A568F7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A568E0, *((unint64_t *)&xmmword_254A568E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A568E0;
    *(_QWORD *)(a1 + 16) = unk_254A568F0;
  }
}

void sub_20FE6FD68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A568F8);
  _Unwind_Resume(a1);
}

void sub_20FE6FD80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A568D8);
  _Unwind_Resume(a1);
}

void sub_20FE6FD98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A568B8);
  _Unwind_Resume(a1);
}

void sub_20FE6FDB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_20FE6FEDC((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 40);
  }
}

void sub_20FE6FEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17780;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17298;
  v26 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 128))(a2, &v24);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 4);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 8);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 128))(a2, (unint64_t)&v24 | 0xC);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, v25);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[1]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[2]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[3]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[4]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[5]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[6]);
  v7 = sub_2100CEEE8((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24CA178C0;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24CA172F0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24CA17298;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20FE701E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE701FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE70210(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FE703D8();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_20FE70788(a2, a3, v9);
}

__int128 *sub_20FE703D8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56918);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56918))
    return &xmmword_254A56900;
  v2 = sub_20FE704B4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56900, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56910 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56900 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56900, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56918);
  return &xmmword_254A56900;
}

void sub_20FE7049C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56918);
  _Unwind_Resume(a1);
}

std::string *sub_20FE704B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56938);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56938))
    return &stru_254A56920;
  sub_20FE705A4((uint64_t)__p);
  sub_20FE6DA04((char *)__p, &stru_254A56920);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56920, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56938);
  return &stru_254A56920;
}

void sub_20FE70564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56938);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56938);
  _Unwind_Resume(a1);
}

void sub_20FE705A4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56958);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56958))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_254A56940);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56940, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56958);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56978);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56978))
  {
    v5 = sub_20E8A2354(qword_254A56940, "<", 0);
    sub_20E89FC08(qword_254A56940, 0, v5, qword_254A56960);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56960, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56978);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56998);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56998))
  {
    sub_21023CD84((uint64_t)qword_254A56960, (uint64_t)&xmmword_254A56980);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56980, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56998);
  }
  if (byte_254A56997 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56980, *((unint64_t *)&xmmword_254A56980 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56980;
    *(_QWORD *)(a1 + 16) = unk_254A56990;
  }
}

void sub_20FE70740(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56998);
  _Unwind_Resume(a1);
}

void sub_20FE70758(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56978);
  _Unwind_Resume(a1);
}

void sub_20FE70770(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56958);
  _Unwind_Resume(a1);
}

void sub_20FE70788(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_20FE708B4((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 76);
  }
}

void sub_20FE708B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17820;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17458;
  v35 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v30);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v30 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v33 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v34);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 8);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 12);
  v7 = sub_2100CF010((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24CA17960;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24CA174B0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24CA17458;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20FE70C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE70C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE70C58(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FE70E20();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 40);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_20FE711D0(a2, a3, v9);
}

__int128 *sub_20FE70E20()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A569B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A569B8))
    return &xmmword_254A569A0;
  v2 = sub_20FE70EFC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A569A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A569B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A569A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A569A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A569B8);
  return &xmmword_254A569A0;
}

void sub_20FE70EE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A569B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE70EFC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A569D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A569D8))
    return &stru_254A569C0;
  sub_20FE70FEC((uint64_t)__p);
  sub_20FE6E550((char *)__p, &stru_254A569C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A569C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A569D8);
  return &stru_254A569C0;
}

void sub_20FE70FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A569D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A569D8);
  _Unwind_Resume(a1);
}

void sub_20FE70FEC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A569F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A569F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_254A569E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A569E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A569F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56A18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56A18))
  {
    v5 = sub_20E8A2354(qword_254A569E0, "<", 0);
    sub_20E89FC08(qword_254A569E0, 0, v5, qword_254A56A00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56A00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56A18);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56A38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56A38))
  {
    sub_21023CD84((uint64_t)qword_254A56A00, (uint64_t)&xmmword_254A56A20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56A20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56A38);
  }
  if (byte_254A56A37 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56A20, *((unint64_t *)&xmmword_254A56A20 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56A20;
    *(_QWORD *)(a1 + 16) = unk_254A56A30;
  }
}

void sub_20FE71188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56A38);
  _Unwind_Resume(a1);
}

void sub_20FE711A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56A18);
  _Unwind_Resume(a1);
}

void sub_20FE711B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A569F8);
  _Unwind_Resume(a1);
}

void sub_20FE711D0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_20FE712FC((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 40);
  }
}

void sub_20FE712FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  _DWORD v25[8];
  char *v26;
  std::__shared_weak_count *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0u;
  memset(v25, 0, 28);
  v5 = (char *)operator new(0x98uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA177D0;
  v29 = 0u;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA172F0;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = v29;
  *(_QWORD *)(v5 + 76) = 0xA3727C5ACLL;
  v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((_QWORD *)v5 + 18) = 0;
  v27 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA173A8;
  v26 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 128))(a2, &v24);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 4);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 128))(a2, (char *)&v24 + 8);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 128))(a2, (unint64_t)&v24 | 0xC);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, v25);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[1]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[2]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[3]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 128))(a2, &v25[4]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[5]);
  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 104))(a2, &v25[6]);
  v7 = sub_2100CEEE8((uint64_t)&v24);
  v23 = *(_OWORD *)(v7 + 16);
  v28 = *(_OWORD *)(v7 + 32);
  LODWORD(v29) = *(_DWORD *)(v7 + 48);
  v8 = *(_QWORD *)(v7 + 120);
  v9 = (char *)operator new(0x98uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_24CA17910;
  v10 = *(_QWORD *)(v7 + 52);
  v11 = *(_WORD *)(v7 + 112);
  v12 = *(_OWORD *)(v7 + 16);
  *((_QWORD *)v9 + 4) = &off_24CA172F0;
  *(_OWORD *)(v9 + 40) = v12;
  v13 = *(_OWORD *)(v7 + 32);
  *((_DWORD *)v9 + 18) = *(_DWORD *)(v7 + 48);
  *(_OWORD *)(v9 + 56) = v13;
  *(_QWORD *)(v9 + 76) = v10;
  *(_OWORD *)(v9 + 84) = *(_OWORD *)(v7 + 60);
  v14 = *(_OWORD *)(v7 + 76);
  v15 = *(_OWORD *)(v7 + 92);
  *((_DWORD *)v9 + 33) = *(_DWORD *)(v7 + 108);
  *(_OWORD *)(v9 + 116) = v15;
  *(_OWORD *)(v9 + 100) = v14;
  *((_WORD *)v9 + 68) = v11;
  *((_QWORD *)v9 + 18) = v8;
  *((_QWORD *)v9 + 3) = &off_24CA173A8;
  v16 = v28;
  *(_OWORD *)a3 = v23;
  *(_OWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 36) = v8;
  v17 = *(std::__shared_weak_count **)(a3 + 56);
  *(_QWORD *)(a3 + 48) = v9 + 24;
  *(_QWORD *)(a3 + 56) = v9;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20FE71608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7161C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2100CEFA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE71630(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FE717F8();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(a2, a3 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3 + 76);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  sub_20FE71BA8(a2, a3, v9);
}

__int128 *sub_20FE717F8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56A58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56A58))
    return &xmmword_254A56A40;
  v2 = sub_20FE718D4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56A40, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56A50 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56A40 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56A40, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56A58);
  return &xmmword_254A56A40;
}

void sub_20FE718BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56A58);
  _Unwind_Resume(a1);
}

std::string *sub_20FE718D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56A78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56A78))
    return &stru_254A56A60;
  sub_20FE719C4((uint64_t)__p);
  sub_20FE6F160((char *)__p, &stru_254A56A60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56A60, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56A78);
  return &stru_254A56A60;
}

void sub_20FE71984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56A78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56A78);
  _Unwind_Resume(a1);
}

void sub_20FE719C4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56A98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56A98))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_254A56A80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56A80, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56A98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56AB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56AB8))
  {
    v5 = sub_20E8A2354(qword_254A56A80, "<", 0);
    sub_20E89FC08(qword_254A56A80, 0, v5, qword_254A56AA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56AA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56AB8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56AD8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56AD8))
  {
    sub_21023CD84((uint64_t)qword_254A56AA0, (uint64_t)&xmmword_254A56AC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56AC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56AD8);
  }
  if (byte_254A56AD7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56AC0, *((unint64_t *)&xmmword_254A56AC0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56AC0;
    *(_QWORD *)(a1 + 16) = unk_254A56AD0;
  }
}

void sub_20FE71B60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56AD8);
  _Unwind_Resume(a1);
}

void sub_20FE71B78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56AB8);
  _Unwind_Resume(a1);
}

void sub_20FE71B90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56A98);
  _Unwind_Resume(a1);
}

void sub_20FE71BA8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v5;

  if (a3 < 2)
  {
    sub_20FE71CD4((uint64_t)&v5, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2 + 76);
  }
}

void sub_20FE71CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  std::__shared_weak_count *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  v5 = (char *)operator new(0xF8uLL);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_24CA17870;
  v41 = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 4) = &off_24CA174B0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = v40;
  *((_QWORD *)v5 + 13) = 0;
  *((_QWORD *)v5 + 14) = 0x3EE4F8B588E368F1;
  *((_DWORD *)v5 + 30) = 10;
  v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v5 + 8) = v6;
  *((int64x2_t *)v5 + 9) = v6;
  *((int64x2_t *)v5 + 10) = v6;
  *((int64x2_t *)v5 + 11) = v6;
  *((int64x2_t *)v5 + 12) = v6;
  *((int64x2_t *)v5 + 13) = v6;
  *((_QWORD *)v5 + 28) = 0x7FF8000000000000;
  *((_WORD *)v5 + 116) = 257;
  *((_QWORD *)v5 + 30) = 0;
  v36 = (std::__shared_weak_count *)v5;
  *((_QWORD *)v5 + 3) = &off_24CA17568;
  v35 = v5 + 24;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v30);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v30 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v31);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v31 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v32);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v32 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v33);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 136))(a2, (char *)&v33 + 8);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, &v34);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 8);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)a2 + 104))(a2, (char *)&v34 + 12);
  v7 = sub_2100CF010((uint64_t)&v30);
  v8 = *(_QWORD *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(_QWORD *)(v7 + 24);
  v11 = *(_QWORD *)(v7 + 40);
  v12 = *(_OWORD *)(v7 + 64);
  v37 = *(_OWORD *)(v7 + 48);
  v38 = v12;
  *(_QWORD *)&v39 = *(_QWORD *)(v7 + 80);
  v13 = *(_QWORD *)(v7 + 216);
  v14 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &off_24CA179B0;
  v15 = *(_WORD *)(v7 + 208);
  *((_QWORD *)v14 + 4) = &off_24CA174B0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v14 + 56) = *(_OWORD *)(v7 + 32);
  v16 = *(_OWORD *)(v7 + 48);
  v17 = *(_OWORD *)(v7 + 64);
  *((_QWORD *)v14 + 13) = *(_QWORD *)(v7 + 80);
  *(_OWORD *)(v14 + 88) = v17;
  *(_OWORD *)(v14 + 72) = v16;
  v18 = *(_QWORD *)(v7 + 88);
  *((_DWORD *)v14 + 30) = *(_DWORD *)(v7 + 96);
  *((_QWORD *)v14 + 14) = v18;
  v19 = *(_OWORD *)(v7 + 120);
  *((_OWORD *)v14 + 8) = *(_OWORD *)(v7 + 104);
  *((_OWORD *)v14 + 9) = v19;
  v20 = *(_OWORD *)(v7 + 152);
  v21 = *(_OWORD *)(v7 + 168);
  v22 = *(_OWORD *)(v7 + 184);
  *((_QWORD *)v14 + 28) = *(_QWORD *)(v7 + 200);
  *((_OWORD *)v14 + 12) = v21;
  *((_OWORD *)v14 + 13) = v22;
  *((_OWORD *)v14 + 11) = v20;
  *((_OWORD *)v14 + 10) = *(_OWORD *)(v7 + 136);
  *((_WORD *)v14 + 116) = v15;
  *((_QWORD *)v14 + 30) = v13;
  *((_QWORD *)v14 + 3) = &off_24CA17568;
  *(_QWORD *)a3 = v9;
  *(_QWORD *)(a3 + 8) = v10;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v11;
  v23 = v38;
  *(_OWORD *)(a3 + 32) = v37;
  *(_OWORD *)(a3 + 48) = v23;
  *(_QWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v13;
  v24 = *(std::__shared_weak_count **)(a3 + 88);
  *(_QWORD *)(a3 + 80) = v14 + 24;
  *(_QWORD *)(a3 + 88) = v14;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v36;
  if (v36)
  {
    v28 = (unint64_t *)&v36->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_20FE72050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE72064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F8AF0A4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE72078(uint64_t a1, void (**a2)(int a1))
{
  int v4;
  void (*v5)(int);
  int *v6;
  void (*v7)(int);
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(int);
  int *v12;
  void (*v13)(int);
  uint64_t v14;
  void (*v15)(int);
  int *v16;
  void (*v17)(int);
  _QWORD *v18;
  void (*v19)(int);
  int *v20;
  void (*v21)(int);
  uint64_t v22;
  void (*v23)(int);
  int *v24;
  void (*v25)(int);
  _QWORD *v26;
  void (*v27)(int);
  int *v28;
  void (*v29)(int);
  uint64_t v30;
  uint64_t v31;
  int v32;
  void (*v33)(int);
  int *v34;
  void (*v35)(int);
  uint64_t v36;
  uint64_t v37;
  int v38;
  void (*v39)(int);
  int *v40;
  void (*v41)(int);
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45[3];
  unsigned int v46;

  *(_QWORD *)v45 = a2;
  sub_20FE6C7CC((_BYTE *)a1, (_DWORD **)v45);
  sub_2100C8BB4(a2);
  v4 = *(_DWORD *)a2;
  switch(v4)
  {
    case 0:
      v13 = a2[1];
      v12 = (int *)(a2 + 1);
      v11 = v13;
      if (!v13)
        goto LABEL_36;
      v14 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v11)(3, v12, 0, &unk_24CA09CD0, &unk_2103ECE3C);
      if (!v14)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20FE6C980(v45, a1, v14);
      break;
    case 1:
      v17 = a2[1];
      v16 = (int *)(a2 + 1);
      v15 = v17;
      if (!v17)
        goto LABEL_36;
      v18 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v15)(3, v16, 0, &unk_24CA09D20, &unk_2103ECF10);
      if (!v18)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20FE6D590(v45, a1, v18);
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return;
    case 10:
      v21 = a2[1];
      v20 = (int *)(a2 + 1);
      v19 = v21;
      if (!v21)
        goto LABEL_36;
      v22 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v19)(3, v20, 0, &unk_24CA09D70, &unk_2103ECFE4);
      if (!v22)
        goto LABEL_36;
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20FE6E0DC(v45, a1, v22);
      break;
    case 11:
      v25 = a2[1];
      v24 = (int *)(a2 + 1);
      v23 = v25;
      if (!v25
        || (v26 = (_QWORD *)((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v23)(3, v24, 0, &unk_24CA09DC0, &unk_2103ED0B8)) == 0)
      {
LABEL_36:
        sub_20FE56C30();
      }
      *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
      sub_20FE6ECEC(v45, a1, v26);
      break;
    default:
      switch(v4)
      {
        case 'd':
          v7 = a2[1];
          v6 = (int *)(a2 + 1);
          v5 = v7;
          if (!v7)
            goto LABEL_36;
          v8 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v5)(3, v6, 0, &unk_24CA09E10, &unk_2103ED190);
          if (!v8)
            goto LABEL_36;
          v9 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v10 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v9 + 104))(a1, &v46);
          if (v10 < 1)
            sub_20FE6FDB0(a1, v8, v46);
          else
            sub_20FE6F838(v45, a1, v8, v46);
          break;
        case 'e':
          v29 = a2[1];
          v28 = (int *)(a2 + 1);
          v27 = v29;
          if (!v29)
            goto LABEL_36;
          v30 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v27)(3, v28, 0, &unk_24CA09E60, &unk_2103ED268);
          if (!v30)
            goto LABEL_36;
          v31 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v32 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v31 + 104))(a1, &v46);
          if (v32 < 1)
            sub_20FE70788(a1, v30, v46);
          else
            sub_20FE70210(v45, a1, v30, v46);
          break;
        case 'n':
          v35 = a2[1];
          v34 = (int *)(a2 + 1);
          v33 = v35;
          if (!v35)
            goto LABEL_36;
          v36 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v33)(3, v34, 0, &unk_24CA09EB0, &unk_2103ED340);
          if (!v36)
            goto LABEL_36;
          v37 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v38 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v37 + 104))(a1, &v46);
          if (v38 < 1)
            sub_20FE711D0(a1, v36, v46);
          else
            sub_20FE70C58(v45, a1, v36, v46);
          break;
        case 'o':
          v41 = a2[1];
          v40 = (int *)(a2 + 1);
          v39 = v41;
          if (!v41)
            goto LABEL_36;
          v42 = ((uint64_t (*)(uint64_t, int *, _QWORD, void *, void *))v39)(3, v40, 0, &unk_24CA09F00, &unk_2103ED418);
          if (!v42)
            goto LABEL_36;
          v43 = *(_QWORD *)a1;
          *(_QWORD *)v45 = *(_QWORD *)(a1 + 8);
          v44 = v45[0];
          v46 = 2;
          (*(void (**)(uint64_t, unsigned int *))(v43 + 104))(a1, &v46);
          if (v44 < 1)
            sub_20FE71BA8(a1, v42, v46);
          else
            sub_20FE71630(v45, a1, v42, v46);
          break;
        default:
          return;
      }
      break;
  }
}

_QWORD *sub_20FE72504@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24CA07C30;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24CA07BC8;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FE726A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20EB09594((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20FE726CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;

  sub_2101FAEA0(a2);
  v14 = "version";
  v15 = 7;
  v16 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v16);
  v6 = v16;
  v7 = *(_QWORD *)(a3 + 8);
  v14 = *(const char **)a3;
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20FE72814(a2, &v14, v6);
  v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v11 = (unint64_t *)(v15 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE727D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE72814(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  int v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  void **v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;

  if (a3 > 2)
  {
    v11 = *a2;
    v12 = (unint64_t *)(*a2 + 88);
    v19 = *a2;
    v13 = atomic_load(v12);
    if (v13 != -1)
    {
      v21 = &v19;
      v20 = &v21;
      std::__call_once(v12, &v20, (void (__cdecl *)(void *))sub_21009C1D0);
    }
    sub_2100D78DC(&v17, v11 + 48);
    sub_20FE729BC(a1, (uint64_t)&v17);
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v4 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "dictionary";
      *(_QWORD *)(a1 + 80) = 10;
      if (!v4)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v5 = *a2;
    v6 = (unint64_t *)(*a2 + 80);
    v17 = *a2;
    v18 = (std::__shared_weak_count *)&v19;
    v19 = 0;
    v7 = atomic_load(v6);
    if (v7 != -1)
    {
      v21 = &v17;
      v20 = &v21;
      std::__call_once(v6, &v20, (void (__cdecl *)(void *))sub_21009BEB4);
    }
    sub_20EB08AD0((uint64_t)&v17, *(unsigned __int8 **)(v5 + 16));
    v8 = (unsigned __int8 *)sub_2101FAC64(a1);
    v9 = *v8;
    *v8 = v17;
    LOBYTE(v17) = v9;
    v10 = (void **)*((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v18;
    v18 = (std::__shared_weak_count *)v10;
    sub_20EB07D94((void ***)&v18, v9);
  }
}

void sub_20FE72990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE729A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v10;

  sub_20EB07D94((void ***)(v10 + 8), a10);
  _Unwind_Resume(a1);
}

void sub_20FE729BC(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  void **v7;
  void ***v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  void **v16;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v3 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "dictionary";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v3)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20FDD58F4(&v12, a2);
  sub_2100D6764((uint64_t)&v12, (uint64_t *)&v14);
  v4 = (uint64_t)v14;
  v15 = *v14;
  v16 = (void **)*((_QWORD *)v14 + 1);
  *v14 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unsigned __int8 *)sub_2101FAC64(a1);
  v6 = *v5;
  *v5 = v15;
  v15 = v6;
  v7 = (void **)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v16;
  v16 = v7;
  sub_20EB07D94(&v16, v6);
  v8 = (void ***)v14;
  v14 = 0;
  if (v8)
  {
    sub_20EB07D94(v8 + 1, *(unsigned __int8 *)v8);
    MEMORY[0x212BC6398](v8, 0x1022C40B06DCE69);
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20FE72AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20EB07D94(v13, a13);
  sub_2101F8784(&a12);
  sub_20E86665C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20FE72B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE72B2C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_21009C1D0);
  }
  sub_2100D78DC(&v14, v4 + 48);
  sub_20FE72C70(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE72C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE72C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE72C70(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t *i;
  char *v27;
  uint64_t *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  char v34;

  v33 = 0u;
  memset(v32, 0, sizeof(v32));
  sub_2100D7A24((uint64_t)&v28, a2);
  v3 = v28;
  *(_QWORD *)&v32[0] = v28;
  *(_OWORD *)((char *)v32 + 8) = v29;
  v4 = v30;
  *((_QWORD *)&v32[1] + 1) = v30;
  v27 = (char *)v31;
  v33 = v31;
  v5 = (uint64_t *)v29;
  v6 = ((_QWORD)v29 - (_QWORD)v28) / 24;
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v28 = (uint64_t *)(v7 + 16);
    sub_20E9F472C(&v28, v6);
  }
  else
  {
    sub_20E9F4A34();
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    v28 = (uint64_t *)(v8 + 16);
    if (v5 != v3)
    {
      v9 = 24 * v6;
      v10 = (const void **)v3;
      do
      {
        sub_20E9F4E1C((uint64_t)&v34, &v28, v10);
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
    }
  }
  else if (v5 != v3)
  {
    v11 = v8 + 8;
    v12 = 24 * v6;
    v13 = (uint64_t)v3;
    do
    {
      sub_20E9F5254((uint64_t)&v28, v11, v13);
      v13 += 24;
      v12 -= 24;
    }
    while (v12);
  }
  v14 = v27;
  v15 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v15 + 40))
  {
    v28 = (uint64_t *)(v15 + 16);
    sub_20E9F472C(&v28, (v27 - v4) / 24);
  }
  else
  {
    sub_20E9F4A34();
  }
  if (v27 == v4)
  {
    if (!v4)
      goto LABEL_37;
    goto LABEL_36;
  }
  v16 = 0;
  do
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v28 = (uint64_t *)(v17 + 16);
      sub_20E9F3D4C(&v28, 2u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v28, v17 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a1 + 24));
    sub_20FE730E8(a1, (unsigned __int16 *)&v4[v16]);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(*(_QWORD *)(v18 + 88) - 8);
    sub_20E9EE4D0((uint64_t *)(v18 + 48), *(_QWORD *)(v18 + 16) - v19 - 9);
    v20 = *(_QWORD *)(v18 + 48);
    if (v20)
      memmove((void *)(*(_QWORD *)(v18 + 24) + v19), *(const void **)(v18 + 56), v20);
    *(_QWORD *)(v18 + 48) = 0;
    v21 = *(_QWORD *)(v18 + 80);
    v22 = *(_QWORD *)(v18 + 88) - 8;
    *(_QWORD *)(v18 + 88) = v22;
    if (v21 == v22)
    {
      std::ostream::write();
      if (*(_BYTE *)(v18 + 40))
      {
        free(*(void **)(v18 + 24));
        *(_BYTE *)(v18 + 40) = 0;
      }
    }
    v16 += 24;
  }
  while (24 * ((v27 - v4) / 24) != v16);
  if (v4)
  {
    do
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v14 -= 24;
    }
    while (v14 != v4);
    v4 = (char *)*((_QWORD *)&v32[1] + 1);
    v3 = *(uint64_t **)&v32[0];
LABEL_36:
    operator delete(v4);
  }
LABEL_37:
  if (v3)
  {
    for (i = (uint64_t *)*((_QWORD *)&v32[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete((void *)*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_20FE72F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE72FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE72FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE72FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE72FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE72FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void **sub_20FE73008(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void **v8;
  void **v9;
  void *v10;

  v2 = (char *)a1[3];
  if (v2)
  {
    v3 = (char *)a1[4];
    v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v8 = (void **)*a1;
  if (*a1)
  {
    v9 = (void **)a1[1];
    v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

void sub_20FE730E8(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  const void *v7;
  CFTypeID TypeID;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const void *v14;
  CFTypeID v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  const void *v22;
  CFTypeID v23;
  _BOOL4 v24;
  uint64_t v25;
  std::string::value_type v26;
  const void *v27;
  CFTypeID v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  const __CFArray *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string::size_type v54;
  char *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  size_t v64;
  std::string::size_type v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  std::string::size_type v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  std::string::size_type v97;
  void *v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  unint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 theArray;
  uint64_t *v111;
  __int128 v112;
  std::string __p;
  std::string::size_type v114;
  std::string::size_type v115;
  __int128 v116;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v5 + 40))
  {
    if (v4 > 0x7F)
    {
      if (v4 > 0xFF)
      {
        __p.__r_.__value_.__s.__data_[0] = -51;
        *(_WORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1) = __rev16(v4);
        std::ostream::write();
        v6 = *a2;
        if (v6 <= 4)
          goto LABEL_3;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = -52;
        __p.__r_.__value_.__s.__data_[1] = v4;
        std::ostream::write();
        v6 = *a2;
        if (v6 <= 4)
          goto LABEL_3;
      }
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = v4;
      std::ostream::write();
      v6 = *a2;
      if (v6 <= 4)
        goto LABEL_3;
    }
LABEL_16:
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  __p.__r_.__value_.__r.__words[0] = v5 + 16;
  sub_20E9F3668((uint64_t **)&__p, v4);
  v6 = *a2;
LABEL_3:
  switch(v6)
  {
    case 0u:
      v7 = (const void *)*((_QWORD *)a2 + 1);
      if (v7 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v7) == TypeID))
      {
        sub_20EA67EC4(&v116, *((CFTypeRef *)a2 + 1));
        v109 = v116;
        if (*((_QWORD *)&v116 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
          v11 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
          if (*((_QWORD *)&v116 + 1))
          {
            v12 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
        }
      }
      else
      {
        v109 = 0uLL;
      }
      sub_20FE741FC(&theArray, (uint64_t)&v109);
      sub_20EA67898((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = (char)v111;
      __p.__r_.__value_.__s.__data_[8] = (char)v111;
      v114 = 0;
      v115 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v63 = (void *)v112;
      v64 = *((_QWORD *)&v112 + 1) - v112;
      if (*((_QWORD *)&v112 + 1) != (_QWORD)v112)
      {
        if ((v64 & 0x8000000000000000) != 0)
          sub_20FDFA718();
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v112 + 1) - v112);
        v114 = __p.__r_.__value_.__r.__words[2];
        v65 = __p.__r_.__value_.__r.__words[2] + v64;
        v115 = __p.__r_.__value_.__r.__words[2] + v64;
        memcpy((void *)__p.__r_.__value_.__r.__words[2], v63, v64);
        v114 = v65;
      }
      if (v63)
      {
        *((_QWORD *)&v112 + 1) = v63;
        operator delete(v63);
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
      if (*((_QWORD *)&v109 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v72 + 40))
      {
        v111 = (uint64_t *)(v72 + 16);
        sub_20E9F3D4C(&v111, 2u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)&v111, v72 + 8);
      }
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      v88 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v88 + 40))
      {
        v111 = (uint64_t *)(v88 + 16);
        sub_20E9F3164(&v111, __p.__r_.__value_.__s.__data_[0]);
      }
      else
      {
        if (__p.__r_.__value_.__s.__data_[0] < 0)
        {
          LOBYTE(v111) = -52;
          BYTE1(v111) = __p.__r_.__value_.__s.__data_[0];
        }
        else
        {
          LOBYTE(v111) = __p.__r_.__value_.__s.__data_[0];
        }
        std::ostream::write();
      }
      sub_20FE10834(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      v103 = *(_QWORD *)(a1 + 24);
      v104 = *(_QWORD *)(*(_QWORD *)(v103 + 88) - 8);
      sub_20E9EE4D0((uint64_t *)(v103 + 48), *(_QWORD *)(v103 + 16) - v104 - 9);
      v105 = *(_QWORD *)(v103 + 48);
      if (v105)
        memmove((void *)(*(_QWORD *)(v103 + 24) + v104), *(const void **)(v103 + 56), v105);
      *(_QWORD *)(v103 + 48) = 0;
      v106 = *(_QWORD *)(v103 + 80);
      v107 = *(_QWORD *)(v103 + 88) - 8;
      *(_QWORD *)(v103 + 88) = v107;
      if (v106 == v107)
      {
        std::ostream::write();
        if (*(_BYTE *)(v103 + 40))
        {
          free(*(void **)(v103 + 24));
          *(_BYTE *)(v103 + 40) = 0;
        }
      }
      v73 = (void *)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        return;
      v114 = __p.__r_.__value_.__r.__words[2];
      goto LABEL_188;
    case 1u:
      sub_20EA5E5C4(*((_QWORD *)a2 + 1), &__p);
      v35 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v35 + 40))
      {
        v111 = (uint64_t *)(v35 + 16);
        sub_20E9F4E1C((uint64_t)&v116, &v111, (const void **)&__p.__r_.__value_.__l.__data_);
      }
      else
      {
        sub_20E9F5254((uint64_t)&v111, v35 + 8, (uint64_t)&__p);
      }
      if (!(_BYTE)v114 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v73 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_188:
      operator delete(v73);
      return;
    case 2u:
      v22 = (const void *)*((_QWORD *)a2 + 1);
      if (!v22 || (v23 = CFBooleanGetTypeID(), CFGetTypeID(v22) != v23))
      {
        v24 = 0;
        LOWORD(v111) = 0;
        v25 = *(_QWORD *)(a1 + 24);
        if (!*(_BYTE *)(v25 + 40))
          goto LABEL_31;
LABEL_68:
        __p.__r_.__value_.__r.__words[0] = v25 + 16;
        sub_20E9F4CE4((uint64_t)&v116, (uint64_t **)&__p, &v111);
        return;
      }
      v24 = CFBooleanGetValue((CFBooleanRef)v22) != 0;
      LOWORD(v111) = v24 | 0x100;
      v25 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v25 + 40))
        goto LABEL_68;
LABEL_31:
      if (v24)
        v26 = -61;
      else
        v26 = -62;
      __p.__r_.__value_.__s.__data_[0] = v26;
      std::ostream::write();
      return;
    case 3u:
      v27 = (const void *)*((_QWORD *)a2 + 1);
      if (v27 && (v28 = CFArrayGetTypeID(), CFGetTypeID(v27) == v28))
      {
        sub_20E8EAFFC(&__p, *((CFTypeRef *)a2 + 1));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v34 = (const __CFArray *)theArray;
      }
      else
      {
        v34 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v34);
      sub_20FE73E28(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_20E8A9534(&v116, ValueAtIndex);
          v108 = v116;
          if (*((_QWORD *)&v116 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
            if (*((_QWORD *)&v116 + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          sub_2100D6EC0((uint64_t)&v111, (uint64_t)&v108);
          v54 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v55 = sub_20FE7430C(&__p.__r_.__value_.__l.__data_, (uint64_t)&v111);
            v56 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v55;
            if (*((_QWORD *)&v112 + 1))
            {
              v57 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = (_WORD)v111;
            *(_OWORD *)(v54 + 8) = v112;
            v112 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v54 + 24;
          }
          v59 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
          if (*((_QWORD *)&v108 + 1))
          {
            v60 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
        }
      }
      v62 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v62 + 40))
      {
        v111 = (uint64_t *)(v62 + 16);
        sub_20E9F472C(&v111, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
      }
      else
      {
        sub_20E9F4A34();
      }
      v89 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v90 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          v91 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v91 + 40))
          {
            v111 = (uint64_t *)(v91 + 16);
            sub_20E9F3D4C(&v111, 2u);
          }
          else
          {
            sub_20E9F3FC0((uint64_t)&v111, v91 + 8);
          }
          sub_20E9EE95C(*(_QWORD *)(a1 + 24));
          sub_20FE730E8(a1, v89, 2);
          v92 = *(_QWORD *)(a1 + 24);
          v93 = *(_QWORD *)(*(_QWORD *)(v92 + 88) - 8);
          sub_20E9EE4D0((uint64_t *)(v92 + 48), *(_QWORD *)(v92 + 16) - v93 - 9);
          v94 = *(_QWORD *)(v92 + 48);
          if (v94)
            memmove((void *)(*(_QWORD *)(v92 + 24) + v93), *(const void **)(v92 + 56), v94);
          *(_QWORD *)(v92 + 48) = 0;
          v95 = *(_QWORD *)(v92 + 80);
          v96 = *(_QWORD *)(v92 + 88) - 8;
          *(_QWORD *)(v92 + 88) = v96;
          if (v95 == v96)
          {
            std::ostream::write();
            if (*(_BYTE *)(v92 + 40))
            {
              free(*(void **)(v92 + 24));
              *(_BYTE *)(v92 + 40) = 0;
            }
          }
          v89 += 24;
          v90 -= 24;
        }
        while (v90);
        v89 = __p.__r_.__value_.__r.__words[0];
      }
      if (v89)
      {
        v97 = __p.__r_.__value_.__l.__size_;
        v98 = (void *)v89;
        if (__p.__r_.__value_.__l.__size_ != v89)
        {
          do
          {
            v99 = *(std::__shared_weak_count **)(v97 - 8);
            if (v99)
            {
              p_shared_owners = (unint64_t *)&v99->__shared_owners_;
              do
                v101 = __ldaxr(p_shared_owners);
              while (__stlxr(v101 - 1, p_shared_owners));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
            v97 -= 24;
          }
          while (v97 != v89);
          v98 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v89;
        operator delete(v98);
      }
      v85 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v102 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v87 = __ldaxr(v102);
      while (__stlxr(v87 - 1, v102));
      goto LABEL_175;
    case 4u:
      v14 = (const void *)*((_QWORD *)a2 + 1);
      if (v14 && (v15 = CFDictionaryGetTypeID(), CFGetTypeID(v14) == v15))
      {
        sub_20E9DA754(&__p, *((CFTypeRef *)a2 + 1));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
          v18 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        v21 = (const void *)theArray;
      }
      else
      {
        v21 = 0;
        theArray = 0uLL;
      }
      sub_20E9DA754(&__p, v21);
      v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v37 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        v39 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v40 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        do
          v42 = __ldxr(v37);
        while (__stxr(v42 + 1, v37));
        v116 = v36;
        do
          v43 = __ldxr(v37);
        while (__stxr(v43 + 1, v37));
        do
          v44 = __ldaxr(v37);
        while (__stlxr(v44 - 1, v37));
        if (!v44)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
        }
        do
          v45 = __ldaxr(v37);
        while (__stlxr(v45 - 1, v37));
        if (!v45)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v36 + 1) + 16))(*((_QWORD *)&v36 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v36 + 1));
        }
      }
      else
      {
        v116 = __p.__r_.__value_.__r.__words[0];
      }
      sub_2100D78DC(&v111, (uint64_t)&v116);
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
      if (*((_QWORD *)&v116 + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      v79 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v79 + 40))
      {
        __p.__r_.__value_.__r.__words[0] = v79 + 16;
        sub_20E9F3D4C((uint64_t **)&__p, 2u);
      }
      else
      {
        sub_20E9F3FC0((uint64_t)&__p, v79 + 8);
      }
      sub_20E9EE95C(*(_QWORD *)(a1 + 24));
      sub_20FE72C70(a1, &v111, 2);
      v80 = *(_QWORD *)(a1 + 24);
      v81 = *(_QWORD *)(*(_QWORD *)(v80 + 88) - 8);
      sub_20E9EE4D0((uint64_t *)(v80 + 48), *(_QWORD *)(v80 + 16) - v81 - 9);
      v82 = *(_QWORD *)(v80 + 48);
      if (v82)
        memmove((void *)(*(_QWORD *)(v80 + 24) + v81), *(const void **)(v80 + 56), v82);
      *(_QWORD *)(v80 + 48) = 0;
      v83 = *(_QWORD *)(v80 + 80);
      v84 = *(_QWORD *)(v80 + 88) - 8;
      *(_QWORD *)(v80 + 88) = v84;
      if (v83 == v84)
      {
        std::ostream::write();
        if (*(_BYTE *)(v80 + 40))
        {
          free(*(void **)(v80 + 24));
          *(_BYTE *)(v80 + 40) = 0;
        }
      }
      v85 = (std::__shared_weak_count *)v112;
      if (!(_QWORD)v112)
        return;
      v86 = (unint64_t *)(v112 + 8);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
LABEL_175:
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
      return;
    default:
      goto LABEL_16;
  }
}

void sub_20FE73CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE73CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20E86665C(v6 - 64);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE73D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE73E28(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int16 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20FDFA718();
    v4 = a1[1];
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_WORD *)v4 - 12);
        v4 -= 24;
        *((_WORD *)v9 - 12) = v10;
        v9 -= 24;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v4 + 8);
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v2 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      a1[2] = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 24;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void sub_20FE73F48(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)(&off_24CA17E08)[2 * *a3], (uint64_t)(&off_24CA17E08)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FE741A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FE741CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE741E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE741FC(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20EA67EC4(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20FE742F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20FE7430C(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int16 v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20FDFA718();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_20E877A38();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_WORD *)v9 = *(_WORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *((_WORD *)v13 - 12);
      v13 -= 24;
      *((_WORD *)v9 - 12) = v14;
      v9 -= 24;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v13 + 8);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v13)
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v15 -= 24;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_20FE7446C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  uint64_t v15;
  int v16;

  sub_2101FA8A4(a2);
  v14 = (unsigned __int8 **)"version";
  v15 = 7;
  v16 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v16);
  v6 = v16;
  v7 = *(_QWORD *)(a3 + 8);
  v14 = *(unsigned __int8 ***)a3;
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20FE745B4(a2, &v14, v6);
  v10 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v11 = (unint64_t *)(v15 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE74570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE745B4(uint64_t a1, unsigned __int8 ***a2, unsigned int a3)
{
  int v4;
  unsigned __int8 **v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 **v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned __int8 **v17;
  std::__shared_weak_count *v18;
  unsigned __int8 **v19;
  unsigned __int8 ****v20;
  unsigned __int8 ***v21;

  if (a3 > 2)
  {
    v11 = *a2;
    v12 = (unint64_t *)(*a2 + 11);
    v19 = *a2;
    v13 = atomic_load(v12);
    if (v13 != -1)
    {
      v21 = &v19;
      v20 = &v21;
      std::__call_once(v12, &v20, (void (__cdecl *)(void *))sub_21009C1D0);
    }
    sub_2100D78DC(&v17, (uint64_t)(v11 + 6));
    sub_20FE7475C(a1, (uint64_t)&v17);
    v14 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v4 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "dictionary";
      *(_QWORD *)(a1 + 80) = 10;
      if (!v4)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v5 = *a2;
    v6 = (unint64_t *)(*a2 + 9);
    v17 = *a2;
    v18 = (std::__shared_weak_count *)&v19;
    v19 = 0;
    v7 = atomic_load(v6);
    if (v7 != -1)
    {
      v21 = &v17;
      v20 = &v21;
      std::__call_once(v6, &v20, (void (__cdecl *)(void *))sub_21009BB98);
    }
    sub_20EB98380((uint64_t)&v17, *v5);
    v8 = (unsigned __int8 *)sub_2101FA67C(a1);
    v9 = *v8;
    *v8 = v17;
    LOBYTE(v17) = v9;
    v10 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v18;
    v18 = (std::__shared_weak_count *)v10;
    sub_20EB911C0((uint64_t *)&v18, v9);
  }
}

void sub_20FE74730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE74744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v10;

  sub_20EB911C0((uint64_t *)(v10 + 8), a10);
  _Unwind_Resume(a1);
}

void sub_20FE7475C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v3 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "dictionary";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v3)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20FDD58F4(&v12, a2);
  sub_2100D63F4((uint64_t)&v12, (uint64_t *)&v14);
  v4 = (uint64_t)v14;
  v15 = *v14;
  v16 = *((_QWORD *)v14 + 1);
  *v14 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unsigned __int8 *)sub_2101FA67C(a1);
  v6 = *v5;
  *v5 = v15;
  v15 = v6;
  v7 = *((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v16;
  v16 = v7;
  sub_20EB911C0(&v16, v6);
  v8 = (uint64_t *)v14;
  v14 = 0;
  if (v8)
  {
    sub_20EB911C0(v8 + 1, *(unsigned __int8 *)v8);
    MEMORY[0x212BC6398](v8, 0x1022C40B06DCE69);
  }
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20FE74890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t *a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20EB911C0(v13, a13);
  sub_2101F8734(&a12);
  sub_20E86665C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20FE748B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE748CC(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_21009C1D0);
  }
  sub_2100D78DC(&v14, v4 + 48);
  sub_20FE74A10(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE749E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE749FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE74A10(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  char *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void **i;
  void **v24;
  char *v25;
  void **v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;

  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  sub_2100D7A24((uint64_t)&v26, a2);
  v3 = v26;
  *(_QWORD *)&v30[0] = v26;
  v4 = (void **)v27;
  *(_OWORD *)((char *)v30 + 8) = v27;
  v5 = v28;
  *((_QWORD *)&v30[1] + 1) = v28;
  v25 = (char *)v29;
  v31 = v29;
  if (*(_QWORD *)(a1 + 40))
  {
    v24 = (void **)v27;
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&v26, 1);
    v4 = v24;
  }
  v7 = v4;
  v8 = ((char *)v4 - (char *)v3) / 24;
  std::ostream::operator<<();
  v9 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v9;
  if (v7 != v3)
  {
    v10 = 24 * v8;
    v11 = (uint64_t)v3;
    do
    {
      sub_20E9E713C(a1, v11);
      v11 += 24;
      v10 -= 24;
    }
    while (v10);
    v9 = *(_QWORD *)(a1 + 40);
  }
  if (v9)
  {
    v12 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v12, (uint64_t)&v26, 1);
  }
  v13 = v25;
  std::ostream::operator<<();
  v14 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v14;
  if (v25 == v5)
  {
    if (!v5)
      goto LABEL_27;
    goto LABEL_26;
  }
  v15 = 0;
  do
  {
    if (v14)
    {
      v16 = *(_QWORD **)(a1 + 24);
      LOBYTE(v26) = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v16, (uint64_t)&v26, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    sub_20FE74D14(a1, (uint64_t)&v5[v15]);
    v17 = *(_BYTE *)(a1 + 34);
    if (*(_QWORD *)(a1 + 40))
    {
      v18 = *(_QWORD **)(a1 + 24);
      LOBYTE(v26) = *(_BYTE *)(a1 + 32);
      sub_20E86A980(v18, (uint64_t)&v26, 1);
    }
    v19 = *(_QWORD **)(a1 + 24);
    LOBYTE(v26) = v17;
    sub_20E86A980(v19, (uint64_t)&v26, 1);
    v14 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 40) = v14;
    v15 += 24;
  }
  while (24 * ((v25 - v5) / 24) != v15);
  if (v5)
  {
    do
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v13 -= 24;
    }
    while (v13 != v5);
    v5 = (char *)*((_QWORD *)&v30[1] + 1);
    v3 = *(void ***)&v30[0];
LABEL_26:
    operator delete(v5);
  }
LABEL_27:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v30[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_20FE74CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE74CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE74CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE74CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE74D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE74D14(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  CFTypeID TypeID;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  CFTypeID v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  const __CFBoolean *v20;
  CFTypeID v21;
  _QWORD *v22;
  const void *v23;
  CFTypeID v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  const __CFArray *v30;
  void *v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string::size_type v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  std::string::size_type v60;
  int64_t v61;
  _QWORD *v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  std::string::size_type v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  void *v71;
  size_t v72;
  std::string::size_type v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  char v81;
  _QWORD *v82;
  _QWORD *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  std::string::value_type v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t *v96;
  __int128 v97;
  __int128 v98;
  __int128 theArray;
  uint64_t v100;
  __int128 v101;
  std::string __p;
  std::string::size_type v103;
  std::string::size_type v104;
  __int128 v105;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  switch(*(_WORD *)a2)
  {
    case 0:
      v5 = *(const void **)(a2 + 8);
      if (v5 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v5) == TypeID))
      {
        sub_20EA67EC4(&v105, *(CFTypeRef *)(a2 + 8));
        v98 = v105;
        if (*((_QWORD *)&v105 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
          v9 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
          if (*((_QWORD *)&v105 + 1))
          {
            v10 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
      else
      {
        v98 = 0uLL;
      }
      sub_20FE741FC(&theArray, (uint64_t)&v98);
      sub_20EA67898((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = v100;
      __p.__r_.__value_.__s.__data_[8] = v100;
      v103 = 0;
      v104 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v71 = (void *)v101;
      v72 = *((_QWORD *)&v101 + 1) - v101;
      if (*((_QWORD *)&v101 + 1) != (_QWORD)v101)
      {
        if ((v72 & 0x8000000000000000) != 0)
          sub_20FDFA718();
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v101 + 1) - v101);
        v103 = __p.__r_.__value_.__r.__words[2];
        v73 = __p.__r_.__value_.__r.__words[2] + v72;
        v104 = __p.__r_.__value_.__r.__words[2] + v72;
        memcpy((void *)__p.__r_.__value_.__r.__words[2], v71, v72);
        v103 = v73;
      }
      if (v71)
      {
        *((_QWORD *)&v101 + 1) = v71;
        operator delete(v71);
      }
      v74 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v80 = *(_QWORD **)(a1 + 24);
        LOBYTE(v100) = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v80, (uint64_t)&v100, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      LOBYTE(v100) = __p.__r_.__value_.__s.__data_[0];
      sub_20E9E6F58(a1, (unsigned __int8 *)&v100);
      sub_20FE12A78(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      v81 = *(_BYTE *)(a1 + 34);
      if (*(_QWORD *)(a1 + 40))
      {
        v82 = *(_QWORD **)(a1 + 24);
        LOBYTE(v100) = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v82, (uint64_t)&v100, 1);
      }
      v83 = *(_QWORD **)(a1 + 24);
      LOBYTE(v100) = v81;
      sub_20E86A980(v83, (uint64_t)&v100, 1);
      ++*(_QWORD *)(a1 + 40);
      v31 = (void *)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        return;
      v103 = __p.__r_.__value_.__r.__words[2];
      goto LABEL_128;
    case 1:
      sub_20EA5E5C4(*(_QWORD *)(a2 + 8), &__p);
      sub_20E9E713C(a1, (uint64_t)&__p);
      if (!(_BYTE)v103 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v31 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_128:
      operator delete(v31);
      return;
    case 2:
      v20 = *(const __CFBoolean **)(a2 + 8);
      if (!v20)
        goto LABEL_28;
      v21 = CFBooleanGetTypeID();
      if (CFGetTypeID(v20) == v21)
      {
        CFBooleanGetValue(v20);
LABEL_28:
        if (*(_QWORD *)(a1 + 40))
          goto LABEL_29;
      }
      else if (*(_QWORD *)(a1 + 40))
      {
LABEL_29:
        v22 = *(_QWORD **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v22, (uint64_t)&__p, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      return;
    case 3:
      v23 = *(const void **)(a2 + 8);
      if (v23 && (v24 = CFArrayGetTypeID(), CFGetTypeID(v23) == v24))
      {
        sub_20E8EAFFC(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v30 = (const __CFArray *)theArray;
      }
      else
      {
        v30 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v30);
      sub_20FE73E28(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_20E8A9534(&v105, ValueAtIndex);
          v97 = v105;
          if (*((_QWORD *)&v105 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            v47 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
            if (*((_QWORD *)&v105 + 1))
            {
              v48 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
          }
          sub_2100D6EC0((uint64_t)&v100, (uint64_t)&v97);
          v50 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v51 = sub_20FE7430C(&__p.__r_.__value_.__l.__data_, (uint64_t)&v100);
            v52 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
            if (*((_QWORD *)&v101 + 1))
            {
              v53 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = v100;
            *(_OWORD *)(v50 + 8) = v101;
            v101 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v50 + 24;
          }
          v55 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
          if (*((_QWORD *)&v97 + 1))
          {
            v56 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v58 = *(_QWORD **)(a1 + 24);
        LOBYTE(v100) = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v58, (uint64_t)&v100, 1);
      }
      std::ostream::operator<<();
      v59 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v59;
      v60 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v61 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          if (v59)
          {
            v62 = *(_QWORD **)(a1 + 24);
            LOBYTE(v100) = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v62, (uint64_t)&v100, 1);
          }
          std::ostream::operator<<();
          ++*(_QWORD *)(a1 + 40);
          sub_20FE74D14(a1, v60, 2);
          v63 = *(_BYTE *)(a1 + 34);
          if (*(_QWORD *)(a1 + 40))
          {
            v64 = *(_QWORD **)(a1 + 24);
            LOBYTE(v100) = *(_BYTE *)(a1 + 32);
            sub_20E86A980(v64, (uint64_t)&v100, 1);
          }
          v65 = *(_QWORD **)(a1 + 24);
          LOBYTE(v100) = v63;
          sub_20E86A980(v65, (uint64_t)&v100, 1);
          v59 = *(_QWORD *)(a1 + 40) + 1;
          *(_QWORD *)(a1 + 40) = v59;
          v60 += 24;
          v61 -= 24;
        }
        while (v61);
        v60 = __p.__r_.__value_.__r.__words[0];
      }
      if (v60)
      {
        v66 = __p.__r_.__value_.__l.__size_;
        v67 = (void *)v60;
        if (__p.__r_.__value_.__l.__size_ != v60)
        {
          do
          {
            v68 = *(std::__shared_weak_count **)(v66 - 8);
            if (v68)
            {
              p_shared_owners = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(p_shared_owners);
              while (__stlxr(v70 - 1, p_shared_owners));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v66 -= 24;
          }
          while (v66 != v60);
          v67 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v60;
        operator delete(v67);
      }
      v84 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v85 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      goto LABEL_153;
    case 4:
      v12 = *(const void **)(a2 + 8);
      if (v12 && (v13 = CFDictionaryGetTypeID(), CFGetTypeID(v12) == v13))
      {
        sub_20E9DA754(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        v19 = (const void *)theArray;
      }
      else
      {
        v19 = 0;
        theArray = 0uLL;
      }
      sub_20E9DA754(&__p, v19);
      v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        v35 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        do
          v38 = __ldxr(v33);
        while (__stxr(v38 + 1, v33));
        v105 = v32;
        do
          v39 = __ldxr(v33);
        while (__stxr(v39 + 1, v33));
        do
          v40 = __ldaxr(v33);
        while (__stlxr(v40 - 1, v33));
        if (!v40)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
        }
        do
          v41 = __ldaxr(v33);
        while (__stlxr(v41 - 1, v33));
        if (!v41)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
        }
      }
      else
      {
        v105 = __p.__r_.__value_.__r.__words[0];
      }
      sub_2100D78DC(&v100, (uint64_t)&v105);
      v87 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v90 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (!v91)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      if (*(_QWORD *)(a1 + 40))
      {
        v92 = *(_QWORD **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v92, (uint64_t)&__p, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a1 + 40);
      sub_20FE74A10(a1, &v100, 2);
      v93 = *(_BYTE *)(a1 + 34);
      if (*(_QWORD *)(a1 + 40))
      {
        v94 = *(_QWORD **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v94, (uint64_t)&__p, 1);
      }
      v95 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = v93;
      sub_20E86A980(v95, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      v84 = (std::__shared_weak_count *)v101;
      if (!(_QWORD)v101)
        return;
      v96 = (unint64_t *)(v101 + 8);
      do
        v86 = __ldaxr(v96);
      while (__stlxr(v86 - 1, v96));
LABEL_153:
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
      return;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
}

void sub_20FE75748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE75764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20E86665C(v6 - 64);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE75780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE75794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE75890(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_21009C1D0);
  }
  sub_2100D78DC(&v14, v4 + 48);
  sub_20FE759D4(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE759A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE759C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE759D4(uint64_t a1, uint64_t a2)
{
  void **v3;
  char *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void **i;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  _OWORD v25[2];
  __int128 v26;
  uint64_t __src;
  uint64_t v28;

  v26 = 0u;
  memset(v25, 0, sizeof(v25));
  sub_2100D7A24((uint64_t)&v21, a2);
  v3 = (void **)v21;
  *(_QWORD *)&v25[0] = v21;
  *(_OWORD *)((char *)v25 + 8) = v22;
  v4 = v23;
  *((_QWORD *)&v25[1] + 1) = v23;
  v20 = (char *)v24;
  v26 = v24;
  v5 = (void **)v22;
  v6 = ((uint64_t)v22 - v21) / 24;
  __src = v6;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v28, 8);
  if (v5 != v3)
  {
    v7 = 24 * v6;
    v8 = (char **)v3;
    do
    {
      v9 = *((unsigned __int8 *)v8 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = (uint64_t)v8[1];
      v21 = v9;
      sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&v21, (char *)&v22, 8);
      if (*((char *)v8 + 23) < 0)
      {
        v11 = *v8;
        v10 = (int64_t)v8[1];
        if (*v8)
          v12 = 1;
        else
          v12 = v10 == 0;
        if (!v12)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v11 = 0;
        }
      }
      else
      {
        v10 = *((unsigned __int8 *)v8 + 23);
        v11 = (char *)v8;
      }
      sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), v11, &v11[v10], v10);
      v8 += 3;
      v7 -= 24;
    }
    while (v7);
  }
  v13 = v20;
  v21 = (v20 - v4) / 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&v21, (char *)&v22, 8);
  if (v20 == v4)
  {
    if (!v4)
      goto LABEL_28;
    goto LABEL_27;
  }
  v14 = 0;
  do
  {
    LODWORD(__src) = 2;
    sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
    sub_2100B6A04((_QWORD *)a1);
    sub_20FE75D50(a1, (uint64_t)&v4[v14]);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v15 + 10) = *(_QWORD *)(a1 + 32) - v15 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
    v14 += 24;
  }
  while (24 * ((v20 - v4) / 24) != v14);
  if (v4)
  {
    do
    {
      v16 = (std::__shared_weak_count *)*((_QWORD *)v13 - 1);
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v13 -= 24;
    }
    while (v13 != v4);
    v4 = (char *)*((_QWORD *)&v25[1] + 1);
    v3 = *(void ***)&v25[0];
LABEL_27:
    operator delete(v4);
  }
LABEL_28:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v25[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_20FE75CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE75CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE75D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE75D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE75D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE75D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE75D50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  CFTypeID TypeID;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  CFTypeID v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  const __CFBoolean *v20;
  CFTypeID v21;
  __int16 v22;
  __int16 v23;
  const void *v24;
  CFTypeID v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const __CFArray *v31;
  std::string::size_type size;
  std::string::size_type v33;
  std::string *p_p;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string::size_type v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string::size_type v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::string::size_type v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  void *v70;
  size_t v71;
  char *v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t data_low;
  uint64_t v91;
  unint64_t *v92;
  __int128 v93;
  __int128 v94;
  __int128 theArray;
  unint64_t __src;
  __int128 v97;
  std::string __p;
  char *v99;
  char *v100;
  __int128 v101;

  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)a2;
  v4 = a1 + 24;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[2], 2);
  switch(*(_WORD *)a2)
  {
    case 0:
      v5 = *(const void **)(a2 + 8);
      if (v5 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v5) == TypeID))
      {
        sub_20EA67EC4(&v101, *(CFTypeRef *)(a2 + 8));
        v94 = v101;
        if (*((_QWORD *)&v101 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
          v9 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
          if (*((_QWORD *)&v101 + 1))
          {
            v10 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
      else
      {
        v94 = 0uLL;
      }
      sub_20FE741FC(&theArray, (uint64_t)&v94);
      sub_20EA67898((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = __src;
      __p.__r_.__value_.__s.__data_[8] = __src;
      v99 = 0;
      v100 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v70 = (void *)v97;
      v71 = *((_QWORD *)&v97 + 1) - v97;
      if (*((_QWORD *)&v97 + 1) != (_QWORD)v97)
      {
        if ((v71 & 0x8000000000000000) != 0)
          sub_20FDFA718();
        v72 = (char *)operator new(*((_QWORD *)&v97 + 1) - v97);
        v73 = &v72[v71];
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v72;
        v100 = &v72[v71];
        memcpy(v72, v70, v71);
        v99 = v73;
      }
      if (v70)
      {
        *((_QWORD *)&v97 + 1) = v70;
        operator delete(v70);
      }
      v74 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      LODWORD(__src) = 2;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
      sub_2100B6A04((_QWORD *)a1);
      LOBYTE(__src) = __p.__r_.__value_.__s.__data_[0];
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      sub_20FE13248(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      v80 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v80 + 10) = *(_QWORD *)(a1 + 32) - v80 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
      v81 = (void *)__p.__r_.__value_.__r.__words[2];
      if (!__p.__r_.__value_.__r.__words[2])
        return;
      v99 = (char *)__p.__r_.__value_.__r.__words[2];
      goto LABEL_145;
    case 1:
      sub_20EA5E5C4(*(_QWORD *)(a2 + 8), &__p);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      __src = size;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v97, 8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v33 = __p.__r_.__value_.__l.__size_;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0] && __p.__r_.__value_.__l.__size_)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102CFEAE, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          p_p = 0;
        }
      }
      else
      {
        v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        p_p = &__p;
      }
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)p_p, (char *)p_p + v33, v33);
      if (!(_BYTE)v99 || (SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v81 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_145:
      operator delete(v81);
      return;
    case 2:
      v20 = *(const __CFBoolean **)(a2 + 8);
      if (v20 && (v21 = CFBooleanGetTypeID(), CFGetTypeID(v20) == v21))
      {
        v22 = CFBooleanGetValue(v20) != 0;
        v23 = 1;
      }
      else
      {
        v22 = 0;
        v23 = 0;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = v22 | (v23 << 8);
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[1], 1);
      return;
    case 3:
      v24 = *(const void **)(a2 + 8);
      if (v24 && (v25 = CFArrayGetTypeID(), CFGetTypeID(v24) == v25))
      {
        sub_20E8EAFFC(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v29 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        v31 = (const __CFArray *)theArray;
      }
      else
      {
        v31 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v31);
      sub_20FE73E28(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_20E8A9534(&v101, ValueAtIndex);
          v93 = v101;
          if (*((_QWORD *)&v101 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            v50 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
            if (*((_QWORD *)&v101 + 1))
            {
              v51 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
          }
          sub_2100D6EC0((uint64_t)&__src, (uint64_t)&v93);
          v53 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v54 = sub_20FE7430C(&__p.__r_.__value_.__l.__data_, (uint64_t)&__src);
            v55 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v54;
            if (*((_QWORD *)&v97 + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = __src;
            *(_OWORD *)(v53 + 8) = v97;
            v97 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v53 + 24;
          }
          v58 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
          if (*((_QWORD *)&v93 + 1))
          {
            v59 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
        }
      }
      __src = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v97, 8);
      v61 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v62 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          LODWORD(v101) = 2;
          sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&v101, (char *)&v101 + 4, 4);
          v63 = v101;
          sub_2100B6A04((_QWORD *)a1);
          sub_20FE75D50(a1, v61, v63);
          v64 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
          *(_QWORD *)(v64 + 10) = *(_QWORD *)(a1 + 32) - v64 - 18;
          *(_QWORD *)(a1 + 56) -= 8;
          v61 += 24;
          v62 -= 24;
        }
        while (v62);
        v61 = __p.__r_.__value_.__r.__words[0];
      }
      if (v61)
      {
        v65 = __p.__r_.__value_.__l.__size_;
        v66 = (void *)v61;
        if (__p.__r_.__value_.__l.__size_ != v61)
        {
          do
          {
            v67 = *(std::__shared_weak_count **)(v65 - 8);
            if (v67)
            {
              p_shared_owners = (unint64_t *)&v67->__shared_owners_;
              do
                v69 = __ldaxr(p_shared_owners);
              while (__stlxr(v69 - 1, p_shared_owners));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                std::__shared_weak_count::__release_weak(v67);
              }
            }
            v65 -= 24;
          }
          while (v65 != v61);
          v66 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v61;
        operator delete(v66);
      }
      v82 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v83 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      goto LABEL_136;
    case 4:
      v12 = *(const void **)(a2 + 8);
      if (v12 && (v13 = CFDictionaryGetTypeID(), CFGetTypeID(v12) == v13))
      {
        sub_20E9DA754(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v14 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v16 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
        }
        v19 = (const void *)theArray;
      }
      else
      {
        v19 = 0;
        theArray = 0uLL;
      }
      sub_20E9DA754(&__p, v19);
      v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
        v38 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v39 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        do
          v41 = __ldxr(v36);
        while (__stxr(v41 + 1, v36));
        v101 = v35;
        do
          v42 = __ldxr(v36);
        while (__stxr(v42 + 1, v36));
        do
          v43 = __ldaxr(v36);
        while (__stlxr(v43 - 1, v36));
        if (!v43)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
        }
        do
          v44 = __ldaxr(v36);
        while (__stlxr(v44 - 1, v36));
        if (!v44)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
        }
      }
      else
      {
        v101 = __p.__r_.__value_.__r.__words[0];
      }
      sub_2100D78DC(&__src, (uint64_t)&v101);
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v86 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v88 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v89 = __ldaxr(v88);
        while (__stlxr(v89 - 1, v88));
        if (!v89)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      sub_2100B8FD4(v4, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[4], 4);
      data_low = LODWORD(__p.__r_.__value_.__l.__data_);
      sub_2100B6A04((_QWORD *)a1);
      sub_20FE759D4(a1, &__src, data_low);
      v91 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v91 + 10) = *(_QWORD *)(a1 + 32) - v91 - 18;
      *(_QWORD *)(a1 + 56) -= 8;
      v82 = (std::__shared_weak_count *)v97;
      if (!(_QWORD)v97)
        return;
      v92 = (unint64_t *)(v97 + 8);
      do
        v84 = __ldaxr(v92);
      while (__stlxr(v84 - 1, v92));
LABEL_136:
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
      return;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
}

void sub_20FE76754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE76770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20E86665C(v6 - 80);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE767A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE767B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  sub_20E86665C((uint64_t)&a14);
  sub_20E86665C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20FE767F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE7689C(_DWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v16 = v4;
  v7 = atomic_load((unint64_t *)(v4 + 88));
  if (v7 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once((std::once_flag::_State_type *)(v4 + 88), &v17, (void (__cdecl *)(void *))sub_21009C1D0);
  }
  sub_2100D78DC(&v14, v4 + 48);
  sub_20FE769E0(a1, (uint64_t)&v14);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_20FE769B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE769CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE769E0(_DWORD *a1, uint64_t a2)
{
  void **v3;
  char *v4;
  void (*v5)(_DWORD *, uint64_t *);
  void **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void **i;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  int v24;

  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  sub_2100D7A24((uint64_t)&v18, a2);
  v3 = (void **)v18;
  *(_QWORD *)&v22[0] = v18;
  *(_OWORD *)((char *)v22 + 8) = v19;
  v4 = v20;
  *((_QWORD *)&v22[1] + 1) = v20;
  v17 = (char *)v21;
  v23 = v21;
  v5 = *(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 120);
  v6 = (void **)v19;
  v7 = ((uint64_t)v19 - v18) / 24;
  v18 = v7;
  v5(a1, &v18);
  if (v6 != v3)
  {
    v8 = 24 * v7;
    v9 = (char *)v3;
    do
    {
      (*(void (**)(_DWORD *, char *))(*(_QWORD *)a1 + 144))(a1, v9);
      v9 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  v10 = v17;
  v18 = (v17 - v4) / 24;
  (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, &v18);
  if (v17 == v4)
  {
    if (!v4)
      goto LABEL_23;
    goto LABEL_22;
  }
  v11 = 0;
  do
  {
    v12 = a1[2];
    v24 = 2;
    (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v24);
    if (v12 < 1)
    {
      sub_20FE76CBC((uint64_t)a1, (std::string::size_type)&v4[v11]);
    }
    else
    {
      if (v12 == 2)
      {
        v24 = 2;
        (*(void (**)(_DWORD *, int *))(*(_QWORD *)a1 + 104))(a1, &v24);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 16))(a1);
      sub_20FE76CBC((uint64_t)a1, (std::string::size_type)&v4[v11]);
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    }
    v11 += 24;
  }
  while (24 * ((v17 - v4) / 24) != v11);
  if (v4)
  {
    do
    {
      v13 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v10 -= 24;
    }
    while (v10 != v4);
    v4 = (char *)*((_QWORD *)&v22[1] + 1);
    v3 = *(void ***)&v22[0];
LABEL_22:
    operator delete(v4);
  }
LABEL_23:
  if (v3)
  {
    for (i = (void **)*((_QWORD *)&v22[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0)
        operator delete(*(i - 3));
    }
    operator delete(v3);
  }
}

void sub_20FE76C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE76C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE76C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE76C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE76CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE76CBC(uint64_t a1, std::string::size_type a2)
{
  const void *v4;
  CFTypeID TypeID;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  const void *v11;
  CFTypeID v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  const __CFBoolean *v19;
  CFTypeID v20;
  __int16 v21;
  __int16 v22;
  const void *v23;
  CFTypeID v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  const __CFArray *v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  CFIndex Count;
  CFIndex i;
  const void *ValueAtIndex;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string::size_type v49;
  char *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string::size_type v57;
  int64_t v58;
  int v59;
  uint64_t v60;
  void *v61;
  size_t v62;
  std::string::size_type v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  std::string::size_type v72;
  void *v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  uint64_t data_low;
  unint64_t *v87;
  __int128 v88;
  __int128 v89;
  __int128 theArray;
  unint64_t p_p;
  __int128 v92;
  std::string __p;
  std::string::size_type v94;
  std::string::size_type v95;
  __int128 v96;

  __p.__r_.__value_.__r.__words[0] = a2;
  sub_20FE777C8((_BYTE *)a1, (unsigned __int16 **)&__p);
  switch(*(_WORD *)a2)
  {
    case 0:
      v4 = *(const void **)(a2 + 8);
      if (v4 && (TypeID = CFNumberGetTypeID(), CFGetTypeID(v4) == TypeID))
      {
        sub_20EA67EC4(&v96, *(CFTypeRef *)(a2 + 8));
        v89 = v96;
        if (*((_QWORD *)&v96 + 1))
        {
          v6 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 1, v6));
          v8 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
          if (*((_QWORD *)&v96 + 1))
          {
            v9 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 - 1, v9));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
        }
      }
      else
      {
        v89 = 0uLL;
      }
      sub_20FE741FC(&theArray, (uint64_t)&v89);
      sub_20EA67898((CFNumberRef *)&theArray);
      __p.__r_.__value_.__s.__data_[0] = p_p;
      __p.__r_.__value_.__s.__data_[8] = p_p;
      v94 = 0;
      v95 = 0;
      __p.__r_.__value_.__r.__words[2] = 0;
      v61 = (void *)v92;
      v62 = *((_QWORD *)&v92 + 1) - v92;
      if (*((_QWORD *)&v92 + 1) != (_QWORD)v92)
      {
        if ((v62 & 0x8000000000000000) != 0)
          sub_20FDFA718();
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)operator new(*((_QWORD *)&v92 + 1) - v92);
        v94 = __p.__r_.__value_.__r.__words[2];
        v63 = __p.__r_.__value_.__r.__words[2] + v62;
        v95 = __p.__r_.__value_.__r.__words[2] + v62;
        memcpy((void *)__p.__r_.__value_.__r.__words[2], v61, v62);
        v94 = v63;
      }
      if (v61)
      {
        *((_QWORD *)&v92 + 1) = v61;
        operator delete(v61);
      }
      v64 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (*((_QWORD *)&theArray + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
      if (*((_QWORD *)&v89 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = *(_QWORD *)a1;
      *(_QWORD *)&v96 = *(_QWORD *)(a1 + 8);
      v71 = v96;
      LODWORD(p_p) = 2;
      (*(void (**)(uint64_t, unint64_t *))(v70 + 104))(a1, &p_p);
      if (v71 < 1)
      {
        p_p = (unint64_t)&__p;
        sub_20FE13EEC((_BYTE *)a1, (_BYTE **)&p_p);
        sub_20FE13D80(__p.__r_.__value_.__s.__data_[0], (uint64_t)&__p, a1);
      }
      else
      {
        sub_20FE77900((int *)&v96, (_BYTE *)a1, &__p);
      }
      if (__p.__r_.__value_.__r.__words[2])
      {
        v94 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      return;
    case 1:
      sub_20EA5E5C4(*(_QWORD *)(a2 + 8), &__p);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
      if ((_BYTE)v94 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      v19 = *(const __CFBoolean **)(a2 + 8);
      if (v19 && (v20 = CFBooleanGetTypeID(), CFGetTypeID(v19) == v20))
      {
        v21 = CFBooleanGetValue(v19) != 0;
        v22 = 1;
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = v21 | (v22 << 8);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 32))(a1, &__p);
      return;
    case 3:
      v23 = *(const void **)(a2 + 8);
      if (v23 && (v24 = CFArrayGetTypeID(), CFGetTypeID(v23) == v24))
      {
        sub_20E8EAFFC(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
        }
        v30 = (const __CFArray *)theArray;
      }
      else
      {
        v30 = 0;
        theArray = 0uLL;
      }
      memset(&__p, 0, sizeof(__p));
      Count = CFArrayGetCount(v30);
      sub_20FE73E28(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray, i);
          sub_20E8A9534(&v96, ValueAtIndex);
          v88 = v96;
          if (*((_QWORD *)&v96 + 1))
          {
            v44 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            v46 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
            if (*((_QWORD *)&v96 + 1))
            {
              v47 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
          }
          sub_2100D6EC0((uint64_t)&p_p, (uint64_t)&v88);
          v49 = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v50 = sub_20FE7430C(&__p.__r_.__value_.__l.__data_, (uint64_t)&p_p);
            v51 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
            if (*((_QWORD *)&v92 + 1))
            {
              v52 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          else
          {
            *(_WORD *)__p.__r_.__value_.__l.__size_ = p_p;
            *(_OWORD *)(v49 + 8) = v92;
            v92 = 0uLL;
            __p.__r_.__value_.__l.__size_ = v49 + 24;
          }
          v54 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
          if (*((_QWORD *)&v88 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
      }
      p_p = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &p_p);
      v57 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        v58 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          v59 = *(_DWORD *)(a1 + 8);
          LODWORD(v96) = 2;
          (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 104))(a1, &v96);
          v60 = v96;
          if (v59 < 1)
          {
            sub_20FE76CBC(a1, v57, v96);
          }
          else
          {
            if (v59 == 2)
            {
              LODWORD(v96) = 2;
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 104))(a1, &v96);
            }
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
            sub_20FE76CBC(a1, v57, v60);
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          }
          v57 += 24;
          v58 -= 24;
        }
        while (v58);
        v57 = __p.__r_.__value_.__r.__words[0];
      }
      if (v57)
      {
        v72 = __p.__r_.__value_.__l.__size_;
        v73 = (void *)v57;
        if (__p.__r_.__value_.__l.__size_ != v57)
        {
          do
          {
            v74 = *(std::__shared_weak_count **)(v72 - 8);
            if (v74)
            {
              p_shared_owners = (unint64_t *)&v74->__shared_owners_;
              do
                v76 = __ldaxr(p_shared_owners);
              while (__stlxr(v76 - 1, p_shared_owners));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v72 -= 24;
          }
          while (v72 != v57);
          v73 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v57;
        operator delete(v73);
      }
      v77 = (std::__shared_weak_count *)*((_QWORD *)&theArray + 1);
      if (!*((_QWORD *)&theArray + 1))
        return;
      v78 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      break;
    case 4:
      v11 = *(const void **)(a2 + 8);
      if (v11 && (v12 = CFDictionaryGetTypeID(), CFGetTypeID(v11) == v12))
      {
        sub_20E9DA754(&__p, *(CFTypeRef *)(a2 + 8));
        theArray = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v13 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          v15 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v16 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        v18 = (const void *)theArray;
      }
      else
      {
        v18 = 0;
        theArray = 0uLL;
      }
      sub_20E9DA754(&__p, v18);
      v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        v34 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v35 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        do
          v37 = __ldxr(v32);
        while (__stxr(v37 + 1, v32));
        v96 = v31;
        do
          v38 = __ldxr(v32);
        while (__stxr(v38 + 1, v32));
        do
          v39 = __ldaxr(v32);
        while (__stlxr(v39 - 1, v32));
        if (!v39)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
        }
        do
          v40 = __ldaxr(v32);
        while (__stlxr(v40 - 1, v32));
        if (!v40)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
        }
      }
      else
      {
        v96 = __p.__r_.__value_.__r.__words[0];
      }
      sub_2100D78DC(&p_p, (uint64_t)&v96);
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
      if (*((_QWORD *)&v96 + 1))
      {
        v81 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      if (*((_QWORD *)&theArray + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&theArray + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&theArray + 1) + 16))(*((_QWORD *)&theArray + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theArray + 1));
        }
      }
      v85 = *(_DWORD *)(a1 + 8);
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 104))(a1, &__p);
      data_low = LODWORD(__p.__r_.__value_.__l.__data_);
      if (v85 < 1)
      {
        sub_20FE769E0(a1, &p_p, LODWORD(__p.__r_.__value_.__l.__data_));
      }
      else
      {
        if (v85 == 2)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 2;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 104))(a1, &__p);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        sub_20FE769E0(a1, &p_p, data_low);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      }
      v77 = (std::__shared_weak_count *)v92;
      if (!(_QWORD)v92)
        return;
      v87 = (unint64_t *)(v92 + 8);
      do
        v79 = __ldaxr(v87);
      while (__stlxr(v79 - 1, v87));
      break;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  if (!v79)
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
}

void sub_20FE77680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7769C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_20E86665C(v6 - 64);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE776B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE776CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE77774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  sub_20E8C2824((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20EF76610((void **)va3);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20FE777A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_20EF76610(va1);
  sub_20E86665C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20FE777C8(_BYTE *a1, unsigned __int16 **a2)
{
  unsigned __int16 *v3;
  void *__p[2];
  char v5;
  _WORD v6[12];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20FE73F48((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20E877AB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _WORD *))off_24CA08168[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _WORD *))off_24CA08150[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _WORD *))(*(_QWORD *)a1 + 96))(a1, v6);
  }
}

void sub_20FE778BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE778D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE778EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE77900(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v5;
  int v8;
  _BYTE *v9;

  v5 = *a1;
  if (*a1 == 2)
  {
    v8 = 2;
    (*(void (**)(_BYTE *, int *))(*(_QWORD *)a2 + 104))(a2, &v8);
    v5 = *a1;
  }
  if (v5 < 1)
  {
    v9 = a3;
    sub_20FE13EEC(a2, &v9);
    return sub_20FE13D80(*a3, (uint64_t)a3, (uint64_t)a2);
  }
  else
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    v9 = a3;
    sub_20FE13EEC(a2, &v9);
    sub_20FE13D80(*a3, (uint64_t)a3, (uint64_t)a2);
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
  }
}

uint64_t sub_20FE779D8(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF7D8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DB048(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20FE77AD4((uint64_t)&v11, a1, a2, v6);
  else
    sub_20FE77BD8(a1, a2, 2u);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20FE77AD4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_21009B324(&v17);
  sub_20FE78134(a2, &v17, a4);
  v8 = v17;
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)a3[1];
  *a3 = v8;
  a3[1] = (uint64_t)v7;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20FE77BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE77BD8(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void ***v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  void ***v20;
  void **v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_20EA65708(&v20, &v22);
    v19 = v22;
    sub_20E866BE0((uint64_t)&v20, (char *)v21[0]);
    sub_20FE77E80(a1, (uint64_t)&v19);
    sub_20FE78020((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20EB08AD0((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (void **)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20EB07D94(v21, v8);
    v10 = operator new();
    sub_21009A830(v10, (uint64_t *)&v22);
    v11 = (_QWORD *)operator new();
    *v11 = &off_24CA15F60;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = (uint64_t)v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (void ***)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20EB07D94(v15 + 1, *(unsigned __int8 *)v15);
      MEMORY[0x212BC6398](v15, 0x1022C40B06DCE69);
    }
  }
}

void sub_20FE77DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE77E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t **v7;
  va_list va;

  va_start(va, a7);
  sub_21009B9DC(v7);
  MEMORY[0x212BC6398](v7, 0x10E2C40590DAB7CLL);
  sub_2101F8784((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20FE77E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2101F8784((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20FE77E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE77E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2101F8784((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20FE77E80(uint64_t a1, uint64_t a2)
{
  int v4;
  void ***v5;
  unsigned __int8 *v6;
  int v7;
  void **v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void ***v16;
  void ***v17;
  void ***v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dictionary";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (void ***)operator new();
  *v5 = 0;
  v5[1] = 0;
  v18 = v5;
  v6 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20EB08AD0((uint64_t)&v19, v6);
  v7 = *(unsigned __int8 *)v5;
  *(_BYTE *)v5 = v19;
  LOBYTE(v19) = v7;
  v8 = v5[1];
  v5[1] = (void **)*((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = v8;
  sub_20EB07D94((void ***)&v19 + 1, v7);
  v17 = v5;
  sub_2100D88B8((uint64_t *)&v17, &v19);
  v9 = v19;
  v19 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v18;
  if (v18)
  {
    sub_20EB07D94(v18 + 1, *(unsigned __int8 *)v18);
    MEMORY[0x212BC6398](v16, 0x1022C40B06DCE69);
  }
}

void sub_20FE77FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2101F8784((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20FE7800C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2101F8784((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20FE78020(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  sub_20FDD58F4(&v13, a2);
  sub_21009B484((uint64_t *)&v15, (uint64_t)&v13, 1);
  v3 = v15;
  v15 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20FE78120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE78134(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void ***v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  void ***v20;
  void **v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_20EA65708(&v20, &v22);
    v19 = v22;
    sub_20E866BE0((uint64_t)&v20, (char *)v21[0]);
    sub_20FE77E80(a1, (uint64_t)&v19);
    sub_20FE783DC((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_2101FFA90((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20EB08AD0((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (void **)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20EB07D94(v21, v8);
    v10 = operator new();
    sub_21009A830(v10, (uint64_t *)&v22);
    v11 = (_QWORD *)operator new();
    *v11 = &off_24CA15F60;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = (uint64_t)v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (void ***)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20EB07D94(v15 + 1, *(unsigned __int8 *)v15);
      MEMORY[0x212BC6398](v15, 0x1022C40B06DCE69);
    }
  }
}

void sub_20FE7834C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE78364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t **v7;
  va_list va;

  va_start(va, a7);
  sub_21009B9DC(v7);
  MEMORY[0x212BC6398](v7, 0x10E2C40590DAB7CLL);
  sub_2101F8784((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20FE783A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2101F8784((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20FE783B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE783C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2101F8784((void ****)va);
  _Unwind_Resume(a1);
}

void sub_20FE783DC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  sub_20FDD58F4(&v13, a2);
  sub_21009B484((uint64_t *)&v15, (uint64_t)&v13, 1);
  v3 = v15;
  v15 = 0uLL;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20FE784DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE784F0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20E9EDADC(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_20FE786E0((uint64_t)&v8, a1, a2);
    return a1;
  }
  else
  {
    sub_20E90A71C(a1 + 2);
    sub_20FE785C8(a1, (uint64_t)a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

void sub_20FE785C8(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20EA65708(&v8, &v10);
  v7 = v10;
  sub_20E866BE0((uint64_t)&v8, v9[0]);
  sub_20FE787E4(a1, (uint64_t)&v7);
  sub_20FE78020(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20FE78684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE7869C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE786E0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_21009B324(&v15);
  sub_20FE7B2A4(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = (uint64_t)v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE787D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE787E4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  __int128 v32;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  unsigned int v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_20EAC02F0((uint64_t)a1, (uint64_t)v33);
  *(_QWORD *)&v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  sub_20E9EDE6C(a1[6], &v32);
  v4 = (char *)v35;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v6 = v32 - v5;
  if ((unint64_t)v32 <= v5)
  {
    if ((unint64_t)v32 >= v5)
    {
      v7 = (char *)__p[1];
      v8 = v35 - (unint64_t)__p[1];
      if ((void *)v35 == __p[1])
        goto LABEL_22;
    }
    else
    {
      v9 = (char *)__p[1] + 24 * v32;
      while (v4 != v9)
      {
        v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(p_shared_owners);
          while (__stlxr(v12 - 1, p_shared_owners));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v4 -= 24;
      }
      *(_QWORD *)&v35 = v9;
      v7 = (char *)__p[1];
      v8 = v9 - (char *)__p[1];
      if (v9 == __p[1])
        goto LABEL_22;
    }
  }
  else
  {
    sub_20FE78D44((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v35 - (unint64_t)__p[1];
    if ((void *)v35 == __p[1])
      goto LABEL_22;
  }
  v13 = 24 * (v8 / 24);
  do
  {
    while (1)
    {
      v36 = 2;
      sub_20E9EDADC(a1[6], &v36);
      if (v36 > 1)
        break;
      sub_20FE78F1C((uint64_t)&v36, a1, (uint64_t)v7);
      v7 += 24;
      v13 -= 24;
      if (!v13)
        goto LABEL_22;
    }
    sub_20E90A71C(a1 + 2);
    sub_20FE790D4(a1, (uint64_t)v7);
    v14 = a1[4];
    v15 = *(_QWORD *)(v14 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v14 - 8);
    if (v15)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v15);
    a1[4] -= 16;
    v7 += 24;
    v13 -= 24;
  }
  while (v13);
LABEL_22:
  sub_2100D8048((uint64_t *)v33, (void ***)&v32);
  v16 = v32;
  v32 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_20FE78B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE78B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE78B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE78B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE78B6C(_QWORD *a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char v20;

  v18 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(a1[6], &v18);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v18 - v5;
  if (v18 <= v5)
  {
    if (v18 >= v5)
    {
      v7 = *a2;
      v10 = v4 - v7;
      if (v4 == v7)
        return;
    }
    else
    {
      v11 = (uint64_t)&(*a2)[24 * v18];
      while (v4 != (char *)v11)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v4 -= 24;
      }
      a2[1] = (char *)v11;
      v7 = *a2;
      v10 = v11 - (_QWORD)v7;
      if ((char *)v11 == v7)
        return;
    }
  }
  else
  {
    sub_20FE78D44(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
  }
  v15 = 24 * (v10 / 24);
  do
  {
    while (1)
    {
      v19 = 2;
      sub_20E9EDADC(a1[6], &v19);
      if (v19 > 1)
        break;
      sub_20FE78F1C((uint64_t)&v20, a1, (uint64_t)v7);
      v7 += 24;
      v15 -= 24;
      if (!v15)
        return;
    }
    sub_20E90A71C(a1 + 2);
    sub_20FE790D4(a1, v7, 2);
    v16 = a1[4];
    v17 = *(_QWORD *)(v16 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v16 - 8);
    if (v17)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v17);
    a1[4] -= 16;
    v7 += 24;
    v15 -= 24;
  }
  while (v15);
}

void sub_20FE78D44(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  __int16 v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[24 * a2];
      v12 = v4 + 8;
      v13 = 24 * a2;
      do
      {
        *v12 = 0;
        v12[1] = 0;
        v12 += 3;
        v13 -= 24;
      }
      while (v13);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
    sub_20FDFA718();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v14 = &v10[24 * v6];
  v15 = &v10[24 * v9];
  v16 = 24 * a2;
  v17 = &v14[24 * a2];
  v18 = v14 + 8;
  do
  {
    *v18 = 0;
    v18[1] = 0;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  v19 = *a1;
  v20 = a1[1];
  if (v20 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v20)
      return;
LABEL_34:
    operator delete(v20);
    return;
  }
  do
  {
    v21 = *((_WORD *)v20 - 12);
    v20 -= 24;
    *((_WORD *)v14 - 12) = v21;
    v14 -= 24;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v20 + 8);
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
  }
  while (v20 != v19);
  v22 = *a1;
  v20 = a1[1];
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v15;
  if (v20 != v22)
  {
    do
    {
      v23 = (std::__shared_weak_count *)*((_QWORD *)v20 - 1);
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v20 -= 24;
    }
    while (v20 != v22);
    v20 = v22;
  }
  if (v20)
    goto LABEL_34;
}

void sub_20FE78F1C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_20FE7A8D8(a2, (uint64_t)&v19);
  v4 = v19;
  sub_20EA6144C(&v22, (uint64_t)&v20);
  sub_20EA6144C(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20FE79090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE790AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE790C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE790D4(_QWORD *a1, uint64_t a2)
{
  int data_low;
  _DWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string::size_type v46;
  std::string::size_type v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  char *v65;
  char *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string v71;
  void *v72[2];
  uint64_t v73;
  __int128 v74;
  std::string v75;
  _DWORD *v76;
  _DWORD *v77;

  LOWORD(v75.__r_.__value_.__l.__data_) = 0;
  sub_20E9ED948(a1[6], &v75);
  data_low = LOWORD(v75.__r_.__value_.__l.__data_);
  *(_WORD *)a2 = v75.__r_.__value_.__l.__data_;
  switch(data_low)
  {
    case 0:
      v75.__r_.__value_.__s.__data_[0] = 7;
      v75.__r_.__value_.__s.__data_[8] = 7;
      v5 = operator new(4uLL);
      v75.__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
      *v5 = 0;
      v76 = v5 + 1;
      v77 = v5 + 1;
      LODWORD(v72[0]) = 2;
      sub_20E9EDADC(a1[6], v72);
      sub_20FE14DFC((uint64_t)v72, a1, (unsigned __int8 *)&v75, v72[0]);
      sub_20EA67BE0((uint64_t)v72, (uint64_t)&v75.__r_.__value_.__l.__size_);
      v74 = *(_OWORD *)v72;
      sub_20FE7999C(&v71, (uint64_t)&v74);
      v6 = *(_OWORD *)&v71.__r_.__value_.__l.__data_;
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0uLL;
      v7 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      size = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_)
      {
        v11 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v75.__r_.__value_.__r.__words[2])
      {
        v76 = (_DWORD *)v75.__r_.__value_.__r.__words[2];
        operator delete((void *)v75.__r_.__value_.__r.__words[2]);
      }
      return;
    case 1:
      memset(&v75, 0, sizeof(v75));
      sub_20E9EE280(a1[6], &v75);
      sub_20EA5E4B8((uint64_t)&v75, (CFStringRef *)&v71);
      sub_20FE79AAC(v72, (uint64_t)&v71);
      v16 = *(_OWORD *)v72;
      v72[0] = 0;
      v72[1] = 0;
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)v72[1];
      if (v72[1])
      {
        v21 = (unint64_t *)((char *)v72[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
      if (v71.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      return;
    case 2:
      v71.__r_.__value_.__s.__data_[0] = 0;
      sub_20E9EE1A4(a1[6], &v71);
      sub_20EA5E3C8(&v71, (std::__shared_weak_count_vtbl **)v72);
      sub_20FE79BBC(&v75, (uint64_t)v72);
      v26 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = 0uLL;
      v27 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
      if (v75.__r_.__value_.__l.__size_)
      {
        v31 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)v72[1];
      if (!v72[1])
        return;
      v34 = (unint64_t *)((char *)v72[1] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      break;
    case 3:
      v72[0] = 0;
      v72[1] = 0;
      v73 = 0;
      sub_20FE78B6C(a1, (char **)v72);
      memset(&v75, 0, sizeof(v75));
      sub_20EA647CC((uint64_t)&v75, 0xAAAAAAAAAAAAAAABLL * (((char *)v72[1] - (char *)v72[0]) >> 3));
      sub_20FE79EEC((uint64_t)v72[0], (uint64_t)v72[1], (uint64_t)&v75);
      v71 = v75;
      sub_20FE7A054((uint64_t *)&v71, (CFMutableArrayRef *)&v74);
      sub_20FE79CCC(&v75, (uint64_t)&v74);
      v36 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = 0uLL;
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
      if (v75.__r_.__value_.__l.__size_)
      {
        v41 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = v71.__r_.__value_.__r.__words[0];
      if (v71.__r_.__value_.__r.__words[0])
      {
        v47 = v71.__r_.__value_.__l.__size_;
        v48 = (void *)v71.__r_.__value_.__r.__words[0];
        if (v71.__r_.__value_.__l.__size_ != v71.__r_.__value_.__r.__words[0])
        {
          do
          {
            v49 = *(std::__shared_weak_count **)(v47 - 8);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 16;
          }
          while (v47 != v46);
          v48 = (void *)v71.__r_.__value_.__r.__words[0];
        }
        v71.__r_.__value_.__l.__size_ = v46;
        operator delete(v48);
      }
      v65 = (char *)v72[0];
      if (v72[0])
      {
        v66 = (char *)v72[1];
        v67 = v72[0];
        if (v72[1] != v72[0])
        {
          do
          {
            v68 = (std::__shared_weak_count *)*((_QWORD *)v66 - 1);
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            v66 -= 24;
          }
          while (v66 != v65);
          v67 = v72[0];
        }
        v72[1] = v65;
        operator delete(v67);
      }
      return;
    case 4:
      *(_OWORD *)&v75.__r_.__value_.__r.__words[1] = 0uLL;
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75.__r_.__value_.__l.__size_;
      sub_20EA65708(&v75, v72);
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)v72;
      sub_20E866BE0((uint64_t)&v75, (char *)v75.__r_.__value_.__l.__size_);
      LODWORD(v75.__r_.__value_.__l.__data_) = 2;
      sub_20E9EDADC(a1[6], &v75);
      if (LODWORD(v75.__r_.__value_.__l.__data_) <= 1)
      {
        sub_20FE7A2E8((uint64_t)&v75, (uint64_t)a1, (uint64_t)&v71);
      }
      else
      {
        sub_20E90A71C(a1 + 2);
        sub_20FE787E4(a1, &v71, 2);
        v52 = a1[4];
        v53 = *(_QWORD *)(v52 - 16)
            - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2)
            + *(_QWORD *)(v52 - 8);
        if (v53)
          (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v53);
        a1[4] -= 16;
      }
      sub_20FDD58F4(v72, (uint64_t)&v71);
      sub_20FE79DDC(&v75, (uint64_t)v72);
      v54 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = 0uLL;
      v55 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v54;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
      if (v75.__r_.__value_.__l.__size_)
      {
        v59 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)v72[1];
      if (v72[1])
      {
        v62 = (unint64_t *)((char *)v72[1] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v33 = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
      if (!v71.__r_.__value_.__l.__size_)
        return;
      v64 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
      do
        v35 = __ldaxr(v64);
      while (__stlxr(v35 - 1, v64));
      break;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_20FE7986C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20E86665C((uint64_t)&a13);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE79888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7989C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
  sub_20E866BE0((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

void sub_20FE798B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20E86665C((uint64_t)&a17);
  sub_20E8C3144(&a9);
  sub_20EF76610(&a13);
  _Unwind_Resume(a1);
}

void sub_20FE798E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20E8C3144((void **)va1);
  sub_20EF76610((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE79900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EF76610((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE79914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE79928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_20E86665C((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE7999C(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8A9534(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20FE79A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE79AAC(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8A9534(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20FE79BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE79BBC(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8A9534(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20FE79CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE79CCC(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8A9534(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20FE79DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE79DDC(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = *(const void **)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v17 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_20E8A9534(&v18, v4);
  v8 = v19;
  *a1 = v18;
  a1[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v11 = v19;
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (!v17)
    return a1;
  v14 = (unint64_t *)&v17->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
    return a1;
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  return a1;
}

void sub_20FE79ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE79EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20EA6144C(&v15, i + 8);
      sub_20EA6144C(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20EA648C4((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20FE7A024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7A040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7A054(uint64_t *a1@<X0>, CFMutableArrayRef *a2@<X8>)
{
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v5;
  CFMutableArrayRef v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  const void *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFMutableArrayRef theArray[2];

  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v6 = theArray[0];
  v5 = (std::__shared_weak_count *)theArray[1];
  if (!theArray[1])
    goto LABEL_6;
  v7 = (unint64_t *)((char *)theArray[1] + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      goto LABEL_30;
  }
  else
  {
LABEL_6:
    if (!v6)
      goto LABEL_30;
  }
  v10 = *a1;
  v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      v13 = *(const void **)v10;
      v12 = *(std::__shared_weak_count **)(v10 + 8);
      if (!v12)
        goto LABEL_18;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (v13)
        {
LABEL_19:
          CFArrayAppendValue(theArray[0], v13);
          if (v12)
            goto LABEL_23;
          goto LABEL_27;
        }
      }
      else
      {
LABEL_18:
        if (v13)
          goto LABEL_19;
      }
      *a2 = 0;
      a2[1] = 0;
      if (v12)
      {
LABEL_23:
        v20 = (unint64_t *)&v12->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
LABEL_27:
      if (!v13)
        goto LABEL_31;
      v10 += 16;
    }
    while (v10 != v11);
  }
  *(_OWORD *)a2 = *(_OWORD *)theArray;
  a2 = theArray;
LABEL_30:
  *a2 = 0;
  a2[1] = 0;
LABEL_31:
  v22 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v23 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_20FE7A270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (a10)
  {
    v14 = (unint64_t *)&a10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE7A2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_20EA65708(&v16, &v18);
  v15 = v18;
  sub_20E866BE0((uint64_t)&v16, *((char **)&v16 + 1));
  sub_20FE7A470(a2, (uint64_t)&v15);
  sub_2100D78DC(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE7A430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7A444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7A458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_20E866BE0((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20FE7A470(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  unsigned int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_20EAC02F0(a1, (uint64_t)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_20FE78D44((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v34);
      sub_20FE7A8D8(a1, v7, v34);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_2100D7410((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_20FE7A728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7A73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7A750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7A764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7A778(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), &v16);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v16 - v5;
  if (v16 > v5)
  {
    sub_20FE78D44(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v16 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v16];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v17 = 1;
      sub_20E9EDADC(*(_QWORD *)(a1 + 48), &v17);
      sub_20FE7A8D8(a1, v7, v17);
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_20FE7A8D8(_QWORD *a1, uint64_t a2)
{
  int data_low;
  _DWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::string::size_type v46;
  std::string::size_type v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  char *v63;
  char *v64;
  void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string v69;
  void *v70[2];
  uint64_t v71;
  __int128 v72;
  std::string v73;
  _DWORD *v74;
  _DWORD *v75;

  LOWORD(v73.__r_.__value_.__l.__data_) = 0;
  sub_20E9ED948(a1[6], &v73);
  data_low = LOWORD(v73.__r_.__value_.__l.__data_);
  *(_WORD *)a2 = v73.__r_.__value_.__l.__data_;
  switch(data_low)
  {
    case 0:
      v73.__r_.__value_.__s.__data_[0] = 7;
      v73.__r_.__value_.__s.__data_[8] = 7;
      v5 = operator new(4uLL);
      v73.__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
      *v5 = 0;
      v74 = v5 + 1;
      v75 = v5 + 1;
      LODWORD(v70[0]) = 2;
      sub_20E9EDADC(a1[6], v70);
      sub_20FE14DFC((uint64_t)v70, a1, (unsigned __int8 *)&v73, v70[0]);
      sub_20EA67BE0((uint64_t)v70, (uint64_t)&v73.__r_.__value_.__l.__size_);
      v72 = *(_OWORD *)v70;
      sub_20FE7999C(&v69, (uint64_t)&v72);
      v6 = *(_OWORD *)&v69.__r_.__value_.__l.__data_;
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = 0uLL;
      v7 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v6;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      size = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
      if (v69.__r_.__value_.__l.__size_)
      {
        v11 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v73.__r_.__value_.__r.__words[2])
      {
        v74 = (_DWORD *)v73.__r_.__value_.__r.__words[2];
        operator delete((void *)v73.__r_.__value_.__r.__words[2]);
      }
      return;
    case 1:
      memset(&v73, 0, sizeof(v73));
      sub_20E9EE280(a1[6], &v73);
      sub_20EA5E4B8((uint64_t)&v73, (CFStringRef *)&v69);
      sub_20FE79AAC(v70, (uint64_t)&v69);
      v16 = *(_OWORD *)v70;
      v70[0] = 0;
      v70[1] = 0;
      v17 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)v70[1];
      if (v70[1])
      {
        v21 = (unint64_t *)((char *)v70[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
      if (v69.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      return;
    case 2:
      v69.__r_.__value_.__s.__data_[0] = 0;
      sub_20E9EE1A4(a1[6], &v69);
      sub_20EA5E3C8(&v69, (std::__shared_weak_count_vtbl **)v70);
      sub_20FE79BBC(&v73, (uint64_t)v70);
      v26 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = 0uLL;
      v27 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      if (v73.__r_.__value_.__l.__size_)
      {
        v31 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)v70[1];
      if (!v70[1])
        return;
      v34 = (unint64_t *)((char *)v70[1] + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      break;
    case 3:
      v70[0] = 0;
      v70[1] = 0;
      v71 = 0;
      sub_20FE7A778((uint64_t)a1, (char **)v70);
      memset(&v73, 0, sizeof(v73));
      sub_20EA647CC((uint64_t)&v73, 0xAAAAAAAAAAAAAAABLL * (((char *)v70[1] - (char *)v70[0]) >> 3));
      sub_20FE7B13C((uint64_t)v70[0], (uint64_t)v70[1], (uint64_t)&v73);
      v69 = v73;
      sub_20FE7A054((uint64_t *)&v69, (CFMutableArrayRef *)&v72);
      sub_20FE79CCC(&v73, (uint64_t)&v72);
      v36 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = 0uLL;
      v37 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      if (v73.__r_.__value_.__l.__size_)
      {
        v41 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = v69.__r_.__value_.__r.__words[0];
      if (v69.__r_.__value_.__r.__words[0])
      {
        v47 = v69.__r_.__value_.__l.__size_;
        v48 = (void *)v69.__r_.__value_.__r.__words[0];
        if (v69.__r_.__value_.__l.__size_ != v69.__r_.__value_.__r.__words[0])
        {
          do
          {
            v49 = *(std::__shared_weak_count **)(v47 - 8);
            if (v49)
            {
              v50 = (unint64_t *)&v49->__shared_owners_;
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            v47 -= 16;
          }
          while (v47 != v46);
          v48 = (void *)v69.__r_.__value_.__r.__words[0];
        }
        v69.__r_.__value_.__l.__size_ = v46;
        operator delete(v48);
      }
      v63 = (char *)v70[0];
      if (v70[0])
      {
        v64 = (char *)v70[1];
        v65 = v70[0];
        if (v70[1] != v70[0])
        {
          do
          {
            v66 = (std::__shared_weak_count *)*((_QWORD *)v64 - 1);
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            v64 -= 24;
          }
          while (v64 != v63);
          v65 = v70[0];
        }
        v70[1] = v63;
        operator delete(v65);
      }
      return;
    case 4:
      *(_OWORD *)&v73.__r_.__value_.__r.__words[1] = 0uLL;
      v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73.__r_.__value_.__l.__size_;
      sub_20EA65708(&v73, v70);
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)v70;
      sub_20E866BE0((uint64_t)&v73, (char *)v73.__r_.__value_.__l.__size_);
      LODWORD(v73.__r_.__value_.__l.__data_) = 1;
      sub_20E9EDADC(a1[6], &v73);
      sub_20FE7A470((uint64_t)a1, (uint64_t)&v69);
      sub_20FDD58F4(v70, (uint64_t)&v69);
      sub_20FE79DDC(&v73, (uint64_t)v70);
      v52 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = 0uLL;
      v53 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v52;
      if (v53)
      {
        v54 = (unint64_t *)&v53->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = (std::__shared_weak_count *)v73.__r_.__value_.__l.__size_;
      if (v73.__r_.__value_.__l.__size_)
      {
        v57 = (unint64_t *)(v73.__r_.__value_.__l.__size_ + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = (std::__shared_weak_count *)v70[1];
      if (v70[1])
      {
        v60 = (unint64_t *)((char *)v70[1] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v33 = (std::__shared_weak_count *)v69.__r_.__value_.__l.__size_;
      if (!v69.__r_.__value_.__l.__size_)
        return;
      v62 = (unint64_t *)(v69.__r_.__value_.__l.__size_ + 8);
      do
        v35 = __ldaxr(v62);
      while (__stlxr(v35 - 1, v62));
      break;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_20FE7B004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20E86665C((uint64_t)&a13);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7B020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7B034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
  sub_20E866BE0((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

void sub_20FE7B04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20E86665C((uint64_t)&a17);
  sub_20E8C3144(&a9);
  sub_20EF76610(&a13);
  _Unwind_Resume(a1);
}

void sub_20FE7B078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20E8C3144((void **)va1);
  sub_20EF76610((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7B098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20EF76610((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7B0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7B0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_20E86665C((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20FE7B13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20EA6144C(&v15, i + 8);
      sub_20EA6144C(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20EA648C4((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20FE7B274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7B290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7B2A4(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20EA65708(&v8, &v10);
  v7 = v10;
  sub_20E866BE0((uint64_t)&v8, v9[0]);
  sub_20FE787E4(a1, (uint64_t)&v7);
  sub_20FE783DC(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20FE7B360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE7B378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE7B3BC(uint64_t a1, uint64_t *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF2E8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DA8B0(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20FE7B4B8((uint64_t)&v11, a1, a2, v6);
  else
    sub_20FE7B5BC(a1, a2, 2u);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20FE7B4B8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  sub_21009B324(&v17);
  sub_20FE7BA04(a2, &v17, a4);
  v8 = v17;
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)a3[1];
  *a3 = v8;
  a3[1] = (uint64_t)v7;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20FE7B5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7B5BC(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  char **v20;
  char *v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_20EA65708(&v20, &v22);
    v19 = v22;
    sub_20E866BE0((uint64_t)&v20, v21[0]);
    sub_20FE7B864(a1, (uint64_t)&v19);
    sub_20FE78020((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20EB98380((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (char *)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20EB911C0((uint64_t *)v21, v8);
    v10 = operator new();
    sub_21009A9B4(v10, (uint64_t *)&v22);
    v11 = (_QWORD *)operator new();
    *v11 = &off_24CA15F60;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = (uint64_t)v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (uint64_t *)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20EB911C0(v15 + 1, *(unsigned __int8 *)v15);
      MEMORY[0x212BC6398](v15, 0x1022C40B06DCE69);
    }
  }
}

void sub_20FE7B7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE7B7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t **v7;
  va_list va;

  va_start(va, a7);
  sub_21009B9DC(v7);
  MEMORY[0x212BC6398](v7, 0x10E2C40590DAB7CLL);
  sub_2101F8734((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7B828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2101F8734((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7B83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7B850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2101F8734((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7B864(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "dictionary";
  *(_QWORD *)(a1 + 96) = 10;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (uint64_t *)operator new();
  *v5 = 0;
  v5[1] = 0;
  v18 = v5;
  v6 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20EB98380((uint64_t)&v19, v6);
  v7 = *(unsigned __int8 *)v5;
  *(_BYTE *)v5 = v19;
  LOBYTE(v19) = v7;
  v8 = v5[1];
  v5[1] = *((_QWORD *)&v19 + 1);
  *((_QWORD *)&v19 + 1) = v8;
  sub_20EB911C0((uint64_t *)&v19 + 1, v7);
  v17 = v5;
  sub_2100D87C0((uint64_t *)&v17, &v19);
  v9 = v19;
  v19 = 0uLL;
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v18;
  if (v18)
  {
    sub_20EB911C0(v18 + 1, *(unsigned __int8 *)v18);
    MEMORY[0x212BC6398](v16, 0x1022C40B06DCE69);
  }
}

void sub_20FE7B9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2101F8734((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7B9F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2101F8734((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7BA04(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  char **v20;
  char *v21[2];
  __int128 v22;

  if (a3 > 2)
  {
    v21[0] = 0;
    v21[1] = 0;
    v20 = v21;
    sub_20EA65708(&v20, &v22);
    v19 = v22;
    sub_20E866BE0((uint64_t)&v20, v21[0]);
    sub_20FE7B864(a1, (uint64_t)&v19);
    sub_20FE783DC((uint64_t)a2, (uint64_t)&v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "dictionary";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (_QWORD *)operator new();
    *v6 = 0;
    v6[1] = 0;
    *(_QWORD *)&v22 = v6;
    v7 = (unsigned __int8 *)sub_2101FF5A0((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    sub_20EB98380((uint64_t)&v20, v7);
    v8 = *(unsigned __int8 *)v6;
    *(_BYTE *)v6 = (_BYTE)v20;
    LOBYTE(v20) = v8;
    v9 = (char *)v6[1];
    v6[1] = v21[0];
    v21[0] = v9;
    sub_20EB911C0((uint64_t *)v21, v8);
    v10 = operator new();
    sub_21009A9B4(v10, (uint64_t *)&v22);
    v11 = (_QWORD *)operator new();
    *v11 = &off_24CA15F60;
    v11[1] = 0;
    v11[2] = 0;
    v11[3] = v10;
    v12 = (std::__shared_weak_count *)a2[1];
    *a2 = v10;
    a2[1] = (uint64_t)v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (uint64_t *)v22;
    *(_QWORD *)&v22 = 0;
    if (v15)
    {
      sub_20EB911C0(v15 + 1, *(unsigned __int8 *)v15);
      MEMORY[0x212BC6398](v15, 0x1022C40B06DCE69);
    }
  }
}

void sub_20FE7BC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE7BC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t **v7;
  va_list va;

  va_start(va, a7);
  sub_21009B9DC(v7);
  MEMORY[0x212BC6398](v7, 0x10E2C40590DAB7CLL);
  sub_2101F8734((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7BC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2101F8734((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7BC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7BC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2101F8734((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7BCAC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20EA65708(&v8, &v10);
  v7 = v10;
  sub_20E866BE0((uint64_t)&v8, v9[0]);
  sub_20FE7BEC8(a1, (uint64_t)&v7);
  sub_20FE78020(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20FE7BD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE7BD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE7BDC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_21009B324(&v15);
  sub_20FE7E390(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = (uint64_t)v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE7BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7BEC8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char v15;
  char v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void **v30;
  void **v31;
  void *v32;
  void *v33[2];
  void *v34[2];
  __int128 v35;
  unint64_t v36;
  void *__p[2];
  char v38;

  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_20FDF3DC4(a1, (char **)v33);
  v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)v34[1]) >> 3);
  sub_20E9E88B4(a1, &v36);
  v4 = (char *)v35;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)v34[1]) >> 3);
  v6 = v36 - v5;
  if (v36 > v5)
  {
    sub_20FE78D44((char **)&v34[1], v6);
    v7 = (char *)v34[1];
    v8 = (char *)v35;
    if ((void *)v35 != v34[1])
      goto LABEL_18;
    goto LABEL_44;
  }
  if (v36 < v5)
  {
    v8 = (char *)v34[1] + 24 * v36;
    while (v4 != v8)
    {
      v9 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v9->__on_zero_shared)(v9, v6);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v4 -= 24;
    }
    *(_QWORD *)&v35 = v8;
    v7 = (char *)v34[1];
    if (v8 == v34[1])
      goto LABEL_44;
LABEL_18:
    while (1)
    {
      LODWORD(__p[0]) = 2;
      sub_20E9E840C(a1, __p);
      v12 = __p[0];
      v13 = LODWORD(__p[0]) >= 2 ? 2 : LODWORD(__p[0]);
      if (v13 < 2)
        sub_20FE7C4C8((uint64_t)__p, a1, (uint64_t)v7);
      else
        sub_20FE7C680(a1, (uint64_t)v7);
      if (v12 >= 2 && *(_BYTE *)(a1 + 131) == 0)
        break;
LABEL_17:
      v7 += 24;
      if (v7 == v8)
        goto LABEL_44;
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_17;
      sub_20E9E9FEC(a1, (uint64_t)__p);
      if (v38 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_40:
          v16 = 0;
          if (v38 < 0)
            goto LABEL_43;
          goto LABEL_29;
        }
      }
      else if (v38 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_40;
      }
      v16 = 1;
      if (v38 < 0)
LABEL_43:
        operator delete(__p[0]);
LABEL_29:
      if (*(_BYTE *)(a1 + 131))
        v15 = 0;
      else
        v15 = v16;
      if ((v15 & 1) == 0)
        goto LABEL_17;
    }
  }
  v8 = (char *)v35;
  v7 = (char *)v34[1];
  if ((void *)v35 != v34[1])
    goto LABEL_18;
LABEL_44:
  sub_2100D8048((uint64_t *)v33, (void ***)__p);
  v17 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v18 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v22 = (unint64_t *)((char *)__p[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (char *)v34[1];
  if (v34[1])
  {
    v25 = (char *)v35;
    v26 = v34[1];
    if ((void *)v35 != v34[1])
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 24;
      }
      while (v25 != v24);
      v26 = v34[1];
    }
    *(_QWORD *)&v35 = v24;
    operator delete(v26);
  }
  v30 = (void **)v33[0];
  if (v33[0])
  {
    v31 = (void **)v33[1];
    v32 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v31 - 1) < 0)
          operator delete(*(v31 - 3));
        v31 -= 3;
      }
      while (v31 != v30);
      v32 = v33[0];
    }
    v33[1] = v30;
    operator delete(v32);
  }
}

void sub_20FE7C23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7C264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7C278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7C28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7C2A0(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v17;
  char v18;
  unint64_t v19;
  void *__p[2];
  char v21;

  v19 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20E9E88B4(a1, &v19);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v19 - v5;
  if (v19 > v5)
  {
    sub_20FE78D44(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = (uint64_t)v9[1];
    if ((char *)v8 != v7)
      goto LABEL_18;
    return;
  }
  if (v19 < v5)
  {
    v8 = (uint64_t)&(*a2)[24 * v19];
    while (v4 != (char *)v8)
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v4 -= 24;
    }
    a2[1] = (char *)v8;
    v7 = *a2;
    if ((char *)v8 == v7)
      return;
    while (1)
    {
LABEL_18:
      LODWORD(__p[0]) = 2;
      sub_20E9E840C(a1, __p);
      v13 = __p[0];
      if (LODWORD(__p[0]) >= 2)
        v14 = 2;
      else
        v14 = __p[0];
      if (v14 >= 2)
      {
        sub_20FE7C680(a1, v7, 2);
        if (v13 >= 2 && *(_BYTE *)(a1 + 131) == 0)
          goto LABEL_36;
        goto LABEL_17;
      }
      sub_20FE7C4C8((uint64_t)__p, a1, (uint64_t)v7);
      if (v13 >= 2 && *(_BYTE *)(a1 + 131) == 0)
        break;
LABEL_17:
      v7 += 24;
      if (v7 == (char *)v8)
        return;
    }
    while (1)
    {
LABEL_36:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_17;
      sub_20E9E9FEC(a1, (uint64_t)__p);
      if (v21 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_43:
          v18 = 0;
          if (v21 < 0)
            goto LABEL_46;
          goto LABEL_32;
        }
      }
      else if (v21 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_43;
      }
      v18 = 1;
      if (v21 < 0)
LABEL_46:
        operator delete(__p[0]);
LABEL_32:
      if (*(_BYTE *)(a1 + 131))
        v17 = 0;
      else
        v17 = v18;
      if ((v17 & 1) == 0)
        goto LABEL_17;
    }
  }
  v8 = (uint64_t)a2[1];
  v7 = *a2;
  if (v4 != v7)
    goto LABEL_18;
}

void sub_20FE7C4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_20FE7D878(a2, (uint64_t)&v19);
  v4 = v19;
  sub_20EA6144C(&v22, (uint64_t)&v20);
  sub_20EA6144C(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20FE7C63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7C658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7C66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7C680(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  char v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81[2];
  void *v82;
  __int128 v83;
  void *v84[2];
  void *__p;
  void *v86;
  _DWORD *v87;
  __int128 v88;
  void *v89;

  LOWORD(v84[0]) = 0;
  sub_20E9E7F64(a1, v84);
  v4 = LOWORD(v84[0]);
  *(_WORD *)a2 = v84[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v84[0]) = 7;
      LOBYTE(v84[1]) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v86 = v5 + 1;
      v87 = v5 + 1;
      LODWORD(v88) = 2;
      sub_20E9E840C(a1, &v88);
      v6 = v88;
      if (v88 >= 2)
        v7 = 2;
      else
        v7 = v88;
      if (v7 < 2)
      {
        sub_20FE163AC((uint64_t)&v88, a1, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v88) = 0;
        sub_20E9E7AC8(a1, &v88);
        LOBYTE(v84[0]) = v88;
        sub_20FE16530(v88, a1, (uint64_t)v84);
      }
      if (v6 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_75;
      while (2)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
        {
          sub_20E9E9FEC(a1, (uint64_t)&v88);
          if (SHIBYTE(v89) < 0)
          {
            if (*((_QWORD *)&v88 + 1) != 1 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)v88)
            {
LABEL_92:
              v57 = 1;
              if ((SHIBYTE(v89) & 0x80000000) == 0)
                goto LABEL_93;
              goto LABEL_105;
            }
          }
          else if (SHIBYTE(v89) != 1 || *(unsigned __int8 *)(a1 + 72) != v88)
          {
            goto LABEL_92;
          }
          v57 = 0;
          if ((SHIBYTE(v89) & 0x80000000) == 0)
          {
LABEL_93:
            if (*(_BYTE *)(a1 + 131))
              v58 = 0;
            else
              v58 = v57;
            if ((v58 & 1) == 0)
              break;
            continue;
          }
LABEL_105:
          operator delete((void *)v88);
          if (*(_BYTE *)(a1 + 131))
            v59 = 0;
          else
            v59 = v57;
          if ((v59 & 1) == 0)
            break;
          continue;
        }
        break;
      }
LABEL_75:
      sub_20EA67BE0((uint64_t)&v88, (uint64_t)&v84[1]);
      v83 = v88;
      sub_20FE7999C(v81, (uint64_t)&v83);
      v47 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v52 = (unint64_t *)((char *)v81[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (__p)
      {
        v86 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v88 = 0uLL;
      v89 = 0;
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      else
      {
        sub_20E9E9FEC(a1, (uint64_t)v84);
        v36 = *(_QWORD *)(a1 + 104);
        v88 = *(_OWORD *)v84;
        v89 = __p;
        *(_QWORD *)(a1 + 104) = v36 + 1;
      }
      sub_20EA5E4B8((uint64_t)&v88, (CFStringRef *)v81);
      sub_20FE79AAC(v84, (uint64_t)v81);
      v37 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v38 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v37;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v41 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v42 = (unint64_t *)((char *)v84[1] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v45 = (unint64_t *)((char *)v81[1] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (SHIBYTE(v89) < 0)
        operator delete((void *)v88);
      return;
    case 2:
      LOBYTE(v81[0]) = 0;
      sub_20E9E922C(a1, v81);
      sub_20EA5E3C8(v81, (std::__shared_weak_count_vtbl **)&v88);
      sub_20FE79BBC(v84, (uint64_t)&v88);
      v8 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v8;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v13 = (unint64_t *)((char *)v84[1] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
          goto LABEL_132;
      }
      return;
    case 3:
      v88 = 0uLL;
      v89 = 0;
      sub_20FE7C2A0(a1, (char **)&v88);
      v84[1] = 0;
      __p = 0;
      v84[0] = 0;
      sub_20EA647CC((uint64_t)v84, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v88 + 1) - v88) >> 3));
      sub_20FE7D124(v88, *((uint64_t *)&v88 + 1), (uint64_t)v84);
      *(_OWORD *)v81 = *(_OWORD *)v84;
      v82 = __p;
      sub_20FE7A054((uint64_t *)v81, (CFMutableArrayRef *)&v83);
      sub_20FE79CCC(v84, (uint64_t)&v83);
      v20 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v21 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v20;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v25 = (unint64_t *)((char *)v84[1] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (char *)v81[0];
      if (v81[0])
      {
        v31 = (char *)v81[1];
        v32 = v81[0];
        if (v81[1] != v81[0])
        {
          do
          {
            v33 = (std::__shared_weak_count *)*((_QWORD *)v31 - 1);
            if (v33)
            {
              v34 = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v31 -= 16;
          }
          while (v31 != v30);
          v32 = v81[0];
        }
        v81[1] = v30;
        operator delete(v32);
      }
      v75 = v88;
      if ((_QWORD)v88)
      {
        v76 = *((_QWORD *)&v88 + 1);
        v77 = (void *)v88;
        if (*((_QWORD *)&v88 + 1) != (_QWORD)v88)
        {
          do
          {
            v78 = *(std::__shared_weak_count **)(v76 - 8);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v76 -= 24;
          }
          while (v76 != v75);
          v77 = (void *)v88;
        }
        *((_QWORD *)&v88 + 1) = v75;
        operator delete(v77);
      }
      return;
    case 4:
      v84[1] = 0;
      __p = 0;
      v84[0] = &v84[1];
      sub_20EA65708(v84, &v88);
      *(_OWORD *)v81 = v88;
      sub_20E866BE0((uint64_t)v84, (char *)v84[1]);
      LODWORD(v84[0]) = 2;
      sub_20E9E840C(a1, v84);
      v18 = v84[0];
      if (LODWORD(v84[0]) >= 2)
        v19 = 2;
      else
        v19 = v84[0];
      if (v19 < 2)
        sub_20FE7D28C((uint64_t)v84, a1, (uint64_t)v81);
      else
        sub_20FE7BEC8(a1, v81, 2);
      if (v18 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_113;
      while (2)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
        {
          sub_20E9E9FEC(a1, (uint64_t)v84);
          if (SHIBYTE(__p) < 0)
          {
            if (v84[1] != (void *)1 || *(unsigned __int8 *)(a1 + 72) != *(unsigned __int8 *)v84[0])
            {
LABEL_133:
              v72 = 1;
              if ((SHIBYTE(__p) & 0x80000000) == 0)
                goto LABEL_134;
              goto LABEL_146;
            }
          }
          else if (SHIBYTE(__p) != 1 || *(unsigned __int8 *)(a1 + 72) != LOBYTE(v84[0]))
          {
            goto LABEL_133;
          }
          v72 = 0;
          if ((SHIBYTE(__p) & 0x80000000) == 0)
          {
LABEL_134:
            if (*(_BYTE *)(a1 + 131))
              v73 = 0;
            else
              v73 = v72;
            if ((v73 & 1) == 0)
              break;
            continue;
          }
LABEL_146:
          operator delete(v84[0]);
          if (*(_BYTE *)(a1 + 131))
            v74 = 0;
          else
            v74 = v72;
          if ((v74 & 1) == 0)
            break;
          continue;
        }
        break;
      }
LABEL_113:
      sub_20FDD58F4(&v88, (uint64_t)v81);
      sub_20FE79DDC(v84, (uint64_t)&v88);
      v60 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v61 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v60;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      v64 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v65 = (unint64_t *)((char *)v84[1] + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v68 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v15 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v70 = (unint64_t *)((char *)v81[1] + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
LABEL_132:
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
}

void sub_20FE7CFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E86665C(v9 - 64);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7CFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7CFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_20E86665C((uint64_t)&a13);
  if (!__p)
    _Unwind_Resume(a1);
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE7D124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20EA6144C(&v15, i + 8);
      sub_20EA6144C(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20EA648C4((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20FE7D25C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7D278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7D28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_20EA65708(&v16, &v18);
  v15 = v18;
  sub_20E866BE0((uint64_t)&v16, *((char **)&v16 + 1));
  sub_20FE7D414(a2, (uint64_t)&v15);
  sub_2100D78DC(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE7D3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7D3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7D3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_20E866BE0((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20FE7D414(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  unsigned int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_20FDF3DC4(a1, (char **)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  sub_20E9E88B4(a1, &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_20FE78D44((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      sub_20E9E840C(a1, &v34);
      sub_20FE7D878(a1, v7, v34);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_2100D7410((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_20FE7D6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7D6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7D6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7D708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE7D71C(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20E9E88B4(a1, &v16);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v16 - v5;
  if (v16 > v5)
  {
    sub_20FE78D44(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v16 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v16];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v17 = 1;
      sub_20E9E840C(a1, &v17);
      sub_20FE7D878(a1, v7, v17);
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_20FE7D878(uint64_t a1, uint64_t a2)
{
  int v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76[2];
  void *v77;
  __int128 v78;
  __int128 v79;
  void *__p;
  void *v81;
  _DWORD *v82;
  __int128 v83;
  void *v84;

  LOWORD(v79) = 0;
  sub_20E9E7F64(a1, &v79);
  v4 = (unsigned __int16)v79;
  *(_WORD *)a2 = v79;
  switch(v4)
  {
    case 0:
      LOBYTE(v79) = 7;
      BYTE8(v79) = 7;
      v5 = operator new(4uLL);
      __p = v5;
      *v5 = 0;
      v81 = v5 + 1;
      v82 = v5 + 1;
      LODWORD(v83) = 2;
      sub_20E9E840C(a1, &v83);
      v6 = v83;
      if (v83 >= 2)
        v7 = 2;
      else
        v7 = v83;
      if (v7 < 2)
      {
        sub_20FE163AC((uint64_t)&v83, a1, (uint64_t)&v79);
      }
      else
      {
        LOBYTE(v83) = 0;
        sub_20E9E7AC8(a1, &v83);
        LOBYTE(v79) = v83;
        sub_20FE16530(v83, a1, (uint64_t)&v79);
      }
      if (v6 < 2 || *(_BYTE *)(a1 + 131))
        goto LABEL_90;
      break;
    case 1:
      v83 = 0uLL;
      v84 = 0;
      ++*(_QWORD *)(a1 + 80);
      if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
      {
        *(_BYTE *)(a1 + 132) = 1;
      }
      else
      {
        sub_20E9E9FEC(a1, (uint64_t)&v79);
        v46 = *(_QWORD *)(a1 + 104);
        v83 = v79;
        v84 = __p;
        *(_QWORD *)(a1 + 104) = v46 + 1;
      }
      sub_20EA5E4B8((uint64_t)&v83, (CFStringRef *)v76);
      sub_20FE79AAC(&v79, (uint64_t)v76);
      v47 = v79;
      v79 = 0uLL;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v52 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v55 = (unint64_t *)((char *)v76[1] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (SHIBYTE(v84) < 0)
        operator delete((void *)v83);
      return;
    case 2:
      LOBYTE(v76[0]) = 0;
      sub_20E9E922C(a1, v76);
      sub_20EA5E3C8(v76, (std::__shared_weak_count_vtbl **)&v83);
      sub_20FE79BBC(&v79, (uint64_t)&v83);
      v8 = v79;
      v79 = 0uLL;
      v9 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v8;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
          goto LABEL_41;
      }
      return;
    case 3:
      v83 = 0uLL;
      v84 = 0;
      sub_20FE7D71C(a1, (char **)&v83);
      __p = 0;
      v79 = 0uLL;
      sub_20EA647CC((uint64_t)&v79, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v83 + 1) - v83) >> 3));
      sub_20FE7E228(v83, *((uint64_t *)&v83 + 1), (uint64_t)&v79);
      *(_OWORD *)v76 = v79;
      v77 = __p;
      sub_20FE7A054((uint64_t *)v76, (CFMutableArrayRef *)&v78);
      sub_20FE79CCC(&v79, (uint64_t)&v78);
      v30 = v79;
      v79 = 0uLL;
      v31 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v30;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
      if (*((_QWORD *)&v78 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = (char *)v76[0];
      if (v76[0])
      {
        v41 = (char *)v76[1];
        v42 = v76[0];
        if (v76[1] != v76[0])
        {
          do
          {
            v43 = (std::__shared_weak_count *)*((_QWORD *)v41 - 1);
            if (v43)
            {
              v44 = (unint64_t *)&v43->__shared_owners_;
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v41 -= 16;
          }
          while (v41 != v40);
          v42 = v76[0];
        }
        v76[1] = v40;
        operator delete(v42);
      }
      v70 = v83;
      if ((_QWORD)v83)
      {
        v71 = *((_QWORD *)&v83 + 1);
        v72 = (void *)v83;
        if (*((_QWORD *)&v83 + 1) != (_QWORD)v83)
        {
          do
          {
            v73 = *(std::__shared_weak_count **)(v71 - 8);
            if (v73)
            {
              v74 = (unint64_t *)&v73->__shared_owners_;
              do
                v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v71 -= 24;
          }
          while (v71 != v70);
          v72 = (void *)v83;
        }
        *((_QWORD *)&v83 + 1) = v70;
        operator delete(v72);
      }
      return;
    case 4:
      *((_QWORD *)&v79 + 1) = 0;
      __p = 0;
      *(_QWORD *)&v79 = (char *)&v79 + 8;
      sub_20EA65708(&v79, &v83);
      *(_OWORD *)v76 = v83;
      sub_20E866BE0((uint64_t)&v79, *((char **)&v79 + 1));
      LODWORD(v79) = 1;
      sub_20E9E840C(a1, &v79);
      sub_20FE7D414(a1, (uint64_t)v76);
      sub_20FDD58F4(&v83, (uint64_t)v76);
      sub_20FE79DDC(&v79, (uint64_t)&v83);
      v18 = v79;
      v79 = 0uLL;
      v19 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v18;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v15 = (std::__shared_weak_count *)v76[1];
      if (v76[1])
      {
        v28 = (unint64_t *)((char *)v76[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
LABEL_41:
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  while ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
  {
    sub_20E9E9FEC(a1, (uint64_t)&v83);
    if (SHIBYTE(v84) < 0)
    {
      if (*((_QWORD *)&v83 + 1) == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)v83)
        goto LABEL_119;
LABEL_107:
      v67 = 1;
      if (SHIBYTE(v84) < 0)
        goto LABEL_120;
LABEL_108:
      if (*(_BYTE *)(a1 + 131))
        v68 = 0;
      else
        v68 = v67;
      if ((v68 & 1) == 0)
        break;
    }
    else
    {
      if (SHIBYTE(v84) != 1 || *(unsigned __int8 *)(a1 + 72) != v83)
        goto LABEL_107;
LABEL_119:
      v67 = 0;
      if ((SHIBYTE(v84) & 0x80000000) == 0)
        goto LABEL_108;
LABEL_120:
      operator delete((void *)v83);
      if (*(_BYTE *)(a1 + 131))
        v69 = 0;
      else
        v69 = v67;
      if ((v69 & 1) == 0)
        break;
    }
  }
LABEL_90:
  sub_20EA67BE0((uint64_t)&v83, (uint64_t)&v79 + 8);
  v78 = v83;
  sub_20FE7999C(v76, (uint64_t)&v78);
  v57 = *(_OWORD *)v76;
  v76[0] = 0;
  v76[1] = 0;
  v58 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v57;
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = (std::__shared_weak_count *)v76[1];
  if (v76[1])
  {
    v62 = (unint64_t *)((char *)v76[1] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (__p)
  {
    v81 = __p;
    operator delete(__p);
  }
}

void sub_20FE7E0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_20E86665C((uint64_t)&a13);
  if (!__p)
    _Unwind_Resume(a1);
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE7E228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20EA6144C(&v15, i + 8);
      sub_20EA6144C(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20EA648C4((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20FE7E360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7E37C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7E390(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20EA65708(&v8, &v10);
  v7 = v10;
  sub_20E866BE0((uint64_t)&v8, v9[0]);
  sub_20FE7BEC8(a1, (uint64_t)&v7);
  sub_20FE783DC(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20FE7E44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE7E464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE7E4A8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE7E6B4((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE7E59C(a2, (uint64_t)a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE7E588(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE7E59C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20EA65708(&v8, &v10);
  v7 = v10;
  sub_20E866BE0((uint64_t)&v8, v9[0]);
  sub_20FE7E7B8(a1, (uint64_t)&v7);
  sub_20FE78020(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20FE7E658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE7E670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE7E6B4(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_21009B324(&v15);
  sub_20FE80D1C(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = (uint64_t)v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE7E7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7E7B8(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  std::logic_error *exception;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  __int128 v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_20FDF5544(a1, (uint64_t)v33);
  v5 = a1[6];
  v4 = a1[7];
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (!v6)
    v7 = 0;
  if (v7 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v5);
  a1[6] = v5 + 8;
  v9 = (char *)v35;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 >= v10)
    {
      v12 = (char *)v35;
    }
    else
    {
      v12 = (char *)__p[1] + 24 * v8;
      while (v9 != v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 24;
      }
      *(_QWORD *)&v35 = v12;
    }
  }
  else
  {
    sub_20FE78D44((char **)&__p[1], v11);
    v12 = (char *)v35;
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)__p[1]) >> 3);
  *((void **)&v36 + 1) = __p[1];
  sub_20FE7EC54(a1, &v36);
  sub_2100D8048((uint64_t *)v33, (void ***)&v36);
  v16 = v36;
  v36 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_20FE7EA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7EA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7EAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7EAC4(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char **v15;
  int64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::logic_error *exception;
  char v23;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  v12 = v8 - v11;
  if (v8 > v11)
  {
    sub_20FE78D44(a2, v12);
    v15 = a2;
    v13 = *a2;
    v14 = v15[1];
    v16 = v14 - v13;
    if (v14 == v13)
      return;
    goto LABEL_19;
  }
  if (v8 >= v11)
  {
    v13 = *a2;
    v16 = v10 - v13;
    if (v10 == v13)
      return;
    goto LABEL_19;
  }
  v17 = &v9[24 * v8];
  while (v10 != v17)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v18->__on_zero_shared)(v18, v12);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v10 -= 24;
  }
  a2[1] = v17;
  v13 = *a2;
  v16 = v17 - v13;
  if (v17 != v13)
  {
LABEL_19:
    v21 = 24 * (v16 / 24);
    do
    {
      sub_20FE7ED6C((uint64_t)&v23, a1, (uint64_t)v13);
      v13 += 24;
      v21 -= 24;
    }
    while (v21);
  }
}

void sub_20FE7EC40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE7EC54(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  std::logic_error *exception;
  char v13;

  if (*a2)
  {
    v3 = a2[1];
    v4 = 24 * *a2;
    do
    {
      while (1)
      {
        v7 = a1[6];
        v8 = a1[7];
        v9 = v8 >= v7;
        v10 = v8 - v7;
        if (!v9)
          v10 = 0;
        if (v10 <= 3)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20E89FD70(exception, "Not enough data to read");
          __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
        }
        v11 = *(_DWORD *)(a1[3] + v7);
        a1[6] = v7 + 4;
        if (v11 <= 1)
          break;
        sub_2100B6EE0(a1);
        sub_20FE7F018(a1, v3);
        v5 = a1[12];
        v6 = a1[9];
        a1[6] = *(_QWORD *)(v5 - 8) + *(_QWORD *)(v6 - 8) + 8;
        a1[9] = v6 - 8;
        a1[12] = v5 - 8;
        v3 += 24;
        v4 -= 24;
        if (!v4)
          return;
      }
      sub_20FE7EE60((uint64_t)&v13, a1, v3);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
}

void sub_20FE7ED58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE7ED6C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE7EE60((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE7F018(a2, a3, 2);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE7EE4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE7EE60(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_20FE80274(a2, (uint64_t)&v19);
  v4 = v19;
  sub_20EA6144C(&v22, (uint64_t)&v20);
  sub_20EA6144C(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20FE7EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7EFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7F004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7F018(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::logic_error *exception;
  std::logic_error *v83;
  void *v84[2];
  void *v85;
  void *v86[2];
  uint64_t v87;
  __int128 v88;
  void *v89[2];
  void *__p;
  void *v91;
  _DWORD *v92;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 1)
  {
LABEL_119:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v7 = a1[3];
  v8 = *(unsigned __int16 *)(v7 + v2);
  v9 = v2 + 2;
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v8;
  switch(v8)
  {
    case 0:
      LOBYTE(v89[0]) = 7;
      LOBYTE(v89[1]) = 7;
      v10 = operator new(4uLL);
      __p = v10;
      *v10 = 0;
      v91 = v10 + 1;
      v92 = v10 + 1;
      sub_20FE16AC0((uint64_t)v86, a1, v89);
      sub_20EA67BE0((uint64_t)v86, (uint64_t)&v89[1]);
      v88 = *(_OWORD *)v86;
      sub_20FE7999C(v84, (uint64_t)&v88);
      v11 = *(_OWORD *)v84;
      v84[0] = 0;
      v84[1] = 0;
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v16 = (unint64_t *)((char *)v84[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v91 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v89[0] = 0;
      v89[1] = 0;
      __p = 0;
      sub_2100B7230(a1, (uint64_t)v89);
      sub_20EA5E4B8((uint64_t)v89, (CFStringRef *)v84);
      sub_20FE79AAC(v86, (uint64_t)v84);
      v54 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v55 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v54;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v59 = (unint64_t *)((char *)v86[1] + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v62 = (unint64_t *)((char *)v84[1] + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v89[0]);
      return;
    case 2:
      if (v3 <= v9)
        goto LABEL_119;
      LOBYTE(v84[0]) = *(_BYTE *)(v7 + v9);
      a1[6] = v2 + 3;
      sub_20EA5E3C8(v84, (std::__shared_weak_count_vtbl **)v86);
      sub_20FE79BBC(v89, (uint64_t)v86);
      v28 = *(_OWORD *)v89;
      v89[0] = 0;
      v89[1] = 0;
      v29 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)v89[1];
      if (v89[1])
      {
        v33 = (unint64_t *)((char *)v89[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v36 = (unint64_t *)((char *)v86[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
LABEL_104:
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      return;
    case 3:
      v86[0] = 0;
      v86[1] = 0;
      v87 = 0;
      sub_20FE7EAC4(a1, (char **)v86);
      v89[1] = 0;
      __p = 0;
      v89[0] = 0;
      sub_20EA647CC((uint64_t)v89, 0xAAAAAAAAAAAAAAABLL * (((char *)v86[1] - (char *)v86[0]) >> 3));
      sub_20FE7F9A4((uint64_t)v86[0], (uint64_t)v86[1], (uint64_t)v89);
      *(_OWORD *)v84 = *(_OWORD *)v89;
      v85 = __p;
      sub_20FE7A054((uint64_t *)v84, (CFMutableArrayRef *)&v88);
      sub_20FE79CCC(v89, (uint64_t)&v88);
      v38 = *(_OWORD *)v89;
      v89[0] = 0;
      v89[1] = 0;
      v39 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (std::__shared_weak_count *)v89[1];
      if (v89[1])
      {
        v43 = (unint64_t *)((char *)v89[1] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v45 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
      if (*((_QWORD *)&v88 + 1))
      {
        v46 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v48 = (char *)v84[0];
      if (v84[0])
      {
        v49 = (char *)v84[1];
        v50 = v84[0];
        if (v84[1] != v84[0])
        {
          do
          {
            v51 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v49 -= 16;
          }
          while (v49 != v48);
          v50 = v84[0];
        }
        v84[1] = v48;
        operator delete(v50);
      }
      v76 = (char *)v86[0];
      if (v86[0])
      {
        v77 = (char *)v86[1];
        v78 = v86[0];
        if (v86[1] != v86[0])
        {
          do
          {
            v79 = (std::__shared_weak_count *)*((_QWORD *)v77 - 1);
            if (v79)
            {
              v80 = (unint64_t *)&v79->__shared_owners_;
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            v77 -= 24;
          }
          while (v77 != v76);
          v78 = v86[0];
        }
        v86[1] = v76;
        operator delete(v78);
      }
      return;
    case 4:
      v89[1] = 0;
      __p = 0;
      v89[0] = &v89[1];
      sub_20EA65708(v89, v86);
      *(_OWORD *)v84 = *(_OWORD *)v86;
      sub_20E866BE0((uint64_t)v89, (char *)v89[1]);
      v21 = a1[6];
      v22 = a1[7];
      v23 = v22 >= v21;
      v24 = v22 - v21;
      if (!v23)
        v24 = 0;
      if (v24 <= 3)
      {
        v83 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v83, "Not enough data to read");
        v83->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(v83, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v25 = *(_DWORD *)(a1[3] + v21);
      a1[6] = v21 + 4;
      if (v25 <= 1)
      {
        sub_20FE7FB0C((uint64_t)v89, a1, (uint64_t)v84);
      }
      else
      {
        sub_2100B6EE0(a1);
        sub_20FE7E7B8(a1, v84, 2);
        v26 = a1[12];
        v27 = a1[9];
        a1[6] = *(_QWORD *)(v26 - 8) + *(_QWORD *)(v27 - 8) + 8;
        a1[9] = v27 - 8;
        a1[12] = v26 - 8;
      }
      sub_20FDD58F4(v86, (uint64_t)v84);
      sub_20FE79DDC(v89, (uint64_t)v86);
      v64 = *(_OWORD *)v89;
      v89[0] = 0;
      v89[1] = 0;
      v65 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v64;
      if (v65)
      {
        v66 = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)v89[1];
      if (v89[1])
      {
        v69 = (unint64_t *)((char *)v89[1] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v72 = (unint64_t *)((char *)v86[1] + 8);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v35 = (std::__shared_weak_count *)v84[1];
      if (v84[1])
      {
        v74 = (unint64_t *)((char *)v84[1] + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
          goto LABEL_104;
      }
      return;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
}

void sub_20FE7F830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7F84C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE7F860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20E86665C((uint64_t)&a13);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7F87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20E86665C((uint64_t)&a17);
  sub_20E8C3144(&a9);
  sub_20EF76610(&a13);
  _Unwind_Resume(a1);
}

void sub_20FE7F8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_20E86665C((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FE7F97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7F990(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE7F9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20EA6144C(&v15, i + 8);
      sub_20EA6144C(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20EA648C4((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20FE7FADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7FAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE7FB0C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_20EA65708(&v16, &v18);
  v15 = v18;
  sub_20E866BE0((uint64_t)&v16, *((char **)&v16 + 1));
  sub_20FE7FC94(a2, (uint64_t)&v15);
  sub_2100D78DC(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE7FC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7FC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7FC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_20E866BE0((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20FE7FC94(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  std::logic_error *exception;
  void *v33[2];
  void *__p[2];
  __int128 v35;
  __int128 v36;

  *(_OWORD *)__p = 0u;
  v35 = 0u;
  *(_OWORD *)v33 = 0u;
  sub_20FDF5544(a1, (uint64_t)v33);
  v5 = a1[6];
  v4 = a1[7];
  v6 = v4 >= v5;
  v7 = v4 - v5;
  if (!v6)
    v7 = 0;
  if (v7 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v5);
  a1[6] = v5 + 8;
  v9 = (char *)v35;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (unint64_t)__p[1]) >> 3);
  v11 = v8 - v10;
  if (v8 <= v10)
  {
    if (v8 >= v10)
    {
      v12 = (char *)v35;
    }
    else
    {
      v12 = (char *)__p[1] + 24 * v8;
      while (v9 != v12)
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v9 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v13->__on_zero_shared)(v13, v11);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v9 -= 24;
      }
      *(_QWORD *)&v35 = v12;
    }
  }
  else
  {
    sub_20FE78D44((char **)&__p[1], v11);
    v12 = (char *)v35;
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (char *)__p[1]) >> 3);
  *((void **)&v36 + 1) = __p[1];
  sub_20FE80130((uint64_t)a1, &v36);
  sub_2100D7410((uint64_t *)v33, (void ***)&v36);
  v16 = v36;
  v36 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v35;
    v25 = __p[1];
    if ((void *)v35 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v35 = v23;
    operator delete(v25);
  }
  v29 = (void **)v33[0];
  if (v33[0])
  {
    v30 = (void **)v33[1];
    v31 = v33[0];
    if (v33[1] != v33[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v33[0];
    }
    v33[1] = v29;
    operator delete(v31);
  }
}

void sub_20FE7FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7FF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7FF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7FF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE7FFA0(_QWORD *a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char **v15;
  int64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::logic_error *exception;
  char v23;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  v12 = v8 - v11;
  if (v8 > v11)
  {
    sub_20FE78D44(a2, v12);
    v15 = a2;
    v13 = *a2;
    v14 = v15[1];
    v16 = v14 - v13;
    if (v14 == v13)
      return;
    goto LABEL_19;
  }
  if (v8 >= v11)
  {
    v13 = *a2;
    v16 = v10 - v13;
    if (v10 == v13)
      return;
    goto LABEL_19;
  }
  v17 = &v9[24 * v8];
  while (v10 != v17)
  {
    v18 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v18->__on_zero_shared)(v18, v12);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v10 -= 24;
  }
  a2[1] = v17;
  v13 = *a2;
  v16 = v17 - v13;
  if (v17 != v13)
  {
LABEL_19:
    v21 = 24 * (v16 / 24);
    do
    {
      sub_20FE801E8((uint64_t)&v23, a1, (uint64_t)v13);
      v13 += 24;
      v21 -= 24;
    }
    while (v21);
  }
}

void sub_20FE8011C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE80130(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  std::logic_error *exception;

  if (*a2)
  {
    v2 = (_QWORD *)result;
    v3 = a2[1];
    v4 = 24 * *a2;
    do
    {
      v5 = v2[6];
      v6 = v2[7];
      v7 = v6 >= v5;
      v8 = v6 - v5;
      if (!v7)
        v8 = 0;
      if (v8 <= 3)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20E89FD70(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      v9 = *(unsigned int *)(v2[3] + v5);
      v2[6] = v5 + 4;
      result = sub_20FE80274(v2, v3, v9);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

void sub_20FE801D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE801E8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  std::logic_error *exception;

  v4 = a2[6];
  v3 = a2[7];
  v5 = v3 >= v4;
  v6 = v3 - v4;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v7 = *(unsigned int *)(a2[3] + v4);
  a2[6] = v4 + 4;
  return sub_20FE80274(a2, a3, v7);
}

void sub_20FE80260(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE80274(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  int v8;
  unint64_t v9;
  _DWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::logic_error *exception;
  std::logic_error *v80;
  void *v81[2];
  void *v82;
  void *v83[2];
  uint64_t v84;
  __int128 v85;
  void *v86[2];
  void *__p;
  void *v88;
  _DWORD *v89;

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 - v2;
  if (v3 < v2)
    v4 = 0;
  if (v4 <= 1)
  {
LABEL_116:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v7 = a1[3];
  v8 = *(unsigned __int16 *)(v7 + v2);
  v9 = v2 + 2;
  a1[6] = v2 + 2;
  *(_WORD *)a2 = v8;
  switch(v8)
  {
    case 0:
      LOBYTE(v86[0]) = 7;
      LOBYTE(v86[1]) = 7;
      v10 = operator new(4uLL);
      __p = v10;
      *v10 = 0;
      v88 = v10 + 1;
      v89 = v10 + 1;
      sub_20FE16AC0((uint64_t)v83, a1, v86);
      sub_20EA67BE0((uint64_t)v83, (uint64_t)&v86[1]);
      v85 = *(_OWORD *)v83;
      sub_20FE7999C(v81, (uint64_t)&v85);
      v11 = *(_OWORD *)v81;
      v81[0] = 0;
      v81[1] = 0;
      v12 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v16 = (unint64_t *)((char *)v81[1] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (__p)
      {
        v88 = __p;
        operator delete(__p);
      }
      return;
    case 1:
      v86[0] = 0;
      v86[1] = 0;
      __p = 0;
      sub_2100B7230(a1, (uint64_t)v86);
      sub_20EA5E4B8((uint64_t)v86, (CFStringRef *)v81);
      sub_20FE79AAC(v83, (uint64_t)v81);
      v63 = *(_OWORD *)v83;
      v83[0] = 0;
      v83[1] = 0;
      v64 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v63;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v68 = (unint64_t *)((char *)v83[1] + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v71 = (unint64_t *)((char *)v81[1] + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (SHIBYTE(__p) < 0)
        operator delete(v86[0]);
      return;
    case 2:
      if (v3 <= v9)
        goto LABEL_116;
      LOBYTE(v81[0]) = *(_BYTE *)(v7 + v9);
      a1[6] = v2 + 3;
      sub_20EA5E3C8(v81, (std::__shared_weak_count_vtbl **)v83);
      sub_20FE79BBC(v86, (uint64_t)v83);
      v38 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v39 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v43 = (unint64_t *)((char *)v86[1] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      v35 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v45 = (unint64_t *)((char *)v83[1] + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
LABEL_60:
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      return;
    case 3:
      v83[0] = 0;
      v83[1] = 0;
      v84 = 0;
      sub_20FE7FFA0(a1, (char **)v83);
      v86[1] = 0;
      __p = 0;
      v86[0] = 0;
      sub_20EA647CC((uint64_t)v86, 0xAAAAAAAAAAAAAAABLL * (((char *)v83[1] - (char *)v83[0]) >> 3));
      sub_20FE80BB4((uint64_t)v83[0], (uint64_t)v83[1], (uint64_t)v86);
      *(_OWORD *)v81 = *(_OWORD *)v86;
      v82 = __p;
      sub_20FE7A054((uint64_t *)v81, (CFMutableArrayRef *)&v85);
      sub_20FE79CCC(v86, (uint64_t)&v85);
      v47 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v47;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v52 = (unint64_t *)((char *)v86[1] + 8);
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
      if (*((_QWORD *)&v85 + 1))
      {
        v55 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (char *)v81[0];
      if (v81[0])
      {
        v58 = (char *)v81[1];
        v59 = v81[0];
        if (v81[1] != v81[0])
        {
          do
          {
            v60 = (std::__shared_weak_count *)*((_QWORD *)v58 - 1);
            if (v60)
            {
              v61 = (unint64_t *)&v60->__shared_owners_;
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
            v58 -= 16;
          }
          while (v58 != v57);
          v59 = v81[0];
        }
        v81[1] = v57;
        operator delete(v59);
      }
      v73 = (char *)v83[0];
      if (v83[0])
      {
        v74 = (char *)v83[1];
        v75 = v83[0];
        if (v83[1] != v83[0])
        {
          do
          {
            v76 = (std::__shared_weak_count *)*((_QWORD *)v74 - 1);
            if (v76)
            {
              v77 = (unint64_t *)&v76->__shared_owners_;
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
            v74 -= 24;
          }
          while (v74 != v73);
          v75 = v83[0];
        }
        v83[1] = v73;
        operator delete(v75);
      }
      return;
    case 4:
      v86[1] = 0;
      __p = 0;
      v86[0] = &v86[1];
      sub_20EA65708(v86, v83);
      *(_OWORD *)v81 = *(_OWORD *)v83;
      sub_20E866BE0((uint64_t)v86, (char *)v86[1]);
      v21 = a1[6];
      v22 = a1[7];
      v23 = v22 >= v21;
      v24 = v22 - v21;
      if (!v23)
        v24 = 0;
      if (v24 <= 3)
      {
        v80 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v80, "Not enough data to read");
        v80->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(v80, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
      }
      a1[6] = v21 + 4;
      sub_20FE7FC94(a1, (uint64_t)v81);
      sub_20FDD58F4(v83, (uint64_t)v81);
      sub_20FE79DDC(v86, (uint64_t)v83);
      v25 = *(_OWORD *)v86;
      v86[0] = 0;
      v86[1] = 0;
      v26 = *(std::__shared_weak_count **)(a2 + 16);
      *(_OWORD *)(a2 + 8) = v25;
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = (std::__shared_weak_count *)v86[1];
      if (v86[1])
      {
        v30 = (unint64_t *)((char *)v86[1] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)v83[1];
      if (v83[1])
      {
        v33 = (unint64_t *)((char *)v83[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      v35 = (std::__shared_weak_count *)v81[1];
      if (v81[1])
      {
        v36 = (unint64_t *)((char *)v81[1] + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
          goto LABEL_60;
      }
      return;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
}

void sub_20FE80A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE80A5C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE80A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20E86665C((uint64_t)&a17);
  sub_20E8C3144(&a9);
  sub_20EF76610(&a13);
  _Unwind_Resume(a1);
}

void sub_20FE80AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE80ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  sub_20E86665C((uint64_t)&a9);
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FE80B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE80BA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE80BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20EA6144C(&v15, i + 8);
      sub_20EA6144C(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20EA648C4((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20FE80CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE80D08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE80D1C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20EA65708(&v8, &v10);
  v7 = v10;
  sub_20E866BE0((uint64_t)&v8, v9[0]);
  sub_20FE7E7B8(a1, (uint64_t)&v7);
  sub_20FE783DC(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20FE80DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE80DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE80E34(int *a1, _QWORD *a2, uint64_t *a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_QWORD *, unsigned int *))(*a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FE80F60();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(_QWORD *))(*a2 + 16))(a2);
    sub_20FE81310(a2, (uint64_t)a3);
    (*(void (**)(_QWORD *))(*a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20FE81428((uint64_t)&v13, a2, a3);
  else
    sub_20FE81310(a2, (uint64_t)a3);
}

__int128 *sub_20FE80F60()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56AF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56AF8))
    return &xmmword_254A56AE0;
  v2 = sub_20FE8103C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56AE0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56AF0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56AE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56AE0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56AF8);
  return &xmmword_254A56AE0;
}

void sub_20FE81024(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56AF8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE8103C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56B18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56B18))
    return &stru_254A56B00;
  sub_20FE8112C((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A56B00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56B00, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56B18);
  return &stru_254A56B00;
}

void sub_20FE810EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56B18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56B18);
  _Unwind_Resume(a1);
}

void sub_20FE8112C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56B38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56B38))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dictio::DictionarySample<>]", qword_254A56B20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56B20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56B38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56B58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56B58))
  {
    v5 = sub_20E8A2354(qword_254A56B20, "<", 0);
    sub_20E89FC08(qword_254A56B20, 0, v5, qword_254A56B40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56B40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56B58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56B78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56B78))
  {
    sub_21023CD84((uint64_t)qword_254A56B40, (uint64_t)&xmmword_254A56B60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56B60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56B78);
  }
  if (byte_254A56B77 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56B60, *((unint64_t *)&xmmword_254A56B60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56B60;
    *(_QWORD *)(a1 + 16) = unk_254A56B70;
  }
}

void sub_20FE812C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56B78);
  _Unwind_Resume(a1);
}

void sub_20FE812E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56B58);
  _Unwind_Resume(a1);
}

void sub_20FE812F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56B38);
  _Unwind_Resume(a1);
}

void sub_20FE81310(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20EA65708(&v8, &v10);
  v7 = v10;
  sub_20E866BE0((uint64_t)&v8, v9[0]);
  sub_20FE8152C(a1, (uint64_t)&v7);
  sub_20FE78020(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20FE813CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE813E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE81428(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  sub_21009B324(&v15);
  sub_20FE84360(a2, (uint64_t)&v15);
  v6 = v15;
  v5 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  *a3 = v6;
  a3[1] = (uint64_t)v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE81518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE8152C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _WORD *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void *v31;
  void *v32[2];
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t *v38;
  int *v39;
  int v40;
  char v41;

  *(_OWORD *)__p = 0u;
  v34 = 0u;
  *(_OWORD *)v32 = 0u;
  sub_20FDF76CC((uint64_t)a1, (char **)v32);
  v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (unint64_t)__p[1]) >> 3);
  (*(void (**)(_QWORD *, unint64_t *))(*a1 + 120))(a1, &v35);
  v4 = (char *)v34;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (unint64_t)__p[1]) >> 3);
  v6 = v35 - v5;
  if (v35 > v5)
  {
    sub_20FE78D44((char **)&__p[1], v6);
    v7 = __p[1];
    v8 = v34 - (unint64_t)__p[1];
    if ((void *)v34 == __p[1])
      goto LABEL_23;
    goto LABEL_16;
  }
  if (v35 >= v5)
  {
    v7 = __p[1];
    v8 = v34 - (unint64_t)__p[1];
    if ((void *)v34 == __p[1])
      goto LABEL_23;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v35;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v34 = v9;
  v7 = __p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v14 = *a1;
      v36 = a1[1];
      v40 = 0;
      LODWORD(v37) = 2;
      (*(void (**)(_QWORD *, __int128 *))(v14 + 104))(a1, &v37);
      v15 = v37;
      v40 = v37;
      *(_QWORD *)&v37 = a1;
      *((_QWORD *)&v37 + 1) = v7;
      v38 = &v36;
      v39 = &v40;
      if ((int)v36 >= 1)
      {
        sub_20FE81A58((uint64_t)&v37);
      }
      else if (v15 < 2)
      {
        sub_20FE82058((uint64_t)&v41, (uint64_t)a1, (uint64_t)v7);
      }
      else
      {
        sub_20FE82210((uint64_t)a1, v7);
      }
      v7 += 12;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_23:
  sub_2100D8048((uint64_t *)v32, (void ***)&v37);
  v16 = v37;
  v37 = 0uLL;
  v17 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)__p[1];
  if (__p[1])
  {
    v24 = (char *)v34;
    v25 = __p[1];
    if ((void *)v34 != __p[1])
    {
      do
      {
        v26 = (std::__shared_weak_count *)*((_QWORD *)v24 - 1);
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v24 -= 24;
      }
      while (v24 != v23);
      v25 = __p[1];
    }
    *(_QWORD *)&v34 = v23;
    operator delete(v25);
  }
  v29 = (void **)v32[0];
  if (v32[0])
  {
    v30 = (void **)v32[1];
    v31 = v32[0];
    if (v32[1] != v32[0])
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != v29);
      v31 = v32[0];
    }
    v32[1] = v29;
    operator delete(v31);
  }
}

void sub_20FE81854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE81868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE8187C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE81890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20FE73008(&a9);
  _Unwind_Resume(a1);
}

void sub_20FE818A4(_QWORD *a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;

  v17 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(_QWORD *, unint64_t *))(*a1 + 120))(a1, &v17);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v17 - v5;
  if (v17 > v5)
  {
    sub_20FE78D44(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v17 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v17];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v16 = *a1;
      v18 = a1[1];
      v19 = 2;
      (*(void (**)(_QWORD *, unsigned int *))(v16 + 104))(a1, &v19);
      if ((int)v18 >= 1)
      {
        sub_20FE81B7C((int *)&v18, (uint64_t)a1, (uint64_t)v7, v19);
      }
      else if (v19 < 2)
      {
        sub_20FE82058((uint64_t)&v19, (uint64_t)a1, (uint64_t)v7);
      }
      else
      {
        sub_20FE82210(a1, v7, v19);
      }
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_20FE81A58(uint64_t a1)
{
  uint64_t v1;
  _WORD *v2;
  int *v3;
  unsigned int v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  __int128 *v9;
  char v10;
  unsigned int v11;

  v1 = *(_QWORD *)a1;
  v2 = *(_WORD **)(a1 + 8);
  v3 = *(int **)(a1 + 16);
  v4 = **(_DWORD **)(a1 + 24);
  v5 = *v3;
  if (*v3 == 2)
  {
    if (v4 < 2)
      goto LABEL_9;
    v11 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v1 + 104))(v1, &v11);
    if (v11 >= 3)
    {
      v8 = v11;
      v9 = sub_20FE81CA8();
      sub_20E9F5C70((std::string *)v9, v8, 2u);
    }
    v5 = *v3;
  }
  if (v5 >= 1 && v4 > 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    sub_20FE82210(v1, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
    return;
  }
LABEL_9:
  if (v4 >= 2)
    v7 = 2;
  else
    v7 = v4;
  if (v7 <= 1)
    sub_20FE82058((uint64_t)&v10, v1, (uint64_t)v2);
  else
    sub_20FE82210(v1, v2);
}

void sub_20FE81B7C(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FE81CA8();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE82210(a2, a3, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20FE82058((uint64_t)&v13, a2, a3);
  else
    sub_20FE82210(a2, a3, 2);
}

__int128 *sub_20FE81CA8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56B98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56B98))
    return &xmmword_254A56B80;
  v2 = sub_20FE81D84();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56B80, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56B90 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56B80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56B80, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56B98);
  return &xmmword_254A56B80;
}

void sub_20FE81D6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56B98);
  _Unwind_Resume(a1);
}

std::string *sub_20FE81D84()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56BB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56BB8))
    return &stru_254A56BA0;
  sub_20FE81E74((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A56BA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56BA0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56BB8);
  return &stru_254A56BA0;
}

void sub_20FE81E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56BB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56BB8);
  _Unwind_Resume(a1);
}

void sub_20FE81E74(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56BD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56BD8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cfio::DictionaryValueSample<>]", qword_254A56BC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56BC0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56BD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56BF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56BF8))
  {
    v5 = sub_20E8A2354(qword_254A56BC0, "<", 0);
    sub_20E89FC08(qword_254A56BC0, 0, v5, qword_254A56BE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56BE0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56BF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56C18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56C18))
  {
    sub_21023CD84((uint64_t)qword_254A56BE0, (uint64_t)&xmmword_254A56C00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56C00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56C18);
  }
  if (byte_254A56C17 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56C00, *((unint64_t *)&xmmword_254A56C00 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56C00;
    *(_QWORD *)(a1 + 16) = unk_254A56C10;
  }
}

void sub_20FE82010(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56C18);
  _Unwind_Resume(a1);
}

void sub_20FE82028(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56BF8);
  _Unwind_Resume(a1);
}

void sub_20FE82040(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56BD8);
  _Unwind_Resume(a1);
}

void sub_20FE82058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v20 = 0;
  v21 = 0;
  sub_20FE8392C(a2, &v19);
  v4 = v19;
  sub_20EA6144C(&v22, (uint64_t)&v20);
  sub_20EA6144C(&v18, (uint64_t)&v22);
  v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_WORD *)a3 = v4;
  v8 = v18;
  v18 = 0uLL;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v8;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20FE821CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE821E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE821FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE82210(uint64_t a1, _WORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  void *v72[2];
  void *v73;
  void *v74[2];
  uint64_t v75;
  __int128 v76;
  void *__p[2];
  void *v78;
  __int128 *v79;
  _DWORD *v80;
  char v81;

  __p[0] = a2;
  sub_20FE82B30((_BYTE *)a1, (_WORD **)__p);
  switch(*a2)
  {
    case 0:
      LOBYTE(__p[0]) = 7;
      LOBYTE(__p[1]) = 7;
      v4 = operator new(4uLL);
      v78 = v4;
      *v4 = 0;
      v79 = (__int128 *)(v4 + 1);
      v80 = v4 + 1;
      v5 = *(_QWORD *)a1;
      v72[0] = *(void **)(a1 + 8);
      LODWORD(v74[0]) = 2;
      (*(void (**)(uint64_t, void **))(v5 + 104))(a1, v74);
      if (SLODWORD(v72[0]) < 1)
      {
        if (LODWORD(v74[0]) < 2)
        {
          sub_20FE17C30((uint64_t)v74, (_BYTE *)a1, (uint64_t)__p);
        }
        else
        {
          v74[0] = __p;
          sub_20FE180CC((_BYTE *)a1, (_BYTE **)v74);
          sub_20FE17DB4(LOBYTE(__p[0]), a1, (uint64_t)__p);
        }
      }
      else
      {
        sub_20FE178E8((int *)v72, (_BYTE *)a1, __p, v74[0]);
      }
      sub_20EA67BE0((uint64_t)v74, (uint64_t)&__p[1]);
      v76 = *(_OWORD *)v74;
      sub_20FE7999C(v72, (uint64_t)&v76);
      v51 = *(_OWORD *)v72;
      v72[0] = 0;
      v72[1] = 0;
      v52 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v51;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldaxr(p_shared_owners);
        while (__stlxr(v54 - 1, p_shared_owners));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (std::__shared_weak_count *)v72[1];
      if (v72[1])
      {
        v56 = (unint64_t *)((char *)v72[1] + 8);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      v58 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (v78)
      {
        v79 = (__int128 *)v78;
        operator delete(v78);
      }
      return;
    case 1:
      __p[0] = 0;
      __p[1] = 0;
      v78 = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
      sub_20EA5E4B8((uint64_t)__p, (CFStringRef *)v72);
      sub_20FE79AAC(v74, (uint64_t)v72);
      v6 = *(_OWORD *)v74;
      v74[0] = 0;
      v74[1] = 0;
      v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v6;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v11 = (unint64_t *)((char *)v74[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)v72[1];
      if (v72[1])
      {
        v14 = (unint64_t *)((char *)v72[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (SHIBYTE(v78) < 0)
        operator delete(__p[0]);
      return;
    case 2:
      LOBYTE(v72[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, v72);
      sub_20EA5E3C8(v72, (std::__shared_weak_count_vtbl **)v74);
      sub_20FE79BBC(__p, (uint64_t)v74);
      v16 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v21 = (unint64_t *)((char *)__p[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v74[1];
      if (!v74[1])
        return;
      v24 = (unint64_t *)((char *)v74[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      break;
    case 3:
      v74[0] = 0;
      v74[1] = 0;
      v75 = 0;
      sub_20FE818A4((_QWORD *)a1, (char **)v74);
      __p[1] = 0;
      v78 = 0;
      __p[0] = 0;
      sub_20EA647CC((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v74[1] - (char *)v74[0]) >> 3));
      sub_20FE82CE4((uint64_t)v74[0], (uint64_t)v74[1], (uint64_t)__p);
      *(_OWORD *)v72 = *(_OWORD *)__p;
      v73 = v78;
      sub_20FE7A054((uint64_t *)v72, (CFMutableArrayRef *)&v76);
      sub_20FE79CCC(__p, (uint64_t)&v76);
      v26 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v27 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v31 = (unint64_t *)((char *)__p[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (char *)v72[0];
      if (v72[0])
      {
        v37 = (char *)v72[1];
        v38 = v72[0];
        if (v72[1] != v72[0])
        {
          do
          {
            v39 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v37 -= 16;
          }
          while (v37 != v36);
          v38 = v72[0];
        }
        v72[1] = v36;
        operator delete(v38);
      }
      v45 = (char *)v74[0];
      if (v74[0])
      {
        v46 = (char *)v74[1];
        v47 = v74[0];
        if (v74[1] != v74[0])
        {
          do
          {
            v48 = (std::__shared_weak_count *)*((_QWORD *)v46 - 1);
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v46 -= 24;
          }
          while (v46 != v45);
          v47 = v74[0];
        }
        v74[1] = v45;
        operator delete(v47);
      }
      return;
    case 4:
      __p[1] = 0;
      v78 = 0;
      __p[0] = &__p[1];
      sub_20EA65708(__p, v74);
      *(_OWORD *)v72 = *(_OWORD *)v74;
      sub_20E866BE0((uint64_t)__p, (char *)__p[1]);
      v42 = *(_QWORD *)a1;
      v74[0] = *(void **)(a1 + 8);
      v43 = (int)v74[0];
      LODWORD(v76) = 0;
      LODWORD(__p[0]) = 2;
      (*(void (**)(uint64_t, void **))(v42 + 104))(a1, __p);
      v44 = LODWORD(__p[0]);
      LODWORD(v76) = __p[0];
      __p[0] = (void *)a1;
      __p[1] = v72;
      v78 = v74;
      v79 = &v76;
      if (v43 < 1)
      {
        if (v44 < 2)
          sub_20FE83320((uint64_t)&v81, a1, (uint64_t)v72);
        else
          sub_20FE8152C(a1, v72, v44);
      }
      else
      {
        sub_20FE82E4C((uint64_t)__p);
      }
      sub_20FDD58F4(v74, (uint64_t)v72);
      sub_20FE79DDC(__p, (uint64_t)v74);
      v61 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v62 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v61;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      v65 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v66 = (unint64_t *)((char *)__p[1] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = (std::__shared_weak_count *)v74[1];
      if (v74[1])
      {
        v69 = (unint64_t *)((char *)v74[1] + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v23 = (std::__shared_weak_count *)v72[1];
      if (!v72[1])
        return;
      v71 = (unint64_t *)((char *)v72[1] + 8);
      do
        v25 = __ldaxr(v71);
      while (__stlxr(v25 - 1, v71));
      break;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_20FE829F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_20E86665C((uint64_t)&a13);
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE82A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE82A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_20E86665C((uint64_t)&a17);
  if (!__p)
    _Unwind_Resume(a1);
  a22 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20FE82B30(_BYTE *a1, _WORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_21023865C(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_2100D89B0((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v6 + 128);
    MEMORY[0x212BC6398](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 96))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20FE82C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20FD0DE48(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE82CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20EA6144C(&v15, i + 8);
      sub_20EA6144C(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20EA648C4((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20FE82E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE82E38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE82E4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  unsigned int v4;
  int v5;
  unsigned int v7;
  unsigned int v8;
  __int128 *v9;
  char v10;
  unsigned int v11;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(int **)(a1 + 16);
  v4 = **(_DWORD **)(a1 + 24);
  v5 = *v3;
  if (*v3 == 2)
  {
    if (v4 < 2)
      goto LABEL_9;
    v11 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v1 + 104))(v1, &v11);
    if (v11 >= 3)
    {
      v8 = v11;
      v9 = sub_20FE82F70();
      sub_20E9F5C70((std::string *)v9, v8, 2u);
    }
    v5 = *v3;
  }
  if (v5 >= 1 && v4 > 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    sub_20FE8152C(v1, v2, 2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
    return;
  }
LABEL_9:
  if (v4 >= 2)
    v7 = 2;
  else
    v7 = v4;
  if (v7 <= 1)
    sub_20FE83320((uint64_t)&v10, v1, v2);
  else
    sub_20FE8152C(v1, v2, 2);
}

__int128 *sub_20FE82F70()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56C38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56C38))
    return &xmmword_254A56C20;
  v2 = sub_20FE8304C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56C20, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56C30 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56C20 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56C20, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56C38);
  return &xmmword_254A56C20;
}

void sub_20FE83034(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56C38);
  _Unwind_Resume(a1);
}

std::string *sub_20FE8304C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56C58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56C58))
    return &stru_254A56C40;
  sub_20FE8313C((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A56C40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56C40, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56C58);
  return &stru_254A56C40;
}

void sub_20FE830FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56C58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56C58);
  _Unwind_Resume(a1);
}

void sub_20FE8313C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56C78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56C78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cfio::DictionaryRefSample<>]", qword_254A56C60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56C60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56C78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56C98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56C98))
  {
    v5 = sub_20E8A2354(qword_254A56C60, "<", 0);
    sub_20E89FC08(qword_254A56C60, 0, v5, qword_254A56C80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56C80, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56C98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56CB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56CB8))
  {
    sub_21023CD84((uint64_t)qword_254A56C80, (uint64_t)&xmmword_254A56CA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56CA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56CB8);
  }
  if (byte_254A56CB7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56CA0, *((unint64_t *)&xmmword_254A56CA0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56CA0;
    *(_QWORD *)(a1 + 16) = unk_254A56CB0;
  }
}

void sub_20FE832D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56CB8);
  _Unwind_Resume(a1);
}

void sub_20FE832F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56C98);
  _Unwind_Resume(a1);
}

void sub_20FE83308(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56C78);
  _Unwind_Resume(a1);
}

void sub_20FE83320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  *((_QWORD *)&v16 + 1) = 0;
  v17 = 0;
  *(_QWORD *)&v16 = (char *)&v16 + 8;
  sub_20EA65708(&v16, &v18);
  v15 = v18;
  sub_20E866BE0((uint64_t)&v16, *((char **)&v16 + 1));
  sub_20FE834A8(a2, (uint64_t)&v15);
  sub_2100D78DC(&v16, (uint64_t)&v15);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  *(_OWORD *)a3 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE83468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE8347C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE83490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  sub_20E866BE0((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void sub_20FE834A8(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  __int128 v30;
  void *v31[2];
  void *__p[2];
  __int128 v33;
  unsigned int v34;

  *(_OWORD *)__p = 0u;
  v33 = 0u;
  *(_OWORD *)v31 = 0u;
  sub_20FDF76CC(a1, (char **)v31);
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v30);
  v4 = (char *)v33;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (unint64_t)__p[1]) >> 3);
  v6 = v30 - v5;
  if ((unint64_t)v30 > v5)
  {
    sub_20FE78D44((char **)&__p[1], v6);
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  if ((unint64_t)v30 >= v5)
  {
    v7 = (char *)__p[1];
    v8 = v33 - (unint64_t)__p[1];
    if ((void *)v33 == __p[1])
      goto LABEL_18;
    goto LABEL_16;
  }
  v9 = (char *)__p[1] + 24 * v30;
  while (v4 != v9)
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v4 -= 24;
  }
  *(_QWORD *)&v33 = v9;
  v7 = (char *)__p[1];
  v8 = v9 - (char *)__p[1];
  if (v9 != __p[1])
  {
LABEL_16:
    v13 = 24 * (v8 / 24);
    do
    {
      v34 = 1;
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 104))(a1, &v34);
      sub_20FE8392C(a1, v7, v34);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
LABEL_18:
  sub_2100D7410((uint64_t *)v31, (void ***)&v30);
  v14 = v30;
  v30 = 0uLL;
  v15 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (char *)__p[1];
  if (__p[1])
  {
    v22 = (char *)v33;
    v23 = __p[1];
    if ((void *)v33 != __p[1])
    {
      do
      {
        v24 = (std::__shared_weak_count *)*((_QWORD *)v22 - 1);
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v22 -= 24;
      }
      while (v22 != v21);
      v23 = __p[1];
    }
    *(_QWORD *)&v33 = v21;
    operator delete(v23);
  }
  v27 = (void **)v31[0];
  if (v31[0])
  {
    v28 = (void **)v31[1];
    v29 = v31[0];
    if (v31[1] != v31[0])
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != v27);
      v29 = v31[0];
    }
    v31[1] = v27;
    operator delete(v29);
  }
}

void sub_20FE83770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE83784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE83798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE837AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20FE73008((void **)va);
  _Unwind_Resume(a1);
}

void sub_20FE837C0(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;

  v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v16);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  v6 = v16 - v5;
  if (v16 > v5)
  {
    sub_20FE78D44(a2, v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return;
    goto LABEL_16;
  }
  if (v16 >= v5)
  {
    v7 = *a2;
    v10 = v4 - v7;
    if (v4 == v7)
      return;
    goto LABEL_16;
  }
  v11 = (uint64_t)&(*a2)[24 * v16];
  while (v4 != (char *)v11)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v4 -= 24;
  }
  a2[1] = (char *)v11;
  v7 = *a2;
  v10 = v11 - (_QWORD)v7;
  if ((char *)v11 != v7)
  {
LABEL_16:
    v15 = 24 * (v10 / 24);
    do
    {
      v17 = 1;
      (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 104))(a1, &v17);
      sub_20FE8392C(a1, v7, v17);
      v7 += 24;
      v15 -= 24;
    }
    while (v15);
  }
}

void sub_20FE8392C(uint64_t a1, _WORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  char *v53;
  char *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69[2];
  void *v70;
  void *v71[2];
  uint64_t v72;
  __int128 v73;
  void *__p[2];
  void *v75;
  void *v76;
  _DWORD *v77;

  __p[0] = a2;
  sub_20FE82B30((_BYTE *)a1, (_WORD **)__p);
  switch(*a2)
  {
    case 0:
      LOBYTE(__p[0]) = 7;
      LOBYTE(__p[1]) = 7;
      v4 = operator new(4uLL);
      v75 = v4;
      *v4 = 0;
      v76 = v4 + 1;
      v77 = v4 + 1;
      v5 = *(_QWORD *)a1;
      v69[0] = *(void **)(a1 + 8);
      LODWORD(v71[0]) = 2;
      (*(void (**)(uint64_t, void **))(v5 + 104))(a1, v71);
      if (SLODWORD(v69[0]) < 1)
      {
        if (LODWORD(v71[0]) < 2)
        {
          sub_20FE17C30((uint64_t)v71, (_BYTE *)a1, (uint64_t)__p);
        }
        else
        {
          v71[0] = __p;
          sub_20FE180CC((_BYTE *)a1, (_BYTE **)v71);
          sub_20FE17DB4(LOBYTE(__p[0]), a1, (uint64_t)__p);
        }
      }
      else
      {
        sub_20FE178E8((int *)v69, (_BYTE *)a1, __p, v71[0]);
      }
      sub_20EA67BE0((uint64_t)v71, (uint64_t)&__p[1]);
      v73 = *(_OWORD *)v71;
      sub_20FE7999C(v69, (uint64_t)&v73);
      v59 = *(_OWORD *)v69;
      v69[0] = 0;
      v69[1] = 0;
      v60 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v59;
      if (v60)
      {
        p_shared_owners = (unint64_t *)&v60->__shared_owners_;
        do
          v62 = __ldaxr(p_shared_owners);
        while (__stlxr(v62 - 1, p_shared_owners));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
      {
        v64 = (unint64_t *)((char *)v69[1] + 8);
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
          std::__shared_weak_count::__release_weak(v63);
        }
      }
      v66 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (v75)
      {
        v76 = v75;
        operator delete(v75);
      }
      return;
    case 1:
      __p[0] = 0;
      __p[1] = 0;
      v75 = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
      sub_20EA5E4B8((uint64_t)__p, (CFStringRef *)v69);
      sub_20FE79AAC(v71, (uint64_t)v69);
      v6 = *(_OWORD *)v71;
      v71[0] = 0;
      v71[1] = 0;
      v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v6;
      if (v7)
      {
        v8 = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v11 = (unint64_t *)((char *)v71[1] + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = (std::__shared_weak_count *)v69[1];
      if (v69[1])
      {
        v14 = (unint64_t *)((char *)v69[1] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (SHIBYTE(v75) < 0)
        operator delete(__p[0]);
      return;
    case 2:
      LOBYTE(v69[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, v69);
      sub_20EA5E3C8(v69, (std::__shared_weak_count_vtbl **)v71);
      sub_20FE79BBC(__p, (uint64_t)v71);
      v16 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v17 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v16;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v20 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v21 = (unint64_t *)((char *)__p[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)v71[1];
      if (!v71[1])
        return;
      v24 = (unint64_t *)((char *)v71[1] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      break;
    case 3:
      v71[0] = 0;
      v71[1] = 0;
      v72 = 0;
      sub_20FE837C0(a1, (char **)v71);
      __p[1] = 0;
      v75 = 0;
      __p[0] = 0;
      sub_20EA647CC((uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v71[1] - (char *)v71[0]) >> 3));
      sub_20FE841F8((uint64_t)v71[0], (uint64_t)v71[1], (uint64_t)__p);
      *(_OWORD *)v69 = *(_OWORD *)__p;
      v70 = v75;
      sub_20FE7A054((uint64_t *)v69, (CFMutableArrayRef *)&v73);
      sub_20FE79CCC(__p, (uint64_t)&v73);
      v26 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v27 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v26;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v31 = (unint64_t *)((char *)__p[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
      if (*((_QWORD *)&v73 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = (char *)v69[0];
      if (v69[0])
      {
        v37 = (char *)v69[1];
        v38 = v69[0];
        if (v69[1] != v69[0])
        {
          do
          {
            v39 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
            if (v39)
            {
              v40 = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v37 -= 16;
          }
          while (v37 != v36);
          v38 = v69[0];
        }
        v69[1] = v36;
        operator delete(v38);
      }
      v53 = (char *)v71[0];
      if (v71[0])
      {
        v54 = (char *)v71[1];
        v55 = v71[0];
        if (v71[1] != v71[0])
        {
          do
          {
            v56 = (std::__shared_weak_count *)*((_QWORD *)v54 - 1);
            if (v56)
            {
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v54 -= 24;
          }
          while (v54 != v53);
          v55 = v71[0];
        }
        v71[1] = v53;
        operator delete(v55);
      }
      return;
    case 4:
      __p[1] = 0;
      v75 = 0;
      __p[0] = &__p[1];
      sub_20EA65708(__p, v71);
      *(_OWORD *)v69 = *(_OWORD *)v71;
      sub_20E866BE0((uint64_t)__p, (char *)__p[1]);
      LODWORD(__p[0]) = 1;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 104))(a1, __p);
      sub_20FE834A8(a1, (uint64_t)v69);
      sub_20FDD58F4(v71, (uint64_t)v69);
      sub_20FE79DDC(__p, (uint64_t)v71);
      v42 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v43 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
      *(_OWORD *)(a2 + 4) = v42;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v47 = (unint64_t *)((char *)__p[1] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v50 = (unint64_t *)((char *)v71[1] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v23 = (std::__shared_weak_count *)v69[1];
      if (!v69[1])
        return;
      v52 = (unint64_t *)((char *)v69[1] + 8);
      do
        v25 = __ldaxr(v52);
      while (__stlxr(v25 - 1, v52));
      break;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_21023DDB0);
      abort();
  }
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_20FE840C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_20E86665C((uint64_t)&a17);
  if (!__p)
    _Unwind_Resume(a1);
  a22 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE841F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 24)
    {
      sub_20EA6144C(&v15, i + 8);
      sub_20EA6144C(&v17, (uint64_t)&v15);
      v6 = *(_OWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        v8 = sub_20EA648C4((char **)a3, (uint64_t)&v17);
        v9 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
        *(_QWORD *)(a3 + 8) = v8;
        if (!v9)
          goto LABEL_11;
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
          v7 = v16;
          if (v16)
          {
LABEL_12:
            v12 = (unint64_t *)&v7->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
        }
        else
        {
LABEL_11:
          v7 = v16;
          if (v16)
            goto LABEL_12;
        }
      }
      else
      {
        *v6 = v17;
        v17 = 0uLL;
        *(_QWORD *)(a3 + 8) = v6 + 1;
        v7 = v16;
        if (v16)
          goto LABEL_12;
      }
    }
  }
  return a3;
}

void sub_20FE84330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE8434C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE84360(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  char **v8;
  char *v9[2];
  __int128 v10;

  v9[0] = 0;
  v9[1] = 0;
  v8 = v9;
  sub_20EA65708(&v8, &v10);
  v7 = v10;
  sub_20E866BE0((uint64_t)&v8, v9[0]);
  sub_20FE8152C(a1, (uint64_t)&v7);
  sub_20FE783DC(a2, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_20FE8441C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  sub_20E866BE0((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void sub_20FE84434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FE84478@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24CA0A4E0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 88) = 0;
  if (*(_BYTE *)(a1 + 88))
  {
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(v4 + 88) = 1;
  }
  *(_BYTE *)(v4 + 96) = 0;
  *(_BYTE *)(v4 + 120) = 0;
  if (*(_BYTE *)(a1 + 120))
  {
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(a1 + 96);
    *(_QWORD *)(v4 + 112) = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_BYTE *)(v4 + 120) = 1;
  }
  *(_BYTE *)(v4 + 160) = 0;
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a1 + 128);
  *(_QWORD *)(v4 + 144) = *(_QWORD *)(a1 + 144);
  *(_BYTE *)(v4 + 208) = 0;
  if (*(_BYTE *)(a1 + 208))
  {
    *(_OWORD *)(v4 + 160) = *(_OWORD *)(a1 + 160);
    *(_QWORD *)(v4 + 176) = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    v6 = (unsigned __int128 *)(a1 + 192);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 192) = v7;
    *(_BYTE *)(v4 + 208) = 1;
  }
  *(_BYTE *)(v4 + 224) = 0;
  *(_BYTE *)(v4 + 248) = 0;
  if (*(_BYTE *)(a1 + 248))
  {
    *(_OWORD *)(v4 + 224) = *(_OWORD *)(a1 + 224);
    *(_QWORD *)(v4 + 240) = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_BYTE *)(v4 + 248) = 1;
  }
  *(_QWORD *)v4 = &off_24CA0A460;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FE84618(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE84634(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0A4E0;
  sub_20EB0580C((uint64_t)(a1 + 6));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE846AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0A4E0;
  sub_20EB0580C((uint64_t)(a1 + 6));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE84724(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_20FE8472C(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t i;
  uint64_t v11;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA0A4A0, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = a1[3];
      if (v5 != *(_QWORD *)(result + 24))
        return 0;
      v6 = (unsigned __int8 *)a1[4];
      v7 = *(unsigned __int8 **)(result + 32);
      v8 = &v6[v5];
      v9 = &v7[v5];
      if (v5)
      {
        for (i = v5 - 1; ; --i)
        {
          v11 = i;
          if (*v6 != *v7)
            break;
          ++v6;
          ++v7;
          if (!v11)
          {
            v7 = v9;
            v6 = v8;
            return v6 == v8 && v7 == v9;
          }
        }
        return 0;
      }
      return v6 == v8 && v7 == v9;
    }
  }
  return result;
}

void sub_20FE847F4(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FE858C8();
  sub_20FE848A8(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 48, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FE8488C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE848A8(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56E18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56E18))
  {
    v4 = sub_20FE856CC();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A56E00, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A56E10 = *(_QWORD *)(v9 - 8);
      xmmword_254A56E00 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56E00, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56E18);
  }
  return sub_20FE85C88(&xmmword_254A56E00, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_20FE849B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A56E18);
  _Unwind_Resume(a1);
}

void sub_20FE849D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56E18);
  _Unwind_Resume(a1);
}

void sub_20FE849F0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 9;
}

void sub_20FE84A1C(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 9, a2);
}

_QWORD *sub_20FE84A54(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0A4E0;
  sub_20EB0580C((uint64_t)(a1 + 6));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE84ACC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0A4E0;
  sub_20EB0580C((uint64_t)(a1 + 6));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE84B44(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FE85168();
  return sub_20FE84C98(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 48, (uint64_t)"}");
}

uint64_t sub_20FE84B9C(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FE84EC4((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v5, v2);
  return result;
}

void sub_20FE84C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FE84C6C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FE84C98(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FE84EC4((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FE84E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE84E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE84E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE84E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE84E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE84E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE84EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE84EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_2100BA3B0((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20FE85114(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FE85138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE85154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE85168()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56CD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56CD8))
    return &xmmword_254A56CC0;
  v2 = sub_20FE85244();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A56CC0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A56CD0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A56CC0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56CC0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56CD8);
  return &xmmword_254A56CC0;
}

void sub_20FE8522C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56CD8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE85244()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56CF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56CF8))
    return &stru_254A56CE0;
  sub_20FE854E8((uint64_t)__p);
  sub_20FE85334((char *)__p, &stru_254A56CE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56CE0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56CF8);
  return &stru_254A56CE0;
}

void sub_20FE852F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56CF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56CF8);
  _Unwind_Resume(a1);
}

void sub_20FE85334(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FE856CC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FE85498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FE854E8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A56D78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A56D78))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Blob>]", qword_254A56D60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56D60, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56D78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A56D98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A56D98))
  {
    v5 = sub_20E8A2354(qword_254A56D60, "<", 0);
    sub_20E89FC08(qword_254A56D60, 0, v5, qword_254A56D80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56D80, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56D98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A56DB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A56DB8))
  {
    sub_21023CD84((uint64_t)qword_254A56D80, (uint64_t)&xmmword_254A56DA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56DA0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56DB8);
  }
  if (byte_254A56DB7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A56DA0, *((unint64_t *)&xmmword_254A56DA0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A56DA0;
    *(_QWORD *)(a1 + 16) = unk_254A56DB0;
  }
}

void sub_20FE85684(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56DB8);
  _Unwind_Resume(a1);
}

void sub_20FE8569C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56D98);
  _Unwind_Resume(a1);
}

void sub_20FE856B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56D78);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE856CC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56D18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56D18))
    return &xmmword_254A56D00;
  v2 = (char *)sub_20FE857A8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A56D00, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A56D10 = *((_QWORD *)v2 + 2);
    xmmword_254A56D00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56D00, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56D18);
  return &xmmword_254A56D00;
}

void sub_20FE85790(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56D18);
  _Unwind_Resume(a1);
}

void *sub_20FE857A8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56D38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A56D38))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Blob]", qword_254A56D20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56D20, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56D38);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A56D58);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56D58))
    return &unk_254A56D40;
  sub_21023CD84((uint64_t)qword_254A56D20, (uint64_t)&unk_254A56D40);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A56D40, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56D58);
  return &unk_254A56D40;
}

void sub_20FE85898(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56D58);
  _Unwind_Resume(a1);
}

void sub_20FE858B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56D38);
  _Unwind_Resume(a1);
}

std::string *sub_20FE858C8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A56DD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A56DD8))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20FE856CC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20FE85B90();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A56DC0, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56DC0, &dword_20E81F000);
        __cxa_guard_release(&qword_254A56DD8);
        return &stru_254A56DC0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A56DC0;
}

void sub_20FE85AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A56DD8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A56DD8);
  _Unwind_Resume(a1);
}

std::string *sub_20FE85B90()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56DF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56DF8))
    return &stru_254A56DE0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 9U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A56DE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A56DE0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56DF8);
  return &stru_254A56DE0;
}

void sub_20FE85C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A56DF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A56DF8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE85C88(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FE84EC4((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FE85DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE85DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE85DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE85E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE85E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE85E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  sub_2101FAEA0(a2);
  v14 = "version";
  v15 = 7;
  LODWORD(v16) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v16);
  v6 = *(_QWORD *)(a3 + 8);
  v14 = *(const char **)a3;
  v15 = v6;
  v7 = *(std::__shared_weak_count **)(a3 + 16);
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v17 = *(_OWORD *)(a3 + 24);
  sub_20FE85F88(a2, (uint64_t)&v14);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE85F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE85F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _QWORD *v7;
  BOOL v8;
  BOOL v9;
  void **v10;
  unsigned __int8 *v11;
  int v12;
  void **v13;
  void **v14;
  size_t v15;
  int v16;
  size_t v17;
  void **v18;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "byte_size";
    v4 = a1 + 72;
    v6 = (_BYTE *)(a1 + 88);
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 9;
    v7 = (_QWORD *)(a1 + 80);
    if (!v5)
      *v6 = 1;
    goto LABEL_13;
  }
  v7 = (_QWORD *)(a1 + 80);
  v4 = a1 + 72;
  v6 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v8 = *(_QWORD *)(a1 + 80) == 7;
  else
    v8 = 0;
  if (!v8
    || (**(_DWORD **)v4 == *(_DWORD *)"version"
      ? (v9 = *(_DWORD *)(*(_QWORD *)v4 + 3) == *(_DWORD *)"sion")
      : (v9 = 0),
        !v9))
  {
LABEL_13:
    v10 = *(void ***)a2;
    LOBYTE(v17) = 6;
    v18 = v10;
    v11 = (unsigned __int8 *)sub_2101FAC64(a1);
    v12 = *v11;
    *v11 = 6;
    LOBYTE(v17) = v12;
    v13 = (void **)*((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v18;
    v18 = v13;
    sub_20EB07D94(&v18, v12);
  }
  v15 = *(_QWORD *)(a2 + 24);
  v14 = *(void ***)(a2 + 32);
  if (v15
    && !v14
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = v15;
  v18 = v14;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v16 = *v6;
    *(_QWORD *)v4 = "bytes";
    *v7 = 5;
    if (!v16)
      *v6 = 1;
  }
  sub_2101FB01C(a1, &v17);
}

void sub_20FE8611C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20EB07D94(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE86134(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t *v14[2];
  char v15;

  v4 = *(_QWORD *)a2;
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = *(_OWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v8 + 40))
  {
    v14[0] = (uint64_t *)(v8 + 16);
    sub_20E9F472C(v14, v4);
  }
  else
  {
    sub_20E9F4A34();
  }
  if ((_QWORD)v12
    && !*((_QWORD *)&v12 + 1)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
    v13 = (uint64_t *)(v9 + 16);
    LODWORD(v14[0]) = v12;
    v14[1] = *((uint64_t **)&v12 + 1);
    sub_20E9F2D20((uint64_t)&v15, &v13, (unsigned int *)v14);
  }
  else
  {
    if (v12 > 0xFF)
    {
      if (WORD1(v12))
      {
        LOBYTE(v14[0]) = -58;
        *(_DWORD *)((char *)v14 + 1) = bswap32(v12);
      }
      else
      {
        LOBYTE(v14[0]) = -59;
        *(_WORD *)((char *)v14 + 1) = bswap32(v12) >> 16;
      }
      std::ostream::write();
    }
    else
    {
      LOBYTE(v14[0]) = -60;
      BYTE1(v14[0]) = v12;
      std::ostream::write();
    }
    std::ostream::write();
  }
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20FE86304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE86318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;

  sub_2101FA8A4(a2);
  v14 = "version";
  v15 = 7;
  LODWORD(v16) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v16);
  v6 = *(_QWORD *)(a3 + 8);
  v14 = *(const char **)a3;
  v15 = v6;
  v7 = *(std::__shared_weak_count **)(a3 + 16);
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v17 = *(_OWORD *)(a3 + 24);
  sub_20FE86470(a2, (uint64_t *)&v14);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 56) = v13 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE8642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20FE86470(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _QWORD *v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  int v16;
  size_t v17;
  uint64_t v18;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "byte_size";
    v4 = a1 + 72;
    v6 = (_BYTE *)(a1 + 88);
    v5 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 9;
    v7 = (_QWORD *)(a1 + 80);
    if (!v5)
      *v6 = 1;
    goto LABEL_13;
  }
  v7 = (_QWORD *)(a1 + 80);
  v4 = a1 + 72;
  v6 = (_BYTE *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v8 = *(_QWORD *)(a1 + 80) == 7;
  else
    v8 = 0;
  if (!v8
    || (**(_DWORD **)v4 == *(_DWORD *)"version"
      ? (v9 = *(_DWORD *)(*(_QWORD *)v4 + 3) == *(_DWORD *)"sion")
      : (v9 = 0),
        !v9))
  {
LABEL_13:
    v10 = *a2;
    LOBYTE(v17) = 6;
    v18 = v10;
    v11 = (unsigned __int8 *)sub_2101FA67C(a1);
    v12 = *v11;
    *v11 = 6;
    LOBYTE(v17) = v12;
    v13 = *((_QWORD *)v11 + 1);
    *((_QWORD *)v11 + 1) = v18;
    v18 = v13;
    sub_20EB911C0(&v18, v12);
  }
  v15 = a2[3];
  v14 = a2[4];
  if (v15
    && !v14
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = v15;
  v18 = v14;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v16 = *v6;
    *(_QWORD *)v4 = "bytes";
    *v7 = 5;
    if (!v16)
      *v6 = 1;
  }
  sub_2101FAA20(a1, &v17);
}

void sub_20FE86604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t *v9;

  sub_20EB911C0(v9, a9);
  _Unwind_Resume(a1);
}

void sub_20FE8661C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;

  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v9 = *(_OWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v10) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)&v10, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  if ((_QWORD)v9
    && !*((_QWORD *)&v9 + 1)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v10 = v9;
  sub_20E9E7678(a1, (std::string::size_type *)&v10);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20FE86750(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE86764(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t __src;
  uint64_t v12;
  std::__shared_weak_count *v13;
  __int128 v14;

  v3 = a2[1];
  __src = *a2;
  v12 = v3;
  v4 = (std::__shared_weak_count *)a2[2];
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v14 = *(_OWORD *)(a2 + 3);
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v12, 8);
  v7 = v14;
  if ((_QWORD)v14
    && !*((_QWORD *)&v14 + 1)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), *((char **)&v7 + 1), (char *)(*((_QWORD *)&v7 + 1) + v7), v7);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20FE8688C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE868A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[2];
  std::__shared_weak_count *v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_QWORD *)(a2 + 8);
  v11[0] = *(_QWORD *)a2;
  v11[1] = v3;
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v13 = *(_OWORD *)(a2 + 24);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 120))(a1, v11);
  v7 = v13;
  if ((_QWORD)v13
    && !*((_QWORD *)&v13 + 1)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = v7;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 272))(a1, &v14);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20FE869BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8C2824((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE869D0(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF7D8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DB048(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20FE86ACC((uint64_t)&v11, a1, a2);
  else
    sub_20FE86C38(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20FE86ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_2100B95CC((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20FE86DD4(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE86C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8C2824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE86C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE86C38(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  void *__p;
  char *v17;
  char *v18;
  size_t __sz[2];
  __int128 v20;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "byte_size";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __sz[0] = 0;
  sub_2100DB048(v5, __sz);
  v6 = __sz[0];
  *(_QWORD *)a2 = __sz[0];
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v6);
    v8 = &v7[v6];
    __p = v7;
    v18 = &v7[v6];
    bzero(v7, v6);
    v17 = &v7[v6];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v15[0] = v8 - v7;
  v15[1] = v7;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "bytes";
  *(_QWORD *)(a1 + 96) = 5;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v10 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2101FFBA8(v10, (uint64_t)v15);
  sub_2100B95CC((uint64_t)__sz, (uint64_t)&__p);
  v14 = v20;
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(a2 + 24) = v14;
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE86DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE86DD4(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  void *__p;
  char *v17;
  char *v18;
  size_t __sz[2];
  __int128 v20;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "byte_size";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __sz[0] = 0;
  sub_2100DB048(v5, __sz);
  v6 = __sz[0];
  *(_QWORD *)a2 = __sz[0];
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v6);
    v8 = &v7[v6];
    __p = v7;
    v18 = &v7[v6];
    bzero(v7, v6);
    v17 = &v7[v6];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v15[0] = v8 - v7;
  v15[1] = v7;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "bytes";
  *(_QWORD *)(a1 + 96) = 5;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v10 = (char *)sub_2101FFA90((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2101FFBA8(v10, (uint64_t)v15);
  sub_2100B95CC((uint64_t)__sz, (uint64_t)&__p);
  v14 = v20;
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(a2 + 24) = v14;
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE86F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FE86F70(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  char v8;

  v7 = 2;
  sub_20E9EDADC(a1[6], &v7);
  if (v7 <= 1)
  {
    sub_20FE87048((uint64_t)&v8, (uint64_t)a1, a2);
    return a1;
  }
  else
  {
    sub_20E90A71C(a1 + 2);
    sub_20FE871B4((uint64_t)a1, a2);
    v4 = a1[4];
    v5 = *(_QWORD *)(v4 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v4 - 8);
    if (v5)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v5);
    a1[4] -= 16;
    return a1;
  }
}

void sub_20FE87048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_2100B95CC((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20FE87334(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE87184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8C2824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE87198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE871B4(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::bad_cast *exception;
  std::bad_cast *v12;
  __int128 v13;
  void *__p;
  char *v15;
  char *v16;
  void *__src[2];
  __int128 v18;

  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  v4 = *(_QWORD *)a2;
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v16 = &v5[v4];
    bzero(v5, v4);
    v15 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a1 + 48);
  LODWORD(__src[0]) = 0;
  __src[1] = 0;
  sub_20E9EE5A4(v7, (uint64_t)__src);
  if (v6 - v5 != LODWORD(__src[0]))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v12 = std::bad_cast::bad_cast(exception);
    v12->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v12, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  memcpy(v5, __src[1], v6 - v5);
  sub_2100B95CC((uint64_t)__src, (uint64_t)&__p);
  v13 = v18;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__src;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_OWORD *)(a2 + 24) = v13;
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE87310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE87334(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::bad_cast *exception;
  std::bad_cast *v12;
  __int128 v13;
  void *__p;
  char *v15;
  char *v16;
  void *__src[2];
  __int128 v18;

  sub_20E9EDE6C(*(_QWORD *)(a1 + 48), (_QWORD *)a2);
  v4 = *(_QWORD *)a2;
  v15 = 0;
  v16 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v16 = &v5[v4];
    bzero(v5, v4);
    v15 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(a1 + 48);
  LODWORD(__src[0]) = 0;
  __src[1] = 0;
  sub_20E9EE5A4(v7, (uint64_t)__src);
  if (v6 - v5 != LODWORD(__src[0]))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v12 = std::bad_cast::bad_cast(exception);
    v12->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v12, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  memcpy(v5, __src[1], v6 - v5);
  sub_2100B95CC((uint64_t)__src, (uint64_t)&__p);
  v13 = v18;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__src;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_OWORD *)(a2 + 24) = v13;
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE87490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE874B4(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_2101FF2E8(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_2100DA8B0(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 2)
    v6 = 2;
  else
    v6 = v12;
  if (v6 < 2)
    sub_20FE875B0((uint64_t)&v11, a1, a2);
  else
    sub_20FE8771C(a1, a2);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20FE875B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_2100B95CC((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20FE878B8(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE876EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8C2824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE87700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE8771C(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  void *__p;
  char *v17;
  char *v18;
  size_t __sz[2];
  __int128 v20;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "byte_size";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __sz[0] = 0;
  sub_2100DA8B0(v5, __sz);
  v6 = __sz[0];
  *(_QWORD *)a2 = __sz[0];
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v6);
    v8 = &v7[v6];
    __p = v7;
    v18 = &v7[v6];
    bzero(v7, v6);
    v17 = &v7[v6];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v15[0] = v8 - v7;
  v15[1] = v7;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "bytes";
  *(_QWORD *)(a1 + 96) = 5;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v10 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2101FF6B8(v10, (uint64_t)v15);
  sub_2100B95CC((uint64_t)__sz, (uint64_t)&__p);
  v14 = v20;
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(a2 + 24) = v14;
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE87894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE878B8(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  void *__p;
  char *v17;
  char *v18;
  size_t __sz[2];
  __int128 v20;

  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "byte_size";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  __sz[0] = 0;
  sub_2100DA8B0(v5, __sz);
  v6 = __sz[0];
  *(_QWORD *)a2 = __sz[0];
  __p = 0;
  v17 = 0;
  v18 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v7 = (char *)operator new(v6);
    v8 = &v7[v6];
    __p = v7;
    v18 = &v7[v6];
    bzero(v7, v6);
    v17 = &v7[v6];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v15[0] = v8 - v7;
  v15[1] = v7;
  v9 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "bytes";
  *(_QWORD *)(a1 + 96) = 5;
  if (!v9)
    *(_BYTE *)(a1 + 104) = 1;
  v10 = (char *)sub_2101FF5A0((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_2101FF6B8(v10, (uint64_t)v15);
  sub_2100B95CC((uint64_t)__sz, (uint64_t)&__p);
  v14 = v20;
  v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_OWORD *)(a2 + 24) = v14;
  if (__p)
  {
    v17 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE87A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE87A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_2100B95CC((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20FE87CEC(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE87B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8C2824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE87BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE87BC0(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  void *__p;
  char *v13;
  char *v14;
  _OWORD v15[2];

  sub_20E9E88B4(a1, (_QWORD *)a2);
  v4 = *(_QWORD *)a2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v14 = &v5[v4];
    bzero(v5, v4);
    v13 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v11[0] = v6 - v5;
  v11[1] = v5;
  sub_20E9EA1EC(a1, (uint64_t)v11);
  sub_2100B95CC((uint64_t)v15, (uint64_t)&__p);
  v10 = v15[1];
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15[0];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 24) = v10;
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE87CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE87CEC(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  void *__p;
  char *v13;
  char *v14;
  _OWORD v15[2];

  sub_20E9E88B4(a1, (_QWORD *)a2);
  v4 = *(_QWORD *)a2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v14 = &v5[v4];
    bzero(v5, v4);
    v13 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v11[0] = v6 - v5;
  v11[1] = v5;
  sub_20E9EA1EC(a1, (uint64_t)v11);
  sub_2100B95CC((uint64_t)v15, (uint64_t)&__p);
  v10 = v15[1];
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15[0];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 24) = v10;
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE87DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE87E18(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  char v13;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_20FE87F0C((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_2100B6EE0(a2);
    sub_20FE88078(a2, a3);
    v10 = a2[12];
    v11 = a2[9];
    a2[6] = *(_QWORD *)(v10 - 8) + *(_QWORD *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_20FE87EF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FE87F0C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_2100B95CC((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20FE88294(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE88048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8C2824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE8805C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE88078(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  size_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::logic_error *v16;
  std::logic_error *exception;
  __int128 v18;
  void *__p;
  char *v20;
  char *v21;
  _OWORD v22[2];

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  *(_QWORD *)a2 = v8;
  v9 = a1[6] + 8;
  a1[6] = v9;
  __p = 0;
  v20 = 0;
  v21 = 0;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v10 = (char *)operator new(v8);
    __p = v10;
    v21 = &v10[v8];
    bzero(v10, v8);
    v20 = &v10[v8];
    v11 = a1[7];
    v4 = v11 >= v9;
    v12 = v11 - v9;
    if (!v4)
      v12 = 0;
    if (v12 < v8)
    {
      v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v16, "Not enough data to read binary blob");
      v16->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(v16, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
    }
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  memcpy(v10, (const void *)(a1[3] + v9), v8);
  a1[6] = v8 + v9;
  sub_2100B95CC((uint64_t)v22, (uint64_t)&__p);
  v18 = v22[1];
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v22[0];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_OWORD *)(a2 + 24) = v18;
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE8824C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE88294(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  size_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  size_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::logic_error *v16;
  std::logic_error *exception;
  __int128 v18;
  void *__p;
  char *v20;
  char *v21;
  _OWORD v22[2];

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v2);
  *(_QWORD *)a2 = v8;
  v9 = a1[6] + 8;
  a1[6] = v9;
  __p = 0;
  v20 = 0;
  v21 = 0;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v10 = (char *)operator new(v8);
    __p = v10;
    v21 = &v10[v8];
    bzero(v10, v8);
    v20 = &v10[v8];
    v11 = a1[7];
    v4 = v11 >= v9;
    v12 = v11 - v9;
    if (!v4)
      v12 = 0;
    if (v12 < v8)
    {
      v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v16, "Not enough data to read binary blob");
      v16->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(v16, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
    }
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  memcpy(v10, (const void *)(a1[3] + v9), v8);
  a1[6] = v8 + v9;
  sub_2100B95CC((uint64_t)v22, (uint64_t)&__p);
  v18 = v22[1];
  v13 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v22[0];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_OWORD *)(a2 + 24) = v18;
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE88468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE884B0(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20FE885DC();
      sub_20E9F5C70((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE88944(a2, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20FE887D8((uint64_t)&v13, a2, a3);
  else
    sub_20FE88944(a2, a3);
}

__int128 *sub_20FE885DC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56E38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56E38))
    return &xmmword_254A56E20;
  v2 = (char *)sub_20FE886B8();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A56E20, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A56E30 = *((_QWORD *)v2 + 2);
    xmmword_254A56E20 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A56E20, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56E38);
  return &xmmword_254A56E20;
}

void sub_20FE886A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56E38);
  _Unwind_Resume(a1);
}

void *sub_20FE886B8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A56E58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A56E58))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::BlobSample]", qword_254A56E40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A56E40, &dword_20E81F000);
    __cxa_guard_release(&qword_254A56E58);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A56E78);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A56E78))
    return &unk_254A56E60;
  sub_21023CD84((uint64_t)qword_254A56E40, (uint64_t)&unk_254A56E60);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A56E60, &dword_20E81F000);
  __cxa_guard_release(&qword_254A56E78);
  return &unk_254A56E60;
}

void sub_20FE887A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56E78);
  _Unwind_Resume(a1);
}

void sub_20FE887C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A56E58);
  _Unwind_Resume(a1);
}

void sub_20FE887D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *__p;
  void *v19;
  uint64_t v20;
  _OWORD v21[2];

  v15 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  sub_2100B95CC((uint64_t)v21, (uint64_t)&__p);
  v16 = v21[0];
  v17 = v21[1];
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  sub_20FE88A80(a2, (uint64_t)&v15);
  v5 = v15;
  v6 = v16;
  if (*((_QWORD *)&v16 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v21[0] = v17;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  v9 = *(std::__shared_weak_count **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v6 + 1);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_OWORD *)(a3 + 24) = v21[0];
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20FE88914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E8C2824((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE88928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE88944(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  void *__p;
  char *v13;
  char *v14;
  _OWORD v15[2];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = *(_QWORD *)a2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v14 = &v5[v4];
    bzero(v5, v4);
    v13 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v11[0] = v6 - v5;
  v11[1] = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 272))(a1, v11);
  sub_2100B95CC((uint64_t)v15, (uint64_t)&__p);
  v10 = v15[1];
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15[0];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 24) = v10;
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE88A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE88A80(uint64_t a1, uint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  void *__p;
  char *v13;
  char *v14;
  _OWORD v15[2];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = *(_QWORD *)a2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v5 = (char *)operator new(v4);
    v6 = &v5[v4];
    __p = v5;
    v14 = &v5[v4];
    bzero(v5, v4);
    v13 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v11[0] = v6 - v5;
  v11[1] = v5;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 272))(a1, v11);
  sub_2100B95CC((uint64_t)v15, (uint64_t)&__p);
  v10 = v15[1];
  v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v15[0];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_OWORD *)(a2 + 24) = v10;
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE88B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FE88BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BOOL8 v11;
  _QWORD v13[5];
  uint64_t *v14;
  _QWORD v15[5];
  _QWORD *v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = &v23;
  if (!sub_20FF1D2E8((uint64_t)&v17, v15, v13))
    goto LABEL_24;
  if (!*((_BYTE *)v16 + 24) || !*((_BYTE *)v14 + 24))
  {
    if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
      goto LABEL_22;
LABEL_24:
    v11 = 0;
    goto LABEL_25;
  }
  v8 = (unsigned __int8 *)*v16;
  v9 = (unsigned __int8 *)v16[1];
  v10 = (unsigned __int8 *)*v14;
  if (&v9[-*v16] != (unsigned __int8 *)(v14[1] - *v14))
    goto LABEL_24;
  if (v8 != v9)
  {
    while (sub_20FF1C59C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_24;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_24;
  v11 = sub_210230694((unsigned __int8 *)(a1 + 208), (_BYTE *)(a2 + 208)) == 0;
LABEL_25:
  sub_20EB0580C((uint64_t)v18);
  sub_20EB0580C((uint64_t)v24);
  return v11;
}

void sub_20FE88DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE88DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE88DE8(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FE891F4(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FE894F4(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FE89774(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FE89A74(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FE89C8C(&v9, (uint64_t)a1);
          else
            sub_20FE88F4C(&v8, a1);
        }
      }
    }
  }
}

void sub_20FE88F4C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = v3 + 200;
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FE13CA0(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE13CA0(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FE891F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FE0F6A8(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE894F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FE10708(a2, (char *)(v3 + 200));
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FE89774(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FE11878(a2, v3 + 200);
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20FE89A74(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FE12998(a2, v3 + 200);
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FE89C8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FE13158(a2, v3 + 200);
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FE89E44(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FE8A4E8(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FE8A998(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FE8AE24(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FE8B2D4(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FE8B930(&v9, a1);
          else
            sub_20FE89FA8(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20FE89FA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  char v28;
  _BYTE *v29[27];
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v29);
    sub_20FDE470C((uint64_t)&v30, (uint64_t *)v29);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v30);
        if (!v45)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v8;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v36;
    v10 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v11;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v12;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(_QWORD *)(v3 + 176) = v44;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v43;
    if (!(_QWORD)v43)
      goto LABEL_46;
    v15 = *((_QWORD *)&v43 + 1);
    v16 = (void *)v43;
    if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v43;
LABEL_45:
    *((_QWORD *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v29);
  sub_20FDE470C((uint64_t)&v30, (uint64_t *)v29);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v17 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v17;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v36;
    v19 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v20 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v20;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v21 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v21;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(_QWORD *)(v3 + 176) = v44;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v30);
  if (v45)
  {
LABEL_38:
    v14 = v43;
    if (!(_QWORD)v43)
      goto LABEL_46;
    v23 = *((_QWORD *)&v43 + 1);
    v16 = (void *)v43;
    if (*((_QWORD *)&v43 + 1) == (_QWORD)v43)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  sub_20EB0580C((uint64_t)v29);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v29[0] = *(_BYTE **)(a2 + 8);
  v25 = (int)v29[0];
  LODWORD(v30) = 6;
  (*(void (**)(uint64_t, uint64_t *))(v24 + 104))(a2, &v30);
  if (v25 < 1)
  {
    if (v30 < 3)
      sub_20FDF69C0((uint64_t)&v30, a2, v4, v30);
    else
      sub_20FDF6C34(a2, v4, v30);
  }
  else
  {
    sub_20FDF63C8((int *)v29, a2, v4, v30);
  }
  v26 = *(_QWORD *)a2;
  v30 = *(_QWORD *)(a2 + 8);
  v27 = v30;
  LODWORD(v29[0]) = 2;
  (*(void (**)(uint64_t, _BYTE **))(v26 + 104))(a2, v29);
  if (v27 < 1)
  {
    if (LODWORD(v29[0]) < 2)
    {
      sub_20FE17C30((uint64_t)v29, (_BYTE *)a2, v3 + 200);
    }
    else
    {
      v29[0] = (_BYTE *)(v3 + 200);
      sub_20FE180CC((_BYTE *)a2, v29);
      sub_20FE17DB4(*(unsigned __int8 *)(v3 + 200), a2, v3 + 200);
    }
  }
  else
  {
    sub_20FE178E8((int *)&v30, (_BYTE *)a2, (_BYTE *)(v3 + 200), v29[0]);
  }
}

void sub_20FE8A4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8A4E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FE14024((uint64_t)v27, a2, (_BYTE *)(v3 + 200));
}

void sub_20FE8A950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8A998(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_20E9EDADC(a2[6], v25);
  sub_20FE14DFC((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_20FE8ADDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8AE24(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FE155D4((uint64_t)v27, a2, (_BYTE *)(v3 + 200));
}

void sub_20FE8B28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8B2D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  void *__p;
  uint64_t v36;
  char v37;
  _BYTE v38[8];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v38, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v38);
        if (!v53)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v34, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v39;
    *(_BYTE *)(v3 + 64) = 0;
    if (v42)
    {
      v8 = v41;
      *(_OWORD *)(v3 + 40) = v40;
      *(_QWORD *)(v3 + 56) = v8;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v44;
    v10 = v43;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v47)
    {
      v11 = v46;
      *(_OWORD *)(v3 + 96) = v45;
      *(_QWORD *)(v3 + 112) = v11;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v50)
    {
      v12 = v49;
      *(_OWORD *)(v3 + 128) = v48;
      *(_QWORD *)(v3 + 144) = v12;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v53;
    if (v53)
    {
      *(_OWORD *)(v3 + 160) = v51;
      *(_QWORD *)(v3 + 176) = v52;
      v51 = 0uLL;
      v52 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v51;
    if (!(_QWORD)v51)
      goto LABEL_46;
    v15 = *((_QWORD *)&v51 + 1);
    v16 = (void *)v51;
    if (*((_QWORD *)&v51 + 1) == (_QWORD)v51)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v51;
LABEL_45:
    *((_QWORD *)&v51 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v38, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v34, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v39;
    *(_BYTE *)(v3 + 64) = 0;
    if (v42)
    {
      v17 = v41;
      *(_OWORD *)(v3 + 40) = v40;
      *(_QWORD *)(v3 + 56) = v17;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v44;
    v19 = v43;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v47)
    {
      v20 = v46;
      *(_OWORD *)(v3 + 96) = v45;
      *(_QWORD *)(v3 + 112) = v20;
      v45 = 0uLL;
      v46 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v50)
    {
      v21 = v49;
      *(_OWORD *)(v3 + 128) = v48;
      *(_QWORD *)(v3 + 144) = v21;
      v48 = 0uLL;
      v49 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v53;
    if (v53)
    {
      *(_OWORD *)(v3 + 160) = v51;
      *(_QWORD *)(v3 + 176) = v52;
      v51 = 0uLL;
      v52 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v38);
  if (v53)
  {
LABEL_38:
    v14 = v51;
    if (!(_QWORD)v51)
      goto LABEL_46;
    v23 = *((_QWORD *)&v51 + 1);
    v16 = (void *)v51;
    if (*((_QWORD *)&v51 + 1) == (_QWORD)v51)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v50 && SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  if (v47 && SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v37 < 0)
      {
        if (v36 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v31 = 0;
          if (v37 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v37 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v31 = 1;
      if (v37 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v30 = 0;
      else
        v30 = v31;
    }
    while ((v30 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20E9E840C(a2, &__p);
  v26 = (_BYTE *)(v3 + 200);
  v27 = __p;
  if (__p >= 2)
    v28 = 2;
  else
    v28 = __p;
  if (v28 < 2)
  {
    sub_20FE163AC((uint64_t)&__p, a2, (uint64_t)v26);
  }
  else
  {
    LOBYTE(__p) = 0;
    sub_20E9E7AC8(a2, &__p);
    v29 = __p;
    *v26 = (_BYTE)__p;
    sub_20FE16530(v29, a2, (uint64_t)v26);
  }
  if (v27 >= 2 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v37 < 0)
      {
        if (v36 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          v33 = 0;
          if (v37 < 0)
            goto LABEL_102;
          goto LABEL_88;
        }
      }
      else if (v37 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      v33 = 1;
      if (v37 < 0)
LABEL_102:
        operator delete(__p);
LABEL_88:
      if (*(_BYTE *)(a2 + 131))
        v32 = 0;
      else
        v32 = v33;
    }
    while ((v32 & 1) != 0);
  }
}

void sub_20FE8B8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8B930(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FE16AC0((uint64_t)v25, a2, (_BYTE *)(v3 + 200));
}

void sub_20FE8BD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FE8BDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20FF1D2E8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20FF1C59C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_2100C3D24(v12, (uint64_t)&v18);
LABEL_27:
  sub_20EB0580C((uint64_t)v25);
  sub_20EB0580C((uint64_t)v31);
  return v14;
}

void sub_20FE8BFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE8BFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE8BFFC(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FE8C408(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FE8C708(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FE8C988(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FE8CC88(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FE8CEA0(&v9, (uint64_t)a1);
          else
            sub_20FE8C160(&v8, a1);
        }
      }
    }
  }
}

void sub_20FE8C160(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FE1C544(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE1C544(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FE8C408(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FE19E30(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE8C708(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(*(_QWORD *)(a2 + 24));
  sub_20FE1A6FC(a2, (__int128 *)(v3 + 200));
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FE8C988(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FE1B050(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20FE8CC88(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FE1B91C(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FE8CEA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FE1C0F0(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FE8D058(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FE8D694(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FE8DB44(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FE8DFD0(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FE8E480(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FE8E9DC(&v9, a1);
          else
            sub_20FE8D1BC(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20FE8D1BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v27[0] = *(_QWORD *)(a2 + 8);
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20FDF69C0((uint64_t)&v28, a2, v4, v28);
    else
      sub_20FDF6C34(a2, v4, v28);
  }
  else
  {
    sub_20FDF63C8((int *)v27, a2, v4, v28);
  }
  v27[0] = *(_QWORD *)(a2 + 8);
  sub_20FE271BC((int *)v27, (_BYTE *)a2, (_BYTE *)(v3 + 200));
}

void sub_20FE8D64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8D694(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FE1CBB4((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FE8DAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8DB44(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_20E9EDADC(a2[6], v25);
  sub_20FE1ED08((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_20FE8DF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8DFD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FE20B3C((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FE8E438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8E480(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)__p);
    sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)__p);
  sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20EB0580C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20E9E840C(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20FDF3288((uint64_t)__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  sub_20FE22C90((uint64_t)__p, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FE8E994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE8E9DC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FE24AEC((uint64_t)v25, a2, v3 + 200);
}

void sub_20FE8EE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FE8EE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20FF1D2E8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20FF1C59C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_2100C3D24(v12, (uint64_t)&v18);
LABEL_27:
  sub_20EB0580C((uint64_t)v25);
  sub_20EB0580C((uint64_t)v31);
  return v14;
}

void sub_20FE8F078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE8F094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE8F0A8(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FE8F4B4(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FE8F7B4(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FE8FA34(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FE8FD34(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FE8FF4C(&v9, (uint64_t)a1);
          else
            sub_20FE8F20C(&v8, a1);
        }
      }
    }
  }
}

void sub_20FE8F20C(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FE2C260(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE2C260(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FE8F4B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FE292C8(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE8F7B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = a2[3];
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FE1036C((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = a2[3];
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FE10250((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[3];
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FDE75BC((uint64_t)a2, v4, 6u);
  }
  v9 = a2[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = a2[3];
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(a2[3]);
  sub_20FE29F40(a2, (__int128 *)(v3 + 200));
  v15 = a2[3];
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FE8FA34(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FE2A8FC(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20FE8FD34(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FE2B574(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FE8FF4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FE2BDB0(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FE90104(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FE90740(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FE90C98(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FE91124(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FE9167C(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FE91BD8(&v9, a1);
          else
            sub_20FE90268(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20FE90268(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v27[0] = *(_QWORD *)(a2 + 8);
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20FDF69C0((uint64_t)&v28, a2, v4, v28);
    else
      sub_20FDF6C34(a2, v4, v28);
  }
  else
  {
    sub_20FDF63C8((int *)v27, a2, v4, v28);
  }
  v27[0] = *(_QWORD *)(a2 + 8);
  sub_20FE3AEE4((int *)v27, (_BYTE *)a2, (_BYTE *)(v3 + 200));
}

void sub_20FE906F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE90740(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v33);
    sub_20FDE470C((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v33);
  sub_20FDE470C((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_2100DB048(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20FE2C938(a2, (unsigned __int8 *)(v3 + 200), v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20FE90C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE90C98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_20E9EDADC(a2[6], v25);
  sub_20FE2FC00((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_20FE910DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE91124(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v33);
    sub_20FDE470C((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v33);
  sub_20FDE470C((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_2100DA8B0(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20FE323B8(a2, (unsigned __int8 *)(v3 + 200), v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20FE91634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE9167C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)__p);
    sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)__p);
  sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20EB0580C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20E9E840C(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20FDF3288((uint64_t)__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  sub_20FE35680((uint64_t)__p, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FE91B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE91BD8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FE37E60((uint64_t)v25, a2, v3 + 200);
}

void sub_20FE92004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FE9204C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20FF1D2E8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20FF1C59C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_2100C3D24(v12, (uint64_t)&v18);
LABEL_27:
  sub_20EB0580C((uint64_t)v25);
  sub_20EB0580C((uint64_t)v31);
  return v14;
}

void sub_20FE92274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE92290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE922A4(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FE926B0(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FE929B0(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FE92C30(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FE92F30(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FE93148(&v9, (uint64_t)a1);
          else
            sub_20FE92408(&v8, a1);
        }
      }
    }
  }
}

void sub_20FE92408(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 2;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FE4244C(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 2;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE4244C(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FE926B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FE3F4B4(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE929B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = a2[3];
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FE1036C((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = a2[3];
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FE10250((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[3];
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FDE75BC((uint64_t)a2, v4, 6u);
  }
  v9 = a2[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = a2[3];
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(a2[3]);
  sub_20FE4012C(a2, (__int128 *)(v3 + 200));
  v15 = a2[3];
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FE92C30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FE40AE8(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

_QWORD *sub_20FE92F30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FE41760(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FE93148(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FE41F9C(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FE93300(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FE9393C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FE93E94(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FE94320(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FE94878(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FE94DD4(&v9, a1);
          else
            sub_20FE93464(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20FE93464(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27[27];
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)&v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)&v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v27[0] = *(_QWORD *)(a2 + 8);
  v25 = v27[0];
  v28 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v24 + 104))(a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3)
      sub_20FDF69C0((uint64_t)&v28, a2, v4, v28);
    else
      sub_20FDF6C34(a2, v4, v28);
  }
  else
  {
    sub_20FDF63C8((int *)v27, a2, v4, v28);
  }
  v27[0] = *(_QWORD *)(a2 + 8);
  sub_20FE51A10((int *)v27, (_BYTE *)a2, (_BYTE *)(v3 + 200));
}

void sub_20FE938F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE9393C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v33);
    sub_20FDE470C((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v33);
  sub_20FDE470C((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_2100DB048(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20FE42B24(a2, (unsigned __int8 *)(v3 + 200), v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20FE93E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE93E94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_20E9EDADC(a2[6], v25);
  sub_20FE45FBC((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_20FE942D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE94320(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *exception;
  char v32;
  uint64_t v33[27];
  _BYTE v34[8];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v33);
    sub_20FDE470C((uint64_t)v34, v33);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v34);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v33);
  sub_20FDE470C((uint64_t)v34, v33);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)v33);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  v26 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v26)
    *(_BYTE *)(a2 + 104) = 1;
  v27 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v33[0] = 0;
  sub_2100DA8B0(v27, v33);
  if (HIDWORD(v33[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  if (LODWORD(v33[0]) >= 2)
    v28 = 2;
  else
    v28 = v33[0];
  sub_20FE48954(a2, (unsigned __int8 *)(v3 + 200), v28);
  v29 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v29 - 8);
  v30 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(a2 + 48) = v29 - 8;
  *(_QWORD *)(a2 + 72) = v30 - 8;
}

void sub_20FE94830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE94878(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  char v28;
  void *__p[2];
  char v30;
  _BYTE v31[8];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)__p);
    sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v28, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)__p);
  sub_20FDE470C((uint64_t)v31, (uint64_t *)__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v28, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20EB0580C((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_20E9E840C(a2, __p);
  v24 = __p[0];
  if (LODWORD(__p[0]) >= 6)
    v25 = 6;
  else
    v25 = __p[0];
  if (v25 < 3)
    sub_20FDF3288((uint64_t)__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          v27 = 0;
          if (v30 < 0)
            goto LABEL_79;
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      v27 = 1;
      if (v30 < 0)
LABEL_79:
        operator delete(__p[0]);
LABEL_65:
      if (*(_BYTE *)(a2 + 131))
        v26 = 0;
      else
        v26 = v27;
    }
    while ((v26 & 1) != 0);
  }
  sub_20FE4BDEC((uint64_t)__p, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FE94D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE94DD4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FE4E7AC((uint64_t)v25, a2, v3 + 200);
}

void sub_20FE95200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FE95248@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24CA0AC80;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24CA0AC00;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FE953E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FE953FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0AC80;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE95474(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0AC80;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE954EC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20FE954F4(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA0AC40, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_2100C3D24(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_20FE9559C(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FE96880();
  sub_20FE95650(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FE95634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE95650(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A57398);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A57398))
  {
    v4 = sub_20FE964D0();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A57380, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A57390 = *(_QWORD *)(v9 - 8);
      xmmword_254A57380 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57380, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57398);
  }
  return sub_20FE96C40(&xmmword_254A57380, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)"}");
}

void sub_20FE95760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A57398);
  _Unwind_Resume(a1);
}

void sub_20FE95780(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57398);
  _Unwind_Resume(a1);
}

void sub_20FE95798(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 12;
}

void sub_20FE957C4(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 12, a2);
}

_QWORD *sub_20FE957FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0AC80;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FE95874(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0AC80;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FE958EC(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FE95F6C();
  return sub_20FE95A40(v2, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20FE95944(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FE95C6C((uint64_t)v5, (uint64_t)v2, (unsigned __int8 **)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v5, v2);
  return result;
}

void sub_20FE959DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FE95A14(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FE95A40(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FE95C6C((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FE95BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE95BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE95C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE95C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE95C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE95C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE95C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE95C6C(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD *v23[5];
  _QWORD *v24;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v24 = (_QWORD *)v5;
  v6 = sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  LOBYTE(v23[0]) = **a3;
  v7 = sub_21022F254(v6, v23);
  sub_20E86A980(v7, (uint64_t)",", 1);
  v23[0] = (_QWORD *)(v5 + 16);
  sub_2100BC5FC(**a3, a3, v23);
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_14;
    }
    v13 = *(const void **)(v5 + 40);
    v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_13:
    memmove(v10, v13, v9);
LABEL_14:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v24;
  if (v24)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v24 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v16 + 16);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  v23[0] = (_QWORD *)a2;
  v23[1] = __dst;
  v23[2] = (_QWORD *)a2;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_20E877AB8();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v20])(&v24, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_20FE95F18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FE95F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE95F58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FD0DE48((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

__int128 *sub_20FE95F6C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57218);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57218))
    return &xmmword_254A57200;
  v2 = sub_20FE96048();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A57200, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A57210 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A57200 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57200, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57218);
  return &xmmword_254A57200;
}

void sub_20FE96030(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57218);
  _Unwind_Resume(a1);
}

std::string *sub_20FE96048()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57238);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57238))
    return &stru_254A57220;
  sub_20FE962EC((uint64_t)__p);
  sub_20FE96138((char *)__p, &stru_254A57220);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A57220, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57238);
  return &stru_254A57220;
}

void sub_20FE960F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A57238);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A57238);
  _Unwind_Resume(a1);
}

void sub_20FE96138(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FE964D0();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FE9629C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FE962EC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A572F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A572F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Lines<2>>]", qword_254A572E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A572E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A572F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A57318);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A57318))
  {
    v5 = sub_20E8A2354(qword_254A572E0, "<", 0);
    sub_20E89FC08(qword_254A572E0, 0, v5, qword_254A57300);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57300, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57318);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A57338);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A57338))
  {
    sub_21023CD84((uint64_t)qword_254A57300, (uint64_t)&xmmword_254A57320);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57320, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57338);
  }
  if (byte_254A57337 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A57320, *((unint64_t *)&xmmword_254A57320 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A57320;
    *(_QWORD *)(a1 + 16) = unk_254A57330;
  }
}

void sub_20FE96488(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57338);
  _Unwind_Resume(a1);
}

void sub_20FE964A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57318);
  _Unwind_Resume(a1);
}

void sub_20FE964B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A572F8);
  _Unwind_Resume(a1);
}

__int128 *sub_20FE964D0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57258);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57258))
    return &xmmword_254A57240;
  v2 = sub_20FE965AC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A57240, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A57250 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A57240 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57240, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57258);
  return &xmmword_254A57240;
}

void sub_20FE96594(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57258);
  _Unwind_Resume(a1);
}

std::string *sub_20FE965AC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57278);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57278))
    return &stru_254A57260;
  sub_20FE9669C((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A57260);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A57260, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57278);
  return &stru_254A57260;
}

void sub_20FE9665C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A57278);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A57278);
  _Unwind_Resume(a1);
}

void sub_20FE9669C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A57298);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A57298))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Lines<2>]", qword_254A57280);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57280, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57298);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A572B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A572B8))
  {
    v5 = sub_20E8A2354(qword_254A57280, "<", 0);
    sub_20E89FC08(qword_254A57280, 0, v5, qword_254A572A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A572A0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A572B8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A572D8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A572D8))
  {
    sub_21023CD84((uint64_t)qword_254A572A0, (uint64_t)&xmmword_254A572C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A572C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A572D8);
  }
  if (byte_254A572D7 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A572C0, *((unint64_t *)&xmmword_254A572C0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A572C0;
    *(_QWORD *)(a1 + 16) = unk_254A572D0;
  }
}

void sub_20FE96838(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A572D8);
  _Unwind_Resume(a1);
}

void sub_20FE96850(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A572B8);
  _Unwind_Resume(a1);
}

void sub_20FE96868(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57298);
  _Unwind_Resume(a1);
}

std::string *sub_20FE96880()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A57358);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A57358))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20FE964D0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20FE96B48();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A57340, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A57340, &dword_20E81F000);
        __cxa_guard_release(&qword_254A57358);
        return &stru_254A57340;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A57340;
}

void sub_20FE96A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A57358);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A57358);
  _Unwind_Resume(a1);
}

std::string *sub_20FE96B48()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57378);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57378))
    return &stru_254A57360;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 12U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A57360);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A57360, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57378);
  return &stru_254A57360;
}

void sub_20FE96C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A57378);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A57378);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE96C40(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FE95C6C((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FE96D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE96D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE96DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE96DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FE96DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20FE96DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20FF1D2E8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20FF1C59C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_2100C3D24(v12, (uint64_t)&v18);
LABEL_27:
  sub_20EB0580C((uint64_t)v25);
  sub_20EB0580C((uint64_t)v31);
  return v14;
}

void sub_20FE97010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE9702C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FE97040(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FE9744C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FE98D1C(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FE99958(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FE9B228(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FE9BC7C(&v9, (uint64_t)a1);
          else
            sub_20FE971A4(&v8, a1);
        }
      }
    }
  }
}

void sub_20FE971A4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FE9C2E4(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE9C2E4(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FE9744C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FE9774C(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE9774C(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20FE0FEA4(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2101FAC64(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20EB07D94(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "lines2";
    *v11 = 6;
    if (!v16)
      *v10 = 1;
  }
  sub_2101FAEA0(a1);
  sub_20FE979AC(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20FE97978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20EB07D94(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE97998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20FE979AC(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_20FE97AD4(v4);
      break;
    case 1:
      result = sub_20FE97CA8(v4);
      break;
    case 2:
      result = sub_20FE97E7C(v4);
      break;
    case 3:
      result = sub_20FE98050(v4);
      break;
    case 5:
      result = sub_20FE98224(v4);
      break;
    case 6:
      result = sub_20FE983F8(v4);
      break;
    case 7:
      result = sub_20FE985CC(v4);
      break;
    case 8:
      result = sub_20FE987A0(v4);
      break;
    case 11:
      result = sub_20FE98974(v4);
      break;
    case 12:
      result = sub_20FE98B48(v4);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

unsigned __int8 **sub_20FE97AD4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 0);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FB01C(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 2;
      sub_2101FB01C(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 4;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FB01C(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 2;
    sub_2101FB01C(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 4;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE97CA8(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 1);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FDBC4(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 4;
      sub_2101FDBC4(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 8;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FDBC4(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 4;
    sub_2101FDBC4(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 8;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE97E7C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 2);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FDE34(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_2101FDE34(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FDE34(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_2101FDE34(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE98050(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 3);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FE314(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_2101FE314(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FE314(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_2101FE314(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE98224(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 5);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FD954(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 2;
      sub_2101FD954(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 4;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FD954(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 2;
    sub_2101FD954(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 4;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE983F8(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 6);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FDA8C(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 4;
      sub_2101FDA8C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 8;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FDA8C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 4;
    sub_2101FDA8C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 8;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE985CC(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 7);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FDCFC(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_2101FDCFC(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FDCFC(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_2101FDCFC(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE987A0(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FE1DC(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_2101FE1DC(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FE1DC(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_2101FE1DC(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE98974(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 11);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FE8F4(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_2101FE8F4(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FE8F4(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_2101FE8F4(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE98B48(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 12);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FEC64(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_2101FEC64(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FEC64(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_2101FEC64(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

void sub_20FE98D1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = a2[3];
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FE1036C((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = a2[3];
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FE10250((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[3];
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FDE75BC((uint64_t)a2, v4, 6u);
  }
  v9 = a2[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = a2[3];
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(a2[3]);
  sub_20FE98F9C(a2, (__int128 *)(v3 + 200));
  v15 = a2[3];
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FE98F9C(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_20E9F3164(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20E9F472C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20E9F4A34();
  }
  v15 = xmmword_24CA08420;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_20FE99100(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20FE990EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FE99100(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_20E9F3164((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20E9ED4BC(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_20E9F3D4C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_20E9F3FC0((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20E9F472C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_20E9F4A34();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20E9F301C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_20E9F32A8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_20E9F356C();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_20E9F3834((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_20E9F3C50();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_20E9F40B0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20E9F45EC();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_20E9F4B2C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_20E9F4C08((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FE99958(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FE99C58(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FE99C58(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20FE12074(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2101FA67C(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20EB911C0(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "lines2";
    *v11 = 6;
    if (!v16)
      *v10 = 1;
  }
  sub_2101FA8A4(a1);
  sub_20FE99EB8(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20FE99E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20EB911C0(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE99EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20FE99EB8(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_20FE99FE0(v4);
      break;
    case 1:
      result = sub_20FE9A1B4(v4);
      break;
    case 2:
      result = sub_20FE9A388(v4);
      break;
    case 3:
      result = sub_20FE9A55C(v4);
      break;
    case 5:
      result = sub_20FE9A730(v4);
      break;
    case 6:
      result = sub_20FE9A904(v4);
      break;
    case 7:
      result = sub_20FE9AAD8(v4);
      break;
    case 8:
      result = sub_20FE9ACAC(v4);
      break;
    case 11:
      result = sub_20FE9AE80(v4);
      break;
    case 12:
      result = sub_20FE9B054(v4);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

unsigned __int8 **sub_20FE99FE0(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 0);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FAA20(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 2;
      sub_2101FAA20(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 4;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FAA20(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 2;
    sub_2101FAA20(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 4;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE9A1B4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 1);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FBAD4(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 4;
      sub_2101FBAD4(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 8;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FBAD4(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 4;
    sub_2101FBAD4(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 8;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE9A388(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 2);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FBD44(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_2101FBD44(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FBD44(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_2101FBD44(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE9A55C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 3);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FC224(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_2101FC224(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FC224(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_2101FC224(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE9A730(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 5);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FB864(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 2;
      sub_2101FB864(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 4;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FB864(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 2;
    sub_2101FB864(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 4;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE9A904(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 6);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FB99C(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 4;
      sub_2101FB99C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 8;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FB99C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 4;
    sub_2101FB99C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 8;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE9AAD8(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 7);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FBC0C(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_2101FBC0C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FBC0C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_2101FBC0C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE9ACAC(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FC0EC(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_2101FC0EC(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FC0EC(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_2101FC0EC(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE9AE80(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 11);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FC804(v10, (float **)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 8;
      sub_2101FC804(v11, (float **)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 16;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FC804(v7, (float **)&v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 8;
    sub_2101FC804(v8, (float **)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 16;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FE9B054(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 12);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 2;
      v14 = v4;
      sub_2101FCC24(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 2;
      v14 = v4 + 16;
      sub_2101FCC24(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 32;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 2;
    v14 = v4;
    sub_2101FCC24(v7, &v13);
    v8 = a1[1];
    v13 = 2;
    v14 = v4 + 16;
    sub_2101FCC24(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 32;
    --v6;
  }
  while (v6);
  return result;
}

_QWORD *sub_20FE9B228(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FE9B440(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FE9B440(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_20E9E6F58(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24CA08420;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_20FE9B560(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FE9B54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FE9B560(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_20E9E6F58(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_20E86A980(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_20E86A980(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_20E86A980(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_20E9E6D74(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_20E86A980(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_20E86A980(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_20E86A980(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_20E86A980(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_20E86A980(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE9BC7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FE9BE34(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FE9BE34(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24CA08420;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_20FE9BF58(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FE9BF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20FE9BF58(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0)|| (v8 = a2[1], sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_2100B8FD4(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_2100B8FD4(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FE9C2E4(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_20FE13EEC(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24CA08420;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_20FE9C3E0(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FE9C3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20FE9C3E0(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE9C9BC(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FE9D070(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FE9F438(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEA0C4C(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEA3014(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEA4900(&v9, a1);
          else
            sub_20FE9CB20(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20FE9CB20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _BYTE *v30[26];
  _BYTE v31[24];
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 __p;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v30);
    sub_20FDE470C((uint64_t)v31, (uint64_t *)v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v31);
        if (!v45)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(uint64_t *, uint64_t))off_24CA08120[v6])(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v31[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v8;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v36;
    v10 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v11;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v12;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = __p;
      *(_QWORD *)(v3 + 176) = v44;
      __p = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = __p;
    if (!(_QWORD)__p)
      goto LABEL_46;
    v15 = *((_QWORD *)&__p + 1);
    v16 = (void *)__p;
    if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)__p;
LABEL_45:
    *((_QWORD *)&__p + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v30);
  sub_20FDE470C((uint64_t)v31, (uint64_t *)v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(uint64_t *, uint64_t))off_24CA08120[v7])(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v31[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v17 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v17;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v36;
    v19 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v20 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v20;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v21 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v21;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = __p;
      *(_QWORD *)(v3 + 176) = v44;
      __p = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v31);
  if (v45)
  {
LABEL_38:
    v14 = __p;
    if (!(_QWORD)__p)
      goto LABEL_46;
    v23 = *((_QWORD *)&__p + 1);
    v16 = (void *)__p;
    if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  sub_20EB0580C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v30[0] = *(_BYTE **)(a2 + 8);
  v25 = (int)v30[0];
  *(_DWORD *)v31 = 6;
  (*(void (**)(uint64_t, _BYTE *))(v24 + 104))(a2, v31);
  if (v25 < 1)
  {
    if (*(_DWORD *)v31 < 3u)
      sub_20FDF69C0((uint64_t)v31, a2, v4, *(unsigned int *)v31);
    else
      sub_20FDF6C34(a2, v4, *(unsigned int *)v31);
  }
  else
  {
    sub_20FDF63C8((int *)v30, a2, v4, *(unsigned int *)v31);
  }
  v26 = *(_QWORD *)a2;
  v29 = *(_QWORD *)(a2 + 8);
  v27 = v29;
  LODWORD(v30[0]) = 1;
  (*(void (**)(uint64_t, _BYTE **))(v26 + 104))(a2, v30);
  if (v27 < 1)
  {
    v30[0] = (_BYTE *)(v3 + 200);
    sub_20FE180CC((_BYTE *)a2, v30);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, v3 + 208);
    *(_OWORD *)v31 = xmmword_24CA08420;
    v28 = *(unsigned __int8 *)(v3 + 200);
    v30[0] = (_BYTE *)(v3 + 200);
    v30[1] = (_BYTE *)a2;
    v30[2] = v31;
    sub_20FEA6A34(v28, v30);
  }
  else
  {
    sub_20FEA6584((int *)&v29, (_BYTE *)a2, (_BYTE *)(v3 + 200));
  }
}

void sub_20FE9D028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE9D070(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FE9D520((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FE9D4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FE9D520(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _BYTE *v14;

  sub_2101FF7D8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DB048(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v14 = a3;
  sub_20FE14780((uint64_t *)a2, &v14);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DB048(v9, &v14);
  *((_QWORD *)a3 + 1) = v14;
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "lines2";
  *(_QWORD *)(a2 + 96) = 6;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  sub_20FE9D6B0(*a3, (uint64_t)a3, a2);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 48) = v11 - 16;
  *(_QWORD *)(a2 + 72) = v12 - 16;
}

void sub_20FE9D6B0(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FE9D7D8(v3);
      break;
    case 1:
      sub_20FE9DA90(v3);
      break;
    case 2:
      sub_20FE9DD54(v3);
      break;
    case 3:
      sub_20FE9E01C(v3);
      break;
    case 5:
      sub_20FE9E354(v3);
      break;
    case 6:
      sub_20FE9E60C(v3);
      break;
    case 7:
      sub_20FE9E8D0(v3);
      break;
    case 8:
      sub_20FE9EB98(v3);
      break;
    case 11:
      sub_20FE9EED0(v3);
      break;
    case 12:
      sub_20FE9F184(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE9D7D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 4 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 2;
    do
    {
      sub_2101FF7D8((uint64_t)v6);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v8 = (uint64_t *)a1[1], v23 = 2, v24 = (char *)__p + v7 - 2, v9 = (char *)sub_2101FFA90(v8), ++v8[14], sub_2101FFBA8(v9, (uint64_t)&v23), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 2;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_2101FFA90(v10);
      ++v10[14];
      sub_2101FFBA8(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v23, 0, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if ((*(_BYTE *)(v23 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20FE9DA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9DA90(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v19 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 4;
    do
    {
      sub_2101FF7D8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 4, v6 = (char *)sub_2101FFA90(v5), ++v5[14], sub_210200D0C(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200D0C(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v20, 1, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FE9DCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9DD54(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(16 * v2);
    v19 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 8;
    do
    {
      sub_2101FF7D8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 8, v6 = (char *)sub_2101FFA90(v5), ++v5[14], sub_210200E84(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200E84(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v20, 2, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FE9DFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9E01C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(32 * v2);
    v23 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF7D8((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_2101FFA90(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_2102039C8(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_2101FFA90(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_2102039C8(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 16], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v24, 3, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if ((v24[56] & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20FE9E2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9E354(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 4 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 2;
    do
    {
      sub_2101FF7D8((uint64_t)v6);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v8 = (uint64_t *)a1[1], v23 = 2, v24 = (char *)__p + v7 - 2, v9 = (char *)sub_2101FFA90(v8), ++v8[14], sub_210200B2C(v9, (uint64_t)&v23), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 2;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_2101FFA90(v10);
      ++v10[14];
      sub_210200B2C(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v23, 5, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if ((*(_BYTE *)(v23 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20FE9E5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9E60C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(8 * v2);
    v19 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 4;
    do
    {
      sub_2101FF7D8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 4, v6 = (char *)sub_2101FFA90(v5), ++v5[14], sub_210200C1C(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200C1C(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v20, 6, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FE9E868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9E8D0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(16 * v2);
    v19 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 8;
    do
    {
      sub_2101FF7D8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 8, v6 = (char *)sub_2101FFA90(v5), ++v5[14], sub_210200DC8(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200DC8(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v20, 7, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FE9EB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9EB98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(32 * v2);
    v23 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF7D8((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_2101FFA90(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_21020368C(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_2101FFA90(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_21020368C(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 16], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v24, 8, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if ((v24[56] & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20FE9EE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9EED0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(16 * v2);
    v21 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 8;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF7D8((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v6 = (uint64_t *)a1[1], v7 = sub_2101FFA90(v6), ++v6[14], sub_210201290(v7, (float *)&v5[v3 - 8]), (v8 = (char *)__p) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_2101FFA90(v9);
      ++v9[14];
      sub_210201290(v10, (float *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v22, 11, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20FE9F11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9F184(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(32 * v2);
    v21 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 16;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF7D8((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v6 = (uint64_t *)a1[1], v7 = sub_2101FFA90(v6), ++v6[14], sub_210201398(v7, (double *)&v5[v3 - 16]), (v8 = (char *)__p) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_2101FFA90(v9);
      ++v9[14];
      sub_210201398(v10, (double *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v22, 12, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20FE9F3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE9F438(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v26);
    sub_20FDE470C((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v26);
  sub_20FDE470C((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20EB0580C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 1;
  sub_20E9EDADC(a2[6], v26);
  return sub_20FE9F8C4((uint64_t)v26, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FE9F87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FE9F8C4(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  v5 = a2 + 2;
  sub_20E90A71C(a2 + 2);
  LOBYTE(v10[0]) = 0;
  sub_20E9ED7B4(a2[6], v10);
  *a3 = v10[0];
  sub_20E9EDE6C(a2[6], (_QWORD *)a3 + 1);
  v11 = xmmword_24CA08420;
  v6 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_20FE9F98C(v6, v10);
  v7 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v9 = *(_QWORD *)(v7 - 16) - result + *(_QWORD *)(v7 - 8);
  if (v9)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v9);
  a2[4] -= 16;
  return result;
}

void sub_20FE9F98C(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FE9FA34(a2);
      break;
    case 1:
      sub_20FE9FBF4(a2);
      break;
    case 2:
      sub_20FE9FDC4(a2);
      break;
    case 3:
      sub_20FE9FF98(a2);
      break;
    case 5:
      sub_20FEA016C(a2);
      break;
    case 6:
      sub_20FEA032C(a2);
      break;
    case 7:
      sub_20FEA04FC(a2);
      break;
    case 8:
      sub_20FEA06D0(a2);
      break;
    case 11:
      sub_20FEA08A4(a2);
      break;
    case 12:
      sub_20FEA0A78(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FE9FA34(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = operator new(4 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED7B4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FE9FB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9FBF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED948(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE9FD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9FDC4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDADC(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FE9FF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FE9FF98(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDE6C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA016C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = operator new(4 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED704(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FEA02CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA032C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED898(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA049C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA04FC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDA2C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA0670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA06D0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDD84(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA0844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA08A4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDF48(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA0A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA0A78(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EE078(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA0BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA0C4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FEA10FC((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FEA10B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEA10FC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _BYTE *v14;

  sub_2101FF2E8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DA8B0(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v14 = a3;
  sub_20FE15D30((uint64_t *)a2, &v14);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DA8B0(v9, &v14);
  *((_QWORD *)a3 + 1) = v14;
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "lines2";
  *(_QWORD *)(a2 + 96) = 6;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  sub_20FEA128C(*a3, (uint64_t)a3, a2);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 48) = v11 - 16;
  *(_QWORD *)(a2 + 72) = v12 - 16;
}

void sub_20FEA128C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FEA13B4(v3);
      break;
    case 1:
      sub_20FEA166C(v3);
      break;
    case 2:
      sub_20FEA1930(v3);
      break;
    case 3:
      sub_20FEA1BF8(v3);
      break;
    case 5:
      sub_20FEA1F30(v3);
      break;
    case 6:
      sub_20FEA21E8(v3);
      break;
    case 7:
      sub_20FEA24AC(v3);
      break;
    case 8:
      sub_20FEA2774(v3);
      break;
    case 11:
      sub_20FEA2AAC(v3);
      break;
    case 12:
      sub_20FEA2D60(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEA13B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 4 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 2;
    do
    {
      sub_2101FF2E8((uint64_t)v6);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v8 = (uint64_t *)a1[1], v23 = 2, v24 = (char *)__p + v7 - 2, v9 = (char *)sub_2101FF5A0(v8), ++v8[14], sub_2101FF6B8(v9, (uint64_t)&v23), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 2;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_2101FF5A0(v10);
      ++v10[14];
      sub_2101FF6B8(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v23, 0, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if ((*(_BYTE *)(v23 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20FEA1604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA166C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0)
      sub_20E867F44();
    __p = operator new(8 * v2);
    v19 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 4;
    do
    {
      sub_2101FF2E8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 4, v6 = (char *)sub_2101FF5A0(v5), ++v5[14], sub_2101FFF00(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFF00(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v20, 1, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEA18C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA1930(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(16 * v2);
    v19 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 8;
    do
    {
      sub_2101FF2E8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 8, v6 = (char *)sub_2101FF5A0(v5), ++v5[14], sub_210200078(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_210200078(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v20, 2, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEA1B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA1BF8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(32 * v2);
    v23 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF2E8((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_2101FF5A0(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_210201FF0(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_2101FF5A0(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_210201FF0(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 16], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v24, 3, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if ((v24[56] & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20FEA1EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA1F30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 4 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 2;
    do
    {
      sub_2101FF2E8((uint64_t)v6);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v8 = (uint64_t *)a1[1], v23 = 2, v24 = (char *)__p + v7 - 2, v9 = (char *)sub_2101FF5A0(v8), ++v8[14], sub_2101FFD20(v9, (uint64_t)&v23), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 2;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_2101FF5A0(v10);
      ++v10[14];
      sub_2101FFD20(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v23, 5, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if ((*(_BYTE *)(v23 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20FEA2180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA21E8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(8 * v2);
    v19 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 4;
    do
    {
      sub_2101FF2E8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 4, v6 = (char *)sub_2101FF5A0(v5), ++v5[14], sub_2101FFE10(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFE10(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v20, 6, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEA2444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA24AC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(16 * v2);
    v19 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 8;
    do
    {
      sub_2101FF2E8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 2, v21 = (char *)__p + v4 - 8, v6 = (char *)sub_2101FF5A0(v5), ++v5[14], sub_2101FFFBC(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 2;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFFBC(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v20, 7, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if ((*(_BYTE *)(v20 + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEA270C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA2774(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(32 * v2);
    v23 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF2E8((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_2101FF5A0(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_210201934(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_2101FF5A0(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_210201934(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 16], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v24, 8, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if ((v24[56] & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20FEA2A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA2AAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(16 * v2);
    v21 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 8;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF2E8((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v6 = (uint64_t *)a1[1], v7 = sub_2101FF5A0(v6), ++v6[14], sub_2102004AC(v7, (float *)&v5[v3 - 8]), (v8 = (char *)__p) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_2101FF5A0(v9);
      ++v9[14];
      sub_2102004AC(v10, (float *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v22, 11, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20FEA2CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA2D60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(32 * v2);
    v21 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 16;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF2E8((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v6 = (uint64_t *)a1[1], v7 = sub_2101FF5A0(v6), ++v6[14], sub_2102005DC(v7, (double *)&v5[v3 - 16]), (v8 = (char *)__p) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_2101FF5A0(v9);
      ++v9[14];
      sub_2102005DC(v10, (double *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v22, 12, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20FEA2FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA3014(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *__p;
  uint64_t v33;
  _BYTE *v34;
  _BYTE v35[24];
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v35, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v35);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v35, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v35);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          v30 = 0;
          if (SHIBYTE(v34) < 0)
            goto LABEL_95;
          goto LABEL_81;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      v30 = 1;
      if (SHIBYTE(v34) < 0)
LABEL_95:
        operator delete(__p);
LABEL_81:
      if (*(_BYTE *)(a2 + 131))
        v29 = 0;
      else
        v29 = v30;
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_20E9E840C(a2, &__p);
  LOBYTE(__p) = 0;
  sub_20E9E7AC8(a2, &__p);
  *(_BYTE *)(v3 + 200) = (_BYTE)__p;
  sub_20E9E88B4(a2, (_QWORD *)(v3 + 208));
  *(_OWORD *)v35 = xmmword_24CA08420;
  v26 = *(unsigned __int8 *)(v3 + 200);
  __p = (void *)(v3 + 200);
  v33 = a2;
  v34 = v35;
  sub_20FEA3668(v26, &__p);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          v28 = 0;
          if (SHIBYTE(v34) < 0)
            goto LABEL_80;
          goto LABEL_66;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      v28 = 1;
      if (SHIBYTE(v34) < 0)
LABEL_80:
        operator delete(__p);
LABEL_66:
      if (*(_BYTE *)(a2 + 131))
        v27 = 0;
      else
        v27 = v28;
    }
    while ((v27 & 1) != 0);
  }
}

void sub_20FEA3620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEA3668(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FEA3710(a2);
      break;
    case 1:
      sub_20FEA38CC(a2);
      break;
    case 2:
      sub_20FEA3A98(a2);
      break;
    case 3:
      sub_20FEA3C68(a2);
      break;
    case 5:
      sub_20FEA3E38(a2);
      break;
    case 6:
      sub_20FEA3FF4(a2);
      break;
    case 7:
      sub_20FEA41C0(a2);
      break;
    case 8:
      sub_20FEA4390(a2);
      break;
    case 11:
      sub_20FEA4560(a2);
      break;
    case 12:
      sub_20FEA4730(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEA3710(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = operator new(4 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7AC8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FEA386C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA38CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7F64(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA3A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA3A98(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E840C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA3C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA3C68(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E88B4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA3DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA3E38(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v14 = 0;
  v15 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = operator new(4 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7880(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if ((*(_BYTE *)(v16[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FEA3F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA3FF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7D10(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA4160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA41C0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E81B8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA4330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA4390(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8660(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA4500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA4560(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E8D84(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA46D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA4730(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8FD8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA48A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA4900(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FEA4D74((uint64_t)v25, a2, v3 + 200);
}

void sub_20FEA4D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEA4D74(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  sub_20FEA4E44(a2, a3);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20FEA4E30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEA4E44(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24CA08420;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20FEA4F44(v5, v10);
}

void sub_20FEA4F1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEA4F30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEA4F44(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FEA4FEC(a2);
      break;
    case 1:
      sub_20FEA520C(a2);
      break;
    case 2:
      sub_20FEA5434(a2);
      break;
    case 3:
      sub_20FEA5660(a2);
      break;
    case 5:
      sub_20FEA588C(a2);
      break;
    case 6:
      sub_20FEA5AAC(a2);
      break;
    case 7:
      sub_20FEA5CD4(a2);
      break;
    case 8:
      sub_20FEA5F00(a2);
      break;
    case 11:
      sub_20FEA612C(a2);
      break;
    case 12:
      sub_20FEA6358(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEA4FEC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1DF0(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA519C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA520C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2134(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA53C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA5434(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C247C(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA55F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA5660(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C27C4(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA581C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA588C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = (char *)operator new(4 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1C50(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if ((*(_BYTE *)(v22[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA5A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA5AAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C1F90(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA5C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA5CD4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C22D8(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA5E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA5F00(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2620(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA60BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA612C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2968(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA62E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA6358(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2B0C(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if ((*(_BYTE *)(v23[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA6514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA6584(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v5;
  int v7;
  unsigned int v8;
  __int128 *v9;
  _BYTE *v10[3];
  __int128 v11;

  v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v10[0]) = 1;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v10);
    if (LODWORD(v10[0]) >= 2)
    {
      v8 = v10[0];
      v9 = sub_20FEA6684();
      sub_20E9F5C70((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  v10[0] = a3;
  sub_20FE180CC(a2, v10);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v11 = xmmword_24CA08420;
  v7 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_20FEA6A34(v7, v10);
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FEA6684()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A573B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A573B8))
    return &xmmword_254A573A0;
  v2 = sub_20FEA6760();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A573A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A573B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A573A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A573A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A573B8);
  return &xmmword_254A573A0;
}

void sub_20FEA6748(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A573B8);
  _Unwind_Resume(a1);
}

std::string *sub_20FEA6760()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A573D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A573D8))
    return &stru_254A573C0;
  sub_20FEA6850((uint64_t)__p);
  sub_20EB0B20C((char *)__p, &stru_254A573C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A573C0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A573D8);
  return &stru_254A573C0;
}

void sub_20FEA6810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A573D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A573D8);
  _Unwind_Resume(a1);
}

void sub_20FEA6850(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A573F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A573F8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::LinesSample<2>]", qword_254A573E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A573E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A573F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A57418);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A57418))
  {
    v5 = sub_20E8A2354(qword_254A573E0, "<", 0);
    sub_20E89FC08(qword_254A573E0, 0, v5, qword_254A57400);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57400, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57418);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A57438);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A57438))
  {
    sub_21023CD84((uint64_t)qword_254A57400, (uint64_t)&xmmword_254A57420);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57420, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57438);
  }
  if (byte_254A57437 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A57420, *((unint64_t *)&xmmword_254A57420 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A57420;
    *(_QWORD *)(a1 + 16) = unk_254A57430;
  }
}

void sub_20FEA69EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57438);
  _Unwind_Resume(a1);
}

void sub_20FEA6A04(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57418);
  _Unwind_Resume(a1);
}

void sub_20FEA6A1C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A573F8);
  _Unwind_Resume(a1);
}

void sub_20FEA6A34(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FEA6ADC(a2);
      break;
    case 1:
      sub_20FEA6C84(a2);
      break;
    case 2:
      sub_20FEA6E40(a2);
      break;
    case 3:
      sub_20FEA7000(a2);
      break;
    case 5:
      sub_20FEA71C0(a2);
      break;
    case 6:
      sub_20FEA7368(a2);
      break;
    case 7:
      sub_20FEA7524(a2);
      break;
    case 8:
      sub_20FEA76E4(a2);
      break;
    case 11:
      sub_20FEA78A4(a2);
      break;
    case 12:
      sub_20FEA7A64(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEA6ADC(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1DF0(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA6C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA6C84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA6DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA6E40(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA6FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA7000(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA7160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA71C0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v13 = 0;
  v14 = 0;
  __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = (char *)operator new(4 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1C50(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if ((*(_BYTE *)(v15[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA7308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA7368(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 8 * v2;
    v5 = (char *)operator new(8 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA74C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA7524(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA7684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA76E4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA7844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA78A4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 16 * v2;
    v5 = (char *)operator new(16 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA7A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA7A64(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v3 = 4 * v2;
  v16 = 0;
  v17 = 0;
  __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 32 * v2;
    v5 = (char *)operator new(32 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if ((*(_BYTE *)(v18[0] + 56) & 3) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEA7BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FEA7C24@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_24CA0AEF0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 72) = 0;
  if (*(_BYTE *)(a1 + 72))
  {
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(v4 + 72) = 1;
  }
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 104) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    *(_OWORD *)(v4 + 80) = *(_OWORD *)(a1 + 80);
    *(_QWORD *)(v4 + 96) = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 112) = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(v4 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(v4 + 192) = 0;
  if (*(_BYTE *)(a1 + 192))
  {
    *(_OWORD *)(v4 + 144) = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(v4 + 160) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v6 = (unsigned __int128 *)(a1 + 176);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *(_OWORD *)(v4 + 176) = v7;
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 232) = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    *(_OWORD *)(v4 + 208) = *(_OWORD *)(a1 + 208);
    *(_QWORD *)(v4 + 224) = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_QWORD *)v4 = &off_24CA0AE70;
  *a2 = &off_24CA0C0E8;
  a2[1] = v4;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[2] = result;
  return result;
}

void sub_20FEA7DBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20FEA7DD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0AEF0;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FEA7E50(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0AEF0;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEA7EC8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20FEA7ED0(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  char v10;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24CA0AEB0, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = result;
      v6 = (unsigned __int8 *)a1[1];
      v7 = *v6;
      v8 = *(unsigned __int8 **)(v5 + 8);
      if (v7 == *v8)
      {
        v9[0] = &v10;
        v9[1] = v6;
        v9[2] = v8;
        return sub_2100C3D24(v7, (uint64_t)v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_20FEA7F78(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20FEA925C();
  sub_20FEA802C(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20FEA8010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEA802C(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A575D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A575D8))
  {
    v4 = sub_20FEA8EAC();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A575C0, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A575D0 = *(_QWORD *)(v9 - 8);
      xmmword_254A575C0 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A575C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A575D8);
  }
  return sub_20FEA961C(&xmmword_254A575C0, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)"}");
}

void sub_20FEA813C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A575D8);
  _Unwind_Resume(a1);
}

void sub_20FEA815C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A575D8);
  _Unwind_Resume(a1);
}

void sub_20FEA8174(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 13;
}

void sub_20FEA81A0(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 13, a2);
}

_QWORD *sub_20FEA81D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0AEF0;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20FEA8250(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24CA0AEF0;
  sub_20EB0580C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20FEA82C8(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20FEA8948();
  return sub_20FEA841C(v2, (uint64_t)"{", (unsigned __int8 **)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20FEA8320(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20FEA8648((uint64_t)v5, (uint64_t)v2, (unsigned __int8 **)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08168[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24CA08150[v3])(v5, v2);
  return result;
}

void sub_20FEA83B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24CA08150[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20FEA83F0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20FEA841C(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20FEA8648((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v16])(&p_dst, &__dst);
  return result;
}

void sub_20FEA85B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA85D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA85E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA85F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA860C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA8620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA8634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA8648(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  size_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__dst[2];
  unint64_t v22;
  _QWORD *v23[5];
  _QWORD *v24;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v24 = (_QWORD *)v5;
  v6 = sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  LOBYTE(v23[0]) = **a3;
  v7 = sub_21022F254(v6, v23);
  sub_20E86A980(v7, (uint64_t)",", 1);
  v23[0] = (_QWORD *)(v5 + 16);
  sub_2100BEEF4(**a3, a3, v23);
  sub_20E86A980((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  v8 = *(_DWORD *)(v5 + 120);
  if ((v8 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(v5 + 112);
    v12 = *(_QWORD *)(v5 + 72);
    if (v11 < v12)
    {
      *(_QWORD *)(v5 + 112) = v12;
      v11 = v12;
    }
    v13 = *(const void **)(v5 + 64);
    v9 = v11 - (_QWORD)v13;
    if (v11 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v8 & 8) == 0)
    {
      v9 = 0;
      HIBYTE(v22) = 0;
      v10 = __dst;
      goto LABEL_14;
    }
    v13 = *(const void **)(v5 + 40);
    v9 = *(_QWORD *)(v5 + 56) - (_QWORD)v13;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v9 >= 0x17)
  {
    v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v14 = v9 | 7;
    v15 = v14 + 1;
    v10 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v9;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_13;
  }
  HIBYTE(v22) = v9;
  v10 = __dst;
  if (v9)
LABEL_13:
    memmove(v10, v13, v9);
LABEL_14:
  *((_BYTE *)v10 + v9) = 0;
  v16 = v24;
  if (v24)
  {
    v17 = MEMORY[0x24BEDB7F0];
    v18 = *MEMORY[0x24BEDB7F0];
    *v24 = *MEMORY[0x24BEDB7F0];
    v19 = *(_QWORD *)(v17 + 72);
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(v17 + 64);
    v16[3] = MEMORY[0x24BEDB848] + 16;
    v16[2] = v19;
    if (*((char *)v16 + 111) < 0)
      operator delete((void *)v16[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v16 + 16);
    MEMORY[0x212BC6398](v16, 0x10B2C40EED050F3);
  }
  v23[0] = (_QWORD *)a2;
  v23[1] = __dst;
  v23[2] = (_QWORD *)a2;
  v23[3] = __dst;
  v23[4] = __dst;
  v20 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v20 == -1)
    sub_20E877AB8();
  v24 = v23;
  ((void (*)(_QWORD **, uint64_t))off_24CA08138[v20])(&v24, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
}

void sub_20FEA88F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20FEA8918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEA8934(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20FD0DE48((uint64_t *)(v1 - 56));
  _Unwind_Resume(a1);
}

__int128 *sub_20FEA8948()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57458);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57458))
    return &xmmword_254A57440;
  v2 = sub_20FEA8A24();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A57440, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A57450 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A57440 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57440, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57458);
  return &xmmword_254A57440;
}

void sub_20FEA8A0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57458);
  _Unwind_Resume(a1);
}

std::string *sub_20FEA8A24()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57478);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57478))
    return &stru_254A57460;
  sub_20FEA8CC8((uint64_t)__p);
  sub_20FEA8B14((char *)__p, &stru_254A57460);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A57460, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57478);
  return &stru_254A57460;
}

void sub_20FEA8AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A57478);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A57478);
  _Unwind_Resume(a1);
}

void sub_20FEA8B14(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20FEA8EAC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20FEA8C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20FEA8CC8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A57538);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A57538))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::con::Lines<3>>]", qword_254A57520);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57520, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57538);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A57558);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A57558))
  {
    v5 = sub_20E8A2354(qword_254A57520, "<", 0);
    sub_20E89FC08(qword_254A57520, 0, v5, qword_254A57540);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57540, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57558);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A57578);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A57578))
  {
    sub_21023CD84((uint64_t)qword_254A57540, (uint64_t)&xmmword_254A57560);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57560, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57578);
  }
  if (byte_254A57577 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A57560, *((unint64_t *)&xmmword_254A57560 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A57560;
    *(_QWORD *)(a1 + 16) = unk_254A57570;
  }
}

void sub_20FEA8E64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57578);
  _Unwind_Resume(a1);
}

void sub_20FEA8E7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57558);
  _Unwind_Resume(a1);
}

void sub_20FEA8E94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57538);
  _Unwind_Resume(a1);
}

__int128 *sub_20FEA8EAC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57498);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57498))
    return &xmmword_254A57480;
  v2 = sub_20FEA8F88();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A57480, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A57490 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A57480 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57480, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57498);
  return &xmmword_254A57480;
}

void sub_20FEA8F70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57498);
  _Unwind_Resume(a1);
}

std::string *sub_20FEA8F88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A574B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A574B8))
    return &stru_254A574A0;
  sub_20FEA9078((uint64_t)__p);
  sub_20F4484C8((char *)__p, &stru_254A574A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A574A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A574B8);
  return &stru_254A574A0;
}

void sub_20FEA9038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A574B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A574B8);
  _Unwind_Resume(a1);
}

void sub_20FEA9078(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A574D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A574D8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::con::Lines<3>]", qword_254A574C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A574C0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A574D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A574F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A574F8))
  {
    v5 = sub_20E8A2354(qword_254A574C0, "<", 0);
    sub_20E89FC08(qword_254A574C0, 0, v5, qword_254A574E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A574E0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A574F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A57518);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A57518))
  {
    sub_21023CD84((uint64_t)qword_254A574E0, (uint64_t)&xmmword_254A57500);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57500, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57518);
  }
  if (byte_254A57517 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A57500, *((unint64_t *)&xmmword_254A57500 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A57500;
    *(_QWORD *)(a1 + 16) = unk_254A57510;
  }
}

void sub_20FEA9214(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57518);
  _Unwind_Resume(a1);
}

void sub_20FEA922C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A574F8);
  _Unwind_Resume(a1);
}

void sub_20FEA9244(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A574D8);
  _Unwind_Resume(a1);
}

std::string *sub_20FEA925C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A57598);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A57598))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20FEA8EAC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20FEA9524();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A57580, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A57580, &dword_20E81F000);
        __cxa_guard_release(&qword_254A57598);
        return &stru_254A57580;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A57580;
}

void sub_20FEA9440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A57598);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A57598);
  _Unwind_Resume(a1);
}

std::string *sub_20FEA9524()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A575B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A575B8))
    return &stru_254A575A0;
  sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 13U]", __p);
  sub_21023CFB0((uint64_t)__p, &stru_254A575A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A575A0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A575B8);
  return &stru_254A575A0;
}

void sub_20FEA95DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A575B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A575B8);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEA961C(__int128 *a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20FEA8648((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24CA08258[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24CA08168[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24CA08150[v11])(&p_dst, &__dst);
  return result;
}

void sub_20FEA975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA9774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA9788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20FEA97B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20FEA97C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  _QWORD v16[5];
  uint64_t *v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  char v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[6];

  v36[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v31);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v31);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v25);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v25);
  }
  v18 = v31;
  v19 = &v32;
  v20 = &v33;
  v21 = &v34;
  v22 = &v35;
  v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  v16[2] = &v27;
  v16[3] = &v28;
  v16[4] = &v29;
  v17 = &v30;
  if (!sub_20FF1D2E8((uint64_t)&v24, &v18, v16))
    goto LABEL_26;
  if (!*((_BYTE *)v23 + 24) || !*((_BYTE *)v17 + 24))
  {
    if ((*((_BYTE *)v23 + 24) != 0) == (*((_BYTE *)v17 + 24) != 0))
      goto LABEL_22;
LABEL_26:
    v14 = 0;
    goto LABEL_27;
  }
  v8 = (unsigned __int8 *)*v23;
  v9 = (unsigned __int8 *)v23[1];
  v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17))
    goto LABEL_26;
  if (v8 != v9)
  {
    while (sub_20FF1C59C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_26;
  if (*(_QWORD *)(a1 + 208) != *(_QWORD *)(a2 + 208))
    goto LABEL_26;
  v11 = *(unsigned __int8 **)(a1 + 216);
  v12 = *v11;
  v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13)
    goto LABEL_26;
  v18 = v16;
  v19 = (uint64_t *)v11;
  v20 = (uint64_t *)v13;
  v14 = sub_2100C3D24(v12, (uint64_t)&v18);
LABEL_27:
  sub_20EB0580C((uint64_t)v25);
  sub_20EB0580C((uint64_t)v31);
  return v14;
}

void sub_20FEA99EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEA9A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEA9A1C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FEA9E28(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FEAB6F8(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FEAC334(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FEADC04(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FEAE658(&v9, (uint64_t)a1);
          else
            sub_20FEA9B80(&v8, a1);
        }
      }
    }
  }
}

void sub_20FEA9B80(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  __int128 *v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    v14 = 4;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v9 = v14;
    if (v8 >= 1)
    {
      if (v8 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE13A54((uint64_t)a2, v4, v9);
      goto LABEL_16;
    }
    sub_20FE13A54((uint64_t)a2, v4, v14);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    v14 = 5;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v11 = v14;
    if (v10 >= 1)
    {
      if (v10 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FE133CC((uint64_t)a2, v4, v11);
      goto LABEL_16;
    }
    sub_20FE133CC((uint64_t)a2, v4, v14);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    v14 = 6;
    (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    v7 = v14;
    if (v6 >= 1)
    {
      if (v6 == 2)
      {
        v14 = 3;
        (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
      sub_20FDEB904((uint64_t)a2, v4, v7);
LABEL_16:
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
      goto LABEL_17;
    }
    sub_20FDEB904((uint64_t)a2, v4, v14);
  }
LABEL_17:
  v12 = (__int128 *)(v3 + 200);
  v13 = a2[2];
  v14 = 1;
  (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
  if (v13 < 1)
  {
    sub_20FEAECC0(a2, v12);
  }
  else
  {
    if (v13 == 2)
    {
      v14 = 1;
      (*(void (**)(_DWORD *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v14);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FEAECC0(a2, v12);
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20FEA9E28(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FAEA0(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FD244(a2, &v18);
  sub_20FEAA128(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEAA128(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  void **v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20FE0FEA4(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = (void **)*((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2101FAC64(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = (void **)*((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20EB07D94(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "lines3";
    *v11 = 6;
    if (!v16)
      *v10 = 1;
  }
  sub_2101FAEA0(a1);
  sub_20FEAA388(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20FEAA354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20EB07D94(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEAA374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20FEAA388(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_20FEAA4B0(v4);
      break;
    case 1:
      result = sub_20FEAA684(v4);
      break;
    case 2:
      result = sub_20FEAA858(v4);
      break;
    case 3:
      result = sub_20FEAAA2C(v4);
      break;
    case 5:
      result = sub_20FEAAC00(v4);
      break;
    case 6:
      result = sub_20FEAADD4(v4);
      break;
    case 7:
      result = sub_20FEAAFA8(v4);
      break;
    case 8:
      result = sub_20FEAB17C(v4);
      break;
    case 11:
      result = sub_20FEAB350(v4);
      break;
    case 12:
      result = sub_20FEAB524(v4);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

unsigned __int8 **sub_20FEAA4B0(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 0);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FB01C(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 3;
      sub_2101FB01C(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 6;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FB01C(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 3;
    sub_2101FB01C(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 6;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAA684(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 1);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FDBC4(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 6;
      sub_2101FDBC4(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 12;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FDBC4(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 6;
    sub_2101FDBC4(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 12;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAA858(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 2);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FDE34(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_2101FDE34(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FDE34(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_2101FDE34(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAAA2C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 3);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FE314(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_2101FE314(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FE314(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_2101FE314(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAAC00(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 5);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FD954(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 3;
      sub_2101FD954(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 6;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FD954(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 3;
    sub_2101FD954(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 6;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAADD4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 6);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FDA8C(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 6;
      sub_2101FDA8C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 12;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FDA8C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 6;
    sub_2101FDA8C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 12;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAAFA8(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 7);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FDCFC(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_2101FDCFC(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FDCFC(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_2101FDCFC(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAB17C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FE1DC(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_2101FE1DC(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FE1DC(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_2101FE1DC(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAB350(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 11);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FE8F4(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_2101FE8F4(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FE8F4(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_2101FE8F4(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAB524(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 12);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FAEA0((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FEC64(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_2101FEC64(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FAEA0((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FEC64(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_2101FEC64(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

void sub_20FEAB6F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = a2[3];
    if (*(_BYTE *)(v7 + 40))
    {
      v20 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v20, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v7 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FE1036C((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = a2[3];
    if (*(_BYTE *)(v8 + 40))
    {
      v20 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v20, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v8 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FE10250((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[3];
    if (*(_BYTE *)(v6 + 40))
    {
      v20 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v20, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v20, v6 + 8);
    }
    sub_20E9EE95C(a2[3]);
    sub_20FDE75BC((uint64_t)a2, v4, 6u);
  }
  v9 = a2[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = a2[3];
  if (*(_BYTE *)(v14 + 40))
  {
    v20 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v20, 1u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v20, v14 + 8);
  }
  sub_20E9EE95C(a2[3]);
  sub_20FEAB978(a2, (__int128 *)(v3 + 200));
  v15 = a2[3];
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v15 + 48), *(_QWORD *)(v15 + 16) - v16 - 9);
  v17 = *(_QWORD *)(v15 + 48);
  if (v17)
    memmove((void *)(*(_QWORD *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  *(_QWORD *)(v15 + 48) = 0;
  v18 = *(_QWORD *)(v15 + 80);
  v19 = *(_QWORD *)(v15 + 88) - 8;
  *(_QWORD *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(_BYTE *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(_BYTE *)(v15 + 40) = 0;
    }
  }
}

void sub_20FEAB978(uint64_t *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14[3];
  __int128 v15;

  v11 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v12 = *((_QWORD *)a2 + 2);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v14[0] = (uint64_t *)(v6 + 16);
    sub_20E9F3164(v14, v11);
  }
  else
  {
    if ((char)v11 < 0)
    {
      LOBYTE(v14[0]) = -52;
      BYTE1(v14[0]) = v11;
    }
    else
    {
      LOBYTE(v14[0]) = v11;
    }
    std::ostream::write();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v14[0] = (uint64_t *)(v7 + 16);
    sub_20E9F472C(v14, *((unint64_t *)&v11 + 1));
  }
  else
  {
    sub_20E9F4A34();
  }
  v15 = xmmword_24CA08430;
  v14[0] = (uint64_t *)&v11;
  v14[1] = a1;
  v14[2] = (uint64_t *)&v15;
  sub_20FEABADC(v11, v14);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20FEABAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20FEABADC(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 *v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(char **)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (!v8)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v9 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v9 + 40))
      {
        for (*(_QWORD *)&v91 = v9 + 16; v7; --v7)
          result = (uint64_t)sub_20E9F3164((uint64_t **)&v91, *v6++);
      }
      else
      {
        for (; v7; --v7)
        {
          v78 = *v6;
          if (v78 < 0)
          {
            LOBYTE(v91) = -52;
            BYTE1(v91) = v78;
          }
          else
          {
            LOBYTE(v91) = *v6;
          }
          result = std::ostream::write();
          ++v6;
        }
      }
      break;
    case 1:
      v10 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v11 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v11 + 40);
      v12 = *(_QWORD *)(v11 + 48);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 2;
      if (v14
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_144;
      }
      v15 = a2[1];
      *(_QWORD *)&v91 = v13 >> 1;
      *((_QWORD *)&v91 + 1) = v12;
      result = sub_20E9ED4BC(*(_QWORD *)(v15 + 24), &v91);
      break;
    case 2:
      v16 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v17 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v17 + 40);
      v18 = *(unsigned int **)(v17 + 48);
      if (v18)
        v20 = 0;
      else
        v20 = v19 >= 4;
      if (v20)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v21 = v19 >> 2;
      v22 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v22 + 40))
      {
        *(_QWORD *)&v91 = v22 + 16;
        if (v19 >= 4)
        {
          v23 = 4 * v21;
          do
          {
            result = (uint64_t)sub_20E9F3D4C((uint64_t **)&v91, *v18++);
            v23 -= 4;
          }
          while (v23);
        }
      }
      else if (v19 >= 4)
      {
        v79 = v22 + 8;
        v80 = 4 * v21;
        do
        {
          result = sub_20E9F3FC0((uint64_t)&v91, v79);
          ++v18;
          v80 -= 4;
        }
        while (v80);
      }
      break;
    case 3:
      v24 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(unint64_t **)(v25 + 48);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 8;
      if (v28)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v29 = v27 >> 3;
      v30 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v30 + 40))
      {
        *(_QWORD *)&v91 = v30 + 16;
        if (v27 >= 8)
        {
          v31 = 8 * v29;
          do
          {
            result = (uint64_t)sub_20E9F472C((uint64_t **)&v91, *v26++);
            v31 -= 8;
          }
          while (v31);
        }
      }
      else if (v27 >= 8)
      {
        v81 = 8 * v29;
        do
        {
          ++v26;
          result = sub_20E9F4A34();
          v81 -= 8;
        }
        while (v81);
      }
      break;
    case 5:
      v32 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v33 = *(_QWORD *)(v32 + 16);
      v35 = *(_QWORD *)(v33 + 40);
      v34 = *(_BYTE **)(v33 + 48);
      if (v34)
        v36 = 1;
      else
        v36 = v35 == 0;
      if (!v36)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v37 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v37 + 40))
      {
        for (*(_QWORD *)&v91 = v37 + 16; v35; --v35)
          result = (uint64_t)sub_20E9F301C((uint64_t **)&v91, (char)*v34++);
      }
      else
      {
        for (; v35; --v35)
        {
          v82 = (char)*v34;
          if (v82 > -33)
          {
            LOBYTE(v91) = *v34;
          }
          else
          {
            LOBYTE(v91) = -48;
            BYTE1(v91) = v82;
          }
          result = std::ostream::write();
          ++v34;
        }
      }
      break;
    case 6:
      v38 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(__int16 **)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 2;
      if (v42)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v43 = v41 >> 1;
      v44 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v44 + 40))
      {
        *(_QWORD *)&v91 = v44 + 16;
        if (v41 >= 2)
        {
          v45 = 2 * v43;
          do
          {
            result = (uint64_t)sub_20E9F32A8((uint64_t **)&v91, *v40++);
            v45 -= 2;
          }
          while (v45);
        }
      }
      else if (v41 >= 2)
      {
        v83 = 2 * v43;
        do
        {
          ++v40;
          result = sub_20E9F356C();
          v83 -= 2;
        }
        while (v83);
      }
      break;
    case 7:
      v46 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v47 = *(_QWORD *)(v46 + 16);
      v49 = *(_QWORD *)(v47 + 40);
      v48 = *(unsigned int **)(v47 + 48);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v51 = v49 >> 2;
      v52 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v52 + 40))
      {
        *(_QWORD *)&v91 = v52 + 16;
        if (v49 >= 4)
        {
          v53 = 4 * v51;
          do
          {
            result = (uint64_t)sub_20E9F3834((uint64_t **)&v91, *v48++);
            v53 -= 4;
          }
          while (v53);
        }
      }
      else if (v49 >= 4)
      {
        v84 = 4 * v51;
        do
        {
          ++v48;
          result = sub_20E9F3C50();
          v84 -= 4;
        }
        while (v84);
      }
      break;
    case 8:
      v54 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v55 = *(_QWORD *)(v54 + 16);
      v57 = *(_QWORD *)(v55 + 40);
      v56 = *(unint64_t **)(v55 + 48);
      if (v56)
        v58 = 0;
      else
        v58 = v57 >= 8;
      if (v58)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v59 = v57 >> 3;
      v60 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v60 + 40))
      {
        *(_QWORD *)&v91 = v60 + 16;
        if (v57 >= 8)
        {
          v61 = 8 * v59;
          do
          {
            result = (uint64_t)sub_20E9F40B0((uint64_t **)&v91, *v56++);
            v61 -= 8;
          }
          while (v61);
        }
      }
      else if (v57 >= 8)
      {
        v85 = 8 * v59;
        do
        {
          ++v56;
          result = sub_20E9F45EC();
          v85 -= 8;
        }
        while (v85);
      }
      break;
    case 11:
      v62 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v63 = *(_QWORD *)(v62 + 16);
      v65 = *(_QWORD *)(v63 + 40);
      v64 = *(unsigned int **)(v63 + 48);
      if (v64)
        v66 = 0;
      else
        v66 = v65 >= 4;
      if (v66)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
          goto LABEL_144;
      }
      v67 = v65 >> 2;
      v68 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v68 + 40))
      {
        *(_QWORD *)&v91 = v68 + 16;
        if (v65 >= 4)
        {
          v69 = 4 * v67;
          do
          {
            result = (uint64_t)sub_20E9F4B2C((uint64_t)&v90, (uint64_t **)&v91, v64++);
            v69 -= 4;
          }
          while (v69);
        }
      }
      else if (v65 >= 4)
      {
        v86 = 4 * v67;
        do
        {
          v87 = *v64;
          LOBYTE(v91) = -54;
          *(_DWORD *)((char *)&v91 + 1) = bswap32(v87);
          result = std::ostream::write();
          ++v64;
          v86 -= 4;
        }
        while (v86);
      }
      break;
    case 12:
      v70 = *a2;
      result = (uint64_t)sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v71 = *(_QWORD *)(v70 + 16);
      v73 = *(_QWORD *)(v71 + 40);
      v72 = *(unint64_t **)(v71 + 48);
      if (v72)
        v74 = 0;
      else
        v74 = v73 >= 8;
      if (v74)
      {
        result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
        if ((_DWORD)result)
LABEL_144:
          abort();
      }
      v75 = v73 >> 3;
      v76 = *(_QWORD *)(a2[1] + 24);
      if (*(_BYTE *)(v76 + 40))
      {
        *(_QWORD *)&v91 = v76 + 16;
        if (v73 >= 8)
        {
          v77 = 8 * v75;
          do
          {
            result = (uint64_t)sub_20E9F4C08((uint64_t)&v90, (uint64_t **)&v91, v72++);
            v77 -= 8;
          }
          while (v77);
        }
      }
      else if (v73 >= 8)
      {
        v88 = 8 * v75;
        do
        {
          v89 = *v72;
          LOBYTE(v91) = -53;
          *(_QWORD *)((char *)&v91 + 1) = bswap64(v89);
          result = std::ostream::write();
          ++v72;
          v88 -= 8;
        }
        while (v88);
      }
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FEAC334(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FA8A4(a2);
  v18 = 1;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v16 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v16)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_2101FB154(a2, &v18);
  sub_20FEAC634(a2, (__int128 *)(v3 + 200));
  v17 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a2 + 56) = v17 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20FEAC634(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 *v24;
  uint64_t v25;

  v21 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v22 = *((_QWORD *)a2 + 2);
  v23 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "value_type";
    *(_QWORD *)(a1 + 80) = 10;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v24 = &v21;
  sub_20FE12074(a1, (_BYTE **)&v24);
  v7 = *(unsigned __int8 **)(a1 + 40);
  if (*v7 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "size";
    v8 = a1 + 72;
    v10 = (_BYTE *)(a1 + 88);
    v9 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 4;
    v11 = (_QWORD *)(a1 + 80);
    if (!v9)
      *v10 = 1;
    goto LABEL_16;
  }
  v11 = (_QWORD *)(a1 + 80);
  v8 = a1 + 72;
  v10 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v8 == *(_DWORD *)"version"
      ? (v12 = *(_DWORD *)(*(_QWORD *)v8 + 3) == *(_DWORD *)"sion")
      : (v12 = 0),
        !v12))
  {
LABEL_16:
    LOBYTE(v24) = 6;
    v25 = *((_QWORD *)&v21 + 1);
    v13 = (unsigned __int8 *)sub_2101FA67C(a1);
    v14 = *v13;
    *v13 = v24;
    LOBYTE(v24) = v14;
    v15 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v25;
    v25 = v15;
    sub_20EB911C0(&v25, v14);
    v7 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v7 <= 1u)
  {
    v16 = *v10;
    *(_QWORD *)v8 = "lines3";
    *v11 = 6;
    if (!v16)
      *v10 = 1;
  }
  sub_2101FA8A4(a1);
  sub_20FEAC894(v21, (uint64_t)&v21, a1);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(a1 + 56) = v17 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v10 = 0;
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20FEAC860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20EB911C0(v13, a13);
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEAC880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20FEAC894(int a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 **result;
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      result = sub_20FEAC9BC(v4);
      break;
    case 1:
      result = sub_20FEACB90(v4);
      break;
    case 2:
      result = sub_20FEACD64(v4);
      break;
    case 3:
      result = sub_20FEACF38(v4);
      break;
    case 5:
      result = sub_20FEAD10C(v4);
      break;
    case 6:
      result = sub_20FEAD2E0(v4);
      break;
    case 7:
      result = sub_20FEAD4B4(v4);
      break;
    case 8:
      result = sub_20FEAD688(v4);
      break;
    case 11:
      result = sub_20FEAD85C(v4);
      break;
    case 12:
      result = sub_20FEADA30(v4);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

unsigned __int8 **sub_20FEAC9BC(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 0);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FAA20(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 3;
      sub_2101FAA20(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 6;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FAA20(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 3;
    sub_2101FAA20(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 6;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEACB90(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 1);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FBAD4(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 6;
      sub_2101FBAD4(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 12;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FBAD4(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 6;
    sub_2101FBAD4(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 12;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEACD64(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 2);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FBD44(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_2101FBD44(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FBD44(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_2101FBD44(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEACF38(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 3);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FC224(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_2101FC224(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FC224(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_2101FC224(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAD10C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 5);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 1;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) == 0;
  if (!v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FB864(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 3;
      sub_2101FB864(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 6;
      if (!--v6)
        return result;
    }
LABEL_19:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FB864(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 3;
    sub_2101FB864(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 6;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAD2E0(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 6);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 2uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FB99C(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 6;
      sub_2101FB99C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 12;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FB99C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 6;
    sub_2101FB99C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 12;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAD4B4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 7);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FBC0C(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_2101FBC0C(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FBC0C(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_2101FBC0C(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAD688(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FC0EC(v10, (uint64_t)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_2101FC0EC(v11, (uint64_t)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FC0EC(v7, (uint64_t)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_2101FC0EC(v8, (uint64_t)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEAD85C(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 11);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 4uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FC804(v10, (float **)&v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 12;
      sub_2101FC804(v11, (float **)&v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 24;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FC804(v7, (float **)&v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 12;
    sub_2101FC804(v8, (float **)&v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 24;
    --v6;
  }
  while (v6);
  return result;
}

unsigned __int8 **sub_20FEADA30(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 **result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  result = sub_2100C2EF8((unsigned __int8 **)(*a1 + 16), 12);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 48);
  if (v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 40) >= 8uLL;
  if (v5)
  {
    result = (unsigned __int8 **)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0);
    if ((_DWORD)result)
      goto LABEL_20;
  }
  v6 = *(_QWORD *)(*a1 + 8);
  if (!v6)
    return result;
  result = (unsigned __int8 **)a1[1];
  if (!v4)
  {
    while (1)
    {
      sub_2101FA8A4((uint64_t)result);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v10 = a1[1];
      v13 = 3;
      v14 = v4;
      sub_2101FCC24(v10, &v13);
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        break;
      }
      v11 = a1[1];
      v13 = 3;
      v14 = v4 + 24;
      sub_2101FCC24(v11, &v13);
      result = (unsigned __int8 **)a1[1];
      v12 = result[7];
      result[5] = (unsigned __int8 *)*((_QWORD *)v12 - 1);
      result[7] = v12 - 8;
      if (*((_BYTE *)result + 88))
        *((_BYTE *)result + 88) = 0;
      v4 += 48;
      if (!--v6)
        return result;
    }
LABEL_20:
    abort();
  }
  do
  {
    sub_2101FA8A4((uint64_t)result);
    v7 = a1[1];
    v13 = 3;
    v14 = v4;
    sub_2101FCC24(v7, &v13);
    v8 = a1[1];
    v13 = 3;
    v14 = v4 + 24;
    sub_2101FCC24(v8, &v13);
    result = (unsigned __int8 **)a1[1];
    v9 = result[7];
    result[5] = (unsigned __int8 *)*((_QWORD *)v9 - 1);
    result[7] = v9 - 8;
    if (*((_BYTE *)result + 88))
      *((_BYTE *)result + 88) = 0;
    v4 += 48;
    --v6;
  }
  while (v6);
  return result;
}

_QWORD *sub_20FEADC04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *result;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v20 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v18 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v21 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v22 = v7;
  sub_20E86A980(v11, (uint64_t)&v22, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v23 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  sub_20FEADE1C(a2, (__int128 *)(v3 + 200));
  v14 = *(_BYTE *)(a2 + 34);
  if (*(_QWORD *)(a2 + 40))
  {
    v15 = *(_QWORD **)(a2 + 24);
    v24 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v15, (uint64_t)&v24, 1);
  }
  v16 = *(_QWORD **)(a2 + 24);
  v25 = v14;
  result = sub_20E86A980(v16, (uint64_t)&v25, 1);
  ++*(_QWORD *)(a2 + 40);
  return result;
}

void sub_20FEADE1C(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD v13[3];
  __int128 v14;

  v10 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 2);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(v13[0]) = v10;
  sub_20E9E6F58(a1, (unsigned __int8 *)v13);
  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    LOBYTE(v13[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v6, (uint64_t)v13, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  v14 = xmmword_24CA08430;
  v13[0] = &v10;
  v13[1] = a1;
  v13[2] = &v14;
  sub_20FEADF3C(v10, v13);
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20FEADF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20FEADF3C(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v6 = *(_QWORD *)(v4 + 40);
      v5 = *(unsigned __int8 **)(v4 + 48);
      if (v5)
        v7 = 1;
      else
        v7 = v6 == 0;
      if (v7)
      {
        if (!v6)
          return;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_65:
        v54 = a2[1];
        do
        {
          sub_20E9E6F58(v54, v5++);
          --v6;
        }
        while (v6);
        return;
      }
      goto LABEL_112;
    case 1:
      v8 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v9 = *(_QWORD *)(v8 + 16);
      v11 = *(_QWORD *)(v9 + 40);
      v10 = *(_QWORD *)(v9 + 48);
      if (v10)
        v12 = 0;
      else
        v12 = v11 >= 2;
      if (!v12)
      {
        if (v11 < 2)
          return;
        goto LABEL_69;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_69:
        v55 = a2[1];
        v56 = *(_QWORD *)(v55 + 40);
        v57 = v11 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v56)
          {
            v58 = *(_QWORD **)(v55 + 24);
            v89 = *(_BYTE *)(v55 + 32);
            sub_20E86A980(v58, (uint64_t)&v89, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          v56 = *(_QWORD *)(v55 + 40) + 1;
          *(_QWORD *)(v55 + 40) = v56;
          v57 -= 2;
        }
        while (v57);
        return;
      }
      goto LABEL_112;
    case 2:
      v13 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 40);
      v15 = *(_QWORD *)(v14 + 48);
      if (v15)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
      {
        if (v16 < 4)
          return;
        goto LABEL_74;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_74:
        v59 = a2[1];
        v60 = *(_QWORD *)(v59 + 40);
        v61 = v16 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v60)
          {
            v62 = *(_QWORD **)(v59 + 24);
            v90 = *(_BYTE *)(v59 + 32);
            sub_20E86A980(v62, (uint64_t)&v90, 1);
          }
          v15 += 4;
          std::ostream::operator<<();
          v60 = *(_QWORD *)(v59 + 40) + 1;
          *(_QWORD *)(v59 + 40) = v60;
          v61 -= 4;
        }
        while (v61);
        return;
      }
      goto LABEL_112;
    case 3:
      v18 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v21 = *(_QWORD *)(v19 + 40);
      v20 = *(_QWORD *)(v19 + 48);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (!v22)
      {
        if (v21 < 8)
          return;
        goto LABEL_79;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_79:
        v63 = a2[1];
        v64 = *(_QWORD *)(v63 + 40);
        v65 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v64)
          {
            v66 = *(_QWORD **)(v63 + 24);
            v91 = *(_BYTE *)(v63 + 32);
            sub_20E86A980(v66, (uint64_t)&v91, 1);
          }
          v20 += 8;
          std::ostream::operator<<();
          v64 = *(_QWORD *)(v63 + 40) + 1;
          *(_QWORD *)(v63 + 40) = v64;
          v65 -= 8;
        }
        while (v65);
        return;
      }
      goto LABEL_112;
    case 5:
      v23 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v24 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v24 + 40);
      v25 = *(char **)(v24 + 48);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (v27)
      {
        if (!v26)
          return;
        goto LABEL_84;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_84:
        v68 = a2[1];
        do
        {
          sub_20E9E6D74(v68, v25++);
          --v26;
        }
        while (v26);
        return;
      }
      goto LABEL_112;
    case 6:
      v28 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v29 = *(_QWORD *)(v28 + 16);
      v31 = *(_QWORD *)(v29 + 40);
      v30 = *(_QWORD *)(v29 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 2;
      if (!v32)
      {
        if (v31 < 2)
          return;
        goto LABEL_88;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_88:
        v69 = a2[1];
        v70 = *(_QWORD *)(v69 + 40);
        v71 = v31 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          if (v70)
          {
            v72 = *(_QWORD **)(v69 + 24);
            v92 = *(_BYTE *)(v69 + 32);
            sub_20E86A980(v72, (uint64_t)&v92, 1);
          }
          v30 += 2;
          std::ostream::operator<<();
          v70 = *(_QWORD *)(v69 + 40) + 1;
          *(_QWORD *)(v69 + 40) = v70;
          v71 -= 2;
        }
        while (v71);
        return;
      }
      goto LABEL_112;
    case 7:
      v33 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v34 = *(_QWORD *)(v33 + 16);
      v36 = *(_QWORD *)(v34 + 40);
      v35 = *(_QWORD *)(v34 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (!v37)
      {
        if (v36 < 4)
          return;
        goto LABEL_93;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_93:
        v73 = a2[1];
        v74 = *(_QWORD *)(v73 + 40);
        v75 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v74)
          {
            v76 = *(_QWORD **)(v73 + 24);
            v93 = *(_BYTE *)(v73 + 32);
            sub_20E86A980(v76, (uint64_t)&v93, 1);
          }
          v35 += 4;
          std::ostream::operator<<();
          v74 = *(_QWORD *)(v73 + 40) + 1;
          *(_QWORD *)(v73 + 40) = v74;
          v75 -= 4;
        }
        while (v75);
        return;
      }
      goto LABEL_112;
    case 8:
      v38 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = *(_QWORD *)(v39 + 40);
      v40 = *(_QWORD *)(v39 + 48);
      if (v40)
        v42 = 0;
      else
        v42 = v41 >= 8;
      if (!v42)
      {
        if (v41 < 8)
          return;
        goto LABEL_98;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_98:
        v77 = a2[1];
        v78 = *(_QWORD *)(v77 + 40);
        v79 = v41 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          if (v78)
          {
            v80 = *(_QWORD **)(v77 + 24);
            v94 = *(_BYTE *)(v77 + 32);
            sub_20E86A980(v80, (uint64_t)&v94, 1);
          }
          v40 += 8;
          std::ostream::operator<<();
          v78 = *(_QWORD *)(v77 + 40) + 1;
          *(_QWORD *)(v77 + 40) = v78;
          v79 -= 8;
        }
        while (v79);
        return;
      }
      goto LABEL_112;
    case 11:
      v43 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v44 = *(_QWORD *)(v43 + 16);
      v46 = *(_QWORD *)(v44 + 40);
      v45 = *(_QWORD *)(v44 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 4;
      if (!v47)
      {
        if (v46 < 4)
          return;
        goto LABEL_103;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_103:
        v81 = a2[1];
        v82 = *(_QWORD *)(v81 + 40);
        v83 = v46 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          if (v82)
          {
            v84 = *(_QWORD **)(v81 + 24);
            v95 = *(_BYTE *)(v81 + 32);
            sub_20E86A980(v84, (uint64_t)&v95, 1);
          }
          *(_QWORD *)(*(_QWORD *)(v81 + 24) + *(_QWORD *)(**(_QWORD **)(v81 + 24) - 24) + 16) = 9;
          v45 += 4;
          std::ostream::operator<<();
          v82 = *(_QWORD *)(v81 + 40) + 1;
          *(_QWORD *)(v81 + 40) = v82;
          v83 -= 4;
        }
        while (v83);
        return;
      }
      goto LABEL_112;
    case 12:
      v48 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v49 = *(_QWORD *)(v48 + 16);
      v51 = *(_QWORD *)(v49 + 40);
      v50 = *(_QWORD *)(v49 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 8;
      if (v52)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_112:
          abort();
        }
      }
      else if (v51 < 8)
      {
        return;
      }
      v85 = a2[1];
      v86 = *(_QWORD *)(v85 + 40);
      v87 = v51 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        if (v86)
        {
          v88 = *(_QWORD **)(v85 + 24);
          v96 = *(_BYTE *)(v85 + 32);
          sub_20E86A980(v88, (uint64_t)&v96, 1);
        }
        *(_QWORD *)(*(_QWORD *)(v85 + 24) + *(_QWORD *)(**(_QWORD **)(v85 + 24) - 24) + 16) = 17;
        v50 += 8;
        std::ostream::operator<<();
        v86 = *(_QWORD *)(v85 + 40) + 1;
        *(_QWORD *)(v85 + 40) = v86;
        v87 -= 8;
      }
      while (v87);
      return;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEAE658(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 1;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_2100B6A04((_QWORD *)a2);
  sub_20FEAE810(a2, (__int128 *)(v3 + 200));
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v10 + 10) = *(_QWORD *)(a2 + 32) - v10 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
}

void sub_20FEAE810(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD __src[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  LOBYTE(__src[0]) = v9;
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_2100B8FD4(a1 + 24, *(char **)(a1 + 32), (char *)&v9 + 8, (char *)&v10, 8);
  v13 = xmmword_24CA08430;
  __src[0] = &v9;
  __src[1] = a1;
  __src[2] = &v13;
  sub_20FEAE934(v9, __src);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FEAE920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20FEAE934(int a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  BOOL v44;
  char *result;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v4 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(char **)(v4 + 48);
      if (v6)
        v7 = 1;
      else
        v7 = v5 == 0;
      if (!v7)
        goto LABEL_27;
      goto LABEL_7;
    case 1:
      v9 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(char **)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
        goto LABEL_37;
      goto LABEL_36;
    case 2:
      v14 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v15 + 40);
      v11 = *(char **)(v15 + 48);
      if (v11)
        v17 = 0;
      else
        v17 = v16 >= 4;
      if (!v17)
        goto LABEL_59;
      goto LABEL_58;
    case 3:
      v18 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v19 = *(_QWORD *)(v18 + 16);
      v20 = *(_QWORD *)(v19 + 40);
      v11 = *(char **)(v19 + 48);
      if (v11)
        v21 = 0;
      else
        v21 = v20 >= 8;
      if (!v21)
        goto LABEL_71;
      goto LABEL_70;
    case 5:
      v22 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v23 = *(_QWORD *)(v22 + 16);
      v5 = *(_QWORD *)(v23 + 40);
      v6 = *(char **)(v23 + 48);
      if (v6)
        v24 = 1;
      else
        v24 = v5 == 0;
      if (v24)
      {
LABEL_7:
        v8 = a2[1];
      }
      else
      {
LABEL_27:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0)|| (v8 = a2[1], sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)))
        {
LABEL_77:
          abort();
        }
      }
      result = sub_2100B8FD4(v8 + 24, *(char **)(v8 + 32), v6, &v6[v5], v5);
      break;
    case 6:
      v25 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v26 = *(_QWORD *)(v25 + 16);
      v12 = *(_QWORD *)(v26 + 40);
      v11 = *(char **)(v26 + 48);
      if (v11)
        v27 = 0;
      else
        v27 = v12 >= 2;
      if (!v27)
        goto LABEL_37;
LABEL_36:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_37:
      v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
      v29 = a2[1];
      if (v11)
        v30 = 1;
      else
        v30 = v28 == 0;
      if (!v30)
        goto LABEL_75;
      goto LABEL_76;
    case 7:
      v31 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v32 = *(_QWORD *)(v31 + 16);
      v16 = *(_QWORD *)(v32 + 40);
      v11 = *(char **)(v32 + 48);
      if (v11)
        v33 = 0;
      else
        v33 = v16 >= 4;
      if (!v33)
        goto LABEL_59;
      goto LABEL_58;
    case 8:
      v34 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v35 = *(_QWORD *)(v34 + 16);
      v20 = *(_QWORD *)(v35 + 40);
      v11 = *(char **)(v35 + 48);
      if (v11)
        v36 = 0;
      else
        v36 = v20 >= 8;
      if (!v36)
        goto LABEL_71;
      goto LABEL_70;
    case 11:
      v37 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v38 = *(_QWORD *)(v37 + 16);
      v16 = *(_QWORD *)(v38 + 40);
      v11 = *(char **)(v38 + 48);
      if (v11)
        v39 = 0;
      else
        v39 = v16 >= 4;
      if (!v39)
        goto LABEL_59;
LABEL_58:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_59:
      v28 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      v29 = a2[1];
      if (v11)
        v40 = 1;
      else
        v40 = v28 == 0;
      if (!v40)
        goto LABEL_75;
      goto LABEL_76;
    case 12:
      v41 = *a2;
      sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v42 = *(_QWORD *)(v41 + 16);
      v20 = *(_QWORD *)(v42 + 40);
      v11 = *(char **)(v42 + 48);
      if (v11)
        v43 = 0;
      else
        v43 = v20 >= 8;
      if (!v43)
        goto LABEL_71;
LABEL_70:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_71:
      v28 = v20 & 0xFFFFFFFFFFFFFFF8;
      v29 = a2[1];
      if (v11)
        v44 = 1;
      else
        v44 = v28 == 0;
      if (v44)
        goto LABEL_76;
LABEL_75:
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_77;
      }
LABEL_76:
      result = sub_2100B8FD4(v29 + 24, *(char **)(v29 + 32), v11, &v11[v28], v28);
      break;
    default:
      sub_21022EFF8(a1);
  }
  return result;
}

void sub_20FEAECC0(_BYTE *a1, __int128 *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE *v12[3];
  __int128 v13;

  v9 = *a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  v10 = *((_QWORD *)a2 + 2);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v12[0] = &v9;
  sub_20FE13EEC(a1, v12);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 120))(a1, (char *)&v9 + 8);
  v13 = xmmword_24CA08430;
  v12[0] = &v9;
  v12[1] = a1;
  v12[2] = &v13;
  sub_20FEAEDBC(v9, v12);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20FEAEDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20F28AC44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 **sub_20FEAEDBC(int a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned __int8 **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;

  switch(a1)
  {
    case 0:
      v3 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 0);
      v5 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v5 + 40);
      v6 = *(_QWORD *)(v5 + 48);
      if (v6)
        v8 = 1;
      else
        v8 = v7 == 0;
      if (v8)
      {
        if (!v7)
          return result;
        goto LABEL_65;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_65:
        v55 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 80))(v55, v6++);
          --v7;
        }
        while (v7);
        return result;
      }
      goto LABEL_104;
    case 1:
      v9 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 1);
      v10 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v10 + 40);
      v11 = *(_QWORD *)(v10 + 48);
      if (v11)
        v13 = 0;
      else
        v13 = v12 >= 2;
      if (!v13)
      {
        if (v12 < 2)
          return result;
        goto LABEL_69;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_69:
        v56 = a2[1];
        v57 = v12 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 96))(v56, v11);
          v11 += 2;
          v57 -= 2;
        }
        while (v57);
        return result;
      }
      goto LABEL_104;
    case 2:
      v14 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 2);
      v15 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v15 + 40);
      v16 = *(_QWORD *)(v15 + 48);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (!v18)
      {
        if (v17 < 4)
          return result;
        goto LABEL_73;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_73:
        v58 = a2[1];
        v59 = v17 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 104))(v58, v16);
          v16 += 4;
          v59 -= 4;
        }
        while (v59);
        return result;
      }
      goto LABEL_104;
    case 3:
      v19 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 3);
      v20 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v21 = *(_QWORD *)(v20 + 48);
      if (v21)
        v23 = 0;
      else
        v23 = v22 >= 8;
      if (!v23)
      {
        if (v22 < 8)
          return result;
        goto LABEL_77;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_77:
        v60 = a2[1];
        v61 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 120))(v60, v21);
          v21 += 8;
          v61 -= 8;
        }
        while (v61);
        return result;
      }
      goto LABEL_104;
    case 5:
      v24 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 5);
      v25 = *(_QWORD *)(v24 + 16);
      v27 = *(_QWORD *)(v25 + 40);
      v26 = *(_QWORD *)(v25 + 48);
      if (v26)
        v28 = 1;
      else
        v28 = v27 == 0;
      if (v28)
      {
        if (!v27)
          return result;
        goto LABEL_81;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_81:
        v63 = a2[1];
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v63 + 88))(v63, v26++);
          --v27;
        }
        while (v27);
        return result;
      }
      goto LABEL_104;
    case 6:
      v29 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 6);
      v30 = *(_QWORD *)(v29 + 16);
      v32 = *(_QWORD *)(v30 + 40);
      v31 = *(_QWORD *)(v30 + 48);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (!v33)
      {
        if (v32 < 2)
          return result;
        goto LABEL_85;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_85:
        v64 = a2[1];
        v65 = v32 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v31);
          v31 += 2;
          v65 -= 2;
        }
        while (v65);
        return result;
      }
      goto LABEL_104;
    case 7:
      v34 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 7);
      v35 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v35 + 40);
      v36 = *(_QWORD *)(v35 + 48);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (!v38)
      {
        if (v37 < 4)
          return result;
        goto LABEL_89;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_89:
        v66 = a2[1];
        v67 = v37 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 56))(v66, v36);
          v36 += 4;
          v67 -= 4;
        }
        while (v67);
        return result;
      }
      goto LABEL_104;
    case 8:
      v39 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 8);
      v40 = *(_QWORD *)(v39 + 16);
      v42 = *(_QWORD *)(v40 + 40);
      v41 = *(_QWORD *)(v40 + 48);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (!v43)
      {
        if (v42 < 8)
          return result;
        goto LABEL_93;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_93:
        v68 = a2[1];
        v69 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 72))(v68, v41);
          v41 += 8;
          v69 -= 8;
        }
        while (v69);
        return result;
      }
      goto LABEL_104;
    case 11:
      v44 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 11);
      v45 = *(_QWORD *)(v44 + 16);
      v47 = *(_QWORD *)(v45 + 40);
      v46 = *(_QWORD *)(v45 + 48);
      if (v46)
        v48 = 0;
      else
        v48 = v47 >= 4;
      if (!v48)
      {
        if (v47 < 4)
          return result;
        goto LABEL_97;
      }
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_97:
        v70 = a2[1];
        v71 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v70 + 128))(v70, v46);
          v46 += 4;
          v71 -= 4;
        }
        while (v71);
        return result;
      }
      goto LABEL_104;
    case 12:
      v49 = *a2;
      result = sub_2100C2EF8((unsigned __int8 **)(*a2 + 16), 12);
      v50 = *(_QWORD *)(v49 + 16);
      v52 = *(_QWORD *)(v50 + 40);
      v51 = *(_QWORD *)(v50 + 48);
      if (v51)
        v53 = 0;
      else
        v53 = v52 >= 8;
      if (v53)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_2102D0091, 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_104:
          abort();
        }
      }
      else if (v52 < 8)
      {
        return result;
      }
      v72 = a2[1];
      v73 = v52 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v72 + 136))(v72, v51);
        v51 += 8;
        v73 -= 8;
      }
      while (v73);
      return result;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEAF398(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FEAFA4C(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FEB1F74(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEB38E8(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEB5E10(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEB785C(&v9, a1);
          else
            sub_20FEAF4FC(&v8, (uint64_t)a1);
        }
      }
    }
  }
}

void sub_20FEAF4FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _BYTE *v30[26];
  _BYTE v31[24];
  __int128 v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 __p;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v30);
    sub_20FDE470C((uint64_t)v31, (uint64_t *)v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v31);
        if (!v45)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(uint64_t *, uint64_t))off_24CA08120[v6])(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v31[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v8;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v36;
    v10 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v11;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v12;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = __p;
      *(_QWORD *)(v3 + 176) = v44;
      __p = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = __p;
    if (!(_QWORD)__p)
      goto LABEL_46;
    v15 = *((_QWORD *)&__p + 1);
    v16 = (void *)__p;
    if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)__p;
LABEL_45:
    *((_QWORD *)&__p + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v30);
  sub_20FDE470C((uint64_t)v31, (uint64_t *)v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(uint64_t *, uint64_t))off_24CA08120[v7])(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v31[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v34)
    {
      v17 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(_QWORD *)(v3 + 56) = v17;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v36;
    v19 = v35;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v39)
    {
      v20 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(_QWORD *)(v3 + 112) = v20;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v42)
    {
      v21 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(_QWORD *)(v3 + 144) = v21;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = __p;
      *(_QWORD *)(v3 + 176) = v44;
      __p = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v31);
  if (v45)
  {
LABEL_38:
    v14 = __p;
    if (!(_QWORD)__p)
      goto LABEL_46;
    v23 = *((_QWORD *)&__p + 1);
    v16 = (void *)__p;
    if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v42 && SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v34 && SHIBYTE(v33) < 0)
    operator delete((void *)v32);
  sub_20EB0580C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(_QWORD *)a2;
  v30[0] = *(_BYTE **)(a2 + 8);
  v25 = (int)v30[0];
  *(_DWORD *)v31 = 6;
  (*(void (**)(uint64_t, _BYTE *))(v24 + 104))(a2, v31);
  if (v25 < 1)
  {
    if (*(_DWORD *)v31 < 3u)
      sub_20FDF69C0((uint64_t)v31, a2, v4, *(unsigned int *)v31);
    else
      sub_20FDF6C34(a2, v4, *(unsigned int *)v31);
  }
  else
  {
    sub_20FDF63C8((int *)v30, a2, v4, *(unsigned int *)v31);
  }
  v26 = *(_QWORD *)a2;
  v29 = *(_QWORD *)(a2 + 8);
  v27 = v29;
  LODWORD(v30[0]) = 1;
  (*(void (**)(uint64_t, _BYTE **))(v26 + 104))(a2, v30);
  if (v27 < 1)
  {
    v30[0] = (_BYTE *)(v3 + 200);
    sub_20FE180CC((_BYTE *)a2, v30);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, v3 + 208);
    *(_OWORD *)v31 = xmmword_24CA08430;
    v28 = *(unsigned __int8 *)(v3 + 200);
    v30[0] = (_BYTE *)(v3 + 200);
    v30[1] = (_BYTE *)a2;
    v30[2] = v31;
    sub_20FEB9AF0(v28, v30);
  }
  else
  {
    sub_20FEB9640((int *)&v29, (_BYTE *)a2, (_BYTE *)(v3 + 200));
  }
}

void sub_20FEAFA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEAFA4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FEAFEFC((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FEAFEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEAFEFC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _BYTE *v14;

  sub_2101FF7D8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DB048(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v14 = a3;
  sub_20FE14780((uint64_t *)a2, &v14);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2101FFA90((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DB048(v9, &v14);
  *((_QWORD *)a3 + 1) = v14;
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "lines3";
  *(_QWORD *)(a2 + 96) = 6;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF7D8(a2);
  sub_20FEB008C(*a3, (uint64_t)a3, a2);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 48) = v11 - 16;
  *(_QWORD *)(a2 + 72) = v12 - 16;
}

void sub_20FEB008C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FEB01B4(v3);
      break;
    case 1:
      sub_20FEB048C(v3);
      break;
    case 2:
      sub_20FEB0774(v3);
      break;
    case 3:
      sub_20FEB0A60(v3);
      break;
    case 5:
      sub_20FEB0DBC(v3);
      break;
    case 6:
      sub_20FEB1094(v3);
      break;
    case 7:
      sub_20FEB137C(v3);
      break;
    case 8:
      sub_20FEB1668(v3);
      break;
    case 11:
      sub_20FEB19C4(v3);
      break;
    case 12:
      sub_20FEB1C9C(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEB01B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(6 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 6 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 3;
    do
    {
      sub_2101FF7D8((uint64_t)v6);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v8 = (uint64_t *)a1[1], v23 = 3, v24 = (char *)__p + v7 - 3, v9 = (char *)sub_2101FFA90(v8), ++v8[14], sub_2101FFBA8(v9, (uint64_t)&v23), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 3;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_2101FFA90(v10);
      ++v10[14];
      sub_2101FFBA8(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v23, 0, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20FEB0424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB048C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v19 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 6;
    do
    {
      sub_2101FF7D8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 6, v6 = (char *)sub_2101FFA90(v5), ++v5[14], sub_210200D0C(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200D0C(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v20, 1, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEB070C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB0774(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(24 * v2);
    v19 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 12;
    do
    {
      sub_2101FF7D8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 12, v6 = (char *)sub_2101FFA90(v5), ++v5[14], sub_210200E84(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200E84(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v20, 2, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEB09F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB0A60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(48 * v2);
    v23 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF7D8((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_2101FFA90(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_2102039C8(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_2101FFA90(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_2102039C8(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 24], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v24, 3, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v24 + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20FEB0D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB0DBC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(6 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 6 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 3;
    do
    {
      sub_2101FF7D8((uint64_t)v6);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v8 = (uint64_t *)a1[1], v23 = 3, v24 = (char *)__p + v7 - 3, v9 = (char *)sub_2101FFA90(v8), ++v8[14], sub_210200B2C(v9, (uint64_t)&v23), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 3;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_2101FFA90(v10);
      ++v10[14];
      sub_210200B2C(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v23, 5, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20FEB102C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB1094(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(12 * v2);
    v19 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 6;
    do
    {
      sub_2101FF7D8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 6, v6 = (char *)sub_2101FFA90(v5), ++v5[14], sub_210200C1C(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200C1C(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v20, 6, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEB1314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB137C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(24 * v2);
    v19 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 12;
    do
    {
      sub_2101FF7D8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 12, v6 = (char *)sub_2101FFA90(v5), ++v5[14], sub_210200DC8(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FFA90(v7);
      ++v7[14];
      sub_210200DC8(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v20, 7, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEB1600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB1668(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(48 * v2);
    v23 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF7D8((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_2101FFA90(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_21020368C(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_2101FFA90(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_21020368C(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 24], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v24, 8, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v24 + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20FEB1940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB19C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(24 * v2);
    v21 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 12;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF7D8((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v6 = (uint64_t *)a1[1], v7 = sub_2101FFA90(v6), ++v6[14], sub_210201290(v7, (float *)&v5[v3 - 12]), (v8 = (char *)__p) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_2101FFA90(v9);
      ++v9[14];
      sub_210201290(v10, (float *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v22, 11, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20FEB1C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB1C9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(48 * v2);
    v21 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 24;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF7D8((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v6 = (uint64_t *)a1[1], v7 = sub_2101FFA90(v6), ++v6[14], sub_210201398(v7, (double *)&v5[v3 - 24]), (v8 = (char *)__p) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_2101FFA90(v9);
      ++v9[14];
      sub_210201398(v10, (double *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v22, 12, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20FEB1F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEB1F74(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v26);
    sub_20FDE470C((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v26);
  sub_20FDE470C((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20EB0580C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 1;
  sub_20E9EDADC(a2[6], v26);
  return sub_20FEB2400((uint64_t)v26, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FEB23B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEB2400(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;

  v5 = a2 + 2;
  sub_20E90A71C(a2 + 2);
  LOBYTE(v10[0]) = 0;
  sub_20E9ED7B4(a2[6], v10);
  *a3 = v10[0];
  sub_20E9EDE6C(a2[6], (_QWORD *)a3 + 1);
  v11 = xmmword_24CA08430;
  v6 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_20FEB24C8(v6, v10);
  v7 = a2[4];
  result = (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(v5);
  v9 = *(_QWORD *)(v7 - 16) - result + *(_QWORD *)(v7 - 8);
  if (v9)
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v5 + 40))(v5, v9);
  a2[4] -= 16;
  return result;
}

void sub_20FEB24C8(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FEB2570(a2);
      break;
    case 1:
      sub_20FEB2750(a2);
      break;
    case 2:
      sub_20FEB2944(a2);
      break;
    case 3:
      sub_20FEB2B3C(a2);
      break;
    case 5:
      sub_20FEB2D34(a2);
      break;
    case 6:
      sub_20FEB2F14(a2);
      break;
    case 7:
      sub_20FEB3108(a2);
      break;
    case 8:
      sub_20FEB3300(a2);
      break;
    case 11:
      sub_20FEB34F8(a2);
      break;
    case 12:
      sub_20FEB36F0(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEB2570(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED7B4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FEB26F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB2750(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED948(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB28E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB2944(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDADC(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB2ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB2B3C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDE6C(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB2CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB2D34(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = *(_QWORD *)(a1[1] + 48);
      do
      {
        sub_20E9ED704(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FEB2EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB2F14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 2 * v6;
      do
      {
        sub_20E9ED898(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB30A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB3108(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDA2C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB32A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB3300(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EDD84(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB3498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB34F8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 4 * v6;
      do
      {
        sub_20E9EDF48(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB3690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB36F0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = *(_QWORD *)(a1[1] + 48);
      v8 = 8 * v6;
      do
      {
        sub_20E9EE078(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB3888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB38E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27[27];
  _BYTE v28[8];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v27);
    sub_20FDE470C((uint64_t)v28, v27);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v28);
        if (!v43)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v26, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v8;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v34;
    v10 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v11;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v12;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v15 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v41;
LABEL_45:
    *((_QWORD *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v27);
  sub_20FDE470C((uint64_t)v28, v27);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v26, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(_BYTE *)(v3 + 64) = 0;
    if (v32)
    {
      v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(_QWORD *)(v3 + 56) = v17;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v34;
    v19 = v33;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v37)
    {
      v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(_QWORD *)(v3 + 112) = v20;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v40)
    {
      v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(_QWORD *)(v3 + 144) = v21;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(_QWORD *)(v3 + 176) = v42;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    v14 = v41;
    if (!(_QWORD)v41)
      goto LABEL_46;
    v23 = *((_QWORD *)&v41 + 1);
    v16 = (void *)v41;
    if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v37 && SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  sub_20EB0580C((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FEB3D98((uint64_t)v27, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_20FEB3D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEB3D98(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *exception;
  _BYTE *v14;

  sub_2101FF2E8(a2);
  v5 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v5)
    *(_BYTE *)(a2 + 104) = 1;
  v6 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DA8B0(v6, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24CA1FAE0;
    __cxa_throw(exception, (struct type_info *)&unk_24CA1FAF8, (void (*)(void *))std::exception::~exception);
  }
  v7 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value_type";
  *(_QWORD *)(a2 + 96) = 10;
  if (!v7)
    *(_BYTE *)(a2 + 104) = 1;
  v14 = a3;
  sub_20FE15D30((uint64_t *)a2, &v14);
  v8 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "size";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v8)
    *(_BYTE *)(a2 + 104) = 1;
  v9 = (char *)sub_2101FF5A0((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v14 = 0;
  sub_2100DA8B0(v9, &v14);
  *((_QWORD *)a3 + 1) = v14;
  v10 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "lines3";
  *(_QWORD *)(a2 + 96) = 6;
  if (!v10)
    *(_BYTE *)(a2 + 104) = 1;
  sub_2101FF2E8(a2);
  sub_20FEB3F28(*a3, (uint64_t)a3, a2);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(a2 + 48) = v11 - 8;
  *(_QWORD *)(a2 + 72) = v12 - 8;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v11 - 16);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v12 - 16);
  *(_QWORD *)(a2 + 48) = v11 - 16;
  *(_QWORD *)(a2 + 72) = v12 - 16;
}

void sub_20FEB3F28(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_20FEB4050(v3);
      break;
    case 1:
      sub_20FEB4328(v3);
      break;
    case 2:
      sub_20FEB4610(v3);
      break;
    case 3:
      sub_20FEB48FC(v3);
      break;
    case 5:
      sub_20FEB4C58(v3);
      break;
    case 6:
      sub_20FEB4F30(v3);
      break;
    case 7:
      sub_20FEB5218(v3);
      break;
    case 8:
      sub_20FEB5504(v3);
      break;
    case 11:
      sub_20FEB5860(v3);
      break;
    case 12:
      sub_20FEB5B38(v3);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEB4050(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = (char *)operator new(6 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 6 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 3;
    do
    {
      sub_2101FF2E8((uint64_t)v6);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v8 = (uint64_t *)a1[1], v23 = 3, v24 = (char *)__p + v7 - 3, v9 = (char *)sub_2101FF5A0(v8), ++v8[14], sub_2101FF6B8(v9, (uint64_t)&v23), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 3;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_2101FF5A0(v10);
      ++v10[14];
      sub_2101FF6B8(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C1DF0(&v23, 0, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20FEB42C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB4328(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0)
      sub_20E867F44();
    __p = operator new(12 * v2);
    v19 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 6;
    do
    {
      sub_2101FF2E8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 6, v6 = (char *)sub_2101FF5A0(v5), ++v5[14], sub_2101FFF00(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFF00(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C2134(&v20, 1, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEB45A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB4610(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(24 * v2);
    v19 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 12;
    do
    {
      sub_2101FF2E8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 12, v6 = (char *)sub_2101FF5A0(v5), ++v5[14], sub_210200078(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_210200078(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C247C(&v20, 2, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEB4894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB48FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20E92CED8();
    __p = operator new(48 * v2);
    v23 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF2E8((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_2101FF5A0(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_210201FF0(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_2101FF5A0(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_210201FF0(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 24], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_2100C27C4(&v24, 3, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v24 + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20FEB4BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB4C58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p;
  void *v21;
  char *v22;
  uint64_t v23;
  char *v24;

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20F42FE78();
    v4 = (char *)operator new(6 * v2);
    v5 = &v4[v3];
    __p = v4;
    v22 = &v4[v3];
    bzero(v4, 6 * v2);
    v21 = v5;
  }
  if (v2)
  {
    v6 = (_QWORD *)a1[1];
    v7 = 3;
    do
    {
      sub_2101FF2E8((uint64_t)v6);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v8 = (uint64_t *)a1[1], v23 = 3, v24 = (char *)__p + v7 - 3, v9 = (char *)sub_2101FF5A0(v8), ++v8[14], sub_2101FFD20(v9, (uint64_t)&v23), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v10 = (uint64_t *)a1[1];
      v23 = 3;
      v24 = (char *)__p + v7;
      v11 = (char *)sub_2101FF5A0(v10);
      ++v10[14];
      sub_2101FFD20(v11, (uint64_t)&v23);
      v6 = (_QWORD *)a1[1];
      v12 = v6[6];
      v6[4] = *(_QWORD *)(v12 - 8);
      v13 = v6[9];
      v6[14] = *(_QWORD *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2100C1C50(&v23, 5, (uint64_t)&__p);
  v15 = v23;
  v14 = v24;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v16 = *a1;
  v17 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)(v16 + 24) = v14;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20FEB4EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB4F30(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0)
      sub_20FDFA718();
    __p = operator new(12 * v2);
    v19 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 6;
    do
    {
      sub_2101FF2E8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 6, v6 = (char *)sub_2101FF5A0(v5), ++v5[14], sub_2101FFE10(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFE10(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2100C1F90(&v20, 6, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEB51B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB5218(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p;
  void *v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v2 = *(_QWORD *)(*a1 + 8);
  v18 = 0;
  v19 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20EABADD4();
    __p = operator new(24 * v2);
    v19 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v18 = v19;
  }
  if (v2)
  {
    v3 = (_QWORD *)a1[1];
    v4 = 12;
    do
    {
      sub_2101FF2E8((uint64_t)v3);
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v5 = (uint64_t *)a1[1], v20 = 3, v21 = (char *)__p + v4 - 12, v6 = (char *)sub_2101FF5A0(v5), ++v5[14], sub_2101FFFBC(v6, (uint64_t)&v20), !__p)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v7 = (uint64_t *)a1[1];
      v20 = 3;
      v21 = (char *)__p + v4;
      v8 = (char *)sub_2101FF5A0(v7);
      ++v7[14];
      sub_2101FFFBC(v8, (uint64_t)&v20);
      v3 = (_QWORD *)a1[1];
      v9 = v3[6];
      v3[4] = *(_QWORD *)(v9 - 8);
      v10 = v3[9];
      v3[14] = *(_QWORD *)(v10 - 8);
      v3[6] = v9 - 8;
      v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C22D8(&v20, 7, (uint64_t)&__p);
  v12 = v20;
  v11 = v21;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v20 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v13 = *a1;
  v14 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v11;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_20FEB549C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB5504(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *__p;
  void *v22;
  char *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*a1 + 8);
  v22 = 0;
  v23 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20FDFA718();
    __p = operator new(48 * v2);
    v23 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v22 = v23;
  }
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF2E8((uint64_t)v4);
      v7 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_29;
      }
      v8 = (uint64_t *)a1[1];
      v9 = (char *)sub_2101FF5A0(v8);
      ++v8[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_210201934(v9, (uint64_t)&v24);
      v10 = v24;
      if (v25 != v24)
      {
        memmove(&v7[v3], v24, v25 - v24);
        v10 = v24;
      }
      if (v10)
      {
        v25 = v10;
        operator delete(v10);
      }
      v11 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_29:
        abort();
      }
      v12 = (uint64_t *)a1[1];
      v13 = (char *)sub_2101FF5A0(v12);
      ++v12[14];
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_210201934(v13, (uint64_t)&v24);
      v14 = v24;
      if (v25 != v24)
      {
        memmove(&v11[v3 + 24], v24, v25 - v24);
        v14 = v24;
      }
      if (v14)
      {
        v25 = v14;
        operator delete(v14);
      }
      v4 = (_QWORD *)a1[1];
      v5 = v4[6];
      v4[4] = *(_QWORD *)(v5 - 8);
      v6 = v4[9];
      v4[14] = *(_QWORD *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_2100C2620(&v24, 8, (uint64_t)&__p);
  v16 = v24;
  v15 = v25;
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)v24 + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v17 = *a1;
  v18 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v15;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
}

void sub_20FEB57DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB5860(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62)
      sub_20E867F44();
    __p = operator new(24 * v2);
    v21 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 12;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF2E8((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v6 = (uint64_t *)a1[1], v7 = sub_2101FF5A0(v6), ++v6[14], sub_2102004AC(v7, (float *)&v5[v3 - 12]), (v8 = (char *)__p) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_2101FF5A0(v9);
      ++v9[14];
      sub_2102004AC(v10, (float *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2100C2968(v22, 11, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20FEB5AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB5B38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *__p;
  void *v20;
  char *v21;
  _QWORD v22[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61)
      sub_20E867F44();
    __p = operator new(48 * v2);
    v21 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    v20 = v21;
  }
  if (v2)
  {
    v3 = 24;
    v4 = (_QWORD *)a1[1];
    do
    {
      sub_2101FF2E8((uint64_t)v4);
      v5 = (char *)__p;
      if (!__p
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| (v6 = (uint64_t *)a1[1], v7 = sub_2101FF5A0(v6), ++v6[14], sub_2102005DC(v7, (double *)&v5[v3 - 24]), (v8 = (char *)__p) == 0)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v9 = (uint64_t *)a1[1];
      v10 = sub_2101FF5A0(v9);
      ++v9[14];
      sub_2102005DC(v10, (double *)&v8[v3]);
      v4 = (_QWORD *)a1[1];
      v11 = v4[6];
      v4[4] = *(_QWORD *)(v11 - 8);
      v12 = v4[9];
      v4[14] = *(_QWORD *)(v12 - 8);
      v4[6] = v11 - 8;
      v4[9] = v12 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_2100C2B0C(v22, 12, (uint64_t)&__p);
  v14 = v22[0];
  v13 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
}

void sub_20FEB5DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB5E10(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  void *__p;
  uint64_t v33;
  _BYTE *v34;
  _BYTE v35[24];
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v35, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v35);
        if (!v49)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v31, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v8;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v40;
    v10 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v11;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v12;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v15 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v47;
LABEL_45:
    *((_QWORD *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v35, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v31, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(_BYTE *)(v3 + 64) = 0;
    if (v38)
    {
      v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(_QWORD *)(v3 + 56) = v17;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v40;
    v19 = v39;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v43)
    {
      v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(_QWORD *)(v3 + 112) = v20;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v46)
    {
      v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(_QWORD *)(v3 + 144) = v21;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(_QWORD *)(v3 + 176) = v48;
      v47 = 0uLL;
      v48 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v35);
  if (v49)
  {
LABEL_38:
    v14 = v47;
    if (!(_QWORD)v47)
      goto LABEL_46;
    v23 = *((_QWORD *)&v47 + 1);
    v16 = (void *)v47;
    if (*((_QWORD *)&v47 + 1) == (_QWORD)v47)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          v30 = 0;
          if (SHIBYTE(v34) < 0)
            goto LABEL_95;
          goto LABEL_81;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      v30 = 1;
      if (SHIBYTE(v34) < 0)
LABEL_95:
        operator delete(__p);
LABEL_81:
      if (*(_BYTE *)(a2 + 131))
        v29 = 0;
      else
        v29 = v30;
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_20E9E840C(a2, &__p);
  LOBYTE(__p) = 0;
  sub_20E9E7AC8(a2, &__p);
  *(_BYTE *)(v3 + 200) = (_BYTE)__p;
  sub_20E9E88B4(a2, (_QWORD *)(v3 + 208));
  *(_OWORD *)v35 = xmmword_24CA08430;
  v26 = *(unsigned __int8 *)(v3 + 200);
  __p = (void *)(v3 + 200);
  v33 = a2;
  v34 = v35;
  sub_20FEB6464(v26, &__p);
  if (!*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          v28 = 0;
          if (SHIBYTE(v34) < 0)
            goto LABEL_80;
          goto LABEL_66;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      v28 = 1;
      if (SHIBYTE(v34) < 0)
LABEL_80:
        operator delete(__p);
LABEL_66:
      if (*(_BYTE *)(a2 + 131))
        v27 = 0;
      else
        v27 = v28;
    }
    while ((v27 & 1) != 0);
  }
}

void sub_20FEB641C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEB6464(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FEB650C(a2);
      break;
    case 1:
      sub_20FEB66E8(a2);
      break;
    case 2:
      sub_20FEB68D8(a2);
      break;
    case 3:
      sub_20FEB6ACC(a2);
      break;
    case 5:
      sub_20FEB6CC0(a2);
      break;
    case 6:
      sub_20FEB6E9C(a2);
      break;
    case 7:
      sub_20FEB708C(a2);
      break;
    case 8:
      sub_20FEB7280(a2);
      break;
    case 11:
      sub_20FEB7474(a2);
      break;
    case 12:
      sub_20FEB7668(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEB650C(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7AC8(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1DF0(v16, 0, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FEB6688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB66E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7F64(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB6878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB68D8(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E840C(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB6A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB6ACC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E88B4(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB6C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB6CC0(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  _BYTE *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p;
  _BYTE *v14;
  _BYTE *v15;
  _QWORD v16[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v14 = 0;
  v15 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = operator new(2 * v2);
    __p = v4;
    v15 = &v4[v3];
    bzero(v4, v3);
    v14 = &v4[v3];
    v5 = v3;
    if (v3)
    {
      v6 = a1[1];
      do
      {
        sub_20E9E7880(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2100C1C50(v16, 5, (uint64_t)&__p);
  v8 = v16[0];
  v7 = v16[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v16[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = *a1;
  v10 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20FEB6E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB6E9C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        sub_20E9E7D10(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB702C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB708C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E81B8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB7220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB7280(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8660(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB7414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB7474(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        sub_20E9E8D84(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB7608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB7668(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        sub_20E9E8FD8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB77FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB785C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25[27];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v25);
    sub_20FDE470C((uint64_t)v26, v25);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v26);
        if (!v41)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v24, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v8;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v32;
    v10 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v11;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v12;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v15 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v39;
LABEL_45:
    *((_QWORD *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v25);
  sub_20FDE470C((uint64_t)v26, v25);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v24, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(_BYTE *)(v3 + 64) = 0;
    if (v30)
    {
      v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(_QWORD *)(v3 + 56) = v17;
      v28 = 0uLL;
      v29 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v32;
    v19 = v31;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v35)
    {
      v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(_QWORD *)(v3 + 112) = v20;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v38)
    {
      v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(_QWORD *)(v3 + 144) = v21;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(_QWORD *)(v3 + 176) = v40;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    v14 = v39;
    if (!(_QWORD)v39)
      goto LABEL_46;
    v23 = *((_QWORD *)&v39 + 1);
    v16 = (void *)v39;
    if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v30 && SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  sub_20EB0580C((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF4C0C((uint64_t)v25, a2, v4);
  sub_20FEB7CD0((uint64_t)v25, a2, v3 + 200);
}

void sub_20FEB7C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEB7CD0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  std::logic_error *exception;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  a2[6] = v3 + 4;
  sub_2100B6EE0(a2);
  sub_20FEB7DA0(a2, a3);
  v9 = a2[12];
  v10 = a2[9];
  a2[6] = *(_QWORD *)(v9 - 8) + *(_QWORD *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_20FEB7D8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEB7DA0(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  std::logic_error *exception;
  _QWORD v10[3];
  __int128 v11;

  v2 = a1[6];
  v3 = a1[7];
  if (v3 <= v2)
    goto LABEL_6;
  v4 = a1[3];
  v5 = *(unsigned __int8 *)(v4 + v2);
  v6 = v2 + 1;
  a1[6] = v6;
  *(_BYTE *)a2 = v5;
  v7 = v3 >= v6;
  v8 = v3 - v6;
  if (!v7)
    v8 = 0;
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E89FD70(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v4 + v6);
  a1[6] += 8;
  v11 = xmmword_24CA08430;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_20FEB7EA0(v5, v10);
}

void sub_20FEB7E78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEB7E8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20FEB7EA0(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FEB7F48(a2);
      break;
    case 1:
      sub_20FEB8188(a2);
      break;
    case 2:
      sub_20FEB83D4(a2);
      break;
    case 3:
      sub_20FEB8624(a2);
      break;
    case 5:
      sub_20FEB8874(a2);
      break;
    case 6:
      sub_20FEB8AB4(a2);
      break;
    case 7:
      sub_20FEB8D00(a2);
      break;
    case 8:
      sub_20FEB8F50(a2);
      break;
    case 11:
      sub_20FEB91A0(a2);
      break;
    case 12:
      sub_20FEB93F0(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEB7F48(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1DF0(v22, 0, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB8118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB8188(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2134(v23, 1, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB8364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB83D4(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C247C(v23, 2, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB85B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB8624(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C27C4(v23, 3, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB8804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB8874(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  char *v5;
  size_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::logic_error *exception;
  void *__p;
  char *v20;
  char *v21;
  _QWORD v22[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v20 = 0;
  v21 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    v5 = &v4[v3];
    __p = v4;
    v21 = &v4[v3];
    bzero(v4, v3);
    v20 = &v4[v3];
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v6 = v5 - v4;
  v7 = (_QWORD *)a1[1];
  v8 = v7[6];
  v9 = v7[7];
  v10 = v9 >= v8;
  v11 = v9 - v8;
  if (!v10)
    v11 = 0;
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2100C1C50(v22, 5, (uint64_t)&__p);
  v13 = v22[0];
  v12 = v22[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v22[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = *a1;
  v15 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)(v14 + 24) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB8A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB8AB4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v22 = &v5[2 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C1F90(v23, 6, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB8C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB8D00(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C22D8(v23, 7, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB8EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB8F50(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2620(v23, 8, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB9130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB91A0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v22 = &v5[4 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2968(v23, 11, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB9380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB93F0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  char *v5;
  char *v6;
  size_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::logic_error *exception;
  void *__p;
  char *v21;
  char *v22;
  _QWORD v23[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v21 = 0;
  v22 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v22 = &v5[8 * v3];
    bzero(v5, v4);
    v6 = &v5[v4];
    v21 = &v5[v4];
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = v6 - v5;
  v8 = (_QWORD *)a1[1];
  v9 = v8[6];
  v10 = v8[7];
  v11 = v10 >= v9;
  v12 = v10 - v9;
  if (!v11)
    v12 = 0;
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA00, MEMORY[0x24BEDAB00]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2100C2B0C(v23, 12, (uint64_t)&__p);
  v14 = v23[0];
  v13 = v23[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v23[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v15 = *a1;
  v16 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB95D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB9640(int *a1, _BYTE *a2, _BYTE *a3)
{
  int v5;
  int v7;
  unsigned int v8;
  __int128 *v9;
  _BYTE *v10[3];
  __int128 v11;

  v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v10[0]) = 1;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, v10);
    if (LODWORD(v10[0]) >= 2)
    {
      v8 = v10[0];
      v9 = sub_20FEB9740();
      sub_20E9F5C70((std::string *)v9, v8, 1u);
    }
    v5 = *a1;
  }
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
  v10[0] = a3;
  sub_20FE180CC(a2, v10);
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 120))(a2, a3 + 8);
  v11 = xmmword_24CA08430;
  v7 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_20FEB9AF0(v7, v10);
  if (v5 >= 1)
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20FEB9740()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A575F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A575F8))
    return &xmmword_254A575E0;
  v2 = sub_20FEB981C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A575E0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A575F0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A575E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A575E0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A575F8);
  return &xmmword_254A575E0;
}

void sub_20FEB9804(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A575F8);
  _Unwind_Resume(a1);
}

std::string *sub_20FEB981C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A57618);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A57618))
    return &stru_254A57600;
  sub_20FEB990C((uint64_t)__p);
  sub_20F4484C8((char *)__p, &stru_254A57600);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A57600, &dword_20E81F000);
  __cxa_guard_release(&qword_254A57618);
  return &stru_254A57600;
}

void sub_20FEB98CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A57618);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A57618);
  _Unwind_Resume(a1);
}

void sub_20FEB990C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A57638);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A57638))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::LinesSample<3>]", qword_254A57620);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57620, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57638);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A57658);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A57658))
  {
    v5 = sub_20E8A2354(qword_254A57620, "<", 0);
    sub_20E89FC08(qword_254A57620, 0, v5, qword_254A57640);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A57640, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57658);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A57678);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A57678))
  {
    sub_21023CD84((uint64_t)qword_254A57640, (uint64_t)&xmmword_254A57660);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A57660, &dword_20E81F000);
    __cxa_guard_release(&qword_254A57678);
  }
  if (byte_254A57677 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A57660, *((unint64_t *)&xmmword_254A57660 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A57660;
    *(_QWORD *)(a1 + 16) = unk_254A57670;
  }
}

void sub_20FEB9AA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57678);
  _Unwind_Resume(a1);
}

void sub_20FEB9AC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57658);
  _Unwind_Resume(a1);
}

void sub_20FEB9AD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A57638);
  _Unwind_Resume(a1);
}

void sub_20FEB9AF0(int a1, _QWORD *a2)
{
  switch(a1)
  {
    case 0:
      sub_20FEB9B98(a2);
      break;
    case 1:
      sub_20FEB9D60(a2);
      break;
    case 2:
      sub_20FEB9F40(a2);
      break;
    case 3:
      sub_20FEBA124(a2);
      break;
    case 5:
      sub_20FEBA308(a2);
      break;
    case 6:
      sub_20FEBA4D0(a2);
      break;
    case 7:
      sub_20FEBA6B0(a2);
      break;
    case 8:
      sub_20FEBA894(a2);
      break;
    case 11:
      sub_20FEBAA78(a2);
      break;
    case 12:
      sub_20FEBAC5C(a2);
      break;
    default:
      sub_21022EFF8(a1);
  }
}

void sub_20FEB9B98(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1DF0(v15, 0, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB9D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB9D60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20E867F44();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C2134(v18, 1, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEB9EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEB9F40(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C247C(v18, 2, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEBA0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEBA124(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20E92CED8();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C27C4(v18, 3, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEBA2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEBA308(_QWORD *a1)
{
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p;
  char *v13;
  char *v14;
  _QWORD v15[2];

  v2 = 3 * *(_QWORD *)(*a1 + 8);
  v13 = 0;
  v14 = 0;
  v3 = 2 * v2;
  __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0)
      sub_20F42FE78();
    v4 = (char *)operator new(2 * v2);
    __p = v4;
    v14 = &v4[v3];
    bzero(v4, v3);
    v13 = &v4[v3];
    v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2100C1C50(v15, 5, (uint64_t)&__p);
  v7 = v15[0];
  v6 = v15[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v15[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v8 = *a1;
  v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (__p)
  {
    v13 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEBA470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEBA4D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 < 0)
      sub_20FDFA718();
    v4 = 12 * v2;
    v5 = (char *)operator new(12 * v2);
    __p = v5;
    v17 = &v5[2 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 1;
      v7 = a1[1];
      v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2100C1F90(v18, 6, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEBA650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEBA6B0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20EABADD4();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C22D8(v18, 7, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEBA834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEBA894(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20FDFA718();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2620(v18, 8, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEBAA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEBAA78(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62)
      sub_20E867F44();
    v4 = 24 * v2;
    v5 = (char *)operator new(24 * v2);
    __p = v5;
    v17 = &v5[4 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 2;
      v7 = a1[1];
      v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2100C2968(v18, 11, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEBABFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20FEBAC5C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p;
  char *v16;
  char *v17;
  _QWORD v18[2];

  v2 = *(_QWORD *)(*a1 + 8);
  v16 = 0;
  v17 = 0;
  v3 = 6 * v2;
  __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61)
      sub_20E867F44();
    v4 = 48 * v2;
    v5 = (char *)operator new(48 * v2);
    __p = v5;
    v17 = &v5[8 * v3];
    bzero(v5, v4);
    v16 = &v5[v4];
    if (v4)
    {
      v6 = v4 >> 3;
      v7 = a1[1];
      v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2100C2B0C(v18, 12, (uint64_t)&__p);
  v10 = v18[0];
  v9 = v18[1];
  if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v18[0] + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)&unk_2102CFFC7, 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v11 = *a1;
  v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = v9;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20FEBADE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20FEBAE40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _BOOL8 v11;
  _QWORD v13[5];
  unsigned __int8 **v14;
  _QWORD v15[5];
  unsigned __int8 **v16;
  char v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[5] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20FDD6BEC(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_20FE0E180(v4, (uint64_t)v24);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    sub_20FDDA17C(v4, (uint64_t)v24);
  }
  v6 = a2 + 16;
  v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_20FDD6BEC(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_20FE0E180(v6, (uint64_t)v18);
  }
  else
  {
    if (v7)
      sub_20E877AB8();
    sub_20FDDA17C(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  v13[2] = &v20;
  v13[3] = &v21;
  v13[4] = &v22;
  v14 = (unsigned __int8 **)&v23;
  if (sub_20FF1D2E8((uint64_t)&v17, v15, v13))
  {
    if (*((_BYTE *)v16 + 24) && *((_BYTE *)v14 + 24))
    {
      v8 = *v16;
      v9 = v16[1];
      v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_20FF1C59C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9)
              goto LABEL_23;
          }
          goto LABEL_22;
        }
LABEL_23:
        v11 = sub_2100CA54C((int *)(a1 + 200), (int *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)v16 + 24) != 0) == (*((_BYTE *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  v11 = 0;
LABEL_24:
  sub_20EB0580C((uint64_t)v18);
  sub_20EB0580C((uint64_t)v24);
  return v11;
}

void sub_20FEBB028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a23);
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEBB044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_20EB0580C((uint64_t)&a49);
  _Unwind_Resume(a1);
}

void sub_20FEBB058(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09118, 0);
  if (v4)
  {
    sub_20FEBB3D0(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24C9B45D8, 0);
    if (v5)
    {
      sub_20FEBB670(&v9, (uint64_t)v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09150, 0);
      if (v6)
      {
        sub_20FEBB864(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6D00, (const struct __class_type_info *)&unk_24CA09198, 0);
        if (v7)
        {
          sub_20FEBBB04(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA16588)
            sub_20FEBBCDC(&v9, (uint64_t)a1);
          else
            sub_20FEBB1BC(&v8, a1);
        }
      }
    }
  }
}

void sub_20FEBB1BC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v8 = a2[2];
    LODWORD(v12) = 4;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v9 = v12;
    if (v8 < 1)
    {
      sub_20FE13A54((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v8 == 2)
    {
      LODWORD(v12) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE13A54((uint64_t)a2, v4, v9);
  }
  else if (v5 == 1)
  {
    v10 = a2[2];
    LODWORD(v12) = 5;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v11 = v12;
    if (v10 < 1)
    {
      sub_20FE133CC((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v10 == 2)
    {
      LODWORD(v12) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FE133CC((uint64_t)a2, v4, v11);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = a2[2];
    LODWORD(v12) = 6;
    (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    v7 = v12;
    if (v6 < 1)
    {
      sub_20FDEB904((uint64_t)a2, v4, v12);
      goto LABEL_17;
    }
    if (v6 == 2)
    {
      LODWORD(v12) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(_QWORD *)a2 + 104))(a2, &v12);
    }
    (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 16))(a2);
    sub_20FDEB904((uint64_t)a2, v4, v7);
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 24))(a2);
LABEL_17:
  v12 = *((_QWORD *)a2 + 1);
  sub_20FE5A880((int *)&v12, (uint64_t)a2, v3 + 200);
}

void sub_20FEBB3D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0EFCC(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FAEA0(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FD244(a2, &v18);
      sub_20FDE4E60(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FAEA0(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FD244(a2, &v18);
    sub_20FE0E65C(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20FE560D4((uint64_t)&v16, a2, v3 + 200);
}

void sub_20FEBB670(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    v7 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v7 + 40))
    {
      v15 = (uint64_t *)(v7 + 16);
      sub_20E9F3D4C(&v15, 4u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v15, v7 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE1036C(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v8 + 40))
    {
      v15 = (uint64_t *)(v8 + 16);
      sub_20E9F3D4C(&v15, 5u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v15, v8 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FE10250(a2, v4, 5u);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v6 + 40))
    {
      v15 = (uint64_t *)(v6 + 16);
      sub_20E9F3D4C(&v15, 6u);
    }
    else
    {
      sub_20E9F3FC0((uint64_t)&v15, v6 + 8);
    }
    sub_20E9EE95C(*(_QWORD *)(a2 + 24));
    sub_20FDE75BC(a2, v4, 6u);
  }
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  v14 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v14 + 40))
  {
    v15 = (uint64_t *)(v14 + 16);
    sub_20E9F3D4C(&v15, 2u);
  }
  else
  {
    sub_20E9F3FC0((uint64_t)&v15, v14 + 8);
  }
  sub_20FE571B8((uint64_t)&v15, a2, (int *)(v3 + 200));
}

void sub_20FEBB864(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v10)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v16 = "version";
    v17 = 7;
    v18 = 4;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v11 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v11)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE113C8(a2, v4, v18);
    v12 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v12 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v12 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v6 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "info";
        *(_QWORD *)(a2 + 80) = 4;
        if (!v6)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FA8A4(a2);
      v16 = "version";
      v17 = 7;
      v18 = 6;
      if (**(unsigned __int8 **)(a2 + 40) <= 1u)
      {
        v7 = *(unsigned __int8 *)(a2 + 88);
        *(_QWORD *)(a2 + 72) = "version";
        *(_QWORD *)(a2 + 80) = 7;
        if (!v7)
          *(_BYTE *)(a2 + 88) = 1;
      }
      sub_2101FB154(a2, &v18);
      sub_20FDE8860(a2, v4, v18);
      v8 = *(_QWORD *)(a2 + 56);
      v9 = *(unsigned __int8 **)(v8 - 8);
      *(_QWORD *)(a2 + 40) = v9;
      *(_QWORD *)(a2 + 56) = v8 - 8;
      if (!*(_BYTE *)(a2 + 88))
        goto LABEL_28;
LABEL_27:
      *(_BYTE *)(a2 + 88) = 0;
      goto LABEL_28;
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v13 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "info";
      *(_QWORD *)(a2 + 80) = 4;
      if (!v13)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FA8A4(a2);
    v16 = "version";
    v17 = 7;
    v18 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v14 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "version";
      *(_QWORD *)(a2 + 80) = 7;
      if (!v14)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_2101FB154(a2, &v18);
    sub_20FE10C84(a2, v4, v18);
    v15 = *(_QWORD *)(a2 + 56);
    v9 = *(unsigned __int8 **)(v15 - 8);
    *(_QWORD *)(a2 + 40) = v9;
    *(_QWORD *)(a2 + 56) = v15 - 8;
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_27;
  }
LABEL_28:
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "value";
    *(_QWORD *)(a2 + 80) = 5;
    *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20FE587E4((uint64_t)&v16, a2, v3 + 200);
}

_QWORD *sub_20FEBBB04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a2 + 40))
    {
      v8 = *(_QWORD **)(a2 + 24);
      v18 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v8, (uint64_t)&v18, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE12720(a2, v4, 4u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
        sub_20E877AB8();
      if (*(_QWORD *)(a2 + 40))
      {
        v6 = *(_QWORD **)(a2 + 24);
        v16 = *(_BYTE *)(a2 + 32);
        sub_20E86A980(v6, (uint64_t)&v16, 1);
      }
      std::ostream::operator<<();
      ++*(_QWORD *)(a2 + 40);
      sub_20FDE9AB4(a2, v4, 6u);
      v7 = *(_BYTE *)(a2 + 34);
      if (!*(_QWORD *)(a2 + 40))
        goto LABEL_16;
LABEL_15:
      v10 = *(_QWORD **)(a2 + 24);
      v19 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v10, (uint64_t)&v19, 1);
      goto LABEL_16;
    }
    if (*(_QWORD *)(a2 + 40))
    {
      v9 = *(_QWORD **)(a2 + 24);
      v17 = *(_BYTE *)(a2 + 32);
      sub_20E86A980(v9, (uint64_t)&v17, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a2 + 40);
    sub_20FE1217C(a2, v4, 5u);
    v7 = *(_BYTE *)(a2 + 34);
    if (*(_QWORD *)(a2 + 40))
      goto LABEL_15;
  }
LABEL_16:
  v11 = *(_QWORD **)(a2 + 24);
  v20 = v7;
  sub_20E86A980(v11, (uint64_t)&v20, 1);
  v12 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v21 = *(_BYTE *)(a2 + 32);
    sub_20E86A980(v13, (uint64_t)&v21, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a2 + 40);
  return sub_20FE595D0((uint64_t)&v15, a2, v3 + 200);
}

char *sub_20FEBBCDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int __src;
  uint64_t v12;

  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    __src = 4;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12E58(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    __src = 5;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v8 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FE12D3C(a2, v4, v8);
  }
  else
  {
    if (v5)
      sub_20E877AB8();
    __src = 6;
    sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    v6 = __src;
    sub_2100B6A04((_QWORD *)a2);
    sub_20FDEA96C(a2, v4, v6);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 56) - 8) + *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v9 + 10) = *(_QWORD *)(a2 + 32) - v9 - 18;
  *(_QWORD *)(a2 + 56) -= 8;
  __src = 2;
  sub_2100B8FD4(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  return sub_20FE5A300((uint64_t)&__src, (_QWORD *)a2, (int *)(v3 + 200));
}

void sub_20FEBBE5C(uint64_t (***a1)(), uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = a2;
  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09220, 0);
  if (v4)
  {
    sub_20FEBC4E8(&v9, (uint64_t)v4);
  }
  else
  {
    v9 = a2;
    v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24C9B0410, 0);
    if (v5)
    {
      sub_20FEBC994(&v9, v5);
    }
    else
    {
      v9 = a2;
      v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09258, 0);
      if (v6)
      {
        sub_20FEBCE04(&v9, (uint64_t)v6);
      }
      else
      {
        v9 = a2;
        v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C9B6CE8, (const struct __class_type_info *)&unk_24CA09290, 0);
        if (v7)
        {
          sub_20FEBD2B0(&v9, (uint64_t)v7);
        }
        else
        {
          v9 = a2;
          if (*a1 == &off_24CA167C8)
            sub_20FEBD8F4(&v9, a1);
          else
            sub_20FEBBFC0(&v8, (uint64_t *)a1);
        }
      }
    }
  }
}

void sub_20FEBBFC0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  void (**v28)(int);
  char v29;
  uint64_t v30[27];
  unsigned int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v30);
    sub_20FDE470C((uint64_t)&v31, v30);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)&v31);
        if (!v46)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v29, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v8;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v37;
    v10 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v11;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v12;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v15 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v44;
LABEL_45:
    *((_QWORD *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v30);
  sub_20FDE470C((uint64_t)&v31, v30);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v29, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(_BYTE *)(v3 + 64) = 0;
    if (v35)
    {
      v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(_QWORD *)(v3 + 56) = v17;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v37;
    v19 = v36;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v40)
    {
      v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(_QWORD *)(v3 + 112) = v20;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v43)
    {
      v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(_QWORD *)(v3 + 144) = v21;
      v41 = 0uLL;
      v42 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(_QWORD *)(v3 + 176) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    v14 = v44;
    if (!(_QWORD)v44)
      goto LABEL_46;
    v23 = *((_QWORD *)&v44 + 1);
    v16 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) == (_QWORD)v44)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (v35 && SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  sub_20EB0580C((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *a2;
  v30[0] = a2[1];
  v25 = v30[0];
  v31 = 6;
  (*(void (**)(uint64_t *, unsigned int *))(v24 + 104))(a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3)
      sub_20FDF69C0((uint64_t)&v31, (uint64_t)a2, v4, v31);
    else
      sub_20FDF6C34((uint64_t)a2, v4, v31);
  }
  else
  {
    sub_20FDF63C8((int *)v30, (uint64_t)a2, v4, v31);
  }
  v26 = *a2;
  v30[0] = a2[1];
  v27 = v30[0];
  v31 = 2;
  (*(void (**)(uint64_t *, unsigned int *))(v26 + 104))(a2, &v31);
  v28 = (void (**)(int))(v3 + 200);
  if (v27 < 1)
  {
    if (v31 < 2)
      sub_20FE6C144((uint64_t)&v31, (uint64_t)a2, (uint64_t)v28);
    else
      sub_20FE6C340((uint64_t)a2, (void (**)(int))(v3 + 200));
  }
  else
  {
    sub_20FE6BC68((int *)v30, (uint64_t)a2, v28, v31);
  }
}

void sub_20FEBC4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEBC4E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDECB7C(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20FE5B8BC(a2, v3 + 200);
}

void sub_20FEBC94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20FEBC994(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v25;
  uint64_t v26[27];
  _BYTE v27[8];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v26);
    sub_20FDE470C((uint64_t)v27, v26);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v27);
        if (!v42)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v25, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v8;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v33;
    v10 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v11;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v12;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v15 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v40;
LABEL_45:
    *((_QWORD *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v26);
  sub_20FDE470C((uint64_t)v27, v26);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v25, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(_BYTE *)(v3 + 64) = 0;
    if (v31)
    {
      v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(_QWORD *)(v3 + 56) = v17;
      v29 = 0uLL;
      v30 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v33;
    v19 = v32;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v36)
    {
      v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(_QWORD *)(v3 + 112) = v20;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v39)
    {
      v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(_QWORD *)(v3 + 144) = v21;
      v37 = 0uLL;
      v38 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(_QWORD *)(v3 + 176) = v41;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    v14 = v40;
    if (!(_QWORD)v40)
      goto LABEL_46;
    v23 = *((_QWORD *)&v40 + 1);
    v16 = (void *)v40;
    if (*((_QWORD *)&v40 + 1) == (_QWORD)v40)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (v36 && SHIBYTE(v35) < 0)
    operator delete((void *)v34);
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  sub_20EB0580C((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  sub_20FDF0564((uint64_t)v26, a2, v4);
  return sub_20FE5F188(a2, (int *)(v3 + 200));
}

void sub_20FEBCDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20FEBCE04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  char v27;
  uint64_t v28[27];
  _BYTE v29[8];
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)v28);
    sub_20FDE470C((uint64_t)v29, v28);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v29);
        if (!v44)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v27, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v8;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v35;
    v10 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v11;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v12;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v15 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v42;
LABEL_45:
    *((_QWORD *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)v28);
  sub_20FDE470C((uint64_t)v29, v28);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v27, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(_BYTE *)(v3 + 64) = 0;
    if (v33)
    {
      v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(_QWORD *)(v3 + 56) = v17;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v35;
    v19 = v34;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v38)
    {
      v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(_QWORD *)(v3 + 112) = v20;
      v36 = 0uLL;
      v37 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v41)
    {
      v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(_QWORD *)(v3 + 144) = v21;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(_QWORD *)(v3 + 176) = v43;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    v14 = v42;
    if (!(_QWORD)v42)
      goto LABEL_46;
    v23 = *((_QWORD *)&v42 + 1);
    v16 = (void *)v42;
    if (*((_QWORD *)&v42 + 1) == (_QWORD)v42)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (v38 && SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (v33 && SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  sub_20EB0580C((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  v24 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "info";
  *(_QWORD *)(a2 + 96) = 4;
  if (!v24)
    *(_BYTE *)(a2 + 104) = 1;
  sub_20FDF1718(a2, v4);
  v25 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "value";
  *(_QWORD *)(a2 + 96) = 5;
  if (!v25)
    *(_BYTE *)(a2 + 104) = 1;
  return sub_20FE61D6C(a2, v3 + 200);
}

void sub_20FEBD268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20FEBD2B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  void *__p;
  uint64_t v34;
  char v35;
  _BYTE v36[8];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a1 + 16;
  v5 = *(_DWORD *)(*a1 + 192);
  if (!v5)
    goto LABEL_56;
  if (v5 == 1)
  {
    sub_20FE0E180(*a1 + 16, (uint64_t)&__p);
    sub_20FDE470C((uint64_t)v36, (uint64_t *)&__p);
    v6 = *(unsigned int *)(v3 + 192);
    if ((_DWORD)v6 != -1)
    {
      if (!(_DWORD)v6)
      {
        sub_20FDEDE2C(v4, (uint64_t)v36);
        if (!v51)
          goto LABEL_46;
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_24CA08120[v6])(&v32, v4);
    }
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v8 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v8;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v9 = v42;
    v10 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(_QWORD *)(v3 + 88) = v9;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v11 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v11;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v12 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v12;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v13 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13)
      goto LABEL_46;
LABEL_22:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v15 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v15 - 1) < 0)
        operator delete(*(void **)(v15 - 24));
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    v16 = (void *)v49;
LABEL_45:
    *((_QWORD *)&v49 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2)
    sub_20E877AB8();
  sub_20FDD6BEC(*a1 + 16, (uint64_t)&__p);
  sub_20FDE470C((uint64_t)v36, (uint64_t *)&__p);
  v7 = *(unsigned int *)(v3 + 192);
  if ((_DWORD)v7 == -1)
    goto LABEL_29;
  if ((_DWORD)v7)
  {
    ((void (*)(char *, uint64_t))off_24CA08120[v7])(&v32, v4);
LABEL_29:
    *(_BYTE *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(_BYTE *)(v3 + 64) = 0;
    if (v40)
    {
      v17 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(_QWORD *)(v3 + 56) = v17;
      v38 = 0uLL;
      v39 = 0;
      *(_BYTE *)(v3 + 64) = 1;
    }
    v18 = v42;
    v19 = v41;
    *(_BYTE *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(_QWORD *)(v3 + 88) = v18;
    *(_BYTE *)(v3 + 120) = 0;
    if (v45)
    {
      v20 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(_QWORD *)(v3 + 112) = v20;
      v43 = 0uLL;
      v44 = 0;
      *(_BYTE *)(v3 + 120) = 1;
    }
    *(_BYTE *)(v3 + 128) = 0;
    *(_BYTE *)(v3 + 152) = 0;
    if (v48)
    {
      v21 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(_QWORD *)(v3 + 144) = v21;
      v46 = 0uLL;
      v47 = 0;
      *(_BYTE *)(v3 + 152) = 1;
    }
    *(_BYTE *)(v3 + 160) = 0;
    *(_BYTE *)(v3 + 184) = 0;
    v22 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(_QWORD *)(v3 + 176) = v50;
      v49 = 0uLL;
      v50 = 0;
      *(_BYTE *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22)
      goto LABEL_46;
    goto LABEL_38;
  }
  sub_20FDEDE2C(v4, (uint64_t)v36);
  if (v51)
  {
LABEL_38:
    v14 = v49;
    if (!(_QWORD)v49)
      goto LABEL_46;
    v23 = *((_QWORD *)&v49 + 1);
    v16 = (void *)v49;
    if (*((_QWORD *)&v49 + 1) == (_QWORD)v49)
      goto LABEL_45;
    do
    {
      if (*(char *)(v23 - 1) < 0)
        operator delete(*(void **)(v23 - 24));
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v48 && SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  if (v45 && SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (v40 && SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  sub_20EB0580C((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192))
    sub_20E877AB8();
LABEL_56:
  LODWORD(__p) = 6;
  sub_20E9E840C(a2, &__p);
  v24 = __p;
  if (__p >= 6)
    v25 = 6;
  else
    v25 = __p;
  if (v25 < 3)
    sub_20FDF3288((uint64_t)&__p, a2, v4, v25);
  else
    sub_20FDF3478(a2, v4, v25);
  if (v24 >= 3 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        break;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          v29 = 0;
          if (v35 < 0)
            goto LABEL_83;
          goto LABEL_69;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      v29 = 1;
      if (v35 < 0)
LABEL_83:
        operator delete(__p);
LABEL_69:
      if (*(_BYTE *)(a2 + 131))
        v28 = 0;
      else
        v28 = v29;
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_20E9E840C(a2, &__p);
  v26 = __p;
  if (__p >= 2)
    v27 = 2;
  else
    v27 = __p;
  if (v27 < 2)
    sub_20FE6547C((uint64_t)&__p, a2, v3 + 200);
  else
    sub_20FE65678(a2, (int *)(v3 + 200));
  if (v26 >= 2 && !*(_BYTE *)(a2 + 131))
  {
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + *(_QWORD *)(**(_QWORD **)(a2 + 16) - 24) + 32) & 2) != 0)
        return;
      sub_20E9E9FEC(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          v31 = 0;
          if (v35 < 0)
            goto LABEL_102;
          goto LABEL_88;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      v31 = 1;
      if (v35 < 0)
LABEL_102:
        operator delete(__p);
LABEL_88:
      if (*(_BYTE *)(a2 + 131))
        v30 = 0;
      else
        v30 = v31;
    }
    while ((v30 & 1) != 0);
  }
}

