void sub_20F19DB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  uint64_t v45;

  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v45 - 192);
  _Unwind_Resume(a1);
}

void sub_20F19DBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *object,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  uint64_t v49;

  if (*(_BYTE *)(v49 - 168) && *(char *)(v49 - 169) < 0)
    operator delete(*(void **)(v49 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&object);
  _Unwind_Resume(a1);
}

void sub_20F19DDC8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20F19DDE0(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void **v17;
  unint64_t v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  size_t v26;
  unsigned __int8 v27;
  const char *v28;
  size_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  size_t v44;
  size_t v45;
  uint64_t *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64;
  const char *v65;
  size_t v66;
  _BYTE *v67;
  unint64_t v68;
  const char *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  size_t v77;
  std::__shared_weak_count_vtbl *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  double v110;
  void *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  const char *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  _QWORD v164[3];
  int v165;
  const char *v166;
  int v167;
  const char *v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  void *__dst[2];
  int64_t v172;
  uint64_t v173[5];
  __int128 v174;
  std::__shared_weak_count *v175;
  char *v176;
  std::__shared_weak_count *v177;
  uint64_t *v178;
  __int128 v179;
  _BYTE object[24];
  __int128 v181;
  void *__p[2];
  unint64_t v183;
  char v184;
  unint64_t v185;
  void *v186;
  char v187;
  unint64_t v188;
  int v189;
  uint64_t v190;
  _BYTE v191[24];
  __int128 v192;
  char *v193;
  const char *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  _QWORD v197[5];

  v197[2] = *MEMORY[0x24BDAC8D0];
  kdebug_trace();
  kdebug_trace();
  v4 = *a2;
  v5 = *(double *)(a1 + 2080);
  if (*a2 > v5)
  {
    if (v5 <= 0.0 || v4 <= v5 + 0.015)
    {
LABEL_196:
      v118 = *(_QWORD *)(a1 + 1904) + 32 * *(_QWORD *)(a1 + 1936);
      v119 = *((_QWORD *)a2 + 3);
      v120 = *(_OWORD *)(a2 + 1);
      *(double *)v118 = v4;
      *(_OWORD *)(v118 + 8) = v120;
      *(_QWORD *)(v118 + 24) = v119;
      v121 = (uint64_t)(*(_QWORD *)(a1 + 1912) - *(_QWORD *)(a1 + 1904)) >> 5;
      v122 = *(_QWORD *)(a1 + 1936) + 1;
      if (v122 >= v121)
        v123 = (uint64_t)(*(_QWORD *)(a1 + 1912) - *(_QWORD *)(a1 + 1904)) >> 5;
      else
        v123 = 0;
      *(_QWORD *)(a1 + 1936) = v122 - v123;
      v124 = *(_QWORD *)(a1 + 1944);
      if (v124 == v121)
      {
        v125 = *(_QWORD *)(a1 + 1928) + 1;
        if (v125 < v121)
          v121 = 0;
        *(_QWORD *)(a1 + 1928) = v125 - v121;
      }
      else
      {
        *(_QWORD *)(a1 + 1944) = v124 + 1;
      }
      *(double *)(a1 + 2080) = *a2;
      return;
    }
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 1688)
      || (sub_20F1A6D2C(&v178), *(int *)v178[7] > 4)
      || (v7 = *((unsigned __int8 *)v178 + 72),
          v8 = sub_20E8C31DC((uint64_t)v178, "OSLogSurrogateAppender", 1, 0),
          v9 = v8,
          !v7)
      && !v8)
    {
LABEL_177:
      *(_QWORD *)(a1 + 1936) = 0;
      *(_QWORD *)(a1 + 1928) = 0;
      *(_QWORD *)(a1 + 1944) = 0;
      v115 = **(_QWORD **)(a1 + 2104);
      if (*(_BYTE *)(v115 + 1904))
        *(_BYTE *)(v115 + 1904) = 0;
      if (*(_BYTE *)(v115 + 2040))
        *(_BYTE *)(v115 + 2040) = 0;
      if (*(_BYTE *)(v115 + 2176))
        *(_BYTE *)(v115 + 2176) = 0;
      if (*(_BYTE *)(v115 + 2208))
        *(_BYTE *)(v115 + 2208) = 0;
      *(_OWORD *)(v115 + 2320) = 0u;
      *(_OWORD *)(v115 + 2304) = 0u;
      *(_OWORD *)(v115 + 2288) = 0u;
      *(_OWORD *)(v115 + 2352) = 0u;
      if (*(_BYTE *)(v115 + 2224))
        *(_BYTE *)(v115 + 2224) = 0;
      if (*(_BYTE *)(v115 + 2280))
        *(_BYTE *)(v115 + 2280) = 0;
      if (*(_BYTE *)(v115 + 2344))
        *(_BYTE *)(v115 + 2344) = 0;
      *(_DWORD *)(v115 + 2368) = 0;
      v116 = *(void **)(v115 + 1816);
      v117 = *(_QWORD *)(v115 + 1824) - (_QWORD)v116;
      if (v117 >= 1)
        bzero(v116, 4 * (((unint64_t)v117 >> 2) - ((unint64_t)v117 > 3)) + 4);
      *(_QWORD *)(v115 + 1848) = *(_QWORD *)(v115 + 1840);
      *(_QWORD *)(a1 + 2128) = 0xBFF0000000000000;
      *(_BYTE *)(a1 + 2136) = 0;
      *(_BYTE *)(a1 + 2144) = 0;
      *(_BYTE *)(a1 + 2112) = 0;
      *(_BYTE *)(a1 + 2120) = 0;
      if (*(_BYTE *)(a1 + 2336))
        *(_BYTE *)(a1 + 2336) = 0;
      *(_DWORD *)(a1 + 2152) = 0;
      *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a1 + 1728);
      *(_QWORD *)(a1 + 2016) = 0;
      *(_QWORD *)(a1 + 2008) = 0;
      *(_QWORD *)(a1 + 2000) = 0;
      *(_QWORD *)(a1 + 2088) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 2048) = 0;
      *(_QWORD *)(a1 + 2064) = 0;
      *(_QWORD *)(a1 + 2056) = 0;
      v4 = *a2;
      goto LABEL_196;
    }
    *(_QWORD *)v191 = &v178;
    *(std::chrono::steady_clock::time_point *)&v191[8] = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v191[16] = std::chrono::system_clock::now();
    LODWORD(v192) = 4;
    *((_QWORD *)&v192 + 1) = "unknown file";
    LODWORD(v193) = 180;
    v195 = 0;
    v196 = 0;
    v194 = "unknown function";
    v10 = **(_QWORD **)v191;
    v162 = **(_QWORD **)v191;
    if (*(char *)(**(_QWORD **)v191 + 39) < 0)
    {
      v12 = *(const char **)(v10 + 16);
      v11 = *(_QWORD *)(v10 + 24);
    }
    else
    {
      v11 = *(unsigned __int8 *)(**(_QWORD **)v191 + 39);
      v12 = (const char *)(v10 + 16);
    }
    v161 = v10 + 16;
    v64 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v64 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if ((_BYTE)v181 && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v65 = byte_254A4A4F8;
    else
      v65 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v66 = byte_254A4A4F8[23];
    else
      v66 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)object = os_log_create(v65, v12);
    v67 = &object[8];
    if (v66 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v66 >= 0x17)
    {
      v68 = v9;
      v69 = v12;
      v70 = v7;
      v71 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v66 | 7) != 0x17)
        v71 = v66 | 7;
      v72 = v71 + 1;
      v67 = operator new(v71 + 1);
      *(_QWORD *)&object[16] = v66;
      *(_QWORD *)&v181 = v72 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v67;
      v7 = v70;
      v12 = v69;
      v9 = v68;
    }
    else
    {
      BYTE7(v181) = v66;
      if (!v66)
      {
LABEL_110:
        v67[v66] = 0;
        BYTE8(v181) = 1;
        v73 = __p;
        if (v11 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v11 >= 0x17)
        {
          v74 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v11 | 7) != 0x17)
            v74 = v11 | 7;
          v75 = v74 + 1;
          v73 = operator new(v74 + 1);
          __p[1] = (void *)v11;
          v183 = v75 | 0x8000000000000000;
          __p[0] = v73;
        }
        else
        {
          HIBYTE(v183) = v11;
          if (!v11)
            goto LABEL_118;
        }
        memmove(v73, v12, v11);
LABEL_118:
        *((_BYTE *)v73 + v11) = 0;
        v184 = 1;
        v76 = *(NSObject **)object;
        if (SHIBYTE(v183) < 0)
          operator delete(__p[0]);
        if (BYTE8(v181) && SBYTE7(v181) < 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v9 && *(_QWORD *)(v9 + 24))
        {
          v77 = _os_log_pack_size();
          v78 = (std::__shared_weak_count_vtbl *)operator new(v77, (std::align_val_t)8uLL);
          v79 = (std::__shared_weak_count *)operator new();
          v80 = v79;
          v79->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v79->__shared_owners_;
          v79->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v79->__shared_weak_owners_ = 0;
          v79[1].__vftable = v78;
          *(_QWORD *)object = v78;
          *(_QWORD *)&object[8] = v78;
          *(_QWORD *)&object[16] = v79;
          do
            v82 = __ldxr(p_shared_owners);
          while (__stxr(v82 + 1, p_shared_owners));
          v181 = 0uLL;
          __p[0] = 0;
          do
            v83 = __ldaxr(p_shared_owners);
          while (__stlxr(v83 - 1, p_shared_owners));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v80);
          }
          v84 = *(_QWORD *)object;
          v85 = _os_log_pack_fill();
          v86 = *a2;
          *(_DWORD *)v85 = 134217984;
          *(double *)(v85 + 4) = v86;
          v87 = operator new();
          v88 = *(unsigned __int8 *)(v162 + 39);
          v89 = v161;
          if ((v88 & 0x80u) != 0)
          {
            v89 = *(_QWORD *)(v162 + 16);
            v88 = *(_QWORD *)(v162 + 24);
          }
          *(_QWORD *)v87 = v84;
          *(_OWORD *)(v87 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v87 + 24) = v181;
          v181 = 0uLL;
          *(_QWORD *)(v87 + 40) = v89;
          *(_QWORD *)(v87 + 48) = v88;
          *(_BYTE *)(v87 + 56) = 16;
          *(_QWORD *)&v174 = 0;
          v164[0] = v87;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), v164);
          v90 = v164[0];
          v164[0] = 0;
          if (v90)
          {
            v91 = *(std::__shared_weak_count **)(v90 + 32);
            if (v91)
            {
              v92 = (unint64_t *)&v91->__shared_owners_;
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            v94 = *(std::__shared_weak_count **)(v90 + 16);
            if (v94)
            {
              v95 = (unint64_t *)&v94->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
            MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
            v97 = v174;
            *(_QWORD *)&v174 = 0;
            if (v97)
            {
              v98 = *(std::__shared_weak_count **)(v97 + 32);
              if (v98)
              {
                v99 = (unint64_t *)&v98->__shared_owners_;
                do
                  v100 = __ldaxr(v99);
                while (__stlxr(v100 - 1, v99));
                if (!v100)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              v101 = *(std::__shared_weak_count **)(v97 + 16);
              if (v101)
              {
                v102 = (unint64_t *)&v101->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              MEMORY[0x212BC6398](v97, 0x10F0C40B62ED6C6);
            }
          }
          v104 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
          if (*((_QWORD *)&v181 + 1))
          {
            v105 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
            do
              v106 = __ldaxr(v105);
            while (__stlxr(v106 - 1, v105));
            if (!v106)
            {
              ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
              std::__shared_weak_count::__release_weak(v104);
            }
          }
          v107 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v108 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
        }
        else
        {
          os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
          v110 = *a2;
          *(_DWORD *)object = 134217984;
          *(double *)&object[4] = v110;
          v111 = (void *)_os_log_send_and_compose_impl();
          if (v111)
            free(v111);
        }
        if (v7)
        {
          sub_20E8C003C((uint64_t)v191, "[MLPosePredictor] Reset MLFilter due to accel drop at %.6f.", *a2);
          sub_20E863570((uint64_t)v191);
        }
        sub_20E863570((uint64_t)v191);
        v112 = v196;
        if (v196)
        {
          v113 = (unint64_t *)&v196->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        goto LABEL_177;
      }
    }
    memmove(v67, v65, v66);
    goto LABEL_110;
  }
  if (!*(_BYTE *)(a1 + 1688))
    return;
  sub_20F1A6D2C(v173);
  if (**(int **)(v173[0] + 56) > 4)
    return;
  v13 = *(unsigned __int8 *)(v173[0] + 72);
  v14 = sub_20E8C31DC(v173[0], "OSLogSurrogateAppender", 1, 0);
  v15 = v14;
  if (!v13 && !v14)
    return;
  sub_20E863438((uint64_t)object);
  sub_20E86A980(&object[16], (uint64_t)"[MLPosePredictor] Accel timestamp does not move foward.", 55);
  if ((v189 & 0x10) != 0)
  {
    v18 = v188;
    if (v188 < v185)
    {
      v188 = v185;
      v18 = v185;
    }
    v19 = (void **)&v184;
  }
  else
  {
    if ((v189 & 8) == 0)
    {
      v16 = 0;
      HIBYTE(v172) = 0;
      v17 = __dst;
      goto LABEL_31;
    }
    v19 = __p;
    v18 = v183;
  }
  v20 = *v19;
  v16 = v18 - (_QWORD)*v19;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v16 >= 0x17)
  {
    v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v21 = v16 | 7;
    v22 = v21 + 1;
    v17 = (void **)operator new(v21 + 1);
    __dst[1] = (void *)v16;
    v172 = v22 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_30;
  }
  HIBYTE(v172) = v18 - *(_BYTE *)v19;
  v17 = __dst;
  if (v16)
LABEL_30:
    memmove(v17, v20, v16);
LABEL_31:
  *((_BYTE *)v17 + v16) = 0;
  v164[0] = v173;
  v164[1] = std::chrono::steady_clock::now().__d_.__rep_;
  v164[2] = std::chrono::system_clock::now().__d_.__rep_;
  v165 = 4;
  v166 = "unknown file";
  v167 = 173;
  v169 = 0;
  v170 = 0;
  v168 = "unknown function";
  if (v172 >= 0)
    v23 = (const char *)__dst;
  else
    v23 = (const char *)__dst[0];
  v24 = *(_QWORD *)v164[0];
  v25 = (const char *)(*(_QWORD *)v164[0] + 16);
  v163 = v25;
  if (*(char *)(*(_QWORD *)v164[0] + 39) < 0)
  {
    v25 = *(const char **)(v24 + 16);
    v26 = *(_QWORD *)(v24 + 24);
  }
  else
  {
    v26 = *(unsigned __int8 *)(*(_QWORD *)v164[0] + 39);
  }
  v27 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v191);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v191);
    if ((_BYTE)v192 && (v191[23] & 0x80000000) != 0)
      operator delete(*(void **)v191);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v28 = byte_254A4A4F8;
  else
    v28 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v29 = byte_254A4A4F8[23];
  else
    v29 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)v191 = os_log_create(v28, v25);
  v30 = &v191[8];
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v29 >= 0x17)
  {
    v160 = v25;
    v31 = v24;
    v32 = v15;
    v33 = v23;
    v34 = v13;
    v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v35 = v29 | 7;
    v36 = v35 + 1;
    v30 = operator new(v35 + 1);
    *(_QWORD *)&v191[16] = v29;
    *(_QWORD *)&v192 = v36 | 0x8000000000000000;
    *(_QWORD *)&v191[8] = v30;
    v13 = v34;
    v23 = v33;
    v15 = v32;
    v24 = v31;
    v25 = v160;
    goto LABEL_51;
  }
  BYTE7(v192) = v29;
  if (v29)
LABEL_51:
    memmove(v30, v28, v29);
  v30[v29] = 0;
  BYTE8(v192) = 1;
  v37 = (char *)&v193;
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v26 >= 0x17)
  {
    v38 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v38 = v26 | 7;
    v39 = v38 + 1;
    v37 = (char *)operator new(v38 + 1);
    v194 = (const char *)v26;
    v195 = v39 | 0x8000000000000000;
    v193 = v37;
    goto LABEL_59;
  }
  HIBYTE(v195) = v26;
  if (v26)
LABEL_59:
    memmove(v37, v25, v26);
  v37[v26] = 0;
  LOBYTE(v196) = 1;
  v40 = *(NSObject **)v191;
  if (SHIBYTE(v195) < 0)
    operator delete(v193);
  if (BYTE8(v192) && SBYTE7(v192) < 0)
    operator delete(*(void **)&v191[8]);
  if (*(_QWORD *)v191)
    os_release(*(void **)v191);
  if (!v15 || !*(_QWORD *)(v15 + 24))
  {
    os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v191 = 136315138;
    *(_QWORD *)&v191[4] = v23;
    v47 = (void *)_os_log_send_and_compose_impl();
    if (v47)
      free(v47);
    goto LABEL_250;
  }
  v41 = _os_log_pack_size();
  v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
  v43 = (std::__shared_weak_count *)operator new();
  v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
  v43->__shared_owners_ = 0;
  v43->__shared_weak_owners_ = 0;
  v43[1].__vftable = v42;
  *(_QWORD *)&v174 = v42;
  *((_QWORD *)&v174 + 1) = v42;
  v176 = 0;
  v177 = 0;
  v175 = v43;
  v44 = strlen(v23);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v48 = v44 | 7;
    v49 = v48 + 1;
    v46 = (uint64_t *)operator new(v48 + 1);
    *(_QWORD *)&v179 = v45;
    *((_QWORD *)&v179 + 1) = v49 | 0x8000000000000000;
    v178 = v46;
    goto LABEL_78;
  }
  HIBYTE(v179) = v44;
  v46 = (uint64_t *)&v178;
  if (v44)
LABEL_78:
    memcpy(v46, v23, v45);
  *((_BYTE *)v46 + v45) = 0;
  v50 = (uint64_t)v178;
  v197[0] = v179;
  *(_QWORD *)((char *)v197 + 7) = *(_QWORD *)((char *)&v179 + 7);
  v51 = HIBYTE(v179);
  v52 = operator new(0x38uLL);
  v52[1] = 0;
  v52[2] = 0;
  v52[3] = off_24C9ABC20;
  *v52 = &off_24C9ABBD0;
  v53 = v197[0];
  v52[4] = v50;
  v52[5] = v53;
  *(_QWORD *)((char *)v52 + 47) = *(_QWORD *)((char *)v197 + 7);
  *((_BYTE *)v52 + 55) = v51;
  v197[0] = 0;
  *(_QWORD *)((char *)v197 + 7) = 0;
  v54 = v177;
  v176 = (char *)(v52 + 3);
  v177 = (std::__shared_weak_count *)v52;
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  *(_OWORD *)v191 = v174;
  v57 = v176;
  *(_QWORD *)&v191[16] = v175;
  if (v175)
  {
    v58 = (unint64_t *)&v175->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = v177;
  *(_QWORD *)&v192 = v57;
  *((_QWORD *)&v192 + 1) = v177;
  if (v177)
  {
    v61 = (unint64_t *)&v177->__shared_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v193 = v57;
    do
      v63 = __ldaxr(v61);
    while (__stlxr(v63 - 1, v61));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  else
  {
    v193 = v57;
  }
  v126 = v175;
  if (v175)
  {
    v127 = (unint64_t *)&v175->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  v129 = *(_QWORD *)v191;
  if (v193[31] >= 0)
    v130 = v193 + 8;
  else
    v130 = (char *)*((_QWORD *)v193 + 1);
  v131 = _os_log_pack_fill();
  *(_DWORD *)v131 = 136315138;
  *(_QWORD *)(v131 + 4) = v130;
  v132 = operator new();
  v133 = *(unsigned __int8 *)(v24 + 39);
  v134 = v163;
  if ((v133 & 0x80u) != 0)
  {
    v134 = *(const char **)(v24 + 16);
    v133 = *(_QWORD *)(v24 + 24);
  }
  *(_QWORD *)v132 = v129;
  *(_OWORD *)(v132 + 8) = *(_OWORD *)&v191[8];
  *(_QWORD *)&v191[8] = 0;
  *(_QWORD *)&v191[16] = 0;
  *(_OWORD *)(v132 + 24) = v192;
  v192 = 0uLL;
  *(_QWORD *)(v132 + 40) = v134;
  *(_QWORD *)(v132 + 48) = v133;
  *(_BYTE *)(v132 + 56) = 16;
  v178 = 0;
  *(_QWORD *)&v174 = v132;
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), &v174);
  v135 = v174;
  *(_QWORD *)&v174 = 0;
  if (v135)
  {
    v136 = *(std::__shared_weak_count **)(v135 + 32);
    if (v136)
    {
      v137 = (unint64_t *)&v136->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v139 = *(std::__shared_weak_count **)(v135 + 16);
    if (v139)
    {
      v140 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldaxr(v140);
      while (__stlxr(v141 - 1, v140));
      if (!v141)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    MEMORY[0x212BC6398](v135, 0x10F0C40B62ED6C6);
    v142 = (uint64_t)v178;
    v178 = 0;
    if (v142)
    {
      v143 = *(std::__shared_weak_count **)(v142 + 32);
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      v146 = *(std::__shared_weak_count **)(v142 + 16);
      if (v146)
      {
        v147 = (unint64_t *)&v146->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
      }
      MEMORY[0x212BC6398](v142, 0x10F0C40B62ED6C6);
    }
  }
  v149 = (std::__shared_weak_count *)*((_QWORD *)&v192 + 1);
  if (*((_QWORD *)&v192 + 1))
  {
    v150 = (unint64_t *)(*((_QWORD *)&v192 + 1) + 8);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = *(std::__shared_weak_count **)&v191[16];
  if (*(_QWORD *)&v191[16])
  {
    v153 = (unint64_t *)(*(_QWORD *)&v191[16] + 8);
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
LABEL_250:
  if (v13)
  {
    v155 = (const char *)__dst;
    if (v172 < 0)
      v155 = (const char *)__dst[0];
    sub_20E8C003C((uint64_t)v164, "%s", v155);
    sub_20E863570((uint64_t)v164);
  }
  sub_20E863570((uint64_t)v164);
  v156 = v170;
  if (v170)
  {
    v157 = (unint64_t *)&v170->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  if (SHIBYTE(v172) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
  v159 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  *(_QWORD *)&object[16] = v159;
  *(_QWORD *)&v181 = MEMORY[0x24BEDB848] + 16;
  if (v187 < 0)
    operator delete(v186);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC6290](&v190);
}

void sub_20F19F0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  uint64_t v45;

  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v45 - 192);
  _Unwind_Resume(a1);
}

void sub_20F19F124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *object,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  uint64_t v49;

  if (*(_BYTE *)(v49 - 168) && *(char *)(v49 - 169) < 0)
    operator delete(*(void **)(v49 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a28 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&object);
  _Unwind_Resume(a1);
}

void sub_20F19F34C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20F19F364(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  double v13;
  double v15;
  double v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  char *p_dst;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  double *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  char *v45;
  double v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  float64_t v52;
  const void **v53;
  float64_t v54;
  const void **v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  size_t v62;
  unsigned __int8 v63;
  const char *v64;
  size_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  size_t v73;
  char *v74;
  _QWORD *v75;
  size_t v76;
  size_t v77;
  double *v78;
  void *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  double *v83;
  char v84;
  _QWORD *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  const void *v97;
  uint64_t v98;
  uint64_t v99;
  char **v100;
  uint64_t v101;
  const char *v102;
  size_t v103;
  unsigned __int8 v104;
  const char *v105;
  size_t v106;
  uint64_t *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  const char *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  size_t v117;
  char *v118;
  _QWORD *v119;
  size_t v120;
  size_t v121;
  double *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  double *v126;
  char v127;
  _QWORD *v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *p_shared_owners;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  __int128 v150;
  char *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  double *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  const char *v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  char *v175;
  float64_t v176;
  const void **v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  __int128 v188;
  char *v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  double *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  const char *v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  uint64_t v216;
  const void *v217;
  uint64_t v218;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  size_t v222;
  const char *v223;
  unsigned __int8 v224;
  const char *v225;
  size_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  NSObject *v234;
  const char *v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  double v243;
  int v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  size_t v248;
  const char *v249;
  double v250;
  int v251;
  unint64_t v252;
  unint64_t v253;
  size_t v254;
  char *v255;
  unsigned __int8 v256;
  const char *v257;
  size_t v258;
  char *v259;
  unint64_t v260;
  const char *v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  NSObject *v268;
  size_t v269;
  std::__shared_weak_count_vtbl *v270;
  std::__shared_weak_count *v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  float64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  char *v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  std::__shared_weak_count *v294;
  unint64_t *v295;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  void *v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  int v307;
  unint64_t v308;
  unint64_t v309;
  size_t v310;
  char *v311;
  float64_t v312;
  const void **v313;
  const void *v314;
  uint64_t v315;
  uint64_t v316;
  const char *v317;
  uint64_t v318;
  uint64_t v319;
  size_t v320;
  const char *v321;
  unsigned __int8 v322;
  const char *v323;
  size_t v324;
  uint64_t *v325;
  uint64_t v326;
  unint64_t v327;
  const char *v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  NSObject *v336;
  size_t v337;
  char *v338;
  _QWORD *v339;
  size_t v340;
  size_t v341;
  double *v342;
  void *v343;
  float64_t v344;
  const void **v345;
  uint64_t v346;
  uint64_t v347;
  double *v348;
  char v349;
  _QWORD *v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t *v356;
  unint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  __int128 v372;
  char *v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  std::__shared_weak_count *v377;
  unint64_t *v378;
  unint64_t v379;
  double *v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  const char *v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  uint64_t v397;
  const void *v398;
  uint64_t v399;
  uint64_t v400;
  const char *v401;
  uint64_t v402;
  const char *v403;
  size_t v404;
  unsigned __int8 v405;
  const char *v406;
  size_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t *v411;
  uint64_t v412;
  uint64_t v413;
  NSObject *v414;
  size_t v415;
  char *v416;
  _QWORD *v417;
  size_t v418;
  size_t v419;
  double *v420;
  void *v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  double *v425;
  char v426;
  _QWORD *v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t *v433;
  unint64_t v434;
  std::__shared_weak_count *v435;
  unint64_t *v436;
  unint64_t v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  const char *v447;
  uint64_t v448;
  __int128 v449;
  char *v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  std::__shared_weak_count *v454;
  unint64_t *v455;
  unint64_t v456;
  double *v457;
  std::__shared_weak_count *v458;
  unint64_t *v459;
  unint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  const char *v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  void *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t v483;
  uint64_t i;
  uint64_t v485;
  double v492;
  uint64_t v493;
  uint64_t v497;
  double v501;
  int8x16_t v502;
  int8x16_t v503;
  int8x16_t v504;
  int8x16_t v505;
  int8x16_t v506;
  int8x16_t v507;
  int8x16_t v508;
  int8x16_t v509;
  int8x16_t v510;
  int8x16_t v511;
  double v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  unint64_t v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  __int128 v522;
  double v524;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  int8x16_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v539;
  float64x2_t v542;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v547;
  double v550;
  double v551;
  double v552;
  __double2 v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v562;
  float64x2_t v563;
  int v567;
  unint64_t v568;
  unint64_t v569;
  size_t v570;
  char *v571;
  uint64_t v572;
  unsigned __int8 v573;
  float64_t v574;
  const char *v575;
  NSObject *v576;
  double v577;
  double v578;
  double v579;
  uint64_t v580;
  float64_t v581;
  const void **v582;
  const void *v583;
  uint64_t v584;
  uint64_t v585;
  char **v586;
  uint64_t v587;
  const char *v588;
  size_t v589;
  unsigned __int8 v590;
  const char *v591;
  size_t v592;
  uint64_t *v593;
  int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t *v597;
  const char *v598;
  unint64_t v599;
  uint64_t v600;
  uint64_t v601;
  NSObject *v602;
  size_t v603;
  char *v604;
  _QWORD *v605;
  size_t v606;
  size_t v607;
  double *v608;
  void *v609;
  uint64_t v610;
  uint64_t v611;
  double *v612;
  char v613;
  _QWORD *v614;
  uint64_t v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  uint64_t v619;
  unint64_t *v620;
  unint64_t v621;
  std::__shared_weak_count *v622;
  unint64_t *v623;
  unint64_t v624;
  unint64_t v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  const char *v634;
  uint64_t v635;
  __int128 v636;
  char *v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  std::__shared_weak_count *v641;
  unint64_t *v642;
  unint64_t v643;
  double *v644;
  std::__shared_weak_count *v645;
  unint64_t *v646;
  unint64_t v647;
  std::__shared_weak_count *v648;
  unint64_t *v649;
  unint64_t v650;
  std::__shared_weak_count *v651;
  unint64_t *v652;
  unint64_t v653;
  std::__shared_weak_count *v654;
  unint64_t *v655;
  unint64_t v656;
  const char *v657;
  std::__shared_weak_count *v658;
  unint64_t *v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  void *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  const char *v667;
  const char *v668;
  float64x2_t v669;
  int v670;
  uint64_t *v671;
  int v672;
  uint64_t v673;
  int v674[4];
  unint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  float64_t v679;
  uint64_t v680;
  double v681;
  int8x16_t v682;
  int8x16_t v683;
  int8x16_t v684;
  int8x16_t v685;
  int8x16_t v686;
  int8x16_t v687;
  int8x16_t v688;
  int8x16_t v689;
  int8x16_t v690;
  uint64_t v691;
  const char *v692;
  const char *v693;
  int8x16_t v694;
  unint64_t v695;
  const char *v696;
  unint64_t v697;
  float64x2_t v698;
  __int128 v699;
  __int128 v700;
  const char *v701;
  uint64_t v702;
  std::__shared_weak_count *v703;
  char **__dst;
  size_t v705;
  int64_t v706;
  _OWORD oslog[3];
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  _BYTE v713[160];
  uint64_t v714;
  double v715;
  char *category[2];
  int64_t v717;
  char *v718;
  uint64_t v719;
  float64x2_t *v720;
  __int128 v721;
  int64x2_t object[3];
  int64x2_t v723;
  __int128 v724;
  __int128 v725;
  __int128 v726;
  __int128 v727;
  __int128 v728;
  float64x2_t v729;
  double v730;
  _QWORD v731[5];

  v731[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 176);
  v694 = *(int8x16_t *)(a2 + 160);
  v5 = *(int8x16_t *)(a2 + 128);
  v4 = *(int8x16_t *)(a2 + 144);
  v7 = *(int8x16_t *)(a2 + 96);
  v6 = *(int8x16_t *)(a2 + 112);
  v9 = *(int8x16_t *)(a2 + 64);
  v8 = *(int8x16_t *)(a2 + 80);
  v11 = *(int8x16_t *)(a2 + 32);
  v10 = *(int8x16_t *)(a2 + 48);
  v12 = *(int8x16_t *)(a2 + 16);
  v13 = *(double *)(a2 + 8);
  v715 = v13;
  if (!*(_BYTE *)(a2 + 601))
  {
    if (!*(_BYTE *)(**(_QWORD **)(a1 + 2104) + 2344))
      return;
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 1688))
      goto LABEL_328;
    sub_20F1A6D2C(&v714);
    if (**(int **)(v714 + 56) > 4)
      goto LABEL_328;
    v27 = *(unsigned __int8 *)(v714 + 72);
    v28 = sub_20E8C31DC(v714, "OSLogSurrogateAppender", 1, 0);
    v29 = v28;
    if (!v27 && !v28)
      goto LABEL_328;
    sub_20E863438((uint64_t)oslog);
    sub_20E86A980(&oslog[1], (uint64_t)"[MLPosePredictor] Reset MLFilter as VIO is not initialized.", 59);
    v695 = v29;
    if ((LOBYTE(v712.f64[1]) & 0x10) != 0)
    {
      v54 = v712.f64[0];
      if (*(_QWORD *)&v712.f64[0] < *(_QWORD *)&v709.f64[1])
      {
        v712.f64[0] = v709.f64[1];
        v54 = v709.f64[1];
      }
      v55 = (const void **)&v709;
    }
    else
    {
      if ((LOBYTE(v712.f64[1]) & 8) == 0)
      {
        v30 = 0;
        HIBYTE(v706) = 0;
        p_dst = (char *)&__dst;
        goto LABEL_147;
      }
      v55 = (const void **)&oslog[2] + 1;
      v54 = v708.f64[1];
    }
    v97 = *v55;
    v30 = *(_QWORD *)&v54 - (_QWORD)*v55;
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v30 >= 0x17)
    {
      v98 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v98 = v30 | 7;
      v99 = v98 + 1;
      p_dst = (char *)operator new(v98 + 1);
      v705 = v30;
      v706 = v99 | 0x8000000000000000;
      __dst = (char **)p_dst;
    }
    else
    {
      HIBYTE(v706) = LOBYTE(v54) - *(_BYTE *)v55;
      p_dst = (char *)&__dst;
      if (!v30)
      {
LABEL_147:
        p_dst[v30] = 0;
        *(_QWORD *)&v698.f64[0] = &v714;
        *(std::chrono::steady_clock::time_point *)&v698.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v699 = std::chrono::system_clock::now();
        DWORD2(v699) = 4;
        *(_QWORD *)&v700 = "unknown file";
        DWORD2(v700) = 259;
        v702 = 0;
        v703 = 0;
        v701 = "unknown function";
        if (v706 >= 0)
          v100 = (char **)&__dst;
        else
          v100 = __dst;
        v101 = **(_QWORD **)&v698.f64[0];
        v102 = (const char *)(**(_QWORD **)&v698.f64[0] + 16);
        v692 = v102;
        if (*(char *)(**(_QWORD **)&v698.f64[0] + 39) < 0)
        {
          v102 = *(const char **)(v101 + 16);
          v103 = *(_QWORD *)(v101 + 24);
        }
        else
        {
          v103 = *(unsigned __int8 *)(**(_QWORD **)&v698.f64[0] + 39);
        }
        v104 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v104 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[1].i8[8] && object[1].i8[7] < 0)
            operator delete((void *)object[0].i64[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v105 = byte_254A4A4F8;
        else
          v105 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v106 = byte_254A4A4F8[23];
        else
          v106 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0].i64[0] = (uint64_t)os_log_create(v105, v102);
        v107 = &object[0].i64[1];
        if (v106 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v106 >= 0x17)
        {
          v108 = v27;
          v109 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v106 | 7) != 0x17)
            v109 = v106 | 7;
          v110 = v109 + 1;
          v107 = (uint64_t *)operator new(v109 + 1);
          object[1].i64[1] = v110 | 0x8000000000000000;
          object[0].i64[1] = (uint64_t)v107;
          object[1].i64[0] = v106;
          v27 = v108;
        }
        else
        {
          object[1].i8[15] = v106;
          if (!v106)
          {
LABEL_168:
            *((_BYTE *)v107 + v106) = 0;
            object[2].i8[0] = 1;
            v111 = &object[2].i64[1];
            if (v103 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            v112 = (const char *)v100;
            if (v103 >= 0x17)
            {
              v114 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v103 | 7) != 0x17)
                v114 = v103 | 7;
              v115 = v114 + 1;
              v113 = v695;
              v111 = (uint64_t *)operator new(v114 + 1);
              v723.i64[1] = v115 | 0x8000000000000000;
              object[2].i64[1] = (uint64_t)v111;
              v723.i64[0] = v103;
            }
            else
            {
              v723.i8[15] = v103;
              v113 = v695;
              if (!v103)
              {
LABEL_176:
                *((_BYTE *)v111 + v103) = 0;
                LOBYTE(v724) = 1;
                v116 = object[0].i64[0];
                if (v723.i8[15] < 0)
                  operator delete((void *)object[2].i64[1]);
                if (object[2].i8[0] && object[1].i8[15] < 0)
                  operator delete((void *)object[0].i64[1]);
                if (object[0].i64[0])
                  os_release((void *)object[0].i64[0]);
                if (!v113 || !*(_QWORD *)(v113 + 24))
                {
                  os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
                  object[0].i32[0] = 136315138;
                  *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)v112;
                  v123 = (void *)_os_log_send_and_compose_impl();
                  if (v123)
                    free(v123);
                  goto LABEL_314;
                }
                v117 = _os_log_pack_size();
                v118 = (char *)operator new(v117, (std::align_val_t)8uLL);
                v119 = (_QWORD *)operator new();
                *v119 = &off_24C9ABB80;
                v119[1] = 0;
                v119[2] = 0;
                v119[3] = v118;
                category[0] = v118;
                category[1] = v118;
                v719 = 0;
                v717 = (int64_t)v119;
                v718 = 0;
                v120 = strlen(v112);
                if (v120 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v121 = v120;
                if (v120 >= 0x17)
                {
                  v124 = (v120 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v120 | 7) != 0x17)
                    v124 = v120 | 7;
                  v125 = v124 + 1;
                  v122 = (double *)operator new(v124 + 1);
                  *((_QWORD *)&v721 + 1) = v125 | 0x8000000000000000;
                  v720 = (float64x2_t *)v122;
                  *(_QWORD *)&v721 = v121;
                }
                else
                {
                  HIBYTE(v721) = v120;
                  v122 = (double *)&v720;
                  if (!v120)
                  {
LABEL_195:
                    *((_BYTE *)v122 + v121) = 0;
                    v126 = (double *)v720;
                    v731[0] = v721;
                    *(_QWORD *)((char *)v731 + 7) = *(_QWORD *)((char *)&v721 + 7);
                    v127 = HIBYTE(v721);
                    v128 = operator new(0x38uLL);
                    v128[1] = 0;
                    v128[2] = 0;
                    v128[3] = off_24C9ABC20;
                    *v128 = &off_24C9ABBD0;
                    v129 = v731[0];
                    v128[4] = v126;
                    v128[5] = v129;
                    *(_QWORD *)((char *)v128 + 47) = *(_QWORD *)((char *)v731 + 7);
                    *((_BYTE *)v128 + 55) = v127;
                    v731[0] = 0;
                    *(_QWORD *)((char *)v731 + 7) = 0;
                    v130 = (std::__shared_weak_count *)v719;
                    v718 = (char *)(v128 + 3);
                    v719 = (uint64_t)v128;
                    if (v130)
                    {
                      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
                      do
                        v132 = __ldaxr(p_shared_owners);
                      while (__stlxr(v132 - 1, p_shared_owners));
                      if (!v132)
                      {
                        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                        std::__shared_weak_count::__release_weak(v130);
                      }
                    }
                    object[0] = *(int64x2_t *)category;
                    v133 = (uint64_t)v718;
                    object[1].i64[0] = v717;
                    if (v717)
                    {
                      v134 = (unint64_t *)(v717 + 8);
                      do
                        v135 = __ldxr(v134);
                      while (__stxr(v135 + 1, v134));
                    }
                    v136 = (std::__shared_weak_count *)v719;
                    object[1].i64[1] = v133;
                    object[2].i64[0] = v719;
                    if (v719)
                    {
                      v137 = (unint64_t *)(v719 + 8);
                      do
                        v138 = __ldxr(v137);
                      while (__stxr(v138 + 1, v137));
                      object[2].i64[1] = v133;
                      do
                        v139 = __ldaxr(v137);
                      while (__stlxr(v139 - 1, v137));
                      if (!v139)
                      {
                        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                        std::__shared_weak_count::__release_weak(v136);
                      }
                    }
                    else
                    {
                      object[2].i64[1] = v133;
                    }
                    v178 = (std::__shared_weak_count *)v717;
                    if (v717)
                    {
                      v179 = (unint64_t *)(v717 + 8);
                      do
                        v180 = __ldaxr(v179);
                      while (__stlxr(v180 - 1, v179));
                      if (!v180)
                      {
                        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
                        std::__shared_weak_count::__release_weak(v178);
                      }
                    }
                    v181 = object[0].i64[0];
                    if (*(char *)(object[2].i64[1] + 31) >= 0)
                      v182 = object[2].i64[1] + 8;
                    else
                      v182 = *(_QWORD *)(object[2].i64[1] + 8);
                    v183 = _os_log_pack_fill();
                    *(_DWORD *)v183 = 136315138;
                    *(_QWORD *)(v183 + 4) = v182;
                    v184 = operator new();
                    v185 = *(unsigned __int8 *)(v101 + 39);
                    v186 = *(const char **)(v101 + 16);
                    v187 = *(_QWORD *)(v101 + 24);
                    v188 = *(__int128 *)((char *)&object[1] + 8);
                    *(int64x2_t *)(v184 + 8) = *(int64x2_t *)((char *)object + 8);
                    if ((v185 & 0x80u) != 0)
                      v185 = v187;
                    else
                      v186 = v692;
                    *(_QWORD *)v184 = v181;
                    object[0].i64[1] = 0;
                    object[1].i64[0] = 0;
                    *(_OWORD *)(v184 + 24) = v188;
                    object[1].i64[1] = 0;
                    object[2].i64[0] = 0;
                    *(_QWORD *)(v184 + 40) = v186;
                    *(_QWORD *)(v184 + 48) = v185;
                    *(_BYTE *)(v184 + 56) = 16;
                    v720 = 0;
                    category[0] = (char *)v184;
                    (*(void (**)(_QWORD, char **))(**(_QWORD **)(v113 + 24) + 40))(*(_QWORD *)(v113 + 24), category);
                    v189 = category[0];
                    category[0] = 0;
                    if (v189)
                    {
                      v190 = (std::__shared_weak_count *)*((_QWORD *)v189 + 4);
                      if (v190)
                      {
                        v191 = (unint64_t *)&v190->__shared_owners_;
                        do
                          v192 = __ldaxr(v191);
                        while (__stlxr(v192 - 1, v191));
                        if (!v192)
                        {
                          ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                          std::__shared_weak_count::__release_weak(v190);
                        }
                      }
                      v193 = (std::__shared_weak_count *)*((_QWORD *)v189 + 2);
                      if (v193)
                      {
                        v194 = (unint64_t *)&v193->__shared_owners_;
                        do
                          v195 = __ldaxr(v194);
                        while (__stlxr(v195 - 1, v194));
                        if (!v195)
                        {
                          ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                          std::__shared_weak_count::__release_weak(v193);
                        }
                      }
                      MEMORY[0x212BC6398](v189, 0x10F0C40B62ED6C6);
                      v196 = (double *)v720;
                      v720 = 0;
                      if (v196)
                      {
                        v197 = (std::__shared_weak_count *)*((_QWORD *)v196 + 4);
                        if (v197)
                        {
                          v198 = (unint64_t *)&v197->__shared_owners_;
                          do
                            v199 = __ldaxr(v198);
                          while (__stlxr(v199 - 1, v198));
                          if (!v199)
                          {
                            ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                            std::__shared_weak_count::__release_weak(v197);
                          }
                        }
                        v200 = (std::__shared_weak_count *)*((_QWORD *)v196 + 2);
                        if (v200)
                        {
                          v201 = (unint64_t *)&v200->__shared_owners_;
                          do
                            v202 = __ldaxr(v201);
                          while (__stlxr(v202 - 1, v201));
                          if (!v202)
                          {
                            ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                            std::__shared_weak_count::__release_weak(v200);
                          }
                        }
                        MEMORY[0x212BC6398](v196, 0x10F0C40B62ED6C6);
                      }
                    }
                    v203 = (std::__shared_weak_count *)object[2].i64[0];
                    if (object[2].i64[0])
                    {
                      v204 = (unint64_t *)(object[2].i64[0] + 8);
                      do
                        v205 = __ldaxr(v204);
                      while (__stlxr(v205 - 1, v204));
                      if (!v205)
                      {
                        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                        std::__shared_weak_count::__release_weak(v203);
                      }
                    }
                    v206 = (std::__shared_weak_count *)object[1].i64[0];
                    if (object[1].i64[0])
                    {
                      v207 = (unint64_t *)(object[1].i64[0] + 8);
                      do
                        v208 = __ldaxr(v207);
                      while (__stlxr(v208 - 1, v207));
                      if (!v208)
                      {
                        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                        std::__shared_weak_count::__release_weak(v206);
                      }
                    }
LABEL_314:
                    if (v27)
                    {
                      v209 = (const char *)&__dst;
                      if (v706 < 0)
                        v209 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v698, "%s", v209);
                      sub_20E863570((uint64_t)&v698);
                    }
                    sub_20E863570((uint64_t)&v698);
                    v210 = v703;
                    if (v703)
                    {
                      v211 = (unint64_t *)&v703->__shared_owners_;
                      do
                        v212 = __ldaxr(v211);
                      while (__stlxr(v212 - 1, v211));
                      if (!v212)
                      {
                        ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                        std::__shared_weak_count::__release_weak(v210);
                      }
                    }
                    if (SHIBYTE(v706) < 0)
                      operator delete(__dst);
                    *(_QWORD *)&oslog[0] = *MEMORY[0x24BEDB7F0];
                    v213 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)oslog + *(_QWORD *)(*(_QWORD *)&oslog[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&oslog[1] = v213;
                    *((_QWORD *)&oslog[1] + 1) = MEMORY[0x24BEDB848] + 16;
                    if (SHIBYTE(v711.f64[1]) < 0)
                      operator delete(*(void **)&v710.f64[1]);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v713);
LABEL_328:
                    v214 = **(_QWORD **)(a1 + 2104);
                    if (*(_BYTE *)(v214 + 1904))
                      *(_BYTE *)(v214 + 1904) = 0;
                    if (*(_BYTE *)(v214 + 2040))
                      *(_BYTE *)(v214 + 2040) = 0;
                    if (*(_BYTE *)(v214 + 2176))
                      *(_BYTE *)(v214 + 2176) = 0;
                    if (*(_BYTE *)(v214 + 2208))
                      *(_BYTE *)(v214 + 2208) = 0;
                    *(_OWORD *)(v214 + 2320) = 0u;
                    *(_OWORD *)(v214 + 2304) = 0u;
                    *(_OWORD *)(v214 + 2288) = 0u;
                    *(_OWORD *)(v214 + 2352) = 0u;
                    if (*(_BYTE *)(v214 + 2224))
                      *(_BYTE *)(v214 + 2224) = 0;
                    if (*(_BYTE *)(v214 + 2280))
                      *(_BYTE *)(v214 + 2280) = 0;
                    if (*(_BYTE *)(v214 + 2344))
                      *(_BYTE *)(v214 + 2344) = 0;
                    *(_DWORD *)(v214 + 2368) = 0;
                    v215 = *(void **)(v214 + 1816);
                    v216 = *(_QWORD *)(v214 + 1824) - (_QWORD)v215;
                    if (v216 >= 1)
                      bzero(v215, 4 * (((unint64_t)v216 >> 2) - ((unint64_t)v216 > 3)) + 4);
                    *(_QWORD *)(v214 + 1848) = *(_QWORD *)(v214 + 1840);
                    *(_QWORD *)(a1 + 2128) = 0xBFF0000000000000;
                    *(_BYTE *)(a1 + 2136) = 0;
                    *(_BYTE *)(a1 + 2144) = 0;
                    *(_BYTE *)(a1 + 2112) = 0;
                    *(_BYTE *)(a1 + 2120) = 0;
                    if (*(_BYTE *)(a1 + 2336))
                      *(_BYTE *)(a1 + 2336) = 0;
                    *(_DWORD *)(a1 + 2152) = 0;
                    *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a1 + 1728);
                    *(_QWORD *)(a1 + 2016) = 0;
                    *(_QWORD *)(a1 + 2008) = 0;
                    *(_QWORD *)(a1 + 2000) = 0;
                    *(_QWORD *)(a1 + 2088) = 0xBFF0000000000000;
                    *(_QWORD *)(a1 + 2048) = 0;
                    *(_QWORD *)(a1 + 2064) = 0;
                    *(_QWORD *)(a1 + 2056) = 0;
                    if (*(_BYTE *)(**(_QWORD **)(a1 + 2104) + 2344)
                      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 266, (uint64_t)"!filter_->GetCurrentTimestamp().has_value()", 43, (uint64_t)"Filter must have beeen reset at this point", 42, (void (*)(void **))sub_21023DDB0))
                    {
                      abort();
                    }
                    return;
                  }
                }
                memcpy(v122, v112, v121);
                goto LABEL_195;
              }
            }
            memmove(v111, v102, v103);
            goto LABEL_176;
          }
        }
        memmove(v107, v105, v106);
        goto LABEL_168;
      }
    }
    memmove(p_dst, v97, v30);
    goto LABEL_147;
  }
  v682 = v12;
  v683 = v11;
  v684 = v10;
  v685 = v9;
  v686 = v8;
  v687 = v7;
  v688 = v6;
  v689 = v5;
  v690 = v4;
  v691 = v3;
  kdebug_trace();
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 1416))
    goto LABEL_40;
  v15 = *(double *)(a1 + 2088);
  if (v15 <= 0.0)
    goto LABEL_40;
  v16 = *(double *)(a1 + 1488);
  if (v16 <= 0.000001)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 118, (uint64_t)"config_.input_vio_pose_interval > 1e-6", 38, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_1056;
    }
    v16 = *(double *)(a1 + 1488);
  }
  v17 = *(double **)(a1 + 1424);
  v18 = *(double **)(a1 + 1432);
  if (v17 == v18)
  {
    v21 = *(double **)(a1 + 1424);
    v26 = 0;
    if (v18 - v17)
      goto LABEL_27;
  }
  else
  {
    v19 = v17 + 1;
    if (v17 + 1 == v18)
    {
      v21 = *(double **)(a1 + 1424);
      v26 = 0;
      if (v18 - v17)
        goto LABEL_27;
    }
    else
    {
      v20 = *v17;
      v21 = *(double **)(a1 + 1424);
      v22 = v17 + 1;
      v23 = (v13 - v15) / v16;
      do
      {
        v24 = *v22++;
        v25 = v24;
        if (vabdd_f64(v24, v23) < vabdd_f64(v20, v23))
        {
          v20 = v25;
          v21 = v19;
        }
        v19 = v22;
      }
      while (v22 != v18);
      v26 = v21 - v17;
      if (v26 < v18 - v17)
        goto LABEL_27;
    }
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 124, (uint64_t)"rate_index < config_.allowed_interval_rates.size()", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_1056:
    abort();
  }
LABEL_27:
  if (v26 == *(_QWORD *)(a1 + 1752) || v26 != *(_QWORD *)(a1 + 1760))
  {
    *(_QWORD *)(a1 + 1760) = v26;
    v39 = (_DWORD *)(a1 + 1768);
  }
  else
  {
    v32 = *(_DWORD *)(a1 + 1768) + 1;
    *(_DWORD *)(a1 + 1768) = v32;
    if (v32 < *(_DWORD *)(a1 + 1448))
      goto LABEL_40;
    if (*(_BYTE *)(a1 + 1688))
    {
      sub_20F1A6D2C(&v720);
      if (**(int **)&v720[3].f64[1] <= 4)
      {
        v33 = LOBYTE(v720[4].f64[1]);
        v34 = sub_20E8C31DC((uint64_t)v720, "OSLogSurrogateAppender", 1, 0);
        v35 = v34 + 16;
        if (!v34)
          v35 = 0;
        if (v33 || v34)
        {
          v680 = v35;
          object[0].i64[0] = (uint64_t)&v720;
          object[0].u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)object[1].i8 = std::chrono::system_clock::now();
          object[1].i32[2] = 4;
          object[2].i64[0] = (uint64_t)"unknown file";
          object[2].i32[2] = 129;
          *(_QWORD *)&v724 = 0;
          v723.i64[0] = (uint64_t)"unknown function";
          v723.i64[1] = 0;
          v36 = (uint64_t *)&v720[1];
          if (SHIBYTE(v720[2].f64[0]) < 0)
          {
            v38 = *(char **)&v720[1].f64[0];
            v37 = *(_QWORD *)&v720[1].f64[1];
          }
          else
          {
            v37 = HIBYTE(v720[2].f64[0]);
            v38 = (char *)&v720[1];
          }
          v572 = *(_QWORD *)(a1 + 1424);
          category[0] = v38;
          category[1] = (char *)v37;
          v573 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v573 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)oslog);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
            if (BYTE8(oslog[1]) && SBYTE7(oslog[1]) < 0)
              operator delete(*(void **)&oslog[0]);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          *(_QWORD *)&v574 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v575 = byte_254A4A4F8;
          }
          else
          {
            v574 = *(double *)&byte_254A4A4F8[8];
            v575 = *(const char **)byte_254A4A4F8;
          }
          *(_QWORD *)&v698.f64[0] = v575;
          v698.f64[1] = v574;
          *(_QWORD *)&oslog[0] = os_log_create(v575, category[0]);
          sub_20E86E5A8((_QWORD *)oslog + 1, (uint64_t)&v698);
          sub_20E86E5A8((_QWORD *)&oslog[2] + 1, (uint64_t)category);
          v576 = *(NSObject **)&oslog[0];
          sub_20E86E44C((uint64_t)oslog);
          sub_20F1AB5F8(v680, v36, v576, OS_LOG_TYPE_ERROR, (uint64_t *)(v572 + 8 * v26));
          if (v33)
          {
            sub_20E8C003C((uint64_t)object, "[MLPosePredictor] SetIntervalRate to %.5f.", *(double *)(*(_QWORD *)(a1 + 1424) + 8 * v26));
            sub_20E863570((uint64_t)object);
          }
          sub_20E863714((uint64_t)object);
        }
      }
    }
    if (v21 != v17
      && !*(_BYTE *)(a1 + 1416)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 106, (uint64_t)"rate_index == 0 || config_.allow_framerate_scaling", 50, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v577 = *(double *)(*(_QWORD *)(a1 + 1424) + 8 * v26);
    if (v577 <= 0.000001
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 108, (uint64_t)"rate > 1e-6", 11, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v578 = v577 * *(double *)(a1 + 1488);
    *(double *)(a1 + 1720) = v578;
    v579 = v577 * *(double *)(a1 + 1496);
    *(double *)(a1 + 1728) = v579;
    *(double *)(a1 + 2344) = v579;
    *(_DWORD *)(a1 + 1736) = llround(v578 / v579);
    *(double *)(a1 + 1744) = v579 * 4.0;
    v580 = **(_QWORD **)(a1 + 2104);
    if (v21 != v17
      && !*(_BYTE *)(v580 + 1416)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/MLPosePredictionFilter.cpp", 66, (uint64_t)"rate_index == 0 || config_.allow_framerate_scaling", 50, (uint64_t)&unk_210298D35, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v681 = *(double *)(*(_QWORD *)(v580 + 1424) + 8 * v26);
    if (v681 <= 0.000001
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/MLPosePredictionFilter.cpp", 68, (uint64_t)"rate > 1e-6", 11, (uint64_t)&unk_210298D35, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v39 = (_DWORD *)(a1 + 1768);
    *(float64x2_t *)(v580 + 1872) = vmulq_n_f64(*(float64x2_t *)(v580 + 1488), v681);
    *(double *)(v580 + 1888) = v681;
    *(_QWORD *)(a1 + 1752) = v26;
  }
  *v39 = 0;
LABEL_40:
  v40 = (double *)(a1 + 2088);
  if (*(_DWORD *)(**(_QWORD **)(a1 + 2104) + 2364) != 4)
  {
    v46 = *v40;
    if (*v40 <= 0.0 || v46 + *(double *)(a1 + 1720) * 3.0 >= v13)
      goto LABEL_427;
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 1688))
      goto LABEL_408;
    sub_20F1A6D2C(&v720);
    if (**(int **)&v720[3].f64[1] > 4)
      goto LABEL_408;
    v47 = LOBYTE(v720[4].f64[1]);
    v48 = sub_20E8C31DC((uint64_t)v720, "OSLogSurrogateAppender", 1, 0);
    v49 = v48 ? v48 + 16 : 0;
    if (!v47 && !v48)
      goto LABEL_408;
    sub_20E863438((uint64_t)oslog);
    sub_20E86A980(&oslog[1], (uint64_t)"[MLPosePredictor] Reset MLFilter as InertialState gap is too large.", 67);
    if ((LOBYTE(v712.f64[1]) & 0x10) != 0)
    {
      v176 = v712.f64[0];
      if (*(_QWORD *)&v712.f64[0] < *(_QWORD *)&v709.f64[1])
      {
        v712.f64[0] = v709.f64[1];
        v176 = v709.f64[1];
      }
      v177 = (const void **)&v709;
    }
    else
    {
      if ((LOBYTE(v712.f64[1]) & 8) == 0)
      {
        v50 = 0;
        HIBYTE(v717) = 0;
        v51 = (char *)category;
        goto LABEL_358;
      }
      v177 = (const void **)&oslog[2] + 1;
      v176 = v708.f64[1];
    }
    v217 = *v177;
    v50 = *(_QWORD *)&v176 - (_QWORD)*v177;
    if (v50 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v50 >= 0x17)
    {
      v218 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v50 | 7) != 0x17)
        v218 = v50 | 7;
      v219 = v218 + 1;
      v51 = (char *)operator new(v218 + 1);
      v717 = v219 | 0x8000000000000000;
      category[0] = v51;
      category[1] = (char *)v50;
    }
    else
    {
      HIBYTE(v717) = LOBYTE(v176) - *(_BYTE *)v177;
      v51 = (char *)category;
      if (!v50)
      {
LABEL_358:
        v51[v50] = 0;
        *(_QWORD *)&v698.f64[0] = &v720;
        *(std::chrono::steady_clock::time_point *)&v698.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v699 = std::chrono::system_clock::now();
        DWORD2(v699) = 4;
        *(_QWORD *)&v700 = "unknown file";
        DWORD2(v700) = 290;
        v702 = 0;
        v703 = 0;
        v701 = "unknown function";
        v220 = (const char *)category;
        if (v717 < 0)
          v220 = category[0];
        __dst = (char **)v220;
        v221 = **(_QWORD **)&v698.f64[0];
        if (*(char *)(**(_QWORD **)&v698.f64[0] + 39) < 0)
        {
          v223 = *(const char **)(v221 + 16);
          v222 = *(_QWORD *)(v221 + 24);
        }
        else
        {
          v222 = *(unsigned __int8 *)(**(_QWORD **)&v698.f64[0] + 39);
          v223 = (const char *)(**(_QWORD **)&v698.f64[0] + 16);
        }
        v671 = (uint64_t *)(**(_QWORD **)&v698.f64[0] + 16);
        v676 = v49;
        v224 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v224 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[1].i8[8] && object[1].i8[7] < 0)
            operator delete((void *)object[0].i64[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v225 = byte_254A4A4F8;
        else
          v225 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v226 = byte_254A4A4F8[23];
        else
          v226 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0].i64[0] = (uint64_t)os_log_create(v225, v223);
        v227 = &object[0].i64[1];
        if (v226 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v226 >= 0x17)
        {
          v228 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v226 | 7) != 0x17)
            v228 = v226 | 7;
          v229 = v228 + 1;
          v227 = (uint64_t *)operator new(v228 + 1);
          object[1].i64[1] = v229 | 0x8000000000000000;
          object[0].i64[1] = (uint64_t)v227;
          object[1].i64[0] = v226;
        }
        else
        {
          object[1].i8[15] = v226;
          if (!v226)
          {
LABEL_378:
            *((_BYTE *)v227 + v226) = 0;
            object[2].i8[0] = 1;
            v230 = &object[2].i64[1];
            if (v222 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v222 >= 0x17)
            {
              v232 = (v222 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v222 | 7) != 0x17)
                v232 = v222 | 7;
              v233 = v232 + 1;
              v230 = (uint64_t *)operator new(v232 + 1);
              v723.i64[1] = v233 | 0x8000000000000000;
              object[2].i64[1] = (uint64_t)v230;
              v723.i64[0] = v222;
              v231 = v676;
            }
            else
            {
              v723.i8[15] = v222;
              v231 = v676;
              if (!v222)
                goto LABEL_386;
            }
            memmove(v230, v223, v222);
LABEL_386:
            *((_BYTE *)v230 + v222) = 0;
            LOBYTE(v724) = 1;
            v234 = object[0].i64[0];
            if (v723.i8[15] < 0)
              operator delete((void *)object[2].i64[1]);
            if (object[2].i8[0] && object[1].i8[15] < 0)
              operator delete((void *)object[0].i64[1]);
            if (object[0].i64[0])
              os_release((void *)object[0].i64[0]);
            sub_20F1ABA38(v231, v671, v234, OS_LOG_TYPE_ERROR, (const char **)&__dst);
            if (v47)
            {
              v235 = (const char *)category;
              if (v717 < 0)
                v235 = category[0];
              sub_20E8C003C((uint64_t)&v698, "%s", v235);
              sub_20E863570((uint64_t)&v698);
            }
            sub_20E863570((uint64_t)&v698);
            v236 = v703;
            if (v703)
            {
              v237 = (unint64_t *)&v703->__shared_owners_;
              do
                v238 = __ldaxr(v237);
              while (__stlxr(v238 - 1, v237));
              if (!v238)
              {
                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                std::__shared_weak_count::__release_weak(v236);
              }
            }
            if ((SHIBYTE(v717) & 0x80000000) == 0)
              goto LABEL_405;
            v175 = category[0];
            goto LABEL_404;
          }
        }
        memmove(v227, v225, v226);
        goto LABEL_378;
      }
    }
    memmove(v51, v217, v50);
    goto LABEL_358;
  }
  kdebug_trace();
  if (*(_BYTE *)(a1 + 1688))
  {
    sub_20F1A6D2C(&v714);
    if (**(int **)(v714 + 56) <= 4)
    {
      v41 = *(unsigned __int8 *)(v714 + 72);
      v42 = sub_20E8C31DC(v714, "OSLogSurrogateAppender", 1, 0);
      v43 = v42;
      if (v41 || v42)
      {
        sub_20E863438((uint64_t)oslog);
        sub_20E86A980(&oslog[1], (uint64_t)"[MLPosePredictor] MLPoseFilter OOD Reset.", 41);
        v670 = v41;
        if ((LOBYTE(v712.f64[1]) & 0x10) != 0)
        {
          v52 = v712.f64[0];
          if (*(_QWORD *)&v712.f64[0] < *(_QWORD *)&v709.f64[1])
          {
            v712.f64[0] = v709.f64[1];
            v52 = v709.f64[1];
          }
          v53 = (const void **)&v709;
        }
        else
        {
          if ((LOBYTE(v712.f64[1]) & 8) == 0)
          {
            v44 = 0;
            HIBYTE(v706) = 0;
            v45 = (char *)&__dst;
            goto LABEL_75;
          }
          v53 = (const void **)&oslog[2] + 1;
          v52 = v708.f64[1];
        }
        v56 = *v53;
        v44 = *(_QWORD *)&v52 - (_QWORD)*v53;
        if (v44 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v44 >= 0x17)
        {
          v57 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v57 = v44 | 7;
          v58 = v57 + 1;
          v45 = (char *)operator new(v57 + 1);
          v705 = v44;
          v706 = v58 | 0x8000000000000000;
          __dst = (char **)v45;
        }
        else
        {
          HIBYTE(v706) = LOBYTE(v52) - *(_BYTE *)v53;
          v45 = (char *)&__dst;
          if (!v44)
          {
LABEL_75:
            v45[v44] = 0;
            *(_QWORD *)&v698.f64[0] = &v714;
            *(std::chrono::steady_clock::time_point *)&v698.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)&v699 = std::chrono::system_clock::now();
            DWORD2(v699) = 4;
            *(_QWORD *)&v700 = "unknown file";
            DWORD2(v700) = 281;
            v702 = 0;
            v703 = 0;
            v701 = "unknown function";
            if (v706 >= 0)
              v59 = (const char *)&__dst;
            else
              v59 = (const char *)__dst;
            v60 = **(_QWORD **)&v698.f64[0];
            v61 = (const char *)(**(_QWORD **)&v698.f64[0] + 16);
            v665 = **(_QWORD **)&v698.f64[0];
            v667 = v61;
            if (*(char *)(**(_QWORD **)&v698.f64[0] + 39) < 0)
            {
              v61 = *(const char **)(v60 + 16);
              v62 = *(_QWORD *)(v60 + 24);
            }
            else
            {
              v62 = *(unsigned __int8 *)(**(_QWORD **)&v698.f64[0] + 39);
            }
            v675 = v43;
            v63 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
              if (object[1].i8[8] && object[1].i8[7] < 0)
                operator delete((void *)object[0].i64[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v64 = byte_254A4A4F8;
            else
              v64 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v65 = byte_254A4A4F8[23];
            else
              v65 = *(_QWORD *)&byte_254A4A4F8[8];
            object[0].i64[0] = (uint64_t)os_log_create(v64, v61);
            v66 = &object[0].i64[1];
            if (v65 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v65 >= 0x17)
            {
              v67 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v65 | 7) != 0x17)
                v67 = v65 | 7;
              v68 = v67 + 1;
              v66 = (uint64_t *)operator new(v67 + 1);
              object[1].i64[1] = v68 | 0x8000000000000000;
              object[0].i64[1] = (uint64_t)v66;
              object[1].i64[0] = v65;
            }
            else
            {
              object[1].i8[15] = v65;
              if (!v65)
              {
LABEL_96:
                *((_BYTE *)v66 + v65) = 0;
                object[2].i8[0] = 1;
                v69 = &object[2].i64[1];
                if (v62 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v62 >= 0x17)
                {
                  v70 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v62 | 7) != 0x17)
                    v70 = v62 | 7;
                  v71 = v70 + 1;
                  v69 = (uint64_t *)operator new(v70 + 1);
                  v723.i64[1] = v71 | 0x8000000000000000;
                  object[2].i64[1] = (uint64_t)v69;
                  v723.i64[0] = v62;
                }
                else
                {
                  v723.i8[15] = v62;
                  if (!v62)
                  {
LABEL_104:
                    *((_BYTE *)v69 + v62) = 0;
                    LOBYTE(v724) = 1;
                    v72 = object[0].i64[0];
                    if (v723.i8[15] < 0)
                      operator delete((void *)object[2].i64[1]);
                    if (object[2].i8[0] && object[1].i8[15] < 0)
                      operator delete((void *)object[0].i64[1]);
                    if (object[0].i64[0])
                      os_release((void *)object[0].i64[0]);
                    if (!v675 || !*(_QWORD *)(v675 + 24))
                    {
                      os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
                      object[0].i32[0] = 136315138;
                      *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)v59;
                      v79 = (void *)_os_log_send_and_compose_impl();
                      v80 = v670;
                      if (v79)
                        free(v79);
                      goto LABEL_255;
                    }
                    v73 = _os_log_pack_size();
                    v74 = (char *)operator new(v73, (std::align_val_t)8uLL);
                    v75 = (_QWORD *)operator new();
                    *v75 = &off_24C9ABB80;
                    v75[1] = 0;
                    v75[2] = 0;
                    v75[3] = v74;
                    category[0] = v74;
                    category[1] = v74;
                    v719 = 0;
                    v717 = (int64_t)v75;
                    v718 = 0;
                    v76 = strlen(v59);
                    if (v76 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v77 = v76;
                    if (v76 >= 0x17)
                    {
                      v81 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v76 | 7) != 0x17)
                        v81 = v76 | 7;
                      v82 = v81 + 1;
                      v78 = (double *)operator new(v81 + 1);
                      *((_QWORD *)&v721 + 1) = v82 | 0x8000000000000000;
                      v720 = (float64x2_t *)v78;
                      *(_QWORD *)&v721 = v77;
                    }
                    else
                    {
                      HIBYTE(v721) = v76;
                      v78 = (double *)&v720;
                      if (!v76)
                      {
LABEL_123:
                        *((_BYTE *)v78 + v77) = 0;
                        v83 = (double *)v720;
                        v731[0] = v721;
                        *(_QWORD *)((char *)v731 + 7) = *(_QWORD *)((char *)&v721 + 7);
                        v84 = HIBYTE(v721);
                        v85 = operator new(0x38uLL);
                        v85[1] = 0;
                        v85[2] = 0;
                        v85[3] = off_24C9ABC20;
                        *v85 = &off_24C9ABBD0;
                        v86 = v731[0];
                        v85[4] = v83;
                        v85[5] = v86;
                        *(_QWORD *)((char *)v85 + 47) = *(_QWORD *)((char *)v731 + 7);
                        *((_BYTE *)v85 + 55) = v84;
                        v731[0] = 0;
                        *(_QWORD *)((char *)v731 + 7) = 0;
                        v87 = (std::__shared_weak_count *)v719;
                        v718 = (char *)(v85 + 3);
                        v719 = (uint64_t)v85;
                        if (v87)
                        {
                          v88 = (unint64_t *)&v87->__shared_owners_;
                          do
                            v89 = __ldaxr(v88);
                          while (__stlxr(v89 - 1, v88));
                          if (!v89)
                          {
                            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                            std::__shared_weak_count::__release_weak(v87);
                          }
                        }
                        object[0] = *(int64x2_t *)category;
                        v90 = (uint64_t)v718;
                        object[1].i64[0] = v717;
                        if (v717)
                        {
                          v91 = (unint64_t *)(v717 + 8);
                          do
                            v92 = __ldxr(v91);
                          while (__stxr(v92 + 1, v91));
                        }
                        v93 = (std::__shared_weak_count *)v719;
                        object[1].i64[1] = v90;
                        object[2].i64[0] = v719;
                        if (v719)
                        {
                          v94 = (unint64_t *)(v719 + 8);
                          do
                            v95 = __ldxr(v94);
                          while (__stxr(v95 + 1, v94));
                          object[2].i64[1] = v90;
                          do
                            v96 = __ldaxr(v94);
                          while (__stlxr(v96 - 1, v94));
                          if (!v96)
                          {
                            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                            std::__shared_weak_count::__release_weak(v93);
                          }
                        }
                        else
                        {
                          object[2].i64[1] = v90;
                        }
                        v140 = (std::__shared_weak_count *)v717;
                        if (v717)
                        {
                          v141 = (unint64_t *)(v717 + 8);
                          do
                            v142 = __ldaxr(v141);
                          while (__stlxr(v142 - 1, v141));
                          if (!v142)
                          {
                            ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                            std::__shared_weak_count::__release_weak(v140);
                          }
                        }
                        v143 = object[0].i64[0];
                        if (*(char *)(object[2].i64[1] + 31) >= 0)
                          v144 = object[2].i64[1] + 8;
                        else
                          v144 = *(_QWORD *)(object[2].i64[1] + 8);
                        v145 = _os_log_pack_fill();
                        *(_DWORD *)v145 = 136315138;
                        *(_QWORD *)(v145 + 4) = v144;
                        v146 = operator new();
                        v147 = *(unsigned __int8 *)(v665 + 39);
                        v148 = *(const char **)(v665 + 16);
                        v149 = *(_QWORD *)(v665 + 24);
                        v150 = *(__int128 *)((char *)&object[1] + 8);
                        *(int64x2_t *)(v146 + 8) = *(int64x2_t *)((char *)object + 8);
                        if ((v147 & 0x80u) != 0)
                          v147 = v149;
                        else
                          v148 = v667;
                        *(_QWORD *)v146 = v143;
                        object[0].i64[1] = 0;
                        object[1].i64[0] = 0;
                        *(_OWORD *)(v146 + 24) = v150;
                        object[1].i64[1] = 0;
                        object[2].i64[0] = 0;
                        *(_QWORD *)(v146 + 40) = v148;
                        *(_QWORD *)(v146 + 48) = v147;
                        *(_BYTE *)(v146 + 56) = 16;
                        v720 = 0;
                        category[0] = (char *)v146;
                        (*(void (**)(_QWORD, char **))(**(_QWORD **)(v675 + 24) + 40))(*(_QWORD *)(v675 + 24), category);
                        v80 = v670;
                        v151 = category[0];
                        category[0] = 0;
                        if (v151)
                        {
                          v152 = (std::__shared_weak_count *)*((_QWORD *)v151 + 4);
                          if (v152)
                          {
                            v153 = (unint64_t *)&v152->__shared_owners_;
                            do
                              v154 = __ldaxr(v153);
                            while (__stlxr(v154 - 1, v153));
                            if (!v154)
                            {
                              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                              std::__shared_weak_count::__release_weak(v152);
                            }
                          }
                          v155 = (std::__shared_weak_count *)*((_QWORD *)v151 + 2);
                          if (v155)
                          {
                            v156 = (unint64_t *)&v155->__shared_owners_;
                            do
                              v157 = __ldaxr(v156);
                            while (__stlxr(v157 - 1, v156));
                            if (!v157)
                            {
                              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
                              std::__shared_weak_count::__release_weak(v155);
                            }
                          }
                          MEMORY[0x212BC6398](v151, 0x10F0C40B62ED6C6);
                          v158 = (double *)v720;
                          v720 = 0;
                          if (v158)
                          {
                            v159 = (std::__shared_weak_count *)*((_QWORD *)v158 + 4);
                            if (v159)
                            {
                              v160 = (unint64_t *)&v159->__shared_owners_;
                              do
                                v161 = __ldaxr(v160);
                              while (__stlxr(v161 - 1, v160));
                              if (!v161)
                              {
                                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                                std::__shared_weak_count::__release_weak(v159);
                              }
                            }
                            v162 = (std::__shared_weak_count *)*((_QWORD *)v158 + 2);
                            if (v162)
                            {
                              v163 = (unint64_t *)&v162->__shared_owners_;
                              do
                                v164 = __ldaxr(v163);
                              while (__stlxr(v164 - 1, v163));
                              if (!v164)
                              {
                                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                                std::__shared_weak_count::__release_weak(v162);
                              }
                            }
                            MEMORY[0x212BC6398](v158, 0x10F0C40B62ED6C6);
                          }
                        }
                        v165 = (std::__shared_weak_count *)object[2].i64[0];
                        if (object[2].i64[0])
                        {
                          v166 = (unint64_t *)(object[2].i64[0] + 8);
                          do
                            v167 = __ldaxr(v166);
                          while (__stlxr(v167 - 1, v166));
                          if (!v167)
                          {
                            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                            std::__shared_weak_count::__release_weak(v165);
                          }
                        }
                        v168 = (std::__shared_weak_count *)object[1].i64[0];
                        if (object[1].i64[0])
                        {
                          v169 = (unint64_t *)(object[1].i64[0] + 8);
                          do
                            v170 = __ldaxr(v169);
                          while (__stlxr(v170 - 1, v169));
                          if (!v170)
                          {
                            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                            std::__shared_weak_count::__release_weak(v168);
                          }
                        }
LABEL_255:
                        if (v80)
                        {
                          v171 = (const char *)&__dst;
                          if (v706 < 0)
                            v171 = (const char *)__dst;
                          sub_20E8C003C((uint64_t)&v698, "%s", v171);
                          sub_20E863570((uint64_t)&v698);
                        }
                        sub_20E863570((uint64_t)&v698);
                        v172 = v703;
                        if (v703)
                        {
                          v173 = (unint64_t *)&v703->__shared_owners_;
                          do
                            v174 = __ldaxr(v173);
                          while (__stlxr(v174 - 1, v173));
                          if (!v174)
                          {
                            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                            std::__shared_weak_count::__release_weak(v172);
                          }
                        }
                        if ((SHIBYTE(v706) & 0x80000000) == 0)
                          goto LABEL_405;
                        v175 = (char *)__dst;
LABEL_404:
                        operator delete(v175);
LABEL_405:
                        *(_QWORD *)&oslog[0] = *MEMORY[0x24BEDB7F0];
                        v239 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(_QWORD *)((char *)oslog + *(_QWORD *)(*(_QWORD *)&oslog[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        *(_QWORD *)&oslog[1] = v239;
                        *((_QWORD *)&oslog[1] + 1) = MEMORY[0x24BEDB848] + 16;
                        if (SHIBYTE(v711.f64[1]) < 0)
                          operator delete(*(void **)&v710.f64[1]);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](v713);
                        goto LABEL_408;
                      }
                    }
                    memcpy(v78, v59, v77);
                    goto LABEL_123;
                  }
                }
                memmove(v69, v61, v62);
                goto LABEL_104;
              }
            }
            memmove(v66, v64, v65);
            goto LABEL_96;
          }
        }
        memmove(v45, v56, v44);
        goto LABEL_75;
      }
    }
  }
LABEL_408:
  v240 = **(_QWORD **)(a1 + 2104);
  if (*(_BYTE *)(v240 + 1904))
    *(_BYTE *)(v240 + 1904) = 0;
  if (*(_BYTE *)(v240 + 2040))
    *(_BYTE *)(v240 + 2040) = 0;
  if (*(_BYTE *)(v240 + 2176))
    *(_BYTE *)(v240 + 2176) = 0;
  if (*(_BYTE *)(v240 + 2208))
    *(_BYTE *)(v240 + 2208) = 0;
  *(_OWORD *)(v240 + 2320) = 0u;
  *(_OWORD *)(v240 + 2304) = 0u;
  *(_OWORD *)(v240 + 2288) = 0u;
  *(_OWORD *)(v240 + 2352) = 0u;
  if (*(_BYTE *)(v240 + 2224))
    *(_BYTE *)(v240 + 2224) = 0;
  if (*(_BYTE *)(v240 + 2280))
    *(_BYTE *)(v240 + 2280) = 0;
  if (*(_BYTE *)(v240 + 2344))
    *(_BYTE *)(v240 + 2344) = 0;
  *(_DWORD *)(v240 + 2368) = 0;
  v241 = *(void **)(v240 + 1816);
  v242 = *(_QWORD *)(v240 + 1824) - (_QWORD)v241;
  if (v242 >= 1)
    bzero(v241, 4 * (((unint64_t)v242 >> 2) - ((unint64_t)v242 > 3)) + 4);
  *(_QWORD *)(v240 + 1848) = *(_QWORD *)(v240 + 1840);
  *(_QWORD *)(a1 + 2128) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 2136) = 0;
  *(_BYTE *)(a1 + 2144) = 0;
  *(_BYTE *)(a1 + 2112) = 0;
  *(_BYTE *)(a1 + 2120) = 0;
  if (*(_BYTE *)(a1 + 2336))
    *(_BYTE *)(a1 + 2336) = 0;
  *(_DWORD *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a1 + 1728);
  *(_QWORD *)(a1 + 2000) = 0;
  *(_QWORD *)(a1 + 2016) = 0;
  *(_QWORD *)(a1 + 2008) = 0;
  *(_QWORD *)(a1 + 2088) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2048) = 0;
  *(_QWORD *)(a1 + 2064) = 0;
  *(_QWORD *)(a1 + 2056) = 0;
  v46 = -1.0;
LABEL_427:
  if (!*(_BYTE *)(a1 + 2120))
  {
    v243 = v715;
    if (1.0e99 + 1.79769313e308 < v715)
      goto LABEL_429;
LABEL_436:
    if (v243 <= v46)
      goto LABEL_547;
    goto LABEL_437;
  }
  v243 = v715;
  if (*(double *)(a1 + 2112) + 1.79769313e308 >= v715)
    goto LABEL_436;
LABEL_429:
  kdebug_trace();
  if (!*(_BYTE *)(a1 + 1688))
    goto LABEL_528;
  sub_20F1A6D2C(&v720);
  if (**(int **)&v720[3].f64[1] > 2)
    goto LABEL_528;
  v244 = LOBYTE(v720[4].f64[1]);
  v245 = sub_20E8C31DC((uint64_t)v720, "OSLogSurrogateAppender", 1, 0);
  v246 = v245;
  if (!v244 && !v245)
    goto LABEL_528;
  object[0].i64[0] = (uint64_t)&v720;
  object[0].u64[1] = std::chrono::steady_clock::now().__d_.__rep_;
  *(std::chrono::system_clock::time_point *)object[1].i8 = std::chrono::system_clock::now();
  object[1].i32[2] = 2;
  object[2].i64[0] = (uint64_t)"unknown file";
  object[2].i32[2] = 297;
  *(_QWORD *)&v724 = 0;
  v723.i64[0] = (uint64_t)"unknown function";
  v723.i64[1] = 0;
  v247 = *(_QWORD *)object[0].i64[0];
  v677 = *(_QWORD *)object[0].i64[0];
  if (*(char *)(*(_QWORD *)object[0].i64[0] + 39) < 0)
  {
    v249 = *(const char **)(v247 + 16);
    v248 = *(_QWORD *)(v247 + 24);
  }
  else
  {
    v248 = *(unsigned __int8 *)(*(_QWORD *)object[0].i64[0] + 39);
    v249 = (const char *)(*(_QWORD *)object[0].i64[0] + 16);
  }
  v673 = *(_QWORD *)object[0].i64[0] + 16;
  v256 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v256 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)oslog);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)oslog);
    if (BYTE8(oslog[1]) && SBYTE7(oslog[1]) < 0)
      operator delete(*(void **)&oslog[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v257 = byte_254A4A4F8;
  else
    v257 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v258 = byte_254A4A4F8[23];
  else
    v258 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)&oslog[0] = os_log_create(v257, v249);
  v259 = (char *)oslog + 8;
  if (v258 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v258 >= 0x17)
  {
    v260 = v246;
    v261 = v249;
    v262 = v244;
    v263 = (v258 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v258 | 7) != 0x17)
      v263 = v258 | 7;
    v264 = v263 + 1;
    v259 = (char *)operator new(v263 + 1);
    *(_QWORD *)&oslog[1] = v258;
    *((_QWORD *)&oslog[1] + 1) = v264 | 0x8000000000000000;
    *((_QWORD *)&oslog[0] + 1) = v259;
    v244 = v262;
    v249 = v261;
    v246 = v260;
    goto LABEL_460;
  }
  HIBYTE(oslog[1]) = v258;
  if (v258)
LABEL_460:
    memmove(v259, v257, v258);
  v259[v258] = 0;
  LOBYTE(oslog[2]) = 1;
  v265 = (char *)&oslog[2] + 8;
  if (v248 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v248 >= 0x17)
  {
    v266 = (v248 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v248 | 7) != 0x17)
      v266 = v248 | 7;
    v267 = v266 + 1;
    v265 = (char *)operator new(v266 + 1);
    *(_QWORD *)&v708.f64[0] = v248;
    *(_QWORD *)&v708.f64[1] = v267 | 0x8000000000000000;
    *((_QWORD *)&oslog[2] + 1) = v265;
  }
  else
  {
    HIBYTE(v708.f64[1]) = v248;
    if (!v248)
      goto LABEL_469;
  }
  memmove(v265, v249, v248);
LABEL_469:
  v265[v248] = 0;
  LOBYTE(v709.f64[0]) = 1;
  v268 = *(NSObject **)&oslog[0];
  if (SHIBYTE(v708.f64[1]) < 0)
    operator delete(*((void **)&oslog[2] + 1));
  if (LOBYTE(oslog[2]) && SHIBYTE(oslog[1]) < 0)
    operator delete(*((void **)&oslog[0] + 1));
  if (*(_QWORD *)&oslog[0])
    os_release(*(void **)&oslog[0]);
  if (v246 && *(_QWORD *)(v246 + 24))
  {
    v269 = _os_log_pack_size();
    v270 = (std::__shared_weak_count_vtbl *)operator new(v269, (std::align_val_t)8uLL);
    v271 = (std::__shared_weak_count *)operator new();
    v272 = v271;
    v271->__shared_owners_ = 0;
    v273 = (unint64_t *)&v271->__shared_owners_;
    v271->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v271->__shared_weak_owners_ = 0;
    v271[1].__vftable = v270;
    *(_QWORD *)&oslog[0] = v270;
    *((_QWORD *)&oslog[0] + 1) = v270;
    *(_QWORD *)&oslog[1] = v271;
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
    memset((char *)&oslog[1] + 8, 0, 24);
    do
      v275 = __ldaxr(v273);
    while (__stlxr(v275 - 1, v273));
    if (!v275)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v272);
    }
    v276 = *(_QWORD *)&oslog[0];
    *(_WORD *)_os_log_pack_fill() = 0;
    v277 = operator new();
    v278 = *(unsigned __int8 *)(v677 + 39);
    v279 = v673;
    if ((v278 & 0x80u) != 0)
    {
      v279 = *(_QWORD *)(v677 + 16);
      v278 = *(_QWORD *)(v677 + 24);
    }
    *(_QWORD *)v277 = v276;
    *(_OWORD *)(v277 + 8) = *(_OWORD *)((char *)oslog + 8);
    *((_QWORD *)&oslog[0] + 1) = 0;
    *(_QWORD *)&oslog[1] = 0;
    *(_OWORD *)(v277 + 24) = *(_OWORD *)((char *)&oslog[1] + 8);
    *((_QWORD *)&oslog[1] + 1) = 0;
    *(_QWORD *)&oslog[2] = 0;
    *(_QWORD *)(v277 + 40) = v279;
    *(_QWORD *)(v277 + 48) = v278;
    *(_BYTE *)(v277 + 56) = 2;
    category[0] = 0;
    *(_QWORD *)&v698.f64[0] = v277;
    (*(void (**)(_QWORD, float64x2_t *))(**(_QWORD **)(v246 + 24) + 40))(*(_QWORD *)(v246 + 24), &v698);
    v280 = v698.f64[0];
    v698.f64[0] = 0.0;
    if (v280 != 0.0)
    {
      v281 = *(std::__shared_weak_count **)(*(_QWORD *)&v280 + 32);
      if (v281)
      {
        v282 = (unint64_t *)&v281->__shared_owners_;
        do
          v283 = __ldaxr(v282);
        while (__stlxr(v283 - 1, v282));
        if (!v283)
        {
          ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
          std::__shared_weak_count::__release_weak(v281);
        }
      }
      v284 = *(std::__shared_weak_count **)(*(_QWORD *)&v280 + 16);
      if (v284)
      {
        v285 = (unint64_t *)&v284->__shared_owners_;
        do
          v286 = __ldaxr(v285);
        while (__stlxr(v286 - 1, v285));
        if (!v286)
        {
          ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
          std::__shared_weak_count::__release_weak(v284);
        }
      }
      MEMORY[0x212BC6398](*(_QWORD *)&v280, 0x10F0C40B62ED6C6);
      v287 = category[0];
      category[0] = 0;
      if (v287)
      {
        v288 = (std::__shared_weak_count *)*((_QWORD *)v287 + 4);
        if (v288)
        {
          v289 = (unint64_t *)&v288->__shared_owners_;
          do
            v290 = __ldaxr(v289);
          while (__stlxr(v290 - 1, v289));
          if (!v290)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }
        v291 = (std::__shared_weak_count *)*((_QWORD *)v287 + 2);
        if (v291)
        {
          v292 = (unint64_t *)&v291->__shared_owners_;
          do
            v293 = __ldaxr(v292);
          while (__stlxr(v293 - 1, v292));
          if (!v293)
          {
            ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
            std::__shared_weak_count::__release_weak(v291);
          }
        }
        MEMORY[0x212BC6398](v287, 0x10F0C40B62ED6C6);
      }
    }
    v294 = *(std::__shared_weak_count **)&oslog[2];
    if (*(_QWORD *)&oslog[2])
    {
      v295 = (unint64_t *)(*(_QWORD *)&oslog[2] + 8);
      do
        v296 = __ldaxr(v295);
      while (__stlxr(v296 - 1, v295));
      if (!v296)
      {
        ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
        std::__shared_weak_count::__release_weak(v294);
      }
    }
    v297 = *(std::__shared_weak_count **)&oslog[1];
    if (*(_QWORD *)&oslog[1])
    {
      v298 = (unint64_t *)(*(_QWORD *)&oslog[1] + 8);
      do
        v299 = __ldaxr(v298);
      while (__stlxr(v299 - 1, v298));
      if (!v299)
      {
        ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
        std::__shared_weak_count::__release_weak(v297);
      }
    }
  }
  else
  {
    os_log_type_enabled(v268, OS_LOG_TYPE_DEBUG);
    LOWORD(oslog[0]) = 0;
    v300 = (void *)_os_log_send_and_compose_impl();
    if (v300)
      free(v300);
  }
  if (v244)
  {
    sub_20E8C003C((uint64_t)object, "[MLPosePredictor] Reset MLFilter due to kMaxMLFilterRuntime.");
    sub_20E863570((uint64_t)object);
  }
  sub_20E863570((uint64_t)object);
  v301 = (std::__shared_weak_count *)v724;
  if ((_QWORD)v724)
  {
    v302 = (unint64_t *)(v724 + 8);
    do
      v303 = __ldaxr(v302);
    while (__stlxr(v303 - 1, v302));
    if (!v303)
    {
      ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
      std::__shared_weak_count::__release_weak(v301);
    }
  }
LABEL_528:
  v304 = **(_QWORD **)(a1 + 2104);
  if (*(_BYTE *)(v304 + 1904))
    *(_BYTE *)(v304 + 1904) = 0;
  if (*(_BYTE *)(v304 + 2040))
    *(_BYTE *)(v304 + 2040) = 0;
  if (*(_BYTE *)(v304 + 2176))
    *(_BYTE *)(v304 + 2176) = 0;
  if (*(_BYTE *)(v304 + 2208))
    *(_BYTE *)(v304 + 2208) = 0;
  *(_OWORD *)(v304 + 2320) = 0u;
  *(_OWORD *)(v304 + 2304) = 0u;
  *(_OWORD *)(v304 + 2288) = 0u;
  *(_OWORD *)(v304 + 2352) = 0u;
  if (*(_BYTE *)(v304 + 2224))
    *(_BYTE *)(v304 + 2224) = 0;
  if (*(_BYTE *)(v304 + 2280))
    *(_BYTE *)(v304 + 2280) = 0;
  if (*(_BYTE *)(v304 + 2344))
    *(_BYTE *)(v304 + 2344) = 0;
  *(_DWORD *)(v304 + 2368) = 0;
  v305 = *(void **)(v304 + 1816);
  v306 = *(_QWORD *)(v304 + 1824) - (_QWORD)v305;
  if (v306 >= 1)
    bzero(v305, 4 * (((unint64_t)v306 >> 2) - ((unint64_t)v306 > 3)) + 4);
  *(_QWORD *)(v304 + 1848) = *(_QWORD *)(v304 + 1840);
  *(_QWORD *)(a1 + 2128) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 2136) = 0;
  *(_BYTE *)(a1 + 2144) = 0;
  *(_BYTE *)(a1 + 2112) = 0;
  *(_BYTE *)(a1 + 2120) = 0;
  if (*(_BYTE *)(a1 + 2336))
    *(_BYTE *)(a1 + 2336) = 0;
  *(_DWORD *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a1 + 1728);
  *(_QWORD *)(a1 + 2000) = 0;
  *(_QWORD *)(a1 + 2016) = 0;
  *(_QWORD *)(a1 + 2008) = 0;
  *(_QWORD *)(a1 + 2088) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2048) = 0;
  *(_QWORD *)(a1 + 2064) = 0;
  *(_QWORD *)(a1 + 2056) = 0;
  if (v715 <= -1.0)
  {
LABEL_547:
    if (!*(_BYTE *)(a1 + 1688))
      return;
    sub_20F1A6D2C(&v714);
    if (**(int **)(v714 + 56) > 4)
      return;
    v307 = *(unsigned __int8 *)(v714 + 72);
    v308 = sub_20E8C31DC(v714, "OSLogSurrogateAppender", 1, 0);
    v309 = v308;
    if (!v307 && !v308)
      return;
    sub_20E863438((uint64_t)oslog);
    sub_20E86A980(&oslog[1], (uint64_t)"[MLPosePredictor] InertialState timestamp does not move foward. Skipping.", 73);
    if ((LOBYTE(v712.f64[1]) & 0x10) != 0)
    {
      v312 = v712.f64[0];
      if (*(_QWORD *)&v712.f64[0] < *(_QWORD *)&v709.f64[1])
      {
        v712.f64[0] = v709.f64[1];
        v312 = v709.f64[1];
      }
      v313 = (const void **)&v709;
    }
    else
    {
      if ((LOBYTE(v712.f64[1]) & 8) == 0)
      {
        v310 = 0;
        HIBYTE(v706) = 0;
        v311 = (char *)&__dst;
        goto LABEL_566;
      }
      v313 = (const void **)&oslog[2] + 1;
      v312 = v708.f64[1];
    }
    v314 = *v313;
    v310 = *(_QWORD *)&v312 - (_QWORD)*v313;
    if (v310 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v310 >= 0x17)
    {
      v315 = (v310 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v310 | 7) != 0x17)
        v315 = v310 | 7;
      v316 = v315 + 1;
      v311 = (char *)operator new(v315 + 1);
      v705 = v310;
      v706 = v316 | 0x8000000000000000;
      __dst = (char **)v311;
    }
    else
    {
      HIBYTE(v706) = LOBYTE(v312) - *(_BYTE *)v313;
      v311 = (char *)&__dst;
      if (!v310)
      {
LABEL_566:
        v311[v310] = 0;
        *(_QWORD *)&v698.f64[0] = &v714;
        *(std::chrono::steady_clock::time_point *)&v698.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v699 = std::chrono::system_clock::now();
        DWORD2(v699) = 4;
        *(_QWORD *)&v700 = "unknown file";
        DWORD2(v700) = 303;
        v702 = 0;
        v703 = 0;
        v701 = "unknown function";
        if (v706 >= 0)
          v317 = (const char *)&__dst;
        else
          v317 = (const char *)__dst;
        v318 = **(_QWORD **)&v698.f64[0];
        v319 = **(_QWORD **)&v698.f64[0] + 16;
        if (*(char *)(**(_QWORD **)&v698.f64[0] + 39) < 0)
        {
          v321 = *(const char **)(v318 + 16);
          v320 = *(_QWORD *)(v318 + 24);
        }
        else
        {
          v320 = *(unsigned __int8 *)(**(_QWORD **)&v698.f64[0] + 39);
          v321 = (const char *)(**(_QWORD **)&v698.f64[0] + 16);
        }
        v322 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v322 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[1].i8[8] && object[1].i8[7] < 0)
            operator delete((void *)object[0].i64[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v323 = byte_254A4A4F8;
        else
          v323 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v324 = byte_254A4A4F8[23];
        else
          v324 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0].i64[0] = (uint64_t)os_log_create(v323, v321);
        v325 = &object[0].i64[1];
        if (v324 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v324 >= 0x17)
        {
          v696 = v321;
          v326 = v318;
          v327 = v309;
          v328 = v317;
          v329 = v307;
          v330 = v319;
          v331 = (v324 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v324 | 7) != 0x17)
            v331 = v324 | 7;
          v332 = v331 + 1;
          v325 = (uint64_t *)operator new(v331 + 1);
          object[1].i64[1] = v332 | 0x8000000000000000;
          object[0].i64[1] = (uint64_t)v325;
          object[1].i64[0] = v324;
          v319 = v330;
          v307 = v329;
          v317 = v328;
          v309 = v327;
          v318 = v326;
          v321 = v696;
        }
        else
        {
          object[1].i8[15] = v324;
          if (!v324)
          {
LABEL_587:
            *((_BYTE *)v325 + v324) = 0;
            object[2].i8[0] = 1;
            v333 = &object[2].i64[1];
            if (v320 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v320 >= 0x17)
            {
              v334 = (v320 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v320 | 7) != 0x17)
                v334 = v320 | 7;
              v335 = v334 + 1;
              v333 = (uint64_t *)operator new(v334 + 1);
              v723.i64[1] = v335 | 0x8000000000000000;
              object[2].i64[1] = (uint64_t)v333;
              v723.i64[0] = v320;
            }
            else
            {
              v723.i8[15] = v320;
              if (!v320)
              {
LABEL_595:
                *((_BYTE *)v333 + v320) = 0;
                LOBYTE(v724) = 1;
                v336 = object[0].i64[0];
                if (v723.i8[15] < 0)
                  operator delete((void *)object[2].i64[1]);
                if (object[2].i8[0] && object[1].i8[15] < 0)
                  operator delete((void *)object[0].i64[1]);
                if (object[0].i64[0])
                  os_release((void *)object[0].i64[0]);
                if (!v309 || !*(_QWORD *)(v309 + 24))
                {
                  os_log_type_enabled(v336, OS_LOG_TYPE_ERROR);
                  object[0].i32[0] = 136315138;
                  *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)v317;
                  v343 = (void *)_os_log_send_and_compose_impl();
                  if (v343)
                    free(v343);
                  goto LABEL_677;
                }
                v337 = _os_log_pack_size();
                v338 = (char *)operator new(v337, (std::align_val_t)8uLL);
                v339 = (_QWORD *)operator new();
                *v339 = &off_24C9ABB80;
                v339[1] = 0;
                v339[2] = 0;
                v339[3] = v338;
                category[0] = v338;
                category[1] = v338;
                v719 = 0;
                v717 = (int64_t)v339;
                v718 = 0;
                v340 = strlen(v317);
                if (v340 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v341 = v340;
                if (v340 >= 0x17)
                {
                  v346 = (v340 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v340 | 7) != 0x17)
                    v346 = v340 | 7;
                  v347 = v346 + 1;
                  v342 = (double *)operator new(v346 + 1);
                  *((_QWORD *)&v721 + 1) = v347 | 0x8000000000000000;
                  v720 = (float64x2_t *)v342;
                  *(_QWORD *)&v721 = v341;
                }
                else
                {
                  HIBYTE(v721) = v340;
                  v342 = (double *)&v720;
                  if (!v340)
                  {
LABEL_617:
                    *((_BYTE *)v342 + v341) = 0;
                    v348 = (double *)v720;
                    v731[0] = v721;
                    *(_QWORD *)((char *)v731 + 7) = *(_QWORD *)((char *)&v721 + 7);
                    v349 = HIBYTE(v721);
                    v350 = operator new(0x38uLL);
                    v350[1] = 0;
                    v350[2] = 0;
                    v350[3] = off_24C9ABC20;
                    *v350 = &off_24C9ABBD0;
                    v351 = v731[0];
                    v350[4] = v348;
                    v350[5] = v351;
                    *(_QWORD *)((char *)v350 + 47) = *(_QWORD *)((char *)v731 + 7);
                    *((_BYTE *)v350 + 55) = v349;
                    v731[0] = 0;
                    *(_QWORD *)((char *)v731 + 7) = 0;
                    v352 = (std::__shared_weak_count *)v719;
                    v718 = (char *)(v350 + 3);
                    v719 = (uint64_t)v350;
                    if (v352)
                    {
                      v353 = (unint64_t *)&v352->__shared_owners_;
                      do
                        v354 = __ldaxr(v353);
                      while (__stlxr(v354 - 1, v353));
                      if (!v354)
                      {
                        ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
                        std::__shared_weak_count::__release_weak(v352);
                      }
                    }
                    object[0] = *(int64x2_t *)category;
                    v355 = (uint64_t)v718;
                    object[1].i64[0] = v717;
                    if (v717)
                    {
                      v356 = (unint64_t *)(v717 + 8);
                      do
                        v357 = __ldxr(v356);
                      while (__stxr(v357 + 1, v356));
                    }
                    v358 = (std::__shared_weak_count *)v719;
                    object[1].i64[1] = v355;
                    object[2].i64[0] = v719;
                    if (v719)
                    {
                      v359 = (unint64_t *)(v719 + 8);
                      do
                        v360 = __ldxr(v359);
                      while (__stxr(v360 + 1, v359));
                      object[2].i64[1] = v355;
                      do
                        v361 = __ldaxr(v359);
                      while (__stlxr(v361 - 1, v359));
                      if (!v361)
                      {
                        ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                        std::__shared_weak_count::__release_weak(v358);
                      }
                    }
                    else
                    {
                      object[2].i64[1] = v355;
                    }
                    v362 = (std::__shared_weak_count *)v717;
                    if (v717)
                    {
                      v363 = (unint64_t *)(v717 + 8);
                      do
                        v364 = __ldaxr(v363);
                      while (__stlxr(v364 - 1, v363));
                      if (!v364)
                      {
                        ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                        std::__shared_weak_count::__release_weak(v362);
                      }
                    }
                    v365 = object[0].i64[0];
                    if (*(char *)(object[2].i64[1] + 31) >= 0)
                      v366 = object[2].i64[1] + 8;
                    else
                      v366 = *(_QWORD *)(object[2].i64[1] + 8);
                    v367 = _os_log_pack_fill();
                    *(_DWORD *)v367 = 136315138;
                    *(_QWORD *)(v367 + 4) = v366;
                    v368 = operator new();
                    v369 = *(unsigned __int8 *)(v318 + 39);
                    v370 = *(_QWORD *)(v318 + 16);
                    v371 = *(_QWORD *)(v318 + 24);
                    v372 = *(__int128 *)((char *)&object[1] + 8);
                    *(int64x2_t *)(v368 + 8) = *(int64x2_t *)((char *)object + 8);
                    if ((v369 & 0x80u) != 0)
                      v369 = v371;
                    else
                      v370 = v319;
                    *(_QWORD *)v368 = v365;
                    object[0].i64[1] = 0;
                    object[1].i64[0] = 0;
                    *(_OWORD *)(v368 + 24) = v372;
                    object[1].i64[1] = 0;
                    object[2].i64[0] = 0;
                    *(_QWORD *)(v368 + 40) = v370;
                    *(_QWORD *)(v368 + 48) = v369;
                    *(_BYTE *)(v368 + 56) = 16;
                    v720 = 0;
                    category[0] = (char *)v368;
                    (*(void (**)(_QWORD, char **))(**(_QWORD **)(v309 + 24) + 40))(*(_QWORD *)(v309 + 24), category);
                    v373 = category[0];
                    category[0] = 0;
                    if (v373)
                    {
                      v374 = (std::__shared_weak_count *)*((_QWORD *)v373 + 4);
                      if (v374)
                      {
                        v375 = (unint64_t *)&v374->__shared_owners_;
                        do
                          v376 = __ldaxr(v375);
                        while (__stlxr(v376 - 1, v375));
                        if (!v376)
                        {
                          ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                          std::__shared_weak_count::__release_weak(v374);
                        }
                      }
                      v377 = (std::__shared_weak_count *)*((_QWORD *)v373 + 2);
                      if (v377)
                      {
                        v378 = (unint64_t *)&v377->__shared_owners_;
                        do
                          v379 = __ldaxr(v378);
                        while (__stlxr(v379 - 1, v378));
                        if (!v379)
                        {
                          ((void (*)(std::__shared_weak_count *))v377->__on_zero_shared)(v377);
                          std::__shared_weak_count::__release_weak(v377);
                        }
                      }
                      MEMORY[0x212BC6398](v373, 0x10F0C40B62ED6C6);
                      v380 = (double *)v720;
                      v720 = 0;
                      if (v380)
                      {
                        v381 = (std::__shared_weak_count *)*((_QWORD *)v380 + 4);
                        if (v381)
                        {
                          v382 = (unint64_t *)&v381->__shared_owners_;
                          do
                            v383 = __ldaxr(v382);
                          while (__stlxr(v383 - 1, v382));
                          if (!v383)
                          {
                            ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
                            std::__shared_weak_count::__release_weak(v381);
                          }
                        }
                        v384 = (std::__shared_weak_count *)*((_QWORD *)v380 + 2);
                        if (v384)
                        {
                          v385 = (unint64_t *)&v384->__shared_owners_;
                          do
                            v386 = __ldaxr(v385);
                          while (__stlxr(v386 - 1, v385));
                          if (!v386)
                          {
                            ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
                            std::__shared_weak_count::__release_weak(v384);
                          }
                        }
                        MEMORY[0x212BC6398](v380, 0x10F0C40B62ED6C6);
                      }
                    }
                    v387 = (std::__shared_weak_count *)object[2].i64[0];
                    if (object[2].i64[0])
                    {
                      v388 = (unint64_t *)(object[2].i64[0] + 8);
                      do
                        v389 = __ldaxr(v388);
                      while (__stlxr(v389 - 1, v388));
                      if (!v389)
                      {
                        ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
                        std::__shared_weak_count::__release_weak(v387);
                      }
                    }
                    v390 = (std::__shared_weak_count *)object[1].i64[0];
                    if (object[1].i64[0])
                    {
                      v391 = (unint64_t *)(object[1].i64[0] + 8);
                      do
                        v392 = __ldaxr(v391);
                      while (__stlxr(v392 - 1, v391));
                      if (!v392)
                      {
                        ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
                        std::__shared_weak_count::__release_weak(v390);
                      }
                    }
LABEL_677:
                    if (v307)
                    {
                      v393 = (const char *)&__dst;
                      if (v706 < 0)
                        v393 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v698, "%s", v393);
                      sub_20E863570((uint64_t)&v698);
                    }
                    sub_20E863570((uint64_t)&v698);
                    v394 = v703;
                    if (v703)
                    {
                      v395 = (unint64_t *)&v703->__shared_owners_;
                      do
                        v396 = __ldaxr(v395);
                      while (__stlxr(v396 - 1, v395));
                      if (!v396)
                      {
                        ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
                        std::__shared_weak_count::__release_weak(v394);
                      }
                    }
                    if (SHIBYTE(v706) < 0)
                      operator delete(__dst);
                    *(_QWORD *)&oslog[0] = *MEMORY[0x24BEDB7F0];
                    v397 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)oslog + *(_QWORD *)(*(_QWORD *)&oslog[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&oslog[1] = v397;
                    *((_QWORD *)&oslog[1] + 1) = MEMORY[0x24BEDB848] + 16;
                    if (SHIBYTE(v711.f64[1]) < 0)
                      operator delete(*(void **)&v710.f64[1]);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v713);
                    return;
                  }
                }
                memcpy(v342, v317, v341);
                goto LABEL_617;
              }
            }
            memmove(v333, v321, v320);
            goto LABEL_595;
          }
        }
        memmove(v325, v323, v324);
        goto LABEL_587;
      }
    }
    memmove(v311, v314, v310);
    goto LABEL_566;
  }
LABEL_437:
  v250 = *(double *)(a2 + 416);
  if (v250 > *(double *)(a1 + 2096))
  {
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 1688)
      || (sub_20F1A6D2C(&v714), **(int **)(v714 + 56) > 4)
      || (v251 = *(unsigned __int8 *)(v714 + 72),
          v252 = sub_20E8C31DC(v714, "OSLogSurrogateAppender", 1, 0),
          v253 = v252,
          !v251)
      && !v252)
    {
LABEL_822:
      v475 = **(_QWORD **)(a1 + 2104);
      if (*(_BYTE *)(v475 + 1904))
        *(_BYTE *)(v475 + 1904) = 0;
      if (*(_BYTE *)(v475 + 2040))
        *(_BYTE *)(v475 + 2040) = 0;
      if (*(_BYTE *)(v475 + 2176))
        *(_BYTE *)(v475 + 2176) = 0;
      if (*(_BYTE *)(v475 + 2208))
        *(_BYTE *)(v475 + 2208) = 0;
      *(_OWORD *)(v475 + 2320) = 0u;
      *(_OWORD *)(v475 + 2304) = 0u;
      *(_OWORD *)(v475 + 2288) = 0u;
      *(_OWORD *)(v475 + 2352) = 0u;
      if (*(_BYTE *)(v475 + 2224))
        *(_BYTE *)(v475 + 2224) = 0;
      if (*(_BYTE *)(v475 + 2280))
        *(_BYTE *)(v475 + 2280) = 0;
      if (*(_BYTE *)(v475 + 2344))
        *(_BYTE *)(v475 + 2344) = 0;
      *(_DWORD *)(v475 + 2368) = 0;
      v476 = *(void **)(v475 + 1816);
      v477 = *(_QWORD *)(v475 + 1824) - (_QWORD)v476;
      if (v477 >= 1)
        bzero(v476, 4 * (((unint64_t)v477 >> 2) - ((unint64_t)v477 > 3)) + 4);
      *(_QWORD *)(v475 + 1848) = *(_QWORD *)(v475 + 1840);
      *(_QWORD *)(a1 + 2128) = 0xBFF0000000000000;
      *(_BYTE *)(a1 + 2136) = 0;
      *(_BYTE *)(a1 + 2144) = 0;
      *(_BYTE *)(a1 + 2112) = 0;
      *(_BYTE *)(a1 + 2120) = 0;
      if (*(_BYTE *)(a1 + 2336))
        *(_BYTE *)(a1 + 2336) = 0;
      *(_DWORD *)(a1 + 2152) = 0;
      *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a1 + 1728);
      *(_QWORD *)(a1 + 2016) = 0;
      *(_QWORD *)(a1 + 2008) = 0;
      *(_QWORD *)(a1 + 2000) = 0;
      *(_QWORD *)(a1 + 2088) = 0xBFF0000000000000;
      *(_QWORD *)(a1 + 2048) = 0;
      *(_QWORD *)(a1 + 2064) = 0;
      *(_QWORD *)(a1 + 2056) = 0;
      v250 = *(double *)(a2 + 416);
      goto LABEL_841;
    }
    sub_20E863438((uint64_t)oslog);
    sub_20E86A980(&oslog[1], (uint64_t)"[MLPosePredictor] Reset MLFilter by SLAM.", 41);
    v672 = v251;
    if ((LOBYTE(v712.f64[1]) & 0x10) != 0)
    {
      v344 = v712.f64[0];
      if (*(_QWORD *)&v712.f64[0] < *(_QWORD *)&v709.f64[1])
      {
        v712.f64[0] = v709.f64[1];
        v344 = v709.f64[1];
      }
      v345 = (const void **)&v709;
    }
    else
    {
      if ((LOBYTE(v712.f64[1]) & 8) == 0)
      {
        v254 = 0;
        HIBYTE(v706) = 0;
        v255 = (char *)&__dst;
        goto LABEL_700;
      }
      v345 = (const void **)&oslog[2] + 1;
      v344 = v708.f64[1];
    }
    v398 = *v345;
    v254 = *(_QWORD *)&v344 - (_QWORD)*v345;
    if (v254 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v254 >= 0x17)
    {
      v399 = (v254 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v254 | 7) != 0x17)
        v399 = v254 | 7;
      v400 = v399 + 1;
      v255 = (char *)operator new(v399 + 1);
      v705 = v254;
      v706 = v400 | 0x8000000000000000;
      __dst = (char **)v255;
    }
    else
    {
      HIBYTE(v706) = LOBYTE(v344) - *(_BYTE *)v345;
      v255 = (char *)&__dst;
      if (!v254)
      {
LABEL_700:
        v255[v254] = 0;
        *(_QWORD *)&v698.f64[0] = &v714;
        *(std::chrono::steady_clock::time_point *)&v698.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
        *(std::chrono::system_clock::time_point *)&v699 = std::chrono::system_clock::now();
        DWORD2(v699) = 4;
        *(_QWORD *)&v700 = "unknown file";
        DWORD2(v700) = 314;
        v702 = 0;
        v703 = 0;
        v701 = "unknown function";
        if (v706 >= 0)
          v401 = (const char *)&__dst;
        else
          v401 = (const char *)__dst;
        v402 = **(_QWORD **)&v698.f64[0];
        v403 = (const char *)(**(_QWORD **)&v698.f64[0] + 16);
        v666 = **(_QWORD **)&v698.f64[0];
        v668 = v403;
        if (*(char *)(**(_QWORD **)&v698.f64[0] + 39) < 0)
        {
          v403 = *(const char **)(v402 + 16);
          v404 = *(_QWORD *)(v402 + 24);
        }
        else
        {
          v404 = *(unsigned __int8 *)(**(_QWORD **)&v698.f64[0] + 39);
        }
        v678 = v253;
        v405 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v405 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[1].i8[8] && object[1].i8[7] < 0)
            operator delete((void *)object[0].i64[0]);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v406 = byte_254A4A4F8;
        else
          v406 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v407 = byte_254A4A4F8[23];
        else
          v407 = *(_QWORD *)&byte_254A4A4F8[8];
        object[0].i64[0] = (uint64_t)os_log_create(v406, v403);
        v408 = &object[0].i64[1];
        if (v407 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v407 >= 0x17)
        {
          v409 = (v407 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v407 | 7) != 0x17)
            v409 = v407 | 7;
          v410 = v409 + 1;
          v408 = (uint64_t *)operator new(v409 + 1);
          object[1].i64[1] = v410 | 0x8000000000000000;
          object[0].i64[1] = (uint64_t)v408;
          object[1].i64[0] = v407;
        }
        else
        {
          object[1].i8[15] = v407;
          if (!v407)
          {
LABEL_721:
            *((_BYTE *)v408 + v407) = 0;
            object[2].i8[0] = 1;
            v411 = &object[2].i64[1];
            if (v404 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v404 >= 0x17)
            {
              v412 = (v404 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v404 | 7) != 0x17)
                v412 = v404 | 7;
              v413 = v412 + 1;
              v411 = (uint64_t *)operator new(v412 + 1);
              v723.i64[1] = v413 | 0x8000000000000000;
              object[2].i64[1] = (uint64_t)v411;
              v723.i64[0] = v404;
            }
            else
            {
              v723.i8[15] = v404;
              if (!v404)
              {
LABEL_729:
                *((_BYTE *)v411 + v404) = 0;
                LOBYTE(v724) = 1;
                v414 = object[0].i64[0];
                if (v723.i8[15] < 0)
                  operator delete((void *)object[2].i64[1]);
                if (object[2].i8[0] && object[1].i8[15] < 0)
                  operator delete((void *)object[0].i64[1]);
                if (object[0].i64[0])
                  os_release((void *)object[0].i64[0]);
                if (!v678 || !*(_QWORD *)(v678 + 24))
                {
                  os_log_type_enabled(v414, OS_LOG_TYPE_ERROR);
                  object[0].i32[0] = 136315138;
                  *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)v401;
                  v421 = (void *)_os_log_send_and_compose_impl();
                  v422 = v672;
                  if (v421)
                    free(v421);
                  goto LABEL_808;
                }
                v415 = _os_log_pack_size();
                v416 = (char *)operator new(v415, (std::align_val_t)8uLL);
                v417 = (_QWORD *)operator new();
                *v417 = &off_24C9ABB80;
                v417[1] = 0;
                v417[2] = 0;
                v417[3] = v416;
                category[0] = v416;
                category[1] = v416;
                v719 = 0;
                v717 = (int64_t)v417;
                v718 = 0;
                v418 = strlen(v401);
                if (v418 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v419 = v418;
                if (v418 >= 0x17)
                {
                  v423 = (v418 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v418 | 7) != 0x17)
                    v423 = v418 | 7;
                  v424 = v423 + 1;
                  v420 = (double *)operator new(v423 + 1);
                  *((_QWORD *)&v721 + 1) = v424 | 0x8000000000000000;
                  v720 = (float64x2_t *)v420;
                  *(_QWORD *)&v721 = v419;
                }
                else
                {
                  HIBYTE(v721) = v418;
                  v420 = (double *)&v720;
                  if (!v418)
                  {
LABEL_748:
                    *((_BYTE *)v420 + v419) = 0;
                    v425 = (double *)v720;
                    v731[0] = v721;
                    *(_QWORD *)((char *)v731 + 7) = *(_QWORD *)((char *)&v721 + 7);
                    v426 = HIBYTE(v721);
                    v427 = operator new(0x38uLL);
                    v427[1] = 0;
                    v427[2] = 0;
                    v427[3] = off_24C9ABC20;
                    *v427 = &off_24C9ABBD0;
                    v428 = v731[0];
                    v427[4] = v425;
                    v427[5] = v428;
                    *(_QWORD *)((char *)v427 + 47) = *(_QWORD *)((char *)v731 + 7);
                    *((_BYTE *)v427 + 55) = v426;
                    v731[0] = 0;
                    *(_QWORD *)((char *)v731 + 7) = 0;
                    v429 = (std::__shared_weak_count *)v719;
                    v718 = (char *)(v427 + 3);
                    v719 = (uint64_t)v427;
                    if (v429)
                    {
                      v430 = (unint64_t *)&v429->__shared_owners_;
                      do
                        v431 = __ldaxr(v430);
                      while (__stlxr(v431 - 1, v430));
                      if (!v431)
                      {
                        ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
                        std::__shared_weak_count::__release_weak(v429);
                      }
                    }
                    object[0] = *(int64x2_t *)category;
                    v432 = (uint64_t)v718;
                    object[1].i64[0] = v717;
                    if (v717)
                    {
                      v433 = (unint64_t *)(v717 + 8);
                      do
                        v434 = __ldxr(v433);
                      while (__stxr(v434 + 1, v433));
                    }
                    v435 = (std::__shared_weak_count *)v719;
                    object[1].i64[1] = v432;
                    object[2].i64[0] = v719;
                    if (v719)
                    {
                      v436 = (unint64_t *)(v719 + 8);
                      do
                        v437 = __ldxr(v436);
                      while (__stxr(v437 + 1, v436));
                      object[2].i64[1] = v432;
                      do
                        v438 = __ldaxr(v436);
                      while (__stlxr(v438 - 1, v436));
                      if (!v438)
                      {
                        ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
                        std::__shared_weak_count::__release_weak(v435);
                      }
                    }
                    else
                    {
                      object[2].i64[1] = v432;
                    }
                    v439 = (std::__shared_weak_count *)v717;
                    if (v717)
                    {
                      v440 = (unint64_t *)(v717 + 8);
                      do
                        v441 = __ldaxr(v440);
                      while (__stlxr(v441 - 1, v440));
                      if (!v441)
                      {
                        ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
                        std::__shared_weak_count::__release_weak(v439);
                      }
                    }
                    v442 = object[0].i64[0];
                    if (*(char *)(object[2].i64[1] + 31) >= 0)
                      v443 = object[2].i64[1] + 8;
                    else
                      v443 = *(_QWORD *)(object[2].i64[1] + 8);
                    v444 = _os_log_pack_fill();
                    *(_DWORD *)v444 = 136315138;
                    *(_QWORD *)(v444 + 4) = v443;
                    v445 = operator new();
                    v446 = *(unsigned __int8 *)(v666 + 39);
                    v447 = *(const char **)(v666 + 16);
                    v448 = *(_QWORD *)(v666 + 24);
                    v449 = *(__int128 *)((char *)&object[1] + 8);
                    *(int64x2_t *)(v445 + 8) = *(int64x2_t *)((char *)object + 8);
                    if ((v446 & 0x80u) != 0)
                      v446 = v448;
                    else
                      v447 = v668;
                    *(_QWORD *)v445 = v442;
                    object[0].i64[1] = 0;
                    object[1].i64[0] = 0;
                    *(_OWORD *)(v445 + 24) = v449;
                    object[1].i64[1] = 0;
                    object[2].i64[0] = 0;
                    *(_QWORD *)(v445 + 40) = v447;
                    *(_QWORD *)(v445 + 48) = v446;
                    *(_BYTE *)(v445 + 56) = 16;
                    v720 = 0;
                    category[0] = (char *)v445;
                    (*(void (**)(_QWORD, char **))(**(_QWORD **)(v678 + 24) + 40))(*(_QWORD *)(v678 + 24), category);
                    v422 = v672;
                    v450 = category[0];
                    category[0] = 0;
                    if (v450)
                    {
                      v451 = (std::__shared_weak_count *)*((_QWORD *)v450 + 4);
                      if (v451)
                      {
                        v452 = (unint64_t *)&v451->__shared_owners_;
                        do
                          v453 = __ldaxr(v452);
                        while (__stlxr(v453 - 1, v452));
                        if (!v453)
                        {
                          ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
                          std::__shared_weak_count::__release_weak(v451);
                        }
                      }
                      v454 = (std::__shared_weak_count *)*((_QWORD *)v450 + 2);
                      if (v454)
                      {
                        v455 = (unint64_t *)&v454->__shared_owners_;
                        do
                          v456 = __ldaxr(v455);
                        while (__stlxr(v456 - 1, v455));
                        if (!v456)
                        {
                          ((void (*)(std::__shared_weak_count *))v454->__on_zero_shared)(v454);
                          std::__shared_weak_count::__release_weak(v454);
                        }
                      }
                      MEMORY[0x212BC6398](v450, 0x10F0C40B62ED6C6);
                      v457 = (double *)v720;
                      v720 = 0;
                      if (v457)
                      {
                        v458 = (std::__shared_weak_count *)*((_QWORD *)v457 + 4);
                        if (v458)
                        {
                          v459 = (unint64_t *)&v458->__shared_owners_;
                          do
                            v460 = __ldaxr(v459);
                          while (__stlxr(v460 - 1, v459));
                          if (!v460)
                          {
                            ((void (*)(std::__shared_weak_count *))v458->__on_zero_shared)(v458);
                            std::__shared_weak_count::__release_weak(v458);
                          }
                        }
                        v461 = (std::__shared_weak_count *)*((_QWORD *)v457 + 2);
                        if (v461)
                        {
                          v462 = (unint64_t *)&v461->__shared_owners_;
                          do
                            v463 = __ldaxr(v462);
                          while (__stlxr(v463 - 1, v462));
                          if (!v463)
                          {
                            ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
                            std::__shared_weak_count::__release_weak(v461);
                          }
                        }
                        MEMORY[0x212BC6398](v457, 0x10F0C40B62ED6C6);
                      }
                    }
                    v464 = (std::__shared_weak_count *)object[2].i64[0];
                    if (object[2].i64[0])
                    {
                      v465 = (unint64_t *)(object[2].i64[0] + 8);
                      do
                        v466 = __ldaxr(v465);
                      while (__stlxr(v466 - 1, v465));
                      if (!v466)
                      {
                        ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
                        std::__shared_weak_count::__release_weak(v464);
                      }
                    }
                    v467 = (std::__shared_weak_count *)object[1].i64[0];
                    if (object[1].i64[0])
                    {
                      v468 = (unint64_t *)(object[1].i64[0] + 8);
                      do
                        v469 = __ldaxr(v468);
                      while (__stlxr(v469 - 1, v468));
                      if (!v469)
                      {
                        ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                        std::__shared_weak_count::__release_weak(v467);
                      }
                    }
LABEL_808:
                    if (v422)
                    {
                      v470 = (const char *)&__dst;
                      if (v706 < 0)
                        v470 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v698, "%s", v470);
                      sub_20E863570((uint64_t)&v698);
                    }
                    sub_20E863570((uint64_t)&v698);
                    v471 = v703;
                    if (v703)
                    {
                      v472 = (unint64_t *)&v703->__shared_owners_;
                      do
                        v473 = __ldaxr(v472);
                      while (__stlxr(v473 - 1, v472));
                      if (!v473)
                      {
                        ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
                        std::__shared_weak_count::__release_weak(v471);
                      }
                    }
                    if (SHIBYTE(v706) < 0)
                      operator delete(__dst);
                    *(_QWORD *)&oslog[0] = *MEMORY[0x24BEDB7F0];
                    v474 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)oslog + *(_QWORD *)(*(_QWORD *)&oslog[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&oslog[1] = v474;
                    *((_QWORD *)&oslog[1] + 1) = MEMORY[0x24BEDB848] + 16;
                    if (SHIBYTE(v711.f64[1]) < 0)
                      operator delete(*(void **)&v710.f64[1]);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v713);
                    goto LABEL_822;
                  }
                }
                memcpy(v420, v401, v419);
                goto LABEL_748;
              }
            }
            memmove(v411, v403, v404);
            goto LABEL_729;
          }
        }
        memmove(v408, v406, v407);
        goto LABEL_721;
      }
    }
    memmove(v255, v398, v254);
    goto LABEL_700;
  }
LABEL_841:
  *(double *)(a1 + 2096) = v250;
  if (*(_BYTE *)(**(_QWORD **)(a1 + 2104) + 2344))
  {
    v478 = *(_QWORD *)(a1 + 1896);
    if (v478)
      goto LABEL_845;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 201, (uint64_t)"!gyro_.empty()", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v478 = *(_QWORD *)(a1 + 1896);
    if (v478)
    {
LABEL_845:
      v479 = *(_QWORD *)(a1 + 1856);
      if (v478 == 1)
      {
        v480 = 0;
      }
      else
      {
        v481 = 0;
        v480 = 0;
        v482 = *(_QWORD *)(a1 + 1880);
        v483 = (*(_QWORD *)(a1 + 1864) - v479) >> 5;
        for (i = 1; i != v478; ++i)
        {
          v485 = v479 + 32 * ((v481 + v482) % v483);
          _D3 = *(_QWORD *)(v485 + 16);
          __asm { FMLA            D2, D3, V1.D[1] }
          v492 = sqrt(_D2 + *(double *)(v485 + 24) * *(double *)(v485 + 24));
          v493 = v479 + 32 * ((v482 + i) % v483);
          _Q2 = *(_OWORD *)(v493 + 8);
          _D4 = *(_QWORD *)(v493 + 16);
          __asm { FMLA            D3, D4, V2.D[1] }
          if (v492 < sqrt(_D3 + *(double *)(v493 + 24) * *(double *)(v493 + 24)))
          {
            v480 = i;
            v481 = i;
          }
        }
      }
    }
    else
    {
      v480 = 0;
      v479 = *(_QWORD *)(a1 + 1856);
    }
    v497 = v479 + 32 * ((*(_QWORD *)(a1 + 1880) + v480) % (unint64_t)((*(_QWORD *)(a1 + 1864) - v479) >> 5));
    _Q1 = *(_OWORD *)(v497 + 8);
    _D3 = *(_QWORD *)(v497 + 16);
    __asm { FMLA            D2, D3, V1.D[1] }
    if (sqrt(_D2 + *(double *)(v497 + 24) * *(double *)(v497 + 24)) <= *(double *)(a1 + 1696))
    {
      v730 = 0.0;
      v728 = 0u;
      v729 = 0u;
      v726 = 0u;
      v727 = 0u;
      v724 = 0u;
      v725 = 0u;
      v723 = 0u;
      memset(object, 0, sizeof(object));
      __dst = (char **)0xBFF0000000000000;
      v501 = *(double *)(a2 + 8);
      LOBYTE(oslog[0]) = 0;
      v713[40] = 0;
      if (!sub_20F1A49B0(a1, (uint64_t)object, (double *)&__dst, v501, 1, (uint64_t)oslog))
      {
        _Q1 = *(float64x2_t *)(a2 + 64);
        v522 = *(_OWORD *)(a2 + 80);
        v524 = *(double *)(a2 + 176);
        v526 = *(float64x2_t *)(a2 + 32);
        _Q2 = *(float64x2_t *)(a2 + 48);
        v527 = *(float64x2_t *)(a2 + 16);
        _Q4 = (float64x2_t)vextq_s8((int8x16_t)v527, (int8x16_t)_Q2, 8uLL);
        _V21.D[1] = *(double *)&v723.i64[1];
        v530 = (float64x2_t)vzip1q_s64(object[0], *(int64x2_t *)((char *)&object[1] + 8));
        v531 = (float64x2_t)vzip2q_s64(object[0], *(int64x2_t *)((char *)&object[1] + 8));
        v532 = vmlaq_laneq_f64(vmulq_n_f64(v530, v729.f64[0]), v531, v729, 1);
        v533 = vextq_s8((int8x16_t)v531, (int8x16_t)vdupq_laneq_s64(v723, 1), 8uLL);
        *(_QWORD *)&v531.f64[1] = v533.i64[0];
        v534 = vmlaq_laneq_f64(vmulq_n_f64(v530, v527.f64[0]), v531, v527, 1);
        v535 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v723.u64[0], v527.f64[0]), (float64x2_t)v533.u64[1], v527, 1);
        v527.f64[1] = *(float64_t *)(a2 + 40);
        _Q26.f64[0] = *(float64_t *)(a2 + 32);
        _Q26.f64[1] = *(float64_t *)(a2 + 56);
        _Q25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v527, *(double *)(a2 + 160)), _Q4, *(float64x2_t *)(a2 + 160), 1), _Q26, v524);
        _D16 = *(_QWORD *)(a2 + 168);
        __asm { FMLA            D26, D16, V1.D[1] }
        _Q26.f64[0] = vmlad_n_f64(_Q26.f64[0], v524, *(double *)&v522);
        *(_QWORD *)&v539.f64[0] = object[1].i64[0];
        *(_QWORD *)&v539.f64[1] = object[2].i64[1];
        _Q16 = vmulq_f64((float64x2_t)v723, v729);
        _D23 = v729.f64[1];
        __asm { FMLA            D16, D23, V21.D[1] }
        v542 = vmlaq_n_f64(v532, v539, v730);
        _Q16.f64[0] = _Q16.f64[0] + *(double *)&v724 * v730;
        __asm { FMOV            V21.2D, #1.0 }
        *(_QWORD *)&_Q21.f64[0] = *(_OWORD *)&vnegq_f64(_Q16);
        v544 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v527, (int64x2_t)_Q4), _Q25.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v527, (int64x2_t)_Q4), _Q25, 1), _Q1, _Q26.f64[0]);
        _Q25.f64[0] = _Q25.f64[1];
        __asm { FMLA            D4, D25, V2.D[1] }
        _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], _Q26.f64[0], *(double *)&v522);
        oslog[0] = vmlsq_f64(vmlaq_n_f64(v534, v539, v526.f64[0]), (float64x2_t)0, v542);
        oslog[1] = vmlaq_f64(vmlaq_n_f64(v535, (float64x2_t)(unint64_t)v724, v526.f64[0]), (float64x2_t)0, _Q21);
        oslog[2] = vmlsq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64(v530, v526, 1), v531, _Q2.f64[0]), v539, _Q2, 1), (float64x2_t)0, v542);
        v708 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmulq_laneq_f64((float64x2_t)v723.u64[0], v526, 1), (float64x2_t)v533.u64[1], _Q2.f64[0]), (float64x2_t)(unint64_t)v724, _Q2, 1), (float64x2_t)0, _Q21);
        v709 = vmlsq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v530, _Q1.f64[0]), v531, _Q1, 1), v539, *(double *)&v522), (float64x2_t)0, v542);
        v710 = vmlaq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v723.u64[0], _Q1.f64[0]), (float64x2_t)v533.u64[1], _Q1, 1), (float64x2_t)(unint64_t)v724, *(double *)&v522), (float64x2_t)0, _Q21);
        v711 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v530, v544.f64[0]), v531, v544, 1), v539, _Q4.f64[0]), v542);
        v712 = vaddq_f64(_Q21, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v723.u64[0], v544.f64[0]), (float64x2_t)v533.u64[1], v544, 1), (float64x2_t)(unint64_t)v724, _Q4.f64[0]));
        v699 = 0u;
        v700 = 0u;
        v698 = 0u;
        category[0] = (char *)oslog;
        category[1] = 0;
        v720 = &v698;
        *(_QWORD *)&v721 = 0;
        sub_20E95B988((float64x2_t **)category, (double **)&v720);
        *(_QWORD *)&v545.f64[0] = v699;
        _Q17 = v698;
        v547 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
        _Q0 = vmulq_f64(_Q17, _Q17);
        _Q1.f64[0] = v698.f64[1];
        __asm { FMLA            D0, D1, V17.D[1] }
        v550 = _Q0.f64[0] + v545.f64[0] * v545.f64[0];
        if (v550 >= 0.0000002635)
        {
          v552 = sqrt(v550);
          *(float64x2_t *)v674 = v547;
          v679 = *(double *)&v699;
          v669 = v698;
          v553 = __sincos_stret(v552);
          _Q17 = v669;
          v547 = *(float64x2_t *)v674;
          v545.f64[0] = v679;
          v551 = v553.__sinval / v552;
          _Q0.f64[0] = 1.0 / v550 * (1.0 - v553.__cosval);
          _Q1.f64[0] = 1.0 / v550 * (1.0 - v553.__sinval / v552);
        }
        else
        {
          _Q0.f64[0] = 0.5 - v550 * (v550 / -720.0 + 0.0416666667);
          _Q1.f64[0] = 0.166666667 - v550 * (v550 / -5040.0 + 0.00833333333);
          v551 = 1.0 - v550 * _Q1.f64[0];
        }
        if (v550 >= 2.775e-15)
          _Q0.f64[0] = v550 <= 9.0
                     ? (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v551
                     : (_Q0.f64[0] + v551 * -0.5) / (v550 * _Q0.f64[0]);
        else
          _Q0.f64[0] = v550 * 0.0000330687831 + v550 * 0.00138888889 + 0.0833333333;
        _Q1.f64[0] = v712.f64[0];
        v554.f64[0] = v547.f64[0];
        v554.f64[1] = v545.f64[0];
        v555.f64[0] = v712.f64[0];
        v555.f64[1] = v711.f64[0];
        v545.f64[1] = _Q17.f64[0];
        v556 = vmlsq_f64(vmulq_f64(v554, v555), v545, (float64x2_t)vextq_s8((int8x16_t)v711, (int8x16_t)_Q1, 8uLL));
        v557 = vmlsq_f64(vmulq_laneq_f64(_Q17, v711, 1), v547, v711);
        __asm { FMOV            V5.2D, #-0.5 }
        v559 = vmlaq_f64(v711, v556, _Q5);
        v560 = vmlaq_f64(_Q1, v557, _Q5);
        _Q5 = (float64x2_t)vextq_s8((int8x16_t)v556, (int8x16_t)v557, 8uLL);
        v557.f64[1] = v556.f64[0];
        v562 = vmulq_f64(v554, v557);
        v563 = vmlsq_f64(vmulq_laneq_f64(_Q17, v556, 1), v547, v556);
        _Q3 = vmlsq_f64(v562, v545, _Q5);
        v556.f64[0] = v560.f64[0] + _Q0.f64[0] * v563.f64[0];
        *(_QWORD *)&v560.f64[0] = *(_OWORD *)&vmlaq_f64(v560, _Q0, v563);
        _Q2 = vmlaq_n_f64(v559, _Q3, _Q0.f64[0]);
        __asm
        {
          FMLA            D5, D0, V3.D[1]
          FMLA            D0, D5, V2.D[1]
        }
        if (sqrt(vmlad_n_f64(_D0, v556.f64[0], v560.f64[0])) > *(double *)(a1 + 1704)
          || sqrt(v550) > *(double *)(a1 + 1712))
        {
          kdebug_trace();
          if (!*(_BYTE *)(a1 + 1688)
            || (sub_20F1A6D2C(&v714), **(int **)(v714 + 56) > 4)
            || (v567 = *(unsigned __int8 *)(v714 + 72),
                v568 = sub_20E8C31DC(v714, "OSLogSurrogateAppender", 1, 0),
                v569 = v568,
                !v567)
            && !v568)
          {
LABEL_1037:
            v662 = **(_QWORD **)(a1 + 2104);
            if (*(_BYTE *)(v662 + 1904))
              *(_BYTE *)(v662 + 1904) = 0;
            if (*(_BYTE *)(v662 + 2040))
              *(_BYTE *)(v662 + 2040) = 0;
            if (*(_BYTE *)(v662 + 2176))
              *(_BYTE *)(v662 + 2176) = 0;
            if (*(_BYTE *)(v662 + 2208))
              *(_BYTE *)(v662 + 2208) = 0;
            *(_OWORD *)(v662 + 2320) = 0u;
            *(_OWORD *)(v662 + 2304) = 0u;
            *(_OWORD *)(v662 + 2288) = 0u;
            *(_OWORD *)(v662 + 2352) = 0u;
            if (*(_BYTE *)(v662 + 2224))
              *(_BYTE *)(v662 + 2224) = 0;
            if (*(_BYTE *)(v662 + 2280))
              *(_BYTE *)(v662 + 2280) = 0;
            if (*(_BYTE *)(v662 + 2344))
              *(_BYTE *)(v662 + 2344) = 0;
            *(_DWORD *)(v662 + 2368) = 0;
            v663 = *(void **)(v662 + 1816);
            v664 = *(_QWORD *)(v662 + 1824) - (_QWORD)v663;
            if (v664 >= 1)
              bzero(v663, 4 * (((unint64_t)v664 >> 2) - ((unint64_t)v664 > 3)) + 4);
            *(_QWORD *)(v662 + 1848) = *(_QWORD *)(v662 + 1840);
            *(_QWORD *)(a1 + 2128) = 0xBFF0000000000000;
            *(_BYTE *)(a1 + 2136) = 0;
            *(_BYTE *)(a1 + 2144) = 0;
            *(_BYTE *)(a1 + 2112) = 0;
            *(_BYTE *)(a1 + 2120) = 0;
            if (*(_BYTE *)(a1 + 2336))
              *(_BYTE *)(a1 + 2336) = 0;
            *(_DWORD *)(a1 + 2152) = 0;
            *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a1 + 1728);
            *(_QWORD *)(a1 + 2000) = 0;
            *(_QWORD *)(a1 + 2016) = 0;
            *(_QWORD *)(a1 + 2008) = 0;
            *(_QWORD *)(a1 + 2088) = 0xBFF0000000000000;
            *(_QWORD *)(a1 + 2048) = 0;
            *(_QWORD *)(a1 + 2064) = 0;
            *(_QWORD *)(a1 + 2056) = 0;
            return;
          }
          sub_20E863438((uint64_t)oslog);
          sub_20E86A980(&oslog[1], (uint64_t)"[MLPosePredictor] Reset MLFilter due to discrepancy with SLAM.", 62);
          v697 = v569;
          if ((LOBYTE(v712.f64[1]) & 0x10) != 0)
          {
            v581 = v712.f64[0];
            if (*(_QWORD *)&v712.f64[0] < *(_QWORD *)&v709.f64[1])
            {
              v712.f64[0] = v709.f64[1];
              v581 = v709.f64[1];
            }
            v582 = (const void **)&v709;
          }
          else
          {
            if ((LOBYTE(v712.f64[1]) & 8) == 0)
            {
              v570 = 0;
              HIBYTE(v706) = 0;
              v571 = (char *)&__dst;
              goto LABEL_915;
            }
            v582 = (const void **)&oslog[2] + 1;
            v581 = v708.f64[1];
          }
          v583 = *v582;
          v570 = *(_QWORD *)&v581 - (_QWORD)*v582;
          if (v570 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v570 >= 0x17)
          {
            v584 = (v570 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v570 | 7) != 0x17)
              v584 = v570 | 7;
            v585 = v584 + 1;
            v571 = (char *)operator new(v584 + 1);
            v705 = v570;
            v706 = v585 | 0x8000000000000000;
            __dst = (char **)v571;
          }
          else
          {
            HIBYTE(v706) = LOBYTE(v581) - *(_BYTE *)v582;
            v571 = (char *)&__dst;
            if (!v570)
            {
LABEL_915:
              v571[v570] = 0;
              *(_QWORD *)&v698.f64[0] = &v714;
              *(std::chrono::steady_clock::time_point *)&v698.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
              *(std::chrono::system_clock::time_point *)&v699 = std::chrono::system_clock::now();
              DWORD2(v699) = 4;
              *(_QWORD *)&v700 = "unknown file";
              DWORD2(v700) = 326;
              v702 = 0;
              v703 = 0;
              v701 = "unknown function";
              if (v706 >= 0)
                v586 = (char **)&__dst;
              else
                v586 = __dst;
              v587 = **(_QWORD **)&v698.f64[0];
              v588 = (const char *)(**(_QWORD **)&v698.f64[0] + 16);
              v693 = v588;
              if (*(char *)(**(_QWORD **)&v698.f64[0] + 39) < 0)
              {
                v588 = *(const char **)(v587 + 16);
                v589 = *(_QWORD *)(v587 + 24);
              }
              else
              {
                v589 = *(unsigned __int8 *)(**(_QWORD **)&v698.f64[0] + 39);
              }
              v590 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v590 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)object);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                if (object[1].i8[8] && object[1].i8[7] < 0)
                  operator delete((void *)object[0].i64[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              if (byte_254A4A4F8[23] >= 0)
                v591 = byte_254A4A4F8;
              else
                v591 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v592 = byte_254A4A4F8[23];
              else
                v592 = *(_QWORD *)&byte_254A4A4F8[8];
              object[0].i64[0] = (uint64_t)os_log_create(v591, v588);
              v593 = &object[0].i64[1];
              if (v592 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v592 >= 0x17)
              {
                v594 = v567;
                v595 = (v592 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v592 | 7) != 0x17)
                  v595 = v592 | 7;
                v596 = v595 + 1;
                v593 = (uint64_t *)operator new(v595 + 1);
                object[1].i64[1] = v596 | 0x8000000000000000;
                object[0].i64[1] = (uint64_t)v593;
                object[1].i64[0] = v592;
                v567 = v594;
              }
              else
              {
                object[1].i8[15] = v592;
                if (!v592)
                {
LABEL_936:
                  *((_BYTE *)v593 + v592) = 0;
                  object[2].i8[0] = 1;
                  v597 = &object[2].i64[1];
                  if (v589 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v598 = (const char *)v586;
                  if (v589 >= 0x17)
                  {
                    v600 = (v589 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v589 | 7) != 0x17)
                      v600 = v589 | 7;
                    v601 = v600 + 1;
                    v599 = v697;
                    v597 = (uint64_t *)operator new(v600 + 1);
                    v723.i64[1] = v601 | 0x8000000000000000;
                    object[2].i64[1] = (uint64_t)v597;
                    v723.i64[0] = v589;
                  }
                  else
                  {
                    v723.i8[15] = v589;
                    v599 = v697;
                    if (!v589)
                    {
LABEL_944:
                      *((_BYTE *)v597 + v589) = 0;
                      LOBYTE(v724) = 1;
                      v602 = object[0].i64[0];
                      if (v723.i8[15] < 0)
                        operator delete((void *)object[2].i64[1]);
                      if (object[2].i8[0] && object[1].i8[15] < 0)
                        operator delete((void *)object[0].i64[1]);
                      if (object[0].i64[0])
                        os_release((void *)object[0].i64[0]);
                      if (!v599 || !*(_QWORD *)(v599 + 24))
                      {
                        os_log_type_enabled(v602, OS_LOG_TYPE_ERROR);
                        object[0].i32[0] = 136315138;
                        *(uint64_t *)((char *)object[0].i64 + 4) = (uint64_t)v598;
                        v609 = (void *)_os_log_send_and_compose_impl();
                        if (v609)
                          free(v609);
                        goto LABEL_1023;
                      }
                      v603 = _os_log_pack_size();
                      v604 = (char *)operator new(v603, (std::align_val_t)8uLL);
                      v605 = (_QWORD *)operator new();
                      *v605 = &off_24C9ABB80;
                      v605[1] = 0;
                      v605[2] = 0;
                      v605[3] = v604;
                      category[0] = v604;
                      category[1] = v604;
                      v719 = 0;
                      v717 = (int64_t)v605;
                      v718 = 0;
                      v606 = strlen(v598);
                      if (v606 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v607 = v606;
                      if (v606 >= 0x17)
                      {
                        v610 = (v606 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v606 | 7) != 0x17)
                          v610 = v606 | 7;
                        v611 = v610 + 1;
                        v608 = (double *)operator new(v610 + 1);
                        *((_QWORD *)&v721 + 1) = v611 | 0x8000000000000000;
                        v720 = (float64x2_t *)v608;
                        *(_QWORD *)&v721 = v607;
                      }
                      else
                      {
                        HIBYTE(v721) = v606;
                        v608 = (double *)&v720;
                        if (!v606)
                        {
LABEL_963:
                          *((_BYTE *)v608 + v607) = 0;
                          v612 = (double *)v720;
                          v731[0] = v721;
                          *(_QWORD *)((char *)v731 + 7) = *(_QWORD *)((char *)&v721 + 7);
                          v613 = HIBYTE(v721);
                          v614 = operator new(0x38uLL);
                          v614[1] = 0;
                          v614[2] = 0;
                          v614[3] = off_24C9ABC20;
                          *v614 = &off_24C9ABBD0;
                          v615 = v731[0];
                          v614[4] = v612;
                          v614[5] = v615;
                          *(_QWORD *)((char *)v614 + 47) = *(_QWORD *)((char *)v731 + 7);
                          *((_BYTE *)v614 + 55) = v613;
                          v731[0] = 0;
                          *(_QWORD *)((char *)v731 + 7) = 0;
                          v616 = (std::__shared_weak_count *)v719;
                          v718 = (char *)(v614 + 3);
                          v719 = (uint64_t)v614;
                          if (v616)
                          {
                            v617 = (unint64_t *)&v616->__shared_owners_;
                            do
                              v618 = __ldaxr(v617);
                            while (__stlxr(v618 - 1, v617));
                            if (!v618)
                            {
                              ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
                              std::__shared_weak_count::__release_weak(v616);
                            }
                          }
                          object[0] = *(int64x2_t *)category;
                          v619 = (uint64_t)v718;
                          object[1].i64[0] = v717;
                          if (v717)
                          {
                            v620 = (unint64_t *)(v717 + 8);
                            do
                              v621 = __ldxr(v620);
                            while (__stxr(v621 + 1, v620));
                          }
                          v622 = (std::__shared_weak_count *)v719;
                          object[1].i64[1] = v619;
                          object[2].i64[0] = v719;
                          if (v719)
                          {
                            v623 = (unint64_t *)(v719 + 8);
                            do
                              v624 = __ldxr(v623);
                            while (__stxr(v624 + 1, v623));
                            object[2].i64[1] = v619;
                            do
                              v625 = __ldaxr(v623);
                            while (__stlxr(v625 - 1, v623));
                            if (!v625)
                            {
                              ((void (*)(std::__shared_weak_count *))v622->__on_zero_shared)(v622);
                              std::__shared_weak_count::__release_weak(v622);
                            }
                          }
                          else
                          {
                            object[2].i64[1] = v619;
                          }
                          v626 = (std::__shared_weak_count *)v717;
                          if (v717)
                          {
                            v627 = (unint64_t *)(v717 + 8);
                            do
                              v628 = __ldaxr(v627);
                            while (__stlxr(v628 - 1, v627));
                            if (!v628)
                            {
                              ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
                              std::__shared_weak_count::__release_weak(v626);
                            }
                          }
                          v629 = object[0].i64[0];
                          if (*(char *)(object[2].i64[1] + 31) >= 0)
                            v630 = object[2].i64[1] + 8;
                          else
                            v630 = *(_QWORD *)(object[2].i64[1] + 8);
                          v631 = _os_log_pack_fill();
                          *(_DWORD *)v631 = 136315138;
                          *(_QWORD *)(v631 + 4) = v630;
                          v632 = operator new();
                          v633 = *(unsigned __int8 *)(v587 + 39);
                          v634 = *(const char **)(v587 + 16);
                          v635 = *(_QWORD *)(v587 + 24);
                          v636 = *(__int128 *)((char *)&object[1] + 8);
                          *(int64x2_t *)(v632 + 8) = *(int64x2_t *)((char *)object + 8);
                          if ((v633 & 0x80u) != 0)
                            v633 = v635;
                          else
                            v634 = v693;
                          *(_QWORD *)v632 = v629;
                          object[0].i64[1] = 0;
                          object[1].i64[0] = 0;
                          *(_OWORD *)(v632 + 24) = v636;
                          object[1].i64[1] = 0;
                          object[2].i64[0] = 0;
                          *(_QWORD *)(v632 + 40) = v634;
                          *(_QWORD *)(v632 + 48) = v633;
                          *(_BYTE *)(v632 + 56) = 16;
                          v720 = 0;
                          category[0] = (char *)v632;
                          (*(void (**)(_QWORD, char **))(**(_QWORD **)(v599 + 24) + 40))(*(_QWORD *)(v599 + 24), category);
                          v637 = category[0];
                          category[0] = 0;
                          if (v637)
                          {
                            v638 = (std::__shared_weak_count *)*((_QWORD *)v637 + 4);
                            if (v638)
                            {
                              v639 = (unint64_t *)&v638->__shared_owners_;
                              do
                                v640 = __ldaxr(v639);
                              while (__stlxr(v640 - 1, v639));
                              if (!v640)
                              {
                                ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
                                std::__shared_weak_count::__release_weak(v638);
                              }
                            }
                            v641 = (std::__shared_weak_count *)*((_QWORD *)v637 + 2);
                            if (v641)
                            {
                              v642 = (unint64_t *)&v641->__shared_owners_;
                              do
                                v643 = __ldaxr(v642);
                              while (__stlxr(v643 - 1, v642));
                              if (!v643)
                              {
                                ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
                                std::__shared_weak_count::__release_weak(v641);
                              }
                            }
                            MEMORY[0x212BC6398](v637, 0x10F0C40B62ED6C6);
                            v644 = (double *)v720;
                            v720 = 0;
                            if (v644)
                            {
                              v645 = (std::__shared_weak_count *)*((_QWORD *)v644 + 4);
                              if (v645)
                              {
                                v646 = (unint64_t *)&v645->__shared_owners_;
                                do
                                  v647 = __ldaxr(v646);
                                while (__stlxr(v647 - 1, v646));
                                if (!v647)
                                {
                                  ((void (*)(std::__shared_weak_count *))v645->__on_zero_shared)(v645);
                                  std::__shared_weak_count::__release_weak(v645);
                                }
                              }
                              v648 = (std::__shared_weak_count *)*((_QWORD *)v644 + 2);
                              if (v648)
                              {
                                v649 = (unint64_t *)&v648->__shared_owners_;
                                do
                                  v650 = __ldaxr(v649);
                                while (__stlxr(v650 - 1, v649));
                                if (!v650)
                                {
                                  ((void (*)(std::__shared_weak_count *))v648->__on_zero_shared)(v648);
                                  std::__shared_weak_count::__release_weak(v648);
                                }
                              }
                              MEMORY[0x212BC6398](v644, 0x10F0C40B62ED6C6);
                            }
                          }
                          v651 = (std::__shared_weak_count *)object[2].i64[0];
                          if (object[2].i64[0])
                          {
                            v652 = (unint64_t *)(object[2].i64[0] + 8);
                            do
                              v653 = __ldaxr(v652);
                            while (__stlxr(v653 - 1, v652));
                            if (!v653)
                            {
                              ((void (*)(std::__shared_weak_count *))v651->__on_zero_shared)(v651);
                              std::__shared_weak_count::__release_weak(v651);
                            }
                          }
                          v654 = (std::__shared_weak_count *)object[1].i64[0];
                          if (object[1].i64[0])
                          {
                            v655 = (unint64_t *)(object[1].i64[0] + 8);
                            do
                              v656 = __ldaxr(v655);
                            while (__stlxr(v656 - 1, v655));
                            if (!v656)
                            {
                              ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
                              std::__shared_weak_count::__release_weak(v654);
                            }
                          }
LABEL_1023:
                          if (v567)
                          {
                            v657 = (const char *)&__dst;
                            if (v706 < 0)
                              v657 = (const char *)__dst;
                            sub_20E8C003C((uint64_t)&v698, "%s", v657);
                            sub_20E863570((uint64_t)&v698);
                          }
                          sub_20E863570((uint64_t)&v698);
                          v658 = v703;
                          if (v703)
                          {
                            v659 = (unint64_t *)&v703->__shared_owners_;
                            do
                              v660 = __ldaxr(v659);
                            while (__stlxr(v660 - 1, v659));
                            if (!v660)
                            {
                              ((void (*)(std::__shared_weak_count *))v658->__on_zero_shared)(v658);
                              std::__shared_weak_count::__release_weak(v658);
                            }
                          }
                          if (SHIBYTE(v706) < 0)
                            operator delete(__dst);
                          *(_QWORD *)&oslog[0] = *MEMORY[0x24BEDB7F0];
                          v661 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                          *(_QWORD *)((char *)oslog + *(_QWORD *)(*(_QWORD *)&oslog[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                          *(_QWORD *)&oslog[1] = v661;
                          *((_QWORD *)&oslog[1] + 1) = MEMORY[0x24BEDB848] + 16;
                          if (SHIBYTE(v711.f64[1]) < 0)
                            operator delete(*(void **)&v710.f64[1]);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x212BC6290](v713);
                          goto LABEL_1037;
                        }
                      }
                      memcpy(v608, v598, v607);
                      goto LABEL_963;
                    }
                  }
                  memmove(v597, v588, v589);
                  goto LABEL_944;
                }
              }
              memmove(v593, v591, v592);
              goto LABEL_936;
            }
          }
          memmove(v571, v583, v570);
          goto LABEL_915;
        }
      }
    }
  }
  v502 = v694;
  v504 = v689;
  v503 = v690;
  v506 = v687;
  v505 = v688;
  v508 = v685;
  v507 = v686;
  v510 = v683;
  v509 = v684;
  v511 = v682;
  v512 = v715;
  *(double *)(a1 + 2088) = v715;
  v513 = *(_QWORD *)(a1 + 1976) + 176 * *(_QWORD *)(a1 + 2008);
  v511.i64[1] = vextq_s8(v511, v511, 8uLL).u64[0];
  v510.i64[1] = vextq_s8(v510, v510, 8uLL).u64[0];
  *(int8x16_t *)v513 = v511;
  *(int8x16_t *)(v513 + 16) = v510;
  v509.i64[1] = vextq_s8(v509, v509, 8uLL).u64[0];
  v508.i64[1] = vextq_s8(v508, v508, 8uLL).u64[0];
  *(int8x16_t *)(v513 + 32) = v509;
  *(int8x16_t *)(v513 + 48) = v508;
  v507.i64[1] = vextq_s8(v507, v507, 8uLL).u64[0];
  v506.i64[1] = vextq_s8(v506, v506, 8uLL).u64[0];
  *(int8x16_t *)(v513 + 64) = v507;
  *(int8x16_t *)(v513 + 80) = v506;
  v505.i64[1] = vextq_s8(v505, v505, 8uLL).u64[0];
  v504.i64[1] = vextq_s8(v504, v504, 8uLL).u64[0];
  *(int8x16_t *)(v513 + 96) = v505;
  *(int8x16_t *)(v513 + 112) = v504;
  v503.i64[1] = vextq_s8(v503, v503, 8uLL).u64[0];
  v502.i64[1] = vextq_s8(v502, v502, 8uLL).u64[0];
  *(int8x16_t *)(v513 + 128) = v503;
  *(int8x16_t *)(v513 + 144) = v502;
  *(_QWORD *)(v513 + 160) = v691;
  *(double *)(v513 + 168) = v512;
  v514 = *(_QWORD *)(a1 + 1976);
  v515 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 1984) - v514) >> 4);
  v516 = *(_QWORD *)(a1 + 2008) + 1;
  if (v516 >= v515)
    v517 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 1984) - v514) >> 4);
  else
    v517 = 0;
  *(_QWORD *)(a1 + 2008) = v516 - v517;
  v518 = *(_QWORD *)(a1 + 2016);
  if (v518 == v515)
  {
    v519 = *(_QWORD *)(a1 + 2000) + 1;
    if (v519 < v515)
      v515 = 0;
    v520 = v519 - v515;
    *(_QWORD *)(a1 + 2000) = v520;
  }
  else
  {
    *(_QWORD *)(a1 + 2016) = v518 + 1;
    v520 = *(_QWORD *)(a1 + 2000);
  }
  sub_20F1A6E20((_QWORD *)a1, *(double *)(v514 + 176 * v520 + 168) + *(double *)(a1 + 1720) * -5.0 - *(double *)(a1 + 1744));
  if (*(double *)(a1 + 2128) > 0.0)
  {
    v521 = *(_QWORD *)(a1 + 2016);
    if (v521 >= 2)
      sub_20F1A6F2C(a1, *(double *)(*(_QWORD *)(a1 + 1976)+ 176* ((v521 + *(_QWORD *)(a1 + 2000) - 2)% (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976)) >> 4)))+ 168));
  }
}

void sub_20F1A4344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *object)
{
  if (LOBYTE(STACK[0x2F8]) && SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a43);
  if (a57 < 0)
    operator delete(a52);
  sub_20E863784((uint64_t)&object);
  _Unwind_Resume(a1);
}

void sub_20F1A4994(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F1A49B0(uint64_t a1, uint64_t a2, double *a3, double a4, uint64_t a5, uint64_t a6)
{
  double v9;
  float64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  unint64_t v19;
  _QWORD **v20;
  size_t v21;
  const char *v22;
  double v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  size_t v41;
  std::__shared_weak_count_vtbl *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  const char *v83;
  uint64_t *v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  size_t v94;
  const char *v95;
  double v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  const char *v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  float64x2_t v117;
  __int128 v118;
  float64x2_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 v130;
  const char *v131;
  size_t v132;
  _BYTE *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t *v142;
  size_t v143;
  std::__shared_weak_count_vtbl *v144;
  std::__shared_weak_count *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  char *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  void *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  float64x2_t v182;
  float64x2_t v183;
  uint64_t v184;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v194;
  float64x2_t v195;
  uint64_t v196;
  double *v197;
  uint64_t v198;
  uint64_t v199;
  double v200;
  unsigned __int8 v201;
  size_t v202;
  const char *v203;
  _BYTE *v204;
  unint64_t v205;
  const char *v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  NSObject *v215;
  size_t v216;
  std::__shared_weak_count_vtbl *v217;
  std::__shared_weak_count *v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  double v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  char *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  std::__shared_weak_count *v240;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  void *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  const char *__src;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD **v260;
  const char *v261;
  uint64_t *v262;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v264;
  int v265;
  const char *v266;
  int v267;
  const char *v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  uint64_t v271;
  double v272;
  char *category[2];
  _QWORD v274[2];
  _BYTE object[48];
  __int128 v276;
  __int128 v277;
  __int128 v278;
  float64x2_t v279;
  float64x2_t v280;
  uint64_t v281;

  v9 = a4;
  v281 = *MEMORY[0x24BDAC8D0];
  v272 = a4;
  kdebug_trace();
  kdebug_trace();
  sub_20F1A6F2C(a1, v9);
  v12 = **(_QWORD **)(a1 + 2104);
  if (!*(_BYTE *)(v12 + 2344))
    return 5;
  if (*(double *)(a1 + 2128) != *(double *)(v12 + 2336))
  {
    if (*(_BYTE *)(a1 + 1688))
    {
      sub_20F1A6D2C(&v271);
      if (**(int **)(v271 + 56) <= 5)
      {
        v18 = *(unsigned __int8 *)(v271 + 72);
        v19 = sub_20E8C31DC(v271, "OSLogSurrogateAppender", 1, 0);
        v20 = (_QWORD **)v19;
        if (v18 || v19)
        {
          v262 = &v271;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v264 = std::chrono::system_clock::now().__d_.__rep_;
          v265 = 5;
          v266 = "unknown file";
          v267 = 373;
          v269 = 0;
          v270 = 0;
          v268 = "unknown function";
          v254 = v271;
          if (*(char *)(v271 + 39) < 0)
          {
            v22 = *(const char **)(v271 + 16);
            v21 = *(_QWORD *)(v271 + 24);
          }
          else
          {
            v21 = *(unsigned __int8 *)(v271 + 39);
            v22 = (const char *)(v271 + 16);
          }
          v253 = v271 + 16;
          v256 = v18;
          v258 = *(_QWORD *)(**(_QWORD **)(a1 + 2104) + 2336);
          v260 = v20;
          v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v32 = byte_254A4A4F8;
          else
            v32 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v33 = byte_254A4A4F8[23];
          else
            v33 = *(_QWORD *)&byte_254A4A4F8[8];
          __src = v22;
          *(_QWORD *)object = os_log_create(v32, v22);
          v34 = &object[8];
          if (v33 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v33 >= 0x17)
          {
            v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v33 | 7) != 0x17)
              v35 = v33 | 7;
            v36 = v35 + 1;
            v34 = operator new(v35 + 1);
            *(_QWORD *)&object[16] = v33;
            *(_QWORD *)&object[24] = v36 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v34;
          }
          else
          {
            object[31] = v33;
            if (!v33)
            {
LABEL_45:
              v34[v33] = 0;
              object[32] = 1;
              v37 = &object[40];
              if (v21 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v21 >= 0x17)
              {
                v38 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17)
                  v38 = v21 | 7;
                v39 = v38 + 1;
                v37 = operator new(v38 + 1);
                *(_QWORD *)&v276 = v21;
                *((_QWORD *)&v276 + 1) = v39 | 0x8000000000000000;
                *(_QWORD *)&object[40] = v37;
              }
              else
              {
                HIBYTE(v276) = v21;
                if (!v21)
                  goto LABEL_53;
              }
              memmove(v37, __src, v21);
LABEL_53:
              v37[v21] = 0;
              LOBYTE(v277) = 1;
              v40 = *(NSObject **)object;
              if (SHIBYTE(v276) < 0)
                operator delete(*(void **)&object[40]);
              if (object[32] && (object[31] & 0x80000000) != 0)
                operator delete(*(void **)&object[8]);
              if (*(_QWORD *)object)
                os_release(*(void **)object);
              if (v260 && v260[3])
              {
                v41 = _os_log_pack_size();
                v42 = (std::__shared_weak_count_vtbl *)operator new(v41, (std::align_val_t)8uLL);
                v43 = (std::__shared_weak_count *)operator new();
                v44 = v43;
                v43->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v43->__shared_owners_;
                v43->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v43->__shared_weak_owners_ = 0;
                v43[1].__vftable = v42;
                *(_QWORD *)object = v42;
                *(_QWORD *)&object[8] = v42;
                *(_QWORD *)&object[16] = v43;
                do
                  v46 = __ldxr(p_shared_owners);
                while (__stxr(v46 + 1, p_shared_owners));
                memset(&object[24], 0, 24);
                do
                  v47 = __ldaxr(p_shared_owners);
                while (__stlxr(v47 - 1, p_shared_owners));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                  std::__shared_weak_count::__release_weak(v44);
                }
                v48 = *(_QWORD *)object;
                v49 = _os_log_pack_fill();
                v50 = *(_QWORD *)(a1 + 2128);
                *(_DWORD *)v49 = 134218240;
                *(_QWORD *)(v49 + 4) = v258;
                *(_WORD *)(v49 + 12) = 2048;
                *(_QWORD *)(v49 + 14) = v50;
                v51 = operator new();
                v52 = *(unsigned __int8 *)(v254 + 39);
                v53 = v253;
                if ((v52 & 0x80u) != 0)
                {
                  v53 = *(_QWORD *)(v254 + 16);
                  v52 = *(_QWORD *)(v254 + 24);
                }
                *(_QWORD *)v51 = v48;
                *(_OWORD *)(v51 + 8) = *(_OWORD *)&object[8];
                *(_QWORD *)&object[8] = 0;
                *(_QWORD *)&object[16] = 0;
                *(_OWORD *)(v51 + 24) = *(_OWORD *)&object[24];
                *(_QWORD *)&object[24] = 0;
                *(_QWORD *)&object[32] = 0;
                *(_QWORD *)(v51 + 40) = v53;
                *(_QWORD *)(v51 + 48) = v52;
                *(_BYTE *)(v51 + 56) = 16;
                category[0] = 0;
                v274[0] = v51;
                (*(void (**)(_QWORD *, _QWORD *))(*v260[3] + 40))(v260[3], v274);
                v54 = v274[0];
                v274[0] = 0;
                if (v54)
                {
                  v55 = *(std::__shared_weak_count **)(v54 + 32);
                  if (v55)
                  {
                    v56 = (unint64_t *)&v55->__shared_owners_;
                    do
                      v57 = __ldaxr(v56);
                    while (__stlxr(v57 - 1, v56));
                    if (!v57)
                    {
                      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                      std::__shared_weak_count::__release_weak(v55);
                    }
                  }
                  v58 = *(std::__shared_weak_count **)(v54 + 16);
                  if (v58)
                  {
                    v59 = (unint64_t *)&v58->__shared_owners_;
                    do
                      v60 = __ldaxr(v59);
                    while (__stlxr(v60 - 1, v59));
                    if (!v60)
                    {
                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                      std::__shared_weak_count::__release_weak(v58);
                    }
                  }
                  MEMORY[0x212BC6398](v54, 0x10F0C40B62ED6C6);
                  v61 = category[0];
                  category[0] = 0;
                  if (v61)
                  {
                    v62 = (std::__shared_weak_count *)*((_QWORD *)v61 + 4);
                    if (v62)
                    {
                      v63 = (unint64_t *)&v62->__shared_owners_;
                      do
                        v64 = __ldaxr(v63);
                      while (__stlxr(v64 - 1, v63));
                      if (!v64)
                      {
                        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                        std::__shared_weak_count::__release_weak(v62);
                      }
                    }
                    v65 = (std::__shared_weak_count *)*((_QWORD *)v61 + 2);
                    if (v65)
                    {
                      v66 = (unint64_t *)&v65->__shared_owners_;
                      do
                        v67 = __ldaxr(v66);
                      while (__stlxr(v67 - 1, v66));
                      if (!v67)
                      {
                        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                        std::__shared_weak_count::__release_weak(v65);
                      }
                    }
                    MEMORY[0x212BC6398](v61, 0x10F0C40B62ED6C6);
                  }
                }
                v68 = *(std::__shared_weak_count **)&object[32];
                if (*(_QWORD *)&object[32])
                {
                  v69 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                  do
                    v70 = __ldaxr(v69);
                  while (__stlxr(v70 - 1, v69));
                  if (!v70)
                  {
                    ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                    std::__shared_weak_count::__release_weak(v68);
                  }
                }
                v71 = *(std::__shared_weak_count **)&object[16];
                if (*(_QWORD *)&object[16])
                {
                  v72 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                  do
                    v73 = __ldaxr(v72);
                  while (__stlxr(v73 - 1, v72));
                  if (!v73)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
                v74 = *(_QWORD *)(a1 + 2128);
                *(_DWORD *)object = 134218240;
                *(_QWORD *)&object[4] = v258;
                *(_WORD *)&object[12] = 2048;
                *(_QWORD *)&object[14] = v74;
                v75 = (void *)_os_log_send_and_compose_impl();
                if (v75)
                  free(v75);
              }
              if (v256)
              {
                sub_20E8C003C((uint64_t)&v262, "[MLPosePredictor] PosePredictor's timestamp (%.8f) does not match filter (%.8f)", *(double *)(**(_QWORD **)(a1 + 2104) + 2336), *(double *)(a1 + 2128));
                sub_20E863570((uint64_t)&v262);
              }
              sub_20E863570((uint64_t)&v262);
              v76 = v270;
              if (v270)
              {
                v77 = (unint64_t *)&v270->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
              v9 = v272;
              goto LABEL_3;
            }
          }
          memmove(v34, v32, v33);
          goto LABEL_45;
        }
      }
    }
  }
LABEL_3:
  if (!*(_QWORD *)(a1 + 2016) || *(double *)(*(_QWORD *)(a1 + 1976) + 176 * *(_QWORD *)(a1 + 2000) + 168) > v9)
    goto LABEL_121;
  v13 = *(_QWORD *)(a1 + 1936);
  if (!v13)
  {
    v14 = (double *)(*(_QWORD *)(a1 + 1904) + 32 * ((uint64_t)(*(_QWORD *)(a1 + 1912) - *(_QWORD *)(a1 + 1904)) >> 5) - 32);
    v15 = *(_QWORD *)(a1 + 1888);
    if (v15)
      goto LABEL_7;
LABEL_16:
    v16 = *(_QWORD *)(a1 + 1856);
    v15 = (*(_QWORD *)(a1 + 1864) - v16) >> 5;
    goto LABEL_17;
  }
  v14 = (double *)(*(_QWORD *)(a1 + 1904) + 32 * v13 - 32);
  v15 = *(_QWORD *)(a1 + 1888);
  if (!v15)
    goto LABEL_16;
LABEL_7:
  v16 = *(_QWORD *)(a1 + 1856);
LABEL_17:
  v23 = *(double *)(v16 + 32 * v15 - 32);
  if (v23 >= *v14)
    v23 = *v14;
  if (v23 >= v9)
  {
    if (*(_BYTE *)(a1 + 1688))
    {
      sub_20F1A6D2C(&v271);
      if (**(int **)(v271 + 56) <= 5)
      {
        v24 = *(unsigned __int8 *)(v271 + 72);
        v25 = sub_20E8C31DC(v271, "OSLogSurrogateAppender", 1, 0);
        v26 = v25 ? v25 + 16 : 0;
        if (v24 || v25)
        {
          v262 = &v271;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v264 = std::chrono::system_clock::now().__d_.__rep_;
          v265 = 5;
          v266 = "unknown file";
          v267 = 379;
          v269 = 0;
          v270 = 0;
          v268 = "unknown function";
          v27 = *v262;
          v28 = (uint64_t *)(*v262 + 16);
          if (*(char *)(*v262 + 39) < 0)
          {
            v30 = *(char **)(v27 + 16);
            v29 = *(char **)(v27 + 24);
          }
          else
          {
            v29 = (char *)*(unsigned __int8 *)(*v262 + 39);
            v30 = (char *)(*v262 + 16);
          }
          v79 = *(_QWORD *)(a1 + 2000);
          v80 = *(_QWORD *)(a1 + 1976);
          category[0] = v30;
          category[1] = v29;
          v81 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
            if (object[24] && (object[23] & 0x80000000) != 0)
              operator delete(*(void **)object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v82 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v83 = byte_254A4A4F8;
          }
          else
          {
            v82 = *(_QWORD *)&byte_254A4A4F8[8];
            v83 = *(const char **)byte_254A4A4F8;
          }
          v274[0] = v83;
          v274[1] = v82;
          *(_QWORD *)object = os_log_create(v83, category[0]);
          sub_20E86E5A8(&object[8], (uint64_t)v274);
          sub_20E86E5A8(&object[40], (uint64_t)category);
          v84 = (uint64_t *)(v80 + 176 * v79 + 168);
          v85 = *(NSObject **)object;
          sub_20E86E44C((uint64_t)object);
          sub_20F1AC4F0(v26, v28, v85, OS_LOG_TYPE_ERROR, v84, (uint64_t *)&v272);
          v9 = v272;
          if (v24)
          {
            sub_20E8C003C((uint64_t)&v262, "[MLPosePredictor] We have a queued pose at %.8f but the query time is %.8f", *(double *)(*(_QWORD *)(a1 + 1976) + 176 * *(_QWORD *)(a1 + 2000) + 168), v272);
            sub_20E863570((uint64_t)&v262);
          }
          sub_20E863714((uint64_t)&v262);
        }
      }
    }
  }
LABEL_121:
  v86 = *(_QWORD *)(a1 + 2048);
  v87 = *(_QWORD *)(a1 + 2024);
  v88 = *(double *)(v87 + 144 * v86 + 128);
  v89 = *(_QWORD *)(a1 + 2056);
  if (v9 < v88 + -0.0001)
  {
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 1688))
      return 1;
    sub_20F1A6D2C(&v271);
    if (**(int **)(v271 + 56) > 3)
      return 1;
    v90 = *(unsigned __int8 *)(v271 + 72);
    v91 = sub_20E8C31DC(v271, "OSLogSurrogateAppender", 1, 0);
    v92 = v91;
    if (!v90 && !v91)
      return 1;
    v262 = &v271;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v264 = std::chrono::system_clock::now().__d_.__rep_;
    v265 = 3;
    v266 = "unknown file";
    v267 = 388;
    v269 = 0;
    v270 = 0;
    v268 = "unknown function";
    v93 = *v262;
    if (*(char *)(*v262 + 39) < 0)
    {
      v95 = *(const char **)(v93 + 16);
      v94 = *(_QWORD *)(v93 + 24);
    }
    else
    {
      v94 = *(unsigned __int8 *)(*v262 + 39);
      v95 = (const char *)(*v262 + 16);
    }
    v259 = *v262 + 16;
    v128 = *(_QWORD *)(a1 + 2048);
    v129 = *(_QWORD *)(a1 + 2024);
    v130 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v130 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v131 = byte_254A4A4F8;
    else
      v131 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v132 = byte_254A4A4F8[23];
    else
      v132 = *(_QWORD *)&byte_254A4A4F8[8];
    v261 = v95;
    *(_QWORD *)object = os_log_create(v131, v95);
    v133 = &object[8];
    if (v132 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v132 >= 0x17)
    {
      v257 = v129;
      v134 = v93;
      v135 = v90;
      v136 = (v132 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v132 | 7) != 0x17)
        v136 = v132 | 7;
      v137 = v136 + 1;
      v133 = operator new(v136 + 1);
      *(_QWORD *)&object[16] = v132;
      *(_QWORD *)&object[24] = v137 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v133;
      v90 = v135;
      v93 = v134;
      v129 = v257;
    }
    else
    {
      object[31] = v132;
      if (!v132)
      {
LABEL_170:
        v133[v132] = 0;
        object[32] = 1;
        v138 = &object[40];
        if (v94 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v94 >= 0x17)
        {
          v139 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v94 | 7) != 0x17)
            v139 = v94 | 7;
          v140 = v139 + 1;
          v138 = operator new(v139 + 1);
          *(_QWORD *)&v276 = v94;
          *((_QWORD *)&v276 + 1) = v140 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v138;
        }
        else
        {
          HIBYTE(v276) = v94;
          if (!v94)
            goto LABEL_178;
        }
        memmove(v138, v261, v94);
LABEL_178:
        v138[v94] = 0;
        LOBYTE(v277) = 1;
        v141 = *(NSObject **)object;
        if (SHIBYTE(v276) < 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        v142 = (uint64_t *)(v129 + 144 * v128 + 128);
        if (v92 && *(_QWORD *)(v92 + 24))
        {
          v143 = _os_log_pack_size();
          v144 = (std::__shared_weak_count_vtbl *)operator new(v143, (std::align_val_t)8uLL);
          v145 = (std::__shared_weak_count *)operator new();
          v146 = v145;
          v145->__shared_owners_ = 0;
          v147 = (unint64_t *)&v145->__shared_owners_;
          v145->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v145->__shared_weak_owners_ = 0;
          v145[1].__vftable = v144;
          *(_QWORD *)object = v144;
          *(_QWORD *)&object[8] = v144;
          *(_QWORD *)&object[16] = v145;
          do
            v148 = __ldxr(v147);
          while (__stxr(v148 + 1, v147));
          memset(&object[24], 0, 24);
          do
            v149 = __ldaxr(v147);
          while (__stlxr(v149 - 1, v147));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
            std::__shared_weak_count::__release_weak(v146);
          }
          v150 = *(_QWORD *)object;
          v151 = _os_log_pack_fill();
          v152 = v272;
          v153 = *v142;
          *(_DWORD *)v151 = 134218240;
          *(double *)(v151 + 4) = v152;
          *(_WORD *)(v151 + 12) = 2048;
          *(_QWORD *)(v151 + 14) = v153;
          v154 = operator new();
          v155 = *(unsigned __int8 *)(v93 + 39);
          v156 = v259;
          if ((v155 & 0x80u) != 0)
          {
            v156 = *(_QWORD *)(v93 + 16);
            v155 = *(_QWORD *)(v93 + 24);
          }
          *(_QWORD *)v154 = v150;
          *(_OWORD *)(v154 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v154 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v154 + 40) = v156;
          *(_QWORD *)(v154 + 48) = v155;
          *(_BYTE *)(v154 + 56) = 1;
          category[0] = 0;
          v274[0] = v154;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v92 + 24) + 40))(*(_QWORD *)(v92 + 24), v274);
          v157 = v274[0];
          v274[0] = 0;
          if (v157)
          {
            v158 = *(std::__shared_weak_count **)(v157 + 32);
            if (v158)
            {
              v159 = (unint64_t *)&v158->__shared_owners_;
              do
                v160 = __ldaxr(v159);
              while (__stlxr(v160 - 1, v159));
              if (!v160)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v158);
              }
            }
            v161 = *(std::__shared_weak_count **)(v157 + 16);
            if (v161)
            {
              v162 = (unint64_t *)&v161->__shared_owners_;
              do
                v163 = __ldaxr(v162);
              while (__stlxr(v163 - 1, v162));
              if (!v163)
              {
                ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                std::__shared_weak_count::__release_weak(v161);
              }
            }
            MEMORY[0x212BC6398](v157, 0x10F0C40B62ED6C6);
            v164 = category[0];
            category[0] = 0;
            if (v164)
            {
              v165 = (std::__shared_weak_count *)*((_QWORD *)v164 + 4);
              if (v165)
              {
                v166 = (unint64_t *)&v165->__shared_owners_;
                do
                  v167 = __ldaxr(v166);
                while (__stlxr(v167 - 1, v166));
                if (!v167)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                }
              }
              v168 = (std::__shared_weak_count *)*((_QWORD *)v164 + 2);
              if (v168)
              {
                v169 = (unint64_t *)&v168->__shared_owners_;
                do
                  v170 = __ldaxr(v169);
                while (__stlxr(v170 - 1, v169));
                if (!v170)
                {
                  ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                  std::__shared_weak_count::__release_weak(v168);
                }
              }
              MEMORY[0x212BC6398](v164, 0x10F0C40B62ED6C6);
            }
          }
          v171 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v172 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v173 = __ldaxr(v172);
            while (__stlxr(v173 - 1, v172));
            if (!v173)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
          v174 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v175 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v176 = __ldaxr(v175);
            while (__stlxr(v176 - 1, v175));
            if (!v176)
            {
              ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
              std::__shared_weak_count::__release_weak(v174);
            }
          }
        }
        else
        {
          os_log_type_enabled(v141, OS_LOG_TYPE_INFO);
          v177 = *v142;
          *(_DWORD *)object = 134218240;
          *(double *)&object[4] = v272;
          *(_WORD *)&object[12] = 2048;
          *(_QWORD *)&object[14] = v177;
          v178 = (void *)_os_log_send_and_compose_impl();
          if (v178)
            free(v178);
        }
        if (v90)
        {
          sub_20E8C003C((uint64_t)&v262, "[MLPosePredictor] Unable to predict for %.8f: timestamp too early (%.3f)", v272, *(double *)(*(_QWORD *)(a1 + 2024) + 144 * *(_QWORD *)(a1 + 2048) + 128));
          sub_20E863570((uint64_t)&v262);
        }
        sub_20E863570((uint64_t)&v262);
        v179 = v270;
        if (v270)
        {
          v180 = (unint64_t *)&v270->__shared_owners_;
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
        return 1;
      }
    }
    memmove(v133, v131, v132);
    goto LABEL_170;
  }
  if (v89)
  {
    v96 = *(double *)(v87 + 144 * v89 - 16);
    if (v9 > v96 + 0.01)
    {
LABEL_130:
      kdebug_trace();
      if (!*(_BYTE *)(a1 + 1688))
        return 2;
      sub_20F1A6D2C(&v271);
      if (**(int **)(v271 + 56) > 3)
        return 2;
      v97 = *(unsigned __int8 *)(v271 + 72);
      v98 = sub_20E8C31DC(v271, "OSLogSurrogateAppender", 1, 0);
      v99 = v98;
      if (!v97 && !v98)
        return 2;
      v262 = &v271;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v264 = std::chrono::system_clock::now().__d_.__rep_;
      v265 = 3;
      v266 = "unknown file";
      v267 = 396;
      v269 = 0;
      v270 = 0;
      v268 = "unknown function";
      v100 = v271;
      v101 = v271 + 16;
      if (*(char *)(v271 + 39) < 0)
      {
        v103 = *(const char **)(v271 + 16);
        v102 = *(_QWORD *)(v271 + 24);
      }
      else
      {
        v102 = *(unsigned __int8 *)(v271 + 39);
        v103 = (const char *)(v271 + 16);
      }
      v201 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v201 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v202 = byte_254A4A4F8[23];
      else
        v202 = *(_QWORD *)&byte_254A4A4F8[8];
      if (byte_254A4A4F8[23] >= 0)
        v203 = byte_254A4A4F8;
      else
        v203 = *(const char **)byte_254A4A4F8;
      *(_QWORD *)object = os_log_create(v203, v103);
      v204 = &object[8];
      if (v202 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v202 >= 0x17)
      {
        v205 = v99;
        v206 = v103;
        v207 = v100;
        v208 = v97;
        v209 = v101;
        v210 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v202 | 7) != 0x17)
          v210 = v202 | 7;
        v211 = v210 + 1;
        v204 = operator new(v210 + 1);
        *(_QWORD *)&object[16] = v202;
        *(_QWORD *)&object[24] = v211 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v204;
        v101 = v209;
        v97 = v208;
        v100 = v207;
        v103 = v206;
        v99 = v205;
      }
      else
      {
        object[31] = v202;
        if (!v202)
        {
LABEL_269:
          v204[v202] = 0;
          object[32] = 1;
          v212 = &object[40];
          if (v102 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v102 >= 0x17)
          {
            v213 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v102 | 7) != 0x17)
              v213 = v102 | 7;
            v214 = v213 + 1;
            v212 = operator new(v213 + 1);
            *(_QWORD *)&v276 = v102;
            *((_QWORD *)&v276 + 1) = v214 | 0x8000000000000000;
            *(_QWORD *)&object[40] = v212;
          }
          else
          {
            HIBYTE(v276) = v102;
            if (!v102)
              goto LABEL_277;
          }
          memmove(v212, v103, v102);
LABEL_277:
          v212[v102] = 0;
          LOBYTE(v277) = 1;
          v215 = *(NSObject **)object;
          if (SHIBYTE(v276) < 0)
            operator delete(*(void **)&object[40]);
          if (object[32] && (object[31] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v99 && *(_QWORD *)(v99 + 24))
          {
            v216 = _os_log_pack_size();
            v217 = (std::__shared_weak_count_vtbl *)operator new(v216, (std::align_val_t)8uLL);
            v218 = (std::__shared_weak_count *)operator new();
            v219 = v218;
            v218->__shared_owners_ = 0;
            v220 = (unint64_t *)&v218->__shared_owners_;
            v218->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v218->__shared_weak_owners_ = 0;
            v218[1].__vftable = v217;
            *(_QWORD *)object = v217;
            *(_QWORD *)&object[8] = v217;
            *(_QWORD *)&object[16] = v218;
            do
              v221 = __ldxr(v220);
            while (__stxr(v221 + 1, v220));
            memset(&object[24], 0, 24);
            do
              v222 = __ldaxr(v220);
            while (__stlxr(v222 - 1, v220));
            if (!v222)
            {
              ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
              std::__shared_weak_count::__release_weak(v219);
            }
            v223 = *(_QWORD *)object;
            v224 = _os_log_pack_fill();
            v225 = v272;
            *(_DWORD *)v224 = 134217984;
            *(double *)(v224 + 4) = v225;
            v226 = operator new();
            v227 = *(unsigned __int8 *)(v100 + 39);
            if ((v227 & 0x80u) == 0)
              v228 = v101;
            else
              v228 = *(_QWORD *)(v100 + 16);
            if ((v227 & 0x80u) != 0)
              v227 = *(_QWORD *)(v100 + 24);
            *(_QWORD *)v226 = v223;
            *(_OWORD *)(v226 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v226 + 24) = *(_OWORD *)&object[24];
            *(_QWORD *)&object[24] = 0;
            *(_QWORD *)&object[32] = 0;
            *(_QWORD *)(v226 + 40) = v228;
            *(_QWORD *)(v226 + 48) = v227;
            *(_BYTE *)(v226 + 56) = 1;
            category[0] = 0;
            v274[0] = v226;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v99 + 24) + 40))(*(_QWORD *)(v99 + 24), v274);
            v229 = v274[0];
            v274[0] = 0;
            if (v229)
            {
              v230 = *(std::__shared_weak_count **)(v229 + 32);
              if (v230)
              {
                v231 = (unint64_t *)&v230->__shared_owners_;
                do
                  v232 = __ldaxr(v231);
                while (__stlxr(v232 - 1, v231));
                if (!v232)
                {
                  ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                  std::__shared_weak_count::__release_weak(v230);
                }
              }
              v233 = *(std::__shared_weak_count **)(v229 + 16);
              if (v233)
              {
                v234 = (unint64_t *)&v233->__shared_owners_;
                do
                  v235 = __ldaxr(v234);
                while (__stlxr(v235 - 1, v234));
                if (!v235)
                {
                  ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                  std::__shared_weak_count::__release_weak(v233);
                }
              }
              MEMORY[0x212BC6398](v229, 0x10F0C40B62ED6C6);
              v236 = category[0];
              category[0] = 0;
              if (v236)
              {
                v237 = (std::__shared_weak_count *)*((_QWORD *)v236 + 4);
                if (v237)
                {
                  v238 = (unint64_t *)&v237->__shared_owners_;
                  do
                    v239 = __ldaxr(v238);
                  while (__stlxr(v239 - 1, v238));
                  if (!v239)
                  {
                    ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                    std::__shared_weak_count::__release_weak(v237);
                  }
                }
                v240 = (std::__shared_weak_count *)*((_QWORD *)v236 + 2);
                if (v240)
                {
                  v241 = (unint64_t *)&v240->__shared_owners_;
                  do
                    v242 = __ldaxr(v241);
                  while (__stlxr(v242 - 1, v241));
                  if (!v242)
                  {
                    ((void (*)(std::__shared_weak_count *))v240->__on_zero_shared)(v240);
                    std::__shared_weak_count::__release_weak(v240);
                  }
                }
                MEMORY[0x212BC6398](v236, 0x10F0C40B62ED6C6);
              }
            }
            v243 = *(std::__shared_weak_count **)&object[32];
            if (*(_QWORD *)&object[32])
            {
              v244 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
              do
                v245 = __ldaxr(v244);
              while (__stlxr(v245 - 1, v244));
              if (!v245)
              {
                ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                std::__shared_weak_count::__release_weak(v243);
              }
            }
            v246 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v247 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v248 = __ldaxr(v247);
              while (__stlxr(v248 - 1, v247));
              if (!v248)
              {
                ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
                std::__shared_weak_count::__release_weak(v246);
              }
            }
          }
          else
          {
            os_log_type_enabled(v215, OS_LOG_TYPE_INFO);
            *(_DWORD *)object = 134217984;
            *(double *)&object[4] = v272;
            v249 = (void *)_os_log_send_and_compose_impl();
            if (v249)
              free(v249);
          }
          if (v97)
          {
            sub_20E8C003C((uint64_t)&v262, "[MLPosePredictor] Unable to predict for %.8f: timestamp too late", v272);
            sub_20E863570((uint64_t)&v262);
          }
          sub_20E863570((uint64_t)&v262);
          v250 = v270;
          if (v270)
          {
            v251 = (unint64_t *)&v270->__shared_owners_;
            do
              v252 = __ldaxr(v251);
            while (__stlxr(v252 - 1, v251));
            if (!v252)
            {
              ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
              std::__shared_weak_count::__release_weak(v250);
            }
          }
          return 2;
        }
      }
      memmove(v204, v203, v202);
      goto LABEL_269;
    }
  }
  else
  {
    v96 = *(double *)(*(_QWORD *)(a1 + 2032) - 16);
    if (v9 > v96 + 0.01)
      goto LABEL_130;
  }
  v278 = unk_2103A4D28;
  v279 = (float64x2_t)xmmword_2103A4D38;
  v280 = (float64x2_t)unk_2103A4D48;
  *(_OWORD *)object = xmmword_2103A4CD8;
  *(_OWORD *)&object[16] = unk_2103A4CE8;
  *(_OWORD *)&object[32] = xmmword_2103A4CF8;
  v276 = unk_2103A4D08;
  v277 = xmmword_2103A4D18;
  if (v9 < v96)
  {
    if (v9 <= v88)
    {
      kdebug_trace();
      v113 = *(_QWORD *)(a1 + 2024) + 144 * *(_QWORD *)(a1 + 2048);
      v114 = *(_OWORD *)(v113 + 32);
      v115 = *(_OWORD *)(v113 + 48);
      v116 = *(_OWORD *)(v113 + 16);
      *(_OWORD *)object = *(_OWORD *)v113;
      *(_OWORD *)&object[32] = v114;
      v276 = v115;
      *(_OWORD *)&object[16] = v116;
      v117 = *(float64x2_t *)(v113 + 112);
      v119 = *(float64x2_t *)(v113 + 64);
      v118 = *(_OWORD *)(v113 + 80);
      v279 = *(float64x2_t *)(v113 + 96);
      v280 = v117;
      v277 = (__int128)v119;
      v278 = v118;
      goto LABEL_242;
    }
    v104 = *(_QWORD *)(a1 + 2064);
    if (v104)
    {
      v105 = 0;
      v106 = 0;
      v107 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 2032) - v87) >> 4);
      v108 = *(_QWORD *)(a1 + 2064);
      do
      {
        v109 = v108 >> 1;
        v110 = (v108 >> 1) + v106;
        if (v9 >= *(double *)(v87 + 144 * ((v110 + v86) % v107) + 128))
        {
          v106 = v110 + 1;
          v105 = v110 + 1 == v104;
          v109 = v108 + ~v109;
        }
        v108 = v109;
      }
      while (v109);
      if ((v105 || v106) && *(double *)(v87 + 144 * ((v86 + v106 - 1) % v107) + 128) <= v9)
      {
        v126 = v106 + v86;
        v127 = v126 % v107;
        if (v9 <= *(double *)(v87 + 144 * (v126 % v107) + 128))
          goto LABEL_241;
      }
    }
    else
    {
      v106 = 0;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 420, (uint64_t)"iter != prediction_history_.begin() && (iter - 1)->timestamp <= timestamp && timestamp <= iter->timestamp", 105, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v87 = *(_QWORD *)(a1 + 2024);
    v126 = *(_QWORD *)(a1 + 2048) + v106;
    v107 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 2032) - v87) >> 4);
    v127 = v126 % v107;
LABEL_241:
    sub_20FC8CB5C((float64x2_t *)(v87 + 144 * ((v126 - 1) % v107)), (float64x2_t *)(v87 + 144 * v127), (float64x2_t *)object, v9, v11);
    goto LABEL_242;
  }
  kdebug_trace();
  v111 = *(_QWORD *)(a1 + 2056);
  v112 = *(_QWORD *)(a1 + 2024);
  if (!v111)
    v111 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 2032) - v112) >> 4);
  v120 = v112 + 144 * v111;
  v121 = *(_OWORD *)(v120 - 144);
  v122 = *(_OWORD *)(v120 - 128);
  v123 = *(_OWORD *)(v120 - 96);
  *(_OWORD *)&object[32] = *(_OWORD *)(v120 - 112);
  v276 = v123;
  *(_OWORD *)&object[16] = v122;
  *(_OWORD *)object = v121;
  v124 = *(_OWORD *)(v120 - 80);
  v125 = *(_OWORD *)(v120 - 64);
  v119 = *(float64x2_t *)(v120 - 32);
  v279 = *(float64x2_t *)(v120 - 48);
  v280 = v119;
  v277 = v124;
  v278 = v125;
LABEL_242:
  *(_QWORD *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  v182.f64[1] = *(float64_t *)&object[40];
  v183.f64[0] = *(float64_t *)&object[16];
  v184 = v278;
  _Q4.f64[1] = *((float64_t *)&v277 + 1);
  v186 = (float64x2_t)vzip1q_s64(*(int64x2_t *)object, *(int64x2_t *)&object[32]);
  v187 = (float64x2_t)vzip2q_s64(*(int64x2_t *)object, *(int64x2_t *)&object[32]);
  *(_QWORD *)&v183.f64[1] = v276;
  _D6 = v279.f64[1];
  __asm { FMLA            D16, D6, V4.D[1] }
  v182.f64[0] = _D16 + *(double *)&v278 * v280.f64[0];
  v194 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v186, v279.f64[0]), v187, v279, 1), v183, v280.f64[0]));
  v195 = vnegq_f64(v182);
  *(_QWORD *)(a2 + 16) = v277;
  *(float64x2_t *)a2 = v186;
  *(float64_t *)(a2 + 40) = _Q4.f64[1];
  *(float64x2_t *)(a2 + 24) = v187;
  *(_QWORD *)(a2 + 64) = v184;
  *(float64x2_t *)(a2 + 48) = v183;
  *(float64x2_t *)(a2 + 144) = v194;
  *(float64_t *)(a2 + 160) = v195.f64[0];
  v196 = *(_QWORD *)(a1 + 1888);
  if (!v196)
  {
    v197 = (double *)(*(_QWORD *)(a1 + 1856)
                    + 32 * ((uint64_t)(*(_QWORD *)(a1 + 1864) - *(_QWORD *)(a1 + 1856)) >> 5)
                    - 32);
    v198 = *(_QWORD *)(a1 + 1936);
    if (v198)
      goto LABEL_244;
LABEL_246:
    v199 = *(_QWORD *)(a1 + 1904);
    v198 = (*(_QWORD *)(a1 + 1912) - v199) >> 5;
    goto LABEL_247;
  }
  v197 = (double *)(*(_QWORD *)(a1 + 1856) + 32 * v196 - 32);
  v198 = *(_QWORD *)(a1 + 1936);
  if (!v198)
    goto LABEL_246;
LABEL_244:
  v199 = *(_QWORD *)(a1 + 1904);
LABEL_247:
  v200 = *(double *)(v199 + 32 * v198 - 32);
  if (v200 >= *v197)
    v200 = *v197;
  *a3 = v200;
  v187.f64[0] = *(float64_t *)(**(_QWORD **)(a1 + 2104) + 2352);
  if (v187.f64[0] < 1.0 && *(_BYTE *)(a6 + 168))
  {
    v195.f64[0] = *(float64_t *)(a6 + 160);
    v119.f64[0] = 1.0 - v187.f64[0];
    _Q4.f64[0] = *(float64_t *)(a2 + 160);
    *(float64x2_t *)(a2 + 144) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a6 + 144), 1.0 - v187.f64[0]), vmulq_n_f64(*(float64x2_t *)(a2 + 144), v187.f64[0]));
    *(_QWORD *)(a2 + 160) = *(_OWORD *)&vaddq_f64(vmulq_f64(v119, v195), vmulq_f64(v187, _Q4));
  }
  return 0;
}

void sub_20F1A66C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F1A671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  sub_20E86E8C4(&a31);
  sub_20E86E8C4(&a29);
  sub_20E86E658((uint64_t)&object);
  sub_20E863714((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F1A6804()
{
  JUMPOUT(0x20F1A680CLL);
}

void sub_20F1A6830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1A6844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1A6858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1A686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1A6888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1A68A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a40 && a39 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F1A68EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a40 && a39 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F1A6924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1A6938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a40 && a39 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F1A6998(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

void sub_20F1A69B0(void **a1, unint64_t a2)
{
  _OWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  _OWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = a1[1];
  v5 = a1[2];
  if (0x8E38E38E38E38E39 * ((v5 - (_BYTE *)v4) >> 4) >= a2)
  {
    if (a2)
    {
      v11 = &v4[9 * a2];
      do
      {
        v4[4] = xmmword_2103A4D18;
        v4[5] = unk_2103A4D28;
        v4[6] = xmmword_2103A4D38;
        v4[7] = unk_2103A4D48;
        *v4 = xmmword_2103A4CD8;
        v4[1] = unk_2103A4CE8;
        v4[2] = xmmword_2103A4CF8;
        v4[3] = unk_2103A4D08;
        *((_QWORD *)v4 + 16) = 0;
        *((_QWORD *)v4 + 17) = 0;
        v4 += 9;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0x8E38E38E38E38E39 * (((char *)v4 - (_BYTE *)*a1) >> 4);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1C71C71C71C71C7)
      sub_20E867F44();
    v8 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xE38E38E38E38E3)
      v9 = 0x1C71C71C71C71C7;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0x1C71C71C71C71C7)
        sub_20E877A38();
      v10 = (char *)operator new(144 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[144 * v6];
    v13 = &v12[144 * a2];
    v14 = v12;
    do
    {
      *((_OWORD *)v14 + 4) = xmmword_2103A4D18;
      *((_OWORD *)v14 + 5) = unk_2103A4D28;
      *((_OWORD *)v14 + 6) = xmmword_2103A4D38;
      *((_OWORD *)v14 + 7) = unk_2103A4D48;
      *(_OWORD *)v14 = xmmword_2103A4CD8;
      *((_OWORD *)v14 + 1) = unk_2103A4CE8;
      *((_OWORD *)v14 + 2) = xmmword_2103A4CF8;
      *((_OWORD *)v14 + 3) = unk_2103A4D08;
      *((_QWORD *)v14 + 16) = 0;
      *((_QWORD *)v14 + 17) = 0;
      v14 += 144;
    }
    while (v14 != v13);
    v15 = &v10[144 * v9];
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 9);
        v19 = *((_OWORD *)v16 - 8);
        v20 = *((_OWORD *)v16 - 6);
        *((_OWORD *)v12 - 7) = *((_OWORD *)v16 - 7);
        *((_OWORD *)v12 - 6) = v20;
        *((_OWORD *)v12 - 9) = v18;
        *((_OWORD *)v12 - 8) = v19;
        v21 = *((_OWORD *)v16 - 5);
        v22 = *((_OWORD *)v16 - 4);
        v23 = *((_OWORD *)v16 - 2);
        *((_OWORD *)v12 - 3) = *((_OWORD *)v16 - 3);
        *((_OWORD *)v12 - 2) = v23;
        *((_OWORD *)v12 - 5) = v21;
        *((_OWORD *)v12 - 4) = v22;
        *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
        v12 -= 144;
        v16 -= 144;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_20F1A6B94(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v2 = *(void **)(a1 + 2448);
  if (v2)
  {
    *(_QWORD *)(a1 + 2456) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 2424);
  if (v3)
  {
    *(_QWORD *)(a1 + 2432) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 2400);
  if (v4)
  {
    *(_QWORD *)(a1 + 2408) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 2376);
  if (v5)
  {
    *(_QWORD *)(a1 + 2384) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 2352);
  if (v6)
  {
    *(_QWORD *)(a1 + 2360) = v6;
    operator delete(v6);
  }
  v7 = *(uint64_t **)(a1 + 2104);
  *(_QWORD *)(a1 + 2104) = 0;
  if (v7)
  {
    v8 = *v7;
    *v7 = 0;
    if (v8)
    {
      v9 = sub_20F1E6284(v8);
      MEMORY[0x212BC6398](v9, 0x10B2C403BF5BE5ELL);
    }
    MEMORY[0x212BC6398](v7, 0x20C4093837F09);
  }
  v10 = *(void **)(a1 + 2024);
  if (v10)
  {
    *(_QWORD *)(a1 + 2032) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 1976);
  if (v11)
  {
    *(_QWORD *)(a1 + 1984) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 1952);
  if (v12)
  {
    *(_QWORD *)(a1 + 1960) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 1904);
  if (v13)
  {
    *(_QWORD *)(a1 + 1912) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 1856);
  if (v14)
  {
    *(_QWORD *)(a1 + 1864) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(a1 + 1824);
  if (v15)
  {
    *(_QWORD *)(a1 + 1832) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 1800);
  if (v16)
  {
    *(_QWORD *)(a1 + 1808) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 1776);
  if (v17)
  {
    *(_QWORD *)(a1 + 1784) = v17;
    operator delete(v17);
  }
  if (!*(_BYTE *)(a1 + 1680) || (*(char *)(a1 + 1679) & 0x80000000) == 0)
  {
    v18 = *(void **)(a1 + 1504);
    if (!v18)
      goto LABEL_35;
    goto LABEL_34;
  }
  operator delete(*(void **)(a1 + 1656));
  v18 = *(void **)(a1 + 1504);
  if (v18)
  {
LABEL_34:
    *(_QWORD *)(a1 + 1512) = v18;
    operator delete(v18);
  }
LABEL_35:
  if (*(char *)(a1 + 1479) < 0)
  {
    operator delete(*(void **)(a1 + 1456));
    v19 = *(void **)(a1 + 1424);
    if (!v19)
      return a1;
    goto LABEL_37;
  }
  v19 = *(void **)(a1 + 1424);
  if (v19)
  {
LABEL_37:
    *(_QWORD *)(a1 + 1432) = v19;
    operator delete(v19);
  }
  return a1;
}

void sub_20F1A6D2C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68128);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68128))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68120);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68128);
  }
  *a1 = qword_254A68120;
}

void sub_20F1A6DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68128);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68128);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F1A6E20(_QWORD *result, double a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (result[237] >= 3uLL)
  {
    v2 = result[235];
    v3 = result[233];
    v4 = result[232];
    do
    {
      if (*(double *)(v4 + 32 * (v2 % ((v3 - v4) >> 5))) >= a2)
        break;
      v5 = (_QWORD *)(v4 + 32 * v2);
      *v5 = 0xBFF0000000000000;
      v5[1] = 0;
      v5[2] = 0;
      v5[3] = 0;
      v3 = result[233];
      v4 = result[232];
      v6 = (v3 - v4) >> 5;
      v7 = result[235] + 1;
      if (v7 < v6)
        v6 = 0;
      v2 = v7 - v6;
      result[235] = v2;
      v8 = result[237] - 1;
      result[237] = v8;
    }
    while (v8 > 2);
  }
  if (result[243] >= 3uLL)
  {
    v9 = result[241];
    v10 = result[239];
    v11 = result[238];
    do
    {
      if (*(double *)(v11 + 32 * (v9 % ((v10 - v11) >> 5))) >= a2)
        break;
      v12 = (_QWORD *)(v11 + 32 * v9);
      *v12 = 0xBFF0000000000000;
      v12[1] = 0;
      v12[2] = 0;
      v12[3] = 0;
      v10 = result[239];
      v11 = result[238];
      v13 = (v10 - v11) >> 5;
      v14 = result[241] + 1;
      if (v14 < v13)
        v13 = 0;
      v9 = v14 - v13;
      result[241] = v9;
      v15 = result[243] - 1;
      result[243] = v15;
    }
    while (v15 > 2);
  }
  return result;
}

void sub_20F1A6F2C(uint64_t a1, double a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  _OWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  unint64_t v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  double v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  const char *v57;
  size_t v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  const char *v61;
  size_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  std::__shared_weak_count_vtbl *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  __int128 v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  unint64_t v110;
  unint64_t v111;
  double v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  double v116;
  uint64_t v117;
  const char *v118;
  size_t v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  const char *v122;
  size_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  size_t v132;
  std::__shared_weak_count_vtbl *v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  unint64_t *p_shared_owners;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  __int128 v147;
  void *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  double v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  char *v175;
  int v176;
  double v177;
  double v178;
  unint64_t v179;
  double *v180;
  double v181;
  double v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  double v187;
  double *v188;
  unint64_t v189;
  double *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _BYTE *v196;
  double *v197;
  int64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  double *v202;
  _OWORD *v203;
  double *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  size_t v214;
  const char *v215;
  unsigned __int8 v216;
  unsigned __int8 v217;
  const char *v218;
  size_t v219;
  _BYTE *v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  size_t v224;
  uint64_t v225;
  uint64_t v226;
  _BYTE *v227;
  uint64_t v228;
  size_t v229;
  uint64_t v230;
  NSObject *v231;
  size_t v232;
  std::__shared_weak_count_vtbl *v233;
  std::__shared_weak_count *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  double v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  __int128 v248;
  void *v249;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  void *v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  double v276;
  double *v277;
  uint64_t v278;
  double *v279;
  uint64_t v280;
  double v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  unint64_t v286;
  unint64_t v287;
  size_t v288;
  void *v289;
  unint64_t v290;
  double *v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unint64_t v296;
  _BYTE *v297;
  double *v298;
  int64_t v299;
  unint64_t v300;
  double *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _OWORD *v306;
  double *v307;
  uint64_t v308;
  __int128 v309;
  int v310;
  int v311;
  unint64_t v312;
  unint64_t v313;
  size_t v314;
  void *v315;
  double v316;
  double v317;
  const void **v318;
  const void *v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  uint64_t v323;
  size_t v324;
  const char *v325;
  unsigned __int8 v326;
  const char *v327;
  size_t v328;
  _BYTE *v329;
  uint64_t v330;
  unint64_t v331;
  const char *v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  NSObject *v339;
  size_t v340;
  std::__shared_weak_count_vtbl *v341;
  std::__shared_weak_count *v342;
  size_t v343;
  size_t v344;
  uint64_t *v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char v350;
  _QWORD *v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  char *v356;
  unint64_t *v357;
  unint64_t v358;
  std::__shared_weak_count *v359;
  unint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  double v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  size_t v368;
  size_t v369;
  float64x2_t v370;
  double v371;
  double v372;
  float64x2_t v373;
  double v374;
  float64x2_t v375;
  uint64_t v376;
  float64x2_t v377;
  uint64_t v378;
  double v379;
  uint64_t v380;
  double v381;
  uint64_t *v382;
  float64x2_t v383;
  double v384;
  float64x2_t v385;
  double v386;
  double v387;
  float64x2_t v388;
  double v389;
  float64x2_t v390;
  float64x2_t v391;
  uint64_t v392;
  unint64_t v393;
  double *v394;
  double *v395;
  unint64_t v396;
  double v397;
  const void **v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  uint64_t v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  const char *v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  void *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  double *v439;
  uint64_t v440;
  __int128 v441;
  uint64_t v442;
  uint64_t v443;
  __int128 v444;
  double *v445;
  uint64_t v446;
  double v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  double v452;
  int v453;
  int v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  double v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  double v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  uint64_t v477;
  _OWORD *v478;
  unint64_t v479;
  unint64_t v480;
  float64x2_t v481;
  int64x2_t v482;
  float64x2_t v484;
  double v486;
  float64x2_t v487;
  float64x2_t v489;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v503;
  __int128 v504;
  uint64_t v505;
  __int128 v506;
  uint64_t *v507;
  double v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  _OWORD *v516;
  _OWORD *v517;
  unint64_t v518;
  uint64_t v519;
  _OWORD *v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  const void *v526;
  uint64_t v527;
  uint64_t v528;
  const char *v529;
  uint64_t v530;
  size_t v531;
  const char *v532;
  unsigned __int8 v533;
  const char *v534;
  size_t v535;
  _BYTE *v536;
  uint64_t v537;
  unint64_t v538;
  const char *v539;
  int v540;
  uint64_t v541;
  uint64_t v542;
  char *v543;
  uint64_t v544;
  uint64_t v545;
  NSObject *v546;
  size_t v547;
  std::__shared_weak_count_vtbl *v548;
  std::__shared_weak_count *v549;
  size_t v550;
  size_t v551;
  uint64_t *v552;
  void *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  char v557;
  _QWORD *v558;
  uint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  char *v563;
  unint64_t *v564;
  unint64_t v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  uint64_t v573;
  char *v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  uint64_t v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  std::__shared_weak_count *v590;
  unint64_t *v591;
  unint64_t v592;
  std::__shared_weak_count *v593;
  unint64_t *v594;
  unint64_t v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  const char *v599;
  std::__shared_weak_count *v600;
  unint64_t *v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t v604;
  void *v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  const char *v609;
  const char *v610;
  _BYTE *v611;
  _BYTE *__src;
  const char *__srca;
  _BYTE *__dst;
  char *__dsta;
  const char *__dstb;
  const char *__dstc;
  unint64_t v618;
  double **v619;
  uint64_t v620;
  _OWORD *v621;
  uint64_t v622;
  void *v623;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v625;
  int v626;
  const char *v627;
  int v628;
  const char *v629;
  uint64_t v630;
  std::__shared_weak_count *v631;
  void *v632;
  size_t v633;
  int64_t v634;
  uint64_t v635;
  __int128 v636;
  std::__shared_weak_count *v637;
  char *v638;
  std::__shared_weak_count *v639;
  uint64_t *v640;
  __int128 v641;
  _BYTE object[24];
  _BYTE v643[24];
  float64x2_t v644;
  uint64_t v645;
  __int128 v646;
  void *v647;
  float64x2_t v648;
  double v649;
  _BYTE v650[24];
  float64x2_t v651;
  uint64_t v652;
  double v653;
  _BYTE v654[24];
  __int128 v655;
  char *v656;
  const char *v657;
  unint64_t v658;
  std::__shared_weak_count *v659;
  _QWORD v660[5];

  v660[2] = *MEMORY[0x24BDAC8D0];
  if (a2 < 0.0)
    return;
  *(_QWORD *)(a1 + 2360) = *(_QWORD *)(a1 + 2352);
  if (*(double *)(a1 + 2128) >= 0.0)
  {
LABEL_35:
    v38 = *(_QWORD *)(a1 + 1936);
    if (v38)
    {
      v39 = *(double *)(*(_QWORD *)(a1 + 1904) + 32 * v38 - 32);
      v40 = (uint64_t *)(a1 + 1856);
      v41 = *(_QWORD *)(a1 + 1888);
      v608 = a1 + 1856;
      if (v41)
      {
LABEL_37:
        v42 = *v40;
        goto LABEL_40;
      }
    }
    else
    {
      v39 = *(double *)(*(_QWORD *)(a1 + 1904)
                      + 32 * ((uint64_t)(*(_QWORD *)(a1 + 1912) - *(_QWORD *)(a1 + 1904)) >> 5)
                      - 32);
      v40 = (uint64_t *)(a1 + 1856);
      v41 = *(_QWORD *)(a1 + 1888);
      v608 = a1 + 1856;
      if (v41)
        goto LABEL_37;
    }
    v42 = *(_QWORD *)(a1 + 1856);
    v41 = (*(_QWORD *)(a1 + 1864) - v42) >> 5;
LABEL_40:
    if (v39 >= a2)
      v39 = a2;
    if (*(double *)(v42 + 32 * v41 - 32) >= v39)
      v43 = v39;
    else
      v43 = *(double *)(v42 + 32 * v41 - 32);
    v44 = *(_QWORD *)(a1 + 2016);
    if (v44)
    {
      while (1)
      {
        if (!*(_QWORD *)(a1 + 1896))
        {
          v45 = *(_QWORD *)(a1 + 2000);
LABEL_152:
          v107 = *(_QWORD *)(a1 + 1984);
          v108 = *(_QWORD *)(a1 + 1976);
          while (2)
          {
            v112 = *(double *)(v108 + 176 * (v45 % (0x2E8BA2E8BA2E8BA3 * ((v107 - v108) >> 4))) + 168);
            if (*(_BYTE *)(a1 + 2144))
            {
              if (v112 >= *(double *)(a1 + 2136))
                goto LABEL_262;
            }
            else if (v112 >= *(double *)(a1 + 2128))
            {
              goto LABEL_262;
            }
            if (!*(_BYTE *)(a1 + 1688))
              goto LABEL_154;
            sub_20F1A6D2C(&v640);
            if (*(int *)v640[7] > 3)
              goto LABEL_153;
            v113 = *((unsigned __int8 *)v640 + 72);
            v114 = sub_20E8C31DC((uint64_t)v640, "OSLogSurrogateAppender", 1, 0);
            v115 = v114;
            if (!v113 && !v114)
              goto LABEL_153;
            *(_QWORD *)v654 = &v640;
            *(std::chrono::steady_clock::time_point *)&v654[8] = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v654[16] = std::chrono::system_clock::now();
            LODWORD(v655) = 3;
            *((_QWORD *)&v655 + 1) = "unknown file";
            LODWORD(v656) = 519;
            v657 = "unknown function";
            v658 = 0;
            v659 = 0;
            if (*(_BYTE *)(a1 + 2144))
              v116 = *(double *)(a1 + 2136);
            else
              v116 = -1.0;
            __src = *(_BYTE **)(a1 + 1984);
            __dst = *(_BYTE **)(a1 + 1976);
            v618 = *(_QWORD *)(a1 + 2000);
            v117 = **(_QWORD **)v654;
            v118 = (const char *)(**(_QWORD **)v654 + 16);
            v609 = v118;
            if (*(char *)(**(_QWORD **)v654 + 39) < 0)
            {
              v118 = *(const char **)(v117 + 16);
              v119 = *(_QWORD *)(v117 + 24);
              v121 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v121 & 1) == 0)
              {
LABEL_257:
                if (__cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&v623);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v623);
                  if ((_BYTE)v626 && SHIBYTE(v625) < 0)
                    operator delete(v623);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
              }
            }
            else
            {
              v119 = *(unsigned __int8 *)(**(_QWORD **)v654 + 39);
              v120 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v120 & 1) == 0)
                goto LABEL_257;
            }
            if (byte_254A4A4F8[23] >= 0)
              v122 = byte_254A4A4F8;
            else
              v122 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v123 = byte_254A4A4F8[23];
            else
              v123 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)object = os_log_create(v122, v118);
            if (v123 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v123 >= 0x17)
            {
              v125 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v123 | 7) != 0x17)
                v125 = v123 | 7;
              v126 = v125 + 1;
              v124 = operator new(v125 + 1);
              *(_QWORD *)&object[16] = v123;
              *(_QWORD *)v643 = v126 | 0x8000000000000000;
              *(_QWORD *)&object[8] = v124;
            }
            else
            {
              v643[7] = v123;
              v124 = &object[8];
              if (!v123)
              {
LABEL_186:
                v124[v123] = 0;
                v643[8] = 1;
                if (v119 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v119 >= 0x17)
                {
                  v129 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v119 | 7) != 0x17)
                    v129 = v119 | 7;
                  v130 = v129 + 1;
                  v127 = operator new(v129 + 1);
                  *(_QWORD *)&v644.f64[0] = v119;
                  *(_QWORD *)&v644.f64[1] = v130 | 0x8000000000000000;
                  *(_QWORD *)&v643[16] = v127;
                }
                else
                {
                  HIBYTE(v644.f64[1]) = v119;
                  v127 = &v643[16];
                  if (!v119)
                  {
                    v643[16] = 0;
                    LOBYTE(v645) = 1;
                    v128 = *(NSObject **)object;
                    if ((SHIBYTE(v644.f64[1]) & 0x80000000) == 0)
                      goto LABEL_190;
LABEL_196:
                    operator delete(*(void **)&v643[16]);
                    if (v643[8])
                      goto LABEL_197;
                    goto LABEL_199;
                  }
                }
                memmove(v127, v118, v119);
                v127[v119] = 0;
                LOBYTE(v645) = 1;
                v128 = *(NSObject **)object;
                if (SHIBYTE(v644.f64[1]) < 0)
                  goto LABEL_196;
LABEL_190:
                if (v643[8])
                {
LABEL_197:
                  if ((v643[7] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                }
LABEL_199:
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                v131 = (uint64_t *)&__dst[176 * (v618 % (0x2E8BA2E8BA2E8BA3 * ((__src - __dst) >> 4))) + 168];
                if (v115 && *(_QWORD *)(v115 + 24))
                {
                  v132 = _os_log_pack_size();
                  v133 = (std::__shared_weak_count_vtbl *)operator new(v132, (std::align_val_t)8uLL);
                  v134 = (std::__shared_weak_count *)operator new();
                  v135 = v134;
                  v134->__shared_owners_ = 0;
                  p_shared_owners = (unint64_t *)&v134->__shared_owners_;
                  v134->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v134->__shared_weak_owners_ = 0;
                  v134[1].__vftable = v133;
                  *(_QWORD *)object = v133;
                  *(_QWORD *)&object[8] = v133;
                  *(_QWORD *)&object[16] = v134;
                  do
                    v137 = __ldxr(p_shared_owners);
                  while (__stxr(v137 + 1, p_shared_owners));
                  memset(v643, 0, sizeof(v643));
                  do
                    v138 = __ldaxr(p_shared_owners);
                  while (__stlxr(v138 - 1, p_shared_owners));
                  if (!v138)
                  {
                    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                    std::__shared_weak_count::__release_weak(v135);
                  }
                  v139 = *(_QWORD *)object;
                  v140 = _os_log_pack_fill();
                  v141 = *v131;
                  v142 = *(_QWORD *)(a1 + 2128);
                  *(_DWORD *)v140 = 134218496;
                  *(_QWORD *)(v140 + 4) = v141;
                  *(_WORD *)(v140 + 12) = 2048;
                  *(_QWORD *)(v140 + 14) = v142;
                  *(_WORD *)(v140 + 22) = 2048;
                  *(double *)(v140 + 24) = v116;
                  v143 = (char *)operator new();
                  v144 = *(unsigned __int8 *)(v117 + 39);
                  v145 = *(const char **)(v117 + 16);
                  v146 = *(_QWORD *)(v117 + 24);
                  v147 = *(_OWORD *)v643;
                  *(_OWORD *)(v143 + 8) = *(_OWORD *)&object[8];
                  if ((v144 & 0x80u) != 0)
                    v144 = v146;
                  else
                    v145 = v609;
                  *(_QWORD *)v143 = v139;
                  *(_QWORD *)&object[8] = 0;
                  *(_QWORD *)&object[16] = 0;
                  *(_OWORD *)(v143 + 24) = v147;
                  *(_QWORD *)v643 = 0;
                  *(_QWORD *)&v643[8] = 0;
                  *((_QWORD *)v143 + 5) = v145;
                  *((_QWORD *)v143 + 6) = v144;
                  v143[56] = 1;
                  *(_QWORD *)&v636 = 0;
                  v623 = v143;
                  (*(void (**)(_QWORD, void **))(**(_QWORD **)(v115 + 24) + 40))(*(_QWORD *)(v115 + 24), &v623);
                  v148 = v623;
                  v623 = 0;
                  if (v148)
                  {
                    v149 = (std::__shared_weak_count *)*((_QWORD *)v148 + 4);
                    if (v149)
                    {
                      v150 = (unint64_t *)&v149->__shared_owners_;
                      do
                        v151 = __ldaxr(v150);
                      while (__stlxr(v151 - 1, v150));
                      if (!v151)
                      {
                        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                        std::__shared_weak_count::__release_weak(v149);
                      }
                    }
                    v152 = (std::__shared_weak_count *)*((_QWORD *)v148 + 2);
                    if (v152)
                    {
                      v153 = (unint64_t *)&v152->__shared_owners_;
                      do
                        v154 = __ldaxr(v153);
                      while (__stlxr(v154 - 1, v153));
                      if (!v154)
                      {
                        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                        std::__shared_weak_count::__release_weak(v152);
                      }
                    }
                    MEMORY[0x212BC6398](v148, 0x10F0C40B62ED6C6);
                    v155 = v636;
                    *(_QWORD *)&v636 = 0;
                    if (v155)
                    {
                      v156 = *(std::__shared_weak_count **)(v155 + 32);
                      if (v156)
                      {
                        v157 = (unint64_t *)&v156->__shared_owners_;
                        do
                          v158 = __ldaxr(v157);
                        while (__stlxr(v158 - 1, v157));
                        if (!v158)
                        {
                          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                          std::__shared_weak_count::__release_weak(v156);
                        }
                      }
                      v159 = *(std::__shared_weak_count **)(v155 + 16);
                      if (v159)
                      {
                        v160 = (unint64_t *)&v159->__shared_owners_;
                        do
                          v161 = __ldaxr(v160);
                        while (__stlxr(v161 - 1, v160));
                        if (!v161)
                        {
                          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                          std::__shared_weak_count::__release_weak(v159);
                        }
                      }
                      MEMORY[0x212BC6398](v155, 0x10F0C40B62ED6C6);
                    }
                  }
                  v162 = *(std::__shared_weak_count **)&v643[8];
                  if (*(_QWORD *)&v643[8])
                  {
                    v163 = (unint64_t *)(*(_QWORD *)&v643[8] + 8);
                    do
                      v164 = __ldaxr(v163);
                    while (__stlxr(v164 - 1, v163));
                    if (!v164)
                    {
                      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                      std::__shared_weak_count::__release_weak(v162);
                    }
                  }
                  v165 = *(std::__shared_weak_count **)&object[16];
                  if (*(_QWORD *)&object[16])
                  {
                    v166 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                    do
                      v167 = __ldaxr(v166);
                    while (__stlxr(v167 - 1, v166));
                    if (!v167)
                    {
                      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                      std::__shared_weak_count::__release_weak(v165);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v128, OS_LOG_TYPE_INFO);
                  v168 = *v131;
                  v169 = *(_QWORD *)(a1 + 2128);
                  *(_DWORD *)object = 134218496;
                  *(_QWORD *)&object[4] = v168;
                  *(_WORD *)&object[12] = 2048;
                  *(_QWORD *)&object[14] = v169;
                  *(_WORD *)&object[22] = 2048;
                  *(double *)v643 = v116;
                  v170 = (void *)_os_log_send_and_compose_impl();
                  if (v170)
                    free(v170);
                }
                if (v113)
                {
                  if (*(_BYTE *)(a1 + 2144))
                    v171 = *(double *)(a1 + 2136);
                  else
                    v171 = -1.0;
                  sub_20E8C003C((uint64_t)v654, "[MLPosePredictor]   Discard InertialState with timestamp %.4f, filter_timestamp_: %.4f, filter_timestamp_staged_: %.4f", *(double *)(*(_QWORD *)(a1 + 1976)+ 176* (*(_QWORD *)(a1 + 2000)% (unint64_t)(0x2E8BA2E8BA2E8BA3* ((uint64_t)(*(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976)) >> 4)))+ 168), *(double *)(a1 + 2128), v171);
                  sub_20E863570((uint64_t)v654);
                }
                sub_20E863570((uint64_t)v654);
                v172 = v659;
                if (v659)
                {
                  v173 = (unint64_t *)&v659->__shared_owners_;
                  do
                    v174 = __ldaxr(v173);
                  while (__stlxr(v174 - 1, v173));
                  if (!v174)
                  {
                    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                    std::__shared_weak_count::__release_weak(v172);
                  }
                }
LABEL_153:
                v45 = *(_QWORD *)(a1 + 2000);
                v108 = *(_QWORD *)(a1 + 1976);
LABEL_154:
                v109 = (_OWORD *)(v108 + 176 * v45);
                v109[9] = 0u;
                v109[10] = 0u;
                v109[7] = 0u;
                v109[8] = 0u;
                v109[5] = 0u;
                v109[6] = 0u;
                v109[3] = 0u;
                v109[4] = 0u;
                v109[1] = 0u;
                v109[2] = 0u;
                *v109 = 0u;
                v107 = *(_QWORD *)(a1 + 1984);
                v108 = *(_QWORD *)(a1 + 1976);
                v110 = 0x2E8BA2E8BA2E8BA3 * ((v107 - v108) >> 4);
                v111 = *(_QWORD *)(a1 + 2000) + 1;
                if (v111 < v110)
                  v110 = 0;
                v45 = v111 - v110;
                *(_QWORD *)(a1 + 2000) = v45;
                v44 = *(_QWORD *)(a1 + 2016) - 1;
                *(_QWORD *)(a1 + 2016) = v44;
                if (!v44)
                  goto LABEL_262;
                continue;
              }
            }
            break;
          }
          memmove(v124, v122, v123);
          goto LABEL_186;
        }
        v45 = *(_QWORD *)(a1 + 2000);
        if (!*(_QWORD *)(a1 + 1944))
          goto LABEL_152;
        v46 = *(_QWORD *)(a1 + 1976);
        v50 = *(_QWORD *)(a1 + 1904);
        v51 = *(_QWORD *)(a1 + 1928) % (unint64_t)((*(_QWORD *)(a1 + 1912) - v50) >> 5);
        v52 = *(double *)(*(_QWORD *)(a1 + 1856)
                        + 32
                        * (*(_QWORD *)(a1 + 1880)
                         % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1864) - *(_QWORD *)(a1 + 1856)) >> 5)));
        if (v52 < *(double *)(v50 + 32 * v51))
          v52 = *(double *)(v50 + 32 * v51);
        if (*(double *)(v46 + 176 * (v45 % (0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 1984) - v46) >> 4))) + 168) >= v52)
          goto LABEL_152;
        if (*(_BYTE *)(a1 + 1688))
          break;
LABEL_48:
        v47 = (_OWORD *)(v46 + 176 * v45);
        v47[9] = 0u;
        v47[10] = 0u;
        v47[7] = 0u;
        v47[8] = 0u;
        v47[5] = 0u;
        v47[6] = 0u;
        v47[3] = 0u;
        v47[4] = 0u;
        v47[1] = 0u;
        v47[2] = 0u;
        *v47 = 0u;
        v48 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976)) >> 4);
        v49 = *(_QWORD *)(a1 + 2000) + 1;
        if (v49 < v48)
          v48 = 0;
        *(_QWORD *)(a1 + 2000) = v49 - v48;
        v44 = *(_QWORD *)(a1 + 2016) - 1;
        *(_QWORD *)(a1 + 2016) = v44;
        if (!v44)
          goto LABEL_262;
      }
      sub_20F1A6D2C(&v640);
      if (*(int *)v640[7] > 5
        || (v53 = *((unsigned __int8 *)v640 + 72),
            v54 = sub_20E8C31DC((uint64_t)v640, "OSLogSurrogateAppender", 1, 0),
            v55 = v54,
            !v53)
        && !v54)
      {
LABEL_47:
        v45 = *(_QWORD *)(a1 + 2000);
        v46 = *(_QWORD *)(a1 + 1976);
        goto LABEL_48;
      }
      *(_QWORD *)v654 = &v640;
      *(std::chrono::steady_clock::time_point *)&v654[8] = std::chrono::steady_clock::now();
      *(std::chrono::system_clock::time_point *)&v654[16] = std::chrono::system_clock::now();
      LODWORD(v655) = 5;
      *((_QWORD *)&v655 + 1) = "unknown file";
      LODWORD(v656) = 510;
      v657 = "unknown function";
      v658 = 0;
      v659 = 0;
      v56 = **(_QWORD **)v654;
      v57 = (const char *)(**(_QWORD **)v654 + 16);
      v610 = v57;
      if (*(char *)(**(_QWORD **)v654 + 39) < 0)
      {
        v57 = *(const char **)(v56 + 16);
        v58 = *(_QWORD *)(v56 + 24);
        v60 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v60 & 1) != 0)
          goto LABEL_64;
      }
      else
      {
        v58 = *(unsigned __int8 *)(**(_QWORD **)v654 + 39);
        v59 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v59 & 1) != 0)
          goto LABEL_64;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&v623);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v623);
        if ((_BYTE)v626 && SHIBYTE(v625) < 0)
          operator delete(v623);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_64:
      if (byte_254A4A4F8[23] >= 0)
        v61 = byte_254A4A4F8;
      else
        v61 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v62 = byte_254A4A4F8[23];
      else
        v62 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v61, v57);
      if (v62 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v62 >= 0x17)
      {
        v64 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v62 | 7) != 0x17)
          v64 = v62 | 7;
        v65 = v64 + 1;
        v63 = operator new(v64 + 1);
        *(_QWORD *)&object[16] = v62;
        *(_QWORD *)v643 = v65 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v63;
      }
      else
      {
        v643[7] = v62;
        v63 = &object[8];
        if (!v62)
        {
LABEL_78:
          v63[v62] = 0;
          v643[8] = 1;
          if (v58 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v58 >= 0x17)
          {
            v68 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v58 | 7) != 0x17)
              v68 = v58 | 7;
            v69 = v68 + 1;
            v66 = operator new(v68 + 1);
            *(_QWORD *)&v644.f64[0] = v58;
            *(_QWORD *)&v644.f64[1] = v69 | 0x8000000000000000;
            *(_QWORD *)&v643[16] = v66;
          }
          else
          {
            HIBYTE(v644.f64[1]) = v58;
            v66 = &v643[16];
            if (!v58)
            {
              v643[16] = 0;
              LOBYTE(v645) = 1;
              v67 = *(NSObject **)object;
              if ((SHIBYTE(v644.f64[1]) & 0x80000000) == 0)
                goto LABEL_82;
              goto LABEL_88;
            }
          }
          memmove(v66, v57, v58);
          v66[v58] = 0;
          LOBYTE(v645) = 1;
          v67 = *(NSObject **)object;
          if ((SHIBYTE(v644.f64[1]) & 0x80000000) == 0)
          {
LABEL_82:
            if (!v643[8])
              goto LABEL_91;
            goto LABEL_89;
          }
LABEL_88:
          operator delete(*(void **)&v643[16]);
          if (!v643[8])
          {
LABEL_91:
            if (*(_QWORD *)object)
              os_release(*(void **)object);
            if (v55 && *(_QWORD *)(v55 + 24))
            {
              v70 = _os_log_pack_size();
              v71 = (std::__shared_weak_count_vtbl *)operator new(v70, (std::align_val_t)8uLL);
              v72 = (std::__shared_weak_count *)operator new();
              v73 = v72;
              v72->__shared_owners_ = 0;
              v74 = (unint64_t *)&v72->__shared_owners_;
              v72->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v72->__shared_weak_owners_ = 0;
              v72[1].__vftable = v71;
              *(_QWORD *)object = v71;
              *(_QWORD *)&object[8] = v71;
              *(_QWORD *)&object[16] = v72;
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
              memset(v643, 0, sizeof(v643));
              do
                v76 = __ldaxr(v74);
              while (__stlxr(v76 - 1, v74));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v73);
              }
              v77 = *(_QWORD *)object;
              *(_WORD *)_os_log_pack_fill() = 0;
              v78 = (char *)operator new();
              v79 = *(unsigned __int8 *)(v56 + 39);
              v80 = *(const char **)(v56 + 16);
              v81 = *(_QWORD *)(v56 + 24);
              v82 = *(_OWORD *)v643;
              *(_OWORD *)(v78 + 8) = *(_OWORD *)&object[8];
              if ((v79 & 0x80u) != 0)
                v79 = v81;
              else
                v80 = v610;
              *(_QWORD *)v78 = v77;
              *(_QWORD *)&object[8] = 0;
              *(_QWORD *)&object[16] = 0;
              *(_OWORD *)(v78 + 24) = v82;
              *(_QWORD *)v643 = 0;
              *(_QWORD *)&v643[8] = 0;
              *((_QWORD *)v78 + 5) = v80;
              *((_QWORD *)v78 + 6) = v79;
              v78[56] = 16;
              *(_QWORD *)&v636 = 0;
              v623 = v78;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v55 + 24) + 40))(*(_QWORD *)(v55 + 24), &v623);
              v83 = v623;
              v623 = 0;
              if (v83)
              {
                v84 = (std::__shared_weak_count *)*((_QWORD *)v83 + 4);
                if (v84)
                {
                  v85 = (unint64_t *)&v84->__shared_owners_;
                  do
                    v86 = __ldaxr(v85);
                  while (__stlxr(v86 - 1, v85));
                  if (!v86)
                  {
                    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                    std::__shared_weak_count::__release_weak(v84);
                  }
                }
                v87 = (std::__shared_weak_count *)*((_QWORD *)v83 + 2);
                if (v87)
                {
                  v88 = (unint64_t *)&v87->__shared_owners_;
                  do
                    v89 = __ldaxr(v88);
                  while (__stlxr(v89 - 1, v88));
                  if (!v89)
                  {
                    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                    std::__shared_weak_count::__release_weak(v87);
                  }
                }
                MEMORY[0x212BC6398](v83, 0x10F0C40B62ED6C6);
                v90 = v636;
                *(_QWORD *)&v636 = 0;
                if (v90)
                {
                  v91 = *(std::__shared_weak_count **)(v90 + 32);
                  if (v91)
                  {
                    v92 = (unint64_t *)&v91->__shared_owners_;
                    do
                      v93 = __ldaxr(v92);
                    while (__stlxr(v93 - 1, v92));
                    if (!v93)
                    {
                      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                      std::__shared_weak_count::__release_weak(v91);
                    }
                  }
                  v94 = *(std::__shared_weak_count **)(v90 + 16);
                  if (v94)
                  {
                    v95 = (unint64_t *)&v94->__shared_owners_;
                    do
                      v96 = __ldaxr(v95);
                    while (__stlxr(v96 - 1, v95));
                    if (!v96)
                    {
                      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                      std::__shared_weak_count::__release_weak(v94);
                    }
                  }
                  MEMORY[0x212BC6398](v90, 0x10F0C40B62ED6C6);
                }
              }
              v97 = *(std::__shared_weak_count **)&v643[8];
              if (*(_QWORD *)&v643[8])
              {
                v98 = (unint64_t *)(*(_QWORD *)&v643[8] + 8);
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 - 1, v98));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
              v100 = *(std::__shared_weak_count **)&object[16];
              if (*(_QWORD *)&object[16])
              {
                v101 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                  std::__shared_weak_count::__release_weak(v100);
                }
              }
            }
            else
            {
              os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
              *(_WORD *)object = 0;
              v103 = (void *)_os_log_send_and_compose_impl();
              if (v103)
                free(v103);
            }
            if (v53)
            {
              sub_20E8C003C((uint64_t)v654, "[MLPosePredictor] InertialState timestamp is earlier than IMU timestamp");
              sub_20E863570((uint64_t)v654);
            }
            sub_20E863570((uint64_t)v654);
            v104 = v659;
            if (v659)
            {
              v105 = (unint64_t *)&v659->__shared_owners_;
              do
                v106 = __ldaxr(v105);
              while (__stlxr(v106 - 1, v105));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            goto LABEL_47;
          }
LABEL_89:
          if ((v643[7] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          goto LABEL_91;
        }
      }
      memmove(v63, v61, v62);
      goto LABEL_78;
    }
LABEL_262:
    v619 = (double **)(a1 + 2352);
    if (*(_BYTE *)(a1 + 2144))
    {
      if (!v44)
      {
        v611 = (_BYTE *)(a1 + 1688);
        goto LABEL_401;
      }
      if (*(double *)(*(_QWORD *)(a1 + 1976)
                     + 176
                     * (*(_QWORD *)(a1 + 2000)
                      % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                         * ((uint64_t)(*(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976)) >> 4)))
                     + 168) > v43)
      {
        v611 = (_BYTE *)(a1 + 1688);
LABEL_269:
        v175 = 0;
        v176 = *(_DWORD *)(a1 + 2152);
        while (1)
        {
          v179 = *(_QWORD *)(a1 + 1976)
               + 176
               * ((unint64_t)&v175[*(_QWORD *)(a1 + 2000)]
                % (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976)) >> 4)));
          v181 = *(double *)(v179 + 168);
          v180 = (double *)(v179 + 168);
          v182 = v181;
          if (v181 > v43)
            goto LABEL_401;
          v183 = *(_DWORD *)(a1 + 1736) - v176;
          if (v183 > 0x7FFFFFFE)
            goto LABEL_275;
          __dsta = v175;
          v184 = 0;
          *(double *)(a1 + 2344) = (v182 - *(double *)(a1 + 2128)) / (double)(int)(v183 + 1);
          do
          {
            v187 = *(double *)(a1 + 2344) + *(double *)(a1 + 2128);
            *(double *)(a1 + 2128) = v187;
            if (v184 == v183)
            {
              v187 = *v180;
              *(double *)(a1 + 2128) = *v180;
            }
            v188 = *(double **)(a1 + 2360);
            v189 = *(_QWORD *)(a1 + 2368);
            if ((unint64_t)v188 < v189)
            {
              *v188 = v187;
              v185 = (uint64_t)(v188 + 1);
              goto LABEL_280;
            }
            v190 = *v619;
            v191 = (char *)v188 - (char *)*v619;
            v192 = v191 >> 3;
            v193 = (v191 >> 3) + 1;
            if (v193 >> 61)
              sub_20E867F44();
            v194 = v189 - (_QWORD)v190;
            if (v194 >> 2 > v193)
              v193 = v194 >> 2;
            if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFF8)
              v195 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v195 = v193;
            if (v195)
            {
              if (v195 >> 61)
                sub_20E877A38();
              v196 = operator new(8 * v195);
              v197 = (double *)&v196[8 * v192];
              *v197 = v187;
              v185 = (uint64_t)(v197 + 1);
              v198 = (char *)v188 - (char *)v190;
              if (v188 == v190)
                goto LABEL_301;
LABEL_295:
              v199 = v198 - 8;
              if (v199 < 0x58)
                goto LABEL_891;
              if ((unint64_t)((char *)v188 - &v196[v191]) < 0x20)
                goto LABEL_891;
              v200 = (v199 >> 3) + 1;
              v201 = 8 * (v200 & 0x3FFFFFFFFFFFFFFCLL);
              v202 = &v188[v201 / 0xFFFFFFFFFFFFFFF8];
              v197 = (double *)((char *)v197 - v201);
              v203 = &v196[8 * v192 - 16];
              v204 = v188 - 2;
              v205 = v200 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v206 = *(_OWORD *)v204;
                *(v203 - 1) = *((_OWORD *)v204 - 1);
                *v203 = v206;
                v203 -= 2;
                v204 -= 4;
                v205 -= 4;
              }
              while (v205);
              v188 = v202;
              if (v200 != (v200 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_891:
                do
                {
                  v207 = *((_QWORD *)v188-- - 1);
                  *((_QWORD *)v197-- - 1) = v207;
                }
                while (v188 != v190);
              }
              goto LABEL_301;
            }
            v196 = 0;
            v197 = (double *)(8 * v192);
            *(double *)(8 * v192) = v187;
            v185 = 8 * v192 + 8;
            v198 = (char *)v188 - (char *)v190;
            if (v188 != v190)
              goto LABEL_295;
LABEL_301:
            *(_QWORD *)(a1 + 2352) = v197;
            *(_QWORD *)(a1 + 2360) = v185;
            *(_QWORD *)(a1 + 2368) = &v196[8 * v195];
            if (v190)
              operator delete(v190);
LABEL_280:
            *(_QWORD *)(a1 + 2360) = v185;
          }
          while (v184++ != v183);
          v208 = *(_DWORD *)(a1 + 1736);
          if (v183 + 1 != v208 && *(_BYTE *)(a1 + 2336))
            *(double *)(a1 + 2344) = (*v180 - *(double *)(a1 + 2328)) / (double)v208;
          v177 = *(double *)(a1 + 1728);
          v178 = *(double *)(a1 + 2344);
          v175 = __dsta;
          if (vabdd_f64(v177, v178) / v177 <= 0.1)
            goto LABEL_272;
          if (!*v611)
            goto LABEL_271;
          sub_20F1A6D2C(&v640);
          if (*(int *)v640[7] > 2)
            goto LABEL_270;
          v209 = *((unsigned __int8 *)v640 + 72);
          v210 = *((_BYTE *)v640 + 72) != 0;
          v211 = sub_20E8C31DC((uint64_t)v640, "OSLogSurrogateAppender", 1, 0);
          if (((v211 == 0) & ~v210) != 0)
            goto LABEL_270;
          *(_QWORD *)v654 = &v640;
          *(std::chrono::steady_clock::time_point *)&v654[8] = std::chrono::steady_clock::now();
          *(std::chrono::system_clock::time_point *)&v654[16] = std::chrono::system_clock::now();
          LODWORD(v655) = 2;
          *((_QWORD *)&v655 + 1) = "unknown file";
          LODWORD(v656) = 573;
          v657 = "unknown function";
          v658 = 0;
          v659 = 0;
          v212 = **(_QWORD **)v654;
          v213 = **(_QWORD **)v654 + 16;
          if (*(char *)(**(_QWORD **)v654 + 39) < 0)
          {
            v215 = *(const char **)(v212 + 16);
            v214 = *(_QWORD *)(v212 + 24);
            v217 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v217 & 1) == 0)
            {
LABEL_396:
              if (__cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)&v623);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v623);
                if ((_BYTE)v626 && SHIBYTE(v625) < 0)
                  operator delete(v623);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
            }
          }
          else
          {
            v214 = *(unsigned __int8 *)(**(_QWORD **)v654 + 39);
            v215 = (const char *)(v212 + 16);
            v216 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v216 & 1) == 0)
              goto LABEL_396;
          }
          if (byte_254A4A4F8[23] >= 0)
            v218 = byte_254A4A4F8;
          else
            v218 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v219 = byte_254A4A4F8[23];
          else
            v219 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)object = os_log_create(v218, v215);
          if (v219 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          __srca = v215;
          if (v219 >= 0x17)
          {
            v607 = v211;
            v221 = v212;
            v222 = v209;
            v223 = v213;
            v224 = v214;
            v225 = (v219 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v219 | 7) != 0x17)
              v225 = v219 | 7;
            v226 = v225 + 1;
            v220 = operator new(v225 + 1);
            *(_QWORD *)&object[16] = v219;
            *(_QWORD *)v643 = v226 | 0x8000000000000000;
            *(_QWORD *)&object[8] = v220;
            v214 = v224;
            v213 = v223;
            v209 = v222;
            v212 = v221;
            v211 = v607;
LABEL_327:
            memmove(v220, v218, v219);
            goto LABEL_328;
          }
          v643[7] = v219;
          v220 = &object[8];
          if (v219)
            goto LABEL_327;
LABEL_328:
          v220[v219] = 0;
          v643[8] = 1;
          if (v214 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v214 >= 0x17)
          {
            v228 = (v214 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v214 | 7) != 0x17)
              v228 = v214 | 7;
            v229 = v214;
            v230 = v228 + 1;
            v227 = operator new(v228 + 1);
            *(_QWORD *)&v644.f64[0] = v229;
            *(_QWORD *)&v644.f64[1] = v230 | 0x8000000000000000;
            *(_QWORD *)&v643[16] = v227;
            v214 = v229;
LABEL_335:
            memmove(v227, __srca, v214);
            goto LABEL_336;
          }
          HIBYTE(v644.f64[1]) = v214;
          v227 = &v643[16];
          if (v214)
            goto LABEL_335;
LABEL_336:
          v227[v214] = 0;
          LOBYTE(v645) = 1;
          v231 = *(NSObject **)object;
          if (SHIBYTE(v644.f64[1]) < 0)
            operator delete(*(void **)&v643[16]);
          if (v643[8] && (v643[7] & 0x80000000) != 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v211 && *(_QWORD *)(v211 + 24))
          {
            v232 = _os_log_pack_size();
            v233 = (std::__shared_weak_count_vtbl *)operator new(v232, (std::align_val_t)8uLL);
            v234 = (std::__shared_weak_count *)operator new();
            v235 = v234;
            v234->__shared_owners_ = 0;
            v236 = (unint64_t *)&v234->__shared_owners_;
            v234->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v234->__shared_weak_owners_ = 0;
            v234[1].__vftable = v233;
            *(_QWORD *)object = v233;
            *(_QWORD *)&object[8] = v233;
            *(_QWORD *)&object[16] = v234;
            do
              v237 = __ldxr(v236);
            while (__stxr(v237 + 1, v236));
            memset(v643, 0, sizeof(v643));
            do
              v238 = __ldaxr(v236);
            while (__stlxr(v238 - 1, v236));
            if (!v238)
            {
              ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
              std::__shared_weak_count::__release_weak(v235);
            }
            v239 = *(_QWORD *)object;
            v240 = _os_log_pack_fill();
            v241 = *(_QWORD *)(a1 + 2344);
            v242 = *(_QWORD *)(a1 + 1728);
            v243 = *v180;
            *(_DWORD *)v240 = 134218496;
            *(_QWORD *)(v240 + 4) = v241;
            *(_WORD *)(v240 + 12) = 2048;
            *(_QWORD *)(v240 + 14) = v242;
            *(_WORD *)(v240 + 22) = 2048;
            *(double *)(v240 + 24) = v243;
            v244 = (char *)operator new();
            v245 = *(unsigned __int8 *)(v212 + 39);
            v246 = *(_QWORD *)(v212 + 16);
            v247 = *(_QWORD *)(v212 + 24);
            v248 = *(_OWORD *)v643;
            *(_OWORD *)(v244 + 8) = *(_OWORD *)&object[8];
            if ((v245 & 0x80u) != 0)
              v245 = v247;
            else
              v246 = v213;
            *(_QWORD *)v244 = v239;
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v244 + 24) = v248;
            *(_QWORD *)v643 = 0;
            *(_QWORD *)&v643[8] = 0;
            *((_QWORD *)v244 + 5) = v246;
            *((_QWORD *)v244 + 6) = v245;
            v244[56] = 2;
            *(_QWORD *)&v636 = 0;
            v623 = v244;
            (*(void (**)(_QWORD, void **))(**(_QWORD **)(v211 + 24) + 40))(*(_QWORD *)(v211 + 24), &v623);
            v249 = v623;
            v623 = 0;
            if (v249)
            {
              v250 = (std::__shared_weak_count *)*((_QWORD *)v249 + 4);
              if (v250)
              {
                v251 = (unint64_t *)&v250->__shared_owners_;
                do
                  v252 = __ldaxr(v251);
                while (__stlxr(v252 - 1, v251));
                if (!v252)
                {
                  ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                  std::__shared_weak_count::__release_weak(v250);
                }
              }
              v253 = (std::__shared_weak_count *)*((_QWORD *)v249 + 2);
              if (v253)
              {
                v254 = (unint64_t *)&v253->__shared_owners_;
                do
                  v255 = __ldaxr(v254);
                while (__stlxr(v255 - 1, v254));
                if (!v255)
                {
                  ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                  std::__shared_weak_count::__release_weak(v253);
                }
              }
              MEMORY[0x212BC6398](v249, 0x10F0C40B62ED6C6);
              v256 = v636;
              *(_QWORD *)&v636 = 0;
              if (v256)
              {
                v257 = *(std::__shared_weak_count **)(v256 + 32);
                if (v257)
                {
                  v258 = (unint64_t *)&v257->__shared_owners_;
                  do
                    v259 = __ldaxr(v258);
                  while (__stlxr(v259 - 1, v258));
                  if (!v259)
                  {
                    ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                    std::__shared_weak_count::__release_weak(v257);
                  }
                }
                v260 = *(std::__shared_weak_count **)(v256 + 16);
                if (v260)
                {
                  v261 = (unint64_t *)&v260->__shared_owners_;
                  do
                    v262 = __ldaxr(v261);
                  while (__stlxr(v262 - 1, v261));
                  if (!v262)
                  {
                    ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
                    std::__shared_weak_count::__release_weak(v260);
                  }
                }
                MEMORY[0x212BC6398](v256, 0x10F0C40B62ED6C6);
              }
            }
            v263 = *(std::__shared_weak_count **)&v643[8];
            if (*(_QWORD *)&v643[8])
            {
              v264 = (unint64_t *)(*(_QWORD *)&v643[8] + 8);
              do
                v265 = __ldaxr(v264);
              while (__stlxr(v265 - 1, v264));
              if (!v265)
              {
                ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                std::__shared_weak_count::__release_weak(v263);
              }
            }
            v266 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v267 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v268 = __ldaxr(v267);
              while (__stlxr(v268 - 1, v267));
              if (!v268)
              {
                ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                std::__shared_weak_count::__release_weak(v266);
              }
            }
          }
          else
          {
            os_log_type_enabled(v231, OS_LOG_TYPE_DEBUG);
            v269 = *(_QWORD *)(a1 + 2344);
            v270 = *(_QWORD *)(a1 + 1728);
            v271 = *v180;
            *(_DWORD *)object = 134218496;
            *(_QWORD *)&object[4] = v269;
            *(_WORD *)&object[12] = 2048;
            *(_QWORD *)&object[14] = v270;
            *(_WORD *)&object[22] = 2048;
            *(double *)v643 = v271;
            v272 = (void *)_os_log_send_and_compose_impl();
            if (v272)
              free(v272);
          }
          if (v209)
          {
            sub_20E8C003C((uint64_t)v654, "[MLPosePredictor] Computed imu_interval %.3f deviates from %.3f at %.6f. This might be caused by skipped frames. Reset latest_imu_interval_.", *(double *)(a1 + 2344), *(double *)(a1 + 1728), *v180);
            sub_20E863570((uint64_t)v654);
          }
          sub_20E863570((uint64_t)v654);
          v273 = v659;
          if (v659)
          {
            v274 = (unint64_t *)&v659->__shared_owners_;
            do
              v275 = __ldaxr(v274);
            while (__stlxr(v275 - 1, v274));
            if (!v275)
            {
              ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
              std::__shared_weak_count::__release_weak(v273);
            }
          }
LABEL_270:
          v177 = *(double *)(a1 + 1728);
          v175 = __dsta;
LABEL_271:
          *(double *)(a1 + 2344) = v177;
          v178 = v177;
LABEL_272:
          if (v177 >= v178)
            v177 = v178;
          *(double *)(a1 + 2344) = v177;
          v44 = *(_QWORD *)(a1 + 2016);
LABEL_275:
          ++v175;
          v176 = 1;
          if (v175 == (char *)v44)
            goto LABEL_401;
        }
      }
      sub_20F1E5FFC(**(_QWORD **)(a1 + 2104));
      *(_QWORD *)(a1 + 2128) = *(_QWORD *)(a1 + 2136);
      *(_DWORD *)(a1 + 2152) = *(_DWORD *)(a1 + 1736);
      *(_BYTE *)(a1 + 2136) = 0;
      *(_BYTE *)(a1 + 2144) = 0;
      v44 = *(_QWORD *)(a1 + 2016);
    }
    v611 = (_BYTE *)(a1 + 1688);
    if (v44)
      goto LABEL_269;
LABEL_401:
    v276 = *(double *)(a1 + 2128) + *(double *)(a1 + 2344);
    v277 = *(double **)(a1 + 2360);
    if (v276 > v43)
    {
      v278 = *(_QWORD *)(a1 + 2360);
LABEL_403:
      v279 = *v619;
      if (*v619 == (double *)v278)
      {
        *(_QWORD *)(a1 + 1960) = *(_QWORD *)(a1 + 1952);
      }
      else
      {
        if (!*(_QWORD *)(a1 + 1896))
          goto LABEL_417;
        v280 = *(_QWORD *)(a1 + 1856);
        if (*v279 < *(double *)(v280 + 32 * *(_QWORD *)(a1 + 1880)))
          goto LABEL_417;
        v281 = *(double *)(v278 - 8);
        v282 = *(_QWORD *)(a1 + 1888);
        if (!v282)
          v282 = (*(_QWORD *)(a1 + 1864) - v280) >> 5;
        if (v281 > *(double *)(v280 + 32 * v282 - 32) + 0.001)
          goto LABEL_417;
        if (!*(_QWORD *)(a1 + 1944))
          goto LABEL_417;
        v283 = *(_QWORD *)(a1 + 1904);
        if (*v279 < *(double *)(v283 + 32 * *(_QWORD *)(a1 + 1928)))
          goto LABEL_417;
        v284 = *(_QWORD *)(a1 + 1936);
        if (!v284)
          v284 = (*(_QWORD *)(a1 + 1912) - v283) >> 5;
        if (v281 > *(double *)(v283 + 32 * v284 - 32) + 0.001)
        {
LABEL_417:
          if (!*v611
            || (sub_20F1A6D2C(&v635), **(int **)(v635 + 56) > 4)
            || (v285 = *(unsigned __int8 *)(v635 + 72),
                v286 = sub_20E8C31DC(v635, "OSLogSurrogateAppender", 1, 0),
                v287 = v286,
                !v285)
            && !v286)
          {
LABEL_625:
            kdebug_trace();
            v433 = **(_QWORD **)(a1 + 2104);
            if (*(_BYTE *)(v433 + 1904))
              *(_BYTE *)(v433 + 1904) = 0;
            if (*(_BYTE *)(v433 + 2040))
              *(_BYTE *)(v433 + 2040) = 0;
            if (*(_BYTE *)(v433 + 2176))
              *(_BYTE *)(v433 + 2176) = 0;
            if (*(_BYTE *)(v433 + 2208))
              *(_BYTE *)(v433 + 2208) = 0;
            *(_OWORD *)(v433 + 2320) = 0u;
            *(_OWORD *)(v433 + 2304) = 0u;
            *(_OWORD *)(v433 + 2288) = 0u;
            *(_OWORD *)(v433 + 2352) = 0u;
            if (*(_BYTE *)(v433 + 2224))
              *(_BYTE *)(v433 + 2224) = 0;
            if (*(_BYTE *)(v433 + 2280))
              *(_BYTE *)(v433 + 2280) = 0;
            if (*(_BYTE *)(v433 + 2344))
              *(_BYTE *)(v433 + 2344) = 0;
            *(_DWORD *)(v433 + 2368) = 0;
            v434 = *(void **)(v433 + 1816);
            v435 = *(_QWORD *)(v433 + 1824) - (_QWORD)v434;
            if (v435 >= 1)
              bzero(v434, 4 * (((unint64_t)v435 >> 2) - ((unint64_t)v435 > 3)) + 4);
            *(_QWORD *)(v433 + 1848) = *(_QWORD *)(v433 + 1840);
            *(_QWORD *)(a1 + 2128) = 0xBFF0000000000000;
            *(_BYTE *)(a1 + 2136) = 0;
            *(_BYTE *)(a1 + 2144) = 0;
            *(_BYTE *)(a1 + 2112) = 0;
            *(_BYTE *)(a1 + 2120) = 0;
            if (*(_BYTE *)(a1 + 2336))
              *(_BYTE *)(a1 + 2336) = 0;
            *(_DWORD *)(a1 + 2152) = 0;
            *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a1 + 1728);
            *(_QWORD *)(a1 + 2000) = 0;
            *(_QWORD *)(a1 + 2016) = 0;
            *(_QWORD *)(a1 + 2008) = 0;
            *(_QWORD *)(a1 + 2088) = 0xBFF0000000000000;
            *(_QWORD *)(a1 + 2048) = 0;
            *(_QWORD *)(a1 + 2064) = 0;
            *(_QWORD *)(a1 + 2056) = 0;
            return;
          }
          sub_20E863438((uint64_t)object);
          sub_20E86A980(&object[16], (uint64_t)"[MLPosePredictor] Reset MLFilter due to missing IMU measurements.", 65);
          if ((v650[0] & 0x10) != 0)
          {
            v317 = v649;
            if (*(_QWORD *)&v649 < (unint64_t)v646)
            {
              v649 = *(double *)&v646;
              v317 = *(double *)&v646;
            }
            v318 = (const void **)&v645;
          }
          else
          {
            if ((v650[0] & 8) == 0)
            {
              v288 = 0;
              HIBYTE(v634) = 0;
              v289 = &v632;
              goto LABEL_476;
            }
            v318 = (const void **)&v643[16];
            v317 = v644.f64[1];
          }
          v319 = *v318;
          v288 = *(_QWORD *)&v317 - (_QWORD)*v318;
          if (v288 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v288 >= 0x17)
          {
            v320 = (v288 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v288 | 7) != 0x17)
              v320 = v288 | 7;
            v321 = v320 + 1;
            v289 = operator new(v320 + 1);
            v633 = v288;
            v634 = v321 | 0x8000000000000000;
            v632 = v289;
          }
          else
          {
            HIBYTE(v634) = LOBYTE(v317) - *(_BYTE *)v318;
            v289 = &v632;
            if (!v288)
            {
LABEL_476:
              *((_BYTE *)v289 + v288) = 0;
              v623 = &v635;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v625 = std::chrono::system_clock::now().__d_.__rep_;
              v626 = 4;
              v627 = "unknown file";
              v628 = 594;
              v630 = 0;
              v631 = 0;
              v629 = "unknown function";
              if (v634 >= 0)
                v322 = (const char *)&v632;
              else
                v322 = (const char *)v632;
              v323 = *(_QWORD *)v623;
              if (*(char *)(*(_QWORD *)v623 + 39) < 0)
              {
                v325 = *(const char **)(v323 + 16);
                v324 = *(_QWORD *)(v323 + 24);
              }
              else
              {
                v324 = *(unsigned __int8 *)(*(_QWORD *)v623 + 39);
                v325 = (const char *)(*(_QWORD *)v623 + 16);
              }
              v620 = *(_QWORD *)v623 + 16;
              v326 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v326 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)v654);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v654);
                if ((_BYTE)v655 && (v654[23] & 0x80000000) != 0)
                  operator delete(*(void **)v654);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              if (byte_254A4A4F8[23] >= 0)
                v327 = byte_254A4A4F8;
              else
                v327 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v328 = byte_254A4A4F8[23];
              else
                v328 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)v654 = os_log_create(v327, v325);
              v329 = &v654[8];
              if (v328 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v328 >= 0x17)
              {
                __dstb = v325;
                v330 = v323;
                v331 = v287;
                v332 = v322;
                v333 = v285;
                v334 = (v328 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v328 | 7) != 0x17)
                  v334 = v328 | 7;
                v335 = v334 + 1;
                v329 = operator new(v334 + 1);
                *(_QWORD *)&v654[16] = v328;
                *(_QWORD *)&v655 = v335 | 0x8000000000000000;
                *(_QWORD *)&v654[8] = v329;
                v285 = v333;
                v322 = v332;
                v287 = v331;
                v323 = v330;
                v325 = __dstb;
              }
              else
              {
                BYTE7(v655) = v328;
                if (!v328)
                {
LABEL_497:
                  v329[v328] = 0;
                  BYTE8(v655) = 1;
                  v336 = (char *)&v656;
                  if (v324 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v324 >= 0x17)
                  {
                    v337 = (v324 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v324 | 7) != 0x17)
                      v337 = v324 | 7;
                    v338 = v337 + 1;
                    v336 = (char *)operator new(v337 + 1);
                    v657 = (const char *)v324;
                    v658 = v338 | 0x8000000000000000;
                    v656 = v336;
                  }
                  else
                  {
                    HIBYTE(v658) = v324;
                    if (!v324)
                    {
LABEL_505:
                      v336[v324] = 0;
                      LOBYTE(v659) = 1;
                      v339 = *(NSObject **)v654;
                      if (SHIBYTE(v658) < 0)
                        operator delete(v656);
                      if (BYTE8(v655) && SBYTE7(v655) < 0)
                        operator delete(*(void **)&v654[8]);
                      if (*(_QWORD *)v654)
                        os_release(*(void **)v654);
                      if (!v287 || !*(_QWORD *)(v287 + 24))
                      {
                        os_log_type_enabled(v339, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v654 = 136315138;
                        *(_QWORD *)&v654[4] = v322;
                        v346 = (void *)_os_log_send_and_compose_impl();
                        if (v346)
                          free(v346);
                        goto LABEL_611;
                      }
                      v340 = _os_log_pack_size();
                      v341 = (std::__shared_weak_count_vtbl *)operator new(v340, (std::align_val_t)8uLL);
                      v342 = (std::__shared_weak_count *)operator new();
                      v342->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v342->__shared_owners_ = 0;
                      v342->__shared_weak_owners_ = 0;
                      v342[1].__vftable = v341;
                      *(_QWORD *)&v636 = v341;
                      *((_QWORD *)&v636 + 1) = v341;
                      v638 = 0;
                      v639 = 0;
                      v637 = v342;
                      v343 = strlen(v322);
                      if (v343 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      v344 = v343;
                      if (v343 >= 0x17)
                      {
                        v347 = (v343 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v343 | 7) != 0x17)
                          v347 = v343 | 7;
                        v348 = v347 + 1;
                        v345 = (uint64_t *)operator new(v347 + 1);
                        *(_QWORD *)&v641 = v344;
                        *((_QWORD *)&v641 + 1) = v348 | 0x8000000000000000;
                        v640 = v345;
                      }
                      else
                      {
                        HIBYTE(v641) = v343;
                        v345 = (uint64_t *)&v640;
                        if (!v343)
                        {
LABEL_524:
                          *((_BYTE *)v345 + v344) = 0;
                          v349 = (uint64_t)v640;
                          v660[0] = v641;
                          *(_QWORD *)((char *)v660 + 7) = *(_QWORD *)((char *)&v641 + 7);
                          v350 = HIBYTE(v641);
                          v351 = operator new(0x38uLL);
                          v351[1] = 0;
                          v351[2] = 0;
                          v351[3] = off_24C9ABC20;
                          *v351 = &off_24C9ABBD0;
                          v352 = v660[0];
                          v351[4] = v349;
                          v351[5] = v352;
                          *(_QWORD *)((char *)v351 + 47) = *(_QWORD *)((char *)v660 + 7);
                          *((_BYTE *)v351 + 55) = v350;
                          v660[0] = 0;
                          *(_QWORD *)((char *)v660 + 7) = 0;
                          v353 = v639;
                          v638 = (char *)(v351 + 3);
                          v639 = (std::__shared_weak_count *)v351;
                          if (v353)
                          {
                            v354 = (unint64_t *)&v353->__shared_owners_;
                            do
                              v355 = __ldaxr(v354);
                            while (__stlxr(v355 - 1, v354));
                            if (!v355)
                            {
                              ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                              std::__shared_weak_count::__release_weak(v353);
                            }
                          }
                          *(_OWORD *)v654 = v636;
                          v356 = v638;
                          *(_QWORD *)&v654[16] = v637;
                          if (v637)
                          {
                            v357 = (unint64_t *)&v637->__shared_owners_;
                            do
                              v358 = __ldxr(v357);
                            while (__stxr(v358 + 1, v357));
                          }
                          v359 = v639;
                          *(_QWORD *)&v655 = v356;
                          *((_QWORD *)&v655 + 1) = v639;
                          if (v639)
                          {
                            v360 = (unint64_t *)&v639->__shared_owners_;
                            do
                              v361 = __ldxr(v360);
                            while (__stxr(v361 + 1, v360));
                            v656 = v356;
                            do
                              v362 = __ldaxr(v360);
                            while (__stlxr(v362 - 1, v360));
                            if (!v362)
                            {
                              ((void (*)(std::__shared_weak_count *))v359->__on_zero_shared)(v359);
                              std::__shared_weak_count::__release_weak(v359);
                            }
                          }
                          else
                          {
                            v656 = v356;
                          }
                          v399 = v637;
                          if (v637)
                          {
                            v400 = (unint64_t *)&v637->__shared_owners_;
                            do
                              v401 = __ldaxr(v400);
                            while (__stlxr(v401 - 1, v400));
                            if (!v401)
                            {
                              ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
                              std::__shared_weak_count::__release_weak(v399);
                            }
                          }
                          v402 = *(_QWORD *)v654;
                          if (v656[31] >= 0)
                            v403 = v656 + 8;
                          else
                            v403 = (char *)*((_QWORD *)v656 + 1);
                          v404 = _os_log_pack_fill();
                          *(_DWORD *)v404 = 136315138;
                          *(_QWORD *)(v404 + 4) = v403;
                          v405 = operator new();
                          v406 = *(unsigned __int8 *)(v323 + 39);
                          v407 = v620;
                          if ((v406 & 0x80u) != 0)
                          {
                            v407 = *(_QWORD *)(v323 + 16);
                            v406 = *(_QWORD *)(v323 + 24);
                          }
                          *(_QWORD *)v405 = v402;
                          *(_OWORD *)(v405 + 8) = *(_OWORD *)&v654[8];
                          *(_QWORD *)&v654[8] = 0;
                          *(_QWORD *)&v654[16] = 0;
                          *(_OWORD *)(v405 + 24) = v655;
                          v655 = 0uLL;
                          *(_QWORD *)(v405 + 40) = v407;
                          *(_QWORD *)(v405 + 48) = v406;
                          *(_BYTE *)(v405 + 56) = 16;
                          v640 = 0;
                          *(_QWORD *)&v636 = v405;
                          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v287 + 24) + 40))(*(_QWORD *)(v287 + 24), &v636);
                          v408 = v636;
                          *(_QWORD *)&v636 = 0;
                          if (v408)
                          {
                            v409 = *(std::__shared_weak_count **)(v408 + 32);
                            if (v409)
                            {
                              v410 = (unint64_t *)&v409->__shared_owners_;
                              do
                                v411 = __ldaxr(v410);
                              while (__stlxr(v411 - 1, v410));
                              if (!v411)
                              {
                                ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
                                std::__shared_weak_count::__release_weak(v409);
                              }
                            }
                            v412 = *(std::__shared_weak_count **)(v408 + 16);
                            if (v412)
                            {
                              v413 = (unint64_t *)&v412->__shared_owners_;
                              do
                                v414 = __ldaxr(v413);
                              while (__stlxr(v414 - 1, v413));
                              if (!v414)
                              {
                                ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
                                std::__shared_weak_count::__release_weak(v412);
                              }
                            }
                            MEMORY[0x212BC6398](v408, 0x10F0C40B62ED6C6);
                            v415 = (uint64_t)v640;
                            v640 = 0;
                            if (v415)
                            {
                              v416 = *(std::__shared_weak_count **)(v415 + 32);
                              if (v416)
                              {
                                v417 = (unint64_t *)&v416->__shared_owners_;
                                do
                                  v418 = __ldaxr(v417);
                                while (__stlxr(v418 - 1, v417));
                                if (!v418)
                                {
                                  ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
                                  std::__shared_weak_count::__release_weak(v416);
                                }
                              }
                              v419 = *(std::__shared_weak_count **)(v415 + 16);
                              if (v419)
                              {
                                v420 = (unint64_t *)&v419->__shared_owners_;
                                do
                                  v421 = __ldaxr(v420);
                                while (__stlxr(v421 - 1, v420));
                                if (!v421)
                                {
                                  ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                                  std::__shared_weak_count::__release_weak(v419);
                                }
                              }
                              MEMORY[0x212BC6398](v415, 0x10F0C40B62ED6C6);
                            }
                          }
                          v422 = (std::__shared_weak_count *)*((_QWORD *)&v655 + 1);
                          if (*((_QWORD *)&v655 + 1))
                          {
                            v423 = (unint64_t *)(*((_QWORD *)&v655 + 1) + 8);
                            do
                              v424 = __ldaxr(v423);
                            while (__stlxr(v424 - 1, v423));
                            if (!v424)
                            {
                              ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
                              std::__shared_weak_count::__release_weak(v422);
                            }
                          }
                          v425 = *(std::__shared_weak_count **)&v654[16];
                          if (*(_QWORD *)&v654[16])
                          {
                            v426 = (unint64_t *)(*(_QWORD *)&v654[16] + 8);
                            do
                              v427 = __ldaxr(v426);
                            while (__stlxr(v427 - 1, v426));
                            if (!v427)
                            {
                              ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
                              std::__shared_weak_count::__release_weak(v425);
                            }
                          }
LABEL_611:
                          if (v285)
                          {
                            v428 = (const char *)&v632;
                            if (v634 < 0)
                              v428 = (const char *)v632;
                            sub_20E8C003C((uint64_t)&v623, "%s", v428);
                            sub_20E863570((uint64_t)&v623);
                          }
                          sub_20E863570((uint64_t)&v623);
                          v429 = v631;
                          if (v631)
                          {
                            v430 = (unint64_t *)&v631->__shared_owners_;
                            do
                              v431 = __ldaxr(v430);
                            while (__stlxr(v431 - 1, v430));
                            if (!v431)
                            {
                              ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
                              std::__shared_weak_count::__release_weak(v429);
                            }
                          }
                          if (SHIBYTE(v634) < 0)
                            operator delete(v632);
                          *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                          v432 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                          *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0]
                                                                                                + 64);
                          *(_QWORD *)&object[16] = v432;
                          *(_QWORD *)v643 = MEMORY[0x24BEDB848] + 16;
                          if (SHIBYTE(v648.f64[1]) < 0)
                            operator delete(v647);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x212BC6290](&v650[8]);
                          goto LABEL_625;
                        }
                      }
                      memcpy(v345, v322, v344);
                      goto LABEL_524;
                    }
                  }
                  memmove(v336, v325, v324);
                  goto LABEL_505;
                }
              }
              memmove(v329, v327, v328);
              goto LABEL_497;
            }
          }
          memmove(v289, v319, v288);
          goto LABEL_476;
        }
        *(_QWORD *)(a1 + 1960) = *(_QWORD *)(a1 + 1952);
        if (!*(_QWORD *)(a1 + 1896))
          goto LABEL_893;
        v363 = *v279;
        v364 = *(_QWORD *)(a1 + 1856);
        if (v363 < *(double *)(v364 + 32 * *(_QWORD *)(a1 + 1880)))
          goto LABEL_893;
        v365 = *(_QWORD *)(a1 + 1888);
        if (!v365)
          v365 = (*(_QWORD *)(a1 + 1864) - v364) >> 5;
        if (*(double *)(v278 - 8) > *(double *)(v364 + 32 * v365 - 32) + 0.001)
        {
LABEL_893:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 612, (uint64_t)"!(gyro_.empty() || timestamp_buffer_.front() < gyro_.front().timestamp || timestamp_buffer_.back() > gyro_.back().timestamp + kToleranceIMUTimestamp)", 149, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            goto LABEL_883;
          }
        }
        if (!*(_QWORD *)(a1 + 1944))
          goto LABEL_892;
        v366 = *(_QWORD *)(a1 + 1904);
        if (**(double **)(a1 + 2352) < *(double *)(v366 + 32 * *(_QWORD *)(a1 + 1928)))
          goto LABEL_892;
        v367 = *(_QWORD *)(a1 + 1936);
        if (!v367)
          v367 = (*(_QWORD *)(a1 + 1912) - v366) >> 5;
        if (*(double *)(*(_QWORD *)(a1 + 2360) - 8) > *(double *)(v366 + 32 * v367 - 32) + 0.001)
        {
LABEL_892:
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 615, (uint64_t)"!(accel_.empty() || timestamp_buffer_.front() < accel_.front().timestamp || timestamp_buffer_.back() > accel_.back().timestamp + kToleranceIMUTimestamp)", 152, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
LABEL_883:
            abort();
          }
        }
        v368 = *(_QWORD *)(a1 + 1896);
        *(_QWORD *)object = v608;
        object[8] = v368 == 0;
        *(_QWORD *)&object[16] = 0;
        *(_QWORD *)v654 = v608;
        v654[8] = 1;
        *(_QWORD *)&v654[16] = v368;
        sub_20F1AC03C((char **)(a1 + 2376), (uint64_t)object, (uint64_t)v654, v368);
        v369 = *(_QWORD *)(a1 + 1944);
        *(_QWORD *)object = a1 + 1904;
        object[8] = v369 == 0;
        *(_QWORD *)&object[16] = 0;
        *(_QWORD *)v654 = a1 + 1904;
        v654[8] = 1;
        *(_QWORD *)&v654[16] = v369;
        sub_20F1AC03C((char **)(a1 + 2424), (uint64_t)object, (uint64_t)v654, v369);
        v376 = *(_QWORD *)(a1 + 2360);
        v377.f64[0] = *(float64_t *)(v376 - 8);
        v378 = *(_QWORD *)(a1 + 2384);
        v379 = *(double *)(v378 - 32);
        if (v377.f64[0] > v379)
        {
          *(double *)(v378 - 32) = v379 + 0.001;
          v377.f64[0] = *(float64_t *)(v376 - 8);
        }
        v380 = *(_QWORD *)(a1 + 2432);
        v381 = *(double *)(v380 - 32);
        if (v377.f64[0] > v381)
        {
          v377.f64[0] = v381 + 0.001;
          *(double *)(v380 - 32) = v381 + 0.001;
        }
        v382 = (uint64_t *)(a1 + 2400);
        if ((sub_20FDB417C(a1 + 1776, a1 + 2400, *(double **)(a1 + 2376), v378, (uint64_t)v619, v377, v381, v370, v371, v372, v373, v374, v375) & 1) == 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 628, (uint64_t)"imu_sampler_.sample<cv_types::GyroMeasurement>( gyro_out_buffer_, gyro_in_buffer_, timestamp_buffer_)", 101, (uint64_t)"",
               0,
               (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if ((sub_20FDB417C(a1 + 1776, a1 + 2448, *(double **)(a1 + 2424), *(_QWORD *)(a1 + 2432), (uint64_t)v619, v383, v384, v385, v386, v387, v388, v389, v390) & 1) == 0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 630, (uint64_t)"imu_sampler_.sample<cv_types::AccelerometerMeasurement>( accel_out_buffer_, accel_in_buffer_, timestamp_buffer_)", 112,
               (uint64_t)"",
               0,
               (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v392 = *(_QWORD *)(a1 + 2408) - *(_QWORD *)(a1 + 2400);
        if (v392 != *(_QWORD *)(a1 + 2456) - *(_QWORD *)(a1 + 2448))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 631, (uint64_t)"gyro_out_buffer_.size() == accel_out_buffer_.size()", 51, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v392 = *(_QWORD *)(a1 + 2408) - *(_QWORD *)(a1 + 2400);
        }
        v393 = v392 >> 5;
        v394 = *(double **)(a1 + 1960);
        v395 = *(double **)(a1 + 1952);
        v396 = 0x6DB6DB6DB6DB6DB7 * (v394 - v395);
        if (v393 <= v396)
        {
          if (v393 < v396)
          {
            v394 = &v395[7 * v393];
            *(_QWORD *)(a1 + 1960) = v394;
          }
        }
        else
        {
          sub_20F01F51C((char **)(a1 + 1952), v393 - v396);
          v394 = *(double **)(a1 + 1960);
          v395 = *(double **)(a1 + 1952);
        }
        if (v394 != v395)
        {
          v436 = 0;
          v437 = 0;
          v438 = 0;
          do
          {
            v446 = *v382;
            v447 = *(double *)(*v382 + v436);
            if (v447 != *(double *)(*(_QWORD *)(a1 + 2448) + v436))
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 636, (uint64_t)"essentials::ExactlyEqual(gyro_out_buffer_[i].timestamp, accel_out_buffer_[i].timestamp)", 87, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              v446 = *v382;
              v447 = *(double *)(*v382 + v436);
              v395 = *(double **)(a1 + 1952);
            }
            v439 = &v395[v437];
            *v439 = v447;
            v440 = v446 + v436;
            v441 = *(_OWORD *)(v440 + 8);
            v439[3] = *(double *)(v440 + 24);
            *(_OWORD *)(v439 + 1) = v441;
            v442 = *(_QWORD *)(a1 + 2448) + v436;
            v443 = *(_QWORD *)(a1 + 1952) + v437 * 8;
            v444 = *(_OWORD *)(v442 + 8);
            *(_QWORD *)(v443 + 48) = *(_QWORD *)(v442 + 24);
            *(_OWORD *)(v443 + 32) = v444;
            ++v438;
            v445 = *(double **)(a1 + 1960);
            v395 = *(double **)(a1 + 1952);
            v437 += 7;
            v436 += 32;
          }
          while (v438 < 0x6DB6DB6DB6DB6DB7 * (v445 - v395));
          if (v395 != v445)
          {
            v621 = (_OWORD *)(a1 + 2160);
            while (1)
            {
              if (*(_QWORD *)(a1 + 2016))
              {
                v448 = *(_QWORD *)(a1 + 2000);
                v449 = *(_QWORD *)(a1 + 1976);
                v450 = v449 + 176 * v448;
                v452 = *(double *)(v450 + 168);
                v451 = (uint64_t *)(v450 + 168);
                if (v452 <= *v395)
                {
                  v467 = v449 + 176 * v448;
                  v468 = *(unsigned __int8 *)(a1 + 2336);
                  v470 = *(_OWORD *)(v467 + 16);
                  v469 = *(_OWORD *)(v467 + 32);
                  *v621 = *(_OWORD *)v467;
                  *(_OWORD *)(a1 + 2176) = v470;
                  *(_OWORD *)(a1 + 2192) = v469;
                  v471 = *(_OWORD *)(v467 + 96);
                  v473 = *(_OWORD *)(v467 + 48);
                  v472 = *(_OWORD *)(v467 + 64);
                  *(_OWORD *)(a1 + 2240) = *(_OWORD *)(v467 + 80);
                  *(_OWORD *)(a1 + 2256) = v471;
                  *(_OWORD *)(a1 + 2208) = v473;
                  *(_OWORD *)(a1 + 2224) = v472;
                  v475 = *(_OWORD *)(v467 + 128);
                  v474 = *(_OWORD *)(v467 + 144);
                  v476 = *(_OWORD *)(v467 + 112);
                  *(_QWORD *)(a1 + 2320) = *(_QWORD *)(v467 + 160);
                  *(_OWORD *)(a1 + 2288) = v475;
                  *(_OWORD *)(a1 + 2304) = v474;
                  *(_OWORD *)(a1 + 2272) = v476;
                  v477 = *v451;
                  if (!v468)
                    *(_BYTE *)(a1 + 2336) = 1;
                  *(_QWORD *)(a1 + 2328) = v477;
                  sub_20F1E475C(**(_QWORD **)(a1 + 2104), (uint64_t)v621);
                  v478 = (_OWORD *)(*(_QWORD *)(a1 + 1976) + 176 * *(_QWORD *)(a1 + 2000));
                  v478[9] = 0u;
                  v478[10] = 0u;
                  v478[7] = 0u;
                  v478[8] = 0u;
                  v478[5] = 0u;
                  v478[6] = 0u;
                  v478[3] = 0u;
                  v478[4] = 0u;
                  v478[1] = 0u;
                  v478[2] = 0u;
                  *v478 = 0u;
                  v479 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 1984) - *(_QWORD *)(a1 + 1976)) >> 4);
                  v480 = *(_QWORD *)(a1 + 2000) + 1;
                  if (v480 < v479)
                    v479 = 0;
                  *(_QWORD *)(a1 + 2000) = v480 - v479;
                  --*(_QWORD *)(a1 + 2016);
                  *(_DWORD *)(a1 + 2152) = 0;
                  goto LABEL_679;
                }
              }
              v453 = *(_DWORD *)(a1 + 2152);
              if (v453 >= 1)
              {
                v454 = *(_DWORD *)(a1 + 1736);
                if (!(v453 % v454))
                  break;
              }
LABEL_679:
              sub_20F1E5C00(**(_QWORD **)(a1 + 2104), (uint64_t)v395);
              v509 = **(_QWORD **)(a1 + 2104);
              if (!*(_BYTE *)(v509 + 2344) || *(double *)(v509 + 2336) < 0.0)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 694, (uint64_t)"filter_->GetCurrentTimestamp() >= 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v509 = **(_QWORD **)(a1 + 2104);
              }
              if (*(_QWORD *)(a1 + 2064))
              {
                v510 = *(_QWORD *)(a1 + 2056);
                do
                {
                  if (v510)
                  {
                    v512 = *(_QWORD *)(a1 + 2024);
                    v513 = v510 - 1;
                    if (*(double *)(v512 + 144 * v513 + 128) < *(double *)(*(_QWORD *)(v509 + 1840) + 128))
                      break;
                  }
                  else
                  {
                    v512 = *(_QWORD *)(a1 + 2024);
                    v513 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 2032) - v512) >> 4) - 1;
                    if (*(double *)(v512 + 144 * v513 + 128) < *(double *)(*(_QWORD *)(v509 + 1840) + 128))
                      break;
                  }
                  v514 = v512 + 144 * v513;
                  *(_OWORD *)v514 = xmmword_2103A4CD8;
                  *(_OWORD *)(v514 + 16) = unk_2103A4CE8;
                  *(_OWORD *)(v514 + 32) = xmmword_2103A4CF8;
                  *(_OWORD *)(v514 + 48) = unk_2103A4D08;
                  *(_OWORD *)(v514 + 96) = xmmword_2103A4D38;
                  *(_OWORD *)(v514 + 112) = unk_2103A4D48;
                  *(_OWORD *)(v514 + 64) = xmmword_2103A4D18;
                  *(_OWORD *)(v514 + 80) = unk_2103A4D28;
                  *(_QWORD *)(v514 + 128) = 0;
                  *(_QWORD *)(v514 + 136) = 0;
                  v515 = *(_QWORD *)(a1 + 2056);
                  if (!v515)
                    v515 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 2032) - *(_QWORD *)(a1 + 2024)) >> 4);
                  v510 = v515 - 1;
                  *(_QWORD *)(a1 + 2056) = v515 - 1;
                  v511 = *(_QWORD *)(a1 + 2064) - 1;
                  *(_QWORD *)(a1 + 2064) = v511;
                }
                while (v511);
              }
              v516 = *(_OWORD **)(v509 + 1840);
              v517 = *(_OWORD **)(v509 + 1848);
              if (v516 != v517)
              {
                v518 = *(_QWORD *)(a1 + 2056);
                v519 = *(_QWORD *)(a1 + 2024);
                do
                {
                  while (1)
                  {
                    v520 = (_OWORD *)(v519 + 144 * v518);
                    *(_OWORD *)&v650[8] = v516[8];
                    memmove(v520, v516, 0x80uLL);
                    v520[8] = *(_OWORD *)&v650[8];
                    v519 = *(_QWORD *)(a1 + 2024);
                    v521 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 2032) - v519) >> 4);
                    v522 = *(_QWORD *)(a1 + 2056) + 1;
                    v523 = v522 >= v521 ? 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 2032) - v519) >> 4) : 0;
                    v518 = v522 - v523;
                    *(_QWORD *)(a1 + 2056) = v518;
                    v524 = *(_QWORD *)(a1 + 2064);
                    if (v524 == v521)
                      break;
                    *(_QWORD *)(a1 + 2064) = v524 + 1;
                    v516 += 9;
                    if (v516 == v517)
                      goto LABEL_655;
                  }
                  v525 = *(_QWORD *)(a1 + 2048) + 1;
                  if (v525 < v521)
                    v521 = 0;
                  *(_QWORD *)(a1 + 2048) = v525 - v521;
                  v516 += 9;
                }
                while (v516 != v517);
              }
LABEL_655:
              v310 = *(_DWORD *)(a1 + 2152) + 1;
              *(_DWORD *)(a1 + 2152) = v310;
              v395 += 7;
              if (v395 == v445)
                goto LABEL_453;
            }
            v455 = *(uint64_t **)(a1 + 2104);
            if (v453 == v454)
            {
              v456 = *(_QWORD *)(*v455 + 2344);
              *(_QWORD *)(a1 + 2136) = *(_QWORD *)(*v455 + 2336);
              *(_BYTE *)(a1 + 2144) = v456;
              sub_20F1E5D74(*v455);
              v455 = *(uint64_t **)(a1 + 2104);
            }
            v457 = *v455;
            v458 = *v395;
            v459 = *(_QWORD *)(v457 + 1840);
            v460 = *(_QWORD *)(v457 + 1848) - v459;
            if (v460)
            {
              v461 = 0x8E38E38E38E38E39 * (v460 >> 4);
              v462 = v459;
              do
              {
                v463 = v461 >> 1;
                v464 = v462 + 144 * (v461 >> 1);
                v465 = *(double *)(v464 + 128);
                v466 = v464 + 144;
                v461 += ~(v461 >> 1);
                if (v465 > v458)
                  v461 = v463;
                else
                  v462 = v466;
              }
              while (v461);
              if (v459 != v462)
              {
                if (*(double *)(v462 - 16) <= v458)
                {
                  v459 = v462;
                  if (*(double *)(v462 + 128) >= v458)
                  {
LABEL_678:
                    sub_20FC8CB5C((float64x2_t *)(v462 - 144), (float64x2_t *)v462, (float64x2_t *)object, v458, v391);
                    v481.f64[0] = *(float64_t *)(v462 + 16);
                    v482 = *(int64x2_t *)(v462 + 32);
                    _Q4 = *(float64x2_t *)(v462 + 64);
                    v484.f64[0] = *(float64_t *)(v462 - 128);
                    _Q17 = *(_OWORD *)(v462 - 80);
                    v486 = *(double *)(v462 + 112);
                    v487 = *(float64x2_t *)(v462 + 96);
                    _Q1 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v462, v482);
                    v481.f64[1] = *(float64_t *)(v462 + 48);
                    v489 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v462, v482), v487.f64[0]), _Q1, v487, 1), v481, v486);
                    _Q0 = vmulq_f64(_Q4, v487);
                    _Q1.f64[0] = *(float64_t *)(v462 + 104);
                    __asm { FMLA            D0, D1, V4.D[1] }
                    _Q0.f64[0] = _Q0.f64[0] + *(double *)(v462 + 80) * v486;
                    _Q1.f64[0] = *(float64_t *)(v462 - 32);
                    _Q2 = *(float64x2_t *)(v462 - 48);
                    v484.f64[1] = *(float64_t *)(v462 - 96);
                    v495 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)(v462 - 144), *(int64x2_t *)(v462 - 112)), _Q2.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)(v462 - 144), *(int64x2_t *)(v462 - 112)), _Q2, 1), v484, _Q1.f64[0]);
                    _Q2.f64[0] = *(float64_t *)(v462 - 40);
                    __asm { FMLA            D4, D2, V17.D[1] }
                    _Q1.f64[0] = _Q4.f64[0] + *(double *)(v462 - 64) * _Q1.f64[0];
                    _Q2.f64[0] = *(double *)(v462 + 128) - *(double *)(v462 - 16);
                    v496 = vsubq_f64(_Q1, _Q0);
                    v497 = vdivq_f64(vsubq_f64(v495, v489), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q2.f64[0], 0));
                    *(_QWORD *)&v496.f64[0] = *(_OWORD *)&vdivq_f64(v496, _Q2);
                    v495.f64[1] = *(float64_t *)&v643[16];
                    _Q4.f64[0] = *(float64_t *)&object[16];
                    _V6.D[1] = v646;
                    v499 = (float64x2_t)vzip1q_s64(*(int64x2_t *)object, *(int64x2_t *)&v643[8]);
                    _Q4.f64[1] = v644.f64[0];
                    v500 = (float64x2_t)vzip2q_s64(*(int64x2_t *)object, *(int64x2_t *)&v643[8]);
                    _D16 = v648.f64[1];
                    __asm { FMLA            D18, D16, V6.D[1] }
                    v495.f64[0] = _D18 + *((double *)&v646 + 1) * v649;
                    v503 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v499, v648.f64[0]), v500, v648, 1), _Q4, v649));
                    v504 = *(_OWORD *)(a1 + 2280);
                    v505 = *(_QWORD *)(a1 + 2296);
                    v506 = *(_OWORD *)(a1 + 2232);
                    v489.f64[0] = *(float64_t *)(a1 + 2248);
                    v507 = *(uint64_t **)(a1 + 2104);
                    v508 = *v395;
                    *(float64x2_t *)object = v499;
                    *(_QWORD *)&v643[16] = v646;
                    *(float64x2_t *)v643 = v500;
                    *(_QWORD *)&object[16] = v645;
                    v645 = *((_QWORD *)&v646 + 1);
                    v644 = _Q4;
                    v646 = v506;
                    v648 = v497;
                    v647 = *(void **)&v489.f64[0];
                    v649 = v496.f64[0];
                    *(_OWORD *)v650 = v504;
                    *(_QWORD *)&v650[16] = v505;
                    v652 = *(_OWORD *)&vnegq_f64(v495);
                    v653 = v508;
                    v651 = v503;
                    sub_20F1E475C(*v507, (uint64_t)object);
                    goto LABEL_679;
                  }
                }
                else
                {
                  v459 = v462;
                }
              }
            }
            v462 = v459;
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/MLPosePredictor.cpp", 825, (uint64_t)"iter != poses.begin() && (iter - 1)->timestamp <= timestamp && timestamp <= iter->timestamp", 91, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            goto LABEL_678;
          }
        }
      }
      v310 = *(_DWORD *)(a1 + 2152);
LABEL_453:
      if (5 * *(int *)(a1 + 1736) >= v310)
      {
        if (*(_BYTE *)(a1 + 2336))
        {
          v316 = *(double *)(a1 + 2328);
LABEL_853:
          sub_20F1A6E20((_QWORD *)a1, v316 - *(double *)(a1 + 1744));
          return;
        }
LABEL_852:
        v316 = 0.0;
        goto LABEL_853;
      }
      if (!*v611
        || (sub_20F1A6D2C(&v635), **(int **)(v635 + 56) > 4)
        || (v311 = *(unsigned __int8 *)(v635 + 72),
            v312 = sub_20E8C31DC(v635, "OSLogSurrogateAppender", 1, 0),
            v313 = v312,
            !v311)
        && !v312)
      {
LABEL_833:
        kdebug_trace();
        v604 = **(_QWORD **)(a1 + 2104);
        if (*(_BYTE *)(v604 + 1904))
          *(_BYTE *)(v604 + 1904) = 0;
        if (*(_BYTE *)(v604 + 2040))
          *(_BYTE *)(v604 + 2040) = 0;
        if (*(_BYTE *)(v604 + 2176))
          *(_BYTE *)(v604 + 2176) = 0;
        if (*(_BYTE *)(v604 + 2208))
          *(_BYTE *)(v604 + 2208) = 0;
        *(_OWORD *)(v604 + 2320) = 0u;
        *(_OWORD *)(v604 + 2304) = 0u;
        *(_OWORD *)(v604 + 2288) = 0u;
        *(_OWORD *)(v604 + 2352) = 0u;
        if (*(_BYTE *)(v604 + 2224))
          *(_BYTE *)(v604 + 2224) = 0;
        if (*(_BYTE *)(v604 + 2280))
          *(_BYTE *)(v604 + 2280) = 0;
        if (*(_BYTE *)(v604 + 2344))
          *(_BYTE *)(v604 + 2344) = 0;
        *(_DWORD *)(v604 + 2368) = 0;
        v605 = *(void **)(v604 + 1816);
        v606 = *(_QWORD *)(v604 + 1824) - (_QWORD)v605;
        if (v606 >= 1)
          bzero(v605, 4 * (((unint64_t)v606 >> 2) - ((unint64_t)v606 > 3)) + 4);
        *(_QWORD *)(v604 + 1848) = *(_QWORD *)(v604 + 1840);
        *(_QWORD *)(a1 + 2128) = 0xBFF0000000000000;
        *(_BYTE *)(a1 + 2136) = 0;
        *(_BYTE *)(a1 + 2144) = 0;
        *(_BYTE *)(a1 + 2112) = 0;
        *(_BYTE *)(a1 + 2120) = 0;
        if (*(_BYTE *)(a1 + 2336))
          *(_BYTE *)(a1 + 2336) = 0;
        *(_DWORD *)(a1 + 2152) = 0;
        *(_QWORD *)(a1 + 2344) = *(_QWORD *)(a1 + 1728);
        *(_QWORD *)(a1 + 2000) = 0;
        *(_QWORD *)(a1 + 2016) = 0;
        *(_QWORD *)(a1 + 2008) = 0;
        *(_QWORD *)(a1 + 2088) = 0xBFF0000000000000;
        *(_QWORD *)(a1 + 2048) = 0;
        *(_QWORD *)(a1 + 2064) = 0;
        *(_QWORD *)(a1 + 2056) = 0;
        goto LABEL_852;
      }
      sub_20E863438((uint64_t)object);
      sub_20E86A980(&object[16], (uint64_t)"[MLPosePredictor] Reset MLFilter due to long propagation.", 57);
      if ((v650[0] & 0x10) != 0)
      {
        v397 = v649;
        if (*(_QWORD *)&v649 < (unint64_t)v646)
        {
          v649 = *(double *)&v646;
          v397 = *(double *)&v646;
        }
        v398 = (const void **)&v645;
      }
      else
      {
        if ((v650[0] & 8) == 0)
        {
          v314 = 0;
          HIBYTE(v634) = 0;
          v315 = &v632;
          goto LABEL_712;
        }
        v398 = (const void **)&v643[16];
        v397 = v644.f64[1];
      }
      v526 = *v398;
      v314 = *(_QWORD *)&v397 - (_QWORD)*v398;
      if (v314 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v314 >= 0x17)
      {
        v527 = (v314 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v314 | 7) != 0x17)
          v527 = v314 | 7;
        v528 = v527 + 1;
        v315 = operator new(v527 + 1);
        v633 = v314;
        v634 = v528 | 0x8000000000000000;
        v632 = v315;
      }
      else
      {
        HIBYTE(v634) = LOBYTE(v397) - *(_BYTE *)v398;
        v315 = &v632;
        if (!v314)
        {
LABEL_712:
          *((_BYTE *)v315 + v314) = 0;
          v623 = &v635;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v625 = std::chrono::system_clock::now().__d_.__rep_;
          v626 = 4;
          v627 = "unknown file";
          v628 = 685;
          v630 = 0;
          v631 = 0;
          v629 = "unknown function";
          if (v634 >= 0)
            v529 = (const char *)&v632;
          else
            v529 = (const char *)v632;
          v530 = *(_QWORD *)v623;
          if (*(char *)(*(_QWORD *)v623 + 39) < 0)
          {
            v532 = *(const char **)(v530 + 16);
            v531 = *(_QWORD *)(v530 + 24);
          }
          else
          {
            v531 = *(unsigned __int8 *)(*(_QWORD *)v623 + 39);
            v532 = (const char *)(*(_QWORD *)v623 + 16);
          }
          v622 = *(_QWORD *)v623 + 16;
          v533 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v533 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v654);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v654);
            if ((_BYTE)v655 && (v654[23] & 0x80000000) != 0)
              operator delete(*(void **)v654);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v534 = byte_254A4A4F8;
          else
            v534 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v535 = byte_254A4A4F8[23];
          else
            v535 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v654 = os_log_create(v534, v532);
          v536 = &v654[8];
          if (v535 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v535 >= 0x17)
          {
            __dstc = v532;
            v537 = v530;
            v538 = v313;
            v539 = v529;
            v540 = v311;
            v541 = (v535 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v535 | 7) != 0x17)
              v541 = v535 | 7;
            v542 = v541 + 1;
            v536 = operator new(v541 + 1);
            *(_QWORD *)&v654[16] = v535;
            *(_QWORD *)&v655 = v542 | 0x8000000000000000;
            *(_QWORD *)&v654[8] = v536;
            v311 = v540;
            v529 = v539;
            v313 = v538;
            v530 = v537;
            v532 = __dstc;
          }
          else
          {
            BYTE7(v655) = v535;
            if (!v535)
            {
LABEL_733:
              v536[v535] = 0;
              BYTE8(v655) = 1;
              v543 = (char *)&v656;
              if (v531 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v531 >= 0x17)
              {
                v544 = (v531 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v531 | 7) != 0x17)
                  v544 = v531 | 7;
                v545 = v544 + 1;
                v543 = (char *)operator new(v544 + 1);
                v657 = (const char *)v531;
                v658 = v545 | 0x8000000000000000;
                v656 = v543;
              }
              else
              {
                HIBYTE(v658) = v531;
                if (!v531)
                {
LABEL_741:
                  v543[v531] = 0;
                  LOBYTE(v659) = 1;
                  v546 = *(NSObject **)v654;
                  if (SHIBYTE(v658) < 0)
                    operator delete(v656);
                  if (BYTE8(v655) && SBYTE7(v655) < 0)
                    operator delete(*(void **)&v654[8]);
                  if (*(_QWORD *)v654)
                    os_release(*(void **)v654);
                  if (!v313 || !*(_QWORD *)(v313 + 24))
                  {
                    os_log_type_enabled(v546, OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v654 = 136315138;
                    *(_QWORD *)&v654[4] = v529;
                    v553 = (void *)_os_log_send_and_compose_impl();
                    if (v553)
                      free(v553);
                    goto LABEL_819;
                  }
                  v547 = _os_log_pack_size();
                  v548 = (std::__shared_weak_count_vtbl *)operator new(v547, (std::align_val_t)8uLL);
                  v549 = (std::__shared_weak_count *)operator new();
                  v549->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v549->__shared_owners_ = 0;
                  v549->__shared_weak_owners_ = 0;
                  v549[1].__vftable = v548;
                  *(_QWORD *)&v636 = v548;
                  *((_QWORD *)&v636 + 1) = v548;
                  v638 = 0;
                  v639 = 0;
                  v637 = v549;
                  v550 = strlen(v529);
                  if (v550 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  v551 = v550;
                  if (v550 >= 0x17)
                  {
                    v554 = (v550 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v550 | 7) != 0x17)
                      v554 = v550 | 7;
                    v555 = v554 + 1;
                    v552 = (uint64_t *)operator new(v554 + 1);
                    *(_QWORD *)&v641 = v551;
                    *((_QWORD *)&v641 + 1) = v555 | 0x8000000000000000;
                    v640 = v552;
                  }
                  else
                  {
                    HIBYTE(v641) = v550;
                    v552 = (uint64_t *)&v640;
                    if (!v550)
                    {
LABEL_760:
                      *((_BYTE *)v552 + v551) = 0;
                      v556 = (uint64_t)v640;
                      v660[0] = v641;
                      *(_QWORD *)((char *)v660 + 7) = *(_QWORD *)((char *)&v641 + 7);
                      v557 = HIBYTE(v641);
                      v558 = operator new(0x38uLL);
                      v558[1] = 0;
                      v558[2] = 0;
                      v558[3] = off_24C9ABC20;
                      *v558 = &off_24C9ABBD0;
                      v559 = v660[0];
                      v558[4] = v556;
                      v558[5] = v559;
                      *(_QWORD *)((char *)v558 + 47) = *(_QWORD *)((char *)v660 + 7);
                      *((_BYTE *)v558 + 55) = v557;
                      v660[0] = 0;
                      *(_QWORD *)((char *)v660 + 7) = 0;
                      v560 = v639;
                      v638 = (char *)(v558 + 3);
                      v639 = (std::__shared_weak_count *)v558;
                      if (v560)
                      {
                        v561 = (unint64_t *)&v560->__shared_owners_;
                        do
                          v562 = __ldaxr(v561);
                        while (__stlxr(v562 - 1, v561));
                        if (!v562)
                        {
                          ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
                          std::__shared_weak_count::__release_weak(v560);
                        }
                      }
                      *(_OWORD *)v654 = v636;
                      v563 = v638;
                      *(_QWORD *)&v654[16] = v637;
                      if (v637)
                      {
                        v564 = (unint64_t *)&v637->__shared_owners_;
                        do
                          v565 = __ldxr(v564);
                        while (__stxr(v565 + 1, v564));
                      }
                      v566 = v639;
                      *(_QWORD *)&v655 = v563;
                      *((_QWORD *)&v655 + 1) = v639;
                      if (v639)
                      {
                        v567 = (unint64_t *)&v639->__shared_owners_;
                        do
                          v568 = __ldxr(v567);
                        while (__stxr(v568 + 1, v567));
                        v656 = v563;
                        do
                          v569 = __ldaxr(v567);
                        while (__stlxr(v569 - 1, v567));
                        if (!v569)
                        {
                          ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
                          std::__shared_weak_count::__release_weak(v566);
                        }
                      }
                      else
                      {
                        v656 = v563;
                      }
                      v570 = v637;
                      if (v637)
                      {
                        v571 = (unint64_t *)&v637->__shared_owners_;
                        do
                          v572 = __ldaxr(v571);
                        while (__stlxr(v572 - 1, v571));
                        if (!v572)
                        {
                          ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
                          std::__shared_weak_count::__release_weak(v570);
                        }
                      }
                      v573 = *(_QWORD *)v654;
                      if (v656[31] >= 0)
                        v574 = v656 + 8;
                      else
                        v574 = (char *)*((_QWORD *)v656 + 1);
                      v575 = _os_log_pack_fill();
                      *(_DWORD *)v575 = 136315138;
                      *(_QWORD *)(v575 + 4) = v574;
                      v576 = operator new();
                      v577 = *(unsigned __int8 *)(v530 + 39);
                      v578 = v622;
                      if ((v577 & 0x80u) != 0)
                      {
                        v578 = *(_QWORD *)(v530 + 16);
                        v577 = *(_QWORD *)(v530 + 24);
                      }
                      *(_QWORD *)v576 = v573;
                      *(_OWORD *)(v576 + 8) = *(_OWORD *)&v654[8];
                      *(_QWORD *)&v654[8] = 0;
                      *(_QWORD *)&v654[16] = 0;
                      *(_OWORD *)(v576 + 24) = v655;
                      v655 = 0uLL;
                      *(_QWORD *)(v576 + 40) = v578;
                      *(_QWORD *)(v576 + 48) = v577;
                      *(_BYTE *)(v576 + 56) = 16;
                      v640 = 0;
                      *(_QWORD *)&v636 = v576;
                      (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v313 + 24) + 40))(*(_QWORD *)(v313 + 24), &v636);
                      v579 = v636;
                      *(_QWORD *)&v636 = 0;
                      if (v579)
                      {
                        v580 = *(std::__shared_weak_count **)(v579 + 32);
                        if (v580)
                        {
                          v581 = (unint64_t *)&v580->__shared_owners_;
                          do
                            v582 = __ldaxr(v581);
                          while (__stlxr(v582 - 1, v581));
                          if (!v582)
                          {
                            ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
                            std::__shared_weak_count::__release_weak(v580);
                          }
                        }
                        v583 = *(std::__shared_weak_count **)(v579 + 16);
                        if (v583)
                        {
                          v584 = (unint64_t *)&v583->__shared_owners_;
                          do
                            v585 = __ldaxr(v584);
                          while (__stlxr(v585 - 1, v584));
                          if (!v585)
                          {
                            ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
                            std::__shared_weak_count::__release_weak(v583);
                          }
                        }
                        MEMORY[0x212BC6398](v579, 0x10F0C40B62ED6C6);
                        v586 = (uint64_t)v640;
                        v640 = 0;
                        if (v586)
                        {
                          v587 = *(std::__shared_weak_count **)(v586 + 32);
                          if (v587)
                          {
                            v588 = (unint64_t *)&v587->__shared_owners_;
                            do
                              v589 = __ldaxr(v588);
                            while (__stlxr(v589 - 1, v588));
                            if (!v589)
                            {
                              ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
                              std::__shared_weak_count::__release_weak(v587);
                            }
                          }
                          v590 = *(std::__shared_weak_count **)(v586 + 16);
                          if (v590)
                          {
                            v591 = (unint64_t *)&v590->__shared_owners_;
                            do
                              v592 = __ldaxr(v591);
                            while (__stlxr(v592 - 1, v591));
                            if (!v592)
                            {
                              ((void (*)(std::__shared_weak_count *))v590->__on_zero_shared)(v590);
                              std::__shared_weak_count::__release_weak(v590);
                            }
                          }
                          MEMORY[0x212BC6398](v586, 0x10F0C40B62ED6C6);
                        }
                      }
                      v593 = (std::__shared_weak_count *)*((_QWORD *)&v655 + 1);
                      if (*((_QWORD *)&v655 + 1))
                      {
                        v594 = (unint64_t *)(*((_QWORD *)&v655 + 1) + 8);
                        do
                          v595 = __ldaxr(v594);
                        while (__stlxr(v595 - 1, v594));
                        if (!v595)
                        {
                          ((void (*)(std::__shared_weak_count *))v593->__on_zero_shared)(v593);
                          std::__shared_weak_count::__release_weak(v593);
                        }
                      }
                      v596 = *(std::__shared_weak_count **)&v654[16];
                      if (*(_QWORD *)&v654[16])
                      {
                        v597 = (unint64_t *)(*(_QWORD *)&v654[16] + 8);
                        do
                          v598 = __ldaxr(v597);
                        while (__stlxr(v598 - 1, v597));
                        if (!v598)
                        {
                          ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
                          std::__shared_weak_count::__release_weak(v596);
                        }
                      }
LABEL_819:
                      if (v311)
                      {
                        v599 = (const char *)&v632;
                        if (v634 < 0)
                          v599 = (const char *)v632;
                        sub_20E8C003C((uint64_t)&v623, "%s", v599);
                        sub_20E863570((uint64_t)&v623);
                      }
                      sub_20E863570((uint64_t)&v623);
                      v600 = v631;
                      if (v631)
                      {
                        v601 = (unint64_t *)&v631->__shared_owners_;
                        do
                          v602 = __ldaxr(v601);
                        while (__stlxr(v602 - 1, v601));
                        if (!v602)
                        {
                          ((void (*)(std::__shared_weak_count *))v600->__on_zero_shared)(v600);
                          std::__shared_weak_count::__release_weak(v600);
                        }
                      }
                      if (SHIBYTE(v634) < 0)
                        operator delete(v632);
                      *(_QWORD *)object = *MEMORY[0x24BEDB7F0];
                      v603 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                      *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                      *(_QWORD *)&object[16] = v603;
                      *(_QWORD *)v643 = MEMORY[0x24BEDB848] + 16;
                      if (SHIBYTE(v648.f64[1]) < 0)
                        operator delete(v647);
                      std::streambuf::~streambuf();
                      std::iostream::~basic_iostream();
                      MEMORY[0x212BC6290](&v650[8]);
                      goto LABEL_833;
                    }
                  }
                  memcpy(v552, v529, v551);
                  goto LABEL_760;
                }
              }
              memmove(v543, v532, v531);
              goto LABEL_741;
            }
          }
          memmove(v536, v534, v535);
          goto LABEL_733;
        }
      }
      memmove(v315, v526, v314);
      goto LABEL_712;
    }
    while (1)
    {
      *(double *)(a1 + 2128) = v276;
      v290 = *(_QWORD *)(a1 + 2368);
      if ((unint64_t)v277 >= v290)
        break;
      *v277 = v276;
      v278 = (uint64_t)(v277 + 1);
LABEL_423:
      *(_QWORD *)(a1 + 2360) = v278;
      v276 = *(double *)(a1 + 2128) + *(double *)(a1 + 2344);
      v277 = (double *)v278;
      if (v276 > v43)
        goto LABEL_403;
    }
    v291 = *v619;
    v292 = (char *)v277 - (char *)*v619;
    v293 = v292 >> 3;
    v294 = (v292 >> 3) + 1;
    if (v294 >> 61)
      sub_20E867F44();
    v295 = v290 - (_QWORD)v291;
    if (v295 >> 2 > v294)
      v294 = v295 >> 2;
    if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8)
      v296 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v296 = v294;
    if (v296)
    {
      if (v296 >> 61)
        sub_20E877A38();
      v297 = operator new(8 * v296);
      v298 = (double *)&v297[8 * v293];
      *v298 = v276;
      v278 = (uint64_t)(v298 + 1);
      v299 = (char *)v277 - (char *)v291;
      if (v277 == v291)
        goto LABEL_439;
    }
    else
    {
      v297 = 0;
      v298 = (double *)(8 * v293);
      *(double *)(8 * v293) = v276;
      v278 = 8 * v293 + 8;
      v299 = (char *)v277 - (char *)v291;
      if (v277 == v291)
        goto LABEL_439;
    }
    v300 = v299 - 8;
    if (v300 >= 0x168)
    {
      v303 = ((char *)(v277 - 1) - (char *)v291) & 0xFFFFFFFFFFFFFFF8;
      if (&v297[v292 - 8 - v303] > &v297[v292 - 8])
      {
        v301 = v277;
      }
      else if ((double *)((char *)v277 - v303 - 8) > v277 - 1)
      {
        v301 = v277;
      }
      else if ((unint64_t)((char *)v277 - v297 - v292) >= 0x20)
      {
        v304 = (v300 >> 3) + 1;
        v305 = 8 * (v304 & 0x3FFFFFFFFFFFFFFCLL);
        v301 = &v277[v305 / 0xFFFFFFFFFFFFFFF8];
        v298 = (double *)((char *)v298 - v305);
        v306 = &v297[8 * v293 - 16];
        v307 = v277 - 2;
        v308 = v304 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v309 = *(_OWORD *)v307;
          *(v306 - 1) = *((_OWORD *)v307 - 1);
          *v306 = v309;
          v306 -= 2;
          v307 -= 4;
          v308 -= 4;
        }
        while (v308);
        if (v304 == (v304 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_439:
          *(_QWORD *)(a1 + 2352) = v298;
          *(_QWORD *)(a1 + 2360) = v278;
          *(_QWORD *)(a1 + 2368) = &v297[8 * v296];
          if (v291)
            operator delete(v291);
          goto LABEL_423;
        }
      }
      else
      {
        v301 = v277;
      }
    }
    else
    {
      v301 = v277;
    }
    do
    {
      v302 = *((_QWORD *)v301-- - 1);
      *((_QWORD *)v298-- - 1) = v302;
    }
    while (v301 != v291);
    goto LABEL_439;
  }
  v4 = *(_QWORD *)(a1 + 2016);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 1944) && *(_QWORD *)(a1 + 1896))
    {
      v5 = *(_QWORD *)(a1 + 2000);
      v6 = *(_QWORD *)(a1 + 1984);
      v7 = *(_QWORD *)(a1 + 1976);
      do
      {
        v8 = *(_QWORD *)(a1 + 1856);
        v9 = *(_QWORD *)(a1 + 1880) % (unint64_t)((*(_QWORD *)(a1 + 1864) - v8) >> 5);
        v10 = *(double *)(*(_QWORD *)(a1 + 1904)
                        + 32
                        * (*(_QWORD *)(a1 + 1928)
                         % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1912) - *(_QWORD *)(a1 + 1904)) >> 5)));
        if (v10 < *(double *)(v8 + 32 * v9))
          v10 = *(double *)(v8 + 32 * v9);
        if (*(double *)(v7 + 176 * (v5 % (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 4))) + 168) >= v10)
          break;
        v11 = (_OWORD *)(v7 + 176 * v5);
        v11[9] = 0uLL;
        v11[10] = 0uLL;
        v11[7] = 0uLL;
        v11[8] = 0uLL;
        v11[5] = 0uLL;
        v11[6] = 0uLL;
        v11[3] = 0uLL;
        v11[4] = 0uLL;
        v11[1] = 0uLL;
        v11[2] = 0uLL;
        *v11 = 0uLL;
        v6 = *(_QWORD *)(a1 + 1984);
        v7 = *(_QWORD *)(a1 + 1976);
        v12 = 0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 4);
        v13 = *(_QWORD *)(a1 + 2000) + 1;
        if (v13 < v12)
          v12 = 0;
        v5 = v13 - v12;
        *(_QWORD *)(a1 + 2000) = v5;
        v4 = *(_QWORD *)(a1 + 2016) - 1;
        *(_QWORD *)(a1 + 2016) = v4;
        if (!v4)
          return;
      }
      while (*(_QWORD *)(a1 + 1944) && *(_QWORD *)(a1 + 1896));
    }
    if (v4 >= 2)
    {
      v14 = *(_QWORD *)(a1 + 2000);
      v15 = *(_QWORD *)(a1 + 1984);
      v16 = *(_QWORD *)(a1 + 1976);
      while (1)
      {
        v17 = 0x2E8BA2E8BA2E8BA3 * ((v15 - v16) >> 4);
        v18 = *(double *)(v16 + 176 * ((v14 + 1) % v17) + 168);
        v19 = v14 % v17;
        if (vabdd_f64(v18 - *(double *)(v16 + 176 * v19 + 168), *(double *)(a1 + 1720)) / *(double *)(a1 + 1720) <= 0.05)
          break;
        v20 = (_OWORD *)(v16 + 176 * v14);
        v20[9] = 0uLL;
        v20[10] = 0uLL;
        v20[7] = 0uLL;
        v20[8] = 0uLL;
        v20[5] = 0uLL;
        v20[6] = 0uLL;
        v20[3] = 0uLL;
        v20[4] = 0uLL;
        v20[1] = 0uLL;
        v20[2] = 0uLL;
        *v20 = 0uLL;
        v15 = *(_QWORD *)(a1 + 1984);
        v16 = *(_QWORD *)(a1 + 1976);
        v21 = 0x2E8BA2E8BA2E8BA3 * ((v15 - v16) >> 4);
        v22 = *(_QWORD *)(a1 + 2000) + 1;
        if (v22 < v21)
          v21 = 0;
        v14 = v22 - v21;
        *(_QWORD *)(a1 + 2000) = v14;
        v23 = *(_QWORD *)(a1 + 2016) - 1;
        *(_QWORD *)(a1 + 2016) = v23;
        if (v23 <= 1)
          return;
      }
      if (*(_QWORD *)(a1 + 1944) >= 2uLL && *(_QWORD *)(a1 + 1896) >= 2uLL)
      {
        v24 = *(_QWORD *)(a1 + 1936);
        v25 = *(_QWORD *)(a1 + 1904);
        if (!v24)
          v24 = (*(_QWORD *)(a1 + 1912) - v25) >> 5;
        v26 = (double *)(v25 + 32 * v24 - 32);
        v27 = *(_QWORD *)(a1 + 1888);
        v28 = *(_QWORD *)(a1 + 1856);
        if (!v27)
          v27 = (*(_QWORD *)(a1 + 1864) - v28) >> 5;
        v29 = *(double *)(v28 + 32 * v27 - 32);
        if (v29 >= *v26)
          v29 = *v26;
        if (v29 >= v18)
        {
          sub_20F1E475C(**(_QWORD **)(a1 + 2104), v16 + 176 * v19);
          v30 = *(_QWORD *)(a1 + 2000);
          v31 = *(_QWORD *)(a1 + 1976);
          *(_QWORD *)(a1 + 2112) = *(_QWORD *)(v31
                                             + 176
                                             * (v30 % (0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 1984) - v31) >> 4)))
                                             + 168);
          *(_BYTE *)(a1 + 2120) = 1;
          v32 = (_OWORD *)(v31 + 176 * v30);
          v32[9] = 0u;
          v32[10] = 0u;
          v32[7] = 0u;
          v32[8] = 0u;
          v32[5] = 0u;
          v32[6] = 0u;
          v32[3] = 0u;
          v32[4] = 0u;
          v32[1] = 0u;
          v32[2] = 0u;
          *v32 = 0u;
          v33 = *(_QWORD *)(a1 + 1976);
          v34 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 1984) - v33) >> 4);
          v35 = *(_QWORD *)(a1 + 2000) + 1;
          if (v35 >= v34)
            v36 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 1984) - v33) >> 4);
          else
            v36 = 0;
          v37 = v35 - v36;
          *(_QWORD *)(a1 + 2000) = v37;
          --*(_QWORD *)(a1 + 2016);
          *(double *)(a1 + 2128) = *(double *)(v33 + 176 * (v37 % v34) + 168) - *(double *)(a1 + 1728);
          *(_DWORD *)(a1 + 2152) = *(_DWORD *)(a1 + 1736);
          goto LABEL_35;
        }
      }
    }
  }
}

void sub_20F1AB170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  if (*(_BYTE *)(v55 - 200) && *(char *)(v55 - 201) < 0)
    operator delete(*(void **)(v55 - 224));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a28);
  if (a45 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_20F1AB3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  uint64_t v56;

  if (a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v56 - 224);
  _Unwind_Resume(a1);
}

void sub_20F1AB438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  if (a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v55 - 224);
  _Unwind_Resume(a1);
}

void sub_20F1AB444()
{
  JUMPOUT(0x20F1AB55CLL);
}

void sub_20F1AB44C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_20F1AB4D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_20F1AB4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *object,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  if (a55 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714(v55 - 224);
  _Unwind_Resume(a1);
}

void sub_20F1AB4F8()
{
  JUMPOUT(0x20F1AB5B4);
}

void sub_20F1AB504(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_20F1AB518(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_20F1AB530()
{
  JUMPOUT(0x20F1AB55CLL);
}

void sub_20F1AB538()
{
  JUMPOUT(0x20F1AB548);
}

void sub_20F1AB574(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E863714(v1 - 224);
  _Unwind_Resume(a1);
}

void sub_20F1AB588()
{
  JUMPOUT(0x20F1AB5B4);
}

void sub_20F1AB590()
{
  JUMPOUT(0x20F1AB5A0);
}

void sub_20F1AB5D4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F1AB5E4()
{
  JUMPOUT(0x20F1AB5F0);
}

void sub_20F1AB5F8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[24];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)v38 = v10;
    *(_QWORD *)&v38[8] = v10;
    *(_QWORD *)&v38[16] = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v39 = 0uLL;
    v40 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = *(_QWORD *)v38;
    v17 = _os_log_pack_fill();
    v18 = *a5;
    *(_DWORD *)v17 = 134217984;
    *(_QWORD *)(v17 + 4) = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = *(_OWORD *)&v38[8];
    *(_OWORD *)&v38[8] = 0uLL;
    *(_OWORD *)(v19 + 24) = v39;
    v39 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(std::__shared_weak_count **)&v38[16];
    if (*(_QWORD *)&v38[16])
    {
      v33 = (unint64_t *)(*(_QWORD *)&v38[16] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    *(_DWORD *)v38 = 134217984;
    *(_QWORD *)&v38[4] = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20F1AB9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1ABA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1ABA14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F1ABA38(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F1ABFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1ABFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1ABFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

char *sub_20F1AC03C(char **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v8;
  char *result;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  __int128 v18;
  char *v19;
  void **v20;
  char *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;

  v8 = (uint64_t)a1[2];
  result = *a1;
  if (__sz <= (v8 - (uint64_t)result) >> 5)
  {
    v21 = a1[1];
    v20 = (void **)(a1 + 1);
    v19 = v21;
    v22 = (v21 - result) >> 5;
    v23 = *(_QWORD **)a2;
    if (v22 >= __sz)
    {
      v29 = *(_QWORD *)(a2 + 16);
      if (*(_BYTE *)(a3 + 8))
      {
        if (*(_BYTE *)(a2 + 8))
        {
LABEL_49:
          v19 = result;
          v16 = result;
          goto LABEL_59;
        }
        v16 = result;
        do
        {
          v30 = *v23 + 32 * ((v29 + v23[3]) % (unint64_t)((uint64_t)(v23[1] - *v23) >> 5));
          *(_QWORD *)v16 = *(_QWORD *)v30;
          v31 = *(_OWORD *)(v30 + 8);
          *((_QWORD *)v16 + 3) = *(_QWORD *)(v30 + 24);
          *(_OWORD *)(v16 + 8) = v31;
          ++v29;
          v16 += 32;
        }
        while (v29 != v23[5]);
      }
      else
      {
        v38 = *(_QWORD *)(a3 + 16);
        if (!*(_BYTE *)(a2 + 8) && v29 == v38)
          goto LABEL_49;
        v39 = v29 + 1;
        v16 = result;
        do
        {
          do
          {
            v40 = v39;
            v41 = *v23 + 32 * ((v39 + v23[3] - 1) % (unint64_t)((uint64_t)(v23[1] - *v23) >> 5));
            *(_QWORD *)v16 = *(_QWORD *)v41;
            v42 = *(_OWORD *)(v41 + 8);
            *((_QWORD *)v16 + 3) = *(_QWORD *)(v41 + 24);
            *(_OWORD *)(v16 + 8) = v42;
            v16 += 32;
            v39 = v40 + 1;
          }
          while (v40 == v23[5]);
        }
        while (v38 != v40);
      }
      v19 = result;
      goto LABEL_59;
    }
    v24 = *(_QWORD *)(a2 + 16);
    v25 = v24 + v22;
    v26 = v24 + v22 == v23[5];
    if (v24 + v22 == v23[5])
    {
      if (*(_BYTE *)(a2 + 8))
      {
        if (*(_BYTE *)(a3 + 8))
        {
          v16 = v19;
          result = v19;
          goto LABEL_59;
        }
        v37 = *(_QWORD *)(a3 + 16);
        result = v19;
        goto LABEL_56;
      }
      do
      {
        v27 = *v23 + 32 * ((v24 + v23[3]) % (unint64_t)((uint64_t)(v23[1] - *v23) >> 5));
        *(_QWORD *)result = *(_QWORD *)v27;
        v28 = *(_OWORD *)(v27 + 8);
        *((_QWORD *)result + 3) = *(_QWORD *)(v27 + 24);
        *(_OWORD *)(result + 8) = v28;
        ++v24;
        result += 32;
      }
      while (v24 != v23[5]);
    }
    else
    {
      if (v19 == result && !*(_BYTE *)(a2 + 8))
      {
        if (*(_BYTE *)(a3 + 8))
          goto LABEL_50;
        v37 = *(_QWORD *)(a3 + 16);
        if (!v26 && v25 == v37)
          goto LABEL_54;
        goto LABEL_56;
      }
      v43 = v22 - 1;
      do
      {
        do
        {
          v44 = v43;
          v45 = *v23 + 32 * ((v24 + v23[3]) % (unint64_t)((uint64_t)(v23[1] - *v23) >> 5));
          *(_QWORD *)result = *(_QWORD *)v45;
          v46 = *(_OWORD *)(v45 + 8);
          *((_QWORD *)result + 3) = *(_QWORD *)(v45 + 24);
          *(_OWORD *)(result + 8) = v46;
          ++v24;
          v43 = v44 - 1;
          result += 32;
        }
        while (v24 == v23[5]);
      }
      while (v44);
    }
    result = (char *)*v20;
    if (*(_BYTE *)(a3 + 8))
    {
      v19 = (char *)*v20;
      if (v26)
        goto LABEL_49;
LABEL_50:
      v16 = result;
      do
      {
        v47 = *v23 + 32 * ((v25 + v23[3]) % (unint64_t)((uint64_t)(v23[1] - *v23) >> 5));
        *(_QWORD *)v16 = *(_QWORD *)v47;
        v48 = *(_OWORD *)(v47 + 8);
        *((_QWORD *)v16 + 3) = *(_QWORD *)(v47 + 24);
        *(_OWORD *)(v16 + 8) = v48;
        ++v25;
        v16 += 32;
      }
      while (v25 != v23[5]);
      goto LABEL_59;
    }
    v19 = (char *)*v20;
    v37 = *(_QWORD *)(a3 + 16);
    if (!v26 && v25 == v37)
    {
LABEL_54:
      v16 = result;
      goto LABEL_59;
    }
LABEL_56:
    v49 = v37 - 1;
    v16 = result;
    do
    {
      do
      {
        v50 = v25;
        v51 = *v23 + 32 * ((v25 + v23[3]) % (unint64_t)((uint64_t)(v23[1] - *v23) >> 5));
        *(_QWORD *)v16 = *(_QWORD *)v51;
        v52 = *(_OWORD *)(v51 + 8);
        *((_QWORD *)v16 + 3) = *(_QWORD *)(v51 + 24);
        *(_OWORD *)(v16 + 8) = v52;
        v25 = v50 + 1;
        v16 += 32;
      }
      while (v50 + 1 == v23[5]);
    }
    while (v49 != v50);
    goto LABEL_59;
  }
  if (result)
  {
    a1[1] = result;
    operator delete(result);
    v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  if (__sz >> 59)
    goto LABEL_60;
  v10 = v8 >> 4;
  if (v8 >> 4 <= __sz)
    v10 = __sz;
  v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
  v12 = 0x7FFFFFFFFFFFFFFLL;
  if (!v11)
    v12 = v10;
  if (v12 >> 59)
LABEL_60:
    sub_20E867F44();
  v13 = 32 * v12;
  result = (char *)operator new(32 * v12);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[v13];
  v14 = *(_QWORD **)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a3 + 8))
  {
    v16 = result;
    if (!*(_BYTE *)(a2 + 8))
    {
      v16 = result;
      do
      {
        v17 = *v14 + 32 * ((v15 + v14[3]) % (unint64_t)((uint64_t)(v14[1] - *v14) >> 5));
        *(_QWORD *)v16 = *(_QWORD *)v17;
        v18 = *(_OWORD *)(v17 + 8);
        *((_QWORD *)v16 + 3) = *(_QWORD *)(v17 + 24);
        *(_OWORD *)(v16 + 8) = v18;
        ++v15;
        v16 += 32;
      }
      while (v15 != v14[5]);
    }
  }
  else
  {
    v32 = *(_QWORD *)(a3 + 16);
    if (*(_BYTE *)(a2 + 8) || (v16 = result, v15 != v32))
    {
      v33 = v15 + 1;
      v16 = result;
      do
      {
        do
        {
          v34 = v33;
          v35 = *v14 + 32 * ((v33 + v14[3] - 1) % (unint64_t)((uint64_t)(v14[1] - *v14) >> 5));
          *(_QWORD *)v16 = *(_QWORD *)v35;
          v36 = *(_OWORD *)(v35 + 8);
          *((_QWORD *)v16 + 3) = *(_QWORD *)(v35 + 24);
          *(_OWORD *)(v16 + 8) = v36;
          v16 += 32;
          v33 = v34 + 1;
        }
        while (v34 == v14[5]);
      }
      while (v32 != v34);
    }
  }
  v19 = result;
  v20 = (void **)(a1 + 1);
LABEL_59:
  *v20 = &result[v16 - v19];
  return result;
}

void sub_20F1AC4F0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, uint64_t *a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[24];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v14 = v13;
    v13->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)v42 = v12;
    *(_QWORD *)&v42[8] = v12;
    *(_QWORD *)&v42[16] = v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v43 = 0uLL;
    v44 = 0;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v14);
    }
    v18 = *(_QWORD *)v42;
    v19 = _os_log_pack_fill();
    v20 = *a5;
    v21 = *a6;
    *(_DWORD *)v19 = 134218240;
    *(_QWORD *)(v19 + 4) = v20;
    *(_WORD *)(v19 + 12) = 2048;
    *(_QWORD *)(v19 + 14) = v21;
    v22 = operator new();
    v23 = *((unsigned __int8 *)a2 + 23);
    if ((v23 & 0x80u) == 0)
      v24 = a2;
    else
      v24 = (uint64_t *)*a2;
    if ((v23 & 0x80u) != 0)
      v23 = a2[1];
    *(_QWORD *)v22 = v18;
    *(_OWORD *)(v22 + 8) = *(_OWORD *)&v42[8];
    *(_OWORD *)&v42[8] = 0uLL;
    *(_OWORD *)(v22 + 24) = v43;
    v43 = 0uLL;
    *(_QWORD *)(v22 + 40) = v24;
    *(_QWORD *)(v22 + 48) = v23;
    *(_BYTE *)(v22 + 56) = type;
    v41 = v22;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v41);
    v25 = v41;
    v41 = 0;
    if (v25)
    {
      v26 = *(std::__shared_weak_count **)(v25 + 32);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = *(std::__shared_weak_count **)(v25 + 16);
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      MEMORY[0x212BC6398](v25, 0x10F0C40B62ED6C6);
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = *(std::__shared_weak_count **)&v42[16];
    if (*(_QWORD *)&v42[16])
    {
      v36 = (unint64_t *)(*(_QWORD *)&v42[16] + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v38 = *a5;
    v39 = *a6;
    *(_DWORD *)v42 = 134218240;
    *(_QWORD *)&v42[4] = v38;
    *(_WORD *)&v42[12] = 2048;
    *(_QWORD *)&v42[14] = v39;
    v40 = (void *)_os_log_send_and_compose_impl();
    if (v40)
      free(v40);
  }
}

void sub_20F1AC900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1AC924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1AC938(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F1AC95C(unsigned int *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void *v22;
  __int128 v23;
  void *v24[2];
  uint64_t v25;
  void *v26;
  __int128 v27;
  void *v28[2];
  uint64_t v29;
  void *__p;
  __int128 v31;
  void *v32[2];
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 __dst;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40;

  v39 = (char *)operator new(0x30uLL);
  v40 = xmmword_2102DC8D0;
  strcpy(v39, "PolynomialExtrapolationConfig parameters");
  sub_20E8B30B4(a3, (__int128 *)&v39, 180, 160);
  if (SHIBYTE(v40) < 0)
    operator delete(v39);
  v38 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v37 = *((_QWORD *)a2 + 2);
  }
  v34 = (char *)operator new(0x28uLL);
  v35 = xmmword_2102DCA20;
  strcpy(v34, "position_extrapolation_polynomial_order");
  sub_2101050B4((const void **)&__dst, (uint64_t)&v34, (uint64_t)&v39);
  v6 = SHIBYTE(v40);
  v7 = v39;
  v8 = sub_20EA9DCF0(a1);
  if (v6 >= 0)
    v9 = (char *)&v39;
  else
    v9 = v7;
  sub_20E8B2F9C(&v38, v9, v8, "Polynomial extrapolation order for position");
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    operator delete(v34);
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_16;
  }
  operator delete(v39);
  if (SHIBYTE(v35) < 0)
    goto LABEL_15;
LABEL_11:
  if ((SHIBYTE(v37) & 0x80000000) == 0)
    goto LABEL_12;
LABEL_16:
  operator delete((void *)__dst);
LABEL_12:
  v38 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v32, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v32 = *a2;
    v33 = *((_QWORD *)a2 + 2);
  }
  __p = operator new(0x28uLL);
  v31 = xmmword_2102DCA20;
  strcpy((char *)__p, "position_extrapolation_polynomial_terms");
  sub_2101050B4((const void **)v32, (uint64_t)&__p, (uint64_t)&v39);
  v10 = SHIBYTE(v40);
  v11 = v39;
  v12 = sub_20EA9DCF0(a1 + 1);
  if (v10 >= 0)
    v13 = (char *)&v39;
  else
    v13 = v11;
  sub_20E8B2F9C(&v38, v13, v12, "Number of terms used to extrapolate polynomial for position");
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_27:
    operator delete(__p);
    if ((SHIBYTE(v33) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_28;
  }
  operator delete(v39);
  if (SHIBYTE(v31) < 0)
    goto LABEL_27;
LABEL_23:
  if ((SHIBYTE(v33) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_28:
  operator delete(v32[0]);
LABEL_24:
  v38 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v28, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v28 = *a2;
    v29 = *((_QWORD *)a2 + 2);
  }
  v26 = operator new(0x30uLL);
  v27 = xmmword_2102E3F90;
  strcpy((char *)v26, "orientation_extrapolation_polynomial_order");
  sub_2101050B4((const void **)v28, (uint64_t)&v26, (uint64_t)&v39);
  v14 = SHIBYTE(v40);
  v15 = v39;
  v16 = sub_20EA9DCF0(a1 + 2);
  if (v14 >= 0)
    v17 = (char *)&v39;
  else
    v17 = v15;
  sub_20E8B2F9C(&v38, v17, v16, "Polynomial extrapolation order for orientation");
  if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_39:
    operator delete(v26);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_40;
  }
  operator delete(v39);
  if (SHIBYTE(v27) < 0)
    goto LABEL_39;
LABEL_35:
  if ((SHIBYTE(v29) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_40:
  operator delete(v28[0]);
LABEL_36:
  v38 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v24, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v24 = *a2;
    v25 = *((_QWORD *)a2 + 2);
  }
  v22 = operator new(0x30uLL);
  v23 = xmmword_2102E3F90;
  strcpy((char *)v22, "orientation_extrapolation_polynomial_terms");
  sub_2101050B4((const void **)v24, (uint64_t)&v22, (uint64_t)&v39);
  v18 = SHIBYTE(v40);
  v19 = v39;
  v20 = sub_20EA9DCF0(a1 + 3);
  if (v18 >= 0)
    v21 = (char *)&v39;
  else
    v21 = v19;
  sub_20E8B2F9C(&v38, v21, v20, "Number of terms used to extrapolate polynomial for orientation");
  if (SHIBYTE(v40) < 0)
  {
    operator delete(v39);
    if ((SHIBYTE(v23) & 0x80000000) == 0)
    {
LABEL_47:
      if ((SHIBYTE(v25) & 0x80000000) == 0)
        return;
LABEL_51:
      operator delete(v24[0]);
      return;
    }
  }
  else if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(v22);
  if (SHIBYTE(v25) < 0)
    goto LABEL_51;
}

void sub_20F1ACDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  sub_20E869298(v47);
  _Unwind_Resume(a1);
}

void sub_20F1ACFC4(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *__p;
  __int128 v11;
  void *__dst[2];
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;

  v15 = (char *)operator new(0x20uLL);
  v16 = xmmword_2102DCC80;
  strcpy(v15, "PoseFilterConfig parameters");
  sub_20E8B30B4(a3, (__int128 *)&v15, 180, 160);
  if (SHIBYTE(v16) < 0)
    operator delete(v15);
  v14 = nullsub_1(a3);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
  }
  __p = operator new(0x20uLL);
  v11 = xmmword_2102DBFF0;
  strcpy((char *)__p, "enable_predictor_pose_filtering");
  sub_2101050B4((const void **)__dst, (uint64_t)&__p, (uint64_t)&v15);
  v6 = SHIBYTE(v16);
  v7 = v15;
  v8 = sub_20EAA14D8(a1);
  if (v6 >= 0)
    v9 = (char *)&v15;
  else
    v9 = v7;
  sub_20E8B2F9C(&v14, v9, v8, "Enable/disable pose filter");
  if (SHIBYTE(v16) < 0)
  {
    operator delete(v15);
    if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v13) & 0x80000000) == 0)
        return;
LABEL_15:
      operator delete(__dst[0]);
      return;
    }
  }
  else if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(__p);
  if (SHIBYTE(v13) < 0)
    goto LABEL_15;
}

void sub_20F1AD14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_20E869298(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1AD1F0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  int64x2_t v6;
  _OWORD *v7;
  _OWORD *v8;
  unsigned int v9;
  void *v10;
  size_t v11;
  void *v12;
  unsigned int v13;
  size_t v14;
  _OWORD v16[7];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_2102DBC40;
  *(_OWORD *)(a1 + 32) = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 48) = 1000;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = xmmword_2102DBC60;
  *(_OWORD *)(a1 + 112) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 128) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 144) = xmmword_2102DBC70;
  *(_QWORD *)(a1 + 160) = 1000;
  *(_OWORD *)(a1 + 168) = xmmword_2102DBC40;
  *(_OWORD *)(a1 + 184) = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 200) = 1000;
  *(_BYTE *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 232) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_2102DBC60;
  *(_QWORD *)(a1 + 264) = 1000;
  *(_OWORD *)(a1 + 272) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 288) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 304) = xmmword_2102DBC80;
  *(_QWORD *)(a1 + 320) = 0x3FEFAE147AE147AELL;
  *(_WORD *)(a1 + 328) = 514;
  *(_OWORD *)(a1 + 332) = xmmword_2102DBC90;
  *(_OWORD *)(a1 + 352) = xmmword_2102DBC40;
  *(_OWORD *)(a1 + 368) = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 384) = 1000;
  *(_BYTE *)(a1 + 392) = 1;
  *(_QWORD *)(a1 + 400) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 408) = 1;
  *(_QWORD *)(a1 + 416) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = xmmword_2102DBC60;
  *(_OWORD *)(a1 + 448) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 464) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 480) = xmmword_2102DBC70;
  *(_QWORD *)(a1 + 496) = 1000;
  *(_QWORD *)(a1 + 504) = 0x3EE4F8B588E368F1;
  *(_QWORD *)(a1 + 512) = 0x4044000000000000;
  *(_QWORD *)(a1 + 520) = 5;
  *(_OWORD *)(a1 + 528) = xmmword_2102DBCA0;
  *(_BYTE *)(a1 + 544) = 1;
  *(_QWORD *)(a1 + 552) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 560) = 1;
  *(_QWORD *)(a1 + 568) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 1;
  *(_OWORD *)(a1 + 592) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 608) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 624) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 640) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 656) = xmmword_2102DBC40;
  *(_OWORD *)(a1 + 672) = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 688) = 1000;
  *(_BYTE *)(a1 + 696) = 1;
  *(_QWORD *)(a1 + 704) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 712) = 1;
  *(_QWORD *)(a1 + 720) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 736) = xmmword_2102DBC60;
  *(_OWORD *)(a1 + 752) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 768) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 784) = xmmword_2102DBC70;
  *(_QWORD *)(a1 + 800) = 1000;
  *(_QWORD *)(a1 + 808) = 0x4059000000000000;
  *(_OWORD *)(a1 + 816) = xmmword_2102DBCB0;
  *(_WORD *)(a1 + 832) = 1;
  *(_BYTE *)(a1 + 834) = 0;
  *(_WORD *)(a1 + 840) = 0;
  *(_WORD *)(a1 + 852) = 0;
  *(_QWORD *)(a1 + 844) = 0;
  *(_WORD *)(a1 + 856) = 1;
  *(_QWORD *)(a1 + 864) = 0x3F8EB851EB851EB8;
  *(_BYTE *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = xmmword_2102DBCC0;
  *(_BYTE *)(a1 + 896) = 1;
  *(_QWORD *)(a1 + 904) = 0;
  *(_WORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 920) = 0x3FE0000000000000;
  v4 = a1 + 928;
  *(_QWORD *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  v5 = operator new(0x78uLL);
  *(_QWORD *)(a1 + 928) = v5;
  *(_QWORD *)(a1 + 944) = (char *)v5 + 120;
  *v5 = xmmword_2102DBCD0;
  v5[1] = xmmword_2102DBCB0;
  v5[2] = xmmword_2102DBCE0;
  v5[3] = xmmword_2102DBCF0;
  v5[4] = xmmword_2102DBD00;
  v5[5] = xmmword_2102DBD10;
  v5[6] = xmmword_2102DBD20;
  *((_QWORD *)v5 + 14) = 0x3F847AE147AE147BLL;
  *(_QWORD *)(a1 + 936) = (char *)v5 + 120;
  *(_QWORD *)(a1 + 952) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 960) = 200;
  *(_QWORD *)(a1 + 968) = 0x4008000000000000;
  *(_OWORD *)(a1 + 976) = xmmword_2102DBD30;
  *(_QWORD *)(a1 + 992) = 0x3EF24D14F4C463A3;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1008) = 0x4000000000000000;
  *(_WORD *)(a1 + 1016) = 257;
  *(_DWORD *)(a1 + 1020) = 2;
  *(_DWORD *)(a1 + 1040) = 0;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_BYTE *)(a1 + 1044) = 1;
  *(_BYTE *)(a1 + 1048) = 0;
  *(int64x2_t *)(a1 + 1056) = vdupq_n_s64(0x3F847AE147AE147BuLL);
  *(_WORD *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1080) = 1;
  *(_OWORD *)(a1 + 1088) = xmmword_2102DBD40;
  v6 = vdupq_n_s64(0x3FB999999999999AuLL);
  *(int64x2_t *)(a1 + 1104) = v6;
  *(_QWORD *)(a1 + 1120) = 0x3FB999999999999ALL;
  *(_BYTE *)(a1 + 1128) = 1;
  *(_OWORD *)(a1 + 1136) = xmmword_2102DBD40;
  *(int64x2_t *)(a1 + 1152) = v6;
  *(_OWORD *)(a1 + 1168) = xmmword_2102DBD50;
  *(_OWORD *)(a1 + 1184) = xmmword_2102DBD60;
  *(_QWORD *)(a1 + 1200) = 0x3FB999999999999ALL;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1216) = xmmword_2102DBD70;
  *(_OWORD *)(a1 + 1232) = xmmword_2102DBD80;
  *(_OWORD *)(a1 + 1248) = xmmword_2102DBD90;
  *(_OWORD *)(a1 + 1264) = xmmword_2102DBDA0;
  *(_OWORD *)(a1 + 1280) = xmmword_2102DBDB0;
  *(_QWORD *)(a1 + 1296) = 0x3FE999999999999ALL;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1312) = 32;
  v7 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 1304) = v7;
  *(_DWORD *)(a1 + 1320) = 32;
  v7[12] = xmmword_2103A4F88;
  v7[13] = unk_2103A4F98;
  v7[14] = xmmword_2103A4FA8;
  v7[15] = unk_2103A4FB8;
  v7[8] = xmmword_2103A4F48;
  v7[9] = unk_2103A4F58;
  v7[10] = xmmword_2103A4F68;
  v7[11] = unk_2103A4F78;
  v7[4] = xmmword_2103A4F08;
  v7[5] = unk_2103A4F18;
  v7[6] = xmmword_2103A4F28;
  v7[7] = unk_2103A4F38;
  *v7 = xmmword_2103A4EC8;
  v7[1] = unk_2103A4ED8;
  v7[2] = xmmword_2103A4EE8;
  v7[3] = unk_2103A4EF8;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1352) = 0x3F5B328B6D86EC18;
  *(_QWORD *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1368) = 32;
  v8 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 1360) = v8;
  *(_DWORD *)(a1 + 1376) = 32;
  v8[12] = xmmword_2103A4F88;
  v8[13] = unk_2103A4F98;
  v8[14] = xmmword_2103A4FA8;
  v8[15] = unk_2103A4FB8;
  v8[8] = xmmword_2103A4F48;
  v8[9] = unk_2103A4F58;
  v8[10] = xmmword_2103A4F68;
  v8[11] = unk_2103A4F78;
  v8[4] = xmmword_2103A4F08;
  v8[5] = unk_2103A4F18;
  v8[6] = xmmword_2103A4F28;
  v8[7] = unk_2103A4F38;
  *v8 = xmmword_2103A4EC8;
  v8[1] = unk_2103A4ED8;
  v8[2] = xmmword_2103A4EE8;
  v8[3] = unk_2103A4EF8;
  *(_QWORD *)(a1 + 1392) = 0;
  *(_QWORD *)(a1 + 1384) = 0;
  *(_DWORD *)(a1 + 1400) = 0;
  *(_QWORD *)(a1 + 1408) = 0x3F5B328B6D86EC18;
  *(_BYTE *)(a1 + 1416) = 0;
  if (*a2 != 89)
    return a1;
  *(_BYTE *)(a1 + 896) = 1;
  *(_QWORD *)(a1 + 904) = 0x3F889374BC6A7EFALL;
  *(_WORD *)(a1 + 912) = 769;
  *(_BYTE *)(a1 + 1000) = 1;
  *(_OWORD *)(a1 + 984) = xmmword_2103A4D60;
  *(_QWORD *)(a1 + 1008) = 0x4000000000000000;
  *(_BYTE *)(a1 + 8) = 2;
  *(_BYTE *)(a1 + 1208) = 1;
  *(_BYTE *)(a1 + 88) = 4;
  *(_BYTE *)(a1 + 240) = 3;
  *(_OWORD *)(a1 + 184) = xmmword_2103A4D70;
  *(_OWORD *)(a1 + 32) = xmmword_2103A4D70;
  *(_QWORD *)(a1 + 248) = 1;
  *(_QWORD *)(a1 + 320) = 0x3FECCCCCCCCCCCCDLL;
  *(_OWORD *)(a1 + 96) = xmmword_2102DBC60;
  *(_OWORD *)(a1 + 112) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 128) = xmmword_2102DBC70;
  *(_QWORD *)(a1 + 144) = 1000;
  *(_OWORD *)(a1 + 304) = xmmword_2102DBC80;
  *(_BYTE *)(a1 + 225) = 1;
  *(_BYTE *)(a1 + 73) = 1;
  *(_BYTE *)(a1 + 857) = 1;
  *(_QWORD *)(a1 + 864) = 0x3F8EB851EB851EB8;
  *(_BYTE *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 880) = xmmword_2103A4AE0;
  v16[0] = xmmword_2102DBCD0;
  v16[1] = xmmword_2102DBCB0;
  v16[2] = xmmword_2102DBCE0;
  v16[3] = xmmword_2102DBCF0;
  v16[4] = xmmword_2103A4D80;
  v16[5] = xmmword_2103A4D90;
  v16[6] = xmmword_2102DBD20;
  v17 = 0x3FECCCCCCCCCCCCDLL;
  sub_20F1AE080(v4, (char *)v16, (char *)&v18);
  *(_QWORD *)(a1 + 960) = 200;
  *(_BYTE *)a1 = 24;
  *(_BYTE *)(a1 + 1048) = 0;
  *(int64x2_t *)(a1 + 1056) = vdupq_n_s64(0x3F947AE147AE147BuLL);
  *(_WORD *)(a1 + 1072) = 1;
  *(_OWORD *)(a1 + 1184) = xmmword_2103A4DA0;
  *(_QWORD *)(a1 + 1200) = 0x3FC999999999999ALL;
  *(_BYTE *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1088) = xmmword_2103A4DB0;
  *(_OWORD *)(a1 + 1104) = xmmword_2103A4DC0;
  *(_QWORD *)(a1 + 1120) = 0x3F9EB851EB851EB8;
  *(_BYTE *)(a1 + 1128) = 1;
  *(_OWORD *)(a1 + 1136) = xmmword_2103A4DB0;
  *(int64x2_t *)(a1 + 1152) = vdupq_n_s64(0x41CDCD6500000000uLL);
  *(_OWORD *)(a1 + 1168) = xmmword_2103A4DD0;
  *(_OWORD *)(a1 + 1216) = xmmword_2103A4DE0;
  *(_OWORD *)(a1 + 1232) = xmmword_2103A4DF0;
  *(_OWORD *)(a1 + 1248) = xmmword_2103A4E00;
  *(_OWORD *)(a1 + 1264) = xmmword_2102DBDA0;
  *(_OWORD *)(a1 + 1280) = xmmword_2102DBDB0;
  *(_QWORD *)(a1 + 1296) = 0x3FE999999999999ALL;
  v9 = 32;
  v10 = *(void **)(a1 + 1304);
  if (*(_DWORD *)(a1 + 1320) == 32)
    goto LABEL_7;
  *(_DWORD *)(a1 + 1320) = 32;
  if (*(_QWORD *)(a1 + 1312) > 0x1FuLL)
  {
    v11 = 256;
    goto LABEL_9;
  }
  if (v10)
    MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1312) = 32;
  v10 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 1304) = v10;
  v9 = *(_DWORD *)(a1 + 1320);
  if (v9)
  {
LABEL_7:
    v11 = 8 * v9;
LABEL_9:
    memcpy(v10, &xmmword_2103A4EC8, v11);
  }
  if (*(_DWORD *)(a1 + 1344))
    *(_DWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1352) = 0x3F5B328B6D86EC18;
  v12 = *(void **)(a1 + 1360);
  v13 = 32;
  if (*(_DWORD *)(a1 + 1376) != 32)
  {
    *(_DWORD *)(a1 + 1376) = 32;
    if (*(_QWORD *)(a1 + 1368) > 0x1FuLL)
    {
      v14 = 256;
      goto LABEL_19;
    }
    if (v12)
      MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
    *(_QWORD *)(a1 + 1360) = 0;
    *(_QWORD *)(a1 + 1368) = 32;
    v12 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
    *(_QWORD *)(a1 + 1360) = v12;
    v13 = *(_DWORD *)(a1 + 1376);
    if (!v13)
      goto LABEL_20;
  }
  v14 = 8 * v13;
LABEL_19:
  memcpy(v12, &xmmword_2103A4EC8, v14);
LABEL_20:
  if (*(_DWORD *)(a1 + 1400))
    *(_DWORD *)(a1 + 1400) = 0;
  *(_QWORD *)(a1 + 1408) = 0x3F5B328B6D86EC18;
  *(_WORD *)(a1 + 1016) = 256;
  *(_WORD *)(a1 + 840) = 257;
  *(_QWORD *)(a1 + 844) = 0x600000002;
  *(_BYTE *)(a1 + 834) = 1;
  return a1;
}

void sub_20F1ADA64(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  sub_20F1ADAB8((_QWORD *)(v1 + 1208));
  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 936) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20F1ADAB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[22];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[19];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[15];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[12];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  return a1;
}

void *sub_20F1ADB48(uint64_t a1)
{
  unsigned int v2;
  void *v3;
  size_t v4;
  void *result;
  unsigned int v6;
  size_t v7;
  _OWORD v8[7];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 896) = 1;
  *(_QWORD *)(a1 + 904) = 0x3F889374BC6A7EFALL;
  *(_WORD *)(a1 + 912) = 769;
  *(_BYTE *)(a1 + 1000) = 1;
  *(_QWORD *)(a1 + 992) = 0x3EF24D14F4C463A3;
  *(_QWORD *)(a1 + 984) = 0x3FEFAE147AE147AELL;
  *(_QWORD *)(a1 + 1008) = 0x4000000000000000;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 1208) = 1;
  *(_BYTE *)(a1 + 88) = 4;
  *(_BYTE *)(a1 + 240) = 3;
  *(_OWORD *)(a1 + 184) = xmmword_2103A4D70;
  *(_OWORD *)(a1 + 32) = xmmword_2103A4D70;
  *(_QWORD *)(a1 + 248) = 1;
  *(_QWORD *)(a1 + 320) = 0x3FECCCCCCCCCCCCDLL;
  *(_OWORD *)(a1 + 96) = xmmword_2102DBC60;
  *(_OWORD *)(a1 + 112) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 128) = xmmword_2102DBC70;
  *(_QWORD *)(a1 + 144) = 1000;
  *(_OWORD *)(a1 + 304) = xmmword_2102DBC80;
  *(_BYTE *)(a1 + 225) = 1;
  *(_BYTE *)(a1 + 73) = 1;
  *(_BYTE *)(a1 + 857) = 1;
  *(_QWORD *)(a1 + 864) = 0x3F8EB851EB851EB8;
  *(_BYTE *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 880) = xmmword_2103A4AE0;
  v8[0] = xmmword_2102DBCD0;
  v8[1] = xmmword_2102DBCB0;
  v8[2] = xmmword_2102DBCE0;
  v8[3] = xmmword_2102DBCF0;
  v8[4] = xmmword_2103A4D80;
  v8[5] = xmmword_2103A4D90;
  v9 = 0x3FECCCCCCCCCCCCDLL;
  v8[6] = xmmword_2102DBD20;
  sub_20F1AE080(a1 + 928, (char *)v8, (char *)&v10);
  *(_QWORD *)(a1 + 960) = 200;
  *(_BYTE *)a1 = 24;
  *(_BYTE *)(a1 + 1048) = 0;
  *(int64x2_t *)(a1 + 1056) = vdupq_n_s64(0x3F947AE147AE147BuLL);
  *(_WORD *)(a1 + 1072) = 1;
  *(_OWORD *)(a1 + 1184) = xmmword_2103A4DA0;
  *(_QWORD *)(a1 + 1200) = 0x3FC999999999999ALL;
  *(_BYTE *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1088) = xmmword_2103A4DB0;
  *(_OWORD *)(a1 + 1104) = xmmword_2103A4DC0;
  *(_QWORD *)(a1 + 1120) = 0x3F9EB851EB851EB8;
  *(_BYTE *)(a1 + 1128) = 1;
  *(_OWORD *)(a1 + 1136) = xmmword_2103A4DB0;
  *(int64x2_t *)(a1 + 1152) = vdupq_n_s64(0x41CDCD6500000000uLL);
  *(_OWORD *)(a1 + 1168) = xmmword_2103A4DD0;
  *(_OWORD *)(a1 + 1216) = xmmword_2103A4DE0;
  *(_OWORD *)(a1 + 1232) = xmmword_2103A4DF0;
  *(_OWORD *)(a1 + 1248) = xmmword_2103A4E00;
  *(_OWORD *)(a1 + 1264) = xmmword_2102DBDA0;
  *(_OWORD *)(a1 + 1280) = xmmword_2102DBDB0;
  *(_QWORD *)(a1 + 1296) = 0x3FE999999999999ALL;
  v2 = 32;
  v3 = *(void **)(a1 + 1304);
  if (*(_DWORD *)(a1 + 1320) != 32)
  {
    *(_DWORD *)(a1 + 1320) = 32;
    if (*(_QWORD *)(a1 + 1312) > 0x1FuLL)
    {
      v4 = 256;
      goto LABEL_8;
    }
    if (v3)
      MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
    *(_QWORD *)(a1 + 1304) = 0;
    *(_QWORD *)(a1 + 1312) = 32;
    v3 = operator new(0x100uLL, (std::align_val_t)0x20uLL);
    *(_QWORD *)(a1 + 1304) = v3;
    v2 = *(_DWORD *)(a1 + 1320);
    if (!v2)
      goto LABEL_9;
  }
  v4 = 8 * v2;
LABEL_8:
  memcpy(v3, &xmmword_2103A4EC8, v4);
LABEL_9:
  if (*(_DWORD *)(a1 + 1344))
    *(_DWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1352) = 0x3F5B328B6D86EC18;
  result = *(void **)(a1 + 1360);
  v6 = 32;
  if (*(_DWORD *)(a1 + 1376) == 32)
    goto LABEL_16;
  *(_DWORD *)(a1 + 1376) = 32;
  if (*(_QWORD *)(a1 + 1368) > 0x1FuLL)
  {
    v7 = 256;
    goto LABEL_18;
  }
  if (result)
    MEMORY[0x212BC6368](result, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1368) = 32;
  result = operator new(0x100uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 1360) = result;
  v6 = *(_DWORD *)(a1 + 1376);
  if (v6)
  {
LABEL_16:
    v7 = 8 * v6;
LABEL_18:
    result = memcpy(result, &xmmword_2103A4EC8, v7);
  }
  if (*(_DWORD *)(a1 + 1400))
    *(_DWORD *)(a1 + 1400) = 0;
  *(_QWORD *)(a1 + 1408) = 0x3F5B328B6D86EC18;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_WORD *)(a1 + 840) = 1;
  *(_QWORD *)(a1 + 844) = 0x600000002;
  *(_BYTE *)(a1 + 834) = 1;
  return result;
}

_QWORD *sub_20F1ADF30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = a1[174];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[171];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[167];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[164];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = (void *)a1[117];
  if (v6)
  {
    a1[118] = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_20F1ADFD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = a1[174];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[171];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[167];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[164];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = (void *)a1[117];
  if (v6)
  {
    a1[118] = v6;
    operator delete(v6);
  }
  JUMPOUT(0x212BC6398);
}

char *sub_20F1AE080(uint64_t a1, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int64_t v14;
  _QWORD *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  __int128 v51;

  v4 = a2;
  v6 = *(_QWORD *)(a1 + 16);
  result = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < 5)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= 5)
      v9 = 5;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v11 = 24 * v10;
    result = (char *)operator new(24 * v10);
    v12 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v13 = result;
    if (v4 != a3)
    {
      result = (char *)memcpy(result, v4, 24 * ((a3 - v4 - 24) / 0x18uLL) + 24);
      v13 = &v12[24 * ((a3 - v4 - 24) / 0x18uLL) + 24];
    }
    v14 = v13 - v12;
    v15 = (_QWORD *)(a1 + 8);
    goto LABEL_45;
  }
  v16 = *(char **)(a1 + 8);
  v15 = (_QWORD *)(a1 + 8);
  v12 = v16;
  v17 = v16 - result;
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v16 - result) >> 3);
  if (v18 > 4)
  {
    if (a2 == a3)
    {
      v40 = result;
    }
    else
    {
      v34 = a3 - a2 - 24;
      if (v34 < 0x108
        || ((v35 = v34 / 0x18, v36 = 24 * v35 + 24, result < &a2[v36]) ? (v37 = &result[v36] > a2) : (v37 = 0), v37))
      {
        v40 = result;
        v41 = a2;
      }
      else
      {
        v38 = v35 + 1;
        v39 = (v35 + 1) & 0x1FFFFFFFFFFFFFFCLL;
        v40 = &result[24 * v39];
        v41 = &a2[24 * v39];
        v42 = v39;
        v43 = result;
        do
        {
          v44 = *((_OWORD *)v4 + 1);
          v46 = *((_OWORD *)v4 + 4);
          v45 = *((_OWORD *)v4 + 5);
          v47 = *((_OWORD *)v4 + 2);
          v48 = *((_OWORD *)v4 + 3);
          *(_OWORD *)v43 = *(_OWORD *)v4;
          *((_OWORD *)v43 + 1) = v44;
          *((_OWORD *)v43 + 2) = v47;
          *((_OWORD *)v43 + 3) = v48;
          v4 += 96;
          *((_OWORD *)v43 + 4) = v46;
          *((_OWORD *)v43 + 5) = v45;
          v43 += 96;
          v42 -= 4;
        }
        while (v42);
        if (v38 == v39)
          goto LABEL_44;
      }
      do
      {
        *(_QWORD *)v40 = *(_QWORD *)v41;
        *((_QWORD *)v40 + 1) = *((_QWORD *)v41 + 1);
        *((_QWORD *)v40 + 2) = *((_QWORD *)v41 + 2);
        v40 += 24;
        v41 += 24;
      }
      while (v41 != a3);
    }
LABEL_44:
    v14 = v40 - result;
    v12 = result;
    goto LABEL_45;
  }
  v19 = &a2[24 * v18];
  if (v12 != result)
  {
    v20 = v17 - 24;
    if (v20 < 0x108
      || ((v21 = v20 / 0x18, v22 = 24 * v21 + 24, result < &a2[v22]) ? (v23 = &result[v22] > a2) : (v23 = 0), v23))
    {
      v26 = result;
      v27 = a2;
    }
    else
    {
      v24 = v21 + 1;
      v25 = (v21 + 1) & 0x1FFFFFFFFFFFFFFCLL;
      v26 = &result[24 * v25];
      v27 = &a2[24 * v25];
      v28 = v25;
      do
      {
        v29 = *((_OWORD *)v4 + 1);
        v31 = *((_OWORD *)v4 + 4);
        v30 = *((_OWORD *)v4 + 5);
        v32 = *((_OWORD *)v4 + 2);
        v33 = *((_OWORD *)v4 + 3);
        *(_OWORD *)result = *(_OWORD *)v4;
        *((_OWORD *)result + 1) = v29;
        *((_OWORD *)result + 2) = v32;
        *((_OWORD *)result + 3) = v33;
        v4 += 96;
        *((_OWORD *)result + 4) = v31;
        *((_OWORD *)result + 5) = v30;
        result += 96;
        v28 -= 4;
      }
      while (v28);
      if (v24 == v25)
        goto LABEL_36;
    }
    do
    {
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v27 + 1);
      *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
      v27 += 24;
      v26 += 24;
    }
    while (v27 != v19);
  }
LABEL_36:
  v49 = v12;
  if (v19 != a3)
  {
    v50 = v12;
    do
    {
      v51 = *(_OWORD *)v19;
      *((_QWORD *)v50 + 2) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v50 = v51;
      v50 += 24;
      v19 += 24;
      v49 += 24;
    }
    while (v19 != a3);
  }
  v14 = v49 - v12;
LABEL_45:
  *v15 = &v12[v14];
  return result;
}

void sub_20F1AE3B0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  void *v11[4];
  __int128 v12[2];
  __int128 v13[2];
  void *v14;
  __int128 v15;
  void *__p;
  __int128 v17;

  __p = operator new(0x20uLL);
  v17 = xmmword_2102DBFF0;
  strcpy((char *)__p, "PosePredictionConfig parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  __p = (void *)nullsub_1(a2);
  v4 = sub_20EAF6358((unsigned __int8 *)a1);
  sub_20E8B2F9C((uint64_t *)&__p, "imu_filtering_mode", v4, "Pose predictor IMU filtering config.");
  __p = (void *)nullsub_1(a2);
  v5 = sub_20EAA14D8((_BYTE *)(a1 + 1016));
  sub_20E8B2F9C((uint64_t *)&__p, "log_pose_predictors_stats_flag", v5, "PosePredictor Statistics logging enable flag.");
  __p = (void *)nullsub_1(a2);
  v6 = sub_20EAA14D8((_BYTE *)(a1 + 1017));
  sub_20E8B2F9C((uint64_t *)&__p, "abort_when_imu_measurements_exceeding_max_gap", v6, "Sysmtem aborts when IMU measurements exceeding max time gap for PosePredictor.");
  __p = (void *)nullsub_1(a2);
  v7 = operator new();
  *(_QWORD *)(v7 + 109) = 0;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_QWORD *)v7 = &off_24C9FA068;
  *(_QWORD *)(v7 + 8) = &unk_24C9FA0E0;
  *(_QWORD *)(v7 + 152) = &unk_24C9FA108;
  *(_QWORD *)(v7 + 176) = 0;
  *(_QWORD *)(v7 + 184) = 0;
  *(_QWORD *)(v7 + 120) = (char *)off_24C9FA280 + 1;
  *(_QWORD *)(v7 + 128) = a1 + 1020;
  v8 = operator new();
  *(_QWORD *)v8 = &off_24C9FA248;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(a1 + 1020);
  *(_QWORD *)(v7 + 160) = v8;
  *(_QWORD *)(v7 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v7 + 191) = 7;
  sub_20E8B2F9C((uint64_t *)&__p, "pose_lock_strategy", v7, "How to lock the pose when VIO is in an untrackable state.");
  v14 = operator new(0x20uLL);
  v15 = xmmword_2102DBFB0;
  strcpy((char *)v14, "imu_extrapolation_config");
  sub_20F18C940(a1 + 8, (__int128 *)&v14, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (SHIBYTE(v15) < 0)
    operator delete(v14);
  BYTE7(v13[1]) = 18;
  strcpy((char *)v13, "visual_slam_config");
  sub_20F1E2338(a1 + 328, v13, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (SBYTE7(v13[1]) < 0)
    operator delete(*(void **)&v13[0]);
  BYTE7(v12[1]) = 21;
  strcpy((char *)v12, "pose_smoothing_config");
  sub_20F1B8784(a1 + 856, v12, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (SBYTE7(v12[1]) < 0)
    operator delete(*(void **)&v12[0]);
  HIBYTE(v11[2]) = 18;
  strcpy((char *)v11, "pose_filter_config");
  sub_20F1ACFC4((_BYTE *)(a1 + 1048), (uint64_t)v11, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (SHIBYTE(v11[2]) < 0)
    operator delete(v11[0]);
  v9 = operator new(0x20uLL);
  v10 = xmmword_2102DBFE0;
  strcpy((char *)v9, "ml_pose_prediction_config");
  sub_20F19AB98(a1 + 840, (__int128 *)&v9, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (SHIBYTE(v10) < 0)
    operator delete(v9);
}

void sub_20F1AE794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  sub_20E869298((uint64_t)&a43);
  if (a15 < 0)
    operator delete(__p);
  sub_20E869298(v48);
  _Unwind_Resume(a1);
}

void sub_20F1AE8A0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F1AEDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F1AEEB4(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F1AEED4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F1AEEF4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F1AEEFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F1AEF04(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F1AEF5C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio14pose_predictor16PoseLockStrategyE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio14pose_predictor16PoseLockStrategyE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_DWORD *)(*a2 + 8);
    v7 = *(_DWORD **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_DWORD **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_671;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _DWORD *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F1AF054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1AF068(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FA068;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA0E0;
  *(_QWORD *)(a1 + 152) = &unk_24C9FA108;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F1AF898(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F1AF898(a1);
}

void sub_20F1AF0D0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FA068;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA0E0;
  *(_QWORD *)(a1 + 152) = &unk_24C9FA108;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F1AF898(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F1AF14C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  std::string::size_type size;
  void *v18;
  std::string *v19;
  int v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  std::string *v25;
  std::string::size_type v26;
  int v27;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v31;
  std::bad_cast v32;
  void *v33;
  std::ios_base v34;
  uint64_t v35;
  int v36;
  _QWORD __sb[8];
  std::string v38;
  std::string v39;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v31 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v31);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v33 = 0;
  v34.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v32.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v34, __sb);
  v35 = 0;
  v36 = -1;
  v15 = (std::ios_base *)((char *)&v32 + (unint64_t)v32.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v32.__vftable;
  *(_DWORD *)((char *)&v32 + (unint64_t)v32.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v34.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  sub_20EA9DA18(&v39, *(_QWORD **)((char *)&v34.__width_ + (unint64_t)v16[-1].~bad_cast), 0);
  size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v39.__r_.__value_.__l.__size_;
  if (size != 12)
  {
    if (size == 8)
    {
      v18 = (void *)v39.__r_.__value_.__r.__words[0];
      v21 = &v39;
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if (v21->__r_.__value_.__r.__words[0] == 0x797469746E656449)
      {
        v20 = 1;
        if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
    else if (size == 4)
    {
      v18 = (void *)v39.__r_.__value_.__r.__words[0];
      v19 = &v39;
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if (LODWORD(v19->__r_.__value_.__l.__data_) == 1701736270)
      {
        v20 = 0;
        if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_25;
      }
    }
LABEL_44:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v38);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v18 = (void *)v39.__r_.__value_.__r.__words[0];
  v25 = &v39;
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v25 = (std::string *)v39.__r_.__value_.__r.__words[0];
  v26 = v25->__r_.__value_.__r.__words[0];
  v27 = v25->__r_.__value_.__r.__words[1];
  if (v26 != 0x6E6F697461746F52 || v27 != 2037149263)
    goto LABEL_44;
  v20 = 2;
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
LABEL_25:
    operator delete(v18);
LABEL_26:
  if ((*((_BYTE *)&v34.__precision_ + (unint64_t)v32.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
    goto LABEL_34;
  }
  v24 = std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (!v24)
  {
LABEL_34:
    std::bad_cast::bad_cast(&v32);
    v32.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v33 = &unk_24C9AB9F0;
    v34.__vftable = (std::ios_base_vtbl *)&unk_24C9FA228;
    sub_20EA9F254((uint64_t)&v32);
  }
  v22 = operator new();
  *(_QWORD *)v22 = &off_24C9FA248;
  *(_DWORD *)(v22 + 8) = v20;
  v23 = *a2;
  *a2 = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
}

void sub_20F1AF514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  void *v15;
  int v16;
  uint64_t v17;

  if (*(char *)(v17 - 73) < 0)
  {
    operator delete(*(void **)(v17 - 96));
    if ((v16 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v16)
  {
LABEL_6:
    if (*(char *)(v17 - 49) < 0)
      operator delete(*(void **)(v17 - 72));
    if (a2 == 2)
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      JUMPOUT(0x20F1AF384);
    }
    std::istream::~istream();
    std::streambuf::~streambuf();
    if (a2 == 1)
    {
      __cxa_begin_catch(a1);
      sub_20E8B898C(&a15, &__p);
      sub_20EA9ED20((uint64_t)&a15);
    }
    if (a14 < 0)
      operator delete(__p);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_20F1AF5FC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F1AF614);
}

void *sub_20F1AF630()
{
  return &unk_24C9FA228;
}

uint64_t sub_20F1AF63C(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F1AF644()
{
  return &unk_24C9FA228;
}

uint64_t sub_20F1AF650(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FA068;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FA0E0;
  *(_QWORD *)(a1 + 144) = &unk_24C9FA108;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F1AF898(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F1AF898(v2);
}

void sub_20F1AF6C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FA068;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FA0E0;
  *(_QWORD *)(a1 + 144) = &unk_24C9FA108;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F1AF898(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1AF744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FA068;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FA0E0;
  *(_QWORD *)a1 = &unk_24C9FA108;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F1AF898(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F1AF898(v2);
}

void sub_20F1AF7B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FA068;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FA0E0;
  *(_QWORD *)a1 = &unk_24C9FA108;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F1AF898(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1AF838(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F1AF844(uint64_t a1)
{
  sub_20F1AF898(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1AF868(uint64_t a1)
{
  return sub_20F1AF898(a1 - 8);
}

void sub_20F1AF870(uint64_t a1)
{
  sub_20F1AF898(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1AF898(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9FA1A0;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA210;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F1AF968()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F1AF97C()
{
  return &unk_24C9FA228;
}

uint64_t sub_20F1AF988(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9FA248;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_20F1AF9D0(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FA290;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor16PoseLockSt"
                                      "rategyEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor16PoseLockStrategyEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_DWORD **sub_20F1AFA7C(_DWORD **result, _DWORD *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20F1AFA8C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int64x2_t v4;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  *(_QWORD *)a1 = &off_24C9FA2B0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = (uint64_t *)(a1 + 16);
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 880) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 888) = xmmword_2103A5180;
  v4 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a1 + 904) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 912) = v4;
  *(int64x2_t *)(a1 + 928) = v4;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)(a1 + 944) = xmmword_2102DB700;
  *(_OWORD *)(a1 + 960) = _Q2;
  *(_QWORD *)(a1 + 976) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 1008) = _Q2;
  *(_QWORD *)(a1 + 1024) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_QWORD *)(a1 + 1056) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1088) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1120) = _Q2;
  *(_QWORD *)(a1 + 1160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1192) = 0x3FF0000000000000;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 912) = v10;
  v11 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 944) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 928) = v11;
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a2 + 56);
  v12 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 960) = v12;
  v13 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 984) = v13;
  v14 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 1008) = v14;
  v15 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 1048) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 1032) = v15;
  v17 = *(_OWORD *)(a2 + 192);
  v16 = *(_OWORD *)(a2 + 208);
  v18 = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 1120) = v18;
  *(_OWORD *)(a1 + 1104) = v16;
  *(_OWORD *)(a1 + 1088) = v17;
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 160);
  v19 = *(_OWORD *)(a2 + 264);
  v20 = *(_OWORD *)(a2 + 280);
  v21 = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 1144) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 1192) = v21;
  *(_OWORD *)(a1 + 1160) = v19;
  *(_OWORD *)(a1 + 1176) = v20;
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)(a2 + 232);
  v22 = operator new();
  sub_20F1BB56C(v22, 1);
  v23 = *v3;
  *v3 = v22;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(void **)(a1 + 216);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 232) - (_QWORD)v24) >> 3)) <= 0x3E7)
  {
    v25 = *(_QWORD *)(a1 + 224);
    v26 = (char *)operator new(0xDAC0uLL);
    v27 = &v26[v25 - (_QWORD)v24];
    v28 = v27;
    if ((void *)v25 != v24)
    {
      v28 = &v26[v25 - (_QWORD)v24];
      do
      {
        v29 = *(_QWORD *)(v25 - 56);
        v25 -= 56;
        *((_QWORD *)v28 - 7) = v29;
        v28 -= 56;
        v30 = *(_OWORD *)(v25 + 8);
        *((_QWORD *)v28 + 3) = *(_QWORD *)(v25 + 24);
        *(_OWORD *)(v28 + 8) = v30;
        v31 = *(_OWORD *)(v25 + 32);
        *((_QWORD *)v28 + 6) = *(_QWORD *)(v25 + 48);
        *((_OWORD *)v28 + 2) = v31;
      }
      while ((void *)v25 != v24);
    }
    *(_QWORD *)(a1 + 216) = v28;
    *(_QWORD *)(a1 + 224) = v27;
    *(_QWORD *)(a1 + 232) = v26 + 56000;
    if (v24)
      operator delete(v24);
  }
  return a1;
}

void sub_20F1AFD0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(v1 + 216);
  if (v4)
  {
    *(_QWORD *)(v1 + 224) = v4;
    operator delete(v4);
    v5 = *v2;
    *v2 = 0;
    if (!v5)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *v2;
    *v2 = 0;
    if (!v5)
      goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F1AFD7C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20F1AFD8C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

double sub_20F1AFD9C(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  float64x2_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int8x16_t v18;
  float64x2_t v19;
  int8x16_t v20;
  float64x2_t v22;
  _BYTE v23[32];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  double v32[3];

  if (*(_BYTE *)(a2 + 584)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictor.cpp", 59, (uint64_t)"!predictor_state.vision_tracker_pose_metadata", 45, (uint64_t)"Vision-only prediction not yet implemented", 42, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = *(double *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(float64x2_t *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 96);
  v12 = *(_OWORD *)(a2 + 112);
  v13 = *(_OWORD *)(a2 + 128);
  v14 = *(_OWORD *)(a2 + 144);
  v15 = *(_OWORD *)(a2 + 160);
  v31 = *(_QWORD *)(a2 + 176);
  v29 = v14;
  v30 = v15;
  v27 = v12;
  v28 = v13;
  v25 = v10;
  v26 = v11;
  *(_OWORD *)&v23[16] = v8;
  v24 = v9;
  v22 = v6;
  *(_OWORD *)v23 = v7;
  sub_20F1BC0D4(v5, (__int128 *)&v22, v4);
  v17 = *(_OWORD *)(a2 + 64);
  v16 = *(_OWORD *)(a2 + 80);
  v18 = *(int8x16_t *)(a2 + 48);
  v19 = *(float64x2_t *)(a2 + 16);
  v20 = vextq_s8(*(int8x16_t *)(a2 + 32), v18, 8uLL);
  *(_QWORD *)v23 = *(_QWORD *)(a2 + 32);
  v22 = v19;
  *(_QWORD *)&v23[24] = v18.i64[1];
  *(int8x16_t *)&v23[8] = v20;
  *(_QWORD *)&v25 = v16;
  v24 = v17;
  memset(v32, 0, sizeof(v32));
  sub_20E9733B8(&v22, v32);
  kdebug_trace();
  kdebug_trace();
  kdebug_trace();
  *(double *)(a1 + 888) = v4;
  return v4;
}

double sub_20F1AFF2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1[6] && v1[30] && v1[36])
  {
    v2 = v1[29];
    if (v2)
    {
      v3 = v1[25] + 32 * v2 - 32;
      v4 = v1[35];
      if (v4)
      {
LABEL_6:
        v5 = v1[31];
        goto LABEL_10;
      }
    }
    else
    {
      v3 = v1[25] + 32 * ((uint64_t)(v1[26] - v1[25]) >> 5) - 32;
      v4 = v1[35];
      if (v4)
        goto LABEL_6;
    }
    v6 = v1 + 31;
    v5 = v1[31];
    v4 = (v6[1] - v5) >> 5;
LABEL_10:
    result = *(double *)(v5 + 32 * v4 - 32);
    if (result >= *(double *)v3)
      return *(double *)v3;
  }
  return result;
}

uint64_t sub_20F1AFFC0(uint64_t result)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(result + 16);
  v1[4] = 0;
  v1[5] = 0;
  v1[6] = 0;
  v1[11] = 0;
  v1[12] = 0;
  v1[10] = 0;
  v1[17] = 0;
  v1[18] = 0;
  v1[16] = 0;
  v1[23] = 0;
  v1[24] = 0;
  v1[22] = 0;
  return result;
}

uint64_t sub_20F1AFFE8(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v19[104];
  void *__p;
  void *v21;
  char v22;

  v8 = *(_QWORD *)(a1 + 16);
  v19[0] = 0;
  v22 = 0;
  v9 = sub_20F1BCAF8(v8, a1 + 24, 0, 0, (uint64_t)v19, a4, 0, a5);
  if (v22 && __p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (!(_DWORD)v9)
  {
    kdebug_trace();
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 200)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 39, (uint64_t)"bundle.state", 12, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    *a3 = *(_QWORD *)(a1 + 208);
    v10 = *(_OWORD *)(a1 + 32);
    v11 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)a2 = v10;
    v12 = *(_OWORD *)(a1 + 80);
    v13 = *(_OWORD *)(a1 + 96);
    v14 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a2 + 96) = v14;
    *(_OWORD *)(a2 + 48) = v12;
    *(_OWORD *)(a2 + 64) = v13;
    v15 = *(_OWORD *)(a1 + 144);
    v16 = *(_OWORD *)(a1 + 160);
    v17 = *(_OWORD *)(a1 + 176);
    *(_QWORD *)(a2 + 160) = *(_QWORD *)(a1 + 192);
    *(_OWORD *)(a2 + 128) = v16;
    *(_OWORD *)(a2 + 144) = v17;
    *(_OWORD *)(a2 + 112) = v15;
    if (!*(_BYTE *)(a1 + 200) || *(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 224))
      sub_20F4BA010(a2, a1 + 896, (uint64_t *)(a1 + 216));
  }
  return v9;
}

void sub_20F1B0194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a28)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_20F1B01B8(uint64_t a1)
{
  return *(double *)(a1 + 888);
}

void sub_20F1B01C0(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  *a1 = &off_24C9FA2B0;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x212BC6398);
}

void sub_20F1B0224(double *a1, char **a2, _QWORD *a3, uint64_t *a4, double *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, _QWORD *a9, uint64_t a10)
{
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  const char *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  _BYTE *v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  double v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t i;
  unint64_t v109;
  uint64_t v110;
  __int128 v111;
  unint64_t v112;
  uint64_t v113;
  double v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  BOOL v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  __int128 v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  unint64_t v153;
  char **v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  __int128 v167;
  unint64_t v168;
  unint64_t v169;
  char **v170;
  double *v171;
  double *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  _QWORD v185[3];
  int v186;
  const char *v187;
  int v188;
  const char *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE v195[24];
  __int128 v196;
  void *v197[2];
  unint64_t v198;
  char v199;
  uint64_t v200;

  v200 = *MEMORY[0x24BDAC8D0];
  if (!a4[5]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 561, (uint64_t)"!imu_meas.empty()", 17, (uint64_t)"IMU measurement buffer must not be empty", 40, (void (*)(void **))sub_21023DDB0)|| !a3[10]&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 562, (uint64_t)"imu_filter_config.RLS_downsample_factor > 0", 43, (uint64_t)"RLS_downsample_factor > 0", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_222;
  }
  v18 = a4[4];
  if (v18)
  {
    v19 = *a4;
    v20 = a4[4];
    v21 = *a5;
    if (*a5 <= 0.0)
      goto LABEL_20;
  }
  else
  {
    v19 = *a4;
    v20 = (a4[1] - *a4) >> 5;
    v21 = *a5;
    if (*a5 <= 0.0)
      goto LABEL_20;
  }
  v22 = a3[2];
  v23 = a4[5];
  v24 = a3[10];
  if (v23 < v24 * v22)
    goto LABEL_20;
  v25 = *a1 - *(double *)(v19 + 32 * v20 - 32);
  if (v25 <= 0.0)
    goto LABEL_20;
  v26 = a2[1];
  if (*a2 == v26)
    goto LABEL_20;
  if (!v18)
    v18 = (unint64_t)(a4[1] - v19) >> 5;
  if (*(double *)(v19 + 32 * v18 - 32) != *((double *)v26 - 4))
  {
LABEL_20:
    sub_20F1B13B8(&v192);
    if (**(int **)(v192 + 56) > 5)
      goto LABEL_107;
    v30 = *(unsigned __int8 *)(v192 + 72);
    v31 = sub_20E8C31DC(v192, "OSLogSurrogateAppender", 1, 0);
    v32 = v31;
    if (!v30 && !v31)
      goto LABEL_107;
    v183 = v30;
    v185[0] = &v192;
    v185[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v185[2] = std::chrono::system_clock::now().__d_.__rep_;
    v186 = 5;
    v187 = "unknown file";
    v188 = 577;
    v190 = 0;
    v191 = 0;
    v189 = "unknown function";
    v33 = v192;
    if (*(char *)(v192 + 39) < 0)
    {
      v35 = *(const char **)(v192 + 16);
      v34 = *(_QWORD *)(v192 + 24);
      v181 = *(_QWORD *)v185[0] + 16;
      v172 = a1;
      v37 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v37 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v34 = *(unsigned __int8 *)(v192 + 39);
      v35 = (const char *)(*(_QWORD *)v185[0] + 16);
      v181 = (uint64_t)v35;
      v172 = a1;
      v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v36 & 1) != 0)
        goto LABEL_27;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v195);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v195);
      if ((_BYTE)v196 && (v195[23] & 0x80000000) != 0)
        operator delete(*(void **)v195);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_27:
    if (byte_254A4A4F8[23] >= 0)
      v38 = byte_254A4A4F8;
    else
      v38 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v39 = byte_254A4A4F8[23];
    else
      v39 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v195 = os_log_create(v38, v35);
    v40 = &v195[8];
    if (v39 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v39 >= 0x17)
    {
      v41 = v32;
      v42 = v35;
      v43 = v33;
      v44 = a2;
      v45 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v45 = v39 | 7;
      v46 = v45 + 1;
      v40 = operator new(v45 + 1);
      *(_QWORD *)&v195[16] = v39;
      *(_QWORD *)&v196 = v46 | 0x8000000000000000;
      *(_QWORD *)&v195[8] = v40;
      a2 = v44;
      v33 = v43;
      v35 = v42;
      v32 = v41;
    }
    else
    {
      BYTE7(v196) = v39;
      if (!v39)
      {
LABEL_41:
        v40[v39] = 0;
        BYTE8(v196) = 1;
        v47 = v197;
        if (v34 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v34 >= 0x17)
        {
          v49 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v49 = v34 | 7;
          v50 = v49 + 1;
          v47 = (void **)operator new(v49 + 1);
          v197[1] = (void *)v34;
          v198 = v50 | 0x8000000000000000;
          v197[0] = v47;
          a1 = v172;
        }
        else
        {
          HIBYTE(v198) = v34;
          a1 = v172;
          if (!v34)
          {
            LOBYTE(v197[0]) = 0;
            v199 = 1;
            v48 = *(NSObject **)v195;
            if ((SHIBYTE(v198) & 0x80000000) == 0)
              goto LABEL_45;
            goto LABEL_51;
          }
        }
        memmove(v47, v35, v34);
        *((_BYTE *)v47 + v34) = 0;
        v199 = 1;
        v48 = *(NSObject **)v195;
        if ((SHIBYTE(v198) & 0x80000000) == 0)
        {
LABEL_45:
          if (!BYTE8(v196))
            goto LABEL_54;
          goto LABEL_52;
        }
LABEL_51:
        operator delete(v197[0]);
        if (!BYTE8(v196))
          goto LABEL_54;
LABEL_52:
        if (SBYTE7(v196) < 0)
          operator delete(*(void **)&v195[8]);
LABEL_54:
        if (*(_QWORD *)v195)
          os_release(*(void **)v195);
        if (v32 && *(_QWORD *)(v32 + 24))
        {
          v51 = _os_log_pack_size();
          v52 = (std::__shared_weak_count_vtbl *)operator new(v51, (std::align_val_t)8uLL);
          v53 = (std::__shared_weak_count *)operator new();
          v54 = v53;
          v53->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          v53->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v53->__shared_weak_owners_ = 0;
          v53[1].__vftable = v52;
          *(_QWORD *)v195 = v52;
          *(_QWORD *)&v195[8] = v52;
          *(_QWORD *)&v195[16] = v53;
          do
            v56 = __ldxr(p_shared_owners);
          while (__stxr(v56 + 1, p_shared_owners));
          v196 = 0uLL;
          v197[0] = 0;
          do
            v57 = __ldaxr(p_shared_owners);
          while (__stlxr(v57 - 1, p_shared_owners));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v54);
          }
          v58 = *(_QWORD *)v195;
          v59 = _os_log_pack_fill();
          v60 = *v172;
          *(_DWORD *)v59 = 134217984;
          *(double *)(v59 + 4) = v60;
          v61 = operator new();
          v62 = *(unsigned __int8 *)(v33 + 39);
          v63 = v181;
          if ((v62 & 0x80u) != 0)
          {
            v63 = *(_QWORD *)(v33 + 16);
            v62 = *(_QWORD *)(v33 + 24);
          }
          *(_QWORD *)v61 = v58;
          *(_OWORD *)(v61 + 8) = *(_OWORD *)&v195[8];
          *(_QWORD *)&v195[8] = 0;
          *(_QWORD *)&v195[16] = 0;
          *(_OWORD *)(v61 + 24) = v196;
          v196 = 0uLL;
          *(_QWORD *)(v61 + 40) = v63;
          *(_QWORD *)(v61 + 48) = v62;
          *(_BYTE *)(v61 + 56) = 16;
          v193 = 0;
          v194 = v61;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v32 + 24) + 40))(*(_QWORD *)(v32 + 24), &v194);
          v64 = v194;
          v194 = 0;
          a1 = v172;
          if (v64)
          {
            v65 = *(std::__shared_weak_count **)(v64 + 32);
            if (v65)
            {
              v66 = (unint64_t *)&v65->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            v68 = *(std::__shared_weak_count **)(v64 + 16);
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
            v71 = v193;
            v193 = 0;
            if (v71)
            {
              v72 = *(std::__shared_weak_count **)(v71 + 32);
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              v75 = *(std::__shared_weak_count **)(v71 + 16);
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
            }
          }
          v78 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
          if (*((_QWORD *)&v196 + 1))
          {
            v79 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v81 = *(std::__shared_weak_count **)&v195[16];
          if (*(_QWORD *)&v195[16])
          {
            v82 = (unint64_t *)(*(_QWORD *)&v195[16] + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
        else
        {
          os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
          v84 = *a1;
          *(_DWORD *)v195 = 134217984;
          *(double *)&v195[4] = v84;
          v85 = (void *)_os_log_send_and_compose_impl();
          if (v85)
            free(v85);
        }
        if (v183)
        {
          sub_20E8C003C((uint64_t)v185, "AddRLSPredictiveMeasurement Error for predicting timetamp = %lf. Just copying last sample in buffer", *a1);
          sub_20E863570((uint64_t)v185);
        }
        sub_20E863570((uint64_t)v185);
        v86 = v191;
        if (v191)
        {
          v87 = (unint64_t *)&v191->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
            v89 = a4[4];
            if (v89)
              goto LABEL_108;
            goto LABEL_110;
          }
        }
LABEL_107:
        v89 = a4[4];
        if (v89)
        {
LABEL_108:
          v90 = *a4;
LABEL_111:
          v91 = v90 + 32 * v89;
          *(_OWORD *)v195 = *(_OWORD *)(v91 - 24);
          *(_QWORD *)&v195[16] = *(_QWORD *)(v91 - 8);
          v92 = *(_QWORD *)a1;
          v94 = a2[1];
          v93 = (unint64_t)a2[2];
          if ((unint64_t)v94 >= v93)
          {
            v96 = *a2;
            v97 = (v94 - *a2) >> 5;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 59)
              sub_20E867F44();
            v99 = v93 - (_QWORD)v96;
            if (v99 >> 4 > v98)
              v98 = v99 >> 4;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFE0)
              v100 = 0x7FFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
            {
              if (v100 >> 59)
                sub_20E877A38();
              v101 = (char *)operator new(32 * v100);
            }
            else
            {
              v101 = 0;
            }
            v102 = &v101[32 * v97];
            *(_QWORD *)v102 = v92;
            *(_OWORD *)(v102 + 8) = *(_OWORD *)v195;
            *((_QWORD *)v102 + 3) = *(_QWORD *)&v195[16];
            v95 = v102 + 32;
            if (v94 != v96)
            {
              do
              {
                v103 = *((_QWORD *)v94 - 4);
                v94 -= 32;
                *((_QWORD *)v102 - 4) = v103;
                v102 -= 32;
                v104 = *(_OWORD *)(v94 + 8);
                *((_QWORD *)v102 + 3) = *((_QWORD *)v94 + 3);
                *(_OWORD *)(v102 + 8) = v104;
              }
              while (v94 != v96);
              v94 = *a2;
            }
            *a2 = v102;
            a2[1] = v95;
            a2[2] = &v101[32 * v100];
            if (v94)
              operator delete(v94);
          }
          else
          {
            *(_QWORD *)v94 = v92;
            *(_OWORD *)(v94 + 8) = *(_OWORD *)v195;
            *((_QWORD *)v94 + 3) = *(_QWORD *)&v195[16];
            v95 = v94 + 32;
          }
          a2[1] = v95;
          return;
        }
LABEL_110:
        v90 = *a4;
        v89 = (a4[1] - *a4) >> 5;
        goto LABEL_111;
      }
    }
    memmove(v40, v38, v39);
    goto LABEL_41;
  }
  v27 = vcvtpd_u64_f64(v25 / (v21 * (double)v24));
  v169 = v27;
  v170 = a2;
  v168 = a3[3];
  if (v168 >= v27)
    v28 = v27;
  else
    v28 = a3[3];
  v29 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 5;
  v171 = a1;
  if (v22 <= v29)
  {
    if (v22 < v29)
      *(_QWORD *)(a6 + 8) = *(_QWORD *)a6 + 32 * v22;
  }
  else
  {
    sub_20EAF5F94((char **)a6, v22 - v29);
    v23 = a4[5];
    v24 = a3[10];
  }
  v105 = v24 * (v22 - 1);
  v106 = v23 + ~v105;
  if (v23)
  {
    if (v105 != -1 && !v106)
      goto LABEL_141;
    if (v105 == -1)
      goto LABEL_139;
  }
  else if (v105 == -1 || !v106)
  {
    goto LABEL_141;
  }
  v23 += ~v105;
LABEL_139:
  if ((v23 & 0x8000000000000000) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 599, (uint64_t)"imu_meas_iter >= imu_meas.begin()", 33, (uint64_t)"imu_measurement iterator issues!", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_222;
  }
LABEL_141:
  if (v22)
  {
    v107 = 0;
    for (i = 0; i != v22; ++i)
    {
      v109 = *a4 + 32 * ((a4[3] + v106) % ((a4[1] - *a4) >> 5));
      v110 = *(_QWORD *)a6 + v107;
      *(_QWORD *)v110 = *(_QWORD *)v109;
      v111 = *(_OWORD *)(v109 + 8);
      *(_QWORD *)(v110 + 24) = *(_QWORD *)(v109 + 24);
      *(_OWORD *)(v110 + 8) = v111;
      v112 = a3[10];
      if (i >= v22 - 1)
        v113 = 0;
      else
        v113 = a3[10];
      v106 += v113;
      v107 += 32;
    }
  }
  else
  {
    v112 = a3[10];
  }
  a7[1] = *a7;
  v114 = *a5 * (double)v112;
  if (a4[4])
  {
    if (v114 > 0.0)
      goto LABEL_154;
  }
  else if (v114 > 0.0)
  {
    goto LABEL_154;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 524, (uint64_t)"sample_period > 0", 17, (uint64_t)"sample_period must be greater than 0", 36, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_222;
  }
LABEL_154:
  v115 = a3[2];
  if (v115 > (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 5)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 526, (uint64_t)"imu_filter_input.size() >= imu_filter_config.num_taps", 53, (uint64_t)"imu_filter_input size must match number of RLS filter taps", 58, (void (*)(void **))sub_21023DDB0))
    {
      v115 = a3[2];
      goto LABEL_157;
    }
LABEL_222:
    abort();
  }
LABEL_157:
  v116 = 0;
  v175 = ((8 * v115 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8;
  v176 = 32 * v115 - 16;
  v174 = v175 - 8 * v115;
  v177 = v115 - 0x100000001;
  v173 = v115 & 0xFFFFFFFFFFFFFFFCLL;
  v178 = v115 - 1;
  v179 = v115;
  v117 = 72;
  v118 = 8;
  do
  {
    if (!v115)
      goto LABEL_173;
    v119 = *(char **)a6;
    v120 = *a8;
    if (v177 < 0xFFFFFFFF0000000BLL
      || ((unint64_t)&v119[8 * v116 + 8] < v120 + v175
        ? (v121 = v120 + v174 >= (unint64_t)&v119[8 * v116 + v176])
        : (v121 = 1),
          !v121))
    {
      v128 = 0;
LABEL_171:
      v129 = v178 - v128;
      v130 = &v119[32 * v128 + v118];
      do
      {
        v131 = *(_QWORD *)v130;
        v130 += 32;
        *(_QWORD *)(v120 + 8 * v129--) = v131;
      }
      while (v129 != -1);
      goto LABEL_173;
    }
    v122 = &v119[v117];
    v123 = v178;
    v124 = v173;
    do
    {
      *(_QWORD *)&v125 = *((_QWORD *)v122 - 4);
      *((_QWORD *)&v125 + 1) = *((_QWORD *)v122 - 8);
      *(_QWORD *)&v126 = *((_QWORD *)v122 + 4);
      *((_QWORD *)&v126 + 1) = *(_QWORD *)v122;
      v127 = v120 + 8 * v123;
      *(_OWORD *)(v127 - 8) = v125;
      *(_OWORD *)(v127 - 24) = v126;
      v122 += 128;
      v123 -= 4;
      v124 -= 4;
    }
    while (v124);
    v128 = v173;
    if (v115 != v173)
      goto LABEL_171;
LABEL_173:
    v182 = v117;
    v184 = v116;
    sub_20F18FBAC(*(_QWORD *)(a10 + 8 * v116));
    memset(v195, 0, sizeof(v195));
    if (v28)
    {
      if (!v184)
      {
        v135 = 0;
        v136 = (char *)a7[1];
        while (1)
        {
          v140 = a7[2];
          if ((unint64_t)v136 < v140)
          {
            *(_QWORD *)v136 = 0xBFF0000000000000;
            v137 = *(_OWORD *)v195;
            *((_QWORD *)v136 + 3) = *(_QWORD *)&v195[16];
            *(_OWORD *)(v136 + 8) = v137;
            v138 = v136 + 32;
          }
          else
          {
            v141 = a9;
            v142 = (char *)*a7;
            v143 = (uint64_t)&v136[-*a7] >> 5;
            v144 = v143 + 1;
            if ((unint64_t)(v143 + 1) >> 59)
              goto LABEL_220;
            v145 = a6;
            v146 = v140 - (_QWORD)v142;
            if (v146 >> 4 > v144)
              v144 = v146 >> 4;
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFE0)
              v147 = 0x7FFFFFFFFFFFFFFLL;
            else
              v147 = v144;
            if (v147)
            {
              if (v147 >> 59)
                goto LABEL_221;
              v148 = (char *)operator new(32 * v147);
            }
            else
            {
              v148 = 0;
            }
            v149 = &v148[32 * v143];
            *(_QWORD *)v149 = 0xBFF0000000000000;
            *(_OWORD *)(v149 + 8) = *(_OWORD *)v195;
            *((_QWORD *)v149 + 3) = *(_QWORD *)&v195[16];
            v150 = (uint64_t)v149;
            a9 = v141;
            if (v136 != v142)
            {
              do
              {
                v151 = *((_QWORD *)v136 - 4);
                v136 -= 32;
                *(_QWORD *)(v150 - 32) = v151;
                v150 -= 32;
                v152 = *(_OWORD *)(v136 + 8);
                *(_QWORD *)(v150 + 24) = *((_QWORD *)v136 + 3);
                *(_OWORD *)(v150 + 8) = v152;
              }
              while (v136 != v142);
              v136 = (char *)*a7;
            }
            v138 = v149 + 32;
            *a7 = v150;
            a7[1] = (uint64_t)(v149 + 32);
            a7[2] = (uint64_t)&v148[32 * v147];
            if (v136)
              operator delete(v136);
            a6 = v145;
          }
          a7[1] = (uint64_t)v138;
          v139 = *a7 + 32 * v135;
          *(double *)v139 = v114 * (double)(unint64_t)(v135 + 1) + *(double *)(*(_QWORD *)(a6 + 8) - 32);
          *(_QWORD *)(v139 + 8) = *(_QWORD *)(*a9 + 8 * v135);
          v136 = v138;
          if (++v135 == v28)
            goto LABEL_158;
        }
      }
      v132 = 0;
      v133 = *a9;
      v134 = *a7;
      do
      {
        *(_QWORD *)(v134 + v118) = *(_QWORD *)(v133 + 8 * v132++);
        v134 += 32;
      }
      while (v28 != v132);
    }
LABEL_158:
    v116 = v184 + 1;
    v117 = v182 + 8;
    v118 += 8;
    v115 = v179;
  }
  while (v184 != 2);
  v153 = a7[1];
  if (v168 >= v169)
  {
    v154 = v170;
    goto LABEL_219;
  }
  *(_OWORD *)v195 = *(_OWORD *)(v153 - 24);
  *(_QWORD *)&v195[16] = *(_QWORD *)(v153 - 8);
  v154 = v170;
  v155 = *(_QWORD *)v171;
  v156 = a7[2];
  if (v153 < v156)
  {
    *(_QWORD *)v153 = v155;
    *(_OWORD *)(v153 + 8) = *(_OWORD *)(v153 - 24);
    *(_QWORD *)(v153 + 24) = *(_QWORD *)(v153 - 8);
    v157 = v153 + 32;
    goto LABEL_218;
  }
  v158 = *a7;
  v159 = (uint64_t)(v153 - *a7) >> 5;
  v160 = v159 + 1;
  if ((unint64_t)(v159 + 1) >> 59)
LABEL_220:
    sub_20E867F44();
  v161 = v156 - v158;
  if (v161 >> 4 > v160)
    v160 = v161 >> 4;
  if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFE0)
    v162 = 0x7FFFFFFFFFFFFFFLL;
  else
    v162 = v160;
  if (v162)
  {
    if (v162 >> 59)
LABEL_221:
      sub_20E877A38();
    v163 = (char *)operator new(32 * v162);
  }
  else
  {
    v163 = 0;
  }
  v164 = &v163[32 * v159];
  v165 = &v163[32 * v162];
  *(_QWORD *)v164 = v155;
  *(_OWORD *)(v164 + 8) = *(_OWORD *)v195;
  *((_QWORD *)v164 + 3) = *(_QWORD *)&v195[16];
  v157 = (unint64_t)(v164 + 32);
  if (v153 == v158)
  {
    *a7 = (uint64_t)v164;
    a7[1] = v157;
    a7[2] = (uint64_t)v165;
LABEL_217:
    operator delete((void *)v153);
    goto LABEL_218;
  }
  do
  {
    v166 = *(_QWORD *)(v153 - 32);
    v153 -= 32;
    *((_QWORD *)v164 - 4) = v166;
    v164 -= 32;
    v167 = *(_OWORD *)(v153 + 8);
    *((_QWORD *)v164 + 3) = *(_QWORD *)(v153 + 24);
    *(_OWORD *)(v164 + 8) = v167;
  }
  while (v153 != v158);
  v153 = *a7;
  *a7 = (uint64_t)v164;
  a7[1] = v157;
  a7[2] = (uint64_t)v165;
  if (v153)
    goto LABEL_217;
LABEL_218:
  a7[1] = v157;
  v153 = v157;
LABEL_219:
  sub_20F1B82B4(v154, (uint64_t)v154[1], *a7, v153, (uint64_t)(v153 - *a7) >> 5);
}

void sub_20F1B1278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (*(_BYTE *)(v27 - 168))
  {
    if (*(char *)(v27 - 169) < 0)
      operator delete(*(void **)(v27 - 192));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B12B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86E8C4((uint64_t *)(v27 - 200));
  sub_20E86E8C4((uint64_t *)(v27 - 208));
  sub_20E86E658(v27 - 192);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B12E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86E658(v27 - 192);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B1300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  MEMORY[0x212BC6398](v27, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B132C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B1340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F1B13B8(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68148);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68148))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68140);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68148);
  }
  *a1 = qword_254A68140;
}

void sub_20F1B1454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68148);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68148);
  _Unwind_Resume(a1);
}

void sub_20F1B14AC(double *a1, char **a2, _QWORD *a3, uint64_t *a4, double *a5, uint64_t a6, uint64_t *a7, uint64_t *a8, _QWORD *a9, uint64_t a10)
{
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  size_t v34;
  const char *v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  const char *v38;
  size_t v39;
  _BYTE *v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  char **v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  double v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t i;
  unint64_t v109;
  uint64_t v110;
  __int128 v111;
  unint64_t v112;
  uint64_t v113;
  double v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  BOOL v121;
  char *v122;
  unint64_t v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  __int128 v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  unint64_t v153;
  char **v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  __int128 v167;
  unint64_t v168;
  unint64_t v169;
  char **v170;
  double *v171;
  double *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  _QWORD v185[3];
  int v186;
  const char *v187;
  int v188;
  const char *v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE v195[24];
  __int128 v196;
  void *v197[2];
  unint64_t v198;
  char v199;
  uint64_t v200;

  v200 = *MEMORY[0x24BDAC8D0];
  if (!a4[5]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 561, (uint64_t)"!imu_meas.empty()", 17, (uint64_t)"IMU measurement buffer must not be empty", 40, (void (*)(void **))sub_21023DDB0)|| !a3[10]&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 562, (uint64_t)"imu_filter_config.RLS_downsample_factor > 0", 43, (uint64_t)"RLS_downsample_factor > 0", 25, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_222;
  }
  v18 = a4[4];
  if (v18)
  {
    v19 = *a4;
    v20 = a4[4];
    v21 = *a5;
    if (*a5 <= 0.0)
      goto LABEL_20;
  }
  else
  {
    v19 = *a4;
    v20 = (a4[1] - *a4) >> 5;
    v21 = *a5;
    if (*a5 <= 0.0)
      goto LABEL_20;
  }
  v22 = a3[2];
  v23 = a4[5];
  v24 = a3[10];
  if (v23 < v24 * v22)
    goto LABEL_20;
  v25 = *a1 - *(double *)(v19 + 32 * v20 - 32);
  if (v25 <= 0.0)
    goto LABEL_20;
  v26 = a2[1];
  if (*a2 == v26)
    goto LABEL_20;
  if (!v18)
    v18 = (unint64_t)(a4[1] - v19) >> 5;
  if (*(double *)(v19 + 32 * v18 - 32) != *((double *)v26 - 4))
  {
LABEL_20:
    sub_20F1B13B8(&v192);
    if (**(int **)(v192 + 56) > 5)
      goto LABEL_107;
    v30 = *(unsigned __int8 *)(v192 + 72);
    v31 = sub_20E8C31DC(v192, "OSLogSurrogateAppender", 1, 0);
    v32 = v31;
    if (!v30 && !v31)
      goto LABEL_107;
    v183 = v30;
    v185[0] = &v192;
    v185[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v185[2] = std::chrono::system_clock::now().__d_.__rep_;
    v186 = 5;
    v187 = "unknown file";
    v188 = 577;
    v190 = 0;
    v191 = 0;
    v189 = "unknown function";
    v33 = v192;
    if (*(char *)(v192 + 39) < 0)
    {
      v35 = *(const char **)(v192 + 16);
      v34 = *(_QWORD *)(v192 + 24);
      v181 = *(_QWORD *)v185[0] + 16;
      v172 = a1;
      v37 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v37 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v34 = *(unsigned __int8 *)(v192 + 39);
      v35 = (const char *)(*(_QWORD *)v185[0] + 16);
      v181 = (uint64_t)v35;
      v172 = a1;
      v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v36 & 1) != 0)
        goto LABEL_27;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v195);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v195);
      if ((_BYTE)v196 && (v195[23] & 0x80000000) != 0)
        operator delete(*(void **)v195);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_27:
    if (byte_254A4A4F8[23] >= 0)
      v38 = byte_254A4A4F8;
    else
      v38 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v39 = byte_254A4A4F8[23];
    else
      v39 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v195 = os_log_create(v38, v35);
    v40 = &v195[8];
    if (v39 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v39 >= 0x17)
    {
      v41 = v32;
      v42 = v35;
      v43 = v33;
      v44 = a2;
      v45 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v45 = v39 | 7;
      v46 = v45 + 1;
      v40 = operator new(v45 + 1);
      *(_QWORD *)&v195[16] = v39;
      *(_QWORD *)&v196 = v46 | 0x8000000000000000;
      *(_QWORD *)&v195[8] = v40;
      a2 = v44;
      v33 = v43;
      v35 = v42;
      v32 = v41;
    }
    else
    {
      BYTE7(v196) = v39;
      if (!v39)
      {
LABEL_41:
        v40[v39] = 0;
        BYTE8(v196) = 1;
        v47 = v197;
        if (v34 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v34 >= 0x17)
        {
          v49 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v49 = v34 | 7;
          v50 = v49 + 1;
          v47 = (void **)operator new(v49 + 1);
          v197[1] = (void *)v34;
          v198 = v50 | 0x8000000000000000;
          v197[0] = v47;
          a1 = v172;
        }
        else
        {
          HIBYTE(v198) = v34;
          a1 = v172;
          if (!v34)
          {
            LOBYTE(v197[0]) = 0;
            v199 = 1;
            v48 = *(NSObject **)v195;
            if ((SHIBYTE(v198) & 0x80000000) == 0)
              goto LABEL_45;
            goto LABEL_51;
          }
        }
        memmove(v47, v35, v34);
        *((_BYTE *)v47 + v34) = 0;
        v199 = 1;
        v48 = *(NSObject **)v195;
        if ((SHIBYTE(v198) & 0x80000000) == 0)
        {
LABEL_45:
          if (!BYTE8(v196))
            goto LABEL_54;
          goto LABEL_52;
        }
LABEL_51:
        operator delete(v197[0]);
        if (!BYTE8(v196))
          goto LABEL_54;
LABEL_52:
        if (SBYTE7(v196) < 0)
          operator delete(*(void **)&v195[8]);
LABEL_54:
        if (*(_QWORD *)v195)
          os_release(*(void **)v195);
        if (v32 && *(_QWORD *)(v32 + 24))
        {
          v51 = _os_log_pack_size();
          v52 = (std::__shared_weak_count_vtbl *)operator new(v51, (std::align_val_t)8uLL);
          v53 = (std::__shared_weak_count *)operator new();
          v54 = v53;
          v53->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          v53->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v53->__shared_weak_owners_ = 0;
          v53[1].__vftable = v52;
          *(_QWORD *)v195 = v52;
          *(_QWORD *)&v195[8] = v52;
          *(_QWORD *)&v195[16] = v53;
          do
            v56 = __ldxr(p_shared_owners);
          while (__stxr(v56 + 1, p_shared_owners));
          v196 = 0uLL;
          v197[0] = 0;
          do
            v57 = __ldaxr(p_shared_owners);
          while (__stlxr(v57 - 1, p_shared_owners));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v54);
          }
          v58 = *(_QWORD *)v195;
          v59 = _os_log_pack_fill();
          v60 = *v172;
          *(_DWORD *)v59 = 134217984;
          *(double *)(v59 + 4) = v60;
          v61 = operator new();
          v62 = *(unsigned __int8 *)(v33 + 39);
          v63 = v181;
          if ((v62 & 0x80u) != 0)
          {
            v63 = *(_QWORD *)(v33 + 16);
            v62 = *(_QWORD *)(v33 + 24);
          }
          *(_QWORD *)v61 = v58;
          *(_OWORD *)(v61 + 8) = *(_OWORD *)&v195[8];
          *(_QWORD *)&v195[8] = 0;
          *(_QWORD *)&v195[16] = 0;
          *(_OWORD *)(v61 + 24) = v196;
          v196 = 0uLL;
          *(_QWORD *)(v61 + 40) = v63;
          *(_QWORD *)(v61 + 48) = v62;
          *(_BYTE *)(v61 + 56) = 16;
          v193 = 0;
          v194 = v61;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v32 + 24) + 40))(*(_QWORD *)(v32 + 24), &v194);
          v64 = v194;
          v194 = 0;
          a1 = v172;
          if (v64)
          {
            v65 = *(std::__shared_weak_count **)(v64 + 32);
            if (v65)
            {
              v66 = (unint64_t *)&v65->__shared_owners_;
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 - 1, v66));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                std::__shared_weak_count::__release_weak(v65);
              }
            }
            v68 = *(std::__shared_weak_count **)(v64 + 16);
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            MEMORY[0x212BC6398](v64, 0x10F0C40B62ED6C6);
            v71 = v193;
            v193 = 0;
            if (v71)
            {
              v72 = *(std::__shared_weak_count **)(v71 + 32);
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              v75 = *(std::__shared_weak_count **)(v71 + 16);
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              MEMORY[0x212BC6398](v71, 0x10F0C40B62ED6C6);
            }
          }
          v78 = (std::__shared_weak_count *)*((_QWORD *)&v196 + 1);
          if (*((_QWORD *)&v196 + 1))
          {
            v79 = (unint64_t *)(*((_QWORD *)&v196 + 1) + 8);
            do
              v80 = __ldaxr(v79);
            while (__stlxr(v80 - 1, v79));
            if (!v80)
            {
              ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
              std::__shared_weak_count::__release_weak(v78);
            }
          }
          v81 = *(std::__shared_weak_count **)&v195[16];
          if (*(_QWORD *)&v195[16])
          {
            v82 = (unint64_t *)(*(_QWORD *)&v195[16] + 8);
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
        else
        {
          os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
          v84 = *a1;
          *(_DWORD *)v195 = 134217984;
          *(double *)&v195[4] = v84;
          v85 = (void *)_os_log_send_and_compose_impl();
          if (v85)
            free(v85);
        }
        if (v183)
        {
          sub_20E8C003C((uint64_t)v185, "AddRLSPredictiveMeasurement Error for predicting timetamp = %lf. Just copying last sample in buffer", *a1);
          sub_20E863570((uint64_t)v185);
        }
        sub_20E863570((uint64_t)v185);
        v86 = v191;
        if (v191)
        {
          v87 = (unint64_t *)&v191->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
            v89 = a4[4];
            if (v89)
              goto LABEL_108;
            goto LABEL_110;
          }
        }
LABEL_107:
        v89 = a4[4];
        if (v89)
        {
LABEL_108:
          v90 = *a4;
LABEL_111:
          v91 = v90 + 32 * v89;
          *(_OWORD *)v195 = *(_OWORD *)(v91 - 24);
          *(_QWORD *)&v195[16] = *(_QWORD *)(v91 - 8);
          v92 = *(_QWORD *)a1;
          v94 = a2[1];
          v93 = (unint64_t)a2[2];
          if ((unint64_t)v94 >= v93)
          {
            v96 = *a2;
            v97 = (v94 - *a2) >> 5;
            v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 59)
              sub_20E867F44();
            v99 = v93 - (_QWORD)v96;
            if (v99 >> 4 > v98)
              v98 = v99 >> 4;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFE0)
              v100 = 0x7FFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
            {
              if (v100 >> 59)
                sub_20E877A38();
              v101 = (char *)operator new(32 * v100);
            }
            else
            {
              v101 = 0;
            }
            v102 = &v101[32 * v97];
            *(_QWORD *)v102 = v92;
            *(_OWORD *)(v102 + 8) = *(_OWORD *)v195;
            *((_QWORD *)v102 + 3) = *(_QWORD *)&v195[16];
            v95 = v102 + 32;
            if (v94 != v96)
            {
              do
              {
                v103 = *((_QWORD *)v94 - 4);
                v94 -= 32;
                *((_QWORD *)v102 - 4) = v103;
                v102 -= 32;
                v104 = *(_OWORD *)(v94 + 8);
                *((_QWORD *)v102 + 3) = *((_QWORD *)v94 + 3);
                *(_OWORD *)(v102 + 8) = v104;
              }
              while (v94 != v96);
              v94 = *a2;
            }
            *a2 = v102;
            a2[1] = v95;
            a2[2] = &v101[32 * v100];
            if (v94)
              operator delete(v94);
          }
          else
          {
            *(_QWORD *)v94 = v92;
            *(_OWORD *)(v94 + 8) = *(_OWORD *)v195;
            *((_QWORD *)v94 + 3) = *(_QWORD *)&v195[16];
            v95 = v94 + 32;
          }
          a2[1] = v95;
          return;
        }
LABEL_110:
        v90 = *a4;
        v89 = (a4[1] - *a4) >> 5;
        goto LABEL_111;
      }
    }
    memmove(v40, v38, v39);
    goto LABEL_41;
  }
  v27 = vcvtpd_u64_f64(v25 / (v21 * (double)v24));
  v169 = v27;
  v170 = a2;
  v168 = a3[3];
  if (v168 >= v27)
    v28 = v27;
  else
    v28 = a3[3];
  v29 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 5;
  v171 = a1;
  if (v22 <= v29)
  {
    if (v22 < v29)
      *(_QWORD *)(a6 + 8) = *(_QWORD *)a6 + 32 * v22;
  }
  else
  {
    sub_20EAF5F94((char **)a6, v22 - v29);
    v23 = a4[5];
    v24 = a3[10];
  }
  v105 = v24 * (v22 - 1);
  v106 = v23 + ~v105;
  if (v23)
  {
    if (v105 != -1 && !v106)
      goto LABEL_141;
    if (v105 == -1)
      goto LABEL_139;
  }
  else if (v105 == -1 || !v106)
  {
    goto LABEL_141;
  }
  v23 += ~v105;
LABEL_139:
  if ((v23 & 0x8000000000000000) != 0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 599, (uint64_t)"imu_meas_iter >= imu_meas.begin()", 33, (uint64_t)"imu_measurement iterator issues!", 32, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_222;
  }
LABEL_141:
  if (v22)
  {
    v107 = 0;
    for (i = 0; i != v22; ++i)
    {
      v109 = *a4 + 32 * ((a4[3] + v106) % ((a4[1] - *a4) >> 5));
      v110 = *(_QWORD *)a6 + v107;
      *(_QWORD *)v110 = *(_QWORD *)v109;
      v111 = *(_OWORD *)(v109 + 8);
      *(_QWORD *)(v110 + 24) = *(_QWORD *)(v109 + 24);
      *(_OWORD *)(v110 + 8) = v111;
      v112 = a3[10];
      if (i >= v22 - 1)
        v113 = 0;
      else
        v113 = a3[10];
      v106 += v113;
      v107 += 32;
    }
  }
  else
  {
    v112 = a3[10];
  }
  a7[1] = *a7;
  v114 = *a5 * (double)v112;
  if (a4[4])
  {
    if (v114 > 0.0)
      goto LABEL_154;
  }
  else if (v114 > 0.0)
  {
    goto LABEL_154;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 524, (uint64_t)"sample_period > 0", 17, (uint64_t)"sample_period must be greater than 0", 36, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_222;
  }
LABEL_154:
  v115 = a3[2];
  if (v115 > (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 5)
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 526, (uint64_t)"imu_filter_input.size() >= imu_filter_config.num_taps", 53, (uint64_t)"imu_filter_input size must match number of RLS filter taps", 58, (void (*)(void **))sub_21023DDB0))
    {
      v115 = a3[2];
      goto LABEL_157;
    }
LABEL_222:
    abort();
  }
LABEL_157:
  v116 = 0;
  v175 = ((8 * v115 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8;
  v176 = 32 * v115 - 16;
  v174 = v175 - 8 * v115;
  v177 = v115 - 0x100000001;
  v173 = v115 & 0xFFFFFFFFFFFFFFFCLL;
  v178 = v115 - 1;
  v179 = v115;
  v117 = 72;
  v118 = 8;
  do
  {
    if (!v115)
      goto LABEL_173;
    v119 = *(char **)a6;
    v120 = *a8;
    if (v177 < 0xFFFFFFFF0000000BLL
      || ((unint64_t)&v119[8 * v116 + 8] < v120 + v175
        ? (v121 = v120 + v174 >= (unint64_t)&v119[8 * v116 + v176])
        : (v121 = 1),
          !v121))
    {
      v128 = 0;
LABEL_171:
      v129 = v178 - v128;
      v130 = &v119[32 * v128 + v118];
      do
      {
        v131 = *(_QWORD *)v130;
        v130 += 32;
        *(_QWORD *)(v120 + 8 * v129--) = v131;
      }
      while (v129 != -1);
      goto LABEL_173;
    }
    v122 = &v119[v117];
    v123 = v178;
    v124 = v173;
    do
    {
      *(_QWORD *)&v125 = *((_QWORD *)v122 - 4);
      *((_QWORD *)&v125 + 1) = *((_QWORD *)v122 - 8);
      *(_QWORD *)&v126 = *((_QWORD *)v122 + 4);
      *((_QWORD *)&v126 + 1) = *(_QWORD *)v122;
      v127 = v120 + 8 * v123;
      *(_OWORD *)(v127 - 8) = v125;
      *(_OWORD *)(v127 - 24) = v126;
      v122 += 128;
      v123 -= 4;
      v124 -= 4;
    }
    while (v124);
    v128 = v173;
    if (v115 != v173)
      goto LABEL_171;
LABEL_173:
    v182 = v117;
    v184 = v116;
    sub_20F18FBAC(*(_QWORD *)(a10 + 8 * v116));
    memset(v195, 0, sizeof(v195));
    if (v28)
    {
      if (!v184)
      {
        v135 = 0;
        v136 = (char *)a7[1];
        while (1)
        {
          v140 = a7[2];
          if ((unint64_t)v136 < v140)
          {
            *(_QWORD *)v136 = 0xBFF0000000000000;
            v137 = *(_OWORD *)v195;
            *((_QWORD *)v136 + 3) = *(_QWORD *)&v195[16];
            *(_OWORD *)(v136 + 8) = v137;
            v138 = v136 + 32;
          }
          else
          {
            v141 = a9;
            v142 = (char *)*a7;
            v143 = (uint64_t)&v136[-*a7] >> 5;
            v144 = v143 + 1;
            if ((unint64_t)(v143 + 1) >> 59)
              goto LABEL_220;
            v145 = a6;
            v146 = v140 - (_QWORD)v142;
            if (v146 >> 4 > v144)
              v144 = v146 >> 4;
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFE0)
              v147 = 0x7FFFFFFFFFFFFFFLL;
            else
              v147 = v144;
            if (v147)
            {
              if (v147 >> 59)
                goto LABEL_221;
              v148 = (char *)operator new(32 * v147);
            }
            else
            {
              v148 = 0;
            }
            v149 = &v148[32 * v143];
            *(_QWORD *)v149 = 0xBFF0000000000000;
            *(_OWORD *)(v149 + 8) = *(_OWORD *)v195;
            *((_QWORD *)v149 + 3) = *(_QWORD *)&v195[16];
            v150 = (uint64_t)v149;
            a9 = v141;
            if (v136 != v142)
            {
              do
              {
                v151 = *((_QWORD *)v136 - 4);
                v136 -= 32;
                *(_QWORD *)(v150 - 32) = v151;
                v150 -= 32;
                v152 = *(_OWORD *)(v136 + 8);
                *(_QWORD *)(v150 + 24) = *((_QWORD *)v136 + 3);
                *(_OWORD *)(v150 + 8) = v152;
              }
              while (v136 != v142);
              v136 = (char *)*a7;
            }
            v138 = v149 + 32;
            *a7 = v150;
            a7[1] = (uint64_t)(v149 + 32);
            a7[2] = (uint64_t)&v148[32 * v147];
            if (v136)
              operator delete(v136);
            a6 = v145;
          }
          a7[1] = (uint64_t)v138;
          v139 = *a7 + 32 * v135;
          *(double *)v139 = v114 * (double)(unint64_t)(v135 + 1) + *(double *)(*(_QWORD *)(a6 + 8) - 32);
          *(_QWORD *)(v139 + 8) = *(_QWORD *)(*a9 + 8 * v135);
          v136 = v138;
          if (++v135 == v28)
            goto LABEL_158;
        }
      }
      v132 = 0;
      v133 = *a9;
      v134 = *a7;
      do
      {
        *(_QWORD *)(v134 + v118) = *(_QWORD *)(v133 + 8 * v132++);
        v134 += 32;
      }
      while (v28 != v132);
    }
LABEL_158:
    v116 = v184 + 1;
    v117 = v182 + 8;
    v118 += 8;
    v115 = v179;
  }
  while (v184 != 2);
  v153 = a7[1];
  if (v168 >= v169)
  {
    v154 = v170;
    goto LABEL_219;
  }
  *(_OWORD *)v195 = *(_OWORD *)(v153 - 24);
  *(_QWORD *)&v195[16] = *(_QWORD *)(v153 - 8);
  v154 = v170;
  v155 = *(_QWORD *)v171;
  v156 = a7[2];
  if (v153 < v156)
  {
    *(_QWORD *)v153 = v155;
    *(_OWORD *)(v153 + 8) = *(_OWORD *)(v153 - 24);
    *(_QWORD *)(v153 + 24) = *(_QWORD *)(v153 - 8);
    v157 = v153 + 32;
    goto LABEL_218;
  }
  v158 = *a7;
  v159 = (uint64_t)(v153 - *a7) >> 5;
  v160 = v159 + 1;
  if ((unint64_t)(v159 + 1) >> 59)
LABEL_220:
    sub_20E867F44();
  v161 = v156 - v158;
  if (v161 >> 4 > v160)
    v160 = v161 >> 4;
  if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFE0)
    v162 = 0x7FFFFFFFFFFFFFFLL;
  else
    v162 = v160;
  if (v162)
  {
    if (v162 >> 59)
LABEL_221:
      sub_20E877A38();
    v163 = (char *)operator new(32 * v162);
  }
  else
  {
    v163 = 0;
  }
  v164 = &v163[32 * v159];
  v165 = &v163[32 * v162];
  *(_QWORD *)v164 = v155;
  *(_OWORD *)(v164 + 8) = *(_OWORD *)v195;
  *((_QWORD *)v164 + 3) = *(_QWORD *)&v195[16];
  v157 = (unint64_t)(v164 + 32);
  if (v153 == v158)
  {
    *a7 = (uint64_t)v164;
    a7[1] = v157;
    a7[2] = (uint64_t)v165;
LABEL_217:
    operator delete((void *)v153);
    goto LABEL_218;
  }
  do
  {
    v166 = *(_QWORD *)(v153 - 32);
    v153 -= 32;
    *((_QWORD *)v164 - 4) = v166;
    v164 -= 32;
    v167 = *(_OWORD *)(v153 + 8);
    *((_QWORD *)v164 + 3) = *(_QWORD *)(v153 + 24);
    *(_OWORD *)(v164 + 8) = v167;
  }
  while (v153 != v158);
  v153 = *a7;
  *a7 = (uint64_t)v164;
  a7[1] = v157;
  a7[2] = (uint64_t)v165;
  if (v153)
    goto LABEL_217;
LABEL_218:
  a7[1] = v157;
  v153 = v157;
LABEL_219:
  sub_20F1B82B4(v154, (uint64_t)v154[1], *a7, v153, (uint64_t)(v153 - *a7) >> 5);
}

void sub_20F1B2500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (*(_BYTE *)(v27 - 168))
  {
    if (*(char *)(v27 - 169) < 0)
      operator delete(*(void **)(v27 - 192));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B2540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86E8C4((uint64_t *)(v27 - 200));
  sub_20E86E8C4((uint64_t *)(v27 - 208));
  sub_20E86E658(v27 - 192);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  sub_20E86E658(v27 - 192);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B2588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  MEMORY[0x212BC6398](v27, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B25B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20E863714((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20F1B25C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F1B2640(double *a1, _BYTE *a2, unint64_t a3, double a4, float64x2_t a5, double a6, double a7, float64x2_t a8)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  double v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  float64x2_t v33;
  double v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  _BOOL4 v45;
  double v46;
  uint64_t v47;
  unint64_t v48;

  if (a4 <= 0.0)
    goto LABEL_76;
  v8 = *((_QWORD *)a1 + 5);
  if (!v8)
    goto LABEL_76;
  v9 = *((_QWORD *)a1 + 4);
  if (v9)
  {
    v10 = *a1;
    v11 = *((_QWORD *)a1 + 1);
    v12 = *(double *)(*(_QWORD *)a1 + 32 * v9 - 32);
    v13 = (v11 - *(_QWORD *)a1) >> 5;
    v14 = 0;
    v15 = 0;
    if (v12 < a5.f64[0])
      goto LABEL_5;
  }
  else
  {
    v10 = *a1;
    v11 = *((_QWORD *)a1 + 1);
    v13 = (v11 - *(_QWORD *)a1) >> 5;
    v12 = *(double *)(v11 - 32);
    v14 = 0;
    v15 = 0;
    if (v12 < a5.f64[0])
    {
LABEL_5:
      v16 = v12 - a4;
      v17 = *((_QWORD *)a1 + 3);
      v18 = *((_QWORD *)a1 + 5);
      do
      {
        v19 = v18 >> 1;
        v20 = (v18 >> 1) + v15;
        if (*(double *)(*(_QWORD *)&v10 + 32 * ((v20 + v17) % v13)) <= v16)
        {
          v15 = v20 + 1;
          v14 = v20 + 1 == v8;
          v19 = v18 + ~v19;
        }
        v18 = v19;
      }
      while (v19);
      result = *((uint64_t *)a1 + 5);
      goto LABEL_20;
    }
  }
  v22 = a5.f64[0] - a4;
  v17 = *((_QWORD *)a1 + 3);
  v23 = *((_QWORD *)a1 + 5);
  do
  {
    v24 = v23 >> 1;
    v25 = (v23 >> 1) + v15;
    if (*(double *)(*(_QWORD *)&v10 + 32 * ((v25 + v17) % v13)) <= v22)
    {
      v15 = v25 + 1;
      v14 = v25 + 1 == v8;
      v24 = v23 + ~v24;
    }
    v23 = v24;
  }
  while (v24);
  *(double *)&result = 0.0;
  v26 = v8;
  do
  {
    v27 = v26 >> 1;
    v28 = (v26 >> 1) + result;
    if (*(double *)(*(_QWORD *)&v10 + 32 * ((v28 + v17) % v13)) <= a5.f64[0])
    {
      result = v28 + 1;
      LOBYTE(v24) = v28 + 1 == v8;
      v27 = v26 + ~v27;
    }
    v26 = v27;
  }
  while (v27);
  if (!(_BYTE)v24)
  {
    if (*(double *)&result != 0.0 || v14 || v15)
    {
      if (*(double *)&result == 0.0 && v14)
      {
        *(double *)&result = 0.0;
        if (v8 >= 1)
          return result;
        v45 = 1;
        v14 = 1;
        goto LABEL_78;
      }
      if (v15 - result >= 1)
        goto LABEL_76;
    }
    else
    {
      v14 = 0;
      *(double *)&result = 0.0;
    }
    v45 = result == 0;
    if (!v15 && *(double *)&result == 0.0 && !v14)
    {
      v15 = 0;
      *(double *)&result = 0.0;
      v14 = 0;
      LODWORD(v30) = 0;
LABEL_82:
      v29 = 1;
      goto LABEL_22;
    }
LABEL_78:
    if (v45 && v14)
    {
      *(double *)&result = 0.0;
      v29 = 1;
      v14 = 1;
      LODWORD(v30) = v8;
      goto LABEL_22;
    }
    LODWORD(v30) = v15 - result;
    goto LABEL_82;
  }
LABEL_20:
  if (v14)
  {
    v29 = 0;
    LODWORD(v30) = 0;
    v14 = 1;
  }
  else if (v15)
  {
    LODWORD(v30) = v15 - result;
    if (v15 - result >= 1)
      goto LABEL_76;
    v29 = 0;
    v14 = 0;
  }
  else
  {
    if (v8 < 0)
      goto LABEL_76;
    v29 = 0;
    v15 = 0;
    v14 = 0;
    v30 = -v8;
  }
LABEL_22:
  v31 = -(int)v30;
  if (v31 < 1)
  {
LABEL_76:
    *(double *)&result = 0.0;
    return result;
  }
  v32 = (v11 - *(_QWORD *)&v10) >> 5;
  if (*a2)
  {
    v33.f64[0] = 0.0;
    v34 = 0.0;
    a5.f64[0] = 0.0;
    v35 = 0.0;
    if (!v29)
      goto LABEL_31;
LABEL_25:
    if (*(double *)&result != 0.0 || v14 || v15)
    {
      if (*(double *)&result != 0.0 || (v36 = v8, !v14))
LABEL_33:
        v36 = v15 - result;
      while (v36 < 0)
      {
        v37 = *(_QWORD *)&v10 + 32 * ((v17 + v15) % v32);
        a8.f64[0] = *(float64_t *)(v37 + 24);
        _Q5 = *(float64x2_t *)(v37 + 8);
        v33.f64[1] = v34;
        v33 = vaddq_f64(v33, _Q5);
        *(_QWORD *)&v34 = vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL).u64[0];
        a5 = vaddq_f64(a5, a8);
        _D7 = *(_QWORD *)(v37 + 16);
        __asm { FMLA            D6, D7, V5.D[1] }
        v35 = v35 + _D6 + a8.f64[0] * a8.f64[0];
        _ZF = v8 - 1 == v15++;
        v14 = _ZF;
        if (v29)
          goto LABEL_25;
LABEL_31:
        if (v14)
          break;
        v36 = -v8;
        if (v15)
          goto LABEL_33;
      }
    }
    v33.f64[1] = v34;
    *(double *)&result = (v35 * (double)v31 - (vmulq_f64(v33, v33).f64[0] + v34 * v34 + a5.f64[0] * a5.f64[0]))
                       * (double)a3
                       / (double)v31;
  }
  else
  {
    v46 = 0.0;
    if (!v29)
      goto LABEL_59;
LABEL_53:
    if (*(double *)&result != 0.0 || v14 || v15)
    {
      if (*(double *)&result != 0.0 || (v47 = v8, !v14))
LABEL_61:
        v47 = v15 - result;
      while (v47 < 0)
      {
        v48 = *(_QWORD *)&v10 + 32 * ((v17 + v15) % v32);
        _Q2 = *(_OWORD *)(v48 + 8);
        _D4 = *(_QWORD *)(v48 + 16);
        __asm { FMLA            D3, D4, V2.D[1] }
        v46 = v46 + _D3 + *(double *)(v48 + 24) * *(double *)(v48 + 24);
        _ZF = v8 - 1 == v15++;
        v14 = _ZF;
        if (v29)
          goto LABEL_53;
LABEL_59:
        if (v14)
          break;
        v47 = -v8;
        if (v15)
          goto LABEL_61;
      }
    }
    *(double *)&result = v46 * (double)a3 / (double)v31;
  }
  return result;
}

uint64_t sub_20F1B2A40(uint64_t *a1, uint64_t a2, double a3, float64x2_t a4, float64x2_t a5, double a6, float64x2_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;

  v7 = a1[5];
  if (!v7)
    return 0;
  v8 = a1[4];
  if (!v8)
  {
    v9 = *a1;
    v12 = (a1[1] - *a1) >> 5;
    v10 = v12 - 1;
    v11 = *(double *)(*a1 + 32 * (v12 - 1));
    if (v11 != a3)
      goto LABEL_9;
LABEL_6:
    *(double *)a2 = v11;
    v13 = v9 + 32 * v10;
    v14 = *(_OWORD *)(v13 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v13 + 24);
    *(_OWORD *)(a2 + 8) = v14;
    return 1;
  }
  v9 = *a1;
  v10 = v8 - 1;
  v11 = *(double *)(*a1 + 32 * (v8 - 1));
  if (v11 == a3)
    goto LABEL_6;
  v12 = (a1[1] - v9) >> 5;
LABEL_9:
  v16 = 0;
  v17 = 0;
  v18 = a1[3];
  v19 = a1[5];
  do
  {
    v20 = v19 >> 1;
    v21 = (v19 >> 1) + v17;
    if (*(double *)(v9 + 32 * ((v21 + v18) % v12)) <= a3)
    {
      v17 = v21 + 1;
      v16 = v21 + 1 == v7;
      v20 = v19 + ~v20;
    }
    v19 = v20;
  }
  while (v20);
  result = 0;
  if (!v16 && v17)
  {
    v22 = v17 + v18;
    v23 = v9 + 32 * ((v22 - 1) % v12);
    v24 = v9 + 32 * (v22 % v12);
    v25 = *(double *)v24 - *(double *)v23;
    if (v25 < 0.0)
      return 0;
    a4.f64[0] = 0.0;
    if (v25 != 0.0)
      a4.f64[0] = (a3 - *(double *)v23) / v25;
    a5.f64[0] = *(float64_t *)(v24 + 24);
    a7.f64[0] = *(float64_t *)(v23 + 24);
    *(float64x2_t *)(a2 + 8) = vaddq_f64(*(float64x2_t *)(v23 + 8), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v24 + 8), *(float64x2_t *)(v23 + 8)), a4.f64[0]));
    *(_QWORD *)(a2 + 24) = *(_OWORD *)&vaddq_f64(a7, vmulq_f64(a4, vsubq_f64(a5, a7)));
    *(double *)a2 = a3;
    return 1;
  }
  return result;
}

void sub_20F1B2BA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float64x2_t a4@<Q0>, double a5@<D1>, double a6@<D2>)
{
  double v9;
  double v13;
  float64x2_t v14;
  double v15;
  float64x2_t v16;
  int64x2_t v17;
  double v18;
  double v20;
  double v21;
  double v22;
  float64x2_t v24;
  float64x2_t v25;
  double v30;
  float64x2_t v31;
  float64x2_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v45;
  double v46;
  double v47;
  int v48;
  unint64_t v49;
  unint64_t v51;
  size_t v52;
  const char *v53;
  unsigned __int8 v54;
  double v55;
  double v56;
  double v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  int8x16_t v68;
  double v69;
  float64x2_t v70;
  unsigned __int8 v71;
  float64x2_t v72;
  float64x2_t v73;
  unint64_t v74;
  double v75;
  double v76;
  __double2 v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v83;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v90;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v96;
  float64x2_t v99;
  float64x2_t v100;
  __double2 v104;
  float64x2_t v107;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v119;
  float64x2_t v125;
  float64x2_t v127;
  int64x2_t v129;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  unint64_t v139;
  unint64_t v140;
  float64x2_t v141;
  unint64_t v142;
  float64x2_t v143;
  double v144;
  double v147;
  double v149;
  double v150;
  double v151;
  double cosval;
  double v153;
  __double2 v154;
  float64_t v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  float64_t v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  unsigned __int8 v172;
  const char *v173;
  size_t v174;
  _BYTE *v175;
  unint64_t v176;
  const char *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  double *v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  size_t v185;
  std::__shared_weak_count_vtbl *v186;
  std::__shared_weak_count *v187;
  std::__shared_weak_count *v188;
  unint64_t *p_shared_owners;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  void *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  int v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  int8x16_t v231;
  float64x2_t v232;
  unint64_t v233;
  float64x2_t v234;
  unint64_t v235;
  float64x2_t v236;
  int8x16_t v237;
  float64x2_t v238;
  double v239;
  double v240;
  float64x2_t v241;
  int64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  double v246;
  float64x2_t v247;
  float64x2_t v248;
  double v249;
  float64_t v250;
  float64_t v251;
  double v252;
  double v253;
  unint64_t v254;
  int64x2_t v255;
  float64x2_t v256;
  unint64_t v257;
  float64x2_t v258;
  int8x16_t v259;
  unint64_t v260;
  float64x2_t v261;
  double v262;
  double v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  double v267;
  float64x2_t v268;
  float64x2_t v269;
  double v270;
  double v271;
  int8x16_t v272;
  float64x2_t v273;
  float64x2_t v274;
  int8x16_t v275;
  uint64_t v276;
  float64x2_t v277;
  int64x2_t v278;
  int8x16_t v279;
  uint64_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  double v284;
  int v285;
  const char *v286;
  int v287;
  const char *v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _BYTE v294[24];
  float64x2_t v295;
  double v296;
  float64x2_t v297;
  double v298;
  uint64_t v299;

  v9 = a4.f64[0];
  v299 = *MEMORY[0x24BDAC8D0];
  _NF = a4.f64[0] < 0.0 || a5 < a4.f64[0];
  if (_NF
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 122, (uint64_t)"timestamp2 >= timestamp1 && timestamp1 >= 0", 43, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0)|| a5 > a6&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 123, (uint64_t)"extrap_timestamp >= timestamp2", 30, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_131:
    abort();
  }
  if (vabdd_f64(a5, v9) <= 0.00001)
  {
    sub_20F1B13B8(&v291);
    if (**(int **)(v291 + 56) > 2
      || ((v48 = *(unsigned __int8 *)(v291 + 72), v49 = sub_20E8C31DC(v291, "OSLogSurrogateAppender", 1, 0), !v48)
        ? (_ZF = v49 == 0)
        : (_ZF = 0),
          _ZF))
    {
LABEL_130:
      v221 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a3 + 144) = v221;
      *(_QWORD *)(a3 + 160) = *(_QWORD *)(a2 + 160);
      v222 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 80) = v222;
      v223 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 112) = v223;
      v224 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 16) = v224;
      v225 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a3 + 48) = v225;
      return;
    }
    v51 = v49;
    *(_QWORD *)&v283.f64[0] = &v291;
    *(std::chrono::steady_clock::time_point *)&v283.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    v284 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
    v285 = 2;
    v286 = "unknown file";
    v287 = 130;
    v289 = 0;
    v290 = 0;
    v288 = "unknown function";
    v280 = v291;
    if (*(char *)(v291 + 39) < 0)
    {
      v53 = *(const char **)(v291 + 16);
      v52 = *(_QWORD *)(v291 + 24);
      v276 = v291 + 16;
      v172 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v172 & 1) != 0)
        goto LABEL_49;
    }
    else
    {
      v52 = *(unsigned __int8 *)(v291 + 39);
      v53 = (const char *)(v291 + 16);
      v276 = v291 + 16;
      v54 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v54 & 1) != 0)
        goto LABEL_49;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v294);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v294);
      if (LOBYTE(v295.f64[0]) && (v294[23] & 0x80000000) != 0)
        operator delete(*(void **)v294);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_49:
    if (byte_254A4A4F8[23] >= 0)
      v173 = byte_254A4A4F8;
    else
      v173 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v174 = byte_254A4A4F8[23];
    else
      v174 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v294 = os_log_create(v173, v53);
    v175 = &v294[8];
    if (v174 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v174 >= 0x17)
    {
      v176 = v51;
      v177 = v53;
      v178 = v48;
      v179 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v174 | 7) != 0x17)
        v179 = v174 | 7;
      v180 = v179 + 1;
      v175 = operator new(v179 + 1);
      *(_QWORD *)&v294[16] = v174;
      *(_QWORD *)&v295.f64[0] = v180 | 0x8000000000000000;
      *(_QWORD *)&v294[8] = v175;
      v48 = v178;
      v53 = v177;
      v51 = v176;
    }
    else
    {
      HIBYTE(v295.f64[0]) = v174;
      if (!v174)
      {
LABEL_63:
        v175[v174] = 0;
        LOBYTE(v295.f64[1]) = 1;
        *(double *)&v181 = COERCE_DOUBLE(&v296);
        if (v52 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v52 >= 0x17)
        {
          v182 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v52 | 7) != 0x17)
            v182 = v52 | 7;
          v183 = v182 + 1;
          *(double *)&v181 = COERCE_DOUBLE(operator new(v182 + 1));
          *(_QWORD *)&v297.f64[0] = v52;
          *(_QWORD *)&v297.f64[1] = v183 | 0x8000000000000000;
          v296 = *(double *)&v181;
        }
        else
        {
          HIBYTE(v297.f64[1]) = v52;
          if (!v52)
            goto LABEL_71;
        }
        memmove(v181, v53, v52);
LABEL_71:
        *((_BYTE *)v181 + v52) = 0;
        LOBYTE(v298) = 1;
        v184 = *(NSObject **)v294;
        if (SHIBYTE(v297.f64[1]) < 0)
          operator delete(*(void **)&v296);
        if (LOBYTE(v295.f64[1]) && SHIBYTE(v295.f64[0]) < 0)
          operator delete(*(void **)&v294[8]);
        if (*(_QWORD *)v294)
          os_release(*(void **)v294);
        if (v51 && *(_QWORD *)(v51 + 24))
        {
          v185 = _os_log_pack_size();
          v186 = (std::__shared_weak_count_vtbl *)operator new(v185, (std::align_val_t)8uLL);
          v187 = (std::__shared_weak_count *)operator new();
          v188 = v187;
          v187->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v187->__shared_owners_;
          v187->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v187->__shared_weak_owners_ = 0;
          v187[1].__vftable = v186;
          *(_QWORD *)v294 = v186;
          *(_QWORD *)&v294[8] = v186;
          *(_QWORD *)&v294[16] = v187;
          do
            v190 = __ldxr(p_shared_owners);
          while (__stxr(v190 + 1, p_shared_owners));
          v295 = 0uLL;
          v296 = 0.0;
          do
            v191 = __ldaxr(p_shared_owners);
          while (__stlxr(v191 - 1, p_shared_owners));
          if (!v191)
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            std::__shared_weak_count::__release_weak(v188);
          }
          v192 = *(_QWORD *)v294;
          v193 = _os_log_pack_fill();
          *(_DWORD *)v193 = 134217984;
          *(double *)(v193 + 4) = a5;
          v194 = operator new();
          v195 = *(unsigned __int8 *)(v280 + 39);
          v196 = v276;
          if ((v195 & 0x80u) != 0)
          {
            v196 = *(_QWORD *)(v280 + 16);
            v195 = *(_QWORD *)(v280 + 24);
          }
          *(_QWORD *)v194 = v192;
          *(_OWORD *)(v194 + 8) = *(_OWORD *)&v294[8];
          *(_QWORD *)&v294[8] = 0;
          *(_QWORD *)&v294[16] = 0;
          *(float64x2_t *)(v194 + 24) = v295;
          v295 = 0uLL;
          *(_QWORD *)(v194 + 40) = v196;
          *(_QWORD *)(v194 + 48) = v195;
          *(_BYTE *)(v194 + 56) = 2;
          v292 = 0;
          v293 = v194;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v51 + 24) + 40))(*(_QWORD *)(v51 + 24), &v293);
          v197 = v293;
          v293 = 0;
          if (v197)
          {
            v198 = *(std::__shared_weak_count **)(v197 + 32);
            if (v198)
            {
              v199 = (unint64_t *)&v198->__shared_owners_;
              do
                v200 = __ldaxr(v199);
              while (__stlxr(v200 - 1, v199));
              if (!v200)
              {
                ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                std::__shared_weak_count::__release_weak(v198);
              }
            }
            v201 = *(std::__shared_weak_count **)(v197 + 16);
            if (v201)
            {
              v202 = (unint64_t *)&v201->__shared_owners_;
              do
                v203 = __ldaxr(v202);
              while (__stlxr(v203 - 1, v202));
              if (!v203)
              {
                ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                std::__shared_weak_count::__release_weak(v201);
              }
            }
            MEMORY[0x212BC6398](v197, 0x10F0C40B62ED6C6);
            v204 = v292;
            v292 = 0;
            if (v204)
            {
              v205 = *(std::__shared_weak_count **)(v204 + 32);
              if (v205)
              {
                v206 = (unint64_t *)&v205->__shared_owners_;
                do
                  v207 = __ldaxr(v206);
                while (__stlxr(v207 - 1, v206));
                if (!v207)
                {
                  ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                  std::__shared_weak_count::__release_weak(v205);
                }
              }
              v208 = *(std::__shared_weak_count **)(v204 + 16);
              if (v208)
              {
                v209 = (unint64_t *)&v208->__shared_owners_;
                do
                  v210 = __ldaxr(v209);
                while (__stlxr(v210 - 1, v209));
                if (!v210)
                {
                  ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                  std::__shared_weak_count::__release_weak(v208);
                }
              }
              MEMORY[0x212BC6398](v204, 0x10F0C40B62ED6C6);
            }
          }
          v211 = *(std::__shared_weak_count **)&v295.f64[1];
          if (*(_QWORD *)&v295.f64[1])
          {
            v212 = (unint64_t *)(*(_QWORD *)&v295.f64[1] + 8);
            do
              v213 = __ldaxr(v212);
            while (__stlxr(v213 - 1, v212));
            if (!v213)
            {
              ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
              std::__shared_weak_count::__release_weak(v211);
            }
          }
          v214 = *(std::__shared_weak_count **)&v294[16];
          if (*(_QWORD *)&v294[16])
          {
            v215 = (unint64_t *)(*(_QWORD *)&v294[16] + 8);
            do
              v216 = __ldaxr(v215);
            while (__stlxr(v216 - 1, v215));
            if (!v216)
            {
              ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
              std::__shared_weak_count::__release_weak(v214);
            }
          }
        }
        else
        {
          os_log_type_enabled(v184, OS_LOG_TYPE_DEBUG);
          *(_DWORD *)v294 = 134217984;
          *(double *)&v294[4] = a5;
          v217 = (void *)_os_log_send_and_compose_impl();
          if (v217)
            free(v217);
        }
        if (v48)
        {
          sub_20E8C003C((uint64_t)&v283, "VisualSLAM1StOrderPoseExtrapolate: timestamp1 and timestamp2=%f too close.  Returning state2", a5);
          sub_20E863570((uint64_t)&v283);
        }
        sub_20E863570((uint64_t)&v283);
        v218 = v290;
        if (v290)
        {
          v219 = (unint64_t *)&v290->__shared_owners_;
          do
            v220 = __ldaxr(v219);
          while (__stlxr(v220 - 1, v219));
          if (!v220)
          {
            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
            std::__shared_weak_count::__release_weak(v218);
          }
        }
        goto LABEL_130;
      }
    }
    memmove(v175, v173, v174);
    goto LABEL_63;
  }
  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (a5 - v9 == 0.0)
    v13 = 1.0;
  else
    v13 = a5 - v9;
  a4.f64[0] = *(float64_t *)(a2 + 160);
  v268 = a4;
  a4.f64[0] = *(float64_t *)(a1 + 160);
  v264 = a4;
  v14.f64[0] = *(float64_t *)(a2 + 16);
  v255 = *(int64x2_t *)a2;
  v258 = *(float64x2_t *)(a2 + 144);
  v242 = *(int64x2_t *)(a2 + 24);
  v244 = *(float64x2_t *)(a1 + 144);
  v15 = *(double *)(a2 + 64);
  v261 = *(float64x2_t *)(a2 + 48);
  v14.f64[1] = *(float64_t *)(a2 + 40);
  v247 = v14;
  if (a5 < v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 59, (uint64_t)"timestamp2 >= timestamp1", 24, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0)|| a5 > a6&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 60, (uint64_t)"extrap_timestamp >= timestamp2", 30, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_131;
  }
  v16.f64[0] = *(float64_t *)(a1 + 16);
  v17 = *(int64x2_t *)(a1 + 24);
  v18 = *(double *)(a1 + 64);
  _Q20 = *(int8x16_t *)(a1 + 48);
  v20 = *(double *)(a2 + 16);
  v21 = *(double *)(a2 + 40);
  v22 = *(double *)(a2 + 64);
  _Q6 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a1, v17);
  v272 = (int8x16_t)v17;
  v275 = *(int8x16_t *)a1;
  v24 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a1, v17);
  v250 = *(double *)(a1 + 40);
  v16.f64[1] = v250;
  v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, *(double *)a2), v24, *(float64x2_t *)a2, 1), v16, v20);
  _D1 = *(_QWORD *)(a2 + 8);
  __asm { FMLA            D18, D1, V20.D[1] }
  v30 = _D18 + v18 * v20;
  v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, *(double *)(a2 + 24)), v24, *(float64x2_t *)(a2 + 24), 1), v16, v21);
  _D3 = *(_QWORD *)(a2 + 32);
  __asm { FMLA            D18, D3, V20.D[1] }
  v34 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, *(double *)(a2 + 48)), v24, *(float64x2_t *)(a2 + 48), 1), v16, v22);
  _D5 = *(_QWORD *)(a2 + 56);
  v279 = _Q20;
  __asm { FMLA            D6, D5, V20.D[1] }
  *(double *)&v294[16] = v30;
  *(float64x2_t *)v294 = v25;
  v296 = _D18 + v18 * v21;
  v295 = v31;
  v253 = v18;
  v298 = _Q6.f64[0] + v18 * v22;
  v297 = v34;
  v283 = 0uLL;
  v284 = 0.0;
  sub_20E9733B8((float64x2_t *)v294, v283.f64);
  v239 = v15;
  v36 = vsubq_f64(v258, v244);
  v37 = vmulq_n_f64((float64x2_t)vzip1q_s64(v255, v242), v36.f64[0]);
  v38 = (float64x2_t)vzip2q_s64(v255, v242);
  _V17.D[1] = v261.f64[1];
  _Q7 = vmulq_f64(v261, v36);
  _D2 = v36.f64[1];
  _V4.D[1] = v283.f64[1];
  _D6 = v283.f64[1];
  __asm { FMLA            D5, D6, V4.D[1] }
  if (sqrt(_D5 + v284 * v284) <= 0.000001)
  {
    *(_QWORD *)&v294[16] = 0;
    v295.f64[0] = 0.0;
    v297 = 0uLL;
    *(_OWORD *)v294 = 0x3FF0000000000000uLL;
    v47 = 1.0;
    v295.f64[1] = 1.0;
    v296 = 0.0;
    v46 = 1.0;
    v45 = 1.0;
    v298 = 1.0;
  }
  else
  {
    v45 = *(double *)v294;
    v46 = v295.f64[1];
    v47 = v298;
  }
  v55 = a6 - v9;
  v245 = vsubq_f64(v268, v264);
  __asm { FMLA            D7, D2, V17.D[1] }
  v265 = vmlaq_laneq_f64(v37, v38, v36, 1);
  v269 = _Q7;
  v233 = vextq_s8(v275, v275, 8uLL).u64[0];
  v235 = vextq_s8(v272, v272, 8uLL).u64[0];
  v237 = vextq_s8(v279, v279, 8uLL);
  v56 = (v47 + v46 + v45 + -1.0) * 0.5;
  if (v56 > 1.0)
    v56 = 1.0;
  if (v56 >= -1.0)
    v57 = v56;
  else
    v57 = -1.0;
  *(double *)v58.i64 = acos(v57);
  v231 = v58;
  *(double *)v59.i64 = sin(*(long double *)v58.i64);
  if (*(double *)v59.i64 >= 0.00001)
  {
    v69 = 1.0 / (*(double *)v59.i64 + *(double *)v59.i64);
    v65 = v69 * (v297.f64[1] - v296);
    *(double *)v64.i64 = v69 * (*(double *)&v294[16] - v297.f64[0]);
    *(double *)v60.i64 = v69 * (v295.f64[0] - *(double *)&v294[8]);
    v66 = v247;
  }
  else
  {
    v60.i64[0] = 0;
    v64.i64[0] = 0;
    v65 = 0.0;
    v66 = v247;
    if (v57 <= 0.0)
    {
      *(double *)v61.i64 = sqrt((v46 + 1.0) * 0.5);
      v67.f64[0] = NAN;
      v67.f64[1] = NAN;
      v68 = (int8x16_t)vnegq_f64(v67);
      v62.i64[0] = *(_QWORD *)&v294[8];
      v63.i64[0] = *(_QWORD *)&v294[16];
      v64 = vbslq_s8(v68, v61, v62);
      v65 = sqrt((v45 + 1.0) * 0.5);
      *(double *)v59.i64 = sqrt((v47 + 1.0) * 0.5);
      v60 = vbslq_s8(v68, v59, v63);
    }
  }
  v72.f64[1] = v245.f64[1];
  v262 = v65;
  v266 = vmlaq_n_f64(v265, v66, v245.f64[0]);
  v70.f64[1] = v269.f64[1];
  v270 = vmlad_n_f64(v269.f64[0], v239, v245.f64[0]);
  v71 = atomic_load((unsigned __int8 *)&qword_254A68138);
  v72.f64[0] = v55 / v13;
  v248 = v72;
  v256 = (float64x2_t)v64;
  v259 = v60;
  if ((v71 & 1) == 0)
  {
    v226 = __cxa_guard_acquire(&qword_254A68138);
    v64.i64[0] = *(_QWORD *)&v256.f64[0];
    v60 = v259;
    v65 = v262;
    v72.f64[0] = v248.f64[0];
    if (v226)
    {
      qword_254A68130 = 0x3EB0C6F7A0B5ED8DLL;
      __cxa_guard_release(&qword_254A68138);
      v64.i64[0] = *(_QWORD *)&v256.f64[0];
      v60 = v259;
      v65 = v262;
      v72.f64[0] = v248.f64[0];
    }
  }
  v246 = -*(double *)v64.i64;
  v70.f64[0] = -v65;
  v243 = v70;
  v240 = -*(double *)v60.i64;
  v60.i64[0] = qword_254A68130;
  v73.f64[0] = NAN;
  v73.f64[1] = NAN;
  v74 = vbslq_s8((int8x16_t)vnegq_f64(v73), v60, v231).u64[0];
  if (fabs(*(double *)v231.i64) >= *(double *)&qword_254A68130)
    v75 = *(double *)v231.i64;
  else
    v75 = *(double *)&v74;
  if (v75 == 0.0)
    v76 = -1.0;
  else
    v76 = -1.0 / v75;
  v77 = __sincos_stret(v72.f64[0] * v75);
  v78.f64[0] = v76 * v77.__cosval;
  v79.f64[0] = 0.0;
  v79.f64[1] = v240;
  _Q4 = v79;
  _D19 = v259.i64[0];
  _D18 = v262;
  v79.f64[0] = v246;
  v79.f64[1] = v262;
  v83 = v79;
  _Q0.f64[0] = v248.f64[0] + v76 * v77.__sinval;
  v85 = vmulq_f64(v256, _Q0);
  v86 = vmulq_n_f64(_Q4, _Q0.f64[0]);
  v87 = _Q4;
  v229 = _Q4;
  *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vmulq_f64(v243, _Q0);
  _Q5 = vmulq_n_f64((float64x2_t)v259.u64[0], _Q0.f64[0]);
  _Q6 = vmulq_n_f64(v83, _Q0.f64[0]);
  v90 = v83;
  v228 = v83;
  _Q7 = vmlaq_n_f64(vmlsq_lane_f64(vmulq_f64(v86, (float64x2_t)0), _Q5, *(double *)v259.i64, 0), _Q6, v256.f64[0]);
  v92 = vmlaq_f64(vmulq_n_f64(v86, *(double *)v259.i64), (float64x2_t)0, _Q5);
  v93 = vmlaq_n_f64(vmulq_n_f64(v86, v246), _Q5, v262);
  __asm { FMLS            D5, D19, V4.D[0] }
  v94 = vmlsq_lane_f64(v92, _Q6, v262, 0);
  _Q3 = vmlaq_f64(v93, (float64x2_t)0, _Q6);
  v85.f64[0] = vmlad_n_f64(v246 * v85.f64[0], v262, _Q4.f64[0]);
  v96 = vmulq_f64(v248, (float64x2_t)0);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vmulq_f64(_Q0, (float64x2_t)0);
  _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], v256.f64[0], _Q0.f64[0]);
  __asm { FMLS            D6, D18, V0.D[0] }
  v85.f64[0] = vmlad_n_f64(v85.f64[0], 0.0, _Q0.f64[0]);
  *(_QWORD *)&_Q0.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_f64(v96, v256, v78), _Q5);
  _Q5 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64(v87, v76 * v77.__cosval), (float64x2_t)xmmword_21030D320, v248.f64[0]), _Q7);
  *(_QWORD *)&v96.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_f64(v96, v243, v78), _Q6);
  _Q6 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v259.u64[0], v76 * v77.__cosval), (float64x2_t)xmmword_2102DD520, v248.f64[0]), v94);
  *(_QWORD *)&v85.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_f64(v248, v78, (float64x2_t)0), v85);
  *(_QWORD *)&v100.f64[0] = v272.i64[0];
  *(_QWORD *)&v99.f64[0] = v275.i64[0];
  *(_QWORD *)&v99.f64[1] = v233;
  _Q1 = vaddq_f64(vmlaq_n_f64(vmulq_n_f64(v90, v76 * v77.__cosval), (float64x2_t)0, v248.f64[0]), _Q3);
  *(_QWORD *)&v100.f64[1] = v235;
  *(_QWORD *)&v94.f64[0] = v279.i64[0];
  *(_QWORD *)&_Q3.f64[1] = v237.i64[1];
  *(_QWORD *)&v94.f64[1] = v237.i64[0];
  v241 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, _Q5.f64[0]), v100, _Q5, 1), v94, _Q0.f64[0]);
  _Q7.f64[0] = v250;
  __asm { FMLA            D3, D7, V5.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v253, _Q0.f64[0]);
  v273 = v100;
  v277 = v99;
  v281 = v94;
  _Q0 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, _Q6.f64[0]), v100, _Q6, 1), v94, v96.f64[0]);
  v236 = _Q0;
  v238 = _Q3;
  __asm { FMLA            D0, D7, V6.D[1] }
  _Q0.f64[0] = vmlad_n_f64(_Q0.f64[0], v253, v96.f64[0]);
  v234 = _Q0;
  __asm { FMLA            D3, D7, V1.D[1] }
  _Q3.f64[0] = vmlad_n_f64(_Q3.f64[0], v253, v85.f64[0]);
  v230 = _Q3;
  v232 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v99, _Q1.f64[0]), v100, _Q1, 1), v94, v85.f64[0]);
  __asm { FMOV            V0.2D, #1.0 }
  v227 = _Q0;
  v104 = __sincos_stret(v75);
  _Q2.f64[0] = v104.__cosval * v76;
  _Q3.f64[0] = v104.__sinval * v76 + 1.0;
  v107 = vmlaq_f64((float64x2_t)0, v256, _Q2);
  _Q1 = vmlaq_f64((float64x2_t)0, v243, _Q2);
  v109 = vmlaq_f64(v227, _Q2, (float64x2_t)0);
  v110 = vmulq_f64(v256, _Q3);
  v111 = vmulq_n_f64(v229, _Q3.f64[0]);
  *(_QWORD *)&_D7 = *(_OWORD *)&vmulq_f64(v243, _Q3);
  _Q16 = vmulq_n_f64((float64x2_t)v259.u64[0], _Q3.f64[0]);
  _Q17 = vmulq_n_f64(v228, _Q3.f64[0]);
  *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vmulq_f64(_Q3, (float64x2_t)0);
  _D20 = v259.i64[0];
  _D22 = v262;
  _Q18 = vmlaq_n_f64(vmlsq_lane_f64(vmulq_f64(v111, (float64x2_t)0), _Q16, *(double *)v259.i64, 0), _Q17, v256.f64[0]);
  __asm { FMLS            D2, D20, V7.D[0] }
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v256.f64[0], _Q3.f64[0]);
  _Q19 = vmlaq_f64(vmulq_n_f64(v111, *(double *)v259.i64), (float64x2_t)0, _Q16);
  v119 = vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v111, v246), _Q16, v262), (float64x2_t)0, _Q17);
  __asm { FMLS            D16, D22, V3.D[0] }
  v110.f64[0] = vmlad_n_f64(vmlad_n_f64(v246 * v110.f64[0], v262, _D7), 0.0, _Q3.f64[0]);
  _Q3 = vaddq_f64(vmlaq_n_f64((float64x2_t)xmmword_21030D320, v229, v104.__cosval * v76), _Q18);
  _Q7 = vaddq_f64(vmlaq_n_f64((float64x2_t)xmmword_2102DD520, (float64x2_t)v259.u64[0], v104.__cosval * v76), vmlsq_lane_f64(_Q19, _Q17, v262, 0));
  _Q4 = vaddq_f64(vmlaq_n_f64((float64x2_t)0, v228, v104.__cosval * v76), v119);
  _Q18.f64[1] = v277.f64[1];
  _D21 = v250;
  __asm { FMLA            D17, D21, V3.D[1] }
  _Q19.f64[1] = v277.f64[1];
  __asm
  {
    FMLA            D18, D21, V7.D[1]
    FMLA            D19, D21, V4.D[1]
  }
  *(_QWORD *)&v107.f64[0] = *(_OWORD *)&vaddq_f64(v107, (float64x2_t)*(unint64_t *)&_Q2.f64[0]);
  *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vaddq_f64(_Q1, _Q16);
  *(_QWORD *)&_Q2.f64[0] = *(_OWORD *)&vaddq_f64(v109, v110);
  _Q6 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v277, _Q3.f64[0]), v273, _Q3, 1), v281, v107.f64[0]);
  _Q17.f64[0] = vmlad_n_f64(_Q17.f64[0], v253, v107.f64[0]);
  v125 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v277, _Q7.f64[0]), v273, _Q7, 1), v281, _Q1.f64[0]);
  _Q18.f64[0] = vmlad_n_f64(_Q18.f64[0], v253, _Q1.f64[0]);
  _Q7 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v277, _Q4.f64[0]), v273, _Q4, 1), v281, _Q2.f64[0]);
  _Q19.f64[0] = vmlad_n_f64(_Q19.f64[0], v253, _Q2.f64[0]);
  v127 = vsubq_f64(v238, _Q17);
  _Q2 = vsubq_f64(v234, _Q18);
  v127.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(v127.f64[0], v266.f64[0]), v266.f64[1], _Q2.f64[0]), v270, vsubq_f64(v230, _Q19).f64[0]);
  _Q2.f64[0] = *(float64_t *)(a2 + 160);
  *(float64x2_t *)(a3 + 144) = vaddq_f64(*(float64x2_t *)(a2 + 144), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vsubq_f64(v241, _Q6), v266.f64[0]), vsubq_f64(v236, v125), v266, 1), vsubq_f64(v232, _Q7), v270));
  *(_QWORD *)(a3 + 160) = *(_OWORD *)&vaddq_f64(_Q2, v127);
  _Q6.f64[0] = *(float64_t *)(a1 + 16);
  v129 = *(int64x2_t *)(a1 + 24);
  _Q16.f64[0] = *(float64_t *)(a1 + 64);
  _Q18 = *(float64x2_t *)(a1 + 48);
  v127.f64[0] = *(float64_t *)(a2 + 16);
  v131 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a1, v129);
  v274 = (float64x2_t)v129;
  v278 = *(int64x2_t *)a1;
  v132 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a1, v129);
  v267 = *(double *)(a1 + 40);
  v271 = _Q6.f64[0];
  _Q6.f64[1] = v267;
  v133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131, *(double *)a2), v132, *(float64x2_t *)a2, 1), _Q6, v127.f64[0]);
  _Q1.f64[0] = *(float64_t *)(a2 + 8);
  __asm { FMLA            D7, D1, V18.D[1] }
  v127.f64[0] = _Q7.f64[0] + _Q16.f64[0] * v127.f64[0];
  _Q2.f64[0] = *(float64_t *)(a2 + 32);
  __asm { FMLA            D7, D2, V18.D[1] }
  _Q2.f64[0] = *(float64_t *)(a2 + 40);
  v134 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v131, *(double *)(a2 + 24)), v132, *(float64x2_t *)(a2 + 24), 1), _Q6, _Q2.f64[0]);
  _Q2.f64[0] = _Q7.f64[0] + _Q16.f64[0] * _Q2.f64[0];
  v135 = vmlaq_laneq_f64(vmulq_n_f64(v131, *(double *)(a2 + 48)), v132, *(float64x2_t *)(a2 + 48), 1);
  v132.f64[0] = *(float64_t *)(a2 + 64);
  v136 = vmlaq_n_f64(v135, _Q6, v132.f64[0]);
  _Q7.f64[0] = *(float64_t *)(a2 + 56);
  v282 = _Q18;
  __asm { FMLA            D6, D7, V18.D[1] }
  *(float64_t *)&v294[16] = v127.f64[0];
  *(float64x2_t *)v294 = v133;
  v296 = _Q2.f64[0];
  v295 = v134;
  v263 = _Q16.f64[0];
  v298 = _Q6.f64[0] + _Q16.f64[0] * v132.f64[0];
  v297 = v136;
  v283 = 0uLL;
  v284 = 0.0;
  sub_20E9733B8((float64x2_t *)v294, v283.f64);
  v138 = v274;
  v137 = (float64x2_t)v278;
  v139 = vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL).u64[0];
  v140 = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u64[0];
  v141 = v282;
  v142 = vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL).u64[0];
  v143.f64[0] = v284;
  *(_QWORD *)&v144 = *(_OWORD *)&vmulq_f64(v248, v143);
  _Q7 = vmulq_n_f64(v283, v248.f64[0]);
  _D1 = vmuld_lane_f64(v248.f64[0], v283, 1);
  v147 = _Q7.f64[1];
  __asm { FMLA            D3, D1, V7.D[1] }
  v149 = vmlad_n_f64(_D3, v248.f64[0] * v284, v144);
  if (v149 >= 0.0000002635)
  {
    v153 = sqrt(v149);
    v257 = v140;
    v260 = v142;
    v252 = v144;
    v254 = v139;
    v249 = v149;
    v251 = _Q7.f64[0];
    v154 = __sincos_stret(v153);
    cosval = v154.__cosval;
    _Q7.f64[0] = v251;
    v144 = v252;
    v139 = v254;
    v140 = v257;
    v142 = v260;
    v138.f64[0] = v274.f64[0];
    *(_QWORD *)&v137.f64[0] = v278.i64[0];
    v141.f64[0] = v282.f64[0];
    v151 = v154.__sinval / v153;
    v150 = 1.0 / v249 * (1.0 - v154.__cosval);
  }
  else
  {
    v150 = 0.5 - v149 * (v149 / -720.0 + 0.0416666667);
    v151 = 1.0 - v149 * (0.166666667 - v149 * (v149 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v149 * v150;
  }
  v155 = _Q7.f64[0] * v150;
  v156 = v147 * v150;
  v157 = cosval + _Q7.f64[0] * (_Q7.f64[0] * v150);
  v158 = cosval + v147 * (v147 * v150);
  v159 = cosval + v144 * (v144 * v150);
  v160 = v147 * (_Q7.f64[0] * v150);
  v161 = v144 * v155;
  v162 = v144 * v156;
  v163 = _Q7.f64[0] * v151;
  v164 = v147 * v151;
  v165 = v144 * v151;
  v166 = v160 - v165;
  v167 = v164 + v161;
  v168 = v160 + v165;
  v169 = v162 - v163;
  v170 = v161 - v164;
  v171 = v163 + v162;
  *(_QWORD *)&v137.f64[1] = v139;
  *(_QWORD *)&v138.f64[1] = v140;
  *(_QWORD *)&v141.f64[1] = v142;
  *(double *)(a3 + 16) = v271 * v157 + v267 * v168 + v263 * v170;
  *(float64x2_t *)a3 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v137, v157), v138, v168), v141, v170);
  *(double *)(a3 + 40) = v271 * v166 + v267 * v158 + v263 * v171;
  *(float64x2_t *)(a3 + 24) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v137, v166), v138, v158), v141, v171);
  *(double *)(a3 + 64) = v271 * v167 + v267 * v169 + v263 * v159;
  *(float64x2_t *)(a3 + 48) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v137, v167), v138, v169), v141, v159);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a3 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a3 + 112) = *(_QWORD *)(a2 + 112);
}

void sub_20F1B3E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  if (*(_BYTE *)(v63 - 216))
  {
    if (*(char *)(v63 - 217) < 0)
      operator delete(*(void **)(v63 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F1B3E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  sub_20E86E8C4((uint64_t *)(v63 - 248));
  sub_20E86E8C4((uint64_t *)(v63 - 256));
  sub_20E86E658(v63 - 240);
  sub_20E863714((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F1B3E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  MEMORY[0x212BC6398](v63, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F1B3EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_20E863714((uint64_t)&a63);
  _Unwind_Resume(a1);
}

void sub_20F1B3EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_20F1B3F38@<Q0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  double **v26;
  size_t v27;
  double *v28;
  size_t v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  int8x16_t v49;
  float64x2_t v50;
  float64x2_t v51;
  double v59;
  double v60;
  double v61;
  double cosval;
  double *v63;
  double v64;
  __double2 v65;
  __int128 v66;
  double v67;
  double v68;
  double v69;
  __int128 v70;
  __int128 v71;
  double v72;
  __int128 v73;
  double v74;
  float64x2_t v75;
  uint64_t v76;
  __n128 result;
  double v78;
  __int128 v79;
  double v80;
  __int128 v81;
  __int128 v82;
  _QWORD *v83;
  double v84;
  __int128 v85;
  float64x2_t v86;
  float64_t v87;
  double *v88;
  size_t v89;
  double *v90;
  float64x2_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;

  *(_QWORD *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  v11 = a3[2];
  v10 = a3[3];
  v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 3);
  if (v12 < v10)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 233, (uint64_t)"states.size() >= num_poly_terms", 31, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_34;
    }
    v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 3);
  }
  if (v12 < v11)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 234, (uint64_t)"states.size() >= poly_order", 27, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_34;
    }
    v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[1] - *a1) >> 3);
  }
  v13 = a2[1];
  if (v12 != (v13 - *a2) >> 3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 235, (uint64_t)"state_timestamps.size() == states.size()", 40, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_34;
    }
    v13 = a2[1];
  }
  if (*(double *)(v13 - 8) > a5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 236, (uint64_t)"extrap_timestamp >= state_timestamps.back()", 43, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_34:
    abort();
  }
  v14 = operator new((8 * (3 * v10) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v15 = (uint64_t)v14;
  if ((_DWORD)v10)
  {
    bzero(v14, 8 * (3 * v10));
    v83 = a2;
    v16 = a2[1];
    v17 = (double *)operator new(8 * v10);
    v18 = &v17[v10];
    memmove(v17, (const void *)(v16 - 8 * v10), 8 * v10);
    v19 = 0;
    v20 = a1[1] - 168 * v10;
    do
    {
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 40);
      v23 = *(_OWORD *)(v20 + 24);
      v24 = *(_QWORD *)(v20 + 64);
      v25 = *(_OWORD *)(v20 + 48);
      v91 = *(float64x2_t *)v20;
      v92 = v21;
      v93 = v23;
      v94 = v22;
      v95 = v25;
      v96 = v24;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      sub_20E9733B8(&v91, (double *)&v88);
      v26 = (double **)(v15 + 8 * v19++);
      v27 = v89;
      v28 = v90;
      *v26 = v88;
      v26[v10] = (double *)v27;
      v26[2 * v10] = v28;
      v20 += 168;
    }
    while (v20 < a1[1]);
    a2 = v83;
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  v29 = (8 * v11 + 31) & 0xFFFFFFFE0;
  v89 = v29 >> 3;
  v30 = (double *)operator new(v29, (std::align_val_t)0x20uLL);
  v88 = v30;
  LODWORD(v90) = v11;
  if ((_DWORD)v11)
    bzero(v30, 8 * v11);
  v31 = *(v18 - 1);
  v32 = *v17;
  sub_21021134C(v17, v15, v10, (uint64_t)&v88);
  v33 = v31 - v32;
  v34 = 0.0;
  if (v90 >= 2)
  {
    v35 = 1.0;
    v36 = 1;
    do
    {
      v34 = v34 + v35 * (v88[v36] * (double)v36);
      ++v36;
      v35 = v33 * v35;
    }
    while (v90 != v36);
  }
  sub_21021134C(v17, v15 + 8 * v10, v10, (uint64_t)&v88);
  v37 = 0.0;
  if (v90 >= 2)
  {
    v38 = 1.0;
    v39 = 1;
    do
    {
      v37 = v37 + v38 * (v88[v39] * (double)v39);
      ++v39;
      v38 = v33 * v38;
    }
    while (v90 != v39);
  }
  sub_21021134C(v17, v15 + 8 * (2 * v10), v10, (uint64_t)&v88);
  v40 = 0.0;
  if (v90 >= 2)
  {
    v41 = 1.0;
    v42 = 1;
    do
    {
      v40 = v40 + v41 * (v88[v42] * (double)v42);
      ++v42;
      v41 = v33 * v41;
    }
    while (v90 != v42);
  }
  v43 = a1[1];
  v44 = *(_QWORD *)(v43 - 152);
  v45 = *(_QWORD *)(v43 - 128);
  v46 = *(_OWORD *)(v43 - 144);
  v47 = *(_QWORD *)(v43 - 104);
  v48 = *(_OWORD *)(v43 - 120);
  v91 = *(float64x2_t *)(v43 - 168);
  v92 = v44;
  v93 = v46;
  v94 = v45;
  v95 = v48;
  v96 = v47;
  v87 = 0.0;
  v86 = 0uLL;
  sub_20E9733B8(&v91, v86.f64);
  *(double *)v49.i64 = (a5 - v31) * v34;
  *(double *)&v49.i64[1] = (a5 - v31) * v37;
  v50 = (float64x2_t)vextq_s8(v49, v49, 8uLL);
  v51.f64[0] = (a5 - v31) * v40;
  v49.i64[1] = *(_QWORD *)&v50.f64[0];
  v50.f64[0] = v87;
  _Q1 = (int8x16_t)vaddq_f64((float64x2_t)v49, v86);
  *(_QWORD *)&v80 = vextq_s8(_Q1, _Q1, 8uLL).u64[0];
  _KR00_16 = _Q1;
  __asm { FMLA            D3, D0, V1.D[1] }
  *(_QWORD *)&v84 = *(_OWORD *)&vaddq_f64(v51, v50);
  v59 = vmlad_n_f64(_D3, v84, v84);
  if (v59 < 0.0000002635)
  {
    v60 = 0.5 - v59 * (v59 / -720.0 + 0.0416666667);
    v61 = 1.0 - v59 * (0.166666667 - v59 * (v59 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v59 * v60;
    v63 = v88;
    if (!v88)
      goto LABEL_33;
    goto LABEL_32;
  }
  v64 = sqrt(v59);
  v78 = v59;
  v65 = __sincos_stret(v64);
  cosval = v65.__cosval;
  v61 = v65.__sinval / v64;
  v60 = 1.0 / v78 * (1.0 - v65.__cosval);
  v63 = v88;
  if (v88)
LABEL_32:
    MEMORY[0x212BC6368](v63, 0x1000C8000313F17);
LABEL_33:
  *(double *)&v66 = cosval + *(double *)_KR00_16.i64 * (*(double *)_KR00_16.i64 * v60);
  v67 = v80 * (*(double *)_KR00_16.i64 * v60);
  v68 = v67 + v84 * v61;
  v69 = v84 * (*(double *)_KR00_16.i64 * v60);
  *(double *)&v70 = v69 - v80 * v61;
  *(double *)&v71 = cosval + v80 * (v80 * v60);
  v72 = v84 * (v80 * v60);
  *(double *)&v73 = v80 * v61 + v69;
  v74 = cosval + v84 * (v84 * v60);
  *((double *)&v70 + 1) = v67 - v84 * v61;
  *((double *)&v73 + 1) = v72 - *(double *)_KR00_16.i64 * v61;
  v82 = v73;
  v85 = v70;
  *((double *)&v66 + 1) = v68;
  *((double *)&v71 + 1) = *(double *)_KR00_16.i64 * v61 + v72;
  v79 = v71;
  v81 = v66;
  operator delete(v17);
  MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
  *(double *)(a4 + 64) = v74;
  *(_OWORD *)(a4 + 32) = v79;
  *(_OWORD *)(a4 + 48) = v82;
  *(_OWORD *)a4 = v81;
  *(_OWORD *)(a4 + 16) = v85;
  sub_20F1B4634((uint64_t)&v91, a1, a2, *a3, a3[1], a5);
  v75 = v91;
  *(_QWORD *)(a4 + 160) = v92;
  *(float64x2_t *)(a4 + 144) = v75;
  v76 = a1[1];
  *(_OWORD *)(a4 + 120) = *(_OWORD *)(v76 - 48);
  *(_QWORD *)(a4 + 136) = *(_QWORD *)(v76 - 32);
  *(_OWORD *)(a4 + 72) = *(_OWORD *)(v76 - 96);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v76 - 80);
  result = *(__n128 *)(v76 - 72);
  *(__n128 *)(a4 + 96) = result;
  *(_QWORD *)(a4 + 112) = *(_QWORD *)(v76 - 56);
  return result;
}

void sub_20F1B45CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1B4634(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4, unsigned int a5, double a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t *v21;
  int8x16_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  double *v27;
  size_t v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t i;
  double v36;
  double v37;
  uint64_t j;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t k;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[2];
  unsigned int v50;

  v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2[1] - *a2) >> 3);
  v13 = a5;
  if (v12 < a5)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 186, (uint64_t)"states.size() >= num_poly_terms", 31, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_35;
    }
    v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2[1] - *a2) >> 3);
  }
  if (v12 < a4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 187, (uint64_t)"states.size() >= poly_order", 27, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_35;
    }
    v12 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2[1] - *a2) >> 3);
  }
  v14 = a3[1];
  if (v12 != (v14 - *a3) >> 3)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 188, (uint64_t)"state_timestamps.size() == states.size()", 40, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_35;
    }
    v14 = a3[1];
  }
  if (*(double *)(v14 - 8) > a6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 189, (uint64_t)"extrap_timestamp >= state_timestamps.back()", 43, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_35:
    abort();
  }
  v15 = operator new((24 * a5 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v16 = (uint64_t)v15;
  if (a5)
  {
    bzero(v15, 24 * a5);
    v17 = a3[1];
    v18 = (double *)operator new(8 * v13);
    memmove(v18, (const void *)(v17 - 8 * v13), 8 * v13);
    v19 = 0;
    v20 = a2[1];
    v21 = (uint64_t *)(v20 - 168 * v13 + 144);
    do
    {
      if (v21 == (uint64_t *)v16)
      {
        v24 = *(_QWORD *)(v16 + 16);
        v22 = *(int8x16_t *)v16;
        v23 = vextq_s8(v22, v22, 8uLL).u64[0];
      }
      else
      {
        v22.i64[0] = *v21;
        v23 = v21[1];
        v24 = v21[2];
      }
      v25 = (_QWORD *)(v16 + 8 * v19);
      v25[v13] = v23;
      v25[2 * v13] = v24;
      *v25 = v22.i64[0];
      v26 = v21 + 3;
      v21 += 21;
      ++v19;
    }
    while ((unint64_t)v26 < v20);
    v27 = &v18[v13];
  }
  else
  {
    v27 = 0;
    v18 = 0;
  }
  v28 = (8 * a4 + 31) & 0xFFFFFFFE0;
  v49[1] = v28 >> 3;
  v29 = operator new(v28, (std::align_val_t)0x20uLL);
  v49[0] = v29;
  v50 = a4;
  if (a4)
    bzero(v29, 8 * a4);
  v30 = *(v27 - 1);
  v31 = *v18;
  sub_21021134C(v18, v16, v13, (uint64_t)v49);
  v32 = v30 - v31;
  v33 = 0.0;
  if (v50 >= 2)
  {
    v34 = 1.0;
    for (i = 1; i != v50; ++i)
    {
      v33 = v33 + v34 * (*(double *)(v49[0] + 8 * i) * (double)i);
      v34 = v32 * v34;
    }
  }
  sub_21021134C(v18, v16 + 8 * v13, v13, (uint64_t)v49);
  v36 = 0.0;
  if (v50 >= 2)
  {
    v37 = 1.0;
    for (j = 1; j != v50; ++j)
    {
      v36 = v36 + v37 * (*(double *)(v49[0] + 8 * j) * (double)j);
      v37 = v32 * v37;
    }
  }
  sub_21021134C(v18, v16 + 16 * a5, v13, (uint64_t)v49);
  v39.f64[0] = a6 - v30;
  v40.f64[0] = (a6 - v30) * v33;
  v40.f64[1] = (a6 - v30) * v36;
  v41 = (float64x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL);
  v42 = v49[0];
  v43 = 0.0;
  if (v50 >= 2)
  {
    v44 = 1.0;
    for (k = 1; k != v50; ++k)
    {
      v43 = v43 + v44 * (*(double *)(v49[0] + 8 * k) * (double)k);
      v44 = v32 * v44;
    }
    v39.f64[0] = v39.f64[0] * v43;
    v40.f64[1] = v41.f64[0];
    v46 = a2[1];
    v41.f64[0] = *(float64_t *)(v46 - 8);
    *(float64x2_t *)a1 = vaddq_f64(*(float64x2_t *)(v46 - 24), v40);
    *(_QWORD *)(a1 + 16) = *(_OWORD *)&vaddq_f64(v41, v39);
    goto LABEL_33;
  }
  v39.f64[0] = v39.f64[0] * 0.0;
  v40.f64[1] = v41.f64[0];
  v47 = a2[1];
  v41.f64[0] = *(float64_t *)(v47 - 8);
  *(float64x2_t *)a1 = vaddq_f64(*(float64x2_t *)(v47 - 24), v40);
  *(_QWORD *)(a1 + 16) = *(_OWORD *)&vaddq_f64(v41, v39);
  if (v42)
LABEL_33:
    MEMORY[0x212BC6368](v42, 0x1000C8000313F17);
  operator delete(v18);
  return MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
}

void sub_20F1B4AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void sub_20F1B4AFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float64x2_t a4@<Q0>, float64x2_t a5@<Q1>, float64x2_t a6@<Q3>, float64x2_t a7@<Q5>)
{
  _BOOL4 v11;
  int v13;
  unint64_t v14;
  unint64_t v16;
  size_t v17;
  const char *v18;
  unsigned __int8 v19;
  double v23;
  float64x2_t v24;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v34;
  float64x2_t v35;
  double v36;
  double v39;
  double v41;
  double v42;
  double v43;
  double cosval;
  double v45;
  __double2 v46;
  float64_t v47;
  double v48;
  float64x2_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  float64_t v55;
  double v56;
  double v57;
  float64x2_t v58;
  float64x2_t v59;
  unsigned __int8 v60;
  const char *v61;
  size_t v62;
  _BYTE *v63;
  unint64_t v64;
  const char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  size_t v73;
  std::__shared_weak_count_vtbl *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  double v113;
  float64_t v114;
  float64x2_t v115;
  double v116;
  float64x2_t v117;
  float64x2_t v118;
  double v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  double v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  uint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  float64x2_t v132;
  uint64_t v133;
  uint64_t v134;
  float64x2_t v135;
  double v136;
  int v137;
  const char *v138;
  int v139;
  const char *v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  _BYTE v144[24];
  float64x2_t v145;
  void **v146;
  float64x2_t v147;
  double v148;
  uint64_t v149;
  uint64_t v150;

  if (a4.f64[0] < 0.0 || a4.f64[0] > 1.0)
  {
    v132 = a4;
    v11 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 336, (uint64_t)"state1_weight1 >= 0 && state1_weight1 <= 1.0", 44, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0);
    a4 = v132;
    if (v11)
      abort();
  }
  if (a4.f64[0] < 0.0 || a4.f64[0] > 1.0)
  {
    sub_20F1B13B8(&v143);
    if (**(int **)(v143 + 56) > 5
      || ((v13 = *(unsigned __int8 *)(v143 + 72), v14 = sub_20E8C31DC(v143, "OSLogSurrogateAppender", 1, 0), !v13)
        ? (_ZF = v14 == 0)
        : (_ZF = 0),
          _ZF))
    {
LABEL_105:
      v108 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a3 + 144) = v108;
      *(_QWORD *)(a3 + 160) = *(_QWORD *)(a2 + 160);
      v109 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 80) = v109;
      v110 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 112) = v110;
      v111 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 16) = v111;
      v112 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a3 + 48) = v112;
      return;
    }
    v16 = v14;
    *(_QWORD *)&v135.f64[0] = &v143;
    *(std::chrono::steady_clock::time_point *)&v135.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
    v136 = *(double *)&std::chrono::system_clock::now().__d_.__rep_;
    v137 = 5;
    v138 = "unknown file";
    v139 = 340;
    v141 = 0;
    v142 = 0;
    v140 = "unknown function";
    v133 = v143;
    if (*(char *)(v143 + 39) < 0)
    {
      v18 = *(const char **)(v143 + 16);
      v17 = *(_QWORD *)(v143 + 24);
      v130 = v143 + 16;
      v60 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v60 & 1) != 0)
        goto LABEL_24;
    }
    else
    {
      v17 = *(unsigned __int8 *)(v143 + 39);
      v18 = (const char *)(v143 + 16);
      v130 = v143 + 16;
      v19 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v19 & 1) != 0)
        goto LABEL_24;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v144);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v144);
      if (LOBYTE(v145.f64[0]) && (v144[23] & 0x80000000) != 0)
        operator delete(*(void **)v144);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_24:
    if (byte_254A4A4F8[23] >= 0)
      v61 = byte_254A4A4F8;
    else
      v61 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v62 = byte_254A4A4F8[23];
    else
      v62 = *(_QWORD *)&byte_254A4A4F8[8];
    *(_QWORD *)v144 = os_log_create(v61, v18);
    v63 = &v144[8];
    if (v62 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v62 >= 0x17)
    {
      v64 = v16;
      v65 = v18;
      v66 = v13;
      v67 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v62 | 7) != 0x17)
        v67 = v62 | 7;
      v68 = v67 + 1;
      v63 = operator new(v67 + 1);
      *(_QWORD *)&v144[16] = v62;
      *(_QWORD *)&v145.f64[0] = v68 | 0x8000000000000000;
      *(_QWORD *)&v144[8] = v63;
      v13 = v66;
      v18 = v65;
      v16 = v64;
    }
    else
    {
      HIBYTE(v145.f64[0]) = v62;
      if (!v62)
      {
LABEL_38:
        v63[v62] = 0;
        LOBYTE(v145.f64[1]) = 1;
        v69 = (void **)&v146;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v17 >= 0x17)
        {
          v70 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v70 = v17 | 7;
          v71 = v70 + 1;
          v69 = (void **)operator new(v70 + 1);
          *(_QWORD *)&v147.f64[0] = v17;
          *(_QWORD *)&v147.f64[1] = v71 | 0x8000000000000000;
          v146 = v69;
        }
        else
        {
          HIBYTE(v147.f64[1]) = v17;
          if (!v17)
            goto LABEL_46;
        }
        memmove(v69, v18, v17);
LABEL_46:
        *((_BYTE *)v69 + v17) = 0;
        LOBYTE(v148) = 1;
        v72 = *(NSObject **)v144;
        if (SHIBYTE(v147.f64[1]) < 0)
          operator delete(v146);
        if (LOBYTE(v145.f64[1]) && SHIBYTE(v145.f64[0]) < 0)
          operator delete(*(void **)&v144[8]);
        if (*(_QWORD *)v144)
          os_release(*(void **)v144);
        if (v16 && *(_QWORD *)(v16 + 24))
        {
          v73 = _os_log_pack_size();
          v74 = (std::__shared_weak_count_vtbl *)operator new(v73, (std::align_val_t)8uLL);
          v75 = (std::__shared_weak_count *)operator new();
          v76 = v75;
          v75->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v75->__shared_owners_;
          v75->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v75->__shared_weak_owners_ = 0;
          v75[1].__vftable = v74;
          *(_QWORD *)v144 = v74;
          *(_QWORD *)&v144[8] = v74;
          *(_QWORD *)&v144[16] = v75;
          do
            v78 = __ldxr(p_shared_owners);
          while (__stxr(v78 + 1, p_shared_owners));
          v145 = 0uLL;
          v146 = 0;
          do
            v79 = __ldaxr(p_shared_owners);
          while (__stlxr(v79 - 1, p_shared_owners));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v76);
          }
          v80 = *(_QWORD *)v144;
          *(_WORD *)_os_log_pack_fill() = 0;
          v81 = operator new();
          v82 = *(unsigned __int8 *)(v133 + 39);
          v83 = v130;
          if ((v82 & 0x80u) != 0)
          {
            v83 = *(_QWORD *)(v133 + 16);
            v82 = *(_QWORD *)(v133 + 24);
          }
          *(_QWORD *)v81 = v80;
          *(_OWORD *)(v81 + 8) = *(_OWORD *)&v144[8];
          *(_QWORD *)&v144[8] = 0;
          *(_QWORD *)&v144[16] = 0;
          *(float64x2_t *)(v81 + 24) = v145;
          v145 = 0uLL;
          *(_QWORD *)(v81 + 40) = v83;
          *(_QWORD *)(v81 + 48) = v82;
          *(_BYTE *)(v81 + 56) = 16;
          v149 = 0;
          v150 = v81;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), &v150);
          v84 = v150;
          v150 = 0;
          if (v84)
          {
            v85 = *(std::__shared_weak_count **)(v84 + 32);
            if (v85)
            {
              v86 = (unint64_t *)&v85->__shared_owners_;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 - 1, v86));
              if (!v87)
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
            }
            v88 = *(std::__shared_weak_count **)(v84 + 16);
            if (v88)
            {
              v89 = (unint64_t *)&v88->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            MEMORY[0x212BC6398](v84, 0x10F0C40B62ED6C6);
            v91 = v149;
            v149 = 0;
            if (v91)
            {
              v92 = *(std::__shared_weak_count **)(v91 + 32);
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldaxr(v93);
                while (__stlxr(v94 - 1, v93));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                  std::__shared_weak_count::__release_weak(v92);
                }
              }
              v95 = *(std::__shared_weak_count **)(v91 + 16);
              if (v95)
              {
                v96 = (unint64_t *)&v95->__shared_owners_;
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (!v97)
                {
                  ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                  std::__shared_weak_count::__release_weak(v95);
                }
              }
              MEMORY[0x212BC6398](v91, 0x10F0C40B62ED6C6);
            }
          }
          v98 = *(std::__shared_weak_count **)&v145.f64[1];
          if (*(_QWORD *)&v145.f64[1])
          {
            v99 = (unint64_t *)(*(_QWORD *)&v145.f64[1] + 8);
            do
              v100 = __ldaxr(v99);
            while (__stlxr(v100 - 1, v99));
            if (!v100)
            {
              ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
              std::__shared_weak_count::__release_weak(v98);
            }
          }
          v101 = *(std::__shared_weak_count **)&v144[16];
          if (*(_QWORD *)&v144[16])
          {
            v102 = (unint64_t *)(*(_QWORD *)&v144[16] + 8);
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
        }
        else
        {
          os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
          *(_WORD *)v144 = 0;
          v104 = (void *)_os_log_send_and_compose_impl();
          if (v104)
            free(v104);
        }
        if (v13)
        {
          sub_20E8C003C((uint64_t)&v135, "PosePredictor error:  weight passed to AddTwoInertialStatesForPoseSmoothing negative or greater than 1.");
          sub_20E863570((uint64_t)&v135);
        }
        sub_20E863570((uint64_t)&v135);
        v105 = v142;
        if (v142)
        {
          v106 = (unint64_t *)&v142->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        goto LABEL_105;
      }
    }
    memmove(v63, v61, v62);
    goto LABEL_38;
  }
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  a7.f64[0] = 1.0 - a4.f64[0];
  v115 = a7;
  a5.f64[0] = *(float64_t *)(a1 + 160);
  a6.f64[0] = *(float64_t *)(a2 + 160);
  _Q2 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 144), a4.f64[0]), vmulq_n_f64(*(float64x2_t *)(a2 + 144), 1.0 - a4.f64[0]));
  *(_OWORD *)(a3 + 128) = 0u;
  *(float64x2_t *)(a3 + 144) = _Q2;
  *(_QWORD *)(a3 + 160) = *(_OWORD *)&vaddq_f64(vmulq_f64(a4, a5), vmulq_f64(a7, a6));
  _Q21 = *(float64x2_t *)(a1 + 24);
  _Q19 = *(float64x2_t *)(a1 + 48);
  v23 = *(double *)(a2 + 16);
  _Q2.f64[0] = *(float64_t *)(a2 + 40);
  v24 = *(float64x2_t *)(a2 + 24);
  _D4 = *(double *)(a2 + 64);
  v26 = *(float64x2_t *)(a2 + 48);
  v27 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, *(double *)a1), v24, _Q21.f64[0]), v26, _Q19.f64[0]);
  v124 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q21, 1);
  v125 = (float64x2_t)vdupq_laneq_s64((int64x2_t)_Q19, 1);
  v28 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)a2, *(float64x2_t *)a1, 1), v24, _Q21, 1), v26, _Q19, 1);
  v126 = *(float64x2_t *)a1;
  v127 = *(uint64_t *)(a1 + 16);
  v121 = (float64x2_t)vdupq_laneq_s64(*(int64x2_t *)a1, 1);
  *(_QWORD *)&v122 = vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL).u64[0];
  v128 = _Q21.f64[0];
  v129 = *(uint64_t *)(a1 + 40);
  __asm { FMLA            D17, D2, V21.D[1] }
  *(_QWORD *)&v123 = vextq_s8((int8x16_t)_Q19, (int8x16_t)_Q19, 8uLL).u64[0];
  v131 = _Q19.f64[0];
  v134 = *(uint64_t *)(a1 + 64);
  __asm { FMLA            D17, D4, V19.D[1] }
  v117 = (float64x2_t)vdupq_lane_s64(v127, 0);
  v118 = (float64x2_t)vdupq_lane_s64(v129, 0);
  *(_QWORD *)&v119 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL).u64[0];
  v120 = (float64x2_t)vdupq_lane_s64(v134, 0);
  v34 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)a2, *(double *)&v127), v24, *(double *)&v129), v26, *(double *)&v134);
  *(_QWORD *)&v144[16] = vmlad_n_f64(vmlad_n_f64(v23 * *(double *)a1, _Q2.f64[0], _Q21.f64[0]), _D4, _Q19.f64[0]);
  *(float64x2_t *)v144 = v27;
  v146 = _D17;
  v145 = v28;
  v148 = v23 * *(double *)&v127 + _Q2.f64[0] * *(double *)&v129 + _D4 * *(double *)&v134;
  v147 = v34;
  v135 = 0uLL;
  v136 = 0.0;
  sub_20E9733B8((float64x2_t *)v144, v135.f64);
  v35.f64[0] = v136;
  *(_QWORD *)&v36 = *(_OWORD *)&vmulq_f64(v115, v35);
  _Q7 = vmulq_n_f64(v135, v115.f64[0]);
  _D1 = vmuld_lane_f64(v115.f64[0], v135, 1);
  v39 = _Q7.f64[1];
  __asm { FMLA            D3, D1, V7.D[1] }
  v41 = vmlad_n_f64(_D3, v115.f64[0] * v136, v36);
  if (v41 >= 0.0000002635)
  {
    v45 = sqrt(v41);
    v114 = _Q7.f64[0];
    v116 = v36;
    v113 = v41;
    v46 = __sincos_stret(v45);
    cosval = v46.__cosval;
    _Q7.f64[0] = v114;
    v36 = v116;
    v43 = v46.__sinval / v45;
    v42 = 1.0 / v113 * (1.0 - v46.__cosval);
  }
  else
  {
    v42 = 0.5 - v41 * (v41 / -720.0 + 0.0416666667);
    v43 = 1.0 - v41 * (0.166666667 - v41 * (v41 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v41 * v42;
  }
  v47 = _Q7.f64[0] * v42;
  v48 = v39 * v42;
  v49.f64[0] = cosval + _Q7.f64[0] * (_Q7.f64[0] * v42);
  v50 = cosval + v39 * (v39 * v42);
  v51 = cosval + v36 * (v36 * v42);
  v52 = v39 * (_Q7.f64[0] * v42);
  v53 = v36 * v47;
  v54 = v36 * v48;
  v55 = _Q7.f64[0] * v43;
  v56 = v39 * v43;
  v57 = v36 * v43;
  v58.f64[0] = v52 - v57;
  v59.f64[0] = v56 + v53;
  v49.f64[1] = v52 + v57;
  v58.f64[1] = v50;
  v59.f64[1] = v54 - v55;
  *(double *)(a3 + 16) = (v53 - v56) * v126.f64[0] + (v55 + v54) * v119 + v51 * *(double *)&v127;
  *(float64x2_t *)a3 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v49, v126.f64[0]), v121, v58), v117, v59);
  *(double *)(a3 + 40) = (v53 - v56) * v128 + (v55 + v54) * v122 + v51 * *(double *)&v129;
  *(float64x2_t *)(a3 + 24) = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v49, v128), v124, v58), v118, v59);
  *(double *)(a3 + 64) = (v53 - v56) * v131 + (v55 + v54) * v123 + v51 * *(double *)&v134;
  *(float64x2_t *)(a3 + 48) = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v49, v131), v125, v58), v120, v59);
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a3 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a3 + 112) = *(_QWORD *)(a2 + 112);
}

void sub_20F1B55A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  if (*(_BYTE *)(v47 - 184))
  {
    if (*(char *)(v47 - 185) < 0)
      operator delete(*(void **)(v47 - 208));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20F1B55E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  sub_20E86E8C4((uint64_t *)(v47 - 128));
  sub_20E86E8C4((uint64_t *)(v47 - 136));
  sub_20E86E658(v47 - 208);
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20F1B561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  MEMORY[0x212BC6398](v47, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20F1B5648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20F1B5664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_20F1B5678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;
  void *v49;

  if (*(_BYTE *)(v47 - 176) && *(char *)(v47 - 177) < 0)
    operator delete(*(void **)(v47 - 200));
  v49 = *(void **)(v47 - 208);
  if (v49)
    os_release(v49);
  sub_20E863714((uint64_t)&a47);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1B56BC(unint64_t **a1, uint64_t a2, _QWORD *a3, void **a4, double a5, double a6, int64x2_t a7)
{
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v23;
  double v24;
  double v26;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v34;
  int8x16_t v35;
  int64x2_t v37;
  float64x2_t v38;
  char *v39;
  void *v40;
  _BYTE *v41;
  int64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  _BYTE *v47;
  _QWORD *v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  void *v80;
  _BYTE *v81;
  int64_t v82;
  int64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  _QWORD *v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _OWORD *v94;
  char *v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  int64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  __int128 *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  int64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  __int128 *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  int64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  __int128 *v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  _QWORD *v158;
  const void *v159;
  int64_t v160;
  char *v161;
  char *v162;
  char *v163;
  _QWORD *v164;
  const void *v165;
  int64_t v166;
  char *v167;
  char *v168;
  char *v169;
  _QWORD *v170;
  const void *v171;
  int64_t v172;
  char *v173;
  char *v174;
  char *v175;
  _QWORD *v176;
  const void *v177;
  int64_t v178;
  char *v179;
  char *v180;
  char *v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _QWORD *v185;
  const void *v186;
  int64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  void *v196;
  void *v197;
  uint64_t v199;
  void **v200;
  _OWORD *v201;
  uint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  __double2 v215;
  double v216;
  __int128 v217;
  __int128 v218;
  double v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  __int128 v226;
  double v227;
  __int128 v228;
  unint64_t v229;
  _OWORD *v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  void **v245;
  __int128 v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  uint64_t v250;
  uint64_t v252;
  double v253;
  uint64_t v255;
  float64x2_t v256;
  uint64_t v257;
  float64x2_t v258;
  void *__p[2];
  double v260;
  float64x2_t v261;
  unint64_t v262;
  float64x2_t v263;
  double v264;
  void *v265[2];
  void *v266[2];
  __int128 v267;
  void *v268[2];
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;

  v280 = *MEMORY[0x24BDAC8D0];
  v9 = a3[1];
  v10 = 0xCF3CF3CF3CF3CF3DLL * ((v9 - *a3) >> 3);
  if (v10 <= 1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 385, (uint64_t)"states.size() > 1", 17, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = a3[1];
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((v9 - *a3) >> 3);
  }
  v252 = a2;
  if (v10 >= *(_QWORD *)(a2 + 32))
    v10 = *(_QWORD *)(a2 + 32);
  v272 = 0u;
  v273 = 0u;
  v270 = 0u;
  v271 = 0u;
  v269 = 0u;
  v267 = 0u;
  *(_OWORD *)v268 = 0u;
  *(_OWORD *)v265 = 0u;
  *(_OWORD *)v266 = 0u;
  if (((-168 * v10) & 0x8000000000000000) != 0)
  {
    v17 = v9 - 168 * v10;
    __asm { FMOV            V1.2D, #-1.0 }
    v256 = (float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL);
    v258 = _Q1;
    while (1)
    {
      v24 = *(double *)(v17 + 16);
      a7.i64[0] = *(_QWORD *)(v17 + 40);
      _Q3 = *(float64x2_t *)(v17 + 24);
      v26 = *(double *)(v17 + 64);
      _Q5 = *(float64x2_t *)(v17 + 48);
      *(_OWORD *)__p = *(_OWORD *)v17;
      v260 = v24;
      v261 = _Q3;
      v262 = a7.i64[0];
      v263 = _Q5;
      v264 = v26;
      _Q6 = (float64x2_t)vzip1q_s64(*(int64x2_t *)__p, (int64x2_t)_Q3);
      v29 = (float64x2_t)vzip2q_s64(*(int64x2_t *)__p, (int64x2_t)_Q3);
      v30.f64[0] = v24;
      *(_QWORD *)&v30.f64[1] = a7.i64[0];
      v31 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, *(double *)__p), v29, *(float64x2_t *)__p, 1), v30, v24);
      _D1 = __p[1];
      __asm { FMLA            D18, D1, V5.D[1] }
      v34.f64[0] = _D18 + v26 * v24;
      v35 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q3.f64[0]), v29, _Q3, 1), v30, *(double *)a7.i64);
      _Q3.f64[0] = _Q3.f64[1];
      __asm { FMLA            D0, D3, V5.D[1] }
      *(double *)a7.i64 = _D0 + v26 * *(double *)a7.i64;
      v37 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q5.f64[0]), v29, _Q5, 1), v30, v26);
      _Q6.f64[0] = _Q5.f64[1];
      __asm { FMLA            D3, D6, V5.D[1] }
      _Q3.f64[0] = _Q3.f64[0] + v26 * v26;
      v38 = vaddq_f64((float64x2_t)vextq_s8(v35, (int8x16_t)v31, 8uLL), v258);
      v31.f64[0] = _Q3.f64[0] + -1.0;
      *(_QWORD *)&v34.f64[1] = v35.i64[0];
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v256, vabsq_f64(v38)), (int32x4_t)vcgtq_f64(v256, vabsq_f64(v31))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v256, vabsq_f64(v34)), (int32x4_t)vcgtq_f64(v256, vabsq_f64((float64x2_t)vzip1q_s64(a7, v37)))))))) & 1) != 0|| fabs(*(double *)&v37.i64[1]) >= 1.0e-10)
      {
        sub_20F1B6B0C((float64x2_t *)__p);
      }
      v278 = 0uLL;
      v279 = 0;
      sub_20E9733B8((float64x2_t *)__p, (double *)&v278);
      v39 = (char *)v265[1];
      if (v265[1] < v266[0])
      {
        *(_QWORD *)v265[1] = v278;
        v40 = v39 + 8;
        goto LABEL_40;
      }
      v41 = v265[0];
      v42 = (char *)v265[1] - (char *)v265[0];
      v43 = ((char *)v265[1] - (char *)v265[0]) >> 3;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61)
        sub_20E867F44();
      v45 = (char *)v266[0] - (char *)v265[0];
      if (((char *)v266[0] - (char *)v265[0]) >> 2 > v44)
        v44 = v45 >> 2;
      v46 = (unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v44;
      if (v46)
        break;
      v47 = 0;
      v48 = (_QWORD *)(8 * v43);
      *(_QWORD *)(8 * v43) = v278;
      v40 = (void *)(8 * v43 + 8);
      v49 = v39 - v41;
      if (v39 != v41)
        goto LABEL_32;
LABEL_38:
      v265[0] = v48;
      v265[1] = v40;
      v266[0] = &v47[8 * v46];
      if (v41)
        operator delete(v41);
LABEL_40:
      v265[1] = v40;
      v278 = 0uLL;
      v279 = 0;
      sub_20E9733B8((float64x2_t *)__p, (double *)&v278);
      v59 = (_BYTE *)v267;
      if ((unint64_t)v267 < *((_QWORD *)&v267 + 1))
      {
        *(_QWORD *)v267 = *((_QWORD *)&v278 + 1);
        v60 = (uint64_t)(v59 + 8);
        goto LABEL_61;
      }
      v61 = v266[1];
      v62 = v267 - (unint64_t)v266[1];
      v63 = (uint64_t)(v267 - (unint64_t)v266[1]) >> 3;
      v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 61)
        sub_20E867F44();
      v65 = *((_QWORD *)&v267 + 1) - (unint64_t)v266[1];
      if ((uint64_t)(*((_QWORD *)&v267 + 1) - (unint64_t)v266[1]) >> 2 > v64)
        v64 = v65 >> 2;
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8)
        v66 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v66 = v64;
      if (v66)
      {
        if (v66 >> 61)
          sub_20E877A38();
        v67 = (char *)operator new(8 * v66);
        v68 = &v67[8 * v63];
        *(_QWORD *)v68 = *((_QWORD *)&v278 + 1);
        v60 = (uint64_t)(v68 + 8);
        v69 = v59 - v61;
        if (v59 == v61)
          goto LABEL_59;
LABEL_53:
        v70 = v69 - 8;
        if (v70 < 0x58)
          goto LABEL_255;
        if ((unint64_t)(v59 - &v67[v62]) < 0x20)
          goto LABEL_255;
        v71 = (v70 >> 3) + 1;
        v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
        v73 = &v59[-v72];
        v68 -= v72;
        v74 = &v67[8 * v63 - 16];
        v75 = (__int128 *)(v59 - 16);
        v76 = v71 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v77 = *v75;
          *((_OWORD *)v74 - 1) = *(v75 - 1);
          *(_OWORD *)v74 = v77;
          v74 -= 32;
          v75 -= 2;
          v76 -= 4;
        }
        while (v76);
        v59 = v73;
        if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_255:
          do
          {
            v78 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *((_QWORD *)v68 - 1) = v78;
            v68 -= 8;
          }
          while (v59 != v61);
        }
        goto LABEL_59;
      }
      v67 = 0;
      v68 = (char *)(8 * v63);
      *(_QWORD *)(8 * v63) = *((_QWORD *)&v278 + 1);
      v60 = 8 * v63 + 8;
      v69 = v59 - v61;
      if (v59 != v61)
        goto LABEL_53;
LABEL_59:
      v266[1] = v68;
      *(_QWORD *)&v267 = v60;
      *((_QWORD *)&v267 + 1) = &v67[8 * v66];
      if (v61)
        operator delete(v61);
LABEL_61:
      *(_QWORD *)&v267 = v60;
      v278 = 0uLL;
      v279 = 0;
      sub_20E9733B8((float64x2_t *)__p, (double *)&v278);
      v79 = (char *)v268[1];
      if (v268[1] < (void *)v269)
      {
        *(_QWORD *)v268[1] = v279;
        v80 = v79 + 8;
        goto LABEL_82;
      }
      v81 = v268[0];
      v82 = (char *)v268[1] - (char *)v268[0];
      v83 = ((char *)v268[1] - (char *)v268[0]) >> 3;
      v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 61)
        sub_20E867F44();
      v85 = v269 - (unint64_t)v268[0];
      if ((uint64_t)(v269 - (unint64_t)v268[0]) >> 2 > v84)
        v84 = v85 >> 2;
      if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
        v86 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v86 = v84;
      if (v86)
      {
        if (v86 >> 61)
          sub_20E877A38();
        v87 = operator new(8 * v86);
        v88 = &v87[8 * v83];
        *v88 = v279;
        v80 = v88 + 1;
        v89 = v79 - v81;
        if (v79 == v81)
          goto LABEL_80;
LABEL_74:
        v90 = v89 - 8;
        if (v90 < 0x58)
          goto LABEL_256;
        if ((unint64_t)(v79 - &v87[v82]) < 0x20)
          goto LABEL_256;
        v91 = (v90 >> 3) + 1;
        v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
        v93 = &v79[-v92];
        v88 = (_QWORD *)((char *)v88 - v92);
        v94 = &v87[8 * v83 - 16];
        v95 = v79 - 16;
        v96 = v91 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v97 = *(_OWORD *)v95;
          *(v94 - 1) = *((_OWORD *)v95 - 1);
          *v94 = v97;
          v94 -= 2;
          v95 -= 32;
          v96 -= 4;
        }
        while (v96);
        v79 = v93;
        if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_256:
          do
          {
            v98 = *((_QWORD *)v79 - 1);
            v79 -= 8;
            *--v88 = v98;
          }
          while (v79 != v81);
        }
        goto LABEL_80;
      }
      v87 = 0;
      v88 = (_QWORD *)(8 * v83);
      *(_QWORD *)(8 * v83) = v279;
      v80 = (void *)(8 * v83 + 8);
      v89 = v79 - v81;
      if (v79 != v81)
        goto LABEL_74;
LABEL_80:
      v268[0] = v88;
      v268[1] = v80;
      *(_QWORD *)&v269 = &v87[8 * v86];
      if (v81)
        operator delete(v81);
LABEL_82:
      v268[1] = v80;
      v99 = (_BYTE *)v270;
      if ((unint64_t)v270 < *((_QWORD *)&v270 + 1))
      {
        *(_QWORD *)v270 = *(_QWORD *)(v17 + 144);
        v100 = (uint64_t)(v99 + 8);
        goto LABEL_103;
      }
      v101 = (_BYTE *)*((_QWORD *)&v269 + 1);
      v102 = v270 - *((_QWORD *)&v269 + 1);
      v103 = (uint64_t)(v270 - *((_QWORD *)&v269 + 1)) >> 3;
      v104 = v103 + 1;
      if ((unint64_t)(v103 + 1) >> 61)
        goto LABEL_245;
      v105 = *((_QWORD *)&v270 + 1) - *((_QWORD *)&v269 + 1);
      if ((uint64_t)(*((_QWORD *)&v270 + 1) - *((_QWORD *)&v269 + 1)) >> 2 > v104)
        v104 = v105 >> 2;
      if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
        v106 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v106 = v104;
      if (v106)
      {
        if (v106 >> 61)
          goto LABEL_241;
        v107 = (char *)operator new(8 * v106);
        v108 = &v107[8 * v103];
        *(_QWORD *)v108 = *(_QWORD *)(v17 + 144);
        v100 = (uint64_t)(v108 + 8);
        v109 = v99 - v101;
        if (v99 == v101)
          goto LABEL_101;
LABEL_95:
        v110 = v109 - 8;
        if (v110 < 0x58)
          goto LABEL_257;
        if ((unint64_t)(v99 - &v107[v102]) < 0x20)
          goto LABEL_257;
        v111 = (v110 >> 3) + 1;
        v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
        v113 = &v99[-v112];
        v108 -= v112;
        v114 = &v107[8 * v103 - 16];
        v115 = (__int128 *)(v99 - 16);
        v116 = v111 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v117 = *v115;
          *((_OWORD *)v114 - 1) = *(v115 - 1);
          *(_OWORD *)v114 = v117;
          v114 -= 32;
          v115 -= 2;
          v116 -= 4;
        }
        while (v116);
        v99 = v113;
        if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_257:
          do
          {
            v118 = *((_QWORD *)v99 - 1);
            v99 -= 8;
            *((_QWORD *)v108 - 1) = v118;
            v108 -= 8;
          }
          while (v99 != v101);
        }
        goto LABEL_101;
      }
      v107 = 0;
      v108 = (char *)(8 * v103);
      *(_QWORD *)(8 * v103) = *(_QWORD *)(v17 + 144);
      v100 = 8 * v103 + 8;
      v109 = v99 - v101;
      if (v99 != v101)
        goto LABEL_95;
LABEL_101:
      *((_QWORD *)&v269 + 1) = v108;
      *(_QWORD *)&v270 = v100;
      *((_QWORD *)&v270 + 1) = &v107[8 * v106];
      if (v101)
        operator delete(v101);
LABEL_103:
      *(_QWORD *)&v270 = v100;
      v119 = (_BYTE *)*((_QWORD *)&v271 + 1);
      if (*((_QWORD *)&v271 + 1) < (unint64_t)v272)
      {
        **((_QWORD **)&v271 + 1) = *(_QWORD *)(v17 + 152);
        v120 = (uint64_t)(v119 + 8);
        goto LABEL_124;
      }
      v121 = (_BYTE *)v271;
      v122 = *((_QWORD *)&v271 + 1) - v271;
      v123 = (uint64_t)(*((_QWORD *)&v271 + 1) - v271) >> 3;
      v124 = v123 + 1;
      if ((unint64_t)(v123 + 1) >> 61)
        goto LABEL_245;
      v125 = v272 - v271;
      if ((uint64_t)(v272 - v271) >> 2 > v124)
        v124 = v125 >> 2;
      if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
        v126 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v126 = v124;
      if (v126)
      {
        if (v126 >> 61)
          goto LABEL_241;
        v127 = (char *)operator new(8 * v126);
        v128 = &v127[8 * v123];
        *(_QWORD *)v128 = *(_QWORD *)(v17 + 152);
        v120 = (uint64_t)(v128 + 8);
        v129 = v119 - v121;
        if (v119 == v121)
          goto LABEL_122;
LABEL_116:
        v130 = v129 - 8;
        if (v130 < 0x58)
          goto LABEL_258;
        if ((unint64_t)(v119 - &v127[v122]) < 0x20)
          goto LABEL_258;
        v131 = (v130 >> 3) + 1;
        v132 = 8 * (v131 & 0x3FFFFFFFFFFFFFFCLL);
        v133 = &v119[-v132];
        v128 -= v132;
        v134 = &v127[8 * v123 - 16];
        v135 = (__int128 *)(v119 - 16);
        v136 = v131 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v137 = *v135;
          *((_OWORD *)v134 - 1) = *(v135 - 1);
          *(_OWORD *)v134 = v137;
          v134 -= 32;
          v135 -= 2;
          v136 -= 4;
        }
        while (v136);
        v119 = v133;
        if (v131 != (v131 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_258:
          do
          {
            v138 = *((_QWORD *)v119 - 1);
            v119 -= 8;
            *((_QWORD *)v128 - 1) = v138;
            v128 -= 8;
          }
          while (v119 != v121);
        }
        goto LABEL_122;
      }
      v127 = 0;
      v128 = (char *)(8 * v123);
      *(_QWORD *)(8 * v123) = *(_QWORD *)(v17 + 152);
      v120 = 8 * v123 + 8;
      v129 = v119 - v121;
      if (v119 != v121)
        goto LABEL_116;
LABEL_122:
      *(_QWORD *)&v271 = v128;
      *((_QWORD *)&v271 + 1) = v120;
      *(_QWORD *)&v272 = &v127[8 * v126];
      if (v121)
        operator delete(v121);
LABEL_124:
      *((_QWORD *)&v271 + 1) = v120;
      v139 = (_BYTE *)v273;
      if ((unint64_t)v273 >= *((_QWORD *)&v273 + 1))
      {
        v140 = (_BYTE *)*((_QWORD *)&v272 + 1);
        v141 = v273 - *((_QWORD *)&v272 + 1);
        v142 = (uint64_t)(v273 - *((_QWORD *)&v272 + 1)) >> 3;
        v143 = v142 + 1;
        if ((unint64_t)(v142 + 1) >> 61)
LABEL_245:
          sub_20E867F44();
        v144 = *((_QWORD *)&v273 + 1) - *((_QWORD *)&v272 + 1);
        if ((uint64_t)(*((_QWORD *)&v273 + 1) - *((_QWORD *)&v272 + 1)) >> 2 > v143)
          v143 = v144 >> 2;
        if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
          v145 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v145 = v143;
        if (v145)
        {
          if (v145 >> 61)
LABEL_241:
            sub_20E877A38();
          v146 = (char *)operator new(8 * v145);
          v147 = &v146[8 * v142];
          *(_QWORD *)v147 = *(_QWORD *)(v17 + 160);
          v23 = (uint64_t)(v147 + 8);
          v148 = v139 - v140;
          if (v139 == v140)
            goto LABEL_142;
LABEL_136:
          v149 = v148 - 8;
          if (v149 < 0x58)
            goto LABEL_259;
          if ((unint64_t)(v139 - &v146[v141]) < 0x20)
            goto LABEL_259;
          v150 = (v149 >> 3) + 1;
          v151 = 8 * (v150 & 0x3FFFFFFFFFFFFFFCLL);
          v152 = &v139[-v151];
          v147 -= v151;
          v153 = &v146[8 * v142 - 16];
          v154 = (__int128 *)(v139 - 16);
          v155 = v150 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v156 = *v154;
            *((_OWORD *)v153 - 1) = *(v154 - 1);
            *(_OWORD *)v153 = v156;
            v153 -= 32;
            v154 -= 2;
            v155 -= 4;
          }
          while (v155);
          v139 = v152;
          if (v150 != (v150 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_259:
            do
            {
              v157 = *((_QWORD *)v139 - 1);
              v139 -= 8;
              *((_QWORD *)v147 - 1) = v157;
              v147 -= 8;
            }
            while (v139 != v140);
          }
        }
        else
        {
          v146 = 0;
          v147 = (char *)(8 * v142);
          *(_QWORD *)(8 * v142) = *(_QWORD *)(v17 + 160);
          v23 = 8 * v142 + 8;
          v148 = v139 - v140;
          if (v139 != v140)
            goto LABEL_136;
        }
LABEL_142:
        *((_QWORD *)&v272 + 1) = v147;
        *(_QWORD *)&v273 = v23;
        *((_QWORD *)&v273 + 1) = &v146[8 * v145];
        if (v140)
          operator delete(v140);
        goto LABEL_15;
      }
      *(_QWORD *)v273 = *(_QWORD *)(v17 + 160);
      v23 = (uint64_t)(v139 + 8);
LABEL_15:
      *(_QWORD *)&v273 = v23;
      v17 += 168;
      if (v17 >= a3[1])
        goto LABEL_7;
    }
    if (v46 >> 61)
      sub_20E877A38();
    v47 = operator new(8 * v46);
    v48 = &v47[8 * v43];
    *v48 = v278;
    v40 = v48 + 1;
    v49 = v39 - v41;
    if (v39 == v41)
      goto LABEL_38;
LABEL_32:
    v50 = v49 - 8;
    if (v50 < 0x58)
      goto LABEL_260;
    if ((unint64_t)(v39 - v47 - v42) < 0x20)
      goto LABEL_260;
    v51 = (v50 >> 3) + 1;
    v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
    v53 = &v39[-v52];
    v48 = (_QWORD *)((char *)v48 - v52);
    v54 = &v47[8 * v43 - 16];
    v55 = v39 - 16;
    v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v57 = *(_OWORD *)v55;
      *(v54 - 1) = *((_OWORD *)v55 - 1);
      *v54 = v57;
      v54 -= 2;
      v55 -= 32;
      v56 -= 4;
    }
    while (v56);
    v39 = v53;
    if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_260:
      do
      {
        v58 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *--v48 = v58;
      }
      while (v39 != v41);
    }
    goto LABEL_38;
  }
LABEL_7:
  __p[0] = 0;
  __p[1] = 0;
  v260 = 0.0;
  v278 = 0uLL;
  v279 = 0;
  if ((sub_20F193598(v252, a1, v265, &v278) & 1) != 0)
  {
    v11 = __p[1];
    if (__p[1] >= (void *)*(_QWORD *)&v260)
    {
      v16 = sub_20F1B8590((char **)__p, (const void *)v278, *((uint64_t *)&v278 + 1));
    }
    else
    {
      *((_QWORD *)__p[1] + 1) = 0;
      *v11 = 0;
      v11[2] = 0;
      v12 = (const void *)v278;
      v13 = *((_QWORD *)&v278 + 1) - v278;
      if (*((_QWORD *)&v278 + 1) != (_QWORD)v278)
      {
        if (v13 < 0)
          goto LABEL_250;
        v14 = (char *)operator new(*((_QWORD *)&v278 + 1) - v278);
        *v11 = v14;
        v11[1] = v14;
        v15 = &v14[8 * (v13 >> 3)];
        v11[2] = v15;
        memcpy(v14, v12, v13);
        v11[1] = v15;
      }
      v16 = (char *)(v11 + 3);
    }
    __p[1] = v16;
    if ((_QWORD)v278)
    {
      *((_QWORD *)&v278 + 1) = v278;
      operator delete((void *)v278);
    }
    v278 = 0uLL;
    v279 = 0;
    if (sub_20F193598(v252, a1, &v266[1], &v278))
    {
      v158 = __p[1];
      if (__p[1] >= (void *)*(_QWORD *)&v260)
      {
        v163 = sub_20F1B8590((char **)__p, (const void *)v278, *((uint64_t *)&v278 + 1));
      }
      else
      {
        *((_QWORD *)__p[1] + 1) = 0;
        *v158 = 0;
        v158[2] = 0;
        v159 = (const void *)v278;
        v160 = *((_QWORD *)&v278 + 1) - v278;
        if (*((_QWORD *)&v278 + 1) != (_QWORD)v278)
        {
          if (v160 < 0)
            goto LABEL_250;
          v161 = (char *)operator new(*((_QWORD *)&v278 + 1) - v278);
          *v158 = v161;
          v158[1] = v161;
          v162 = &v161[8 * (v160 >> 3)];
          v158[2] = v162;
          memcpy(v161, v159, v160);
          v158[1] = v162;
        }
        v163 = (char *)(v158 + 3);
      }
      __p[1] = v163;
      if ((_QWORD)v278)
      {
        *((_QWORD *)&v278 + 1) = v278;
        operator delete((void *)v278);
      }
      v278 = 0uLL;
      v279 = 0;
      if (sub_20F193598(v252, a1, v268, &v278))
      {
        v164 = __p[1];
        if (__p[1] >= (void *)*(_QWORD *)&v260)
        {
          v169 = sub_20F1B8590((char **)__p, (const void *)v278, *((uint64_t *)&v278 + 1));
        }
        else
        {
          *((_QWORD *)__p[1] + 1) = 0;
          *v164 = 0;
          v164[2] = 0;
          v165 = (const void *)v278;
          v166 = *((_QWORD *)&v278 + 1) - v278;
          if (*((_QWORD *)&v278 + 1) != (_QWORD)v278)
          {
            if (v166 < 0)
              goto LABEL_250;
            v167 = (char *)operator new(*((_QWORD *)&v278 + 1) - v278);
            *v164 = v167;
            v164[1] = v167;
            v168 = &v167[8 * (v166 >> 3)];
            v164[2] = v168;
            memcpy(v167, v165, v166);
            v164[1] = v168;
          }
          v169 = (char *)(v164 + 3);
        }
        __p[1] = v169;
        if ((_QWORD)v278)
        {
          *((_QWORD *)&v278 + 1) = v278;
          operator delete((void *)v278);
        }
        v278 = 0uLL;
        v279 = 0;
        if (sub_20F193598(v252, a1, (_QWORD *)&v269 + 1, &v278))
        {
          v170 = __p[1];
          if (__p[1] >= (void *)*(_QWORD *)&v260)
          {
            v175 = sub_20F1B8590((char **)__p, (const void *)v278, *((uint64_t *)&v278 + 1));
          }
          else
          {
            *((_QWORD *)__p[1] + 1) = 0;
            *v170 = 0;
            v170[2] = 0;
            v171 = (const void *)v278;
            v172 = *((_QWORD *)&v278 + 1) - v278;
            if (*((_QWORD *)&v278 + 1) != (_QWORD)v278)
            {
              if (v172 < 0)
                goto LABEL_250;
              v173 = (char *)operator new(*((_QWORD *)&v278 + 1) - v278);
              *v170 = v173;
              v170[1] = v173;
              v174 = &v173[8 * (v172 >> 3)];
              v170[2] = v174;
              memcpy(v173, v171, v172);
              v170[1] = v174;
            }
            v175 = (char *)(v170 + 3);
          }
          __p[1] = v175;
          if ((_QWORD)v278)
          {
            *((_QWORD *)&v278 + 1) = v278;
            operator delete((void *)v278);
          }
          v278 = 0uLL;
          v279 = 0;
          if (sub_20F193598(v252, a1, &v271, &v278))
          {
            v176 = __p[1];
            if (__p[1] >= (void *)*(_QWORD *)&v260)
            {
              v181 = sub_20F1B8590((char **)__p, (const void *)v278, *((uint64_t *)&v278 + 1));
            }
            else
            {
              *((_QWORD *)__p[1] + 1) = 0;
              *v176 = 0;
              v176[2] = 0;
              v177 = (const void *)v278;
              v178 = *((_QWORD *)&v278 + 1) - v278;
              if (*((_QWORD *)&v278 + 1) != (_QWORD)v278)
              {
                if (v178 < 0)
                  goto LABEL_250;
                v179 = (char *)operator new(*((_QWORD *)&v278 + 1) - v278);
                *v176 = v179;
                v176[1] = v179;
                v180 = &v179[8 * (v178 >> 3)];
                v176[2] = v180;
                memcpy(v179, v177, v178);
                v176[1] = v180;
              }
              v181 = (char *)(v176 + 3);
            }
            __p[1] = v181;
            if ((_QWORD)v278)
            {
              *((_QWORD *)&v278 + 1) = v278;
              operator delete((void *)v278);
            }
            v278 = 0uLL;
            v279 = 0;
            if (sub_20F193598(v252, a1, (_QWORD *)&v272 + 1, &v278))
            {
              v185 = __p[1];
              if (__p[1] >= (void *)*(_QWORD *)&v260)
              {
                v190 = sub_20F1B8590((char **)__p, (const void *)v278, *((uint64_t *)&v278 + 1));
LABEL_213:
                __p[1] = v190;
                if ((_QWORD)v278)
                {
                  *((_QWORD *)&v278 + 1) = v278;
                  operator delete((void *)v278);
                }
                v199 = a3[1];
                v274 = *(_OWORD *)(v199 - 48);
                v275 = *(_QWORD *)(v199 - 32);
                v278 = *(_OWORD *)(v199 - 96);
                v279 = *(_QWORD *)(v199 - 80);
                v276 = *(_OWORD *)(v199 - 72);
                v277 = *(_QWORD *)(v199 - 56);
                v200 = a4;
                v201 = *a4;
                a4[1] = *a4;
                v192 = (uint64_t *)__p[0];
                v202 = *(_QWORD *)__p[0];
                if (*((_QWORD *)__p[0] + 1) != *(_QWORD *)__p[0])
                {
                  v203 = 0;
                  do
                  {
                    v205 = *(_QWORD *)(v192[9] + 8 * v203);
                    v206 = *(_QWORD *)(v192[12] + 8 * v203);
                    v207 = *(_QWORD *)(v192[15] + 8 * v203);
                    v208 = *(double *)(v202 + 8 * v203);
                    v209 = *(double *)(v192[3] + 8 * v203);
                    v210 = *(double *)(v192[6] + 8 * v203);
                    v211 = v208 * v208 + v209 * v209 + v210 * v210;
                    if (v211 >= 0.0000002635)
                    {
                      v214 = sqrt(v211);
                      v215 = __sincos_stret(v214);
                      *(double *)&v182 = v215.__cosval;
                      v200 = a4;
                      v213 = v215.__sinval / v214;
                      v212 = 1.0 / v211 * (1.0 - v215.__cosval);
                    }
                    else
                    {
                      v212 = 0.5 - v211 * (v211 / -720.0 + 0.0416666667);
                      v213 = 1.0 - v211 * (0.166666667 - v211 * (v211 / -5040.0 + 0.00833333333));
                      *(double *)&v182 = 1.0 - v211 * v212;
                    }
                    v216 = v209 * v212;
                    *(double *)&v217 = *(double *)&v182 + v208 * (v208 * v212);
                    *(double *)&v218 = *(double *)&v182 + v209 * (v209 * v212);
                    v219 = *(double *)&v182 + v210 * (v210 * v212);
                    v220 = v209 * (v208 * v212);
                    v221 = v210 * (v208 * v212);
                    v222 = v210 * v216;
                    v223 = v208 * v213;
                    v224 = v209 * v213;
                    v225 = v210 * v213;
                    *(double *)&v183 = v220 - v225;
                    *(double *)&v226 = v224 + v221;
                    *(double *)&v184 = v220 + v225;
                    v227 = v222 - v223;
                    *(double *)&v228 = v221 - v224;
                    *(double *)&v182 = v223 + v222;
                    v229 = (unint64_t)v200[2];
                    if ((unint64_t)v201 < v229)
                    {
                      *((_QWORD *)&v217 + 1) = v184;
                      *((_QWORD *)&v228 + 1) = v183;
                      *v201 = v217;
                      v201[1] = v228;
                      *((double *)&v218 + 1) = v223 + v222;
                      *((double *)v201 + 8) = v219;
                      *((double *)&v226 + 1) = v222 - v223;
                      v201[2] = v218;
                      v201[3] = v226;
                      *(_OWORD *)((char *)v201 + 72) = v278;
                      *((_QWORD *)v201 + 11) = v279;
                      v201[6] = v276;
                      *((_QWORD *)v201 + 14) = v277;
                      *(_OWORD *)((char *)v201 + 120) = v274;
                      *((_QWORD *)v201 + 17) = v275;
                      *((_QWORD *)v201 + 18) = v205;
                      *((_QWORD *)v201 + 19) = v206;
                      *((_QWORD *)v201 + 20) = v207;
                      v204 = (char *)v201 + 168;
                    }
                    else
                    {
                      v230 = *v200;
                      v231 = 0xCF3CF3CF3CF3CF3DLL * (((char *)v201 - (_BYTE *)*v200) >> 3);
                      v232 = v231 + 1;
                      if (v231 + 1 > 0x186186186186186)
                        sub_20E867F44();
                      v233 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v229 - (_QWORD)v230) >> 3);
                      if (2 * v233 > v232)
                        v232 = 2 * v233;
                      if (v233 >= 0xC30C30C30C30C3)
                        v234 = 0x186186186186186;
                      else
                        v234 = v232;
                      if (v234)
                      {
                        v246 = v184;
                        v247 = v228;
                        v248 = v183;
                        v249 = v182;
                        v250 = v217;
                        v253 = v222 - v223;
                        v255 = v226;
                        v257 = v218;
                        if (v234 > 0x186186186186186)
                          sub_20E877A38();
                        v235 = (char *)operator new(168 * v234);
                        *(_QWORD *)&v226 = v255;
                        *(_QWORD *)&v218 = v257;
                        v227 = v253;
                        v182 = v249;
                        *(_QWORD *)&v217 = v250;
                        *(_QWORD *)&v228 = v247;
                        v183 = v248;
                        v184 = v246;
                      }
                      else
                      {
                        v235 = 0;
                      }
                      *((_QWORD *)&v217 + 1) = v184;
                      *((_QWORD *)&v228 + 1) = v183;
                      v236 = &v235[168 * v231];
                      *(_OWORD *)v236 = v217;
                      *((_OWORD *)v236 + 1) = v228;
                      *((_QWORD *)&v218 + 1) = v182;
                      *((double *)v236 + 8) = v219;
                      *((double *)&v226 + 1) = v227;
                      *((_OWORD *)v236 + 2) = v218;
                      *((_OWORD *)v236 + 3) = v226;
                      *(_OWORD *)(v236 + 72) = v278;
                      *((_QWORD *)v236 + 11) = v279;
                      *((_OWORD *)v236 + 6) = v276;
                      *((_QWORD *)v236 + 14) = v277;
                      *(_OWORD *)(v236 + 120) = v274;
                      *((_QWORD *)v236 + 17) = v275;
                      *((_QWORD *)v236 + 18) = v205;
                      *((_QWORD *)v236 + 19) = v206;
                      *((_QWORD *)v236 + 20) = v207;
                      v237 = v236;
                      if (v201 == v230)
                      {
                        v245 = a4;
                        v204 = v236 + 168;
                        *a4 = v236;
                        a4[1] = v236 + 168;
                        a4[2] = &v235[168 * v234];
                        if (!v201)
                          goto LABEL_238;
                      }
                      else
                      {
                        do
                        {
                          v238 = *(_OWORD *)((char *)v201 - 168);
                          v239 = *(_OWORD *)((char *)v201 - 152);
                          *(_OWORD *)(v237 - 136) = *(_OWORD *)((char *)v201 - 136);
                          *(_OWORD *)(v237 - 152) = v239;
                          *(_OWORD *)(v237 - 168) = v238;
                          v240 = *(_OWORD *)((char *)v201 - 120);
                          v241 = *(_OWORD *)((char *)v201 - 104);
                          v242 = *(_OWORD *)((char *)v201 - 88);
                          *(_OWORD *)(v237 - 72) = *(_OWORD *)((char *)v201 - 72);
                          *(_OWORD *)(v237 - 88) = v242;
                          *(_OWORD *)(v237 - 104) = v241;
                          *(_OWORD *)(v237 - 120) = v240;
                          v243 = *(_OWORD *)((char *)v201 - 56);
                          v182 = *(_OWORD *)((char *)v201 - 40);
                          v244 = *(_OWORD *)((char *)v201 - 24);
                          *((_QWORD *)v237 - 1) = *((_QWORD *)v201 - 1);
                          *(_OWORD *)(v237 - 24) = v244;
                          *(_OWORD *)(v237 - 40) = v182;
                          *(_OWORD *)(v237 - 56) = v243;
                          v237 -= 168;
                          v201 = (_OWORD *)((char *)v201 - 168);
                        }
                        while (v201 != v230);
                        v245 = a4;
                        v201 = *a4;
                        v204 = v236 + 168;
                        *a4 = v237;
                        a4[1] = v236 + 168;
                        a4[2] = &v235[168 * v234];
                        if (!v201)
                        {
LABEL_238:
                          v200 = v245;
                          goto LABEL_218;
                        }
                      }
                      operator delete(v201);
                      v200 = a4;
                      v192 = (uint64_t *)__p[0];
                    }
LABEL_218:
                    v200[1] = v204;
                    ++v203;
                    v202 = *v192;
                    v201 = v204;
                  }
                  while (v203 < (v192[1] - *v192) >> 3);
                }
                v191 = 1;
                v193 = (uint64_t *)__p[1];
                v194 = v192;
                if (__p[1] == v192)
                  goto LABEL_198;
                goto LABEL_193;
              }
              *((_QWORD *)__p[1] + 1) = 0;
              *v185 = 0;
              v185[2] = 0;
              v186 = (const void *)v278;
              v187 = *((_QWORD *)&v278 + 1) - v278;
              if (*((_QWORD *)&v278 + 1) == (_QWORD)v278)
              {
LABEL_188:
                v190 = (char *)(v185 + 3);
                goto LABEL_213;
              }
              if ((v187 & 0x8000000000000000) == 0)
              {
                v188 = (char *)operator new(*((_QWORD *)&v278 + 1) - v278);
                *v185 = v188;
                v185[1] = v188;
                v189 = &v188[8 * (v187 >> 3)];
                v185[2] = v189;
                memcpy(v188, v186, v187);
                v185[1] = v189;
                goto LABEL_188;
              }
LABEL_250:
              sub_20E867F44();
            }
          }
        }
      }
    }
  }
  if ((_QWORD)v278)
  {
    *((_QWORD *)&v278 + 1) = v278;
    operator delete((void *)v278);
  }
  v191 = 0;
  v192 = (uint64_t *)__p[0];
  if (__p[0])
  {
    v193 = (uint64_t *)__p[1];
    v194 = (uint64_t *)__p[0];
    if (__p[1] == __p[0])
    {
LABEL_198:
      __p[1] = v192;
      operator delete(v194);
      goto LABEL_199;
    }
LABEL_193:
    v195 = v193;
    do
    {
      v197 = (void *)*(v195 - 3);
      v195 -= 3;
      v196 = v197;
      if (v197)
      {
        *(v193 - 2) = (uint64_t)v196;
        operator delete(v196);
      }
      v193 = v195;
    }
    while (v195 != v192);
    v194 = (uint64_t *)__p[0];
    goto LABEL_198;
  }
LABEL_199:
  if (*((_QWORD *)&v272 + 1))
  {
    *(_QWORD *)&v273 = *((_QWORD *)&v272 + 1);
    operator delete(*((void **)&v272 + 1));
  }
  if ((_QWORD)v271)
  {
    *((_QWORD *)&v271 + 1) = v271;
    operator delete((void *)v271);
  }
  if (*((_QWORD *)&v269 + 1))
  {
    *(_QWORD *)&v270 = *((_QWORD *)&v269 + 1);
    operator delete(*((void **)&v269 + 1));
  }
  if (v268[0])
  {
    v268[1] = v268[0];
    operator delete(v268[0]);
  }
  if (v266[1])
  {
    *(void **)&v267 = v266[1];
    operator delete(v266[1]);
  }
  if (v265[0])
  {
    v265[1] = v265[0];
    operator delete(v265[0]);
  }
  return v191;
}

void sub_20F1B6A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20E9DD680(&a30);
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F1B6A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  void **v39;
  _QWORD *v40;
  uint64_t v41;
  void *v43;
  void *v44;

  v43 = *v39;
  if (*v39)
  {
    *v40 = v43;
    operator delete(v43);
  }
  a31 = v39;
  v44 = *(void **)(v41 - 192);
  if (v44)
  {
    *(_QWORD *)(v41 - 184) = v44;
    operator delete(v44);
  }
  sub_20E9DD680(&a30);
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F1B6A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F1B6A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F1B6A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F1B6AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F1B6ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F1B6AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F1B6AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_20F1B6AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_20F0E71B8((uint64_t)&a39);
  _Unwind_Resume(a1);
}

double sub_20F1B6B0C(float64x2_t *a1)
{
  double v2;
  double v3;
  double v4;
  int v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v17;
  double v18;
  double v19;
  double cosval;
  double v21;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double result;
  double v35;
  uint64_t v36;
  double v37;
  int8x16_t v38;
  double v39;

  v38 = 0uLL;
  v39 = 0.0;
  sub_20E9733B8(a1, (double *)v38.i64);
  v2 = *(double *)v38.i64 * *(double *)v38.i64 + *(double *)&v38.i64[1] * *(double *)&v38.i64[1] + v39 * v39;
  if (v2 > 9.8696044)
  {
    v3 = sqrt(v2) / 3.14159265;
    v4 = ceil(v3) + -1.0;
    v5 = (int)v4;
    v6 = v3 - v4;
    if ((v5 & 1) != 0)
      v6 = v6 + -1.0;
    v7 = v6 / v3;
    *(double *)v38.i64 = *(double *)v38.i64 * v7;
    *(double *)&v38.i64[1] = *(double *)&v38.i64[1] * v7;
    v39 = v39 * v7;
  }
  v8 = v39;
  _Q7 = v38;
  *(_QWORD *)&v10 = vextq_s8(_Q7, _Q7, 8uLL).u64[0];
  _D1 = v38.i64[1];
  __asm { FMLA            D0, D1, V7.D[1] }
  v17 = _D0 + v8 * v8;
  if (v17 >= 0.0000002635)
  {
    v21 = sqrt(v17);
    v36 = v38.i64[0];
    v37 = v39;
    v35 = v10;
    v22 = __sincos_stret(v21);
    cosval = v22.__cosval;
    v10 = v35;
    _Q7.i64[0] = v36;
    v8 = v37;
    v19 = v22.__sinval / v21;
    v18 = 1.0 / v17 * (1.0 - v22.__cosval);
  }
  else
  {
    v18 = 0.5 - v17 * (v17 / -720.0 + 0.0416666667);
    v19 = 1.0 - v17 * (0.166666667 - v17 * (v17 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v17 * v18;
  }
  v23 = *(double *)_Q7.i64 * v18;
  v24 = v10 * v18;
  v25 = cosval + *(double *)_Q7.i64 * (*(double *)_Q7.i64 * v18);
  v26 = cosval + v10 * (v10 * v18);
  v27 = cosval + v8 * (v8 * v18);
  v28 = v10 * (*(double *)_Q7.i64 * v18);
  v29 = v8 * v23;
  v30 = v8 * v24;
  v31 = *(double *)_Q7.i64 * v19;
  v32 = v10 * v19;
  v33 = v8 * v19;
  a1->f64[0] = v25;
  a1->f64[1] = v28 + v33;
  a1[1].f64[0] = v29 - v32;
  a1[1].f64[1] = v28 - v33;
  a1[2].f64[0] = v26;
  a1[2].f64[1] = v31 + v30;
  result = v30 - v31;
  a1[3].f64[0] = v32 + v29;
  a1[3].f64[1] = v30 - v31;
  a1[4].f64[0] = v27;
  return result;
}

void sub_20F1B6CF8(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, char **a6)
{
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  __double2 v49;
  double v50;
  __int128 v51;
  __int128 v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  __int128 v60;
  double v61;
  __int128 v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  float64x2_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(*a2 + 16);
  v13 = *(_QWORD *)(a2[3] + 16);
  v14 = a3[1];
  v15 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v14 - *a3) >> 3);
  if (v15 < v12 || v15 < v13)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 459, (uint64_t)"states.size() >= orientation_num_taps && states.size() >= position_num_taps", 75, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v14 = a3[1];
  }
  if (((-168 * v12) & 0x8000000000000000) != 0)
  {
    v17 = v14 - 168 * v12;
    v18 = v12 - 1;
    do
    {
      v19 = *(_QWORD *)(v17 + 16);
      v20 = *(_QWORD *)(v17 + 40);
      v21 = *(_OWORD *)(v17 + 24);
      v22 = *(_QWORD *)(v17 + 64);
      v23 = *(_OWORD *)(v17 + 48);
      v92 = *(float64x2_t *)v17;
      v93 = v19;
      v94 = v21;
      v95 = v20;
      v96 = v23;
      v97 = v22;
      v90 = 0uLL;
      v91 = 0;
      sub_20E9733B8(&v92, (double *)&v90);
      v24 = 8 * v18;
      *(_QWORD *)(*a4 + v24) = v90;
      *(_QWORD *)(a4[3] + v24) = *((_QWORD *)&v90 + 1);
      *(_QWORD *)(a4[6] + v24) = v91;
      v14 = a3[1];
      --v18;
      v17 += 168;
    }
    while (v17 < v14);
  }
  if ((int)v13 >= 1)
  {
    v25 = (_QWORD *)(v14 - 168 * v13);
    v26 = a4[9];
    v27 = a4[12];
    v28 = a4[15];
    v29 = v13 - 1;
    do
    {
      v30 = 8 * v29;
      *(_QWORD *)(v26 + v30) = v25[18];
      *(_QWORD *)(v27 + v30) = v25[19];
      *(_QWORD *)(v28 + v30) = v25[20];
      v25 += 21;
      --v29;
    }
    while ((unint64_t)v25 < v14);
  }
  sub_20F193218(*a2, (uint64_t)a4, (unint64_t **)a1, (uint64_t)a5);
  sub_20F193218(a2[1], (uint64_t)(a4 + 3), (unint64_t **)a1, (uint64_t)(a5 + 3));
  sub_20F193218(a2[2], (uint64_t)(a4 + 6), (unint64_t **)a1, (uint64_t)(a5 + 6));
  sub_20F193218(a2[3], (uint64_t)(a4 + 9), (unint64_t **)a1, (uint64_t)(a5 + 9));
  sub_20F193218(a2[4], (uint64_t)(a4 + 12), (unint64_t **)a1, (uint64_t)(a5 + 12));
  sub_20F193218(a2[5], (uint64_t)(a4 + 15), (unint64_t **)a1, (uint64_t)(a5 + 15));
  v34 = a3[1];
  v88 = *(_OWORD *)(v34 - 48);
  v89 = *(_QWORD *)(v34 - 32);
  v92 = *(float64x2_t *)(v34 - 96);
  v93 = *(_QWORD *)(v34 - 80);
  v90 = *(_OWORD *)(v34 - 72);
  v91 = *(_QWORD *)(v34 - 56);
  v35 = *a6;
  a6[1] = *a6;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    v36 = 0;
    do
    {
      v38 = 8 * v36;
      v39 = *(_QWORD *)(a5[9] + v38);
      v40 = *(_QWORD *)(a5[12] + v38);
      v41 = *(_QWORD *)(a5[15] + v38);
      v42 = *(double *)(*a5 + v38);
      v43 = *(double *)(a5[3] + v38);
      v44 = *(double *)(a5[6] + v38);
      v45 = v42 * v42 + v43 * v43 + v44 * v44;
      if (v45 >= 0.0000002635)
      {
        v48 = sqrt(v45);
        v49 = __sincos_stret(v48);
        *(double *)&v31 = v49.__cosval;
        v47 = v49.__sinval / v48;
        v46 = 1.0 / v45 * (1.0 - v49.__cosval);
      }
      else
      {
        v46 = 0.5 - v45 * (v45 / -720.0 + 0.0416666667);
        v47 = 1.0 - v45 * (0.166666667 - v45 * (v45 / -5040.0 + 0.00833333333));
        *(double *)&v31 = 1.0 - v45 * v46;
      }
      v50 = v43 * v46;
      *(double *)&v51 = *(double *)&v31 + v42 * (v42 * v46);
      *(double *)&v52 = *(double *)&v31 + v43 * (v43 * v46);
      v53 = *(double *)&v31 + v44 * (v44 * v46);
      v54 = v43 * (v42 * v46);
      v55 = v44 * (v42 * v46);
      v56 = v44 * v50;
      v57 = v42 * v47;
      v58 = v43 * v47;
      v59 = v44 * v47;
      *(double *)&v32 = v54 - v59;
      *(double *)&v60 = v58 + v55;
      *(double *)&v33 = v54 + v59;
      v61 = v56 - v57;
      *(double *)&v62 = v55 - v58;
      *(double *)&v31 = v57 + v56;
      v63 = (unint64_t)a6[2];
      if ((unint64_t)v35 < v63)
      {
        *((_QWORD *)&v51 + 1) = v33;
        *((_QWORD *)&v62 + 1) = v32;
        *(_OWORD *)v35 = v51;
        *((_OWORD *)v35 + 1) = v62;
        *((double *)&v52 + 1) = v57 + v56;
        *((double *)v35 + 8) = v53;
        *((double *)&v60 + 1) = v56 - v57;
        *((_OWORD *)v35 + 2) = v52;
        *((_OWORD *)v35 + 3) = v60;
        *(float64x2_t *)(v35 + 72) = v92;
        *((_QWORD *)v35 + 11) = v93;
        *((_OWORD *)v35 + 6) = v90;
        *((_QWORD *)v35 + 14) = v91;
        *(_OWORD *)(v35 + 120) = v88;
        *((_QWORD *)v35 + 17) = v89;
        *((_QWORD *)v35 + 18) = v39;
        *((_QWORD *)v35 + 19) = v40;
        *((_QWORD *)v35 + 20) = v41;
        v37 = v35 + 168;
      }
      else
      {
        v64 = *a6;
        v65 = 0xCF3CF3CF3CF3CF3DLL * ((v35 - *a6) >> 3);
        v66 = v65 + 1;
        if (v65 + 1 > 0x186186186186186)
          sub_20E867F44();
        v67 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v63 - (_QWORD)v64) >> 3);
        if (2 * v67 > v66)
          v66 = 2 * v67;
        if (v67 >= 0xC30C30C30C30C3)
          v68 = 0x186186186186186;
        else
          v68 = v66;
        if (v68)
        {
          v80 = v33;
          v81 = v62;
          v82 = v32;
          v83 = v31;
          v84 = v51;
          v85 = v56 - v57;
          v86 = v60;
          v87 = v52;
          if (v68 > 0x186186186186186)
            sub_20E877A38();
          v69 = (char *)operator new(168 * v68);
          *(_QWORD *)&v60 = v86;
          *(_QWORD *)&v52 = v87;
          *(_QWORD *)&v51 = v84;
          v61 = v85;
          v32 = v82;
          v31 = v83;
          v33 = v80;
          *(_QWORD *)&v62 = v81;
        }
        else
        {
          v69 = 0;
        }
        *((_QWORD *)&v51 + 1) = v33;
        *((_QWORD *)&v62 + 1) = v32;
        v70 = &v69[168 * v65];
        *(_OWORD *)v70 = v51;
        *((_OWORD *)v70 + 1) = v62;
        *((_QWORD *)&v52 + 1) = v31;
        *((double *)v70 + 8) = v53;
        *((double *)&v60 + 1) = v61;
        *((_OWORD *)v70 + 2) = v52;
        *((_OWORD *)v70 + 3) = v60;
        *(float64x2_t *)(v70 + 72) = v92;
        *((_QWORD *)v70 + 11) = v93;
        *((_OWORD *)v70 + 6) = v90;
        *((_QWORD *)v70 + 14) = v91;
        *(_OWORD *)(v70 + 120) = v88;
        *((_QWORD *)v70 + 17) = v89;
        *((_QWORD *)v70 + 18) = v39;
        *((_QWORD *)v70 + 19) = v40;
        *((_QWORD *)v70 + 20) = v41;
        v71 = v70;
        if (v35 != v64)
        {
          do
          {
            v72 = *(_OWORD *)(v35 - 168);
            v73 = *(_OWORD *)(v35 - 152);
            *(_OWORD *)(v71 - 136) = *(_OWORD *)(v35 - 136);
            *(_OWORD *)(v71 - 152) = v73;
            *(_OWORD *)(v71 - 168) = v72;
            v74 = *(_OWORD *)(v35 - 120);
            v75 = *(_OWORD *)(v35 - 104);
            v76 = *(_OWORD *)(v35 - 88);
            *(_OWORD *)(v71 - 72) = *(_OWORD *)(v35 - 72);
            *(_OWORD *)(v71 - 88) = v76;
            *(_OWORD *)(v71 - 104) = v75;
            *(_OWORD *)(v71 - 120) = v74;
            v77 = *(_OWORD *)(v35 - 56);
            v31 = *(_OWORD *)(v35 - 40);
            v78 = *(_OWORD *)(v35 - 24);
            *((_QWORD *)v71 - 1) = *((_QWORD *)v35 - 1);
            *(_OWORD *)(v71 - 24) = v78;
            *(_OWORD *)(v71 - 40) = v31;
            *(_OWORD *)(v71 - 56) = v77;
            v71 -= 168;
            v35 -= 168;
          }
          while (v35 != v64);
          v35 = *a6;
        }
        v79 = &v69[168 * v68];
        v37 = v70 + 168;
        *a6 = v71;
        a6[1] = v70 + 168;
        a6[2] = v79;
        if (v35)
          operator delete(v35);
      }
      a6[1] = v37;
      ++v36;
      v35 = v37;
    }
    while (v36 < (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  }
}

void sub_20F1B7348(double *a1, double a2, double a3)
{
  BOOL v6;
  int v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const char *v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  size_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD v67[3];
  int v68;
  const char *v69;
  int v70;
  const char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE object[24];
  __int128 v78;
  void *__p[2];
  unint64_t v80;
  char v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = a3 < 0.0 || a3 > 1.0;
  if (v6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 632, (uint64_t)"gain_imu_median_est >= 0.0 && gain_imu_median_est <= 1.0", 56, (uint64_t)"gain_imu_median_est MUST be in range of [0,1]", 45, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a2 > 0.0)
  {
    if (*a1 == -1.0)
      *a1 = a2;
    else
      *a1 = (1.0 - a3) * a2 + *a1 * a3;
    return;
  }
  sub_20F1B13B8(&v74);
  if (**(int **)(v74 + 56) <= 5)
  {
    v7 = *(unsigned __int8 *)(v74 + 72);
    v8 = sub_20E8C31DC(v74, "OSLogSurrogateAppender", 1, 0);
    if (v7 || v8 != 0)
    {
      v10 = v8;
      v67[0] = &v74;
      v67[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v67[2] = std::chrono::system_clock::now().__d_.__rep_;
      v68 = 5;
      v69 = "unknown file";
      v70 = 639;
      v72 = 0;
      v73 = 0;
      v71 = "unknown function";
      v11 = v74;
      v12 = v74 + 16;
      if (*(char *)(v74 + 39) < 0)
      {
        v14 = *(const char **)(v74 + 16);
        v13 = *(_QWORD *)(v74 + 24);
        v16 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v16 & 1) != 0)
          goto LABEL_20;
      }
      else
      {
        v13 = *(unsigned __int8 *)(v74 + 39);
        v14 = (const char *)(*(_QWORD *)v67[0] + 16);
        v15 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v15 & 1) != 0)
          goto LABEL_20;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v78 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_20:
      if (byte_254A4A4F8[23] >= 0)
        v17 = byte_254A4A4F8;
      else
        v17 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v18 = byte_254A4A4F8[23];
      else
        v18 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v17, v14);
      v19 = &object[8];
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v18 >= 0x17)
      {
        v20 = v10;
        v21 = v14;
        v22 = v11;
        v23 = v7;
        v24 = v12;
        v25 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v25 = v18 | 7;
        v26 = v25 + 1;
        v19 = operator new(v25 + 1);
        *(_QWORD *)&object[16] = v18;
        *(_QWORD *)&v78 = v26 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v19;
        v12 = v24;
        v7 = v23;
        v11 = v22;
        v14 = v21;
        v10 = v20;
      }
      else
      {
        BYTE7(v78) = v18;
        if (!v18)
        {
LABEL_34:
          v19[v18] = 0;
          BYTE8(v78) = 1;
          v27 = __p;
          if (v13 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v13 >= 0x17)
          {
            v28 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v13 | 7) != 0x17)
              v28 = v13 | 7;
            v29 = v28 + 1;
            v27 = operator new(v28 + 1);
            __p[1] = (void *)v13;
            v80 = v29 | 0x8000000000000000;
            __p[0] = v27;
          }
          else
          {
            HIBYTE(v80) = v13;
            if (!v13)
              goto LABEL_42;
          }
          memmove(v27, v14, v13);
LABEL_42:
          *((_BYTE *)v27 + v13) = 0;
          v81 = 1;
          v30 = *(NSObject **)object;
          if (SHIBYTE(v80) < 0)
            operator delete(__p[0]);
          if (BYTE8(v78) && SBYTE7(v78) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v10 && *(_QWORD *)(v10 + 24))
          {
            v31 = _os_log_pack_size();
            v32 = (std::__shared_weak_count_vtbl *)operator new(v31, (std::align_val_t)8uLL);
            v33 = (std::__shared_weak_count *)operator new();
            v34 = v33;
            v33->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            v33->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v33->__shared_weak_owners_ = 0;
            v33[1].__vftable = v32;
            *(_QWORD *)object = v32;
            *(_QWORD *)&object[8] = v32;
            *(_QWORD *)&object[16] = v33;
            do
              v36 = __ldxr(p_shared_owners);
            while (__stxr(v36 + 1, p_shared_owners));
            v78 = 0uLL;
            __p[0] = 0;
            do
              v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v34);
            }
            v38 = *(_QWORD *)object;
            v39 = _os_log_pack_fill();
            *(_DWORD *)v39 = 134217984;
            *(double *)(v39 + 4) = a2;
            v40 = operator new();
            v41 = *(unsigned __int8 *)(v11 + 39);
            if ((v41 & 0x80u) == 0)
              v42 = v12;
            else
              v42 = *(_QWORD *)(v11 + 16);
            if ((v41 & 0x80u) != 0)
              v41 = *(_QWORD *)(v11 + 24);
            *(_QWORD *)v40 = v38;
            *(_OWORD *)(v40 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v40 + 24) = v78;
            v78 = 0uLL;
            *(_QWORD *)(v40 + 40) = v42;
            *(_QWORD *)(v40 + 48) = v41;
            *(_BYTE *)(v40 + 56) = 16;
            v75 = 0;
            v76 = v40;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v10 + 24) + 40))(*(_QWORD *)(v10 + 24), &v76);
            v43 = v76;
            v76 = 0;
            if (v43)
            {
              v44 = *(std::__shared_weak_count **)(v43 + 32);
              if (v44)
              {
                v45 = (unint64_t *)&v44->__shared_owners_;
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 - 1, v45));
                if (!v46)
                {
                  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                  std::__shared_weak_count::__release_weak(v44);
                }
              }
              v47 = *(std::__shared_weak_count **)(v43 + 16);
              if (v47)
              {
                v48 = (unint64_t *)&v47->__shared_owners_;
                do
                  v49 = __ldaxr(v48);
                while (__stlxr(v49 - 1, v48));
                if (!v49)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v47);
                }
              }
              MEMORY[0x212BC6398](v43, 0x10F0C40B62ED6C6);
              v50 = v75;
              v75 = 0;
              if (v50)
              {
                v51 = *(std::__shared_weak_count **)(v50 + 32);
                if (v51)
                {
                  v52 = (unint64_t *)&v51->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v54 = *(std::__shared_weak_count **)(v50 + 16);
                if (v54)
                {
                  v55 = (unint64_t *)&v54->__shared_owners_;
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
              }
            }
            v57 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
            if (*((_QWORD *)&v78 + 1))
            {
              v58 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
              do
                v59 = __ldaxr(v58);
              while (__stlxr(v59 - 1, v58));
              if (!v59)
              {
                ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                std::__shared_weak_count::__release_weak(v57);
              }
            }
            v60 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v61 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v62 = __ldaxr(v61);
              while (__stlxr(v62 - 1, v61));
              if (!v62)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v60);
              }
            }
          }
          else
          {
            os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
            *(_DWORD *)object = 134217984;
            *(double *)&object[4] = a2;
            v63 = (void *)_os_log_send_and_compose_impl();
            if (v63)
              free(v63);
          }
          if (v7)
          {
            sub_20E8C003C((uint64_t)v67, "sample_time_diff = %lf is less than 0, indicating IMU samples are out of order.  Estimated seriod not updated", a2);
            sub_20E863570((uint64_t)v67);
          }
          sub_20E863570((uint64_t)v67);
          v64 = v73;
          if (v73)
          {
            v65 = (unint64_t *)&v73->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          return;
        }
      }
      memmove(v19, v17, v18);
      goto LABEL_34;
    }
  }
}

void sub_20F1B7AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1B7B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  va_list va2;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1B7B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  MEMORY[0x212BC6398](v3, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1B7B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1B7BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_20F1B7C18@<Q0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  double *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __n128 result;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[2];

  v14 = *(double **)a3;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3)) <= 1)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 663, (uint64_t)"imu_measurements.size() >= 2", 28, (uint64_t)"Insufficient IMU measurements to estimate gyro rotation at extrapolation time", 77, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_13;
    }
    v14 = *(double **)a3;
  }
  if (*(double *)(a2[1] - 8) != *v14
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 664, (uint64_t)"ExactlyEqual(state_timestamps.back(), imu_measurements.front().timestamp)", 73, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_13;
  }
  v15 = *(_QWORD *)(a3 + 8);
  if (*(double *)(v15 - 56) != a7)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 668, (uint64_t)"ExactlyEqual(extrap_timestamp, imu_measurements.back().timestamp)", 65, (uint64_t)"IMU samples should span the entire extrapolation delta-time. Missing measurements must have been extrapolated/interpolated and resampled before this stage", 154, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_13;
    }
    v15 = *(_QWORD *)(a3 + 8);
  }
  v16 = a1[1];
  v17 = *(_OWORD *)(v16 - 136);
  v18 = *(_OWORD *)(v16 - 152);
  *(_OWORD *)a6 = *(_OWORD *)(v16 - 168);
  *(_OWORD *)(a6 + 16) = v18;
  *(_OWORD *)(a6 + 32) = v17;
  v19 = *(_OWORD *)(v16 - 104);
  v20 = *(_OWORD *)(v16 - 72);
  v21 = *(_OWORD *)(v16 - 120);
  *(_OWORD *)(a6 + 80) = *(_OWORD *)(v16 - 88);
  *(_OWORD *)(a6 + 96) = v20;
  *(_OWORD *)(a6 + 48) = v21;
  *(_OWORD *)(a6 + 64) = v19;
  v22 = *(_OWORD *)(v16 - 40);
  v23 = *(_OWORD *)(v16 - 24);
  v24 = *(_OWORD *)(v16 - 56);
  *(_QWORD *)(a6 + 160) = *(_QWORD *)(v16 - 8);
  *(_OWORD *)(a6 + 128) = v22;
  *(_OWORD *)(a6 + 144) = v23;
  *(_OWORD *)(a6 + 112) = v24;
  v25 = *(double **)a3;
  if (v15)
  {
    if (!v25
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_13:
      abort();
    }
  }
  v33[0] = 0x6DB6DB6DB6DB6DB7 * ((v15 - (uint64_t)v25) >> 3);
  v33[1] = v25;
  sub_20FDBB4A4(a6, a4, v33);
  sub_20F1B4634((uint64_t)&v31, a1, a2, *a5, a5[1], a7);
  v26 = v31;
  *(_QWORD *)(a6 + 160) = v32;
  *(_OWORD *)(a6 + 144) = v26;
  v27 = a1[1];
  v28 = *(_QWORD *)(v27 - 32);
  *(_OWORD *)(a6 + 120) = *(_OWORD *)(v27 - 48);
  *(_QWORD *)(a6 + 136) = v28;
  v29 = *(_OWORD *)(v27 - 96);
  *(_QWORD *)(a6 + 88) = *(_QWORD *)(v27 - 80);
  *(_OWORD *)(a6 + 72) = v29;
  result = *(__n128 *)(v27 - 72);
  *(_QWORD *)(a6 + 112) = *(_QWORD *)(v27 - 56);
  *(__n128 *)(a6 + 96) = result;
  return result;
}

void sub_20F1B7E80(float64x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>, float64x2_t a7@<Q0>, double a8@<D1>, double a9@<D2>)
{
  char v10;
  double v15;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v30;
  float64x2_t v32;
  float64x2_t v38;
  float64x2_t v39;
  _QWORD v42[2];

  v10 = a4;
  v15 = a7.f64[0];
  if (!a5
    && a4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 757, (uint64_t)"!use_gyro_measurements || propagator != nullptr", 47, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_14;
  }
  if ((v10 & 1) != 0)
  {
    if ((a8 >= v15
       || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 716, (uint64_t)"timestamp2 >= timestamp1", 24, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))&& (a9 >= a8|| !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 717, (uint64_t)"extrap_timestamp >= timestamp2", 30, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0)))
    {
      v18 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a6 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a6 + 144) = v18;
      *(_QWORD *)(a6 + 160) = *(_QWORD *)(a2 + 160);
      v19 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a6 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a6 + 80) = v19;
      v20 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a6 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a6 + 112) = v20;
      v21 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a6 = *(_OWORD *)a2;
      *(_OWORD *)(a6 + 16) = v21;
      v22 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a6 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a6 + 48) = v22;
      v24 = *a3;
      v23 = a3[1];
      if (v24
        || !v23
        || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
      {
        v42[0] = 0x6DB6DB6DB6DB6DB7 * ((v23 - v24) >> 3);
        v42[1] = v24;
        sub_20FDBB4A4(a6, a5, v42);
        v25.f64[0] = *(float64_t *)(a2 + 160);
        v26 = *(float64x2_t *)(a2 + 144);
        v27.f64[0] = a1[10].f64[0];
        *(_QWORD *)&v27.f64[0] = *(_OWORD *)&vsubq_f64(v25, v27);
        _Q3 = vsubq_f64(v26, a1[9]);
        _Q4.f64[0] = 1.0 / (a8 - v15);
        v30.f64[0] = *(float64_t *)(a2 + 16);
        _Q17 = *(float64x2_t *)(a2 + 48);
        v30.f64[1] = *(float64_t *)(a2 + 40);
        v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 24)), _Q3.f64[0]), (float64x2_t)vzip2q_s64(*(int64x2_t *)a2, *(int64x2_t *)(a2 + 24)), _Q3, 1), v30, v27.f64[0]);
        _Q5 = vmulq_f64(_Q17, _Q3);
        _Q3.f64[0] = _Q3.f64[1];
        __asm { FMLA            D5, D3, V17.D[1] }
        _Q5.f64[0] = vmlad_n_f64(_Q5.f64[0], *(double *)(a2 + 64), v27.f64[0]);
        v38 = vmulq_n_f64(v32, _Q4.f64[0]);
        v39 = vmulq_f64(_Q4, _Q5);
        _Q4.f64[0] = a9 - a8;
        *(_QWORD *)&v39.f64[0] = *(_OWORD *)&vmulq_f64(_Q4, v39);
        _Q2 = vmulq_n_f64(v38, a9 - a8);
        _D6 = *(_QWORD *)(a6 + 40);
        __asm { FMLA            D4, D6, V2.D[1] }
        _Q4.f64[0] = vmlad_n_f64(_Q4.f64[0], *(double *)(a6 + 64), v39.f64[0]);
        *(float64x2_t *)(a6 + 144) = vaddq_f64(v26, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a6, _Q2.f64[0]), *(float64x2_t *)(a6 + 24), _Q2, 1), *(float64x2_t *)(a6 + 48), v39.f64[0]));
        *(_QWORD *)(a6 + 160) = *(_OWORD *)&vaddq_f64(v25, _Q4);
        return;
      }
    }
LABEL_14:
    abort();
  }
  a7.f64[0] = v15;
  sub_20F1B2BA4((uint64_t)a1, a2, a6, a7, a8, a9);
}

double sub_20F1B8130@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  double result;
  _QWORD v19[2];

  if (a6 < a5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 781, (uint64_t)"extrap_timestamp >= timestamp", 29, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_10;
  }
  v11 = a2[1];
  if (*(double *)(v11 - 56) != a6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 785, (uint64_t)"ExactlyEqual(extrap_timestamp, imu_measurements.back().timestamp)", 65, (uint64_t)"IMU samples should span the entire extrapolation delta-time. Missing measurements must have been extrapolated/interpolated and resampled before this stage", 154, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_10;
    }
    v11 = a2[1];
  }
  v12 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a4 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a4 + 144) = v12;
  *(_QWORD *)(a4 + 160) = *(_QWORD *)(a1 + 160);
  v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a4 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a4 + 80) = v13;
  v14 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a4 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a4 + 112) = v14;
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v15;
  v16 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a4 + 48) = v16;
  v17 = *a2;
  if (v11)
  {
    if (!v17
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_10:
      abort();
    }
  }
  v19[0] = 0x6DB6DB6DB6DB6DB7 * ((v11 - v17) >> 3);
  v19[1] = v17;
  sub_20FDBB4A4(a4, a3, v19);
  *(_OWORD *)(a4 + 144) = *(_OWORD *)(a1 + 144);
  result = *(double *)(a1 + 160);
  *(double *)(a4 + 160) = result;
  return result;
}

unint64_t sub_20F1B82B4(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *i;
  __int128 v45;
  char *v46;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = (unint64_t)&(*a1)[v6 & 0xFFFFFFFFFFFFFFE0];
  if (a5 < 1)
    return v7;
  v9 = a3;
  v12 = (unint64_t)a1[1];
  v11 = a1[2];
  if (a5 <= (uint64_t)&v11[-v12] >> 5)
  {
    v17 = (uint64_t)(v12 - v7) >> 5;
    if (v17 >= a5)
    {
      v18 = a3 + 32 * a5;
      v19 = a1[1];
      v23 = v7 + 32 * a5;
      v24 = v12 - 32 * a5;
      v25 = v19;
      if (v24 >= v12)
      {
LABEL_22:
        a1[1] = v25;
        if (v19 != (char *)v23)
        {
          v27 = v19 - 32;
          v28 = 32 * ((uint64_t)&v19[-v23] >> 5);
          do
          {
            *(_QWORD *)v27 = *(_QWORD *)(v7 + v28 - 32);
            v29 = *(_OWORD *)(v7 + v28 - 24);
            *((_QWORD *)v27 + 3) = *(_QWORD *)(v7 + v28 - 8);
            *(_OWORD *)(v27 + 8) = v29;
            v27 -= 32;
            v28 -= 32;
          }
          while (v28);
        }
        if (v18 != a3)
        {
          v30 = v7;
          do
          {
            *(_QWORD *)v30 = *(_QWORD *)v9;
            v31 = *(_OWORD *)(v9 + 8);
            *(_QWORD *)(v30 + 24) = *(_QWORD *)(v9 + 24);
            *(_OWORD *)(v30 + 8) = v31;
            v9 += 32;
            v30 += 32;
          }
          while (v9 != v18);
        }
        return v7;
      }
    }
    else
    {
      v18 = a3 + 32 * v17;
      v19 = a1[1];
      if (v18 != a4)
      {
        v20 = v18;
        v21 = a1[1];
        do
        {
          *(_QWORD *)v21 = *(_QWORD *)v20;
          v22 = *(_OWORD *)(v20 + 8);
          *((_QWORD *)v21 + 3) = *(_QWORD *)(v20 + 24);
          *(_OWORD *)(v21 + 8) = v22;
          v19 += 32;
          v20 += 32;
          v21 += 32;
        }
        while (v20 != a4);
      }
      a1[1] = v19;
      if ((uint64_t)(v12 - v7) < 1)
        return v7;
      v23 = v7 + 32 * a5;
      v24 = (unint64_t)&v19[-32 * a5];
      v25 = v19;
      if (v24 >= v12)
        goto LABEL_22;
    }
    v25 = v19;
    do
    {
      *(_QWORD *)v25 = *(_QWORD *)v24;
      v26 = *(_OWORD *)(v24 + 8);
      *((_QWORD *)v25 + 3) = *(_QWORD *)(v24 + 24);
      *(_OWORD *)(v25 + 8) = v26;
      v25 += 32;
      v24 += 32;
    }
    while (v24 < v12);
    goto LABEL_22;
  }
  v13 = a5 + ((uint64_t)(v12 - (_QWORD)v5) >> 5);
  if (v13 >> 59)
    sub_20E867F44();
  v14 = v11 - v5;
  if (v14 >> 4 > v13)
    v13 = v14 >> 4;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
    v15 = 0x7FFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 59)
      sub_20E877A38();
    v16 = (char *)operator new(32 * v15);
  }
  else
  {
    v16 = 0;
  }
  v33 = v6 >> 5;
  v32 = &v16[32 * (v6 >> 5)];
  v34 = &v32[32 * a5];
  v35 = v32;
  do
  {
    *(_QWORD *)v35 = *(_QWORD *)v9;
    v36 = *(_OWORD *)(v9 + 8);
    *((_QWORD *)v35 + 3) = *(_QWORD *)(v9 + 24);
    *(_OWORD *)(v35 + 8) = v36;
    v35 += 32;
    v9 += 32;
  }
  while (v35 != v34);
  v37 = *a1;
  v38 = v32;
  if (*a1 != (char *)v7)
  {
    v39 = 32 * v33;
    v40 = v16;
    do
    {
      v41 = &v40[v39];
      *((_QWORD *)v41 - 4) = *(_QWORD *)&v5[v39 - 32];
      v42 = *(_OWORD *)&v5[v39 - 24];
      *((_QWORD *)v41 - 1) = *(_QWORD *)&v5[v39 - 8];
      *(_OWORD *)(v41 - 24) = v42;
      v5 -= 32;
      v40 -= 32;
    }
    while (&v5[v39] != v37);
    v38 = &v40[32 * v33];
  }
  v43 = &v16[32 * v15];
  for (i = a1[1]; (char *)v7 != i; v7 += 32)
  {
    *(_QWORD *)v34 = *(_QWORD *)v7;
    v45 = *(_OWORD *)(v7 + 8);
    *((_QWORD *)v34 + 3) = *(_QWORD *)(v7 + 24);
    *(_OWORD *)(v34 + 8) = v45;
    v34 += 32;
  }
  v46 = *a1;
  *a1 = v38;
  a1[1] = v34;
  a1[2] = v43;
  if (v46)
    operator delete(v46);
  return (unint64_t)v32;
}

char *sub_20F1B8590(char **a1, const void *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  void *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  __int128 v25;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * ((a1[2] - v5) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v5) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v5) >> 3) >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v7;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v6];
  v13 = &v11[24 * v10];
  *((_QWORD *)&v25 + 1) = v13;
  *((_QWORD *)v12 + 1) = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 2) = 0;
  v14 = a3 - (_QWORD)a2;
  if (v14)
  {
    if (v14 < 0)
      sub_20E867F44();
    v15 = operator new(v14);
    *(_QWORD *)v12 = v15;
    v16 = (unint64_t)v15 + 8 * (v14 >> 3);
    memcpy(v15, a2, v14);
    *(int64x2_t *)(v12 + 8) = vdupq_n_s64(v16);
  }
  v17 = v12 + 24;
  *(_QWORD *)&v25 = v12 + 24;
  if (v4 == v5)
  {
    *a1 = v12;
    a1[1] = v17;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v18 = v12;
      *((_QWORD *)v12 - 2) = 0;
      *((_QWORD *)v12 - 1) = 0;
      v19 = *(_OWORD *)(v4 - 24);
      v4 -= 24;
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v4 + 2);
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
    }
    while (v4 != v5);
    v4 = *a1;
    v20 = a1[1];
    *a1 = v12;
    *(_OWORD *)(a1 + 1) = v25;
    v17 = (char *)v25;
    if (v20 != v4)
    {
      v21 = v20;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v20 - 2) = v22;
          operator delete(v22);
        }
        v20 = v21;
      }
      while (v21 != v4);
    }
  }
  if (v4)
    operator delete(v4);
  return v17;
}

void sub_20F1B8760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_20EB143E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1B8784(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  char *v29;
  uint64_t v30;
  char *v31;
  void *v32[4];
  void *v33[2];
  uint64_t v34;
  void *v35[4];
  void *v36[2];
  uint64_t v37;
  void *v38;
  __int128 v39;
  void *v40[2];
  uint64_t v41;
  void *v42;
  __int128 v43;
  void *v44[2];
  uint64_t v45;
  char __p[23];
  char v47;
  __int128 v48;
  uint64_t v49;
  void *v50[4];
  __int128 __dst;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;

  v54 = (char *)operator new(0x20uLL);
  v55 = xmmword_2102DBF70;
  strcpy(v54, "PoseSmoothingConfig parameters");
  sub_20E8B30B4(a3, (__int128 *)&v54, 180, 160);
  if (SHIBYTE(v55) < 0)
    operator delete(v54);
  v53 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v52 = *((_QWORD *)a2 + 2);
  }
  HIBYTE(v50[2]) = 16;
  strcpy((char *)v50, "enable_smoothing");
  sub_2101050B4((const void **)&__dst, (uint64_t)v50, (uint64_t)&v54);
  v6 = SHIBYTE(v55);
  v7 = v54;
  v8 = sub_20EAA14D8((_BYTE *)a1);
  if (v6 >= 0)
    v9 = (char *)&v54;
  else
    v9 = v7;
  sub_20E8B2F9C(&v53, v9, v8, "Enable/disable smoothing");
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    operator delete(v50[0]);
    if ((SHIBYTE(v52) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_16;
  }
  operator delete(v54);
  if (SHIBYTE(v50[2]) < 0)
    goto LABEL_15;
LABEL_11:
  if ((SHIBYTE(v52) & 0x80000000) == 0)
    goto LABEL_12;
LABEL_16:
  operator delete((void *)__dst);
LABEL_12:
  v53 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v48, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v48 = *a2;
    v49 = *((_QWORD *)a2 + 2);
  }
  strcpy(__p, "save_smooth_state_flag");
  v47 = 22;
  sub_2101050B4((const void **)&v48, (uint64_t)__p, (uint64_t)&v54);
  v10 = SHIBYTE(v55);
  v11 = v54;
  v12 = sub_20EAA14D8((_BYTE *)(a1 + 40));
  if (v10 >= 0)
    v13 = (char *)&v54;
  else
    v13 = v11;
  sub_20E8B2F9C(&v53, v13, v12, "Constant to convert time units to smoothing amount");
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    if ((v47 & 0x80000000) == 0)
      goto LABEL_23;
LABEL_27:
    operator delete(*(void **)__p);
    if ((SHIBYTE(v49) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_28;
  }
  operator delete(v54);
  if (v47 < 0)
    goto LABEL_27;
LABEL_23:
  if ((SHIBYTE(v49) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_28:
  operator delete((void *)v48);
LABEL_24:
  v53 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v44, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v44 = *a2;
    v45 = *((_QWORD *)a2 + 2);
  }
  v42 = operator new(0x20uLL);
  v43 = xmmword_2102DBFF0;
  strcpy((char *)v42, "additional_pose_smoothing_delay");
  sub_2101050B4((const void **)v44, (uint64_t)&v42, (uint64_t)&v54);
  v14 = SHIBYTE(v55);
  v15 = v54;
  v16 = sub_20EA9DB90((double *)(a1 + 48));
  if (v14 >= 0)
    v17 = (char *)&v54;
  else
    v17 = v15;
  sub_20E8B2F9C(&v53, v17, v16, "Additional delay in units of seconds when using IMU timestamps for pose smoothing");
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_39:
    operator delete(v42);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_40;
  }
  operator delete(v54);
  if (SHIBYTE(v43) < 0)
    goto LABEL_39;
LABEL_35:
  if ((SHIBYTE(v45) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_40:
  operator delete(v44[0]);
LABEL_36:
  v53 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v40, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v40 = *a2;
    v41 = *((_QWORD *)a2 + 2);
  }
  v38 = operator new(0x19uLL);
  v39 = xmmword_2102DAFD0;
  strcpy((char *)v38, "state_update_delay_mode");
  sub_2101050B4((const void **)v40, (uint64_t)&v38, (uint64_t)&v54);
  v18 = SHIBYTE(v55);
  v19 = v54;
  v20 = operator new();
  *(_QWORD *)(v20 + 109) = 0;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_QWORD *)v20 = &off_24C9FA320;
  *(_QWORD *)(v20 + 8) = &unk_24C9FA398;
  *(_QWORD *)(v20 + 152) = &unk_24C9FA3C0;
  *(_QWORD *)(v20 + 176) = 0;
  *(_QWORD *)(v20 + 184) = 0;
  *(_QWORD *)(v20 + 120) = (char *)off_24C9FA538 + 1;
  *(_QWORD *)(v20 + 128) = a1 + 56;
  v21 = operator new();
  *(_QWORD *)v21 = &off_24C9FA500;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(v20 + 160) = v21;
  *(_QWORD *)(v20 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v20 + 191) = 7;
  if (v18 >= 0)
    v22 = (char *)&v54;
  else
    v22 = v19;
  sub_20E8B2F9C(&v53, v22, v20, "Config of delay in applying the latest inertial state smooth pose predictor output.");
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_47;
LABEL_51:
    operator delete(v38);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_52;
  }
  operator delete(v54);
  if (SHIBYTE(v39) < 0)
    goto LABEL_51;
LABEL_47:
  if ((SHIBYTE(v41) & 0x80000000) == 0)
    goto LABEL_48;
LABEL_52:
  operator delete(v40[0]);
LABEL_48:
  v53 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v36, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v36 = *a2;
    v37 = *((_QWORD *)a2 + 2);
  }
  HIBYTE(v35[2]) = 21;
  strcpy((char *)v35, "smoothing_weight_mode");
  sub_2101050B4((const void **)v36, (uint64_t)v35, (uint64_t)&v54);
  v23 = SHIBYTE(v55);
  v24 = v54;
  v25 = operator new();
  *(_QWORD *)(v25 + 109) = 0;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_QWORD *)v25 = &off_24C9FA568;
  *(_QWORD *)(v25 + 8) = &unk_24C9FA5E0;
  *(_QWORD *)(v25 + 152) = &unk_24C9FA608;
  *(_QWORD *)(v25 + 176) = 0;
  *(_QWORD *)(v25 + 184) = 0;
  *(_QWORD *)(v25 + 120) = (char *)off_24C9FA780 + 1;
  *(_QWORD *)(v25 + 128) = a1 + 57;
  v26 = operator new();
  *(_QWORD *)v26 = &off_24C9FA748;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(a1 + 57);
  *(_QWORD *)(v25 + 160) = v26;
  *(_QWORD *)(v25 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v25 + 191) = 7;
  if (v23 >= 0)
    v27 = (char *)&v54;
  else
    v27 = v24;
  sub_20E8B2F9C(&v53, v27, v25, "PosePredictor pose smoothing weight configuration. Supports static (fixed) or motion adaptive weight.");
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35[2]) & 0x80000000) == 0)
      goto LABEL_59;
LABEL_63:
    operator delete(v35[0]);
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_64;
  }
  operator delete(v54);
  if (SHIBYTE(v35[2]) < 0)
    goto LABEL_63;
LABEL_59:
  if ((SHIBYTE(v37) & 0x80000000) == 0)
    goto LABEL_60;
LABEL_64:
  operator delete(v36[0]);
LABEL_60:
  v53 = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v33, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v33 = *a2;
    v34 = *((_QWORD *)a2 + 2);
  }
  strcpy((char *)v32, "fixed_smoothing_weight");
  HIBYTE(v32[2]) = 22;
  sub_2101050B4((const void **)v33, (uint64_t)v32, (uint64_t)&v54);
  v28 = SHIBYTE(v55);
  v29 = v54;
  v30 = sub_20EA9DB90((double *)(a1 + 64));
  if (v28 >= 0)
    v31 = (char *)&v54;
  else
    v31 = v29;
  sub_20E8B2F9C(&v53, v31, v30, "Sets the amount of smoothing to be used. [0 = no smoothing, 1 = max smoothing]. Actual smoothing depends on whether the mode is adaptive or fixed. See SmoothingWeightMode");
  if (SHIBYTE(v55) < 0)
  {
    operator delete(v54);
    if ((SHIBYTE(v32[2]) & 0x80000000) == 0)
    {
LABEL_71:
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        return;
LABEL_75:
      operator delete(v33[0]);
      return;
    }
  }
  else if ((SHIBYTE(v32[2]) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(v32[0]);
  if (SHIBYTE(v34) < 0)
    goto LABEL_75;
}

void sub_20F1B8E94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E869298(v1);
  _Unwind_Resume(a1);
}

void sub_20F1B9150(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F1B9660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F1B9764(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F1B9784(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F1B97A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F1B97AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F1B97B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F1B980C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio14pose_predictor20StateUpdateDelayModeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio14pose_predictor20StateUpdateDelayModeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_BYTE *)(*a2 + 8);
    v7 = *(_BYTE **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_BYTE **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_673;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _BYTE *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F1B9904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1B9918(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FA320;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA398;
  *(_QWORD *)(a1 + 152) = &unk_24C9FA3C0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F1BA1B8(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F1BA1B8(a1);
}

void sub_20F1B9980(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FA320;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA398;
  *(_QWORD *)(a1 + 152) = &unk_24C9FA3C0;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F1BA1B8(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F1B99FC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  std::string::size_type size;
  void *v18;
  std::string *v19;
  std::string::size_type v20;
  uint64_t v21;
  char v23;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  uint64_t v28;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  std::string *v35;
  std::string::size_type v36;
  uint64_t v37;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v41;
  std::bad_cast v42;
  void *v43;
  std::ios_base v44;
  uint64_t v45;
  int v46;
  _QWORD __sb[8];
  std::string v48;
  std::string v49;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v41 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v41);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v43 = 0;
  v44.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v42.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v44, __sb);
  v45 = 0;
  v46 = -1;
  v15 = (std::ios_base *)((char *)&v42 + (unint64_t)v42.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v42.__vftable;
  *(_DWORD *)((char *)&v42 + (unint64_t)v42.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v44.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  sub_20EA9DA18(&v49, *(_QWORD **)((char *)&v44.__width_ + (unint64_t)v16[-1].~bad_cast), 0);
  size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v49.__r_.__value_.__l.__size_;
  if (size != 13)
  {
    if (size != 27)
    {
      if (size != 15)
        goto LABEL_58;
      v18 = (void *)v49.__r_.__value_.__r.__words[0];
      v19 = &v49;
      if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = (std::string *)v49.__r_.__value_.__r.__words[0];
      v20 = v19->__r_.__value_.__r.__words[0];
      v21 = *(std::string::size_type *)((char *)v19->__r_.__value_.__r.__words + 7);
      if (v20 != 0x6F50746547657355 || v21 != 0x736C6C614365736FLL)
        goto LABEL_58;
      v23 = 0;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_39;
      goto LABEL_40;
    }
    v18 = (void *)v49.__r_.__value_.__r.__words[0];
    v24 = &v49;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v49.__r_.__value_.__r.__words[0];
    v25 = v24->__r_.__value_.__r.__words[0];
    v26 = v24->__r_.__value_.__l.__size_;
    v27 = v24->__r_.__value_.__r.__words[2];
    v28 = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[2] + 3);
    if (v25 == 0x497473614C657355
      && v26 == 0x7473656D6954554DLL
      && v27 == 0x6544646E41706D61
      && v28 == 0x79616C6544646E41)
    {
      v23 = 1;
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_39;
    }
LABEL_58:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v48);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v18 = (void *)v49.__r_.__value_.__r.__words[0];
  v35 = &v49;
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = (std::string *)v49.__r_.__value_.__r.__words[0];
  v36 = v35->__r_.__value_.__r.__words[0];
  v37 = *(std::string::size_type *)((char *)v35->__r_.__value_.__r.__words + 5);
  if (v36 != 0x6465786946657355 || v37 != 0x79616C6544646578)
    goto LABEL_58;
  v23 = 2;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v18);
LABEL_40:
  if ((*((_BYTE *)&v44.__precision_ + (unint64_t)v42.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
    goto LABEL_48;
  }
  v34 = std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (!v34)
  {
LABEL_48:
    std::bad_cast::bad_cast(&v42);
    v42.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v43 = &unk_24C9AB9F0;
    v44.__vftable = (std::ios_base_vtbl *)&unk_24C9FA4E0;
    sub_20EA9F254((uint64_t)&v42);
  }
  v32 = operator new();
  *(_QWORD *)v32 = &off_24C9FA500;
  *(_BYTE *)(v32 + 8) = v23;
  v33 = *a2;
  *a2 = v32;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
}

void sub_20F1B9E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  void *v15;
  int v16;
  uint64_t v17;

  if (*(char *)(v17 - 73) < 0)
  {
    operator delete(*(void **)(v17 - 96));
    if ((v16 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v16)
  {
LABEL_6:
    if (*(char *)(v17 - 49) < 0)
      operator delete(*(void **)(v17 - 72));
    if (a2 == 2)
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      JUMPOUT(0x20F1B9C9CLL);
    }
    std::istream::~istream();
    std::streambuf::~streambuf();
    if (a2 == 1)
    {
      __cxa_begin_catch(a1);
      sub_20E8B898C(&a15, &__p);
      sub_20EA9ED20((uint64_t)&a15);
    }
    if (a14 < 0)
      operator delete(__p);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_20F1B9F1C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F1B9F34);
}

void *sub_20F1B9F50()
{
  return &unk_24C9FA4E0;
}

uint64_t sub_20F1B9F5C(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F1B9F64()
{
  return &unk_24C9FA4E0;
}

uint64_t sub_20F1B9F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FA320;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FA398;
  *(_QWORD *)(a1 + 144) = &unk_24C9FA3C0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F1BA1B8(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F1BA1B8(v2);
}

void sub_20F1B9FE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FA320;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FA398;
  *(_QWORD *)(a1 + 144) = &unk_24C9FA3C0;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F1BA1B8(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1BA064(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FA320;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FA398;
  *(_QWORD *)a1 = &unk_24C9FA3C0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F1BA1B8(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F1BA1B8(v2);
}

void sub_20F1BA0D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FA320;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FA398;
  *(_QWORD *)a1 = &unk_24C9FA3C0;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F1BA1B8(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1BA158(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F1BA164(uint64_t a1)
{
  sub_20F1BA1B8(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1BA188(uint64_t a1)
{
  return sub_20F1BA1B8(a1 - 8);
}

void sub_20F1BA190(uint64_t a1)
{
  sub_20F1BA1B8(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1BA1B8(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9FA458;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA4C8;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F1BA288()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F1BA29C()
{
  return &unk_24C9FA4E0;
}

uint64_t sub_20F1BA2A8(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9FA500;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_20F1BA2F0(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FA548;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor20StateUpdat"
                                      "eDelayModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor20StateUpdateDelayModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_BYTE **sub_20F1BA39C(_BYTE **result, _BYTE *a2)
{
  **result = *a2;
  return result;
}

void sub_20F1BA3AC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F1BA8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F1BA9C0(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F1BA9E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F1BAA00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F1BAA08(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F1BAA10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F1BAA68(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio14pose_predictor19SmoothingWeightModeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio14pose_predictor19SmoothingWeightModeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_BYTE *)(*a2 + 8);
    v7 = *(_BYTE **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_BYTE **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_675;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _BYTE *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F1BAB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1BAB74(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FA568;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA5E0;
  *(_QWORD *)(a1 + 152) = &unk_24C9FA608;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F1BB378(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F1BB378(a1);
}

void sub_20F1BABDC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FA568;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA5E0;
  *(_QWORD *)(a1 + 152) = &unk_24C9FA608;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F1BB378(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F1BAC58(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  std::string::size_type size;
  void *v18;
  std::string *v19;
  int data;
  int v21;
  char v23;
  std::string *v24;
  std::string::size_type v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v33;
  std::bad_cast v34;
  void *v35;
  std::ios_base v36;
  uint64_t v37;
  int v38;
  _QWORD __sb[8];
  std::string v40;
  std::string v41;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v33 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v33);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v35 = 0;
  v36.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v34.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v36, __sb);
  v37 = 0;
  v38 = -1;
  v15 = (std::ios_base *)((char *)&v34 + (unint64_t)v34.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v34.__vftable;
  *(_DWORD *)((char *)&v34 + (unint64_t)v34.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v36.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  sub_20EA9DA18(&v41, *(_QWORD **)((char *)&v36.__width_ + (unint64_t)v16[-1].~bad_cast), 0);
  size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v41.__r_.__value_.__l.__size_;
  if (size == 13)
  {
    v18 = (void *)v41.__r_.__value_.__r.__words[0];
    v24 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v41.__r_.__value_.__r.__words[0];
    v25 = v24->__r_.__value_.__r.__words[0];
    v26 = *(std::string::size_type *)((char *)v24->__r_.__value_.__r.__words + 5);
    if (v25 != 0x6164416465657053 || v26 != 0x6576697470616441)
    {
LABEL_42:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v40);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v23 = 1;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_32;
  }
  else
  {
    if (size != 5)
      goto LABEL_42;
    v18 = (void *)v41.__r_.__value_.__r.__words[0];
    v19 = &v41;
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v41.__r_.__value_.__r.__words[0];
    data = (int)v19->__r_.__value_.__l.__data_;
    v21 = v19->__r_.__value_.__s.__data_[4];
    if (data != 1702390086 || v21 != 100)
      goto LABEL_42;
    v23 = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
LABEL_32:
      operator delete(v18);
  }
  if ((*((_BYTE *)&v36.__precision_ + (unint64_t)v34.__vftable[-1].~bad_cast) & 5) != 0)
  {
    std::istream::~istream();
    std::streambuf::~streambuf();
    goto LABEL_41;
  }
  v30 = std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  if (!v30)
  {
LABEL_41:
    std::bad_cast::bad_cast(&v34);
    v34.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
    v35 = &unk_24C9AB9F0;
    v36.__vftable = (std::ios_base_vtbl *)&unk_24C9FA728;
    sub_20EA9F254((uint64_t)&v34);
  }
  v28 = operator new();
  *(_QWORD *)v28 = &off_24C9FA748;
  *(_BYTE *)(v28 + 8) = v23;
  v29 = *a2;
  *a2 = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
}

void sub_20F1BAFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  void *v15;
  int v16;
  uint64_t v17;

  if (*(char *)(v17 - 73) < 0)
  {
    operator delete(*(void **)(v17 - 96));
    if ((v16 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v16)
  {
LABEL_6:
    if (*(char *)(v17 - 49) < 0)
      operator delete(*(void **)(v17 - 72));
    if (a2 == 2)
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      JUMPOUT(0x20F1BAEACLL);
    }
    std::istream::~istream();
    std::streambuf::~streambuf();
    if (a2 == 1)
    {
      __cxa_begin_catch(a1);
      sub_20E8B898C(&a15, &__p);
      sub_20EA9ED20((uint64_t)&a15);
    }
    if (a14 < 0)
      operator delete(__p);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_20F1BB0DC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F1BB0F4);
}

void *sub_20F1BB110()
{
  return &unk_24C9FA728;
}

uint64_t sub_20F1BB11C(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F1BB124()
{
  return &unk_24C9FA728;
}

uint64_t sub_20F1BB130(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FA568;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FA5E0;
  *(_QWORD *)(a1 + 144) = &unk_24C9FA608;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F1BB378(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F1BB378(v2);
}

void sub_20F1BB1A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FA568;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FA5E0;
  *(_QWORD *)(a1 + 144) = &unk_24C9FA608;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F1BB378(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1BB224(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FA568;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FA5E0;
  *(_QWORD *)a1 = &unk_24C9FA608;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F1BB378(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F1BB378(v2);
}

void sub_20F1BB294(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FA568;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FA5E0;
  *(_QWORD *)a1 = &unk_24C9FA608;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F1BB378(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1BB318(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F1BB324(uint64_t a1)
{
  sub_20F1BB378(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1BB348(uint64_t a1)
{
  return sub_20F1BB378(a1 - 8);
}

void sub_20F1BB350(uint64_t a1)
{
  sub_20F1BB378(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1BB378(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9FA6A0;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA710;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F1BB448()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F1BB45C()
{
  return &unk_24C9FA728;
}

uint64_t sub_20F1BB468(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9FA748;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_20F1BB4B0(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FA790;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor19SmoothingW"
                                      "eightModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor19SmoothingWeightModeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_BYTE **sub_20F1BB55C(_BYTE **result, _BYTE *a2)
{
  **result = *a2;
  return result;
}

uint64_t sub_20F1BB56C(uint64_t a1, char a2)
{
  char **v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _OWORD *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;

  *(_QWORD *)a1 = &off_24C9FA7B0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (char *)operator new(0x7BC0uLL);
  *v4 = v5;
  v6 = v5 + 31680;
  *(_QWORD *)(a1 + 24) = v5 + 31680;
  bzero(v5, 0x7BC0uLL);
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v7 = (char *)operator new(0x7BC0uLL);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = v7 + 31680;
  *(_QWORD *)(a1 + 72) = v7 + 31680;
  bzero(v7, 0x7BC0uLL);
  *(_QWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v9 = (char *)operator new(0x2B5C0uLL);
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v9;
  v10 = v9 + 177600;
  *(_QWORD *)(a1 + 120) = v9 + 177600;
  v11 = 300;
  __asm { FMOV            V1.2D, #-1.0 }
  do
  {
    *((_QWORD *)v9 + 64) = 0;
    *(_QWORD *)v9 = 0xBFF0000000000000;
    v17 = v9 + 520;
    *(_OWORD *)(v9 + 24) = 0uLL;
    *(_OWORD *)(v9 + 40) = 0uLL;
    *(_OWORD *)(v9 + 56) = 0uLL;
    *(_OWORD *)(v9 + 72) = 0uLL;
    *(_OWORD *)(v9 + 88) = 0uLL;
    *(_OWORD *)(v9 + 104) = 0uLL;
    *(_OWORD *)(v9 + 120) = 0uLL;
    *(_OWORD *)(v9 + 136) = 0uLL;
    *(_OWORD *)(v9 + 152) = 0uLL;
    *(_OWORD *)(v9 + 168) = 0uLL;
    *(_OWORD *)(v9 + 184) = 0uLL;
    *(_OWORD *)(v9 + 200) = 0uLL;
    *(_OWORD *)(v9 + 216) = 0uLL;
    *(_OWORD *)(v9 + 232) = 0uLL;
    *(_OWORD *)(v9 + 248) = 0uLL;
    *(_OWORD *)(v9 + 8) = 0uLL;
    *(_OWORD *)(v9 + 264) = 0uLL;
    *(_OWORD *)(v9 + 280) = 0uLL;
    *(_OWORD *)(v9 + 296) = 0uLL;
    *(_OWORD *)(v9 + 312) = 0uLL;
    *(_OWORD *)(v9 + 328) = 0uLL;
    *(_OWORD *)(v9 + 344) = 0uLL;
    *(_OWORD *)(v9 + 360) = 0uLL;
    *(_OWORD *)(v9 + 376) = 0uLL;
    *(_OWORD *)(v9 + 392) = 0uLL;
    *(_OWORD *)(v9 + 408) = 0uLL;
    *(_OWORD *)(v9 + 424) = 0uLL;
    *(_OWORD *)(v9 + 440) = 0uLL;
    *(_OWORD *)(v9 + 456) = 0uLL;
    *(_OWORD *)(v9 + 472) = 0uLL;
    *(_OWORD *)(v9 + 488) = 0uLL;
    *(_OWORD *)(v9 + 499) = 0uLL;
    *((_QWORD *)v9 + 67) = 0xBFF0000000000000;
    *((_OWORD *)v9 + 34) = 0uLL;
    *((_OWORD *)v9 + 35) = 0uLL;
    *((_OWORD *)v9 + 36) = 0uLL;
    v9 += 592;
    *v17 = _Q1;
    --v11;
  }
  while (v11);
  *(_QWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v18 = (char *)operator new(0x55F00uLL);
  *(_QWORD *)(a1 + 152) = v18;
  v19 = v18 + 352000;
  *(_QWORD *)(a1 + 168) = v18 + 352000;
  bzero(v18, 0x55F00uLL);
  *(_QWORD *)(a1 + 160) = v19;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v20 = (char *)operator new(0xBB80uLL);
  *(_QWORD *)(a1 + 200) = v20;
  *(_QWORD *)(a1 + 208) = v20;
  *(_QWORD *)(a1 + 216) = v20 + 48000;
  v21 = v20 + 8;
  v22 = 1500;
  do
  {
    *(v21 - 1) = 0xBFF0000000000000;
    *v21 = 0;
    v21[1] = 0;
    v21[2] = 0;
    v21 += 4;
    --v22;
  }
  while (v22);
  *(_QWORD *)(a1 + 208) = v20 + 48000;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  v23 = (char *)operator new(0xBB80uLL);
  *(_QWORD *)(a1 + 248) = v23;
  *(_QWORD *)(a1 + 256) = v23;
  *(_QWORD *)(a1 + 264) = v23 + 48000;
  v24 = v23 + 8;
  v25 = 1500;
  do
  {
    *(v24 - 1) = 0xBFF0000000000000;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v24 += 4;
    --v25;
  }
  while (v25);
  *(_QWORD *)(a1 + 256) = v23 + 48000;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  v26 = (char *)operator new(0x5DC0uLL);
  *(_QWORD *)(a1 + 296) = v26;
  *(_QWORD *)(a1 + 304) = v26;
  *(_QWORD *)(a1 + 312) = v26 + 24000;
  v27 = (char *)operator new(0x11940uLL);
  *(_QWORD *)(a1 + 320) = v27;
  *(_QWORD *)(a1 + 328) = v27;
  *(_QWORD *)(a1 + 336) = v27 + 72000;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0xBFF0000000000000;
  v28 = (char *)operator new(0x52080uLL);
  *(_QWORD *)(a1 + 344) = v28;
  *(_QWORD *)(a1 + 352) = v28;
  *(_QWORD *)(a1 + 360) = v28 + 336000;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 1;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_BYTE *)(a1 + 456) = 1;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 744) = 0x4024000000000000;
  *(_BYTE *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 760) = 0x412E848000000000;
  *(_BYTE *)(a1 + 768) = a2;
  v29 = (char *)operator new(0x17700uLL);
  *(_QWORD *)(a1 + 400) = v29;
  *(_QWORD *)(a1 + 408) = v29;
  *(_QWORD *)(a1 + 416) = v29 + 96000;
  v30 = (char *)operator new(0x17700uLL);
  *(_QWORD *)(a1 + 424) = v30;
  *(_QWORD *)(a1 + 432) = v30;
  *(_QWORD *)(a1 + 440) = v30 + 96000;
  v31 = (char *)operator new(0x17700uLL);
  *(_QWORD *)(a1 + 472) = v31;
  *(_QWORD *)(a1 + 480) = v31;
  *(_QWORD *)(a1 + 488) = v31 + 96000;
  v32 = (char *)operator new(0x17700uLL);
  *(_QWORD *)(a1 + 496) = v32;
  *(_QWORD *)(a1 + 504) = v32;
  *(_QWORD *)(a1 + 512) = v32 + 96000;
  v33 = (char *)operator new(0x29040uLL);
  *(_QWORD *)(a1 + 624) = v33;
  *(_QWORD *)(a1 + 632) = v33;
  *(_QWORD *)(a1 + 640) = v33 + 168000;
  v34 = (char *)operator new(0x17700uLL);
  *(_QWORD *)(a1 + 648) = v34;
  *(_QWORD *)(a1 + 656) = v34;
  *(_QWORD *)(a1 + 664) = v34 + 96000;
  v35 = (char *)operator new(0x17700uLL);
  *(_QWORD *)(a1 + 672) = v35;
  *(_QWORD *)(a1 + 680) = v35;
  *(_QWORD *)(a1 + 688) = v35 + 96000;
  v36 = (char *)operator new(0x5DC0uLL);
  *(_QWORD *)(a1 + 696) = v36;
  *(_QWORD *)(a1 + 704) = v36;
  *(_QWORD *)(a1 + 712) = v36 + 24000;
  v37 = (char *)operator new(0x5DC0uLL);
  *(_QWORD *)(a1 + 720) = v37;
  *(_QWORD *)(a1 + 728) = v37;
  *(_QWORD *)(a1 + 736) = v37 + 24000;
  v38 = (char *)operator new(0x2D0uLL);
  *(_QWORD *)(a1 + 520) = v38;
  *(_QWORD *)(a1 + 528) = v38;
  *(_QWORD *)(a1 + 536) = v38 + 720;
  v39 = (char *)operator new(0x2D0uLL);
  *(_QWORD *)(a1 + 544) = v39;
  *(_QWORD *)(a1 + 552) = v39;
  *(_QWORD *)(a1 + 560) = v39 + 720;
  v40 = (char *)operator new(0x17700uLL);
  *(_QWORD *)(a1 + 568) = v40;
  *(_QWORD *)(a1 + 576) = v40;
  *(_QWORD *)(a1 + 584) = v40 + 96000;
  v41 = (char *)operator new(0x17700uLL);
  *(_QWORD *)(a1 + 592) = v41;
  *(_QWORD *)(a1 + 600) = v41;
  *(_QWORD *)(a1 + 608) = v41 + 96000;
  return a1;
}

void sub_20F1BBA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  void *v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  v10[41] = v11;
  operator delete(v11);
  v14 = (void *)v10[37];
  if (v14)
  {
    v10[38] = v14;
    operator delete(v14);
    v15 = (void *)v10[31];
    if (!v15)
    {
LABEL_3:
      v16 = (void *)v10[25];
      if (!v16)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v15 = (void *)v10[31];
    if (!v15)
      goto LABEL_3;
  }
  v10[32] = v15;
  operator delete(v15);
  v16 = (void *)v10[25];
  if (!v16)
  {
LABEL_4:
    v17 = (void *)v10[19];
    if (!v17)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v10[26] = v16;
  operator delete(v16);
  v17 = (void *)v10[19];
  if (!v17)
  {
LABEL_5:
    v18 = (void *)v10[13];
    if (!v18)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v10[20] = v17;
  operator delete(v17);
  v18 = (void *)v10[13];
  if (!v18)
  {
LABEL_6:
    v19 = (void *)v10[7];
    if (!v19)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  v10[14] = v18;
  operator delete(v18);
  v19 = (void *)v10[7];
  if (!v19)
  {
LABEL_7:
    v20 = *v12;
    if (!*v12)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  v10[8] = v19;
  operator delete(v19);
  v20 = *v12;
  if (!*v12)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_15:
  v10[2] = v20;
  operator delete(v20);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F1BBC68(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[3];
  if (v5)
  {
    a1[4] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_20F1BBCC8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  *a1 = &off_24C9FA7B0;
  v2 = (void *)a1[90];
  if (v2)
  {
    a1[91] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[87];
  if (v3)
  {
    a1[88] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[84];
  if (v4)
  {
    a1[85] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[81];
  if (v5)
  {
    a1[82] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[78];
  if (v6)
  {
    a1[79] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[74];
  if (v7)
  {
    a1[75] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[71];
  if (v8)
  {
    a1[72] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[68];
  if (v9)
  {
    a1[69] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[65];
  if (v10)
  {
    a1[66] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[62];
  if (v11)
  {
    a1[63] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[59];
  if (v12)
  {
    a1[60] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[53];
  if (v13)
  {
    a1[54] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[50];
  if (v14)
  {
    a1[51] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[43];
  if (v15)
  {
    a1[44] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[40];
  if (v16)
  {
    a1[41] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[37];
  if (v17)
  {
    a1[38] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[31];
  if (v18)
  {
    a1[32] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[25];
  if (v19)
  {
    a1[26] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[19];
  if (v20)
  {
    a1[20] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[13];
  if (v21)
  {
    a1[14] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[7];
  if (v22)
  {
    a1[8] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[1];
  if (v23)
  {
    a1[2] = v23;
    operator delete(v23);
  }
  return a1;
}

void sub_20F1BBE58(_QWORD *a1)
{
  sub_20F1BBCC8(a1);
  JUMPOUT(0x212BC6398);
}

BOOL sub_20F1BBE7C(_BOOL8 result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 240))
    goto LABEL_7;
  v4 = *(_QWORD *)(result + 232);
  if (v4)
  {
    if (*(double *)(*(_QWORD *)(result + 200) + 32 * v4 - 32) < *(double *)a2)
      goto LABEL_7;
  }
  else if (*(double *)(*(_QWORD *)(result + 200)
                      + 32 * ((uint64_t)(*(_QWORD *)(result + 208) - *(_QWORD *)(result + 200)) >> 5)
                      - 32) < *(double *)a2)
  {
    goto LABEL_7;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 70, (uint64_t)"(gyro_meas_.empty() || gyro_meas_.back().timestamp < gyro_meas.timestamp)", 73, (uint64_t)"Gyro measurement timestamps must be strictly increasing.", 56, (void (*)(void **))sub_21023DDB0);
  if (result)
    abort();
LABEL_7:
  v5 = v3[25] + 32 * v3[29];
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_OWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v6;
  v8 = (uint64_t)(v3[26] - v3[25]) >> 5;
  v9 = v3[30];
  v10 = v3[29] + 1;
  if (v10 >= v8)
    v11 = (uint64_t)(v3[26] - v3[25]) >> 5;
  else
    v11 = 0;
  v3[29] = v10 - v11;
  if (v9 == v8)
  {
    v12 = v3[28] + 1;
    if (v12 < v8)
      v8 = 0;
    v3[28] = v12 - v8;
  }
  else
  {
    v3[30] = v9 + 1;
  }
  return result;
}

BOOL sub_20F1BBFA8(_BOOL8 result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 288))
    goto LABEL_7;
  v4 = *(_QWORD *)(result + 280);
  if (v4)
  {
    if (*(double *)(*(_QWORD *)(result + 248) + 32 * v4 - 32) < *(double *)a2)
      goto LABEL_7;
  }
  else if (*(double *)(*(_QWORD *)(result + 248)
                      + 32 * ((uint64_t)(*(_QWORD *)(result + 256) - *(_QWORD *)(result + 248)) >> 5)
                      - 32) < *(double *)a2)
  {
    goto LABEL_7;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 77, (uint64_t)"(accelerometer_meas_.empty() || accelerometer_meas_.back().timestamp < accel_meas.timestamp)", 92, (uint64_t)"Accel measurement timestamps must be strictly increasing.", 57, (void (*)(void **))sub_21023DDB0);
  if (result)
    abort();
LABEL_7:
  v5 = v3[31] + 32 * v3[35];
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_OWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v6;
  v8 = (uint64_t)(v3[32] - v3[31]) >> 5;
  v9 = v3[36];
  v10 = v3[35] + 1;
  if (v10 >= v8)
    v11 = (uint64_t)(v3[32] - v3[31]) >> 5;
  else
    v11 = 0;
  v3[35] = v10 - v11;
  if (v9 == v8)
  {
    v12 = v3[34] + 1;
    if (v12 < v8)
      v8 = 0;
    v3[34] = v12 - v8;
  }
  else
  {
    v3[36] = v9 + 1;
  }
  return result;
}

BOOL sub_20F1BC0D4(_BOOL8 result, __int128 *a2, double a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v5 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 48))
    goto LABEL_7;
  v6 = *(_QWORD *)(result + 40);
  if (v6)
  {
    if (*(double *)(*(_QWORD *)(result + 8) + 176 * v6 - 176) < a3)
      goto LABEL_7;
  }
  else if (*(double *)(*(_QWORD *)(result + 8)
                      + 16 * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 4)
                      - 176) < a3)
  {
    goto LABEL_7;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 83, (uint64_t)"(states_.empty() || states_.back().timestamp < timestamp)", 57, (uint64_t)"Base state timestamps must be strictly increasing.", 50, (void (*)(void **))sub_21023DDB0);
  if (result)
    abort();
LABEL_7:
  v37 = a2[9];
  v7 = *((_QWORD *)a2 + 20);
  v29 = a2[4];
  v31 = a2[5];
  v33 = a2[6];
  v21 = *a2;
  v23 = a2[1];
  v25 = a2[2];
  v27 = a2[3];
  v8 = v5[1] + 176 * v5[5];
  v9 = a2[8];
  *(_OWORD *)(v8 + 120) = a2[7];
  *(_OWORD *)(v8 + 136) = v9;
  *(_OWORD *)(v8 + 152) = v37;
  *(_OWORD *)(v8 + 56) = v27;
  *(_OWORD *)(v8 + 72) = v29;
  *(_OWORD *)(v8 + 88) = v31;
  *(_OWORD *)(v8 + 104) = v33;
  *(_OWORD *)(v8 + 8) = v21;
  *(double *)v8 = a3;
  *(_QWORD *)(v8 + 168) = v7;
  *(_OWORD *)(v8 + 24) = v23;
  *(_OWORD *)(v8 + 40) = v25;
  v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5[2] - v5[1]) >> 4);
  v11 = v5[6];
  v12 = v5[5] + 1;
  if (v12 >= v10)
    v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5[2] - v5[1]) >> 4);
  else
    v13 = 0;
  v5[5] = v12 - v13;
  if (v11 == v10)
  {
    v14 = v5[4] + 1;
    if (v14 < v10)
      v10 = 0;
    v5[4] = v14 - v10;
  }
  else
  {
    v5[6] = v11 + 1;
  }
  v36 = a2[8];
  v38 = a2[9];
  v39 = *((_QWORD *)a2 + 20);
  v30 = a2[4];
  v32 = a2[5];
  v34 = a2[6];
  v35 = a2[7];
  v22 = *a2;
  v24 = a2[1];
  v26 = a2[2];
  v28 = a2[3];
  v15 = v5[7] + 176 * v5[11];
  *(double *)v15 = a3;
  *(_OWORD *)(v15 + 120) = v35;
  *(_OWORD *)(v15 + 136) = v36;
  *(_OWORD *)(v15 + 152) = v38;
  *(_QWORD *)(v15 + 168) = v39;
  *(_OWORD *)(v15 + 56) = v28;
  *(_OWORD *)(v15 + 72) = v30;
  *(_OWORD *)(v15 + 88) = v32;
  *(_OWORD *)(v15 + 104) = v34;
  *(_OWORD *)(v15 + 8) = v22;
  *(_OWORD *)(v15 + 24) = v24;
  *(_OWORD *)(v15 + 40) = v26;
  v16 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5[8] - v5[7]) >> 4);
  v17 = v5[12];
  v18 = v5[11] + 1;
  if (v18 >= v16)
    v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5[8] - v5[7]) >> 4);
  else
    v19 = 0;
  v5[11] = v18 - v19;
  if (v17 == v16)
  {
    v20 = v5[10] + 1;
    if (v20 < v16)
      v16 = 0;
    v5[10] = v20 - v16;
  }
  else
  {
    v5[12] = v17 + 1;
  }
  return result;
}

BOOL sub_20F1BC3A8(_BOOL8 result, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, double a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v11 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 144))
    goto LABEL_7;
  v12 = *(_QWORD *)(result + 136);
  if (v12)
  {
    if (*(double *)(*(_QWORD *)(result + 104) + 592 * v12 - 592) < a6)
      goto LABEL_7;
  }
  else if (*(double *)(*(_QWORD *)(result + 104)
                      + 16 * ((uint64_t)(*(_QWORD *)(result + 112) - *(_QWORD *)(result + 104)) >> 4)
                      - 592) < a6)
  {
    goto LABEL_7;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 94, (uint64_t)"(prop_states_.empty() || prop_states_.back().timestamp < timestamp)", 67, (uint64_t)"Previously Propagated state timestamps must be strictly increasing.", 67, (void (*)(void **))sub_21023DDB0);
  if (result)
    abort();
LABEL_7:
  v71 = a2[8];
  v73 = a2[9];
  v13 = *((_QWORD *)a2 + 20);
  v65 = a2[4];
  v67 = a2[5];
  v57 = *a2;
  v59 = a2[1];
  v61 = a2[2];
  v63 = a2[3];
  v55 = a3[8];
  v56 = a3[9];
  v14 = v11[13] + 592 * v11[17];
  v15 = *((_QWORD *)a3 + 20);
  v51 = a3[4];
  v52 = a3[5];
  v53 = a3[6];
  v54 = a3[7];
  v47 = *a3;
  v48 = a3[1];
  v49 = a3[2];
  v50 = a3[3];
  v45 = a4[8];
  v46 = a4[9];
  v16 = *((_QWORD *)a4 + 20);
  v41 = a4[4];
  v42 = a4[5];
  v43 = a4[6];
  v44 = a4[7];
  v37 = *a4;
  v38 = a4[1];
  v39 = a4[2];
  v40 = a4[3];
  v35 = *a5;
  v36 = a5[1];
  v34 = a5[2];
  v17 = *((_QWORD *)a5 + 6);
  v33 = *(__int128 *)((char *)a5 + 56);
  v18 = *((_QWORD *)a5 + 9);
  v19 = a2[6];
  *(_OWORD *)(v14 + 120) = a2[7];
  *(_OWORD *)(v14 + 136) = v71;
  *(_OWORD *)(v14 + 152) = v73;
  *(_OWORD *)(v14 + 56) = v63;
  *(_OWORD *)(v14 + 72) = v65;
  *(_OWORD *)(v14 + 88) = v67;
  *(_OWORD *)(v14 + 104) = v19;
  *(_OWORD *)(v14 + 8) = v57;
  *(double *)v14 = a6;
  *(_QWORD *)(v14 + 168) = v13;
  *(_OWORD *)(v14 + 24) = v59;
  *(_OWORD *)(v14 + 40) = v61;
  *(_OWORD *)(v14 + 304) = v55;
  *(_OWORD *)(v14 + 320) = v56;
  *(_QWORD *)(v14 + 336) = v15;
  *(_OWORD *)(v14 + 240) = v51;
  *(_OWORD *)(v14 + 256) = v52;
  *(_OWORD *)(v14 + 272) = v53;
  *(_OWORD *)(v14 + 288) = v54;
  *(_OWORD *)(v14 + 176) = v47;
  *(_OWORD *)(v14 + 192) = v48;
  *(_OWORD *)(v14 + 208) = v49;
  *(_OWORD *)(v14 + 224) = v50;
  *(_OWORD *)(v14 + 472) = v45;
  *(_OWORD *)(v14 + 488) = v46;
  *(_QWORD *)(v14 + 504) = v16;
  *(_OWORD *)(v14 + 408) = v41;
  *(_OWORD *)(v14 + 424) = v42;
  *(_OWORD *)(v14 + 440) = v43;
  *(_OWORD *)(v14 + 456) = v44;
  *(_OWORD *)(v14 + 344) = v37;
  *(_OWORD *)(v14 + 360) = v38;
  *(_OWORD *)(v14 + 376) = v39;
  *(_OWORD *)(v14 + 392) = v40;
  *(_OWORD *)(v14 + 512) = v35;
  *(_OWORD *)(v14 + 528) = v36;
  *(_OWORD *)(v14 + 544) = v34;
  *(_QWORD *)(v14 + 560) = v17;
  *(_OWORD *)(v14 + 568) = v33;
  *(_QWORD *)(v14 + 584) = v18;
  v20 = 0x14C1BACF914C1BADLL * ((uint64_t)(v11[14] - v11[13]) >> 4);
  v21 = v11[18];
  v22 = v11[17] + 1;
  if (v22 >= v20)
    v23 = 0x14C1BACF914C1BADLL * ((uint64_t)(v11[14] - v11[13]) >> 4);
  else
    v23 = 0;
  v11[17] = v22 - v23;
  if (v21 != v20)
  {
    v11[18] = v21 + 1;
    v25 = v11[23];
    if (v11[24])
      goto LABEL_14;
LABEL_18:
    v26 = v11[19];
    goto LABEL_20;
  }
  v24 = v11[16] + 1;
  if (v24 < v20)
    v20 = 0;
  v11[16] = v24 - v20;
  v25 = v11[23];
  if (!v11[24])
    goto LABEL_18;
LABEL_14:
  if (v25)
  {
    v26 = v11[19];
    if (*(double *)(v26 + 176 * v25 - 176) >= a6)
      return result;
  }
  else
  {
    v26 = v11[19];
    if (*(double *)(v26 + 16 * ((v11[20] - v26) >> 4) - 176) >= a6)
      return result;
  }
LABEL_20:
  v72 = a3[8];
  v74 = a3[9];
  v75 = *((_QWORD *)a3 + 20);
  v66 = a3[4];
  v68 = a3[5];
  v69 = a3[6];
  v70 = a3[7];
  v58 = *a3;
  v60 = a3[1];
  v62 = a3[2];
  v64 = a3[3];
  v27 = v26 + 176 * v25;
  *(double *)v27 = a6;
  *(_OWORD *)(v27 + 40) = v62;
  *(_OWORD *)(v27 + 24) = v60;
  *(_OWORD *)(v27 + 8) = v58;
  *(_OWORD *)(v27 + 104) = v69;
  *(_OWORD *)(v27 + 88) = v68;
  *(_OWORD *)(v27 + 72) = v66;
  *(_OWORD *)(v27 + 56) = v64;
  *(_QWORD *)(v27 + 168) = v75;
  *(_OWORD *)(v27 + 152) = v74;
  *(_OWORD *)(v27 + 136) = v72;
  *(_OWORD *)(v27 + 120) = v70;
  v28 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11[20] - v11[19]) >> 4);
  v29 = v11[24];
  v30 = v11[23] + 1;
  if (v30 >= v28)
    v31 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11[20] - v11[19]) >> 4);
  else
    v31 = 0;
  v11[23] = v30 - v31;
  if (v29 == v28)
  {
    v32 = v11[22] + 1;
    if (v32 < v28)
      v28 = 0;
    v11[22] = v32 - v28;
  }
  else
  {
    v11[24] = v29 + 1;
  }
  return result;
}

BOOL sub_20F1BC818(_BOOL8 result, __int128 *a2, __int128 *a3, double a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v7 = (_QWORD *)result;
  if (!*(_QWORD *)(result + 48))
    goto LABEL_7;
  v8 = *(_QWORD *)(result + 40);
  if (v8)
  {
    if (*(double *)(*(_QWORD *)(result + 8) + 176 * v8 - 176) < a4)
      goto LABEL_7;
  }
  else if (*(double *)(*(_QWORD *)(result + 8)
                      + 16 * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)(result + 8)) >> 4)
                      - 176) < a4)
  {
    goto LABEL_7;
  }
  result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 109, (uint64_t)"(states_.empty() || states_.back().timestamp < timestamp)", 57, (uint64_t)"Base state timestamps must be strictly increasing.", 50, (void (*)(void **))sub_21023DDB0);
  if (result)
    abort();
LABEL_7:
  v39 = a2[9];
  v9 = *((_QWORD *)a2 + 20);
  v31 = a2[4];
  v33 = a2[5];
  v35 = a2[6];
  v23 = *a2;
  v25 = a2[1];
  v27 = a2[2];
  v29 = a2[3];
  v10 = v7[1] + 176 * v7[5];
  v11 = a2[8];
  *(_OWORD *)(v10 + 120) = a2[7];
  *(_OWORD *)(v10 + 136) = v11;
  *(_OWORD *)(v10 + 152) = v39;
  *(_OWORD *)(v10 + 56) = v29;
  *(_OWORD *)(v10 + 72) = v31;
  *(_OWORD *)(v10 + 88) = v33;
  *(_OWORD *)(v10 + 104) = v35;
  *(_OWORD *)(v10 + 8) = v23;
  *(double *)v10 = a4;
  *(_QWORD *)(v10 + 168) = v9;
  *(_OWORD *)(v10 + 24) = v25;
  *(_OWORD *)(v10 + 40) = v27;
  v12 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7[2] - v7[1]) >> 4);
  v13 = v7[6];
  v14 = v7[5] + 1;
  if (v14 >= v12)
    v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7[2] - v7[1]) >> 4);
  else
    v15 = 0;
  v7[5] = v14 - v15;
  if (v13 == v12)
  {
    v16 = v7[4] + 1;
    if (v16 < v12)
      v12 = 0;
    v7[4] = v16 - v12;
  }
  else
  {
    v7[6] = v13 + 1;
  }
  v38 = a3[8];
  v40 = a3[9];
  v41 = *((_QWORD *)a3 + 20);
  v32 = a3[4];
  v34 = a3[5];
  v36 = a3[6];
  v37 = a3[7];
  v24 = *a3;
  v26 = a3[1];
  v28 = a3[2];
  v30 = a3[3];
  v17 = v7[7] + 176 * v7[11];
  *(double *)v17 = a4;
  *(_OWORD *)(v17 + 120) = v37;
  *(_OWORD *)(v17 + 136) = v38;
  *(_OWORD *)(v17 + 152) = v40;
  *(_QWORD *)(v17 + 168) = v41;
  *(_OWORD *)(v17 + 56) = v30;
  *(_OWORD *)(v17 + 72) = v32;
  *(_OWORD *)(v17 + 88) = v34;
  *(_OWORD *)(v17 + 104) = v36;
  *(_OWORD *)(v17 + 8) = v24;
  *(_OWORD *)(v17 + 24) = v26;
  *(_OWORD *)(v17 + 40) = v28;
  v18 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7[8] - v7[7]) >> 4);
  v19 = v7[12];
  v20 = v7[11] + 1;
  if (v20 >= v18)
    v21 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7[8] - v7[7]) >> 4);
  else
    v21 = 0;
  v7[11] = v20 - v21;
  if (v19 == v18)
  {
    v22 = v7[10] + 1;
    if (v22 < v18)
      v18 = 0;
    v7[10] = v22 - v18;
  }
  else
  {
    v7[12] = v19 + 1;
  }
  return result;
}

uint64_t sub_20F1BCAF8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, int a7, double a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  uint64_t v49;
  unint64_t v50;
  _BOOL4 v51;
  unint64_t v52;
  double v53;
  _BOOL4 v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char **v71;
  _BOOL4 v72;
  unint64_t v73;
  unint64_t v74;
  _BOOL4 v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  double v83;
  double v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  float64x2_t v94;
  double v95;
  float64x2_t v96;
  double v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  int v115;
  char v116;
  double *v117;
  double *v118;
  int v119;
  int v120;
  unint64_t v121;
  _QWORD *v122;
  size_t v123;
  __int128 *p_dst;
  unint64_t v125;
  int v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  const void **v136;
  double *v137;
  double *v138;
  double *v139;
  double *v140;
  double *v141;
  BOOL v142;
  unint64_t v143;
  double *v144;
  unint64_t v145;
  double *v146;
  double *v147;
  double v148;
  unint64_t v149;
  double *v150;
  unint64_t v151;
  double *v152;
  double *v153;
  double v154;
  float64x2_t v155;
  double *v157;
  double *v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  const void *v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  size_t v172;
  const char *v173;
  unsigned __int8 v174;
  const char *v175;
  size_t v176;
  _BYTE *v177;
  uint64_t v178;
  unint64_t v179;
  const char *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  size_t v189;
  void *v190;
  _QWORD *v191;
  size_t v192;
  size_t v193;
  _BYTE *v194;
  void *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  _QWORD *v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *p_shared_owners;
  unint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  const char *v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  uint64_t v245;
  char *v246;
  unint64_t v247;
  double *v248;
  char *v249;
  char *v250;
  int64_t v251;
  uint64_t v252;
  double *v253;
  unint64_t v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  unint64_t v261;
  double *v262;
  char *v263;
  char *v264;
  int64_t v265;
  uint64_t v266;
  float64_t *v267;
  float64_t *v268;
  double *v269;
  double *v270;
  unint64_t v271;
  double *v272;
  unint64_t v273;
  double *v274;
  double *v275;
  double v276;
  double *v278;
  double *v279;
  uint64_t v280;
  int8x16_t v281;
  unint64_t v282;
  double *v283;
  unint64_t v284;
  double *v285;
  double *v286;
  double v287;
  float64x2_t v289;
  unint64_t v290;
  uint64_t v291;
  int64_t v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  char **v313;
  const char *v315;
  uint64_t v316;
  __int128 v317;
  __int128 v318;
  std::__shared_weak_count *v319;
  __int128 __dst;
  int64_t v321;
  _BYTE v322[24];
  _BYTE v323[64];
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  _QWORD v331[2];
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  _BYTE object[48];
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  uint64_t v351;
  uint64_t v352;

  v352 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 1;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 456) = 1;
  *(_QWORD *)(a1 + 464) = 0;
  v15 = a1 + 400;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 400);
  v16 = a1 + 424;
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
  v17 = a1 + 8;
  v18 = *(_QWORD *)(a1 + 48);
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD *)(a1 + 8);
    v23 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 16) - v22) >> 4);
    v24 = *(_QWORD *)(a1 + 48);
    do
    {
      v25 = v24 >> 1;
      v26 = (v24 >> 1) + v20;
      if (*(double *)(v22 + 176 * ((v26 + v21) % v23)) <= a8)
      {
        v20 = v26 + 1;
        v19 = v26 + 1 == v18;
        v25 = v24 + ~v25;
      }
      v24 = v25;
    }
    while (v25);
    if (v19 || v20)
    {
      *(_QWORD *)(a1 + 376) = v17;
      *(_QWORD *)(a1 + 392) = v20 - 1;
      *(_BYTE *)(a1 + 384) = v20 - 1 == v18;
      if (v20 - 1 == v18)
        goto LABEL_101;
      v27 = *(double *)(v22 + 176 * ((v20 - 1 + v21) % v23));
      if (v20 == v18 || v27 + 1.5 >= a8)
      {
        v28 = *(_QWORD *)(a1 + 240);
        if (v28)
        {
          v29 = 0;
          v30 = 0;
          v31 = *(_QWORD *)(a1 + 240);
          do
          {
            v32 = v31 >> 1;
            v33 = (v31 >> 1) + v30;
            if (*(double *)(*(_QWORD *)(a1 + 200)
                           + 32
                           * ((v33 + *(_QWORD *)(a1 + 224))
                            % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 5))) <= v27)
            {
              v30 = v33 + 1;
              v29 = v33 + 1 == v28;
              v32 = v31 + ~v32;
            }
            v31 = v32;
          }
          while (v32);
          if (v29 || v30)
          {
            v45 = v30 - 1;
            v46 = v30 == 1;
            v34 = v30 - 1 == v28;
            if (v30 - 1 == v28)
              v46 = 1;
            v35 = v30 - 2;
            if (v46)
              v35 = v45;
            v36 = a1 + 200;
            v37 = *(_QWORD *)(a1 + 288);
            if (!v37)
            {
LABEL_36:
              v44 = 0;
              v43 = 1;
              v313 = (char **)v16;
              if (v20 == v18)
                goto LABEL_37;
              goto LABEL_44;
            }
          }
          else
          {
            v34 = 1;
            v35 = *(_QWORD *)(a1 + 240);
            v36 = a1 + 200;
            v37 = *(_QWORD *)(a1 + 288);
            if (!v37)
              goto LABEL_36;
          }
        }
        else
        {
          v35 = 0;
          v34 = 1;
          v36 = a1 + 200;
          v37 = *(_QWORD *)(a1 + 288);
          if (!v37)
            goto LABEL_36;
        }
        v38 = 0;
        v39 = 0;
        v40 = v37;
        do
        {
          v41 = v40 >> 1;
          v42 = (v40 >> 1) + v39;
          if (*(double *)(*(_QWORD *)(a1 + 248)
                         + 32
                         * ((v42 + *(_QWORD *)(a1 + 272))
                          % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 5))) <= v27)
          {
            v39 = v42 + 1;
            v38 = v42 + 1 == v37;
            v41 = v40 + ~v41;
          }
          v40 = v41;
        }
        while (v41);
        if (v38 || v39)
        {
          v50 = v39 - 1;
          v51 = v39 == 1;
          v43 = v39 - 1 == v37;
          if (v39 - 1 == v37)
            v51 = 1;
          v52 = v39 - 2;
          if (v51)
            v44 = v50;
          else
            v44 = v52;
          v313 = (char **)v16;
          if (v20 == v18)
            goto LABEL_37;
        }
        else
        {
          v43 = 1;
          v44 = v37;
          v313 = (char **)v16;
          if (v20 == v18)
          {
LABEL_37:
            v47 = 1;
            v48 = 1;
            v49 = *(_QWORD *)(a1 + 240);
            goto LABEL_74;
          }
        }
LABEL_44:
        v53 = *(double *)(v22 + 176 * ((v20 + v21) % v23));
        v54 = 1;
        v55 = *(_QWORD *)(a1 + 240);
        if (!v34)
        {
          v56 = v28 - v35;
          if (v28 != v35)
          {
            v57 = 0;
            v58 = v35;
            do
            {
              v59 = v56 >> 1;
              v60 = (v56 >> 1) + v58;
              if (*(double *)(*(_QWORD *)(a1 + 200)
                             + 32
                             * ((v60 + *(_QWORD *)(a1 + 224))
                              % (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 5))) <= v53)
              {
                v58 = v60 + 1;
                v57 = v60 + 1 == v28;
                v59 = v56 + ~v59;
              }
              v56 = v59;
            }
            while (v59);
            if (v57 || v58 != v35)
            {
              v55 = v58 - 1;
              v54 = v58 - 1 == v28;
            }
            else
            {
              v54 = 1;
              v55 = *(_QWORD *)(a1 + 240);
            }
          }
        }
        v61 = 0;
        v62 = v28 - v55;
        if (v28 - v55 >= 2)
          v62 = 2;
        if (v54)
          v63 = 0;
        else
          v63 = v62;
        v49 = v63 + v55;
        v48 = v49 == v28;
        if (!v43)
        {
          v64 = v37 - v44;
          if (v37 != v44)
          {
            v65 = 0;
            v66 = v44;
            do
            {
              v67 = v64 >> 1;
              v68 = (v64 >> 1) + v66;
              if (*(double *)(*(_QWORD *)(a1 + 248)
                             + 32
                             * ((v68 + *(_QWORD *)(a1 + 272))
                              % ((uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 5))) <= v53)
              {
                v66 = v68 + 1;
                v65 = v68 + 1 == v37;
                v67 = v64 + ~v67;
              }
              v64 = v67;
            }
            while (v67);
            if (v65 || v66 != v44)
            {
              v69 = v66 - 1;
              v61 = v37 - (v66 - 1);
              if (v61 >= 2)
                v61 = 2;
              if (v37 == v66 - 1)
                v61 = 0;
              goto LABEL_73;
            }
            v61 = 0;
          }
        }
        v69 = v37;
LABEL_73:
        v70 = v61 + v69;
        v47 = v70 == v37;
        v37 = v70;
LABEL_74:
        v71 = (char **)v15;
        v311 = a5;
        *(_QWORD *)v323 = v36;
        v323[8] = v34;
        *(_QWORD *)&v323[16] = v35;
        *(_QWORD *)object = v36;
        object[8] = v48;
        *(_QWORD *)&object[16] = v49;
        v72 = v43;
        v73 = v44;
        if (v48)
        {
          if (!v34)
          {
            if (!v35)
            {
              v28 = -v28;
              goto LABEL_86;
            }
            goto LABEL_85;
          }
        }
        else if (v49 || v34 || v35)
        {
          if (v49)
            LOBYTE(v34) = 0;
          if (v34)
          {
LABEL_86:
            sub_20F1AC03C(v71, (uint64_t)v323, (uint64_t)object, -v28);
            *(_QWORD *)v323 = a1 + 248;
            v323[8] = v72;
            *(_QWORD *)&v323[16] = v73;
            *(_QWORD *)object = a1 + 248;
            object[8] = v47;
            *(_QWORD *)&object[16] = v37;
            if (v47)
            {
              if (!v72)
              {
                if (!v73)
                {
                  v74 = -*(_QWORD *)(a1 + 288);
LABEL_100:
                  sub_20F1AC03C(v313, (uint64_t)v323, (uint64_t)object, -(uint64_t)v74);
                  v15 = (uint64_t)v71;
                  a5 = v311;
                  v16 = (uint64_t)v313;
                  goto LABEL_101;
                }
LABEL_99:
                v74 = v73 - v37;
                goto LABEL_100;
              }
            }
            else if (v37 || v72 || v73)
            {
              if (v37)
                v75 = 0;
              else
                v75 = v72;
              if (v75)
              {
                v74 = *(_QWORD *)(a1 + 288);
                goto LABEL_100;
              }
              goto LABEL_99;
            }
            v74 = 0;
            goto LABEL_100;
          }
LABEL_85:
          v28 = v35 - v49;
          goto LABEL_86;
        }
        v28 = 0;
        goto LABEL_86;
      }
    }
    *(_QWORD *)(a1 + 376) = v17;
    *(_BYTE *)(a1 + 384) = 1;
    *(_QWORD *)(a1 + 392) = v18;
  }
  else
  {
    *(_QWORD *)(a1 + 376) = v17;
    *(_BYTE *)(a1 + 384) = 1;
    *(_QWORD *)(a1 + 392) = 0;
  }
LABEL_101:
  result = sub_20F1BEA40(a1, (_QWORD *)(a1 + 376), a6, a8);
  *(_QWORD *)a2 = 0;
  if (*(_BYTE *)(a2 + 176))
    *(_BYTE *)(a2 + 176) = 0;
  v78 = a2 + 192;
  v77 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 200) = v77;
  if (*(_BYTE *)(a2 + 224))
    *(_BYTE *)(a2 + 224) = 0;
  if (*(_BYTE *)(a2 + 824))
    *(_BYTE *)(a2 + 824) = 0;
  if (*(_BYTE *)(a2 + 840))
    *(_BYTE *)(a2 + 840) = 0;
  if (*(_BYTE *)(a2 + 856))
    *(_BYTE *)(a2 + 856) = 0;
  if ((_DWORD)result)
    return result;
  v79 = *(uint64_t **)(a1 + 376);
  v80 = v79[3] + *(_QWORD *)(a1 + 392);
  v81 = *v79;
  v82 = v80 % (0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(*(_QWORD *)(a1 + 376) + 8) - v81) >> 4));
  v83 = *(double *)(v81 + 176 * v82);
  *(double *)a2 = v83;
  v84 = *(double *)(*(_QWORD *)(a1 + 432) - 32);
  if (v84 >= *(double *)(*(_QWORD *)(a1 + 408) - 32))
    v84 = *(double *)(*(_QWORD *)(a1 + 408) - 32);
  *(double *)(a2 + 184) = v84;
  if (vabdd_f64(a8, v83) < 0.0001)
  {
    result = 0;
    v85 = v81 + 176 * v82;
    v86 = *(_OWORD *)(v85 + 8);
    v87 = *(_OWORD *)(v85 + 24);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(v85 + 40);
    *(_OWORD *)(a2 + 24) = v87;
    *(_OWORD *)(a2 + 8) = v86;
    v88 = *(_OWORD *)(v85 + 56);
    v89 = *(_OWORD *)(v85 + 72);
    v90 = *(_OWORD *)(v85 + 88);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(v85 + 104);
    *(_OWORD *)(a2 + 88) = v90;
    *(_OWORD *)(a2 + 72) = v89;
    *(_OWORD *)(a2 + 56) = v88;
    v91 = *(_OWORD *)(v85 + 120);
    v92 = *(_OWORD *)(v85 + 136);
    v93 = *(_OWORD *)(v85 + 152);
    *(_QWORD *)(a2 + 168) = *(_QWORD *)(v85 + 168);
    *(_OWORD *)(a2 + 152) = v93;
    *(_OWORD *)(a2 + 136) = v92;
    *(_OWORD *)(a2 + 120) = v91;
LABEL_116:
    *(_BYTE *)(a2 + 176) = 1;
    return result;
  }
  sub_20F1C0CB0((_QWORD *)a1, a8, v83);
  if (*(_QWORD *)(a1 + 696) == *(_QWORD *)(a1 + 704)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 156, (uint64_t)"!interp_timestamps_.empty()", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a4)
  {
    v102 = sub_20F1C10C0((unint64_t *)(a1 + 696), *(unsigned __int8 *)(a1 + 768), a8, *(double *)a2, *(double *)&a3);
    *(_QWORD *)(a2 + 216) = v102;
    *(_BYTE *)(a2 + 224) = 1;
    *(_QWORD *)(a2 + 848) = *(_QWORD *)(*(_QWORD *)(a1 + 696) + 8 * v102);
    *(_BYTE *)(a2 + 856) = 1;
  }
  if (*(double *)(*(_QWORD *)(a1 + 432) - 32) < a8
    || (v94.f64[0] = *(float64_t *)(*(_QWORD *)(a1 + 408) - 32), v94.f64[0] < a8))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a1 + 48))(a1, v15, v16, a5, a8);
  }
  if (!a7)
    goto LABEL_141;
  v103 = (uint64_t *)(a1 + 104);
  v104 = *(_QWORD *)(a1 + 144);
  if (!v104)
  {
    *(_QWORD *)(a1 + 448) = v103;
    *(_BYTE *)(a1 + 456) = 1;
    *(_QWORD *)(a1 + 464) = 0;
    goto LABEL_141;
  }
  v105 = 0;
  v106 = 0;
  v312 = (_QWORD *)(a1 + 472);
  v107 = *(_QWORD *)(a1 + 128);
  v108 = *(_QWORD *)(a1 + 104);
  v109 = 0x14C1BACF914C1BADLL * ((*(_QWORD *)(a1 + 112) - v108) >> 4);
  v110 = *(_QWORD *)(a1 + 144);
  do
  {
    v111 = v110 >> 1;
    v112 = (v110 >> 1) + v106;
    v94.f64[0] = *(float64_t *)(v108 + 592 * ((v112 + v107) % v109));
    if (v94.f64[0] <= a8)
    {
      v106 = v112 + 1;
      v105 = v112 + 1 == v104;
      v111 = v110 + ~v111;
    }
    v110 = v111;
  }
  while (v111);
  v113 = v106 == 0;
  v114 = v106 - 1;
  v115 = !v105 && v113;
  v142 = v115 == 0;
  v116 = v115 | (v114 == v104);
  *(_QWORD *)(a1 + 448) = v103;
  if (v142)
    v104 = v114;
  *(_BYTE *)(a1 + 456) = v116;
  *(_QWORD *)(a1 + 464) = v104;
  if ((v116 & 1) != 0)
    goto LABEL_141;
  v94.f64[0] = *(float64_t *)(v108 + 592 * ((v107 + v104) % v109));
  v95 = *(double *)(**(_QWORD **)(a1 + 376)
                  + 176
                  * ((*(_QWORD *)(*(_QWORD *)(a1 + 376) + 24) + *(_QWORD *)(a1 + 392))
                   % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                      * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 8) - **(_QWORD **)(a1 + 376)) >> 4))));
  if (v94.f64[0] < v95)
    goto LABEL_141;
  v117 = *(double **)(a1 + 696);
  v118 = *(double **)(a1 + 704);
  if (v117 != v118)
  {
    v95 = 0.000001;
    while (1)
    {
      v96.f64[0] = vabdd_f64(*v117, v94.f64[0]);
      if (v96.f64[0] <= 0.000001)
        break;
      if (++v117 == v118)
        goto LABEL_141;
    }
  }
  if (v117 == v118)
    goto LABEL_141;
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a1 + 720);
  *(_QWORD *)v323 = a1 + 720;
  do
    sub_20E8EB140((uint64_t *)v323, v117++);
  while (v117 != v118);
  v137 = *(double **)(a1 + 400);
  v138 = *(double **)(a1 + 408);
  if (v137 == v138)
    goto LABEL_141;
  v139 = *(double **)(a1 + 720);
  v140 = *(double **)(a1 + 424);
  v141 = *(double **)(a1 + 432);
  v142 = v140 == v141 || v139 == *(double **)(a1 + 728);
  if (v142)
  {
LABEL_141:
    sub_20F1C2098(a1, v15, v16, a1 + 696, v94, v95, v96, v97, v98.f64[0], v99, v100.f64[0], v101);
    if (v78 == a1 + 624)
      goto LABEL_143;
    goto LABEL_142;
  }
  v94.f64[0] = *v139 - *(double *)(a1 + 744);
  v143 = ((char *)v138 - (char *)v137) >> 5;
  v144 = *(double **)(a1 + 400);
  do
  {
    v145 = v143 >> 1;
    v146 = &v144[4 * (v143 >> 1)];
    v148 = *v146;
    v147 = v146 + 4;
    v143 += ~(v143 >> 1);
    if (v148 > v94.f64[0])
      v143 = v145;
    else
      v144 = v147;
  }
  while (v143);
  v149 = ((char *)v141 - (char *)v140) >> 5;
  v150 = *(double **)(a1 + 424);
  do
  {
    v151 = v149 >> 1;
    v152 = &v150[4 * (v149 >> 1)];
    v154 = *v152;
    v153 = v152 + 4;
    v155.f64[0] = v154;
    v149 += ~(v149 >> 1);
    if (v154 > v94.f64[0])
      v149 = v151;
    else
      v150 = v153;
  }
  while (v149);
  if (v144 == v137 || v144 == v138)
    v157 = *(double **)(a1 + 400);
  else
    v157 = v144 - 4;
  if (v150 == v140 || v150 == v141)
    v159 = *(double **)(a1 + 424);
  else
    v159 = v150 - 4;
  v160 = ((char *)v138 - (char *)v157) >> 5;
  v161 = *(_QWORD *)(a1 + 488);
  v162 = *(char **)(a1 + 472);
  if (v160 > (v161 - (uint64_t)v162) >> 5)
  {
    if (v162)
    {
      *(_QWORD *)(a1 + 480) = v162;
      operator delete(v162);
      v161 = 0;
      *v312 = 0;
      *(_QWORD *)(a1 + 480) = 0;
      *(_QWORD *)(a1 + 488) = 0;
    }
    if ((char *)v138 - (char *)v157 < 0)
      sub_20E867F44();
    v163 = v161 >> 4;
    if (v161 >> 4 <= v160)
      v163 = ((char *)v138 - (char *)v157) >> 5;
    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFE0)
      v164 = 0x7FFFFFFFFFFFFFFLL;
    else
      v164 = v163;
    if (v164 >> 59)
      sub_20E867F44();
    v162 = (char *)operator new(32 * v164);
    *(_QWORD *)(a1 + 472) = v162;
    *(_QWORD *)(a1 + 480) = v162;
    *(_QWORD *)(a1 + 488) = &v162[32 * v164];
    v165 = v162;
    if (v138 != v157)
    {
      v165 = v162;
      do
      {
        *(double *)v165 = *v157;
        v94 = *(float64x2_t *)(v157 + 1);
        *((double *)v165 + 3) = v157[3];
        *(float64x2_t *)(v165 + 8) = v94;
        v165 += 32;
        v157 += 4;
      }
      while (v157 != v138);
    }
LABEL_345:
    v251 = v165 - v162;
    goto LABEL_346;
  }
  v246 = *(char **)(a1 + 480);
  v247 = (v246 - v162) >> 5;
  if (v247 >= v160)
  {
    v165 = *(char **)(a1 + 472);
    if (v138 != v157)
    {
      v252 = *(_QWORD *)(a1 + 472);
      do
      {
        *(double *)v252 = *v157;
        v94 = *(float64x2_t *)(v157 + 1);
        *(double *)(v252 + 24) = v157[3];
        *(float64x2_t *)(v252 + 8) = v94;
        v165 += 32;
        v157 += 4;
        v252 += 32;
      }
      while (v157 != v138);
    }
    goto LABEL_345;
  }
  v248 = &v157[4 * v247];
  if (v246 != v162)
  {
    do
    {
      *(double *)v162 = *v157;
      v94 = *(float64x2_t *)(v157 + 1);
      *((double *)v162 + 3) = v157[3];
      *(float64x2_t *)(v162 + 8) = v94;
      v157 += 4;
      v162 += 32;
    }
    while (v157 != v248);
    v162 = *(char **)(a1 + 480);
  }
  v249 = v162;
  if (v248 != v138)
  {
    v249 = v162;
    v250 = v162;
    do
    {
      *(double *)v250 = *v248;
      v94 = *(float64x2_t *)(v248 + 1);
      *((double *)v250 + 3) = v248[3];
      *(float64x2_t *)(v250 + 8) = v94;
      v249 += 32;
      v248 += 4;
      v250 += 32;
    }
    while (v248 != v138);
  }
  v251 = v249 - v162;
LABEL_346:
  *(_QWORD *)(a1 + 480) = &v162[v251];
  v253 = *(double **)(a1 + 432);
  v254 = ((char *)v253 - (char *)v159) >> 5;
  v255 = *(_QWORD *)(a1 + 512);
  v256 = *(char **)(a1 + 496);
  if (v254 > (v255 - (uint64_t)v256) >> 5)
  {
    if (v256)
    {
      *(_QWORD *)(a1 + 504) = v256;
      operator delete(v256);
      v255 = 0;
      *(_QWORD *)(a1 + 496) = 0;
      *(_QWORD *)(a1 + 504) = 0;
      *(_QWORD *)(a1 + 512) = 0;
    }
    if ((char *)v253 - (char *)v159 < 0)
      sub_20E867F44();
    v257 = v255 >> 4;
    if (v255 >> 4 <= v254)
      v257 = ((char *)v253 - (char *)v159) >> 5;
    if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFE0)
      v258 = 0x7FFFFFFFFFFFFFFLL;
    else
      v258 = v257;
    if (v258 >> 59)
      sub_20E867F44();
    v256 = (char *)operator new(32 * v258);
    *(_QWORD *)(a1 + 496) = v256;
    *(_QWORD *)(a1 + 504) = v256;
    *(_QWORD *)(a1 + 512) = &v256[32 * v258];
    v259 = v256;
    if (v253 != v159)
    {
      v259 = v256;
      do
      {
        *(double *)v259 = *v159;
        v94 = *(float64x2_t *)(v159 + 1);
        *((double *)v259 + 3) = v159[3];
        *(float64x2_t *)(v259 + 8) = v94;
        v259 += 32;
        v159 += 4;
      }
      while (v159 != v253);
    }
LABEL_371:
    v265 = v259 - v256;
    goto LABEL_372;
  }
  v260 = *(char **)(a1 + 504);
  v261 = (v260 - v256) >> 5;
  if (v261 >= v254)
  {
    v259 = *(char **)(a1 + 496);
    if (v253 != v159)
    {
      v266 = *(_QWORD *)(a1 + 496);
      do
      {
        *(double *)v266 = *v159;
        v94 = *(float64x2_t *)(v159 + 1);
        *(double *)(v266 + 24) = v159[3];
        *(float64x2_t *)(v266 + 8) = v94;
        v259 += 32;
        v159 += 4;
        v266 += 32;
      }
      while (v159 != v253);
    }
    goto LABEL_371;
  }
  v262 = &v159[4 * v261];
  if (v260 != v256)
  {
    do
    {
      *(double *)v256 = *v159;
      v94 = *(float64x2_t *)(v159 + 1);
      *((double *)v256 + 3) = v159[3];
      *(float64x2_t *)(v256 + 8) = v94;
      v159 += 4;
      v256 += 32;
    }
    while (v159 != v262);
    v256 = *(char **)(a1 + 504);
  }
  v263 = v256;
  if (v262 != v253)
  {
    v263 = v256;
    v264 = v256;
    do
    {
      *(double *)v264 = *v262;
      v94 = *(float64x2_t *)(v262 + 1);
      *((double *)v264 + 3) = v262[3];
      *(float64x2_t *)(v264 + 8) = v94;
      v263 += 32;
      v262 += 4;
      v264 += 32;
    }
    while (v262 != v253);
  }
  v265 = v263 - v256;
LABEL_372:
  *(_QWORD *)(a1 + 504) = &v256[v265];
  if (*(_BYTE *)(a1 + 752))
  {
    v267 = *(float64_t **)(a1 + 720);
    v268 = *(float64_t **)(a1 + 728);
    *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 624);
    if (v267 == v268)
      goto LABEL_409;
    while (1)
    {
      v94.f64[0] = *v267;
      *(_QWORD *)v323 = 0xBFF0000000000000;
      v155 = 0uLL;
      memset(&v323[8], 0, 48);
      v270 = *(double **)(a1 + 472);
      v269 = *(double **)(a1 + 480);
      if (v270 == v269)
        break;
      if (*(v269 - 4) == v94.f64[0])
      {
        v155.f64[0] = *(v269 - 1);
        v96 = *(float64x2_t *)(v269 - 3);
      }
      else
      {
        v271 = ((char *)v269 - (char *)v270) >> 5;
        v272 = *(double **)(a1 + 472);
        do
        {
          v273 = v271 >> 1;
          v274 = &v272[4 * (v271 >> 1)];
          v276 = *v274;
          v275 = v274 + 4;
          v155.f64[0] = v276;
          v271 += ~(v271 >> 1);
          if (v276 > v94.f64[0])
            v271 = v273;
          else
            v272 = v275;
        }
        while (v271);
        if (v272 == v270 || v272 == v269)
          break;
        v96.f64[0] = *(v272 - 4);
        v155.f64[0] = *v272;
        v97 = *v272 - v96.f64[0];
        if (v97 < 0.0)
          break;
        v155.f64[0] = 0.0;
        if (v97 != 0.0)
          v155.f64[0] = (v94.f64[0] - v96.f64[0]) / v97;
        v96.f64[0] = v272[3];
        v98.f64[0] = *(v272 - 1);
        v99 = *(float64x2_t *)(v272 - 3);
        v100 = vmulq_f64(v155, vsubq_f64(v96, v98));
        v96 = vaddq_f64(v99, vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v272 + 1), v99), v155.f64[0]));
        *(_QWORD *)&v155.f64[0] = *(_OWORD *)&vaddq_f64(v98, v100);
      }
      *(_QWORD *)&v97 = vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL).u64[0];
      v279 = *(double **)(a1 + 496);
      v278 = *(double **)(a1 + 504);
      if (v279 == v278)
        break;
      if (*(v278 - 4) == v94.f64[0])
      {
        v280 = *((_QWORD *)v278 - 1);
        v281 = *(int8x16_t *)(v278 - 3);
      }
      else
      {
        v282 = ((char *)v278 - (char *)v279) >> 5;
        v283 = *(double **)(a1 + 496);
        do
        {
          v284 = v282 >> 1;
          v285 = &v283[4 * (v282 >> 1)];
          v287 = *v285;
          v286 = v285 + 4;
          v98.f64[0] = v287;
          v282 += ~(v282 >> 1);
          if (v287 > v94.f64[0])
            v282 = v284;
          else
            v283 = v286;
        }
        while (v282);
        if (v283 == v279 || v283 == v278)
          break;
        v99.f64[0] = *(v283 - 4);
        v98.f64[0] = *v283;
        v100.f64[0] = *v283 - v99.f64[0];
        if (v100.f64[0] < 0.0)
          break;
        v98.f64[0] = 0.0;
        if (v100.f64[0] != 0.0)
          v98.f64[0] = (v94.f64[0] - v99.f64[0]) / v100.f64[0];
        v99.f64[0] = v283[3];
        v101.f64[0] = *(v283 - 1);
        v289 = vmulq_f64(v98, vsubq_f64(v99, v101));
        v281 = (int8x16_t)vaddq_f64(*(float64x2_t *)(v283 - 3), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v283 + 1), *(float64x2_t *)(v283 - 3)), v98.f64[0]));
        v280 = *(_OWORD *)&vaddq_f64(v101, v289);
      }
      v96.f64[1] = v97;
      *(float64x2_t *)&v323[8] = v96;
      *(_QWORD *)&v323[48] = v280;
      v281.i64[1] = vextq_s8(v281, v281, 8uLL).u64[0];
      *(int8x16_t *)&v323[32] = v281;
      *(float64_t *)&v323[24] = v155.f64[0];
      *(float64_t *)v323 = v94.f64[0];
      sub_20F1C4690((void **)(a1 + 624), (uint64_t)v323);
      if (++v267 == v268)
        goto LABEL_409;
    }
  }
  sub_20F1C2098(a1, (uint64_t)v312, a1 + 496, a1 + 720, v94, v155.f64[0], v96, v97, v98.f64[0], v99, v100.f64[0], v101);
LABEL_409:
  v290 = **(_QWORD **)(a1 + 448)
       + 592
       * ((*(_QWORD *)(*(_QWORD *)(a1 + 448) + 24) + *(_QWORD *)(a1 + 464))
        % (unint64_t)(0x14C1BACF914C1BADLL
                           * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 448) + 8) - **(_QWORD **)(a1 + 448)) >> 4)));
  v291 = *(_QWORD *)v290;
  v327 = *(_OWORD *)(v290 + 120);
  v328 = *(_OWORD *)(v290 + 136);
  v329 = *(_OWORD *)(v290 + 152);
  v330 = *(_QWORD *)(v290 + 168);
  *(_OWORD *)&v323[48] = *(_OWORD *)(v290 + 56);
  v324 = *(_OWORD *)(v290 + 72);
  v325 = *(_OWORD *)(v290 + 88);
  v326 = *(_OWORD *)(v290 + 104);
  *(_OWORD *)v323 = *(_OWORD *)(v290 + 8);
  *(_OWORD *)&v323[16] = *(_OWORD *)(v290 + 24);
  *(_OWORD *)&v323[32] = *(_OWORD *)(v290 + 40);
  v348 = *(_OWORD *)(v290 + 288);
  v349 = *(_OWORD *)(v290 + 304);
  v350 = *(_OWORD *)(v290 + 320);
  v351 = *(_QWORD *)(v290 + 336);
  v344 = *(_OWORD *)(v290 + 224);
  v345 = *(_OWORD *)(v290 + 240);
  v346 = *(_OWORD *)(v290 + 256);
  v347 = *(_OWORD *)(v290 + 272);
  *(_OWORD *)object = *(_OWORD *)(v290 + 176);
  *(_OWORD *)&object[16] = *(_OWORD *)(v290 + 192);
  *(_OWORD *)&object[32] = *(_OWORD *)(v290 + 208);
  v339 = *(_OWORD *)(v290 + 456);
  v340 = *(_OWORD *)(v290 + 472);
  v341 = *(_OWORD *)(v290 + 488);
  v342 = *(_QWORD *)(v290 + 504);
  v335 = *(_OWORD *)(v290 + 392);
  v336 = *(_OWORD *)(v290 + 408);
  v337 = *(_OWORD *)(v290 + 424);
  v338 = *(_OWORD *)(v290 + 440);
  v332 = *(_OWORD *)(v290 + 344);
  v333 = *(_OWORD *)(v290 + 360);
  v334 = *(_OWORD *)(v290 + 376);
  v317 = *(_OWORD *)(v290 + 512);
  v318 = *(_OWORD *)(v290 + 528);
  *(_OWORD *)v322 = *(_OWORD *)(v290 + 544);
  *(_QWORD *)&v322[16] = *(_QWORD *)(v290 + 560);
  v292 = *(_QWORD *)(v290 + 584);
  v293 = *(_OWORD *)(v290 + 568);
  *(_QWORD *)(a2 + 232) = v291;
  __dst = v293;
  v294 = v328;
  *(_OWORD *)(a2 + 352) = v327;
  *(_OWORD *)(a2 + 368) = v294;
  *(_OWORD *)(a2 + 384) = v329;
  v295 = v324;
  *(_OWORD *)(a2 + 288) = *(_OWORD *)&v323[48];
  *(_OWORD *)(a2 + 304) = v295;
  v296 = v326;
  *(_OWORD *)(a2 + 320) = v325;
  *(_OWORD *)(a2 + 336) = v296;
  *(_OWORD *)(a2 + 240) = *(_OWORD *)v323;
  v297 = *(_OWORD *)&v323[32];
  *(_OWORD *)(a2 + 256) = *(_OWORD *)&v323[16];
  *(_OWORD *)(a2 + 272) = v297;
  v298 = v350;
  *(_OWORD *)(a2 + 536) = v349;
  *(_OWORD *)(a2 + 552) = v298;
  v299 = v346;
  *(_OWORD *)(a2 + 472) = v345;
  *(_OWORD *)(a2 + 488) = v299;
  v300 = v348;
  *(_OWORD *)(a2 + 504) = v347;
  *(_OWORD *)(a2 + 520) = v300;
  v301 = *(_OWORD *)&object[16];
  *(_OWORD *)(a2 + 408) = *(_OWORD *)object;
  *(_OWORD *)(a2 + 424) = v301;
  v302 = v344;
  *(_OWORD *)(a2 + 440) = *(_OWORD *)&object[32];
  *(_OWORD *)(a2 + 456) = v302;
  v303 = v338;
  *(_OWORD *)(a2 + 688) = v339;
  v304 = v341;
  *(_OWORD *)(a2 + 704) = v340;
  *(_OWORD *)(a2 + 720) = v304;
  v305 = v334;
  *(_OWORD *)(a2 + 624) = v335;
  v306 = v337;
  *(_OWORD *)(a2 + 640) = v336;
  *(_OWORD *)(a2 + 656) = v306;
  *(_OWORD *)(a2 + 672) = v303;
  v307 = v333;
  *(_OWORD *)(a2 + 576) = v332;
  v321 = v292;
  LODWORD(v292) = *(unsigned __int8 *)(a2 + 824);
  *(_QWORD *)(a2 + 400) = v330;
  *(_QWORD *)(a2 + 568) = v351;
  *(_QWORD *)(a2 + 736) = v342;
  *(_OWORD *)(a2 + 592) = v307;
  *(_OWORD *)(a2 + 608) = v305;
  v308 = v318;
  *(_OWORD *)(a2 + 744) = v317;
  *(_OWORD *)(a2 + 760) = v308;
  *(_OWORD *)(a2 + 776) = *(_OWORD *)v322;
  *(_QWORD *)(a2 + 792) = *(_QWORD *)&v322[16];
  *(_OWORD *)(a2 + 800) = __dst;
  *(_QWORD *)(a2 + 816) = v321;
  if (!(_DWORD)v292)
    *(_BYTE *)(a2 + 824) = 1;
  v309 = *(_QWORD *)(a1 + 136);
  if (v309)
  {
    v310 = *v103;
  }
  else
  {
    v310 = *(_QWORD *)(a1 + 104);
    v309 = 0x14C1BACF914C1BADLL * ((*(_QWORD *)(a1 + 112) - v310) >> 4);
  }
  *(_QWORD *)(a2 + 832) = *(_QWORD *)(v310 + 592 * v309 - 592);
  *(_BYTE *)(a2 + 840) = 1;
  if (v78 == a1 + 624)
    goto LABEL_143;
LABEL_142:
  sub_20EE62A1C((char **)(a2 + 192), *(_QWORD *)(a1 + 624), *(_QWORD *)(a1 + 632), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 632) - *(_QWORD *)(a1 + 624)) >> 3));
LABEL_143:
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 3)) <= 1
    && (a7 & 1) == 0)
  {
    sub_20F1C222C(&v316);
    if (**(int **)(v316 + 56) > 2)
      return 4;
    v119 = *(unsigned __int8 *)(v316 + 72);
    v120 = *(_BYTE *)(v316 + 72) != 0;
    v121 = sub_20E8C31DC(v316, "OSLogSurrogateAppender", 1, 0);
    if (((v121 == 0) & ~v120) != 0)
      return 4;
    sub_20E863438((uint64_t)v323);
    sub_20E86A980(&v323[16], (uint64_t)"GetInertialStateAtTime (in GetPredictionBundlePoseSmoothing) failed with InterpolateFailed: Could not interpolate the IMU samples used for inertial state propagation for pose request timestamp=", 193);
    v122 = (_QWORD *)std::ostream::operator<<();
    sub_20E86A980(v122, (uint64_t)" using the inertial state at timestamp=", 39);
    std::ostream::operator<<();
    if ((BYTE8(v327) & 0x10) != 0)
    {
      v135 = v327;
      if ((unint64_t)v327 < *((_QWORD *)&v324 + 1))
      {
        *(_QWORD *)&v327 = *((_QWORD *)&v324 + 1);
        v135 = *((_QWORD *)&v324 + 1);
      }
      v136 = (const void **)&v324;
    }
    else
    {
      if ((BYTE8(v327) & 8) == 0)
      {
        v123 = 0;
        HIBYTE(v321) = 0;
        p_dst = &__dst;
        goto LABEL_208;
      }
      v136 = (const void **)&v323[40];
      v135 = *(_QWORD *)&v323[56];
    }
    v166 = *v136;
    v123 = v135 - (_QWORD)*v136;
    if (v123 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v123 >= 0x17)
    {
      v167 = (v123 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v123 | 7) != 0x17)
        v167 = v123 | 7;
      v168 = v167 + 1;
      p_dst = (__int128 *)operator new(v167 + 1);
      *((_QWORD *)&__dst + 1) = v123;
      v321 = v168 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v321) = v135 - *(_BYTE *)v136;
      p_dst = &__dst;
      if (!v123)
      {
LABEL_208:
        *((_BYTE *)p_dst + v123) = 0;
        *(_QWORD *)&v332 = &v316;
        *((std::chrono::steady_clock::time_point *)&v332 + 1) = std::chrono::steady_clock::now();
        *(std::chrono::system_clock::time_point *)&v333 = std::chrono::system_clock::now();
        DWORD2(v333) = 2;
        *(_QWORD *)&v334 = "unknown file";
        DWORD2(v334) = 179;
        *(_QWORD *)&v336 = 0;
        *(_QWORD *)&v335 = "unknown function";
        *((_QWORD *)&v335 + 1) = 0;
        if (v321 >= 0)
          v169 = (const char *)&__dst;
        else
          v169 = (const char *)__dst;
        v170 = *(_QWORD *)v332;
        v171 = *(_QWORD *)v332 + 16;
        if (*(char *)(*(_QWORD *)v332 + 39) < 0)
        {
          v173 = *(const char **)(v170 + 16);
          v172 = *(_QWORD *)(v170 + 24);
        }
        else
        {
          v172 = *(unsigned __int8 *)(*(_QWORD *)v332 + 39);
          v173 = (const char *)(*(_QWORD *)v332 + 16);
        }
        v174 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v174 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
          if (object[24] && (object[23] & 0x80000000) != 0)
            operator delete(*(void **)object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v175 = byte_254A4A4F8;
        else
          v175 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v176 = byte_254A4A4F8[23];
        else
          v176 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)object = os_log_create(v175, v173);
        v177 = &object[8];
        if (v176 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v176 >= 0x17)
        {
          v315 = v173;
          v178 = v170;
          v179 = v121;
          v180 = v169;
          v181 = v119;
          v182 = v171;
          v183 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v176 | 7) != 0x17)
            v183 = v176 | 7;
          v184 = v183 + 1;
          v177 = operator new(v183 + 1);
          *(_QWORD *)&object[24] = v184 | 0x8000000000000000;
          *(_QWORD *)&object[8] = v177;
          *(_QWORD *)&object[16] = v176;
          v171 = v182;
          v119 = v181;
          v169 = v180;
          v121 = v179;
          v170 = v178;
          v173 = v315;
        }
        else
        {
          object[31] = v176;
          if (!v176)
          {
LABEL_229:
            v177[v176] = 0;
            object[32] = 1;
            v185 = &object[40];
            if (v172 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v172 >= 0x17)
            {
              v186 = (v172 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v172 | 7) != 0x17)
                v186 = v172 | 7;
              v187 = v186 + 1;
              v185 = operator new(v186 + 1);
              *((_QWORD *)&v344 + 1) = v187 | 0x8000000000000000;
              *(_QWORD *)&object[40] = v185;
              *(_QWORD *)&v344 = v172;
            }
            else
            {
              HIBYTE(v344) = v172;
              if (!v172)
              {
LABEL_237:
                v185[v172] = 0;
                LOBYTE(v345) = 1;
                v188 = *(NSObject **)object;
                if (SHIBYTE(v344) < 0)
                  operator delete(*(void **)&object[40]);
                if (object[32] && (object[31] & 0x80000000) != 0)
                  operator delete(*(void **)&object[8]);
                if (*(_QWORD *)object)
                  os_release(*(void **)object);
                if (!v121 || !*(_QWORD *)(v121 + 24))
                {
                  os_log_type_enabled(v188, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)object = 136315138;
                  *(_QWORD *)&object[4] = v169;
                  v195 = (void *)_os_log_send_and_compose_impl();
                  if (v195)
                    free(v195);
                  goto LABEL_318;
                }
                v189 = _os_log_pack_size();
                v190 = operator new(v189, (std::align_val_t)8uLL);
                v191 = (_QWORD *)operator new();
                *v191 = &off_24C9ABB80;
                v191[1] = 0;
                v191[2] = 0;
                v191[3] = v190;
                *(_QWORD *)&v317 = v190;
                *((_QWORD *)&v317 + 1) = v190;
                v319 = 0;
                v318 = (unint64_t)v191;
                v192 = strlen(v169);
                if (v192 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v193 = v192;
                if (v192 >= 0x17)
                {
                  v196 = (v192 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v192 | 7) != 0x17)
                    v196 = v192 | 7;
                  v197 = v196 + 1;
                  v194 = operator new(v196 + 1);
                  *(_QWORD *)&v322[8] = v193;
                  *(_QWORD *)&v322[16] = v197 | 0x8000000000000000;
                  *(_QWORD *)v322 = v194;
                }
                else
                {
                  v322[23] = v192;
                  v194 = v322;
                  if (!v192)
                  {
LABEL_256:
                    v194[v193] = 0;
                    v331[0] = *(_QWORD *)&v322[8];
                    v198 = *(_QWORD *)v322;
                    *(_QWORD *)((char *)v331 + 7) = *(_QWORD *)&v322[15];
                    v199 = v322[23];
                    v200 = operator new(0x38uLL);
                    v200[1] = 0;
                    v200[2] = 0;
                    v200[3] = off_24C9ABC20;
                    *v200 = &off_24C9ABBD0;
                    v201 = v331[0];
                    v200[4] = v198;
                    v200[5] = v201;
                    *(_QWORD *)((char *)v200 + 47) = *(_QWORD *)((char *)v331 + 7);
                    *((_BYTE *)v200 + 55) = v199;
                    v331[0] = 0;
                    *(_QWORD *)((char *)v331 + 7) = 0;
                    v202 = v319;
                    *((_QWORD *)&v318 + 1) = v200 + 3;
                    v319 = (std::__shared_weak_count *)v200;
                    if (v202)
                    {
                      p_shared_owners = (unint64_t *)&v202->__shared_owners_;
                      do
                        v204 = __ldaxr(p_shared_owners);
                      while (__stlxr(v204 - 1, p_shared_owners));
                      if (!v204)
                      {
                        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                        std::__shared_weak_count::__release_weak(v202);
                      }
                    }
                    *(_OWORD *)object = v317;
                    v205 = *((_QWORD *)&v318 + 1);
                    *(_QWORD *)&object[16] = v318;
                    if ((_QWORD)v318)
                    {
                      v206 = (unint64_t *)(v318 + 8);
                      do
                        v207 = __ldxr(v206);
                      while (__stxr(v207 + 1, v206));
                    }
                    v208 = v319;
                    *(_QWORD *)&object[24] = v205;
                    *(_QWORD *)&object[32] = v319;
                    if (v319)
                    {
                      v209 = (unint64_t *)&v319->__shared_owners_;
                      do
                        v210 = __ldxr(v209);
                      while (__stxr(v210 + 1, v209));
                      *(_QWORD *)&object[40] = v205;
                      do
                        v211 = __ldaxr(v209);
                      while (__stlxr(v211 - 1, v209));
                      if (!v211)
                      {
                        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                        std::__shared_weak_count::__release_weak(v208);
                      }
                    }
                    else
                    {
                      *(_QWORD *)&object[40] = v205;
                    }
                    v212 = (std::__shared_weak_count *)v318;
                    if ((_QWORD)v318)
                    {
                      v213 = (unint64_t *)(v318 + 8);
                      do
                        v214 = __ldaxr(v213);
                      while (__stlxr(v214 - 1, v213));
                      if (!v214)
                      {
                        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                        std::__shared_weak_count::__release_weak(v212);
                      }
                    }
                    v215 = *(_QWORD *)object;
                    if (*(char *)(*(_QWORD *)&object[40] + 31) >= 0)
                      v216 = *(_QWORD *)&object[40] + 8;
                    else
                      v216 = *(_QWORD *)(*(_QWORD *)&object[40] + 8);
                    v217 = _os_log_pack_fill();
                    *(_DWORD *)v217 = 136315138;
                    *(_QWORD *)(v217 + 4) = v216;
                    v218 = operator new();
                    v219 = *(unsigned __int8 *)(v170 + 39);
                    if ((v219 & 0x80u) == 0)
                      v220 = v171;
                    else
                      v220 = *(_QWORD *)(v170 + 16);
                    if ((v219 & 0x80u) != 0)
                      v219 = *(_QWORD *)(v170 + 24);
                    *(_QWORD *)v218 = v215;
                    *(_OWORD *)(v218 + 8) = *(_OWORD *)&object[8];
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v218 + 24) = *(_OWORD *)&object[24];
                    *(_QWORD *)&object[24] = 0;
                    *(_QWORD *)&object[32] = 0;
                    *(_QWORD *)(v218 + 40) = v220;
                    *(_QWORD *)(v218 + 48) = v219;
                    *(_BYTE *)(v218 + 56) = 2;
                    *(_QWORD *)v322 = 0;
                    *(_QWORD *)&v317 = v218;
                    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v121 + 24) + 40))(*(_QWORD *)(v121 + 24), &v317);
                    v221 = v317;
                    *(_QWORD *)&v317 = 0;
                    if (v221)
                    {
                      v222 = *(std::__shared_weak_count **)(v221 + 32);
                      if (v222)
                      {
                        v223 = (unint64_t *)&v222->__shared_owners_;
                        do
                          v224 = __ldaxr(v223);
                        while (__stlxr(v224 - 1, v223));
                        if (!v224)
                        {
                          ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                          std::__shared_weak_count::__release_weak(v222);
                        }
                      }
                      v225 = *(std::__shared_weak_count **)(v221 + 16);
                      if (v225)
                      {
                        v226 = (unint64_t *)&v225->__shared_owners_;
                        do
                          v227 = __ldaxr(v226);
                        while (__stlxr(v227 - 1, v226));
                        if (!v227)
                        {
                          ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                          std::__shared_weak_count::__release_weak(v225);
                        }
                      }
                      MEMORY[0x212BC6398](v221, 0x10F0C40B62ED6C6);
                      v228 = *(_QWORD *)v322;
                      *(_QWORD *)v322 = 0;
                      if (v228)
                      {
                        v229 = *(std::__shared_weak_count **)(v228 + 32);
                        if (v229)
                        {
                          v230 = (unint64_t *)&v229->__shared_owners_;
                          do
                            v231 = __ldaxr(v230);
                          while (__stlxr(v231 - 1, v230));
                          if (!v231)
                          {
                            ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                            std::__shared_weak_count::__release_weak(v229);
                          }
                        }
                        v232 = *(std::__shared_weak_count **)(v228 + 16);
                        if (v232)
                        {
                          v233 = (unint64_t *)&v232->__shared_owners_;
                          do
                            v234 = __ldaxr(v233);
                          while (__stlxr(v234 - 1, v233));
                          if (!v234)
                          {
                            ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                            std::__shared_weak_count::__release_weak(v232);
                          }
                        }
                        MEMORY[0x212BC6398](v228, 0x10F0C40B62ED6C6);
                      }
                    }
                    v235 = *(std::__shared_weak_count **)&object[32];
                    if (*(_QWORD *)&object[32])
                    {
                      v236 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v237 = __ldaxr(v236);
                      while (__stlxr(v237 - 1, v236));
                      if (!v237)
                      {
                        ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                        std::__shared_weak_count::__release_weak(v235);
                      }
                    }
                    v238 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                    {
                      v239 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                      do
                        v240 = __ldaxr(v239);
                      while (__stlxr(v240 - 1, v239));
                      if (!v240)
                      {
                        ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
                        std::__shared_weak_count::__release_weak(v238);
                      }
                    }
LABEL_318:
                    if (v119)
                    {
                      v241 = (const char *)&__dst;
                      if (v321 < 0)
                        v241 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v332, "%s", v241);
                      sub_20E863570((uint64_t)&v332);
                    }
                    sub_20E863570((uint64_t)&v332);
                    v242 = (std::__shared_weak_count *)v336;
                    if ((_QWORD)v336)
                    {
                      v243 = (unint64_t *)(v336 + 8);
                      do
                        v244 = __ldaxr(v243);
                      while (__stlxr(v244 - 1, v243));
                      if (!v244)
                      {
                        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                        std::__shared_weak_count::__release_weak(v242);
                      }
                    }
                    if (SHIBYTE(v321) < 0)
                      operator delete((void *)__dst);
                    *(_QWORD *)v323 = *MEMORY[0x24BEDB7F0];
                    v245 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)&v323[*(_QWORD *)(*(_QWORD *)v323 - 24)] = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    *(_QWORD *)&v323[16] = v245;
                    *(_QWORD *)&v323[24] = MEMORY[0x24BEDB848] + 16;
                    if (SHIBYTE(v326) < 0)
                      operator delete(*((void **)&v325 + 1));
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](&v328);
                    return 4;
                  }
                }
                memcpy(v194, v169, v193);
                goto LABEL_256;
              }
            }
            memmove(v185, v173, v172);
            goto LABEL_237;
          }
        }
        memmove(v177, v175, v176);
        goto LABEL_229;
      }
    }
    memmove(p_dst, v166, v123);
    goto LABEL_208;
  }
  v125 = **(_QWORD **)(a1 + 376)
       + 176
       * ((*(_QWORD *)(*(_QWORD *)(a1 + 376) + 24) + *(_QWORD *)(a1 + 392))
        % (unint64_t)(0x2E8BA2E8BA2E8BA3
                           * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 8) - **(_QWORD **)(a1 + 376)) >> 4)));
  v126 = *(unsigned __int8 *)(a2 + 176);
  v127 = *(_OWORD *)(v125 + 40);
  v128 = *(_OWORD *)(v125 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v125 + 8);
  *(_OWORD *)(a2 + 24) = v128;
  *(_OWORD *)(a2 + 40) = v127;
  v129 = *(_OWORD *)(v125 + 72);
  v130 = *(_OWORD *)(v125 + 88);
  v131 = *(_OWORD *)(v125 + 104);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(v125 + 56);
  *(_OWORD *)(a2 + 104) = v131;
  *(_OWORD *)(a2 + 88) = v130;
  *(_OWORD *)(a2 + 72) = v129;
  v132 = *(_OWORD *)(v125 + 136);
  v133 = *(_OWORD *)(v125 + 152);
  v134 = *(_QWORD *)(v125 + 168);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(v125 + 120);
  *(_QWORD *)(a2 + 168) = v134;
  *(_OWORD *)(a2 + 152) = v133;
  *(_OWORD *)(a2 + 136) = v132;
  result = 0;
  if (!v126)
    goto LABEL_116;
  return result;
}

void sub_20F1BE8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  if (LOBYTE(STACK[0x2A8]) && SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a72);
  if (a28 < 0)
  {
    operator delete(a23);
    sub_20E863784((uint64_t)&a34);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1BEA40(uint64_t a1, _QWORD *a2, int a3, double a4)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  size_t v11;
  void **v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  size_t v17;
  void **p_dst;
  int v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  uint64_t *v26;
  size_t v27;
  void **v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  uint64_t *v35;
  size_t v36;
  void **v37;
  unint64_t v38;
  const void **v39;
  double *v41;
  double *v42;
  double *v43;
  uint64_t result;
  double v45;
  unint64_t v46;
  const void **v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  size_t v54;
  unsigned __int8 v55;
  const char *v56;
  size_t v57;
  _BYTE *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  size_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  size_t v69;
  size_t v70;
  char *v71;
  void *v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  void **v81;
  uint64_t v82;
  uint64_t *v83;
  size_t v84;
  void **v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  const char *v91;
  size_t v92;
  unsigned __int8 v93;
  const char *v94;
  size_t v95;
  _BYTE *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  size_t v104;
  std::__shared_weak_count_vtbl *v105;
  std::__shared_weak_count *v106;
  size_t v107;
  size_t v108;
  char *v109;
  void *v110;
  double *v111;
  double *v112;
  double *v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  char v118;
  _QWORD *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  char *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  char v134;
  _QWORD *v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *p_shared_owners;
  unint64_t v139;
  char *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  __int128 v157;
  void *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  const char *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  const char *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  __int128 v193;
  void *v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  const char *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  const char *v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  unsigned __int8 v219;
  uint64_t v220;
  const char *v221;
  NSObject *v222;
  void **v223;
  unsigned __int8 v224;
  uint64_t v225;
  const char *v226;
  NSObject *v227;
  void **v228;
  unsigned __int8 v229;
  uint64_t v230;
  const char *v231;
  NSObject *v232;
  uint64_t v233;
  const char *v234;
  const char *v235;
  uint64_t *v236;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v238;
  int v239;
  const char *v240;
  int v241;
  const char *v242;
  uint64_t v243;
  std::__shared_weak_count *v244;
  void **__dst;
  size_t v246;
  int64_t v247;
  _QWORD v248[2];
  uint64_t v249;
  uint64_t v250;
  _BYTE v251[16];
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  void *__p;
  char v256;
  unint64_t v257;
  int v258;
  _BYTE v259[152];
  int **v260;
  void *v261[2];
  std::__shared_weak_count *v262;
  char *v263;
  std::__shared_weak_count *v264;
  const char *v265;
  __int128 v266;
  _BYTE v267[24];
  __int128 v268;
  char *v269;
  size_t v270;
  unint64_t v271;
  char v272;
  uint64_t v273[5];

  v273[2] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 48))
  {
    if (!*(_BYTE *)(a1 + 768))
      return 5;
    sub_20F1C222C(&v260);
    if (*v260[7] > 2)
      return 5;
    v13 = *((unsigned __int8 *)v260 + 72);
    v14 = sub_20E8C31DC((uint64_t)v260, "OSLogSurrogateAppender", 1, 0);
    v15 = v14;
    if (!v13 && v14 == 0)
      return 5;
    sub_20E863438((uint64_t)v248);
    sub_20E86A980(&v249, (uint64_t)"GetInertialStateAtTime Failed with NotBaseState: No inertial state added to pose predictor yet for pose request timestamp=", 122);
    std::ostream::operator<<();
    if ((v258 & 0x10) != 0)
    {
      v46 = v257;
      if (v257 < v254)
      {
        v257 = v254;
        v46 = v254;
      }
      v47 = (const void **)&v253;
    }
    else
    {
      if ((v258 & 8) == 0)
      {
        v17 = 0;
        HIBYTE(v247) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_137;
      }
      v47 = (const void **)v251;
      v46 = v252;
    }
    v86 = *v47;
    v17 = v46 - (_QWORD)*v47;
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v17 >= 0x17)
    {
      v87 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v87 = v17 | 7;
      v88 = v87 + 1;
      p_dst = (void **)operator new(v87 + 1);
      v246 = v17;
      v247 = v88 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v247) = v46 - *(_BYTE *)v47;
      p_dst = (void **)&__dst;
      if (!v17)
      {
LABEL_137:
        *((_BYTE *)p_dst + v17) = 0;
        v236 = (uint64_t *)&v260;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v238 = std::chrono::system_clock::now().__d_.__rep_;
        v239 = 2;
        v240 = "unknown file";
        v241 = 660;
        v243 = 0;
        v244 = 0;
        v242 = "unknown function";
        if (v247 >= 0)
          v89 = (const char *)&__dst;
        else
          v89 = (const char *)__dst;
        v90 = *v236;
        v91 = (const char *)(*v236 + 16);
        v233 = *v236;
        v235 = v91;
        if (*(char *)(*v236 + 39) < 0)
        {
          v91 = *(const char **)(v90 + 16);
          v92 = *(_QWORD *)(v90 + 24);
        }
        else
        {
          v92 = *(unsigned __int8 *)(*v236 + 39);
        }
        v93 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v93 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v267);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v267);
          if ((_BYTE)v268 && (v267[23] & 0x80000000) != 0)
            operator delete(*(void **)v267);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v94 = byte_254A4A4F8;
        else
          v94 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v95 = byte_254A4A4F8[23];
        else
          v95 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v267 = os_log_create(v94, v91);
        v96 = &v267[8];
        if (v95 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v95 >= 0x17)
        {
          v97 = v13;
          v98 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v95 | 7) != 0x17)
            v98 = v95 | 7;
          v99 = v98 + 1;
          v96 = operator new(v98 + 1);
          *(_QWORD *)&v267[16] = v95;
          *(_QWORD *)&v268 = v99 | 0x8000000000000000;
          *(_QWORD *)&v267[8] = v96;
          v13 = v97;
        }
        else
        {
          BYTE7(v268) = v95;
          if (!v95)
          {
LABEL_158:
            v96[v95] = 0;
            BYTE8(v268) = 1;
            v100 = (char *)&v269;
            if (v92 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v92 >= 0x17)
            {
              v101 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v92 | 7) != 0x17)
                v101 = v92 | 7;
              v102 = v101 + 1;
              v100 = (char *)operator new(v101 + 1);
              v270 = v92;
              v271 = v102 | 0x8000000000000000;
              v269 = v100;
            }
            else
            {
              HIBYTE(v271) = v92;
              if (!v92)
              {
LABEL_166:
                v100[v92] = 0;
                v272 = 1;
                v103 = *(NSObject **)v267;
                if (SHIBYTE(v271) < 0)
                  operator delete(v269);
                if (BYTE8(v268) && SBYTE7(v268) < 0)
                  operator delete(*(void **)&v267[8]);
                if (*(_QWORD *)v267)
                  os_release(*(void **)v267);
                if (!v15 || !*(_QWORD *)(v15 + 24))
                {
                  os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v267 = 136315138;
                  *(_QWORD *)&v267[4] = v89;
                  v110 = (void *)_os_log_send_and_compose_impl();
                  if (v110)
                    free(v110);
                  goto LABEL_334;
                }
                v104 = _os_log_pack_size();
                v105 = (std::__shared_weak_count_vtbl *)operator new(v104, (std::align_val_t)8uLL);
                v106 = (std::__shared_weak_count *)operator new();
                v106->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v106->__shared_owners_ = 0;
                v106->__shared_weak_owners_ = 0;
                v106[1].__vftable = v105;
                v261[0] = v105;
                v261[1] = v105;
                v263 = 0;
                v264 = 0;
                v262 = v106;
                v107 = strlen(v89);
                if (v107 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v108 = v107;
                if (v107 >= 0x17)
                {
                  v131 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v107 | 7) != 0x17)
                    v131 = v107 | 7;
                  v132 = v131 + 1;
                  v109 = (char *)operator new(v131 + 1);
                  *(_QWORD *)&v266 = v108;
                  *((_QWORD *)&v266 + 1) = v132 | 0x8000000000000000;
                  v265 = v109;
                }
                else
                {
                  HIBYTE(v266) = v107;
                  v109 = (char *)&v265;
                  if (!v107)
                  {
LABEL_209:
                    v109[v108] = 0;
                    v133 = v265;
                    v273[0] = v266;
                    *(uint64_t *)((char *)v273 + 7) = *(_QWORD *)((char *)&v266 + 7);
                    v134 = HIBYTE(v266);
                    v135 = operator new(0x38uLL);
                    v135[1] = 0;
                    v135[2] = 0;
                    v135[3] = off_24C9ABC20;
                    *v135 = &off_24C9ABBD0;
                    v136 = v273[0];
                    v135[4] = v133;
                    v135[5] = v136;
                    *(_QWORD *)((char *)v135 + 47) = *(uint64_t *)((char *)v273 + 7);
                    *((_BYTE *)v135 + 55) = v134;
                    memset(v273, 0, 15);
                    v137 = v264;
                    v263 = (char *)(v135 + 3);
                    v264 = (std::__shared_weak_count *)v135;
                    if (v137)
                    {
                      p_shared_owners = (unint64_t *)&v137->__shared_owners_;
                      do
                        v139 = __ldaxr(p_shared_owners);
                      while (__stlxr(v139 - 1, p_shared_owners));
                      if (!v139)
                      {
                        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                        std::__shared_weak_count::__release_weak(v137);
                      }
                    }
                    *(_OWORD *)v267 = *(_OWORD *)v261;
                    v140 = v263;
                    *(_QWORD *)&v267[16] = v262;
                    if (v262)
                    {
                      v141 = (unint64_t *)&v262->__shared_owners_;
                      do
                        v142 = __ldxr(v141);
                      while (__stxr(v142 + 1, v141));
                    }
                    v143 = v264;
                    *(_QWORD *)&v268 = v140;
                    *((_QWORD *)&v268 + 1) = v264;
                    if (v264)
                    {
                      v144 = (unint64_t *)&v264->__shared_owners_;
                      do
                        v145 = __ldxr(v144);
                      while (__stxr(v145 + 1, v144));
                      v269 = v140;
                      do
                        v146 = __ldaxr(v144);
                      while (__stlxr(v146 - 1, v144));
                      if (!v146)
                      {
                        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                        std::__shared_weak_count::__release_weak(v143);
                      }
                    }
                    else
                    {
                      v269 = v140;
                    }
                    v183 = v262;
                    if (v262)
                    {
                      v184 = (unint64_t *)&v262->__shared_owners_;
                      do
                        v185 = __ldaxr(v184);
                      while (__stlxr(v185 - 1, v184));
                      if (!v185)
                      {
                        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                        std::__shared_weak_count::__release_weak(v183);
                      }
                    }
                    v186 = *(_QWORD *)v267;
                    if (v269[31] >= 0)
                      v187 = v269 + 8;
                    else
                      v187 = (char *)*((_QWORD *)v269 + 1);
                    v188 = _os_log_pack_fill();
                    *(_DWORD *)v188 = 136315138;
                    *(_QWORD *)(v188 + 4) = v187;
                    v189 = (char *)operator new();
                    v190 = *(unsigned __int8 *)(v233 + 39);
                    v191 = *(const char **)(v233 + 16);
                    v192 = *(_QWORD *)(v233 + 24);
                    v193 = v268;
                    *(_OWORD *)(v189 + 8) = *(_OWORD *)&v267[8];
                    if ((v190 & 0x80u) != 0)
                      v190 = v192;
                    else
                      v191 = v235;
                    *(_QWORD *)v189 = v186;
                    *(_QWORD *)&v267[8] = 0;
                    *(_QWORD *)&v267[16] = 0;
                    *(_OWORD *)(v189 + 24) = v193;
                    v268 = 0uLL;
                    *((_QWORD *)v189 + 5) = v191;
                    *((_QWORD *)v189 + 6) = v190;
                    v189[56] = 2;
                    v265 = 0;
                    v261[0] = v189;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), v261);
                    v194 = v261[0];
                    v261[0] = 0;
                    if (v194)
                    {
                      v195 = (std::__shared_weak_count *)*((_QWORD *)v194 + 4);
                      if (v195)
                      {
                        v196 = (unint64_t *)&v195->__shared_owners_;
                        do
                          v197 = __ldaxr(v196);
                        while (__stlxr(v197 - 1, v196));
                        if (!v197)
                        {
                          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                          std::__shared_weak_count::__release_weak(v195);
                        }
                      }
                      v198 = (std::__shared_weak_count *)*((_QWORD *)v194 + 2);
                      if (v198)
                      {
                        v199 = (unint64_t *)&v198->__shared_owners_;
                        do
                          v200 = __ldaxr(v199);
                        while (__stlxr(v200 - 1, v199));
                        if (!v200)
                        {
                          ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
                          std::__shared_weak_count::__release_weak(v198);
                        }
                      }
                      MEMORY[0x212BC6398](v194, 0x10F0C40B62ED6C6);
                      v201 = v265;
                      v265 = 0;
                      if (v201)
                      {
                        v202 = (std::__shared_weak_count *)*((_QWORD *)v201 + 4);
                        if (v202)
                        {
                          v203 = (unint64_t *)&v202->__shared_owners_;
                          do
                            v204 = __ldaxr(v203);
                          while (__stlxr(v204 - 1, v203));
                          if (!v204)
                          {
                            ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
                            std::__shared_weak_count::__release_weak(v202);
                          }
                        }
                        v205 = (std::__shared_weak_count *)*((_QWORD *)v201 + 2);
                        if (v205)
                        {
                          v206 = (unint64_t *)&v205->__shared_owners_;
                          do
                            v207 = __ldaxr(v206);
                          while (__stlxr(v207 - 1, v206));
                          if (!v207)
                          {
                            ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
                            std::__shared_weak_count::__release_weak(v205);
                          }
                        }
                        MEMORY[0x212BC6398](v201, 0x10F0C40B62ED6C6);
                      }
                    }
                    v208 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
                    if (*((_QWORD *)&v268 + 1))
                    {
                      v209 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
                      do
                        v210 = __ldaxr(v209);
                      while (__stlxr(v210 - 1, v209));
                      if (!v210)
                      {
                        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                        std::__shared_weak_count::__release_weak(v208);
                      }
                    }
                    v211 = *(std::__shared_weak_count **)&v267[16];
                    if (*(_QWORD *)&v267[16])
                    {
                      v212 = (unint64_t *)(*(_QWORD *)&v267[16] + 8);
                      do
                        v213 = __ldaxr(v212);
                      while (__stlxr(v213 - 1, v212));
                      if (!v213)
                      {
                        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                        std::__shared_weak_count::__release_weak(v211);
                      }
                    }
LABEL_334:
                    if (v13)
                    {
                      v214 = (const char *)&__dst;
                      if (v247 < 0)
                        v214 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v236, "%s", v214);
                      sub_20E863570((uint64_t)&v236);
                    }
                    sub_20E863570((uint64_t)&v236);
                    v215 = v244;
                    if (v244)
                    {
                      v216 = (unint64_t *)&v244->__shared_owners_;
                      do
                        v217 = __ldaxr(v216);
                      while (__stlxr(v217 - 1, v216));
                      if (!v217)
                      {
                        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
                        std::__shared_weak_count::__release_weak(v215);
                      }
                    }
                    if (SHIBYTE(v247) < 0)
                      operator delete(__dst);
                    v248[0] = *MEMORY[0x24BEDB7F0];
                    v218 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v248 + *(_QWORD *)(v248[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v249 = v218;
                    v250 = MEMORY[0x24BEDB848] + 16;
                    if (v256 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v259);
                    return 5;
                  }
                }
                memcpy(v109, v89, v108);
                goto LABEL_209;
              }
            }
            memmove(v100, v91, v92);
            goto LABEL_166;
          }
        }
        memmove(v96, v94, v95);
        goto LABEL_158;
      }
    }
    memmove(p_dst, v86, v17);
    goto LABEL_137;
  }
  if (*((_BYTE *)a2 + 8))
  {
    if (!*(_BYTE *)(a1 + 768))
      return 1;
    sub_20F1C222C(&v260);
    if (*v260[7] > 2)
      return 1;
    v7 = *((unsigned __int8 *)v260 + 72);
    v8 = sub_20E8C31DC((uint64_t)v260, "OSLogSurrogateAppender", 1, 0);
    v9 = v8;
    if (!v7 && v8 == 0)
      return 1;
    sub_20E863438((uint64_t)v248);
    sub_20E86A980(&v249, (uint64_t)"GetInertialStateAtTime Failed with TimestampTooEarly: No inertial state found prior to pose timestamp=", 102);
    std::ostream::operator<<();
    if ((v258 & 0x10) != 0)
    {
      v38 = v257;
      if (v257 < v254)
      {
        v257 = v254;
        v38 = v254;
      }
      v39 = (const void **)&v253;
    }
    else
    {
      if ((v258 & 8) == 0)
      {
        v11 = 0;
        HIBYTE(v247) = 0;
        v12 = (void **)&__dst;
        goto LABEL_70;
      }
      v39 = (const void **)v251;
      v38 = v252;
    }
    v48 = *v39;
    v11 = v38 - (_QWORD)*v39;
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v11 >= 0x17)
    {
      v49 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v49 = v11 | 7;
      v50 = v49 + 1;
      v12 = (void **)operator new(v49 + 1);
      v246 = v11;
      v247 = v50 | 0x8000000000000000;
      __dst = v12;
    }
    else
    {
      HIBYTE(v247) = v38 - *(_BYTE *)v39;
      v12 = (void **)&__dst;
      if (!v11)
      {
LABEL_70:
        *((_BYTE *)v12 + v11) = 0;
        v236 = (uint64_t *)&v260;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v238 = std::chrono::system_clock::now().__d_.__rep_;
        v239 = 2;
        v240 = "unknown file";
        v241 = 671;
        v243 = 0;
        v244 = 0;
        v242 = "unknown function";
        if (v247 >= 0)
          v51 = (const char *)&__dst;
        else
          v51 = (const char *)__dst;
        v52 = *v236;
        v53 = (const char *)(*v236 + 16);
        v234 = v53;
        if (*(char *)(*v236 + 39) < 0)
        {
          v53 = *(const char **)(v52 + 16);
          v54 = *(_QWORD *)(v52 + 24);
        }
        else
        {
          v54 = *(unsigned __int8 *)(*v236 + 39);
        }
        v55 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v267);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v267);
          if ((_BYTE)v268 && (v267[23] & 0x80000000) != 0)
            operator delete(*(void **)v267);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v56 = byte_254A4A4F8;
        else
          v56 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v57 = byte_254A4A4F8[23];
        else
          v57 = *(_QWORD *)&byte_254A4A4F8[8];
        *(_QWORD *)v267 = os_log_create(v56, v53);
        v58 = &v267[8];
        if (v57 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v57 >= 0x17)
        {
          v59 = v7;
          v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v57 | 7) != 0x17)
            v60 = v57 | 7;
          v61 = v60 + 1;
          v58 = operator new(v60 + 1);
          *(_QWORD *)&v267[16] = v57;
          *(_QWORD *)&v268 = v61 | 0x8000000000000000;
          *(_QWORD *)&v267[8] = v58;
          v7 = v59;
        }
        else
        {
          BYTE7(v268) = v57;
          if (!v57)
          {
LABEL_91:
            v58[v57] = 0;
            BYTE8(v268) = 1;
            v62 = (char *)&v269;
            if (v54 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v54 >= 0x17)
            {
              v63 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v54 | 7) != 0x17)
                v63 = v54 | 7;
              v64 = v63 + 1;
              v62 = (char *)operator new(v63 + 1);
              v270 = v54;
              v271 = v64 | 0x8000000000000000;
              v269 = v62;
            }
            else
            {
              HIBYTE(v271) = v54;
              if (!v54)
              {
LABEL_99:
                v62[v54] = 0;
                v272 = 1;
                v65 = *(NSObject **)v267;
                if (SHIBYTE(v271) < 0)
                  operator delete(v269);
                if (BYTE8(v268) && SBYTE7(v268) < 0)
                  operator delete(*(void **)&v267[8]);
                if (*(_QWORD *)v267)
                  os_release(*(void **)v267);
                if (!v9 || !*(_QWORD *)(v9 + 24))
                {
                  os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG);
                  *(_DWORD *)v267 = 136315138;
                  *(_QWORD *)&v267[4] = v51;
                  v72 = (void *)_os_log_send_and_compose_impl();
                  if (v72)
                    free(v72);
                  goto LABEL_274;
                }
                v66 = _os_log_pack_size();
                v67 = (std::__shared_weak_count_vtbl *)operator new(v66, (std::align_val_t)8uLL);
                v68 = (std::__shared_weak_count *)operator new();
                v68->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v68->__shared_owners_ = 0;
                v68->__shared_weak_owners_ = 0;
                v68[1].__vftable = v67;
                v261[0] = v67;
                v261[1] = v67;
                v263 = 0;
                v264 = 0;
                v262 = v68;
                v69 = strlen(v51);
                if (v69 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                v70 = v69;
                if (v69 >= 0x17)
                {
                  v115 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v69 | 7) != 0x17)
                    v115 = v69 | 7;
                  v116 = v115 + 1;
                  v71 = (char *)operator new(v115 + 1);
                  *(_QWORD *)&v266 = v70;
                  *((_QWORD *)&v266 + 1) = v116 | 0x8000000000000000;
                  v265 = v71;
                }
                else
                {
                  HIBYTE(v266) = v69;
                  v71 = (char *)&v265;
                  if (!v69)
                  {
LABEL_190:
                    v71[v70] = 0;
                    v117 = v265;
                    v273[0] = v266;
                    *(uint64_t *)((char *)v273 + 7) = *(_QWORD *)((char *)&v266 + 7);
                    v118 = HIBYTE(v266);
                    v119 = operator new(0x38uLL);
                    v119[1] = 0;
                    v119[2] = 0;
                    v119[3] = off_24C9ABC20;
                    *v119 = &off_24C9ABBD0;
                    v120 = v273[0];
                    v119[4] = v117;
                    v119[5] = v120;
                    *(_QWORD *)((char *)v119 + 47) = *(uint64_t *)((char *)v273 + 7);
                    *((_BYTE *)v119 + 55) = v118;
                    memset(v273, 0, 15);
                    v121 = v264;
                    v263 = (char *)(v119 + 3);
                    v264 = (std::__shared_weak_count *)v119;
                    if (v121)
                    {
                      v122 = (unint64_t *)&v121->__shared_owners_;
                      do
                        v123 = __ldaxr(v122);
                      while (__stlxr(v123 - 1, v122));
                      if (!v123)
                      {
                        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                        std::__shared_weak_count::__release_weak(v121);
                      }
                    }
                    *(_OWORD *)v267 = *(_OWORD *)v261;
                    v124 = v263;
                    *(_QWORD *)&v267[16] = v262;
                    if (v262)
                    {
                      v125 = (unint64_t *)&v262->__shared_owners_;
                      do
                        v126 = __ldxr(v125);
                      while (__stxr(v126 + 1, v125));
                    }
                    v127 = v264;
                    *(_QWORD *)&v268 = v124;
                    *((_QWORD *)&v268 + 1) = v264;
                    if (v264)
                    {
                      v128 = (unint64_t *)&v264->__shared_owners_;
                      do
                        v129 = __ldxr(v128);
                      while (__stxr(v129 + 1, v128));
                      v269 = v124;
                      do
                        v130 = __ldaxr(v128);
                      while (__stlxr(v130 - 1, v128));
                      if (!v130)
                      {
                        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                        std::__shared_weak_count::__release_weak(v127);
                      }
                    }
                    else
                    {
                      v269 = v124;
                    }
                    v147 = v262;
                    if (v262)
                    {
                      v148 = (unint64_t *)&v262->__shared_owners_;
                      do
                        v149 = __ldaxr(v148);
                      while (__stlxr(v149 - 1, v148));
                      if (!v149)
                      {
                        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                        std::__shared_weak_count::__release_weak(v147);
                      }
                    }
                    v150 = *(_QWORD *)v267;
                    if (v269[31] >= 0)
                      v151 = v269 + 8;
                    else
                      v151 = (char *)*((_QWORD *)v269 + 1);
                    v152 = _os_log_pack_fill();
                    *(_DWORD *)v152 = 136315138;
                    *(_QWORD *)(v152 + 4) = v151;
                    v153 = (char *)operator new();
                    v154 = *(unsigned __int8 *)(v52 + 39);
                    v155 = *(const char **)(v52 + 16);
                    v156 = *(_QWORD *)(v52 + 24);
                    v157 = v268;
                    *(_OWORD *)(v153 + 8) = *(_OWORD *)&v267[8];
                    if ((v154 & 0x80u) != 0)
                      v154 = v156;
                    else
                      v155 = v234;
                    *(_QWORD *)v153 = v150;
                    *(_QWORD *)&v267[8] = 0;
                    *(_QWORD *)&v267[16] = 0;
                    *(_OWORD *)(v153 + 24) = v157;
                    v268 = 0uLL;
                    *((_QWORD *)v153 + 5) = v155;
                    *((_QWORD *)v153 + 6) = v154;
                    v153[56] = 2;
                    v265 = 0;
                    v261[0] = v153;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), v261);
                    v158 = v261[0];
                    v261[0] = 0;
                    if (v158)
                    {
                      v159 = (std::__shared_weak_count *)*((_QWORD *)v158 + 4);
                      if (v159)
                      {
                        v160 = (unint64_t *)&v159->__shared_owners_;
                        do
                          v161 = __ldaxr(v160);
                        while (__stlxr(v161 - 1, v160));
                        if (!v161)
                        {
                          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                          std::__shared_weak_count::__release_weak(v159);
                        }
                      }
                      v162 = (std::__shared_weak_count *)*((_QWORD *)v158 + 2);
                      if (v162)
                      {
                        v163 = (unint64_t *)&v162->__shared_owners_;
                        do
                          v164 = __ldaxr(v163);
                        while (__stlxr(v164 - 1, v163));
                        if (!v164)
                        {
                          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                          std::__shared_weak_count::__release_weak(v162);
                        }
                      }
                      MEMORY[0x212BC6398](v158, 0x10F0C40B62ED6C6);
                      v165 = v265;
                      v265 = 0;
                      if (v165)
                      {
                        v166 = (std::__shared_weak_count *)*((_QWORD *)v165 + 4);
                        if (v166)
                        {
                          v167 = (unint64_t *)&v166->__shared_owners_;
                          do
                            v168 = __ldaxr(v167);
                          while (__stlxr(v168 - 1, v167));
                          if (!v168)
                          {
                            ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                            std::__shared_weak_count::__release_weak(v166);
                          }
                        }
                        v169 = (std::__shared_weak_count *)*((_QWORD *)v165 + 2);
                        if (v169)
                        {
                          v170 = (unint64_t *)&v169->__shared_owners_;
                          do
                            v171 = __ldaxr(v170);
                          while (__stlxr(v171 - 1, v170));
                          if (!v171)
                          {
                            ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                            std::__shared_weak_count::__release_weak(v169);
                          }
                        }
                        MEMORY[0x212BC6398](v165, 0x10F0C40B62ED6C6);
                      }
                    }
                    v172 = (std::__shared_weak_count *)*((_QWORD *)&v268 + 1);
                    if (*((_QWORD *)&v268 + 1))
                    {
                      v173 = (unint64_t *)(*((_QWORD *)&v268 + 1) + 8);
                      do
                        v174 = __ldaxr(v173);
                      while (__stlxr(v174 - 1, v173));
                      if (!v174)
                      {
                        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                        std::__shared_weak_count::__release_weak(v172);
                      }
                    }
                    v175 = *(std::__shared_weak_count **)&v267[16];
                    if (*(_QWORD *)&v267[16])
                    {
                      v176 = (unint64_t *)(*(_QWORD *)&v267[16] + 8);
                      do
                        v177 = __ldaxr(v176);
                      while (__stlxr(v177 - 1, v176));
                      if (!v177)
                      {
                        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                        std::__shared_weak_count::__release_weak(v175);
                      }
                    }
LABEL_274:
                    if (v7)
                    {
                      v178 = (const char *)&__dst;
                      if (v247 < 0)
                        v178 = (const char *)__dst;
                      sub_20E8C003C((uint64_t)&v236, "%s", v178);
                      sub_20E863570((uint64_t)&v236);
                    }
                    sub_20E863570((uint64_t)&v236);
                    v179 = v244;
                    if (v244)
                    {
                      v180 = (unint64_t *)&v244->__shared_owners_;
                      do
                        v181 = __ldaxr(v180);
                      while (__stlxr(v181 - 1, v180));
                      if (!v181)
                      {
                        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
                        std::__shared_weak_count::__release_weak(v179);
                      }
                    }
                    if (SHIBYTE(v247) < 0)
                      operator delete(__dst);
                    v248[0] = *MEMORY[0x24BEDB7F0];
                    v182 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                    *(_QWORD *)((char *)v248 + *(_QWORD *)(v248[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                    v249 = v182;
                    v250 = MEMORY[0x24BEDB848] + 16;
                    if (v256 < 0)
                      operator delete(__p);
                    std::streambuf::~streambuf();
                    std::iostream::~basic_iostream();
                    MEMORY[0x212BC6290](v259);
                    return 1;
                  }
                }
                memcpy(v71, v51, v70);
                goto LABEL_190;
              }
            }
            memmove(v62, v53, v54);
            goto LABEL_99;
          }
        }
        memmove(v58, v56, v57);
        goto LABEL_91;
      }
    }
    memmove(v12, v48, v11);
    goto LABEL_70;
  }
  if (*(double *)(*(_QWORD *)*a2
                 + 176
                 * ((*(_QWORD *)(*a2 + 24) + a2[2])
                  % (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(*a2 + 8) - *(_QWORD *)*a2) >> 4))))
     + 1.5 < a4)
  {
    if (*(_BYTE *)(a1 + 768))
    {
      sub_20F1C222C(v273);
      if (**(int **)(v273[0] + 56) <= 2)
      {
        v19 = *(unsigned __int8 *)(v273[0] + 72);
        v20 = sub_20E8C31DC(v273[0], "OSLogSurrogateAppender", 1, 0);
        v21 = v20 ? v20 + 16 : 0;
        if (v19 || v20)
        {
          sub_20E863438((uint64_t)v248);
          sub_20E86A980(&v249, (uint64_t)"GetInertialStateAtTime Failed with TimestampTooFarAhead: Pose request timestamp=", 80);
          v22 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v22, (uint64_t)" is greater than allowed maximum pose request time of ", 54);
          v23 = (_QWORD *)std::ostream::operator<<();
          sub_20E86A980(v23, (uint64_t)" for the inertial state at timestamp=", 37);
          std::ostream::operator<<();
          sub_20E923E88(v248, v261);
          v236 = v273;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v238 = std::chrono::system_clock::now().__d_.__rep_;
          v239 = 2;
          v240 = "unknown file";
          v241 = 682;
          v243 = 0;
          v244 = 0;
          v242 = "unknown function";
          if (SHIBYTE(v262) >= 0)
            v24 = v261;
          else
            v24 = (void **)v261[0];
          v260 = (int **)v24;
          v25 = *v236;
          v26 = (uint64_t *)(*v236 + 16);
          if (*(char *)(*v236 + 39) < 0)
          {
            v28 = *(void ***)(v25 + 16);
            v27 = *(_QWORD *)(v25 + 24);
          }
          else
          {
            v27 = *(unsigned __int8 *)(*v236 + 39);
            v28 = (void **)(*v236 + 16);
          }
          __dst = v28;
          v246 = v27;
          v219 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v219 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v267);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v267);
            if ((_BYTE)v268 && (v267[23] & 0x80000000) != 0)
              operator delete(*(void **)v267);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v220 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v221 = byte_254A4A4F8;
          }
          else
          {
            v220 = *(_QWORD *)&byte_254A4A4F8[8];
            v221 = *(const char **)byte_254A4A4F8;
          }
          v265 = v221;
          *(_QWORD *)&v266 = v220;
          *(_QWORD *)v267 = os_log_create(v221, (const char *)__dst);
          sub_20E86E5A8(&v267[8], (uint64_t)&v265);
          sub_20E86E5A8(&v269, (uint64_t)&__dst);
          v222 = *(NSObject **)v267;
          sub_20E86E44C((uint64_t)v267);
          sub_20F1C6618(v21, v26, v222, OS_LOG_TYPE_DEBUG, (const char **)&v260);
          if (!v19)
            goto LABEL_358;
          v223 = v261;
          if (SHIBYTE(v262) < 0)
            v223 = (void **)v261[0];
LABEL_357:
          sub_20E8C003C((uint64_t)&v236, "%s", (const char *)v223);
          sub_20E863570((uint64_t)&v236);
LABEL_358:
          sub_20E863714((uint64_t)&v236);
          if (SHIBYTE(v262) < 0)
            operator delete(v261[0]);
          sub_20E863784((uint64_t)v248);
          return 2;
        }
      }
    }
    return 2;
  }
  if (a2[4] - a2[3] >= 0x40uLL && a2[7] - a2[6] > 0x3FuLL)
  {
    kdebug_trace();
    kdebug_trace();
    if (a3)
    {
      v41 = (double *)a2[4];
    }
    else if (*(double *)(a2[7] - 32) < a4 || (v41 = (double *)a2[4], *(v41 - 4) < a4))
    {
      if (*(_BYTE *)(a1 + 768))
      {
        sub_20F1C222C(v273);
        if (**(int **)(v273[0] + 56) <= 2)
        {
          v73 = *(unsigned __int8 *)(v273[0] + 72);
          v74 = sub_20E8C31DC(v273[0], "OSLogSurrogateAppender", 1, 0);
          v75 = v74 ? v74 + 16 : 0;
          if (v73 || v74)
          {
            sub_20E863438((uint64_t)v248);
            sub_20E86A980(&v249, (uint64_t)"GetInertialStateAtTime Failed with TimestampTooFarAhead: Pose request timestamp=", 80);
            v76 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v76, (uint64_t)" is greater than latest accel/gyro timestamps of ", 49);
            v77 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v77, (uint64_t)"/", 1);
            v78 = (_QWORD *)std::ostream::operator<<();
            v79 = sub_20E86A980(v78, (uint64_t)" and argument allow_extrapolate=", 32);
            v80 = sub_20E86A980(v79, (uint64_t)" false", 6);
            sub_20E86A980(v80, (uint64_t)" for the inertial state at timestamp=", 37);
            std::ostream::operator<<();
            sub_20E923E88(v248, v261);
            v236 = v273;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v238 = std::chrono::system_clock::now().__d_.__rep_;
            v239 = 2;
            v240 = "unknown file";
            v241 = 712;
            v243 = 0;
            v244 = 0;
            v242 = "unknown function";
            if (SHIBYTE(v262) >= 0)
              v81 = v261;
            else
              v81 = (void **)v261[0];
            v260 = (int **)v81;
            v82 = *v236;
            v83 = (uint64_t *)(*v236 + 16);
            if (*(char *)(*v236 + 39) < 0)
            {
              v85 = *(void ***)(v82 + 16);
              v84 = *(_QWORD *)(v82 + 24);
            }
            else
            {
              v84 = *(unsigned __int8 *)(*v236 + 39);
              v85 = (void **)(*v236 + 16);
            }
            __dst = v85;
            v246 = v84;
            v229 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v229 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)v267);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v267);
              if ((_BYTE)v268 && (v267[23] & 0x80000000) != 0)
                operator delete(*(void **)v267);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v230 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v231 = byte_254A4A4F8;
            }
            else
            {
              v230 = *(_QWORD *)&byte_254A4A4F8[8];
              v231 = *(const char **)byte_254A4A4F8;
            }
            v265 = v231;
            *(_QWORD *)&v266 = v230;
            *(_QWORD *)v267 = os_log_create(v231, (const char *)__dst);
            sub_20E86E5A8(&v267[8], (uint64_t)&v265);
            sub_20E86E5A8(&v269, (uint64_t)&__dst);
            v232 = *(NSObject **)v267;
            sub_20E86E44C((uint64_t)v267);
            sub_20F1C7220(v75, v83, v232, OS_LOG_TYPE_DEBUG, (const char **)&v260);
            if (!v73)
              goto LABEL_358;
            v223 = v261;
            if (SHIBYTE(v262) < 0)
              v223 = (void **)v261[0];
            goto LABEL_357;
          }
        }
      }
      return 2;
    }
    v42 = (double *)a2[3];
    if ((unint64_t)((char *)v41 - (char *)v42) >= 0x21)
    {
      v43 = v42 + 4;
      result = 3;
      while (v43 != v41)
      {
        v45 = *v43 - *(v43 - 4);
        v43 += 4;
        if (v45 > *(double *)(a1 + 760))
          return result;
      }
    }
    v112 = (double *)a2[6];
    v111 = (double *)a2[7];
    if ((unint64_t)((char *)v111 - (char *)v112) >= 0x21)
    {
      v113 = v112 + 4;
      result = 3;
      while (v113 != v111)
      {
        v114 = *v113 - *(v113 - 4);
        v113 += 4;
        if (v114 > *(double *)(a1 + 760))
          return result;
      }
    }
    if ((v42 == v41 || *(v41 - 4) + *(double *)(a1 + 760) >= a4)
      && (v112 == v111 || *(v111 - 4) + *(double *)(a1 + 760) >= a4))
    {
      return 0;
    }
  }
  else if (*(_BYTE *)(a1 + 768))
  {
    sub_20F1C222C(v273);
    if (**(int **)(v273[0] + 56) <= 2)
    {
      v29 = *(unsigned __int8 *)(v273[0] + 72);
      v30 = sub_20E8C31DC(v273[0], "OSLogSurrogateAppender", 1, 0);
      v31 = v30 ? v30 + 16 : 0;
      if (v29 || v30)
      {
        sub_20E863438((uint64_t)v248);
        sub_20E86A980(&v249, (uint64_t)"GetInertialStateAtTime Failed with NotEnoughMeasurements: Less than two accel or gyro measurements to propagate the state were present for pose request timestamp = ", 164);
        v32 = (_QWORD *)std::ostream::operator<<();
        sub_20E86A980(v32, (uint64_t)" and for the used inertial state at timestamp=", 46);
        std::ostream::operator<<();
        sub_20E923E88(v248, v261);
        v236 = v273;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v238 = std::chrono::system_clock::now().__d_.__rep_;
        v239 = 2;
        v240 = "unknown file";
        v241 = 694;
        v243 = 0;
        v244 = 0;
        v242 = "unknown function";
        if (SHIBYTE(v262) >= 0)
          v33 = v261;
        else
          v33 = (void **)v261[0];
        v260 = (int **)v33;
        v34 = *v236;
        v35 = (uint64_t *)(*v236 + 16);
        if (*(char *)(*v236 + 39) < 0)
        {
          v37 = *(void ***)(v34 + 16);
          v36 = *(_QWORD *)(v34 + 24);
        }
        else
        {
          v36 = *(unsigned __int8 *)(*v236 + 39);
          v37 = (void **)(*v236 + 16);
        }
        __dst = v37;
        v246 = v36;
        v224 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v224 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v267);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v267);
          if ((_BYTE)v268 && (v267[23] & 0x80000000) != 0)
            operator delete(*(void **)v267);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        v225 = byte_254A4A4F8[23];
        if (byte_254A4A4F8[23] >= 0)
        {
          v226 = byte_254A4A4F8;
        }
        else
        {
          v225 = *(_QWORD *)&byte_254A4A4F8[8];
          v226 = *(const char **)byte_254A4A4F8;
        }
        v265 = v226;
        *(_QWORD *)&v266 = v225;
        *(_QWORD *)v267 = os_log_create(v226, (const char *)__dst);
        sub_20E86E5A8(&v267[8], (uint64_t)&v265);
        sub_20E86E5A8(&v269, (uint64_t)&__dst);
        v227 = *(NSObject **)v267;
        sub_20E86E44C((uint64_t)v267);
        sub_20F1C6C1C(v31, v35, v227, OS_LOG_TYPE_DEBUG, (const char **)&v260);
        if (v29)
        {
          v228 = v261;
          if (SHIBYTE(v262) < 0)
            v228 = (void **)v261[0];
          sub_20E8C003C((uint64_t)&v236, "%s", (const char *)v228);
          sub_20E863570((uint64_t)&v236);
        }
        sub_20E863714((uint64_t)&v236);
        if (SHIBYTE(v262) < 0)
          operator delete(v261[0]);
        sub_20E863784((uint64_t)v248);
      }
    }
  }
  return 3;
}

void sub_20F1C08F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  uint64_t v66;

  if (*(_BYTE *)(v66 - 184) && *(char *)(v66 - 185) < 0)
    operator delete(*(void **)(v66 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  if (a66 < 0)
  {
    operator delete(__p);
    sub_20E863784((uint64_t)&a25);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_20F1C0CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20F1C0CB0(_QWORD *a1, double a2, double a3)
{
  double *v6;
  unint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  double *v28;
  int64_t v29;
  unint64_t v30;
  double *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  double *v37;
  uint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  double *v49;
  char *v50;
  int64_t v51;
  unint64_t v52;
  double *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  double *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;

  v6 = (double *)a1[87];
  a1[88] = v6;
  v7 = a1[89];
  if ((unint64_t)v6 >= v7)
  {
    v9 = v7 - (_QWORD)v6;
    v10 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 1)
      v10 = 1;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
      goto LABEL_71;
    v13 = v12;
    v14 = (double *)operator new(8 * v12);
    a1[87] = v14;
    *v14 = a3;
    v8 = v14 + 1;
    a1[88] = v14 + 1;
    a1[89] = &v14[v13];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = a3;
    v8 = v6 + 1;
  }
  v15 = (void **)(a1 + 87);
  a1[88] = v8;
  if (a2 - a3 > 0.0)
  {
    v16 = vcvtmd_u64_f64((a2 - a3) / 0.005);
    if (v16)
    {
      v17 = 0;
      while (1)
      {
        v19 = (double)(unint64_t)++v17 * 0.005 + a3;
        if (v19 >= a2 + -1.0e-12)
          goto LABEL_15;
        v20 = a1[89];
        if ((unint64_t)v8 >= v20)
          break;
        *v8 = v19;
        v18 = (uint64_t)(v8 + 1);
LABEL_14:
        a1[88] = v18;
        v8 = (double *)v18;
LABEL_15:
        if (v17 == v16)
          goto LABEL_44;
      }
      v21 = (double *)*v15;
      v22 = (char *)v8 - (_BYTE *)*v15;
      v23 = v22 >> 3;
      v24 = (v22 >> 3) + 1;
      if (v24 >> 61)
        goto LABEL_70;
      v25 = v20 - (_QWORD)v21;
      if (v25 >> 2 > v24)
        v24 = v25 >> 2;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        if (v26 >> 61)
          goto LABEL_71;
        v27 = operator new(8 * v26);
        v28 = (double *)&v27[8 * v23];
        *v28 = v19;
        v18 = (uint64_t)(v28 + 1);
        v29 = (char *)v8 - (char *)v21;
        if (v8 == v21)
          goto LABEL_32;
      }
      else
      {
        v27 = 0;
        v28 = (double *)(8 * v23);
        *(double *)(8 * v23) = v19;
        v18 = 8 * v23 + 8;
        v29 = (char *)v8 - (char *)v21;
        if (v8 == v21)
          goto LABEL_32;
      }
      v30 = v29 - 8;
      if (v30 >= 0x168)
      {
        v33 = ((char *)(v8 - 1) - (char *)v21) & 0xFFFFFFFFFFFFFFF8;
        if (&v27[v22 - 8 - v33] > &v27[v22 - 8])
        {
          v31 = v8;
        }
        else if ((double *)((char *)v8 - v33 - 8) > v8 - 1)
        {
          v31 = v8;
        }
        else if ((unint64_t)((char *)v8 - v27 - v22) >= 0x20)
        {
          v34 = (v30 >> 3) + 1;
          v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = &v8[v35 / 0xFFFFFFFFFFFFFFF8];
          v28 = (double *)((char *)v28 - v35);
          v36 = &v27[8 * v23 - 16];
          v37 = v8 - 2;
          v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v39 = *(_OWORD *)v37;
            *(v36 - 1) = *((_OWORD *)v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 4;
            v38 -= 4;
          }
          while (v38);
          if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_32:
            a1[87] = v28;
            a1[88] = v18;
            a1[89] = &v27[8 * v26];
            if (v21)
              operator delete(v21);
            goto LABEL_14;
          }
        }
        else
        {
          v31 = v8;
        }
      }
      else
      {
        v31 = v8;
      }
      do
      {
        v32 = *((_QWORD *)v31-- - 1);
        *((_QWORD *)v28-- - 1) = v32;
      }
      while (v31 != v21);
      goto LABEL_32;
    }
  }
LABEL_44:
  if (vabdd_f64(*(v8 - 1), a2) <= 0.0001)
  {
    *(v8 - 1) = a2;
    return;
  }
  v40 = a1[89];
  if ((unint64_t)v8 >= v40)
  {
    v42 = (double *)*v15;
    v43 = (char *)v8 - (_BYTE *)*v15;
    v44 = v43 >> 3;
    v45 = (v43 >> 3) + 1;
    if (v45 >> 61)
LABEL_70:
      sub_20E867F44();
    v46 = v40 - (_QWORD)v42;
    if (v46 >> 2 > v45)
      v45 = v46 >> 2;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (!v47)
    {
      v48 = 0;
      v49 = (double *)(8 * v44);
      v50 = 0;
      *(double *)(8 * v44) = a2;
      v41 = 8 * v44 + 8;
      v51 = (char *)v8 - (char *)v42;
      if (v8 == v42)
        goto LABEL_67;
LABEL_59:
      v52 = v51 - 8;
      if (v52 >= 0x58)
      {
        if ((unint64_t)((char *)v8 - &v48[v43]) >= 0x20)
        {
          v54 = (v52 >> 3) + 1;
          v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
          v53 = &v8[v55 / 0xFFFFFFFFFFFFFFF8];
          v49 = (double *)((char *)v49 - v55);
          v56 = &v48[8 * v44 - 16];
          v57 = v8 - 2;
          v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v59 = *(_OWORD *)v57;
            *(v56 - 1) = *((_OWORD *)v57 - 1);
            *v56 = v59;
            v56 -= 2;
            v57 -= 4;
            v58 -= 4;
          }
          while (v58);
          if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_67;
        }
        else
        {
          v53 = v8;
        }
      }
      else
      {
        v53 = v8;
      }
      do
      {
        v60 = *((_QWORD *)v53-- - 1);
        *((_QWORD *)v49-- - 1) = v60;
      }
      while (v53 != v42);
LABEL_67:
      a1[87] = v49;
      a1[88] = v41;
      a1[89] = v50;
      if (v42)
        operator delete(v42);
      goto LABEL_69;
    }
    if (!(v47 >> 61))
    {
      v48 = operator new(8 * v47);
      v49 = (double *)&v48[8 * v44];
      v50 = &v48[8 * v47];
      *v49 = a2;
      v41 = (uint64_t)(v49 + 1);
      v51 = (char *)v8 - (char *)v42;
      if (v8 == v42)
        goto LABEL_67;
      goto LABEL_59;
    }
LABEL_71:
    sub_20E877A38();
  }
  *v8 = a2;
  v41 = (uint64_t)(v8 + 1);
LABEL_69:
  a1[88] = v41;
}

uint64_t sub_20F1C10C0(unint64_t *a1, int a2, double a3, double a4, double a5)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  size_t v11;
  const char *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const char *v20;
  double *v21;
  double *v22;
  unint64_t v23;
  double *v24;
  double *v25;
  double *v26;
  double v27;
  BOOL v28;
  uint64_t v30;
  unsigned __int8 v31;
  const char *v32;
  size_t v33;
  void *v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *p_p;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  size_t v45;
  std::__shared_weak_count_vtbl *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unsigned __int8 v80;
  const char *v81;
  size_t v82;
  void *v83;
  unint64_t v84;
  const char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  size_t v95;
  std::__shared_weak_count_vtbl *v96;
  std::__shared_weak_count *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  void *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v131;
  uint64_t *v132;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v134;
  int v135;
  const char *v136;
  int v137;
  const char *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  void *object;
  void *v143[2];
  __int128 v144;
  void *__p;
  size_t v146;
  unint64_t v147;
  char v148;
  uint64_t v149;
  _QWORD v150[2];

  if (a5 > a3)
  {
    if (a2)
    {
      sub_20F1C222C(&v141);
      if (**(int **)(v141 + 56) <= 2)
      {
        v6 = *(unsigned __int8 *)(v141 + 72);
        v7 = sub_20E8C31DC(v141, "OSLogSurrogateAppender", 1, 0);
        v8 = v7;
        if (v6 || v7 != 0)
        {
          v132 = &v141;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v134 = std::chrono::system_clock::now().__d_.__rep_;
          v135 = 2;
          v136 = "unknown file";
          v137 = 986;
          v139 = 0;
          v140 = 0;
          v138 = "unknown function";
          v10 = v141;
          if (*(char *)(v141 + 39) < 0)
          {
            v12 = *(const char **)(v141 + 16);
            v11 = *(_QWORD *)(v141 + 24);
          }
          else
          {
            v11 = *(unsigned __int8 *)(v141 + 39);
            v12 = (const char *)(*v132 + 16);
          }
          v131 = *v132 + 16;
          v31 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
            if ((_BYTE)v144 && SHIBYTE(v143[1]) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v32 = byte_254A4A4F8;
          else
            v32 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v33 = byte_254A4A4F8[23];
          else
            v33 = *(_QWORD *)&byte_254A4A4F8[8];
          object = os_log_create(v32, v12);
          v34 = v143;
          if (v33 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v33 >= 0x17)
          {
            v35 = v8;
            v36 = v12;
            v37 = v10;
            v38 = v6;
            v39 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v33 | 7) != 0x17)
              v39 = v33 | 7;
            v40 = v39 + 1;
            v34 = operator new(v39 + 1);
            v143[1] = (void *)v33;
            *(_QWORD *)&v144 = v40 | 0x8000000000000000;
            v143[0] = v34;
            v6 = v38;
            v10 = v37;
            v12 = v36;
            v8 = v35;
          }
          else
          {
            BYTE7(v144) = v33;
            if (!v33)
            {
LABEL_54:
              *((_BYTE *)v34 + v33) = 0;
              BYTE8(v144) = 1;
              p_p = &__p;
              if (v11 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v11 >= 0x17)
              {
                v42 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v11 | 7) != 0x17)
                  v42 = v11 | 7;
                v43 = v42 + 1;
                p_p = operator new(v42 + 1);
                v146 = v11;
                v147 = v43 | 0x8000000000000000;
                __p = p_p;
              }
              else
              {
                HIBYTE(v147) = v11;
                if (!v11)
                  goto LABEL_62;
              }
              memmove(p_p, v12, v11);
LABEL_62:
              *((_BYTE *)p_p + v11) = 0;
              v148 = 1;
              v44 = object;
              if (SHIBYTE(v147) < 0)
                operator delete(__p);
              if (BYTE8(v144) && SBYTE7(v144) < 0)
                operator delete(v143[0]);
              if (object)
                os_release(object);
              if (v8 && *(_QWORD *)(v8 + 24))
              {
                v45 = _os_log_pack_size();
                v46 = (std::__shared_weak_count_vtbl *)operator new(v45, (std::align_val_t)8uLL);
                v47 = (std::__shared_weak_count *)operator new();
                v48 = v47;
                v47->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v47->__shared_owners_;
                v47->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v47->__shared_weak_owners_ = 0;
                v47[1].__vftable = v46;
                object = v46;
                v143[0] = v46;
                v143[1] = v47;
                do
                  v50 = __ldxr(p_shared_owners);
                while (__stxr(v50 + 1, p_shared_owners));
                v144 = 0uLL;
                __p = 0;
                do
                  v51 = __ldaxr(p_shared_owners);
                while (__stlxr(v51 - 1, p_shared_owners));
                if (!v51)
                {
                  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                  std::__shared_weak_count::__release_weak(v48);
                }
                v52 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v53 = operator new();
                v54 = *(unsigned __int8 *)(v10 + 39);
                v55 = v131;
                if ((v54 & 0x80u) != 0)
                {
                  v55 = *(_QWORD *)(v10 + 16);
                  v54 = *(_QWORD *)(v10 + 24);
                }
                *(_QWORD *)v53 = v52;
                *(_OWORD *)(v53 + 8) = *(_OWORD *)v143;
                v143[0] = 0;
                v143[1] = 0;
                *(_OWORD *)(v53 + 24) = v144;
                v144 = 0uLL;
                *(_QWORD *)(v53 + 40) = v55;
                *(_QWORD *)(v53 + 48) = v54;
                *(_BYTE *)(v53 + 56) = 2;
                v149 = 0;
                v150[0] = v53;
                (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v150);
                v56 = v150[0];
                v150[0] = 0;
                if (v56)
                {
                  v57 = *(std::__shared_weak_count **)(v56 + 32);
                  if (v57)
                  {
                    v58 = (unint64_t *)&v57->__shared_owners_;
                    do
                      v59 = __ldaxr(v58);
                    while (__stlxr(v59 - 1, v58));
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                      std::__shared_weak_count::__release_weak(v57);
                    }
                  }
                  v60 = *(std::__shared_weak_count **)(v56 + 16);
                  if (v60)
                  {
                    v61 = (unint64_t *)&v60->__shared_owners_;
                    do
                      v62 = __ldaxr(v61);
                    while (__stlxr(v62 - 1, v61));
                    if (!v62)
                    {
                      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                      std::__shared_weak_count::__release_weak(v60);
                    }
                  }
                  MEMORY[0x212BC6398](v56, 0x10F0C40B62ED6C6);
                  v63 = v149;
                  v149 = 0;
                  if (v63)
                  {
                    v64 = *(std::__shared_weak_count **)(v63 + 32);
                    if (v64)
                    {
                      v65 = (unint64_t *)&v64->__shared_owners_;
                      do
                        v66 = __ldaxr(v65);
                      while (__stlxr(v66 - 1, v65));
                      if (!v66)
                      {
                        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                        std::__shared_weak_count::__release_weak(v64);
                      }
                    }
                    v67 = *(std::__shared_weak_count **)(v63 + 16);
                    if (v67)
                    {
                      v68 = (unint64_t *)&v67->__shared_owners_;
                      do
                        v69 = __ldaxr(v68);
                      while (__stlxr(v69 - 1, v68));
                      if (!v69)
                      {
                        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                        std::__shared_weak_count::__release_weak(v67);
                      }
                    }
                    MEMORY[0x212BC6398](v63, 0x10F0C40B62ED6C6);
                  }
                }
                v70 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
                if (*((_QWORD *)&v144 + 1))
                {
                  v71 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                v73 = (std::__shared_weak_count *)v143[1];
                if (v143[1])
                {
                  v74 = (unint64_t *)((char *)v143[1] + 8);
                  do
                    v75 = __ldaxr(v74);
                  while (__stlxr(v75 - 1, v74));
                  if (!v75)
                  {
                    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                    std::__shared_weak_count::__release_weak(v73);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG);
                LOWORD(object) = 0;
                v76 = (void *)_os_log_send_and_compose_impl();
                if (v76)
                  free(v76);
              }
              if (v6)
              {
                sub_20E8C003C((uint64_t)&v132, "Error in GetPredictionBundlePoseSmoothing: timestamp_apply_state_update is after pose query timestamp. No change in interp_timestamps.");
                sub_20E863570((uint64_t)&v132);
              }
              sub_20E863570((uint64_t)&v132);
              v77 = v140;
              if (v140)
              {
                v78 = (unint64_t *)&v140->__shared_owners_;
                do
                  v79 = __ldaxr(v78);
                while (__stlxr(v79 - 1, v78));
                if (!v79)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
              }
              return ((uint64_t)(a1[1] - *a1) >> 3) - 1;
            }
          }
          memmove(v34, v32, v33);
          goto LABEL_54;
        }
      }
    }
    return ((uint64_t)(a1[1] - *a1) >> 3) - 1;
  }
  if (a5 < a4)
  {
    if (!a2)
      return 0;
    sub_20F1C222C(&v141);
    if (**(int **)(v141 + 56) > 2)
      return 0;
    v13 = *(unsigned __int8 *)(v141 + 72);
    v14 = sub_20E8C31DC(v141, "OSLogSurrogateAppender", 1, 0);
    v15 = v14;
    if (!v13 && v14 == 0)
      return 0;
    v132 = &v141;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v134 = std::chrono::system_clock::now().__d_.__rep_;
    v135 = 2;
    v136 = "unknown file";
    v137 = 993;
    v139 = 0;
    v140 = 0;
    v138 = "unknown function";
    v17 = v141;
    v18 = v141 + 16;
    if (*(char *)(v141 + 39) < 0)
    {
      v20 = *(const char **)(v141 + 16);
      v19 = *(_QWORD *)(v141 + 24);
    }
    else
    {
      v19 = *(unsigned __int8 *)(v141 + 39);
      v20 = (const char *)(*v132 + 16);
    }
    v80 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v144 && SHIBYTE(v143[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v81 = byte_254A4A4F8;
    else
      v81 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v82 = byte_254A4A4F8[23];
    else
      v82 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v81, v20);
    v83 = v143;
    if (v82 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v82 >= 0x17)
    {
      v84 = v15;
      v85 = v20;
      v86 = v17;
      v87 = v13;
      v88 = v18;
      v89 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v82 | 7) != 0x17)
        v89 = v82 | 7;
      v90 = v89 + 1;
      v83 = operator new(v89 + 1);
      v143[1] = (void *)v82;
      *(_QWORD *)&v144 = v90 | 0x8000000000000000;
      v143[0] = v83;
      v18 = v88;
      v13 = v87;
      v17 = v86;
      v20 = v85;
      v15 = v84;
    }
    else
    {
      BYTE7(v144) = v82;
      if (!v82)
      {
LABEL_143:
        *((_BYTE *)v83 + v82) = 0;
        BYTE8(v144) = 1;
        v91 = &__p;
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v19 >= 0x17)
        {
          v92 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v92 = v19 | 7;
          v93 = v92 + 1;
          v91 = operator new(v92 + 1);
          v146 = v19;
          v147 = v93 | 0x8000000000000000;
          __p = v91;
        }
        else
        {
          HIBYTE(v147) = v19;
          if (!v19)
            goto LABEL_151;
        }
        memmove(v91, v20, v19);
LABEL_151:
        *((_BYTE *)v91 + v19) = 0;
        v148 = 1;
        v94 = object;
        if (SHIBYTE(v147) < 0)
          operator delete(__p);
        if (BYTE8(v144) && SBYTE7(v144) < 0)
          operator delete(v143[0]);
        if (object)
          os_release(object);
        if (v15 && *(_QWORD *)(v15 + 24))
        {
          v95 = _os_log_pack_size();
          v96 = (std::__shared_weak_count_vtbl *)operator new(v95, (std::align_val_t)8uLL);
          v97 = (std::__shared_weak_count *)operator new();
          v98 = v97;
          v97->__shared_owners_ = 0;
          v99 = (unint64_t *)&v97->__shared_owners_;
          v97->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v97->__shared_weak_owners_ = 0;
          v97[1].__vftable = v96;
          object = v96;
          v143[0] = v96;
          v143[1] = v97;
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
          v144 = 0uLL;
          __p = 0;
          do
            v101 = __ldaxr(v99);
          while (__stlxr(v101 - 1, v99));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v98);
          }
          v102 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v103 = operator new();
          v104 = *(unsigned __int8 *)(v17 + 39);
          if ((v104 & 0x80u) == 0)
            v105 = v18;
          else
            v105 = *(_QWORD *)(v17 + 16);
          if ((v104 & 0x80u) != 0)
            v104 = *(_QWORD *)(v17 + 24);
          *(_QWORD *)v103 = v102;
          *(_OWORD *)(v103 + 8) = *(_OWORD *)v143;
          v143[0] = 0;
          v143[1] = 0;
          *(_OWORD *)(v103 + 24) = v144;
          v144 = 0uLL;
          *(_QWORD *)(v103 + 40) = v105;
          *(_QWORD *)(v103 + 48) = v104;
          *(_BYTE *)(v103 + 56) = 2;
          v149 = 0;
          v150[0] = v103;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v15 + 24) + 40))(*(_QWORD *)(v15 + 24), v150);
          v106 = v150[0];
          v150[0] = 0;
          if (v106)
          {
            v107 = *(std::__shared_weak_count **)(v106 + 32);
            if (v107)
            {
              v108 = (unint64_t *)&v107->__shared_owners_;
              do
                v109 = __ldaxr(v108);
              while (__stlxr(v109 - 1, v108));
              if (!v109)
              {
                ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                std::__shared_weak_count::__release_weak(v107);
              }
            }
            v110 = *(std::__shared_weak_count **)(v106 + 16);
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            MEMORY[0x212BC6398](v106, 0x10F0C40B62ED6C6);
            v113 = v149;
            v149 = 0;
            if (v113)
            {
              v114 = *(std::__shared_weak_count **)(v113 + 32);
              if (v114)
              {
                v115 = (unint64_t *)&v114->__shared_owners_;
                do
                  v116 = __ldaxr(v115);
                while (__stlxr(v116 - 1, v115));
                if (!v116)
                {
                  ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                  std::__shared_weak_count::__release_weak(v114);
                }
              }
              v117 = *(std::__shared_weak_count **)(v113 + 16);
              if (v117)
              {
                v118 = (unint64_t *)&v117->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
              MEMORY[0x212BC6398](v113, 0x10F0C40B62ED6C6);
            }
          }
          v120 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
          if (*((_QWORD *)&v144 + 1))
          {
            v121 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
            do
              v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (!v122)
            {
              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
              std::__shared_weak_count::__release_weak(v120);
            }
          }
          v123 = (std::__shared_weak_count *)v143[1];
          if (v143[1])
          {
            v124 = (unint64_t *)((char *)v143[1] + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
        }
        else
        {
          os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG);
          LOWORD(object) = 0;
          v126 = (void *)_os_log_send_and_compose_impl();
          if (v126)
            free(v126);
        }
        if (v13)
        {
          sub_20E8C003C((uint64_t)&v132, "Error in GetPredictionBundlePoseSmoothing: timestamp_apply_state_update is before state timestamp No change in interp_timestamps.");
          sub_20E863570((uint64_t)&v132);
        }
        sub_20E863570((uint64_t)&v132);
        v127 = v140;
        if (v140)
        {
          v128 = (unint64_t *)&v140->__shared_owners_;
          do
            v129 = __ldaxr(v128);
          while (__stlxr(v129 - 1, v128));
          if (!v129)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        return 0;
      }
    }
    memmove(v83, v81, v82);
    goto LABEL_143;
  }
  if (a5 == a3 || a3 <= a5)
    return ((uint64_t)(a1[1] - *a1) >> 3) - 1;
  object = *(void **)&a5;
  v21 = (double *)*a1;
  v22 = (double *)a1[1];
  v23 = (uint64_t)((uint64_t)v22 - *a1) >> 3;
  if (v22 == (double *)*a1)
    goto LABEL_126;
  v24 = (double *)*a1;
  do
  {
    v25 = &v24[v23 >> 1];
    v27 = *v25;
    v26 = v25 + 1;
    v28 = v27 < a5;
    if (v27 >= a5)
      v23 >>= 1;
    else
      v23 += ~(v23 >> 1);
    if (v28)
      v24 = v26;
  }
  while (v23);
  v23 = v24 - v21;
  if (v22 == v24 || v21 == v24)
  {
    v30 = v22 == v24 ? -1 : 0;
    v24 += v30;
  }
  else if (a5 - *(v24 - 1) < *v24 - a5)
  {
    --v24;
  }
  if (vabdd_f64(*v24, a5) < 0.0001)
    return v24 - v21;
LABEL_126:
  sub_20F1C5A3C(a1, &v21[v23], 1uLL, (uint64_t *)&object);
  return v23;
}

void sub_20F1C1EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a29)
  {
    if (a28 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F1C1F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_20E86E8C4((uint64_t *)(v5 - 96));
  sub_20E86E8C4((uint64_t *)(v5 - 104));
  sub_20E86E658((uint64_t)va1);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1C1FA0()
{
  JUMPOUT(0x20F1C1FA8);
}

void sub_20F1C1FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1C1FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1C1FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *object,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a30 && a29 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F1C2098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t a5, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10, double a11, float64x2_t a12)
{
  uint64_t v14;
  uint64_t v16;
  float64x2_t v17;
  double v18;
  float64x2_t v19;
  double v20;
  double v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  _QWORD v35[4];

  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 624);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a1 + 672);
  v14 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != v14 && *(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
  {
    v16 = a1 + 296;
    if (sub_20FDB417C(a1 + 296, a1 + 648, *(double **)a2, v14, a4, a5, a6, a7, a8, a9, a10, a11, a12))
    {
      if (sub_20FDB417C(v16, a1 + 672, *(double **)a3, *(_QWORD *)(a3 + 8), a4, v17, v18, v19, v20, v21, v22, v23, v24))
      {
        v25 = *(_QWORD *)(a1 + 656);
        v26 = *(_QWORD *)(a1 + 648);
        if (v25 - v26 != *(_QWORD *)(a1 + 680) - *(_QWORD *)(a1 + 672))
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 870, (uint64_t)"resampled_gyro_.size() == resampled_accel_.size()", 49, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v25 = *(_QWORD *)(a1 + 656);
          v26 = *(_QWORD *)(a1 + 648);
        }
        if (v25 != v26)
        {
          v27 = 0;
          v28 = 0;
          do
          {
            v33 = 0xBFF0000000000000;
            v34 = 0u;
            memset(v35, 0, sizeof(v35));
            v29 = v26 + v27;
            v30 = *(_OWORD *)(v29 + 8);
            v35[0] = *(_QWORD *)(v29 + 24);
            v34 = v30;
            v31 = *(_QWORD *)(a1 + 672) + v27;
            v32 = *(_QWORD *)(v31 + 24);
            *(_OWORD *)&v35[1] = *(_OWORD *)(v31 + 8);
            v35[3] = v32;
            v33 = *(_QWORD *)v31;
            sub_20F1C4690((void **)(a1 + 624), (uint64_t)&v33);
            ++v28;
            v26 = *(_QWORD *)(a1 + 648);
            v27 += 32;
          }
          while (v28 < (*(_QWORD *)(a1 + 656) - v26) >> 5);
        }
      }
    }
  }
}

void sub_20F1C222C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68158);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68158))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68150);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68158);
  }
  *a1 = qword_254A68150;
}

void sub_20F1C22C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68158);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68158);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1C2320(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, double a7)
{
  char *v10;
  char v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v31;
  int v32;
  char v33;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unint64_t v48;
  int v49;
  char v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  _BYTE *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  const char *v64;
  size_t v65;
  _QWORD *v66;
  _QWORD *v67;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v68;
  uint64_t v70;
  _QWORD *v71;
  BOOL v72;
  _QWORD *v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  void *v83;
  void *v84;
  char *v85;
  char *v86;
  uint64_t result;
  unsigned __int8 v88;
  const char *v89;
  size_t v90;
  __int128 *v91;
  uint64_t v92;
  uint64_t v93;
  void *p_p;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  size_t v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  unint64_t *p_shared_owners;
  unint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  char *v133;
  double v134;
  uint64_t v135;
  double *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _QWORD *v149;
  unint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _BYTE *v159;
  _QWORD *v160;
  int64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  _OWORD *v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  char *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char *v178;
  char *v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  char *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  char *v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  char *v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  char *v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  char *v236;
  double v237;
  void **v238;
  uint64_t v239;
  float64x2_t v240;
  double v241;
  float64x2_t v242;
  double v243;
  double v244;
  float64x2_t v245;
  double v246;
  float64x2_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t i;
  int v252;
  unint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  const char *p_category;
  uint64_t v257;
  uint64_t *v258;
  char *v259;
  char *v260;
  int v261;
  void *v262;
  _QWORD *v263;
  uint64_t v264;
  double v265;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v266;
  BOOL v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  _BOOL4 v272;
  uint64_t v273;
  void *v274;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v275;
  BOOL v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  _BOOL4 v281;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v282;
  uint64_t v283;
  _BOOL4 v284;
  uint64_t v285;
  uint64_t v286;
  double v287;
  uint64_t v288;
  unint64_t v289;
  BOOL v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v294;
  _BOOL4 v295;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v296;
  _BOOL4 v297;
  _BOOL4 v298;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v299;
  uint64_t v300;
  unint64_t v301;
  BOOL v302;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v303;
  unint64_t v304;
  unint64_t v305;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v306;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v307;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v308;
  _BOOL4 v309;
  unsigned __int8 v310;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v311;
  const char *v312;
  NSObject *v313;
  unsigned __int8 v314;
  uint64_t v315;
  const char *v316;
  NSObject *v317;
  const char *v318;
  uint64_t v322;
  uint64_t v323;
  const char *v324;
  void **v325;
  void **v326;
  uint64_t v327;
  const char *v328;
  uint64_t *v329;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v330;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v331;
  int v332;
  const char *v333;
  int v334;
  const char *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339[2];
  uint64_t v340[2];
  __int128 category;
  uint64_t v342;
  void *v343;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v345;
  int v346;
  const char *v347;
  uint64_t v348;
  const char *v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  void *object;
  __int128 v353;
  __int128 v354;
  void *__p;
  size_t v356;
  unint64_t v357;
  char v358;
  void *v359;
  void *v360;
  char v361;
  uint64_t v362;

  v362 = *MEMORY[0x24BDAC8D0];
  if (a6)
    v10 = (char *)(a5 + 1);
  else
    v10 = (char *)a5;
  v11 = *v10;
  v12 = *(uint64_t ***)(a1 + 520);
  *(_QWORD *)(a1 + 528) = v12;
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a1 + 592);
  *(_BYTE *)(a1 + 616) = 0;
  v13 = (uint64_t *)(a1 + 8);
  v14 = *(uint64_t **)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 536);
  if ((unint64_t)v12 >= v15)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v12) >> 3);
    v18 = 2 * v17;
    if (2 * v17 <= 1)
      v18 = 1;
    if (v17 >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v18;
    if (v19 > 0xAAAAAAAAAAAAAAALL)
LABEL_405:
      sub_20E877A38();
    v20 = 24 * v19;
    v21 = (char *)operator new(24 * v19);
    *(_QWORD *)v21 = v13;
    v22 = &v21[v20];
    v21[8] = 1;
    *((_QWORD *)v21 + 2) = v14;
    v16 = v21 + 24;
    *(_QWORD *)(a1 + 520) = v21;
    *(_QWORD *)(a1 + 528) = v21 + 24;
    *(_QWORD *)(a1 + 536) = v22;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v12 = v13;
    *((_BYTE *)v12 + 8) = 1;
    v12[2] = v14;
    v16 = v12 + 3;
  }
  *(_QWORD *)(a1 + 528) = v16;
  v23 = a1;
  v24 = *(_QWORD *)(a1 + 96);
  v327 = v23;
  if (v24 != *(_QWORD *)(v23 + 48))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 569, (uint64_t)"smooth_states_.size() == states_.size()", 39, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_409;
    }
    v24 = *(_QWORD *)(v327 + 48);
  }
  if (!v24)
  {
    v34 = 0;
    v33 = 1;
    v35 = v327;
    v36 = *(_QWORD *)(v327 + 96);
    if (v36)
      goto LABEL_26;
LABEL_51:
    v51 = 0;
    v50 = 1;
    v52 = (_QWORD *)v327;
    v322 = v327 + 592;
    v323 = v327 + 568;
    if (v33)
      goto LABEL_34;
    goto LABEL_52;
  }
  v25 = 0;
  v26 = 0;
  v27 = v24;
  do
  {
    v28 = v27 >> 1;
    v29 = (v27 >> 1) + v26;
    if (*(double *)(*(_QWORD *)(v327 + 8)
                   + 176
                   * ((v29 + *(_QWORD *)(v327 + 32))
                    % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                       * ((uint64_t)(*(_QWORD *)(v327 + 16) - *(_QWORD *)(v327 + 8)) >> 4)))) <= a7)
    {
      v26 = v29 + 1;
      v25 = v29 + 1 == v24;
      v28 = v27 + ~v28;
    }
    v27 = v28;
  }
  while (v28);
  v30 = !v25;
  v31 = v26 - 1;
  v32 = v30 && v26 == 0;
  v33 = v32 | (v26 - 1 == v24);
  if (v32)
    v34 = v24;
  else
    v34 = v31;
  v35 = v327;
  v36 = *(_QWORD *)(v327 + 96);
  if (!v36)
    goto LABEL_51;
LABEL_26:
  v37 = 0;
  v38 = 0;
  v39 = *(_QWORD *)(v35 + 80);
  v41 = v35 + 56;
  v40 = *(_QWORD *)(v35 + 56);
  v42 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v41 + 8) - v40) >> 4);
  v43 = v36;
  do
  {
    v44 = v43 >> 1;
    v45 = (v43 >> 1) + v38;
    if (*(double *)(v40 + 176 * ((v45 + v39) % v42)) <= a7)
    {
      v38 = v45 + 1;
      v37 = v45 + 1 == v36;
      v44 = v43 + ~v44;
    }
    v43 = v44;
  }
  while (v44);
  v46 = !v37;
  v47 = v38 == 0;
  v48 = v38 - 1;
  v49 = v46 && v47;
  v50 = v49 | (v48 == v36);
  if (v49)
    v51 = v36;
  else
    v51 = v48;
  v52 = (_QWORD *)v327;
  v322 = v327 + 592;
  v323 = v327 + 568;
  if (v33)
  {
LABEL_34:
    v53 = v52[6];
    v54 = v52;
    if (v53)
      goto LABEL_35;
LABEL_85:
    result = 5;
    goto LABEL_174;
  }
LABEL_52:
  v66 = v52 + 65;
  v67 = v52 + 68;
  v68 = v24 - 1;
  if (*(double *)(v52[1]
                 + 176 * ((v52[4] + v34) % (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v52[2] - v52[1]) >> 4))))
     + 1.5 < a7
    && v34 != v68)
  {
    v80 = (char *)operator new(0x18uLL);
    v81 = v80;
    v82 = v80 + 24;
    *(_QWORD *)v80 = v13;
    v80[8] = 1;
    *((_QWORD *)v80 + 2) = v24;
    v83 = (void *)*v66;
    if (*v66)
    {
      *(_QWORD *)(v327 + 528) = v83;
      operator delete(v83);
    }
    *(_QWORD *)(v327 + 520) = v81;
    *(_QWORD *)(v327 + 528) = v82;
    *(_QWORD *)(v327 + 536) = v82;
    v84 = *(void **)(v327 + 544);
    if (v84)
    {
      *(_QWORD *)(v327 + 552) = v84;
      operator delete(v84);
    }
    *v67 = 0;
    v67[1] = 0;
    v67[2] = 0;
    v85 = *(char **)v323;
    if (*(_QWORD *)v323)
    {
      *(_QWORD *)(v327 + 576) = v85;
      operator delete(v85);
    }
    *(_QWORD *)v323 = 0;
    *(_QWORD *)(v323 + 8) = 0;
    *(_QWORD *)(v323 + 16) = 0;
    v86 = *(char **)v322;
    if (*(_QWORD *)v322)
    {
      *(_QWORD *)(v327 + 600) = v86;
      operator delete(v86);
    }
    *(_QWORD *)v322 = 0;
    *(_QWORD *)(v322 + 8) = 0;
    *(_BYTE *)(v322 + 24) = 0;
    *(_QWORD *)(v322 + 16) = 0;
    v53 = *(_QWORD *)(v327 + 48);
    v54 = (_QWORD *)v327;
    if (!v53)
      goto LABEL_85;
    goto LABEL_35;
  }
  if (v34 == v68)
  {
    switch(v11)
    {
      case 0:
        v329 = v13;
        LOBYTE(v330) = 0;
        v331 = v34;
        *(_QWORD *)&category = v327 + 56;
        BYTE8(category) = v50;
        v342 = v51;
        sub_20F1C50BC(v327, (uint64_t *)&v329, &category);
        break;
      case 2:
        goto LABEL_289;
      case 3:
        v329 = v13;
        LOBYTE(v330) = 0;
        v331 = v34;
        sub_20F1C4834(v327, (uint64_t *)&v329, *(_DWORD *)(a5 + 8), *(_DWORD *)(a5 + 16));
        break;
      case 4:
        v329 = v13;
        LOBYTE(v330) = 0;
        v331 = v34;
        sub_20F1C4B78(v327, &v329);
        break;
      case 5:
        v329 = v13;
        LOBYTE(v330) = 0;
        v331 = v34;
        sub_20F1C4D44(v327, (uint64_t *)&v329, a5);
        break;
      default:
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 602, (uint64_t)"prediction_type == VisualSLAMPosePredictionType::ExtrapolateFromOneState", 72, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_409;
        }
LABEL_289:
        *(_BYTE *)(v327 + 616) = 2;
        object = v13;
        LOBYTE(v353) = 0;
        *((_QWORD *)&v353 + 1) = v34;
        sub_20F1C5EA8(v66, (char *)&object, (char *)&v354, 1uLL);
        object = (void *)(v327 + 56);
        LOBYTE(v353) = v50;
        *((_QWORD *)&v353 + 1) = v51;
        sub_20F1C5EA8(v67, (char *)&object, (char *)&v354, 1uLL);
        break;
    }
  }
  else
  {
    *(_BYTE *)(v327 + 616) = 1;
    object = v13;
    LOBYTE(v353) = 0;
    *((_QWORD *)&v353 + 1) = v34;
    *(_QWORD *)&v354 = v13;
    BYTE8(v354) = v34 + 1 == v24;
    __p = (void *)(v34 + 1);
    sub_20F1C5EA8(v52 + 65, (char *)&object, (char *)&v356, 2uLL);
  }
  v261 = *(unsigned __int8 *)(v327 + 616);
  if (v261 == 1)
  {
    v262 = (void *)*v66;
    v263 = (_QWORD *)(*v66 + 16);
  }
  else
  {
    v264 = *(_QWORD *)(v327 + 528);
    v262 = (void *)(v264 - 24);
    v263 = (_QWORD *)(v264 - 8);
  }
  v265 = *(double *)(**(_QWORD **)v262
                   + 176
                   * ((*(_QWORD *)(*(_QWORD *)v262 + 24) + *v263)
                    % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v262 + 8) - **(_QWORD **)v262) >> 4))));
  v266 = *(_QWORD *)(v327 + 240);
  if (v266)
  {
    v267 = 0;
    v268 = 0;
    v269 = *(_QWORD *)(v327 + 240);
    do
    {
      v270 = v269 >> 1;
      v271 = (v269 >> 1) + v268;
      if (*(double *)(*(_QWORD *)(v327 + 200)
                     + 32
                     * ((v271 + *(_QWORD *)(v327 + 224))
                      % (unint64_t)((uint64_t)(*(_QWORD *)(v327 + 208) - *(_QWORD *)(v327 + 200)) >> 5))) <= v265)
      {
        v268 = v271 + 1;
        v267 = v271 + 1 == v266;
        v270 = v269 + ~v270;
      }
      v269 = v270;
    }
    while (v270);
    if (v267 || v268)
    {
      v283 = v268 - 1;
      v284 = v268 == 1;
      v272 = v268 - 1 == v266;
      if (v268 - 1 == v266)
        v284 = 1;
      v273 = v268 - 2;
      if (v284)
        v273 = v283;
      v274 = (void *)(v327 + 200);
      v275 = *(_QWORD *)(v327 + 288);
      if (!v275)
      {
LABEL_319:
        v282 = 0;
        v281 = 1;
        if (v261 == 1)
          goto LABEL_320;
LABEL_332:
        v297 = 1;
        v298 = 1;
        v299 = *(_QWORD *)(v327 + 240);
        goto LABEL_355;
      }
    }
    else
    {
      v272 = 1;
      v273 = *(_QWORD *)(v327 + 240);
      v274 = (void *)(v327 + 200);
      v275 = *(_QWORD *)(v327 + 288);
      if (!v275)
        goto LABEL_319;
    }
  }
  else
  {
    v273 = 0;
    v272 = 1;
    v274 = (void *)(v327 + 200);
    v275 = *(_QWORD *)(v327 + 288);
    if (!v275)
      goto LABEL_319;
  }
  v276 = 0;
  v277 = 0;
  v278 = v275;
  do
  {
    v279 = v278 >> 1;
    v280 = (v278 >> 1) + v277;
    if (*(double *)(*(_QWORD *)(v327 + 248)
                   + 32
                   * ((v280 + *(_QWORD *)(v327 + 272))
                    % (unint64_t)((uint64_t)(*(_QWORD *)(v327 + 256) - *(_QWORD *)(v327 + 248)) >> 5))) <= v265)
    {
      v277 = v280 + 1;
      v276 = v280 + 1 == v275;
      v279 = v278 + ~v279;
    }
    v278 = v279;
  }
  while (v279);
  if (v276 || v277)
  {
    v294 = v277 - 1;
    v295 = v277 == 1;
    v281 = v277 - 1 == v275;
    if (v277 - 1 == v275)
      v295 = 1;
    v296 = v277 - 2;
    if (v295)
      v282 = v294;
    else
      v282 = v296;
    if (v261 != 1)
      goto LABEL_332;
  }
  else
  {
    v281 = 1;
    v282 = v275;
    if (v261 != 1)
      goto LABEL_332;
  }
LABEL_320:
  v285 = 0;
  v286 = *(_QWORD *)(v327 + 528);
  v287 = *(double *)(**(_QWORD **)(v286 - 24)
                   + 176
                   * ((*(_QWORD *)(*(_QWORD *)(v286 - 24) + 24) + *(_QWORD *)(v286 - 8))
                    % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v286 - 24) + 8) - **(_QWORD **)(v286 - 24)) >> 4))));
  v288 = *(_QWORD *)(v327 + 240);
  if (!v272)
  {
    v289 = v266 - v273;
    if (v266 != v273)
    {
      v290 = 0;
      v291 = v273;
      do
      {
        v292 = v289 >> 1;
        v293 = (v289 >> 1) + v291;
        if (*(double *)(*(_QWORD *)(v327 + 200)
                       + 32
                       * ((v293 + *(_QWORD *)(v327 + 224))
                        % (unint64_t)((uint64_t)(*(_QWORD *)(v327 + 208) - *(_QWORD *)(v327 + 200)) >> 5))) <= v287)
        {
          v291 = v293 + 1;
          v290 = v293 + 1 == v266;
          v292 = v289 + ~v292;
        }
        v289 = v292;
      }
      while (v292);
      if (v290 || v291 != v273)
      {
        v288 = v291 - 1;
        v285 = v266 - (v291 - 1);
        if (v285 >= 2)
          v285 = 2;
        if (v266 == v291 - 1)
          v285 = 0;
      }
      else
      {
        v285 = 0;
        v288 = *(_QWORD *)(v327 + 240);
      }
    }
  }
  v300 = 0;
  v299 = v285 + v288;
  v298 = v299 == v266;
  if (!v281)
  {
    v301 = v275 - v282;
    if (v275 != v282)
    {
      v302 = 0;
      v303 = v282;
      do
      {
        v304 = v301 >> 1;
        v305 = (v301 >> 1) + v303;
        if (*(double *)(*(_QWORD *)(v327 + 248)
                       + 32
                       * ((v305 + *(_QWORD *)(v327 + 272))
                        % ((uint64_t)(*(_QWORD *)(v327 + 256) - *(_QWORD *)(v327 + 248)) >> 5))) <= v287)
        {
          v303 = v305 + 1;
          v302 = v305 + 1 == v275;
          v304 = v301 + ~v304;
        }
        v301 = v304;
      }
      while (v304);
      if (v302 || v303 != v282)
      {
        v306 = v303 - 1;
        v300 = v275 - (v303 - 1);
        if (v300 >= 2)
          v300 = 2;
        if (v275 == v303 - 1)
          v300 = 0;
        goto LABEL_354;
      }
      v300 = 0;
    }
  }
  v306 = v275;
LABEL_354:
  v307 = v300 + v306;
  v297 = v307 == v275;
  v275 = v307;
LABEL_355:
  object = v274;
  LOBYTE(v353) = v272;
  *((_QWORD *)&v353 + 1) = v273;
  v343 = v274;
  LOBYTE(rep) = v298;
  v345 = v299;
  if (v298)
  {
    if (!v272)
    {
      if (!v273)
      {
        v266 = -v266;
        goto LABEL_367;
      }
      goto LABEL_366;
    }
LABEL_362:
    v266 = 0;
    goto LABEL_367;
  }
  if (!v299 && !v272 && !v273)
    goto LABEL_362;
  if (v299)
    LOBYTE(v272) = 0;
  if (!v272)
LABEL_366:
    v266 = v273 - v299;
LABEL_367:
  sub_20F1AC03C((char **)v323, (uint64_t)&object, (uint64_t)&v343, -v266);
  object = (void *)(v327 + 248);
  LOBYTE(v353) = v281;
  *((_QWORD *)&v353 + 1) = v282;
  v343 = (void *)(v327 + 248);
  LOBYTE(rep) = v297;
  v345 = v275;
  if (v297)
  {
    if (!v281)
    {
      if (!v282)
      {
        v308 = -*(_QWORD *)(v327 + 288);
        goto LABEL_381;
      }
      goto LABEL_380;
    }
LABEL_374:
    v308 = 0;
    goto LABEL_381;
  }
  if (!v275 && !v281 && !v282)
    goto LABEL_374;
  if (v275)
    v309 = 0;
  else
    v309 = v281;
  if (v309)
  {
    v308 = *(_QWORD *)(v327 + 288);
    goto LABEL_381;
  }
LABEL_380:
  v308 = v282 - v275;
LABEL_381:
  sub_20F1AC03C((char **)v322, (uint64_t)&object, (uint64_t)&v343, -v308);
  v53 = *(_QWORD *)(v327 + 48);
  v54 = (_QWORD *)v327;
  if (!v53)
    goto LABEL_85;
LABEL_35:
  v55 = v54[66];
  v56 = v54[65];
  v57 = v55 - v56 == 24 || *((_BYTE *)v54 + 616) == 1;
  v58 = v57;
  v59 = (_BYTE *)(v56 + 8);
  if (!v57)
    v59 = (_BYTE *)(v55 - 16);
  if (*v59)
  {
    LODWORD(v53) = *((unsigned __int8 *)v54 + 768);
    if (!*((_BYTE *)v54 + 768))
    {
LABEL_173:
      result = 1;
      goto LABEL_174;
    }
    sub_20F1C222C(v340);
    v54 = (_QWORD *)v327;
    if (**(int **)(v340[0] + 56) > 2
      || (v60 = *(unsigned __int8 *)(v340[0] + 72),
          v61 = sub_20E8C31DC(v340[0], "OSLogSurrogateAppender", 1, 0),
          v62 = v61,
          !v60)
      && !v61)
    {
LABEL_172:
      LODWORD(v53) = 0;
      goto LABEL_173;
    }
    v343 = v340;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v345 = std::chrono::system_clock::now().__d_.__rep_;
    v346 = 2;
    v347 = "unknown file";
    LODWORD(v348) = 759;
    v350 = 0;
    v351 = 0;
    v349 = "unknown function";
    v63 = *(_QWORD *)v343;
    v64 = (const char *)(*(_QWORD *)v343 + 16);
    v324 = v64;
    if (*(char *)(*(_QWORD *)v343 + 39) < 0)
    {
      v64 = *(const char **)(v63 + 16);
      v65 = *(_QWORD *)(v63 + 24);
    }
    else
    {
      v65 = *(unsigned __int8 *)(*(_QWORD *)v343 + 39);
    }
    v88 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v88 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v354 && SHIBYTE(v353) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v89 = byte_254A4A4F8;
    else
      v89 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v90 = byte_254A4A4F8[23];
    else
      v90 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v89, v64);
    v91 = &v353;
    if (v90 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v90 >= 0x17)
    {
      v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v90 | 7) != 0x17)
        v92 = v90 | 7;
      v93 = v92 + 1;
      v91 = (__int128 *)operator new(v92 + 1);
      *((_QWORD *)&v353 + 1) = v90;
      *(_QWORD *)&v354 = v93 | 0x8000000000000000;
      *(_QWORD *)&v353 = v91;
    }
    else
    {
      BYTE7(v354) = v90;
      if (!v90)
      {
LABEL_105:
        *((_BYTE *)v91 + v90) = 0;
        BYTE8(v354) = 1;
        p_p = &__p;
        if (v65 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v65 >= 0x17)
        {
          v95 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17)
            v95 = v65 | 7;
          v96 = v95 + 1;
          p_p = operator new(v95 + 1);
          v356 = v65;
          v357 = v96 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v357) = v65;
          if (!v65)
            goto LABEL_113;
        }
        memmove(p_p, v64, v65);
LABEL_113:
        *((_BYTE *)p_p + v65) = 0;
        v358 = 1;
        v97 = object;
        if (SHIBYTE(v357) < 0)
          operator delete(__p);
        if (BYTE8(v354) && SBYTE7(v354) < 0)
          operator delete((void *)v353);
        if (object)
          os_release(object);
        if (v62 && *(_QWORD *)(v62 + 24))
        {
          v98 = _os_log_pack_size();
          v99 = (std::__shared_weak_count_vtbl *)operator new(v98, (std::align_val_t)8uLL);
          v100 = (std::__shared_weak_count *)operator new();
          v101 = v100;
          v100->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v100->__shared_owners_;
          v100->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v100->__shared_weak_owners_ = 0;
          v100[1].__vftable = v99;
          object = v99;
          *(_QWORD *)&v353 = v99;
          *((_QWORD *)&v353 + 1) = v100;
          do
            v103 = __ldxr(p_shared_owners);
          while (__stxr(v103 + 1, p_shared_owners));
          v354 = 0uLL;
          __p = 0;
          do
            v104 = __ldaxr(p_shared_owners);
          while (__stlxr(v104 - 1, p_shared_owners));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v101);
          }
          v105 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v106 = operator new();
          v107 = *(unsigned __int8 *)(v63 + 39);
          v108 = v324;
          if ((v107 & 0x80u) != 0)
          {
            v108 = *(const char **)(v63 + 16);
            v107 = *(_QWORD *)(v63 + 24);
          }
          *(_QWORD *)v106 = v105;
          *(_OWORD *)(v106 + 8) = v353;
          v353 = 0uLL;
          *(_OWORD *)(v106 + 24) = v354;
          v354 = 0uLL;
          *(_QWORD *)(v106 + 40) = v108;
          *(_QWORD *)(v106 + 48) = v107;
          *(_BYTE *)(v106 + 56) = 2;
          *(_QWORD *)&category = 0;
          v329 = (uint64_t *)v106;
          (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v62 + 24) + 40))(*(_QWORD *)(v62 + 24), &v329);
          v109 = (uint64_t)v329;
          v329 = 0;
          v54 = (_QWORD *)v327;
          if (v109)
          {
            v110 = *(std::__shared_weak_count **)(v109 + 32);
            if (v110)
            {
              v111 = (unint64_t *)&v110->__shared_owners_;
              do
                v112 = __ldaxr(v111);
              while (__stlxr(v112 - 1, v111));
              if (!v112)
              {
                ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                std::__shared_weak_count::__release_weak(v110);
              }
            }
            v113 = *(std::__shared_weak_count **)(v109 + 16);
            if (v113)
            {
              v114 = (unint64_t *)&v113->__shared_owners_;
              do
                v115 = __ldaxr(v114);
              while (__stlxr(v115 - 1, v114));
              if (!v115)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v113);
              }
            }
            MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
            v116 = category;
            *(_QWORD *)&category = 0;
            if (v116)
            {
              v117 = *(std::__shared_weak_count **)(v116 + 32);
              if (v117)
              {
                v118 = (unint64_t *)&v117->__shared_owners_;
                do
                  v119 = __ldaxr(v118);
                while (__stlxr(v119 - 1, v118));
                if (!v119)
                {
                  ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                  std::__shared_weak_count::__release_weak(v117);
                }
              }
              v120 = *(std::__shared_weak_count **)(v116 + 16);
              if (v120)
              {
                v121 = (unint64_t *)&v120->__shared_owners_;
                do
                  v122 = __ldaxr(v121);
                while (__stlxr(v122 - 1, v121));
                if (!v122)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
              }
              MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
            }
          }
          v123 = (std::__shared_weak_count *)*((_QWORD *)&v354 + 1);
          if (*((_QWORD *)&v354 + 1))
          {
            v124 = (unint64_t *)(*((_QWORD *)&v354 + 1) + 8);
            do
              v125 = __ldaxr(v124);
            while (__stlxr(v125 - 1, v124));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
              std::__shared_weak_count::__release_weak(v123);
            }
          }
          v126 = (std::__shared_weak_count *)*((_QWORD *)&v353 + 1);
          if (*((_QWORD *)&v353 + 1))
          {
            v127 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
            do
              v128 = __ldaxr(v127);
            while (__stlxr(v128 - 1, v127));
            if (!v128)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
        }
        else
        {
          os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG);
          LOWORD(object) = 0;
          v129 = (void *)_os_log_send_and_compose_impl();
          v54 = (_QWORD *)v327;
          if (v129)
            free(v129);
        }
        if (v60)
        {
          sub_20E8C003C((uint64_t)&v343, "GetInertialStateAtTime: EResultGetPredictionBundleAtTime::TimestampTooEarly");
          sub_20E863570((uint64_t)&v343);
        }
        sub_20E863570((uint64_t)&v343);
        v130 = v351;
        if (v351)
        {
          v131 = (unint64_t *)&v351->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        goto LABEL_172;
      }
    }
    memmove(v91, v89, v90);
    goto LABEL_105;
  }
  v70 = v55 - 24;
  v71 = (_QWORD *)(v55 - 8);
  v72 = v58 == 0;
  if (v58)
    v73 = (_QWORD *)(v56 + 16);
  else
    v73 = v71;
  if (v72)
    v56 = v70;
  if (*(double *)(**(_QWORD **)v56
                 + 176
                 * ((*(_QWORD *)(*(_QWORD *)v56 + 24) + *v73)
                  % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                     * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v56 + 8) - **(_QWORD **)v56) >> 4))))
     + 1.5 >= a7)
  {
    kdebug_trace();
    kdebug_trace();
    result = 0;
    LODWORD(v53) = 1;
  }
  else
  {
    LODWORD(v53) = *((unsigned __int8 *)v54 + 768);
    if (*((_BYTE *)v54 + 768))
    {
      sub_20F1C222C(v340);
      v54 = (_QWORD *)v327;
      if (**(int **)(v340[0] + 56) <= 2)
      {
        v74 = *(unsigned __int8 *)(v340[0] + 72);
        v75 = sub_20E8C31DC(v340[0], "OSLogSurrogateAppender", 1, 0);
        v76 = v75 ? v75 + 16 : 0;
        if (v74 || v75)
        {
          v343 = v340;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v345 = std::chrono::system_clock::now().__d_.__rep_;
          v346 = 2;
          v347 = "unknown file";
          LODWORD(v348) = 767;
          v350 = 0;
          v351 = 0;
          v349 = "unknown function";
          v77 = (uint64_t *)(v340[0] + 16);
          if (*(char *)(v340[0] + 39) < 0)
          {
            v79 = *(_QWORD *)(v340[0] + 16);
            v78 = *(_QWORD *)(v340[0] + 24);
          }
          else
          {
            v78 = *(unsigned __int8 *)(v340[0] + 39);
            v79 = v340[0] + 16;
          }
          *(_QWORD *)&category = v79;
          *((_QWORD *)&category + 1) = v78;
          v310 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v310 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
            if ((_BYTE)v354 && SHIBYTE(v353) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
            v54 = (_QWORD *)v327;
          }
          v311 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v312 = byte_254A4A4F8;
          }
          else
          {
            v311 = *(_QWORD *)&byte_254A4A4F8[8];
            v312 = *(const char **)byte_254A4A4F8;
          }
          v329 = (uint64_t *)v312;
          v330 = v311;
          object = os_log_create(v312, (const char *)category);
          sub_20E86E5A8(&v353, (uint64_t)&v329);
          sub_20E86E5A8(&__p, (uint64_t)&category);
          v313 = object;
          sub_20E86E44C((uint64_t)&object);
          sub_20F1C7824(v76, v77, v313, OS_LOG_TYPE_DEBUG);
          if (v74)
          {
            sub_20E8C003C((uint64_t)&v343, "GetInertialStateAtTime: EResultGetInertialStateAtTime::TimestampTooFarAhead");
            sub_20E863570((uint64_t)&v343);
          }
          sub_20E863714((uint64_t)&v343);
        }
      }
      LODWORD(v53) = 0;
      result = 2;
    }
    else
    {
      result = 2;
    }
  }
LABEL_174:
  v133 = *(char **)(a2 + 24);
  v326 = (void **)(a2 + 24);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  *(_QWORD *)(a2 + 32) = v133;
  v325 = (void **)(a2 + 48);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 72);
  if (*(_BYTE *)(a2 + 104))
    *(_BYTE *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 2;
  if ((_DWORD)v53)
  {
    v134 = -1.0;
    if (!v54[30] || !v54[36])
      goto LABEL_186;
    v135 = v54[29];
    if (v135)
    {
      v136 = (double *)(v54[25] + 32 * v135 - 32);
      v137 = v54[35];
      if (v137)
      {
LABEL_181:
        v138 = v54[31];
        goto LABEL_184;
      }
    }
    else
    {
      v136 = (double *)(v54[25] + 32 * ((uint64_t)(v54[26] - v54[25]) >> 5) - 32);
      v137 = v54[35];
      if (v137)
        goto LABEL_181;
    }
    v138 = v54[31];
    v137 = (v54[32] - v138) >> 5;
LABEL_184:
    v134 = *(double *)(v138 + 32 * v137 - 32);
    if (v134 >= *v136)
      v134 = *v136;
LABEL_186:
    *(double *)(a2 + 120) = v134;
    *(_BYTE *)(a2 + 112) = *((_BYTE *)v54 + 616);
    v139 = (_QWORD *)v54[65];
    v140 = (_QWORD *)v54[66];
    if (v139 != v140)
    {
      while (1)
      {
        v149 = (_QWORD *)(*(_QWORD *)*v139
                        + 176
                        * ((*(_QWORD *)(*v139 + 24) + v139[2])
                         % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                            * ((uint64_t)(*(_QWORD *)(*v139 + 8) - *(_QWORD *)*v139) >> 4))));
        v151 = *(char **)(a2 + 8);
        v150 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v151 >= v150)
          break;
        *(_QWORD *)v151 = *v149;
        v152 = (uint64_t)(v151 + 8);
LABEL_210:
        *(_QWORD *)(a2 + 8) = v152;
        v171 = *(_QWORD *)*v139
             + 176
             * ((*(_QWORD *)(*v139 + 24) + v139[2])
              % (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(*v139 + 8) - *(_QWORD *)*v139) >> 4)))
             + 8;
        v172 = *(_QWORD *)(a2 + 40);
        if ((unint64_t)v133 < v172)
        {
          v141 = *(_OWORD *)v171;
          v142 = *(_OWORD *)(*(_QWORD *)*v139
                           + 176
                           * ((*(_QWORD *)(*v139 + 24) + v139[2])
                            % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                               * ((uint64_t)(*(_QWORD *)(*v139 + 8) - *(_QWORD *)*v139) >> 4)))
                           + 40);
          *((_OWORD *)v133 + 1) = *(_OWORD *)(*(_QWORD *)*v139
                                            + 176
                                            * ((*(_QWORD *)(*v139 + 24) + v139[2])
                                             % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                                                * ((uint64_t)(*(_QWORD *)(*v139 + 8) - *(_QWORD *)*v139) >> 4)))
                                            + 24);
          *((_OWORD *)v133 + 2) = v142;
          *(_OWORD *)v133 = v141;
          v143 = *(_OWORD *)(v171 + 48);
          v144 = *(_OWORD *)(v171 + 64);
          v145 = *(_OWORD *)(v171 + 96);
          *((_OWORD *)v133 + 5) = *(_OWORD *)(v171 + 80);
          *((_OWORD *)v133 + 6) = v145;
          *((_OWORD *)v133 + 3) = v143;
          *((_OWORD *)v133 + 4) = v144;
          v146 = *(_OWORD *)(v171 + 112);
          v147 = *(_OWORD *)(v171 + 128);
          v148 = *(_OWORD *)(v171 + 144);
          *((_QWORD *)v133 + 20) = *(_QWORD *)(v171 + 160);
          *((_OWORD *)v133 + 8) = v147;
          *((_OWORD *)v133 + 9) = v148;
          *((_OWORD *)v133 + 7) = v146;
          *(_QWORD *)(a2 + 32) = v133 + 168;
          v139 += 3;
          v133 += 168;
          if (v139 == v140)
            goto LABEL_227;
        }
        else
        {
          v173 = (char *)*v326;
          v174 = 0xCF3CF3CF3CF3CF3DLL * ((v133 - (_BYTE *)*v326) >> 3);
          v175 = v174 + 1;
          if (v174 + 1 > 0x186186186186186)
            sub_20E867F44();
          v176 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v172 - (_QWORD)v173) >> 3);
          if (2 * v176 > v175)
            v175 = 2 * v176;
          if (v176 >= 0xC30C30C30C30C3)
            v177 = 0x186186186186186;
          else
            v177 = v175;
          if (v177)
          {
            if (v177 > 0x186186186186186)
              goto LABEL_405;
            v178 = (char *)operator new(168 * v177);
          }
          else
          {
            v178 = 0;
          }
          v179 = &v178[168 * v174];
          v180 = *(_OWORD *)v171;
          v181 = *(_OWORD *)(v171 + 32);
          *((_OWORD *)v179 + 1) = *(_OWORD *)(v171 + 16);
          *((_OWORD *)v179 + 2) = v181;
          *(_OWORD *)v179 = v180;
          v182 = *(_OWORD *)(v171 + 48);
          v183 = *(_OWORD *)(v171 + 64);
          v184 = *(_OWORD *)(v171 + 96);
          *((_OWORD *)v179 + 5) = *(_OWORD *)(v171 + 80);
          *((_OWORD *)v179 + 6) = v184;
          *((_OWORD *)v179 + 3) = v182;
          *((_OWORD *)v179 + 4) = v183;
          v185 = *(_OWORD *)(v171 + 112);
          v186 = *(_OWORD *)(v171 + 128);
          v187 = *(_OWORD *)(v171 + 144);
          *((_QWORD *)v179 + 20) = *(_QWORD *)(v171 + 160);
          *((_OWORD *)v179 + 8) = v186;
          *((_OWORD *)v179 + 9) = v187;
          *((_OWORD *)v179 + 7) = v185;
          v188 = v179;
          if (v133 != v173)
          {
            do
            {
              v189 = *(_OWORD *)(v133 - 168);
              v190 = *(_OWORD *)(v133 - 152);
              *(_OWORD *)(v188 - 136) = *(_OWORD *)(v133 - 136);
              *(_OWORD *)(v188 - 152) = v190;
              *(_OWORD *)(v188 - 168) = v189;
              v191 = *(_OWORD *)(v133 - 120);
              v192 = *(_OWORD *)(v133 - 104);
              v193 = *(_OWORD *)(v133 - 88);
              *(_OWORD *)(v188 - 72) = *(_OWORD *)(v133 - 72);
              *(_OWORD *)(v188 - 88) = v193;
              *(_OWORD *)(v188 - 104) = v192;
              *(_OWORD *)(v188 - 120) = v191;
              v194 = *(_OWORD *)(v133 - 56);
              v195 = *(_OWORD *)(v133 - 40);
              v196 = *(_OWORD *)(v133 - 24);
              *((_QWORD *)v188 - 1) = *((_QWORD *)v133 - 1);
              *(_OWORD *)(v188 - 24) = v196;
              *(_OWORD *)(v188 - 40) = v195;
              *(_OWORD *)(v188 - 56) = v194;
              v188 -= 168;
              v133 -= 168;
            }
            while (v133 != v173);
            v133 = (char *)*v326;
          }
          v197 = v179 + 168;
          *(_QWORD *)(a2 + 24) = v188;
          *(_QWORD *)(a2 + 32) = v179 + 168;
          *(_QWORD *)(a2 + 40) = &v178[168 * v177];
          if (v133)
            operator delete(v133);
          *(_QWORD *)(a2 + 32) = v197;
          v139 += 3;
          v133 = v197;
          if (v139 == v140)
            goto LABEL_227;
        }
      }
      v153 = *(char **)a2;
      v154 = (uint64_t)&v151[-*(_QWORD *)a2];
      v155 = v154 >> 3;
      v156 = (v154 >> 3) + 1;
      if (v156 >> 61)
        sub_20E867F44();
      v157 = v150 - (_QWORD)v153;
      if (v157 >> 2 > v156)
        v156 = v157 >> 2;
      if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
        v158 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v158 = v156;
      if (v158)
      {
        if (v158 >> 61)
          goto LABEL_405;
        v159 = operator new(8 * v158);
        v160 = &v159[8 * v155];
        *v160 = *v149;
        v152 = (uint64_t)(v160 + 1);
        v161 = v151 - v153;
        if (v151 == v153)
          goto LABEL_208;
      }
      else
      {
        v159 = 0;
        v160 = (_QWORD *)(8 * v155);
        *(_QWORD *)(8 * v155) = *v149;
        v152 = 8 * v155 + 8;
        v161 = v151 - v153;
        if (v151 == v153)
        {
LABEL_208:
          *(_QWORD *)a2 = v160;
          *(_QWORD *)(a2 + 8) = v152;
          *(_QWORD *)(a2 + 16) = &v159[8 * v158];
          if (v153)
          {
            operator delete(v153);
            v133 = *(char **)(a2 + 32);
          }
          goto LABEL_210;
        }
      }
      v162 = v161 - 8;
      if (v162 < 0x58)
        goto LABEL_429;
      if ((unint64_t)(v151 - v159 - v154) < 0x20)
        goto LABEL_429;
      v163 = (v162 >> 3) + 1;
      v164 = 8 * (v163 & 0x3FFFFFFFFFFFFFFCLL);
      v165 = &v151[-v164];
      v160 = (_QWORD *)((char *)v160 - v164);
      v166 = &v159[8 * v155 - 16];
      v167 = v151 - 16;
      v168 = v163 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v169 = *(_OWORD *)v167;
        *(v166 - 1) = *((_OWORD *)v167 - 1);
        *v166 = v169;
        v166 -= 2;
        v167 -= 32;
        v168 -= 4;
      }
      while (v168);
      v151 = v165;
      if (v163 != (v163 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_429:
        do
        {
          v170 = *((_QWORD *)v151 - 1);
          v151 -= 8;
          *--v160 = v170;
        }
        while (v151 != v153);
      }
      goto LABEL_208;
    }
LABEL_227:
    v198 = v327;
    v199 = *(_QWORD **)(v327 + 544);
    v200 = *(_QWORD **)(v327 + 552);
    if (v199 != v200)
    {
      v201 = *(char **)(a2 + 56);
      do
      {
        while (1)
        {
          v210 = *(_QWORD *)*v199
               + 176
               * ((*(_QWORD *)(*v199 + 24) + v199[2])
                % (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(*v199 + 8) - *(_QWORD *)*v199) >> 4)))
               + 8;
          v211 = *(_QWORD *)(a2 + 64);
          if ((unint64_t)v201 >= v211)
            break;
          v202 = *(_OWORD *)v210;
          v203 = *(_OWORD *)(*(_QWORD *)*v199
                           + 176
                           * ((*(_QWORD *)(*v199 + 24) + v199[2])
                            % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                               * ((uint64_t)(*(_QWORD *)(*v199 + 8) - *(_QWORD *)*v199) >> 4)))
                           + 40);
          *((_OWORD *)v201 + 1) = *(_OWORD *)(*(_QWORD *)*v199
                                            + 176
                                            * ((*(_QWORD *)(*v199 + 24) + v199[2])
                                             % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                                                * ((uint64_t)(*(_QWORD *)(*v199 + 8) - *(_QWORD *)*v199) >> 4)))
                                            + 24);
          *((_OWORD *)v201 + 2) = v203;
          *(_OWORD *)v201 = v202;
          v204 = *(_OWORD *)(v210 + 48);
          v205 = *(_OWORD *)(v210 + 64);
          v206 = *(_OWORD *)(v210 + 96);
          *((_OWORD *)v201 + 5) = *(_OWORD *)(v210 + 80);
          *((_OWORD *)v201 + 6) = v206;
          *((_OWORD *)v201 + 3) = v204;
          *((_OWORD *)v201 + 4) = v205;
          v207 = *(_OWORD *)(v210 + 112);
          v208 = *(_OWORD *)(v210 + 128);
          v209 = *(_OWORD *)(v210 + 144);
          *((_QWORD *)v201 + 20) = *(_QWORD *)(v210 + 160);
          *((_OWORD *)v201 + 8) = v208;
          *((_OWORD *)v201 + 9) = v209;
          *((_OWORD *)v201 + 7) = v207;
          *(_QWORD *)(a2 + 56) = v201 + 168;
          v199 += 3;
          v201 += 168;
          if (v199 == v200)
            goto LABEL_250;
        }
        v212 = (char *)*v325;
        v213 = 0xCF3CF3CF3CF3CF3DLL * ((v201 - (_BYTE *)*v325) >> 3);
        v214 = v213 + 1;
        if (v213 + 1 > 0x186186186186186)
          sub_20E867F44();
        v215 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v211 - (_QWORD)v212) >> 3);
        if (2 * v215 > v214)
          v214 = 2 * v215;
        if (v215 >= 0xC30C30C30C30C3)
          v216 = 0x186186186186186;
        else
          v216 = v214;
        if (v216)
        {
          if (v216 > 0x186186186186186)
            goto LABEL_405;
          v217 = (char *)operator new(168 * v216);
        }
        else
        {
          v217 = 0;
        }
        v218 = &v217[168 * v213];
        v219 = *(_OWORD *)v210;
        v220 = *(_OWORD *)(v210 + 32);
        *((_OWORD *)v218 + 1) = *(_OWORD *)(v210 + 16);
        *((_OWORD *)v218 + 2) = v220;
        *(_OWORD *)v218 = v219;
        v221 = *(_OWORD *)(v210 + 48);
        v222 = *(_OWORD *)(v210 + 64);
        v223 = *(_OWORD *)(v210 + 96);
        *((_OWORD *)v218 + 5) = *(_OWORD *)(v210 + 80);
        *((_OWORD *)v218 + 6) = v223;
        *((_OWORD *)v218 + 3) = v221;
        *((_OWORD *)v218 + 4) = v222;
        v224 = *(_OWORD *)(v210 + 112);
        v225 = *(_OWORD *)(v210 + 128);
        v226 = *(_OWORD *)(v210 + 144);
        *((_QWORD *)v218 + 20) = *(_QWORD *)(v210 + 160);
        *((_OWORD *)v218 + 8) = v225;
        *((_OWORD *)v218 + 9) = v226;
        *((_OWORD *)v218 + 7) = v224;
        v227 = v218;
        if (v201 == v212)
        {
          v198 = v327;
          v236 = v218 + 168;
          *(_QWORD *)(a2 + 48) = v218;
          *(_QWORD *)(a2 + 56) = v218 + 168;
          *(_QWORD *)(a2 + 64) = &v217[168 * v216];
          if (!v201)
            goto LABEL_246;
        }
        else
        {
          v198 = v327;
          do
          {
            v228 = *(_OWORD *)(v201 - 168);
            v229 = *(_OWORD *)(v201 - 152);
            *(_OWORD *)(v227 - 136) = *(_OWORD *)(v201 - 136);
            *(_OWORD *)(v227 - 152) = v229;
            *(_OWORD *)(v227 - 168) = v228;
            v230 = *(_OWORD *)(v201 - 120);
            v231 = *(_OWORD *)(v201 - 104);
            v232 = *(_OWORD *)(v201 - 88);
            *(_OWORD *)(v227 - 72) = *(_OWORD *)(v201 - 72);
            *(_OWORD *)(v227 - 88) = v232;
            *(_OWORD *)(v227 - 104) = v231;
            *(_OWORD *)(v227 - 120) = v230;
            v233 = *(_OWORD *)(v201 - 56);
            v234 = *(_OWORD *)(v201 - 40);
            v235 = *(_OWORD *)(v201 - 24);
            *((_QWORD *)v227 - 1) = *((_QWORD *)v201 - 1);
            *(_OWORD *)(v227 - 24) = v235;
            *(_OWORD *)(v227 - 40) = v234;
            *(_OWORD *)(v227 - 56) = v233;
            v227 -= 168;
            v201 -= 168;
          }
          while (v201 != v212);
          v201 = (char *)*v325;
          v236 = v218 + 168;
          *(_QWORD *)(a2 + 48) = v227;
          *(_QWORD *)(a2 + 56) = v218 + 168;
          *(_QWORD *)(a2 + 64) = &v217[168 * v216];
          if (!v201)
            goto LABEL_246;
        }
        operator delete(v201);
LABEL_246:
        *(_QWORD *)(a2 + 56) = v236;
        v199 += 3;
        v201 = v236;
      }
      while (v199 != v200);
    }
LABEL_250:
    if (*(_BYTE *)(a2 + 112) == 1)
    {
      v237 = **(double **)a2;
      v238 = (void **)(a2 + 72);
      if (vabdd_f64(a7, v237) < 0.0001)
        return 0;
    }
    else
    {
      v237 = *(double *)(*(_QWORD *)(a2 + 8) - 8);
      v238 = (void **)(a2 + 72);
      if (vabdd_f64(a7, v237) < 0.0001)
        return 0;
      v239 = *(_QWORD *)(v198 + 528);
      if (*(double *)(**(_QWORD **)(v239 - 24)
                     + 176
                     * ((*(_QWORD *)(*(_QWORD *)(v239 - 24) + 24) + *(_QWORD *)(v239 - 8))
                      % (unint64_t)(0x2E8BA2E8BA2E8BA3
                                         * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(v239 - 24) + 8)
                                                    - **(_QWORD **)(v239 - 24)) >> 4)))) < a7)
        goto LABEL_259;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 329, (uint64_t)"bundle.prediction_type == VisualSLAMPosePredictionType::Interpolate || timestamp > visual_slam_window_.states.back()->timestamp", 127, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_409;
      }
      if (*(_BYTE *)(a2 + 112) != 1)
        goto LABEL_259;
    }
    if (*(_QWORD *)(v198 + 528) - *(_QWORD *)(v198 + 520) != 48
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 332, (uint64_t)"bundle.prediction_type != VisualSLAMPosePredictionType::Interpolate || visual_slam_window_.states.size() == 2u", 110, (uint64_t)"There needs to be two states to interpolate in visual slam", 58, (void (*)(void **))sub_21023DDB0))
    {
LABEL_409:
      abort();
    }
LABEL_259:
    sub_20F1C0CB0((_QWORD *)v198, a7, v237);
    if (*(_QWORD *)(v198 + 696) == *(_QWORD *)(v198 + 704)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 335, (uint64_t)"!interp_timestamps_.empty()", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_409;
    }
    if (a4)
    {
      *(_QWORD *)(a2 + 96) = sub_20F1C10C0((unint64_t *)(v198 + 696), *(unsigned __int8 *)(v198 + 768), a7, v237, *(double *)&a3);
      *(_BYTE *)(a2 + 104) = 1;
    }
    v248 = *(_QWORD *)(v198 + 600);
    if (*(_QWORD *)(v198 + 592) != v248)
    {
      v249 = *(_QWORD *)(v198 + 576);
      if (*(_QWORD *)(v198 + 568) != v249)
      {
        if (*(double *)(v248 - 32) < a7 || (v240.f64[0] = *(float64_t *)(v249 - 32), v240.f64[0] < a7))
        {
          LOBYTE(object) = 0;
          v361 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void **, double))(*(_QWORD *)v198 + 48))(v198, v323, v322, &object, a7);
          if (v361)
          {
            if (v359)
            {
              v360 = v359;
              operator delete(v359);
            }
          }
        }
      }
    }
    sub_20F1C2098(v198, v323, v322, v198 + 696, v240, v241, v242, v243, v244, v245, v246, v247);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 72);
    v250 = *(_QWORD *)(v327 + 624);
    for (i = *(_QWORD *)(v327 + 632); v250 != i; v250 += 56)
      sub_20F1C4690(v238, v250);
    if (*(_BYTE *)(a5 + 504)
      && (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 3)) <= 1)
    {
      if (*(_BYTE *)(v327 + 768))
      {
        sub_20F1C222C(&v338);
        if (**(int **)(v338 + 56) <= 2)
        {
          v252 = *(unsigned __int8 *)(v338 + 72);
          v253 = sub_20E8C31DC(v338, "OSLogSurrogateAppender", 1, 0);
          v254 = v253 ? v253 + 16 : 0;
          if (v252 || v253)
          {
            sub_20E863438((uint64_t)&object);
            sub_20E86A980((_QWORD *)&v353 + 1, (uint64_t)"VisualSLAMGetInertialStateAtTime (in GetPredictionBundleVisualSLAM) failed with InterpolateFailed: Could not interpolate the IMU samples used for inertial state propagation for pose request timestamp=", 200);
            v255 = (_QWORD *)std::ostream::operator<<();
            sub_20E86A980(v255, (uint64_t)" using the inertial state at timestamp=", 39);
            std::ostream::operator<<();
            sub_20E923E88(&object, &category);
            v329 = &v338;
            v330 = std::chrono::steady_clock::now().__d_.__rep_;
            v331 = std::chrono::system_clock::now().__d_.__rep_;
            v332 = 2;
            v333 = "unknown file";
            v334 = 365;
            v336 = 0;
            v337 = 0;
            v335 = "unknown function";
            if (v342 >= 0)
              p_category = (const char *)&category;
            else
              p_category = (const char *)category;
            v328 = p_category;
            v257 = *v329;
            v258 = (uint64_t *)(*v329 + 16);
            if (*(char *)(*v329 + 39) < 0)
            {
              v260 = *(char **)(v257 + 16);
              v259 = *(char **)(v257 + 24);
            }
            else
            {
              v259 = (char *)*(unsigned __int8 *)(*v329 + 39);
              v260 = (char *)(*v329 + 16);
            }
            v339[0] = v260;
            v339[1] = v259;
            v314 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v314 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v343);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v343);
              if ((_BYTE)v346 && SHIBYTE(v345) < 0)
                operator delete(v343);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v315 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v316 = byte_254A4A4F8;
            }
            else
            {
              v315 = *(_QWORD *)&byte_254A4A4F8[8];
              v316 = *(const char **)byte_254A4A4F8;
            }
            v340[0] = (uint64_t)v316;
            v340[1] = v315;
            v343 = os_log_create(v316, v339[0]);
            sub_20E86E5A8(&rep, (uint64_t)v340);
            sub_20E86E5A8(&v348, (uint64_t)v339);
            v317 = v343;
            sub_20E86E44C((uint64_t)&v343);
            sub_20F1C6014(v254, v258, v317, OS_LOG_TYPE_DEBUG, &v328);
            if (v252)
            {
              v318 = (const char *)&category;
              if (v342 < 0)
                v318 = (const char *)category;
              sub_20E8C003C((uint64_t)&v329, "%s", v318);
              sub_20E863570((uint64_t)&v329);
            }
            sub_20E863714((uint64_t)&v329);
            if (SHIBYTE(v342) < 0)
              operator delete((void *)category);
            sub_20E863784((uint64_t)&object);
          }
        }
      }
      return 4;
    }
    return 0;
  }
  return result;
}

void sub_20F1C43E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,void *a42,int a43,__int16 a44,char a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *object)
{
  if (a47 && a46 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a21);
  if (a40 < 0)
  {
    operator delete(a35);
    sub_20E863784((uint64_t)&object);
    _Unwind_Resume(a1);
  }
  sub_20E863784((uint64_t)&object);
  _Unwind_Resume(a1);
}

void sub_20F1C45F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;

  if (a66)
  {
    if (__p)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20F1C4614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  sub_20E863714((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_20F1C4628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *object,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54)
{
  if (a54 && a53 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_20F1C4670(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F1C4680()
{
  JUMPOUT(0x20F1C4688);
}

void sub_20F1C4690(void **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    v6 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v5 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v5 + 8) = v6;
    v7 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v5 + 6) = *(_QWORD *)(a2 + 48);
    *((_OWORD *)v5 + 2) = v7;
    v8 = v5 + 56;
LABEL_3:
    a1[1] = v8;
    return;
  }
  v9 = (char *)*a1;
  v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 3);
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) > 0x492492492492492)
    sub_20EABADD4();
  v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (_QWORD)v9) >> 3);
  if (2 * v12 > v11)
    v11 = 2 * v12;
  if (v12 >= 0x249249249249249)
    v13 = 0x492492492492492;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 > 0x492492492492492)
      sub_20E877A38();
    v14 = (char *)operator new(56 * v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = &v14[56 * v10];
  *(_QWORD *)v15 = *(_QWORD *)a2;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v15 + 3) = *(_QWORD *)(a2 + 24);
  *((_OWORD *)v15 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v15 + 6) = *(_QWORD *)(a2 + 48);
  v8 = v15 + 56;
  if (v5 != v9)
  {
    do
    {
      v16 = *((_QWORD *)v5 - 7);
      v5 -= 56;
      *((_QWORD *)v15 - 7) = v16;
      v15 -= 56;
      v17 = *(_OWORD *)(v5 + 8);
      *((_QWORD *)v15 + 3) = *((_QWORD *)v5 + 3);
      *(_OWORD *)(v15 + 8) = v17;
      v18 = *((_OWORD *)v5 + 2);
      *((_QWORD *)v15 + 6) = *((_QWORD *)v5 + 6);
      *((_OWORD *)v15 + 2) = v18;
    }
    while (v5 != v9);
    v5 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = v8;
  a1[2] = &v14[56 * v13];
  if (!v5)
    goto LABEL_3;
  operator delete(v5);
  a1[1] = v8;
}

void sub_20F1C4834(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  BOOL v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  BOOL v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a3 <= a4)
    v6 = a4;
  else
    v6 = a3;
  if (!(_DWORD)v6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 463, (uint64_t)"num_poly_terms > 0u", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *a2;
  v9 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a2 + 8))
  {
    if (!v7)
      goto LABEL_59;
    v10 = -*(_QWORD *)(v8 + 40);
  }
  else
  {
    v31 = a2[2];
    if (v31)
      v32 = 1;
    else
      v32 = v7 == 0;
    if (!v32)
      goto LABEL_59;
    if (v31 | v7)
      v10 = -v31;
    else
      v10 = *(_QWORD *)(v8 + 40);
  }
  if (v10 < 0 && -v10 >= v6)
  {
    *(_BYTE *)(a1 + 616) = 3;
    v11 = *a2;
    LODWORD(v33) = *(_DWORD *)((char *)a2 + 9);
    *(_DWORD *)((char *)&v33 + 3) = *((_DWORD *)a2 + 3);
    v12 = a2[2] - v6;
    v13 = v12 == *(_QWORD *)(v11 + 40);
    v14 = *(char **)(a1 + 520);
    *(_QWORD *)(a1 + 528) = v14;
    while (1)
    {
      v16 = v13;
      if (v9)
      {
        if (v13)
          goto LABEL_35;
        if (v12)
        {
          v17 = a2[2];
LABEL_30:
          if ((uint64_t)(v12 - v17) >= 1)
            goto LABEL_60;
          goto LABEL_35;
        }
        if ((uint64_t)-*(_QWORD *)(*a2 + 40) >= 1)
          goto LABEL_60;
      }
      else
      {
        v17 = a2[2];
        if (v17)
          v18 = 0;
        else
          v18 = v16 == 0;
        if (v18 && v12 == 0)
          goto LABEL_35;
        if (v17)
          v20 = 1;
        else
          v20 = v16 == 0;
        if (v20)
          goto LABEL_30;
        if (*(uint64_t *)(*a2 + 40) >= 1)
          goto LABEL_60;
      }
LABEL_35:
      v21 = *(_QWORD *)(a1 + 536);
      if ((unint64_t)v14 < v21)
      {
        *(_QWORD *)v14 = v11;
        v14[8] = v16;
        *(_DWORD *)(v14 + 9) = v33;
        *((_DWORD *)v14 + 3) = *(_DWORD *)((char *)&v33 + 3);
        *((_QWORD *)v14 + 2) = v12;
        v15 = v14 + 24;
      }
      else
      {
        v22 = *(_BYTE **)(a1 + 520);
        v23 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v22) >> 3) + 1;
        if (v23 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v22) >> 3);
        if (2 * v24 > v23)
          v23 = 2 * v24;
        if (v24 >= 0x555555555555555)
          v25 = 0xAAAAAAAAAAAAAAALL;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v26 = (char *)operator new(24 * v25);
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[8 * ((v14 - v22) >> 3)];
        *(_QWORD *)v27 = v11;
        v27[8] = v16;
        *(_DWORD *)(v27 + 9) = v33;
        *((_DWORD *)v27 + 3) = *(_DWORD *)((char *)&v33 + 3);
        *((_QWORD *)v27 + 2) = v12;
        v28 = v27;
        if (v14 != v22)
        {
          do
          {
            v29 = *(_OWORD *)(v14 - 24);
            *((_QWORD *)v28 - 1) = *((_QWORD *)v14 - 1);
            *(_OWORD *)(v28 - 24) = v29;
            v28 -= 24;
            v14 -= 24;
          }
          while (v14 != v22);
          v14 = *(char **)(a1 + 520);
        }
        v30 = &v26[24 * v25];
        *(_QWORD *)(a1 + 520) = v28;
        v15 = v27 + 24;
        *(_QWORD *)(a1 + 528) = v27 + 24;
        *(_QWORD *)(a1 + 536) = v30;
        if (v14)
          operator delete(v14);
      }
      *(_QWORD *)(a1 + 528) = v15;
      v13 = ++v12 == *(_QWORD *)(v11 + 40);
      v9 = *((unsigned __int8 *)a2 + 8);
      v14 = v15;
    }
  }
LABEL_59:
  *(_BYTE *)(a1 + 616) = 2;
  v33 = *(_OWORD *)a2;
  v34 = a2[2];
  sub_20F1C5EA8((_QWORD *)(a1 + 520), (char *)&v33, (char *)&v35, 1uLL);
LABEL_60:
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a1 + 544);
}

void sub_20F1C4B78(uint64_t a1, _QWORD *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char *v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;

  *(_BYTE *)(a1 + 616) = 4;
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a1 + 544);
  v2 = *(char **)(a1 + 520);
  *(_QWORD *)(a1 + 528) = v2;
  if (*(_QWORD *)(a1 + 48))
  {
    v5 = 0;
    v6 = a1 + 8;
    v7 = a2[2] + 1;
    v8 = v7 == *(_QWORD *)(*a2 + 40);
    do
    {
      if (!v8 && v5 == v7)
        break;
      v10 = *(_QWORD *)(a1 + 536);
      if ((unint64_t)v2 < v10)
      {
        *(_QWORD *)v2 = v6;
        v2[8] = 0;
        v9 = v2 + 24;
        *((_QWORD *)v2 + 2) = v5;
      }
      else
      {
        v11 = *(_BYTE **)(a1 + 520);
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v11) >> 3) + 1;
        if (v12 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v11) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        v14 = v13 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
        if (v14)
        {
          if (v14 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v15 = (char *)operator new(24 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * ((v2 - v11) >> 3)];
        *(_QWORD *)v16 = v6;
        v16[8] = 0;
        *((_QWORD *)v16 + 2) = v5;
        v17 = v16;
        if (v2 != v11)
        {
          do
          {
            v18 = *(_OWORD *)(v2 - 24);
            *((_QWORD *)v17 - 1) = *((_QWORD *)v2 - 1);
            *(_OWORD *)(v17 - 24) = v18;
            v17 -= 24;
            v2 -= 24;
          }
          while (v2 != v11);
          v2 = *(char **)(a1 + 520);
        }
        *(_QWORD *)(a1 + 520) = v17;
        v9 = v16 + 24;
        *(_QWORD *)(a1 + 528) = v16 + 24;
        *(_QWORD *)(a1 + 536) = &v15[24 * v14];
        if (v2)
          operator delete(v2);
      }
      *(_QWORD *)(a1 + 528) = v9;
      ++v5;
      v7 = a2[2] + 1;
      v8 = v7 == *(_QWORD *)(*a2 + 40);
      v2 = v9;
    }
    while (v5 != *(_QWORD *)(a1 + 48));
  }
}

void sub_20F1C4D44(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  BOOL v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a1 + 592);
  *(_BYTE *)(a1 + 616) = 0;
  if (*(_QWORD *)(a3 + 192) <= *(_QWORD *)(a3 + 344))
    v5 = *(_QWORD *)(a3 + 344);
  else
    v5 = *(_QWORD *)(a3 + 192);
  if (!v5
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 507, (uint64_t)"num_taps > 0u", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v6 = (void **)(a1 + 520);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *a2;
  v9 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a2 + 8))
  {
    if (!v7)
      goto LABEL_54;
    v10 = -*(_QWORD *)(v8 + 40);
  }
  else
  {
    v31 = a2[2];
    if (!v31 && v7)
      goto LABEL_54;
    if (v31 | v7)
      v10 = -v31;
    else
      v10 = *(_QWORD *)(v8 + 40);
  }
  if (v10 < 0 && v5 <= -v10)
  {
    *(_BYTE *)(a1 + 616) = 5;
    v11 = *a2;
    LODWORD(v32) = *(_DWORD *)((char *)a2 + 9);
    *(_DWORD *)((char *)&v32 + 3) = *((_DWORD *)a2 + 3);
    v12 = a2[2] - v5;
    v13 = v12 == *(_QWORD *)(v11 + 40);
    v14 = *(char **)(a1 + 520);
    *(_QWORD *)(a1 + 528) = v14;
    while (1)
    {
      v16 = v13;
      if (v9)
      {
        if (v13)
          goto LABEL_35;
        if (v12)
        {
          v17 = a2[2];
LABEL_30:
          if ((uint64_t)(v12 - v17) >= 1)
            goto LABEL_55;
          goto LABEL_35;
        }
        if ((uint64_t)-*(_QWORD *)(*a2 + 40) >= 1)
          goto LABEL_55;
      }
      else
      {
        v17 = a2[2];
        if (v17)
          v18 = 0;
        else
          v18 = v16 == 0;
        if (v18 && v12 == 0)
          goto LABEL_35;
        if (v17)
          v20 = 1;
        else
          v20 = v16 == 0;
        if (v20)
          goto LABEL_30;
        if (*(uint64_t *)(*a2 + 40) >= 1)
          goto LABEL_55;
      }
LABEL_35:
      v21 = *(_QWORD *)(a1 + 536);
      if ((unint64_t)v14 < v21)
      {
        *(_QWORD *)v14 = v11;
        v14[8] = v16;
        *(_DWORD *)(v14 + 9) = v32;
        *((_DWORD *)v14 + 3) = *(_DWORD *)((char *)&v32 + 3);
        *((_QWORD *)v14 + 2) = v12;
        v15 = v14 + 24;
      }
      else
      {
        v22 = (char *)*v6;
        v23 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (_BYTE *)*v6) >> 3);
        v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20E867F44();
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (_QWORD)v22) >> 3);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v24;
        if (v26)
        {
          if (v26 > 0xAAAAAAAAAAAAAAALL)
            sub_20E877A38();
          v27 = (char *)operator new(24 * v26);
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[24 * v23];
        *(_QWORD *)v28 = v11;
        v28[8] = v16;
        *(_DWORD *)(v28 + 9) = v32;
        *((_DWORD *)v28 + 3) = *(_DWORD *)((char *)&v32 + 3);
        *((_QWORD *)v28 + 2) = v12;
        v29 = v28;
        if (v14 != v22)
        {
          do
          {
            v30 = *(_OWORD *)(v14 - 24);
            *((_QWORD *)v29 - 1) = *((_QWORD *)v14 - 1);
            *(_OWORD *)(v29 - 24) = v30;
            v29 -= 24;
            v14 -= 24;
          }
          while (v14 != v22);
          v14 = (char *)*v6;
        }
        *(_QWORD *)(a1 + 520) = v29;
        v15 = v28 + 24;
        *(_QWORD *)(a1 + 528) = v28 + 24;
        *(_QWORD *)(a1 + 536) = &v27[24 * v26];
        if (v14)
          operator delete(v14);
      }
      *(_QWORD *)(a1 + 528) = v15;
      v13 = ++v12 == *(_QWORD *)(v11 + 40);
      v9 = *((unsigned __int8 *)a2 + 8);
      v14 = v15;
    }
  }
LABEL_54:
  *(_BYTE *)(a1 + 616) = 2;
  v32 = *(_OWORD *)a2;
  v33 = a2[2];
  sub_20F1C5EA8((_QWORD *)(a1 + 520), (char *)&v32, (char *)&v34, 1uLL);
LABEL_55:
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a1 + 544);
}

_QWORD *sub_20F1C50BC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  __int128 v27;
  uint64_t v28;
  _BYTE v29[15];
  _BYTE __src[24];
  uint64_t v31;
  BOOL v32;
  _BYTE v33[7];
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *((unsigned __int8 *)a2 + 8);
  if (v5)
  {
    v7 = a2[2];
    if (*((_BYTE *)a2 + 8))
      v8 = 0;
    else
      v8 = v7 == 0;
    if (v8)
    {
      v7 = 0;
      v6 = 0;
      goto LABEL_24;
    }
    if (*((_BYTE *)a2 + 8))
    {
      if (v5 < 1)
        goto LABEL_22;
      goto LABEL_17;
    }
  }
  else
  {
    if (*((_BYTE *)a2 + 8))
    {
      LOBYTE(v6) = 1;
      goto LABEL_11;
    }
    v7 = a2[2];
    if (!v7)
    {
LABEL_25:
      LOBYTE(v6) = 0;
      v9 = *a2;
      *(_QWORD *)v29 = *(uint64_t *)((char *)a2 + 9);
      *(_QWORD *)&v29[7] = a2[2];
      v27 = *a3;
      v28 = *((_QWORD *)a3 + 2);
LABEL_26:
      *(_BYTE *)(a1 + 616) = 2;
      *(_QWORD *)__src = v9;
      __src[8] = v6;
      *(_QWORD *)&__src[9] = *(_QWORD *)v29;
      *(_QWORD *)&__src[16] = *(_QWORD *)&v29[7];
      sub_20F1C5EA8((_QWORD *)(a1 + 520), __src, (char *)&v31, 1uLL);
      *(_OWORD *)__src = v27;
      *(_QWORD *)&__src[16] = v28;
      return sub_20F1C5EA8((_QWORD *)(a1 + 544), __src, (char *)&v31, 1uLL);
    }
  }
  v6 = 0;
  if (v7 < 1)
  {
LABEL_22:
    if (v5)
    {
      if (v6)
        goto LABEL_31;
      goto LABEL_24;
    }
    if (!v6)
    {
      if (!v7)
        goto LABEL_25;
      goto LABEL_34;
    }
LABEL_11:
    v9 = *a2;
    *(_QWORD *)v29 = *(uint64_t *)((char *)a2 + 9);
    *(_QWORD *)&v29[7] = a2[2];
    v27 = *a3;
    v28 = *((_QWORD *)a3 + 2);
    goto LABEL_12;
  }
LABEL_17:
  if (v5 != 1)
    goto LABEL_20;
  if (!v6)
  {
    if (v7)
    {
LABEL_20:
      if (v7 - 1 >= 1)
      {
        *(_BYTE *)(a1 + 616) = 0;
        v10 = *a2;
        *(_DWORD *)&__src[9] = *(_DWORD *)((char *)a2 + 9);
        v11 = *(_DWORD *)&__src[9];
        *(_DWORD *)&__src[12] = *((_DWORD *)a2 + 3);
        v12 = a2[2];
        v13 = *(_QWORD *)(v10 + 40);
        *(_QWORD *)__src = v10;
        __src[8] = v12 - 2 == v13;
        *(_DWORD *)v33 = v11;
        *(_DWORD *)&v33[3] = *(_DWORD *)&__src[12];
        *(_QWORD *)&__src[16] = v12 - 2;
        v31 = v10;
        v32 = v12 - 1 == v13;
        v34 = v12 - 1;
        v36 = v12;
        v35 = *(_OWORD *)a2;
        sub_20F1C5EA8((_QWORD *)(a1 + 520), __src, (char *)&v37, 3uLL);
        v14 = *(_QWORD *)a3;
        *(_DWORD *)&__src[9] = *(_DWORD *)((char *)a3 + 9);
        v15 = *(_DWORD *)&__src[9];
        *(_DWORD *)&__src[12] = *((_DWORD *)a3 + 3);
        v16 = *((_QWORD *)a3 + 2);
        v17 = *(_QWORD *)(v14 + 40);
        *(_QWORD *)__src = v14;
        __src[8] = v16 - 2 == v17;
        *(_DWORD *)v33 = v15;
        *(_DWORD *)&v33[3] = *(_DWORD *)&__src[12];
        *(_QWORD *)&__src[16] = v16 - 2;
        v31 = v14;
        v32 = v16 - 1 == v17;
        v34 = v16 - 1;
        v36 = v16;
        v35 = *a3;
        return sub_20F1C5EA8((_QWORD *)(a1 + 544), __src, (char *)&v37, 3uLL);
      }
      goto LABEL_22;
    }
    v6 = 0;
LABEL_24:
    if (!v7)
      goto LABEL_25;
LABEL_31:
    if (v6)
    {
      if (v5 >= 1)
        goto LABEL_33;
      goto LABEL_35;
    }
LABEL_34:
    v6 = 0;
    if (v7 >= 1)
      goto LABEL_33;
LABEL_35:
    v9 = *a2;
    *(_QWORD *)v29 = *(uint64_t *)((char *)a2 + 9);
    *(_QWORD *)&v29[7] = a2[2];
    v27 = *a3;
    v28 = *((_QWORD *)a3 + 2);
    if (!v6)
      goto LABEL_26;
LABEL_12:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 531, (uint64_t)"state != states_.end()", 22, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    goto LABEL_26;
  }
LABEL_33:
  *(_BYTE *)(a1 + 616) = 0;
  v19 = *a2;
  *(_DWORD *)&__src[9] = *(_DWORD *)((char *)a2 + 9);
  v20 = *(_DWORD *)&__src[9];
  *(_DWORD *)&__src[12] = *((_DWORD *)a2 + 3);
  v21 = a2[2];
  v22 = v21 - 1 == *(_QWORD *)(v19 + 40);
  *(_QWORD *)__src = v19;
  __src[8] = v22;
  *(_DWORD *)v33 = v20;
  *(_DWORD *)&v33[3] = *(_DWORD *)&__src[12];
  *(_QWORD *)&__src[16] = v21 - 1;
  v31 = v19;
  v32 = v22;
  v34 = v21 - 1;
  v36 = v21;
  v35 = *(_OWORD *)a2;
  sub_20F1C5EA8((_QWORD *)(a1 + 520), __src, (char *)&v37, 3uLL);
  v23 = *(_QWORD *)a3;
  *(_DWORD *)&__src[9] = *(_DWORD *)((char *)a3 + 9);
  v24 = *(_DWORD *)&__src[9];
  *(_DWORD *)&__src[12] = *((_DWORD *)a3 + 3);
  v25 = *((_QWORD *)a3 + 2);
  v26 = v25 - 1 == *(_QWORD *)(v23 + 40);
  *(_QWORD *)__src = v23;
  __src[8] = v26;
  *(_DWORD *)v33 = v24;
  *(_DWORD *)&v33[3] = *(_DWORD *)&__src[12];
  *(_QWORD *)&__src[16] = v25 - 1;
  v31 = v23;
  v32 = v26;
  v34 = v25 - 1;
  v36 = v25;
  v35 = *a3;
  return sub_20F1C5EA8((_QWORD *)(a1 + 544), __src, (char *)&v37, 3uLL);
}

void sub_20F1C54AC(double a1, uint64_t a2, double **a3, void **a4)
{
  double *v6;
  float64x2_t v13;
  double v14;
  unint64_t v15;
  double *v16;
  double *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  double *v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  float64x2_t v40;
  __int128 v41;
  uint64_t v42;

  v6 = a3[1];
  if (*(v6 - 4) < a1)
  {
    __asm { FMOV            V2.2D, #0.5 }
    v13 = vmulq_f64(vaddq_f64(vaddq_f64(*(float64x2_t *)(v6 - 3), (float64x2_t)0), *(float64x2_t *)(v6 - 7)), _Q2);
    v14 = (*(v6 - 1) + 0.0 + *(v6 - 5)) * 0.5;
    v15 = (unint64_t)a3[2];
    if ((unint64_t)v6 >= v15)
    {
      v17 = *a3;
      v18 = ((char *)v6 - (char *)*a3) >> 5;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 59)
        sub_20E867F44();
      v20 = v15 - (_QWORD)v17;
      if (v20 >> 4 > v19)
        v19 = v20 >> 4;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
        v21 = 0x7FFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v40 = v13;
        if (v21 >> 59)
          goto LABEL_42;
        v22 = (char *)operator new(32 * v21);
        v13 = v40;
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[32 * v18];
      *(double *)v23 = a1;
      v24 = (double *)&v22[32 * v21];
      *(float64x2_t *)(v23 + 8) = v13;
      *((double *)v23 + 3) = v14;
      v16 = (double *)(v23 + 32);
      if (v6 == v17)
      {
        *a3 = (double *)v23;
        a3[1] = v16;
        a3[2] = v24;
      }
      else
      {
        do
        {
          v25 = *((_QWORD *)v6 - 4);
          v6 -= 4;
          *((_QWORD *)v23 - 4) = v25;
          v23 -= 32;
          v26 = *(_OWORD *)(v6 + 1);
          *((double *)v23 + 3) = v6[3];
          *(_OWORD *)(v23 + 8) = v26;
        }
        while (v6 != v17);
        v6 = *a3;
        *a3 = (double *)v23;
        a3[1] = v16;
        a3[2] = v24;
        if (!v6)
          goto LABEL_20;
      }
      operator delete(v6);
    }
    else
    {
      *v6 = a1;
      *(float64x2_t *)(v6 + 1) = v13;
      v16 = v6 + 4;
      v6[3] = v14;
    }
LABEL_20:
    a3[1] = v16;
  }
  v27 = (char *)a4[1];
  if (*((double *)v27 - 4) >= a1)
    return;
  v41 = *(_OWORD *)(v27 - 24);
  v42 = *((_QWORD *)v27 - 1);
  v28 = (unint64_t)a4[2];
  if ((unint64_t)v27 < v28)
  {
    *(double *)v27 = a1;
    *(_OWORD *)(v27 + 8) = *(_OWORD *)(v27 - 24);
    *((_QWORD *)v27 + 3) = *((_QWORD *)v27 - 1);
    v29 = v27 + 32;
    goto LABEL_40;
  }
  v30 = (char *)*a4;
  v31 = (v27 - (_BYTE *)*a4) >> 5;
  v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 59)
    sub_20E867F44();
  v33 = v28 - (_QWORD)v30;
  if (v33 >> 4 > v32)
    v32 = v33 >> 4;
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
    v34 = 0x7FFFFFFFFFFFFFFLL;
  else
    v34 = v32;
  if (!v34)
  {
    v35 = 0;
    goto LABEL_34;
  }
  if (v34 >> 59)
LABEL_42:
    sub_20E877A38();
  v35 = (char *)operator new(32 * v34);
LABEL_34:
  v36 = &v35[32 * v31];
  v37 = &v35[32 * v34];
  *(double *)v36 = a1;
  *(_OWORD *)(v36 + 8) = v41;
  *((_QWORD *)v36 + 3) = v42;
  v29 = v36 + 32;
  if (v27 == v30)
  {
    *a4 = v36;
    a4[1] = v29;
    a4[2] = v37;
  }
  else
  {
    do
    {
      v38 = *((_QWORD *)v27 - 4);
      v27 -= 32;
      *((_QWORD *)v36 - 4) = v38;
      v36 -= 32;
      v39 = *(_OWORD *)(v27 + 8);
      *((_QWORD *)v36 + 3) = *((_QWORD *)v27 + 3);
      *(_OWORD *)(v36 + 8) = v39;
    }
    while (v27 != v30);
    v27 = (char *)*a4;
    *a4 = v36;
    a4[1] = v29;
    a4[2] = v37;
    if (!v27)
      goto LABEL_40;
  }
  operator delete(v27);
LABEL_40:
  a4[1] = v29;
}

uint64_t sub_20F1C5740(_QWORD *a1, double a2, double a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  BOOL v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t result;
  double *v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;

  if (a3 <= 0.0
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 914, (uint64_t)"time_window > 0.0", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_37;
  }
  v6 = a1[24];
  if (v6 < 2)
    goto LABEL_35;
  v7 = a1[23];
  v8 = a1[19];
  if (!v7)
    v7 = 0x2E8BA2E8BA2E8BA3 * ((a1[20] - v8) >> 4);
  if (*(double *)(v8 + 176 * v7 - 176) < a2 + -0.2)
    goto LABEL_35;
  v9 = 0;
  v10 = 0;
  v11 = a1[24];
  do
  {
    v12 = v11 >> 1;
    v13 = (v11 >> 1) + v10;
    if (*(double *)(v8 + 176 * ((v13 + a1[22]) % (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[20] - v8) >> 4)))) <= a2 - a3)
    {
      v10 = v13 + 1;
      v9 = v13 + 1 == v6;
      v12 = v11 + ~v12;
    }
    v11 = v12;
  }
  while (v12);
  v14 = 0;
  v15 = v9;
  v16 = v10 != 0;
  v17 = v10 - 1;
  if (v16)
    v15 = 1;
  v18 = v17 != v6 && v15;
  if (!v15)
    v17 = a1[24];
  v19 = a1[22];
  v20 = 0x2E8BA2E8BA2E8BA3 * ((a1[20] - v8) >> 4);
  v21 = a1[24];
  do
  {
    v22 = v21 >> 1;
    v23 = (v21 >> 1) + v14;
    if (*(double *)(v8 + 176 * ((v23 + v19) % v20)) <= a2)
    {
      v14 = v23 + 1;
      LOBYTE(v12) = v23 + 1 == v6;
      v22 = v21 + ~v22;
    }
    v21 = v22;
  }
  while (v22);
  if (!(_BYTE)v12 && !v14 || ((v24 = v14 - 1, v24 != v6) ? (v25 = v18) : (v25 = 0), !v25))
  {
LABEL_35:
    *(double *)&result = 0.0;
    return result;
  }
  *(double *)&result = 0.0;
  if (v24 | v17 && v17 - v24 < 0)
  {
    v27 = (double *)(v8 + 176 * ((v19 + v24) % v20));
    v28 = (double *)(v8 + 176 * ((v19 + v17) % v20));
    v29 = v27[19];
    v30 = v27[20];
    v32 = v28[19];
    v31 = v28[20];
    v33 = *v27 - *v28;
    if (v33 > 0.0
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundler.cpp", 936, (uint64_t)"time_step > 0.0", 15, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      *(double *)&result = sqrt((v29 - v32) * (v29 - v32) + (v30 - v31) * (v30 - v31)) / v33 * a3;
      return result;
    }
LABEL_37:
    abort();
  }
  return result;
}

const double *sub_20F1C5A3C(unint64_t *a1, void *a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  const double *v6;
  const double *v7;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  int64x2_t v30;
  int64x2_t *v31;
  uint64_t v32;
  unint64_t v33;
  const double *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int64x2_t *v45;
  uint64_t v46;
  int64x2_t v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  double *v64;
  unint64_t v65;
  float64x2_t v67;
  float64x2_t *v68;
  unint64_t v69;

  v4 = *a1;
  v5 = (uint64_t)a2 - *a1;
  v6 = (const double *)(*a1 + (v5 & 0xFFFFFFFFFFFFFFF8));
  if (!a3)
    return v6;
  v7 = (const double *)a4;
  v10 = v5 >> 3;
  v12 = a1[1];
  v11 = a1[2];
  if (a3 <= (uint64_t)(v11 - v12) >> 3)
  {
    v19 = (uint64_t)(v12 - (_QWORD)v6) >> 3;
    v20 = a3;
    if (a3 <= v19)
    {
      v21 = a1[1];
      v19 = a3;
      goto LABEL_42;
    }
    v21 = v12 + 8 * (a3 - v19);
    v22 = v20 * 8 - (v12 - (_QWORD)v6) - 8;
    if (v22 >= 0x98)
    {
      if (v12 >= (unint64_t)(a4 + 1)
        || (v23 = (uint64_t *)a1[1], (v22 & 0xFFFFFFFFFFFFFFF8) + v12 + 8 <= (unint64_t)a4))
      {
        v44 = (v22 >> 3) + 1;
        v23 = (uint64_t *)(v12 + 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL));
        v45 = (int64x2_t *)(v12 + 16);
        v46 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = vdupq_lane_s64(*a4, 0);
          v45[-1] = v47;
          *v45 = v47;
          v45 += 2;
          v46 -= 4;
        }
        while (v46);
        if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_41:
          a1[1] = v21;
          if ((const double *)v12 == v6)
            return v6;
LABEL_42:
          v48 = (char *)&v6[v20];
          v49 = v21 - (_QWORD)&v6[v20];
          v50 = v49 >> 3;
          v51 = (uint64_t *)(v21 - v20 * 8);
          v52 = (_QWORD *)v21;
          if ((unint64_t)v51 < v12)
          {
            v53 = (v5 & 0xFFFFFFFFFFFFFFF8) + v49;
            v54 = v53 + v4 + 8;
            if (v12 > v54)
              v54 = v12;
            v55 = v54 + ~v4 - v53;
            if (v55 >= 0x58)
            {
              v52 = (_QWORD *)v21;
              if (v21 - ((v5 & 0xFFFFFFFFFFFFFFF8) + v4) - v49 >= 0x20)
              {
                v56 = (v55 >> 3) + 1;
                v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
                v51 = (uint64_t *)((char *)v51 + v57);
                v52 = (_QWORD *)(v21 + v57);
                v58 = (_OWORD *)(v21 + 16);
                v59 = (__int128 *)(8 * v50 + 8 * v10 + v4 + 16);
                v60 = v56 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v61 = *v59;
                  *(v58 - 1) = *(v59 - 1);
                  *v58 = v61;
                  v58 += 2;
                  v59 += 2;
                  v60 -= 4;
                }
                while (v60);
                if (v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_52;
              }
            }
            else
            {
              v52 = (_QWORD *)v21;
            }
            do
            {
              v62 = *v51++;
              *v52++ = v62;
            }
            while ((unint64_t)v51 < v12);
          }
LABEL_52:
          a1[1] = (unint64_t)v52;
          if ((char *)v21 != v48)
            memmove((void *)(v21 - 8 * v50), v6, v49);
          if (v6 <= v7)
          {
            if (a1[1] <= (unint64_t)v7)
              v63 = 0;
            else
              v63 = a3;
            v7 += v63;
          }
          if (v19 >= 0xA && (v6 >= v7 + 1 || (unint64_t)v7 >= v4 + (v5 & 0xFFFFFFFFFFFFFFF8) + 8 * v19))
          {
            v64 = (double *)&v6[v19 & 0xFFFFFFFFFFFFFFFCLL];
            v65 = v19 & 3;
            v67 = vld1q_dup_f64(v7);
            v68 = (float64x2_t *)(v4 + 8 * v10 + 16);
            v69 = v19 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v68[-1] = v67;
              *v68 = v67;
              v68 += 2;
              v69 -= 4;
            }
            while (v69);
            if (v19 == (v19 & 0xFFFFFFFFFFFFFFFCLL))
              return v6;
          }
          else
          {
            v64 = (double *)v6;
            v65 = v19;
          }
          do
          {
            *v64++ = *v7;
            --v65;
          }
          while (v65);
          return v6;
        }
      }
    }
    else
    {
      v23 = (uint64_t *)a1[1];
    }
    do
      *v23++ = *a4;
    while (v23 != (uint64_t *)v21);
    goto LABEL_41;
  }
  v13 = a3 + ((uint64_t)(v12 - v4) >> 3);
  if (v13 >> 61)
    sub_20E867F44();
  v15 = v11 - v4;
  if (v15 >> 2 > v13)
    v13 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v13;
  if (v16)
  {
    if (v16 >> 61)
      sub_20E877A38();
    v17 = v16;
    v18 = operator new(8 * v16);
    v16 = v17;
  }
  else
  {
    v18 = 0;
  }
  v24 = v5 >> 3;
  v25 = (unint64_t)&v18[8 * v10];
  v26 = (char *)(v25 + 8 * a3);
  v27 = (a3 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v28 = (char *)v25;
  if (v27 < 0x13)
    goto LABEL_74;
  if (v25 < (unint64_t)(v7 + 1))
  {
    v28 = (char *)v25;
    if (&v18[8 * a3 + (v5 & 0xFFFFFFFFFFFFFFF8)] > (_BYTE *)v7)
      goto LABEL_74;
  }
  v29 = v27 + 1;
  v28 = (char *)(v25 + 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL));
  v30 = vdupq_lane_s64(*(_QWORD *)v7, 0);
  v31 = (int64x2_t *)&v18[8 * v24 + 16];
  v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v31[-1] = v30;
    *v31 = v30;
    v31 += 2;
    v32 -= 4;
  }
  while (v32);
  if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_74:
    do
    {
      *(double *)v28 = *v7;
      v28 += 8;
    }
    while (v28 != v26);
  }
  v33 = v25;
  if ((void *)v4 != a2)
  {
    v34 = v6;
    v33 = v25;
    if ((unint64_t)(v5 - 8) < 0x68)
      goto LABEL_75;
    v34 = v6;
    v33 = v25;
    if ((v5 & 0xFFFFFFFFFFFFFFF8) + v4 - (unint64_t)&v18[v5 & 0xFFFFFFFFFFFFFFF8] < 0x20)
      goto LABEL_75;
    v35 = ((unint64_t)(v5 - 8) >> 3) + 1;
    v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v6[v36 / 0xFFFFFFFFFFFFFFF8];
    v33 = v25 - v36;
    v37 = 8 * v24 - 16;
    v38 = &v18[v37];
    v39 = (__int128 *)(v4 + v37);
    v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v41 = *v39;
      *(v38 - 1) = *(v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 2;
      v40 -= 4;
    }
    while (v40);
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_75:
      do
      {
        v42 = *((_QWORD *)v34-- - 1);
        *(_QWORD *)(v33 - 8) = v42;
        v33 -= 8;
      }
      while (v34 != (const double *)v4);
    }
  }
  v43 = &v18[8 * v16];
  if ((const double *)v12 != v6)
    memmove(v26, v6, v12 - (_QWORD)v6);
  *a1 = v33;
  a1[1] = (unint64_t)&v26[v12 - (_QWORD)v6];
  a1[2] = (unint64_t)v43;
  if (v4)
    operator delete((void *)v4);
  return (const double *)v25;
}

void sub_20F1C5E9C(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[152] = 0;
}

_QWORD *sub_20F1C5EA8(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20E867F44();
    v13 = 3 * v12;
    result = operator new(24 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v18 = (void *)*result;
LABEL_20:
    result = memmove(v18, __src, v14);
    goto LABEL_21;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20F1C6014(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F1C6588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1C65AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1C65C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1C6618(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F1C6B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1C6BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1C6BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1C6C1C(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F1C7190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1C71B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1C71C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1C7220(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, const char **a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  _QWORD *p_dst;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  _QWORD *__dst;
  __int128 v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[3];

  v68[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    *(_QWORD *)&v60 = v10;
    *((_QWORD *)&v60 + 1) = v10;
    v62 = 0uLL;
    v61 = v11;
    v12 = *a5;
    v13 = strlen(*a5);
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v18 = v13 | 7;
      v19 = v18 + 1;
      p_dst = operator new(v18 + 1);
      *(_QWORD *)&v64 = v14;
      *((_QWORD *)&v64 + 1) = v19 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v64) = v13;
      p_dst = &__dst;
      if (!v13)
      {
LABEL_13:
        *((_BYTE *)p_dst + v14) = 0;
        v20 = __dst;
        v68[0] = v64;
        *(_QWORD *)((char *)v68 + 7) = *(_QWORD *)((char *)&v64 + 7);
        v21 = HIBYTE(v64);
        v22 = operator new(0x38uLL);
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = off_24C9ABC20;
        *v22 = &off_24C9ABBD0;
        v23 = v68[0];
        v22[4] = v20;
        v22[5] = v23;
        *(_QWORD *)((char *)v22 + 47) = *(_QWORD *)((char *)v68 + 7);
        *((_BYTE *)v22 + 55) = v21;
        v68[0] = 0;
        *(_QWORD *)((char *)v68 + 7) = 0;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        *(_QWORD *)&v62 = v22 + 3;
        *((_QWORD *)&v62 + 1) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        *(_OWORD *)v65 = v60;
        *(_QWORD *)&v65[16] = v61;
        if (v61)
        {
          v27 = &v61->__shared_owners_;
          do
            v28 = __ldxr((unint64_t *)v27);
          while (__stxr(v28 + 1, (unint64_t *)v27));
        }
        v66 = v62;
        if (*((_QWORD *)&v62 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v67 = v62;
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
          }
        }
        else
        {
          v67 = v62;
        }
        if (v61)
        {
          v32 = &v61->__shared_owners_;
          do
            v33 = __ldaxr((unint64_t *)v32);
          while (__stlxr(v33 - 1, (unint64_t *)v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v34 = *(_QWORD *)v65;
        if (*(char *)(v67 + 31) >= 0)
          v35 = v67 + 8;
        else
          v35 = *(_QWORD *)(v67 + 8);
        v36 = _os_log_pack_fill();
        *(_DWORD *)v36 = 136315138;
        *(_QWORD *)(v36 + 4) = v35;
        v37 = operator new();
        v38 = *((unsigned __int8 *)a2 + 23);
        if ((v38 & 0x80u) == 0)
          v39 = a2;
        else
          v39 = (uint64_t *)*a2;
        if ((v38 & 0x80u) != 0)
          v38 = a2[1];
        *(_QWORD *)v37 = v34;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)&v65[8];
        *(_QWORD *)&v65[8] = 0;
        *(_QWORD *)&v65[16] = 0;
        *(_OWORD *)(v37 + 24) = v66;
        v66 = 0uLL;
        *(_QWORD *)(v37 + 40) = v39;
        *(_QWORD *)(v37 + 48) = v38;
        *(_BYTE *)(v37 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v60 = v37;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v60);
        v40 = v60;
        *(_QWORD *)&v60 = 0;
        if (v40)
        {
          v41 = *(std::__shared_weak_count **)(v40 + 32);
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          v44 = *(std::__shared_weak_count **)(v40 + 16);
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          MEMORY[0x212BC6398](v40, 0x10F0C40B62ED6C6);
          v47 = __dst;
          __dst = 0;
          if (v47)
          {
            v48 = (std::__shared_weak_count *)v47[4];
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v51 = (std::__shared_weak_count *)v47[2];
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            MEMORY[0x212BC6398](v47, 0x10F0C40B62ED6C6);
          }
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        if (*((_QWORD *)&v66 + 1))
        {
          v55 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v57 = *(std::__shared_weak_count **)&v65[16];
        if (*(_QWORD *)&v65[16])
        {
          v58 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v12, v14);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v16 = *a5;
  *(_DWORD *)v65 = 136315138;
  *(_QWORD *)&v65[4] = v16;
  v17 = (void *)_os_log_send_and_compose_impl();
  if (v17)
    free(v17);
}

void sub_20F1C7794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1C77B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1C77CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1C7824(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F1C7BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1C7BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1C7BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F1C7C10(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  double *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  double *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  double *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  double *v47;
  uint64_t v48;
  __int128 v49;
  double v50;
  double v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  size_t v57;
  const char *v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  const char *v61;
  size_t v62;
  void *v63;
  unint64_t v64;
  const char *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *p_p;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  size_t v75;
  std::__shared_weak_count_vtbl *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_owners;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  double v110;
  double *v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  void *v119;
  double v120;
  double v121;
  double v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  double *v128;
  double *v129;
  __int128 v130;
  double *v131;
  double *v132;
  double v133;
  double v134;
  BOOL v135;
  double v136;
  double v137;
  uint64_t v138;
  double *v139;
  double *v140;
  _BYTE *v141;
  __int128 v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  double *v155;
  uint64_t v156;
  int64_t v157;
  unint64_t v158;
  char *v159;
  __int128 v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  double *v166;
  _OWORD *v167;
  double *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *i;
  uint64_t v180;
  __int128 v181;
  double *v182;
  int64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _BYTE *v188;
  char *v189;
  int64_t v190;
  unint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _OWORD *v198;
  char *v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  float64x2_t v203;
  double v204;
  float64x2_t v205;
  double v206;
  double v207;
  float64x2_t v208;
  double v209;
  float64x2_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  __int128 v215;
  uint64_t v216;
  double v217;
  int v218;
  unint64_t v219;
  unint64_t v220;
  void *v221;
  double v222;
  unsigned __int8 *v223;
  uint64_t v224;
  size_t v225;
  const char *v226;
  unsigned __int8 v227;
  unsigned __int8 v228;
  const char *v229;
  size_t v230;
  void *v231;
  unint64_t v232;
  const char *v233;
  unsigned __int8 *v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  NSObject *v242;
  size_t v243;
  std::__shared_weak_count_vtbl *v244;
  std::__shared_weak_count *v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  void *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  void *v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  double v278;
  unint64_t v279;
  unint64_t v280;
  double *v282;
  double *v283;
  char *v284;
  uint64_t v285;
  int v286;
  char *v287;
  void **v288;
  unint64_t v289;
  unint64_t v290;
  unsigned int v291;
  size_t v292;
  char *v293;
  uint64_t v294;
  int v295;
  size_t v296;
  uint64_t v297;
  size_t v298;
  size_t v299;
  void *v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double *v306;
  char v307;
  double *v308;
  uint64_t v309;
  unint64_t v310;
  char *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  char *v317;
  uint64_t v318;
  __int128 v319;
  char *v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  uint64_t v326;
  __int128 v327;
  double *v328;
  uint64_t v329;
  int v330;
  unint64_t v331;
  double *v332;
  double *v333;
  double *v334;
  double *v335;
  double *v336;
  double *v337;
  double v338;
  double v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  _BYTE *v343;
  double *v344;
  uint64_t v345;
  int64_t v346;
  unint64_t v347;
  double *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  _OWORD *v353;
  double *v354;
  uint64_t v355;
  __int128 v356;
  double v357;
  int v358;
  unint64_t v359;
  unint64_t v360;
  unsigned __int8 *v361;
  size_t v362;
  const char *v363;
  unsigned __int8 v364;
  unsigned __int8 v365;
  const char *v366;
  size_t v367;
  void *v368;
  unint64_t v369;
  const char *v370;
  unsigned __int8 *v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  void *v375;
  uint64_t v376;
  uint64_t v377;
  NSObject *v378;
  size_t v379;
  std::__shared_weak_count_vtbl *v380;
  std::__shared_weak_count *v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  const char *v389;
  uint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  std::__shared_weak_count *v394;
  unint64_t *v395;
  unint64_t v396;
  void *v397;
  std::__shared_weak_count *v398;
  unint64_t *v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  std::__shared_weak_count *v404;
  unint64_t *v405;
  unint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  void *v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  double v414;
  double *v415;
  double v416;
  double v417;
  double v418;
  double v419;
  double v420;
  double v421;
  double v422;
  void *v423;
  double v424;
  double v425;
  double v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  uint64_t v431;
  double *v432;
  double *v433;
  __int128 v434;
  double *v435;
  double *v436;
  double v437;
  double v438;
  double v440;
  double v441;
  uint64_t v442;
  double *v443;
  double *v444;
  _BYTE *v445;
  __int128 v446;
  char *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  char *v453;
  uint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  _BYTE *v458;
  double *v459;
  uint64_t v460;
  int64_t v461;
  unint64_t v462;
  char *v463;
  __int128 v464;
  char *v465;
  uint64_t v466;
  __int128 v467;
  uint64_t v468;
  uint64_t v469;
  double *v470;
  _OWORD *v471;
  double *v472;
  uint64_t v473;
  __int128 v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  char *v480;
  char *v481;
  char *v482;
  char *j;
  uint64_t v484;
  __int128 v485;
  double *v486;
  int64_t v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  _BYTE *v492;
  char *v493;
  int64_t v494;
  unint64_t v495;
  char *v496;
  uint64_t v497;
  char *v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  _OWORD *v502;
  char *v503;
  uint64_t v504;
  __int128 v505;
  uint64_t v506;
  float64x2_t v507;
  double v508;
  float64x2_t v509;
  double v510;
  double v511;
  float64x2_t v512;
  double v513;
  float64x2_t v514;
  char *v515;
  char *v516;
  uint64_t v517;
  char *v518;
  __int128 v519;
  uint64_t v520;
  double v521;
  int v522;
  unint64_t v523;
  unint64_t v524;
  void *v525;
  double v526;
  _BOOL4 v527;
  double v528;
  unint64_t v529;
  unint64_t v530;
  double *v532;
  double *v533;
  char *v534;
  int v535;
  int v536;
  char *v537;
  void **v538;
  unint64_t v539;
  unint64_t v540;
  size_t v541;
  char *v542;
  int v543;
  uint64_t v544;
  size_t v545;
  size_t v546;
  void *v547;
  double v548;
  double v549;
  double v550;
  double v551;
  double v552;
  double *v553;
  char v554;
  double *v555;
  uint64_t v556;
  unsigned __int8 *v557;
  uint64_t v558;
  size_t v559;
  const char *v560;
  unsigned __int8 v561;
  unsigned __int8 v562;
  const char *v563;
  size_t v564;
  void *v565;
  unint64_t v566;
  const char *v567;
  unsigned __int8 *v568;
  int v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  void *v573;
  uint64_t v574;
  uint64_t v575;
  NSObject *v576;
  size_t v577;
  std::__shared_weak_count_vtbl *v578;
  std::__shared_weak_count *v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  unint64_t v583;
  void *v584;
  char *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  std::__shared_weak_count *v589;
  unint64_t *v590;
  unint64_t v591;
  std::__shared_weak_count *v592;
  unint64_t *v593;
  unint64_t v594;
  uint64_t v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  std::__shared_weak_count *v602;
  unint64_t *v603;
  unint64_t v604;
  std::__shared_weak_count *v605;
  unint64_t *v606;
  unint64_t v607;
  void *v608;
  std::__shared_weak_count *v609;
  unint64_t *v610;
  unint64_t v611;
  void *v612;
  __int128 v613;
  _QWORD *v614;
  double *v615;
  char *v616;
  double v617;
  double v618;
  _QWORD *v619;
  _QWORD *v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  unint64_t v624;
  char *v625;
  char *v626;
  char *v627;
  uint64_t v628;
  __int128 v629;
  __int128 v630;
  _QWORD *v631;
  double *v632;
  char *v633;
  double v634;
  double v635;
  _QWORD *v636;
  _QWORD *v637;
  uint64_t v638;
  unint64_t v639;
  uint64_t v640;
  unint64_t v641;
  char *v642;
  char *v643;
  char *v644;
  uint64_t v645;
  __int128 v646;
  unint64_t v647;
  unint64_t v648;
  _BOOL4 v649;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  unint64_t v663;
  unint64_t v664;
  double *v665;
  double *v666;
  double *v667;
  double *v668;
  char *v670;
  int v671;
  char *v672;
  int v673;
  double *v674;
  double *v675;
  uint64_t v676;
  double *v677;
  double *v678;
  uint64_t v679;
  char *v680;
  char *v681;
  unint64_t v682;
  char *v683;
  char *v684;
  uint64_t v685;
  double *v686;
  double *v687;
  char *v688;
  unsigned int v689;
  double *v690;
  const char *v691;
  char *v692;
  unsigned int v693;
  void *object;
  void *v695[2];
  __int128 v696;
  void *__p;
  size_t v698;
  unint64_t v699;
  char v700;
  void *v701;
  void *v702;
  char v703;
  _QWORD *v704;
  _QWORD *v705;
  unint64_t v706;
  void *v707;
  uint64_t *v708;
  char *v709;
  void *v710;
  _QWORD *v711;
  unint64_t v712;
  void *v713;
  char *v714;
  char *v715;
  void *v716;
  __int128 v717;
  void *v718;
  char *v719;
  uint64_t v720;
  __int128 v721;
  unint64_t v722;
  void **v723;
  unint64_t rep;
  unint64_t v725;
  int v726;
  const char *v727;
  int v728;
  const char *v729;
  uint64_t v730;
  std::__shared_weak_count *v731;
  uint64_t v732;
  double *v733;
  double *v734;
  _QWORD *v735[2];
  double **v736;
  uint64_t **v737;
  double **v738;
  uint64_t *v739[3];

  v4 = a1[30];
  v714 = 0;
  v715 = 0;
  v713 = 0;
  if (v4)
  {
    if (v4 >> 59)
      sub_20E867F44();
    v5 = (char *)operator new(32 * v4);
    v6 = 0;
    v713 = v5;
    v715 = &v5[32 * v4];
    v7 = a1[28];
    v8 = a1[25];
    v9 = (a1[26] - v8) >> 5;
    v10 = v4;
    do
    {
      v11 = &v5[v6];
      v12 = v8 + 32 * (v7 % v9);
      *(_QWORD *)v11 = *(_QWORD *)v12;
      v13 = *(_OWORD *)(v12 + 8);
      *((_QWORD *)v11 + 3) = *(_QWORD *)(v12 + 24);
      *(_OWORD *)(v11 + 8) = v13;
      v6 += 32;
      ++v7;
      --v10;
    }
    while (v10);
    v714 = &v5[v6];
    v710 = 0;
    v711 = 0;
    v712 = 0;
    *(_QWORD *)&v717 = 0;
    v14 = (char *)operator new(32 * v4);
    v15 = 0;
    v716 = v14;
    *((_QWORD *)&v717 + 1) = &v14[32 * v4];
    v16 = a1[28];
    v17 = a1[25];
    v18 = (a1[26] - v17) >> 5;
    do
    {
      v19 = &v14[v15];
      v20 = v17 + 32 * (v16 % v18);
      *(_QWORD *)v19 = *(_QWORD *)v20;
      v21 = *(_OWORD *)(v20 + 8);
      *((_QWORD *)v19 + 3) = *(_QWORD *)(v20 + 24);
      *(_OWORD *)(v19 + 8) = v21;
      v15 += 32;
      ++v16;
      --v4;
    }
    while (v4);
    v22 = (double *)&v14[v15];
    *(_QWORD *)&v717 = &v14[v15];
  }
  else
  {
    v14 = 0;
    v22 = 0;
    v710 = 0;
    v711 = 0;
    v712 = 0;
    v716 = 0;
    v717 = 0uLL;
  }
  v23 = ((char *)v22 - v14) >> 5;
  if ((int)v23 >= 40)
    v24 = 40;
  else
    v24 = ((char *)v22 - v14) >> 5;
  v732 = 0;
  v733 = 0;
  v734 = 0;
  v25 = v23 - 1;
  if (v23 == 1)
  {
    v26 = 0;
    v27 = 0;
    v28 = &v22[-4 * v24];
    if (v24 == 1)
    {
LABEL_15:
      v29 = v26;
      goto LABEL_47;
    }
  }
  else
  {
    if (v25 >> 61)
      sub_20E867F44();
    v26 = (double *)operator new(8 * v25);
    v27 = &v26[v25];
    v733 = v26;
    v28 = &v22[-4 * v24];
    if (v24 == 1)
      goto LABEL_15;
  }
  v686 = v28;
  v29 = v26;
  do
  {
    while (1)
    {
      v30 = v28;
      v31 = v28[4];
      v28 += 4;
      v32 = v31 - *v30;
      if (v26 >= v27)
        break;
      *v26++ = v32;
      if (v28 == v22 - 4)
        goto LABEL_46;
    }
    v33 = v26 - v29;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
    {
      v733 = v26;
      v734 = v27;
      v732 = (uint64_t)v29;
      sub_20E867F44();
    }
    if (((char *)v27 - (char *)v29) >> 2 > v34)
      v34 = ((char *)v27 - (char *)v29) >> 2;
    if ((unint64_t)((char *)v27 - (char *)v29) >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v34;
    if (v35)
    {
      if (v35 >> 61)
      {
        v733 = v26;
        v734 = v27;
        v732 = (uint64_t)v29;
        sub_20E877A38();
      }
      v36 = operator new(8 * v35);
      v37 = (double *)&v36[8 * v33];
      *v37 = v32;
      v38 = (uint64_t)(v37 + 1);
      v39 = (char *)v26 - (char *)v29;
      if (v26 != v29)
      {
LABEL_29:
        v40 = v39 - 8;
        if (v40 < 0x168
          || (v43 = ((char *)(v26 - 1) - (char *)v29) & 0xFFFFFFFFFFFFFFF8,
              &v36[(char *)v26 - (char *)v29 - 8 - v43] > &v36[(char *)v26 - (char *)v29 - 8])
          || (double *)((char *)v26 - v43 - 8) > v26 - 1
          || (unint64_t)((char *)v29 - v36) < 0x20)
        {
          v41 = v26;
        }
        else
        {
          v44 = (v40 >> 3) + 1;
          v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v26[v45 / 0xFFFFFFFFFFFFFFF8];
          v37 = (double *)((char *)v37 - v45);
          v46 = &v36[8 * v33 - 16];
          v47 = v26 - 2;
          v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v49 = *(_OWORD *)v47;
            *(v46 - 1) = *((_OWORD *)v47 - 1);
            *v46 = v49;
            v46 -= 2;
            v47 -= 4;
            v48 -= 4;
          }
          while (v48);
          if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_32:
            v27 = (double *)&v36[8 * v35];
            if (!v29)
              goto LABEL_34;
LABEL_33:
            operator delete(v29);
            goto LABEL_34;
          }
        }
        do
        {
          v42 = *((_QWORD *)v41-- - 1);
          *((_QWORD *)v37-- - 1) = v42;
        }
        while (v41 != v29);
        goto LABEL_32;
      }
    }
    else
    {
      v36 = 0;
      v37 = (double *)(8 * v33);
      *(double *)(8 * v33) = v32;
      v38 = 8 * v33 + 8;
      v39 = (char *)v26 - (char *)v29;
      if (v26 != v29)
        goto LABEL_29;
    }
    v27 = (double *)&v36[8 * v35];
    if (v29)
      goto LABEL_33;
LABEL_34:
    v29 = v37;
    v26 = (double *)v38;
  }
  while (v28 != v22 - 4);
LABEL_46:
  v733 = v26;
  v28 = v686;
LABEL_47:
  v734 = v27;
  v732 = (uint64_t)v29;
  v50 = sub_20F1CE188(v29, v26);
  v51 = 0.002;
  if (v50 > 0.002)
  {
    v51 = v50;
    goto LABEL_141;
  }
  sub_20F1CD980(&v707);
  if (**((int **)v707 + 7) <= 2)
  {
    v52 = *((unsigned __int8 *)v707 + 72);
    v53 = sub_20E8C31DC((uint64_t)v707, "OSLogSurrogateAppender", 1, 0);
    v54 = v53;
    if (v52 || v53)
    {
      v723 = &v707;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v725 = std::chrono::system_clock::now().__d_.__rep_;
      v726 = 2;
      v727 = "unknown file";
      v728 = 261;
      v731 = 0;
      v729 = "unknown function";
      v730 = 0;
      v55 = (unsigned __int8 *)*v723;
      v56 = (uint64_t)*v723 + 16;
      if (*((char *)*v723 + 39) < 0)
      {
        v58 = (const char *)*((_QWORD *)v55 + 2);
        v57 = *((_QWORD *)v55 + 3);
        v687 = v28;
        v60 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v60 & 1) == 0)
        {
LABEL_884:
          if (__cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
            if ((_BYTE)v696 && SHIBYTE(v695[1]) < 0)
              operator delete(object);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
        }
      }
      else
      {
        v57 = *((unsigned __int8 *)*v723 + 39);
        v58 = (char *)*v723 + 16;
        v687 = v28;
        v59 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v59 & 1) == 0)
          goto LABEL_884;
      }
      if (byte_254A4A4F8[23] >= 0)
        v61 = byte_254A4A4F8;
      else
        v61 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v62 = byte_254A4A4F8[23];
      else
        v62 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v61, v58);
      v63 = v695;
      if (v62 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v62 >= 0x17)
      {
        v64 = v54;
        v65 = v58;
        v66 = v56;
        v67 = v55;
        v68 = v52;
        v69 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v62 | 7) != 0x17)
          v69 = v62 | 7;
        v70 = v69 + 1;
        v63 = operator new(v69 + 1);
        v695[1] = (void *)v62;
        *(_QWORD *)&v696 = v70 | 0x8000000000000000;
        v695[0] = v63;
        v52 = v68;
        v55 = v67;
        v56 = v66;
        v58 = v65;
        v54 = v64;
      }
      else
      {
        BYTE7(v696) = v62;
        if (!v62)
        {
LABEL_70:
          *((_BYTE *)v63 + v62) = 0;
          BYTE8(v696) = 1;
          p_p = &__p;
          if (v57 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v57 >= 0x17)
          {
            v72 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v57 | 7) != 0x17)
              v72 = v57 | 7;
            v73 = v72 + 1;
            p_p = operator new(v72 + 1);
            v698 = v57;
            v699 = v73 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v699) = v57;
            if (!v57)
            {
LABEL_78:
              *((_BYTE *)p_p + v57) = 0;
              v700 = 1;
              v74 = object;
              if (SHIBYTE(v699) < 0)
                operator delete(__p);
              v28 = v687;
              if (BYTE8(v696) && SBYTE7(v696) < 0)
                operator delete(v695[0]);
              if (object)
                os_release(object);
              if (v54 && *(_QWORD *)(v54 + 24))
              {
                v75 = _os_log_pack_size();
                v76 = (std::__shared_weak_count_vtbl *)operator new(v75, (std::align_val_t)8uLL);
                v77 = (std::__shared_weak_count *)operator new();
                v78 = v77;
                v77->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v77->__shared_owners_;
                v77->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v77->__shared_weak_owners_ = 0;
                v77[1].__vftable = v76;
                object = v76;
                v695[0] = v76;
                v695[1] = v77;
                do
                  v80 = __ldxr(p_shared_owners);
                while (__stxr(v80 + 1, p_shared_owners));
                v696 = 0uLL;
                __p = 0;
                v28 = v687;
                do
                  v81 = __ldaxr(p_shared_owners);
                while (__stlxr(v81 - 1, p_shared_owners));
                if (!v81)
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v78);
                }
                v82 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v83 = operator new();
                v84 = v55[39];
                if ((v84 & 0x80u) == 0)
                  v85 = v56;
                else
                  v85 = *((_QWORD *)v55 + 2);
                if ((v84 & 0x80u) != 0)
                  v84 = *((_QWORD *)v55 + 3);
                *(_QWORD *)v83 = v82;
                *(_OWORD *)(v83 + 8) = *(_OWORD *)v695;
                v695[0] = 0;
                v695[1] = 0;
                *(_OWORD *)(v83 + 24) = v696;
                v696 = 0uLL;
                *(_QWORD *)(v83 + 40) = v85;
                *(_QWORD *)(v83 + 48) = v84;
                *(_BYTE *)(v83 + 56) = 2;
                v718 = 0;
                *(_QWORD *)&v721 = v83;
                (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v54 + 24) + 40))(*(_QWORD *)(v54 + 24), &v721);
                v86 = v721;
                *(_QWORD *)&v721 = 0;
                if (v86)
                {
                  v87 = *(std::__shared_weak_count **)(v86 + 32);
                  if (v87)
                  {
                    v88 = (unint64_t *)&v87->__shared_owners_;
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                  v90 = *(std::__shared_weak_count **)(v86 + 16);
                  if (v90)
                  {
                    v91 = (unint64_t *)&v90->__shared_owners_;
                    do
                      v92 = __ldaxr(v91);
                    while (__stlxr(v92 - 1, v91));
                    if (!v92)
                    {
                      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                      std::__shared_weak_count::__release_weak(v90);
                    }
                  }
                  MEMORY[0x212BC6398](v86, 0x10F0C40B62ED6C6);
                  v93 = v718;
                  v718 = 0;
                  if (v93)
                  {
                    v94 = (std::__shared_weak_count *)*((_QWORD *)v93 + 4);
                    if (v94)
                    {
                      v95 = (unint64_t *)&v94->__shared_owners_;
                      do
                        v96 = __ldaxr(v95);
                      while (__stlxr(v96 - 1, v95));
                      if (!v96)
                      {
                        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                        std::__shared_weak_count::__release_weak(v94);
                      }
                    }
                    v97 = (std::__shared_weak_count *)*((_QWORD *)v93 + 2);
                    if (v97)
                    {
                      v98 = (unint64_t *)&v97->__shared_owners_;
                      do
                        v99 = __ldaxr(v98);
                      while (__stlxr(v99 - 1, v98));
                      if (!v99)
                      {
                        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                        std::__shared_weak_count::__release_weak(v97);
                      }
                    }
                    MEMORY[0x212BC6398](v93, 0x10F0C40B62ED6C6);
                  }
                }
                v100 = (std::__shared_weak_count *)*((_QWORD *)&v696 + 1);
                if (*((_QWORD *)&v696 + 1))
                {
                  v101 = (unint64_t *)(*((_QWORD *)&v696 + 1) + 8);
                  do
                    v102 = __ldaxr(v101);
                  while (__stlxr(v102 - 1, v101));
                  if (!v102)
                  {
                    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                    std::__shared_weak_count::__release_weak(v100);
                  }
                }
                v103 = (std::__shared_weak_count *)v695[1];
                if (v695[1])
                {
                  v104 = (unint64_t *)((char *)v695[1] + 8);
                  do
                    v105 = __ldaxr(v104);
                  while (__stlxr(v105 - 1, v104));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                    std::__shared_weak_count::__release_weak(v103);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG);
                LOWORD(object) = 0;
                v106 = (void *)_os_log_send_and_compose_impl();
                if (v106)
                  free(v106);
              }
              if (v52)
              {
                sub_20E8C003C((uint64_t)&v723, "PredictionBundlerIMUFilter: IMU sampling period too small - using fixed sampling period.");
                sub_20E863570((uint64_t)&v723);
              }
              sub_20E863570((uint64_t)&v723);
              v107 = v731;
              if (v731)
              {
                v108 = (unint64_t *)&v731->__shared_owners_;
                do
                  v109 = __ldaxr(v108);
                while (__stlxr(v109 - 1, v108));
                if (!v109)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v107);
                }
              }
              v22 = (double *)v717;
              goto LABEL_141;
            }
          }
          memmove(p_p, v58, v57);
          goto LABEL_78;
        }
      }
      memmove(v63, v61, v62);
      goto LABEL_70;
    }
  }
LABEL_141:
  v110 = v51 * 0.01;
  v112 = *(v22 - 4);
  v111 = v22 - 4;
  v113 = v112;
  if (v28 != v111)
  {
    v114 = *v28;
    v115 = 1.79769313e308;
    do
    {
      v116 = v28[4];
      v28 += 4;
      v117 = v116;
      v118 = vabdd_f64(v116 - v114, v51);
      if (v118 <= v115 || v118 <= v110)
      {
        v113 = v117;
        v115 = v118;
      }
      v114 = v117;
    }
    while (v28 != v111);
  }
  if (v732)
  {
    v733 = (double *)v732;
    operator delete((void *)v732);
  }
  v119 = v716;
  do
  {
    v120 = v113;
    v113 = v113 - v51;
  }
  while (v113 > *(double *)v716 - v110);
  object = 0;
  v695[0] = 0;
  v695[1] = 0;
  v121 = *v111;
  rep = 0;
  v722 = 0;
  v723 = 0;
  v725 = 0;
  v732 = 0;
  v733 = 0;
  v734 = 0;
  v721 = 0uLL;
  v122 = v110 + v121;
  if (v120 > v110 + v121)
  {
    v123 = 0;
    v124 = 0;
    object = 0;
    v732 = 0;
    v723 = 0;
    goto LABEL_271;
  }
  v125 = 0;
  v670 = 0;
  v126 = 0;
  v127 = 0;
  v123 = 0;
  v128 = 0;
  v124 = 0;
  v129 = (double *)((char *)v716 + 32);
  while (2)
  {
    while (2)
    {
      v688 = v124;
      v131 = v129;
      do
      {
        v132 = v131;
        v133 = *v131;
        v131 += 4;
        v134 = v133;
        v135 = v133 > v120 || v132 == (double *)(v717 - 32);
      }
      while (!v135);
      v136 = vabdd_f64(v134, v120);
      v137 = vabdd_f64(*(v131 - 8), v120);
      if (v137 < v136)
        v134 = *(v131 - 8);
      v129 = v131 - 4;
      if (v137 >= v136)
        v138 = 0x1FFFFFFFFFFFFFFCLL;
      else
        v138 = 0x1FFFFFFFFFFFFFF8;
      if (v137 >= v136)
        v139 = v131 - 4;
      else
        v139 = v131 - 8;
      if (v137 < v136)
        v136 = v137;
      if (v136 <= v110)
      {
        if (v126 < v695[1])
        {
          *(double *)v126 = v134;
          v130 = *(_OWORD *)(v139 + 1);
          *((double *)v126 + 3) = v139[3];
          *(_OWORD *)(v126 + 8) = v130;
          v126 += 32;
          v124 = v688;
          v695[0] = v126;
          ++v127;
          v120 = v51 + v120;
          if (v120 > v122)
            goto LABEL_258;
          continue;
        }
        v145 = (v126 - v123) >> 5;
        v146 = v145 + 1;
        if ((unint64_t)(v145 + 1) >> 59)
          goto LABEL_871;
        v147 = (char *)v695[1] - (char *)v123;
        if (((char *)v695[1] - (char *)v123) >> 4 > v146)
          v146 = v147 >> 4;
        if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFE0)
          v148 = 0x7FFFFFFFFFFFFFFLL;
        else
          v148 = v146;
        v680 = v125;
        if (v148)
        {
          if (v148 >> 59)
            goto LABEL_868;
          v149 = (char *)operator new(32 * v148);
          v134 = v131[v138];
        }
        else
        {
          v149 = 0;
        }
        v159 = &v149[32 * v145];
        *(double *)v159 = v134;
        v160 = *(_OWORD *)(v139 + 1);
        *((double *)v159 + 3) = v139[3];
        *(_OWORD *)(v159 + 8) = v160;
        v161 = v159;
        if (v126 == v123)
        {
          v124 = v688;
          v129 = v131 - 4;
          v126 = v159 + 32;
          v695[1] = &v149[32 * v148];
          if (v123)
LABEL_201:
            operator delete(v123);
        }
        else
        {
          v124 = v688;
          v129 = v131 - 4;
          do
          {
            v162 = *((_QWORD *)v126 - 4);
            v126 -= 32;
            *((_QWORD *)v161 - 4) = v162;
            v161 -= 32;
            v163 = *(_OWORD *)(v126 + 8);
            *((_QWORD *)v161 + 3) = *((_QWORD *)v126 + 3);
            *(_OWORD *)(v161 + 8) = v163;
          }
          while (v126 != v123);
          v126 = v159 + 32;
          v695[1] = &v149[32 * v148];
          if (v123)
            goto LABEL_201;
        }
        v123 = v161;
        v125 = v680;
        v695[0] = v126;
        ++v127;
        v120 = v51 + v120;
        if (v120 > v122)
          goto LABEL_258;
        continue;
      }
      break;
    }
    v140 = v733;
    if (v733 >= v734)
    {
      v675 = v131 - 4;
      v150 = v733 - v128;
      v151 = v150 + 1;
      if ((unint64_t)(v150 + 1) >> 61)
      {
        object = v123;
        v732 = (uint64_t)v128;
        v723 = (void **)v688;
        sub_20E867F44();
      }
      v152 = (char *)v734 - (char *)v128;
      if (((char *)v734 - (char *)v128) >> 2 > v151)
        v151 = v152 >> 2;
      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
        v153 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v153 = v151;
      v681 = v125;
      if (v153)
      {
        if (v153 >> 61)
          goto LABEL_868;
        v154 = operator new(8 * v153);
        v155 = (double *)&v154[8 * v150];
        *v155 = v120;
        v156 = (uint64_t)(v155 + 1);
        v157 = (char *)v140 - (char *)v128;
        if (v140 != v128)
        {
LABEL_194:
          v158 = v157 - 8;
          if (v158 >= 0x58)
          {
            v124 = v688;
            if ((unint64_t)((char *)v128 - v154) >= 0x20)
            {
              v164 = (v158 >> 3) + 1;
              v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
              v166 = &v140[v165 / 0xFFFFFFFFFFFFFFF8];
              v155 = (double *)((char *)v155 - v165);
              v167 = &v154[8 * v150 - 16];
              v168 = v140 - 2;
              v169 = v164 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v170 = *(_OWORD *)v168;
                *(v167 - 1) = *((_OWORD *)v168 - 1);
                *v167 = v170;
                v167 -= 2;
                v168 -= 4;
                v169 -= 4;
              }
              while (v169);
              v140 = v166;
              if (v164 == (v164 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_213:
                v734 = (double *)&v154[8 * v153];
                if (v128)
                  operator delete(v128);
                v128 = v155;
                v129 = v675;
                v125 = v681;
                v733 = (double *)v156;
                v141 = v695[1];
                if (v126 >= v695[1])
                  goto LABEL_216;
LABEL_173:
                *(_QWORD *)v126 = 0xBFF0000000000000;
                v142 = v721;
                *((_QWORD *)v126 + 3) = v722;
                *(_OWORD *)(v126 + 8) = v142;
                v126 += 32;
                v143 = (char *)rep;
                v125 = (char *)v725;
                v695[0] = v126;
                v674 = v128;
                if (rep < v725)
                  goto LABEL_174;
LABEL_231:
                v182 = v129;
                v183 = v143 - v124;
                v184 = (v143 - v124) >> 3;
                v185 = v184 + 1;
                if ((unint64_t)(v184 + 1) >> 61)
                {
                  object = v123;
                  v732 = (uint64_t)v128;
                  v723 = (void **)v124;
                  sub_20E867F44();
                }
                if ((v125 - v124) >> 2 > v185)
                  v185 = (v125 - v124) >> 2;
                if ((unint64_t)(v125 - v124) >= 0x7FFFFFFFFFFFFFF8)
                  v186 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v186 = v185;
                if (v186)
                {
                  if (v186 >> 61)
                  {
LABEL_868:
                    object = v123;
                    v732 = (uint64_t)v128;
                    v723 = (void **)v688;
                    sub_20E877A38();
                  }
                  v187 = v186;
                  v188 = operator new(8 * v186);
                  v124 = v688;
                  v186 = v187;
                  v189 = &v188[8 * v184];
                  *(_QWORD *)v189 = v127;
                  v144 = (uint64_t)(v189 + 8);
                  v190 = v143 - v688;
                  if (v143 != v688)
                  {
LABEL_240:
                    v191 = v190 - 8;
                    if (v191 < 0x168
                      || (v195 = (v143 - 8 - v124) & 0xFFFFFFFFFFFFFFF8, &v188[v183 - 8 - v195] > &v188[v183 - 8])
                      || &v143[-v195 - 8] > v143 - 8
                      || (unint64_t)(v143 - v188 - v183) < 0x20)
                    {
                      v192 = v143;
                      v129 = v182;
                    }
                    else
                    {
                      v196 = (v191 >> 3) + 1;
                      v197 = 8 * (v196 & 0x3FFFFFFFFFFFFFFCLL);
                      v192 = &v143[-v197];
                      v189 -= v197;
                      v198 = &v188[8 * v184 - 16];
                      v199 = v143 - 16;
                      v200 = v196 & 0x3FFFFFFFFFFFFFFCLL;
                      v129 = v182;
                      do
                      {
                        v201 = *(_OWORD *)v199;
                        *(v198 - 1) = *((_OWORD *)v199 - 1);
                        *v198 = v201;
                        v198 -= 2;
                        v199 -= 32;
                        v200 -= 4;
                      }
                      while (v200);
                      if (v196 == (v196 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_243:
                        v125 = &v188[8 * v186];
                        v725 = (unint64_t)v125;
                        if (!v124)
                        {
LABEL_245:
                          v124 = v189;
                          goto LABEL_246;
                        }
LABEL_244:
                        v194 = v125;
                        operator delete(v124);
                        v125 = v194;
                        goto LABEL_245;
                      }
                    }
                    do
                    {
                      v193 = *((_QWORD *)v192 - 1);
                      v192 -= 8;
                      *((_QWORD *)v189 - 1) = v193;
                      v189 -= 8;
                    }
                    while (v192 != v124);
                    goto LABEL_243;
                  }
                }
                else
                {
                  v188 = 0;
                  v189 = (char *)(8 * v184);
                  *(_QWORD *)(8 * v184) = v127;
                  v144 = 8 * v184 + 8;
                  v190 = v143 - v124;
                  if (v143 != v124)
                    goto LABEL_240;
                }
                v129 = v182;
                v125 = &v188[8 * v186];
                v725 = (unint64_t)v125;
                if (!v124)
                  goto LABEL_245;
                goto LABEL_244;
              }
            }
          }
          else
          {
            v124 = v688;
          }
          do
          {
            v171 = *((_QWORD *)v140-- - 1);
            *((_QWORD *)v155-- - 1) = v171;
          }
          while (v140 != v128);
          goto LABEL_213;
        }
      }
      else
      {
        v154 = 0;
        v155 = (double *)(8 * v150);
        *(double *)(8 * v150) = v120;
        v156 = 8 * v150 + 8;
        v157 = (char *)v140 - (char *)v128;
        if (v140 != v128)
          goto LABEL_194;
      }
      v124 = v688;
      goto LABEL_213;
    }
    *v733 = v120;
    v124 = v688;
    v733 = v140 + 1;
    v141 = v695[1];
    if (v126 < v695[1])
      goto LABEL_173;
LABEL_216:
    v172 = (v126 - v123) >> 5;
    v173 = v172 + 1;
    if ((unint64_t)(v172 + 1) >> 59)
    {
LABEL_871:
      object = v123;
      v732 = (uint64_t)v128;
      v723 = (void **)v688;
      sub_20E867F44();
    }
    v174 = v141 - v123;
    if (v174 >> 4 > v173)
      v173 = v174 >> 4;
    if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFE0)
      v175 = 0x7FFFFFFFFFFFFFFLL;
    else
      v175 = v173;
    if (v175)
    {
      if (v175 >> 59)
        goto LABEL_868;
      v176 = v125;
      v177 = (char *)operator new(32 * v175);
    }
    else
    {
      v176 = v125;
      v177 = 0;
    }
    v178 = &v177[32 * v172];
    *(_QWORD *)v178 = 0xBFF0000000000000;
    *(_OWORD *)(v178 + 8) = v721;
    *((_QWORD *)v178 + 3) = v722;
    for (i = v178; v126 != v123; *(_OWORD *)(i + 8) = v181)
    {
      v180 = *((_QWORD *)v126 - 4);
      v126 -= 32;
      *((_QWORD *)i - 4) = v180;
      i -= 32;
      v181 = *(_OWORD *)(v126 + 8);
      *((_QWORD *)i + 3) = *((_QWORD *)v126 + 3);
    }
    v126 = v178 + 32;
    v695[1] = &v177[32 * v175];
    v124 = v688;
    if (v123)
      operator delete(v123);
    v123 = i;
    v143 = v670;
    v125 = v176;
    v695[0] = v126;
    v674 = v128;
    if (v670 >= v176)
      goto LABEL_231;
LABEL_174:
    *(_QWORD *)v143 = v127;
    v144 = (uint64_t)(v143 + 8);
LABEL_246:
    rep = v144;
    v670 = (char *)v144;
    v128 = v674;
    ++v127;
    v120 = v51 + v120;
    if (v120 <= v122)
      continue;
    break;
  }
LABEL_258:
  v119 = v716;
  object = v123;
  v732 = (uint64_t)v128;
  v723 = (void **)v124;
  if (v128 != v733)
  {
    v718 = 0;
    v719 = 0;
    v720 = 0;
    v202 = v717;
    v704 = v716;
    if (*v128 >= *(double *)v716 && *(v733 - 1) <= *(double *)(v717 - 32))
    {
      v735[0] = &v704;
      v738 = (double **)&v732;
      v739[0] = (uint64_t *)&v704;
      sub_20EAF5F94((char **)&v718, v733 - v128);
      v707 = &v718;
      v708 = &v732;
      sub_20FDB48EC((uint64_t)(a1 + 37), (double ***)v735, v739, (v202 - (uint64_t)v119) >> 5, &v738, (_QWORD **)&v707, ((uint64_t)v733 - v732) >> 3, v203, v204, v205, v206, v207, v208, v209, v210);
    }
    else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundlerIMUFilter.cpp", 341, (uint64_t)"interp_state", 12, (uint64_t)"PredictionBundlerIMUFilter: imu interpolation failed", 52, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v211 = (char *)v718;
    if (v718 != v719)
    {
      v212 = v124;
      do
      {
        v213 = *(_QWORD *)v212;
        v212 += 8;
        v214 = &v123[32 * v213];
        *(_QWORD *)v214 = *(_QWORD *)v211;
        v215 = *(_OWORD *)(v211 + 8);
        *((_QWORD *)v214 + 3) = *((_QWORD *)v211 + 3);
        *(_OWORD *)(v214 + 8) = v215;
        v211 += 32;
      }
      while (v211 != v719);
      v211 = (char *)v718;
    }
    if (v211)
    {
      v719 = v211;
      operator delete(v211);
    }
    v119 = v716;
  }
LABEL_271:
  if (v119)
    operator delete(v119);
  v716 = v123;
  v717 = *(_OWORD *)v695;
  v695[0] = 0;
  v695[1] = 0;
  object = 0;
  if (v732)
  {
    v733 = (double *)v732;
    operator delete((void *)v732);
  }
  if (v124)
  {
    rep = (unint64_t)v124;
    operator delete(v124);
    if (object)
      operator delete(object);
  }
  v216 = v717;
  v217 = *(double *)(v717 - 32);
  if (vabdd_f64(v217, *(double *)(*(_QWORD *)(a2 + 8) - 32)) <= 0.001
    || (sub_20F1CD980(&v718), **((int **)v718 + 7) > 2)
    || (v218 = *((unsigned __int8 *)v718 + 72),
        v219 = sub_20E8C31DC((uint64_t)v718, "OSLogSurrogateAppender", 1, 0),
        v220 = v219,
        !v218)
    && !v219)
  {
    v221 = v716;
    v222 = a4 - v217;
    if (a4 - v217 < 0.0)
      goto LABEL_283;
LABEL_373:
    v649 = 0;
    v278 = 1.0 / (1.0 / v51);
    if (v278 < 0.0)
      goto LABEL_403;
    v279 = (v216 - (uint64_t)v221) >> 5;
    v280 = vcvtpd_u64_f64(v222 / v278);
    if (v280 - 21 < 0xFFFFFFFFFFFFFFECLL || v279 < v280 + 5)
      goto LABEL_403;
    v282 = (double *)operator new(32 * v280);
    v283 = v282;
    v284 = (char *)v282;
    do
    {
      *(_QWORD *)v284 = 0xBFF0000000000000;
      *((_QWORD *)v284 + 1) = 0;
      *((_QWORD *)v284 + 2) = 0;
      *((_QWORD *)v284 + 3) = 0;
      v284 += 32;
    }
    while (v284 != (char *)&v282[4 * v280]);
    object = 0;
    v695[0] = 0;
    v695[1] = 0;
    rep = 0;
    v723 = 0;
    LODWORD(v725) = 0;
    v707 = 0;
    if (v280)
    {
      v676 = 0;
      v659 = v216 - 56;
      v661 = v216 - 24;
      v655 = v216 - 120;
      v657 = v216 - 88;
      v653 = v216 - 152;
      v667 = v282;
      v663 = v280;
      v647 = v279;
LABEL_383:
      v732 = 1;
      sub_20F1CDA9C(v279, (unsigned int *)&v707, &v732, (uint64_t)&v716, (uint64_t)&object, (uint64_t)&v723);
      v286 = (int)v695[1];
      v285 = HIDWORD(v695[1]);
      v287 = (char *)object;
      v671 = v725;
      v288 = v723;
      v665 = &v283[v676];
      v689 = v695[1];
      v289 = 1;
      while (1)
      {
        v682 = v289;
        v290 = v289 - 1;
        v283[4 * v289 - 4] = v217 + v278 * (double)v289;
        v291 = v286 - (v289 - 1);
        v292 = (8 * v291 * v285 + 31) & 0xFFFFFFFE0;
        *((_QWORD *)&v721 + 1) = v292 >> 3;
        v293 = (char *)operator new(v292, (std::align_val_t)0x20uLL);
        *(_QWORD *)&v721 = v293;
        v722 = __PAIR64__(v285, v291);
        v294 = v285;
        if ((_DWORD)v285 && v286 != (_DWORD)v290)
        {
          v295 = 0;
          v296 = 8 * v291;
          v297 = v294;
          do
          {
            memmove(v293, &v287[8 * v295], v296);
            v295 += v286;
            v293 += 8 * v689;
            --v297;
          }
          while (v297);
        }
        v298 = 8 * (v671 - v290);
        v299 = (v298 + 31) & 0xFFFFFFFE0;
        v719 = (char *)(v299 >> 3);
        v300 = operator new(v299, (std::align_val_t)0x20uLL);
        v718 = v300;
        LODWORD(v720) = v671 - v290;
        v285 = v294;
        if (v671 != (_DWORD)v290)
          memmove(v300, &v288[v290], v298);
        sub_20F1CC27C((uint64_t)&v732, (uint64_t)&v721, (uint64_t)&v718);
        v302 = *(double *)v732;
        v301 = *(double *)(v732 + 8);
        v303 = *(double *)(v732 + 16);
        v304 = *(double *)(v732 + 24);
        v305 = *(double *)(v732 + 32);
        MEMORY[0x212BC6368](v732, 0x1000C8000313F17);
        v283 = v667;
        if (v718)
          MEMORY[0x212BC6368](v718, 0x1000C8000313F17);
        if ((_QWORD)v721)
          MEMORY[0x212BC6368](v721, 0x1000C8000313F17);
        v306 = (double *)operator new(0x40uLL, (std::align_val_t)0x20uLL);
        *v306 = v302;
        v306[1] = v301;
        v306[2] = v303;
        v306[3] = v304;
        v306[4] = v305;
        v307 = sub_20F1CC94C(v306, 5u);
        MEMORY[0x212BC6368](v306, 0x1000C8000313F17);
        if ((v307 & 1) == 0)
          break;
        v308 = (double *)operator new(0x40uLL, (std::align_val_t)0x20uLL);
        *v308 = v302;
        v308[1] = v301;
        v308[2] = v303;
        v308[3] = v304;
        v308[4] = v305;
        v665[4 * v290 + 1] = v302 * *(double *)(v661 + 8 * v676)
                           + 0.0
                           + v301 * *(double *)(v659 + 8 * v676)
                           + v303 * *(double *)(v657 + 8 * v676)
                           + v304 * *(double *)(v655 + 8 * v676)
                           + v305 * *(double *)(v653 + 8 * v676);
        MEMORY[0x212BC6368](v308, 0x1000C8000313F17);
        v289 = v682 + 1;
        --v689;
        if (v682 == v663)
        {
          v707 = (void *)++v676;
          v279 = v647;
          if (v676 != 3)
            goto LABEL_383;
          v309 = 1;
          do
          {
            v615 = &v667[4 * v309];
            v617 = *(v615 - 4);
            v616 = (char *)(v615 - 4);
            v618 = v617;
            if (*(double *)(*(_QWORD *)(a2 + 8) - 32) < v617)
            {
              v619 = v711;
              if ((unint64_t)v711 < v712)
              {
                *(double *)v711 = v618;
                v613 = *(_OWORD *)(v616 + 8);
                v619[3] = *((_QWORD *)v616 + 3);
                *(_OWORD *)(v619 + 1) = v613;
                v614 = v619 + 4;
              }
              else
              {
                v620 = v710;
                v621 = ((char *)v711 - (_BYTE *)v710) >> 5;
                v622 = v621 + 1;
                if ((unint64_t)(v621 + 1) >> 59)
                  sub_20E867F44();
                v623 = v712 - (_QWORD)v710;
                if ((uint64_t)(v712 - (_QWORD)v710) >> 4 > v622)
                  v622 = v623 >> 4;
                if ((unint64_t)v623 >= 0x7FFFFFFFFFFFFFE0)
                  v624 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v624 = v622;
                if (v624)
                {
                  if (v624 >> 59)
                    sub_20E877A38();
                  v625 = (char *)operator new(32 * v624);
                }
                else
                {
                  v625 = 0;
                }
                v626 = &v625[32 * v621];
                *(double *)v626 = v618;
                *(_OWORD *)(v626 + 8) = *(_OWORD *)(v616 + 8);
                *((_QWORD *)v626 + 3) = *((_QWORD *)v616 + 3);
                v627 = v626;
                if (v619 != v620)
                {
                  do
                  {
                    v628 = *(v619 - 4);
                    v619 -= 4;
                    *((_QWORD *)v627 - 4) = v628;
                    v627 -= 32;
                    v629 = *(_OWORD *)(v619 + 1);
                    *((_QWORD *)v627 + 3) = v619[3];
                    *(_OWORD *)(v627 + 8) = v629;
                  }
                  while (v619 != v620);
                  v619 = v710;
                }
                v614 = v626 + 32;
                v710 = v627;
                v712 = (unint64_t)&v625[32 * v624];
                if (v619)
                  operator delete(v619);
              }
              v711 = v614;
            }
            v135 = v309++ == v663;
          }
          while (!v135);
          goto LABEL_461;
        }
      }
      v649 = 0;
      if (!v288)
        goto LABEL_400;
      goto LABEL_399;
    }
    v732 = 1;
    sub_20F1CDA9C(v279, (unsigned int *)&v707, &v732, (uint64_t)&v716, (uint64_t)&object, (uint64_t)&v723);
    v707 = (void *)1;
    v732 = 1;
    sub_20F1CDA9C(v279, (unsigned int *)&v707, &v732, (uint64_t)&v716, (uint64_t)&object, (uint64_t)&v723);
    v707 = (void *)2;
    v732 = 1;
    sub_20F1CDA9C(v279, (unsigned int *)&v707, &v732, (uint64_t)&v716, (uint64_t)&object, (uint64_t)&v723);
LABEL_461:
    v649 = *((double *)v711 - 4) >= a4;
    v288 = v723;
    if (v723)
LABEL_399:
      MEMORY[0x212BC6368](v288, 0x1000C8000313F17);
LABEL_400:
    if (object)
      MEMORY[0x212BC6368](object, 0x1000C8000313F17);
    operator delete(v283);
    v221 = v716;
    goto LABEL_403;
  }
  v723 = &v718;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v725 = std::chrono::system_clock::now().__d_.__rep_;
  v726 = 2;
  v727 = "unknown file";
  v728 = 83;
  v731 = 0;
  v729 = "unknown function";
  v730 = 0;
  v223 = (unsigned __int8 *)*v723;
  v224 = (uint64_t)*v723 + 16;
  if (*((char *)*v723 + 39) < 0)
  {
    v226 = (const char *)*((_QWORD *)v223 + 2);
    v225 = *((_QWORD *)v223 + 3);
    v228 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v228 & 1) == 0)
    {
LABEL_891:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v696 && SHIBYTE(v695[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v225 = *((unsigned __int8 *)*v723 + 39);
    v226 = (char *)*v723 + 16;
    v227 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v227 & 1) == 0)
      goto LABEL_891;
  }
  if (byte_254A4A4F8[23] >= 0)
    v229 = byte_254A4A4F8;
  else
    v229 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v230 = byte_254A4A4F8[23];
  else
    v230 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v229, v226);
  v231 = v695;
  if (v230 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v230 >= 0x17)
  {
    v232 = v220;
    v233 = v226;
    v234 = v223;
    v235 = v218;
    v236 = v224;
    v237 = (v230 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v230 | 7) != 0x17)
      v237 = v230 | 7;
    v238 = v237 + 1;
    v231 = operator new(v237 + 1);
    v695[1] = (void *)v230;
    *(_QWORD *)&v696 = v238 | 0x8000000000000000;
    v695[0] = v231;
    v224 = v236;
    v218 = v235;
    v223 = v234;
    v226 = v233;
    v220 = v232;
    goto LABEL_301;
  }
  BYTE7(v696) = v230;
  if (v230)
LABEL_301:
    memmove(v231, v229, v230);
  *((_BYTE *)v231 + v230) = 0;
  BYTE8(v696) = 1;
  v239 = &__p;
  if (v225 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v225 >= 0x17)
  {
    v240 = (v225 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v225 | 7) != 0x17)
      v240 = v225 | 7;
    v241 = v240 + 1;
    v239 = operator new(v240 + 1);
    v698 = v225;
    v699 = v241 | 0x8000000000000000;
    __p = v239;
  }
  else
  {
    HIBYTE(v699) = v225;
    if (!v225)
      goto LABEL_310;
  }
  memmove(v239, v226, v225);
LABEL_310:
  *((_BYTE *)v239 + v225) = 0;
  v700 = 1;
  v242 = object;
  if (SHIBYTE(v699) < 0)
    operator delete(__p);
  if (BYTE8(v696) && SBYTE7(v696) < 0)
    operator delete(v695[0]);
  if (object)
    os_release(object);
  if (v220 && *(_QWORD *)(v220 + 24))
  {
    v243 = _os_log_pack_size();
    v244 = (std::__shared_weak_count_vtbl *)operator new(v243, (std::align_val_t)8uLL);
    v245 = (std::__shared_weak_count *)operator new();
    v246 = v245;
    v245->__shared_owners_ = 0;
    v247 = (unint64_t *)&v245->__shared_owners_;
    v245->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v245->__shared_weak_owners_ = 0;
    v245[1].__vftable = v244;
    object = v244;
    v695[0] = v244;
    v695[1] = v245;
    do
      v248 = __ldxr(v247);
    while (__stxr(v248 + 1, v247));
    v696 = 0uLL;
    __p = 0;
    do
      v249 = __ldaxr(v247);
    while (__stlxr(v249 - 1, v247));
    if (!v249)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v246);
    }
    v250 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v251 = (char *)operator new();
    v252 = v223[39];
    if ((v252 & 0x80u) == 0)
      v253 = v224;
    else
      v253 = *((_QWORD *)v223 + 2);
    if ((v252 & 0x80u) != 0)
      v252 = *((_QWORD *)v223 + 3);
    *(_QWORD *)v251 = v250;
    *(_OWORD *)(v251 + 8) = *(_OWORD *)v695;
    v695[0] = 0;
    v695[1] = 0;
    *(_OWORD *)(v251 + 24) = v696;
    v696 = 0uLL;
    *((_QWORD *)v251 + 5) = v253;
    *((_QWORD *)v251 + 6) = v252;
    v251[56] = 2;
    *(_QWORD *)&v721 = 0;
    v732 = (uint64_t)v251;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v220 + 24) + 40))(*(_QWORD *)(v220 + 24), &v732);
    v254 = v732;
    v732 = 0;
    if (v254)
    {
      v255 = *(std::__shared_weak_count **)(v254 + 32);
      if (v255)
      {
        v256 = (unint64_t *)&v255->__shared_owners_;
        do
          v257 = __ldaxr(v256);
        while (__stlxr(v257 - 1, v256));
        if (!v257)
        {
          ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
          std::__shared_weak_count::__release_weak(v255);
        }
      }
      v258 = *(std::__shared_weak_count **)(v254 + 16);
      if (v258)
      {
        v259 = (unint64_t *)&v258->__shared_owners_;
        do
          v260 = __ldaxr(v259);
        while (__stlxr(v260 - 1, v259));
        if (!v260)
        {
          ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
          std::__shared_weak_count::__release_weak(v258);
        }
      }
      MEMORY[0x212BC6398](v254, 0x10F0C40B62ED6C6);
      v261 = v721;
      *(_QWORD *)&v721 = 0;
      if (v261)
      {
        v262 = *(std::__shared_weak_count **)(v261 + 32);
        if (v262)
        {
          v263 = (unint64_t *)&v262->__shared_owners_;
          do
            v264 = __ldaxr(v263);
          while (__stlxr(v264 - 1, v263));
          if (!v264)
          {
            ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
            std::__shared_weak_count::__release_weak(v262);
          }
        }
        v265 = *(std::__shared_weak_count **)(v261 + 16);
        if (v265)
        {
          v266 = (unint64_t *)&v265->__shared_owners_;
          do
            v267 = __ldaxr(v266);
          while (__stlxr(v267 - 1, v266));
          if (!v267)
          {
            ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
            std::__shared_weak_count::__release_weak(v265);
          }
        }
        MEMORY[0x212BC6398](v261, 0x10F0C40B62ED6C6);
      }
    }
    v268 = (std::__shared_weak_count *)*((_QWORD *)&v696 + 1);
    if (*((_QWORD *)&v696 + 1))
    {
      v269 = (unint64_t *)(*((_QWORD *)&v696 + 1) + 8);
      do
        v270 = __ldaxr(v269);
      while (__stlxr(v270 - 1, v269));
      if (!v270)
      {
        ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
        std::__shared_weak_count::__release_weak(v268);
      }
    }
    v271 = (std::__shared_weak_count *)v695[1];
    if (v695[1])
    {
      v272 = (unint64_t *)((char *)v695[1] + 8);
      do
        v273 = __ldaxr(v272);
      while (__stlxr(v273 - 1, v272));
      if (!v273)
      {
        ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
        std::__shared_weak_count::__release_weak(v271);
      }
    }
  }
  else
  {
    os_log_type_enabled(v242, OS_LOG_TYPE_DEBUG);
    LOWORD(object) = 0;
    v274 = (void *)_os_log_send_and_compose_impl();
    if (v274)
      free(v274);
  }
  if (v218)
  {
    sub_20E8C003C((uint64_t)&v723, "PredictionBundlerIMUFilter: Resampling buffer last timestamp different from last window sample");
    sub_20E863570((uint64_t)&v723);
  }
  sub_20E863570((uint64_t)&v723);
  v275 = v731;
  if (v731)
  {
    v276 = (unint64_t *)&v731->__shared_owners_;
    do
      v277 = __ldaxr(v276);
    while (__stlxr(v277 - 1, v276));
    if (!v277)
    {
      ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
      std::__shared_weak_count::__release_weak(v275);
    }
  }
  v221 = v716;
  v216 = v717;
  v222 = a4 - v217;
  if (a4 - v217 >= 0.0)
    goto LABEL_373;
LABEL_283:
  v649 = 0;
LABEL_403:
  if (v221)
    operator delete(v221);
  v310 = a1[36];
  v708 = 0;
  v709 = 0;
  v707 = 0;
  if (v310)
  {
    if (v310 >> 59)
      sub_20E867F44();
    v311 = (char *)operator new(32 * v310);
    v312 = 0;
    v707 = v311;
    v709 = &v311[32 * v310];
    v313 = a1[34];
    v314 = a1[31];
    v315 = (a1[32] - v314) >> 5;
    v316 = v310;
    do
    {
      v317 = &v311[v312];
      v318 = v314 + 32 * (v313 % v315);
      *(_QWORD *)v317 = *(_QWORD *)v318;
      v319 = *(_OWORD *)(v318 + 8);
      *((_QWORD *)v317 + 3) = *(_QWORD *)(v318 + 24);
      *(_OWORD *)(v317 + 8) = v319;
      v312 += 32;
      ++v313;
      --v316;
    }
    while (v316);
    v708 = (uint64_t *)&v311[v312];
    v704 = 0;
    v705 = 0;
    v706 = 0;
    v716 = 0;
    v717 = 0uLL;
    v320 = (char *)operator new(32 * v310);
    v321 = 0;
    v716 = v320;
    *((_QWORD *)&v717 + 1) = &v320[32 * v310];
    v322 = a1[34];
    v323 = a1[31];
    v324 = (a1[32] - v323) >> 5;
    do
    {
      v325 = &v320[v321];
      v326 = v323 + 32 * (v322 % v324);
      *(_QWORD *)v325 = *(_QWORD *)v326;
      v327 = *(_OWORD *)(v326 + 8);
      *((_QWORD *)v325 + 3) = *(_QWORD *)(v326 + 24);
      *(_OWORD *)(v325 + 8) = v327;
      v321 += 32;
      ++v322;
      --v310;
    }
    while (v310);
    v328 = (double *)&v320[v321];
    *(_QWORD *)&v717 = &v320[v321];
  }
  else
  {
    v320 = 0;
    v328 = 0;
    v704 = 0;
    v705 = 0;
    v706 = 0;
    v716 = 0;
    v717 = 0uLL;
  }
  v329 = ((char *)v328 - v320) >> 5;
  if ((int)v329 >= 40)
    v330 = 40;
  else
    v330 = ((char *)v328 - v320) >> 5;
  v732 = 0;
  v733 = 0;
  v734 = 0;
  v331 = v329 - 1;
  if (v329 == 1)
  {
    v332 = 0;
    v333 = 0;
    v334 = &v328[-4 * v330];
    if (v330 == 1)
    {
LABEL_419:
      v335 = v332;
      goto LABEL_453;
    }
  }
  else
  {
    if (v331 >> 61)
      sub_20E867F44();
    v332 = (double *)operator new(8 * v331);
    v333 = &v332[v331];
    v733 = v332;
    v334 = &v328[-4 * v330];
    if (v330 == 1)
      goto LABEL_419;
  }
  v336 = v334;
  v335 = v332;
  while (2)
  {
    while (1)
    {
      v337 = v336;
      v338 = v336[4];
      v336 += 4;
      v339 = v338 - *v337;
      if (v332 >= v333)
        break;
      *v332++ = v339;
      if (v336 == v328 - 4)
        goto LABEL_452;
    }
    v340 = v332 - v335;
    v341 = v340 + 1;
    if ((unint64_t)(v340 + 1) >> 61)
    {
      v733 = v332;
      v734 = v333;
      v732 = (uint64_t)v335;
      sub_20E867F44();
    }
    if (((char *)v333 - (char *)v335) >> 2 > v341)
      v341 = ((char *)v333 - (char *)v335) >> 2;
    if ((unint64_t)((char *)v333 - (char *)v335) >= 0x7FFFFFFFFFFFFFF8)
      v342 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v342 = v341;
    v690 = v328;
    if (!v342)
    {
      v343 = 0;
      v344 = (double *)(8 * v340);
      *(double *)(8 * v340) = v339;
      v345 = 8 * v340 + 8;
      v346 = (char *)v332 - (char *)v335;
      if (v332 == v335)
        goto LABEL_438;
LABEL_435:
      v347 = v346 - 8;
      if (v347 >= 0x168)
      {
        v350 = ((char *)(v332 - 1) - (char *)v335) & 0xFFFFFFFFFFFFFFF8;
        if (&v343[(char *)v332 - (char *)v335 - 8 - v350] > &v343[(char *)v332 - (char *)v335 - 8])
        {
          v348 = v332;
        }
        else if ((double *)((char *)v332 - v350 - 8) > v332 - 1)
        {
          v348 = v332;
        }
        else if ((unint64_t)((char *)v335 - v343) >= 0x20)
        {
          v351 = (v347 >> 3) + 1;
          v352 = 8 * (v351 & 0x3FFFFFFFFFFFFFFCLL);
          v348 = &v332[v352 / 0xFFFFFFFFFFFFFFF8];
          v344 = (double *)((char *)v344 - v352);
          v353 = &v343[8 * v340 - 16];
          v354 = v332 - 2;
          v355 = v351 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v356 = *(_OWORD *)v354;
            *(v353 - 1) = *((_OWORD *)v354 - 1);
            *v353 = v356;
            v353 -= 2;
            v354 -= 4;
            v355 -= 4;
          }
          while (v355);
          if (v351 == (v351 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_438;
        }
        else
        {
          v348 = v332;
        }
      }
      else
      {
        v348 = v332;
      }
      do
      {
        v349 = *((_QWORD *)v348-- - 1);
        *((_QWORD *)v344-- - 1) = v349;
      }
      while (v348 != v335);
      goto LABEL_438;
    }
    if (v342 >> 61)
    {
      v733 = v332;
      v734 = v333;
      v732 = (uint64_t)v335;
      sub_20E877A38();
    }
    v343 = operator new(8 * v342);
    v344 = (double *)&v343[8 * v340];
    *v344 = v339;
    v345 = (uint64_t)(v344 + 1);
    v346 = (char *)v332 - (char *)v335;
    if (v332 != v335)
      goto LABEL_435;
LABEL_438:
    v333 = (double *)&v343[8 * v342];
    if (v335)
      operator delete(v335);
    v335 = v344;
    v332 = (double *)v345;
    v328 = v690;
    if (v336 != v690 - 4)
      continue;
    break;
  }
LABEL_452:
  v733 = v332;
LABEL_453:
  v734 = v333;
  v732 = (uint64_t)v335;
  v357 = sub_20F1CE188(v335, v332);
  if (v357 > 0.002)
    goto LABEL_546;
  sub_20F1CD980(v735);
  if (**((int **)v735[0] + 7) > 2)
    goto LABEL_545;
  v358 = *((unsigned __int8 *)v735[0] + 72);
  v359 = sub_20E8C31DC((uint64_t)v735[0], "OSLogSurrogateAppender", 1, 0);
  v360 = v359;
  if (!v358 && !v359)
    goto LABEL_545;
  v723 = (void **)v735;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v725 = std::chrono::system_clock::now().__d_.__rep_;
  v726 = 2;
  v727 = "unknown file";
  v728 = 261;
  v731 = 0;
  v729 = "unknown function";
  v730 = 0;
  v361 = (unsigned __int8 *)*v723;
  if (*((char *)*v723 + 39) < 0)
  {
    v363 = (const char *)*((_QWORD *)v361 + 2);
    v362 = *((_QWORD *)v361 + 3);
    v691 = (char *)*v723 + 16;
    v365 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v365 & 1) == 0)
    {
LABEL_898:
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v696 && SHIBYTE(v695[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
    }
  }
  else
  {
    v362 = *((unsigned __int8 *)*v723 + 39);
    v363 = (char *)*v723 + 16;
    v691 = v363;
    v364 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v364 & 1) == 0)
      goto LABEL_898;
  }
  if (byte_254A4A4F8[23] >= 0)
    v366 = byte_254A4A4F8;
  else
    v366 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v367 = byte_254A4A4F8[23];
  else
    v367 = *(_QWORD *)&byte_254A4A4F8[8];
  object = os_log_create(v366, v363);
  v368 = v695;
  if (v367 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v367 >= 0x17)
  {
    v369 = v360;
    v370 = v363;
    v371 = v361;
    v372 = v358;
    v373 = (v367 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v367 | 7) != 0x17)
      v373 = v367 | 7;
    v374 = v373 + 1;
    v368 = operator new(v373 + 1);
    v695[1] = (void *)v367;
    *(_QWORD *)&v696 = v374 | 0x8000000000000000;
    v695[0] = v368;
    v358 = v372;
    v361 = v371;
    v363 = v370;
    v360 = v369;
    goto LABEL_477;
  }
  BYTE7(v696) = v367;
  if (v367)
LABEL_477:
    memmove(v368, v366, v367);
  *((_BYTE *)v368 + v367) = 0;
  BYTE8(v696) = 1;
  v375 = &__p;
  if (v362 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v362 >= 0x17)
  {
    v376 = (v362 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v362 | 7) != 0x17)
      v376 = v362 | 7;
    v377 = v376 + 1;
    v375 = operator new(v376 + 1);
    v698 = v362;
    v699 = v377 | 0x8000000000000000;
    __p = v375;
    goto LABEL_485;
  }
  HIBYTE(v699) = v362;
  if (v362)
LABEL_485:
    memmove(v375, v363, v362);
  *((_BYTE *)v375 + v362) = 0;
  v700 = 1;
  v378 = object;
  if (SHIBYTE(v699) < 0)
    operator delete(__p);
  if (BYTE8(v696) && SBYTE7(v696) < 0)
    operator delete(v695[0]);
  if (object)
    os_release(object);
  if (v360 && *(_QWORD *)(v360 + 24))
  {
    v379 = _os_log_pack_size();
    v380 = (std::__shared_weak_count_vtbl *)operator new(v379, (std::align_val_t)8uLL);
    v381 = (std::__shared_weak_count *)operator new();
    v382 = v381;
    v381->__shared_owners_ = 0;
    v383 = (unint64_t *)&v381->__shared_owners_;
    v381->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v381->__shared_weak_owners_ = 0;
    v381[1].__vftable = v380;
    object = v380;
    v695[0] = v380;
    v695[1] = v381;
    do
      v384 = __ldxr(v383);
    while (__stxr(v384 + 1, v383));
    v696 = 0uLL;
    __p = 0;
    do
      v385 = __ldaxr(v383);
    while (__stlxr(v385 - 1, v383));
    if (!v385)
    {
      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
      std::__shared_weak_count::__release_weak(v382);
    }
    v386 = object;
    *(_WORD *)_os_log_pack_fill() = 0;
    v387 = operator new();
    v388 = v361[39];
    v389 = v691;
    if ((v388 & 0x80u) != 0)
    {
      v389 = (const char *)*((_QWORD *)v361 + 2);
      v388 = *((_QWORD *)v361 + 3);
    }
    *(_QWORD *)v387 = v386;
    *(_OWORD *)(v387 + 8) = *(_OWORD *)v695;
    v695[0] = 0;
    v695[1] = 0;
    *(_OWORD *)(v387 + 24) = v696;
    v696 = 0uLL;
    *(_QWORD *)(v387 + 40) = v389;
    *(_QWORD *)(v387 + 48) = v388;
    *(_BYTE *)(v387 + 56) = 2;
    v718 = 0;
    *(_QWORD *)&v721 = v387;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v360 + 24) + 40))(*(_QWORD *)(v360 + 24), &v721);
    v390 = v721;
    *(_QWORD *)&v721 = 0;
    if (v390)
    {
      v391 = *(std::__shared_weak_count **)(v390 + 32);
      if (v391)
      {
        v392 = (unint64_t *)&v391->__shared_owners_;
        do
          v393 = __ldaxr(v392);
        while (__stlxr(v393 - 1, v392));
        if (!v393)
        {
          ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
          std::__shared_weak_count::__release_weak(v391);
        }
      }
      v394 = *(std::__shared_weak_count **)(v390 + 16);
      if (v394)
      {
        v395 = (unint64_t *)&v394->__shared_owners_;
        do
          v396 = __ldaxr(v395);
        while (__stlxr(v396 - 1, v395));
        if (!v396)
        {
          ((void (*)(std::__shared_weak_count *))v394->__on_zero_shared)(v394);
          std::__shared_weak_count::__release_weak(v394);
        }
      }
      MEMORY[0x212BC6398](v390, 0x10F0C40B62ED6C6);
      v397 = v718;
      v718 = 0;
      if (v397)
      {
        v398 = (std::__shared_weak_count *)*((_QWORD *)v397 + 4);
        if (v398)
        {
          v399 = (unint64_t *)&v398->__shared_owners_;
          do
            v400 = __ldaxr(v399);
          while (__stlxr(v400 - 1, v399));
          if (!v400)
          {
            ((void (*)(std::__shared_weak_count *))v398->__on_zero_shared)(v398);
            std::__shared_weak_count::__release_weak(v398);
          }
        }
        v401 = (std::__shared_weak_count *)*((_QWORD *)v397 + 2);
        if (v401)
        {
          v402 = (unint64_t *)&v401->__shared_owners_;
          do
            v403 = __ldaxr(v402);
          while (__stlxr(v403 - 1, v402));
          if (!v403)
          {
            ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
            std::__shared_weak_count::__release_weak(v401);
          }
        }
        MEMORY[0x212BC6398](v397, 0x10F0C40B62ED6C6);
      }
    }
    v404 = (std::__shared_weak_count *)*((_QWORD *)&v696 + 1);
    if (*((_QWORD *)&v696 + 1))
    {
      v405 = (unint64_t *)(*((_QWORD *)&v696 + 1) + 8);
      do
        v406 = __ldaxr(v405);
      while (__stlxr(v406 - 1, v405));
      if (!v406)
      {
        ((void (*)(std::__shared_weak_count *))v404->__on_zero_shared)(v404);
        std::__shared_weak_count::__release_weak(v404);
      }
    }
    v407 = (std::__shared_weak_count *)v695[1];
    if (v695[1])
    {
      v408 = (unint64_t *)((char *)v695[1] + 8);
      do
        v409 = __ldaxr(v408);
      while (__stlxr(v409 - 1, v408));
      if (!v409)
      {
        ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
        std::__shared_weak_count::__release_weak(v407);
      }
    }
  }
  else
  {
    os_log_type_enabled(v378, OS_LOG_TYPE_DEBUG);
    LOWORD(object) = 0;
    v410 = (void *)_os_log_send_and_compose_impl();
    if (v410)
      free(v410);
  }
  if (v358)
  {
    sub_20E8C003C((uint64_t)&v723, "PredictionBundlerIMUFilter: IMU sampling period too small - using fixed sampling period.");
    sub_20E863570((uint64_t)&v723);
  }
  sub_20E863570((uint64_t)&v723);
  v411 = v731;
  if (v731)
  {
    v412 = (unint64_t *)&v731->__shared_owners_;
    do
      v413 = __ldaxr(v412);
    while (__stlxr(v413 - 1, v412));
    if (!v413)
    {
      ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
      std::__shared_weak_count::__release_weak(v411);
    }
  }
LABEL_545:
  v328 = (double *)v717;
  v357 = 0.002;
LABEL_546:
  v414 = v357 * 0.01;
  v416 = *(v328 - 4);
  v415 = v328 - 4;
  v417 = v416;
  if (v334 != v415)
  {
    v418 = *v334;
    v419 = 1.79769313e308;
    do
    {
      v420 = v334[4];
      v334 += 4;
      v421 = v420;
      v422 = vabdd_f64(v420 - v418, v357);
      if (v422 <= v419 || v422 <= v414)
      {
        v417 = v421;
        v419 = v422;
      }
      v418 = v421;
    }
    while (v334 != v415);
  }
  if (v732)
  {
    v733 = (double *)v732;
    operator delete((void *)v732);
  }
  v423 = v716;
  do
  {
    v424 = v417;
    v417 = v417 - v357;
  }
  while (v417 > *(double *)v716 - v414);
  object = 0;
  v695[0] = 0;
  v695[1] = 0;
  v425 = *v415;
  rep = 0;
  v722 = 0;
  v723 = 0;
  v725 = 0;
  v732 = 0;
  v733 = 0;
  v734 = 0;
  v721 = 0uLL;
  v426 = v414 + v425;
  if (v424 > v414 + v425)
  {
    v427 = 0;
    v428 = 0;
    object = 0;
    v732 = 0;
    v723 = 0;
    goto LABEL_676;
  }
  v429 = 0;
  v672 = 0;
  v430 = 0;
  v431 = 0;
  v427 = 0;
  v432 = 0;
  v428 = 0;
  v433 = (double *)((char *)v716 + 32);
  while (2)
  {
    while (2)
    {
      v692 = v428;
      v435 = v433;
      do
      {
        v436 = v435;
        v437 = *v435;
        v435 += 4;
        v438 = v437;
      }
      while (v437 <= v424 && v436 != (double *)(v717 - 32));
      v440 = vabdd_f64(v438, v424);
      v441 = vabdd_f64(*(v435 - 8), v424);
      if (v441 < v440)
        v438 = *(v435 - 8);
      v433 = v435 - 4;
      if (v441 >= v440)
        v442 = 0x1FFFFFFFFFFFFFFCLL;
      else
        v442 = 0x1FFFFFFFFFFFFFF8;
      if (v441 >= v440)
        v443 = v435 - 4;
      else
        v443 = v435 - 8;
      if (v441 < v440)
        v440 = v441;
      if (v440 <= v414)
      {
        if (v430 < v695[1])
        {
          *(double *)v430 = v438;
          v434 = *(_OWORD *)(v443 + 1);
          *((double *)v430 + 3) = v443[3];
          *(_OWORD *)(v430 + 8) = v434;
          v430 += 32;
          v428 = v692;
          v695[0] = v430;
          ++v431;
          v424 = v357 + v424;
          if (v424 > v426)
            goto LABEL_663;
          continue;
        }
        v449 = (v430 - v427) >> 5;
        v450 = v449 + 1;
        if ((unint64_t)(v449 + 1) >> 59)
          goto LABEL_873;
        v451 = (char *)v695[1] - (char *)v427;
        if (((char *)v695[1] - (char *)v427) >> 4 > v450)
          v450 = v451 >> 4;
        if ((unint64_t)v451 >= 0x7FFFFFFFFFFFFFE0)
          v452 = 0x7FFFFFFFFFFFFFFLL;
        else
          v452 = v450;
        v683 = v429;
        if (v452)
        {
          if (v452 >> 59)
            goto LABEL_869;
          v453 = (char *)operator new(32 * v452);
          v438 = v435[v442];
        }
        else
        {
          v453 = 0;
        }
        v463 = &v453[32 * v449];
        *(double *)v463 = v438;
        v464 = *(_OWORD *)(v443 + 1);
        *((double *)v463 + 3) = v443[3];
        *(_OWORD *)(v463 + 8) = v464;
        v465 = v463;
        if (v430 == v427)
        {
          v428 = v692;
          v433 = v435 - 4;
          v430 = v463 + 32;
          v695[1] = &v453[32 * v452];
          if (v427)
LABEL_606:
            operator delete(v427);
        }
        else
        {
          v428 = v692;
          v433 = v435 - 4;
          do
          {
            v466 = *((_QWORD *)v430 - 4);
            v430 -= 32;
            *((_QWORD *)v465 - 4) = v466;
            v465 -= 32;
            v467 = *(_OWORD *)(v430 + 8);
            *((_QWORD *)v465 + 3) = *((_QWORD *)v430 + 3);
            *(_OWORD *)(v465 + 8) = v467;
          }
          while (v430 != v427);
          v430 = v463 + 32;
          v695[1] = &v453[32 * v452];
          if (v427)
            goto LABEL_606;
        }
        v427 = v465;
        v429 = v683;
        v695[0] = v430;
        ++v431;
        v424 = v357 + v424;
        if (v424 > v426)
          goto LABEL_663;
        continue;
      }
      break;
    }
    v444 = v733;
    if (v733 >= v734)
    {
      v678 = v435 - 4;
      v454 = v733 - v432;
      v455 = v454 + 1;
      if ((unint64_t)(v454 + 1) >> 61)
      {
        object = v427;
        v732 = (uint64_t)v432;
        v723 = (void **)v692;
        sub_20E867F44();
      }
      v456 = (char *)v734 - (char *)v432;
      if (((char *)v734 - (char *)v432) >> 2 > v455)
        v455 = v456 >> 2;
      if ((unint64_t)v456 >= 0x7FFFFFFFFFFFFFF8)
        v457 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v457 = v455;
      v684 = v429;
      if (v457)
      {
        if (v457 >> 61)
          goto LABEL_869;
        v458 = operator new(8 * v457);
        v459 = (double *)&v458[8 * v454];
        *v459 = v424;
        v460 = (uint64_t)(v459 + 1);
        v461 = (char *)v444 - (char *)v432;
        if (v444 != v432)
        {
LABEL_599:
          v462 = v461 - 8;
          if (v462 >= 0x58)
          {
            v428 = v692;
            if ((unint64_t)((char *)v432 - v458) >= 0x20)
            {
              v468 = (v462 >> 3) + 1;
              v469 = 8 * (v468 & 0x3FFFFFFFFFFFFFFCLL);
              v470 = &v444[v469 / 0xFFFFFFFFFFFFFFF8];
              v459 = (double *)((char *)v459 - v469);
              v471 = &v458[8 * v454 - 16];
              v472 = v444 - 2;
              v473 = v468 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v474 = *(_OWORD *)v472;
                *(v471 - 1) = *((_OWORD *)v472 - 1);
                *v471 = v474;
                v471 -= 2;
                v472 -= 4;
                v473 -= 4;
              }
              while (v473);
              v444 = v470;
              if (v468 == (v468 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_618:
                v734 = (double *)&v458[8 * v457];
                if (v432)
                  operator delete(v432);
                v432 = v459;
                v433 = v678;
                v429 = v684;
                v733 = (double *)v460;
                v445 = v695[1];
                if (v430 >= v695[1])
                  goto LABEL_621;
LABEL_578:
                *(_QWORD *)v430 = 0xBFF0000000000000;
                v446 = v721;
                *((_QWORD *)v430 + 3) = v722;
                *(_OWORD *)(v430 + 8) = v446;
                v430 += 32;
                v447 = (char *)rep;
                v429 = (char *)v725;
                v695[0] = v430;
                v677 = v432;
                if (rep < v725)
                  goto LABEL_579;
LABEL_636:
                v486 = v433;
                v487 = v447 - v428;
                v488 = (v447 - v428) >> 3;
                v489 = v488 + 1;
                if ((unint64_t)(v488 + 1) >> 61)
                {
                  object = v427;
                  v732 = (uint64_t)v432;
                  v723 = (void **)v428;
                  sub_20E867F44();
                }
                if ((v429 - v428) >> 2 > v489)
                  v489 = (v429 - v428) >> 2;
                if ((unint64_t)(v429 - v428) >= 0x7FFFFFFFFFFFFFF8)
                  v490 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v490 = v489;
                if (v490)
                {
                  if (v490 >> 61)
                  {
LABEL_869:
                    object = v427;
                    v732 = (uint64_t)v432;
                    v723 = (void **)v692;
                    sub_20E877A38();
                  }
                  v491 = v490;
                  v492 = operator new(8 * v490);
                  v428 = v692;
                  v490 = v491;
                  v493 = &v492[8 * v488];
                  *(_QWORD *)v493 = v431;
                  v448 = (uint64_t)(v493 + 8);
                  v494 = v447 - v692;
                  if (v447 != v692)
                  {
LABEL_645:
                    v495 = v494 - 8;
                    if (v495 < 0x168
                      || (v499 = (v447 - 8 - v428) & 0xFFFFFFFFFFFFFFF8, &v492[v487 - 8 - v499] > &v492[v487 - 8])
                      || &v447[-v499 - 8] > v447 - 8
                      || (unint64_t)(v447 - v492 - v487) < 0x20)
                    {
                      v496 = v447;
                      v433 = v486;
                    }
                    else
                    {
                      v500 = (v495 >> 3) + 1;
                      v501 = 8 * (v500 & 0x3FFFFFFFFFFFFFFCLL);
                      v496 = &v447[-v501];
                      v493 -= v501;
                      v502 = &v492[8 * v488 - 16];
                      v503 = v447 - 16;
                      v504 = v500 & 0x3FFFFFFFFFFFFFFCLL;
                      v433 = v486;
                      do
                      {
                        v505 = *(_OWORD *)v503;
                        *(v502 - 1) = *((_OWORD *)v503 - 1);
                        *v502 = v505;
                        v502 -= 2;
                        v503 -= 32;
                        v504 -= 4;
                      }
                      while (v504);
                      if (v500 == (v500 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_648:
                        v429 = &v492[8 * v490];
                        v725 = (unint64_t)v429;
                        if (!v428)
                        {
LABEL_650:
                          v428 = v493;
                          goto LABEL_651;
                        }
LABEL_649:
                        v498 = v429;
                        operator delete(v428);
                        v429 = v498;
                        goto LABEL_650;
                      }
                    }
                    do
                    {
                      v497 = *((_QWORD *)v496 - 1);
                      v496 -= 8;
                      *((_QWORD *)v493 - 1) = v497;
                      v493 -= 8;
                    }
                    while (v496 != v428);
                    goto LABEL_648;
                  }
                }
                else
                {
                  v492 = 0;
                  v493 = (char *)(8 * v488);
                  *(_QWORD *)(8 * v488) = v431;
                  v448 = 8 * v488 + 8;
                  v494 = v447 - v428;
                  if (v447 != v428)
                    goto LABEL_645;
                }
                v433 = v486;
                v429 = &v492[8 * v490];
                v725 = (unint64_t)v429;
                if (!v428)
                  goto LABEL_650;
                goto LABEL_649;
              }
            }
          }
          else
          {
            v428 = v692;
          }
          do
          {
            v475 = *((_QWORD *)v444-- - 1);
            *((_QWORD *)v459-- - 1) = v475;
          }
          while (v444 != v432);
          goto LABEL_618;
        }
      }
      else
      {
        v458 = 0;
        v459 = (double *)(8 * v454);
        *(double *)(8 * v454) = v424;
        v460 = 8 * v454 + 8;
        v461 = (char *)v444 - (char *)v432;
        if (v444 != v432)
          goto LABEL_599;
      }
      v428 = v692;
      goto LABEL_618;
    }
    *v733 = v424;
    v428 = v692;
    v733 = v444 + 1;
    v445 = v695[1];
    if (v430 < v695[1])
      goto LABEL_578;
LABEL_621:
    v476 = (v430 - v427) >> 5;
    v477 = v476 + 1;
    if ((unint64_t)(v476 + 1) >> 59)
    {
LABEL_873:
      object = v427;
      v732 = (uint64_t)v432;
      v723 = (void **)v692;
      sub_20E867F44();
    }
    v478 = v445 - v427;
    if (v478 >> 4 > v477)
      v477 = v478 >> 4;
    if ((unint64_t)v478 >= 0x7FFFFFFFFFFFFFE0)
      v479 = 0x7FFFFFFFFFFFFFFLL;
    else
      v479 = v477;
    if (v479)
    {
      if (v479 >> 59)
        goto LABEL_869;
      v480 = v429;
      v481 = (char *)operator new(32 * v479);
    }
    else
    {
      v480 = v429;
      v481 = 0;
    }
    v482 = &v481[32 * v476];
    *(_QWORD *)v482 = 0xBFF0000000000000;
    *(_OWORD *)(v482 + 8) = v721;
    *((_QWORD *)v482 + 3) = v722;
    for (j = v482; v430 != v427; *(_OWORD *)(j + 8) = v485)
    {
      v484 = *((_QWORD *)v430 - 4);
      v430 -= 32;
      *((_QWORD *)j - 4) = v484;
      j -= 32;
      v485 = *(_OWORD *)(v430 + 8);
      *((_QWORD *)j + 3) = *((_QWORD *)v430 + 3);
    }
    v430 = v482 + 32;
    v695[1] = &v481[32 * v479];
    v428 = v692;
    if (v427)
      operator delete(v427);
    v427 = j;
    v447 = v672;
    v429 = v480;
    v695[0] = v430;
    v677 = v432;
    if (v672 >= v480)
      goto LABEL_636;
LABEL_579:
    *(_QWORD *)v447 = v431;
    v448 = (uint64_t)(v447 + 8);
LABEL_651:
    rep = v448;
    v672 = (char *)v448;
    v432 = v677;
    ++v431;
    v424 = v357 + v424;
    if (v424 <= v426)
      continue;
    break;
  }
LABEL_663:
  v423 = v716;
  object = v427;
  v732 = (uint64_t)v432;
  v723 = (void **)v428;
  if (v432 != v733)
  {
    v718 = 0;
    v719 = 0;
    v720 = 0;
    v506 = v717;
    v739[0] = (uint64_t *)v716;
    if (*v432 >= *(double *)v716 && *(v733 - 1) <= *(double *)(v717 - 32))
    {
      v737 = v739;
      v738 = (double **)v739;
      v736 = (double **)&v732;
      sub_20EAF5F94((char **)&v718, v733 - v432);
      v735[0] = &v718;
      v735[1] = &v732;
      sub_20FDB48EC((uint64_t)(a1 + 37), &v738, (uint64_t **)&v737, (v506 - (uint64_t)v423) >> 5, &v736, v735, ((uint64_t)v733 - v732) >> 3, v507, v508, v509, v510, v511, v512, v513, v514);
    }
    else if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PredictionBundlerIMUFilter.cpp", 341, (uint64_t)"interp_state", 12, (uint64_t)"PredictionBundlerIMUFilter: imu interpolation failed", 52, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v515 = (char *)v718;
    if (v718 != v719)
    {
      v516 = v428;
      do
      {
        v517 = *(_QWORD *)v516;
        v516 += 8;
        v518 = &v427[32 * v517];
        *(_QWORD *)v518 = *(_QWORD *)v515;
        v519 = *(_OWORD *)(v515 + 8);
        *((_QWORD *)v518 + 3) = *((_QWORD *)v515 + 3);
        *(_OWORD *)(v518 + 8) = v519;
        v515 += 32;
      }
      while (v515 != v719);
      v515 = (char *)v718;
    }
    if (v515)
    {
      v719 = v515;
      operator delete(v515);
    }
    v423 = v716;
  }
LABEL_676:
  if (v423)
    operator delete(v423);
  v716 = v427;
  v717 = *(_OWORD *)v695;
  v695[0] = 0;
  v695[1] = 0;
  object = 0;
  if (v732)
  {
    v733 = (double *)v732;
    operator delete((void *)v732);
  }
  if (v428)
  {
    rep = (unint64_t)v428;
    operator delete(v428);
    if (object)
      operator delete(object);
  }
  v520 = v717;
  v521 = *(double *)(v717 - 32);
  if (vabdd_f64(v521, *(double *)(*(_QWORD *)(a3 + 8) - 32)) > 0.001)
  {
    sub_20F1CD980(&v718);
    if (**((int **)v718 + 7) <= 2)
    {
      v522 = *((unsigned __int8 *)v718 + 72);
      v523 = sub_20E8C31DC((uint64_t)v718, "OSLogSurrogateAppender", 1, 0);
      v524 = v523;
      if (v522 || v523)
      {
        v723 = &v718;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v725 = std::chrono::system_clock::now().__d_.__rep_;
        v726 = 2;
        v727 = "unknown file";
        v728 = 83;
        v731 = 0;
        v729 = "unknown function";
        v730 = 0;
        v557 = (unsigned __int8 *)*v723;
        v558 = (uint64_t)*v723 + 16;
        if (*((char *)*v723 + 39) < 0)
        {
          v560 = (const char *)*((_QWORD *)v557 + 2);
          v559 = *((_QWORD *)v557 + 3);
          v562 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v562 & 1) != 0)
            goto LABEL_726;
        }
        else
        {
          v559 = *((unsigned __int8 *)*v723 + 39);
          v560 = (char *)*v723 + 16;
          v561 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v561 & 1) != 0)
            goto LABEL_726;
        }
        if (__cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v696 && SHIBYTE(v695[1]) < 0)
            operator delete(object);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
LABEL_726:
        if (byte_254A4A4F8[23] >= 0)
          v563 = byte_254A4A4F8;
        else
          v563 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v564 = byte_254A4A4F8[23];
        else
          v564 = *(_QWORD *)&byte_254A4A4F8[8];
        object = os_log_create(v563, v560);
        v565 = v695;
        if (v564 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v564 >= 0x17)
        {
          v566 = v524;
          v567 = v560;
          v568 = v557;
          v569 = v522;
          v570 = v558;
          v571 = (v564 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v564 | 7) != 0x17)
            v571 = v564 | 7;
          v572 = v571 + 1;
          v565 = operator new(v571 + 1);
          v695[1] = (void *)v564;
          *(_QWORD *)&v696 = v572 | 0x8000000000000000;
          v695[0] = v565;
          v558 = v570;
          v522 = v569;
          v557 = v568;
          v560 = v567;
          v524 = v566;
        }
        else
        {
          BYTE7(v696) = v564;
          if (!v564)
          {
LABEL_740:
            *((_BYTE *)v565 + v564) = 0;
            BYTE8(v696) = 1;
            v573 = &__p;
            if (v559 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v559 >= 0x17)
            {
              v574 = (v559 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v559 | 7) != 0x17)
                v574 = v559 | 7;
              v575 = v574 + 1;
              v573 = operator new(v574 + 1);
              v698 = v559;
              v699 = v575 | 0x8000000000000000;
              __p = v573;
            }
            else
            {
              HIBYTE(v699) = v559;
              if (!v559)
              {
LABEL_748:
                *((_BYTE *)v573 + v559) = 0;
                v700 = 1;
                v576 = object;
                if (SHIBYTE(v699) < 0)
                  operator delete(__p);
                if (BYTE8(v696) && SBYTE7(v696) < 0)
                  operator delete(v695[0]);
                if (object)
                  os_release(object);
                if (v524 && *(_QWORD *)(v524 + 24))
                {
                  v577 = _os_log_pack_size();
                  v578 = (std::__shared_weak_count_vtbl *)operator new(v577, (std::align_val_t)8uLL);
                  v579 = (std::__shared_weak_count *)operator new();
                  v580 = v579;
                  v579->__shared_owners_ = 0;
                  v581 = (unint64_t *)&v579->__shared_owners_;
                  v579->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v579->__shared_weak_owners_ = 0;
                  v579[1].__vftable = v578;
                  object = v578;
                  v695[0] = v578;
                  v695[1] = v579;
                  do
                    v582 = __ldxr(v581);
                  while (__stxr(v582 + 1, v581));
                  v696 = 0uLL;
                  __p = 0;
                  do
                    v583 = __ldaxr(v581);
                  while (__stlxr(v583 - 1, v581));
                  if (!v583)
                  {
                    ((void (*)(std::__shared_weak_count *))v579->__on_zero_shared)(v579);
                    std::__shared_weak_count::__release_weak(v580);
                  }
                  v584 = object;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v585 = (char *)operator new();
                  v586 = v557[39];
                  if ((v586 & 0x80u) == 0)
                    v587 = v558;
                  else
                    v587 = *((_QWORD *)v557 + 2);
                  if ((v586 & 0x80u) != 0)
                    v586 = *((_QWORD *)v557 + 3);
                  *(_QWORD *)v585 = v584;
                  *(_OWORD *)(v585 + 8) = *(_OWORD *)v695;
                  v695[0] = 0;
                  v695[1] = 0;
                  *(_OWORD *)(v585 + 24) = v696;
                  v696 = 0uLL;
                  *((_QWORD *)v585 + 5) = v587;
                  *((_QWORD *)v585 + 6) = v586;
                  v585[56] = 2;
                  *(_QWORD *)&v721 = 0;
                  v732 = (uint64_t)v585;
                  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v524 + 24) + 40))(*(_QWORD *)(v524 + 24), &v732);
                  v588 = v732;
                  v732 = 0;
                  if (v588)
                  {
                    v589 = *(std::__shared_weak_count **)(v588 + 32);
                    if (v589)
                    {
                      v590 = (unint64_t *)&v589->__shared_owners_;
                      do
                        v591 = __ldaxr(v590);
                      while (__stlxr(v591 - 1, v590));
                      if (!v591)
                      {
                        ((void (*)(std::__shared_weak_count *))v589->__on_zero_shared)(v589);
                        std::__shared_weak_count::__release_weak(v589);
                      }
                    }
                    v592 = *(std::__shared_weak_count **)(v588 + 16);
                    if (v592)
                    {
                      v593 = (unint64_t *)&v592->__shared_owners_;
                      do
                        v594 = __ldaxr(v593);
                      while (__stlxr(v594 - 1, v593));
                      if (!v594)
                      {
                        ((void (*)(std::__shared_weak_count *))v592->__on_zero_shared)(v592);
                        std::__shared_weak_count::__release_weak(v592);
                      }
                    }
                    MEMORY[0x212BC6398](v588, 0x10F0C40B62ED6C6);
                    v595 = v721;
                    *(_QWORD *)&v721 = 0;
                    if (v595)
                    {
                      v596 = *(std::__shared_weak_count **)(v595 + 32);
                      if (v596)
                      {
                        v597 = (unint64_t *)&v596->__shared_owners_;
                        do
                          v598 = __ldaxr(v597);
                        while (__stlxr(v598 - 1, v597));
                        if (!v598)
                        {
                          ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
                          std::__shared_weak_count::__release_weak(v596);
                        }
                      }
                      v599 = *(std::__shared_weak_count **)(v595 + 16);
                      if (v599)
                      {
                        v600 = (unint64_t *)&v599->__shared_owners_;
                        do
                          v601 = __ldaxr(v600);
                        while (__stlxr(v601 - 1, v600));
                        if (!v601)
                        {
                          ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
                          std::__shared_weak_count::__release_weak(v599);
                        }
                      }
                      MEMORY[0x212BC6398](v595, 0x10F0C40B62ED6C6);
                    }
                  }
                  v602 = (std::__shared_weak_count *)*((_QWORD *)&v696 + 1);
                  if (*((_QWORD *)&v696 + 1))
                  {
                    v603 = (unint64_t *)(*((_QWORD *)&v696 + 1) + 8);
                    do
                      v604 = __ldaxr(v603);
                    while (__stlxr(v604 - 1, v603));
                    if (!v604)
                    {
                      ((void (*)(std::__shared_weak_count *))v602->__on_zero_shared)(v602);
                      std::__shared_weak_count::__release_weak(v602);
                    }
                  }
                  v605 = (std::__shared_weak_count *)v695[1];
                  if (v695[1])
                  {
                    v606 = (unint64_t *)((char *)v695[1] + 8);
                    do
                      v607 = __ldaxr(v606);
                    while (__stlxr(v607 - 1, v606));
                    if (!v607)
                    {
                      ((void (*)(std::__shared_weak_count *))v605->__on_zero_shared)(v605);
                      std::__shared_weak_count::__release_weak(v605);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v576, OS_LOG_TYPE_DEBUG);
                  LOWORD(object) = 0;
                  v608 = (void *)_os_log_send_and_compose_impl();
                  if (v608)
                    free(v608);
                }
                if (v522)
                {
                  sub_20E8C003C((uint64_t)&v723, "PredictionBundlerIMUFilter: Resampling buffer last timestamp different from last window sample");
                  sub_20E863570((uint64_t)&v723);
                }
                sub_20E863570((uint64_t)&v723);
                v609 = v731;
                if (v731)
                {
                  v610 = (unint64_t *)&v731->__shared_owners_;
                  do
                    v611 = __ldaxr(v610);
                  while (__stlxr(v611 - 1, v610));
                  if (!v611)
                  {
                    ((void (*)(std::__shared_weak_count *))v609->__on_zero_shared)(v609);
                    std::__shared_weak_count::__release_weak(v609);
                  }
                }
                v525 = v716;
                v520 = v717;
                v526 = a4 - v521;
                v527 = 0;
                if (a4 - v521 < 0.0)
                  goto LABEL_811;
LABEL_688:
                v528 = 1.0 / (1.0 / v357);
                if (v528 < 0.0)
                  goto LABEL_811;
                v529 = (v520 - (uint64_t)v525) >> 5;
                v530 = vcvtpd_u64_f64(v526 / v528);
                if (v530 - 21 < 0xFFFFFFFFFFFFFFECLL || v529 < v530 + 5)
                  goto LABEL_811;
                v532 = (double *)operator new(32 * v530);
                v533 = v532;
                v534 = (char *)v532;
                do
                {
                  *(_QWORD *)v534 = 0xBFF0000000000000;
                  *((_QWORD *)v534 + 1) = 0;
                  *((_QWORD *)v534 + 2) = 0;
                  *((_QWORD *)v534 + 3) = 0;
                  v534 += 32;
                }
                while (v534 != (char *)&v532[4 * v530]);
                object = 0;
                v695[0] = 0;
                v695[1] = 0;
                rep = 0;
                v723 = 0;
                LODWORD(v725) = 0;
                v735[0] = 0;
                if (v530)
                {
                  v679 = 0;
                  v660 = v520 - 56;
                  v662 = v520 - 24;
                  v656 = v520 - 120;
                  v658 = v520 - 88;
                  v654 = v520 - 152;
                  v668 = v532;
                  v664 = v530;
                  v648 = v529;
LABEL_698:
                  v732 = 1;
                  sub_20F1CDA9C(v529, (unsigned int *)v735, &v732, (uint64_t)&v716, (uint64_t)&object, (uint64_t)&v723);
                  v536 = (int)v695[1];
                  v535 = HIDWORD(v695[1]);
                  v537 = (char *)object;
                  v673 = v725;
                  v538 = v723;
                  v666 = &v533[v679];
                  v685 = HIDWORD(v695[1]);
                  v693 = v695[1];
                  v539 = 1;
                  while (1)
                  {
                    v540 = v539 - 1;
                    v533[4 * v539 - 4] = v521 + v528 * (double)v539;
                    v541 = (8 * ((v536 - (v539 - 1)) * v535) + 31) & 0xFFFFFFFE0;
                    *((_QWORD *)&v721 + 1) = v541 >> 3;
                    v542 = (char *)operator new(v541, (std::align_val_t)0x20uLL);
                    *(_QWORD *)&v721 = v542;
                    LODWORD(v722) = v536 - (v539 - 1);
                    HIDWORD(v722) = v535;
                    if (v535 && v536 != (_DWORD)v540)
                    {
                      v543 = 0;
                      v544 = v685;
                      do
                      {
                        memmove(v542, &v537[8 * v543], 8 * (v536 - (v539 - 1)));
                        v543 += v536;
                        v542 += 8 * v693;
                        --v544;
                      }
                      while (v544);
                    }
                    v545 = 8 * (v673 - v540);
                    v546 = (v545 + 31) & 0xFFFFFFFE0;
                    v719 = (char *)(v546 >> 3);
                    v547 = operator new(v546, (std::align_val_t)0x20uLL);
                    v718 = v547;
                    LODWORD(v720) = v673 - v540;
                    if (v673 != (_DWORD)v540)
                      memmove(v547, &v538[v540], v545);
                    sub_20F1CC27C((uint64_t)&v732, (uint64_t)&v721, (uint64_t)&v718);
                    v535 = v685;
                    v549 = *(double *)v732;
                    v548 = *(double *)(v732 + 8);
                    v550 = *(double *)(v732 + 16);
                    v551 = *(double *)(v732 + 24);
                    v552 = *(double *)(v732 + 32);
                    MEMORY[0x212BC6368](v732, 0x1000C8000313F17);
                    v533 = v668;
                    if (v718)
                      MEMORY[0x212BC6368](v718, 0x1000C8000313F17);
                    if ((_QWORD)v721)
                      MEMORY[0x212BC6368](v721, 0x1000C8000313F17);
                    v553 = (double *)operator new(0x40uLL, (std::align_val_t)0x20uLL);
                    *v553 = v549;
                    v553[1] = v548;
                    v553[2] = v550;
                    v553[3] = v551;
                    v553[4] = v552;
                    v554 = sub_20F1CC94C(v553, 5u);
                    MEMORY[0x212BC6368](v553, 0x1000C8000313F17);
                    if ((v554 & 1) == 0)
                      break;
                    v555 = (double *)operator new(0x40uLL, (std::align_val_t)0x20uLL);
                    *v555 = v549;
                    v555[1] = v548;
                    v555[2] = v550;
                    v555[3] = v551;
                    v555[4] = v552;
                    v666[4 * v540 + 1] = v549 * *(double *)(v662 + 8 * v679)
                                       + 0.0
                                       + v548 * *(double *)(v660 + 8 * v679)
                                       + v550 * *(double *)(v658 + 8 * v679)
                                       + v551 * *(double *)(v656 + 8 * v679)
                                       + v552 * *(double *)(v654 + 8 * v679);
                    MEMORY[0x212BC6368](v555, 0x1000C8000313F17);
                    --v693;
                    v135 = v539++ == v664;
                    if (v135)
                    {
                      v735[0] = (_QWORD *)++v679;
                      v529 = v648;
                      if (v679 != 3)
                        goto LABEL_698;
                      v556 = 1;
                      do
                      {
                        v632 = &v668[4 * v556];
                        v634 = *(v632 - 4);
                        v633 = (char *)(v632 - 4);
                        v635 = v634;
                        if (*(double *)(*(_QWORD *)(a3 + 8) - 32) < v634)
                        {
                          v636 = v705;
                          if ((unint64_t)v705 < v706)
                          {
                            *(double *)v705 = v635;
                            v630 = *(_OWORD *)(v633 + 8);
                            v636[3] = *((_QWORD *)v633 + 3);
                            *(_OWORD *)(v636 + 1) = v630;
                            v631 = v636 + 4;
                          }
                          else
                          {
                            v637 = v704;
                            v638 = ((char *)v705 - (char *)v704) >> 5;
                            v639 = v638 + 1;
                            if ((unint64_t)(v638 + 1) >> 59)
                              sub_20E867F44();
                            v640 = v706 - (_QWORD)v704;
                            if ((uint64_t)(v706 - (_QWORD)v704) >> 4 > v639)
                              v639 = v640 >> 4;
                            if ((unint64_t)v640 >= 0x7FFFFFFFFFFFFFE0)
                              v641 = 0x7FFFFFFFFFFFFFFLL;
                            else
                              v641 = v639;
                            if (v641)
                            {
                              if (v641 >> 59)
                                sub_20E877A38();
                              v642 = (char *)operator new(32 * v641);
                            }
                            else
                            {
                              v642 = 0;
                            }
                            v643 = &v642[32 * v638];
                            *(double *)v643 = v635;
                            *(_OWORD *)(v643 + 8) = *(_OWORD *)(v633 + 8);
                            *((_QWORD *)v643 + 3) = *((_QWORD *)v633 + 3);
                            v644 = v643;
                            if (v636 != v637)
                            {
                              do
                              {
                                v645 = *(v636 - 4);
                                v636 -= 4;
                                *((_QWORD *)v644 - 4) = v645;
                                v644 -= 32;
                                v646 = *(_OWORD *)(v636 + 1);
                                *((_QWORD *)v644 + 3) = v636[3];
                                *(_OWORD *)(v644 + 8) = v646;
                              }
                              while (v636 != v637);
                              v636 = v704;
                            }
                            v631 = v643 + 32;
                            v704 = v644;
                            v706 = (unint64_t)&v642[32 * v641];
                            if (v636)
                              operator delete(v636);
                          }
                          v705 = v631;
                        }
                        v135 = v556++ == v664;
                      }
                      while (!v135);
                      goto LABEL_723;
                    }
                  }
                  v527 = 0;
                  if (!v538)
                    goto LABEL_716;
                }
                else
                {
                  v732 = 1;
                  sub_20F1CDA9C(v529, (unsigned int *)v735, &v732, (uint64_t)&v716, (uint64_t)&object, (uint64_t)&v723);
                  v735[0] = (_QWORD *)1;
                  v732 = 1;
                  sub_20F1CDA9C(v529, (unsigned int *)v735, &v732, (uint64_t)&v716, (uint64_t)&object, (uint64_t)&v723);
                  v735[0] = (_QWORD *)2;
                  v732 = 1;
                  sub_20F1CDA9C(v529, (unsigned int *)v735, &v732, (uint64_t)&v716, (uint64_t)&object, (uint64_t)&v723);
LABEL_723:
                  v527 = *((double *)v705 - 4) >= a4;
                  v538 = v723;
                  if (!v723)
                    goto LABEL_716;
                }
                MEMORY[0x212BC6368](v538, 0x1000C8000313F17);
LABEL_716:
                if (object)
                  MEMORY[0x212BC6368](object, 0x1000C8000313F17);
                operator delete(v533);
                v525 = v716;
                goto LABEL_811;
              }
            }
            memmove(v573, v560, v559);
            goto LABEL_748;
          }
        }
        memmove(v565, v563, v564);
        goto LABEL_740;
      }
    }
  }
  v525 = v716;
  v526 = a4 - v521;
  v527 = 0;
  if (a4 - v521 >= 0.0)
    goto LABEL_688;
LABEL_811:
  if (v525)
    operator delete(v525);
  if (v649 && v527)
  {
    sub_20F1B82B4((char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)v710, (uint64_t)v711, ((char *)v711 - (_BYTE *)v710) >> 5);
    v612 = v704;
    sub_20F1B82B4((char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)v704, (uint64_t)v705, ((char *)v705 - (char *)v704) >> 5);
    if (v612)
      goto LABEL_815;
  }
  else
  {
    LOBYTE(object) = 0;
    v703 = 0;
    sub_20F1C54AC(a4, (uint64_t)a1, (double **)a2, (void **)a3);
    if (v703 && v701)
    {
      v702 = v701;
      operator delete(v701);
    }
    v612 = v704;
    if (v704)
LABEL_815:
      operator delete(v612);
  }
  if (v707)
    operator delete(v707);
  if (v710)
    operator delete(v710);
  if (v713)
    operator delete(v713);
}

void sub_20F1CBB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,void *a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;

  if (a37 && a36 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x200]);
  if (a67)
    operator delete(a67);
  if (a55)
    operator delete(a55);
  if (a58)
    operator delete(a58);
  if (a61)
    operator delete(a61);
  if (a64)
    operator delete(a64);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1CC27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  double *v10;
  unint64_t v11;
  unint64_t v12;
  float64x2_t *v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double *v17;
  double v18;
  double v19;
  size_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  size_t v24;
  double *v25;
  _QWORD *v26;
  unint64_t v27;
  int v28;
  double v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  double v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  double v48;
  unsigned int v49;
  unsigned int v50;
  size_t v51;
  void *v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  double v56;
  double *v57;
  uint64_t v58;
  double *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  size_t v65;
  unsigned int v66;
  size_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t result;
  uint64_t v74;
  _QWORD *v75;
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[3];
  uint64_t v79;
  _QWORD v80[2];
  int v81;
  _QWORD v82[2];
  unsigned int v83;
  int v84;
  _QWORD v85[2];
  unsigned int v86;
  unsigned int v87;
  _DWORD v88[2];
  double v89[3];
  char v90;
  _QWORD *v91;
  size_t v92;
  unsigned int v93;
  unsigned int v94;
  _QWORD *v95;
  char v96[8];
  uint64_t *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a2 + 20);
  v7 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v7)
  {
    v8 = *(double **)a3;
    v9 = **(double **)a3 * **(double **)a3;
    if ((_DWORD)v7 != 1)
    {
      v10 = v8 + 1;
      v11 = (v7 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
      if (v11 < 3)
        goto LABEL_7;
      v12 = v11 + 1;
      v10 += v12 & 0x3FFFFFFFFFFFFFFCLL;
      v13 = (float64x2_t *)(v8 + 3);
      v14 = v12 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v15 = vmulq_f64(v13[-1], v13[-1]);
        v16 = vmulq_f64(*v13, *v13);
        v9 = v9 + v15.f64[0] + v15.f64[1] + v16.f64[0] + v16.f64[1];
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_7:
        v17 = &v8[v7];
        do
        {
          v18 = *v10++;
          v9 = v9 + v18 * v18;
        }
        while (v10 != v17);
      }
    }
  }
  else
  {
    v9 = 0.0;
  }
  v19 = sqrt(v9);
  v82[0] = a2;
  v88[0] = v6;
  v88[1] = v6;
  v89[0] = v19 * (v19 * 0.00001);
  v20 = (8 * (v6 * v6) + 31) & 0xFFFFFFFE0;
  v92 = v20 >> 3;
  v91 = operator new(v20, (std::align_val_t)0x20uLL);
  v93 = v6;
  v94 = v6;
  v97 = v82;
  v98 = (char *)a2;
  v99 = 0x3FF0000000000000;
  sub_20F197F40((uint64_t)&v91, (uint64_t)v96);
  v95 = v88;
  v21 = v93;
  v22 = v94;
  v23 = v94 * v93;
  v24 = (8 * v23 + 31) & 0xFFFFFFFE0;
  v85[0] = 0;
  v85[1] = v24 >> 3;
  v25 = (double *)operator new(v24, (std::align_val_t)0x20uLL);
  v85[0] = v25;
  v86 = v21;
  v87 = v22;
  v26 = v91;
  if ((_DWORD)v23)
  {
    v27 = 0;
    v28 = v88[0];
    v29 = v89[0];
    v30 = 8 * v23;
    v31 = (double *)v91;
    do
    {
      v32 = *v31++;
      v33 = v32;
      if ((_DWORD)v27 == HIDWORD(v27))
        v34 = v29;
      else
        v34 = 0.0;
      *v25++ = v33 + v34;
      v35 = (v27 + 1);
      v36 = v27 & 0xFFFFFFFF00000000;
      v37 = v36 | v35;
      v27 = v36 + 0x100000000;
      if (v28 > (int)v35)
        v27 = v37;
      v30 -= 8;
    }
    while (v30);
  }
  if (v26)
  {
    MEMORY[0x212BC6368](v26, 0x1000C8000313F17);
    v21 = v86;
    v22 = v87;
  }
  if (v22 >= v21)
    v38 = v21;
  else
    v38 = v22;
  if (!v38)
    goto LABEL_42;
  v39 = *(double *)v85[0];
  v40 = v38 - 1;
  if (v38 == 1)
    goto LABEL_41;
  v41 = v21 + 1;
  if (v38 < 3)
  {
    v42 = 1;
LABEL_39:
    v49 = v38 - v42;
    v50 = v41 * v42;
    do
    {
      v39 = v39 + *(double *)(v85[0] + 8 * v50);
      v50 += v41;
      --v49;
    }
    while (v49);
    goto LABEL_41;
  }
  if (v41 < 0)
    v43 = ~v21;
  else
    v43 = v21 + 1;
  v44 = v43 * (unint64_t)(v38 - 2);
  if (v41 >= 0)
    v45 = -2 - v21;
  else
    v45 = v21 + 1;
  v42 = 1;
  if (v44 > v45)
    goto LABEL_39;
  if ((v44 & 0xFFFFFFFF00000000) != 0)
    goto LABEL_39;
  v46 = 0;
  v42 = v40 | 1;
  v47 = v40 & 0xFFFFFFFE;
  do
  {
    v48 = *(double *)(v85[0] + 8 * (v41 + v46));
    v46 += 2 * v21 + 2;
    v39 = v39 + v48 + *(double *)(v85[0] + 8 * v46);
    v47 -= 2;
  }
  while (v47);
  if ((v40 & 0xFFFFFFFE) != v40)
    goto LABEL_39;
LABEL_41:
  if (v39 == 0.0)
  {
LABEL_42:
    v51 = (8 * v6 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v51 >> 3;
    v52 = operator new(v51, (std::align_val_t)0x20uLL);
    *(_QWORD *)a1 = v52;
    *(_DWORD *)(a1 + 16) = v6;
    if ((_DWORD)v6)
      bzero(v52, 8 * v6);
    goto LABEL_69;
  }
  sub_20F196C54((uint64_t)v85);
  v53 = (8 * v6 + 31) & 0xFFFFFFFE0;
  v80[1] = v53 >> 3;
  v54 = operator new(v53, (std::align_val_t)0x20uLL);
  v80[0] = v54;
  v81 = v6;
  if ((_DWORD)v6)
    memset_pattern16(v54, &unk_210315A20, 8 * v6);
  v55 = v84 * v83;
  if ((_DWORD)v55)
  {
    v56 = *(double *)v82[0];
    if ((_DWORD)v55 != 1)
    {
      v57 = (double *)(v82[0] + 8);
      if (((v55 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL) == 0)
        goto LABEL_52;
      v58 = ((v55 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      v57 += v58 & 0x3FFFFFFFFFFFFFFELL;
      v59 = (double *)(v82[0] + 16);
      v60 = v58 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        v56 = v56 + *(v59 - 1) + *v59;
        v59 += 2;
        v60 -= 2;
      }
      while (v60);
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_52:
        v61 = v82[0] + 8 * v55;
        do
        {
          v62 = *v57++;
          v56 = v56 + v62;
        }
        while (v57 != (double *)v61);
      }
    }
  }
  else
  {
    v56 = 0.0;
  }
  v79 = a2;
  v75 = v80;
  v76[0] = &v75;
  v76[1] = v82;
  v74 = a2;
  v77[0] = v76;
  v77[1] = &v74;
  v97 = v77;
  v98 = (char *)a3;
  v99 = 0x3FF0000000000000;
  sub_20F1CE2C8(v89, (uint64_t)v96);
  v63 = 1.0;
  if (v56 != 0.0)
    v63 = 1.0 / v56;
  v89[1] = 1.0;
  v78[0] = v80;
  *(double *)&v78[1] = v63 * (v89[0] + -1.0);
  v64 = *(unsigned int *)(v79 + 20);
  v65 = (8 * v64 + 31) & 0xFFFFFFFE0;
  v92 = v65 >> 3;
  v91 = operator new(v65, (std::align_val_t)0x20uLL);
  v93 = v64;
  v97 = &v79;
  v98 = (char *)a3;
  v99 = 0x3FF0000000000000;
  sub_20EB2AEFC((uint64_t)&v91, (uint64_t)v96);
  v95 = v78;
  v66 = v83;
  v67 = (8 * v83 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v67 >> 3;
  *(_QWORD *)a1 = operator new(v67, (std::align_val_t)0x20uLL);
  *(_DWORD *)(a1 + 16) = v66;
  v97 = v82;
  v98 = &v90;
  v99 = 0x3FF0000000000000;
  sub_20F1CE7BC(a1, (uint64_t)v96);
  if (v91)
    MEMORY[0x212BC6368](v91, 0x1000C8000313F17);
  v68 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v68)
  {
    v69 = (_QWORD *)(*(_QWORD *)a1 + 8 * v68 - 8);
    if ((unint64_t)v69 > *(_QWORD *)a1)
    {
      v70 = *(_QWORD *)a1 + 8;
      do
      {
        v71 = *(_QWORD *)(v70 - 8);
        *(_QWORD *)(v70 - 8) = *v69;
        *v69-- = v71;
        v72 = v70 >= (unint64_t)v69;
        v70 += 8;
      }
      while (!v72);
    }
  }
  if (v80[0])
    MEMORY[0x212BC6368](v80[0], 0x1000C8000313F17);
  if (v82[0])
    MEMORY[0x212BC6368](v82[0], 0x1000C8000313F17);
LABEL_69:
  result = v85[0];
  if (v85[0])
    return MEMORY[0x212BC6368](v85[0], 0x1000C8000313F17);
  return result;
}

void sub_20F1CC834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  if (*v25)
  {
    MEMORY[0x212BC6368](*v25, 0x1000C8000313F17);
    if (!*(_QWORD *)(v26 - 160))
    {
LABEL_3:
      if (!a19)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if (!*(_QWORD *)(v26 - 160))
  {
    goto LABEL_3;
  }
  MEMORY[0x212BC6368]();
  if (!a19)
  {
LABEL_4:
    v28 = a22;
    if (!a22)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  MEMORY[0x212BC6368]();
  v28 = a22;
  if (!a22)
  {
LABEL_5:
    v29 = a25;
    if (!a25)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_11:
  MEMORY[0x212BC6368](v28, 0x1000C8000313F17);
  v29 = a25;
  if (!a25)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_6:
  MEMORY[0x212BC6368](v29, 0x1000C8000313F17);
  goto LABEL_7;
}

void sub_20F1CC938()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 160))
    JUMPOUT(0x20F1CC874);
  JUMPOUT(0x20F1CC860);
}

uint64_t sub_20F1CC94C(double *a1, unsigned int a2)
{
  double v2;
  double v3;
  double *v4;
  double *v5;
  double *v6;
  double v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  const char *v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  float64x2_t *v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  double v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  const char *v34;
  unsigned __int8 v36;
  const char *v37;
  size_t v38;
  void *v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *p_p;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unsigned __int8 v86;
  const char *v87;
  size_t v88;
  void *v89;
  unint64_t v90;
  const char *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  size_t v101;
  std::__shared_weak_count_vtbl *v102;
  std::__shared_weak_count *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v137;
  int v138;
  const char *v139;
  int v140;
  const char *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  void *object;
  void *v146[2];
  __int128 v147;
  void *__p;
  size_t v149;
  unint64_t v150;
  char v151;
  uint64_t v152;
  _QWORD v153[2];

  if (!a2)
    goto LABEL_11;
  v2 = *a1;
  if (a2 == 1)
  {
    if (fabs(v2 + -1.0) <= 0.1)
    {
      v3 = v2 * v2;
      goto LABEL_24;
    }
LABEL_11:
    sub_20F1CD980(&v144);
    if (**(int **)(v144 + 56) > 2)
      return 0;
    v12 = *(unsigned __int8 *)(v144 + 72);
    v13 = sub_20E8C31DC(v144, "OSLogSurrogateAppender", 1, 0);
    v14 = v13;
    if (!v12 && v13 == 0)
      return 0;
    v135 = &v144;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v137 = std::chrono::system_clock::now().__d_.__rep_;
    v138 = 2;
    v139 = "unknown file";
    v140 = 434;
    v142 = 0;
    v143 = 0;
    v141 = "unknown function";
    v16 = v144;
    v17 = v144 + 16;
    if (*(char *)(v144 + 39) < 0)
    {
      v19 = *(const char **)(v144 + 16);
      v18 = *(_QWORD *)(v144 + 24);
      v36 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v36 & 1) != 0)
        goto LABEL_32;
    }
    else
    {
      v18 = *(unsigned __int8 *)(v144 + 39);
      v19 = (const char *)(*v135 + 16);
      v20 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v20 & 1) != 0)
        goto LABEL_32;
    }
    if (__cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v147 && SHIBYTE(v146[1]) < 0)
        operator delete(object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
LABEL_32:
    if (byte_254A4A4F8[23] >= 0)
      v37 = byte_254A4A4F8;
    else
      v37 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v38 = byte_254A4A4F8[23];
    else
      v38 = *(_QWORD *)&byte_254A4A4F8[8];
    object = os_log_create(v37, v19);
    v39 = v146;
    if (v38 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = v14;
      v41 = v19;
      v42 = v16;
      v43 = v12;
      v44 = v17;
      v45 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v45 = v38 | 7;
      v46 = v45 + 1;
      v39 = operator new(v45 + 1);
      v146[1] = (void *)v38;
      *(_QWORD *)&v147 = v46 | 0x8000000000000000;
      v146[0] = v39;
      v17 = v44;
      v12 = v43;
      v16 = v42;
      v19 = v41;
      v14 = v40;
    }
    else
    {
      BYTE7(v147) = v38;
      if (!v38)
      {
LABEL_46:
        *((_BYTE *)v39 + v38) = 0;
        BYTE8(v147) = 1;
        p_p = &__p;
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v18 >= 0x17)
        {
          v49 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v49 = v18 | 7;
          v50 = v49 + 1;
          p_p = operator new(v49 + 1);
          v149 = v18;
          v150 = v50 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v150) = v18;
          if (!v18)
          {
            LOBYTE(__p) = 0;
            v151 = 1;
            v48 = object;
            if ((SHIBYTE(v150) & 0x80000000) == 0)
              goto LABEL_50;
            goto LABEL_56;
          }
        }
        memmove(p_p, v19, v18);
        *((_BYTE *)p_p + v18) = 0;
        v151 = 1;
        v48 = object;
        if ((SHIBYTE(v150) & 0x80000000) == 0)
        {
LABEL_50:
          if (!BYTE8(v147))
            goto LABEL_59;
          goto LABEL_57;
        }
LABEL_56:
        operator delete(__p);
        if (!BYTE8(v147))
          goto LABEL_59;
LABEL_57:
        if (SBYTE7(v147) < 0)
          operator delete(v146[0]);
LABEL_59:
        if (object)
          os_release(object);
        if (v14 && *(_QWORD *)(v14 + 24))
        {
          v51 = _os_log_pack_size();
          v52 = (std::__shared_weak_count_vtbl *)operator new(v51, (std::align_val_t)8uLL);
          v53 = (std::__shared_weak_count *)operator new();
          v54 = v53;
          v53->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v53->__shared_owners_;
          v53->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v53->__shared_weak_owners_ = 0;
          v53[1].__vftable = v52;
          object = v52;
          v146[0] = v52;
          v146[1] = v53;
          do
            v56 = __ldxr(p_shared_owners);
          while (__stxr(v56 + 1, p_shared_owners));
          v147 = 0uLL;
          __p = 0;
          do
            v57 = __ldaxr(p_shared_owners);
          while (__stlxr(v57 - 1, p_shared_owners));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v54);
          }
          v58 = object;
          *(_WORD *)_os_log_pack_fill() = 0;
          v59 = operator new();
          v60 = *(unsigned __int8 *)(v16 + 39);
          if ((v60 & 0x80u) == 0)
            v61 = v17;
          else
            v61 = *(_QWORD *)(v16 + 16);
          if ((v60 & 0x80u) != 0)
            v60 = *(_QWORD *)(v16 + 24);
          *(_QWORD *)v59 = v58;
          *(_OWORD *)(v59 + 8) = *(_OWORD *)v146;
          v146[0] = 0;
          v146[1] = 0;
          *(_OWORD *)(v59 + 24) = v147;
          v147 = 0uLL;
          *(_QWORD *)(v59 + 40) = v61;
          *(_QWORD *)(v59 + 48) = v60;
          *(_BYTE *)(v59 + 56) = 2;
          v152 = 0;
          v153[0] = v59;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v14 + 24) + 40))(*(_QWORD *)(v14 + 24), v153);
          v62 = v153[0];
          v153[0] = 0;
          if (v62)
          {
            v63 = *(std::__shared_weak_count **)(v62 + 32);
            if (v63)
            {
              v64 = (unint64_t *)&v63->__shared_owners_;
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 - 1, v64));
              if (!v65)
              {
                ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
            }
            v66 = *(std::__shared_weak_count **)(v62 + 16);
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldaxr(v67);
              while (__stlxr(v68 - 1, v67));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            MEMORY[0x212BC6398](v62, 0x10F0C40B62ED6C6);
            v69 = v152;
            v152 = 0;
            if (v69)
            {
              v70 = *(std::__shared_weak_count **)(v69 + 32);
              if (v70)
              {
                v71 = (unint64_t *)&v70->__shared_owners_;
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                  std::__shared_weak_count::__release_weak(v70);
                }
              }
              v73 = *(std::__shared_weak_count **)(v69 + 16);
              if (v73)
              {
                v74 = (unint64_t *)&v73->__shared_owners_;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 - 1, v74));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
              MEMORY[0x212BC6398](v69, 0x10F0C40B62ED6C6);
            }
          }
          v76 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
          if (*((_QWORD *)&v147 + 1))
          {
            v77 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          v79 = (std::__shared_weak_count *)v146[1];
          if (v146[1])
          {
            v80 = (unint64_t *)((char *)v146[1] + 8);
            do
              v81 = __ldaxr(v80);
            while (__stlxr(v81 - 1, v80));
            if (!v81)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
        }
        else
        {
          os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG);
          LOWORD(object) = 0;
          v82 = (void *)_os_log_send_and_compose_impl();
          if (v82)
            free(v82);
        }
        if (v12)
        {
          sub_20E8C003C((uint64_t)&v135, "PredictionBundlerIMUFilter: Sum of filter coefficieents not close to 1.");
          sub_20E863570((uint64_t)&v135);
        }
        sub_20E863570((uint64_t)&v135);
        v83 = v143;
        if (!v143)
          return 0;
        v84 = (unint64_t *)&v143->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (v85)
          return 0;
LABEL_115:
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
        return 0;
      }
    }
    memmove(v39, v37, v38);
    goto LABEL_46;
  }
  v4 = &a1[a2];
  v5 = a1 + 1;
  v6 = a1 + 1;
  v7 = *a1;
  if (((a2 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_218;
  v8 = ((a2 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL) + 1;
  v6 = &v5[v8 & 0x3FFFFFFFFFFFFFFELL];
  v9 = a1 + 2;
  v10 = v8 & 0x3FFFFFFFFFFFFFFELL;
  v7 = *a1;
  do
  {
    v7 = v7 + *(v9 - 1) + *v9;
    v9 += 2;
    v10 -= 2;
  }
  while (v10);
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL))
  {
LABEL_218:
    do
    {
      v11 = *v6++;
      v7 = v7 + v11;
    }
    while (v6 != v4);
  }
  if (fabs(v7 + -1.0) > 0.1)
    goto LABEL_11;
  v3 = v2 * v2;
  v21 = (a2 + 0x1FFFFFFFFFFFFFFELL) & 0x1FFFFFFFFFFFFFFFLL;
  if (v21 < 3)
    goto LABEL_219;
  v22 = v21 + 1;
  v5 += v22 & 0x3FFFFFFFFFFFFFFCLL;
  v23 = (float64x2_t *)(a1 + 3);
  v24 = v22 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v25 = vmulq_f64(v23[-1], v23[-1]);
    v26 = vmulq_f64(*v23, *v23);
    v3 = v3 + v25.f64[0] + v25.f64[1] + v26.f64[0] + v26.f64[1];
    v23 += 2;
    v24 -= 4;
  }
  while (v24);
  if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_219:
    do
    {
      v27 = *v5++;
      v3 = v3 + v27 * v27;
    }
    while (v5 != v4);
  }
LABEL_24:
  if (sqrt(v3) <= 40.0)
    return 1;
  sub_20F1CD980(&v144);
  if (**(int **)(v144 + 56) <= 2)
  {
    v28 = *(unsigned __int8 *)(v144 + 72);
    v29 = sub_20E8C31DC(v144, "OSLogSurrogateAppender", 1, 0);
    v30 = v29;
    if (v28 || v29)
    {
      v135 = &v144;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v137 = std::chrono::system_clock::now().__d_.__rep_;
      v138 = 2;
      v139 = "unknown file";
      v140 = 440;
      v142 = 0;
      v143 = 0;
      v141 = "unknown function";
      v31 = v144;
      v32 = v144 + 16;
      if (*(char *)(v144 + 39) < 0)
      {
        v34 = *(const char **)(v144 + 16);
        v33 = *(_QWORD *)(v144 + 24);
      }
      else
      {
        v33 = *(unsigned __int8 *)(v144 + 39);
        v34 = (const char *)(*v135 + 16);
      }
      v86 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v147 && SHIBYTE(v146[1]) < 0)
          operator delete(object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v87 = byte_254A4A4F8;
      else
        v87 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v88 = byte_254A4A4F8[23];
      else
        v88 = *(_QWORD *)&byte_254A4A4F8[8];
      object = os_log_create(v87, v34);
      v89 = v146;
      if (v88 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v88 >= 0x17)
      {
        v90 = v30;
        v91 = v34;
        v92 = v31;
        v93 = v28;
        v94 = v32;
        v95 = (v88 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v88 | 7) != 0x17)
          v95 = v88 | 7;
        v96 = v95 + 1;
        v89 = operator new(v95 + 1);
        v146[1] = (void *)v88;
        *(_QWORD *)&v147 = v96 | 0x8000000000000000;
        v146[0] = v89;
        v32 = v94;
        v28 = v93;
        v31 = v92;
        v34 = v91;
        v30 = v90;
      }
      else
      {
        BYTE7(v147) = v88;
        if (!v88)
        {
LABEL_132:
          *((_BYTE *)v89 + v88) = 0;
          BYTE8(v147) = 1;
          v97 = &__p;
          if (v33 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v33 >= 0x17)
          {
            v98 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v33 | 7) != 0x17)
              v98 = v33 | 7;
            v99 = v98 + 1;
            v97 = operator new(v98 + 1);
            v149 = v33;
            v150 = v99 | 0x8000000000000000;
            __p = v97;
          }
          else
          {
            HIBYTE(v150) = v33;
            if (!v33)
            {
LABEL_140:
              *((_BYTE *)v97 + v33) = 0;
              v151 = 1;
              v100 = object;
              if (SHIBYTE(v150) < 0)
                operator delete(__p);
              if (BYTE8(v147) && SBYTE7(v147) < 0)
                operator delete(v146[0]);
              if (object)
                os_release(object);
              if (v30 && *(_QWORD *)(v30 + 24))
              {
                v101 = _os_log_pack_size();
                v102 = (std::__shared_weak_count_vtbl *)operator new(v101, (std::align_val_t)8uLL);
                v103 = (std::__shared_weak_count *)operator new();
                v104 = v103;
                v103->__shared_owners_ = 0;
                v105 = (unint64_t *)&v103->__shared_owners_;
                v103->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v103->__shared_weak_owners_ = 0;
                v103[1].__vftable = v102;
                object = v102;
                v146[0] = v102;
                v146[1] = v103;
                do
                  v106 = __ldxr(v105);
                while (__stxr(v106 + 1, v105));
                v147 = 0uLL;
                __p = 0;
                do
                  v107 = __ldaxr(v105);
                while (__stlxr(v107 - 1, v105));
                if (!v107)
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v104);
                }
                v108 = object;
                *(_WORD *)_os_log_pack_fill() = 0;
                v109 = operator new();
                v110 = *(unsigned __int8 *)(v31 + 39);
                if ((v110 & 0x80u) == 0)
                  v111 = v32;
                else
                  v111 = *(_QWORD *)(v31 + 16);
                if ((v110 & 0x80u) != 0)
                  v110 = *(_QWORD *)(v31 + 24);
                *(_QWORD *)v109 = v108;
                *(_OWORD *)(v109 + 8) = *(_OWORD *)v146;
                v146[0] = 0;
                v146[1] = 0;
                *(_OWORD *)(v109 + 24) = v147;
                v147 = 0uLL;
                *(_QWORD *)(v109 + 40) = v111;
                *(_QWORD *)(v109 + 48) = v110;
                *(_BYTE *)(v109 + 56) = 2;
                v152 = 0;
                v153[0] = v109;
                (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v30 + 24) + 40))(*(_QWORD *)(v30 + 24), v153);
                v112 = v153[0];
                v153[0] = 0;
                if (v112)
                {
                  v113 = *(std::__shared_weak_count **)(v112 + 32);
                  if (v113)
                  {
                    v114 = (unint64_t *)&v113->__shared_owners_;
                    do
                      v115 = __ldaxr(v114);
                    while (__stlxr(v115 - 1, v114));
                    if (!v115)
                    {
                      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                      std::__shared_weak_count::__release_weak(v113);
                    }
                  }
                  v116 = *(std::__shared_weak_count **)(v112 + 16);
                  if (v116)
                  {
                    v117 = (unint64_t *)&v116->__shared_owners_;
                    do
                      v118 = __ldaxr(v117);
                    while (__stlxr(v118 - 1, v117));
                    if (!v118)
                    {
                      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                      std::__shared_weak_count::__release_weak(v116);
                    }
                  }
                  MEMORY[0x212BC6398](v112, 0x10F0C40B62ED6C6);
                  v119 = v152;
                  v152 = 0;
                  if (v119)
                  {
                    v120 = *(std::__shared_weak_count **)(v119 + 32);
                    if (v120)
                    {
                      v121 = (unint64_t *)&v120->__shared_owners_;
                      do
                        v122 = __ldaxr(v121);
                      while (__stlxr(v122 - 1, v121));
                      if (!v122)
                      {
                        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                        std::__shared_weak_count::__release_weak(v120);
                      }
                    }
                    v123 = *(std::__shared_weak_count **)(v119 + 16);
                    if (v123)
                    {
                      v124 = (unint64_t *)&v123->__shared_owners_;
                      do
                        v125 = __ldaxr(v124);
                      while (__stlxr(v125 - 1, v124));
                      if (!v125)
                      {
                        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                        std::__shared_weak_count::__release_weak(v123);
                      }
                    }
                    MEMORY[0x212BC6398](v119, 0x10F0C40B62ED6C6);
                  }
                }
                v126 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
                if (*((_QWORD *)&v147 + 1))
                {
                  v127 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
                  do
                    v128 = __ldaxr(v127);
                  while (__stlxr(v128 - 1, v127));
                  if (!v128)
                  {
                    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                    std::__shared_weak_count::__release_weak(v126);
                  }
                }
                v129 = (std::__shared_weak_count *)v146[1];
                if (v146[1])
                {
                  v130 = (unint64_t *)((char *)v146[1] + 8);
                  do
                    v131 = __ldaxr(v130);
                  while (__stlxr(v131 - 1, v130));
                  if (!v131)
                  {
                    ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                    std::__shared_weak_count::__release_weak(v129);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG);
                LOWORD(object) = 0;
                v132 = (void *)_os_log_send_and_compose_impl();
                if (v132)
                  free(v132);
              }
              if (v28)
              {
                sub_20E8C003C((uint64_t)&v135, "PredictionBundlerIMUFilter: Filter taps norm too large check failed");
                sub_20E863570((uint64_t)&v135);
              }
              sub_20E863570((uint64_t)&v135);
              v83 = v143;
              if (!v143)
                return 0;
              v133 = (unint64_t *)&v143->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (v134)
                return 0;
              goto LABEL_115;
            }
          }
          memmove(v97, v34, v33);
          goto LABEL_140;
        }
      }
      memmove(v89, v87, v88);
      goto LABEL_132;
    }
  }
  return 0;
}

void sub_20F1CD7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a27)
  {
    if (a26 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1CD81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;

  sub_20E86E8C4((uint64_t *)(v28 - 96));
  sub_20E86E8C4((uint64_t *)(v28 - 104));
  sub_20E86E658((uint64_t)&object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1CD904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1CD924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1CD938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (object)
    os_release(object);
  sub_20E863714((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1CD980(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68168);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68168))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68160);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68168);
  }
  *a1 = qword_254A68160;
}

void sub_20F1CDA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68168);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68168);
  _Unwind_Resume(a1);
}

void sub_20F1CDA78(_QWORD *a1)
{
  sub_20F1BBCC8(a1);
  JUMPOUT(0x212BC6398);
}

double sub_20F1CDA9C(unint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  double result;
  int v18;
  unsigned int v19;
  void *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  const double *v64;
  unsigned int v65;
  uint64_t v66;
  const double *v67;
  unsigned __int128 v68;
  unsigned __int128 v69;
  unsigned __int128 *v70;
  uint64_t v71;
  uint64_t v72;
  const double *v73;
  unsigned int v74;
  uint64_t v75;
  const double *v76;
  unsigned __int128 v77;
  unsigned __int128 v78;
  unsigned __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  const double *v82;
  unsigned int v83;
  uint64_t v84;
  const double *v85;
  unsigned __int128 v86;
  unsigned __int128 v87;
  unsigned __int128 *v88;
  uint64_t v89;
  uint64_t v90;
  const double *v91;
  unsigned int v92;
  uint64_t v93;
  const double *v94;
  unsigned __int128 v95;
  unsigned __int128 v96;
  unsigned __int128 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const double *v101;
  const double *v102;
  unsigned __int128 v103;
  unsigned __int128 v104;
  unsigned __int128 *v105;
  uint64_t v106;
  uint64_t v107;
  const double *v108;
  const double *v109;
  unsigned __int128 v110;
  unsigned __int128 v111;
  unsigned __int128 *v112;

  if (a1 >= 0x3E8)
    v11 = 1000;
  else
    v11 = a1;
  v12 = v11 - *a3 - 4;
  if (*(_DWORD *)(a6 + 16) == (_DWORD)v12)
  {
    v13 = *(void **)a6;
    v14 = v11 - *a3 - 4;
  }
  else
  {
    *(_DWORD *)(a6 + 16) = v12;
    v13 = *(void **)a6;
    LODWORD(v14) = v12;
    if (*(_QWORD *)(a6 + 8) < (unint64_t)v12)
    {
      if (v13)
      {
        MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
        LODWORD(v14) = *(_DWORD *)(a6 + 16);
      }
      v15 = (8 * v12 + 31) & 0xFFFFFFFE0;
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = v15 >> 3;
      v13 = operator new(v15, (std::align_val_t)0x20uLL);
      *(_QWORD *)a6 = v13;
    }
  }
  if ((_DWORD)v14)
    bzero(v13, 8 * v14);
  if (*(_DWORD *)(a5 + 16) == (_DWORD)v12 && *(_DWORD *)(a5 + 20) == 5)
  {
    v20 = *(void **)a5;
    v18 = 5;
  }
  else
  {
    v18 = 5;
    *(_DWORD *)(a5 + 16) = v12;
    *(_DWORD *)(a5 + 20) = 5;
    v19 = v12;
    v20 = *(void **)a5;
    if (*(_QWORD *)(a5 + 8) < 5 * (unint64_t)v12)
    {
      if (v20)
      {
        MEMORY[0x212BC6368](v20, 0x1000C8000313F17);
        LODWORD(v12) = *(_DWORD *)(a5 + 16);
        v18 = *(_DWORD *)(a5 + 20);
      }
      v21 = (40 * v19 + 31) & 0x7FFFFFFFE0;
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = v21 >> 3;
      v20 = operator new(v21, (std::align_val_t)0x20uLL);
      *(_QWORD *)a5 = v20;
    }
  }
  if ((_DWORD)v12 * v18)
    bzero(v20, 8 * (v12 * v18));
  v22 = *(_QWORD *)(a4 + 8);
  v23 = v22 - 32 * v11;
  v24 = *a3;
  v25 = *a3 + 4;
  v26 = v23 + 32 * v25;
  v27 = 32 * v11;
  if (v26 != v22)
  {
    v28 = *a2;
    v29 = *(_QWORD *)a6;
    v30 = 32 * v24;
    v31 = v27 - 32 * v24 - 160;
    v32 = 8 * v28;
    if (v31 > 0x47F
      && (unint64_t)(v27 - 32 * v24 - 160) <= 0x1FFFFFFFE0
      && (v30 + v32 - v27 + v22 + 136 >= v29 + ((unint64_t)(v27 - 160 - v30) >> 2) + 8
       || v29 >= v32 - 160 + v22 + 144))
    {
      v98 = 0;
      v99 = (v31 >> 5) + 1;
      v100 = v99 & 3;
      if ((v99 & 3) == 0)
        v100 = 4;
      v33 = v99 - v100;
      v26 += 32 * v33;
      v101 = (const double *)(v30 + 8 * v28 - v27 + v22 + 200);
      do
      {
        v102 = v101 - 8;
        v103 = (unsigned __int128)vld4q_f64(v102);
        v104 = (unsigned __int128)vld4q_f64(v101);
        v105 = (unsigned __int128 *)(v29 + 8 * (v98 & 0xFFFFFFFC));
        *v105 = v103;
        v105[1] = v104;
        v98 += 4;
        v101 += 16;
      }
      while (v33 != v98);
    }
    else
    {
      v33 = 0;
    }
    v34 = v32 + 8;
    do
    {
      result = *(double *)(v26 + v34);
      *(double *)(v29 + 8 * v33) = result;
      v26 += 32;
      ++v33;
    }
    while (v26 != v22);
  }
  if (v11 != v25)
  {
    v35 = v11 - v24;
    v36 = *a2;
    v37 = *(unsigned int *)(a5 + 16);
    v38 = *(_QWORD *)a5;
    v39 = v23 + 32 * (v11 - v24);
    v40 = v27 - 32 * v24 - 160;
    v41 = v40 >> 5;
    v42 = (v40 >> 5) + 1;
    v43 = 8 * v36;
    if (v40 > 0x4FF
      && v40 <= 0x1FFFFFFFE0
      && (v43 - v27 + v22 + 8 >= v38 + (v40 >> 2) + 8 || v38 >= v40 + v43 - v27 + v22 + 16))
    {
      v106 = 0;
      v107 = v42 & 3;
      if ((v42 & 3) == 0)
        v107 = 4;
      v44 = v42 - v107;
      v45 = v23 + 32 * v44;
      v108 = (const double *)(v22 - v27 + 8 * v36 + 72);
      do
      {
        v109 = v108 - 8;
        v110 = (unsigned __int128)vld4q_f64(v109);
        v111 = (unsigned __int128)vld4q_f64(v108);
        v112 = (unsigned __int128 *)(v38 + 8 * (v106 & 0xFFFFFFFC));
        *v112 = v110;
        v112[1] = v111;
        v106 += 4;
        v108 += 16;
      }
      while (v44 != v106);
    }
    else
    {
      LODWORD(v44) = 0;
      v45 = v22 - 32 * v11;
    }
    v46 = v39 - 128;
    do
    {
      *(_QWORD *)(v38 + 8 * v44) = *(_QWORD *)(v45 + v43 + 8);
      v45 += 32;
      LODWORD(v44) = v44 + 1;
    }
    while (v45 != v46);
    v47 = v23 + 32;
    if (v40 < 0x340)
      goto LABEL_40;
    LODWORD(v48) = 0;
    if (!__CFADD__((_DWORD)v37, (_DWORD)v41) && v40 <= 0x1FFFFFFFE0)
    {
      if (v43 - v27 + v22 + 40 < 8 * v37 + (v40 >> 2) + v38 + 8 && v38 + 8 * v37 < v40 + v43 - v27 + v22 + 48)
      {
LABEL_40:
        LODWORD(v48) = 0;
        goto LABEL_41;
      }
      v63 = v42 & 3;
      if ((v42 & 3) == 0)
        v63 = 4;
      v48 = v42 - v63;
      v47 += 32 * v48;
      v64 = (const double *)(v22 - v27 + 8 * v36 + 104);
      v65 = v37;
      v66 = v48;
      do
      {
        v67 = v64 - 8;
        v68 = (unsigned __int128)vld4q_f64(v67);
        v69 = (unsigned __int128)vld4q_f64(v64);
        v70 = (unsigned __int128 *)(v38 + 8 * v65);
        *v70 = v68;
        v70[1] = v69;
        v64 += 16;
        v65 += 4;
        v66 -= 4;
      }
      while (v66);
    }
LABEL_41:
    v49 = v48 + v37;
    do
    {
      *(_QWORD *)(v38 + 8 * v49) = *(_QWORD *)(v47 + v43 + 8);
      v47 += 32;
      ++v49;
    }
    while (v47 != v23 + 32 * v35 - 96);
    v50 = v23 + 64;
    v51 = 2 * v37;
    if (v40 < 0x340)
      goto LABEL_44;
    LODWORD(v52) = 0;
    if (!__CFADD__(v51, (_DWORD)v41) && v40 <= 0x1FFFFFFFE0)
    {
      v71 = 8 * (2 * v37);
      if (v43 - v27 + v22 + 72 < v71 + (v40 >> 2) + v38 + 8 && v38 + v71 < v40 + v43 - v27 + v22 + 80)
      {
LABEL_44:
        LODWORD(v52) = 0;
        goto LABEL_45;
      }
      v72 = v42 & 3;
      if ((v42 & 3) == 0)
        v72 = 4;
      v52 = v42 - v72;
      v50 += 32 * v52;
      v73 = (const double *)(v22 - v27 + 8 * v36 + 136);
      v74 = 2 * v37;
      v75 = v52;
      do
      {
        v76 = v73 - 8;
        v77 = (unsigned __int128)vld4q_f64(v76);
        v78 = (unsigned __int128)vld4q_f64(v73);
        v79 = (unsigned __int128 *)(v38 + 8 * v74);
        *v79 = v77;
        v79[1] = v78;
        v73 += 16;
        v74 += 4;
        v75 -= 4;
      }
      while (v75);
    }
LABEL_45:
    v53 = v52 + v51;
    do
    {
      *(_QWORD *)(v38 + 8 * v53) = *(_QWORD *)(v50 + v43 + 8);
      v50 += 32;
      ++v53;
    }
    while (v50 != v23 + 32 * v35 - 64);
    v54 = v23 + 96;
    v55 = 3 * v37;
    if (v40 < 0x340)
      goto LABEL_48;
    LODWORD(v56) = 0;
    if (!__CFADD__(v55, (_DWORD)v41) && v40 <= 0x1FFFFFFFE0)
    {
      v80 = 8 * (3 * v37);
      if (v43 - v27 + v22 + 104 < v80 + (v40 >> 2) + v38 + 8 && v38 + v80 < v40 + v43 - v27 + v22 + 112)
      {
LABEL_48:
        LODWORD(v56) = 0;
        goto LABEL_49;
      }
      v81 = v42 & 3;
      if ((v42 & 3) == 0)
        v81 = 4;
      v56 = v42 - v81;
      v54 += 32 * v56;
      v82 = (const double *)(v22 - v27 + 8 * v36 + 168);
      v83 = 3 * v37;
      v84 = v56;
      do
      {
        v85 = v82 - 8;
        v86 = (unsigned __int128)vld4q_f64(v85);
        v87 = (unsigned __int128)vld4q_f64(v82);
        v88 = (unsigned __int128 *)(v38 + 8 * v83);
        *v88 = v86;
        v88[1] = v87;
        v82 += 16;
        v83 += 4;
        v84 -= 4;
      }
      while (v84);
    }
LABEL_49:
    v57 = v56 + v55;
    do
    {
      *(_QWORD *)(v38 + 8 * v57) = *(_QWORD *)(v54 + v43 + 8);
      v54 += 32;
      ++v57;
    }
    while (v54 != v23 + 32 * v35 - 32);
    v58 = v23 + 128;
    v59 = 4 * v37;
    if (v40 >= 0x340)
    {
      v60 = 0;
      if (__CFADD__(v59, (_DWORD)v41) || v40 > 0x1FFFFFFFE0)
        goto LABEL_53;
      v89 = 8 * v59;
      if (v43 - v27 + v22 + 136 >= v89 + (v40 >> 2) + v38 + 8 || v38 + v89 >= v40 + v43 - v27 + v22 + 144)
      {
        v90 = v42 & 3;
        if ((v42 & 3) == 0)
          v90 = 4;
        v60 = v42 - v90;
        v58 += 32 * (v42 - v90);
        v91 = (const double *)(v22 - v27 + 8 * v36 + 200);
        v92 = v59;
        v93 = v42 - v90;
        do
        {
          v94 = v91 - 8;
          v95 = (unsigned __int128)vld4q_f64(v94);
          v96 = (unsigned __int128)vld4q_f64(v91);
          v97 = (unsigned __int128 *)(v38 + 8 * v92);
          *v97 = v95;
          v97[1] = v96;
          v91 += 16;
          v92 += 4;
          v93 -= 4;
        }
        while (v93);
        goto LABEL_53;
      }
    }
    v60 = 0;
LABEL_53:
    v61 = v23 + 32 * v35;
    v62 = v60 + v59;
    do
    {
      result = *(double *)(v58 + v43 + 8);
      *(double *)(v38 + 8 * v62) = result;
      v58 += 32;
      ++v62;
    }
    while (v58 != v61);
  }
  return result;
}

double sub_20F1CE188(double *a1, double *a2)
{
  double *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;

  v3 = a1;
  if (a1 >= a2
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Statistics.h", 363, (uint64_t)"begin < end", 11, (uint64_t)"Median is undefined for empty ranges", 36, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (char *)a2 - (char *)v3;
  v5 = a2 - v3;
  if (v5 >= 0)
    v6 = a2 - v3;
  else
    v6 = v5 + 1;
  v7 = v6 >> 1;
  v8 = &v3[v6 >> 1];
  if ((v4 & 8) != 0)
  {
    if (v8 != a2)
      sub_20EDE2884(v3, &v3[v6 >> 1], a2);
    return *v8;
  }
  else
  {
    if (v8 != a2)
      sub_20EDE2884(v3, &v3[v6 >> 1], a2);
    if ((v4 & 0xFFFFFFFFFFFFFFF0) != 0x10 && (unint64_t)(v5 + 1) >= 3)
    {
      v9 = v3 + 1;
      v10 = *v3;
      v11 = 8 * v7 - 8;
      v12 = v3 + 1;
      do
      {
        v13 = *v12++;
        v14 = v13;
        if (v10 < v13)
        {
          v10 = v14;
          v3 = v9;
        }
        v9 = v12;
        v11 -= 8;
      }
      while (v11);
    }
    return (*v8 + *v3) * 0.5;
  }
}

_QWORD *sub_20F1CE2C8(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  _QWORD v9[2];
  int v10;
  _QWORD v11[5];

  v2 = result;
  v11[4] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD **)v3 == result)
  {
    result = (_QWORD *)sub_20F1CE2C8(v11, a2);
    *v2 = v11[0];
  }
  else
  {
    v4 = *(_QWORD **)(a2 + 8);
    v5 = v4[1];
    v6 = *(unsigned int *)(*(_QWORD *)v5 + 16);
    if ((_DWORD)v6 && *(_DWORD *)(v3 + 16))
    {
      v7 = (8 * v6 + 31) & 0xFFFFFFFE0;
      v9[1] = v7 >> 3;
      v9[0] = operator new(v7, (std::align_val_t)0x20uLL);
      v10 = v6;
      v11[1] = *v4;
      v11[2] = v5;
      v11[3] = 0x3FF0000000000000;
      sub_20F1CE454((uint64_t)v9, (uint64_t)v11);
      v8 = v9[0];
      result = (_QWORD *)sub_20E8BE6CC();
      if (v8)
        return (_QWORD *)MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
    }
    else
    {
      *result = 0;
    }
  }
  return result;
}

void sub_20F1CE410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  if (v11)
  {
    MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F1CE454(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  size_t *v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  double v12;
  const double *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  int v19[2];
  size_t v20;
  int v21;
  void *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v4 = *(double **)a1;
  v5 = **(_QWORD **)(a2 + 16);
  if (*(double **)v5 == v4)
  {
    v16 = *(unsigned int *)(v5 + 16);
    v17 = (8 * v16 + 31) & 0xFFFFFFFE0;
    v23 = v17 >> 3;
    v22 = operator new(v17, (std::align_val_t)0x20uLL);
    LODWORD(v24) = v16;
    sub_20F1CE454(&v22, a2);
    v14 = *(void **)a1;
    v18 = v23;
    *(_QWORD *)a1 = v22;
    *(_QWORD *)(a1 + 8) = v18;
    *(_DWORD *)(a1 + 16) = v24;
    if (!v14)
      return;
    goto LABEL_9;
  }
  v6 = *(size_t **)(a2 + 8);
  v7 = v6[1];
  v8 = *(unsigned int *)(v7 + 20);
  if ((_DWORD)v8 && *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20))
  {
    v9 = (8 * v8 + 31) & 0xFFFFFFFE0;
    v20 = v9 >> 3;
    *(_QWORD *)v19 = operator new(v9, (std::align_val_t)0x20uLL);
    v21 = v8;
    v23 = *v6;
    v24 = v7;
    v25 = 0x3FF0000000000000;
    sub_20F1CE66C((uint64_t)v19, (uint64_t)&v22);
    v10 = **(_QWORD **)(a2 + 16);
    v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) + 20);
    v12 = *(double *)(a2 + 24);
    v13 = *(const double **)v19;
    sub_20E8BE654(0, 1, 1, *(_DWORD *)(v10 + 16), v11, *(const double **)v19, 1, *(double **)v10, v12, 0.0, *(_DWORD *)(v10 + 16), *(double **)a1, 1);
    if (!v13)
      return;
    v14 = (void *)v13;
LABEL_9:
    MEMORY[0x212BC6368](v14, 0x1000C8000313F17);
    return;
  }
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
    bzero(v4, 8 * v15);
}

void sub_20F1CE624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  if (v16)
    MEMORY[0x212BC6368](v16, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F1CE66C(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  uint64_t v6;
  const double *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  size_t v12;
  double *v13;
  size_t v14;
  uint64_t v15;
  void *v16;
  size_t v17;
  int v18;

  v4 = *(double **)a1;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = **(_QWORD **)(a2 + 8);
  v7 = *(const double **)v6;
  if (*(double **)v6 == v4 || *(double **)v5 == v4)
  {
    v11 = *(unsigned int *)(v5 + 20);
    v12 = (8 * v11 + 31) & 0xFFFFFFFE0;
    v17 = v12 >> 3;
    v16 = operator new(v12, (std::align_val_t)0x20uLL);
    v18 = v11;
    sub_20F1CE66C(&v16, a2);
    v13 = *(double **)a1;
    v14 = v17;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 16) = v18;
    if (v13)
      MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 16);
    if (v8 && (v10 = *(_DWORD *)(v5 + 16), v9 = *(_DWORD *)(v5 + 20), v9 * v10))
    {
      sub_20E8BE654(1, 0, 1, v9, v8, v7, v8, *(double **)v5, *(double *)(a2 + 24), 0.0, v10, v4, 1);
    }
    else
    {
      v15 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v15)
        bzero(v4, 8 * v15);
    }
  }
}

void sub_20F1CE794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

void sub_20F1CE7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t *v7;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;
  unint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  double *v24;
  double *v25;
  float64x2_t *v26;
  float64x2_t *v27;
  float64x2_t *v28;
  uint64_t v29;
  float64x2_t v30;
  void *v31;
  size_t v32;
  int v33;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)v4 == *(_QWORD *)a1)
  {
    v18 = *(unsigned int *)(v4 + 16);
    v19 = (8 * v18 + 31) & 0xFFFFFFFE0;
    v32 = v19 >> 3;
    v31 = operator new(v19, (std::align_val_t)0x20uLL);
    v33 = v18;
    sub_20F1CE7BC(&v31, a2);
    v20 = *(void **)a1;
    v21 = v32;
    *(_QWORD *)a1 = v31;
    *(_QWORD *)(a1 + 8) = v21;
    *(_DWORD *)(a1 + 16) = v33;
    if (v20)
      MEMORY[0x212BC6368](v20, 0x1000C8000313F17);
  }
  else
  {
    if (*(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 16))
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v6)
      {
        v7 = (float64x2_t *)operator new((8 * v6 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v8 = *(_QWORD *)(v5 + 32);
        v9 = **(double ***)v8;
        v10 = *(double **)(v5 + 8);
        v11 = *(double *)(v8 + 8);
        v12 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v12 < 5 || (unint64_t)((char *)v7 - (char *)v10) < 0x20)
        {
          v13 = (double *)v7;
        }
        else
        {
          v13 = (double *)v7;
          if ((unint64_t)((char *)v7 - (char *)v9) >= 0x20)
          {
            v22 = v12 + 1;
            v23 = v22 & 0x3FFFFFFFFFFFFFFCLL;
            v13 = &v7->f64[v23];
            v24 = &v9[v23];
            v25 = &v10[v23];
            v26 = (float64x2_t *)(v10 + 2);
            v27 = (float64x2_t *)(v9 + 2);
            v28 = v7 + 1;
            v29 = v22 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v30 = vsubq_f64(*v26, vmulq_n_f64(*v27, v11));
              v28[-1] = vsubq_f64(v26[-1], vmulq_n_f64(v27[-1], v11));
              *v28 = v30;
              v26 += 2;
              v27 += 2;
              v28 += 2;
              v29 -= 4;
            }
            while (v29);
            v9 = v24;
            v10 = v25;
            if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_7:
              sub_20E8BE6CC();
              JUMPOUT(0x212BC6368);
            }
          }
        }
        do
        {
          v14 = *v10++;
          v15 = v14;
          v16 = *v9++;
          *v13++ = v15 - v16 * v11;
        }
        while (v13 != &v7->f64[v6]);
        goto LABEL_7;
      }
    }
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
      bzero(*(void **)a1, 8 * v17);
  }
}

void sub_20F1CEA10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1CEA44(uint64_t a1, const void *a2, char a3)
{
  _OWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  void *v19;
  size_t v20;
  void *v21;
  size_t v22;
  void *v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;

  v5 = (_OWORD *)sub_20F1BB56C(a1, a3);
  *(_QWORD *)v5 = &off_24C9FA868;
  v5 = (_OWORD *)((char *)v5 + 776);
  *(_BYTE *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 784) = xmmword_2102DBC40;
  *(_OWORD *)(a1 + 800) = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 816) = 1000;
  *(_BYTE *)(a1 + 824) = 1;
  *(_QWORD *)(a1 + 832) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 840) = 1;
  *(_QWORD *)(a1 + 848) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 864) = xmmword_2102DBC60;
  *(_OWORD *)(a1 + 880) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 896) = xmmword_2102DBC70;
  *(_OWORD *)(a1 + 912) = xmmword_2102DBC70;
  *(_QWORD *)(a1 + 928) = 1000;
  *(_QWORD *)(a1 + 936) = 0x3EE4F8B588E368F1;
  *(_QWORD *)(a1 + 944) = 0x4044000000000000;
  v5[11] = xmmword_2102DBC50;
  *(_QWORD *)(a1 + 968) = 1000;
  *(_BYTE *)(a1 + 976) = 1;
  *(_QWORD *)(a1 + 984) = 0x3FB999999999999ALL;
  *(_WORD *)(a1 + 992) = 1;
  *(_QWORD *)(a1 + 1000) = 0x3FEFFF2E48E8A71ELL;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1016) = 1;
  *(_OWORD *)(a1 + 1024) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 1040) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 1056) = xmmword_2102DBC80;
  *(_OWORD *)(a1 + 1072) = xmmword_2102DBC80;
  *(_QWORD *)(a1 + 1088) = 0x3FEFAE147AE147AELL;
  v6 = (uint64_t *)(a1 + 1096);
  v7 = (uint64_t *)(a1 + 1120);
  *(_DWORD *)(a1 + 1256) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_DWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_DWORD *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_QWORD *)(a1 + 1336) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1344) = 0xBFF0000000000000;
  memcpy(v5, a2, 0x140uLL);
  v8 = *(_QWORD *)(a1 + 800);
  if (v8)
  {
    if (v8 >> 59)
      goto LABEL_34;
    v9 = (char *)operator new(32 * v8);
    *(_QWORD *)(a1 + 1144) = v9;
    *(_QWORD *)(a1 + 1152) = v9;
    *(_QWORD *)(a1 + 1160) = &v9[32 * v8];
  }
  v10 = *(_QWORD *)(a1 + 808);
  v11 = v10 + 1;
  if (v10 == -1)
    goto LABEL_7;
  if (v11 >> 59)
LABEL_34:
    sub_20E867F44();
  v12 = (char *)operator new(32 * v11);
  *(_QWORD *)(a1 + 1168) = v12;
  *(_QWORD *)(a1 + 1176) = v12;
  *(_QWORD *)(a1 + 1184) = &v12[32 * v11];
LABEL_7:
  v13 = *(_QWORD *)(a1 + 952);
  if (v13)
  {
    if (v13 >> 59)
      goto LABEL_35;
    v14 = (char *)operator new(32 * v13);
    *(_QWORD *)(a1 + 1192) = v14;
    *(_QWORD *)(a1 + 1200) = v14;
    *(_QWORD *)(a1 + 1208) = &v14[32 * v13];
  }
  v15 = *(_QWORD *)(a1 + 960);
  v16 = v15 + 1;
  if (v15 == -1)
    goto LABEL_13;
  if (v16 >> 59)
LABEL_35:
    sub_20E867F44();
  v17 = (char *)operator new(32 * v16);
  *(_QWORD *)(a1 + 1216) = v17;
  *(_QWORD *)(a1 + 1224) = v17;
  *(_QWORD *)(a1 + 1232) = &v17[32 * v16];
LABEL_13:
  if ((_DWORD)v8)
  {
    *(_DWORD *)(a1 + 1256) = v8;
    *(_QWORD *)(a1 + 1240) = 0;
    v18 = (8 * v8 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(a1 + 1248) = v18 >> 3;
    v19 = operator new(v18, (std::align_val_t)0x20uLL);
    *(_QWORD *)(a1 + 1240) = v19;
    bzero(v19, 8 * v8);
  }
  if ((_DWORD)v10)
  {
    *(_DWORD *)(a1 + 1280) = v10;
    *(_QWORD *)(a1 + 1264) = 0;
    v20 = (8 * v10 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(a1 + 1272) = v20 >> 3;
    v21 = operator new(v20, (std::align_val_t)0x20uLL);
    *(_QWORD *)(a1 + 1264) = v21;
    bzero(v21, 8 * v10);
  }
  if ((_DWORD)v13)
  {
    *(_DWORD *)(a1 + 1304) = v13;
    *(_QWORD *)(a1 + 1288) = 0;
    v22 = (8 * v13 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(a1 + 1296) = v22 >> 3;
    v23 = operator new(v22, (std::align_val_t)0x20uLL);
    *(_QWORD *)(a1 + 1288) = v23;
    bzero(v23, 8 * v13);
  }
  if ((_DWORD)v15)
  {
    *(_DWORD *)(a1 + 1328) = v15;
    *(_QWORD *)(a1 + 1312) = 0;
    v24 = (8 * v15 + 31) & 0xFFFFFFFE0;
    *(_QWORD *)(a1 + 1320) = v24 >> 3;
    v25 = operator new(v24, (std::align_val_t)0x20uLL);
    *(_QWORD *)(a1 + 1312) = v25;
    bzero(v25, 8 * v15);
  }
  *(_BYTE *)(a1 + 840) = 1;
  *(_BYTE *)(a1 + 992) = 1;
  v26 = operator new();
  sub_20F18E044(v26, a1 + 784);
  v27 = (_QWORD *)*v6;
  *v6 = v26;
  if (v27)
  {
    v28 = sub_20F1D0908(v27);
    MEMORY[0x212BC6398](v28, 0x1080C400823FE03);
  }
  v29 = operator new();
  sub_20F18E044(v29, a1 + 936);
  v30 = (_QWORD *)*v7;
  *v7 = v29;
  if (v30)
  {
    v31 = sub_20F1D0908(v30);
    MEMORY[0x212BC6398](v31, 0x1080C400823FE03);
  }
  v32 = operator new();
  sub_20F18E044(v32, a1 + 784);
  v33 = *(_QWORD **)(a1 + 1104);
  *(_QWORD *)(a1 + 1104) = v32;
  if (v33)
  {
    v34 = sub_20F1D0908(v33);
    MEMORY[0x212BC6398](v34, 0x1080C400823FE03);
  }
  v35 = operator new();
  sub_20F18E044(v35, a1 + 936);
  v36 = *(_QWORD **)(a1 + 1128);
  *(_QWORD *)(a1 + 1128) = v35;
  if (v36)
  {
    v37 = sub_20F1D0908(v36);
    MEMORY[0x212BC6398](v37, 0x1080C400823FE03);
  }
  v38 = operator new();
  sub_20F18E044(v38, a1 + 784);
  v39 = *(_QWORD **)(a1 + 1112);
  *(_QWORD *)(a1 + 1112) = v38;
  if (v39)
  {
    v40 = sub_20F1D0908(v39);
    MEMORY[0x212BC6398](v40, 0x1080C400823FE03);
  }
  v41 = operator new();
  sub_20F18E044(v41, a1 + 936);
  v42 = *(_QWORD **)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = v41;
  if (v42)
  {
    v43 = sub_20F1D0908(v42);
    MEMORY[0x212BC6398](v43, 0x1080C400823FE03);
  }
  return a1;
}

void sub_20F1CEFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t *a11, void **a12, void **a13, void **a14)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  void **v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (*a10)
  {
    MEMORY[0x212BC6368](*a10, 0x1000C8000313F17);
    v20 = *v17;
    if (!*v17)
    {
LABEL_3:
      v21 = *a11;
      if (!*a11)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v20 = *v17;
    if (!*v17)
      goto LABEL_3;
  }
  MEMORY[0x212BC6368](v20, 0x1000C8000313F17);
  v21 = *a11;
  if (!*a11)
  {
LABEL_4:
    v22 = v14[155];
    if (!v22)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  MEMORY[0x212BC6368](v21, 0x1000C8000313F17);
  v22 = v14[155];
  if (!v22)
  {
LABEL_5:
    v23 = *a12;
    if (!*a12)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  MEMORY[0x212BC6368](v22, 0x1000C8000313F17);
  v23 = *a12;
  if (!*a12)
  {
LABEL_6:
    v24 = *v18;
    if (!*v18)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v14[153] = v23;
  operator delete(v23);
  v24 = *v18;
  if (!*v18)
  {
LABEL_7:
    v25 = *a13;
    if (!*a13)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v14[150] = v24;
  operator delete(v24);
  v25 = *a13;
  if (!*a13)
  {
LABEL_8:
    v26 = *a14;
    if (!*a14)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  v14[147] = v25;
  operator delete(v25);
  v26 = *a14;
  if (!*a14)
  {
LABEL_10:
    sub_20F1CF110(v16);
    sub_20F1CF110(v15);
    sub_20F1BBCC8(v14);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v14[144] = v26;
  operator delete(v26);
  goto LABEL_10;
}

uint64_t sub_20F1CF110(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = sub_20F1D0908(v2);
    MEMORY[0x212BC6398](v3, 0x1080C400823FE03);
  }
  v4 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = sub_20F1D0908(v4);
    MEMORY[0x212BC6398](v5, 0x1080C400823FE03);
  }
  v6 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    v7 = sub_20F1D0908(v6);
    MEMORY[0x212BC6398](v7, 0x1080C400823FE03);
  }
  return a1;
}

void sub_20F1CF19C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;

  v14 = a4;
  v6 = *(_QWORD *)(a1 + 240);
  if (v6 < *(_QWORD *)(a1 + 800))
    goto LABEL_21;
  v7 = *(_QWORD *)(a1 + 288);
  v8 = v6 >= 2 && v7 >= 2;
  if (!v8 || v7 < *(_QWORD *)(a1 + 952))
    goto LABEL_21;
  v10 = *(_QWORD *)(a1 + 232);
  if (v10)
  {
    v11 = *(double *)(*(_QWORD *)(a2 + 8) - 32);
    if (*(double *)(*(_QWORD *)(a1 + 200) + 32 * v10 - 32) != v11)
      goto LABEL_21;
  }
  else
  {
    v11 = *(double *)(*(_QWORD *)(a2 + 8) - 32);
    if (*(double *)(*(_QWORD *)(a1 + 200) + 32 * ((uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 5) - 32) != v11)
      goto LABEL_21;
  }
  v12 = *(_QWORD *)(a1 + 280);
  if (!v12)
  {
    v13 = *(double *)(*(_QWORD *)(a3 + 8) - 32);
    if (*(double *)(*(_QWORD *)(a1 + 248) + 32 * ((uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 5) - 32) == v13)
      goto LABEL_16;
LABEL_21:
    sub_20F1C54AC(a4, a1, (double **)a2, (void **)a3);
    return;
  }
  v13 = *(double *)(*(_QWORD *)(a3 + 8) - 32);
  if (*(double *)(*(_QWORD *)(a1 + 248) + 32 * v12 - 32) != v13)
    goto LABEL_21;
LABEL_16:
  if (v11 < a4)
  {
    sub_20F1B0224(&v14, (char **)a2, (_QWORD *)(a1 + 784), (uint64_t *)(a1 + 200), (double *)(a1 + 1336), a1 + 1144, (uint64_t *)(a1 + 1168), (uint64_t *)(a1 + 1240), (_QWORD *)(a1 + 1264), a1 + 1096);
    v13 = *(double *)(*(_QWORD *)(a3 + 8) - 32);
    a4 = v14;
  }
  if (v13 < a4)
    sub_20F1B14AC(&v14, (char **)a3, (_QWORD *)(a1 + 936), (uint64_t *)(a1 + 248), (double *)(a1 + 1344), a1 + 1192, (uint64_t *)(a1 + 1216), (uint64_t *)(a1 + 1288), (_QWORD *)(a1 + 1312), a1 + 1120);
}

void sub_20F1CF354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a31)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F1CF37C(uint64_t a1, double *a2, float64x2_t a3, double a4, float64x2_t a5, float64x2_t a6, double a7, double a8, float64x2_t a9)
{
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  const char *v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  double v50;
  float64x2_t v51;
  unsigned __int8 v52;
  const char *v53;
  size_t v54;
  _BYTE *v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  size_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  double v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD v105[3];
  int v106;
  const char *v107;
  int v108;
  const char *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112[5];
  uint64_t v113;
  uint64_t v114[5];
  _BYTE object[24];
  __int128 v116;
  void *__p[2];
  unint64_t v118;
  char v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 240))
  {
    v23 = *(_QWORD *)(a1 + 200) + 32 * *(_QWORD *)(a1 + 232);
    v24 = *((_QWORD *)a2 + 3);
    v25 = *(_OWORD *)(a2 + 1);
    *(double *)v23 = *a2;
    *(_OWORD *)(v23 + 8) = v25;
    *(_QWORD *)(v23 + 24) = v24;
    v26 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 5;
    v27 = *(_QWORD *)(a1 + 240);
    v28 = *(_QWORD *)(a1 + 232) + 1;
    if (v28 >= v26)
      v29 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 5;
    else
      v29 = 0;
    *(_QWORD *)(a1 + 232) = v28 - v29;
    if (v27 == v26)
    {
      v30 = *(_QWORD *)(a1 + 224) + 1;
      if (v30 < v26)
        v26 = 0;
      *(_QWORD *)(a1 + 224) = v30 - v26;
    }
    else
    {
      *(_QWORD *)(a1 + 240) = v27 + 1;
    }
    goto LABEL_29;
  }
  v11 = *a2;
  v12 = *(_QWORD *)(a1 + 232);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 200);
    v14 = v11 - *(double *)(v13 + 32 * v12 - 32);
    if (v14 > 0.0)
    {
LABEL_4:
      v15 = v13 + 32 * v12;
      v16 = *((_QWORD *)a2 + 3);
      v17 = *(_OWORD *)(a2 + 1);
      *(double *)v15 = v11;
      *(_OWORD *)(v15 + 8) = v17;
      *(_QWORD *)(v15 + 24) = v16;
      v18 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 5;
      v19 = *(_QWORD *)(a1 + 240);
      v20 = *(_QWORD *)(a1 + 232) + 1;
      if (v20 >= v18)
        v21 = (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 5;
      else
        v21 = 0;
      *(_QWORD *)(a1 + 232) = v20 - v21;
      if (v19 == v18)
      {
        v22 = *(_QWORD *)(a1 + 224) + 1;
        if (v22 < v18)
          v18 = 0;
        *(_QWORD *)(a1 + 224) = v22 - v18;
      }
      else
      {
        *(_QWORD *)(a1 + 240) = v19 + 1;
      }
      sub_20F1B7348((double *)(a1 + 1336), v14, *(double *)(a1 + 1088));
LABEL_29:
      a3.f64[0] = a2[1];
      sub_20F18EB24(*(_QWORD *)(a1 + 1096), a3, *(double *)&v25, a5, a6, a7, a8, a9);
      v38.f64[0] = a2[2];
      sub_20F18EB24(*(_QWORD *)(a1 + 1104), v38, v39, v40, v41, v42, v43, v44);
      v45.f64[0] = a2[3];
      sub_20F18EB24(*(_QWORD *)(a1 + 1112), v45, v46, v47, v48, v49, v50, v51);
      return;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 200);
    v14 = v11 - *(double *)(v13 + 32 * ((*(_QWORD *)(a1 + 208) - v13) >> 5) - 32);
    if (v14 > 0.0)
      goto LABEL_4;
  }
  sub_20F1CFD78(v112);
  if (**(int **)(v112[0] + 56) <= 5)
  {
    v31 = *(unsigned __int8 *)(v112[0] + 72);
    v32 = sub_20E8C31DC(v112[0], "OSLogSurrogateAppender", 1, 0);
    if (v31 || v32 != 0)
    {
      v34 = v32;
      v105[0] = v112;
      v105[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v105[2] = std::chrono::system_clock::now().__d_.__rep_;
      v106 = 5;
      v107 = "unknown file";
      v108 = 117;
      v110 = 0;
      v111 = 0;
      v109 = "unknown function";
      v35 = v112[0];
      if (*(char *)(v112[0] + 39) < 0)
      {
        v37 = *(const char **)(v112[0] + 16);
        v36 = *(_QWORD *)(v112[0] + 24);
      }
      else
      {
        v36 = *(unsigned __int8 *)(v112[0] + 39);
        v37 = (const char *)(*(_QWORD *)v105[0] + 16);
      }
      v104 = *(_QWORD *)v105[0] + 16;
      v52 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v116 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v53 = byte_254A4A4F8;
      else
        v53 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v54 = byte_254A4A4F8[23];
      else
        v54 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v53, v37);
      v55 = &object[8];
      if (v54 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v54 >= 0x17)
      {
        v56 = v34;
        v57 = v37;
        v58 = v35;
        v59 = v31;
        v60 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v60 = v54 | 7;
        v61 = v60 + 1;
        v55 = operator new(v60 + 1);
        *(_QWORD *)&object[16] = v54;
        *(_QWORD *)&v116 = v61 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v55;
        v31 = v59;
        v35 = v58;
        v37 = v57;
        v34 = v56;
      }
      else
      {
        BYTE7(v116) = v54;
        if (!v54)
        {
LABEL_46:
          v55[v54] = 0;
          BYTE8(v116) = 1;
          v62 = __p;
          if (v36 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v36 >= 0x17)
          {
            v63 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v63 = v36 | 7;
            v64 = v63 + 1;
            v62 = operator new(v63 + 1);
            __p[1] = (void *)v36;
            v118 = v64 | 0x8000000000000000;
            __p[0] = v62;
          }
          else
          {
            HIBYTE(v118) = v36;
            if (!v36)
              goto LABEL_54;
          }
          memmove(v62, v37, v36);
LABEL_54:
          *((_BYTE *)v62 + v36) = 0;
          v119 = 1;
          v65 = *(NSObject **)object;
          if (SHIBYTE(v118) < 0)
            operator delete(__p[0]);
          if (BYTE8(v116) && SBYTE7(v116) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v34 && *(_QWORD *)(v34 + 24))
          {
            v66 = _os_log_pack_size();
            v67 = (std::__shared_weak_count_vtbl *)operator new(v66, (std::align_val_t)8uLL);
            v68 = (std::__shared_weak_count *)operator new();
            v69 = v68;
            v68->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v68->__shared_owners_;
            v68->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v68->__shared_weak_owners_ = 0;
            v68[1].__vftable = v67;
            *(_QWORD *)object = v67;
            *(_QWORD *)&object[8] = v67;
            *(_QWORD *)&object[16] = v68;
            do
              v71 = __ldxr(p_shared_owners);
            while (__stxr(v71 + 1, p_shared_owners));
            v116 = 0uLL;
            __p[0] = 0;
            do
              v72 = __ldaxr(p_shared_owners);
            while (__stlxr(v72 - 1, p_shared_owners));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v69);
            }
            v73 = *(_QWORD *)object;
            v74 = _os_log_pack_fill();
            v75 = *a2;
            *(_DWORD *)v74 = 134218240;
            *(double *)(v74 + 4) = v14;
            *(_WORD *)(v74 + 12) = 2048;
            *(double *)(v74 + 14) = v75;
            v76 = operator new();
            v77 = *(unsigned __int8 *)(v35 + 39);
            v78 = v104;
            if ((v77 & 0x80u) != 0)
            {
              v78 = *(_QWORD *)(v35 + 16);
              v77 = *(_QWORD *)(v35 + 24);
            }
            *(_QWORD *)v76 = v73;
            *(_OWORD *)(v76 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v76 + 24) = v116;
            v116 = 0uLL;
            *(_QWORD *)(v76 + 40) = v78;
            *(_QWORD *)(v76 + 48) = v77;
            *(_BYTE *)(v76 + 56) = 16;
            v113 = 0;
            v114[0] = v76;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), v114);
            v79 = v114[0];
            v114[0] = 0;
            if (v79)
            {
              v80 = *(std::__shared_weak_count **)(v79 + 32);
              if (v80)
              {
                v81 = (unint64_t *)&v80->__shared_owners_;
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              v83 = *(std::__shared_weak_count **)(v79 + 16);
              if (v83)
              {
                v84 = (unint64_t *)&v83->__shared_owners_;
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 - 1, v84));
                if (!v85)
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
              MEMORY[0x212BC6398](v79, 0x10F0C40B62ED6C6);
              v86 = v113;
              v113 = 0;
              if (v86)
              {
                v87 = *(std::__shared_weak_count **)(v86 + 32);
                if (v87)
                {
                  v88 = (unint64_t *)&v87->__shared_owners_;
                  do
                    v89 = __ldaxr(v88);
                  while (__stlxr(v89 - 1, v88));
                  if (!v89)
                  {
                    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                    std::__shared_weak_count::__release_weak(v87);
                  }
                }
                v90 = *(std::__shared_weak_count **)(v86 + 16);
                if (v90)
                {
                  v91 = (unint64_t *)&v90->__shared_owners_;
                  do
                    v92 = __ldaxr(v91);
                  while (__stlxr(v92 - 1, v91));
                  if (!v92)
                  {
                    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                    std::__shared_weak_count::__release_weak(v90);
                  }
                }
                MEMORY[0x212BC6398](v86, 0x10F0C40B62ED6C6);
              }
            }
            v93 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
            if (*((_QWORD *)&v116 + 1))
            {
              v94 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            v96 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v97 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
          }
          else
          {
            os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
            v99 = *a2;
            *(_DWORD *)object = 134218240;
            *(double *)&object[4] = v14;
            *(_WORD *)&object[12] = 2048;
            *(double *)&object[14] = v99;
            v100 = (void *)_os_log_send_and_compose_impl();
            if (v100)
              free(v100);
          }
          if (v31)
          {
            sub_20E8C003C((uint64_t)v105, "Gyro sample_time_diff = %lf is less than 0, indicating Gyro samples are out of order at gyro timestamp = %lf. Gyro sample not added to prediction bundler", v14, *a2);
            sub_20E863570((uint64_t)v105);
          }
          sub_20E863570((uint64_t)v105);
          v101 = v111;
          if (v111)
          {
            v102 = (unint64_t *)&v111->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          return;
        }
      }
      memmove(v55, v53, v54);
      goto LABEL_46;
    }
  }
}

void sub_20F1CFC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F1CFC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E86E8C4(&a28);
  sub_20E86E8C4(&a27);
  sub_20E86E658((uint64_t)&a33);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F1CFCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v5, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1CFCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1CFD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20F1CFD78(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68178);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68178))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68170);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68178);
  }
  *a1 = qword_254A68170;
}

void sub_20F1CFE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68178);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68178);
  _Unwind_Resume(a1);
}

void sub_20F1CFE6C(uint64_t a1, double *a2, float64x2_t a3, double a4, float64x2_t a5, float64x2_t a6, double a7, double a8, float64x2_t a9)
{
  double v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  const char *v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  double v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  float64x2_t v47;
  float64x2_t v48;
  double v49;
  double v50;
  float64x2_t v51;
  unsigned __int8 v52;
  const char *v53;
  size_t v54;
  _BYTE *v55;
  unint64_t v56;
  const char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  size_t v66;
  std::__shared_weak_count_vtbl *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  double v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD v105[3];
  int v106;
  const char *v107;
  int v108;
  const char *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112[5];
  uint64_t v113;
  uint64_t v114[5];
  _BYTE object[24];
  __int128 v116;
  void *__p[2];
  unint64_t v118;
  char v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 288))
  {
    v23 = *(_QWORD *)(a1 + 248) + 32 * *(_QWORD *)(a1 + 280);
    v24 = *((_QWORD *)a2 + 3);
    v25 = *(_OWORD *)(a2 + 1);
    *(double *)v23 = *a2;
    *(_OWORD *)(v23 + 8) = v25;
    *(_QWORD *)(v23 + 24) = v24;
    v26 = (uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 5;
    v27 = *(_QWORD *)(a1 + 288);
    v28 = *(_QWORD *)(a1 + 280) + 1;
    if (v28 >= v26)
      v29 = (uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 5;
    else
      v29 = 0;
    *(_QWORD *)(a1 + 280) = v28 - v29;
    if (v27 == v26)
    {
      v30 = *(_QWORD *)(a1 + 272) + 1;
      if (v30 < v26)
        v26 = 0;
      *(_QWORD *)(a1 + 272) = v30 - v26;
    }
    else
    {
      *(_QWORD *)(a1 + 288) = v27 + 1;
    }
    goto LABEL_29;
  }
  v11 = *a2;
  v12 = *(_QWORD *)(a1 + 280);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 248);
    v14 = v11 - *(double *)(v13 + 32 * v12 - 32);
    if (v14 > 0.0)
    {
LABEL_4:
      v15 = v13 + 32 * v12;
      v16 = *((_QWORD *)a2 + 3);
      v17 = *(_OWORD *)(a2 + 1);
      *(double *)v15 = v11;
      *(_OWORD *)(v15 + 8) = v17;
      *(_QWORD *)(v15 + 24) = v16;
      v18 = (uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 5;
      v19 = *(_QWORD *)(a1 + 288);
      v20 = *(_QWORD *)(a1 + 280) + 1;
      if (v20 >= v18)
        v21 = (uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 5;
      else
        v21 = 0;
      *(_QWORD *)(a1 + 280) = v20 - v21;
      if (v19 == v18)
      {
        v22 = *(_QWORD *)(a1 + 272) + 1;
        if (v22 < v18)
          v18 = 0;
        *(_QWORD *)(a1 + 272) = v22 - v18;
      }
      else
      {
        *(_QWORD *)(a1 + 288) = v19 + 1;
      }
      sub_20F1B7348((double *)(a1 + 1344), v14, *(double *)(a1 + 1088));
LABEL_29:
      a3.f64[0] = a2[1];
      sub_20F18EB24(*(_QWORD *)(a1 + 1120), a3, *(double *)&v25, a5, a6, a7, a8, a9);
      v38.f64[0] = a2[2];
      sub_20F18EB24(*(_QWORD *)(a1 + 1128), v38, v39, v40, v41, v42, v43, v44);
      v45.f64[0] = a2[3];
      sub_20F18EB24(*(_QWORD *)(a1 + 1136), v45, v46, v47, v48, v49, v50, v51);
      return;
    }
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 248);
    v14 = v11 - *(double *)(v13 + 32 * ((*(_QWORD *)(a1 + 256) - v13) >> 5) - 32);
    if (v14 > 0.0)
      goto LABEL_4;
  }
  sub_20F1CFD78(v112);
  if (**(int **)(v112[0] + 56) <= 5)
  {
    v31 = *(unsigned __int8 *)(v112[0] + 72);
    v32 = sub_20E8C31DC(v112[0], "OSLogSurrogateAppender", 1, 0);
    if (v31 || v32 != 0)
    {
      v34 = v32;
      v105[0] = v112;
      v105[1] = std::chrono::steady_clock::now().__d_.__rep_;
      v105[2] = std::chrono::system_clock::now().__d_.__rep_;
      v106 = 5;
      v107 = "unknown file";
      v108 = 145;
      v110 = 0;
      v111 = 0;
      v109 = "unknown function";
      v35 = v112[0];
      if (*(char *)(v112[0] + 39) < 0)
      {
        v37 = *(const char **)(v112[0] + 16);
        v36 = *(_QWORD *)(v112[0] + 24);
      }
      else
      {
        v36 = *(unsigned __int8 *)(v112[0] + 39);
        v37 = (const char *)(*(_QWORD *)v105[0] + 16);
      }
      v104 = *(_QWORD *)v105[0] + 16;
      v52 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v52 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if ((_BYTE)v116 && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v53 = byte_254A4A4F8;
      else
        v53 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v54 = byte_254A4A4F8[23];
      else
        v54 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)object = os_log_create(v53, v37);
      v55 = &object[8];
      if (v54 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v54 >= 0x17)
      {
        v56 = v34;
        v57 = v37;
        v58 = v35;
        v59 = v31;
        v60 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v60 = v54 | 7;
        v61 = v60 + 1;
        v55 = operator new(v60 + 1);
        *(_QWORD *)&object[16] = v54;
        *(_QWORD *)&v116 = v61 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v55;
        v31 = v59;
        v35 = v58;
        v37 = v57;
        v34 = v56;
      }
      else
      {
        BYTE7(v116) = v54;
        if (!v54)
        {
LABEL_46:
          v55[v54] = 0;
          BYTE8(v116) = 1;
          v62 = __p;
          if (v36 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v36 >= 0x17)
          {
            v63 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v63 = v36 | 7;
            v64 = v63 + 1;
            v62 = operator new(v63 + 1);
            __p[1] = (void *)v36;
            v118 = v64 | 0x8000000000000000;
            __p[0] = v62;
          }
          else
          {
            HIBYTE(v118) = v36;
            if (!v36)
              goto LABEL_54;
          }
          memmove(v62, v37, v36);
LABEL_54:
          *((_BYTE *)v62 + v36) = 0;
          v119 = 1;
          v65 = *(NSObject **)object;
          if (SHIBYTE(v118) < 0)
            operator delete(__p[0]);
          if (BYTE8(v116) && SBYTE7(v116) < 0)
            operator delete(*(void **)&object[8]);
          if (*(_QWORD *)object)
            os_release(*(void **)object);
          if (v34 && *(_QWORD *)(v34 + 24))
          {
            v66 = _os_log_pack_size();
            v67 = (std::__shared_weak_count_vtbl *)operator new(v66, (std::align_val_t)8uLL);
            v68 = (std::__shared_weak_count *)operator new();
            v69 = v68;
            v68->__shared_owners_ = 0;
            p_shared_owners = (unint64_t *)&v68->__shared_owners_;
            v68->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v68->__shared_weak_owners_ = 0;
            v68[1].__vftable = v67;
            *(_QWORD *)object = v67;
            *(_QWORD *)&object[8] = v67;
            *(_QWORD *)&object[16] = v68;
            do
              v71 = __ldxr(p_shared_owners);
            while (__stxr(v71 + 1, p_shared_owners));
            v116 = 0uLL;
            __p[0] = 0;
            do
              v72 = __ldaxr(p_shared_owners);
            while (__stlxr(v72 - 1, p_shared_owners));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v69);
            }
            v73 = *(_QWORD *)object;
            v74 = _os_log_pack_fill();
            v75 = *a2;
            *(_DWORD *)v74 = 134218240;
            *(double *)(v74 + 4) = v14;
            *(_WORD *)(v74 + 12) = 2048;
            *(double *)(v74 + 14) = v75;
            v76 = operator new();
            v77 = *(unsigned __int8 *)(v35 + 39);
            v78 = v104;
            if ((v77 & 0x80u) != 0)
            {
              v78 = *(_QWORD *)(v35 + 16);
              v77 = *(_QWORD *)(v35 + 24);
            }
            *(_QWORD *)v76 = v73;
            *(_OWORD *)(v76 + 8) = *(_OWORD *)&object[8];
            *(_QWORD *)&object[8] = 0;
            *(_QWORD *)&object[16] = 0;
            *(_OWORD *)(v76 + 24) = v116;
            v116 = 0uLL;
            *(_QWORD *)(v76 + 40) = v78;
            *(_QWORD *)(v76 + 48) = v77;
            *(_BYTE *)(v76 + 56) = 16;
            v113 = 0;
            v114[0] = v76;
            (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v34 + 24) + 40))(*(_QWORD *)(v34 + 24), v114);
            v79 = v114[0];
            v114[0] = 0;
            if (v79)
            {
              v80 = *(std::__shared_weak_count **)(v79 + 32);
              if (v80)
              {
                v81 = (unint64_t *)&v80->__shared_owners_;
                do
                  v82 = __ldaxr(v81);
                while (__stlxr(v82 - 1, v81));
                if (!v82)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              v83 = *(std::__shared_weak_count **)(v79 + 16);
              if (v83)
              {
                v84 = (unint64_t *)&v83->__shared_owners_;
                do
                  v85 = __ldaxr(v84);
                while (__stlxr(v85 - 1, v84));
                if (!v85)
                {
                  ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                  std::__shared_weak_count::__release_weak(v83);
                }
              }
              MEMORY[0x212BC6398](v79, 0x10F0C40B62ED6C6);
              v86 = v113;
              v113 = 0;
              if (v86)
              {
                v87 = *(std::__shared_weak_count **)(v86 + 32);
                if (v87)
                {
                  v88 = (unint64_t *)&v87->__shared_owners_;
                  do
                    v89 = __ldaxr(v88);
                  while (__stlxr(v89 - 1, v88));
                  if (!v89)
                  {
                    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                    std::__shared_weak_count::__release_weak(v87);
                  }
                }
                v90 = *(std::__shared_weak_count **)(v86 + 16);
                if (v90)
                {
                  v91 = (unint64_t *)&v90->__shared_owners_;
                  do
                    v92 = __ldaxr(v91);
                  while (__stlxr(v92 - 1, v91));
                  if (!v92)
                  {
                    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                    std::__shared_weak_count::__release_weak(v90);
                  }
                }
                MEMORY[0x212BC6398](v86, 0x10F0C40B62ED6C6);
              }
            }
            v93 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
            if (*((_QWORD *)&v116 + 1))
            {
              v94 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            v96 = *(std::__shared_weak_count **)&object[16];
            if (*(_QWORD *)&object[16])
            {
              v97 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
          }
          else
          {
            os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
            v99 = *a2;
            *(_DWORD *)object = 134218240;
            *(double *)&object[4] = v14;
            *(_WORD *)&object[12] = 2048;
            *(double *)&object[14] = v99;
            v100 = (void *)_os_log_send_and_compose_impl();
            if (v100)
              free(v100);
          }
          if (v31)
          {
            sub_20E8C003C((uint64_t)v105, "Accel sample_time_diff = %lf is less than 0, indicating Accel samples are out of order at Accel timestamp = %lf. Accel sample not added to prediction bundler", v14, *a2);
            sub_20E863570((uint64_t)v105);
          }
          sub_20E863570((uint64_t)v105);
          v101 = v111;
          if (v111)
          {
            v102 = (unint64_t *)&v111->__shared_owners_;
            do
              v103 = __ldaxr(v102);
            while (__stlxr(v103 - 1, v102));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          return;
        }
      }
      memmove(v55, v53, v54);
      goto LABEL_46;
    }
  }
}

void sub_20F1D073C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a39)
  {
    if (a38 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F1D077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20E86E8C4(&a28);
  sub_20E86E8C4(&a27);
  sub_20E86E658((uint64_t)&a33);
  sub_20E863714((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20F1D07B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v5, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1D07DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1D07F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F1D0868(_QWORD *result, _BYTE *a2)
{
  *(_BYTE *)(result[137] + 72) = *a2;
  *(_BYTE *)(result[138] + 72) = *a2;
  *(_BYTE *)(result[139] + 72) = *a2;
  return result;
}

void sub_20F1D0894(_QWORD *a1)
{
  sub_20F1D09EC(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1D08B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *(_QWORD *)(result + 1096);
  if (v2)
  {
    v3 = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(a2 + 112) = v3;
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(v2 + 128);
    *(_QWORD *)(a2 + 144) = *(_QWORD *)(v2 + 144);
    v4 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(a2 + 48) = v4;
    v5 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(a2 + 80) = v5;
    v6 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v2;
    *(_OWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 152) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 152) = 0;
  }
  return result;
}

_QWORD *sub_20F1D0908(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[37];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[34];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[31];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[28];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = a1[25];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = a1[22];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = a1[19];
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  return a1;
}

_QWORD *sub_20F1D09EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  *a1 = &off_24C9FA868;
  v2 = a1[164];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[161];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[158];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[155];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = (void *)a1[152];
  if (v6)
  {
    a1[153] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[149];
  if (v7)
  {
    a1[150] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[146];
  if (v8)
  {
    a1[147] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[143];
  if (v9)
  {
    a1[144] = v9;
    operator delete(v9);
  }
  v10 = (_QWORD *)a1[142];
  a1[142] = 0;
  if (v10)
  {
    v11 = sub_20F1D0908(v10);
    MEMORY[0x212BC6398](v11, 0x1080C400823FE03);
  }
  v12 = (_QWORD *)a1[141];
  a1[141] = 0;
  if (v12)
  {
    v13 = sub_20F1D0908(v12);
    MEMORY[0x212BC6398](v13, 0x1080C400823FE03);
  }
  v14 = (_QWORD *)a1[140];
  a1[140] = 0;
  if (v14)
  {
    v15 = sub_20F1D0908(v14);
    MEMORY[0x212BC6398](v15, 0x1080C400823FE03);
  }
  v16 = (_QWORD *)a1[139];
  a1[139] = 0;
  if (v16)
  {
    v17 = sub_20F1D0908(v16);
    MEMORY[0x212BC6398](v17, 0x1080C400823FE03);
  }
  v18 = (_QWORD *)a1[138];
  a1[138] = 0;
  if (v18)
  {
    v19 = sub_20F1D0908(v18);
    MEMORY[0x212BC6398](v19, 0x1080C400823FE03);
  }
  v20 = (_QWORD *)a1[137];
  a1[137] = 0;
  if (v20)
  {
    v21 = sub_20F1D0908(v20);
    MEMORY[0x212BC6398](v21, 0x1080C400823FE03);
  }
  return sub_20F1BBCC8(a1);
}

_QWORD *sub_20F1D0BA0(_QWORD *a1, _BYTE *a2)
{
  char *v3;
  _QWORD *result;
  char __p[20];
  char v6;

  switch(*a2)
  {
    case 0:
      v6 = 8;
      strcpy(__p, "No Error");
      sub_20E86A980(a1, (uint64_t)__p, 8);
      goto LABEL_9;
    case 1:
      v6 = 19;
      strcpy(__p, "Timestamp Too Early");
      sub_20E86A980(a1, (uint64_t)__p, 19);
      goto LABEL_9;
    case 2:
      v3 = (char *)operator new(0x19uLL);
      strcpy(v3, "Timestamp Too Far Ahead");
      sub_20E86A980(a1, (uint64_t)v3, 23);
      goto LABEL_6;
    case 3:
      v3 = (char *)operator new(0x19uLL);
      strcpy(v3, "Not Enough Measurements");
      sub_20E86A980(a1, (uint64_t)v3, 23);
LABEL_6:
      operator delete(v3);
      return a1;
    case 4:
      v6 = 18;
      strcpy(__p, "Interpolate Failed");
      sub_20E86A980(a1, (uint64_t)__p, 18);
      goto LABEL_9;
    case 5:
      v6 = 14;
      strcpy(__p, "Not Base State");
      sub_20E86A980(a1, (uint64_t)__p, 14);
LABEL_9:
      if ((v6 & 0x80000000) == 0)
        goto LABEL_10;
      operator delete(*(void **)__p);
      result = a1;
      break;
    default:
LABEL_10:
      result = a1;
      break;
  }
  return result;
}

void sub_20F1D0D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F1D0DB4(uint64_t a1, uint64_t a2, unsigned __int8 *__src)
{
  uint64_t *v6;
  char **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  char *v34;
  int64x2_t v35;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  _BYTE *v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _BYTE *v66;
  _BYTE *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  __int128 *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _BYTE *v103;
  _BYTE *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  void *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  size_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  size_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  void *v160;
  void *v161;
  void *v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  unint64_t v169;
  BOOL v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  _QWORD *v174;
  unint64_t v175;
  char *v176;
  double *v177;
  double v178;
  BOOL v179;
  double v180;
  BOOL v181;
  unint64_t v182;
  _QWORD *v183;
  char *v184;
  _BYTE *v185;
  _BYTE *v186;
  char *v187;
  char *v188;
  _OWORD *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  int v193;
  __int128 v194;
  void *v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t *v199;
  unint64_t v200;
  _QWORD *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  _OWORD *v205;
  __int128 *v206;
  uint64_t v207;
  __int128 v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  unint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  _OWORD *v219;
  __int128 *v220;
  uint64_t v221;
  __int128 v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t *v226;
  void **v227;
  _BYTE *v228;
  __int128 v229;
  _BYTE *v230;
  uint64_t *v231;

  *(_QWORD *)a1 = &off_24C9FA8C8;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_BYTE *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = (uint64_t *)(a1 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 992) = 2;
  *(_QWORD *)(a1 + 1000) = 0;
  v230 = (_BYTE *)(a1 + 1008);
  *(_WORD *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 1016) = 0x4059000000000000;
  *(_OWORD *)(a1 + 1024) = xmmword_210314990;
  *(_OWORD *)(a1 + 1040) = xmmword_2102DD520;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1416) = 0;
  *(_BYTE *)(a1 + 1424) = 0;
  *(_BYTE *)(a1 + 1784) = 0;
  *(_BYTE *)(a1 + 1792) = 0;
  *(_QWORD *)(a1 + 1816) = 0;
  *(_DWORD *)(a1 + 1824) = 0;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_QWORD *)(a1 + 1832) = 1;
  *(_OWORD *)(a1 + 1840) = xmmword_2103149A0;
  *(_QWORD *)(a1 + 1856) = 0x3F847AE147AE147BLL;
  *(_BYTE *)(a1 + 1864) = 1;
  v7 = (char **)(a1 + 1872);
  *(_BYTE *)(a1 + 1984) = 0;
  *(_QWORD *)(a1 + 2000) = 0;
  *(_QWORD *)(a1 + 1992) = 0;
  *(_DWORD *)(a1 + 2008) = 0;
  *(_QWORD *)(a1 + 2024) = 0;
  *(_QWORD *)(a1 + 2016) = 0;
  *(_DWORD *)(a1 + 2032) = 0;
  *(_QWORD *)(a1 + 2048) = 0;
  *(_QWORD *)(a1 + 2040) = 0;
  *(_DWORD *)(a1 + 2056) = 0;
  *(_QWORD *)(a1 + 2072) = 0;
  *(_QWORD *)(a1 + 2064) = 0;
  *(_DWORD *)(a1 + 2080) = 0;
  *(_QWORD *)(a1 + 2096) = 0;
  *(_QWORD *)(a1 + 2088) = 0;
  *(_DWORD *)(a1 + 2104) = 0;
  *(_DWORD *)(a1 + 2128) = 0;
  *(_QWORD *)(a1 + 2112) = 0;
  *(_QWORD *)(a1 + 2120) = 0;
  *(_QWORD *)(a1 + 2144) = 0;
  *(_QWORD *)(a1 + 2136) = 0;
  *(_DWORD *)(a1 + 2152) = 0;
  *(_QWORD *)(a1 + 2168) = 0;
  *(_QWORD *)(a1 + 2160) = 0;
  *(_DWORD *)(a1 + 2176) = 0;
  *(_QWORD *)(a1 + 2192) = 0;
  *(_QWORD *)(a1 + 2184) = 0;
  *(_DWORD *)(a1 + 2200) = 0;
  *(_QWORD *)(a1 + 2216) = 0;
  *(_QWORD *)(a1 + 2208) = 0;
  *(_DWORD *)(a1 + 2224) = 0;
  *(_QWORD *)(a1 + 2240) = 0;
  *(_QWORD *)(a1 + 2232) = 0;
  *(_DWORD *)(a1 + 2248) = 0;
  *(_QWORD *)(a1 + 2264) = 0;
  *(_QWORD *)(a1 + 2256) = 0;
  *(_DWORD *)(a1 + 2272) = 0;
  *(_OWORD *)(a1 + 1961) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_WORD *)(a1 + 2280) = 257;
  *(_BYTE *)(a1 + 2282) = 0;
  *(_QWORD *)(a1 + 2284) = -1;
  *(_WORD *)(a1 + 2292) = 0;
  memcpy((void *)(a1 + 2296), __src, 0x356uLL);
  *(_OWORD *)(v6 + 393) = *(_OWORD *)(__src + 856);
  v8 = *(_OWORD *)(__src + 872);
  v9 = *(_OWORD *)(__src + 888);
  v10 = *(_OWORD *)(__src + 904);
  v6[401] = *((_QWORD *)__src + 115);
  *(_OWORD *)(v6 + 399) = v10;
  *(_OWORD *)(v6 + 397) = v9;
  *(_OWORD *)(v6 + 395) = v8;
  v6[402] = 0;
  v6[404] = 0;
  v231 = v6;
  v6[403] = 0;
  v11 = (char *)*((_QWORD *)__src + 116);
  v12 = (char *)*((_QWORD *)__src + 117);
  v13 = v12 - v11;
  if (v12 == v11)
    goto LABEL_9;
  if (0xAAAAAAAAAAAAAAABLL * (v13 >> 3) >= 0xAAAAAAAAAAAAAABLL)
    sub_20E867F44();
  v14 = (char *)operator new(v12 - v11);
  *(_QWORD *)(a1 + 3224) = v14;
  *(_QWORD *)(a1 + 3232) = v14;
  *(_QWORD *)(a1 + 3240) = &v14[8 * (v13 >> 3)];
  if ((unint64_t)(v13 - 24) >= 0x108
    && ((v15 = (v13 - 24) / 0x18uLL, v16 = 24 * v15 + 24, v14 >= &v11[v16]) || v11 >= &v14[v16]))
  {
    v72 = v15 + 1;
    v73 = (v15 + 1) & 0x1FFFFFFFFFFFFFFCLL;
    v17 = &v11[24 * v73];
    v18 = &v14[24 * v73];
    v74 = v73;
    do
    {
      v75 = *((_OWORD *)v11 + 1);
      v77 = *((_OWORD *)v11 + 4);
      v76 = *((_OWORD *)v11 + 5);
      v78 = *((_OWORD *)v11 + 2);
      v79 = *((_OWORD *)v11 + 3);
      *(_OWORD *)v14 = *(_OWORD *)v11;
      *((_OWORD *)v14 + 1) = v75;
      *((_OWORD *)v14 + 2) = v78;
      *((_OWORD *)v14 + 3) = v79;
      *((_OWORD *)v14 + 4) = v77;
      *((_OWORD *)v14 + 5) = v76;
      v14 += 96;
      v11 += 96;
      v74 -= 4;
    }
    while (v74);
    if (v72 == v73)
      goto LABEL_8;
  }
  else
  {
    v17 = v11;
    v18 = v14;
  }
  do
  {
    *(_QWORD *)v18 = *(_QWORD *)v17;
    *((_QWORD *)v18 + 1) = *((_QWORD *)v17 + 1);
    *((_QWORD *)v18 + 2) = *((_QWORD *)v17 + 2);
    v18 += 24;
    v17 += 24;
  }
  while (v17 != v12);
LABEL_8:
  *(_QWORD *)(a1 + 3232) = v18;
LABEL_9:
  v19 = *(_OWORD *)(__src + 952);
  v20 = *(_OWORD *)(__src + 968);
  v21 = *(_OWORD *)(__src + 984);
  *(_OWORD *)(a1 + 3296) = *(_OWORD *)(__src + 1000);
  *(_OWORD *)(a1 + 3280) = v21;
  *(_OWORD *)(a1 + 3264) = v20;
  *(_OWORD *)(a1 + 3248) = v19;
  v22 = (char *)(__src + 1016);
  v23 = *(_OWORD *)(__src + 1112);
  v24 = *(_OWORD *)(__src + 1128);
  v25 = *(_OWORD *)(__src + 1096);
  *(_OWORD *)(a1 + 3376) = *(_OWORD *)(__src + 1080);
  *(_OWORD *)(a1 + 3424) = v24;
  *(_OWORD *)(a1 + 3408) = v23;
  *(_OWORD *)(a1 + 3392) = v25;
  v26 = *(_OWORD *)(__src + 1176);
  v27 = *(_OWORD *)(__src + 1192);
  v28 = *(_OWORD *)(__src + 1160);
  *(_OWORD *)(a1 + 3440) = *(_OWORD *)(__src + 1144);
  *(_OWORD *)(a1 + 3488) = v27;
  *(_OWORD *)(a1 + 3472) = v26;
  *(_OWORD *)(a1 + 3456) = v28;
  v29 = *(_OWORD *)(__src + 1016);
  v30 = *(_OWORD *)(__src + 1032);
  v31 = *(_OWORD *)(__src + 1048);
  *(_OWORD *)(a1 + 3360) = *(_OWORD *)(__src + 1064);
  *(_OWORD *)(a1 + 3344) = v31;
  *(_OWORD *)(a1 + 3328) = v30;
  *(_OWORD *)(a1 + 3312) = v29;
  v228 = (_BYTE *)(a1 + 3504);
  sub_20E86F7FC(a1 + 3504, (uint64_t)(__src + 1208));
  *(_BYTE *)(a1 + 3712) = __src[1416];
  *(_BYTE *)(a1 + 3928) = 0;
  *(_OWORD *)(a1 + 3936) = 0u;
  *(_OWORD *)(a1 + 3952) = 0u;
  *(_OWORD *)(a1 + 3968) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_OWORD *)(a1 + 3752) = 0u;
  *(_BYTE *)(a1 + 3768) = 0;
  v32 = (char *)operator new(0x1F40uLL);
  *(_QWORD *)(a1 + 3936) = v32;
  *(_QWORD *)(a1 + 3944) = v32;
  *(_QWORD *)(a1 + 3952) = v32 + 8000;
  v33 = (char *)operator new(0x5DC0uLL);
  *(_QWORD *)(a1 + 3960) = v33;
  *(_QWORD *)(a1 + 3968) = v33;
  *(_QWORD *)(a1 + 3976) = v33 + 24000;
  *(_QWORD *)(a1 + 3984) = 0;
  *(_QWORD *)(a1 + 4000) = 0;
  *(_QWORD *)(a1 + 3992) = 0;
  *(_QWORD *)(a1 + 4008) = 0xBFF0000000000000;
  v227 = (void **)(a1 + 3768);
  v34 = (char *)operator new(0x1B580uLL);
  *(_QWORD *)(a1 + 3984) = v34;
  *(_QWORD *)(a1 + 3992) = v34;
  *(_QWORD *)(a1 + 4000) = v34 + 112000;
  *(_OWORD *)(a1 + 4016) = xmmword_2103A5620;
  *((_BYTE *)v231 + 4224) = 0;
  *((_BYTE *)v231 + 4232) = 0;
  *(_OWORD *)(a1 + 4032) = 0u;
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_BYTE *)(a1 + 4080) = 0;
  v35 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a1 + 4280) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 4288) = v35;
  *(int64x2_t *)(a1 + 4304) = v35;
  *(int64x2_t *)(a1 + 4320) = v35;
  *(_OWORD *)(a1 + 4336) = xmmword_2102DD520;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(a1 + 4352) = _Q1;
  *(_QWORD *)(a1 + 4368) = 0;
  *(_OWORD *)(a1 + 4376) = 0u;
  *(_QWORD *)(a1 + 4392) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 4400) = _Q1;
  *(_OWORD *)(a1 + 4432) = 0u;
  *(_OWORD *)(a1 + 4464) = 0u;
  *(_OWORD *)(a1 + 4416) = 0u;
  *(_OWORD *)(a1 + 4448) = 0u;
  *(_OWORD *)(a1 + 4480) = 0u;
  *(_QWORD *)(a1 + 4496) = 0;
  *(_QWORD *)(a1 + 4440) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 4472) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 4520) = 0u;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(_OWORD *)(a1 + 4552) = 0u;
  *(_QWORD *)(a1 + 4568) = 0;
  *((_OWORD *)v231 + 281) = _Q1;
  *(_QWORD *)(a1 + 4544) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 4576) = 0x3FF0000000000000;
  *((_BYTE *)v231 + 4576) = 0;
  *(_OWORD *)(a1 + 5083) = 0u;
  *(_OWORD *)(a1 + 5072) = 0u;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_OWORD *)(a1 + 5040) = 0u;
  *(_OWORD *)(a1 + 5024) = 0u;
  *(_OWORD *)(a1 + 5008) = 0u;
  *(_OWORD *)(a1 + 4992) = 0u;
  *(_OWORD *)(a1 + 4976) = 0u;
  *(_OWORD *)(a1 + 4960) = 0u;
  *(_OWORD *)(a1 + 4944) = 0u;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(_OWORD *)(a1 + 4912) = 0u;
  *(_OWORD *)(a1 + 4896) = 0u;
  *(_OWORD *)(a1 + 4880) = 0u;
  *(_OWORD *)(a1 + 4864) = 0u;
  *(_OWORD *)(a1 + 4848) = 0u;
  *(_OWORD *)(a1 + 4832) = 0u;
  *(_OWORD *)(a1 + 4816) = 0u;
  *(_OWORD *)(a1 + 4800) = 0u;
  *(_OWORD *)(a1 + 4784) = 0u;
  *(_OWORD *)(a1 + 4768) = 0u;
  *(_OWORD *)(a1 + 4752) = 0u;
  *(_OWORD *)(a1 + 4736) = 0u;
  *(_OWORD *)(a1 + 4720) = 0u;
  *(_OWORD *)(a1 + 4704) = 0u;
  *(_OWORD *)(a1 + 4688) = 0u;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_OWORD *)(a1 + 4656) = 0u;
  *(_OWORD *)(a1 + 4640) = 0u;
  *(_OWORD *)(a1 + 4624) = 0u;
  *(_OWORD *)(a1 + 4608) = 0u;
  *(_OWORD *)(a1 + 4592) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 5104) = _Q1;
  *(_QWORD *)(a1 + 5120) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_DWORD *)(a1 + 5175) = 0;
  v229 = _Q1;
  *(_OWORD *)(a1 + 5184) = _Q1;
  *(_QWORD *)(a1 + 5200) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 5208) = 0u;
  *(_OWORD *)(a1 + 5224) = 0u;
  *(_OWORD *)(a1 + 5240) = 0u;
  *(_OWORD *)(a1 + 5256) = 0u;
  *(_OWORD *)(a1 + 5272) = 0u;
  *(_OWORD *)(a1 + 5288) = 0u;
  *(_OWORD *)(a1 + 5304) = 0u;
  *(_OWORD *)(a1 + 5320) = 0u;
  *(_OWORD *)(a1 + 5336) = 0u;
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_OWORD *)(a1 + 5368) = 0u;
  *(_OWORD *)(a1 + 5384) = 0u;
  *(_OWORD *)(a1 + 5400) = 0u;
  *(_OWORD *)(a1 + 5416) = 0u;
  *(_OWORD *)(a1 + 5432) = 0u;
  *(_OWORD *)(a1 + 5448) = 0u;
  *(_QWORD *)(a1 + 5464) = 0x3FE0000000000000;
  *((_BYTE *)v231 + 5528) = 0;
  *((_BYTE *)v231 + 5536) = 0;
  *(_OWORD *)(a1 + 5472) = 0u;
  *(_OWORD *)(a1 + 5488) = 0u;
  *(_OWORD *)(a1 + 5504) = 0u;
  *(_BYTE *)(a1 + 5520) = 0;
  v226 = (uint64_t *)(a1 + 5552);
  *(_QWORD *)(a1 + 5568) = 0;
  *(_OWORD *)(a1 + 5552) = 0u;
  v42 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 4280) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 4296) = v42;
  v43 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 4328) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 4312) = v43;
  *(_QWORD *)(a1 + 4336) = *(_QWORD *)(a2 + 56);
  v44 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 4360) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 4344) = v44;
  v45 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 4384) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 4368) = v45;
  v46 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 4408) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 4392) = v46;
  v47 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 4432) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 4416) = v47;
  v49 = *(_OWORD *)(a2 + 192);
  v48 = *(_OWORD *)(a2 + 208);
  v50 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 4504) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 4472) = v49;
  *(_OWORD *)(a1 + 4488) = v48;
  *(_OWORD *)(a1 + 4456) = v50;
  *(_OWORD *)(a1 + 4440) = *(_OWORD *)(a2 + 160);
  v51 = *(_OWORD *)(a2 + 264);
  v52 = *(_OWORD *)(a2 + 280);
  v53 = *(_QWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 4528) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 4576) = v53;
  *(_OWORD *)(a1 + 4560) = v52;
  *(_OWORD *)(a1 + 4544) = v51;
  *(_OWORD *)(a1 + 4512) = *(_OWORD *)(a2 + 232);
  v54 = *(unsigned __int8 *)(a1 + 2304);
  if (v54 == 2)
  {
    v55 = v230;
    v56 = (_QWORD *)operator new();
    sub_20F1CEA44((uint64_t)v56, (const void *)(a1 + 2304), *v22);
  }
  else
  {
    v55 = v230;
    if (v54 == 1)
    {
      v56 = (_QWORD *)operator new();
      sub_20F1BB56C((uint64_t)v56, *v22);
      *v56 = &off_24C9FA808;
    }
    else
    {
      v56 = (_QWORD *)operator new();
      sub_20F1BB56C((uint64_t)v56, *v22);
    }
  }
  v57 = *v231;
  *v231 = (uint64_t)v56;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *(void **)(a1 + 208);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 224) - (_QWORD)v58) >> 3)) <= 0x3E7)
  {
    v59 = *(_QWORD *)(a1 + 216);
    v60 = (char *)operator new(0xDAC0uLL);
    v61 = &v60[v59 - (_QWORD)v58];
    v62 = v61;
    if ((void *)v59 != v58)
    {
      v62 = &v60[v59 - (_QWORD)v58];
      do
      {
        v63 = *(_QWORD *)(v59 - 56);
        v59 -= 56;
        *((_QWORD *)v62 - 7) = v63;
        v62 -= 56;
        v64 = *(_OWORD *)(v59 + 8);
        *((_QWORD *)v62 + 3) = *(_QWORD *)(v59 + 24);
        *(_OWORD *)(v62 + 8) = v64;
        v65 = *(_OWORD *)(v59 + 32);
        *((_QWORD *)v62 + 6) = *(_QWORD *)(v59 + 48);
        *((_OWORD *)v62 + 2) = v65;
      }
      while ((void *)v59 != v58);
    }
    *(_QWORD *)(a1 + 208) = v62;
    *(_QWORD *)(a1 + 216) = v61;
    *(_QWORD *)(a1 + 224) = v60 + 56000;
    if (v58)
      operator delete(v58);
  }
  v66 = *(_BYTE **)(a1 + 880);
  if ((*(_QWORD *)(a1 + 896) - (_QWORD)v66) >> 6 > 0x7CuLL)
    goto LABEL_37;
  v67 = *(_BYTE **)(a1 + 888);
  v68 = (char *)operator new(0x1F40uLL);
  v69 = v67 - v66;
  v70 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
  v71 = v70;
  if (v67 != v66)
  {
    if ((unint64_t)(v69 - 8) < 0x58)
    {
      v71 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_34:
        v88 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *((_QWORD *)v71 - 1) = v88;
        v71 -= 8;
      }
      while (v67 != v66);
      goto LABEL_35;
    }
    v71 = &v68[(v67 - v66) & 0xFFFFFFFFFFFFFFF8];
    if (v67 - v68 - (v69 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_34;
    v80 = v69 >> 3;
    v81 = ((unint64_t)(v69 - 8) >> 3) + 1;
    v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
    v83 = &v67[-v82];
    v71 = &v70[-v82];
    v84 = &v68[8 * v80 - 16];
    v85 = (__int128 *)(v67 - 16);
    v86 = v81 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v87 = *v85;
      *((_OWORD *)v84 - 1) = *(v85 - 1);
      *(_OWORD *)v84 = v87;
      v84 -= 32;
      v85 -= 2;
      v86 -= 4;
    }
    while (v86);
    v67 = v83;
    if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_34;
  }
LABEL_35:
  *(_QWORD *)(a1 + 880) = v71;
  *(_QWORD *)(a1 + 888) = v70;
  *(_QWORD *)(a1 + 896) = v68 + 8000;
  if (v66)
    operator delete(v66);
LABEL_37:
  v89 = *(_BYTE **)(a1 + 904);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 920) - (_QWORD)v89) >> 3) <= 0x3E7)
  {
    v90 = *(_BYTE **)(a1 + 912);
    v91 = (char *)operator new(0x29040uLL);
    v92 = &v91[168 * ((v90 - v89) / 168)];
    v93 = v92;
    if (v90 != v89)
    {
      v94 = &v91[168 * ((v90 - v89) / 168)];
      do
      {
        v93 = v94 - 168;
        v95 = *(_OWORD *)(v90 - 168);
        v96 = *(_OWORD *)(v90 - 152);
        *(_OWORD *)(v94 - 136) = *(_OWORD *)(v90 - 136);
        *(_OWORD *)(v94 - 152) = v96;
        *(_OWORD *)(v94 - 168) = v95;
        v97 = *(_OWORD *)(v90 - 120);
        v98 = *(_OWORD *)(v90 - 104);
        v99 = *(_OWORD *)(v90 - 88);
        *(_OWORD *)(v94 - 72) = *(_OWORD *)(v90 - 72);
        *(_OWORD *)(v94 - 88) = v99;
        *(_OWORD *)(v94 - 104) = v98;
        *(_OWORD *)(v94 - 120) = v97;
        v100 = *(_OWORD *)(v90 - 56);
        v101 = *(_OWORD *)(v90 - 40);
        v102 = *(_OWORD *)(v90 - 24);
        *((_QWORD *)v94 - 1) = *((_QWORD *)v90 - 1);
        *(_OWORD *)(v94 - 24) = v102;
        *(_OWORD *)(v94 - 40) = v101;
        *(_OWORD *)(v94 - 56) = v100;
        v90 -= 168;
        v94 -= 168;
      }
      while (v90 != v89);
    }
    *(_QWORD *)(a1 + 904) = v93;
    *(_QWORD *)(a1 + 912) = v92;
    *(_QWORD *)(a1 + 920) = v91 + 168000;
    if (v89)
      operator delete(v89);
  }
  v103 = *(_BYTE **)(a1 + 928);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 944) - (_QWORD)v103) >> 3) <= 0x3E7)
  {
    v104 = *(_BYTE **)(a1 + 936);
    v105 = (char *)operator new(0x29040uLL);
    v106 = &v105[168 * ((v104 - v103) / 168)];
    v107 = v106;
    if (v104 != v103)
    {
      v108 = &v105[168 * ((v104 - v103) / 168)];
      do
      {
        v107 = v108 - 168;
        v109 = *(_OWORD *)(v104 - 168);
        v110 = *(_OWORD *)(v104 - 152);
        *(_OWORD *)(v108 - 136) = *(_OWORD *)(v104 - 136);
        *(_OWORD *)(v108 - 152) = v110;
        *(_OWORD *)(v108 - 168) = v109;
        v111 = *(_OWORD *)(v104 - 120);
        v112 = *(_OWORD *)(v104 - 104);
        v113 = *(_OWORD *)(v104 - 88);
        *(_OWORD *)(v108 - 72) = *(_OWORD *)(v104 - 72);
        *(_OWORD *)(v108 - 88) = v113;
        *(_OWORD *)(v108 - 104) = v112;
        *(_OWORD *)(v108 - 120) = v111;
        v114 = *(_OWORD *)(v104 - 56);
        v115 = *(_OWORD *)(v104 - 40);
        v116 = *(_OWORD *)(v104 - 24);
        *((_QWORD *)v108 - 1) = *((_QWORD *)v104 - 1);
        *(_OWORD *)(v108 - 24) = v116;
        *(_OWORD *)(v108 - 40) = v115;
        *(_OWORD *)(v108 - 56) = v114;
        v104 -= 168;
        v108 -= 168;
      }
      while (v104 != v103);
    }
    *(_QWORD *)(a1 + 928) = v107;
    *(_QWORD *)(a1 + 936) = v106;
    *(_QWORD *)(a1 + 944) = v105 + 168000;
    if (v103)
      operator delete(v103);
  }
  v117 = *(void **)(a1 + 952);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 968) - (_QWORD)v117) >> 3)) <= 0x3E7)
  {
    v118 = *(_QWORD *)(a1 + 960);
    v119 = (char *)operator new(0xDAC0uLL);
    v120 = &v119[v118 - (_QWORD)v117];
    v121 = v120;
    if ((void *)v118 != v117)
    {
      v121 = &v119[v118 - (_QWORD)v117];
      do
      {
        v122 = *(_QWORD *)(v118 - 56);
        v118 -= 56;
        *((_QWORD *)v121 - 7) = v122;
        v121 -= 56;
        v123 = *(_OWORD *)(v118 + 8);
        *((_QWORD *)v121 + 3) = *(_QWORD *)(v118 + 24);
        *(_OWORD *)(v121 + 8) = v123;
        v124 = *(_OWORD *)(v118 + 32);
        *((_QWORD *)v121 + 6) = *(_QWORD *)(v118 + 48);
        *((_OWORD *)v121 + 2) = v124;
      }
      while ((void *)v118 != v117);
    }
    *(_QWORD *)(a1 + 952) = v121;
    *(_QWORD *)(a1 + 960) = v120;
    *(_QWORD *)(a1 + 968) = v119 + 56000;
    if (v117)
      operator delete(v117);
  }
  v125 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v125 + 744) = *(_QWORD *)(a1 + 3160);
  *(_BYTE *)(v125 + 752) = *(_BYTE *)(a1 + 3168);
  *(_QWORD *)(v125 + 760) = *(_QWORD *)(a1 + 3176);
  sub_20F3F9E98(*__src, __src[1016], __src[1017], (uint64_t)v55);
  sub_20EAE8D8C(v7, 0x3E8uLL);
  sub_20EAE8F2C((char **)(a1 + 1920), 0x3E8uLL);
  v126 = *(unsigned __int8 *)(a1 + 2624);
  if (v126 != 5)
  {
    if (v126 == 4)
    {
      v127 = operator new();
      sub_20F18E044(v127, a1 + 2648);
      v128 = (_QWORD *)*v226;
      *v226 = v127;
      if (v128)
      {
        v129 = sub_20F1D0908(v128);
        MEMORY[0x212BC6398](v129, 0x1080C400823FE03);
      }
    }
    goto LABEL_108;
  }
  v130 = *(_QWORD *)(a1 + 2824);
  if (v130 != *(_QWORD *)(a1 + 2976))
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 126, (uint64_t)"config_.visual_slam_config.rls_gyro_filter_config.max_pred_samples == config_.visual_slam_config.rls_accel_filter_config.max_pred_samples", 137, (uint64_t)"max pred time must be the same", 30, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    v130 = *(_QWORD *)(a1 + 2824);
  }
  if (!v130
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 128, (uint64_t)"config_.visual_slam_config.rls_gyro_filter_config.max_pred_samples > 0u", 71, (uint64_t)"max pred must be > 0", 20, (void (*)(void **))sub_21023DDB0))
  {
LABEL_251:
    abort();
  }
  v131 = 0;
  *(_BYTE *)(a1 + 2856) = 1;
  *(_BYTE *)(a1 + 3008) = 1;
  v132 = 3744;
  do
  {
    while (1)
    {
      v133 = operator new();
      sub_20F18E044(v133, a1 + 2800);
      v134 = *(_QWORD **)(a1 + v132 - 24);
      *(_QWORD *)(a1 + v132 - 24) = v133;
      if (v134)
      {
        v135 = sub_20F1D0908(v134);
        MEMORY[0x212BC6398](v135, 0x1080C400823FE03);
      }
      v136 = operator new();
      sub_20F18E044(v136, a1 + 2952);
      v137 = *(_QWORD **)(a1 + v132);
      *(_QWORD *)(a1 + v132) = v136;
      if (v137)
      {
        v138 = sub_20F1D0908(v137);
        MEMORY[0x212BC6398](v138, 0x1080C400823FE03);
      }
      v139 = *(unsigned int *)(a1 + 2816);
      v140 = a1 + v131;
      if (*(_DWORD *)(a1 + v131 + 2008) == v139)
      {
        v141 = *(void **)(v140 + 1992);
      }
      else
      {
        *(_DWORD *)(v140 + 2008) = v139;
        v141 = *(void **)(v140 + 1992);
        if (*(_QWORD *)(v140 + 2000) < v139)
        {
          if (v141)
            MEMORY[0x212BC6368](v141, 0x1000C8000313F17);
          *(_QWORD *)(v140 + 1992) = 0;
          v142 = (8 * v139 + 31) & 0xFFFFFFFE0;
          *(_QWORD *)(v140 + 2000) = v142 >> 3;
          v141 = operator new(v142, (std::align_val_t)0x20uLL);
          *(_QWORD *)(v140 + 1992) = v141;
          v139 = *(unsigned int *)(v140 + 2008);
        }
      }
      if (v139)
        bzero(v141, 8 * v139);
      v143 = a1 + v131;
      if (*(_DWORD *)(a1 + v131 + 2152) == 2)
      {
        v144 = *(void **)(v143 + 2136);
LABEL_86:
        v145 = 2;
        goto LABEL_87;
      }
      *(_DWORD *)(v143 + 2152) = 2;
      v144 = *(void **)(v143 + 2136);
      if (*(_QWORD *)(v143 + 2144) > 1uLL)
        goto LABEL_86;
      if (v144)
        MEMORY[0x212BC6368](v144, 0x1000C8000313F17);
      *(_QWORD *)(v143 + 2136) = 0;
      *(_QWORD *)(v143 + 2144) = 4;
      v144 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)(v143 + 2136) = v144;
      v145 = *(unsigned int *)(v143 + 2152);
      if (!(_DWORD)v145)
      {
        v146 = *(unsigned int *)(a1 + 2968);
        v147 = a1 + v131;
        if (*(_DWORD *)(a1 + v131 + 2080) == v146)
          goto LABEL_85;
        goto LABEL_88;
      }
LABEL_87:
      bzero(v144, 8 * v145);
      v146 = *(unsigned int *)(a1 + 2968);
      v147 = a1 + v131;
      if (*(_DWORD *)(a1 + v131 + 2080) == v146)
      {
LABEL_85:
        v148 = *(void **)(v147 + 2064);
        goto LABEL_92;
      }
LABEL_88:
      *(_DWORD *)(v147 + 2080) = v146;
      v148 = *(void **)(v147 + 2064);
      if (*(_QWORD *)(v147 + 2072) < v146)
      {
        if (v148)
          MEMORY[0x212BC6368](v148, 0x1000C8000313F17);
        *(_QWORD *)(v147 + 2064) = 0;
        v149 = (8 * v146 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)(v147 + 2072) = v149 >> 3;
        v148 = operator new(v149, (std::align_val_t)0x20uLL);
        *(_QWORD *)(v147 + 2064) = v148;
        v146 = *(unsigned int *)(v147 + 2080);
      }
LABEL_92:
      if (v146)
        bzero(v148, 8 * v146);
      v150 = a1 + v131;
      if (*(_DWORD *)(a1 + v131 + 2224) == 2)
      {
        v151 = *(void **)(v150 + 2208);
LABEL_101:
        v152 = 2;
        break;
      }
      *(_DWORD *)(v150 + 2224) = 2;
      v151 = *(void **)(v150 + 2208);
      if (*(_QWORD *)(v150 + 2216) > 1uLL)
        goto LABEL_101;
      if (v151)
        MEMORY[0x212BC6368](v151, 0x1000C8000313F17);
      *(_QWORD *)(v150 + 2208) = 0;
      *(_QWORD *)(v150 + 2216) = 4;
      v151 = operator new(0x20uLL, (std::align_val_t)0x20uLL);
      *(_QWORD *)(v150 + 2208) = v151;
      v152 = *(unsigned int *)(v150 + 2224);
      if ((_DWORD)v152)
        break;
      v131 += 24;
      v132 += 8;
      if (v131 == 72)
        goto LABEL_103;
    }
    bzero(v151, 8 * v152);
    v131 += 24;
    v132 += 8;
  }
  while (v131 != 72);
LABEL_103:
  v153 = *(_QWORD *)(*(_QWORD *)(a1 + 3720) + 24);
  if (v153 != *(_QWORD *)(*(_QWORD *)(a1 + 3744) + 24))
  {
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 158, (uint64_t)"pose_extrapolation_filters[0]->GetFilterConfig().max_pred_samples == pose_extrapolation_filters[0 + cv_types::InertialState::kPositionDof] ->GetFilterConfig() .max_pred_samples", 176, (uint64_t)"6d pose filters must have same max pred time", 44, (void (*)(void **))sub_21023DDB0))
    {
      v153 = *(_QWORD *)(*(_QWORD *)(a1 + 3720) + 24);
      goto LABEL_106;
    }
    goto LABEL_251;
  }
LABEL_106:
  if (!v153
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 160, (uint64_t)"pose_extrapolation_filters[0]->GetFilterConfig().max_pred_samples > 0", 69, (uint64_t)"max pred time needs to be > 0", 29, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_251;
  }
LABEL_108:
  if (*(_BYTE *)(a1 + 3312))
  {
    v154 = (char *)operator new(0x320uLL);
    bzero(v154, 0x320uLL);
    v155 = (char *)operator new(0x320uLL);
    bzero(v155, 0x320uLL);
    v156 = (char *)operator new(0x320uLL);
    v157 = v154 + 800;
    v158 = v155 + 800;
    v159 = v156 + 800;
    bzero(v156, 0x320uLL);
    if (*(_BYTE *)(a1 + 3928))
    {
      v160 = *v227;
      if (*v227)
      {
        *(_QWORD *)(a1 + 3776) = v160;
        operator delete(v160);
        *v227 = 0;
        *(_QWORD *)(a1 + 3776) = 0;
        *(_QWORD *)(a1 + 3784) = 0;
      }
      *(_QWORD *)(a1 + 3768) = v154;
      *(_QWORD *)(a1 + 3776) = v157;
      *(_QWORD *)(a1 + 3784) = v157;
      *(_QWORD *)(a1 + 3792) = 0;
      *(_QWORD *)(a1 + 3808) = 0;
      *(_QWORD *)(a1 + 3800) = 0;
      v161 = *(void **)(a1 + 3816);
      if (v161)
      {
        *(_QWORD *)(a1 + 3824) = v161;
        operator delete(v161);
        *(_QWORD *)(a1 + 3816) = 0;
        *(_QWORD *)(a1 + 3824) = 0;
        *(_QWORD *)(a1 + 3832) = 0;
      }
      *(_QWORD *)(a1 + 3816) = v155;
      *(_QWORD *)(a1 + 3824) = v158;
      *(_QWORD *)(a1 + 3832) = v158;
      *(_QWORD *)(a1 + 3840) = 0;
      *(_QWORD *)(a1 + 3856) = 0;
      *(_QWORD *)(a1 + 3848) = 0;
      v162 = *(void **)(a1 + 3864);
      if (v162)
      {
        *(_QWORD *)(a1 + 3872) = v162;
        operator delete(v162);
        *(_QWORD *)(a1 + 3864) = 0;
        *(_QWORD *)(a1 + 3872) = 0;
        *(_QWORD *)(a1 + 3880) = 0;
      }
      *(_QWORD *)(a1 + 3864) = v156;
      *(_QWORD *)(a1 + 3872) = v159;
      *(_QWORD *)(a1 + 3880) = v159;
      *(_OWORD *)(a1 + 3888) = 0u;
      *(_OWORD *)(a1 + 3904) = 0u;
      *(_QWORD *)(a1 + 3920) = 0x4024000000000000;
      goto LABEL_117;
    }
    *(_QWORD *)(a1 + 3768) = v154;
    *(_QWORD *)(a1 + 3776) = v157;
    *(_QWORD *)(a1 + 3784) = v157;
    *(_QWORD *)(a1 + 3792) = 0;
    *(_QWORD *)(a1 + 3808) = 0;
    *(_QWORD *)(a1 + 3800) = 0;
    *(_QWORD *)(a1 + 3816) = v155;
    *(_QWORD *)(a1 + 3824) = v158;
    *(_QWORD *)(a1 + 3832) = v158;
    *(_QWORD *)(a1 + 3840) = 0;
    *(_QWORD *)(a1 + 3856) = 0;
    *(_QWORD *)(a1 + 3848) = 0;
    *(_QWORD *)(a1 + 3864) = v156;
    *(_QWORD *)(a1 + 3872) = v159;
    *(_QWORD *)(a1 + 3880) = v159;
    *(_OWORD *)(a1 + 3888) = 0u;
    *(_OWORD *)(a1 + 3904) = 0u;
    *(_QWORD *)(a1 + 3920) = 0x4024000000000000;
    *(_BYTE *)(a1 + 3928) = 1;
    if ((*(_BYTE *)(a1 + 3209) & 0xFE) != 2)
    {
LABEL_137:
      *(_WORD *)(a1 + 3136) = 0;
      if (*(_BYTE *)(a1 + 3344))
        goto LABEL_138;
      goto LABEL_194;
    }
  }
  else
  {
LABEL_117:
    if ((*(_BYTE *)(a1 + 3209) & 0xFE) != 2)
      goto LABEL_137;
  }
  v163 = *(_QWORD *)(a1 + 3256);
  if (v163)
  {
    v164 = *(char **)(a1 + 5472);
    v165 = (uint64_t)(*(_QWORD *)(a1 + 5480) - (_QWORD)v164) >> 4;
    if (v165 == v163)
      goto LABEL_137;
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 175, (uint64_t)"config_.pose_smoothing_config.hysteresis_buffer_size > 0", 56, (uint64_t)"hysteresis buffer size needs to be > 0", 38, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    v163 = *(_QWORD *)(a1 + 3256);
    v164 = *(char **)(a1 + 5472);
    v165 = (uint64_t)(*(_QWORD *)(a1 + 5480) - (_QWORD)v164) >> 4;
    if (v165 == v163)
      goto LABEL_137;
  }
  if (!v163)
  {
    *(_QWORD *)(a1 + 5480) = v164;
    *(_QWORD *)(a1 + 5496) = 0;
    *(_QWORD *)(a1 + 5512) = 0;
    *(_QWORD *)(a1 + 5504) = 0;
    goto LABEL_137;
  }
  if (v163 >> 60)
    sub_20E867F44();
  v166 = 16 * v163;
  v167 = (char *)operator new(16 * v163);
  v168 = &v167[16 * v163];
  bzero(v167, 16 * v163);
  v169 = *(_QWORD *)(a1 + 5512);
  v170 = v169 > v163;
  if (v169 < v163)
    v163 = *(_QWORD *)(a1 + 5512);
  if (v170)
  {
    v171 = *(_QWORD *)(a1 + 5496);
    v172 = v163 - 1;
    v173 = v169 - 1;
    v174 = v167;
    do
    {
      do
      {
        v175 = v172;
        v176 = &v164[16 * (v171 % v165)];
        *v174 = *(_QWORD *)v176;
        v174[1] = *((_QWORD *)v176 + 1);
        v172 = v175 - 1;
        ++v171;
        v174 += 2;
      }
      while (v173-- == 0);
    }
    while (v175);
LABEL_192:
    *(_QWORD *)(a1 + 5480) = v164;
    operator delete(v164);
  }
  else
  {
    if (v169)
    {
      v182 = *(_QWORD *)(a1 + 5496);
      v183 = v167;
      do
      {
        v184 = &v164[16 * (v182 % v165)];
        *v183 = *(_QWORD *)v184;
        v183[1] = *((_QWORD *)v184 + 1);
        ++v182;
        v183 += 2;
        --v169;
      }
      while (v169);
      goto LABEL_192;
    }
    if (v164)
      goto LABEL_192;
  }
  *(_QWORD *)(a1 + 5472) = v167;
  *(_QWORD *)(a1 + 5480) = &v167[v166];
  *(_QWORD *)(a1 + 5488) = v168;
  *(_QWORD *)(a1 + 5512) = v163;
  *(_QWORD *)(a1 + 5496) = 0;
  *(_QWORD *)(a1 + 5504) = v163 % (v166 >> 4);
  *(_WORD *)(a1 + 3136) = 0;
  if (*(_BYTE *)(a1 + 3344))
  {
LABEL_138:
    if (*(double *)(a1 + 3360) < 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 205, (uint64_t)"config_.pose_filter_config.accel_window_time_secs >= 0.0", 56, (uint64_t)"accel_window_time_secs >= 0", 27, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3352) < 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 207, (uint64_t)"config_.pose_filter_config.gyro_window_time_secs >= 0.0", 55, (uint64_t)"gyro_window_time_secs >= 0", 26, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3472) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp",
           209,
           (uint64_t)"config_.pose_filter_config.alpha_beta_filter_default_dt > 0.0",
           61,
           (uint64_t)"alpha_beta_filter_default_dt > 0",
           32,
           (void (*)(void **))sub_21023DDB0)
      || *(double *)(a1 + 3480) <= 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 211, (uint64_t)"config_.pose_filter_config.default_sample_rate > 0.0", 52, (uint64_t)"default_sample_rate > 0", 23, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3488) < 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 214, (uint64_t)"config_.pose_filter_config.transition_config.hysteresis_time_window_in_motion >= 0.0", 84, (uint64_t)"hysteresis_time_window >= 0", 27, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    v177 = (double *)(a1 + 3376);
    do
    {
      v178 = v177[1];
      v179 = v178 < 0.0 || v178 > 1.0;
      if (v179
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 221, (uint64_t)"iter->alphaBeta_theta >= 0.0 && iter->alphaBeta_theta <= 1.0", 60, (uint64_t)"theta needs to be in range of [0,1]", 35, (void (*)(void **))sub_21023DDB0)|| ((v180 = v177[2], v180 >= 0.0) ? (v181 = v180 > 1.0) : (v181 = 1), v181&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 224, (uint64_t)"iter->smoothing_wgt_overwrite_val >= 0.0 && iter->smoothing_wgt_overwrite_val <= 1.0", 84, (uint64_t)"smoothing_wgt_overwrite_val needs to be in range of [0,1]", 57, (void (*)(void **))sub_21023DDB0)|| v177[3] < 0.0&& sub_21023D5B4(
              "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp",
              225,
              (uint64_t)"iter->gyro_threshold >= 0.0",
              27,
              (uint64_t)"gyro_threshold needs to be > 0",
              30,
              (void (*)(void **))sub_21023DDB0)
         || v177[4] < 0.0
         && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 226, (uint64_t)"iter->accel_threshold >= 0.0", 28, (uint64_t)"accel_threshold needs to be > 0", 31, (void (*)(void **))sub_21023DDB0)|| v177[5] < 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 227, (uint64_t)"iter->speed_threshold >= 0.0", 28, (uint64_t)"speed_threshold needs to be > 0", 31, (void (*)(void **))sub_21023DDB0)))
      {
        abort();
      }
      v177 += 6;
    }
    while ((unint64_t)v177 < a1 + 3472);
    v55 = v230;
    if (*(double *)(a1 + 3488) < 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 233, (uint64_t)"config_.pose_filter_config.transition_config.hysteresis_time_window_in_motion >= 0.0", 84, (uint64_t)"hysteresis window needs to be > 0", 33, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    if (*(double *)(a1 + 3496) < 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 236, (uint64_t)"config_.pose_filter_config.transition_config.transition_window_state_A2B_sec >= 0.0", 83, (uint64_t)"A->B transition time needs to be > 0", 36, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    if (*(_BYTE *)(a1 + 3376)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 242, (uint64_t)"config_.pose_filter_config.pose_filtering_motion_configs[0].user_motion_classifier == PoseFilteringMotionClassifier::UserStationary", 131, (uint64_t)"1st state need to match stationary config", 41, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    if (*(_BYTE *)(a1 + 3424) != 1
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 248, (uint64_t)"config_.pose_filter_config.pose_filtering_motion_configs[1].user_motion_classifier == PoseFilteringMotionClassifier::UserMoving", 127, (uint64_t)"2nd state need to match moving config", 37, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    if (*(double *)(a1 + 3448) <= *(double *)(a1 + 3400)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 254, (uint64_t)"config_.pose_filter_config.pose_filtering_motion_configs[1].gyro_threshold > config_.pose_filter_config.pose_filtering_motion_configs[0].gyro_threshold", 151, (uint64_t)"Gyro thresholds need to be increasing with higher motion", 56, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    if (*(double *)(a1 + 3456) <= *(double *)(a1 + 3408)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 259, (uint64_t)"config_.pose_filter_config.pose_filtering_motion_configs[1].accel_threshold > config_.pose_filter_config.pose_filtering_motion_configs[0].accel_threshold", 153, (uint64_t)"Accel thresholds need to be increasing with higher motion", 57, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    if (*(double *)(a1 + 3464) <= *(double *)(a1 + 3416)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 264, (uint64_t)"config_.pose_filter_config.pose_filtering_motion_configs[1].speed_threshold > config_.pose_filter_config.pose_filtering_motion_configs[0].speed_threshold", 153, (uint64_t)"Speed thresholds need to be increasing with higher motion", 57, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    *(_OWORD *)(a1 + 5144) = 0u;
    *(_OWORD *)(a1 + 5160) = 0u;
    *(_OWORD *)(a1 + 5128) = 0u;
    *((_BYTE *)v231 + 5090) = 0;
    *((_WORD *)v231 + 2544) = 0;
    *(_OWORD *)(a1 + 5104) = v229;
    *(_QWORD *)(a1 + 5120) = 0xBFF0000000000000;
    *(_OWORD *)(a1 + 5208) = 0u;
    *(_OWORD *)(a1 + 5224) = 0u;
    *(_OWORD *)(a1 + 5240) = 0u;
    *((_BYTE *)v231 + 5170) = 0;
    *((_WORD *)v231 + 2584) = 0;
    *(_OWORD *)(a1 + 5184) = v229;
    *(_QWORD *)(a1 + 5200) = 0xBFF0000000000000;
    if (*(_BYTE *)(a1 + 3344))
    {
      if (!*(_BYTE *)(a1 + 3153)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 274, (uint64_t)"!config_.pose_filter_config.enable_predictor_pose_filtering || (config_.pose_smoothing_config.use_prev_prop_states && config_.pose_filter_config.enable_predictor_pose_filtering)", 177, (uint64_t)"predictor pose filtering needs use_prev_prop_states option to be true!", 70, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_251;
      }
    }
  }
LABEL_194:
  v185 = (_BYTE *)(a1 + 3504);
  v186 = v231 + 528;
  if (*v228)
  {
    if (*v55)
      goto LABEL_200;
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 280, (uint64_t)"!config_.imu_filter_switch_config.enable_imu_filter_motion_switch || (config_.imu_filter_switch_config.enable_imu_filter_motion_switch && pose_smoothing_imu_filter_data_.predictor_imu_filtering_config.imu_filter_enable)", 219, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_251;
    }
    v185 = (_BYTE *)(a1 + 3504);
    v186 = v231 + 528;
    if (*v228)
    {
LABEL_200:
      if ((*(_QWORD *)(a1 + 2328) != 30 || *(_QWORD *)(a1 + 2336) != 20)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 318, (uint64_t)"!config_.imu_filter_switch_config.enable_imu_filter_motion_switch || (config_.imu_filter_switch_config.enable_imu_filter_motion_switch && config_.imu_extrapolation_config.gyro_filter_config.num_taps == kNumGyroIMUPredTaps && config_.imu_extrapolation_config.gyro_filter_config.max_pred_samples == kNumGyroIMUPredOutputs)", 320, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_252;
      }
    }
  }
  if (*(_BYTE *)(a1 + 2536) == 4
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 322, (uint64_t)"config_.imu_extrapolation_config.accel_filter_config.RLS_filter_mode != RLSTrainingFilterModes::MotionIMUFilteringSmooth", 120, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_252;
  }
  if (*v185 && *v55)
  {
    v187 = (char *)operator new(0x2260uLL);
    v188 = v187;
    v189 = v231 + 510;
    v190 = -8800;
    do
    {
      v191 = &v187[v190];
      *(_OWORD *)(v191 + 8808) = v229;
      *(_OWORD *)(v191 + 8824) = v229;
      *(_OWORD *)(v191 + 8840) = v229;
      *((_QWORD *)v191 + 1100) = 0;
      *(_OWORD *)(v191 + 8856) = v229;
      *(_OWORD *)(v191 + 8872) = v229;
      v190 += 88;
    }
    while (v190);
    v192 = v187 + 8800;
    v193 = *v186;
    *(_QWORD *)(a1 + 4080) = 0;
    *v189 = v229;
    *((_OWORD *)v231 + 256) = v229;
    *((_OWORD *)v231 + 257) = v229;
    *((_OWORD *)v231 + 258) = v229;
    v194 = xmmword_21030D330;
    *((_OWORD *)v231 + 259) = v229;
    *((_OWORD *)v231 + 260) = xmmword_21030D330;
    if (v193)
    {
      v195 = *(void **)(a1 + 4184);
      if (v195)
      {
        *(_QWORD *)(a1 + 4192) = v195;
        operator delete(v195);
        v194 = xmmword_21030D330;
        *(_QWORD *)(a1 + 4184) = 0;
        *(_QWORD *)(a1 + 4192) = 0;
        *(_QWORD *)(a1 + 4200) = 0;
      }
      *(_QWORD *)(a1 + 4184) = v188;
      *(_QWORD *)(a1 + 4192) = v192;
      *(_QWORD *)(a1 + 4200) = v192;
      *(_QWORD *)(a1 + 4208) = 0;
      *(_QWORD *)(a1 + 4224) = 0;
      *(_QWORD *)(a1 + 4216) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 4184) = v187;
      *(_QWORD *)(a1 + 4192) = v192;
      *(_QWORD *)(a1 + 4200) = v192;
      *(_QWORD *)(a1 + 4208) = 0;
      *(_QWORD *)(a1 + 4224) = 0;
      *(_QWORD *)(a1 + 4216) = 0;
      *v186 = 1;
    }
    *(_WORD *)(a1 + 4080) = 0;
    *v189 = v229;
    *((_OWORD *)v231 + 256) = v229;
    *((_OWORD *)v231 + 257) = v229;
    *((_OWORD *)v231 + 258) = v229;
    *((_OWORD *)v231 + 259) = v229;
    *((_OWORD *)v231 + 260) = v194;
    *(_QWORD *)(a1 + 4208) = 0;
    *(_QWORD *)(a1 + 4224) = 0;
    *(_QWORD *)(a1 + 4216) = 0;
    v196 = *(_QWORD *)(a1 + 3704);
    v197 = *(_DWORD *)(a1 + 3672);
    if (v197 != *(_DWORD *)(a1 + 1120) || *(_DWORD *)(a1 + 3696) != *(_DWORD *)(a1 + 1144))
    {
      if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUIIRFilter.cpp", 137, (uint64_t)"feedforward_cfs.size() == feedforward_cfs_.size() && feedback_cfs.size() == feedback_cfs_.size()", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        v197 = *(_DWORD *)(a1 + 1120);
        goto LABEL_216;
      }
LABEL_252:
      abort();
    }
LABEL_216:
    if (v197)
    {
      v198 = *(_QWORD *)(a1 + 1104);
      v199 = *(uint64_t **)(a1 + 3656);
      v200 = (v197 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v200 < 3)
      {
        v201 = *(_QWORD **)(a1 + 1104);
      }
      else
      {
        v201 = *(_QWORD **)(a1 + 1104);
        if ((unint64_t)(v198 - (_QWORD)v199) >= 0x20)
        {
          v202 = v200 + 1;
          v203 = v202 & 0x3FFFFFFFFFFFFFFCLL;
          v204 = &v199[v203];
          v201 = (_QWORD *)(v198 + v203 * 8);
          v205 = (_OWORD *)(v198 + 16);
          v206 = (__int128 *)(v199 + 2);
          v207 = v202 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v208 = *v206;
            *(v205 - 1) = *(v206 - 1);
            *v205 = v208;
            v205 += 2;
            v206 += 2;
            v207 -= 4;
          }
          while (v207);
          v199 = v204;
          if (v202 == (v202 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_226;
        }
      }
      v209 = (_QWORD *)(v198 + 8 * v197);
      do
      {
        v210 = *v199++;
        *v201++ = v210;
      }
      while (v201 != v209);
    }
LABEL_226:
    v211 = *(unsigned int *)(a1 + 1144);
    if ((_DWORD)v211)
    {
      v212 = *(_QWORD *)(a1 + 1128);
      v213 = *(uint64_t **)(a1 + 3680);
      v214 = (v211 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v214 < 3)
      {
        v215 = *(_QWORD **)(a1 + 1128);
      }
      else
      {
        v215 = *(_QWORD **)(a1 + 1128);
        if ((unint64_t)(v212 - (_QWORD)v213) >= 0x20)
        {
          v216 = v214 + 1;
          v217 = v216 & 0x3FFFFFFFFFFFFFFCLL;
          v218 = &v213[v217];
          v215 = (_QWORD *)(v212 + v217 * 8);
          v219 = (_OWORD *)(v212 + 16);
          v220 = (__int128 *)(v213 + 2);
          v221 = v216 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v222 = *v220;
            *(v219 - 1) = *(v220 - 1);
            *v219 = v222;
            v219 += 2;
            v220 += 2;
            v221 -= 4;
          }
          while (v221);
          v213 = v218;
          if (v216 == (v216 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_236;
        }
      }
      v223 = (_QWORD *)(v212 + 8 * v211);
      do
      {
        v224 = *v213++;
        *v215++ = v224;
      }
      while (v215 != v223);
    }
LABEL_236:
    *(_QWORD *)(a1 + 1200) = v196;
    if (*(double *)(a1 + 3536) <= 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 359, (uint64_t)"config_.imu_filter_switch_config.transition_times.TransitionMoving2Stationary_window > 0.0", 90, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3528) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 362, (uint64_t)"config_.imu_filter_switch_config.transition_times.TransitionStationary2Moving_window > 0.0", 90, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3544) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp",
           364,
           (uint64_t)"config_.imu_filter_switch_config.transition_times .stationary_window_to_switch_from_motion > 0.0",
           96,
           (uint64_t)"",
           0,
           (void (*)(void **))sub_21023DDB0)
      || *(double *)(a1 + 3552) <= 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 368, (uint64_t)"config_.imu_filter_switch_config.transition_times.TransitionMoving2Walking_window > 0.0", 87, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3560) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 371, (uint64_t)"config_.imu_filter_switch_config.transition_times.TransitionWalking2Moving_window > 0.0", 87, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3568) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp",
           373,
           (uint64_t)"config_.imu_filter_switch_config.transition_times.walking_mode_time_window > 0.0",
           80,
           (uint64_t)"",
           0,
           (void (*)(void **))sub_21023DDB0)
      || *(double *)(a1 + 3584) <= 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 375, (uint64_t)"config_.imu_filter_switch_config.transition_times.enter_walking_mode_time_window > 0.0", 86, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_252;
    }
  }
  return a1;
}

void sub_20F1D2BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _BYTE *a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;

  MEMORY[0x212BC6398](v19, 0x1080C400823FE03);
  sub_20F1D2E40((uint64_t **)(v18 + 5568));
  sub_20F1D2E40((uint64_t **)(v18 + 5560));
  sub_20F1D2DFC(a13);
  v23 = *(void **)(v18 + 5472);
  if (v23)
  {
    *(_QWORD *)(v18 + 5480) = v23;
    operator delete(v23);
  }
  if (*a18)
  {
    v24 = *(void **)(v18 + 4184);
    if (v24)
    {
      *(_QWORD *)(v18 + 4192) = v24;
      operator delete(v24);
    }
  }
  sub_20E95BF50(v18 + 3936);
  sub_20F1D2EA8(a14);
  sub_20F1DF3D4(a10);
  sub_20E86A618(a9);
  sub_20F1DF4CC((_QWORD *)(*(_QWORD *)(v21 - 104) + 1960));
  sub_20EAE90CC(v20);
  sub_20F0E0C74(v18 + 880);
  v25 = *(void **)(v18 + 208);
  if (v25)
  {
    *(_QWORD *)(v18 + 216) = v25;
    operator delete(v25);
    v28 = *(uint64_t **)(v21 - 104);
    v27 = *v28;
    *v28 = 0;
    if (!v27)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else
  {
    v26 = *(uint64_t **)(v21 - 104);
    v27 = *v26;
    *v26 = 0;
    if (!v27)
      goto LABEL_8;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(a1);
}

_QWORD **sub_20F1D2DFC(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_20F1D0908(v2);
    MEMORY[0x212BC6398](v3, 0x1080C400823FE03);
  }
  return a1;
}

uint64_t **sub_20F1D2E40(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = sub_20F1A6B94(v3);
      MEMORY[0x212BC6398](v4, 0x10B2C40E1D7A2FBLL);
    }
    MEMORY[0x212BC6398](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t sub_20F1D2EA8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 160))
  {
    v2 = *(void **)(a1 + 96);
    if (v2)
    {
      *(_QWORD *)(a1 + 104) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 48);
    if (v3)
    {
      *(_QWORD *)(a1 + 56) = v3;
      operator delete(v3);
    }
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_20F1D2F00(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  *(_QWORD *)a1 = &off_24C9FA8C8;
  v2 = *(uint64_t **)(a1 + 5568);
  *(_QWORD *)(a1 + 5568) = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = sub_20F1A6B94(v3);
      MEMORY[0x212BC6398](v4, 0x10B2C40E1D7A2FBLL);
    }
    MEMORY[0x212BC6398](v2, 0x20C4093837F09);
  }
  v5 = *(uint64_t **)(a1 + 5560);
  *(_QWORD *)(a1 + 5560) = 0;
  if (v5)
  {
    v6 = *v5;
    *v5 = 0;
    if (v6)
    {
      v7 = sub_20F1A6B94(v6);
      MEMORY[0x212BC6398](v7, 0x10B2C40E1D7A2FBLL);
    }
    MEMORY[0x212BC6398](v5, 0x20C4093837F09);
  }
  v8 = *(_QWORD **)(a1 + 5552);
  *(_QWORD *)(a1 + 5552) = 0;
  if (v8)
  {
    v9 = sub_20F1D0908(v8);
    MEMORY[0x212BC6398](v9, 0x1080C400823FE03);
  }
  v10 = *(void **)(a1 + 5472);
  if (v10)
  {
    *(_QWORD *)(a1 + 5480) = v10;
    operator delete(v10);
  }
  if (*(_BYTE *)(a1 + 4232))
  {
    v11 = *(void **)(a1 + 4184);
    if (v11)
    {
      *(_QWORD *)(a1 + 4192) = v11;
      operator delete(v11);
    }
  }
  v12 = *(void **)(a1 + 3984);
  if (v12)
  {
    *(_QWORD *)(a1 + 3992) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 3960);
  if (v13)
  {
    *(_QWORD *)(a1 + 3968) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 3936);
  if (v14)
  {
    *(_QWORD *)(a1 + 3944) = v14;
    operator delete(v14);
  }
  if (*(_BYTE *)(a1 + 3928))
  {
    v15 = *(void **)(a1 + 3864);
    if (v15)
    {
      *(_QWORD *)(a1 + 3872) = v15;
      operator delete(v15);
    }
    v16 = *(void **)(a1 + 3816);
    if (v16)
    {
      *(_QWORD *)(a1 + 3824) = v16;
      operator delete(v16);
    }
    v17 = *(void **)(a1 + 3768);
    if (v17)
    {
      *(_QWORD *)(a1 + 3776) = v17;
      operator delete(v17);
    }
  }
  sub_20F1DF3D4(a1 + 3720);
  v18 = *(_QWORD *)(a1 + 3680);
  if (v18)
    MEMORY[0x212BC6368](v18, 0x1000C8000313F17);
  v19 = *(_QWORD *)(a1 + 3656);
  if (v19)
    MEMORY[0x212BC6368](v19, 0x1000C8000313F17);
  v20 = *(_QWORD *)(a1 + 3624);
  if (v20)
    MEMORY[0x212BC6368](v20, 0x1000C8000313F17);
  v21 = *(_QWORD *)(a1 + 3600);
  if (v21)
    MEMORY[0x212BC6368](v21, 0x1000C8000313F17);
  v22 = *(void **)(a1 + 3224);
  if (v22)
  {
    *(_QWORD *)(a1 + 3232) = v22;
    operator delete(v22);
  }
  sub_20F1DF4CC((_QWORD *)(a1 + 1968));
  v23 = *(void **)(a1 + 1920);
  if (v23)
  {
    *(_QWORD *)(a1 + 1928) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(a1 + 1872);
  if (v24)
  {
    *(_QWORD *)(a1 + 1880) = v24;
    operator delete(v24);
  }
  v25 = *(void **)(a1 + 1800);
  if (v25)
  {
    *(_QWORD *)(a1 + 1808) = v25;
    operator delete(v25);
  }
  if (*(_BYTE *)(a1 + 1784))
    sub_20EAF58EC(a1 + 1424);
  if (*(_BYTE *)(a1 + 1416))
    sub_20EAF58EC(a1 + 1056);
  v26 = *(void **)(a1 + 952);
  if (v26)
  {
    *(_QWORD *)(a1 + 960) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(a1 + 928);
  if (v27)
  {
    *(_QWORD *)(a1 + 936) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(a1 + 904);
  if (v28)
  {
    *(_QWORD *)(a1 + 912) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(a1 + 880);
  if (v29)
  {
    *(_QWORD *)(a1 + 888) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(a1 + 208);
  if (v30)
  {
    *(_QWORD *)(a1 + 216) = v30;
    operator delete(v30);
  }
  v31 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  return a1;
}

void sub_20F1D31C0(uint64_t a1)
{
  sub_20F1D2F00(a1);
  JUMPOUT(0x212BC6398);
}

void *sub_20F1D31E4(_QWORD *a1, const void *a2)
{
  void *result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = memmove((void *)(*a1 + 88 * a1[4]), a2, 0x58uLL);
  v4 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 3);
  v5 = a1[5];
  v6 = a1[4] + 1;
  if (v6 >= v4)
    v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 3);
  else
    v7 = 0;
  a1[4] = v6 - v7;
  if (v5 == v4)
  {
    v8 = a1[3] + 1;
    if (v8 < v4)
      v4 = 0;
    a1[3] = v8 - v4;
  }
  else
  {
    a1[5] = v5 + 1;
  }
  return result;
}

void sub_20F1D3284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  double v12;
  double v20;
  double v21;
  int v22;
  double v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  double v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  char v42;
  double v44;
  double v45;
  __int16 v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _OWORD *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  double v72;
  char v73;
  double v75;
  double v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  _QWORD *v94;
  uint64_t v95;
  void *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  double v104;
  double v105;
  __int16 v106;
  __int16 v109;
  double v113;
  double v114;
  double v115;
  double v117;
  _BOOL4 v118;
  __int128 v119;
  uint64_t v120;

  v4 = a1 + 4088;
  if (!*(_BYTE *)(a1 + 1008))
    goto LABEL_22;
  if (*(_BYTE *)(a1 + 3504))
  {
    if (!*(_BYTE *)(a1 + 4232)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 401, (uint64_t)"switch_data.has_value() && \"switch data must created!\"", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3536) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 402, (uint64_t)"cfg.transition_times.TransitionMoving2Stationary_window > 0.0", 61, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3528) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp",
           403,
           (uint64_t)"cfg.transition_times.TransitionStationary2Moving_window > 0.0",
           61,
           (uint64_t)"",
           0,
           (void (*)(void **))sub_21023DDB0)
      || *(double *)(a1 + 3544) <= 0.0
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 404, (uint64_t)"cfg.transition_times.stationary_window_to_switch_from_motion > 0.0", 66, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3552) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 405, (uint64_t)"cfg.transition_times.TransitionMoving2Walking_window > 0.0", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| *(double *)(a1 + 3560) <= 0.0&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp",
           406,
           (uint64_t)"cfg.transition_times.TransitionWalking2Moving_window > 0.0",
           58,
           (uint64_t)"",
           0,
           (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_176;
    }
    v5 = *(double *)a2;
    v6 = *(double *)(a1 + 4176);
    if (*(double *)a2 > v6 || v6 == -1.0)
    {
      *(double *)(a1 + 4176) = v5;
      v12 = *(double *)(a1 + 3512);
      if ((v12 < 0.0 || v12 > 1.0)
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2890, (uint64_t)"gyro_gain >= 0.0 && gyro_gain <= 1.0", 36, (uint64_t)"Gyro avg gain must be in [0,1]!", 31, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_176;
      }
      _Q3 = *(_OWORD *)(a2 + 8);
      _D5 = *(_QWORD *)(a2 + 16);
      __asm { FMLA            D4, D5, V3.D[1] }
      v20 = v12 * *(double *)(a1 + 4168) + (1.0 - v12) * (_D4 + *(double *)(a2 + 24) * *(double *)(a2 + 24));
      *(double *)(a1 + 4168) = v20;
      v21 = *(double *)(a1 + 3520);
      if (v20 <= v21)
      {
        v22 = *(unsigned __int8 *)(a1 + 4080);
        if (!*(_BYTE *)(a1 + 4080))
          goto LABEL_17;
        v23 = *(double *)(a1 + 4128);
        goto LABEL_43;
      }
      *(double *)(a1 + 4128) = v5;
      v22 = *(unsigned __int8 *)(a1 + 4080);
      v23 = v5;
      if (*(_BYTE *)(a1 + 4080))
      {
LABEL_43:
        switch(v22)
        {
          case 1:
            if (v5 <= v23 + *(double *)(a1 + 3544))
            {
              v72 = COERCE_DOUBLE(sub_20F1C5740(*(_QWORD **)(a1 + 8), v5, *(double *)(a1 + 3584)));
              if (!v73 || *(double *)(a1 + 3592) >= v72)
                goto LABEL_17;
              *(_WORD *)(a1 + 4080) = 0;
              *(_QWORD *)(a1 + 4088) = 0xBFF0000000000000;
              __asm { FMOV            V0.2D, #-1.0 }
              *(_OWORD *)(a1 + 4096) = _Q0;
              *(_OWORD *)(a1 + 4112) = _Q0;
              *(_QWORD *)(a1 + 4160) = 0xBFF0000000000000;
              *(double *)(a1 + 4136) = v5;
              v75 = *(double *)(a1 + 3552);
              v76 = v5 + v75;
              *(double *)(a1 + 4144) = v5 + v75;
              *(double *)(a1 + 4152) = v5;
              if (v75 <= 0.0)
              {
                if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 586, (uint64_t)"cfg.transition_times.TransitionMoving2Walking_window > 0.0", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_176;
                }
                v75 = *(double *)(a1 + 3552);
                v76 = v5 + v75;
              }
              *(double *)(a1 + 4160) = 1.0 / v75;
              *(double *)(a1 + 4112) = v76;
              v46 = 262;
LABEL_76:
              *(_WORD *)(a1 + 4080) = v46;
              v47 = (uint64_t *)(a1 + 4184);
              goto LABEL_175;
            }
            v24 = (uint64_t *)(a1 + 4184);
            if (*(_QWORD *)(a1 + 4224))
            {
              v25 = *(_QWORD *)(a1 + 4216);
              if (v25)
              {
                v26 = *v24;
              }
              else
              {
                v26 = *(_QWORD *)(a1 + 4184);
                v25 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 4192) - v26) >> 3);
              }
              if (v5 <= *(double *)(v26 + 88 * v25 - 32))
                goto LABEL_17;
            }
            *(_WORD *)(a1 + 4080) = 0;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)v4 = _Q0;
            *(_QWORD *)(a1 + 4104) = 0xBFF0000000000000;
            *(_OWORD *)(a1 + 4112) = _Q0;
            *(_QWORD *)(a1 + 4160) = 0xBFF0000000000000;
            *(double *)(a1 + 4136) = v5;
            v104 = *(double *)(a1 + 3536);
            v105 = v5 + v104;
            *(double *)(a1 + 4144) = v5 + v104;
            *(double *)(a1 + 4152) = v5;
            if (v104 <= 0.0)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 560, (uint64_t)"cfg.transition_times.TransitionMoving2Stationary_window > 0.0", 61, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
              {
                goto LABEL_176;
              }
              v104 = *(double *)(a1 + 3536);
              v105 = v5 + v104;
            }
            *(double *)(a1 + 4160) = 1.0 / v104;
            *(double *)(a1 + 4096) = v105;
            v106 = 259;
            goto LABEL_174;
          case 2:
            v41 = COERCE_DOUBLE(sub_20F1C5740(*(_QWORD **)(a1 + 8), v5, *(double *)(a1 + 3568)));
            if (v42 && *(double *)(a1 + 3576) < v41)
              goto LABEL_17;
            *(_WORD *)(a1 + 4080) = 0;
            *(_QWORD *)(a1 + 4088) = 0xBFF0000000000000;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)(a1 + 4096) = _Q0;
            *(_OWORD *)(a1 + 4112) = _Q0;
            *(_QWORD *)(a1 + 4160) = 0xBFF0000000000000;
            *(double *)(a1 + 4136) = v5;
            v44 = *(double *)(a1 + 3560);
            v45 = v5 + v44;
            *(double *)(a1 + 4144) = v5 + v44;
            *(double *)(a1 + 4152) = v5;
            if (v44 > 0.0)
              goto LABEL_75;
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 615, (uint64_t)"cfg.transition_times.TransitionWalking2Moving_window > 0.0", 58, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
            {
              goto LABEL_176;
            }
            v44 = *(double *)(a1 + 3560);
            v45 = v5 + v44;
LABEL_75:
            *(double *)(a1 + 4160) = 1.0 / v44;
            *(double *)(a1 + 4120) = v45;
            v46 = 519;
            goto LABEL_76;
          case 3:
            if (v5 >= *(double *)(a1 + 4096))
            {
              v77 = (uint64_t *)(a1 + 4184);
              if (!*(_QWORD *)(a1 + 4224)
                || ((v78 = *(_QWORD *)(a1 + 4216)) == 0
                  ? (v79 = *(_QWORD *)(a1 + 4184), v78 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 4192) - v79) >> 3))
                  : (v79 = *v77),
                    v5 > *(double *)(v79 + 88 * v78 - 32)))
              {
                __asm { FMOV            V0.2D, #-1.0 }
                *(_OWORD *)v4 = _Q0;
                *(_QWORD *)(a1 + 4104) = 0xBFF0000000000000;
                *(_OWORD *)(a1 + 4112) = _Q0;
                *(_OWORD *)(a1 + 4144) = _Q0;
                *(_QWORD *)(a1 + 4160) = 0xBFF0000000000000;
                *(_WORD *)(a1 + 4080) = 768;
                *(double *)(a1 + 4136) = v5;
                sub_20F1D31E4(v77, (const void *)(a1 + 4080));
                sub_20F3F09D4(a1 + 1056, a1 + 3656, a1 + 3680, *(double *)(a1 + 3704));
              }
            }
            else if (v20 > v21)
            {
              v24 = (uint64_t *)(a1 + 4184);
              if (!*(_QWORD *)(a1 + 4224)
                || ((v48 = *(_QWORD *)(a1 + 4216)) == 0
                  ? (v49 = *(_QWORD *)(a1 + 4184), v48 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 4192) - v49) >> 3))
                  : (v49 = *v24),
                    v5 > *(double *)(v49 + 88 * v48 - 32)))
              {
                v113 = *(double *)(a1 + 4136);
                v114 = *(double *)(a1 + 4144);
                v115 = v5 - v113;
                if (v5 - v113 <= 0.0
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 507, (uint64_t)"time_in_transition_state > 0.0", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v114 <= v113&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 508, (uint64_t)"old_state.state_timestamp_end > old_state.state_timestamp_start", 63, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0)|| v114 != *(double *)(a1 + 4096)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp",
                       511,
                       (uint64_t)"ExactlyEqual(old_state.state_timestamp_end, switch_data->state_data.timestamp_end_Transi"
                                "tionMoving2Stationary)",
                       110,
                       (uint64_t)"",
                       0,
                       (void (*)(void **))sub_21023DDB0))
                {
                  goto LABEL_176;
                }
                __asm { FMOV            V0.2D, #-1.0 }
                *(_OWORD *)v4 = _Q0;
                *(_OWORD *)(a1 + 4112) = _Q0;
                *(double *)(a1 + 4136) = v5;
                *(double *)(a1 + 4144) = v5 + v115;
                *(double *)(a1 + 4152) = v5 - (v114 - v5);
                *(double *)(a1 + 4160) = 1.0 / (v114 - v113);
                *(double *)(a1 + 4104) = v5 + v115;
                v106 = 773;
LABEL_174:
                *(_WORD *)(a1 + 4080) = v106;
                v47 = v24;
LABEL_175:
                sub_20F1D31E4(v47, (const void *)(a1 + 4080));
              }
            }
            goto LABEL_17;
          case 4:
            if (v5 < *(double *)(a1 + 4088))
              goto LABEL_17;
            v50 = *(_QWORD *)(a1 + 4216);
            if (*(_QWORD *)(a1 + 4224))
            {
              v51 = *(_QWORD *)(a1 + 4184);
              if (v50)
                v52 = *(_QWORD *)(a1 + 4216);
              else
                v52 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 4192) - v51) >> 3);
              if (v5 <= *(double *)(v51 + 88 * v52 - 32))
                goto LABEL_17;
            }
            else
            {
              v51 = *(_QWORD *)(a1 + 4184);
            }
            *(_QWORD *)(a1 + 4088) = 0xBFF0000000000000;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)(a1 + 4096) = _Q0;
            *(_OWORD *)(a1 + 4112) = _Q0;
            *(_OWORD *)(a1 + 4144) = _Q0;
            *(_QWORD *)(a1 + 4160) = 0xBFF0000000000000;
            *(_WORD *)(a1 + 4080) = 1025;
            v97 = (void *)(v51 + 88 * v50);
            *(double *)(a1 + 4136) = v5;
            goto LABEL_134;
          case 5:
            if (v5 < *(double *)(a1 + 4104))
              goto LABEL_17;
            v47 = (uint64_t *)(a1 + 4184);
            if (*(_QWORD *)(a1 + 4224))
            {
              v53 = *(_QWORD *)(a1 + 4216);
              if (v53)
              {
                v54 = *v47;
              }
              else
              {
                v54 = *(_QWORD *)(a1 + 4184);
                v53 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 4192) - v54) >> 3);
              }
              if (v5 <= *(double *)(v54 + 88 * v53 - 32))
                goto LABEL_17;
            }
            *(_QWORD *)(a1 + 4088) = 0xBFF0000000000000;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)(a1 + 4096) = _Q0;
            *(_OWORD *)(a1 + 4112) = _Q0;
            *(_OWORD *)(a1 + 4144) = _Q0;
            *(_QWORD *)(a1 + 4160) = 0xBFF0000000000000;
            v109 = 1281;
            goto LABEL_161;
          case 6:
            if (v5 < *(double *)(a1 + 4112))
              goto LABEL_17;
            v47 = (uint64_t *)(a1 + 4184);
            if (*(_QWORD *)(a1 + 4224))
            {
              v55 = *(_QWORD *)(a1 + 4216);
              if (v55)
              {
                v56 = *v47;
              }
              else
              {
                v56 = *(_QWORD *)(a1 + 4184);
                v55 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 4192) - v56) >> 3);
              }
              if (v5 <= *(double *)(v56 + 88 * v55 - 32))
                goto LABEL_17;
            }
            *(_QWORD *)(a1 + 4088) = 0xBFF0000000000000;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)(a1 + 4096) = _Q0;
            *(_OWORD *)(a1 + 4112) = _Q0;
            *(_OWORD *)(a1 + 4144) = _Q0;
            *(_QWORD *)(a1 + 4160) = 0xBFF0000000000000;
            v109 = 1538;
            goto LABEL_161;
          case 7:
            if (v5 < *(double *)(a1 + 4120))
              goto LABEL_17;
            v47 = (uint64_t *)(a1 + 4184);
            if (*(_QWORD *)(a1 + 4224))
            {
              v57 = *(_QWORD *)(a1 + 4216);
              if (v57)
              {
                v58 = *v47;
              }
              else
              {
                v58 = *(_QWORD *)(a1 + 4184);
                v57 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 4192) - v58) >> 3);
              }
              if (v5 <= *(double *)(v58 + 88 * v57 - 32))
                goto LABEL_17;
            }
            *(_QWORD *)(a1 + 4088) = 0xBFF0000000000000;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)(a1 + 4096) = _Q0;
            *(_OWORD *)(a1 + 4112) = _Q0;
            *(_OWORD *)(a1 + 4144) = _Q0;
            *(_QWORD *)(a1 + 4160) = 0xBFF0000000000000;
            v109 = 1793;
LABEL_161:
            *(_WORD *)(a1 + 4080) = v109;
            *(double *)(a1 + 4136) = v5;
            goto LABEL_175;
          default:
            goto LABEL_17;
        }
      }
      if (*(_QWORD *)(a1 + 4224))
      {
        v39 = *(_QWORD *)(a1 + 4216);
        v40 = *(_QWORD *)(a1 + 4184);
        if (!v39)
          v39 = 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 4192) - v40) >> 3);
        if (v5 <= *(double *)(v40 + 88 * v39 - 32))
          goto LABEL_17;
      }
      v59 = *(_QWORD *)(a1 + 3648);
      v60 = *(_DWORD *)(a1 + 3616);
      if (v60 != *(_DWORD *)(a1 + 1120) || *(_DWORD *)(a1 + 3640) != *(_DWORD *)(a1 + 1144))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUIIRFilter.cpp", 137, (uint64_t)"feedforward_cfs.size() == feedforward_cfs_.size() && feedback_cfs.size() == feedback_cfs_.size()", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          goto LABEL_176;
        }
        v60 = *(_DWORD *)(a1 + 1120);
      }
      if (v60)
      {
        v61 = *(_QWORD *)(a1 + 1104);
        v62 = *(uint64_t **)(a1 + 3600);
        v63 = (v60 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v63 < 3)
        {
          v64 = *(_QWORD **)(a1 + 1104);
        }
        else
        {
          v64 = *(_QWORD **)(a1 + 1104);
          if ((unint64_t)(v61 - (_QWORD)v62) >= 0x20)
          {
            v65 = v63 + 1;
            v66 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            v67 = &v62[v66];
            v64 = (_QWORD *)(v61 + v66 * 8);
            v68 = (_OWORD *)(v61 + 16);
            v69 = (__int128 *)(v62 + 2);
            v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v69;
              *(v68 - 1) = *(v69 - 1);
              *v68 = v71;
              v68 += 2;
              v69 += 2;
              v70 -= 4;
            }
            while (v70);
            v62 = v67;
            if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_123;
          }
        }
        v80 = (_QWORD *)(v61 + 8 * v60);
        do
        {
          v81 = *v62++;
          *v64++ = v81;
        }
        while (v64 != v80);
      }
LABEL_123:
      v82 = *(unsigned int *)(a1 + 1144);
      if (!(_DWORD)v82)
        goto LABEL_133;
      v83 = *(_QWORD *)(a1 + 1128);
      v84 = *(uint64_t **)(a1 + 3624);
      v85 = (v82 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v85 < 3)
      {
        v86 = *(_QWORD **)(a1 + 1128);
      }
      else
      {
        v86 = *(_QWORD **)(a1 + 1128);
        if ((unint64_t)(v83 - (_QWORD)v84) >= 0x20)
        {
          v87 = v85 + 1;
          v88 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          v89 = &v84[v88];
          v86 = (_QWORD *)(v83 + v88 * 8);
          v90 = (_OWORD *)(v83 + 16);
          v91 = (__int128 *)(v84 + 2);
          v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v93 = *v91;
            *(v90 - 1) = *(v91 - 1);
            *v90 = v93;
            v90 += 2;
            v91 += 2;
            v92 -= 4;
          }
          while (v92);
          v84 = v89;
          if (v87 == (v87 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_133:
            *(_QWORD *)(a1 + 1200) = v59;
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)(a1 + 4096) = _Q0;
            *(_OWORD *)(a1 + 4112) = _Q0;
            *(double *)(a1 + 4136) = v5;
            *(_QWORD *)&_Q0 = *(_QWORD *)(a1 + 3528);
            *(double *)(a1 + 4144) = v5 + *(double *)&_Q0;
            *(double *)(a1 + 4152) = v5;
            *(double *)(a1 + 4160) = 1.0 / *(double *)&_Q0;
            *(double *)(a1 + 4088) = v5 + *(double *)&_Q0;
            *(_WORD *)(a1 + 4080) = 4;
            v97 = (void *)(*(_QWORD *)(a1 + 4184) + 88 * *(_QWORD *)(a1 + 4216));
LABEL_134:
            memmove(v97, (const void *)(a1 + 4080), 0x58uLL);
            v98 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 4192) - *(_QWORD *)(a1 + 4184)) >> 3);
            v99 = *(_QWORD *)(a1 + 4216) + 1;
            if (v99 >= v98)
              v100 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 4192) - *(_QWORD *)(a1 + 4184)) >> 3);
            else
              v100 = 0;
            *(_QWORD *)(a1 + 4216) = v99 - v100;
            v101 = *(_QWORD *)(a1 + 4224);
            if (v101 == v98)
            {
              v102 = *(_QWORD *)(a1 + 4208) + 1;
              if (v102 < v98)
                v98 = 0;
              *(_QWORD *)(a1 + 4208) = v102 - v98;
            }
            else
            {
              *(_QWORD *)(a1 + 4224) = v101 + 1;
            }
            goto LABEL_17;
          }
        }
      }
      v94 = (_QWORD *)(v83 + 8 * v82);
      do
      {
        v95 = *v84++;
        *v86++ = v95;
      }
      while (v86 != v94);
      goto LABEL_133;
    }
  }
LABEL_17:
  if (*(_BYTE *)(a1 + 1008))
  {
    v7 = *(double *)a2;
    v119 = *(_OWORD *)(a2 + 8);
    v120 = *(_QWORD *)(a2 + 24);
    v118 = 0;
    if (sub_20F3EB2B4((uint64_t *)(a1 + 1056), &v119, &v118, v7, 100.0))
    {
      *(_QWORD *)(a1 + 1904) = 0;
      *(_QWORD *)(a1 + 1896) = 0;
      *(_QWORD *)(a1 + 1912) = 0;
      v117 = -1.0;
      v8 = *(_QWORD **)(a1 + 8);
      if (v8[30])
      {
        v9 = v8[29];
        if (v9)
        {
          v10 = v8[25];
        }
        else
        {
          v27 = v8 + 25;
          v10 = v8[25];
          v9 = (v27[1] - v10) >> 5;
        }
        v28 = v10 + 32 * v9;
        v29 = *(double *)(v28 - 32);
        v30 = *(_OWORD *)(v28 - 24);
        v31 = *(_QWORD *)(v28 - 8);
        v32 = *(_QWORD *)(a1 + 1872);
        *(double *)v32 = v29;
        *(_QWORD *)(v32 + 24) = v31;
        *(_OWORD *)(v32 + 8) = v30;
        v33 = (uint64_t)(*(_QWORD *)(a1 + 1880) - *(_QWORD *)(a1 + 1872)) >> 5;
        v34 = *(_QWORD *)(a1 + 1904) + 1;
        if (v34 >= v33)
          v35 = (uint64_t)(*(_QWORD *)(a1 + 1880) - *(_QWORD *)(a1 + 1872)) >> 5;
        else
          v35 = 0;
        *(_QWORD *)(a1 + 1904) = v34 - v35;
        v36 = *(_QWORD *)(a1 + 1912);
        if (v36 == v33)
        {
          v37 = *(_QWORD *)(a1 + 1896) + 1;
          if (v37 < v33)
            v33 = 0;
          *(_QWORD *)(a1 + 1896) = v37 - v33;
        }
        else
        {
          *(_QWORD *)(a1 + 1912) = v36 + 1;
        }
        v117 = v29;
      }
      if (v118 && *(_DWORD *)(a1 + 1280) != 1)
      {
        if (sub_20F3EC5F4((uint64_t *)(a1 + 1056), a1 + 3936, &v117, (uint64_t *)(a1 + 1872))
          && *(_QWORD *)(a1 + 1912) != 1)
        {
          v38 = 1;
          do
          {
            (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 1872)+ 32* ((v38 + *(_QWORD *)(a1 + 1896))% (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1880) - *(_QWORD *)(a1 + 1872)) >> 5)));
            ++v38;
          }
          while (v38 != *(_QWORD *)(a1 + 1912));
        }
      }
      else if (sub_20F3EF948((uint64_t *)(a1 + 1056), (_QWORD *)(a1 + 1872), &v117))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
      }
    }
    goto LABEL_23;
  }
LABEL_22:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
LABEL_23:
  if (*(_BYTE *)(v4 + 496))
  {
    if (*(_BYTE *)(v4 + 496) == 1)
    {
      v11 = *(uint64_t **)(a1 + 5560);
      if (!v11)
        return;
      goto LABEL_29;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 386, (uint64_t)"current_slam_mode_ == cv_types::SLAMMode::kRegularSLAM", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
LABEL_176:
      abort();
    }
  }
  v11 = *(uint64_t **)(a1 + 5568);
  if (!v11)
    return;
LABEL_29:
  if (!*(_BYTE *)(v4 + 496))
  {
    if (!*(_BYTE *)(a1 + 3137))
      return;
LABEL_35:
    sub_20F19C85C(*v11, (double *)a2);
    return;
  }
  if (!*(_BYTE *)(a1 + 2292) || !*(_BYTE *)(a1 + 2280) || !*(_BYTE *)(a1 + 2281))
    goto LABEL_35;
}

void sub_20F1D4148(uint64_t a1, uint64_t a2)
{
  double v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  double v21;
  _BOOL4 v22;
  __int128 v23;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 1008))
  {
    v4 = *(double *)a2;
    v23 = *(_OWORD *)(a2 + 8);
    v24 = *(_QWORD *)(a2 + 24);
    v22 = 0;
    if (sub_20F3F11C4((uint64_t *)(a1 + 1424), &v23, &v22, v4, 100.0))
    {
      *(_QWORD *)(a1 + 1952) = 0;
      *(_QWORD *)(a1 + 1944) = 0;
      *(_QWORD *)(a1 + 1960) = 0;
      v21 = -1.0;
      v5 = *(_QWORD **)(a1 + 8);
      if (v5[36])
      {
        v6 = v5[35];
        if (v6)
        {
          v7 = v5[31];
        }
        else
        {
          v8 = v5 + 31;
          v7 = v5[31];
          v6 = (v8[1] - v7) >> 5;
        }
        v9 = v7 + 32 * v6;
        v10 = *(double *)(v9 - 32);
        v11 = *(_OWORD *)(v9 - 24);
        v12 = *(_QWORD *)(v9 - 8);
        v13 = *(_QWORD *)(a1 + 1920);
        *(double *)v13 = v10;
        *(_QWORD *)(v13 + 24) = v12;
        *(_OWORD *)(v13 + 8) = v11;
        v14 = (uint64_t)(*(_QWORD *)(a1 + 1928) - *(_QWORD *)(a1 + 1920)) >> 5;
        v15 = *(_QWORD *)(a1 + 1952) + 1;
        if (v15 >= v14)
          v16 = (uint64_t)(*(_QWORD *)(a1 + 1928) - *(_QWORD *)(a1 + 1920)) >> 5;
        else
          v16 = 0;
        *(_QWORD *)(a1 + 1952) = v15 - v16;
        v17 = *(_QWORD *)(a1 + 1960);
        if (v17 == v14)
        {
          v18 = *(_QWORD *)(a1 + 1944) + 1;
          if (v18 < v14)
            v14 = 0;
          *(_QWORD *)(a1 + 1944) = v18 - v14;
        }
        else
        {
          *(_QWORD *)(a1 + 1960) = v17 + 1;
        }
        v21 = v10;
      }
      if (v22 && *(_DWORD *)(a1 + 1648) != 1)
      {
        if (sub_20F3F2504((uint64_t *)(a1 + 1424), a1 + 3936, &v21, (uint64_t *)(a1 + 1920))
          && *(_QWORD *)(a1 + 1960) != 1)
        {
          v19 = 1;
          do
          {
            (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 1920)+ 32* ((v19 + *(_QWORD *)(a1 + 1944))% (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 1928) - *(_QWORD *)(a1 + 1920)) >> 5)));
            ++v19;
          }
          while (v19 != *(_QWORD *)(a1 + 1960));
        }
      }
      else if (sub_20F3F5858((uint64_t *)(a1 + 1424), (_QWORD *)(a1 + 1920), &v21))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
      }
    }
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  }
  if (*(_BYTE *)(a1 + 4584))
  {
    if (*(_BYTE *)(a1 + 4584) == 1)
    {
      v20 = *(uint64_t **)(a1 + 5560);
      if (!v20)
        return;
      goto LABEL_31;
    }
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 386, (uint64_t)"current_slam_mode_ == cv_types::SLAMMode::kRegularSLAM", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
  v20 = *(uint64_t **)(a1 + 5568);
  if (!v20)
    return;
LABEL_31:
  if (!*(_BYTE *)(a1 + 4584))
  {
    if (!*(_BYTE *)(a1 + 3137))
      return;
LABEL_37:
    sub_20F19DDE0(*v20, (double *)a2);
    return;
  }
  if (!*(_BYTE *)(a1 + 2292) || !*(_BYTE *)(a1 + 2280) || !*(_BYTE *)(a1 + 2281))
    goto LABEL_37;
}

double sub_20F1D4414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v9;
  _BOOL4 v10;
  char v11;
  char v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int8x16_t v41;
  float64x2_t v42;
  int8x16_t v43;
  double v44;
  float64x2_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  int8x16_t v62;
  float64x2_t v63;
  int8x16_t v64;
  uint64_t v65;
  float64x2_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  float64x2_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  float64x2_t v87;
  _BYTE v88[32];
  __int128 v89;
  _BYTE v90[80];
  __int128 v91;
  uint64_t v92;
  double v93[3];
  float64x2_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;

  v4 = a1 + 4512;
  if (!*(_BYTE *)(a2 + 584))
  {
    v6 = *(unsigned __int8 *)(a1 + 4584);
    v7 = *(unsigned __int8 *)(a2 + 408);
    *(_BYTE *)(a1 + 4584) = v7;
    if (!*(_BYTE *)(a1 + 3129))
      goto LABEL_23;
    v9 = *(double *)(a2 + 440) == *(double *)(a2 + 8) && *(_BYTE *)(a2 + 472) != 0;
    if (v7 == 1)
    {
      v10 = *(_DWORD *)(a2 + 592) > *(_DWORD *)(a1 + 2284);
      v11 = v6 != 1 || v9;
      if ((v11 & 1) != 0)
      {
LABEL_22:
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
LABEL_23:
        *(_QWORD *)(a1 + 2284) = *(_QWORD *)(a2 + 592);
        if (*(_BYTE *)(a1 + 3128))
          v13 = *(_BYTE *)(a2 + 409) == 0;
        else
          v13 = 1;
        v14 = !v13;
        *(_BYTE *)(a1 + 2280) = v14;
        *(_WORD *)(a1 + 2281) = *(_WORD *)(a2 + 410);
        *(_BYTE *)(a1 + 2292) = *(_BYTE *)(a2 + 412);
        *(_BYTE *)(a1 + 2293) = 1;
        v5 = *(unsigned __int8 *)(v4 + 72);
        if (!*(_BYTE *)(v4 + 72))
          goto LABEL_34;
        goto LABEL_30;
      }
    }
    else
    {
      v10 = 0;
      v12 = v6 != v7 || v9;
      if ((v12 & 1) != 0)
        goto LABEL_22;
    }
    if (!v10)
      goto LABEL_23;
    goto LABEL_22;
  }
  v5 = *(unsigned __int8 *)(a1 + 4584);
  if (!*(_BYTE *)(a1 + 4584))
    goto LABEL_34;
LABEL_30:
  if (v5 == 1)
  {
    v15 = a1 + 4240;
    v16 = *(uint64_t **)(a1 + 5560);
    if (!v16)
      goto LABEL_42;
    goto LABEL_35;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 386, (uint64_t)"current_slam_mode_ == cv_types::SLAMMode::kRegularSLAM", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_34:
  v15 = a1 + 4240;
  v16 = *(uint64_t **)(a1 + 5568);
  if (!v16)
    goto LABEL_42;
LABEL_35:
  if (!*(_BYTE *)(v4 + 72))
  {
    if (!*(_BYTE *)(a1 + 3137))
      goto LABEL_42;
    goto LABEL_41;
  }
  if (!*(_BYTE *)(a1 + 2292) || !*(_BYTE *)(a1 + 2280) || !*(_BYTE *)(a1 + 2281))
LABEL_41:
    sub_20F19F364(*v16, a2);
LABEL_42:
  if (*(_BYTE *)(a2 + 912))
  {
    v17 = *(_QWORD *)(a2 + 664);
    v18 = *(_OWORD *)(a2 + 624);
    v19 = *(_QWORD *)(a2 + 656);
    v20 = *(_OWORD *)(a2 + 640);
    v21 = *(_QWORD *)(a2 + 688);
    v22 = *(_OWORD *)(a2 + 672);
    v23 = *(_QWORD *)(a2 + 712);
    v24 = *(_OWORD *)(a2 + 696);
    v25 = *(_QWORD *)(a2 + 736);
    v26 = *(_OWORD *)(a2 + 720);
    v27 = *(_QWORD *)(a2 + 760);
    v28 = *(_OWORD *)(a2 + 744);
    v29 = *(_QWORD *)(a2 + 832);
    v30 = *(_OWORD *)(a2 + 816);
    v31 = *(_OWORD *)(a2 + 800);
    v32 = *(_OWORD *)(a2 + 784);
    v33 = *(_OWORD *)(a2 + 768);
    v34 = *(_QWORD *)(a2 + 904);
    v36 = *(_OWORD *)(a2 + 872);
    v35 = *(_OWORD *)(a2 + 888);
    v38 = *(_OWORD *)(a2 + 840);
    v37 = *(_OWORD *)(a2 + 856);
    *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(v15 + 56) = v18;
    *(_OWORD *)(v15 + 72) = v20;
    *(_QWORD *)(v15 + 88) = v19;
    *(_QWORD *)(a1 + 4336) = v17;
    *(_OWORD *)(v15 + 104) = v22;
    *(_QWORD *)(v15 + 120) = v21;
    *(_OWORD *)(v15 + 128) = v24;
    *(_QWORD *)(v15 + 144) = v23;
    *(_OWORD *)(v15 + 152) = v26;
    *(_QWORD *)(v15 + 168) = v25;
    *(_OWORD *)(v15 + 176) = v28;
    *(_QWORD *)(v15 + 192) = v27;
    *(_OWORD *)(v15 + 200) = v33;
    *(_OWORD *)(v15 + 216) = v32;
    *(_OWORD *)(v15 + 232) = v31;
    *(_OWORD *)(v15 + 248) = v30;
    *(_QWORD *)(v15 + 264) = v29;
    *(_OWORD *)v4 = v38;
    *(_OWORD *)(v4 + 16) = v37;
    *(_OWORD *)(v4 + 32) = v36;
    *(_OWORD *)(v4 + 48) = v35;
    *(_QWORD *)(v4 + 64) = v34;
  }
  if (*(_BYTE *)(v4 + 72) == 1 && (!*(_BYTE *)(a1 + 2292) || !*(_BYTE *)(a1 + 2280) || !*(_BYTE *)(a1 + 2281)))
  {
    if (*(_BYTE *)(a2 + 584))
    {
      memset(&v90[8], 0, 72);
      v56 = *(_OWORD *)(a2 + 504);
      v87 = *(float64x2_t *)(a2 + 488);
      *(_OWORD *)v88 = v56;
      v57 = *(_OWORD *)(a2 + 536);
      *(_OWORD *)&v88[16] = *(_OWORD *)(a2 + 520);
      v89 = v57;
      *(_QWORD *)v90 = *(_QWORD *)(a2 + 552);
      v58 = *(_QWORD *)(a2 + 568);
      *(_QWORD *)&v91 = *(_QWORD *)(a2 + 560);
      *((_QWORD *)&v91 + 1) = v58;
      v92 = *(_QWORD *)(a2 + 576);
      v94 = v87;
      v95 = v56;
      v97 = *(_QWORD *)&v88[24];
      v96 = *(_OWORD *)&v88[8];
      v99 = *(_QWORD *)v90;
      v98 = v57;
      memset(v93, 0, sizeof(v93));
      sub_20E9733B8(&v94, v93);
      v44 = *(double *)(a2 + 480);
      kdebug_trace();
      kdebug_trace();
      if (*(_BYTE *)(a1 + 3130))
      {
        if (*(_BYTE *)(a1 + 2293))
        {
          if (!*(_BYTE *)v15)
          {
            *(_BYTE *)v15 = 1;
            *(_BYTE *)(v15 + 1) = *(_BYTE *)(a1 + 3209);
            *(_QWORD *)(a1 + 4248) = *(_QWORD *)(a1 + 3216);
            *(_QWORD *)(a1 + 4264) = *(_QWORD *)(a1 + 3520);
            *(_QWORD *)(a1 + 4272) = *(_QWORD *)(a1 + 3544);
            *(_BYTE *)(v15 + 16) = *(_BYTE *)(a1 + 2384);
            *(_BYTE *)(a1 + 3209) = 0;
            *(_QWORD *)(a1 + 3216) = 0x3FEB333333333333;
            *(_QWORD *)(a1 + 3520) = 0x3FD3333333333333;
            *(_QWORD *)(a1 + 3544) = 0x3FE0000000000000;
            *(_BYTE *)(a1 + 2384) = 5;
            v59 = *(_QWORD *)(a1 + 8);
            LOBYTE(v94.f64[0]) = 5;
            (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v59 + 32))(v59, &v94);
          }
LABEL_69:
          sub_20F1D4BD0(a1, (uint64_t)&v87, v44);
          return v44;
        }
        if (*(_BYTE *)v15)
        {
          *(_BYTE *)(a1 + 3209) = *(_BYTE *)(v15 + 1);
          *(_QWORD *)(a1 + 3216) = *(_QWORD *)(a1 + 4248);
          *(_QWORD *)(a1 + 3520) = *(_QWORD *)(a1 + 4264);
          *(_QWORD *)(a1 + 3544) = *(_QWORD *)(a1 + 4272);
          *(_BYTE *)(a1 + 2384) = *(_BYTE *)(v15 + 16);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v15 + 16);
          *(_BYTE *)v15 = 0;
        }
      }
    }
    else
    {
      v61 = *(_OWORD *)(a2 + 64);
      v60 = *(_OWORD *)(a2 + 80);
      v62 = *(int8x16_t *)(a2 + 48);
      v63 = *(float64x2_t *)(a2 + 16);
      v64 = vextq_s8(*(int8x16_t *)(a2 + 32), v62, 8uLL);
      *(_QWORD *)v88 = *(_QWORD *)(a2 + 32);
      v87 = v63;
      *(_QWORD *)&v88[24] = v62.i64[1];
      *(int8x16_t *)&v88[8] = v64;
      *(_QWORD *)v90 = v60;
      v89 = v61;
      v94 = 0uLL;
      v95 = 0;
      sub_20E9733B8(&v87, v94.f64);
      v44 = *(double *)(a2 + 8);
      kdebug_trace();
      kdebug_trace();
      if (*(_BYTE *)(a1 + 3130))
      {
        if (*(_BYTE *)(a1 + 2293))
        {
          if (!*(_BYTE *)v15)
          {
            *(_BYTE *)v15 = 1;
            *(_BYTE *)(v15 + 1) = *(_BYTE *)(a1 + 3209);
            *(_QWORD *)(a1 + 4248) = *(_QWORD *)(a1 + 3216);
            *(_QWORD *)(a1 + 4264) = *(_QWORD *)(a1 + 3520);
            *(_QWORD *)(a1 + 4272) = *(_QWORD *)(a1 + 3544);
            *(_BYTE *)(v15 + 16) = *(_BYTE *)(a1 + 2384);
            *(_BYTE *)(a1 + 3209) = 0;
            *(_QWORD *)(a1 + 3216) = 0x3FEB333333333333;
            *(_QWORD *)(a1 + 3520) = 0x3FD3333333333333;
            *(_QWORD *)(a1 + 3544) = 0x3FE0000000000000;
            *(_BYTE *)(a1 + 2384) = 5;
            v65 = *(_QWORD *)(a1 + 8);
            LOBYTE(v87.f64[0]) = 5;
            (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v65 + 32))(v65, &v87);
          }
          v66 = *(float64x2_t *)(a2 + 16);
          v67 = *(_OWORD *)(a2 + 32);
          v68 = *(_OWORD *)(a2 + 48);
          v69 = *(_OWORD *)(a2 + 64);
          v70 = *(_OWORD *)(a2 + 80);
          v71 = *(_OWORD *)(a2 + 96);
          v72 = *(_OWORD *)(a2 + 112);
          v73 = *(_OWORD *)(a2 + 128);
          v74 = *(_OWORD *)(a2 + 144);
          v75 = *(_OWORD *)(a2 + 160);
          v92 = *(_QWORD *)(a2 + 176);
          *(_OWORD *)&v90[64] = v74;
          v91 = v75;
          *(_OWORD *)&v90[32] = v72;
          *(_OWORD *)&v90[48] = v73;
          *(_OWORD *)v90 = v70;
          *(_OWORD *)&v90[16] = v71;
          *(_OWORD *)&v88[16] = v68;
          v89 = v69;
          v87 = v66;
          *(_OWORD *)v88 = v67;
          goto LABEL_69;
        }
        if (*(_BYTE *)v15)
        {
          *(_BYTE *)(a1 + 3209) = *(_BYTE *)(v15 + 1);
          *(_QWORD *)(a1 + 3216) = *(_QWORD *)(a1 + 4248);
          *(_QWORD *)(a1 + 3520) = *(_QWORD *)(a1 + 4264);
          *(_QWORD *)(a1 + 3544) = *(_QWORD *)(a1 + 4272);
          *(_BYTE *)(a1 + 2384) = *(_BYTE *)(v15 + 16);
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v15 + 16);
          *(_BYTE *)v15 = 0;
        }
      }
      v76 = *(float64x2_t *)(a2 + 16);
      v77 = *(_OWORD *)(a2 + 32);
      v78 = *(_OWORD *)(a2 + 48);
      v79 = *(_OWORD *)(a2 + 64);
      v80 = *(_OWORD *)(a2 + 80);
      v81 = *(_OWORD *)(a2 + 96);
      v82 = *(_OWORD *)(a2 + 112);
      v83 = *(_OWORD *)(a2 + 128);
      v84 = *(_OWORD *)(a2 + 144);
      v85 = *(_OWORD *)(a2 + 160);
      v92 = *(_QWORD *)(a2 + 176);
      *(_OWORD *)&v90[64] = v84;
      v91 = v85;
      *(_OWORD *)&v90[32] = v82;
      *(_OWORD *)&v90[48] = v83;
      *(_OWORD *)v90 = v80;
      *(_OWORD *)&v90[16] = v81;
      *(_OWORD *)&v88[16] = v78;
      v89 = v79;
      v87 = v76;
      *(_OWORD *)v88 = v77;
    }
    sub_20F1D6F8C(a1, (__int128 *)&v87, v44);
    return v44;
  }
  if (*(_BYTE *)(a1 + 3130) && *(_BYTE *)v15)
  {
    *(_BYTE *)(a1 + 3209) = *(_BYTE *)(v15 + 1);
    *(_QWORD *)(a1 + 3216) = *(_QWORD *)(a1 + 4248);
    *(_QWORD *)(a1 + 3520) = *(_QWORD *)(a1 + 4264);
    *(_QWORD *)(a1 + 3544) = *(_QWORD *)(a1 + 4272);
    *(_BYTE *)(a1 + 2384) = *(_BYTE *)(v15 + 16);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v15 + 16);
    *(_BYTE *)v15 = 0;
  }
  v40 = *(_OWORD *)(a2 + 64);
  v39 = *(_OWORD *)(a2 + 80);
  v41 = *(int8x16_t *)(a2 + 48);
  v42 = *(float64x2_t *)(a2 + 16);
  v43 = vextq_s8(*(int8x16_t *)(a2 + 32), v41, 8uLL);
  *(_QWORD *)v88 = *(_QWORD *)(a2 + 32);
  v87 = v42;
  *(_QWORD *)&v88[24] = v41.i64[1];
  *(int8x16_t *)&v88[8] = v43;
  *(_QWORD *)v90 = v39;
  v89 = v40;
  v94 = 0uLL;
  v95 = 0;
  sub_20E9733B8(&v87, v94.f64);
  v44 = *(double *)(a2 + 8);
  kdebug_trace();
  kdebug_trace();
  v45 = *(float64x2_t *)(a2 + 16);
  v46 = *(_OWORD *)(a2 + 32);
  v47 = *(_OWORD *)(a2 + 48);
  v48 = *(_OWORD *)(a2 + 64);
  v49 = *(_OWORD *)(a2 + 80);
  v50 = *(_OWORD *)(a2 + 96);
  v51 = *(_OWORD *)(a2 + 112);
  v52 = *(_OWORD *)(a2 + 128);
  v53 = *(_OWORD *)(a2 + 144);
  v54 = *(_OWORD *)(a2 + 160);
  v92 = *(_QWORD *)(a2 + 176);
  *(_OWORD *)&v90[64] = v53;
  v91 = v54;
  *(_OWORD *)&v90[32] = v51;
  *(_OWORD *)&v90[48] = v52;
  *(_OWORD *)v90 = v49;
  *(_OWORD *)&v90[16] = v50;
  *(_OWORD *)&v88[16] = v47;
  v89 = v48;
  v87 = v45;
  *(_OWORD *)v88 = v46;
  sub_20F1D4BD0(a1, (uint64_t)&v87, *(double *)(a2 + 8));
  v55 = *(_BYTE *)(a2 + 1064);
  if (v55)
    v55 = v44 > *(double *)(a2 + 1056) + *(double *)(a1 + 3304);
  if (*(_BYTE *)(a2 + 928))
  {
    if (!*(_BYTE *)(a1 + 3296))
      v55 = 0;
  }
  else
  {
    v55 = 0;
  }
  *(_BYTE *)(v4 + 1032) = v55;
  return v44;
}

uint64_t sub_20F1D4BD0(uint64_t a1, uint64_t a2, double a3)
{
  double v3;
  double v4;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  uint64_t result;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  unsigned __int8 v30;
  uint64_t v31;
  const char *v32;
  NSObject *v33;
  void **v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  unsigned __int8 v59;
  uint64_t v60;
  const char *v61;
  NSObject *v62;
  void **v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD *v70;
  double v71;
  uint64_t v72;
  double *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  _QWORD *v97;
  double v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  const char *v103;
  size_t v104;
  unsigned __int8 v105;
  size_t v106;
  const char *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  size_t v115;
  std::__shared_weak_count_vtbl *v116;
  std::__shared_weak_count *v117;
  std::__shared_weak_count *v118;
  unint64_t *p_shared_owners;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  double v126;
  uint64_t v127;
  const char *v128;
  double v129;
  char *v130;
  uint64_t v131;
  const char *v132;
  void *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  const char *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  int v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  void *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  const char *v163;
  size_t v164;
  unsigned __int8 v165;
  size_t v166;
  const char *v167;
  _BYTE *v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t v172;
  uint64_t v173;
  NSObject *v174;
  size_t v175;
  std::__shared_weak_count_vtbl *v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  double v186;
  uint64_t v187;
  const char *v188;
  double v189;
  char *v190;
  uint64_t v191;
  const char *v192;
  void *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  const char *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  int v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  void *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  int v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  const char *v223;
  size_t v224;
  unsigned __int8 v225;
  size_t v226;
  const char *v227;
  _BYTE *v228;
  uint64_t v229;
  uint64_t v230;
  _BYTE *v231;
  uint64_t v232;
  uint64_t v233;
  NSObject *v234;
  size_t v235;
  std::__shared_weak_count_vtbl *v236;
  std::__shared_weak_count *v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  double v246;
  uint64_t v247;
  const char *v248;
  double v249;
  char *v250;
  uint64_t v251;
  const char *v252;
  void *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  const char *v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  int v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  uint64_t v274;
  void *v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  const char *v279;
  const char *v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  int v287;
  void *__p[2];
  char v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  double v312;
  char *category;
  uint64_t v314;
  const char *v315;
  uint64_t v316;
  uint64_t *v317;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v319;
  int v320;
  const char *v321;
  int v322;
  const char *v323;
  uint64_t v324;
  std::__shared_weak_count *v325;
  uint64_t v326;
  double v327;
  void **v328;
  uint64_t v329;
  double v330;
  _BYTE v331[24];
  _BYTE v332[40];
  const char *v333;
  __int16 v334;
  double v335;
  uint64_t v336;

  v3 = a3;
  v336 = *MEMORY[0x24BDAC8D0];
  v312 = a3;
  v4 = *(double *)(a1 + 5424);
  if (v4 >= v3)
    return kdebug_trace();
  v311 = 0;
  v309 = 0u;
  v310 = 0u;
  v307 = 0u;
  v308 = 0u;
  v305 = 0u;
  v306 = 0u;
  v303 = 0u;
  v304 = 0u;
  v301 = 0u;
  v302 = 0u;
  v300 = 0;
  v298 = 0u;
  v299 = 0u;
  v297 = 0u;
  v295 = 0u;
  v296 = 0u;
  v293 = 0u;
  v294 = 0u;
  v291 = 0u;
  v292 = 0u;
  v290 = 0u;
  if (v4 == 0.0)
  {
    *(_QWORD *)(a1 + 5432) = 0;
    v7 = *(_OWORD *)(a2 + 128);
    v8 = *(_OWORD *)(a2 + 144);
    v9 = *(_OWORD *)(a2 + 96);
    v297 = *(_OWORD *)(a2 + 112);
    v298 = v7;
    v299 = v8;
    v300 = *(_QWORD *)(a2 + 160);
    v10 = *(_OWORD *)(a2 + 80);
    v294 = *(_OWORD *)(a2 + 64);
    v295 = v10;
    v296 = v9;
    v11 = *(_OWORD *)(a2 + 16);
    v290 = *(_OWORD *)a2;
    v291 = v11;
    v12 = *(_OWORD *)(a2 + 48);
    v292 = *(_OWORD *)(a2 + 32);
    v293 = v12;
    *(double *)(a1 + 5440) = v3;
    v13 = *(_OWORD *)(a2 + 144);
    v309 = *(_OWORD *)(a2 + 128);
    v310 = v13;
    v14 = *(_QWORD *)(a2 + 160);
    v15 = *(_OWORD *)(a2 + 80);
    v305 = *(_OWORD *)(a2 + 64);
    v306 = v15;
    v16 = *(_OWORD *)(a2 + 112);
    v307 = *(_OWORD *)(a2 + 96);
    v308 = v16;
    v17 = *(_OWORD *)(a2 + 16);
    v301 = *(_OWORD *)a2;
    v302 = v17;
    v18 = *(_OWORD *)(a2 + 48);
    v303 = *(_OWORD *)(a2 + 32);
    v304 = v18;
    v19 = v3;
    v311 = v14;
    goto LABEL_76;
  }
  if (*(double *)(a1 + 5432) < v3 && !*(_BYTE *)(a1 + 3208))
    goto LABEL_35;
  v330 = 0.0;
  LOBYTE(v327) = 0;
  v21 = sub_20F1D7F7C(a1, (uint64_t)&v301, &v330, 1, v3);
  LOBYTE(v327) = v21;
  if (v21)
  {
    if (*(_BYTE *)(a1 + 3312))
    {
      *(_DWORD *)v332 = 0;
      sub_20F1DF8E4((uint64_t)v331, &v327);
      if (*(_DWORD *)v332 == -1)
        sub_20E877AB8();
      v317 = (uint64_t *)&v315;
      ((void (*)(void **__return_ptr, uint64_t **, _BYTE *))off_24C9FA958[*(unsigned int *)v332])(__p, &v317, v331);
      if (*(_DWORD *)v332 != -1)
        ((void (*)(uint64_t **, _BYTE *))off_24C9FA940[*(unsigned int *)v332])(&v317, v331);
      sub_20F1D8150(&v329);
      if (**(int **)(v329 + 56) <= 2)
      {
        v22 = *(unsigned __int8 *)(v329 + 72);
        v23 = sub_20E8C31DC(v329, "OSLogSurrogateAppender", 1, 0);
        v24 = v23 ? v23 + 16 : 0;
        if (v22 || v23)
        {
          v317 = &v329;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v319 = std::chrono::system_clock::now().__d_.__rep_;
          v320 = 2;
          v321 = "unknown file";
          v322 = 986;
          v325 = 0;
          v323 = "unknown function";
          v324 = 0;
          v25 = __p;
          if (v289 < 0)
            v25 = (void **)__p[0];
          v328 = v25;
          v26 = *v317;
          v27 = (uint64_t *)(*v317 + 16);
          if (*(char *)(*v317 + 39) < 0)
          {
            v29 = *(char **)(v26 + 16);
            v28 = *(_QWORD *)(v26 + 24);
          }
          else
          {
            v28 = *(unsigned __int8 *)(*v317 + 39);
            v29 = (char *)(*v317 + 16);
          }
          category = v29;
          v314 = v28;
          v30 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v30 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v331);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v331);
            if (v332[0] && (v331[23] & 0x80000000) != 0)
              operator delete(*(void **)v331);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v31 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v32 = byte_254A4A4F8;
          }
          else
          {
            v31 = *(_QWORD *)&byte_254A4A4F8[8];
            v32 = *(const char **)byte_254A4A4F8;
          }
          v315 = v32;
          v316 = v31;
          *(_QWORD *)v331 = os_log_create(v32, category);
          sub_20E86E5A8(&v331[8], (uint64_t)&v315);
          sub_20E86E5A8(&v332[16], (uint64_t)&category);
          v33 = *(NSObject **)v331;
          sub_20E86E44C((uint64_t)v331);
          sub_20F1DFB88(v24, v27, v33, OS_LOG_TYPE_DEBUG, (uint64_t *)&v312, (const char **)&v328);
          if (v22)
          {
            v34 = __p;
            if (v289 < 0)
              v34 = (void **)__p[0];
            sub_20E8C003C((uint64_t)&v317, "PosePredictor: Error propagating previous state using IMUs to current state at state time %f with error: %s.", v312, (const char *)v34);
            sub_20E863570((uint64_t)&v317);
          }
          sub_20E863714((uint64_t)&v317);
        }
      }
      if (v289 < 0)
        operator delete(__p[0]);
      v3 = v312;
    }
LABEL_35:
    v35 = *(_OWORD *)(a2 + 144);
    v309 = *(_OWORD *)(a2 + 128);
    v310 = v35;
    v311 = *(_QWORD *)(a2 + 160);
    v36 = *(_OWORD *)(a2 + 80);
    v305 = *(_OWORD *)(a2 + 64);
    v306 = v36;
    v37 = *(_OWORD *)(a2 + 112);
    v307 = *(_OWORD *)(a2 + 96);
    v308 = v37;
    v38 = *(_OWORD *)(a2 + 16);
    v301 = *(_OWORD *)a2;
    v302 = v38;
    v39 = *(_OWORD *)(a2 + 48);
    v303 = *(_OWORD *)(a2 + 32);
    v304 = v39;
  }
  v40 = *(_BYTE *)(a1 + 3192);
  *(_BYTE *)(a1 + 3192) = 0;
  v330 = 0.0;
  LOBYTE(v327) = 0;
  v41 = (*(uint64_t (**)(uint64_t, __int128 *, double *, uint64_t, _QWORD, double))(*(_QWORD *)a1 + 56))(a1, &v290, &v330, 1, 0, v3);
  LOBYTE(v327) = v41;
  *(_BYTE *)(a1 + 3192) = v40;
  if ((*(_BYTE *)(a1 + 3209) & 0xFE) == 2)
  {
    v42 = *(_QWORD *)(a1 + 5464);
    v43 = *(_QWORD *)(a1 + 5504);
    v44 = *(_QWORD *)(a1 + 5472);
    v45 = v44 + 16 * v43;
    *(double *)v45 = v3;
    *(_QWORD *)(v45 + 8) = v42;
    v46 = (*(_QWORD *)(a1 + 5480) - v44) >> 4;
    v47 = v43 + 1;
    if (v47 >= v46)
      v48 = v46;
    else
      v48 = 0;
    *(_QWORD *)(a1 + 5504) = v47 - v48;
    v49 = *(_QWORD *)(a1 + 5512);
    if (v49 == v46)
    {
      v50 = *(_QWORD *)(a1 + 5496) + 1;
      if (v50 < v46)
        v46 = 0;
      *(_QWORD *)(a1 + 5496) = v50 - v46;
    }
    else
    {
      *(_QWORD *)(a1 + 5512) = v49 + 1;
    }
    *(_BYTE *)(a1 + 5520) = 0;
    *(_BYTE *)(a1 + 5536) = 0;
  }
  if (v41)
  {
    if (*(_BYTE *)(a1 + 3312))
    {
      *(_DWORD *)v332 = 0;
      sub_20F1DF8E4((uint64_t)v331, &v327);
      if (*(_DWORD *)v332 == -1)
        sub_20E877AB8();
      v317 = (uint64_t *)&v315;
      ((void (*)(void **__return_ptr, uint64_t **, _BYTE *))off_24C9FA958[*(unsigned int *)v332])(__p, &v317, v331);
      if (*(_DWORD *)v332 != -1)
        ((void (*)(uint64_t **, _BYTE *))off_24C9FA940[*(unsigned int *)v332])(&v317, v331);
      sub_20F1D8150(&v329);
      if (**(int **)(v329 + 56) <= 2)
      {
        v51 = *(unsigned __int8 *)(v329 + 72);
        v52 = sub_20E8C31DC(v329, "OSLogSurrogateAppender", 1, 0);
        v53 = v52 ? v52 + 16 : 0;
        if (v51 || v52)
        {
          v317 = &v329;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v319 = std::chrono::system_clock::now().__d_.__rep_;
          v320 = 2;
          v321 = "unknown file";
          v322 = 1020;
          v325 = 0;
          v323 = "unknown function";
          v324 = 0;
          v54 = __p;
          if (v289 < 0)
            v54 = (void **)__p[0];
          v328 = v54;
          v55 = *v317;
          v56 = (uint64_t *)(*v317 + 16);
          if (*(char *)(*v317 + 39) < 0)
          {
            v58 = *(char **)(v55 + 16);
            v57 = *(_QWORD *)(v55 + 24);
          }
          else
          {
            v57 = *(unsigned __int8 *)(*v317 + 39);
            v58 = (char *)(*v317 + 16);
          }
          category = v58;
          v314 = v57;
          v59 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v331);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v331);
            if (v332[0] && (v331[23] & 0x80000000) != 0)
              operator delete(*(void **)v331);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          v60 = byte_254A4A4F8[23];
          if (byte_254A4A4F8[23] >= 0)
          {
            v61 = byte_254A4A4F8;
          }
          else
          {
            v60 = *(_QWORD *)&byte_254A4A4F8[8];
            v61 = *(const char **)byte_254A4A4F8;
          }
          v315 = v61;
          v316 = v60;
          *(_QWORD *)v331 = os_log_create(v61, category);
          sub_20E86E5A8(&v331[8], (uint64_t)&v315);
          sub_20E86E5A8(&v332[16], (uint64_t)&category);
          v62 = *(NSObject **)v331;
          sub_20E86E44C((uint64_t)v331);
          sub_20F1E01B8(v53, v56, v62, OS_LOG_TYPE_DEBUG, (uint64_t *)&v312, (const char **)&v328);
          if (v51)
          {
            v63 = __p;
            if (v289 < 0)
              v63 = (void **)__p[0];
            sub_20E8C003C((uint64_t)&v317, "PosePredictor: Error propagating previous state using IMUs to current state at state time %f with error: %s.", v312, (const char *)v63);
            sub_20E863570((uint64_t)&v317);
          }
          sub_20E863714((uint64_t)&v317);
        }
      }
      if (v289 < 0)
        operator delete(__p[0]);
      v3 = v312;
    }
    v64 = *(_OWORD *)(a2 + 128);
    v65 = *(_OWORD *)(a2 + 144);
    v66 = *(_OWORD *)(a2 + 96);
    v297 = *(_OWORD *)(a2 + 112);
    v298 = v64;
    v299 = v65;
    v300 = *(_QWORD *)(a2 + 160);
    v67 = *(_OWORD *)(a2 + 80);
    v294 = *(_OWORD *)(a2 + 64);
    v295 = v67;
    v296 = v66;
    v68 = *(_OWORD *)(a2 + 16);
    v290 = *(_OWORD *)a2;
    v291 = v68;
    v69 = *(_OWORD *)(a2 + 48);
    v292 = *(_OWORD *)(a2 + 32);
    v293 = v69;
  }
  v19 = *(double *)(a1 + 5440);
LABEL_76:
  *(double *)(a1 + 5456) = v19;
  v70 = *(_QWORD **)(a1 + 8);
  v71 = 0.0;
  if (!v70[30] || !v70[36])
    goto LABEL_85;
  v72 = v70[29];
  if (v72)
  {
    v73 = (double *)(v70[25] + 32 * v72 - 32);
    v74 = v70[35];
    if (v74)
    {
LABEL_80:
      v75 = v70[31];
      goto LABEL_83;
    }
  }
  else
  {
    v73 = (double *)(v70[25] + 32 * ((uint64_t)(v70[26] - v70[25]) >> 5) - 32);
    v74 = v70[35];
    if (v74)
      goto LABEL_80;
  }
  v75 = v70[31];
  v74 = (v70[32] - v75) >> 5;
LABEL_83:
  v76 = v75 + 32 * v74;
  v71 = *v73;
  if (*v73 < *(double *)(v76 - 32))
    v71 = *(double *)(v76 - 32);
LABEL_85:
  *(double *)(a1 + 5448) = v71;
  v77 = *(double *)(a1 + 5432);
  if (v77 < v3)
    v77 = v3;
  *(double *)(a1 + 5440) = v77;
  v78 = v310;
  *(_OWORD *)(a1 + 4720) = v309;
  *(_OWORD *)(a1 + 4736) = v78;
  *(_QWORD *)(a1 + 4752) = v311;
  v79 = v306;
  *(_OWORD *)(a1 + 4656) = v305;
  *(_OWORD *)(a1 + 4672) = v79;
  v80 = v308;
  *(_OWORD *)(a1 + 4688) = v307;
  *(_OWORD *)(a1 + 4704) = v80;
  v81 = v302;
  *(_OWORD *)(a1 + 4592) = v301;
  *(_OWORD *)(a1 + 4608) = v81;
  v82 = v304;
  *(_OWORD *)(a1 + 4624) = v303;
  *(_OWORD *)(a1 + 4640) = v82;
  v83 = v297;
  v84 = v299;
  *(_OWORD *)(a1 + 4888) = v298;
  *(_OWORD *)(a1 + 4904) = v84;
  *(_QWORD *)(a1 + 4920) = v300;
  v85 = v292;
  *(_OWORD *)(a1 + 4808) = v293;
  v86 = v295;
  *(_OWORD *)(a1 + 4824) = v294;
  *(_OWORD *)(a1 + 4840) = v86;
  *(_OWORD *)(a1 + 4856) = v296;
  *(_OWORD *)(a1 + 4872) = v83;
  v87 = v291;
  *(_OWORD *)(a1 + 4760) = v290;
  *(_OWORD *)(a1 + 4776) = v87;
  *(_OWORD *)(a1 + 4792) = v85;
  v88 = *(_OWORD *)(a1 + 5192);
  *(_OWORD *)(a1 + 5096) = *(_OWORD *)(a1 + 5176);
  *(_OWORD *)(a1 + 5112) = v88;
  *(_OWORD *)(a1 + 5128) = *(_OWORD *)(a1 + 5208);
  *(_QWORD *)(a1 + 5144) = *(_QWORD *)(a1 + 5224);
  *(_OWORD *)(a1 + 5152) = *(_OWORD *)(a1 + 5232);
  *(_QWORD *)(a1 + 5168) = *(_QWORD *)(a1 + 5248);
  v90 = *(_OWORD *)(a2 + 16);
  v89 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 5256) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 5272) = v90;
  *(_OWORD *)(a1 + 5288) = v89;
  v92 = *(_OWORD *)(a2 + 80);
  v91 = *(_OWORD *)(a2 + 96);
  v93 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 5304) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 5320) = v93;
  *(_OWORD *)(a1 + 5336) = v92;
  *(_OWORD *)(a1 + 5352) = v91;
  v94 = *(_QWORD *)(a2 + 160);
  v96 = *(_OWORD *)(a2 + 128);
  v95 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 5368) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 5384) = v96;
  *(_OWORD *)(a1 + 5400) = v95;
  *(_QWORD *)(a1 + 5416) = v94;
  sub_20F1BC0D4((_BOOL8)v70, (__int128 *)a2, v3);
  if (*(_BYTE *)(a1 + 3153))
  {
    v97 = *(_QWORD **)(a1 + 8);
    v97[16] = 0;
    v97[17] = 0;
    v97[18] = 0;
  }
  if (!*(_BYTE *)(a1 + 3312))
    goto LABEL_359;
  if (!*(_BYTE *)(a1 + 3928))
    goto LABEL_359;
  v98 = *(double *)(a1 + 5448);
  if (v98 - *(double *)(a1 + 3912) <= *(double *)(a1 + 3920))
    goto LABEL_359;
  *(double *)(a1 + 3912) = v98;
  category = 0;
  v329 = 0;
  v330 = 0.0;
  v327 = 0.0;
  v328 = 0;
  sub_20F1DC5E4(a1 + 3864, &category, &v330, (double *)&v329, (double *)&v328, &v327);
  if (*(_BYTE *)(a1 + 3312))
  {
    sub_20F1D8150(&v326);
    if (**(int **)(v326 + 56) <= 3)
    {
      v99 = *(unsigned __int8 *)(v326 + 72);
      v100 = sub_20E8C31DC(v326, "OSLogSurrogateAppender", 1, 0);
      v101 = v100;
      if (v99 || v100)
      {
        v285 = v99;
        v317 = &v326;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v319 = std::chrono::system_clock::now().__d_.__rep_;
        v320 = 3;
        v321 = "unknown file";
        v322 = 1758;
        v325 = 0;
        v323 = "unknown function";
        v324 = 0;
        v102 = *v317;
        v103 = (const char *)(*v317 + 16);
        v279 = v103;
        v282 = *v317;
        if (*(char *)(*v317 + 39) < 0)
        {
          v103 = *(const char **)(v102 + 16);
          v104 = *(_QWORD *)(v102 + 24);
        }
        else
        {
          v104 = *(unsigned __int8 *)(*v317 + 39);
        }
        v105 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v331);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v331);
          if (v332[0] && (v331[23] & 0x80000000) != 0)
            operator delete(*(void **)v331);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v106 = byte_254A4A4F8[23];
        else
          v106 = *(_QWORD *)&byte_254A4A4F8[8];
        if (byte_254A4A4F8[23] >= 0)
          v107 = byte_254A4A4F8;
        else
          v107 = *(const char **)byte_254A4A4F8;
        *(_QWORD *)v331 = os_log_create(v107, v103);
        v108 = &v331[8];
        if (v106 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v106 >= 0x17)
        {
          v109 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v106 | 7) != 0x17)
            v109 = v106 | 7;
          v110 = v109 + 1;
          v108 = operator new(v109 + 1);
          *(_QWORD *)&v331[16] = v106;
          *(_QWORD *)v332 = v110 | 0x8000000000000000;
          *(_QWORD *)&v331[8] = v108;
        }
        else
        {
          v332[7] = v106;
          if (!v106)
          {
LABEL_114:
            v108[v106] = 0;
            v332[8] = 1;
            v111 = &v332[16];
            if (v104 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v104 >= 0x17)
            {
              v112 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v104 | 7) != 0x17)
                v112 = v104 | 7;
              v113 = v112 + 1;
              v111 = operator new(v112 + 1);
              *(_QWORD *)&v332[24] = v104;
              *(_QWORD *)&v332[32] = v113 | 0x8000000000000000;
              *(_QWORD *)&v332[16] = v111;
            }
            else
            {
              v332[39] = v104;
              if (!v104)
                goto LABEL_122;
            }
            memmove(v111, v103, v104);
LABEL_122:
            v111[v104] = 0;
            LOBYTE(v333) = 1;
            v114 = *(NSObject **)v331;
            if ((v332[39] & 0x80000000) != 0)
              operator delete(*(void **)&v332[16]);
            if (v332[8] && (v332[7] & 0x80000000) != 0)
              operator delete(*(void **)&v331[8]);
            if (*(_QWORD *)v331)
              os_release(*(void **)v331);
            if (v101 && *(_QWORD *)(v101 + 24))
            {
              v115 = _os_log_pack_size();
              v116 = (std::__shared_weak_count_vtbl *)operator new(v115, (std::align_val_t)8uLL);
              v117 = (std::__shared_weak_count *)operator new();
              v118 = v117;
              v117->__shared_owners_ = 0;
              p_shared_owners = (unint64_t *)&v117->__shared_owners_;
              v117->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v117->__shared_weak_owners_ = 0;
              v117[1].__vftable = v116;
              *(_QWORD *)v331 = v116;
              *(_QWORD *)&v331[8] = v116;
              *(_QWORD *)&v331[16] = v117;
              do
                v120 = __ldxr(p_shared_owners);
              while (__stxr(v120 + 1, p_shared_owners));
              memset(v332, 0, 24);
              do
                v121 = __ldaxr(p_shared_owners);
              while (__stlxr(v121 - 1, p_shared_owners));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                std::__shared_weak_count::__release_weak(v118);
              }
              v122 = *(_QWORD *)v331;
              v123 = _os_log_pack_fill();
              v124 = *(_QWORD *)(a1 + 5424);
              v125 = category;
              v127 = v329;
              v126 = v330;
              v129 = v327;
              v128 = (const char *)v328;
              *(_DWORD *)v123 = 134219776;
              *(_QWORD *)(v123 + 4) = a1;
              *(_WORD *)(v123 + 12) = 2048;
              *(_QWORD *)(v123 + 14) = 100;
              *(_WORD *)(v123 + 22) = 2048;
              *(_QWORD *)(v123 + 24) = v124;
              *(_WORD *)(v123 + 32) = 2048;
              *(_QWORD *)(v123 + 34) = v125;
              *(_WORD *)(v123 + 42) = 2048;
              *(double *)(v123 + 44) = v126;
              *(_WORD *)(v123 + 52) = 2048;
              *(_QWORD *)(v123 + 54) = v127;
              *(_WORD *)(v123 + 62) = 2048;
              *(_QWORD *)(v123 + 64) = v128;
              *(_WORD *)(v123 + 72) = 2048;
              *(double *)(v123 + 74) = v129;
              v130 = (char *)operator new();
              v131 = *(unsigned __int8 *)(v282 + 39);
              v132 = v279;
              if ((v131 & 0x80u) != 0)
              {
                v132 = *(const char **)(v282 + 16);
                v131 = *(_QWORD *)(v282 + 24);
              }
              *(_QWORD *)v130 = v122;
              *(_OWORD *)(v130 + 8) = *(_OWORD *)&v331[8];
              *(_QWORD *)&v331[8] = 0;
              *(_QWORD *)&v331[16] = 0;
              *(_OWORD *)(v130 + 24) = *(_OWORD *)v332;
              *(_QWORD *)v332 = 0;
              *(_QWORD *)&v332[8] = 0;
              *((_QWORD *)v130 + 5) = v132;
              *((_QWORD *)v130 + 6) = v131;
              v130[56] = 1;
              v315 = 0;
              __p[0] = v130;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v101 + 24) + 40))(*(_QWORD *)(v101 + 24), __p);
              v133 = __p[0];
              __p[0] = 0;
              if (v133)
              {
                v134 = (std::__shared_weak_count *)*((_QWORD *)v133 + 4);
                if (v134)
                {
                  v135 = (unint64_t *)&v134->__shared_owners_;
                  do
                    v136 = __ldaxr(v135);
                  while (__stlxr(v136 - 1, v135));
                  if (!v136)
                  {
                    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                    std::__shared_weak_count::__release_weak(v134);
                  }
                }
                v137 = (std::__shared_weak_count *)*((_QWORD *)v133 + 2);
                if (v137)
                {
                  v138 = (unint64_t *)&v137->__shared_owners_;
                  do
                    v139 = __ldaxr(v138);
                  while (__stlxr(v139 - 1, v138));
                  if (!v139)
                  {
                    ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
                    std::__shared_weak_count::__release_weak(v137);
                  }
                }
                MEMORY[0x212BC6398](v133, 0x10F0C40B62ED6C6);
                v140 = v315;
                v315 = 0;
                if (v140)
                {
                  v141 = (std::__shared_weak_count *)*((_QWORD *)v140 + 4);
                  if (v141)
                  {
                    v142 = (unint64_t *)&v141->__shared_owners_;
                    do
                      v143 = __ldaxr(v142);
                    while (__stlxr(v143 - 1, v142));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                      std::__shared_weak_count::__release_weak(v141);
                    }
                  }
                  v144 = (std::__shared_weak_count *)*((_QWORD *)v140 + 2);
                  if (v144)
                  {
                    v145 = (unint64_t *)&v144->__shared_owners_;
                    do
                      v146 = __ldaxr(v145);
                    while (__stlxr(v146 - 1, v145));
                    if (!v146)
                    {
                      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                      std::__shared_weak_count::__release_weak(v144);
                    }
                  }
                  MEMORY[0x212BC6398](v140, 0x10F0C40B62ED6C6);
                }
              }
              v147 = *(std::__shared_weak_count **)&v332[8];
              v148 = v285;
              if (*(_QWORD *)&v332[8])
              {
                v149 = (unint64_t *)(*(_QWORD *)&v332[8] + 8);
                do
                  v150 = __ldaxr(v149);
                while (__stlxr(v150 - 1, v149));
                if (!v150)
                {
                  ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                  std::__shared_weak_count::__release_weak(v147);
                }
              }
              v151 = *(std::__shared_weak_count **)&v331[16];
              if (*(_QWORD *)&v331[16])
              {
                v152 = (unint64_t *)(*(_QWORD *)&v331[16] + 8);
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 - 1, v152));
                if (!v153)
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
              }
            }
            else
            {
              os_log_type_enabled(v114, OS_LOG_TYPE_INFO);
              v154 = *(_QWORD *)(a1 + 5424);
              *(_DWORD *)v331 = 134219776;
              *(_QWORD *)&v331[4] = a1;
              *(_WORD *)&v331[12] = 2048;
              *(_QWORD *)&v331[14] = 100;
              *(_WORD *)&v331[22] = 2048;
              *(_QWORD *)v332 = v154;
              *(_WORD *)&v332[8] = 2048;
              *(_QWORD *)&v332[10] = category;
              *(_WORD *)&v332[18] = 2048;
              *(double *)&v332[20] = v330;
              *(_WORD *)&v332[28] = 2048;
              *(_QWORD *)&v332[30] = v329;
              *(_WORD *)&v332[38] = 2048;
              v333 = (const char *)v328;
              v334 = 2048;
              v335 = v327;
              v155 = (void *)_os_log_send_and_compose_impl();
              v148 = v285;
              if (v155)
                free(v155);
            }
            if (v148)
            {
              sub_20E8C003C((uint64_t)&v317, "PosePredictorStats (this=%lu) over last %zu GetPose Calls at AddInertialStateTimestamp=%f, GetPose IMU Extrapolation Time (s) [min=%f, max=%f, median=%f,mean=%f, stdDev=%f]", a1, 0x64uLL, *(double *)(a1 + 5424), *(double *)&category, v330, *(double *)&v329, *(double *)&v328, v327);
              sub_20E863570((uint64_t)&v317);
            }
            sub_20E863570((uint64_t)&v317);
            v156 = v325;
            if (v325)
            {
              v157 = (unint64_t *)&v325->__shared_owners_;
              do
                v158 = __ldaxr(v157);
              while (__stlxr(v158 - 1, v157));
              if (!v158)
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
            }
            goto LABEL_181;
          }
        }
        memmove(v108, v107, v106);
        goto LABEL_114;
      }
    }
  }
LABEL_181:
  sub_20F1DC5E4(a1 + 3816, &category, &v330, (double *)&v329, (double *)&v328, &v327);
  if (!*(_BYTE *)(a1 + 3312))
    goto LABEL_270;
  sub_20F1D8150(&v326);
  if (**(int **)(v326 + 56) > 3)
    goto LABEL_270;
  v159 = *(unsigned __int8 *)(v326 + 72);
  v160 = sub_20E8C31DC(v326, "OSLogSurrogateAppender", 1, 0);
  v161 = v160;
  if (!v159 && !v160)
    goto LABEL_270;
  v286 = v159;
  v317 = &v326;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v319 = std::chrono::system_clock::now().__d_.__rep_;
  v320 = 3;
  v321 = "unknown file";
  v322 = 1772;
  v325 = 0;
  v323 = "unknown function";
  v324 = 0;
  v162 = *v317;
  v163 = (const char *)(*v317 + 16);
  v280 = v163;
  v283 = *v317;
  if (*(char *)(*v317 + 39) < 0)
  {
    v163 = *(const char **)(v162 + 16);
    v164 = *(_QWORD *)(v162 + 24);
  }
  else
  {
    v164 = *(unsigned __int8 *)(*v317 + 39);
  }
  v165 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v165 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)v331);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v331);
    if (v332[0] && (v331[23] & 0x80000000) != 0)
      operator delete(*(void **)v331);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v166 = byte_254A4A4F8[23];
  else
    v166 = *(_QWORD *)&byte_254A4A4F8[8];
  if (byte_254A4A4F8[23] >= 0)
    v167 = byte_254A4A4F8;
  else
    v167 = *(const char **)byte_254A4A4F8;
  *(_QWORD *)v331 = os_log_create(v167, v163);
  v168 = &v331[8];
  if (v166 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v166 >= 0x17)
  {
    v169 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v166 | 7) != 0x17)
      v169 = v166 | 7;
    v170 = v169 + 1;
    v168 = operator new(v169 + 1);
    *(_QWORD *)&v331[16] = v166;
    *(_QWORD *)v332 = v170 | 0x8000000000000000;
    *(_QWORD *)&v331[8] = v168;
    goto LABEL_202;
  }
  v332[7] = v166;
  if (v166)
LABEL_202:
    memmove(v168, v167, v166);
  v168[v166] = 0;
  v332[8] = 1;
  v171 = &v332[16];
  if (v164 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v164 >= 0x17)
  {
    v172 = (v164 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v164 | 7) != 0x17)
      v172 = v164 | 7;
    v173 = v172 + 1;
    v171 = operator new(v172 + 1);
    *(_QWORD *)&v332[24] = v164;
    *(_QWORD *)&v332[32] = v173 | 0x8000000000000000;
    *(_QWORD *)&v332[16] = v171;
  }
  else
  {
    v332[39] = v164;
    if (!v164)
      goto LABEL_211;
  }
  memmove(v171, v163, v164);
LABEL_211:
  v171[v164] = 0;
  LOBYTE(v333) = 1;
  v174 = *(NSObject **)v331;
  if ((v332[39] & 0x80000000) != 0)
    operator delete(*(void **)&v332[16]);
  if (v332[8] && (v332[7] & 0x80000000) != 0)
    operator delete(*(void **)&v331[8]);
  if (*(_QWORD *)v331)
    os_release(*(void **)v331);
  if (v161 && *(_QWORD *)(v161 + 24))
  {
    v175 = _os_log_pack_size();
    v176 = (std::__shared_weak_count_vtbl *)operator new(v175, (std::align_val_t)8uLL);
    v177 = (std::__shared_weak_count *)operator new();
    v178 = v177;
    v177->__shared_owners_ = 0;
    v179 = (unint64_t *)&v177->__shared_owners_;
    v177->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v177->__shared_weak_owners_ = 0;
    v177[1].__vftable = v176;
    *(_QWORD *)v331 = v176;
    *(_QWORD *)&v331[8] = v176;
    *(_QWORD *)&v331[16] = v177;
    do
      v180 = __ldxr(v179);
    while (__stxr(v180 + 1, v179));
    memset(v332, 0, 24);
    do
      v181 = __ldaxr(v179);
    while (__stlxr(v181 - 1, v179));
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v178);
    }
    v182 = *(_QWORD *)v331;
    v183 = _os_log_pack_fill();
    v184 = *(_QWORD *)(a1 + 5424);
    v185 = category;
    v187 = v329;
    v186 = v330;
    v189 = v327;
    v188 = (const char *)v328;
    *(_DWORD *)v183 = 134219776;
    *(_QWORD *)(v183 + 4) = a1;
    *(_WORD *)(v183 + 12) = 2048;
    *(_QWORD *)(v183 + 14) = 100;
    *(_WORD *)(v183 + 22) = 2048;
    *(_QWORD *)(v183 + 24) = v184;
    *(_WORD *)(v183 + 32) = 2048;
    *(_QWORD *)(v183 + 34) = v185;
    *(_WORD *)(v183 + 42) = 2048;
    *(double *)(v183 + 44) = v186;
    *(_WORD *)(v183 + 52) = 2048;
    *(_QWORD *)(v183 + 54) = v187;
    *(_WORD *)(v183 + 62) = 2048;
    *(_QWORD *)(v183 + 64) = v188;
    *(_WORD *)(v183 + 72) = 2048;
    *(double *)(v183 + 74) = v189;
    v190 = (char *)operator new();
    v191 = *(unsigned __int8 *)(v283 + 39);
    v192 = v280;
    if ((v191 & 0x80u) != 0)
    {
      v192 = *(const char **)(v283 + 16);
      v191 = *(_QWORD *)(v283 + 24);
    }
    *(_QWORD *)v190 = v182;
    *(_OWORD *)(v190 + 8) = *(_OWORD *)&v331[8];
    *(_QWORD *)&v331[8] = 0;
    *(_QWORD *)&v331[16] = 0;
    *(_OWORD *)(v190 + 24) = *(_OWORD *)v332;
    *(_QWORD *)v332 = 0;
    *(_QWORD *)&v332[8] = 0;
    *((_QWORD *)v190 + 5) = v192;
    *((_QWORD *)v190 + 6) = v191;
    v190[56] = 1;
    v315 = 0;
    __p[0] = v190;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v161 + 24) + 40))(*(_QWORD *)(v161 + 24), __p);
    v193 = __p[0];
    __p[0] = 0;
    if (v193)
    {
      v194 = (std::__shared_weak_count *)*((_QWORD *)v193 + 4);
      if (v194)
      {
        v195 = (unint64_t *)&v194->__shared_owners_;
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
      }
      v197 = (std::__shared_weak_count *)*((_QWORD *)v193 + 2);
      if (v197)
      {
        v198 = (unint64_t *)&v197->__shared_owners_;
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 - 1, v198));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
          std::__shared_weak_count::__release_weak(v197);
        }
      }
      MEMORY[0x212BC6398](v193, 0x10F0C40B62ED6C6);
      v200 = v315;
      v315 = 0;
      if (v200)
      {
        v201 = (std::__shared_weak_count *)*((_QWORD *)v200 + 4);
        if (v201)
        {
          v202 = (unint64_t *)&v201->__shared_owners_;
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }
        v204 = (std::__shared_weak_count *)*((_QWORD *)v200 + 2);
        if (v204)
        {
          v205 = (unint64_t *)&v204->__shared_owners_;
          do
            v206 = __ldaxr(v205);
          while (__stlxr(v206 - 1, v205));
          if (!v206)
          {
            ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
            std::__shared_weak_count::__release_weak(v204);
          }
        }
        MEMORY[0x212BC6398](v200, 0x10F0C40B62ED6C6);
      }
    }
    v207 = *(std::__shared_weak_count **)&v332[8];
    v208 = v286;
    if (*(_QWORD *)&v332[8])
    {
      v209 = (unint64_t *)(*(_QWORD *)&v332[8] + 8);
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
    }
    v211 = *(std::__shared_weak_count **)&v331[16];
    if (*(_QWORD *)&v331[16])
    {
      v212 = (unint64_t *)(*(_QWORD *)&v331[16] + 8);
      do
        v213 = __ldaxr(v212);
      while (__stlxr(v213 - 1, v212));
      if (!v213)
      {
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
    }
  }
  else
  {
    os_log_type_enabled(v174, OS_LOG_TYPE_INFO);
    v214 = *(_QWORD *)(a1 + 5424);
    *(_DWORD *)v331 = 134219776;
    *(_QWORD *)&v331[4] = a1;
    *(_WORD *)&v331[12] = 2048;
    *(_QWORD *)&v331[14] = 100;
    *(_WORD *)&v331[22] = 2048;
    *(_QWORD *)v332 = v214;
    *(_WORD *)&v332[8] = 2048;
    *(_QWORD *)&v332[10] = category;
    *(_WORD *)&v332[18] = 2048;
    *(double *)&v332[20] = v330;
    *(_WORD *)&v332[28] = 2048;
    *(_QWORD *)&v332[30] = v329;
    *(_WORD *)&v332[38] = 2048;
    v333 = (const char *)v328;
    v334 = 2048;
    v335 = v327;
    v215 = (void *)_os_log_send_and_compose_impl();
    v208 = v286;
    if (v215)
      free(v215);
  }
  if (v208)
  {
    sub_20E8C003C((uint64_t)&v317, "PosePredictorStats (this=%lu) over last %zu GetPose Calls at AddInertialStateTimestamp=%f, GetPoseTimestamp-LatestStateTimestamp (s) [min=%f, max=%f, median=%f,mean=%f, stdDev=%f]", a1, 0x64uLL, *(double *)(a1 + 5424), *(double *)&category, v330, *(double *)&v329, *(double *)&v328, v327);
    sub_20E863570((uint64_t)&v317);
  }
  sub_20E863570((uint64_t)&v317);
  v216 = v325;
  if (v325)
  {
    v217 = (unint64_t *)&v325->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
LABEL_270:
  sub_20F1DC5E4(a1 + 3768, &category, &v330, (double *)&v329, (double *)&v328, &v327);
  if (*(_BYTE *)(a1 + 3312))
  {
    sub_20F1D8150(&v326);
    if (**(int **)(v326 + 56) <= 3)
    {
      v219 = *(unsigned __int8 *)(v326 + 72);
      v220 = sub_20E8C31DC(v326, "OSLogSurrogateAppender", 1, 0);
      v221 = v220;
      if (v219 || v220)
      {
        v287 = v219;
        v317 = &v326;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v319 = std::chrono::system_clock::now().__d_.__rep_;
        v320 = 3;
        v321 = "unknown file";
        v322 = 1785;
        v325 = 0;
        v323 = "unknown function";
        v324 = 0;
        v222 = *v317;
        v223 = (const char *)(*v317 + 16);
        v281 = v223;
        v284 = *v317;
        if (*(char *)(*v317 + 39) < 0)
        {
          v223 = *(const char **)(v222 + 16);
          v224 = *(_QWORD *)(v222 + 24);
        }
        else
        {
          v224 = *(unsigned __int8 *)(*v317 + 39);
        }
        v225 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v225 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)v331);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v331);
          if (v332[0] && (v331[23] & 0x80000000) != 0)
            operator delete(*(void **)v331);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v226 = byte_254A4A4F8[23];
        else
          v226 = *(_QWORD *)&byte_254A4A4F8[8];
        if (byte_254A4A4F8[23] >= 0)
          v227 = byte_254A4A4F8;
        else
          v227 = *(const char **)byte_254A4A4F8;
        *(_QWORD *)v331 = os_log_create(v227, v223);
        v228 = &v331[8];
        if (v226 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v226 >= 0x17)
        {
          v229 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v226 | 7) != 0x17)
            v229 = v226 | 7;
          v230 = v229 + 1;
          v228 = operator new(v229 + 1);
          *(_QWORD *)&v331[16] = v226;
          *(_QWORD *)v332 = v230 | 0x8000000000000000;
          *(_QWORD *)&v331[8] = v228;
        }
        else
        {
          v332[7] = v226;
          if (!v226)
          {
LABEL_292:
            v228[v226] = 0;
            v332[8] = 1;
            v231 = &v332[16];
            if (v224 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v224 >= 0x17)
            {
              v232 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v224 | 7) != 0x17)
                v232 = v224 | 7;
              v233 = v232 + 1;
              v231 = operator new(v232 + 1);
              *(_QWORD *)&v332[24] = v224;
              *(_QWORD *)&v332[32] = v233 | 0x8000000000000000;
              *(_QWORD *)&v332[16] = v231;
            }
            else
            {
              v332[39] = v224;
              if (!v224)
                goto LABEL_300;
            }
            memmove(v231, v223, v224);
LABEL_300:
            v231[v224] = 0;
            LOBYTE(v333) = 1;
            v234 = *(NSObject **)v331;
            if ((v332[39] & 0x80000000) != 0)
              operator delete(*(void **)&v332[16]);
            if (v332[8] && (v332[7] & 0x80000000) != 0)
              operator delete(*(void **)&v331[8]);
            if (*(_QWORD *)v331)
              os_release(*(void **)v331);
            if (v221 && *(_QWORD *)(v221 + 24))
            {
              v235 = _os_log_pack_size();
              v236 = (std::__shared_weak_count_vtbl *)operator new(v235, (std::align_val_t)8uLL);
              v237 = (std::__shared_weak_count *)operator new();
              v238 = v237;
              v237->__shared_owners_ = 0;
              v239 = (unint64_t *)&v237->__shared_owners_;
              v237->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v237->__shared_weak_owners_ = 0;
              v237[1].__vftable = v236;
              *(_QWORD *)v331 = v236;
              *(_QWORD *)&v331[8] = v236;
              *(_QWORD *)&v331[16] = v237;
              do
                v240 = __ldxr(v239);
              while (__stxr(v240 + 1, v239));
              memset(v332, 0, 24);
              do
                v241 = __ldaxr(v239);
              while (__stlxr(v241 - 1, v239));
              if (!v241)
              {
                ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                std::__shared_weak_count::__release_weak(v238);
              }
              v242 = *(_QWORD *)v331;
              v243 = _os_log_pack_fill();
              v244 = *(_QWORD *)(a1 + 5424);
              v245 = category;
              v247 = v329;
              v246 = v330;
              v249 = v327;
              v248 = (const char *)v328;
              *(_DWORD *)v243 = 134219776;
              *(_QWORD *)(v243 + 4) = a1;
              *(_WORD *)(v243 + 12) = 2048;
              *(_QWORD *)(v243 + 14) = 100;
              *(_WORD *)(v243 + 22) = 2048;
              *(_QWORD *)(v243 + 24) = v244;
              *(_WORD *)(v243 + 32) = 2048;
              *(_QWORD *)(v243 + 34) = v245;
              *(_WORD *)(v243 + 42) = 2048;
              *(double *)(v243 + 44) = v246;
              *(_WORD *)(v243 + 52) = 2048;
              *(_QWORD *)(v243 + 54) = v247;
              *(_WORD *)(v243 + 62) = 2048;
              *(_QWORD *)(v243 + 64) = v248;
              *(_WORD *)(v243 + 72) = 2048;
              *(double *)(v243 + 74) = v249;
              v250 = (char *)operator new();
              v251 = *(unsigned __int8 *)(v284 + 39);
              v252 = v281;
              if ((v251 & 0x80u) != 0)
              {
                v252 = *(const char **)(v284 + 16);
                v251 = *(_QWORD *)(v284 + 24);
              }
              *(_QWORD *)v250 = v242;
              *(_OWORD *)(v250 + 8) = *(_OWORD *)&v331[8];
              *(_QWORD *)&v331[8] = 0;
              *(_QWORD *)&v331[16] = 0;
              *(_OWORD *)(v250 + 24) = *(_OWORD *)v332;
              *(_QWORD *)v332 = 0;
              *(_QWORD *)&v332[8] = 0;
              *((_QWORD *)v250 + 5) = v252;
              *((_QWORD *)v250 + 6) = v251;
              v250[56] = 1;
              v315 = 0;
              __p[0] = v250;
              (*(void (**)(_QWORD, void **))(**(_QWORD **)(v221 + 24) + 40))(*(_QWORD *)(v221 + 24), __p);
              v253 = __p[0];
              __p[0] = 0;
              if (v253)
              {
                v254 = (std::__shared_weak_count *)*((_QWORD *)v253 + 4);
                if (v254)
                {
                  v255 = (unint64_t *)&v254->__shared_owners_;
                  do
                    v256 = __ldaxr(v255);
                  while (__stlxr(v256 - 1, v255));
                  if (!v256)
                  {
                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                    std::__shared_weak_count::__release_weak(v254);
                  }
                }
                v257 = (std::__shared_weak_count *)*((_QWORD *)v253 + 2);
                if (v257)
                {
                  v258 = (unint64_t *)&v257->__shared_owners_;
                  do
                    v259 = __ldaxr(v258);
                  while (__stlxr(v259 - 1, v258));
                  if (!v259)
                  {
                    ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                    std::__shared_weak_count::__release_weak(v257);
                  }
                }
                MEMORY[0x212BC6398](v253, 0x10F0C40B62ED6C6);
                v260 = v315;
                v315 = 0;
                if (v260)
                {
                  v261 = (std::__shared_weak_count *)*((_QWORD *)v260 + 4);
                  if (v261)
                  {
                    v262 = (unint64_t *)&v261->__shared_owners_;
                    do
                      v263 = __ldaxr(v262);
                    while (__stlxr(v263 - 1, v262));
                    if (!v263)
                    {
                      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                      std::__shared_weak_count::__release_weak(v261);
                    }
                  }
                  v264 = (std::__shared_weak_count *)*((_QWORD *)v260 + 2);
                  if (v264)
                  {
                    v265 = (unint64_t *)&v264->__shared_owners_;
                    do
                      v266 = __ldaxr(v265);
                    while (__stlxr(v266 - 1, v265));
                    if (!v266)
                    {
                      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                      std::__shared_weak_count::__release_weak(v264);
                    }
                  }
                  MEMORY[0x212BC6398](v260, 0x10F0C40B62ED6C6);
                }
              }
              v267 = *(std::__shared_weak_count **)&v332[8];
              v268 = v287;
              if (*(_QWORD *)&v332[8])
              {
                v269 = (unint64_t *)(*(_QWORD *)&v332[8] + 8);
                do
                  v270 = __ldaxr(v269);
                while (__stlxr(v270 - 1, v269));
                if (!v270)
                {
                  ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                  std::__shared_weak_count::__release_weak(v267);
                }
              }
              v271 = *(std::__shared_weak_count **)&v331[16];
              if (*(_QWORD *)&v331[16])
              {
                v272 = (unint64_t *)(*(_QWORD *)&v331[16] + 8);
                do
                  v273 = __ldaxr(v272);
                while (__stlxr(v273 - 1, v272));
                if (!v273)
                {
                  ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                  std::__shared_weak_count::__release_weak(v271);
                }
              }
            }
            else
            {
              os_log_type_enabled(v234, OS_LOG_TYPE_INFO);
              v274 = *(_QWORD *)(a1 + 5424);
              *(_DWORD *)v331 = 134219776;
              *(_QWORD *)&v331[4] = a1;
              *(_WORD *)&v331[12] = 2048;
              *(_QWORD *)&v331[14] = 100;
              *(_WORD *)&v331[22] = 2048;
              *(_QWORD *)v332 = v274;
              *(_WORD *)&v332[8] = 2048;
              *(_QWORD *)&v332[10] = category;
              *(_WORD *)&v332[18] = 2048;
              *(double *)&v332[20] = v330;
              *(_WORD *)&v332[28] = 2048;
              *(_QWORD *)&v332[30] = v329;
              *(_WORD *)&v332[38] = 2048;
              v333 = (const char *)v328;
              v334 = 2048;
              v335 = v327;
              v275 = (void *)_os_log_send_and_compose_impl();
              v268 = v287;
              if (v275)
                free(v275);
            }
            if (v268)
            {
              sub_20E8C003C((uint64_t)&v317, "PosePredictorStats (this=%lu) over last %zu GetPose Calls at AddInertialStateTimestamp=%f, GetPoseCallTimeDifference (s) [min=%f, max=%f, median=%f,mean=%f, stdDev=%f]", a1, 0x64uLL, *(double *)(a1 + 5424), *(double *)&category, v330, *(double *)&v329, *(double *)&v328, v327);
              sub_20E863570((uint64_t)&v317);
            }
            sub_20E863570((uint64_t)&v317);
            v276 = v325;
            if (v325)
            {
              v277 = (unint64_t *)&v325->__shared_owners_;
              do
                v278 = __ldaxr(v277);
              while (__stlxr(v278 - 1, v277));
              if (!v278)
              {
                ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                std::__shared_weak_count::__release_weak(v276);
              }
            }
            goto LABEL_359;
          }
        }
        memmove(v228, v227, v226);
        goto LABEL_292;
      }
    }
  }
LABEL_359:
  result = kdebug_trace();
  *(double *)(a1 + 5424) = v3;
  return result;
}

void sub_20F1D6BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  if (*(_BYTE *)(v72 - 184) && *(char *)(v72 - 185) < 0)
    operator delete(*(void **)(v72 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a72);
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F1D6F8C(uint64_t a1, __int128 *a2, double a3)
{
  double v3;
  double v5;
  _QWORD *v7;
  double v8;
  double v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  const char *v19;
  size_t v20;
  uint64_t v21;
  int v22;
  double v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  unsigned __int8 v39;
  const char *v40;
  size_t v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  size_t v49;
  std::__shared_weak_count_vtbl *v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  int v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  void *v86;
  void *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  const char *v93;
  float64_t v94;
  void **v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  double v124;
  double v125;
  double v126;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  std::__shared_weak_count *v131;
  float64x2_t v132;
  double v133;
  float64x2_t v134;
  float64x2_t v135;
  double v136;
  double v137;
  float64x2_t v138;
  float64x2_t v139;
  double v140;
  float64x2_t v141;
  float64x2_t v142;
  double v143;
  double v144;
  float64x2_t v145;
  float64x2_t v146;
  double v147;
  float64x2_t v148;
  float64x2_t v149;
  double v150;
  double v151;
  float64x2_t v152;
  float64x2_t v153;
  double v154;
  float64x2_t v155;
  float64x2_t v156;
  double v157;
  double v158;
  float64x2_t v159;
  float64x2_t v160;
  double v161;
  float64x2_t v162;
  float64x2_t v163;
  double v164;
  double v165;
  float64x2_t v166;
  float64x2_t v167;
  double v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  double v172;
  float64x2_t v173;
  const char *v174;
  int v175;
  void **v176;
  uint64_t *v177;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v179;
  int v180;
  const char *v181;
  int v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187[2];
  char v188;
  char v189;
  uint64_t v190;
  double v191;
  char *category[2];
  uint64_t v193[2];
  __int128 v194;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  std::__shared_weak_count *v199;
  void *object[6];
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;

  v3 = a3;
  v209 = *MEMORY[0x24BDAC8D0];
  v191 = a3;
  v5 = *(double *)(a1 + 5424);
  if (v5 < v3)
  {
    v7 = *(_QWORD **)(a1 + 8);
    v8 = 0.0;
    v9 = 0.0;
    if (!v7[30] || !v7[36])
      goto LABEL_20;
    v10 = v7[29];
    if (v10)
    {
      v11 = (double *)(v7[25] + 32 * v10 - 32);
      v12 = v7[35];
      if (v12)
      {
LABEL_6:
        v13 = v7[31];
        goto LABEL_17;
      }
    }
    else
    {
      v11 = (double *)(v7[25] + 32 * ((uint64_t)(v7[26] - v7[25]) >> 5) - 32);
      v12 = v7[35];
      if (v12)
        goto LABEL_6;
    }
    v13 = v7[31];
    v12 = (v7[32] - v13) >> 5;
LABEL_17:
    v21 = v13 + 32 * v12;
    if (*v11 >= *(double *)(v21 - 32))
      v9 = *v11;
    else
      v9 = *(double *)(v21 - 32);
LABEL_20:
    v22 = *(unsigned __int8 *)(a1 + 3208);
    if (v22 == 2)
    {
      v8 = *(double *)(a1 + 3200) + v3;
    }
    else if (v22 == 1)
    {
      v8 = v9 + *(double *)(a1 + 3200);
    }
    else if (!*(_BYTE *)(a1 + 3208))
    {
      v8 = *(double *)(a1 + 5432);
    }
    v208 = 0;
    if (v8 <= v3)
      v23 = v3;
    else
      v23 = v8;
    v206 = 0u;
    v207 = 0u;
    v204 = 0u;
    v205 = 0u;
    v202 = 0u;
    v203 = 0u;
    v201 = 0u;
    memset(object, 0, sizeof(object));
    if (v5 == 0.0)
    {
      *(_QWORD *)(a1 + 5432) = 0;
      v24 = a2[9];
      v206 = a2[8];
      v207 = v24;
      v208 = *((_QWORD *)a2 + 20);
      v25 = a2[5];
      v202 = a2[4];
      v203 = v25;
      v26 = a2[7];
      v204 = a2[6];
      v205 = v26;
      v27 = a2[1];
      *(_OWORD *)object = *a2;
      *(_OWORD *)&object[2] = v27;
      v28 = a2[3];
      *(_OWORD *)&object[4] = a2[2];
      v201 = v28;
    }
    else
    {
      v29 = *(_BYTE *)(a1 + 3192);
      *(_BYTE *)(a1 + 3192) = 0;
      v190 = 0;
      v189 = 0;
      v30 = (*(uint64_t (**)(uint64_t, void **, uint64_t *, uint64_t, _QWORD, double))(*(_QWORD *)a1 + 56))(a1, object, &v190, 1, 0, v23);
      v189 = v30;
      *(_BYTE *)(a1 + 3192) = v29;
      if (v30)
      {
        if (*(_BYTE *)(a1 + 3312))
        {
          LODWORD(v196) = 0;
          sub_20F1DF8E4((uint64_t)&v194, &v189);
          if ((_DWORD)v196 == -1)
            sub_20E877AB8();
          v177 = v193;
          ((void (*)(void **__return_ptr, uint64_t **, __int128 *))off_24C9FA958[v196])(v187, &v177, &v194);
          if ((_DWORD)v196 != -1)
            ((void (*)(uint64_t **, __int128 *))off_24C9FA940[v196])(&v177, &v194);
          sub_20F1D8150(&v186);
          if (**(int **)(v186 + 56) <= 2)
          {
            v31 = *(unsigned __int8 *)(v186 + 72);
            v32 = sub_20E8C31DC(v186, "OSLogSurrogateAppender", 1, 0);
            v33 = v32 ? v32 + 16 : 0;
            if (v31 || v32)
            {
              v177 = &v186;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v179 = std::chrono::system_clock::now().__d_.__rep_;
              v180 = 2;
              v181 = "unknown file";
              v182 = 1151;
              v184 = 0;
              v185 = 0;
              v183 = "unknown function";
              v34 = v187;
              if (v188 < 0)
                v34 = (void **)v187[0];
              v176 = v34;
              v35 = *v177;
              v36 = (uint64_t *)(*v177 + 16);
              if (*(char *)(*v177 + 39) < 0)
              {
                v38 = *(char **)(v35 + 16);
                v37 = *(char **)(v35 + 24);
              }
              else
              {
                v37 = (char *)*(unsigned __int8 *)(*v177 + 39);
                v38 = (char *)(*v177 + 16);
              }
              category[0] = v38;
              category[1] = v37;
              v91 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v91 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)&v194);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v194);
                if ((_BYTE)v196 && SHIBYTE(v195) < 0)
                  operator delete((void *)v194);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              v92 = byte_254A4A4F8[23];
              if (byte_254A4A4F8[23] >= 0)
              {
                v93 = byte_254A4A4F8;
              }
              else
              {
                v92 = *(_QWORD *)&byte_254A4A4F8[8];
                v93 = *(const char **)byte_254A4A4F8;
              }
              v193[0] = (uint64_t)v93;
              v193[1] = v92;
              *(_QWORD *)&v194 = os_log_create(v93, category[0]);
              sub_20E86E5A8((_QWORD *)&v194 + 1, (uint64_t)v193);
              sub_20E86E5A8(&v197, (uint64_t)category);
              v94 = *(double *)&v194;
              sub_20E86E44C((uint64_t)&v194);
              sub_20F1E07E8(v33, v36, *(os_log_t *)&v94, OS_LOG_TYPE_DEBUG, (uint64_t *)&v191, (const char **)&v176);
              if (v31)
              {
                v95 = v187;
                if (v188 < 0)
                  v95 = (void **)v187[0];
                sub_20E8C003C((uint64_t)&v177, "PosePredictor: Error propagating previous state using IMUs to current state at state time %f with error: %s.", v191, (const char *)v95);
                sub_20E863570((uint64_t)&v177);
              }
              sub_20E863714((uint64_t)&v177);
            }
          }
          if (v188 < 0)
            operator delete(v187[0]);
          v3 = v191;
        }
        v96 = a2[9];
        v206 = a2[8];
        v207 = v96;
        v208 = *((_QWORD *)a2 + 20);
        v97 = a2[5];
        v202 = a2[4];
        v203 = v97;
        v98 = a2[7];
        v204 = a2[6];
        v205 = v98;
        v99 = a2[1];
        *(_OWORD *)object = *a2;
        *(_OWORD *)&object[2] = v99;
        v100 = a2[3];
        *(_OWORD *)&object[4] = a2[2];
        v201 = v100;
      }
      v7 = *(_QWORD **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 5456) = *(_QWORD *)(a1 + 5440);
    *(double *)(a1 + 5440) = v23;
    v101 = *a2;
    v102 = a2[2];
    *(_OWORD *)(a1 + 4608) = a2[1];
    *(_OWORD *)(a1 + 4624) = v102;
    *(_OWORD *)(a1 + 4592) = v101;
    v103 = a2[3];
    v104 = a2[4];
    v105 = a2[6];
    *(_OWORD *)(a1 + 4672) = a2[5];
    *(_OWORD *)(a1 + 4688) = v105;
    *(_OWORD *)(a1 + 4640) = v103;
    *(_OWORD *)(a1 + 4656) = v104;
    v106 = a2[7];
    v107 = a2[8];
    v108 = a2[9];
    *(_QWORD *)(a1 + 4752) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 4720) = v107;
    *(_OWORD *)(a1 + 4736) = v108;
    *(_OWORD *)(a1 + 4704) = v106;
    *(_OWORD *)(a1 + 4960) = *(_OWORD *)(a1 + 4792);
    *(_OWORD *)(a1 + 4944) = *(_OWORD *)(a1 + 4776);
    *(_OWORD *)(a1 + 4928) = *(_OWORD *)(a1 + 4760);
    v109 = *(_OWORD *)(a1 + 4872);
    *(_OWORD *)(a1 + 5024) = *(_OWORD *)(a1 + 4856);
    *(_OWORD *)(a1 + 5008) = *(_OWORD *)(a1 + 4840);
    *(_OWORD *)(a1 + 4992) = *(_OWORD *)(a1 + 4824);
    *(_OWORD *)(a1 + 4976) = *(_OWORD *)(a1 + 4808);
    *(_QWORD *)(a1 + 5088) = *(_QWORD *)(a1 + 4920);
    v110 = *(_OWORD *)(a1 + 4888);
    *(_OWORD *)(a1 + 5072) = *(_OWORD *)(a1 + 4904);
    *(_OWORD *)(a1 + 5056) = v110;
    *(_OWORD *)(a1 + 5040) = v109;
    v111 = v202;
    *(_OWORD *)(a1 + 4840) = v203;
    *(_OWORD *)(a1 + 4824) = v111;
    v112 = *(_OWORD *)&object[4];
    *(_OWORD *)(a1 + 4808) = v201;
    *(_QWORD *)(a1 + 4920) = v208;
    v113 = v207;
    *(_OWORD *)(a1 + 4888) = v206;
    *(_OWORD *)(a1 + 4904) = v113;
    v114 = v205;
    *(_OWORD *)(a1 + 4856) = v204;
    *(_OWORD *)(a1 + 4872) = v114;
    v115 = *(_OWORD *)&object[2];
    *(_OWORD *)(a1 + 4760) = *(_OWORD *)object;
    *(_OWORD *)(a1 + 4776) = v115;
    *(_OWORD *)(a1 + 4792) = v112;
    v116 = *a2;
    v117 = a2[2];
    *(_OWORD *)(a1 + 5272) = a2[1];
    *(_OWORD *)(a1 + 5288) = v117;
    *(_OWORD *)(a1 + 5256) = v116;
    v118 = a2[3];
    v119 = a2[4];
    v120 = a2[6];
    *(_OWORD *)(a1 + 5336) = a2[5];
    *(_OWORD *)(a1 + 5352) = v120;
    *(_OWORD *)(a1 + 5304) = v118;
    *(_OWORD *)(a1 + 5320) = v119;
    v121 = a2[7];
    v122 = a2[8];
    v123 = a2[9];
    *(_QWORD *)(a1 + 5416) = *((_QWORD *)a2 + 20);
    *(_OWORD *)(a1 + 5384) = v122;
    *(_OWORD *)(a1 + 5400) = v123;
    *(_OWORD *)(a1 + 5368) = v121;
    sub_20F1BC818((_BOOL8)v7, a2, (__int128 *)object, v3);
    if (*(_BYTE *)(a1 + 2624) == 5)
    {
      v124 = *(double *)(a1 + 5424);
      if (v124 != 0.0)
      {
        v125 = v3 - v124;
        v126 = sub_20F3F68E4(*(_QWORD *)(a1 + 1976), *(_QWORD *)(a1 + 1984), v3 - v124, *(double *)(a1 + 3112));
        *(double *)(a1 + 1976) = v126;
        *(_BYTE *)(a1 + 1984) = 1;
        if (vabdd_f64(v125, v126) > v126 * *(double *)(a1 + 3120))
        {
          sub_20F18E90C(*(_QWORD *)(a1 + 3720));
          sub_20F18E90C(*(_QWORD *)(a1 + 3728));
          sub_20F18E90C(*(_QWORD *)(a1 + 3736));
          sub_20F18E90C(*(_QWORD *)(a1 + 3744));
          sub_20F18E90C(*(_QWORD *)(a1 + 3752));
          sub_20F18E90C(*(_QWORD *)(a1 + 3760));
        }
      }
      v127 = *((_QWORD *)a2 + 2);
      v128 = *(__int128 *)((char *)a2 + 24);
      v129 = *((_QWORD *)a2 + 5);
      v130 = a2[3];
      v131 = (std::__shared_weak_count *)*((_QWORD *)a2 + 8);
      v194 = *a2;
      v195 = v127;
      v197 = v129;
      v196 = v128;
      v199 = v131;
      v198 = v130;
      v177 = 0;
      rep = 0;
      v179 = 0;
      sub_20E9733B8((float64x2_t *)&v194, (double *)&v177);
      *(_QWORD *)&v132.f64[0] = v177;
      sub_20F18EB24(*(_QWORD *)(a1 + 3720), v132, v133, v134, v135, v136, v137, v138);
      v139.f64[0] = *((float64_t *)a2 + 18);
      sub_20F18EB24(*(_QWORD *)(a1 + 3744), v139, v140, v141, v142, v143, v144, v145);
      *(_QWORD *)&v146.f64[0] = rep;
      sub_20F18EB24(*(_QWORD *)(a1 + 3728), v146, v147, v148, v149, v150, v151, v152);
      v153.f64[0] = *((float64_t *)a2 + 19);
      sub_20F18EB24(*(_QWORD *)(a1 + 3752), v153, v154, v155, v156, v157, v158, v159);
      *(_QWORD *)&v160.f64[0] = v179;
      sub_20F18EB24(*(_QWORD *)(a1 + 3736), v160, v161, v162, v163, v164, v165, v166);
      v167.f64[0] = *((float64_t *)a2 + 20);
      sub_20F18EB24(*(_QWORD *)(a1 + 3760), v167, v168, v169, v170, v171, v172, v173);
    }
    *(double *)(a1 + 5448) = v9;
    kdebug_trace();
    *(double *)(a1 + 5424) = v3;
    return;
  }
  if (!*(_BYTE *)(a1 + 3312))
    return;
  sub_20F1D8150(v193);
  if (**(int **)(v193[0] + 56) > 4)
    return;
  v14 = *(unsigned __int8 *)(v193[0] + 72);
  v15 = sub_20E8C31DC(v193[0], "OSLogSurrogateAppender", 1, 0);
  v16 = v15;
  if (!v14 && v15 == 0)
    return;
  v175 = v14;
  *(_QWORD *)&v194 = v193;
  *((std::chrono::steady_clock::time_point *)&v194 + 1) = std::chrono::steady_clock::now();
  v195 = std::chrono::system_clock::now().__d_.__rep_;
  LODWORD(v196) = 4;
  *((_QWORD *)&v196 + 1) = "unknown file";
  LODWORD(v197) = 1082;
  *((_QWORD *)&v198 + 1) = 0;
  v199 = 0;
  *(_QWORD *)&v198 = "unknown function";
  v18 = *(_QWORD *)v194;
  v19 = (const char *)(*(_QWORD *)v194 + 16);
  v174 = v19;
  if (*(char *)(*(_QWORD *)v194 + 39) < 0)
  {
    v19 = *(const char **)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
  }
  else
  {
    v20 = *(unsigned __int8 *)(*(_QWORD *)v194 + 39);
  }
  v39 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v39 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)object);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
    if (LOBYTE(object[3]) && SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v40 = byte_254A4A4F8;
  else
    v40 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v41 = byte_254A4A4F8[23];
  else
    v41 = *(_QWORD *)&byte_254A4A4F8[8];
  object[0] = os_log_create(v40, v19);
  v42 = &object[1];
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v41 >= 0x17)
  {
    v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v43 = v41 | 7;
    v44 = v43 + 1;
    v42 = (void **)operator new(v43 + 1);
    object[2] = (void *)v41;
    object[3] = (void *)(v44 | 0x8000000000000000);
    object[1] = v42;
    goto LABEL_61;
  }
  HIBYTE(object[3]) = v41;
  if (v41)
LABEL_61:
    memmove(v42, v40, v41);
  *((_BYTE *)v42 + v41) = 0;
  LOBYTE(object[4]) = 1;
  v45 = &object[5];
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v20 >= 0x17)
  {
    v46 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v46 = v20 | 7;
    v47 = v46 + 1;
    v45 = (void **)operator new(v46 + 1);
    *(_QWORD *)&v201 = v20;
    *((_QWORD *)&v201 + 1) = v47 | 0x8000000000000000;
    object[5] = v45;
  }
  else
  {
    HIBYTE(v201) = v20;
    if (!v20)
      goto LABEL_70;
  }
  memmove(v45, v19, v20);
LABEL_70:
  *((_BYTE *)v45 + v20) = 0;
  LOBYTE(v202) = 1;
  v48 = object[0];
  if (SHIBYTE(v201) < 0)
    operator delete(object[5]);
  if (LOBYTE(object[4]) && SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (object[0])
    os_release(object[0]);
  if (v16 && *(_QWORD *)(v16 + 24))
  {
    v49 = _os_log_pack_size();
    v50 = (std::__shared_weak_count_vtbl *)operator new(v49, (std::align_val_t)8uLL);
    v51 = (std::__shared_weak_count *)operator new();
    v52 = v51;
    v51->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    v51->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v51->__shared_weak_owners_ = 0;
    v51[1].__vftable = v50;
    object[0] = v50;
    object[1] = v50;
    object[2] = v51;
    do
      v54 = __ldxr(p_shared_owners);
    while (__stxr(v54 + 1, p_shared_owners));
    memset(&object[3], 0, 24);
    do
      v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v52);
    }
    v56 = object[0];
    v57 = _os_log_pack_fill();
    v58 = v191;
    v59 = *(_QWORD *)(a1 + 5424);
    *(_DWORD *)v57 = 134218240;
    *(double *)(v57 + 4) = v58;
    *(_WORD *)(v57 + 12) = 2048;
    *(_QWORD *)(v57 + 14) = v59;
    v60 = operator new();
    v61 = *(unsigned __int8 *)(v18 + 39);
    v62 = *(const char **)(v18 + 16);
    v63 = *(_QWORD *)(v18 + 24);
    v64 = *(_OWORD *)&object[3];
    *(_OWORD *)(v60 + 8) = *(_OWORD *)&object[1];
    if ((v61 & 0x80u) != 0)
      v61 = v63;
    else
      v62 = v174;
    *(_QWORD *)v60 = v56;
    object[1] = 0;
    object[2] = 0;
    *(_OWORD *)(v60 + 24) = v64;
    object[3] = 0;
    object[4] = 0;
    *(_QWORD *)(v60 + 40) = v62;
    *(_QWORD *)(v60 + 48) = v61;
    *(_BYTE *)(v60 + 56) = 16;
    v187[0] = 0;
    v177 = (uint64_t *)v60;
    (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v16 + 24) + 40))(*(_QWORD *)(v16 + 24), &v177);
    v65 = v177;
    v177 = 0;
    if (v65)
    {
      v66 = (std::__shared_weak_count *)v65[4];
      if (v66)
      {
        v67 = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      v69 = (std::__shared_weak_count *)v65[2];
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      MEMORY[0x212BC6398](v65, 0x10F0C40B62ED6C6);
      v72 = v187[0];
      v187[0] = 0;
      if (v72)
      {
        v73 = (std::__shared_weak_count *)*((_QWORD *)v72 + 4);
        if (v73)
        {
          v74 = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v76 = (std::__shared_weak_count *)*((_QWORD *)v72 + 2);
        if (v76)
        {
          v77 = (unint64_t *)&v76->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }
        MEMORY[0x212BC6398](v72, 0x10F0C40B62ED6C6);
      }
    }
    v79 = (std::__shared_weak_count *)object[4];
    v80 = v175;
    if (object[4])
    {
      v81 = (unint64_t *)((char *)object[4] + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    v83 = (std::__shared_weak_count *)object[2];
    if (object[2])
    {
      v84 = (unint64_t *)((char *)object[2] + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
  }
  else
  {
    os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
    v86 = *(void **)(a1 + 5424);
    LODWORD(object[0]) = 134218240;
    *(void **)((char *)object + 4) = *(void **)&v191;
    WORD2(object[1]) = 2048;
    *(void **)((char *)&object[1] + 6) = v86;
    v87 = (void *)_os_log_send_and_compose_impl();
    v80 = v175;
    if (v87)
      free(v87);
  }
  if (v80)
  {
    sub_20E8C003C((uint64_t)&v194, "VisualSLAMAddInertialState timestamp (%f) less than or equal to previous state timestamp (%f). Inertial state not updated.", v191, *(double *)(a1 + 5424));
    sub_20E863570((uint64_t)&v194);
  }
  sub_20E863570((uint64_t)&v194);
  v88 = v199;
  if (v199)
  {
    v89 = (unint64_t *)&v199->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
}

void sub_20F1D7D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,void *a38,int a39,__int16 a40,char a41,char a42,char a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *object,void *a53,int a54,__int16 a55,char a56,char a57,char a58,int a59,__int16 a60,char a61,char a62)
{
  if (a43 && a42 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a14);
  if (a29 < 0)
  {
    operator delete(a24);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F1D7F7C(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v19[104];
  void *__p;
  void *v21;
  char v22;

  v8 = *(_QWORD *)(a1 + 8);
  v19[0] = 0;
  v22 = 0;
  v9 = sub_20F1BCAF8(v8, a1 + 16, 0, 0, (uint64_t)v19, a4, 0, a5);
  if (v22 && __p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (!(_DWORD)v9)
  {
    kdebug_trace();
    kdebug_trace();
    if (!*(_BYTE *)(a1 + 192)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 39, (uint64_t)"bundle.state", 12, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    *a3 = *(_QWORD *)(a1 + 200);
    v10 = *(_OWORD *)(a1 + 24);
    v11 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)a2 = v10;
    v12 = *(_OWORD *)(a1 + 72);
    v13 = *(_OWORD *)(a1 + 88);
    v14 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a2 + 96) = v14;
    *(_OWORD *)(a2 + 48) = v12;
    *(_OWORD *)(a2 + 64) = v13;
    v15 = *(_OWORD *)(a1 + 136);
    v16 = *(_OWORD *)(a1 + 152);
    v17 = *(_OWORD *)(a1 + 168);
    *(_QWORD *)(a2 + 160) = *(_QWORD *)(a1 + 184);
    *(_OWORD *)(a2 + 128) = v16;
    *(_OWORD *)(a2 + 144) = v17;
    *(_OWORD *)(a2 + 112) = v15;
    if (!*(_BYTE *)(a1 + 192) || *(_QWORD *)(a1 + 208) != *(_QWORD *)(a1 + 216))
      sub_20F4BA010(a2, a1 + 4280, (uint64_t *)(a1 + 208));
  }
  return v9;
}

void sub_20F1D812C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a28)
  {
    if (__p)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F1D8150(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68188);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68188))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68180);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68188);
  }
  *a1 = qword_254A68180;
}

void sub_20F1D81EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68188);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68188);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1D8244(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double a5)
{
  _BYTE *v10;
  int v11;
  uint64_t result;
  int v13;
  double v14;
  double v15;
  uint64_t v16;
  double **v17;
  _BOOL4 v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int8 v28;
  size_t v29;
  const char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  size_t v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  double v76;
  double v77;
  BOOL v78;
  BOOL v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int v86;
  double v87;
  double v88;
  double v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  char v99;
  _BOOL4 v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  int64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  const void *v117;
  uint64_t v118;
  int64_t v119;
  int **v120;
  double *v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  long double v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  float64x2_t v137;
  float64x2_t v138;
  int **v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  long double v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  float64x2_t v153;
  float64x2_t v154;
  uint64_t v155;
  float64_t *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  uint64_t *v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  int v172;
  int v173;
  int v174;
  unint64_t v175;
  uint64_t v176;
  size_t v177;
  const char *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  float64x2_t v182;
  float64x2_t v183;
  unsigned __int8 v184;
  const char *v185;
  size_t v186;
  _BYTE *v187;
  unint64_t v188;
  const char *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  NSObject *v197;
  size_t v198;
  std::__shared_weak_count_vtbl *v199;
  std::__shared_weak_count *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  char *v209;
  void *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  void *v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  const char *__src;
  char __srca;
  int v238;
  int **v239;
  size_t __len;
  size_t __lena;
  unint64_t v242;
  int v243;
  char *category;
  char *categorya;
  char *categoryb;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  int **v258;
  double *v259;
  double *v260;
  void *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  __int128 v265;
  __int128 v266;
  float64x2_t v267;
  float64x2_t v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  _BYTE object[48];
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  uint64_t v284;
  char v285;
  uint64_t v286;

  v286 = *MEMORY[0x24BDAC8D0];
  v10 = (_BYTE *)(a1 + 4584);
  if (*(_BYTE *)(a1 + 4584) != 1
    || (v11 = *(unsigned __int8 *)(a1 + 2292), *(_BYTE *)(a1 + 2292)) && *(_BYTE *)(a1 + 2280) && *(_BYTE *)(a1 + 2281)
    || *(_BYTE *)(a1 + 3130) && *(_BYTE *)(a1 + 2293))
  {
    result = sub_20F1D9D68(a1, a2, a3, a4, a5);
    if ((_DWORD)result)
      return result;
    goto LABEL_173;
  }
  v13 = *(unsigned __int8 *)(a1 + 3208);
  if (v13 == 2)
  {
    v15 = *(double *)(a1 + 5424);
    goto LABEL_15;
  }
  if (v13 == 1)
  {
    v15 = *(double *)(a1 + 5448);
LABEL_15:
    v14 = v15 + *(double *)(a1 + 3200);
    goto LABEL_16;
  }
  v14 = 0.0;
  if (!*(_BYTE *)(a1 + 3208))
    v14 = *(double *)(a1 + 5440);
LABEL_16:
  if (v14 < *(double *)(a1 + 5424))
    v14 = *(double *)(a1 + 5424);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = (double **)(a1 + 880);
  if (v11)
  {
    if (*(_BYTE *)(a1 + 2280))
      v18 = *(_BYTE *)(a1 + 2281) == 0;
    else
      v18 = 1;
  }
  else
  {
    v18 = 0;
  }
  result = sub_20F1C2320(v16, a1 + 880, *(uint64_t *)&v14, 1, a1 + 2624, v18, a5);
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 904) == *(_QWORD *)(a1 + 912)
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1476, (uint64_t)"!visual_bundle_.states.empty()", 30, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      goto LABEL_279;
    }
    if ((a4 & 1) != 0)
      goto LABEL_116;
    if (!*(_BYTE *)(a1 + 3312))
      goto LABEL_116;
    sub_20F1D8150(&v258);
    if (*v258[7] > 2)
      goto LABEL_116;
    v23 = *((unsigned __int8 *)v258 + 72);
    v24 = sub_20E8C31DC((uint64_t)v258, "OSLogSurrogateAppender", 1, 0);
    v25 = v24;
    if (!v23 && !v24)
      goto LABEL_116;
    *(_QWORD *)&v265 = &v258;
    *((std::chrono::steady_clock::time_point *)&v265 + 1) = std::chrono::steady_clock::now();
    *(std::chrono::system_clock::time_point *)&v266 = std::chrono::system_clock::now();
    DWORD2(v266) = 2;
    *(_QWORD *)&v267.f64[0] = "unknown file";
    LODWORD(v267.f64[1]) = 1479;
    v268.f64[1] = 0.0;
    *(_QWORD *)&v269 = 0;
    *(_QWORD *)&v268.f64[0] = "unknown function";
    v26 = *(_QWORD *)v265;
    if (*(char *)(*(_QWORD *)v265 + 39) < 0)
    {
      category = *(char **)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
    }
    else
    {
      v27 = *(unsigned __int8 *)(*(_QWORD *)v265 + 39);
      category = (char *)(*(_QWORD *)v265 + 16);
    }
    __len = v27;
    v242 = v25;
    v234 = *(_QWORD *)v265 + 16;
    v235 = *(_QWORD *)v265;
    v238 = v23;
    v28 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
      if (object[24] && (object[23] & 0x80000000) != 0)
        operator delete(*(void **)object);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v29 = byte_254A4A4F8[23];
    else
      v29 = *(_QWORD *)&byte_254A4A4F8[8];
    if (byte_254A4A4F8[23] >= 0)
      v30 = byte_254A4A4F8;
    else
      v30 = *(const char **)byte_254A4A4F8;
    __src = v30;
    *(_QWORD *)object = os_log_create(v30, category);
    v31 = &object[8];
    if (v29 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v29 >= 0x17)
    {
      v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v32 = v29 | 7;
      v33 = v32 + 1;
      v31 = operator new(v32 + 1);
      *(_QWORD *)&object[24] = v33 | 0x8000000000000000;
      *(_QWORD *)&object[8] = v31;
      *(_QWORD *)&object[16] = v29;
    }
    else
    {
      object[31] = v29;
      if (!v29)
      {
LABEL_49:
        v31[v29] = 0;
        object[32] = 1;
        v34 = &object[40];
        if (__len > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (__len >= 0x17)
        {
          v35 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__len | 7) != 0x17)
            v35 = __len | 7;
          v36 = v35 + 1;
          v34 = operator new(v35 + 1);
          *((_QWORD *)&v277 + 1) = v36 | 0x8000000000000000;
          *(_QWORD *)&object[40] = v34;
          *(_QWORD *)&v277 = __len;
        }
        else
        {
          HIBYTE(v277) = __len;
          if (!__len)
            goto LABEL_57;
        }
        memmove(v34, category, __len);
LABEL_57:
        v34[__len] = 0;
        LOBYTE(v278) = 1;
        v37 = *(NSObject **)object;
        if (SHIBYTE(v277) < 0)
          operator delete(*(void **)&object[40]);
        if (object[32] && (object[31] & 0x80000000) != 0)
          operator delete(*(void **)&object[8]);
        if (*(_QWORD *)object)
          os_release(*(void **)object);
        if (v242 && *(_QWORD *)(v242 + 24))
        {
          v38 = _os_log_pack_size();
          v39 = (std::__shared_weak_count_vtbl *)operator new(v38, (std::align_val_t)8uLL);
          v40 = (std::__shared_weak_count *)operator new();
          v41 = v40;
          v40->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v40->__shared_weak_owners_ = 0;
          v40[1].__vftable = v39;
          *(_QWORD *)object = v39;
          *(_QWORD *)&object[8] = v39;
          *(_QWORD *)&object[16] = v40;
          do
            v43 = __ldxr(p_shared_owners);
          while (__stxr(v43 + 1, p_shared_owners));
          memset(&object[24], 0, 24);
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v41);
          }
          v45 = *(_QWORD *)object;
          v46 = _os_log_pack_fill();
          *(_DWORD *)v46 = 134217984;
          *(double *)(v46 + 4) = a5;
          v47 = operator new();
          v48 = *(unsigned __int8 *)(v235 + 39);
          v49 = v234;
          if ((v48 & 0x80u) != 0)
          {
            v49 = *(_QWORD *)(v235 + 16);
            v48 = *(_QWORD *)(v235 + 24);
          }
          *(_QWORD *)v47 = v45;
          *(_OWORD *)(v47 + 8) = *(_OWORD *)&object[8];
          *(_QWORD *)&object[8] = 0;
          *(_QWORD *)&object[16] = 0;
          *(_OWORD *)(v47 + 24) = *(_OWORD *)&object[24];
          *(_QWORD *)&object[24] = 0;
          *(_QWORD *)&object[32] = 0;
          *(_QWORD *)(v47 + 40) = v49;
          *(_QWORD *)(v47 + 48) = v48;
          *(_BYTE *)(v47 + 56) = 2;
          v261 = 0;
          *(_QWORD *)&v247 = v47;
          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v242 + 24) + 40))(*(_QWORD *)(v242 + 24), &v247);
          v50 = v247;
          *(_QWORD *)&v247 = 0;
          if (v50)
          {
            v51 = *(std::__shared_weak_count **)(v50 + 32);
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v54 = *(std::__shared_weak_count **)(v50 + 16);
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            MEMORY[0x212BC6398](v50, 0x10F0C40B62ED6C6);
            v57 = v261;
            v261 = 0;
            if (v57)
            {
              v58 = (std::__shared_weak_count *)*((_QWORD *)v57 + 4);
              if (v58)
              {
                v59 = (unint64_t *)&v58->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
              v61 = (std::__shared_weak_count *)*((_QWORD *)v57 + 2);
              if (v61)
              {
                v62 = (unint64_t *)&v61->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                  std::__shared_weak_count::__release_weak(v61);
                }
              }
              MEMORY[0x212BC6398](v57, 0x10F0C40B62ED6C6);
            }
          }
          v64 = *(std::__shared_weak_count **)&object[32];
          if (*(_QWORD *)&object[32])
          {
            v65 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v67 = *(std::__shared_weak_count **)&object[16];
          if (*(_QWORD *)&object[16])
          {
            v68 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
        }
        else
        {
          os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG);
          *(_DWORD *)object = 134217984;
          *(double *)&object[4] = a5;
          v70 = (void *)_os_log_send_and_compose_impl();
          if (v70)
            free(v70);
        }
        if (v238)
        {
          sub_20E8C003C((uint64_t)&v265, "VisualSLAMGetInertialStateAtTime: Ignoring allow_extrapolate at time %f.", a5);
          sub_20E863570((uint64_t)&v265);
        }
        sub_20E863570((uint64_t)&v265);
        v71 = (std::__shared_weak_count *)v269;
        if ((_QWORD)v269)
        {
          v72 = (unint64_t *)(v269 + 8);
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
LABEL_116:
        *a3 = *(double *)(a1 + 1000);
        v74 = *(unsigned __int8 *)(a1 + 992);
        if (v74 == 1)
        {
          v75 = *(_QWORD *)(a1 + 904);
          v76 = **v17;
          v77 = (*v17)[1];
          v78 = v76 < 0.0 || v77 < v76;
          if (v78
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 322, (uint64_t)"timestamp2 >= timestamp1 && timestamp1 >= 0", 43, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v79 = v76 > a5 || v77 < a5;
          if (v79
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 323, (uint64_t)"interp_timestamp >= timestamp1 && interp_timestamp <= timestamp2", 64, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v20.f64[0] = v77 - v76;
          if (v77 - v76 == 0.0)
            v20.f64[0] = 1.0;
          v19.f64[0] = 1.0 - (a5 - v76) / v20.f64[0];
          sub_20F1B4AFC(v75, v75 + 168, (uint64_t)object, v19, v20, v21, v22);
          v80 = v283;
          *(_OWORD *)(a2 + 128) = v282;
          *(_OWORD *)(a2 + 144) = v80;
          *(_QWORD *)(a2 + 160) = v284;
          v81 = v279;
          *(_OWORD *)(a2 + 64) = v278;
          *(_OWORD *)(a2 + 80) = v81;
          v82 = v281;
          *(_OWORD *)(a2 + 96) = v280;
          *(_OWORD *)(a2 + 112) = v82;
          v83 = *(_OWORD *)&object[16];
          *(_OWORD *)a2 = *(_OWORD *)object;
          *(_OWORD *)(a2 + 16) = v83;
          v85 = *(_OWORD *)&object[32];
          v84 = v277;
        }
        else
        {
          v86 = *(unsigned __int8 *)(a1 + 2280);
          categorya = (char *)(a1 + 4280);
          if (v74 == 2)
          {
            v87 = *(double *)(*(_QWORD *)(a1 + 888) - 8);
            v88 = *(double *)(a1 + 3104);
            if (a5 - v87 <= v88)
              v89 = a5;
            else
              v89 = v87 + v88;
            v90 = *(_QWORD *)(a1 + 912) - 168;
            if (*(_BYTE *)(a1 + 2280)
              && (unint64_t)(0x6DB6DB6DB6DB6DB7
                                  * ((uint64_t)(*(_QWORD *)(a1 + 960) - *(_QWORD *)(a1 + 952)) >> 3)) > 1)
            {
              sub_20F1B8130(v90, (uint64_t *)(a1 + 952), (uint64_t)categorya, (uint64_t)object, v87, v89);
            }
            else
            {
              v91 = *(_OWORD *)v90;
              v92 = *(_OWORD *)(*(_QWORD *)(a1 + 912) - 136);
              *(_OWORD *)&object[16] = *(_OWORD *)(*(_QWORD *)(a1 + 912) - 152);
              *(_OWORD *)&object[32] = v92;
              *(_OWORD *)object = v91;
              v93 = *(_OWORD *)(v90 + 48);
              v94 = *(_OWORD *)(v90 + 64);
              v95 = *(_OWORD *)(v90 + 96);
              v279 = *(_OWORD *)(v90 + 80);
              v280 = v95;
              v277 = v93;
              v278 = v94;
              v96 = *(_OWORD *)(v90 + 112);
              v97 = *(_OWORD *)(v90 + 128);
              v98 = *(_OWORD *)(v90 + 144);
              v284 = *(_QWORD *)(v90 + 160);
              v282 = v97;
              v283 = v98;
              v281 = v96;
            }
            v255 = v282;
            v256 = v283;
            v257 = v284;
            v251 = v278;
            v252 = v279;
            v253 = v280;
            v254 = v281;
            v247 = *(_OWORD *)object;
            v248 = *(_OWORD *)&object[16];
            v249 = *(_OWORD *)&object[32];
            v250 = v277;
          }
          else
          {
            __lena = *(_QWORD *)(a1 + 5552);
            v99 = *(_BYTE *)(a1 + 3312);
            v243 = *(unsigned __int8 *)(a1 + 2280);
            if (*(double *)(a1 + 3104) < 0.0)
            {
              v100 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2708, (uint64_t)"config.visual_slam_extrap_limit >= 0.", 37, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v86 = v243;
              if (v100)
                abort();
            }
            if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)(a1 + 912) - *(_QWORD *)(a1 + 904)) >> 3) != (uint64_t)(*(_QWORD *)(a1 + 888) - *(_QWORD *)(a1 + 880)) >> 3)
            {
              v101 = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2709, (uint64_t)"bundle.states.size() == bundle.state_timestamps.size()", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
              v86 = v243;
              if (v101)
                abort();
            }
            if (*(double *)(a1 + 5440) <= a5)
            {
              v140 = *(double *)(*(_QWORD *)(a1 + 888) - 8);
              v141 = *(double *)(a1 + 3104);
              v142 = a5 - v140;
              v143 = v140 + v141;
              if (v142 <= v141)
                v144 = a5;
              else
                v144 = v143;
              sub_20F1DD158((uint64_t)object, v74, v99, (_QWORD *)(a1 + 904), (_QWORD *)(a1 + 880), (uint64_t *)(a1 + 952), a1 + 2624, v86 != 0, v144, (uint64_t)categorya, __lena, (uint64_t *)(a1 + 3720), a1 + 1968);
              v148 = pow(*(long double *)(a1 + 3216), (a5 - *(double *)(a1 + 5440)) * 100.0);
              if (v74)
              {
                v149 = *(_OWORD *)(a1 + 4904);
                v273 = *(_OWORD *)(a1 + 4888);
                v274 = v149;
                v275 = *(_QWORD *)(a1 + 4920);
                v150 = *(_OWORD *)(a1 + 4840);
                v269 = *(_OWORD *)(a1 + 4824);
                v270 = v150;
                v151 = *(_OWORD *)(a1 + 4872);
                v271 = *(_OWORD *)(a1 + 4856);
                v272 = v151;
                v152 = *(_OWORD *)(a1 + 4776);
                v265 = *(_OWORD *)(a1 + 4760);
                v266 = v152;
                v154 = *(float64x2_t *)(a1 + 4792);
                v153 = *(float64x2_t *)(a1 + 4808);
                v267 = v154;
                v268 = v153;
              }
              else
              {
                v155 = *(_QWORD *)(a1 + 880);
                v145.f64[0] = *(float64_t *)(v155 + 8);
                sub_20F1B7E80((float64x2_t *)(*(_QWORD *)(a1 + 928) + 168), *(_QWORD *)(a1 + 928) + 336, (uint64_t *)(a1 + 952), v243 != 0, (uint64_t)categorya, (uint64_t)&v265, v145, *(double *)(v155 + 16), v144);
              }
              v153.f64[0] = v148;
              sub_20F1B4AFC((uint64_t)&v265, (uint64_t)object, (uint64_t)&v247, v153, v154, v146, v147);
            }
            else
            {
              __srca = v99;
              v102 = *(_QWORD *)(a1 + 904);
              v103 = *(_QWORD *)(a1 + 912) - 168;
              v262 = 0;
              v263 = 0;
              v261 = 0;
              v104 = v103 - v102;
              if (v103 != v102)
              {
                v105 = 0xCF3CF3CF3CF3CF3DLL * (v104 >> 3);
                if (v105 >= 0x186186186186187)
                  sub_20E867F44();
                v106 = (char *)operator new(v104);
                v107 = 0;
                v261 = v106;
                v263 = &v106[168 * v105];
                do
                {
                  v108 = &v106[v107];
                  v109 = *(_OWORD *)(v102 + v107);
                  v110 = *(_OWORD *)(v102 + v107 + 32);
                  *((_OWORD *)v108 + 1) = *(_OWORD *)(v102 + v107 + 16);
                  *((_OWORD *)v108 + 2) = v110;
                  *(_OWORD *)v108 = v109;
                  v111 = *(_OWORD *)(v102 + v107 + 48);
                  v112 = *(_OWORD *)(v102 + v107 + 64);
                  v113 = *(_OWORD *)(v102 + v107 + 96);
                  *((_OWORD *)v108 + 5) = *(_OWORD *)(v102 + v107 + 80);
                  *((_OWORD *)v108 + 6) = v113;
                  *((_OWORD *)v108 + 3) = v111;
                  *((_OWORD *)v108 + 4) = v112;
                  v114 = *(_OWORD *)(v102 + v107 + 112);
                  v115 = *(_OWORD *)(v102 + v107 + 128);
                  v116 = *(_OWORD *)(v102 + v107 + 144);
                  *((_QWORD *)v108 + 20) = *(_QWORD *)(v102 + v107 + 160);
                  *((_OWORD *)v108 + 8) = v115;
                  *((_OWORD *)v108 + 9) = v116;
                  *((_OWORD *)v108 + 7) = v114;
                  v107 += 168;
                }
                while (v102 + v107 != v103);
                v262 = &v106[v107];
              }
              v117 = *(const void **)(a1 + 880);
              v118 = *(_QWORD *)(a1 + 888) - (_QWORD)v117;
              v259 = 0;
              v260 = 0;
              v258 = 0;
              v119 = v118 - 8;
              if (v118 - 8 < 0)
                sub_20E867F44();
              v120 = (int **)operator new(v118 - 8);
              v121 = (double *)&v120[v119 >> 3];
              v258 = v120;
              v260 = v121;
              v239 = v120;
              memmove(v120, v117, v119);
              v259 = v121;
              v122 = *(v121 - 1);
              v123 = *(double *)(a1 + 3104);
              v124 = a5 - v122;
              v125 = v122 + v123;
              if (v124 <= v123)
                v126 = a5;
              else
                v126 = v125;
              sub_20F1DD158((uint64_t)object, v74, __srca, &v261, &v258, (uint64_t *)(a1 + 952), a1 + 2624, v243 != 0, v126, (uint64_t)categorya, __lena, (uint64_t *)(a1 + 3720), a1 + 1968);
              v127 = a5 - *(double *)(a1 + 5456);
              v128 = v127 * 100.0;
              if (v127 <= 0.0)
                v128 = 0.0;
              v132 = pow(*(long double *)(a1 + 3216), v128);
              if (v74)
              {
                v133 = *(_OWORD *)(a1 + 5072);
                v273 = *(_OWORD *)(a1 + 5056);
                v274 = v133;
                v275 = *(_QWORD *)(a1 + 5088);
                v134 = *(_OWORD *)(a1 + 5008);
                v269 = *(_OWORD *)(a1 + 4992);
                v270 = v134;
                v135 = *(_OWORD *)(a1 + 5040);
                v271 = *(_OWORD *)(a1 + 5024);
                v272 = v135;
                v136 = *(_OWORD *)(a1 + 4944);
                v265 = *(_OWORD *)(a1 + 4928);
                v266 = v136;
                v138 = *(float64x2_t *)(a1 + 4960);
                v137 = *(float64x2_t *)(a1 + 4976);
                v267 = v138;
                v268 = v137;
                v139 = v239;
              }
              else
              {
                v156 = *(float64_t **)(a1 + 880);
                v129.f64[0] = *v156;
                v139 = v239;
                sub_20F1B7E80(*(float64x2_t **)(a1 + 928), *(_QWORD *)(a1 + 928) + 168, (uint64_t *)(a1 + 952), v243 != 0, (uint64_t)categorya, (uint64_t)&v265, v129, v156[1], v126);
              }
              v137.f64[0] = v132;
              sub_20F1B4AFC((uint64_t)&v265, (uint64_t)object, (uint64_t)&v247, v137, v138, v130, v131);
              operator delete(v139);
              if (v261)
              {
                v262 = (char *)v261;
                operator delete(v261);
              }
            }
          }
          v157 = v256;
          *(_OWORD *)(a2 + 128) = v255;
          *(_OWORD *)(a2 + 144) = v157;
          *(_QWORD *)(a2 + 160) = v257;
          v158 = v252;
          *(_OWORD *)(a2 + 64) = v251;
          *(_OWORD *)(a2 + 80) = v158;
          v159 = v254;
          *(_OWORD *)(a2 + 96) = v253;
          *(_OWORD *)(a2 + 112) = v159;
          v160 = v248;
          *(_OWORD *)a2 = v247;
          *(_OWORD *)(a2 + 16) = v160;
          v85 = v249;
          v84 = v250;
        }
        *(_OWORD *)(a2 + 32) = v85;
        *(_OWORD *)(a2 + 48) = v84;
        if (*(_BYTE *)(a1 + 3192))
          *(double *)(a1 + 5432) = a5;
        kdebug_trace();
        kdebug_trace();
        v161 = *(_QWORD *)(a2 + 16);
        v162 = *(_OWORD *)(a2 + 24);
        v163 = *(_QWORD *)(a2 + 40);
        v164 = *(_OWORD *)(a2 + 48);
        v165 = *(_QWORD *)(a2 + 64);
        *(_OWORD *)object = *(_OWORD *)a2;
        *(_QWORD *)&object[16] = v161;
        *(_QWORD *)&object[40] = v163;
        *(_OWORD *)&object[24] = v162;
        *(_QWORD *)&v278 = v165;
        v277 = v164;
        v265 = 0uLL;
        *(_QWORD *)&v266 = 0;
        sub_20E9733B8((float64x2_t *)object, (double *)&v265);
        kdebug_trace();
        kdebug_trace();
        kdebug_trace();
LABEL_173:
        if (!*v10)
          goto LABEL_178;
        if (*v10 == 1)
        {
          v166 = *(uint64_t **)(a1 + 5560);
          if (!v166)
            return 0;
LABEL_179:
          if (*(_BYTE *)(a1 + 3192))
          {
            v275 = 0;
            v273 = 0u;
            v274 = 0u;
            v271 = 0u;
            v272 = 0u;
            v269 = 0u;
            v270 = 0u;
            v267 = 0u;
            v268 = 0u;
            v265 = 0u;
            v266 = 0u;
            v167 = *(_OWORD *)(a2 + 80);
            v278 = *(_OWORD *)(a2 + 64);
            v279 = v167;
            v284 = *(_QWORD *)(a2 + 160);
            v168 = *(_OWORD *)(a2 + 144);
            v282 = *(_OWORD *)(a2 + 128);
            v283 = v168;
            v169 = *(_OWORD *)(a2 + 112);
            v280 = *(_OWORD *)(a2 + 96);
            v281 = v169;
            v170 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)object = *(_OWORD *)a2;
            *(_OWORD *)&object[16] = v170;
            v171 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)&object[32] = *(_OWORD *)(a2 + 32);
            v277 = v171;
            v285 = 1;
            v172 = sub_20F1A49B0(*v166, (uint64_t)&v265, a3, a5, a4, (uint64_t)object);
            if (v172)
            {
              kdebug_trace();
              if (!*(_BYTE *)(a1 + 3312))
                return 0;
              sub_20F1D8150(&v264);
              if (**(int **)(v264 + 56) > 2)
                return 0;
              v173 = *(unsigned __int8 *)(v264 + 72);
              v174 = *(_BYTE *)(v264 + 72) != 0;
              v175 = sub_20E8C31DC(v264, "OSLogSurrogateAppender", 1, 0);
              if (((v175 == 0) & ~v174) != 0)
                return 0;
              *(_QWORD *)&v247 = &v264;
              *((std::chrono::steady_clock::time_point *)&v247 + 1) = std::chrono::steady_clock::now();
              *(std::chrono::system_clock::time_point *)&v248 = std::chrono::system_clock::now();
              DWORD2(v248) = 2;
              *(_QWORD *)&v249 = "unknown file";
              DWORD2(v249) = 1422;
              *((_QWORD *)&v250 + 1) = 0;
              *(_QWORD *)&v251 = 0;
              *(_QWORD *)&v250 = "unknown function";
              v176 = *(_QWORD *)v247;
              if (*(char *)(*(_QWORD *)v247 + 39) < 0)
              {
                v178 = *(const char **)(v176 + 16);
                v177 = *(_QWORD *)(v176 + 24);
              }
              else
              {
                v177 = *(unsigned __int8 *)(*(_QWORD *)v247 + 39);
                v178 = (const char *)(*(_QWORD *)v247 + 16);
              }
              categoryb = (char *)(*(_QWORD *)v247 + 16);
              v184 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v184 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)object);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
                if (object[24] && (object[23] & 0x80000000) != 0)
                  operator delete(*(void **)object);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              if (byte_254A4A4F8[23] >= 0)
                v185 = byte_254A4A4F8;
              else
                v185 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v186 = byte_254A4A4F8[23];
              else
                v186 = *(_QWORD *)&byte_254A4A4F8[8];
              *(_QWORD *)object = os_log_create(v185, v178);
              v187 = &object[8];
              if (v186 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v186 >= 0x17)
              {
                v188 = v175;
                v189 = v178;
                v190 = v176;
                v191 = v173;
                v192 = (v186 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v186 | 7) != 0x17)
                  v192 = v186 | 7;
                v193 = v192 + 1;
                v187 = operator new(v192 + 1);
                *(_QWORD *)&object[24] = v193 | 0x8000000000000000;
                *(_QWORD *)&object[8] = v187;
                *(_QWORD *)&object[16] = v186;
                v173 = v191;
                v176 = v190;
                v178 = v189;
                v175 = v188;
              }
              else
              {
                object[31] = v186;
                if (!v186)
                {
LABEL_210:
                  v187[v186] = 0;
                  object[32] = 1;
                  v194 = &object[40];
                  if (v177 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v177 >= 0x17)
                  {
                    v195 = (v177 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v177 | 7) != 0x17)
                      v195 = v177 | 7;
                    v196 = v195 + 1;
                    v194 = operator new(v195 + 1);
                    *((_QWORD *)&v277 + 1) = v196 | 0x8000000000000000;
                    *(_QWORD *)&object[40] = v194;
                    *(_QWORD *)&v277 = v177;
                  }
                  else
                  {
                    HIBYTE(v277) = v177;
                    if (!v177)
                      goto LABEL_218;
                  }
                  memmove(v194, v178, v177);
LABEL_218:
                  v194[v177] = 0;
                  LOBYTE(v278) = 1;
                  v197 = *(NSObject **)object;
                  if (SHIBYTE(v277) < 0)
                    operator delete(*(void **)&object[40]);
                  if (object[32] && (object[31] & 0x80000000) != 0)
                    operator delete(*(void **)&object[8]);
                  if (*(_QWORD *)object)
                    os_release(*(void **)object);
                  if (v175 && *(_QWORD *)(v175 + 24))
                  {
                    v198 = _os_log_pack_size();
                    v199 = (std::__shared_weak_count_vtbl *)operator new(v198, (std::align_val_t)8uLL);
                    v200 = (std::__shared_weak_count *)operator new();
                    v201 = v200;
                    v200->__shared_owners_ = 0;
                    v202 = (unint64_t *)&v200->__shared_owners_;
                    v200->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v200->__shared_weak_owners_ = 0;
                    v200[1].__vftable = v199;
                    *(_QWORD *)object = v199;
                    *(_QWORD *)&object[8] = v199;
                    *(_QWORD *)&object[16] = v200;
                    do
                      v203 = __ldxr(v202);
                    while (__stxr(v203 + 1, v202));
                    memset(&object[24], 0, 24);
                    do
                      v204 = __ldaxr(v202);
                    while (__stlxr(v204 - 1, v202));
                    if (!v204)
                    {
                      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                      std::__shared_weak_count::__release_weak(v201);
                    }
                    v205 = *(_QWORD *)object;
                    v206 = _os_log_pack_fill();
                    *(_DWORD *)v206 = 67109376;
                    *(_DWORD *)(v206 + 4) = v172;
                    *(_WORD *)(v206 + 8) = 2048;
                    *(double *)(v206 + 10) = a5;
                    v207 = (char *)operator new();
                    v208 = *(unsigned __int8 *)(v176 + 39);
                    v209 = categoryb;
                    if ((v208 & 0x80u) != 0)
                    {
                      v209 = *(char **)(v176 + 16);
                      v208 = *(_QWORD *)(v176 + 24);
                    }
                    *(_QWORD *)v207 = v205;
                    *(_OWORD *)(v207 + 8) = *(_OWORD *)&object[8];
                    *(_QWORD *)&object[8] = 0;
                    *(_QWORD *)&object[16] = 0;
                    *(_OWORD *)(v207 + 24) = *(_OWORD *)&object[24];
                    *(_QWORD *)&object[24] = 0;
                    *(_QWORD *)&object[32] = 0;
                    *((_QWORD *)v207 + 5) = v209;
                    *((_QWORD *)v207 + 6) = v208;
                    v207[56] = 2;
                    v258 = 0;
                    v261 = v207;
                    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v175 + 24) + 40))(*(_QWORD *)(v175 + 24), &v261);
                    v210 = v261;
                    v261 = 0;
                    if (v210)
                    {
                      v211 = (std::__shared_weak_count *)*((_QWORD *)v210 + 4);
                      if (v211)
                      {
                        v212 = (unint64_t *)&v211->__shared_owners_;
                        do
                          v213 = __ldaxr(v212);
                        while (__stlxr(v213 - 1, v212));
                        if (!v213)
                        {
                          ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
                          std::__shared_weak_count::__release_weak(v211);
                        }
                      }
                      v214 = (std::__shared_weak_count *)*((_QWORD *)v210 + 2);
                      if (v214)
                      {
                        v215 = (unint64_t *)&v214->__shared_owners_;
                        do
                          v216 = __ldaxr(v215);
                        while (__stlxr(v216 - 1, v215));
                        if (!v216)
                        {
                          ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                          std::__shared_weak_count::__release_weak(v214);
                        }
                      }
                      MEMORY[0x212BC6398](v210, 0x10F0C40B62ED6C6);
                      v217 = (uint64_t)v258;
                      v258 = 0;
                      if (v217)
                      {
                        v218 = *(std::__shared_weak_count **)(v217 + 32);
                        if (v218)
                        {
                          v219 = (unint64_t *)&v218->__shared_owners_;
                          do
                            v220 = __ldaxr(v219);
                          while (__stlxr(v220 - 1, v219));
                          if (!v220)
                          {
                            ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                            std::__shared_weak_count::__release_weak(v218);
                          }
                        }
                        v221 = *(std::__shared_weak_count **)(v217 + 16);
                        if (v221)
                        {
                          v222 = (unint64_t *)&v221->__shared_owners_;
                          do
                            v223 = __ldaxr(v222);
                          while (__stlxr(v223 - 1, v222));
                          if (!v223)
                          {
                            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                            std::__shared_weak_count::__release_weak(v221);
                          }
                        }
                        MEMORY[0x212BC6398](v217, 0x10F0C40B62ED6C6);
                      }
                    }
                    v224 = *(std::__shared_weak_count **)&object[32];
                    if (*(_QWORD *)&object[32])
                    {
                      v225 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
                      do
                        v226 = __ldaxr(v225);
                      while (__stlxr(v226 - 1, v225));
                      if (!v226)
                      {
                        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                        std::__shared_weak_count::__release_weak(v224);
                      }
                    }
                    v227 = *(std::__shared_weak_count **)&object[16];
                    if (*(_QWORD *)&object[16])
                    {
                      v228 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
                      do
                        v229 = __ldaxr(v228);
                      while (__stlxr(v229 - 1, v228));
                      if (!v229)
                      {
                        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                        std::__shared_weak_count::__release_weak(v227);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG);
                    *(_DWORD *)object = 67109376;
                    *(_DWORD *)&object[4] = v172;
                    *(_WORD *)&object[8] = 2048;
                    *(double *)&object[10] = a5;
                    v230 = (void *)_os_log_send_and_compose_impl();
                    if (v230)
                      free(v230);
                  }
                  if (v173)
                  {
                    sub_20E8C003C((uint64_t)&v247, "MLPosePredictor returns %u at %.6f", v172, a5);
                    sub_20E863570((uint64_t)&v247);
                  }
                  sub_20E863570((uint64_t)&v247);
                  v231 = (std::__shared_weak_count *)v251;
                  if ((_QWORD)v251)
                  {
                    v232 = (unint64_t *)(v251 + 8);
                    do
                      v233 = __ldaxr(v232);
                    while (__stlxr(v233 - 1, v232));
                    if (!v233)
                    {
                      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                      std::__shared_weak_count::__release_weak(v231);
                    }
                  }
                  return 0;
                }
              }
              memmove(v187, v185, v186);
              goto LABEL_210;
            }
            v179 = v274;
            *(_QWORD *)(a2 + 160) = v275;
            *(_OWORD *)(a2 + 144) = v179;
            if (*v10 == 1)
            {
              if (&v265 == (__int128 *)a2 || !*(_BYTE *)(a1 + 3148))
                return 0;
            }
            else if (*v10 || &v265 == (__int128 *)a2 || !*(_BYTE *)(a1 + 3149))
            {
              return 0;
            }
            v180 = v265;
            v181 = v266;
            v182 = v267;
            v183 = v268;
            *(_QWORD *)(a2 + 64) = v269;
            *(float64x2_t *)(a2 + 32) = v182;
            *(float64x2_t *)(a2 + 48) = v183;
            *(_OWORD *)a2 = v180;
            *(_OWORD *)(a2 + 16) = v181;
          }
          return 0;
        }
        if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 386, (uint64_t)"current_slam_mode_ == cv_types::SLAMMode::kRegularSLAM", 54, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
LABEL_178:
          v166 = *(uint64_t **)(a1 + 5568);
          if (!v166)
            return 0;
          goto LABEL_179;
        }
LABEL_279:
        abort();
      }
    }
    memmove(v31, __src, v29);
    goto LABEL_49;
  }
  return result;
}

void sub_20F1D9AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (LOBYTE(STACK[0x218]))
  {
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F1D9B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  if (LOBYTE(STACK[0x218]))
  {
    if (SLOBYTE(STACK[0x217]) < 0)
      operator delete((void *)STACK[0x200]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1D9B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_20E86E8C4(&a23);
  sub_20E86E8C4(&a47);
  sub_20E86E658((uint64_t)&STACK[0x200]);
  sub_20E863714((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F1D9B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  MEMORY[0x212BC6398](v51, 0x10D0C40B950D02ALL);
  sub_20E863714((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F1D9BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_20E863714((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_20F1D9BBC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1D9D68(uint64_t a1, uint64_t a2, double *a3, char a4, double a5)
{
  double v5;
  double v6;
  uint64_t v10;
  uint64_t result;
  int v12;
  double v13;
  double v14;
  int v15;
  _OWORD *v16;
  float64x2_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  double *v35;
  unint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  __int128 v39;
  float64x2_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  float64x2_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  double *v51;
  double v52;
  double v53;
  double *v54;
  int8x16_t v55;
  __int128 v56;
  float64x2_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  char *v63;
  double v64;
  double v65;
  long double v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  int8x16_t v71;
  unint64_t v72;
  double v73;
  float64x2_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  int8x16_t v78;
  unint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  float64x2_t v84;
  __int128 v85;
  __int128 v86;
  int8x16_t v87;
  __int128 v88;
  int8x16_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  double v93;
  float64x2_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  float64x2_t v103;
  __int128 v104;
  int8x16_t v105;
  __int128 v106;
  int8x16_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  double *v111;
  uint64_t v112;
  int v113;
  double v114;
  unint64_t v115;
  double v116;
  double *v117;
  double *v118;
  double v119;
  double v120;
  int8x16_t v121;
  double v122;
  double v124;
  double v125;
  float64x2_t v126;
  float64x2_t v127;
  double v128;
  double v129;
  char v130;
  char v131;
  float64x2_t v132;
  double v133;
  double v134;
  float64x2_t v135;
  double v136;
  char v137;
  unsigned __int8 *v138;
  double v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double v150;
  double v151;
  int v152;
  uint64_t v153;
  double *v154;
  int v155;
  double v156;
  double v157;
  double v166;
  double v167;
  long double v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  double v173;
  double v174;
  float64x2_t v175;
  double v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  unint64_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  double v188;
  int8x16_t v189;
  __int128 v190;
  int8x16_t v191;
  __int128 v192;
  __int128 v193;
  float64x2_t v194;
  __int128 v195;
  __int128 v196;
  float64x2_t v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  double v201;
  double v202;
  double v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  int v225;
  _BOOL4 v226;
  unint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t *v230;
  char *v231;
  char *v232;
  int v233;
  _BOOL4 v234;
  unint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t *v238;
  char *v239;
  char *v240;
  unsigned __int8 v241;
  uint64_t v242;
  const char *v243;
  NSObject *v244;
  unsigned __int8 v245;
  uint64_t v246;
  const char *v247;
  NSObject *v248;
  double *v249;
  double *v250;
  _BOOL8 v251;
  double v252;
  double v253;
  double *v254;
  double *v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  int8x16_t v259;
  float64_t v260;
  float64x2_t v261;
  int v262;
  BOOL v263;
  double v264;
  float64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v272;
  float64x2_t v273;
  float64_t v274;
  _BYTE v275[32];
  int8x16_t v276;
  _OWORD v277[2];
  __int128 v278;
  __int128 v279;
  __int128 v280;
  float64x2_t v281;
  __int128 v282;
  __int128 v283;
  int8x16_t v284;
  __int128 v285;
  __int128 v286;
  int8x16_t v287;
  float64_t v288;
  _QWORD v289[4];
  char v290;
  double v291;
  float64x2_t v292;
  _BYTE v293[32];
  float64x2_t v294;
  __int128 v295;
  __int128 v296;
  float64x2_t v297;
  __int128 v298;
  __int128 v299;
  int8x16_t v300;
  double v301;
  double v302;
  char *category[2];
  _OWORD v304[2];
  float64x2_t v305;
  __int128 v306;
  __int128 v307;
  int8x16_t v308;
  _BYTE v309[56];
  uint64_t v310;
  float64_t v311;
  double v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  float64x2_t v316;
  __int128 v317;
  __int128 v318;
  int8x16_t v319;
  __int128 v320;
  __int128 v321;
  int8x16_t v322;
  double v323;
  void *__p[2];
  _BYTE v325[32];
  float64x2_t v326;
  __int128 v327;
  __int128 v328;
  float64x2_t v329;
  __int128 v330;
  __int128 v331;
  int8x16_t v332;
  double v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  float64x2_t v337;
  __int128 v338;
  __int128 v339;
  int8x16_t v340;
  __int128 v341;
  __int128 v342;
  int8x16_t v343;
  double v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  float64x2_t v348;
  __int128 v349;
  __int128 v350;
  float64x2_t v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  float64x2_t v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  float64x2_t v366;
  __int128 v367;
  __int128 v368;
  float64x2_t v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  float64x2_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  float64x2_t v384;
  __int128 v385;
  __int128 v386;
  int8x16_t v387;
  __int128 v388;
  __int128 v389;
  int8x16_t v390;
  double v391;
  uint64_t v392;

  v392 = *MEMORY[0x24BDAC8D0];
  v291 = a5;
  v290 = a4;
  v10 = *(uint64_t *)(a1 + 5424);
  if (*(double *)&v10 > a5)
    return sub_20F1D7F7C(a1, a2, a3, a4, a5);
  v12 = *(unsigned __int8 *)(a1 + 3208);
  if (v12 == 2)
  {
    v13 = *(double *)&v10 + *(double *)(a1 + 3200);
  }
  else if (v12 == 1)
  {
    v13 = *(double *)(a1 + 5448) + *(double *)(a1 + 3200);
  }
  else
  {
    v13 = 0.0;
    if (!*(_BYTE *)(a1 + 3208))
      v13 = *(double *)(a1 + 5440);
  }
  if (v13 >= *(double *)&v10)
    *(double *)&v10 = v13;
  result = sub_20F1BCAF8(*(_QWORD *)(a1 + 8), a1 + 16, v10, 1, a1 + 4080, a4, *(unsigned __int8 *)(a1 + 3153), a5);
  if (!(_DWORD)result)
  {
    kdebug_trace();
    v289[0] = &v291;
    v289[1] = a1;
    v289[2] = &v290;
    v289[3] = a2;
    if (*(_BYTE *)(a1 + 192))
    {
      v14 = *(double *)(a1 + 200);
      *a3 = v14;
    }
    else
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1299, (uint64_t)"bundle_.state", 13, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v15 = *(unsigned __int8 *)(a1 + 192);
      v14 = *(double *)(a1 + 200);
      *a3 = v14;
      if (!v15)
        goto LABEL_17;
    }
    if (*(_QWORD *)(a1 + 208) == *(_QWORD *)(a1 + 216))
    {
      v26 = *(_OWORD *)(a1 + 4760);
      v27 = *(_OWORD *)(a1 + 4792);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 4776);
      *(_OWORD *)(a2 + 32) = v27;
      *(_OWORD *)a2 = v26;
      v28 = *(_OWORD *)(a1 + 4808);
      v29 = *(_OWORD *)(a1 + 4824);
      v30 = *(_OWORD *)(a1 + 4856);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 4840);
      *(_OWORD *)(a2 + 96) = v30;
      *(_OWORD *)(a2 + 48) = v28;
      *(_OWORD *)(a2 + 64) = v29;
      v31 = *(_OWORD *)(a1 + 4872);
      v32 = *(_OWORD *)(a1 + 4888);
      v33 = *(_OWORD *)(a1 + 4904);
      *(_QWORD *)(a2 + 160) = *(_QWORD *)(a1 + 4920);
      *(_OWORD *)(a2 + 128) = v32;
      *(_OWORD *)(a2 + 144) = v33;
      *(_OWORD *)(a2 + 112) = v31;
      if (*(_BYTE *)(a1 + 3344) && *(_BYTE *)(a1 + 3192))
      {
        v272 = *(_OWORD *)(a1 + 5128);
        v34 = *(_QWORD *)(a1 + 5144);
        memmove((void *)a2, (const void *)(a1 + 4760), 0x90uLL);
        *(_QWORD *)(a2 + 160) = v34;
        *(_OWORD *)(a2 + 144) = v272;
      }
      if (*(_BYTE *)(a1 + 3192))
        *(double *)(a1 + 5432) = v291;
      sub_20F1DBF4C((uint64_t)v289);
      return 0;
    }
LABEL_17:
    v288 = 0.0;
    v16 = (_OWORD *)(a1 + 4592);
    v270 = a1 + 3152;
    v286 = 0u;
    v287 = 0u;
    v284 = 0u;
    v285 = 0u;
    v282 = 0u;
    v283 = 0u;
    v280 = 0u;
    v281 = 0u;
    v278 = 0u;
    v279 = 0u;
    v371 = 0u;
    v370 = 0u;
    v369 = 0u;
    v368 = 0u;
    v367 = 0u;
    v366 = 0u;
    v365 = 0u;
    v364 = 0u;
    v363 = 0u;
    *(_WORD *)v275 = 0;
    v275[2] = 0;
    __asm { FMOV            V2.2D, #-1.0 }
    *(_OWORD *)&v275[8] = _Q2;
    *(_QWORD *)&v275[24] = 0xBFF0000000000000;
    v276 = 0u;
    memset(v277, 0, sizeof(v277));
    if (!*(_BYTE *)(a1 + 3153))
    {
      if (!*(_BYTE *)(a1 + 240))
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1373, (uint64_t)"bundle_.timestamp_index", 23, (uint64_t)"bundle timestamp_index needs to be valid", 40, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if (!*(_BYTE *)(a1 + 240))
          sub_20E866B34();
      }
      v35 = *(double **)(a1 + 208);
      v36 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 216) - (_QWORD)v35) >> 3);
      if (v36 <= 1)
      {
        sub_20F1D8150(&v292);
        if (**(int **)(*(_QWORD *)&v292.f64[0] + 56) <= 5)
        {
          v225 = *(unsigned __int8 *)(*(_QWORD *)&v292.f64[0] + 72);
          v226 = *(_BYTE *)(*(_QWORD *)&v292.f64[0] + 72) != 0;
          v227 = sub_20E8C31DC(*(uint64_t *)&v292.f64[0], "OSLogSurrogateAppender", 1, 0);
          v228 = v227 ? v227 + 16 : 0;
          v229 = v227 || v226;
          if (v229 == 1)
          {
            *(_QWORD *)&v381 = &v292;
            *((std::chrono::steady_clock::time_point *)&v381 + 1) = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v382 = std::chrono::system_clock::now();
            DWORD2(v382) = 5;
            *(_QWORD *)&v383 = "unknown file";
            DWORD2(v383) = 2057;
            *(_QWORD *)&v385 = 0;
            *(_QWORD *)&v384.f64[0] = "unknown function";
            v384.f64[1] = 0.0;
            v230 = (uint64_t *)(*(_QWORD *)&v292.f64[0] + 16);
            if (*(char *)(*(_QWORD *)&v292.f64[0] + 39) < 0)
            {
              v232 = *(char **)(*(_QWORD *)&v292.f64[0] + 16);
              v231 = *(char **)(*(_QWORD *)&v292.f64[0] + 24);
            }
            else
            {
              v231 = (char *)*(unsigned __int8 *)(*(_QWORD *)&v292.f64[0] + 39);
              v232 = (char *)(*(_QWORD *)&v292.f64[0] + 16);
            }
            category[0] = v232;
            category[1] = v231;
            v241 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v241 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)__p);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
              if (v325[8] && (v325[7] & 0x80000000) != 0)
                operator delete(__p[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v242 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v243 = byte_254A4A4F8;
            }
            else
            {
              v242 = *(_QWORD *)&byte_254A4A4F8[8];
              v243 = *(const char **)byte_254A4A4F8;
            }
            *(_QWORD *)&v313 = v243;
            *((_QWORD *)&v313 + 1) = v242;
            __p[0] = os_log_create(v243, category[0]);
            sub_20E86E5A8(&__p[1], (uint64_t)&v313);
            sub_20E86E5A8(&v325[24], (uint64_t)category);
            v244 = __p[0];
            sub_20E86E44C((uint64_t)__p);
            sub_20F1E0E18(v228, v230, v244, OS_LOG_TYPE_ERROR);
            if (v225)
            {
              sub_20E8C003C((uint64_t)&v381, "PoseSmoothingStepProp called with insufficient number of IMU measurements: Assigning smooth_output_state=smooth_state_at_base_reset.");
              sub_20E863570((uint64_t)&v381);
            }
            sub_20E863714((uint64_t)&v381);
          }
        }
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2058, (uint64_t)"", 0, (uint64_t)"imu_measurements not enough samples.", 36, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v37 = *(_QWORD *)(a1 + 232);
      v38 = *(int8x16_t *)(a1 + 4736);
      v331 = *(_OWORD *)(a1 + 4720);
      v332 = v38;
      v333 = *(double *)(a1 + 4752);
      v39 = *(_OWORD *)(a1 + 4672);
      v327 = *(_OWORD *)(a1 + 4656);
      v328 = v39;
      v40 = *(float64x2_t *)(a1 + 4688);
      v330 = *(_OWORD *)(a1 + 4704);
      v329 = v40;
      v41 = *(_OWORD *)(a1 + 4608);
      *(_OWORD *)__p = *v16;
      *(_OWORD *)v325 = v41;
      v42 = *(_OWORD *)(a1 + 4624);
      v326 = *(float64x2_t *)(a1 + 4640);
      *(_OWORD *)&v325[16] = v42;
      v43 = *(_OWORD *)(a1 + 4792);
      v44 = *(_OWORD *)(a1 + 4776);
      v45 = *(_OWORD *)(a1 + 4824);
      v386 = *(_OWORD *)(a1 + 4840);
      v385 = v45;
      v46 = *(float64x2_t *)(a1 + 4808);
      v383 = v43;
      v384 = v46;
      v391 = *(double *)(a1 + 4920);
      v47 = *(_OWORD *)(a1 + 4888);
      v390 = *(int8x16_t *)(a1 + 4904);
      v389 = v47;
      v48 = *(_OWORD *)(a1 + 4872);
      v387 = *(int8x16_t *)(a1 + 4856);
      v388 = v48;
      v49 = *(_OWORD *)(a1 + 4760);
      v382 = v44;
      v381 = v49;
      *(_QWORD *)(a1 + 5464) = *(_QWORD *)(*(_QWORD *)(a1 + 3224) + 16);
      v50 = v36 - 1;
      v268 = v37 + 2;
      v51 = v35;
      do
      {
        if (v37)
        {
          *(_QWORD *)&v313 = v35;
          *((_QWORD *)&v313 + 1) = v35 + 14;
          sub_20F4BA010((uint64_t)__p, a1 + 4280, (uint64_t *)&v313);
          v54 = v51;
        }
        else
        {
          v55 = *(int8x16_t *)(a1 + 5400);
          v331 = *(_OWORD *)(a1 + 5384);
          v332 = v55;
          v333 = *(double *)(a1 + 5416);
          v56 = *(_OWORD *)(a1 + 5336);
          v327 = *(_OWORD *)(a1 + 5320);
          v328 = v56;
          v57 = *(float64x2_t *)(a1 + 5352);
          v330 = *(_OWORD *)(a1 + 5368);
          v329 = v57;
          v58 = *(_OWORD *)(a1 + 5272);
          *(_OWORD *)__p = *(_OWORD *)(a1 + 5256);
          *(_OWORD *)v325 = v58;
          v59 = *(_OWORD *)(a1 + 5288);
          v326 = *(float64x2_t *)(a1 + 5304);
          *(_OWORD *)&v325[16] = v59;
          v60 = *(_QWORD *)(a1 + 208);
          v61 = 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(a1 + 216) - v60) >> 3);
          if (v61 >= v268)
            v61 = v268;
          *(_QWORD *)&v313 = *(_QWORD *)(a1 + 208);
          *((_QWORD *)&v313 + 1) = v60 + 56 * v61;
          sub_20F4BA010((uint64_t)__p, a1 + 4280, (uint64_t *)&v313);
          v54 = v35;
        }
        category[0] = 0;
        v62 = sub_20F1DCBC0(v270, (uint64_t)v51, (uint64_t *)(a1 + 5472), a1 + 5520, (double *)category, v329, *(double *)vextq_s8((int8x16_t)v329, (int8x16_t)v329, 8uLL).i64, *(float64_t *)&v330, v52, v53);
        v63 = category[0];
        if (*(double *)category >= *(double *)(a1 + 5464))
          v63 = *(char **)(a1 + 5464);
        *(_QWORD *)(a1 + 5464) = v63;
        v64 = v51[7];
        v65 = *v51;
        if (v64 <= *v51)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2097, (uint64_t)"(curr_imu_it + 1)->timestamp > curr_imu_it->timestamp", 53, (uint64_t)"IMU timestamp must be in increasing order", 41, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v64 = v51[7];
          v65 = *v51;
        }
        v66 = pow(v62, (v64 - v65) * 100.0);
        *(_QWORD *)&v313 = v54;
        *((_QWORD *)&v313 + 1) = v35 + 14;
        sub_20F4BA010((uint64_t)&v381, a1 + 4280, (uint64_t *)&v313);
        v67.f64[0] = v66;
        sub_20F1B4AFC((uint64_t)&v381, (uint64_t)__p, (uint64_t)&v313, v67, v68, v69, v70);
        v286 = v321;
        v287 = v322;
        v288 = v323;
        v282 = v317;
        v283 = v318;
        v284 = v319;
        v285 = v320;
        v278 = v313;
        v279 = v314;
        v280 = v315;
        v281 = v316;
        v389 = v321;
        v390 = v322;
        v391 = v323;
        v385 = v317;
        v386 = v318;
        v388 = v320;
        v387 = v319;
        v381 = v313;
        v382 = v314;
        --v37;
        v35 += 7;
        v51 += 7;
        v384 = v316;
        v383 = v315;
        --v50;
      }
      while (v50);
      v369 = (float64x2_t)v284;
      v370 = v285;
      v71 = v287;
      v371 = v286;
      v365 = v280;
      v366 = v281;
      v368 = v283;
      v367 = v282;
      v364 = v279;
      v363 = v278;
      v72 = vextq_s8(v71, v71, 8uLL).u64[0];
      v73 = v288;
LABEL_163:
      v190 = v283;
      *(_OWORD *)(a2 + 64) = v282;
      *(_OWORD *)(a2 + 80) = v190;
      *(float64_t *)(a2 + 160) = v288;
      v191 = v287;
      *(_OWORD *)(a2 + 128) = v286;
      *(int8x16_t *)(a2 + 144) = v191;
      v192 = v285;
      *(int8x16_t *)(a2 + 96) = v284;
      *(_OWORD *)(a2 + 112) = v192;
      v193 = v279;
      *(_OWORD *)a2 = v278;
      *(_OWORD *)(a2 + 16) = v193;
      v194 = v281;
      *(_OWORD *)(a2 + 32) = v280;
      *(float64x2_t *)(a2 + 48) = v194;
      v195 = *(_OWORD *)&v275[16];
      *(_OWORD *)(a1 + 5176) = *(_OWORD *)v275;
      *(_OWORD *)(a1 + 5192) = v195;
      *(int8x16_t *)(a1 + 5208) = v276;
      *(_QWORD *)(a1 + 5224) = *(_QWORD *)&v277[0];
      *(_OWORD *)(a1 + 5232) = *(_OWORD *)((char *)v277 + 8);
      *(_QWORD *)(a1 + 5248) = *((_QWORD *)&v277[1] + 1);
      if (*(_BYTE *)(a1 + 3192))
      {
        if (*(_BYTE *)(a1 + 3344))
        {
          v196 = v370;
          *(float64x2_t *)(a2 + 96) = v369;
          *(_OWORD *)(a2 + 112) = v196;
          v197 = v366;
          *(_OWORD *)(a2 + 32) = v365;
          *(float64x2_t *)(a2 + 48) = v197;
          v198 = v368;
          *(_OWORD *)(a2 + 64) = v367;
          *(_OWORD *)(a2 + 80) = v198;
          v199 = v364;
          *(_OWORD *)a2 = v363;
          *(_OWORD *)(a2 + 16) = v199;
          v200 = v371;
          *(double *)(a2 + 160) = v73;
          v71.i64[1] = v72;
          *(_OWORD *)(a2 + 128) = v200;
          *(int8x16_t *)(a2 + 144) = v71;
        }
        if (*(_BYTE *)(a1 + 3312) && *(_BYTE *)(a1 + 3928))
        {
          v201 = v291;
          v202 = *(double *)(a1 + 5424);
          v203 = *(double *)(a1 + 5432);
          v204 = *(_QWORD *)(a1 + 3896);
          v205 = *(_QWORD *)(a1 + 3864);
          *(double *)(v205 + 8 * v204) = v291 - *(double *)(a1 + 200);
          v206 = (*(_QWORD *)(a1 + 3872) - v205) >> 3;
          v207 = v204 + 1;
          if (v207 >= v206)
            v208 = v206;
          else
            v208 = 0;
          *(_QWORD *)(a1 + 3896) = v207 - v208;
          v209 = *(_QWORD *)(a1 + 3904);
          if (v209 == v206)
          {
            v210 = *(_QWORD *)(a1 + 3888) + 1;
            if (v210 < v206)
              v206 = 0;
            *(_QWORD *)(a1 + 3888) = v210 - v206;
          }
          else
          {
            *(_QWORD *)(a1 + 3904) = v209 + 1;
          }
          v211 = *(_QWORD *)(a1 + 3848);
          v212 = *(_QWORD *)(a1 + 3816);
          *(double *)(v212 + 8 * v211) = v201 - v202;
          v213 = (*(_QWORD *)(a1 + 3824) - v212) >> 3;
          v214 = v211 + 1;
          if (v214 >= v213)
            v215 = v213;
          else
            v215 = 0;
          *(_QWORD *)(a1 + 3848) = v214 - v215;
          v216 = *(_QWORD *)(a1 + 3856);
          if (v216 == v213)
          {
            v217 = *(_QWORD *)(a1 + 3840) + 1;
            if (v217 < v213)
              v213 = 0;
            *(_QWORD *)(a1 + 3840) = v217 - v213;
          }
          else
          {
            *(_QWORD *)(a1 + 3856) = v216 + 1;
          }
          v218 = *(_QWORD *)(a1 + 3800);
          v219 = *(_QWORD *)(a1 + 3768);
          *(double *)(v219 + 8 * v218) = v201 - v203;
          v220 = (*(_QWORD *)(a1 + 3776) - v219) >> 3;
          v221 = v218 + 1;
          if (v221 >= v220)
            v222 = v220;
          else
            v222 = 0;
          *(_QWORD *)(a1 + 3800) = v221 - v222;
          v223 = *(_QWORD *)(a1 + 3808);
          if (v223 == v220)
          {
            v224 = *(_QWORD *)(a1 + 3792) + 1;
            if (v224 < v220)
              v220 = 0;
            *(_QWORD *)(a1 + 3792) = v224 - v220;
          }
          else
          {
            *(_QWORD *)(a1 + 3808) = v223 + 1;
          }
        }
        *(double *)(a1 + 5432) = v291;
      }
      sub_20F1DBF4C((uint64_t)v289);
      return 0;
    }
    if (!*(_BYTE *)(a1 + 872))
    {
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1326, (uint64_t)"bundle_.switch_timestamp", 24, (uint64_t)"switch timestamp needs to be valid!", 35, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v14 = *a3;
    }
    v22 = (float64x2_t *)(a1 + 4032);
    v23 = *(_QWORD **)(a1 + 8);
    if (v23[18])
    {
      v24 = v23[17];
      v25 = v23[13];
      if (!v24)
        v24 = 0x14C1BACF914C1BADLL * ((v23[14] - v25) >> 4);
      v252 = *(double *)(v25 + 592 * v24 - 592);
      if (*(_BYTE *)(a1 + 840))
      {
LABEL_52:
        v94 = *(float64x2_t *)(a1 + 304);
        v359 = *(_OWORD *)(a1 + 288);
        v360 = v94;
        v95 = *(_OWORD *)(a1 + 336);
        v361 = *(_OWORD *)(a1 + 320);
        v362 = v95;
        v96 = *(_OWORD *)(a1 + 272);
        v357 = *(_OWORD *)(a1 + 256);
        v358 = v96;
        v77 = *(_QWORD *)(a1 + 368);
        v78 = *(int8x16_t *)(a1 + 352);
        v79 = vextq_s8(v78, v78, 8uLL).u64[0];
        v97 = *(_OWORD *)(a1 + 424);
        v356 = *(_OWORD *)(a1 + 408);
        v98 = *(_OWORD *)(a1 + 376);
        v355 = *(_OWORD *)(a1 + 392);
        v354 = v98;
        v99 = *(_OWORD *)(a1 + 504);
        v100 = *(_OWORD *)(a1 + 536);
        v101 = *(_OWORD *)(a1 + 552);
        v351 = *(float64x2_t *)(a1 + 520);
        v352 = v100;
        v353 = v101;
        v102 = *(_OWORD *)(a1 + 440);
        v103 = *(float64x2_t *)(a1 + 472);
        v104 = *(_OWORD *)(a1 + 488);
        v347 = *(_OWORD *)(a1 + 456);
        v348 = v103;
        v350 = v99;
        v349 = v104;
        v346 = v102;
        v345 = v97;
        v73 = *(double *)(a1 + 584);
        v71 = *(int8x16_t *)(a1 + 568);
        v72 = vextq_s8(v71, v71, 8uLL).u64[0];
        v105 = *(int8x16_t *)(a1 + 736);
        v342 = *(_OWORD *)(a1 + 720);
        v343 = v105;
        v344 = *(double *)(a1 + 752);
        v106 = *(_OWORD *)(a1 + 672);
        v338 = *(_OWORD *)(a1 + 656);
        v339 = v106;
        v107 = *(int8x16_t *)(a1 + 688);
        v341 = *(_OWORD *)(a1 + 704);
        v340 = v107;
        v108 = *(_OWORD *)(a1 + 608);
        v334 = *(_OWORD *)(a1 + 592);
        v335 = v108;
        v109 = *(_OWORD *)(a1 + 624);
        v337 = *(float64x2_t *)(a1 + 640);
        v336 = v109;
        v110 = *(_OWORD *)(a1 + 776);
        *(_OWORD *)v275 = *(_OWORD *)(a1 + 760);
        *(_OWORD *)&v275[16] = v110;
        v276 = *(int8x16_t *)(a1 + 792);
        *(_QWORD *)&v277[0] = *(_QWORD *)(a1 + 808);
        *(_OWORD *)((char *)v277 + 8) = *(_OWORD *)(a1 + 816);
        *((_QWORD *)&v277[1] + 1) = *(_QWORD *)(a1 + 832);
        v262 = *(unsigned __int8 *)(a1 + 5544);
        if (*(_BYTE *)(a1 + 5544))
          goto LABEL_53;
        goto LABEL_49;
      }
    }
    else
    {
      v252 = *(double *)(a1 + 5424);
      if (*(_BYTE *)(a1 + 840))
        goto LABEL_52;
    }
    v74 = *(float64x2_t *)(a1 + 4640);
    v359 = *(_OWORD *)(a1 + 4624);
    v360 = v74;
    v75 = *(_OWORD *)(a1 + 4672);
    v361 = *(_OWORD *)(a1 + 4656);
    v362 = v75;
    v76 = *(_OWORD *)(a1 + 4608);
    v357 = *v16;
    v358 = v76;
    v77 = *(_QWORD *)(a1 + 4704);
    v78 = *(int8x16_t *)(a1 + 4688);
    v79 = vextq_s8(v78, v78, 8uLL).u64[0];
    v356 = *(_OWORD *)(a1 + 4744);
    v80 = *(_OWORD *)(a1 + 4712);
    v355 = *(_OWORD *)(a1 + 4728);
    v354 = v80;
    v81 = *(_OWORD *)(a1 + 4840);
    v82 = *(_OWORD *)(a1 + 4872);
    v351 = *(float64x2_t *)(a1 + 4856);
    v352 = v82;
    v353 = *(_OWORD *)(a1 + 4888);
    v83 = *(_OWORD *)(a1 + 4776);
    v84 = *(float64x2_t *)(a1 + 4808);
    v347 = *(_OWORD *)(a1 + 4792);
    v348 = v84;
    v85 = *(_OWORD *)(a1 + 4824);
    v350 = v81;
    v349 = v85;
    v86 = *(_OWORD *)(a1 + 4760);
    v346 = v83;
    v345 = v86;
    v73 = *(double *)(a1 + 4920);
    v71 = *(int8x16_t *)(a1 + 4904);
    v72 = vextq_s8(v71, v71, 8uLL).u64[0];
    v87 = *(int8x16_t *)(a1 + 5400);
    v342 = *(_OWORD *)(a1 + 5384);
    v343 = v87;
    v344 = *(double *)(a1 + 5416);
    v88 = *(_OWORD *)(a1 + 5336);
    v338 = *(_OWORD *)(a1 + 5320);
    v339 = v88;
    v89 = *(int8x16_t *)(a1 + 5352);
    v341 = *(_OWORD *)(a1 + 5368);
    v340 = v89;
    v90 = *(_OWORD *)(a1 + 5272);
    v334 = *(_OWORD *)(a1 + 5256);
    v335 = v90;
    v91 = *(_OWORD *)(a1 + 5288);
    v337 = *(float64x2_t *)(a1 + 5304);
    v336 = v91;
    v92 = *(_OWORD *)(a1 + 5112);
    *(_OWORD *)v275 = *(_OWORD *)(a1 + 5096);
    *(_OWORD *)&v275[16] = v92;
    v276 = *(int8x16_t *)(a1 + 5128);
    *(_QWORD *)&v277[0] = *(_QWORD *)(a1 + 5144);
    *(_OWORD *)((char *)v277 + 8) = *(_OWORD *)(a1 + 5152);
    *((_QWORD *)&v277[1] + 1) = *(_QWORD *)(a1 + 5168);
    v262 = *(unsigned __int8 *)(a1 + 5544);
    if (*(_BYTE *)(a1 + 5544))
    {
LABEL_53:
      v93 = *(double *)(a1 + 3280);
      v5 = *(double *)(a1 + 3288);
      goto LABEL_54;
    }
LABEL_49:
    v93 = 0.0;
LABEL_54:
    v111 = *(double **)(a1 + 208);
    v112 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 216) - (_QWORD)v111) >> 3);
    v113 = *(unsigned __int8 *)(a1 + 3344);
    if (v112 != 1)
    {
      if (!v112)
      {
        sub_20F1D8150(&v292);
        if (**(int **)(*(_QWORD *)&v292.f64[0] + 56) <= 5)
        {
          v233 = *(unsigned __int8 *)(*(_QWORD *)&v292.f64[0] + 72);
          v234 = *(_BYTE *)(*(_QWORD *)&v292.f64[0] + 72) != 0;
          v235 = sub_20E8C31DC(*(uint64_t *)&v292.f64[0], "OSLogSurrogateAppender", 1, 0);
          v236 = v235 ? v235 + 16 : 0;
          v237 = v235 || v234;
          if (v237 == 1)
          {
            *(_QWORD *)&v381 = &v292;
            *((std::chrono::steady_clock::time_point *)&v381 + 1) = std::chrono::steady_clock::now();
            *(std::chrono::system_clock::time_point *)&v382 = std::chrono::system_clock::now();
            DWORD2(v382) = 5;
            *(_QWORD *)&v383 = "unknown file";
            DWORD2(v383) = 2155;
            *(_QWORD *)&v385 = 0;
            *(_QWORD *)&v384.f64[0] = "unknown function";
            v384.f64[1] = 0.0;
            v238 = (uint64_t *)(*(_QWORD *)&v292.f64[0] + 16);
            if (*(char *)(*(_QWORD *)&v292.f64[0] + 39) < 0)
            {
              v240 = *(char **)(*(_QWORD *)&v292.f64[0] + 16);
              v239 = *(char **)(*(_QWORD *)&v292.f64[0] + 24);
            }
            else
            {
              v239 = (char *)*(unsigned __int8 *)(*(_QWORD *)&v292.f64[0] + 39);
              v240 = (char *)(*(_QWORD *)&v292.f64[0] + 16);
            }
            category[0] = v240;
            category[1] = v239;
            v245 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v245 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)__p);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__p);
              if (v325[8] && (v325[7] & 0x80000000) != 0)
                operator delete(__p[0]);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v246 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v247 = byte_254A4A4F8;
            }
            else
            {
              v246 = *(_QWORD *)&byte_254A4A4F8[8];
              v247 = *(const char **)byte_254A4A4F8;
            }
            *(_QWORD *)&v313 = v247;
            *((_QWORD *)&v313 + 1) = v246;
            __p[0] = os_log_create(v247, category[0]);
            sub_20E86E5A8(&__p[1], (uint64_t)&v313);
            sub_20E86E5A8(&v325[24], (uint64_t)category);
            v248 = __p[0];
            sub_20E86E44C((uint64_t)__p);
            sub_20F1E1204(v236, v238, v248, OS_LOG_TYPE_ERROR);
            if (v233)
            {
              sub_20E8C003C((uint64_t)&v381, "PoseSmoothingStepProp called with insufficient number of IMU measurements: Assigning smooth_output_state=smooth_state_at_base_reset.");
              sub_20E863570((uint64_t)&v381);
            }
            sub_20E863714((uint64_t)&v381);
          }
        }
        sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2156, (uint64_t)"", 0, (uint64_t)"imu_measurements not enough samples.", 36, (void (*)(void **))sub_21023DDB0);
        abort();
      }
      v114 = *(double *)(a1 + 3184);
      v253 = *(double *)(a1 + 864);
      v377 = v359;
      v378 = v360;
      v379 = v361;
      v380 = v362;
      v375 = v357;
      v376 = v358;
      v372 = v354;
      v373 = v355;
      v374 = v356;
      v329 = v351;
      v330 = v352;
      *(_OWORD *)&v325[16] = v347;
      v326 = v348;
      v328 = v350;
      v327 = v349;
      *(_OWORD *)v325 = v346;
      *(_OWORD *)__p = v345;
      v333 = v73;
      v71.i64[1] = v72;
      v331 = v353;
      v332 = v71;
      if (v113)
      {
        *(int8x16_t *)(a1 + 4032) = v276;
        *(_QWORD *)(a1 + 4048) = *(_QWORD *)&v277[0];
        *(_QWORD *)(a1 + 4072) = *((_QWORD *)&v277[1] + 1);
        *(_OWORD *)(a1 + 4056) = *(_OWORD *)((char *)v277 + 8);
      }
      v389 = v342;
      v390 = v343;
      v385 = v338;
      v386 = v339;
      v388 = v341;
      v387 = v340;
      v381 = v334;
      v382 = v335;
      v384 = v337;
      v383 = v336;
      v318 = v339;
      v317 = v338;
      v315 = v336;
      v316 = v337;
      v322 = v343;
      v321 = v342;
      v319 = v340;
      v320 = v341;
      v391 = v344;
      v323 = v344;
      v313 = v334;
      v314 = v335;
      *(_QWORD *)(a1 + 5464) = *(_QWORD *)(*(_QWORD *)(a1 + 3224) + 16);
      v257 = v112 - 1;
      v267 = v113;
      v264 = *(double *)&v79;
      v265 = *(double *)v78.i64;
      v266 = v77;
      v115 = 0;
      v269 = a1 + 4280;
      v116 = v14 - v114;
      v263 = *v111 <= v253;
      v255 = (double *)(v23 + 31);
      v254 = (double *)(v23 + 25);
      v256 = v112 - 2;
      v250 = (double *)(a1 + 3432);
      v251 = (_BOOL8)v23;
      v249 = (double *)(a1 + 3384);
      v117 = v111;
      v118 = v111;
      while (1)
      {
        v119 = v118[7];
        v118 += 7;
        v120 = v119;
        v308 = 0u;
        memset(v309, 0, sizeof(v309));
        v306 = 0u;
        v307 = 0u;
        v305 = 0u;
        *(_OWORD *)category = 0u;
        memset(v304, 0, sizeof(v304));
        if (!v263)
          goto LABEL_63;
        v321 = v389;
        v322 = v390;
        v323 = v391;
        v317 = v385;
        v318 = v386;
        v320 = v388;
        v319 = v387;
        v313 = v381;
        v314 = v382;
        v315 = v383;
        v316 = v384;
        *(_QWORD *)&v292.f64[0] = v111;
        *(_QWORD *)&v292.f64[1] = v111 + 14;
        sub_20F4BA010((uint64_t)&v313, v269, (uint64_t *)&v292);
        v389 = v321;
        v390 = v322;
        v391 = v323;
        v385 = v317;
        v386 = v318;
        v388 = v320;
        v387 = v319;
        v381 = v313;
        v382 = v314;
        v384 = v316;
        v383 = v315;
        if (*v117 == v253)
        {
          v263 = 0;
          *(double *)&v309[48] = v323;
          *(_OWORD *)&v309[16] = v321;
          *(int8x16_t *)&v309[32] = v322;
          v306 = v317;
          v307 = v318;
          v308 = v319;
          *(_OWORD *)v309 = v320;
          *(_OWORD *)category = v313;
          v304[0] = v314;
          v304[1] = v315;
          v305 = v316;
        }
        else
        {
LABEL_63:
          v304[1] = v377;
          v305 = v378;
          v306 = v379;
          v307 = v380;
          *(_OWORD *)category = v375;
          v304[0] = v376;
          *(_QWORD *)v309 = v266;
          *(float64_t *)v121.i64 = v265;
          *(double *)&v121.i64[1] = v264;
          v308 = v121;
          *(_OWORD *)&v309[24] = v373;
          *(_OWORD *)&v309[40] = v374;
          *(_OWORD *)&v309[8] = v372;
          *(_QWORD *)&v292.f64[0] = v111;
          *(_QWORD *)&v292.f64[1] = v111 + 14;
          sub_20F4BA010((uint64_t)category, v269, (uint64_t *)&v292);
        }
        v377 = v304[1];
        v378 = v305;
        v379 = v306;
        v380 = v307;
        v375 = *(_OWORD *)category;
        v376 = v304[0];
        v374 = *(_OWORD *)&v309[40];
        v373 = *(_OWORD *)&v309[24];
        v372 = *(_OWORD *)&v309[8];
        v302 = 0.0;
        *(_QWORD *)&v264 = vextq_s8(v308, v308, 8uLL).u64[0];
        v265 = *(double *)v308.i64;
        v266 = *(_QWORD *)v309;
        v122 = sub_20F1DCBC0(v270, (uint64_t)v117, (uint64_t *)(a1 + 5472), a1 + 5520, &v302, (float64x2_t)v308, v264, *(float64_t *)v309, *(double *)&v309[24], *(double *)&v309[8]);
        if (!v267)
        {
          v128 = v122;
          goto LABEL_134;
        }
        v128 = *(double *)&v330;
        v274 = v329.f64[1];
        _Q1.f64[0] = v120;
        v129 = COERCE_DOUBLE(sub_20F1B2640(v255, (_BYTE *)(a1 + 3368), (unint64_t)(*(double *)(a1 + 3360) * *(double *)(a1 + 3480)), *(double *)(a1 + 3360), _Q1, v124, v125, v126));
        v131 = v130;
        v132.f64[0] = v120;
        v136 = COERCE_DOUBLE(sub_20F1B2640(v254, (_BYTE *)(a1 + 3369), (unint64_t)(*(double *)(a1 + 3352) * *(double *)(a1 + 3480)), *(double *)(a1 + 3352), v132, v133, v134, v135));
        v138 = (unsigned __int8 *)(a1 + 3424);
        if (v131)
        {
          v138 = (unsigned __int8 *)(a1 + 3424);
          if (v137)
          {
            _V2.D[1] = v274;
            _D1 = v274;
            __asm { FMLA            D0, D1, V2.D[1] }
            v142 = sqrt(_D0 + v128 * v128);
            if (*(double *)(a1 + 3400) >= v136 && *(double *)(a1 + 3408) >= v129 && *(double *)(a1 + 3416) >= v142)
            {
              v143 = 0;
LABEL_76:
              v138 = (unsigned __int8 *)(a1 + 3376 + 48 * v143);
              goto LABEL_77;
            }
            v138 = (unsigned __int8 *)(a1 + 3424);
            if (*(double *)(a1 + 3448) >= v136)
            {
              v138 = (unsigned __int8 *)(a1 + 3424);
              if (*(double *)(a1 + 3456) >= v129)
              {
                v138 = (unsigned __int8 *)(a1 + 3424);
                if (*(double *)(a1 + 3464) >= v142)
                {
                  v143 = 1;
                  goto LABEL_76;
                }
              }
            }
          }
        }
LABEL_77:
        v144 = *v138;
        v275[0] = v144;
        if (*(double *)(a1 + 3488) < 0.0)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2295, (uint64_t)"transition_config.hysteresis_time_window_in_motion >= 0.0", 57, (uint64_t)"hysteresis_time_window_in_motion >= 0", 37, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v144 = v275[0];
        }
        v145 = a1 + 3376;
        if (v275[1])
          v145 = a1 + 3424;
        if (v275[2])
        {
          if (v275[2] == 1)
          {
            v146 = *(double *)(a1 + 3496);
            if (v146 < 0.0)
            {
              if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2469, (uint64_t)"pose_filter_config.transition_config.transition_window_state_A2B_sec >= 0.0", 75, (uint64_t)"transition_window_state_A2B_sec >= 0", 36, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              if (v275[2] != 1)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2513, (uint64_t)"", 0, (uint64_t)"No such condition possible in pose filtering!", 45, (void (*)(void **))sub_21023DDB0);
                abort();
              }
              v146 = *(double *)(a1 + 3496);
            }
            v147 = *(double *)&v275[8] - v120;
            if (*(double *)&v275[8] - v120 > v146)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2493, (uint64_t)"", 0, (uint64_t)"No such condition should occur", 30, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            if (v147 <= 0.0)
            {
              *(double *)&v275[24] = v120;
              v275[2] = 0;
              *(_WORD *)v275 = 257;
              v6 = *v250;
              v128 = *(double *)(a1 + 3440);
            }
            else
            {
              if ((v146 < 0.0 || v147 < 0.0)
                && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2454, (uint64_t)"transition_window >= 0 && transition_time_left >= 0", 51, (uint64_t)"Transition window/time left must be non-negative", 48, (void (*)(void **))sub_21023DDB0))
              {
                abort();
              }
              if (*v249 == 0.0)
                v149 = 1.0;
              else
                v149 = *v249;
              if (v146 == 0.0)
                v150 = 1.0;
              else
                v150 = v146;
              v148 = *v249;
              v6 = v148 * pow(*v250 / v149, (v146 - v147) / v150);
              v128 = *(double *)(a1 + 3440);
            }
          }
          goto LABEL_128;
        }
        v6 = *(double *)(v145 + 8);
        v128 = *(double *)(v145 + 16);
        if (!v275[1] && v144 == 1)
        {
          v151 = *(double *)(a1 + 3496);
          if (v151 < 0.0)
          {
            if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2405, (uint64_t)"pose_filter_config.transition_config.transition_window_state_A2B_sec >= 0.0", 75, (uint64_t)"transition_window_state_A2B_sec >= 0", 36, (void (*)(void **))sub_21023DDB0))
            {
              abort();
            }
            if (*(_WORD *)&v275[1] || v275[0] != 1)
            {
              sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2432, (uint64_t)"", 0, (uint64_t)"should never be in this condition!", 34, (void (*)(void **))sub_21023DDB0);
              abort();
            }
            v151 = *(double *)(a1 + 3496);
          }
          v275[2] = 1;
          v6 = *(double *)(a1 + 3384);
          v128 = *(double *)(a1 + 3392);
          *(double *)&v275[8] = v120 + v151;
          *(double *)&v275[16] = v120;
          goto LABEL_128;
        }
        if (v275[1] != 1 || v144)
        {
          if (v144)
            *(double *)&v275[24] = v120;
          else
            *(double *)&v275[16] = v120;
          goto LABEL_128;
        }
        if (*(double *)(a1 + 3488) >= 0.0)
        {
          v155 = 0;
          v152 = 1;
          goto LABEL_122;
        }
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2352, (uint64_t)"transition_config.hysteresis_time_window_in_motion >= 0.0", 57, (uint64_t)"hysteresis_time_window_in_motion >= 0", 37, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v152 = v275[1];
        if (!v275[2])
        {
          v155 = v275[0];
LABEL_122:
          if (v152 != 1 || v155)
          {
            sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2395, (uint64_t)"", 0, (uint64_t)"No such condition possible in pose filtering transitions", 56, (void (*)(void **))sub_21023DDB0);
            abort();
          }
          if (v120 - *(double *)&v275[24] <= 0.0
            || (v154 = (double *)(a1 + 3432), v153 = a1 + 3424, v120 - *(double *)&v275[24] > *(double *)(a1 + 3488)))
          {
            *(_WORD *)v275 = 0;
            *(double *)&v275[16] = v120;
            v154 = (double *)(a1 + 3384);
            v153 = a1 + 3376;
          }
          goto LABEL_127;
        }
        v153 = a1 + 3376;
        if (v275[1])
          v153 = a1 + 3424;
        v154 = (double *)(v153 + 8);
LABEL_127:
        v6 = *v154;
        v128 = *(double *)(v153 + 16);
LABEL_128:
        v156 = *(double *)(a1 + 3472);
        if (v156 <= 0.0
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorPoseFilter.cpp", 42, (uint64_t)"filter_config.dt > 0.0", 22, (uint64_t)"PosePredictorPoseFilter dt needs to be > 0", 42, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        if ((v6 < 0.0 || v6 > 1.0)
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorPoseFilter.cpp", 44, (uint64_t)"filter_config.alphaBeta_theta >= 0.0 && filter_config.alphaBeta_theta <= 1.0", 76, (uint64_t)"PosePredictorPoseFilter alphaBeta_theta needs to be on [0,1]", 60, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        *(double *)(a1 + 4016) = v6;
        *(double *)(a1 + 4024) = v156;
LABEL_134:
        v157 = v302;
        if (v302 >= *(double *)(a1 + 5464))
          v157 = *(double *)(a1 + 5464);
        *(double *)(a1 + 5464) = v157;
        if (v262)
        {
          if (v5 <= 0.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 928, (uint64_t)"rad_angle_delta_per_10msec > 0. && \"rad_angle_delta_per_10msec > 0!\"", 68, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          _Q1.f64[0] = *(float64_t *)v325;
          _V3.D[1] = *(_QWORD *)&v325[16];
          _V5.D[1] = v326.f64[1];
          v127.f64[0] = *(float64_t *)v304;
          _D16 = *((_QWORD *)&v304[1] + 1);
          _D18 = v306;
          __asm
          {
            FMLA            D0, D16, V3.D[1]
            FMLA            D0, D18, V5.D[1]
          }
          v292 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)category, *(double *)__p), *(float64x2_t *)((char *)v304 + 8), *(double *)&v325[8]), v305, v326.f64[0]);
          *(_QWORD *)v293 = vmlad_n_f64(vmlad_n_f64(*(double *)v304 * *(double *)__p, *((double *)&v304[1] + 1), *(double *)&v325[8]), *(double *)&v306, v326.f64[0]);
          *(_QWORD *)&v293[24] = _D0;
          *(float64x2_t *)&v293[8] = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(*(float64x2_t *)category, *(float64x2_t *)__p, 1), *(float64x2_t *)((char *)v304 + 8), *(float64x2_t *)&v325[8], 1), v305, v326, 1);
          v294 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)category, *(double *)v325), *(float64x2_t *)((char *)v304 + 8), *(double *)&v325[24]), v305, *(double *)&v327);
          *(double *)&v295 = vmulq_f64(v127, _Q1).f64[0]
                           + *((double *)&v304[1] + 1) * *(double *)&v325[24]
                           + *(double *)&v306 * *(double *)&v327;
          v311 = 0.0;
          v310 = 0;
          v312 = 0.0;
          sub_20E9733B8(&v292, (double *)&v310);
          _Q1.f64[1] = v311;
          _D3 = v311;
          __asm { FMLA            D2, D3, V1.D[1] }
          v166 = sqrt(_D2 + v312 * v312) + 0.0000001;
          v128 = v93;
          if (v166 > v5 * 100.0)
            v128 = 1.0 - v5 / v166;
        }
        v167 = v117[7];
        _Q1.f64[0] = *v117;
        if (v167 <= *v117)
        {
          if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2246, (uint64_t)"(curr_imu_it + 1)->timestamp > curr_imu_it->timestamp", 53, (uint64_t)"IMU timestamp must be in increasing order", 41, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v167 = v117[7];
          _Q1.f64[0] = *v117;
        }
        _Q1.f64[0] = v167 - _Q1.f64[0];
        v273 = _Q1;
        v168 = pow(v128, _Q1.f64[0] * 100.0);
        *(_QWORD *)&v292.f64[0] = v111;
        *(_QWORD *)&v292.f64[1] = v111 + 14;
        sub_20F4BA010((uint64_t)__p, v269, (uint64_t *)&v292);
        v169.f64[0] = v168;
        sub_20F1B4AFC((uint64_t)__p, (uint64_t)category, (uint64_t)&v292, v169, v170, v171, v172);
        v286 = v299;
        v287 = v300;
        v288 = v301;
        v282 = v295;
        v283 = v296;
        v284 = (int8x16_t)v297;
        v285 = v298;
        v278 = (__int128)v292;
        v279 = *(_OWORD *)v293;
        v280 = *(_OWORD *)&v293[16];
        v281 = v294;
        v331 = v299;
        v332 = v300;
        v333 = v301;
        v327 = v295;
        v328 = v296;
        v330 = v298;
        v329 = v297;
        *(float64x2_t *)__p = v292;
        *(_OWORD *)v325 = *(_OWORD *)v293;
        v326 = v294;
        *(_OWORD *)&v325[16] = *(_OWORD *)&v293[16];
        if (v267)
        {
          v173 = *(double *)(a1 + 4024);
          if (v173 == 0.0)
            v174 = 1.0;
          else
            v174 = 1.0 / v173;
          v176 = pow(*(long double *)(a1 + 4016), v273.f64[0] * v174);
          v178.f64[0] = v288;
          v261 = v178;
          v259 = v287;
          v178.f64[1] = v273.f64[1];
          if (v273.f64[0] < 0.0
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorPoseFilter.cpp", 51, (uint64_t)"time_step >= 0", 14, (uint64_t)"Time step error must be non-negative", 36, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
          v179 = *v22;
          v180 = vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u64[0];
          if (v273.f64[0] == 0.0)
          {
            v258 = v180;
            v260 = *(double *)(a1 + 4048);
            v261 = *v22;
          }
          else
          {
            v178.f64[0] = 1.0 - v176 * v176;
            v181 = (float64x2_t)v259;
            v175.f64[0] = *(float64_t *)(a1 + 4072);
            v182 = *(float64x2_t *)(a1 + 4056);
            v177.f64[0] = *(float64_t *)(a1 + 4048);
            v183 = vaddq_f64(v177, vmulq_f64(v273, v175));
            *(_QWORD *)&v179.f64[1] = v180;
            *(_QWORD *)&v181.f64[1] = vextq_s8((int8x16_t)v181, (int8x16_t)v181, 8uLL).u64[0];
            v184 = vaddq_f64(v179, vmulq_n_f64(v182, v273.f64[0]));
            v185 = vsubq_f64(v181, v184);
            v186 = vsubq_f64(v261, v183);
            *(_QWORD *)&v183.f64[0] = *(_OWORD *)&vaddq_f64(v183, vmulq_f64(v178, v186));
            v187 = vaddq_f64(v184, vmulq_n_f64(v185, v178.f64[0]));
            v258 = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u64[0];
            v260 = v183.f64[0];
            v261.f64[0] = v187.f64[0];
            *v22 = v187;
            *(float64_t *)(a1 + 4048) = v183.f64[0];
            v187.f64[0] = 1.0 / v273.f64[0] * ((1.0 - v176) * (1.0 - v176));
            *(float64x2_t *)(a1 + 4056) = vaddq_f64(v182, vmulq_n_f64(v185, v187.f64[0]));
            *(_QWORD *)(a1 + 4072) = *(_OWORD *)&vaddq_f64(v175, vmulq_f64(v187, v186));
          }
          v369 = (float64x2_t)v284;
          v370 = v285;
          v371 = v286;
          v365 = v280;
          v366 = v281;
          v368 = v283;
          v367 = v282;
          v364 = v279;
          v363 = v278;
          v276 = *(int8x16_t *)v22;
          *(_QWORD *)&v277[0] = *(_QWORD *)(a1 + 4048);
          *(_OWORD *)((char *)v277 + 8) = *(_OWORD *)(a1 + 4056);
          *((_QWORD *)&v277[1] + 1) = *(_QWORD *)(a1 + 4072);
          if (v115 >= v256)
            goto LABEL_59;
LABEL_156:
          v188 = v117[7];
          if (v188 <= v116 && v188 > v252)
            sub_20F1BC3A8(v251, (__int128 *)category, &v278, &v313, (__int128 *)v275, v188);
          goto LABEL_59;
        }
        v369 = (float64x2_t)v284;
        v370 = v285;
        v371 = v286;
        v365 = v280;
        v366 = v281;
        v368 = v283;
        v367 = v282;
        v364 = v279;
        v363 = v278;
        v258 = vextq_s8(v287, v287, 8uLL).u64[0];
        v260 = v288;
        *(_QWORD *)&v261.f64[0] = v287.i64[0];
        if (v115 < v256)
          goto LABEL_156;
LABEL_59:
        ++v115;
        v111 += 7;
        v117 = v118;
        if (v257 == v115)
        {
          v73 = v260;
          v71.i64[0] = *(_QWORD *)&v261.f64[0];
          v72 = v258;
          goto LABEL_163;
        }
      }
    }
    v284 = (int8x16_t)v351;
    v285 = v352;
    v280 = v347;
    v281 = v348;
    v282 = v349;
    v283 = v350;
    v278 = v345;
    v279 = v346;
    v288 = v73;
    v189.i64[0] = v71.i64[0];
    v189.i64[1] = v72;
    v286 = v353;
    v287 = v189;
    if (v113)
    {
      v73 = *(double *)v277;
      v71 = v276;
      v72 = vextq_s8(v71, v71, 8uLL).u64[0];
    }
    v369 = v351;
    v370 = v352;
    v371 = v353;
    v365 = v347;
    v366 = v348;
    v368 = v350;
    v367 = v349;
    v364 = v346;
    v363 = v345;
    goto LABEL_163;
  }
  return result;
}

void sub_20F1DBD88(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x498]))
  {
    if (SLOBYTE(STACK[0x497]) < 0)
      operator delete((void *)STACK[0x480]);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&STACK[0x820]);
  _Unwind_Resume(a1);
}

void sub_20F1DBDD0(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x820]);
  _Unwind_Resume(a1);
}

void sub_20F1DBDE4(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x820]);
  _Unwind_Resume(a1);
}

void sub_20F1DBDF8(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x820]);
  _Unwind_Resume(a1);
}

void sub_20F1DBE0C(_Unwind_Exception *a1)
{
  sub_20E863714((uint64_t)&STACK[0x820]);
  _Unwind_Resume(a1);
}

void sub_20F1DBE20(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x4A0]) && SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (STACK[0x480])
    os_release((void *)STACK[0x480]);
  sub_20E863714((uint64_t)&STACK[0x820]);
  _Unwind_Resume(a1);
}

void sub_20F1DBE98(uint64_t a1, int a2)
{
  if (a2)
    sub_20E860DA4(a1);
  JUMPOUT(0x20F1DBEB0);
}

double sub_20F1DBEB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  double result;

  v1 = *(_QWORD **)(a1 + 8);
  if (v1[6] && v1[30] && v1[36])
  {
    v2 = v1[29];
    if (v2)
    {
      v3 = v1[25] + 32 * v2 - 32;
      v4 = v1[35];
      if (v4)
      {
LABEL_6:
        v5 = v1[31];
        goto LABEL_10;
      }
    }
    else
    {
      v3 = v1[25] + 32 * ((uint64_t)(v1[26] - v1[25]) >> 5) - 32;
      v4 = v1[35];
      if (v4)
        goto LABEL_6;
    }
    v6 = v1 + 31;
    v5 = v1[31];
    v4 = (v6[1] - v5) >> 5;
LABEL_10:
    result = *(double *)(v5 + 32 * v4 - 32);
    if (result >= *(double *)v3)
      return *(double *)v3;
  }
  return result;
}

uint64_t sub_20F1DBF4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  double v9[3];
  float64x2_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  kdebug_trace();
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 40);
  v5 = *(_OWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 64);
  v7 = *(_OWORD *)(v2 + 48);
  v10 = *(float64x2_t *)v2;
  v11 = v3;
  v12 = v5;
  v13 = v4;
  v14 = v7;
  v15 = v6;
  memset(v9, 0, sizeof(v9));
  sub_20E9733B8(&v10, v9);
  kdebug_trace();
  return kdebug_trace();
}

double sub_20F1DC050(uint64_t a1)
{
  return *(double *)(a1 + 5424);
}

uint64_t sub_20F1DC058(uint64_t result)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;

  *(_QWORD *)(result + 4592) = 0x3FF0000000000000;
  *(_QWORD *)(result + 4600) = 0;
  *(_QWORD *)(result + 4616) = 0;
  *(_QWORD *)(result + 4608) = 0;
  *(_QWORD *)(result + 4624) = 0x3FF0000000000000;
  *(_QWORD *)(result + 4632) = 0;
  *(_QWORD *)(result + 4648) = 0;
  *(_QWORD *)(result + 4640) = 0;
  *(_QWORD *)(result + 4656) = 0x3FF0000000000000;
  *(_OWORD *)(result + 4664) = 0u;
  *(_OWORD *)(result + 4680) = 0u;
  *(_OWORD *)(result + 4696) = 0u;
  *(_OWORD *)(result + 4712) = 0u;
  *(_OWORD *)(result + 4728) = 0u;
  *(_OWORD *)(result + 4744) = 0u;
  *(_QWORD *)(result + 4760) = 0x3FF0000000000000;
  *(_QWORD *)(result + 4776) = 0;
  *(_QWORD *)(result + 4768) = 0;
  *(_QWORD *)(result + 4784) = 0;
  *(_QWORD *)(result + 4792) = 0x3FF0000000000000;
  *(_QWORD *)(result + 4816) = 0;
  *(_QWORD *)(result + 4800) = 0;
  *(_QWORD *)(result + 4808) = 0;
  *(_QWORD *)(result + 4824) = 0x3FF0000000000000;
  *(_OWORD *)(result + 4832) = 0u;
  *(_OWORD *)(result + 4848) = 0u;
  *(_OWORD *)(result + 4864) = 0u;
  *(_OWORD *)(result + 4880) = 0u;
  *(_OWORD *)(result + 4896) = 0u;
  *(_OWORD *)(result + 4912) = 0u;
  *(_QWORD *)(result + 4928) = 0x3FF0000000000000;
  *(_QWORD *)(result + 4952) = 0;
  *(_QWORD *)(result + 4936) = 0;
  *(_QWORD *)(result + 4944) = 0;
  *(_QWORD *)(result + 4960) = 0x3FF0000000000000;
  *(_QWORD *)(result + 4984) = 0;
  *(_QWORD *)(result + 4968) = 0;
  *(_QWORD *)(result + 4976) = 0;
  *(_QWORD *)(result + 4992) = 0x3FF0000000000000;
  *(_OWORD *)(result + 5000) = 0u;
  *(_OWORD *)(result + 5016) = 0u;
  *(_OWORD *)(result + 5032) = 0u;
  *(_OWORD *)(result + 5048) = 0u;
  *(_OWORD *)(result + 5064) = 0u;
  *(_OWORD *)(result + 5080) = 0u;
  *(_QWORD *)(result + 5256) = 0x3FF0000000000000;
  *(_QWORD *)(result + 5280) = 0;
  *(_QWORD *)(result + 5264) = 0;
  *(_QWORD *)(result + 5272) = 0;
  *(_QWORD *)(result + 5288) = 0x3FF0000000000000;
  *(_QWORD *)(result + 5312) = 0;
  *(_QWORD *)(result + 5296) = 0;
  *(_QWORD *)(result + 5304) = 0;
  *(_QWORD *)(result + 5320) = 0x3FF0000000000000;
  *(_OWORD *)(result + 5328) = 0u;
  *(_OWORD *)(result + 5344) = 0u;
  *(_OWORD *)(result + 5360) = 0u;
  *(_OWORD *)(result + 5376) = 0u;
  *(_OWORD *)(result + 5392) = 0u;
  *(_OWORD *)(result + 5408) = 0u;
  *(_OWORD *)(result + 5424) = 0u;
  *(_OWORD *)(result + 5440) = 0u;
  *(_QWORD *)(result + 5456) = 0;
  *(_QWORD *)(result + 5464) = 0x3FE0000000000000;
  *(_OWORD *)(result + 5224) = 0u;
  *(_OWORD *)(result + 5240) = 0u;
  *(_OWORD *)(result + 5208) = 0u;
  *(_BYTE *)(result + 5178) = 0;
  *(_WORD *)(result + 5176) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(result + 5184) = _Q1;
  *(_QWORD *)(result + 5200) = 0xBFF0000000000000;
  *(_OWORD *)(result + 5144) = 0u;
  *(_OWORD *)(result + 5160) = 0u;
  *(_OWORD *)(result + 5128) = 0u;
  *(_BYTE *)(result + 5098) = 0;
  *(_WORD *)(result + 5096) = 0;
  v37 = _Q1;
  *(_OWORD *)(result + 5104) = _Q1;
  *(_QWORD *)(result + 5120) = 0xBFF0000000000000;
  v6 = *(_QWORD **)(result + 8);
  v6[4] = 0;
  v6[5] = 0;
  v6[6] = 0;
  v6[11] = 0;
  v6[12] = 0;
  v6[10] = 0;
  v6[17] = 0;
  v6[18] = 0;
  v6[16] = 0;
  v6[23] = 0;
  v6[24] = 0;
  v6[22] = 0;
  if (*(_BYTE *)(result + 3504))
  {
    v7 = result;
    if (*(_BYTE *)(result + 1008))
    {
      if (*(double *)(result + 3536) > 0.0
        || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1643, (uint64_t)"config_.imu_filter_switch_config.transition_times.TransitionMoving2Stationary_window > 0.0", 90, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), !(_DWORD)result))
      {
        if (*(double *)(v7 + 3528) > 0.0
          || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1646, (uint64_t)"config_.imu_filter_switch_config.transition_times.TransitionStationary2Moving_window > 0.0", 90, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), !(_DWORD)result))
        {
          if (*(double *)(v7 + 3544) > 0.0
            || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1648, (uint64_t)"config_.imu_filter_switch_config.transition_times .stationary_window_to_switch_from_motion > 0.0", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), !(_DWORD)result))
          {
            if (*(double *)(v7 + 3552) > 0.0
              || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1651, (uint64_t)"config_.imu_filter_switch_config.transition_times.TransitionMoving2Walking_window > 0.0", 87, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), !(_DWORD)result))
            {
              if (*(double *)(v7 + 3560) > 0.0
                || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1654, (uint64_t)"config_.imu_filter_switch_config.transition_times.TransitionWalking2Moving_window > 0.0", 87, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), !(_DWORD)result))
              {
                if (*(double *)(v7 + 3584) > 0.0
                  || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1656, (uint64_t)"config_.imu_filter_switch_config.transition_times.enter_walking_mode_time_window > 0.0", 86, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), !(_DWORD)result))
                {
                  if (*(double *)(v7 + 3568) > 0.0
                    || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1658, (uint64_t)"config_.imu_filter_switch_config.transition_times.walking_mode_time_window > 0.0", 80, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), !(_DWORD)result))
                  {
                    if (*(_BYTE *)(v7 + 4232)
                      || (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1659, (uint64_t)"switch_data.has_value()", 23, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0), !(_DWORD)result))
                    {
                      *(_WORD *)(v7 + 4080) = 0;
                      *(_QWORD *)(v7 + 4088) = 0xBFF0000000000000;
                      *(_OWORD *)(v7 + 4096) = v37;
                      *(_OWORD *)(v7 + 4112) = v37;
                      *(_OWORD *)(v7 + 4128) = v37;
                      *(_OWORD *)(v7 + 4144) = v37;
                      *(_OWORD *)(v7 + 4160) = xmmword_21030D340;
                      *(_QWORD *)(v7 + 4176) = 0xBFF0000000000000;
                      *(_QWORD *)(v7 + 4208) = 0;
                      *(_QWORD *)(v7 + 4224) = 0;
                      *(_QWORD *)(v7 + 4216) = 0;
                      v8 = *(_QWORD *)(v7 + 3704);
                      v9 = *(_DWORD *)(v7 + 3672);
                      if (v9 == *(_DWORD *)(v7 + 1120) && *(_DWORD *)(v7 + 3696) == *(_DWORD *)(v7 + 1144))
                      {
LABEL_23:
                        if (!v9)
                          goto LABEL_33;
                        v10 = *(_QWORD *)(v7 + 1104);
                        v11 = *(uint64_t **)(v7 + 3656);
                        v12 = (v9 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                        if (v12 < 3)
                        {
                          v13 = *(_QWORD **)(v7 + 1104);
                        }
                        else
                        {
                          v13 = *(_QWORD **)(v7 + 1104);
                          if ((unint64_t)(v10 - (_QWORD)v11) >= 0x20)
                          {
                            v14 = v12 + 1;
                            v15 = v14 & 0x3FFFFFFFFFFFFFFCLL;
                            v16 = &v11[v15];
                            v13 = (_QWORD *)(v10 + v15 * 8);
                            v17 = (_OWORD *)(v10 + 16);
                            v18 = (__int128 *)(v11 + 2);
                            v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
                            do
                            {
                              v20 = *v18;
                              *(v17 - 1) = *(v18 - 1);
                              *v17 = v20;
                              v17 += 2;
                              v18 += 2;
                              v19 -= 4;
                            }
                            while (v19);
                            v11 = v16;
                            if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
                            {
LABEL_33:
                              v23 = *(unsigned int *)(v7 + 1144);
                              if ((_DWORD)v23)
                              {
                                v24 = *(_QWORD *)(v7 + 1128);
                                v25 = *(uint64_t **)(v7 + 3680);
                                v26 = (v23 - 1) & 0x1FFFFFFFFFFFFFFFLL;
                                if (v26 < 3)
                                {
                                  v27 = *(_QWORD **)(v7 + 1128);
                                }
                                else
                                {
                                  v27 = *(_QWORD **)(v7 + 1128);
                                  if ((unint64_t)(v24 - (_QWORD)v25) >= 0x20)
                                  {
                                    v28 = v26 + 1;
                                    v29 = v28 & 0x3FFFFFFFFFFFFFFCLL;
                                    v30 = &v25[v29];
                                    v27 = (_QWORD *)(v24 + v29 * 8);
                                    v31 = (_OWORD *)(v24 + 16);
                                    v32 = (__int128 *)(v25 + 2);
                                    v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      v34 = *v32;
                                      *(v31 - 1) = *(v32 - 1);
                                      *v31 = v34;
                                      v31 += 2;
                                      v32 += 2;
                                      v33 -= 4;
                                    }
                                    while (v33);
                                    v25 = v30;
                                    if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
                                      goto LABEL_43;
                                  }
                                }
                                v35 = (_QWORD *)(v24 + 8 * v23);
                                do
                                {
                                  v36 = *v25++;
                                  *v27++ = v36;
                                }
                                while (v27 != v35);
                              }
LABEL_43:
                              *(_QWORD *)(v7 + 1200) = v8;
                              return result;
                            }
                          }
                        }
                        v21 = (_QWORD *)(v10 + 8 * v9);
                        do
                        {
                          v22 = *v11++;
                          *v13++ = v22;
                        }
                        while (v13 != v21);
                        goto LABEL_33;
                      }
                      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/OdometryUnsanitized/src/IMUIIRFilter.cpp", 137, (uint64_t)"feedforward_cfs.size() == feedforward_cfs_.size() && feedback_cfs.size() == feedback_cfs_.size()", 96, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
                      if ((result & 1) == 0)
                      {
                        v9 = *(_DWORD *)(v7 + 1120);
                        goto LABEL_23;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      abort();
    }
  }
  return result;
}

uint64_t sub_20F1DC5E4(uint64_t result, _QWORD *a2, _QWORD *a3, double *a4, double *a5, double *a6)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  unint64_t v43;
  double v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  double v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  double v57;
  uint64_t v58;
  unint64_t v59;
  double v60;
  __int128 v61;
  uint64_t v62;
  _QWORD *v63;
  char v64;
  uint64_t v65;
  _QWORD *v66;
  char v67;
  uint64_t v68;

  v9 = *(_QWORD *)(result + 40);
  if (v9)
  {
    v10 = (_QWORD *)result;
    v11 = *(_QWORD *)result;
    if (v9 == 1)
    {
      v12 = 8 * (*(_QWORD *)(result + 24) % (unint64_t)((*(_QWORD *)(result + 8) - v11) >> 3));
      *a2 = *(_QWORD *)(v11 + v12);
      *a3 = *(_QWORD *)(v11 + v12);
      v13 = 1;
      goto LABEL_27;
    }
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD *)(result + 24);
    v18 = (*(_QWORD *)(result + 8) - v11) >> 3;
    for (i = 1; i != v9; ++i)
    {
      if (*(double *)(v11 + 8 * ((v17 + i) % v18)) < *(double *)(v11 + 8 * ((v15 + v17) % v18)))
      {
        v16 = i;
        v15 = i;
      }
    }
    v20 = 0;
    v21 = 0;
    *a2 = *(_QWORD *)(v11 + 8 * ((v16 + v17) % v18));
    for (j = 1; j != v9; ++j)
    {
      if (*(double *)(v11 + 8 * ((v20 + v17) % v18)) < *(double *)(v11 + 8 * ((v17 + j) % v18)))
      {
        v21 = j;
        v20 = j;
      }
    }
    *a3 = *(_QWORD *)(v11 + 8 * ((v21 + v17) % v18));
    v13 = v9;
    if (v9 <= 0)
    {
      result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Statistics.h", 363, (uint64_t)"begin < end", 11, (uint64_t)"Median is undefined for empty ranges", 36, (void (*)(void **))sub_21023DDB0);
      if ((result & 1) != 0)
        goto LABEL_69;
      v13 = v10[5];
      if ((v13 & 1) == 0)
      {
LABEL_15:
        if (v13 >= 0)
          v23 = v13;
        else
          v23 = v13 + 1;
        v24 = v23 >> 1;
        if (v23 >> 1 == v13)
        {
          v25 = *v10;
          if ((v13 & 0xFFFFFFFFFFFFFFFELL) != 2)
          {
            v26 = 0;
            v27 = 0;
            v28 = 1;
            do
            {
              if (*(double *)(v25 + 8 * ((v26 + v10[3]) % (unint64_t)((v10[1] - v25) >> 3))) < *(double *)(v25 + 8 * ((v10[3] + v28) % (unint64_t)((v10[1] - v25) >> 3))))
              {
                v27 = v28;
                v26 = v28;
              }
              ++v28;
            }
            while (v13 != v28);
            goto LABEL_44;
          }
        }
        else
        {
          v65 = v23 >> 1;
          v66 = v10;
          v67 = 0;
          v68 = 0;
          v62 = v9;
          v63 = v10;
          v64 = 0;
          *(_QWORD *)&v61 = v10;
          BYTE8(v61) = 1;
          result = sub_20F1E15F0((uint64_t)&v66, (uint64_t)&v63, &v61);
          if ((unint64_t)v13 <= 1)
          {
            v27 = 0;
            v25 = *v10;
            goto LABEL_44;
          }
          v34 = v10[5];
          v25 = *v10;
          if ((v13 & 0xFFFFFFFFFFFFFFFELL) != 2 || v34 == 1)
          {
            v35 = 0;
            v36 = 0;
            v27 = 0;
            v37 = v10[3];
            v38 = (v10[1] - v25) >> 3;
            v39 = v34 - 2;
            do
            {
              v40 = v35++;
              result = (v36 + v37) % v38;
              if (*(double *)(v25 + 8 * result) < *(double *)(v25 + 8 * ((v37 + 1 + v40) % v38)))
              {
                v27 = v40 + 1;
                v36 = v40 + 1;
              }
            }
            while (v39 == v40 || v24 - 2 != v40);
LABEL_44:
            v31 = v10[3];
            v32 = v10[1];
            *a4 = (*(double *)(v25 + 8 * ((v31 + v24) % ((v32 - v25) >> 3)))
                 + *(double *)(v25 + 8 * ((v31 + v27) % ((v32 - v25) >> 3))))
                * 0.5;
            v33 = v10[5];
            if (v33 > 0)
              goto LABEL_47;
LABEL_45:
            result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Statistics.h", 335, (uint64_t)"begin < end", 11, (uint64_t)"Mean is undefined for empty ranges", 34, (void (*)(void **))sub_21023DDB0);
            if ((result & 1) != 0)
              goto LABEL_69;
            v31 = v10[3];
            v25 = *v10;
            v32 = v10[1];
            v33 = v10[5];
LABEL_47:
            v41 = (v32 - v25) >> 3;
            v42 = *(double *)(v25 + 8 * (v31 % v41));
            v43 = v33 - 1;
            if (v33 == 1)
            {
              v44 = v42 / (double)1;
              *a5 = v44;
              goto LABEL_59;
            }
            if (v43 >= 2)
            {
              v45 = v43 | 1;
              v46 = v31 + 2;
              v47 = v43 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                result = v46 % v41;
                v42 = v42 + *(double *)(v25 + 8 * ((v46 - 1) % v41)) + *(double *)(v25 + 8 * (v46 % v41));
                v46 += 2;
                v47 -= 2;
              }
              while (v47);
              if (v43 == (v43 & 0xFFFFFFFFFFFFFFFELL))
                goto LABEL_56;
            }
            else
            {
              v45 = 1;
            }
            v48 = v33 - v45;
            v49 = v31 + v45;
            do
            {
              v42 = v42 + *(double *)(v25 + 8 * (v49 % v41));
              ++v49;
              --v48;
            }
            while (v48);
LABEL_56:
            v44 = v42 / (double)v33;
            *a5 = v44;
            if (v33 > 0)
              goto LABEL_59;
            result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/Util/include/VIO/Util/Statistics.h", 561, (uint64_t)"begin < end", 11, (uint64_t)"Standard deviation is undefined for empty ranges", 48, (void (*)(void **))sub_21023DDB0);
            if ((result & 1) == 0)
            {
              v33 = v10[5];
              v31 = v10[3];
              v25 = *v10;
LABEL_59:
              v50 = (v10[1] - v25) >> 3;
              v51 = *(double *)(v25 + 8 * (v31 % v50)) - v44;
              v52 = v51 * v51;
              v53 = v33 - 1;
              if (v33 != 1)
              {
                if (v53 >= 2)
                {
                  v54 = v53 | 1;
                  v55 = v31 + 2;
                  v56 = v53 & 0xFFFFFFFFFFFFFFFELL;
                  do
                  {
                    result = v55 % v50;
                    v57 = *(double *)(v25 + 8 * (v55 % v50)) - v44;
                    v52 = v52
                        + (*(double *)(v25 + 8 * ((v55 - 1) % v50)) - v44)
                        * (*(double *)(v25 + 8 * ((v55 - 1) % v50)) - v44)
                        + v57 * v57;
                    v55 += 2;
                    v56 -= 2;
                  }
                  while (v56);
                  if (v53 == (v53 & 0xFFFFFFFFFFFFFFFELL))
                    goto LABEL_67;
                }
                else
                {
                  v54 = 1;
                }
                v58 = v33 - v54;
                v59 = v31 + v54;
                do
                {
                  v60 = *(double *)(v25 + 8 * (v59 % v50)) - v44;
                  v52 = v52 + v60 * v60;
                  ++v59;
                  --v58;
                }
                while (v58);
              }
LABEL_67:
              v14 = sqrt(v52 / (double)v33);
              goto LABEL_68;
            }
LABEL_69:
            abort();
          }
        }
        v27 = 0;
        goto LABEL_44;
      }
    }
    else if ((v9 & 1) == 0)
    {
      goto LABEL_15;
    }
LABEL_27:
    if (v13 >= 0)
      v29 = v13;
    else
      v29 = v13 + 1;
    v30 = v29 >> 1;
    if (v29 >> 1 != v13)
    {
      v65 = v29 >> 1;
      v66 = v10;
      v67 = 0;
      v68 = 0;
      v62 = v9;
      v63 = v10;
      v64 = 0;
      *(_QWORD *)&v61 = v10;
      BYTE8(v61) = 1;
      result = sub_20F1E15F0((uint64_t)&v66, (uint64_t)&v63, &v61);
    }
    v31 = v10[3];
    v25 = *v10;
    v32 = v10[1];
    *a4 = *(double *)(*v10 + 8 * ((v31 + v30) % ((v32 - *v10) >> 3)));
    v33 = v10[5];
    if (v33 > 0)
      goto LABEL_47;
    goto LABEL_45;
  }
  *a3 = 0;
  *a2 = 0;
  *a4 = 0.0;
  v14 = 0.0;
  *a5 = 0.0;
LABEL_68:
  *a6 = v14;
  return result;
}

double sub_20F1DCBC0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, double *a5, float64x2_t a6, double a7, float64_t a8, double a9, double _D4)
{
  double v10;
  double *v14;
  double *v15;
  double v23;
  unint64_t v24;
  unint64_t v25;
  double *v26;
  double *v27;
  double v28;
  double v29;
  double *v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  double *v41;
  double *v42;
  uint64_t v43;
  unint64_t v47;
  unint64_t v48;
  double *v49;
  double *v50;
  double *v51;
  double v52;
  char v53;
  double v54;
  double v55;
  char v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  uint64_t v68;
  double *v69;
  double *v70;
  double v75;
  unint64_t v76;
  unint64_t v77;
  double *v78;
  double *v79;
  double v80;
  double v81;
  double *v82;
  uint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  double v92;

  switch(*(_BYTE *)(a1 + 57))
  {
    case 0:
      *a5 = *(double *)(a1 + 64);
      v10 = *(double *)(a1 + 64);
      break;
    case 1:
      v69 = *(double **)(a1 + 72);
      v70 = *(double **)(a1 + 80);
      if (v70 != v69)
      {
        a6.f64[1] = a7;
        a6.f64[0] = sqrt(vmulq_f64(a6, a6).f64[0] + a7 * a7 + a8 * a8);
        _Q2 = *(_OWORD *)(a2 + 8);
        _D4 = *(_QWORD *)(a2 + 16);
        __asm { FMLA            D3, D4, V2.D[1] }
        v75 = sqrt(_D3 + *(double *)(a2 + 24) * *(double *)(a2 + 24));
        v76 = 0xAAAAAAAAAAAAAAABLL * (v70 - v69);
        do
        {
          v77 = v76 >> 1;
          v78 = &v69[3 * (v76 >> 1)];
          v80 = *v78;
          v81 = v78[1];
          v79 = v78 + 3;
          v76 += ~(v76 >> 1);
          if (v80 >= a6.f64[0] && v81 >= v75)
            v76 = v77;
          else
            v69 = v79;
        }
        while (v76);
      }
      if (v69 == v70)
        v82 = v70 - 1;
      else
        v82 = v69 + 2;
      v10 = *v82;
      *a5 = *v82;
      break;
    case 2:
      v14 = *(double **)(a1 + 72);
      v15 = *(double **)(a1 + 80);
      if (v15 != v14)
      {
        a6.f64[1] = a7;
        a6.f64[0] = sqrt(vmulq_f64(a6, a6).f64[0] + a7 * a7 + a8 * a8);
        _Q2 = *(_OWORD *)(a2 + 8);
        _D4 = *(_QWORD *)(a2 + 16);
        __asm { FMLA            D3, D4, V2.D[1] }
        v23 = sqrt(_D3 + *(double *)(a2 + 24) * *(double *)(a2 + 24));
        v24 = 0xAAAAAAAAAAAAAAABLL * (v15 - v14);
        do
        {
          v25 = v24 >> 1;
          v26 = &v14[3 * (v24 >> 1)];
          v28 = *v26;
          v29 = v26[1];
          v27 = v26 + 3;
          v24 += ~(v24 >> 1);
          if (v28 >= a6.f64[0] && v29 >= v23)
            v24 = v25;
          else
            v14 = v27;
        }
        while (v24);
      }
      if (v14 == v15)
        v30 = v15 - 1;
      else
        v30 = v14 + 2;
      v10 = *v30;
      *a5 = *v30;
      v31 = a3[5];
      if (v31)
      {
        v32 = 0;
        v33 = a3[3];
        v34 = *a3;
        v35 = (a3[1] - *a3) >> 4;
        v36 = 0.0;
        do
        {
          v37 = *(double *)(v34 + 16 * (v33 % v35));
          if (v37 <= *(double *)a2
            && v37 > *(double *)a2 - *(double *)(a1 + 96)
            && (*(double *)(v34 + 16 * (v33 % v35) + 8) < v36 || v32 == 0))
          {
            v36 = *(double *)(v34 + 16 * (v33 % v35) + 8);
            v32 = 1;
          }
          ++v33;
          --v31;
        }
        while (v31);
        if (v10 >= v36 && v32 != 0)
          v10 = v36;
      }
      break;
    case 3:
      v41 = *(double **)(a1 + 72);
      v42 = *(double **)(a1 + 80);
      v43 = (char *)v42 - (char *)v41;
      if (v42 != v41)
      {
        a6.f64[1] = a7;
        a6.f64[0] = sqrt(vmulq_f64(a6, a6).f64[0] + a7 * a7 + a8 * a8);
        _Q2 = *(_OWORD *)(a2 + 8);
        _D4 = *(double *)(a2 + 16);
        __asm { FMLA            D3, D4, V2.D[1] }
        a7 = sqrt(_D3 + *(double *)(a2 + 24) * *(double *)(a2 + 24));
        v47 = 0xAAAAAAAAAAAAAAABLL * (v43 >> 3);
        do
        {
          v48 = v47 >> 1;
          v49 = &v41[3 * (v47 >> 1)];
          a8 = *v49;
          a9 = v49[1];
          v50 = v49 + 3;
          v47 += ~(v47 >> 1);
          if (a8 >= a6.f64[0] && a9 >= a7)
            v47 = v48;
          else
            v41 = v50;
        }
        while (v47);
      }
      if (v41 == v42)
        v51 = v42 - 1;
      else
        v51 = v41 + 2;
      *a5 = *v51;
      v52 = *(double *)a2;
      if (v43 != 120
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2817, (uint64_t)"pose_smoothing_config.smoothing_set.size() == 5", 47, (uint64_t)" Expected pose smoothing smoothing set is 5", 43, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (*(_BYTE *)(a4 + 16))
      {
        v53 = 0;
        v54 = *(double *)a4;
        v55 = *(double *)(a4 + 8);
        v56 = 1;
      }
      else
      {
        v85 = a3[5];
        if (v85)
        {
          v86 = 0;
          v87 = a3[3];
          v88 = *a3;
          v89 = (a3[1] - *a3) >> 4;
          v54 = 0.0;
          v90 = v87;
          v91 = a3[5];
          do
          {
            v92 = *(double *)(v88 + 16 * (v90 % v89));
            if (v92 <= v52
              && v92 > v52 - *(double *)(a1 + 112)
              && (*(double *)(v88 + 16 * (v90 % v89) + 8) < v54 || v86 == 0))
            {
              v54 = *(double *)(v88 + 16 * (v90 % v89) + 8);
              v86 = 1;
            }
            ++v90;
            --v91;
          }
          while (v91);
          v56 = 0;
          v55 = 0.0;
          do
          {
            a7 = *(double *)(v88 + 16 * (v87 % v89));
            if (a7 <= v52 && a7 > v52 - *(double *)(a1 + 120))
            {
              a7 = *(double *)(v88 + 16 * (v87 % v89) + 8);
              if (a7 < v55 || v56 == 0)
              {
                v55 = *(double *)(v88 + 16 * (v87 % v89) + 8);
                v56 = 1;
              }
            }
            ++v87;
            --v85;
          }
          while (v85);
          if (v86)
          {
            if (v56)
            {
              v53 = 0;
              *(double *)a4 = v54;
              *(double *)(a4 + 8) = v55;
              v56 = 1;
              *(_BYTE *)(a4 + 16) = 1;
            }
            else
            {
              v56 = 0;
              v53 = 0;
            }
          }
          else
          {
            v53 = 1;
          }
        }
        else
        {
          v56 = 0;
          v53 = 1;
          v55 = 0.0;
          v54 = 0.0;
        }
      }
      v57 = sub_20F1DF1E8(a1, *a5, a7, a8, a9, _D4);
      v10 = *a5;
      if ((v53 & 1) == 0 && v56 && v10 >= v54 && v10 > *(double *)(*(_QWORD *)(a1 + 72) + 64))
      {
        v62 = v57;
        v63 = sub_20F1DF1E8(a1, v54, v58, v59, v60, v61);
        v68 = sub_20F1DF1E8(a1, v55, v64, v65, v66, v67);
        if (v62 || v63 != 4)
        {
          if (v62 || v68 != 4)
          {
            if (v62 || v63 != 3)
            {
              if (v62 || v68 != 3)
              {
                if (v62 == 1 && v63 == 4)
                {
                  v10 = 0.923;
                }
                else if (v62 == 1 && v68 == 4)
                {
                  v10 = 0.953;
                }
                else if (v62 == 1 && v63 == 3)
                {
                  v10 = 0.933;
                }
                else if (v68 == 3 && v62 == 1)
                {
                  v10 = 0.954;
                }
              }
              else
              {
                v10 = 0.952;
              }
            }
            else
            {
              v10 = 0.91;
            }
          }
          else
          {
            v10 = 0.951;
          }
        }
        else
        {
          v10 = 0.901;
        }
      }
      break;
    default:
      return v10;
  }
  return v10;
}

void sub_20F1DD158(uint64_t a1, char a2, char a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t a7, int a8, double a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  float64x2_t v14;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  const char *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  const char *v33;
  uint64_t v34;
  double v35;
  __int128 *v36;
  __int128 v37;
  __int128 v38;
  float64x2_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  float64x2_t v43;
  float64x2_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  size_t v47;
  const char *v48;
  _BYTE *v49;
  unint64_t v50;
  const char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  size_t v59;
  std::__shared_weak_count_vtbl *v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  void *v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  int v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  long double v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  double v99;
  double v100;
  unint64_t v101;
  double v102;
  unint64_t v103;
  void **v104;
  _QWORD *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  __int128 v113;
  double v114;
  void **v115;
  _OWORD *v116;
  _QWORD *v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  void *v122;
  _OWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  char *v142;
  void **v143;
  unsigned __int8 v144;
  size_t v145;
  const char *v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  size_t v154;
  std::__shared_weak_count_vtbl *v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count *v157;
  unint64_t *p_shared_owners;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  void *v165;
  int v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  void *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  void *v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  double v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  __int128 v194;
  __int128 v195;
  float64x2_t v196;
  __int128 v197;
  __int128 v198;
  double *v199;
  double *v200;
  char *v201;
  double *v202;
  double *v203;
  double v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  double *v209;
  _BYTE *v210;
  double *v211;
  uint64_t v212;
  int64_t v213;
  unint64_t v214;
  double *v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _OWORD *v220;
  double *v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  double *v227;
  long double v228;
  uint64_t v229;
  uint64_t v230;
  double v231;
  double v232;
  double v233;
  _OWORD *v234;
  unint64_t v235;
  char *v236;
  _QWORD *v237;
  double v238;
  double v239;
  int64x2_t v240;
  char v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  __int128 v254;
  char *v255;
  _QWORD *v256;
  double v257;
  double v258;
  int64x2_t v259;
  uint64_t v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  void *v283;
  float64x2_t v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  float64x2_t v288;
  char *v289;
  _QWORD *v290;
  int v291;
  char *v292;
  _QWORD *v293;
  _QWORD *v294;
  int v295;
  unint64_t v296;
  _QWORD *v297;
  void **v299;
  void **rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v301;
  int v302;
  const char *v303;
  int v304;
  const char *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  void *v308;
  void *v309;
  _QWORD *v310;
  void *v311;
  char *v312;
  char *v313;
  void *v314;
  void *v315;
  _QWORD *v316;
  void *v317;
  void *v318;
  double *v319;
  _BYTE object[48];
  float64x2_t v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  float64x2_t v326;
  float64x2_t v327;
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  char v340[8];
  uint64_t v341;

  v341 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 160) = 0;
  v14.f64[1] = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v18 = a5;
  v19 = a4;
  switch(a2)
  {
    case 0:
      v20 = *a4;
      v21 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a4[1] - *a4) >> 3);
      if (v21 > 1)
        goto LABEL_5;
      if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2652, (uint64_t)"states.size() >= 2u", 19, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
LABEL_308:
        abort();
      }
      v20 = *v19;
      v21 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v19[1] - *v19) >> 3);
LABEL_5:
      v22 = v20 + 168 * v21;
      v23 = *v18 + 8 * v21;
      v14.f64[0] = *(float64_t *)(v23 - 16);
      sub_20F1B7E80((float64x2_t *)(v22 - 336), v22 - 168, a6, a8, a10, (uint64_t)object, v14, *(double *)(v23 - 8), a9);
      goto LABEL_305;
    case 2:
      v34 = a4[1];
      v35 = *(double *)(a5[1] - 8);
      if (!a10
        && a8
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 804, (uint64_t)"!use_gyro_measurements || propagator != nullptr", 47, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_308;
      }
      v36 = (__int128 *)(v34 - 168);
      if (!a8 || (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a6[1] - *a6) >> 3)) <= 1)
      {
        v37 = *v36;
        v38 = *(_OWORD *)(v34 - 136);
        *(_OWORD *)&object[16] = *(_OWORD *)(v34 - 152);
        *(_OWORD *)&object[32] = v38;
        *(_OWORD *)object = v37;
        v39 = *(float64x2_t *)(v34 - 120);
        v40 = *(_OWORD *)(v34 - 104);
        v41 = *(_OWORD *)(v34 - 72);
        v323 = *(_OWORD *)(v34 - 88);
        v324 = v41;
        v321 = v39;
        v322 = v40;
        v42 = *(_OWORD *)(v34 - 56);
        v43 = *(float64x2_t *)(v34 - 40);
        v44 = *(float64x2_t *)(v34 - 24);
        v45 = *(_QWORD *)(v34 - 8);
        goto LABEL_242;
      }
      sub_20F1B8130((uint64_t)v36, a6, a10, (uint64_t)object, v35, a9);
      goto LABEL_305;
    case 3:
      if (!a10
        && a8
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 700, (uint64_t)"!use_gyro_measurements || propagator != nullptr", 47, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
      {
        goto LABEL_308;
      }
      if (a8)
        sub_20F1B7C18(v19, v18, (uint64_t)a6, a10, (unsigned int *)(a7 + 4), (uint64_t)object, a9);
      else
        sub_20F1B3F38(v19, v18, (unsigned int *)(a7 + 4), (uint64_t)object, a9);
      goto LABEL_305;
    case 4:
      if (!a8)
        goto LABEL_231;
      if (!a3)
        goto LABEL_231;
      sub_20F1D8150(&v311);
      if (**((int **)v311 + 7) > 4)
        goto LABEL_231;
      v29 = *((unsigned __int8 *)v311 + 72);
      v30 = sub_20E8C31DC((uint64_t)v311, "OSLogSurrogateAppender", 1, 0);
      v31 = v30;
      if (!v29 && !v30)
        goto LABEL_231;
      v299 = &v311;
      rep = (void **)std::chrono::steady_clock::now().__d_.__rep_;
      v301 = std::chrono::system_clock::now().__d_.__rep_;
      v302 = 4;
      v303 = "unknown file";
      v304 = 2669;
      v306 = 0;
      v307 = 0;
      v305 = "unknown function";
      v291 = v29;
      v290 = v311;
      if (*((char *)v311 + 39) < 0)
      {
        v33 = (const char *)*((_QWORD *)v311 + 2);
        v32 = *((_QWORD *)v311 + 3);
      }
      else
      {
        v32 = *((unsigned __int8 *)v311 + 39);
        v33 = (char *)v311 + 16;
      }
      v289 = (char *)v311 + 16;
      v294 = v19;
      v144 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v144 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v145 = byte_254A4A4F8[23];
      else
        v145 = *(_QWORD *)&byte_254A4A4F8[8];
      if (byte_254A4A4F8[23] >= 0)
        v146 = byte_254A4A4F8;
      else
        v146 = *(const char **)byte_254A4A4F8;
      *(_QWORD *)object = os_log_create(v146, v33);
      v147 = &object[8];
      if (v145 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v145 >= 0x17)
      {
        v148 = (v145 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v145 | 7) != 0x17)
          v148 = v145 | 7;
        v149 = v148 + 1;
        v147 = operator new(v148 + 1);
        *(_QWORD *)&object[16] = v145;
        *(_QWORD *)&object[24] = v149 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v147;
      }
      else
      {
        object[31] = v145;
        if (!v145)
          goto LABEL_164;
      }
      memmove(v147, v146, v145);
LABEL_164:
      v147[v145] = 0;
      object[32] = 1;
      v150 = &object[40];
      if (v32 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      v19 = v294;
      if (v32 >= 0x17)
      {
        v151 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v32 | 7) != 0x17)
          v151 = v32 | 7;
        v152 = v151 + 1;
        v150 = operator new(v151 + 1);
        *(_QWORD *)&v321.f64[0] = v32;
        *(_QWORD *)&v321.f64[1] = v152 | 0x8000000000000000;
        *(_QWORD *)&object[40] = v150;
      }
      else
      {
        HIBYTE(v321.f64[1]) = v32;
        if (!v32)
          goto LABEL_172;
      }
      memmove(v150, v33, v32);
LABEL_172:
      v150[v32] = 0;
      LOBYTE(v322) = 1;
      v153 = *(NSObject **)object;
      if (SHIBYTE(v321.f64[1]) < 0)
        operator delete(*(void **)&object[40]);
      if (object[32] && (object[31] & 0x80000000) != 0)
        operator delete(*(void **)&object[8]);
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (v31 && *(_QWORD *)(v31 + 24))
      {
        v154 = _os_log_pack_size();
        v155 = (std::__shared_weak_count_vtbl *)operator new(v154, (std::align_val_t)8uLL);
        v156 = (std::__shared_weak_count *)operator new();
        v157 = v156;
        v156->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v156->__shared_owners_;
        v156->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v156->__shared_weak_owners_ = 0;
        v156[1].__vftable = v155;
        *(_QWORD *)object = v155;
        *(_QWORD *)&object[8] = v155;
        *(_QWORD *)&object[16] = v156;
        do
          v159 = __ldxr(p_shared_owners);
        while (__stxr(v159 + 1, p_shared_owners));
        memset(&object[24], 0, 24);
        do
          v160 = __ldaxr(p_shared_owners);
        while (__stlxr(v160 - 1, p_shared_owners));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v157);
        }
        v161 = *(_QWORD *)object;
        *(_WORD *)_os_log_pack_fill() = 0;
        v162 = (char *)operator new();
        v163 = *((unsigned __int8 *)v290 + 39);
        v164 = v289;
        if ((v163 & 0x80u) != 0)
        {
          v164 = (char *)v290[2];
          v163 = v290[3];
        }
        *(_QWORD *)v162 = v161;
        *(_OWORD *)(v162 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v162 + 24) = *(_OWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *((_QWORD *)v162 + 5) = v164;
        *((_QWORD *)v162 + 6) = v163;
        v162[56] = 16;
        v314 = 0;
        v317 = v162;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v31 + 24) + 40))(*(_QWORD *)(v31 + 24), &v317);
        v165 = v317;
        v317 = 0;
        v166 = v291;
        if (v165)
        {
          v167 = (std::__shared_weak_count *)*((_QWORD *)v165 + 4);
          if (v167)
          {
            v168 = (unint64_t *)&v167->__shared_owners_;
            do
              v169 = __ldaxr(v168);
            while (__stlxr(v169 - 1, v168));
            if (!v169)
            {
              ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
              std::__shared_weak_count::__release_weak(v167);
            }
          }
          v170 = (std::__shared_weak_count *)*((_QWORD *)v165 + 2);
          if (v170)
          {
            v171 = (unint64_t *)&v170->__shared_owners_;
            do
              v172 = __ldaxr(v171);
            while (__stlxr(v172 - 1, v171));
            if (!v172)
            {
              ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
              std::__shared_weak_count::__release_weak(v170);
            }
          }
          MEMORY[0x212BC6398](v165, 0x10F0C40B62ED6C6);
          v173 = v314;
          v314 = 0;
          if (v173)
          {
            v174 = (std::__shared_weak_count *)*((_QWORD *)v173 + 4);
            if (v174)
            {
              v175 = (unint64_t *)&v174->__shared_owners_;
              do
                v176 = __ldaxr(v175);
              while (__stlxr(v176 - 1, v175));
              if (!v176)
              {
                ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                std::__shared_weak_count::__release_weak(v174);
              }
            }
            v177 = (std::__shared_weak_count *)*((_QWORD *)v173 + 2);
            if (v177)
            {
              v178 = (unint64_t *)&v177->__shared_owners_;
              do
                v179 = __ldaxr(v178);
              while (__stlxr(v179 - 1, v178));
              if (!v179)
              {
                ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                std::__shared_weak_count::__release_weak(v177);
              }
            }
            MEMORY[0x212BC6398](v173, 0x10F0C40B62ED6C6);
          }
        }
        v180 = *(std::__shared_weak_count **)&object[32];
        if (*(_QWORD *)&object[32])
        {
          v181 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
          do
            v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
        v183 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          v184 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
        }
      }
      else
      {
        os_log_type_enabled(v153, OS_LOG_TYPE_ERROR);
        *(_WORD *)object = 0;
        v186 = (void *)_os_log_send_and_compose_impl();
        v166 = v291;
        if (v186)
          free(v186);
      }
      if (v166)
      {
        sub_20E8C003C((uint64_t)&v299, "Method not imlemented. Rotation will be estimated using the history of the past poses");
        sub_20E863570((uint64_t)&v299);
      }
      sub_20E863570((uint64_t)&v299);
      v187 = v307;
      if (v307)
      {
        v188 = (unint64_t *)&v307->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
LABEL_231:
      v190 = *(double *)(a7 + 72);
      v191 = v18[1];
      if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v19[1] - *v19) >> 3) != (v191 - *v18) >> 3)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1870, (uint64_t)"state_timestamps.size() == states.size()", 40, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v191 = v18[1];
      }
      if (*(double *)(v191 - 8) > a9
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1871, (uint64_t)"extrap_timestamp >= state_timestamps.back()", 43, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (v190 < 0.0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1872, (uint64_t)"sampling_error_bound >= 0.0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v192 = v19[1];
      v193 = 0xCF3CF3CF3CF3CF3DLL * ((v192 - *v19) >> 3);
      if (v193 >= *(_QWORD *)(a11 + 32))
        v193 = *(_QWORD *)(a11 + 32);
      if (v193 <= 1)
      {
        v194 = *(_OWORD *)(v192 - 168);
        v195 = *(_OWORD *)(v192 - 136);
        *(_OWORD *)&object[16] = *(_OWORD *)(v192 - 152);
        *(_OWORD *)&object[32] = v195;
        *(_OWORD *)object = v194;
        v196 = *(float64x2_t *)(v192 - 120);
        v197 = *(_OWORD *)(v192 - 104);
        v198 = *(_OWORD *)(v192 - 72);
        v323 = *(_OWORD *)(v192 - 88);
        v324 = v198;
        v321 = v196;
        v322 = v197;
        v42 = *(_OWORD *)(v192 - 56);
        v43 = *(float64x2_t *)(v192 - 40);
        v44 = *(float64x2_t *)(v192 - 24);
        v45 = *(_QWORD *)(v192 - 8);
LABEL_242:
        v328 = v45;
        v326 = v43;
        v327 = v44;
        v325 = v42;
        goto LABEL_305;
      }
      v296 = v193 - 1;
      v199 = 0;
      v200 = 0;
      v201 = 0;
      v299 = 0;
      rep = 0;
      v301 = 0;
      v202 = (double *)v18[1];
      v203 = &v202[1 - v193];
      v297 = v18;
      while (1)
      {
        v204 = *v203 - *(v203 - 1);
        if (v199 >= v200)
          break;
        *v199++ = v204;
LABEL_245:
        if (++v203 == v202)
        {
          rep = (void **)v199;
          v301 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v200;
          v299 = (void **)v201;
          v317 = 0;
          v318 = 0;
          v319 = 0;
          v224 = (char *)v199 - v201;
          if (v199 == (double *)v201)
          {
            v227 = 0;
            v226 = 0;
            v225 = v296;
          }
          else
          {
            v225 = v296;
            if (v224 < 0)
              sub_20E867F44();
            v226 = (char *)operator new((char *)v199 - v201);
            v227 = (double *)&v226[8 * (v224 >> 3)];
            v317 = v226;
            v319 = v227;
            memmove(v226, v201, (char *)v199 - v201);
            v318 = v227;
          }
          v228 = sub_20F1CE188((double *)v226, v227);
          v229 = 0;
          while (vabdd_f64(*(double *)&v201[8 * v229], v228) <= v190 * v228)
          {
            if (v225 == ++v229)
            {
              v230 = v18[1];
              v231 = a9 - *(double *)(v230 - 8);
              if (v228 == 0.0)
                v232 = 1.0;
              else
                v232 = v228;
              v233 = fmod(a9 - *(double *)(v230 - 8), v228);
              v234 = operator new(0x150uLL);
              v235 = vcvtmd_u64_f64(v231 / v232);
              v316 = v234 + 21;
              *v234 = 0u;
              v234[1] = 0u;
              v234[2] = 0u;
              v234[3] = 0u;
              v234[4] = 0u;
              v234[5] = 0u;
              v234[6] = 0u;
              v234[7] = 0u;
              v234[8] = 0u;
              v234[9] = 0u;
              v234[10] = 0u;
              v234[11] = 0u;
              v234[12] = 0u;
              v234[13] = 0u;
              v234[14] = 0u;
              v234[15] = 0u;
              v234[16] = 0u;
              v234[17] = 0u;
              v234[18] = 0u;
              v234[19] = 0u;
              v234[20] = 0u;
              v314 = v234;
              v315 = v234 + 21;
              if (v235)
              {
                v236 = (char *)operator new(0x150uLL);
                v313 = v236 + 336;
                *(_OWORD *)v236 = 0u;
                *((_OWORD *)v236 + 1) = 0u;
                *((_OWORD *)v236 + 2) = 0u;
                *((_OWORD *)v236 + 3) = 0u;
                *((_OWORD *)v236 + 4) = 0u;
                *((_OWORD *)v236 + 5) = 0u;
                *((_OWORD *)v236 + 6) = 0u;
                *((_OWORD *)v236 + 7) = 0u;
                *((_OWORD *)v236 + 8) = 0u;
                *((_OWORD *)v236 + 9) = 0u;
                *((_OWORD *)v236 + 10) = 0u;
                *((_OWORD *)v236 + 11) = 0u;
                *((_OWORD *)v236 + 12) = 0u;
                *((_OWORD *)v236 + 13) = 0u;
                *((_OWORD *)v236 + 14) = 0u;
                *((_OWORD *)v236 + 15) = 0u;
                *((_OWORD *)v236 + 16) = 0u;
                *((_OWORD *)v236 + 17) = 0u;
                *((_OWORD *)v236 + 18) = 0u;
                *((_OWORD *)v236 + 19) = 0u;
                *((_OWORD *)v236 + 20) = 0u;
                v311 = v236;
                v312 = v236 + 336;
                v237 = operator new(0x10uLL);
                v309 = v237 + 2;
                v310 = v237 + 2;
                *v237 = v235;
                v237[1] = v235 + 1;
                v308 = v237;
                v241 = sub_20F1B56BC((unint64_t **)&v308, a11, v19, &v311, v238, v239, v240);
                if ((v241 & 1) != 0)
                {
                  sub_20F13EB20((char *)&v314, (char *)v311, v312, 0xCF3CF3CF3CF3CF3DLL * ((v312 - (_BYTE *)v311) >> 3));
                  goto LABEL_288;
                }
LABEL_287:
                v277 = v19[1];
                v278 = *(_OWORD *)(v277 - 136);
                v279 = *(_OWORD *)(v277 - 152);
                *(_OWORD *)object = *(_OWORD *)(v277 - 168);
                *(_OWORD *)&object[16] = v279;
                *(_OWORD *)&object[32] = v278;
                v280 = *(_OWORD *)(v277 - 104);
                v281 = *(_OWORD *)(v277 - 72);
                v245 = *(float64x2_t *)(v277 - 120);
                v323 = *(_OWORD *)(v277 - 88);
                v324 = v281;
                v321 = v245;
                v322 = v280;
                v243 = *(float64x2_t *)(v277 - 40);
                v244 = *(float64x2_t *)(v277 - 24);
                v282 = *(_OWORD *)(v277 - 56);
                v328 = *(_QWORD *)(v277 - 8);
                v326 = v243;
                v327 = v244;
                v325 = v282;
              }
              else
              {
                v255 = (char *)operator new(0xA8uLL);
                v312 = v255 + 168;
                v313 = v255 + 168;
                *(_OWORD *)v255 = 0u;
                *((_OWORD *)v255 + 1) = 0u;
                *((_OWORD *)v255 + 2) = 0u;
                *((_OWORD *)v255 + 3) = 0u;
                *((_OWORD *)v255 + 4) = 0u;
                *((_OWORD *)v255 + 5) = 0u;
                *((_OWORD *)v255 + 6) = 0u;
                *((_OWORD *)v255 + 7) = 0u;
                *((_OWORD *)v255 + 8) = 0u;
                *((_OWORD *)v255 + 9) = 0u;
                *((_QWORD *)v255 + 20) = 0;
                v311 = v255;
                v256 = operator new(8uLL);
                v308 = v256;
                *v256 = 1;
                v309 = v256 + 1;
                v310 = v256 + 1;
                v241 = sub_20F1B56BC((unint64_t **)&v308, a11, v19, &v311, v257, v258, v259);
                if ((v241 & 1) == 0)
                  goto LABEL_287;
                v260 = v19[1];
                v261 = *(_OWORD *)(v260 - 136);
                v262 = *(_OWORD *)(v260 - 152);
                *(_OWORD *)object = *(_OWORD *)(v260 - 168);
                *(_OWORD *)&object[16] = v262;
                *(_OWORD *)&object[32] = v261;
                v263 = *(_OWORD *)(v260 - 104);
                v264 = *(_OWORD *)(v260 - 72);
                v265 = *(float64x2_t *)(v260 - 120);
                v323 = *(_OWORD *)(v260 - 88);
                v324 = v264;
                v321 = v265;
                v322 = v263;
                v266 = *(float64x2_t *)(v260 - 40);
                v267 = *(float64x2_t *)(v260 - 24);
                v268 = *(_OWORD *)(v260 - 56);
                v328 = *(_QWORD *)(v260 - 8);
                v326 = v266;
                v327 = v267;
                v325 = v268;
                v270 = *((_OWORD *)v311 + 3);
                v269 = *((_OWORD *)v311 + 4);
                v271 = *((_OWORD *)v311 + 5);
                v335 = *((_OWORD *)v311 + 6);
                v272 = *((_QWORD *)v311 + 20);
                v273 = *((_OWORD *)v311 + 9);
                v274 = *((_OWORD *)v311 + 7);
                v337 = *((_OWORD *)v311 + 8);
                v338 = v273;
                v336 = v274;
                v276 = *((_OWORD *)v311 + 1);
                v275 = *((_OWORD *)v311 + 2);
                v329 = *(_OWORD *)v311;
                v331 = v275;
                v330 = v276;
                v332 = v270;
                v334 = v271;
                v333 = v269;
                v339 = v272;
                sub_20F1DF63C((char *)&v314, object, v340);
              }
LABEL_288:
              if (v308)
              {
                v309 = v308;
                operator delete(v308);
              }
              if (v311)
              {
                v312 = (char *)v311;
                operator delete(v311);
              }
              if ((v241 & 1) != 0)
              {
                v283 = v314;
                if (v228 < 0.0
                  && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 322, (uint64_t)"timestamp2 >= timestamp1 && timestamp1 >= 0", 43, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0)|| (v233 < 0.0 || v233 > v228)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 323, (uint64_t)"interp_timestamp >= timestamp1 && interp_timestamp <= timestamp2", 64, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
                {
                  abort();
                }
                v244.f64[0] = 1.0;
                v243.f64[0] = 1.0 - v233 / v232;
                sub_20F1B4AFC((uint64_t)v283, (uint64_t)v283 + 168, (uint64_t)object, v243, v244, v245, v242);
              }
              if (v314)
              {
                v315 = v314;
                operator delete(v314);
              }
LABEL_301:
              if (v226)
                operator delete(v226);
              rep = (void **)v201;
              v143 = (void **)v201;
              goto LABEL_304;
            }
          }
          v246 = v19[1];
          v247 = *(_OWORD *)(v246 - 136);
          v248 = *(_OWORD *)(v246 - 152);
          *(_OWORD *)object = *(_OWORD *)(v246 - 168);
          *(_OWORD *)&object[16] = v248;
          *(_OWORD *)&object[32] = v247;
          v249 = *(_OWORD *)(v246 - 104);
          v250 = *(_OWORD *)(v246 - 72);
          v251 = *(float64x2_t *)(v246 - 120);
          v323 = *(_OWORD *)(v246 - 88);
          v324 = v250;
          v321 = v251;
          v322 = v249;
          v252 = *(float64x2_t *)(v246 - 40);
          v253 = *(float64x2_t *)(v246 - 24);
          v254 = *(_OWORD *)(v246 - 56);
          v328 = *(_QWORD *)(v246 - 8);
          v326 = v252;
          v327 = v253;
          v325 = v254;
          goto LABEL_301;
        }
      }
      v205 = v19;
      v206 = ((char *)v199 - v201) >> 3;
      v207 = v206 + 1;
      if ((unint64_t)(v206 + 1) >> 61)
      {
        rep = (void **)v199;
        v301 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v200;
        v299 = (void **)v201;
        sub_20E867F44();
      }
      if (((char *)v200 - v201) >> 2 > v207)
        v207 = ((char *)v200 - v201) >> 2;
      if ((unint64_t)((char *)v200 - v201) >= 0x7FFFFFFFFFFFFFF8)
        v208 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v208 = v207;
      if (v208)
      {
        if (v208 >> 61)
        {
          v301 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v200;
          v299 = (void **)v201;
          sub_20E877A38();
        }
        v209 = v202;
        v210 = operator new(8 * v208);
        v202 = v209;
        v211 = (double *)&v210[8 * v206];
        *v211 = v204;
        v212 = (uint64_t)(v211 + 1);
        v213 = (char *)v199 - v201;
        if (v199 != (double *)v201)
        {
LABEL_256:
          v214 = v213 - 8;
          if (v214 < 0x168
            || (v217 = ((char *)(v199 - 1) - v201) & 0xFFFFFFFFFFFFFFF8,
                &v210[(char *)v199 - v201 - 8 - v217] > &v210[(char *)v199 - v201 - 8])
            || (double *)((char *)v199 - v217 - 8) > v199 - 1
            || (unint64_t)(v201 - v210) < 0x20)
          {
            v215 = v199;
            v19 = v205;
          }
          else
          {
            v218 = (v214 >> 3) + 1;
            v219 = 8 * (v218 & 0x3FFFFFFFFFFFFFFCLL);
            v215 = &v199[v219 / 0xFFFFFFFFFFFFFFF8];
            v211 = (double *)((char *)v211 - v219);
            v220 = &v210[8 * v206 - 16];
            v221 = v199 - 2;
            v222 = v218 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v223 = *(_OWORD *)v221;
              *(v220 - 1) = *((_OWORD *)v221 - 1);
              *v220 = v223;
              v220 -= 2;
              v221 -= 4;
              v222 -= 4;
            }
            while (v222);
            v19 = v205;
            if (v218 == (v218 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_259:
              v200 = (double *)&v210[8 * v208];
              if (!v201)
                goto LABEL_263;
LABEL_260:
              operator delete(v201);
              v18 = v297;
              v202 = (double *)v297[1];
              v201 = (char *)v211;
              v199 = (double *)v212;
              goto LABEL_245;
            }
          }
          do
          {
            v216 = *((_QWORD *)v215-- - 1);
            *((_QWORD *)v211-- - 1) = v216;
          }
          while (v215 != (double *)v201);
          goto LABEL_259;
        }
      }
      else
      {
        v210 = 0;
        v211 = (double *)(8 * v206);
        *(double *)(8 * v206) = v204;
        v212 = 8 * v206 + 8;
        v213 = (char *)v199 - v201;
        if (v199 != (double *)v201)
          goto LABEL_256;
      }
      v19 = v205;
      v200 = (double *)&v210[8 * v208];
      if (!v201)
      {
LABEL_263:
        v201 = (char *)v211;
        v199 = (double *)v212;
        v18 = v297;
        goto LABEL_245;
      }
      goto LABEL_260;
    case 5:
      if (!a8)
        goto LABEL_116;
      if (!a3)
        goto LABEL_116;
      sub_20F1D8150(&v311);
      if (**((int **)v311 + 7) > 4)
        goto LABEL_116;
      v24 = *((unsigned __int8 *)v311 + 72);
      v25 = sub_20E8C31DC((uint64_t)v311, "OSLogSurrogateAppender", 1, 0);
      v26 = v25;
      if (!v24 && !v25)
        goto LABEL_116;
      v295 = v24;
      v299 = &v311;
      rep = (void **)std::chrono::steady_clock::now().__d_.__rep_;
      v301 = std::chrono::system_clock::now().__d_.__rep_;
      v302 = 4;
      v303 = "unknown file";
      v304 = 2683;
      v306 = 0;
      v307 = 0;
      v305 = "unknown function";
      v293 = v311;
      if (*((char *)v311 + 39) < 0)
      {
        v28 = (const char *)*((_QWORD *)v311 + 2);
        v27 = *((_QWORD *)v311 + 3);
      }
      else
      {
        v27 = *((unsigned __int8 *)v311 + 39);
        v28 = (char *)v311 + 16;
      }
      v292 = (char *)v311 + 16;
      v46 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)object);
        if (object[24] && (object[23] & 0x80000000) != 0)
          operator delete(*(void **)object);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v47 = byte_254A4A4F8[23];
      else
        v47 = *(_QWORD *)&byte_254A4A4F8[8];
      if (byte_254A4A4F8[23] >= 0)
        v48 = byte_254A4A4F8;
      else
        v48 = *(const char **)byte_254A4A4F8;
      *(_QWORD *)object = os_log_create(v48, v28);
      v49 = &object[8];
      if (v47 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v47 >= 0x17)
      {
        v50 = v26;
        v51 = v28;
        v52 = v19;
        v53 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v47 | 7) != 0x17)
          v53 = v47 | 7;
        v54 = v53 + 1;
        v49 = operator new(v53 + 1);
        *(_QWORD *)&object[16] = v47;
        *(_QWORD *)&object[24] = v54 | 0x8000000000000000;
        *(_QWORD *)&object[8] = v49;
        v19 = v52;
        v28 = v51;
        v26 = v50;
      }
      else
      {
        object[31] = v47;
        if (!v47)
          goto LABEL_49;
      }
      memmove(v49, v48, v47);
LABEL_49:
      v49[v47] = 0;
      object[32] = 1;
      v55 = &object[40];
      if (v27 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v27 >= 0x17)
      {
        v56 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17)
          v56 = v27 | 7;
        v57 = v56 + 1;
        v55 = operator new(v56 + 1);
        *(_QWORD *)&v321.f64[0] = v27;
        *(_QWORD *)&v321.f64[1] = v57 | 0x8000000000000000;
        *(_QWORD *)&object[40] = v55;
      }
      else
      {
        HIBYTE(v321.f64[1]) = v27;
        if (!v27)
          goto LABEL_57;
      }
      memmove(v55, v28, v27);
LABEL_57:
      v55[v27] = 0;
      LOBYTE(v322) = 1;
      v58 = *(NSObject **)object;
      if (SHIBYTE(v321.f64[1]) < 0)
        operator delete(*(void **)&object[40]);
      if (object[32] && (object[31] & 0x80000000) != 0)
        operator delete(*(void **)&object[8]);
      if (*(_QWORD *)object)
        os_release(*(void **)object);
      if (v26 && *(_QWORD *)(v26 + 24))
      {
        v59 = _os_log_pack_size();
        v60 = (std::__shared_weak_count_vtbl *)operator new(v59, (std::align_val_t)8uLL);
        v61 = (std::__shared_weak_count *)operator new();
        v62 = v61;
        v61->__shared_owners_ = 0;
        v63 = (unint64_t *)&v61->__shared_owners_;
        v61->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
        v61->__shared_weak_owners_ = 0;
        v61[1].__vftable = v60;
        *(_QWORD *)object = v60;
        *(_QWORD *)&object[8] = v60;
        *(_QWORD *)&object[16] = v61;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
        memset(&object[24], 0, 24);
        do
          v65 = __ldaxr(v63);
        while (__stlxr(v65 - 1, v63));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v62);
        }
        v66 = *(_QWORD *)object;
        *(_WORD *)_os_log_pack_fill() = 0;
        v67 = (char *)operator new();
        v68 = *((unsigned __int8 *)v293 + 39);
        v69 = v292;
        if ((v68 & 0x80u) != 0)
        {
          v69 = (char *)v293[2];
          v68 = v293[3];
        }
        *(_QWORD *)v67 = v66;
        *(_OWORD *)(v67 + 8) = *(_OWORD *)&object[8];
        *(_QWORD *)&object[8] = 0;
        *(_QWORD *)&object[16] = 0;
        *(_OWORD *)(v67 + 24) = *(_OWORD *)&object[24];
        *(_QWORD *)&object[24] = 0;
        *(_QWORD *)&object[32] = 0;
        *((_QWORD *)v67 + 5) = v69;
        *((_QWORD *)v67 + 6) = v68;
        v67[56] = 16;
        v314 = 0;
        v317 = v67;
        (*(void (**)(_QWORD, void **))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), &v317);
        v70 = v317;
        v317 = 0;
        if (v70)
        {
          v71 = (std::__shared_weak_count *)*((_QWORD *)v70 + 4);
          if (v71)
          {
            v72 = (unint64_t *)&v71->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v74 = (std::__shared_weak_count *)*((_QWORD *)v70 + 2);
          if (v74)
          {
            v75 = (unint64_t *)&v74->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          MEMORY[0x212BC6398](v70, 0x10F0C40B62ED6C6);
          v77 = v314;
          v314 = 0;
          if (v77)
          {
            v78 = (std::__shared_weak_count *)*((_QWORD *)v77 + 4);
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
              }
            }
            v81 = (std::__shared_weak_count *)*((_QWORD *)v77 + 2);
            if (v81)
            {
              v82 = (unint64_t *)&v81->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            MEMORY[0x212BC6398](v77, 0x10F0C40B62ED6C6);
          }
        }
        v84 = *(std::__shared_weak_count **)&object[32];
        v85 = v295;
        if (*(_QWORD *)&object[32])
        {
          v86 = (unint64_t *)(*(_QWORD *)&object[32] + 8);
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v88 = *(std::__shared_weak_count **)&object[16];
        if (*(_QWORD *)&object[16])
        {
          v89 = (unint64_t *)(*(_QWORD *)&object[16] + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
      }
      else
      {
        os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
        *(_WORD *)object = 0;
        v91 = (void *)_os_log_send_and_compose_impl();
        v85 = v295;
        if (v91)
          free(v91);
      }
      if (v85)
      {
        sub_20E8C003C((uint64_t)&v299, "Method not imlemented. Rotation will be estimated using the history of the past poses");
        sub_20E863570((uint64_t)&v299);
      }
      sub_20E863570((uint64_t)&v299);
      v92 = v307;
      if (v307)
      {
        v93 = (unint64_t *)&v307->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
LABEL_116:
      if (!*(_BYTE *)(a13 + 16))
        sub_20E866B34();
      v95 = *(double *)(a13 + 8);
      v96 = v18[1];
      if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v19[1] - *v19) >> 3) != (v96 - *v18) >> 3)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1945, (uint64_t)"state_timestamps.size() == states.size()", 40, (uint64_t)"States size must match timestamps size", 38, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v96 = v18[1];
      }
      if (*(double *)(v96 - 8) > a9
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1946, (uint64_t)"extrap_timestamp >= state_timestamps.back()", 43, (uint64_t)"Prediction must be in future", 28, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      if (v95 <= 0.0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 1948, (uint64_t)"*est_period > 0.", 16, (uint64_t)"est period must be > 0", 22, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v97 = (_QWORD *)(a13 + 168);
      v98 = (_QWORD *)(a13 + 24);
      v99 = a9 - *(double *)(v18[1] - 8);
      if (v95 == 0.0)
        v100 = 1.0;
      else
        v100 = v95;
      v101 = vcvtmd_u64_f64(v99 / v100);
      v102 = fmod(v99, v95);
      v103 = *(_QWORD *)(*a12 + 24);
      if (v101 + 1 > v103)
      {
        v104 = (void **)operator new(0xA8uLL);
        v299 = v104;
        v301 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)(v104 + 21);
        *(_OWORD *)v104 = 0u;
        *((_OWORD *)v104 + 1) = 0u;
        *((_OWORD *)v104 + 2) = 0u;
        *((_OWORD *)v104 + 3) = 0u;
        *((_OWORD *)v104 + 4) = 0u;
        *((_OWORD *)v104 + 5) = 0u;
        *((_OWORD *)v104 + 6) = 0u;
        *((_OWORD *)v104 + 7) = 0u;
        *((_OWORD *)v104 + 8) = 0u;
        *((_OWORD *)v104 + 9) = 0u;
        v104[20] = 0;
        rep = v104 + 21;
        v105 = operator new(8uLL);
        v317 = v105;
        *v105 = v103;
        v318 = v105 + 1;
        v319 = (double *)(v105 + 1);
        sub_20F1B6CF8((uint64_t)&v317, a12, v19, v98, v97, (char **)&v299);
        v106 = *(_OWORD *)(rep - 17);
        v107 = *(_OWORD *)(rep - 19);
        *(_OWORD *)object = *(_OWORD *)(rep - 21);
        *(_OWORD *)&object[16] = v107;
        *(_OWORD *)&object[32] = v106;
        v108 = *(_OWORD *)(rep - 13);
        v109 = *(_OWORD *)(rep - 9);
        v110 = *(float64x2_t *)(rep - 15);
        v323 = *(_OWORD *)(rep - 11);
        v324 = v109;
        v321 = v110;
        v322 = v108;
        v111 = *(float64x2_t *)(rep - 5);
        v112 = *(float64x2_t *)(rep - 3);
        v113 = *(_OWORD *)(rep - 7);
        v328 = (uint64_t)*(rep - 1);
        v326 = v111;
        v327 = v112;
        v325 = v113;
        if (v317)
        {
          v318 = v317;
          operator delete(v317);
        }
        goto LABEL_146;
      }
      v114 = v102;
      v115 = (void **)operator new(0x150uLL);
      v299 = v115;
      v301 = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)(v115 + 42);
      *(_OWORD *)v115 = 0u;
      *((_OWORD *)v115 + 1) = 0u;
      *((_OWORD *)v115 + 2) = 0u;
      *((_OWORD *)v115 + 3) = 0u;
      *((_OWORD *)v115 + 4) = 0u;
      *((_OWORD *)v115 + 5) = 0u;
      *((_OWORD *)v115 + 6) = 0u;
      *((_OWORD *)v115 + 7) = 0u;
      *((_OWORD *)v115 + 8) = 0u;
      *((_OWORD *)v115 + 9) = 0u;
      *((_OWORD *)v115 + 10) = 0u;
      *((_OWORD *)v115 + 11) = 0u;
      *((_OWORD *)v115 + 12) = 0u;
      *((_OWORD *)v115 + 13) = 0u;
      *((_OWORD *)v115 + 14) = 0u;
      *((_OWORD *)v115 + 15) = 0u;
      *((_OWORD *)v115 + 16) = 0u;
      *((_OWORD *)v115 + 17) = 0u;
      *((_OWORD *)v115 + 18) = 0u;
      *((_OWORD *)v115 + 19) = 0u;
      *((_OWORD *)v115 + 20) = 0u;
      rep = v115 + 42;
      if (v101)
      {
        v116 = operator new(0x150uLL);
        *(_QWORD *)&object[16] = v116 + 21;
        *v116 = 0u;
        v116[1] = 0u;
        v116[2] = 0u;
        v116[3] = 0u;
        v116[4] = 0u;
        v116[5] = 0u;
        v116[6] = 0u;
        v116[7] = 0u;
        v116[8] = 0u;
        v116[9] = 0u;
        v116[10] = 0u;
        v116[11] = 0u;
        v116[12] = 0u;
        v116[13] = 0u;
        v116[14] = 0u;
        v116[15] = 0u;
        v116[16] = 0u;
        v116[17] = 0u;
        v116[18] = 0u;
        v116[19] = 0u;
        v116[20] = 0u;
        *(_QWORD *)object = v116;
        *(_QWORD *)&object[8] = v116 + 21;
        v117 = operator new(0x10uLL);
        v318 = v117 + 2;
        v319 = (double *)(v117 + 2);
        *v117 = v101;
        v117[1] = v101 + 1;
        v317 = v117;
        sub_20F1B6CF8((uint64_t)&v317, a12, v19, v98, v97, (char **)object);
        sub_20F13EB20((char *)&v299, *(char **)object, *(char **)&object[8], 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(_QWORD *)&object[8] - *(_QWORD *)object) >> 3));
        if (v317)
        {
          v318 = v317;
          operator delete(v317);
        }
        v122 = *(void **)object;
        if (*(_QWORD *)object)
        {
          *(_QWORD *)&object[8] = *(_QWORD *)object;
LABEL_139:
          operator delete(v122);
        }
      }
      else
      {
        v123 = operator new(0xA8uLL);
        v318 = (char *)v123 + 168;
        v319 = (double *)v123 + 21;
        *v123 = 0u;
        v123[1] = 0u;
        v123[2] = 0u;
        v123[3] = 0u;
        v123[4] = 0u;
        v123[5] = 0u;
        v123[6] = 0u;
        v123[7] = 0u;
        v123[8] = 0u;
        v123[9] = 0u;
        *((_QWORD *)v123 + 20) = 0;
        v317 = v123;
        v124 = operator new(8uLL);
        v314 = v124;
        *v124 = 1;
        v315 = v124 + 1;
        v316 = v124 + 1;
        sub_20F1B6CF8((uint64_t)&v314, a12, v19, v98, v97, (char **)&v317);
        v125 = v19[1];
        v126 = *(_OWORD *)(v125 - 136);
        v127 = *(_OWORD *)(v125 - 152);
        *(_OWORD *)object = *(_OWORD *)(v125 - 168);
        *(_OWORD *)&object[16] = v127;
        *(_OWORD *)&object[32] = v126;
        v128 = *(_OWORD *)(v125 - 104);
        v129 = *(_OWORD *)(v125 - 72);
        v130 = *(float64x2_t *)(v125 - 120);
        v323 = *(_OWORD *)(v125 - 88);
        v324 = v129;
        v321 = v130;
        v322 = v128;
        v131 = *(float64x2_t *)(v125 - 40);
        v132 = *(float64x2_t *)(v125 - 24);
        v133 = *(_OWORD *)(v125 - 56);
        v328 = *(_QWORD *)(v125 - 8);
        v326 = v131;
        v327 = v132;
        v325 = v133;
        v135 = *((_OWORD *)v317 + 3);
        v134 = *((_OWORD *)v317 + 4);
        v136 = *((_OWORD *)v317 + 5);
        v335 = *((_OWORD *)v317 + 6);
        v137 = *((_QWORD *)v317 + 20);
        v138 = *((_OWORD *)v317 + 9);
        v139 = *((_OWORD *)v317 + 7);
        v337 = *((_OWORD *)v317 + 8);
        v338 = v138;
        v336 = v139;
        v141 = *((_OWORD *)v317 + 1);
        v140 = *((_OWORD *)v317 + 2);
        v329 = *(_OWORD *)v317;
        v331 = v140;
        v330 = v141;
        v332 = v135;
        v334 = v136;
        v333 = v134;
        v339 = v137;
        sub_20F1DF63C((char *)&v299, object, v340);
        if (v314)
        {
          v315 = v314;
          operator delete(v314);
        }
        v122 = v317;
        if (v317)
        {
          v318 = v317;
          goto LABEL_139;
        }
      }
      v142 = (char *)v299;
      if (v95 < 0.0
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 322, (uint64_t)"timestamp2 >= timestamp1 && timestamp1 >= 0", 43, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0)|| (v114 < 0.0 || v114 > v95)&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/PosePredictorUtils.cpp", 323, (uint64_t)"interp_timestamp >= timestamp1 && interp_timestamp <= timestamp2", 64, (uint64_t)&unk_210295307, 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v119.f64[0] = 1.0;
      v118.f64[0] = 1.0 - v114 / v100;
      sub_20F1B4AFC((uint64_t)v142, (uint64_t)(v142 + 168), (uint64_t)object, v118, v119, v120, v121);
LABEL_146:
      v143 = v299;
      if (v299)
      {
        rep = v299;
LABEL_304:
        operator delete(v143);
      }
LABEL_305:
      v284 = v327;
      *(float64x2_t *)(a1 + 128) = v326;
      *(float64x2_t *)(a1 + 144) = v284;
      *(_QWORD *)(a1 + 160) = v328;
      v285 = v323;
      *(_OWORD *)(a1 + 64) = v322;
      *(_OWORD *)(a1 + 80) = v285;
      v286 = v325;
      *(_OWORD *)(a1 + 96) = v324;
      *(_OWORD *)(a1 + 112) = v286;
      v287 = *(_OWORD *)&object[16];
      *(_OWORD *)a1 = *(_OWORD *)object;
      *(_OWORD *)(a1 + 16) = v287;
      v288 = v321;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)&object[32];
      *(float64x2_t *)(a1 + 48) = v288;
      return;
    default:
      sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2693, (uint64_t)"", 0, (uint64_t)"Not supported", 13, (void (*)(void **))sub_21023DDB0);
      abort();
  }
}

void sub_20F1DEEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (a45)
  {
    if (a44 < 0)
      operator delete(__p);
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_20F1DEEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,_Unwind_Exception *exception_objecta,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *object,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  void *v46;
  void *v47;
  void *v49;
  _Unwind_Exception *v50;

  if (__p)
  {
    operator delete(__p);
    v49 = a30;
    if (!a30)
    {
LABEL_3:
      v50 = exception_objecta;
      if (!exception_objecta)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v49 = a30;
    if (!a30)
      goto LABEL_3;
  }
  operator delete(v49);
  v50 = exception_objecta;
  if (!exception_objecta)
  {
LABEL_4:
    if (!v47)
    {
LABEL_10:
      if (!v46)
        _Unwind_Resume(exception_object);
      operator delete(v46);
      _Unwind_Resume(exception_object);
    }
LABEL_9:
    operator delete(v47);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v50);
  if (!v47)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_20F1DF1E8(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float64x2_t v17;
  const double *v18;
  float64x2_t *v19;
  const double *v20;
  unsigned __int128 v21;
  unsigned __int128 v22;
  uint64_t v23;
  double v25;
  double v26;
  _QWORD v27[2];
  _QWORD v28[3];

  v8 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v8 != v7)
  {
    if (v7 - v8 == 120)
      goto LABEL_3;
    goto LABEL_8;
  }
  v25 = a2;
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2791, (uint64_t)"!pose_smoothing_config.smoothing_set.empty()", 44, (uint64_t)"pose_smoothing_config must not be empty!", 40, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_33;
  }
  v8 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  a2 = v25;
  if (v7 - v8 != 120)
  {
LABEL_8:
    v26 = a2;
    if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/PosePredictor/src/SmoothPosePredictor.cpp", 2795, (uint64_t)"pose_smoothing_config.smoothing_set.size() == expected_num_elems", 64, (uint64_t)"smoothing_set.size() == expected_num_elems!", 43, (void (*)(void **))sub_21023DDB0))
    {
      v8 = *(_QWORD *)(a1 + 72);
      v7 = *(_QWORD *)(a1 + 80);
      a2 = v26;
      if (v8 == v7)
        goto LABEL_22;
      goto LABEL_4;
    }
LABEL_33:
    abort();
  }
LABEL_3:
  if (v8 == v7)
    goto LABEL_22;
LABEL_4:
  v9 = v7 - v8 - 24;
  v10 = (double *)v27;
  if (v9 >= 0x240)
  {
    v12 = v9 / 0x18;
    if ((unint64_t)v27 >= v8 + 24 * v12 + 24 || v8 + 16 >= (unint64_t)&v27[v12 + 1])
    {
      v14 = v12 + 1;
      v15 = (v12 + 1) & 3;
      if (!v15)
        v15 = 4;
      v16 = v14 - v15;
      v10 = (double *)&v27[v14 - v15];
      v11 = v8 + 24 * v16;
      v17 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
      v18 = (const double *)(v8 + 64);
      v19 = (float64x2_t *)v28;
      do
      {
        v20 = v18 - 6;
        v21 = (unsigned __int128)vld3q_f64(v20);
        v22 = (unsigned __int128)vld3q_f64(v18);
        v19[-1] = vabdq_f64((float64x2_t)v21, v17);
        *v19 = vabdq_f64((float64x2_t)v22, v17);
        v18 += 12;
        v19 += 2;
        v16 -= 4;
      }
      while (v16);
    }
    else
    {
      v11 = v8;
    }
  }
  else
  {
    v11 = v8;
  }
  do
  {
    *v10++ = vabdd_f64(*(double *)(v11 + 16), a2);
    v11 += 24;
  }
  while (v11 != v7);
  a6 = *(double *)v27;
  a5 = *(double *)&v27[1];
  a4 = *(double *)v28;
  a3 = *(double *)&v28[1];
  a2 = *(double *)&v28[2];
LABEL_22:
  v23 = a5 < a6;
  if (a5 >= a6)
    a5 = a6;
  if (a4 < a5)
    v23 = 2;
  else
    a4 = a5;
  if (a3 < a4)
    v23 = 3;
  else
    a3 = a4;
  if (a2 >= a3)
    return v23;
  else
    return 4;
}

uint64_t sub_20F1DF3D4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = *(_QWORD **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v2)
  {
    v3 = sub_20F1D0908(v2);
    MEMORY[0x212BC6398](v3, 0x1080C400823FE03);
  }
  v4 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
  {
    v5 = sub_20F1D0908(v4);
    MEMORY[0x212BC6398](v5, 0x1080C400823FE03);
  }
  v6 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    v7 = sub_20F1D0908(v6);
    MEMORY[0x212BC6398](v7, 0x1080C400823FE03);
  }
  v8 = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v8)
  {
    v9 = sub_20F1D0908(v8);
    MEMORY[0x212BC6398](v9, 0x1080C400823FE03);
  }
  v10 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v10)
  {
    v11 = sub_20F1D0908(v10);
    MEMORY[0x212BC6398](v11, 0x1080C400823FE03);
  }
  v12 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v12)
  {
    v13 = sub_20F1D0908(v12);
    MEMORY[0x212BC6398](v13, 0x1080C400823FE03);
  }
  return a1;
}

_QWORD *sub_20F1DF4CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[36];
  if (v2)
    MEMORY[0x212BC6368](v2, 0x1000C8000313F17);
  v3 = a1[33];
  if (v3)
    MEMORY[0x212BC6368](v3, 0x1000C8000313F17);
  v4 = a1[30];
  if (v4)
    MEMORY[0x212BC6368](v4, 0x1000C8000313F17);
  v5 = a1[27];
  if (v5)
    MEMORY[0x212BC6368](v5, 0x1000C8000313F17);
  v6 = a1[24];
  if (v6)
    MEMORY[0x212BC6368](v6, 0x1000C8000313F17);
  v7 = a1[21];
  if (v7)
    MEMORY[0x212BC6368](v7, 0x1000C8000313F17);
  v8 = a1[18];
  if (v8)
    MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
  v9 = a1[15];
  if (v9)
    MEMORY[0x212BC6368](v9, 0x1000C8000313F17);
  v10 = a1[12];
  if (v10)
    MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  v11 = a1[9];
  if (v11)
    MEMORY[0x212BC6368](v11, 0x1000C8000313F17);
  v12 = a1[6];
  if (v12)
    MEMORY[0x212BC6368](v12, 0x1000C8000313F17);
  v13 = a1[3];
  if (v13)
    MEMORY[0x212BC6368](v13, 0x1000C8000313F17);
  return a1;
}

char *sub_20F1DF63C(char *result, char *a2, char *a3)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  void **v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v4 = a2;
  v5 = result;
  v6 = *((_QWORD *)result + 2);
  v7 = *(_OWORD **)result;
  if (0xCF3CF3CF3CF3CF3DLL * ((v6 - *(_QWORD *)result) >> 3) >= 2)
  {
    v14 = (void **)(result + 8);
    v15 = (_BYTE *)*((_QWORD *)result + 1);
    if (0xCF3CF3CF3CF3CF3DLL * ((v15 - (_BYTE *)v7) >> 3) > 1)
    {
      v36 = *(_QWORD *)result;
      if (a2 != a3)
      {
        v37 = *(_QWORD *)result;
        do
        {
          v38 = *(_OWORD *)v4;
          v39 = *((_OWORD *)v4 + 2);
          *(_OWORD *)(v37 + 16) = *((_OWORD *)v4 + 1);
          *(_OWORD *)(v37 + 32) = v39;
          *(_OWORD *)v37 = v38;
          v40 = *((_OWORD *)v4 + 3);
          v41 = *((_OWORD *)v4 + 4);
          v42 = *((_OWORD *)v4 + 6);
          *(_OWORD *)(v37 + 80) = *((_OWORD *)v4 + 5);
          *(_OWORD *)(v37 + 96) = v42;
          *(_OWORD *)(v37 + 48) = v40;
          *(_OWORD *)(v37 + 64) = v41;
          v43 = *((_OWORD *)v4 + 7);
          v44 = *((_OWORD *)v4 + 8);
          v45 = *((_OWORD *)v4 + 9);
          *(_QWORD *)(v37 + 160) = *((_QWORD *)v4 + 20);
          *(_OWORD *)(v37 + 128) = v44;
          *(_OWORD *)(v37 + 144) = v45;
          *(_OWORD *)(v37 + 112) = v43;
          v4 += 168;
          v37 += 168;
          v36 += 168;
        }
        while (v4 != a3);
      }
      v13 = v36 - (_QWORD)v7;
    }
    else
    {
      v16 = &a2[8 * ((v15 - (_BYTE *)v7) >> 3)];
      if (v15 != (_BYTE *)v7)
      {
        v17 = 8 * ((v15 - (_BYTE *)v7) >> 3);
        do
        {
          v18 = *(_OWORD *)v4;
          v19 = *((_OWORD *)v4 + 2);
          v7[1] = *((_OWORD *)v4 + 1);
          v7[2] = v19;
          *v7 = v18;
          v20 = *((_OWORD *)v4 + 3);
          v21 = *((_OWORD *)v4 + 4);
          v22 = *((_OWORD *)v4 + 6);
          v7[5] = *((_OWORD *)v4 + 5);
          v7[6] = v22;
          v7[3] = v20;
          v7[4] = v21;
          v23 = *((_OWORD *)v4 + 7);
          v24 = *((_OWORD *)v4 + 8);
          v25 = *((_OWORD *)v4 + 9);
          *((_QWORD *)v7 + 20) = *((_QWORD *)v4 + 20);
          v7[8] = v24;
          v7[9] = v25;
          v7[7] = v23;
          v4 += 168;
          v7 = (_OWORD *)((char *)v7 + 168);
          v17 -= 168;
        }
        while (v17);
        v7 = *v14;
      }
      v26 = v7;
      if (v16 != a3)
      {
        v26 = v7;
        v27 = v7;
        do
        {
          v28 = *(_OWORD *)v16;
          v29 = *((_OWORD *)v16 + 2);
          v27[1] = *((_OWORD *)v16 + 1);
          v27[2] = v29;
          *v27 = v28;
          v30 = *((_OWORD *)v16 + 3);
          v31 = *((_OWORD *)v16 + 4);
          v32 = *((_OWORD *)v16 + 6);
          v27[5] = *((_OWORD *)v16 + 5);
          v27[6] = v32;
          v27[3] = v30;
          v27[4] = v31;
          v33 = *((_OWORD *)v16 + 7);
          v34 = *((_OWORD *)v16 + 8);
          v35 = *((_OWORD *)v16 + 9);
          *((_QWORD *)v27 + 20) = *((_QWORD *)v16 + 20);
          v27[8] = v34;
          v27[9] = v35;
          v27[7] = v33;
          v16 += 168;
          v27 = (_OWORD *)((char *)v27 + 168);
          v26 = (_OWORD *)((char *)v26 + 168);
        }
        while (v16 != a3);
      }
      v13 = (char *)v26 - (char *)v7;
    }
  }
  else
  {
    if (v7)
    {
      *((_QWORD *)result + 1) = v7;
      operator delete(v7);
      v6 = 0;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    v8 = 0xCF3CF3CF3CF3CF3DLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= 2)
      v9 = 2;
    if (v8 >= 0xC30C30C30C30C3)
      v10 = 0x186186186186186;
    else
      v10 = v9;
    if (v10 > 0x186186186186186)
      sub_20E867F44();
    v11 = 168 * v10;
    result = (char *)operator new(168 * v10);
    v7 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[v11];
    v12 = result;
    if (v4 != a3)
    {
      result = (char *)memcpy(result, v4, 168 * ((a3 - v4 - 168) / 0xA8uLL) + 168);
      v12 = (char *)v7 + 168 * ((a3 - v4 - 168) / 0xA8uLL) + 168;
    }
    v13 = v12 - (char *)v7;
    v14 = (void **)(v5 + 1);
  }
  *v14 = (char *)v7 + v13;
  return result;
}

void sub_20F1DF8E4(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20E863438(v4);
  v20[0] = v4;
  sub_20F1D0BA0((_QWORD *)(v4 + 16), a2);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v13 + 128);
    MEMORY[0x212BC6398](v13, 0x10B2C40EED050F3);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_20E877AB8();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24C9FA928[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20F1DFB34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20F1DFB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F1DFB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20F1DFB88(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, const char **a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  _QWORD *__dst;
  __int128 v68;
  _BYTE v69[24];
  __int128 v70;
  uint64_t v71;
  _QWORD v72[3];

  v72[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v64 = v12;
    *((_QWORD *)&v64 + 1) = v12;
    v66 = 0uLL;
    v65 = v13;
    v14 = *a6;
    v15 = strlen(*a6);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v21 = v15 | 7;
      v22 = v21 + 1;
      p_dst = operator new(v21 + 1);
      *(_QWORD *)&v68 = v16;
      *((_QWORD *)&v68 + 1) = v22 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v15;
      p_dst = &__dst;
      if (!v15)
      {
LABEL_13:
        *((_BYTE *)p_dst + v16) = 0;
        v23 = __dst;
        v72[0] = v68;
        *(_QWORD *)((char *)v72 + 7) = *(_QWORD *)((char *)&v68 + 7);
        v24 = HIBYTE(v68);
        v25 = operator new(0x38uLL);
        v25[1] = 0;
        v25[2] = 0;
        v25[3] = off_24C9B31C8;
        *v25 = &off_24C9B3178;
        v26 = v72[0];
        v25[4] = v23;
        v25[5] = v26;
        *(_QWORD *)((char *)v25 + 47) = *(_QWORD *)((char *)v72 + 7);
        *((_BYTE *)v25 + 55) = v24;
        v72[0] = 0;
        *(_QWORD *)((char *)v72 + 7) = 0;
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        *(_QWORD *)&v66 = v25 + 3;
        *((_QWORD *)&v66 + 1) = v25;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        *(_OWORD *)v69 = v64;
        *(_QWORD *)&v69[16] = v65;
        if (v65)
        {
          v30 = &v65->__shared_owners_;
          do
            v31 = __ldxr((unint64_t *)v30);
          while (__stxr(v31 + 1, (unint64_t *)v30));
        }
        v70 = v66;
        if (*((_QWORD *)&v66 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v71 = v66;
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
          }
        }
        else
        {
          v71 = v66;
        }
        if (v65)
        {
          v35 = &v65->__shared_owners_;
          do
            v36 = __ldaxr((unint64_t *)v35);
          while (__stlxr(v36 - 1, (unint64_t *)v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v37 = *(_QWORD *)v69;
        if (*(char *)(v71 + 31) >= 0)
          v38 = v71 + 8;
        else
          v38 = *(_QWORD *)(v71 + 8);
        v39 = _os_log_pack_fill();
        v40 = *a5;
        *(_DWORD *)v39 = 134218242;
        *(_QWORD *)(v39 + 4) = v40;
        *(_WORD *)(v39 + 12) = 2080;
        *(_QWORD *)(v39 + 14) = v38;
        v41 = operator new();
        v42 = *((unsigned __int8 *)a2 + 23);
        if ((v42 & 0x80u) == 0)
          v43 = a2;
        else
          v43 = (uint64_t *)*a2;
        if ((v42 & 0x80u) != 0)
          v42 = a2[1];
        *(_QWORD *)v41 = v37;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        *(_QWORD *)&v69[16] = 0;
        *(_OWORD *)(v41 + 24) = v70;
        v70 = 0uLL;
        *(_QWORD *)(v41 + 40) = v43;
        *(_QWORD *)(v41 + 48) = v42;
        *(_BYTE *)(v41 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v64 = v41;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v64);
        v44 = v64;
        *(_QWORD *)&v64 = 0;
        if (v44)
        {
          v45 = *(std::__shared_weak_count **)(v44 + 32);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = *(std::__shared_weak_count **)(v44 + 16);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          MEMORY[0x212BC6398](v44, 0x10F0C40B62ED6C6);
          v51 = __dst;
          __dst = 0;
          if (v51)
          {
            v52 = (std::__shared_weak_count *)v51[4];
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = (std::__shared_weak_count *)v51[2];
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            MEMORY[0x212BC6398](v51, 0x10F0C40B62ED6C6);
          }
        }
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(std::__shared_weak_count **)&v69[16];
        if (*(_QWORD *)&v69[16])
        {
          v62 = (unint64_t *)(*(_QWORD *)&v69[16] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v14, v16);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v18 = *a5;
  v19 = *a6;
  *(_DWORD *)v69 = 134218242;
  *(_QWORD *)&v69[4] = v18;
  *(_WORD *)&v69[12] = 2080;
  *(_QWORD *)&v69[14] = v19;
  v20 = (void *)_os_log_send_and_compose_impl();
  if (v20)
    free(v20);
}

void sub_20F1E0128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1E014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1E0160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1E01B8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, const char **a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  _QWORD *__dst;
  __int128 v68;
  _BYTE v69[24];
  __int128 v70;
  uint64_t v71;
  _QWORD v72[3];

  v72[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v64 = v12;
    *((_QWORD *)&v64 + 1) = v12;
    v66 = 0uLL;
    v65 = v13;
    v14 = *a6;
    v15 = strlen(*a6);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v21 = v15 | 7;
      v22 = v21 + 1;
      p_dst = operator new(v21 + 1);
      *(_QWORD *)&v68 = v16;
      *((_QWORD *)&v68 + 1) = v22 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v15;
      p_dst = &__dst;
      if (!v15)
      {
LABEL_13:
        *((_BYTE *)p_dst + v16) = 0;
        v23 = __dst;
        v72[0] = v68;
        *(_QWORD *)((char *)v72 + 7) = *(_QWORD *)((char *)&v68 + 7);
        v24 = HIBYTE(v68);
        v25 = operator new(0x38uLL);
        v25[1] = 0;
        v25[2] = 0;
        v25[3] = off_24C9B31C8;
        *v25 = &off_24C9B3178;
        v26 = v72[0];
        v25[4] = v23;
        v25[5] = v26;
        *(_QWORD *)((char *)v25 + 47) = *(_QWORD *)((char *)v72 + 7);
        *((_BYTE *)v25 + 55) = v24;
        v72[0] = 0;
        *(_QWORD *)((char *)v72 + 7) = 0;
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        *(_QWORD *)&v66 = v25 + 3;
        *((_QWORD *)&v66 + 1) = v25;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        *(_OWORD *)v69 = v64;
        *(_QWORD *)&v69[16] = v65;
        if (v65)
        {
          v30 = &v65->__shared_owners_;
          do
            v31 = __ldxr((unint64_t *)v30);
          while (__stxr(v31 + 1, (unint64_t *)v30));
        }
        v70 = v66;
        if (*((_QWORD *)&v66 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v71 = v66;
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
          }
        }
        else
        {
          v71 = v66;
        }
        if (v65)
        {
          v35 = &v65->__shared_owners_;
          do
            v36 = __ldaxr((unint64_t *)v35);
          while (__stlxr(v36 - 1, (unint64_t *)v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v37 = *(_QWORD *)v69;
        if (*(char *)(v71 + 31) >= 0)
          v38 = v71 + 8;
        else
          v38 = *(_QWORD *)(v71 + 8);
        v39 = _os_log_pack_fill();
        v40 = *a5;
        *(_DWORD *)v39 = 134218242;
        *(_QWORD *)(v39 + 4) = v40;
        *(_WORD *)(v39 + 12) = 2080;
        *(_QWORD *)(v39 + 14) = v38;
        v41 = operator new();
        v42 = *((unsigned __int8 *)a2 + 23);
        if ((v42 & 0x80u) == 0)
          v43 = a2;
        else
          v43 = (uint64_t *)*a2;
        if ((v42 & 0x80u) != 0)
          v42 = a2[1];
        *(_QWORD *)v41 = v37;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        *(_QWORD *)&v69[16] = 0;
        *(_OWORD *)(v41 + 24) = v70;
        v70 = 0uLL;
        *(_QWORD *)(v41 + 40) = v43;
        *(_QWORD *)(v41 + 48) = v42;
        *(_BYTE *)(v41 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v64 = v41;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v64);
        v44 = v64;
        *(_QWORD *)&v64 = 0;
        if (v44)
        {
          v45 = *(std::__shared_weak_count **)(v44 + 32);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = *(std::__shared_weak_count **)(v44 + 16);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          MEMORY[0x212BC6398](v44, 0x10F0C40B62ED6C6);
          v51 = __dst;
          __dst = 0;
          if (v51)
          {
            v52 = (std::__shared_weak_count *)v51[4];
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = (std::__shared_weak_count *)v51[2];
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            MEMORY[0x212BC6398](v51, 0x10F0C40B62ED6C6);
          }
        }
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(std::__shared_weak_count **)&v69[16];
        if (*(_QWORD *)&v69[16])
        {
          v62 = (unint64_t *)(*(_QWORD *)&v69[16] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v14, v16);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v18 = *a5;
  v19 = *a6;
  *(_DWORD *)v69 = 134218242;
  *(_QWORD *)&v69[4] = v18;
  *(_WORD *)&v69[12] = 2080;
  *(_QWORD *)&v69[14] = v19;
  v20 = (void *)_os_log_send_and_compose_impl();
  if (v20)
    free(v20);
}

void sub_20F1E0758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1E077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1E0790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1E07E8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, uint64_t *a5, const char **a6)
{
  size_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  _QWORD *p_dst;
  uint64_t v18;
  const char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  _QWORD *__dst;
  __int128 v68;
  _BYTE v69[24];
  __int128 v70;
  uint64_t v71;
  _QWORD v72[3];

  v72[2] = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v11 = _os_log_pack_size();
    v12 = (std::__shared_weak_count_vtbl *)operator new(v11, (std::align_val_t)8uLL);
    v13 = (std::__shared_weak_count *)operator new();
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13[1].__vftable = v12;
    *(_QWORD *)&v64 = v12;
    *((_QWORD *)&v64 + 1) = v12;
    v66 = 0uLL;
    v65 = v13;
    v14 = *a6;
    v15 = strlen(*a6);
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      sub_20E860B7C();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v21 = v15 | 7;
      v22 = v21 + 1;
      p_dst = operator new(v21 + 1);
      *(_QWORD *)&v68 = v16;
      *((_QWORD *)&v68 + 1) = v22 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v68) = v15;
      p_dst = &__dst;
      if (!v15)
      {
LABEL_13:
        *((_BYTE *)p_dst + v16) = 0;
        v23 = __dst;
        v72[0] = v68;
        *(_QWORD *)((char *)v72 + 7) = *(_QWORD *)((char *)&v68 + 7);
        v24 = HIBYTE(v68);
        v25 = operator new(0x38uLL);
        v25[1] = 0;
        v25[2] = 0;
        v25[3] = off_24C9B31C8;
        *v25 = &off_24C9B3178;
        v26 = v72[0];
        v25[4] = v23;
        v25[5] = v26;
        *(_QWORD *)((char *)v25 + 47) = *(_QWORD *)((char *)v72 + 7);
        *((_BYTE *)v25 + 55) = v24;
        v72[0] = 0;
        *(_QWORD *)((char *)v72 + 7) = 0;
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
        *(_QWORD *)&v66 = v25 + 3;
        *((_QWORD *)&v66 + 1) = v25;
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(p_shared_owners);
          while (__stlxr(v29 - 1, p_shared_owners));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        *(_OWORD *)v69 = v64;
        *(_QWORD *)&v69[16] = v65;
        if (v65)
        {
          v30 = &v65->__shared_owners_;
          do
            v31 = __ldxr((unint64_t *)v30);
          while (__stxr(v31 + 1, (unint64_t *)v30));
        }
        v70 = v66;
        if (*((_QWORD *)&v66 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          v71 = v66;
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v66 + 1) + 16))(*((_QWORD *)&v66 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v66 + 1));
          }
        }
        else
        {
          v71 = v66;
        }
        if (v65)
        {
          v35 = &v65->__shared_owners_;
          do
            v36 = __ldaxr((unint64_t *)v35);
          while (__stlxr(v36 - 1, (unint64_t *)v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v37 = *(_QWORD *)v69;
        if (*(char *)(v71 + 31) >= 0)
          v38 = v71 + 8;
        else
          v38 = *(_QWORD *)(v71 + 8);
        v39 = _os_log_pack_fill();
        v40 = *a5;
        *(_DWORD *)v39 = 134218242;
        *(_QWORD *)(v39 + 4) = v40;
        *(_WORD *)(v39 + 12) = 2080;
        *(_QWORD *)(v39 + 14) = v38;
        v41 = operator new();
        v42 = *((unsigned __int8 *)a2 + 23);
        if ((v42 & 0x80u) == 0)
          v43 = a2;
        else
          v43 = (uint64_t *)*a2;
        if ((v42 & 0x80u) != 0)
          v42 = a2[1];
        *(_QWORD *)v41 = v37;
        *(_OWORD *)(v41 + 8) = *(_OWORD *)&v69[8];
        *(_QWORD *)&v69[8] = 0;
        *(_QWORD *)&v69[16] = 0;
        *(_OWORD *)(v41 + 24) = v70;
        v70 = 0uLL;
        *(_QWORD *)(v41 + 40) = v43;
        *(_QWORD *)(v41 + 48) = v42;
        *(_BYTE *)(v41 + 56) = type;
        __dst = 0;
        *(_QWORD *)&v64 = v41;
        (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v64);
        v44 = v64;
        *(_QWORD *)&v64 = 0;
        if (v44)
        {
          v45 = *(std::__shared_weak_count **)(v44 + 32);
          if (v45)
          {
            v46 = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = *(std::__shared_weak_count **)(v44 + 16);
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          MEMORY[0x212BC6398](v44, 0x10F0C40B62ED6C6);
          v51 = __dst;
          __dst = 0;
          if (v51)
          {
            v52 = (std::__shared_weak_count *)v51[4];
            if (v52)
            {
              v53 = (unint64_t *)&v52->__shared_owners_;
              do
                v54 = __ldaxr(v53);
              while (__stlxr(v54 - 1, v53));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
                std::__shared_weak_count::__release_weak(v52);
              }
            }
            v55 = (std::__shared_weak_count *)v51[2];
            if (v55)
            {
              v56 = (unint64_t *)&v55->__shared_owners_;
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            MEMORY[0x212BC6398](v51, 0x10F0C40B62ED6C6);
          }
        }
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
        if (*((_QWORD *)&v70 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v61 = *(std::__shared_weak_count **)&v69[16];
        if (*(_QWORD *)&v69[16])
        {
          v62 = (unint64_t *)(*(_QWORD *)&v69[16] + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        return;
      }
    }
    memcpy(p_dst, v14, v16);
    goto LABEL_13;
  }
  os_log_type_enabled(oslog, type);
  v18 = *a5;
  v19 = *a6;
  *(_DWORD *)v69 = 134218242;
  *(_QWORD *)&v69[4] = v18;
  *(_WORD *)&v69[12] = 2080;
  *(_QWORD *)&v69[14] = v19;
  v20 = (void *)_os_log_send_and_compose_impl();
  if (v20)
    free(v20);
}

void sub_20F1E0D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20F1E0DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1E0DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  int v12;

  if (v12 < 0)
  {
    operator delete(v11);
    sub_20E86E658((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  sub_20E86E658((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20F1E0E18(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F1E11A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1E11CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1E11E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20F1E1204(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20F1E1594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1E15B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1E15CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1E15F0(uint64_t result, uint64_t a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  char v9;
  char *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  _BOOL8 v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  double v39;
  uint64_t *v40;
  uint64_t *v41;
  BOOL v42;
  uint64_t *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double v53;
  unint64_t v54;
  double v55;
  unint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  double v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  double v73;
  double v74;
  BOOL v75;
  uint64_t *v76;
  uint64_t *v77;
  unint64_t v78;
  double v79;
  double v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  double v86;
  uint64_t *v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  double v93;
  unint64_t v94;
  double v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  double v99;
  _BOOL4 v100;
  char v101;
  uint64_t v102;
  char v103;
  BOOL v104;
  uint64_t *v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  double v122;
  double v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  BOOL v135;
  BOOL v136;
  BOOL v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  char *v141;
  _DWORD *v142;
  uint64_t *v143;
  char v144;
  int v145;
  __int16 v146;
  char v147;
  uint64_t v148;
  uint64_t *v149[3];
  __int128 v150;
  uint64_t *v151;
  __int128 v152;
  uint64_t v153;
  uint64_t *v154;
  BOOL v155;
  _BYTE v156[7];
  char *v157;
  __int128 v158;
  uint64_t *v159;

  v5 = (uint64_t **)result;
  v6 = (uint64_t **)(a3 + 1);
  v142 = (_DWORD *)(result + 9);
  while (2)
  {
    while (2)
    {
      v7 = *((unsigned __int8 *)a3 + 8);
      if (*(_BYTE *)(a2 + 8))
      {
        if (*((_BYTE *)a3 + 8))
          return result;
        v8 = *v6;
LABEL_5:
        v9 = *((_BYTE *)v5 + 8);
        v10 = (char *)v5[2];
        if (!v8 && !*((_BYTE *)v5 + 8) && !v10)
          return result;
        v11 = 1;
        if (!v8 && *((_BYTE *)v5 + 8))
        {
          v12 = *(_QWORD *)(*(_QWORD *)a3 + 40);
          v11 = 1;
          v13 = -v12;
          if ((unint64_t)-v12 < 2)
            return result;
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      if (!*((_BYTE *)a3 + 8))
      {
        v8 = *v6;
        if (*(uint64_t **)(a2 + 16) == *v6)
          return result;
        goto LABEL_5;
      }
      if (*((_BYTE *)v5 + 8))
        return result;
      v10 = (char *)v5[2];
      if (!v10)
      {
        v9 = 0;
        v11 = 0;
        v12 = -*(_QWORD *)(*(_QWORD *)a3 + 40);
        v13 = *(_QWORD *)(*(_QWORD *)a3 + 40);
        if (v13 < 2)
          return result;
        goto LABEL_21;
      }
      v9 = 0;
      v11 = 0;
      v8 = *v6;
LABEL_20:
      v12 = v10 - (char *)v8;
      v13 = -v12;
      if ((unint64_t)-v12 < 2)
        return result;
LABEL_21:
      if (v13 == 3)
      {
        v105 = *v5;
        *(_DWORD *)v156 = *v142;
        *(_DWORD *)&v156[3] = *(_DWORD *)((char *)v142 + 3);
        v158 = *(_OWORD *)v5;
        v159 = v5[2];
        v106 = (uint64_t *)((char *)v159 + 1) == (uint64_t *)v105[5];
        v154 = v105;
        v155 = v106;
        v157 = (char *)v159 + 1;
        if ((v11 & 1) != 0)
        {
          v107 = *v6;
        }
        else
        {
          v107 = *(uint64_t **)(*(_QWORD *)a3 + 40);
          *((_BYTE *)a3 + 8) = 0;
        }
        v114 = (uint64_t)v107 - 1;
        *((_QWORD *)a3 + 2) = v114;
        v152 = *a3;
        v153 = v114;
        return sub_20F1E21DC((uint64_t **)&v158, &v154, (uint64_t **)&v152);
      }
      if (v13 == 2)
      {
        if ((v11 & 1) != 0)
        {
          v108 = *((_QWORD *)a3 + 2);
          v109 = *(_QWORD **)a3;
        }
        else
        {
          v109 = *(_QWORD **)a3;
          v108 = *(_QWORD *)(*(_QWORD *)a3 + 40);
          *((_BYTE *)a3 + 8) = 0;
        }
        v115 = (uint64_t *)(v108 - 1);
        *v6 = v115;
        v116 = (unint64_t)v115 + v109[3];
        v118 = v109;
        v117 = *v109;
        v119 = v116 % ((v118[1] - v117) >> 3);
        v120 = **v5;
        v121 = ((unint64_t)v5[2] + (*v5)[3]) % (((*v5)[1] - v120) >> 3);
        v122 = *(double *)(v117 + 8 * v119);
        v123 = *(double *)(v120 + 8 * v121);
        if (v122 < v123)
        {
          *(double *)(v120 + 8 * v121) = v122;
          *(double *)(v117 + 8 * v119) = v123;
        }
        return result;
      }
      if (v12 >= -7)
      {
        v110 = *v5;
        v111 = v5[2];
        v112 = *v6;
        if (*((_BYTE *)a3 + 8))
          v113 = *(uint64_t **)(*(_QWORD *)a3 + 40);
        else
          v113 = *v6;
        v124 = (uint64_t *)((char *)v113 - 1);
        while (1)
        {
          if (v9)
          {
            v130 = (uint64_t *)v110[5];
            if (v7)
              goto LABEL_198;
          }
          else
          {
            if (v111 == v124)
              return result;
            v130 = (uint64_t *)v110[5];
            if (!v7 && v111 == v112)
              goto LABEL_198;
            if (v7)
            {
              result = (uint64_t)v111 + 1;
              if ((uint64_t *)((char *)v111 + 1) == v130)
                goto LABEL_198;
              v132 = (uint64_t)v111;
              v133 = (uint64_t)v111;
              do
              {
                v131 = (v110[1] - *v110) >> 3;
                if (*(double *)(*v110 + 8 * ((v110[3] + result) % v131)) < *(double *)(*v110
                                                                                      + 8 * ((v132 + v110[3]) % v131)))
                {
                  v133 = result;
                  v132 = result;
                }
                ++result;
              }
              while (v130 != (uint64_t *)result);
              goto LABEL_224;
            }
          }
          v134 = (char *)v111 + 1;
          v135 = (uint64_t *)((char *)v111 + 1) == v130;
          v136 = (uint64_t *)((char *)v111 + 1) != v130 && v134 == (char *)v112;
          v137 = v9;
          v133 = (uint64_t)v111;
          if (!v136)
          {
            result = *v110;
            v139 = 2 - (_QWORD)v130;
            v140 = v111;
            v133 = (uint64_t)v111;
            v137 = v9;
            do
            {
              v141 = v134;
              v138 = (v110[1] - *v110) >> 3;
              if (*(double *)(result + 8 * ((unint64_t)&v134[v110[3]] % v138)) < *(double *)(result + 8 * (((unint64_t)v140 + v110[3]) % v138)))
              {
                v137 = v135;
                v133 = (uint64_t)v134;
                v140 = (uint64_t *)v134;
              }
              ++v134;
              v135 = &v141[v139] == (char *)1;
            }
            while (&v141[v139] == (char *)1 || &v141[2 - (_QWORD)v112] != (char *)1);
          }
          if (v137)
          {
            if (!v9)
              goto LABEL_197;
            goto LABEL_198;
          }
LABEL_224:
          if (v9 || (uint64_t *)v133 != v111)
          {
LABEL_197:
            v125 = v110[3];
            v126 = *v110;
            v127 = (v110[1] - *v110) >> 3;
            result = 8 * (((unint64_t)v111 + v125) % v127);
            v128 = 8 * ((v125 + v133) % v127);
            v129 = *(_QWORD *)(*v110 + result);
            *(_QWORD *)(v126 + result) = *(_QWORD *)(*v110 + v128);
            *(_QWORD *)(v126 + v128) = v129;
          }
LABEL_198:
          v111 = (uint64_t *)((char *)v111 + 1);
          v9 = v111 == v130;
        }
      }
      v15 = v5[2];
      v16 = (unint64_t)v5[1] & 0xFFFFFFFFFFFFFF00;
      v17 = (uint64_t *)((char *)v15 + (v13 >> 1));
      v18 = v17 == (uint64_t *)(*v5)[5];
      v19 = *(uint64_t **)a3;
      v20 = *((unsigned __int8 *)a3 + 15);
      v21 = *(unsigned __int16 *)((char *)a3 + 13);
      v22 = *(unsigned int *)((char *)a3 + 9);
      v23 = *((_QWORD *)a3 + 2);
      v150 = *(_OWORD *)v5;
      v14 = (uint64_t *)v150;
      v151 = v15;
      v149[0] = (uint64_t *)v150;
      v149[1] = (uint64_t *)(v16 | v18);
      v149[2] = v17;
      if (v7)
        v23 = v19[5];
      v143 = v19;
      v144 = 0;
      v24 = (uint64_t *)(v23 - 1);
      v145 = v22;
      v147 = (v22 | ((unint64_t)(v21 | (v20 << 16)) << 32)) >> 48;
      v146 = (v22 | ((unint64_t)(v21 | (v20 << 16)) << 32)) >> 32;
      v148 = v23 - 1;
      result = sub_20F1E21DC((uint64_t **)&v150, v149, &v143);
      v25 = *v5;
      v26 = *(unsigned int *)((char *)v5 + 9) | ((unint64_t)(*(unsigned __int16 *)((char *)v5 + 13) | (*((unsigned __int8 *)v5 + 15) << 16)) << 32);
      v27 = v5[2];
      v28 = (*v5)[3];
      v29 = **v5;
      v30 = ((*v5)[1] - v29) >> 3;
      v31 = ((unint64_t)v27 + v28) % v30;
      v32 = v14[3];
      v33 = *v14;
      v34 = v14[1];
      v35 = *(double *)(v29 + 8 * v31);
      v36 = *(double *)(*v14 + 8 * (((unint64_t)v17 + v32) % ((v34 - *v14) >> 3)));
      if (v35 < v36)
        goto LABEL_36;
      if (*((_BYTE *)v5 + 8))
      {
        v37 = *v19;
        do
        {
          v24 = (uint64_t *)((char *)v24 - 1);
          v38 = ((unint64_t)v24 + v19[3]) % ((v19[1] - *v19) >> 3);
          v39 = *(double *)(v37 + 8 * v38);
        }
        while (v39 >= v36);
LABEL_35:
        *(double *)(v29 + 8 * v31) = v39;
        *(double *)(v37 + 8 * v38) = v35;
        result = (result + 1);
LABEL_36:
        v41 = (uint64_t *)v25[5];
        v42 = (uint64_t *)((char *)v27 + 1) == v41;
        v43 = (uint64_t *)((char *)v27 + 1);
        if (v27 == (uint64_t *)-1 && !v24 && v43 != v41)
        {
LABEL_39:
          v43 = 0;
          goto LABEL_49;
        }
        if (v24 || v43 != v41)
        {
          if ((char *)v43 - (char *)v24 < 0)
          {
LABEL_55:
            v49 = v19[3];
            v51 = *v19;
            v50 = v19[1];
            v52 = (v50 - *v19) >> 3;
            while (1)
            {
              v53 = *(double *)(v33 + 8 * (((unint64_t)v17 + v32) % ((v34 - v33) >> 3)));
              v54 = ((unint64_t)v43 + v28) % v30;
              v55 = *(double *)(v29 + 8 * v54);
              if (v55 < v53)
              {
                do
                {
                  v56 = (unint64_t)v43 + v28 + 1;
                  v43 = (uint64_t *)((char *)v43 + 1);
                  v54 = v56 % v30;
                  v55 = *(double *)(v29 + 8 * (v56 % v30));
                }
                while (v55 < v53);
                v42 = v41 == v43;
              }
              do
              {
                v24 = (uint64_t *)((char *)v24 - 1);
                v57 = ((unint64_t)v24 + v49) % v52;
                v58 = *(double *)(v51 + 8 * v57);
              }
              while (v58 >= v53);
              if (!v43 && !v24 && !v42)
                goto LABEL_39;
              if (v24 || !v42)
              {
                if ((((char *)v43 - (char *)v24) & 0x8000000000000000) == 0)
                  break;
              }
              else if ((v19[5] & 0x8000000000000000) == 0)
              {
                break;
              }
              *(double *)(v29 + 8 * v54) = v58;
              *(double *)(v51 + 8 * v57) = v55;
              if (v18)
              {
                if (v42)
                  goto LABEL_56;
                LOBYTE(v18) = 1;
              }
              else
              {
                LOBYTE(v18) = 0;
                if (v17 == v43 && !v42)
                {
LABEL_56:
                  LOBYTE(v18) = 0;
                  v33 = v51;
                  v34 = v50;
                  v32 = v49;
                  v14 = v19;
                  v17 = v24;
                }
              }
              result = (result + 1);
              v43 = (uint64_t *)((char *)v43 + 1);
              v42 = v43 == v41;
            }
          }
        }
        else if (v19[5] < 0)
        {
          goto LABEL_55;
        }
        if (v42)
        {
          if (v18)
          {
            if (*(_BYTE *)(a2 + 8))
              return result;
            v44 = 1;
            goto LABEL_98;
          }
          v45 = 0;
          v44 = 1;
LABEL_84:
          v71 = ((unint64_t)v17 + v14[3]) % ((v14[1] - v33) >> 3);
          v72 = ((unint64_t)v43 + v28) % v30;
          v73 = *(double *)(v33 + 8 * v71);
          v74 = *(double *)(v29 + 8 * v72);
          if (v73 < v74)
          {
            *(double *)(v29 + 8 * v72) = v73;
            *(double *)(v33 + 8 * v71) = v74;
            result = (result + 1);
          }
          if (*(_BYTE *)(a2 + 8))
          {
            if ((v45 & 1) == 0)
              return result;
            if (!(_DWORD)result)
            {
LABEL_53:
              v46 = 0;
              v47 = 1;
              if (v43)
              {
                v48 = *(uint64_t **)(a2 + 16);
                result = 1;
                v44 = 0;
                goto LABEL_105;
              }
              result = 1;
              v44 = 0;
              if (((unint64_t)v41 & 0x8000000000000000) == 0)
                goto LABEL_108;
              goto LABEL_125;
            }
LABEL_89:
            LOBYTE(v44) = 0;
            v75 = v43 == 0;
            v48 = *(uint64_t **)(a2 + 16);
            v47 = 1;
            goto LABEL_90;
          }
          if (v45)
          {
LABEL_94:
            v48 = *(uint64_t **)(a2 + 16);
            if (v48 == v43)
              return result;
            v47 = 0;
            v46 = 1;
            if ((_DWORD)result)
            {
LABEL_136:
              v75 = v43 == 0;
              if (v46 && !v43 && !v48)
              {
                v43 = 0;
                goto LABEL_143;
              }
LABEL_90:
              if (v47)
              {
                v76 = v41;
                if (v75)
                {
LABEL_101:
                  if (((unint64_t)v76 & 0x8000000000000000) == 0)
                  {
LABEL_143:
                    *v5 = v25;
                    *((_BYTE *)v5 + 8) = (uint64_t *)((char *)v43 + 1) == v41;
                    *(_DWORD *)((char *)v5 + 9) = v26;
                    *((_BYTE *)v5 + 15) = BYTE6(v26);
                    *(_WORD *)((char *)v5 + 13) = WORD2(v26);
                    v5[2] = (uint64_t *)((char *)v43 + 1);
                    continue;
                  }
LABEL_102:
                  *(_QWORD *)a3 = v25;
                  *((_BYTE *)a3 + 8) = v44;
                  *(_DWORD *)((char *)a3 + 9) = v26;
                  *((_BYTE *)a3 + 15) = BYTE6(v26);
                  *(_WORD *)((char *)a3 + 13) = WORD2(v26);
                  *((_QWORD *)a3 + 2) = v43;
                  continue;
                }
              }
LABEL_100:
              v76 = (uint64_t *)((char *)v48 - (char *)v43);
              goto LABEL_101;
            }
            result = 1;
            if (!((unint64_t)v48 | (unint64_t)v43))
              goto LABEL_108;
            goto LABEL_105;
          }
LABEL_98:
          v48 = *(uint64_t **)(a2 + 16);
          if ((_DWORD)result)
          {
            if (v48)
              goto LABEL_100;
            goto LABEL_142;
          }
          v47 = 0;
          result = 0;
          if (v48)
          {
            v46 = 1;
LABEL_105:
            if ((char *)v48 - (char *)v43 < 0)
              goto LABEL_125;
            goto LABEL_108;
          }
          v46 = 1;
          if ((-(uint64_t)v41 & 0x8000000000000000) == 0)
          {
LABEL_108:
            v77 = v43;
            do
            {
              v81 = (uint64_t *)((char *)v77 + 1);
              if ((uint64_t *)((char *)v41 - 1) == v77)
              {
                if (*((_BYTE *)a3 + 8))
                  return result;
              }
              else if (!*((_BYTE *)a3 + 8) && v81 == *v6)
              {
                return result;
              }
              v78 = (unint64_t)v77 + v28;
              v79 = *(double *)(v29 + 8 * ((v78 + 1) % v30));
              v80 = *(double *)(v29 + 8 * (v78 % v30));
              v77 = v81;
            }
            while (v79 >= v80);
LABEL_134:
            if ((_DWORD)result)
            {
              v48 = *(uint64_t **)(a2 + 16);
              goto LABEL_136;
            }
            if (!v46)
              goto LABEL_143;
            v48 = *(uint64_t **)(a2 + 16);
            if (v48)
              goto LABEL_100;
LABEL_142:
            if ((-(uint64_t)v41 & 0x8000000000000000) == 0)
              goto LABEL_143;
            goto LABEL_102;
          }
LABEL_125:
          v87 = *v5;
          v88 = (uint64_t)v5[2] + 1;
          while (1)
          {
            if ((*v5)[5] == v88)
            {
              if (v44)
                return result;
            }
            else
            {
              if (v43 == (uint64_t *)v88)
                v89 = result;
              else
                v89 = 0;
              if ((v89 & 1) != 0)
                return result;
            }
            v90 = v88 + v87[3];
            v91 = (v87[1] - *v87) >> 3;
            ++v88;
            if (*(double *)(*v87 + 8 * (v90 % v91)) < *(double *)(*v87 + 8 * ((v90 - 1) % v91)))
              goto LABEL_134;
          }
        }
LABEL_49:
        v44 = 0;
        v45 = 1;
        if (!v18 && v43 == v17)
        {
          if (*(_BYTE *)(a2 + 8))
          {
            v43 = v17;
            if (!(_DWORD)result)
              goto LABEL_53;
            goto LABEL_89;
          }
          v44 = 0;
          v43 = v17;
          goto LABEL_94;
        }
        goto LABEL_84;
      }
      break;
    }
    v40 = (uint64_t *)(v23 - 2);
    while (v27 != v40)
    {
      v37 = *v19;
      v38 = ((unint64_t)v40 + v19[3]) % ((v19[1] - *v19) >> 3);
      v39 = *(double *)(*v19 + 8 * v38);
      v40 = (uint64_t *)((char *)v40 - 1);
      if (v39 < v36)
      {
        v24 = (uint64_t *)((char *)v40 + 1);
        goto LABEL_35;
      }
    }
    v59 = (uint64_t *)((char *)v27 + 1);
    v60 = v25[5];
    v61 = *(uint64_t **)a3;
    v62 = (_QWORD *)(*(_QWORD *)a3 + 40);
    if (*((_BYTE *)a3 + 8))
      v63 = (uint64_t *)(*(_QWORD *)a3 + 40);
    else
      v63 = (uint64_t *)v6;
    v64 = *v63;
    v65 = *v63 - 1;
    v66 = v61[3];
    result = *v61;
    v67 = (*(_QWORD *)(*(_QWORD *)a3 + 8) - result) >> 3;
    v68 = (v66 + v65) % v67;
    v69 = *(double *)(result + 8 * v68);
    if (v35 >= v69)
    {
      if (v59 != (uint64_t *)v60 && v59 == (uint64_t *)v65)
        return result;
      v82 = (uint64_t *)(v60 - 2);
      v83 = (uint64_t *)(v64 - 3);
      while (1)
      {
        v84 = v27;
        v85 = ((unint64_t)v27 + v28 + 1) % v30;
        v86 = *(double *)(v29 + 8 * v85);
        if (v35 < v86)
          break;
        v27 = (uint64_t *)((char *)v84 + 1);
        if (v82 != v84 && v83 == v84)
          return result;
      }
      *(double *)(v29 + 8 * v85) = v69;
      *(double *)(result + 8 * v68) = v86;
      if (v82 == v84)
      {
        v70 = 1;
        v59 = (uint64_t *)v60;
        goto LABEL_149;
      }
      v59 = (uint64_t *)((char *)v84 + 2);
LABEL_147:
      if (v59 == (uint64_t *)v65)
        return result;
      v70 = 0;
      goto LABEL_149;
    }
    if (v59 != (uint64_t *)v60)
      goto LABEL_147;
    v70 = 1;
LABEL_149:
    v92 = v66 - 1;
    while (1)
    {
      v93 = *(double *)(v29 + 8 * v31);
      v94 = ((unint64_t)v59 + v28) % v30;
      v95 = *(double *)(v29 + 8 * v94);
      if (v93 >= v95)
      {
        do
        {
          v96 = (unint64_t)v59 + v28 + 1;
          v59 = (uint64_t *)((char *)v59 + 1);
          v94 = v96 % v30;
          v95 = *(double *)(v29 + 8 * (v96 % v30));
        }
        while (v93 >= v95);
        v70 = v60 == (_QWORD)v59;
      }
      do
      {
        v97 = v92 + v65--;
        v98 = v97 % v67;
        v99 = *(double *)(result + 8 * (v97 % v67));
      }
      while (v93 < v99);
      v100 = v59 == 0;
      if (!v59 && !v65 && !v70)
      {
        v100 = 1;
        goto LABEL_167;
      }
      if (v65 || !v70)
        break;
      if ((*v62 & 0x8000000000000000) == 0)
        goto LABEL_164;
LABEL_162:
      *(double *)(v29 + 8 * v94) = v99;
      *(double *)(result + 8 * v98) = v95;
      v59 = (uint64_t *)((char *)v59 + 1);
      v70 = v59 == (uint64_t *)v60;
    }
    if ((((unint64_t)v59 - v65) & 0x8000000000000000) != 0)
      goto LABEL_162;
LABEL_164:
    if (v70)
    {
      if (*(_BYTE *)(a2 + 8))
      {
        v101 = 1;
        goto LABEL_180;
      }
      v102 = *(_QWORD *)(a2 + 16);
      if (v102)
      {
        v103 = 1;
        goto LABEL_178;
      }
      v101 = 1;
      if (-v60 < 0)
        return result;
      goto LABEL_180;
    }
LABEL_167:
    v102 = *(_QWORD *)(a2 + 16);
    if (v100 && !*(_BYTE *)(a2 + 8) && !v102)
    {
      v59 = 0;
      v101 = 0;
      goto LABEL_180;
    }
    v103 = 0;
    v101 = 0;
    if (*(_BYTE *)(a2 + 8))
      v104 = v100;
    else
      v104 = 0;
    if (!v104)
    {
LABEL_178:
      v60 = v102 - (_QWORD)v59;
      v101 = v103;
    }
    if ((v60 & 0x8000000000000000) == 0)
    {
LABEL_180:
      *v5 = v25;
      *((_BYTE *)v5 + 8) = v101;
      *(_DWORD *)((char *)v5 + 9) = v26;
      *((_BYTE *)v5 + 15) = BYTE6(v26);
      *(_WORD *)((char *)v5 + 13) = WORD2(v26);
      v5[2] = v59;
      continue;
    }
    return result;
  }
}

uint64_t sub_20F1E21DC(uint64_t **a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;

  v3 = **a2;
  v4 = ((unint64_t)a2[2] + (*a2)[3]) % (((*a2)[1] - v3) >> 3);
  v5 = **a1;
  v6 = ((unint64_t)a1[2] + (*a1)[3]) % (((*a1)[1] - v5) >> 3);
  v7 = *(double *)(v3 + 8 * v4);
  v8 = *(double *)(v5 + 8 * v6);
  v9 = **a3;
  v10 = ((unint64_t)a3[2] + (*a3)[3]) % (((*a3)[1] - v9) >> 3);
  v11 = *(double *)(v9 + 8 * v10);
  if (v7 < v8)
  {
    if (v11 < v7)
    {
      *(double *)(v5 + 8 * v6) = v11;
      *(double *)(v9 + 8 * v10) = v8;
      return 1;
    }
    *(double *)(v5 + 8 * v6) = v7;
    *(double *)(v3 + 8 * v4) = v8;
    if (*(double *)(v9 + 8 * v10) < v8)
    {
      v14 = *a2;
      v15 = a2[2];
      v16 = *a3;
      v17 = a3[2];
      goto LABEL_9;
    }
    return 1;
  }
  if (v11 < v7)
  {
    v13 = 8 * v4;
    *(double *)(v3 + v13) = v11;
    *(double *)(v9 + 8 * v10) = v7;
    if (*(double *)(v3 + v13) < *(double *)(v5 + 8 * v6))
    {
      v14 = *a1;
      v15 = a1[2];
      v16 = *a2;
      v17 = a2[2];
LABEL_9:
      v18 = (unint64_t)v15 + v14[3];
      v20 = v14;
      v19 = *v14;
      v21 = 8 * (v18 % ((v20[1] - v19) >> 3));
      v22 = (unint64_t)v17 + v16[3];
      v24 = v16;
      v23 = *v16;
      v25 = 8 * (v22 % ((v24[1] - v23) >> 3));
      v26 = *(_QWORD *)(v19 + v21);
      *(_QWORD *)(v19 + v21) = *(_QWORD *)(v23 + v25);
      *(_QWORD *)(v23 + v25) = v26;
      return 2;
    }
    return 1;
  }
  return 0;
}

void sub_20F1E2338(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *p_p;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  void *v38;
  __int128 v39;
  void *v40[2];
  uint64_t v41;
  void *v42[2];
  char v43;
  void *v44[4];
  void *v45[2];
  uint64_t v46;
  void *v47[2];
  char v48;
  void *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  void *v53[2];
  char v54;
  void *v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void *v59[2];
  char v60;
  void *__p;
  __int128 v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  void *v67[4];
  __int128 v68;
  uint64_t v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  void *v74[2];
  char v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  __int128 v87;
  __int128 __dst;
  uint64_t v89;
  uint64_t v90[3];

  __p = operator new(0x30uLL);
  v62 = xmmword_2102DC8D0;
  strcpy((char *)__p, "VisualSLAMExtrapolationConfig parameters");
  sub_20E8B30B4(a3, (__int128 *)&__p, 180, 160);
  if (SHIBYTE(v62) < 0)
    operator delete(__p);
  v37 = a3;
  v90[0] = nullsub_1(a3);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v89 = *((_QWORD *)a2 + 2);
  }
  v86 = (char *)operator new(0x19uLL);
  v87 = xmmword_2102DAFD0;
  strcpy(v86, "visual_slam_extrap_type");
  sub_2101050B4((const void **)&__dst, (uint64_t)&v86, (uint64_t)&__p);
  v6 = SHIBYTE(v62);
  v7 = (char *)__p;
  v8 = operator new();
  *(_QWORD *)(v8 + 109) = 0;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_QWORD *)v8 = &off_24C9FA980;
  *(_QWORD *)(v8 + 8) = &unk_24C9FA9F8;
  *(_QWORD *)(v8 + 152) = &unk_24C9FAA20;
  *(_QWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 120) = (char *)off_24C9FAB98 + 1;
  *(_QWORD *)(v8 + 128) = a1;
  v9 = operator new();
  *(_QWORD *)v9 = &off_24C9FAB60;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)a1;
  *(_QWORD *)(v8 + 160) = v9;
  *(_QWORD *)(v8 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v8 + 191) = 7;
  if (v6 >= 0)
    p_p = (char *)&__p;
  else
    p_p = v7;
  sub_20E8B2F9C(v90, p_p, v8, "The prediction type used when SLAM is estimating the poses based on vision-only.");
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v87) & 0x80000000) == 0)
      goto LABEL_11;
LABEL_15:
    operator delete(v86);
    if ((SHIBYTE(v89) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_16;
  }
  operator delete(__p);
  if (SHIBYTE(v87) < 0)
    goto LABEL_15;
LABEL_11:
  if ((SHIBYTE(v89) & 0x80000000) == 0)
    goto LABEL_12;
LABEL_16:
  operator delete((void *)__dst);
LABEL_12:
  v90[0] = nullsub_1(v37);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v84, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v84 = *a2;
    v85 = *((_QWORD *)a2 + 2);
  }
  v82 = (char *)operator new(0x30uLL);
  v83 = xmmword_2102DC8E0;
  strcpy(v82, "imu_camera_discrepancy_fallback_extrap_type");
  sub_2101050B4((const void **)&v84, (uint64_t)&v82, (uint64_t)&__p);
  v11 = SHIBYTE(v62);
  v12 = (char *)__p;
  v13 = operator new();
  *(_QWORD *)(v13 + 109) = 0;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_QWORD *)v13 = &off_24C9FA980;
  *(_QWORD *)(v13 + 8) = &unk_24C9FA9F8;
  *(_QWORD *)(v13 + 152) = &unk_24C9FAA20;
  *(_QWORD *)(v13 + 176) = 0;
  *(_QWORD *)(v13 + 184) = 0;
  *(_QWORD *)(v13 + 120) = (char *)off_24C9FAB98 + 1;
  *(_QWORD *)(v13 + 128) = a1 + 1;
  v14 = operator new();
  *(_QWORD *)v14 = &off_24C9FAB60;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(a1 + 1);
  *(_QWORD *)(v13 + 160) = v14;
  *(_QWORD *)(v13 + 168) = 0x6E776F6E6B6E75;
  *(_BYTE *)(v13 + 191) = 7;
  if (v11 >= 0)
    v15 = (char *)&__p;
  else
    v15 = v12;
  sub_20E8B2F9C(v90, v15, v13, "Prediction type to which we fall back for short-period IMU-camera discrepancy when running VIO. This a fallback mechanism when SLAM is estimating the poses using inertial-vision.");
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
    v16 = v37;
    if ((SHIBYTE(v83) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_27:
    operator delete(v82);
    if ((SHIBYTE(v85) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_28;
  }
  operator delete(__p);
  v16 = v37;
  if (SHIBYTE(v83) < 0)
    goto LABEL_27;
LABEL_23:
  if ((SHIBYTE(v85) & 0x80000000) == 0)
    goto LABEL_24;
LABEL_28:
  operator delete((void *)v84);
LABEL_24:
  v90[0] = nullsub_1(v16);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v80, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v80 = *a2;
    v81 = *((_QWORD *)a2 + 2);
  }
  v78 = (char *)operator new(0x20uLL);
  v79 = xmmword_2102DBFB0;
  strcpy(v78, "visual_slam_extrap_limit");
  sub_2101050B4((const void **)&v80, (uint64_t)&v78, (uint64_t)&__p);
  v17 = SHIBYTE(v62);
  v18 = (char *)__p;
  v19 = sub_20EA9DB90((double *)(a1 + 480));
  if (v17 >= 0)
    v20 = (char *)&__p;
  else
    v20 = v18;
  sub_20E8B2F9C(v90, v20, v19, "Visual SLAM prediction time limit in seconds.");
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v79) & 0x80000000) == 0)
      goto LABEL_35;
LABEL_39:
    operator delete(v78);
    if ((SHIBYTE(v81) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_40;
  }
  operator delete(__p);
  if (SHIBYTE(v79) < 0)
    goto LABEL_39;
LABEL_35:
  if ((SHIBYTE(v81) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_40:
  operator delete((void *)v80);
LABEL_36:
  v90[0] = nullsub_1(v16);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v76, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v76 = *a2;
    v77 = *((_QWORD *)a2 + 2);
  }
  v75 = 15;
  strcpy((char *)v74, "period_est_gain");
  sub_2101050B4((const void **)&v76, (uint64_t)v74, (uint64_t)&__p);
  v21 = SHIBYTE(v62);
  v22 = (char *)__p;
  v23 = sub_20EA9DB90((double *)(a1 + 488));
  if (v21 >= 0)
    v24 = (char *)&__p;
  else
    v24 = v22;
  sub_20E8B2F9C(v90, v24, v23, "Visual SLAM sample period exponential estimation parameter (RLS mode).");
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
    if ((v75 & 0x80000000) == 0)
      goto LABEL_47;
LABEL_51:
    operator delete(v74[0]);
    if ((SHIBYTE(v77) & 0x80000000) == 0)
      goto LABEL_48;
    goto LABEL_52;
  }
  operator delete(__p);
  if (v75 < 0)
    goto LABEL_51;
LABEL_47:
  if ((SHIBYTE(v77) & 0x80000000) == 0)
    goto LABEL_48;
LABEL_52:
  operator delete((void *)v76);
LABEL_48:
  v90[0] = nullsub_1(v16);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v72, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v72 = *a2;
    v73 = *((_QWORD *)a2 + 2);
  }
  v70 = operator new(0x20uLL);
  v71 = xmmword_2102DBFF0;
  strcpy((char *)v70, "ls_pred_sampling_error_fraction");
  sub_2101050B4((const void **)&v72, (uint64_t)&v70, (uint64_t)&__p);
  v25 = SHIBYTE(v62);
  v26 = (char *)__p;
  v27 = sub_20EA9DB90((double *)(a1 + 496));
  if (v25 >= 0)
    v28 = (char *)&__p;
  else
    v28 = v26;
  sub_20E8B2F9C(v90, v28, v27, "LS Filter fractional sampling error bound (Block LS/RLS mode)");
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      goto LABEL_59;
LABEL_63:
    operator delete(v70);
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_60;
    goto LABEL_64;
  }
  operator delete(__p);
  if (SHIBYTE(v71) < 0)
    goto LABEL_63;
LABEL_59:
  if ((SHIBYTE(v73) & 0x80000000) == 0)
    goto LABEL_60;
LABEL_64:
  operator delete((void *)v72);
LABEL_60:
  v90[0] = nullsub_1(v16);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v68, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v68 = *a2;
    v69 = *((_QWORD *)a2 + 2);
  }
  HIBYTE(v67[2]) = 21;
  strcpy((char *)v67, "use_gyro_measurements");
  sub_2101050B4((const void **)&v68, (uint64_t)v67, (uint64_t)&__p);
  v29 = SHIBYTE(v62);
  v30 = (char *)__p;
  v31 = sub_20EAA14D8((_BYTE *)(a1 + 504));
  if (v29 >= 0)
    v32 = (char *)&__p;
  else
    v32 = v30;
  sub_20E8B2F9C(v90, v32, v31, "Whether to use gyrocope measurements in prediction.");
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v67[2]) & 0x80000000) == 0)
      goto LABEL_71;
LABEL_75:
    operator delete(v67[0]);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      goto LABEL_72;
    goto LABEL_76;
  }
  operator delete(__p);
  if (SHIBYTE(v67[2]) < 0)
    goto LABEL_75;
LABEL_71:
  if ((SHIBYTE(v69) & 0x80000000) == 0)
    goto LABEL_72;
LABEL_76:
  operator delete((void *)v68);
LABEL_72:
  v90[0] = nullsub_1(v16);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v65, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v65 = *a2;
    v66 = *((_QWORD *)a2 + 2);
  }
  v63 = operator new(0x30uLL);
  v64 = xmmword_2102DCA00;
  strcpy((char *)v63, "enable_states_and_smoothing_data_clearing");
  sub_2101050B4((const void **)&v65, (uint64_t)&v63, (uint64_t)&__p);
  v33 = SHIBYTE(v62);
  v34 = (char *)__p;
  v35 = sub_20EAA14D8((_BYTE *)(a1 + 505));
  if (v33 >= 0)
    v36 = (char *)&__p;
  else
    v36 = v34;
  sub_20E8B2F9C(v90, v36, v35, "A flag indicating whether to clear the inertial states cache and the smoothing data upon global frame changes: re-initialization, gravity alignement or slam mode transitions.");
  if (SHIBYTE(v62) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v64) & 0x80000000) == 0)
    {
LABEL_83:
      if ((SHIBYTE(v66) & 0x80000000) == 0)
        goto LABEL_84;
LABEL_88:
      operator delete((void *)v65);
      if ((*((char *)a2 + 23) & 0x80000000) == 0)
        goto LABEL_85;
      goto LABEL_89;
    }
  }
  else if ((SHIBYTE(v64) & 0x80000000) == 0)
  {
    goto LABEL_83;
  }
  operator delete(v63);
  if (SHIBYTE(v66) < 0)
    goto LABEL_88;
LABEL_84:
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_85:
    v57 = *a2;
    v58 = *((_QWORD *)a2 + 2);
    goto LABEL_90;
  }
LABEL_89:
  sub_20E860C04(&v57, *(void **)a2, *((_QWORD *)a2 + 1));
LABEL_90:
  v55 = operator new(0x20uLL);
  v56 = xmmword_2102DBFF0;
  strcpy((char *)v55, "polynomial_extrapolation_config");
  sub_2101050B4((const void **)&v57, (uint64_t)&v55, (uint64_t)v59);
  sub_20F1AC95C((unsigned int *)(a1 + 4), (__int128 *)v59, &__p);
  sub_20E8B32F0(v16, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (v60 < 0)
  {
    operator delete(v59[0]);
    if ((SHIBYTE(v56) & 0x80000000) == 0)
    {
LABEL_92:
      if ((SHIBYTE(v58) & 0x80000000) == 0)
        goto LABEL_93;
LABEL_97:
      operator delete((void *)v57);
      if ((*((char *)a2 + 23) & 0x80000000) == 0)
        goto LABEL_94;
      goto LABEL_98;
    }
  }
  else if ((SHIBYTE(v56) & 0x80000000) == 0)
  {
    goto LABEL_92;
  }
  operator delete(v55);
  if (SHIBYTE(v58) < 0)
    goto LABEL_97;
LABEL_93:
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_94:
    v51 = *a2;
    v52 = *((_QWORD *)a2 + 2);
    goto LABEL_99;
  }
LABEL_98:
  sub_20E860C04(&v51, *(void **)a2, *((_QWORD *)a2 + 1));
LABEL_99:
  v49 = operator new(0x20uLL);
  v50 = xmmword_2102DB470;
  strcpy((char *)v49, "adapative_pred_filter_config");
  sub_2101050B4((const void **)&v51, (uint64_t)&v49, (uint64_t)v53);
  sub_20F198D0C(a1 + 24, (__int128 *)v53, &__p);
  sub_20E8B32F0(v16, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (v54 < 0)
  {
    operator delete(v53[0]);
    if ((SHIBYTE(v50) & 0x80000000) == 0)
    {
LABEL_101:
      if ((SHIBYTE(v52) & 0x80000000) == 0)
        goto LABEL_102;
LABEL_106:
      operator delete((void *)v51);
      if ((*((char *)a2 + 23) & 0x80000000) == 0)
        goto LABEL_103;
      goto LABEL_107;
    }
  }
  else if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    goto LABEL_101;
  }
  operator delete(v49);
  if (SHIBYTE(v52) < 0)
    goto LABEL_106;
LABEL_102:
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_103:
    *(_OWORD *)v45 = *a2;
    v46 = *((_QWORD *)a2 + 2);
    goto LABEL_108;
  }
LABEL_107:
  sub_20E860C04(v45, *(void **)a2, *((_QWORD *)a2 + 1));
LABEL_108:
  strcpy((char *)v44, "rls_gyro_filter_config");
  HIBYTE(v44[2]) = 22;
  sub_2101050B4((const void **)v45, (uint64_t)v44, (uint64_t)v47);
  sub_20F198D0C(a1 + 176, (__int128 *)v47, &__p);
  sub_20E8B32F0(v16, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (v48 < 0)
  {
    operator delete(v47[0]);
    if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
    {
LABEL_110:
      if ((SHIBYTE(v46) & 0x80000000) == 0)
        goto LABEL_111;
LABEL_115:
      operator delete(v45[0]);
      if ((*((char *)a2 + 23) & 0x80000000) == 0)
        goto LABEL_112;
      goto LABEL_116;
    }
  }
  else if ((SHIBYTE(v44[2]) & 0x80000000) == 0)
  {
    goto LABEL_110;
  }
  operator delete(v44[0]);
  if (SHIBYTE(v46) < 0)
    goto LABEL_115;
LABEL_111:
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_112:
    *(_OWORD *)v40 = *a2;
    v41 = *((_QWORD *)a2 + 2);
    goto LABEL_117;
  }
LABEL_116:
  sub_20E860C04(v40, *(void **)a2, *((_QWORD *)a2 + 1));
LABEL_117:
  v38 = operator new(0x19uLL);
  v39 = xmmword_2102DAFD0;
  strcpy((char *)v38, "rls_accel_filter_config");
  sub_2101050B4((const void **)v40, (uint64_t)&v38, (uint64_t)v42);
  sub_20F198D0C(a1 + 328, (__int128 *)v42, &__p);
  sub_20E8B32F0(v16, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  if (v43 < 0)
  {
    operator delete(v42[0]);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(v41) & 0x80000000) == 0)
        return;
LABEL_123:
      operator delete(v40[0]);
      return;
    }
  }
  else if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(v38);
  if (SHIBYTE(v41) < 0)
    goto LABEL_123;
}

void sub_20F1E2EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_20E869298(a13);
  _Unwind_Resume(a1);
}

void sub_20F1E33F4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  int v10;
  size_t v11;
  unint64_t v12;
  char *p_dst;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  size_t v37;
  unint64_t v38;
  std::string::value_type *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string::size_type size;
  std::string v48;
  std::string __dst;
  std::string v50;

  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 47))
      v4 = (__int128 *)(a1 + 24);
    else
      v4 = &xmmword_253CFBB28;
    if (!*(_QWORD *)(a1 + 80))
      goto LABEL_21;
LABEL_11:
    if (*(char *)(a1 + 111) < 0)
    {
      if (!*(_QWORD *)(a1 + 96))
        goto LABEL_21;
    }
    else if (!*(_BYTE *)(a1 + 111))
    {
      goto LABEL_21;
    }
    v5 = *((char *)v4 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = *((_QWORD *)v4 + 1);
    v7 = v6 + 2;
    if (v6 + 2 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v7 >= 0x17)
    {
      v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v14 = v7 | 7;
      v15 = v14 + 1;
      v16 = operator new(v14 + 1);
      v48.__r_.__value_.__l.__size_ = v6 + 2;
      v48.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
      *v16 = 15707;
      v8 = (std::string::value_type *)(v16 + 1);
    }
    else
    {
      v48.__r_.__value_.__r.__words[2] = 0;
      *((_BYTE *)&v48.__r_.__value_.__s + 23) = v6 + 2;
      v8 = &v48.__r_.__value_.__s.__data_[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = 0x3D5BuLL;
      if (!v6)
        goto LABEL_38;
    }
    if (v5 >= 0)
      v17 = v4;
    else
      v17 = *(__int128 **)v4;
    memmove(v8, v17, v6);
LABEL_38:
    v8[v6] = 0;
    v18 = std::string::append(&v48, "(=", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 111);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 88);
    else
      v21 = *(const std::string::value_type **)(a1 + 88);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 111);
    else
      v22 = *(_QWORD *)(a1 + 96);
    v23 = std::string::append(&__dst, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v50, ")]", 2uLL);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_46:
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_47;
        goto LABEL_51;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if (!*(_QWORD *)(a1 + 48))
        return;
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v48.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)(a1 + 48))
      return;
LABEL_52:
    v27 = *(_BYTE *)(a1 + 79);
    if (v27 < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        return;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      return;
    }
    if (v27 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 79);
    else
      v37 = *(_QWORD *)(a1 + 64);
    v38 = v37 + 3;
    if (v37 + 3 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v38 >= 0x17)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17)
        v40 = v38 | 7;
      v41 = v40 + 1;
      v42 = (char *)operator new(v40 + 1);
      __dst.__r_.__value_.__l.__size_ = v37 + 3;
      __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      *(_WORD *)v42 = 10272;
      v39 = v42 + 3;
      v42[2] = 61;
    }
    else
    {
      __dst.__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0x3D2820uLL;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v37 + 3;
      v39 = &__dst.__r_.__value_.__s.__data_[3];
      if (!v37)
      {
LABEL_88:
        v39[v37] = 0;
        v44 = std::string::append(&__dst, ")", 1uLL);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v50.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v50;
        else
          v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        else
          size = v50.__r_.__value_.__l.__size_;
        std::string::append(a2, (const std::string::value_type *)v46, size);
        goto LABEL_95;
      }
    }
    if (v27 >= 0)
      v43 = (const void *)(a1 + 56);
    else
      v43 = *(const void **)(a1 + 56);
    memmove(v39, v43, v37);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 32))
    v4 = (__int128 *)(a1 + 24);
  else
    v4 = &xmmword_253CFBB28;
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_11;
LABEL_21:
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_56;
  v9 = *(unsigned __int8 *)(a1 + 79);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 79))
      goto LABEL_24;
LABEL_56:
    if (*((char *)v4 + 23) < 0)
    {
      sub_20E860C04(a2, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 64))
    goto LABEL_56;
LABEL_24:
  v10 = *((char *)v4 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)v4 + 23);
  else
    v11 = *((_QWORD *)v4 + 1);
  v12 = v11 + 3;
  if (v11 + 3 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v28 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v28 = v12 | 7;
    v29 = v28 + 1;
    p_dst = (char *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 3;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_62;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = (char *)&__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11 + 3;
  if (v11)
  {
LABEL_62:
    if (v10 >= 0)
      v30 = v4;
    else
      v30 = *(__int128 **)v4;
    memmove(p_dst, v30, v11);
  }
  *(_DWORD *)&p_dst[v11] = 4007968;
  if ((v9 & 0x80u) == 0)
    v31 = (const std::string::value_type *)(a1 + 56);
  else
    v31 = *(const std::string::value_type **)(a1 + 56);
  if ((v9 & 0x80u) == 0)
    v32 = v9;
  else
    v32 = *(_QWORD *)(a1 + 64);
  v33 = std::string::append(&__dst, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v35 = std::string::append(&v50, ")", 1uLL);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
LABEL_95:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_20F1E3904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 + 23) & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(*(void **)v28);
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((*(char *)(v28 + 23) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL sub_20F1E3A08(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 115) && *(_QWORD *)(a1 + 80) == 0;
}

uint64_t sub_20F1E3A28(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 114))
    return 0xFFFFFFFFLL;
  else
    return *(_BYTE *)(a1 + 115) == 0;
}

uint64_t sub_20F1E3A48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_20F1E3A50(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 116);
}

BOOL sub_20F1E3A58(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 24))(*(_QWORD *)(a1 + 48));
    v5 = *a2;
    *a2 = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v2 != 0;
}

uint64_t sub_20F1E3AB0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t (*v9)();
  std::runtime_error v10;

  if (*a2)
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v4 = MEMORY[0x24BEDB7C8];
  result = *(_QWORD *)(v4 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  if (result == ((unint64_t)"N4cv3d3vio14pose_predictor28VisualSLAMPosePredictionTypeE" & 0x7FFFFFFFFFFFFFFFLL)
    || (result = strcmp((const char *)result, (const char *)((unint64_t)"N4cv3d3vio14pose_predictor28VisualSLAMPosePredictionTypeE" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
  {
    v6 = (_BYTE *)(*a2 + 8);
    v7 = *(_BYTE **)(a1 + 16);
    if (!v7)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v7 = *(_BYTE **)(a1 + 16);
  if (v7)
LABEL_9:
    *v7 = *v6;
LABEL_10:
  v8 = *(_QWORD *)(a1 + 120);
  v9 = nullsub_678;
  if (!v8)
    v9 = 0;
  if (v9)
  {
    if (!v8)
    {
      std::runtime_error::runtime_error(&v10, "call to empty boost::function");
      v10.__vftable = (std::runtime_error_vtbl *)&unk_24C9ABB38;
      sub_20E86DD10(&v10);
    }
    return (*(uint64_t (**)(uint64_t, _BYTE *))((v8 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 128, v6);
  }
  return result;
}

void sub_20F1E3BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1E3BBC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FA980;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA9F8;
  *(_QWORD *)(a1 + 152) = &unk_24C9FAA20;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      return sub_20F1E4568(a1);
    goto LABEL_3;
  }
  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_20F1E4568(a1);
}

void sub_20F1E3C24(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_24C9FA980;
  *(_QWORD *)(a1 + 8) = &unk_24C9FA9F8;
  *(_QWORD *)(a1 + 152) = &unk_24C9FAA20;
  if (*(char *)(a1 + 191) < 0)
  {
    operator delete(*(void **)(a1 + 168));
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
      goto LABEL_4;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2)
    {
LABEL_4:
      sub_20F1E4568(a1);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  goto LABEL_4;
}

void sub_20F1E3CA0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  char *v12;
  void **v13;
  char *v14;
  std::ios_base *v15;
  std::bad_cast_vtbl *v16;
  std::string::size_type size;
  void *v18;
  std::string *v19;
  std::string::size_type v21;
  uint64_t v22;
  char v24;
  std::string *v25;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  int data_low;
  std::string *v36;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  uint64_t v50;
  std::runtime_error *exception;
  void *__p[2];
  uint64_t v55;
  std::bad_cast v56;
  void *v57;
  std::ios_base v58;
  uint64_t v59;
  int v60;
  _QWORD __sb[8];
  std::string v62;
  std::string v63;

  if (*a3 == a3[1])
  {
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      v9 = *a2;
      *a2 = v8;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
  }
  sub_20E8B84BC(a2);
  v5 = (char *)sub_20E8B850C(a3, 0);
  if (v5[23] < 0)
  {
    sub_20E860C04(__p, *(void **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    v55 = *((_QWORD *)v5 + 2);
    *(_OWORD *)__p = v6;
  }
  v10 = (char *)HIBYTE(v55);
  v11 = (void **)__p[0];
  v12 = (char *)__p[1];
  std::streambuf::basic_streambuf();
  v13 = __p;
  if ((char)v10 >= 0)
  {
    v14 = v10;
  }
  else
  {
    v13 = v11;
    v14 = v12;
  }
  __sb[0] = &off_24C9C2750;
  __sb[2] = v13;
  __sb[3] = v13;
  __sb[4] = &v14[(_QWORD)v13];
  v57 = 0;
  v58.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB820] + 64);
  v56.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x24BEDB820] + 24);
  std::ios_base::init(&v58, __sb);
  v59 = 0;
  v60 = -1;
  v15 = (std::ios_base *)((char *)&v56 + (unint64_t)v56.__vftable[-1].~bad_cast);
  v15->__exceptions_ = 1;
  std::ios_base::clear(v15, v15->__rdstate_);
  v16 = v56.__vftable;
  *(_DWORD *)((char *)&v56 + (unint64_t)v56.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
  *(std::ios_base_vtbl **)((char *)&v58.__vftable + (unint64_t)v16[-1].~bad_cast) = (std::ios_base_vtbl *)6;
  sub_20EA9DA18(&v63, *(_QWORD **)((char *)&v58.__width_ + (unint64_t)v16[-1].~bad_cast), 0);
  size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v63.__r_.__value_.__l.__size_;
  switch(size)
  {
    case 0xBuLL:
      v18 = (void *)v63.__r_.__value_.__r.__words[0];
      v19 = &v63;
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if (v19->__r_.__value_.__r.__words[0] == 0x6C6F706172747845
        && *(std::string::size_type *)((char *)v19->__r_.__value_.__r.__words + 3) == 0x6574616C6F706172)
      {
        v24 = 0;
        if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_67;
      }
      else
      {
        v21 = v19->__r_.__value_.__r.__words[0];
        v22 = *(std::string::size_type *)((char *)v19->__r_.__value_.__r.__words + 3);
        if (v21 != 0x6C6F707265746E49 || v22 != 0x6574616C6F707265)
          goto LABEL_92;
        v24 = 1;
        if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_67;
      }
      goto LABEL_66;
    case 0x17uLL:
      v18 = (void *)v63.__r_.__value_.__r.__words[0];
      v47 = &v63;
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = (std::string *)v63.__r_.__value_.__r.__words[0];
      v48 = v47->__r_.__value_.__r.__words[0];
      v49 = v47->__r_.__value_.__l.__size_;
      v50 = *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1] + 7);
      if (v48 != 0x6C6F706172747845 || v49 != 0x4F6D6F7246657461 || v50 != 0x6574617453656E4FLL)
        goto LABEL_92;
      v24 = 2;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_66;
      goto LABEL_67;
    case 0x1AuLL:
      v18 = (void *)v63.__r_.__value_.__r.__words[0];
      v25 = &v63;
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)v63.__r_.__value_.__r.__words[0];
      if (v25->__r_.__value_.__r.__words[0] == 0x6C6F706172747845
        && v25->__r_.__value_.__l.__size_ == 0x676E697355657461
        && v25->__r_.__value_.__r.__words[2] == 7596850666718130000
        && LOWORD(v25[1].__r_.__value_.__l.__data_) == 27745)
      {
        v24 = 3;
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
LABEL_66:
          operator delete(v18);
      }
      else
      {
        v29 = v25->__r_.__value_.__r.__words[0];
        v30 = v25->__r_.__value_.__l.__size_;
        v31 = v25->__r_.__value_.__r.__words[2];
        data_low = LOWORD(v25[1].__r_.__value_.__l.__data_);
        if (v29 != 0x6C6F706172747845
          || v30 != 0x676E697355657461
          || v31 != 0x746C694670616441
          || data_low != 29285)
        {
LABEL_92:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(exception, &v62);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v24 = 4;
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_66;
      }
LABEL_67:
      if ((*((_BYTE *)&v58.__precision_ + (unint64_t)v56.__vftable[-1].~bad_cast) & 5) != 0)
      {
        std::istream::~istream();
        std::streambuf::~streambuf();
        goto LABEL_75;
      }
      v46 = std::istream::get() == -1;
      std::istream::~istream();
      std::streambuf::~streambuf();
      if (!v46)
      {
LABEL_75:
        std::bad_cast::bad_cast(&v56);
        v56.__vftable = (std::bad_cast_vtbl *)&unk_24C9C28C0;
        v57 = &unk_24C9AB9F0;
        v58.__vftable = (std::ios_base_vtbl *)&unk_24C9FAB40;
        sub_20EA9F254((uint64_t)&v56);
      }
      v44 = operator new();
      *(_QWORD *)v44 = &off_24C9FAB60;
      *(_BYTE *)(v44 + 8) = v24;
      v45 = *a2;
      *a2 = v44;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      if (SHIBYTE(v55) < 0)
        operator delete(__p[0]);
      return;
    case 0x1EuLL:
      v18 = (void *)v63.__r_.__value_.__r.__words[0];
      v36 = &v63;
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v36 = (std::string *)v63.__r_.__value_.__r.__words[0];
      v37 = v36->__r_.__value_.__r.__words[0];
      v38 = v36->__r_.__value_.__l.__size_;
      v39 = v36->__r_.__value_.__r.__words[2];
      v40 = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[2] + 6);
      if (v37 != 0x6C6F706172747845
        || v38 != 0x676E697355657461
        || v39 != 0x7061644174736146
        || v40 != 0x7265746C69467061)
      {
        goto LABEL_92;
      }
      v24 = 5;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_66;
      goto LABEL_67;
    default:
      goto LABEL_92;
  }
}

void sub_20F1E41E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  void *v15;
  int v16;
  uint64_t v17;

  if (*(char *)(v17 - 73) < 0)
  {
    operator delete(*(void **)(v17 - 96));
    if ((v16 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v16)
  {
LABEL_6:
    if (*(char *)(v17 - 49) < 0)
      operator delete(*(void **)(v17 - 72));
    if (a2 == 2)
    {
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      JUMPOUT(0x20F1E4020);
    }
    std::istream::~istream();
    std::streambuf::~streambuf();
    if (a2 == 1)
    {
      __cxa_begin_catch(a1);
      sub_20E8B898C(&a15, &__p);
      sub_20EA9ED20((uint64_t)&a15);
    }
    if (a14 < 0)
      operator delete(__p);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_20F1E42CC(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E8B9BA0((uint64_t)va);
  __cxa_end_catch();
  JUMPOUT(0x20F1E42E4);
}

void *sub_20F1E4300()
{
  return &unk_24C9FAB40;
}

uint64_t sub_20F1E430C(uint64_t a1)
{
  return a1 + 168;
}

void *sub_20F1E4314()
{
  return &unk_24C9FAB40;
}

uint64_t sub_20F1E4320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FA980;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FA9F8;
  *(_QWORD *)(a1 + 144) = &unk_24C9FAA20;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      return sub_20F1E4568(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 152);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F1E4568(v2);
}

void sub_20F1E4390(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 8) = &off_24C9FA980;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C9FA9F8;
  *(_QWORD *)(a1 + 144) = &unk_24C9FAA20;
  if (*(char *)(a1 + 183) < 0)
  {
    operator delete(*(void **)(a1 + 160));
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 152);
    if (!v3)
    {
LABEL_4:
      sub_20F1E4568(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1E4414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FA980;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FA9F8;
  *(_QWORD *)a1 = &unk_24C9FAA20;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      return sub_20F1E4568(v2);
    goto LABEL_3;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_20F1E4568(v2);
}

void sub_20F1E4484(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(a1 - 152) = &off_24C9FA980;
  v2 = a1 - 152;
  *(_QWORD *)(a1 - 144) = &unk_24C9FA9F8;
  *(_QWORD *)a1 = &unk_24C9FAA20;
  if (*(char *)(a1 + 39) < 0)
  {
    operator delete(*(void **)(a1 + 16));
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
LABEL_4:
      sub_20F1E4568(v2);
      JUMPOUT(0x212BC6398);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  goto LABEL_4;
}

uint64_t sub_20F1E4508(uint64_t a1)
{
  return a1 + 16;
}

void sub_20F1E4514(uint64_t a1)
{
  sub_20F1E4568(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1E4538(uint64_t a1)
{
  return sub_20F1E4568(a1 - 8);
}

void sub_20F1E4540(uint64_t a1)
{
  sub_20F1E4568(a1 - 8);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1E4568(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24C9FAAB8;
  *(_QWORD *)(a1 + 8) = &unk_24C9FAB28;
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 128, a1 + 128, 2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  v4 = *(_QWORD *)(a1 + 80);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20F1E4638()
{
  JUMPOUT(0x212BC6398);
}

void *sub_20F1E464C()
{
  return &unk_24C9FAB40;
}

uint64_t sub_20F1E4658(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)result = &off_24C9FAB60;
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_20F1E46A0(uint64_t result, _WORD *a2, unsigned int a3)
{
  uint64_t v4;

  if (a3 == 4)
    goto LABEL_2;
  v4 = result;
  if (a3 <= 1)
  {
    *(_QWORD *)a2 = *(_QWORD *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      *(_QWORD *)a2 = &unk_24C9FABA8;
      a2[4] = 0;
      return result;
    }
    result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor28VisualSLAM"
                                      "PosePredictionTypeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)
      || (result = strcmp((const char *)result, (const char *)((unint64_t)"Z40CreateProgramOptionValueWithSavedCurrentIN4cv3d3vio14pose_predictor28VisualSLAMPosePredictionTypeEEPN5boost15program_options11typed_valueIT_cEERS7_EUlRKS3_E_" & 0x7FFFFFFFFFFFFFFFLL)), !(_DWORD)result))
    {
      *(_QWORD *)a2 = v4;
    }
    else
    {
      *(_QWORD *)a2 = 0;
    }
  }
  return result;
}

_BYTE **sub_20F1E474C(_BYTE **result, _BYTE *a2)
{
  **result = *a2;
  return result;
}

void sub_20F1E475C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float64x2_t v4;
  double v5;
  __int128 v6;
  __int128 v7;
  float64x2_t v11;
  int8x16_t v16;
  __int128 v17;
  int64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  const char *v28;
  int v29;
  float64x2_t v30;
  __int128 v31;
  float64x2_t v32;
  __int128 v33;
  float64x2_t v34;
  int v35;
  __int128 v36;
  double *v37;
  double *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  unsigned __int8 v46;
  const char *v47;
  size_t v48;
  _BYTE *v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  double v58;
  double v59;
  size_t v60;
  std::__shared_weak_count_vtbl *v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  int v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  size_t v101;
  const char *v102;
  unsigned __int8 v103;
  size_t v104;
  const char *v105;
  const char *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  size_t v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  int v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  int v149;
  int v150;
  void *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  double v156;
  int8x16_t v157;
  double v158;
  double v159;
  int8x16_t v160;
  double v161;
  int8x16_t v163;
  double v164;
  float64x2_t v168;
  float64x2_t v171;
  int v172;
  int v173;
  __int128 v174;
  double v175;
  uint64_t v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  float64x2_t v182;
  float64x2_t v183;
  uint64_t v184;
  float64x2_t v185;
  float64x2_t v186;
  __int128 v187;
  int64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  int64x2_t v191;
  float64x2_t v192;
  double v193;
  float64x2_t v194;
  float64x2_t v195;
  unint64_t v196;
  int8x16_t v197;
  float64x2_t v198;
  int8x16_t v199;
  double v200;
  uint64_t *v201;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v203;
  int v204;
  const char *v205;
  int v206;
  const char *v207;
  uint64_t v208;
  std::__shared_weak_count *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE v213[24];
  __int128 v214;
  void **v215;
  size_t v216;
  unint64_t v217;
  char v218;
  uint64_t v219;

  v219 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 2184;
  v4.f64[0] = *(float64_t *)(a2 + 16);
  v188 = *(int64x2_t *)(a2 + 24);
  v191 = *(int64x2_t *)a2;
  v200 = *(double *)(a2 + 64);
  v4.f64[1] = *(float64_t *)(a2 + 40);
  v198 = v4;
  v5 = *(double *)(a2 + 168);
  v193 = *(double *)(a2 + 160);
  v195 = *(float64x2_t *)(a2 + 48);
  v184 = *(_QWORD *)(a2 + 112);
  v185 = *(float64x2_t *)(a2 + 144);
  v199 = *(int8x16_t *)(a2 + 96);
  if (*(_BYTE *)(a1 + 1530))
  {
    v6 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 2304) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 2288) = v6;
    v7 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 2328) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 2312) = v7;
  }
  kdebug_trace();
  _V18.D[1] = v195.f64[1];
  _Q0 = vmulq_f64(v195, v185);
  _D1 = v185.f64[1];
  v11 = (float64x2_t)vzip1q_s64(v191, v188);
  __asm { FMLA            D0, D1, V18.D[1] }
  v20 = (float64x2_t)vzip2q_s64(v191, v188);
  _Q0.f64[0] = _Q0.f64[0] + v200 * v193;
  v16 = vextq_s8((int8x16_t)v20, (int8x16_t)vdupq_laneq_s64((int64x2_t)v195, 1), 8uLL);
  *(_QWORD *)&v21.f64[0] = *(_OWORD *)&vnegq_f64(_Q0);
  v17 = *(unint64_t *)&v195.f64[0];
  v196 = vextq_s8(v199, v199, 8uLL).u64[0];
  v197 = (int8x16_t)v11;
  v18 = (int64x2_t *)(a1 + 1912);
  v19 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v11, v185.f64[0]), v20, v185, 1), v198, v193));
  *(_QWORD *)&v20.f64[1] = v16.i64[0];
  v21.f64[1] = 1.0;
  v192 = (float64x2_t)(unint64_t)v17;
  v194 = v21;
  if (!*(_BYTE *)(a1 + 1904))
  {
    *(double *)(a1 + 1896) = v5;
    *(_BYTE *)(a1 + 1904) = 1;
    v29 = *(unsigned __int8 *)(a1 + 2040);
    *v18 = (int64x2_t)v11;
    *(_OWORD *)(a1 + 1928) = v17;
    *(float64x2_t *)(a1 + 1944) = v20;
    *(_OWORD *)(a1 + 1960) = v16.u64[1];
    *(float64x2_t *)(a1 + 1976) = v198;
    *(_OWORD *)(a1 + 1992) = *(unint64_t *)&v200;
    *(float64x2_t *)(a1 + 2008) = v19;
    *(float64x2_t *)(a1 + 2024) = v21;
    v30 = v198;
    v31 = *(unint64_t *)&v200;
    v32 = v20;
    v33 = v16.u64[1];
    v34 = v19;
    if (!v29)
      *(_BYTE *)(a1 + 2040) = 1;
    v35 = *(unsigned __int8 *)(a1 + 2208);
    *(_QWORD *)(v3 + 16) = v184;
    *(_QWORD *)&v36 = v199.i64[0];
    *((_QWORD *)&v36 + 1) = v196;
    *(_OWORD *)v3 = v36;
    if (!v35)
      *(_BYTE *)(a1 + 2208) = 1;
    v37 = *(double **)(a1 + 1512);
    v38 = *(double **)(a1 + 1504);
    v39 = v37 - v38;
    v40 = *(_QWORD *)(a1 + 1840);
    v41 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 1848) - v40) >> 4);
    if (v39 <= v41)
    {
      if (v39 < v41)
        *(_QWORD *)(a1 + 1848) = v40 + 144 * v39;
    }
    else
    {
      v187 = v16.u64[1];
      v190 = v20;
      v183 = v19;
      sub_20F1A69B0((void **)(a1 + 1840), v39 - v41);
      v34 = v183;
      v33 = v187;
      v32 = v190;
      v31 = *(unint64_t *)&v200;
      v30 = v198;
      v38 = *(double **)(a1 + 1504);
      v37 = *(double **)(a1 + 1512);
    }
    if (v38 != v37)
    {
      v42 = 0;
      do
      {
        v43 = *v38++;
        v44 = *(_QWORD *)(a1 + 1840) + v42;
        *(double *)(v44 + 128) = v5 + v43 * *(double *)(a1 + 1888);
        *(int8x16_t *)v44 = v197;
        *(float64x2_t *)(v44 + 16) = v192;
        *(float64x2_t *)(v44 + 32) = v32;
        *(_OWORD *)(v44 + 48) = v33;
        *(float64x2_t *)(v44 + 64) = v30;
        *(_OWORD *)(v44 + 80) = v31;
        *(float64x2_t *)(v44 + 96) = v34;
        *(float64x2_t *)(v44 + 112) = v194;
        v42 += 144;
      }
      while (v38 != v37);
    }
    return;
  }
  v182 = v19;
  v186 = (float64x2_t)v16.u64[1];
  v189 = v20;
  v22 = *(double *)(a1 + 1896);
  if (v5 <= v22)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/MLPosePredictionFilter.cpp", 106, (uint64_t)"timestamp > *latest_pose_timestamp_", 35, (uint64_t)"The timestamp of the new vio pose must increase monotonically", 61, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v22 = *(double *)(a1 + 1896);
  }
  v23 = v5 - v22;
  if (vabdd_f64(v5 - v22, *(double *)(a1 + 1872)) > *(double *)(a1 + 1872) * 0.09)
  {
    if (*(_BYTE *)(a1 + 1688))
    {
      sub_20F1E636C(&v210);
      if (**(int **)(v210 + 56) <= 2)
      {
        v24 = *(unsigned __int8 *)(v210 + 72);
        v25 = sub_20E8C31DC(v210, "OSLogSurrogateAppender", 1, 0);
        v26 = v25;
        if (v24 || v25)
        {
          v201 = &v210;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v203 = std::chrono::system_clock::now().__d_.__rep_;
          v204 = 2;
          v205 = "unknown file";
          v206 = 112;
          v208 = 0;
          v209 = 0;
          v207 = "unknown function";
          v181 = v210;
          if (*(char *)(v210 + 39) < 0)
          {
            v28 = *(const char **)(v210 + 16);
            v27 = *(_QWORD *)(v210 + 24);
          }
          else
          {
            v27 = *(unsigned __int8 *)(v210 + 39);
            v28 = (const char *)(v210 + 16);
          }
          v179 = v210 + 16;
          v45 = *(double *)(a1 + 1872);
          v46 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v46 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)v213);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v213);
            if ((_BYTE)v214 && (v213[23] & 0x80000000) != 0)
              operator delete(*(void **)v213);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v47 = byte_254A4A4F8;
          else
            v47 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v48 = byte_254A4A4F8[23];
          else
            v48 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)v213 = os_log_create(v47, v28);
          v49 = &v213[8];
          if (v48 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v48 >= 0x17)
          {
            v177 = v28;
            v50 = v26;
            v51 = v24;
            v52 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v48 | 7) != 0x17)
              v52 = v48 | 7;
            v53 = v52 + 1;
            v49 = operator new(v52 + 1);
            *(_QWORD *)&v213[16] = v48;
            *(_QWORD *)&v214 = v53 | 0x8000000000000000;
            *(_QWORD *)&v213[8] = v49;
            v24 = v51;
            v26 = v50;
            v28 = v177;
          }
          else
          {
            BYTE7(v214) = v48;
            if (!v48)
            {
LABEL_42:
              v49[v48] = 0;
              BYTE8(v214) = 1;
              v54 = (void **)&v215;
              if (v27 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v27 >= 0x17)
              {
                v55 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v27 | 7) != 0x17)
                  v55 = v27 | 7;
                v56 = v55 + 1;
                v54 = (void **)operator new(v55 + 1);
                v216 = v27;
                v217 = v56 | 0x8000000000000000;
                v215 = v54;
              }
              else
              {
                HIBYTE(v217) = v27;
                if (!v27)
                  goto LABEL_50;
              }
              memmove(v54, v28, v27);
LABEL_50:
              *((_BYTE *)v54 + v27) = 0;
              v218 = 1;
              v57 = *(NSObject **)v213;
              if (SHIBYTE(v217) < 0)
                operator delete(v215);
              if (BYTE8(v214) && SBYTE7(v214) < 0)
                operator delete(*(void **)&v213[8]);
              if (*(_QWORD *)v213)
                os_release(*(void **)v213);
              v58 = v45 * 1000.0;
              v59 = v23 * 1000.0;
              if (v26 && *(_QWORD *)(v26 + 24))
              {
                v60 = _os_log_pack_size();
                v61 = (std::__shared_weak_count_vtbl *)operator new(v60, (std::align_val_t)8uLL);
                v62 = (std::__shared_weak_count *)operator new();
                v63 = v62;
                v62->__shared_owners_ = 0;
                p_shared_owners = (unint64_t *)&v62->__shared_owners_;
                v62->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v62->__shared_weak_owners_ = 0;
                v62[1].__vftable = v61;
                *(_QWORD *)v213 = v61;
                *(_QWORD *)&v213[8] = v61;
                *(_QWORD *)&v213[16] = v62;
                do
                  v65 = __ldxr(p_shared_owners);
                while (__stxr(v65 + 1, p_shared_owners));
                v214 = 0uLL;
                v215 = 0;
                do
                  v66 = __ldaxr(p_shared_owners);
                while (__stlxr(v66 - 1, p_shared_owners));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v63);
                }
                v67 = *(_QWORD *)v213;
                v68 = _os_log_pack_fill();
                *(_DWORD *)v68 = 134218240;
                *(double *)(v68 + 4) = v58;
                *(_WORD *)(v68 + 12) = 2048;
                *(double *)(v68 + 14) = v59;
                v69 = operator new();
                v70 = *(unsigned __int8 *)(v181 + 39);
                v71 = v179;
                if ((v70 & 0x80u) != 0)
                {
                  v71 = *(_QWORD *)(v181 + 16);
                  v70 = *(_QWORD *)(v181 + 24);
                }
                *(_QWORD *)v69 = v67;
                *(_OWORD *)(v69 + 8) = *(_OWORD *)&v213[8];
                *(_OWORD *)&v213[8] = 0uLL;
                *(_OWORD *)(v69 + 24) = v214;
                v214 = 0uLL;
                *(_QWORD *)(v69 + 40) = v71;
                *(_QWORD *)(v69 + 48) = v70;
                *(_BYTE *)(v69 + 56) = 2;
                v211 = 0;
                v212 = v69;
                (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v26 + 24) + 40))(*(_QWORD *)(v26 + 24), &v212);
                v72 = v212;
                v212 = 0;
                if (v72)
                {
                  v73 = *(std::__shared_weak_count **)(v72 + 32);
                  if (v73)
                  {
                    v74 = (unint64_t *)&v73->__shared_owners_;
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                    if (!v75)
                    {
                      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                      std::__shared_weak_count::__release_weak(v73);
                    }
                  }
                  v76 = *(std::__shared_weak_count **)(v72 + 16);
                  if (v76)
                  {
                    v77 = (unint64_t *)&v76->__shared_owners_;
                    do
                      v78 = __ldaxr(v77);
                    while (__stlxr(v78 - 1, v77));
                    if (!v78)
                    {
                      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                      std::__shared_weak_count::__release_weak(v76);
                    }
                  }
                  MEMORY[0x212BC6398](v72, 0x10F0C40B62ED6C6);
                  v79 = v211;
                  v211 = 0;
                  if (v79)
                  {
                    v80 = *(std::__shared_weak_count **)(v79 + 32);
                    if (v80)
                    {
                      v81 = (unint64_t *)&v80->__shared_owners_;
                      do
                        v82 = __ldaxr(v81);
                      while (__stlxr(v82 - 1, v81));
                      if (!v82)
                      {
                        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                        std::__shared_weak_count::__release_weak(v80);
                      }
                    }
                    v83 = *(std::__shared_weak_count **)(v79 + 16);
                    if (v83)
                    {
                      v84 = (unint64_t *)&v83->__shared_owners_;
                      do
                        v85 = __ldaxr(v84);
                      while (__stlxr(v85 - 1, v84));
                      if (!v85)
                      {
                        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                        std::__shared_weak_count::__release_weak(v83);
                      }
                    }
                    MEMORY[0x212BC6398](v79, 0x10F0C40B62ED6C6);
                  }
                }
                v86 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
                if (*((_QWORD *)&v214 + 1))
                {
                  v87 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
                  do
                    v88 = __ldaxr(v87);
                  while (__stlxr(v88 - 1, v87));
                  if (!v88)
                  {
                    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
                v89 = *(std::__shared_weak_count **)&v213[16];
                if (*(_QWORD *)&v213[16])
                {
                  v90 = (unint64_t *)(*(_QWORD *)&v213[16] + 8);
                  do
                    v91 = __ldaxr(v90);
                  while (__stlxr(v91 - 1, v90));
                  if (!v91)
                  {
                    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                    std::__shared_weak_count::__release_weak(v89);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG);
                *(_DWORD *)v213 = 134218240;
                *(double *)&v213[4] = v58;
                *(_WORD *)&v213[12] = 2048;
                *(double *)&v213[14] = v59;
                v92 = (void *)_os_log_send_and_compose_impl();
                if (v92)
                  free(v92);
              }
              if (v24)
              {
                sub_20E8C003C((uint64_t)&v201, "MLPosePredictionFilter expects %.2fms between two poses, but gets %.2fms", *(double *)(a1 + 1872) * 1000.0, v59);
                sub_20E863570((uint64_t)&v201);
              }
              sub_20E863570((uint64_t)&v201);
              v93 = v209;
              if (v209)
              {
                v94 = (unint64_t *)&v209->__shared_owners_;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }
              goto LABEL_109;
            }
          }
          memmove(v49, v47, v48);
          goto LABEL_42;
        }
      }
    }
  }
LABEL_109:
  if (!*(_BYTE *)(a1 + 2176))
  {
    v96 = 1;
    goto LABEL_203;
  }
  if (*(_DWORD *)(a1 + 2368) != *(_DWORD *)(a1 + 1864))
  {
    v96 = *(unsigned __int8 *)(a1 + 1688);
    if (!*(_BYTE *)(a1 + 1688))
      goto LABEL_203;
    sub_20F1E636C(&v210);
    if (**(int **)(v210 + 56) > 5
      || (v97 = *(unsigned __int8 *)(v210 + 72),
          v98 = sub_20E8C31DC(v210, "OSLogSurrogateAppender", 1, 0),
          v99 = v98,
          !v97)
      && !v98)
    {
LABEL_202:
      v96 = *(_BYTE *)(a1 + 2176) == 0;
      goto LABEL_203;
    }
    v180 = v97;
    v201 = &v210;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v203 = std::chrono::system_clock::now().__d_.__rep_;
    v204 = 5;
    v205 = "unknown file";
    v206 = 118;
    v208 = 0;
    v209 = 0;
    v207 = "unknown function";
    v100 = *v201;
    v178 = *v201;
    if (*(char *)(*v201 + 39) < 0)
    {
      v102 = *(const char **)(v100 + 16);
      v101 = *(_QWORD *)(v100 + 24);
    }
    else
    {
      v101 = *(unsigned __int8 *)(*v201 + 39);
      v102 = (const char *)(*v201 + 16);
    }
    v176 = *v201 + 16;
    v103 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v103 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)v213);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)v213);
      if ((_BYTE)v214 && (v213[23] & 0x80000000) != 0)
        operator delete(*(void **)v213);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v104 = byte_254A4A4F8[23];
    else
      v104 = *(_QWORD *)&byte_254A4A4F8[8];
    if (byte_254A4A4F8[23] >= 0)
      v105 = byte_254A4A4F8;
    else
      v105 = *(const char **)byte_254A4A4F8;
    v106 = v102;
    *(_QWORD *)v213 = os_log_create(v105, v102);
    v107 = &v213[8];
    if (v104 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v104 >= 0x17)
    {
      v108 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v104 | 7) != 0x17)
        v108 = v104 | 7;
      v109 = v108 + 1;
      v107 = operator new(v108 + 1);
      *(_QWORD *)&v213[16] = v104;
      *(_QWORD *)&v214 = v109 | 0x8000000000000000;
      *(_QWORD *)&v213[8] = v107;
    }
    else
    {
      BYTE7(v214) = v104;
      if (!v104)
      {
LABEL_135:
        v107[v104] = 0;
        BYTE8(v214) = 1;
        v110 = (void **)&v215;
        if (v101 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v101 >= 0x17)
        {
          v111 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v101 | 7) != 0x17)
            v111 = v101 | 7;
          v112 = v111 + 1;
          v110 = (void **)operator new(v111 + 1);
          v216 = v101;
          v217 = v112 | 0x8000000000000000;
          v215 = v110;
        }
        else
        {
          HIBYTE(v217) = v101;
          if (!v101)
            goto LABEL_143;
        }
        memmove(v110, v106, v101);
LABEL_143:
        *((_BYTE *)v110 + v101) = 0;
        v218 = 1;
        v113 = *(NSObject **)v213;
        if (SHIBYTE(v217) < 0)
          operator delete(v215);
        if (BYTE8(v214) && SBYTE7(v214) < 0)
          operator delete(*(void **)&v213[8]);
        if (*(_QWORD *)v213)
          os_release(*(void **)v213);
        if (v99 && *(_QWORD *)(v99 + 24))
        {
          v114 = _os_log_pack_size();
          v115 = (std::__shared_weak_count_vtbl *)operator new(v114, (std::align_val_t)8uLL);
          v116 = (std::__shared_weak_count *)operator new();
          v117 = v116;
          v116->__shared_owners_ = 0;
          v118 = (unint64_t *)&v116->__shared_owners_;
          v116->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v116->__shared_weak_owners_ = 0;
          v116[1].__vftable = v115;
          *(_QWORD *)v213 = v115;
          *(_QWORD *)&v213[8] = v115;
          *(_QWORD *)&v213[16] = v116;
          do
            v119 = __ldxr(v118);
          while (__stxr(v119 + 1, v118));
          v214 = 0uLL;
          v215 = 0;
          do
            v120 = __ldaxr(v118);
          while (__stlxr(v120 - 1, v118));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v117);
          }
          v121 = *(_QWORD *)v213;
          v122 = _os_log_pack_fill();
          v123 = *(_DWORD *)(a1 + 1864);
          v124 = *(_DWORD *)(a1 + 2368);
          *(_DWORD *)v122 = 67109376;
          *(_DWORD *)(v122 + 4) = v123;
          *(_WORD *)(v122 + 8) = 1024;
          *(_DWORD *)(v122 + 10) = v124;
          v125 = operator new();
          v126 = *(unsigned __int8 *)(v178 + 39);
          v127 = v176;
          if ((v126 & 0x80u) != 0)
          {
            v127 = *(_QWORD *)(v178 + 16);
            v126 = *(_QWORD *)(v178 + 24);
          }
          *(_QWORD *)v125 = v121;
          *(_OWORD *)(v125 + 8) = *(_OWORD *)&v213[8];
          *(_OWORD *)&v213[8] = 0uLL;
          *(_OWORD *)(v125 + 24) = v214;
          v214 = 0uLL;
          *(_QWORD *)(v125 + 40) = v127;
          *(_QWORD *)(v125 + 48) = v126;
          *(_BYTE *)(v125 + 56) = 16;
          v211 = 0;
          v212 = v125;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v99 + 24) + 40))(*(_QWORD *)(v99 + 24), &v212);
          v128 = v212;
          v212 = 0;
          if (v128)
          {
            v129 = *(std::__shared_weak_count **)(v128 + 32);
            if (v129)
            {
              v130 = (unint64_t *)&v129->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            v132 = *(std::__shared_weak_count **)(v128 + 16);
            if (v132)
            {
              v133 = (unint64_t *)&v132->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            MEMORY[0x212BC6398](v128, 0x10F0C40B62ED6C6);
            v135 = v211;
            v211 = 0;
            if (v135)
            {
              v136 = *(std::__shared_weak_count **)(v135 + 32);
              if (v136)
              {
                v137 = (unint64_t *)&v136->__shared_owners_;
                do
                  v138 = __ldaxr(v137);
                while (__stlxr(v138 - 1, v137));
                if (!v138)
                {
                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                  std::__shared_weak_count::__release_weak(v136);
                }
              }
              v139 = *(std::__shared_weak_count **)(v135 + 16);
              if (v139)
              {
                v140 = (unint64_t *)&v139->__shared_owners_;
                do
                  v141 = __ldaxr(v140);
                while (__stlxr(v141 - 1, v140));
                if (!v141)
                {
                  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                  std::__shared_weak_count::__release_weak(v139);
                }
              }
              MEMORY[0x212BC6398](v135, 0x10F0C40B62ED6C6);
            }
          }
          v142 = (std::__shared_weak_count *)*((_QWORD *)&v214 + 1);
          v143 = v180;
          if (*((_QWORD *)&v214 + 1))
          {
            v144 = (unint64_t *)(*((_QWORD *)&v214 + 1) + 8);
            do
              v145 = __ldaxr(v144);
            while (__stlxr(v145 - 1, v144));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
          v146 = *(std::__shared_weak_count **)&v213[16];
          if (*(_QWORD *)&v213[16])
          {
            v147 = (unint64_t *)(*(_QWORD *)&v213[16] + 8);
            do
              v148 = __ldaxr(v147);
            while (__stlxr(v148 - 1, v147));
            if (!v148)
            {
              ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
              std::__shared_weak_count::__release_weak(v146);
            }
          }
        }
        else
        {
          os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
          v149 = *(_DWORD *)(a1 + 1864);
          v150 = *(_DWORD *)(a1 + 2368);
          *(_DWORD *)v213 = 67109376;
          *(_DWORD *)&v213[4] = v149;
          *(_WORD *)&v213[8] = 1024;
          *(_DWORD *)&v213[10] = v150;
          v151 = (void *)_os_log_send_and_compose_impl();
          v143 = v180;
          if (v151)
            free(v151);
        }
        if (v143)
        {
          sub_20E8C003C((uint64_t)&v201, "MLPosePredictionFilter takes %d IMU measurements between two poses, but gets %d", *(_DWORD *)(a1 + 1864), *(_DWORD *)(a1 + 2368));
          sub_20E863570((uint64_t)&v201);
        }
        sub_20E863570((uint64_t)&v201);
        v152 = v209;
        if (v209)
        {
          v153 = (unint64_t *)&v209->__shared_owners_;
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
        }
        goto LABEL_202;
      }
    }
    memmove(v107, v105, v104);
    goto LABEL_135;
  }
  v96 = 0;
LABEL_203:
  v155 = vextq_s8(v197, v197, 8uLL).u64[0];
  *(_DWORD *)(a1 + 2368) = 0;
  *(double *)(a1 + 1896) = v5;
  *(_BYTE *)(a1 + 1904) = 1;
  v156 = *(double *)(a1 + 1928);
  v157 = *(int8x16_t *)v18;
  *(_QWORD *)&v158 = vextq_s8(v157, v157, 8uLL).u64[0];
  v159 = *(double *)(a1 + 1960);
  v160 = *(int8x16_t *)(a1 + 1944);
  *(_QWORD *)&v161 = vextq_s8(v160, v160, 8uLL).u64[0];
  _D4 = *(double *)(a1 + 1992);
  v163 = *(int8x16_t *)(a1 + 1976);
  *(_QWORD *)&v164 = vextq_s8(v163, v163, 8uLL).u64[0];
  _Q20 = *(float64x2_t *)(a1 + 2008);
  _Q21.f64[0] = v156;
  _Q21.f64[1] = v159;
  _D22 = *(double *)(a1 + 2024);
  v168 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(*v18, (int64x2_t)v160), vnegq_f64(_Q20).f64[0]), (float64x2_t)vzip2q_s64(*v18, (int64x2_t)v160), _Q20, 1), _Q21, _D22, 0);
  _Q21.f64[0] = *(float64_t *)(a1 + 1984);
  __asm
  {
    FMLS            D2, D21, V20.D[1]
    FMLS            D2, D4, V22.D[0]
  }
  if (v96)
    *(_BYTE *)(a1 + 2176) = 1;
  *(_QWORD *)&v171.f64[0] = v197.i64[0];
  *(_QWORD *)&v171.f64[1] = v155;
  *(float64x2_t *)(a1 + 2048) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v171, *(double *)v157.i64), v189, *(double *)v160.i64), v198, *(double *)v163.i64), (float64x2_t)0, v182);
  *(float64x2_t *)(a1 + 2064) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v192, *(double *)v157.i64), v186, *(double *)v160.i64), (float64x2_t)*(unint64_t *)&v200, *(double *)v163.i64), (float64x2_t)0, v194);
  *(float64x2_t *)(a1 + 2080) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v171, v158), v189, v161), v198, v164), (float64x2_t)0, v182);
  *(float64x2_t *)(a1 + 2096) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v192, v158), v186, v161), (float64x2_t)*(unint64_t *)&v200, v164), (float64x2_t)0, v194);
  *(float64x2_t *)(a1 + 2112) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v171, v156), v189, v159), v198, _D4), (float64x2_t)0, v182);
  *(float64x2_t *)(a1 + 2128) = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v192, v156), v186, v159), (float64x2_t)*(unint64_t *)&v200, _D4), (float64x2_t)0, v194);
  *(float64x2_t *)(a1 + 2144) = vaddq_f64(v182, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v171, v168.f64[0]), v189, v168, 1), v198, _D2));
  *(float64x2_t *)(a1 + 2160) = vaddq_f64(v194, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v192, v168.f64[0]), v186, v168, 1), (float64x2_t)*(unint64_t *)&v200, _D2));
  v172 = *(unsigned __int8 *)(a1 + 2040);
  *v18 = (int64x2_t)v197;
  *(float64x2_t *)(a1 + 1928) = v192;
  *(float64x2_t *)(a1 + 1944) = v189;
  *(float64x2_t *)(a1 + 1960) = v186;
  *(float64x2_t *)(a1 + 1976) = v198;
  *(_OWORD *)(a1 + 1992) = *(unint64_t *)&v200;
  *(float64x2_t *)(a1 + 2008) = v182;
  *(float64x2_t *)(a1 + 2024) = v194;
  if (!v172)
    *(_BYTE *)(a1 + 2040) = 1;
  v173 = *(unsigned __int8 *)(a1 + 2208);
  *(_QWORD *)(v3 + 16) = v184;
  *(_QWORD *)&v174 = v199.i64[0];
  *((_QWORD *)&v174 + 1) = v196;
  *(_OWORD *)v3 = v174;
  if (v173)
  {
    if (!*(_BYTE *)(a1 + 2224))
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 2208) = 1;
    if (!*(_BYTE *)(a1 + 2224))
      return;
  }
  if (*(_BYTE *)(a1 + 2280))
  {
    v175 = *(double *)(a1 + 2216);
    if (v175 + 0.001 >= v5 && (*(_BYTE *)(a1 + 2344) || vabdd_f64(v5, v175) <= 0.001))
      sub_20F1E6460(a1);
  }
}

void sub_20F1E5A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  if (*(_BYTE *)(v37 - 184))
  {
    if (*(char *)(v37 - 185) < 0)
      operator delete(*(void **)(v37 - 208));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F1E5A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  sub_20E86E8C4((uint64_t *)(v37 - 216));
  sub_20E86E8C4((uint64_t *)(v37 - 224));
  sub_20E86E658(v37 - 208);
  sub_20E863714((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20F1E5B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20E860DA4(exception_object);
}

uint64_t sub_20F1E5C00(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  double v10;

  v4 = *(double *)a2;
  result = kdebug_trace();
  if (*(_BYTE *)(a1 + 2224)
    && v4 <= *(double *)(a1 + 2216)
    && (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/MLPosePredictionFilter.cpp", 141, (uint64_t)"timestamp > *latest_imu_timestamp_", 34, (uint64_t)"The timestamp of imu measurements must increase monotonically", 61, (void (*)(void **))sub_21023DDB0), (_DWORD)result)|| *(_DWORD *)(a1 + 2368) >= *(_DWORD *)(a1 + 1864)&& (result = sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/MLPosePredictionFilter.cpp", 144, (uint64_t)"num_imu_processed_since_last_processed_pose_ < num_imu_per_pose_", 64, (uint64_t)&unk_210298D35, 0, (void (*)(void **))sub_21023DDB0), (_DWORD)result))
  {
    abort();
  }
  *(double *)(a1 + 2216) = v4;
  *(_BYTE *)(a1 + 2224) = 1;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned __int8 *)(a1 + 2280);
  v9 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 2232) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 2248) = v6;
  *(_OWORD *)(a1 + 2256) = v9;
  *(_QWORD *)(a1 + 2272) = v7;
  if (v8)
  {
    if (!*(_BYTE *)(a1 + 1904))
      return result;
  }
  else
  {
    *(_BYTE *)(a1 + 2280) = 1;
    if (!*(_BYTE *)(a1 + 1904))
      return result;
  }
  if (*(_BYTE *)(a1 + 2176))
  {
    v10 = *(double *)(a1 + 1896);
    if (v4 + 0.001 >= v10 && (*(_BYTE *)(a1 + 2344) || vabdd_f64(v10, v4) <= 0.001))
      return sub_20F1E6460(a1);
  }
  return result;
}

_OWORD *sub_20F1E5D74(uint64_t a1)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;

  *(_OWORD *)(a1 + 2376) = *(_OWORD *)(a1 + 2352);
  *(_QWORD *)(a1 + 2392) = *(_QWORD *)(a1 + 1896);
  *(_BYTE *)(a1 + 2400) = *(_BYTE *)(a1 + 1904);
  v2 = (_OWORD *)(a1 + 1912);
  v3 = (_OWORD *)(a1 + 2408);
  if (*(unsigned __int8 *)(a1 + 2536) != *(unsigned __int8 *)(a1 + 2040))
  {
    if (!*(_BYTE *)(a1 + 2536))
    {
      v18 = *(_OWORD *)(a1 + 1992);
      *(_OWORD *)(a1 + 2472) = *(_OWORD *)(a1 + 1976);
      *(_OWORD *)(a1 + 2488) = v18;
      v19 = *(_OWORD *)(a1 + 2024);
      *(_OWORD *)(a1 + 2504) = *(_OWORD *)(a1 + 2008);
      *(_OWORD *)(a1 + 2520) = v19;
      v20 = *(_OWORD *)(a1 + 1928);
      *v3 = *v2;
      *(_OWORD *)(a1 + 2424) = v20;
      v21 = *(_OWORD *)(a1 + 1960);
      *(_OWORD *)(a1 + 2440) = *(_OWORD *)(a1 + 1944);
      *(_OWORD *)(a1 + 2456) = v21;
      *(_BYTE *)(a1 + 2536) = 1;
      v8 = (_OWORD *)(a1 + 2048);
      v9 = (_OWORD *)(a1 + 2544);
      v10 = *(unsigned __int8 *)(a1 + 2672);
      if (v10 != *(unsigned __int8 *)(a1 + 2176))
        goto LABEL_12;
LABEL_8:
      if (v10)
      {
        v11 = v8[5];
        v9[4] = v8[4];
        v9[5] = v11;
        v12 = v8[7];
        v9[6] = v8[6];
        v9[7] = v12;
        v13 = v8[1];
        *v9 = *v8;
        v9[1] = v13;
        v14 = v8[3];
        v9[2] = v8[2];
        v9[3] = v14;
        v15 = a1 + 2184;
        v16 = a1 + 2680;
        v17 = *(unsigned __int8 *)(a1 + 2704);
        if (v17 == *(unsigned __int8 *)(a1 + 2208))
          goto LABEL_15;
        goto LABEL_18;
      }
LABEL_14:
      v15 = a1 + 2184;
      v16 = a1 + 2680;
      v17 = *(unsigned __int8 *)(a1 + 2704);
      if (v17 == *(unsigned __int8 *)(a1 + 2208))
        goto LABEL_15;
LABEL_18:
      if (v17)
      {
        *(_BYTE *)(a1 + 2704) = 0;
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)v15;
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
        *(_BYTE *)(a1 + 2704) = 1;
      }
      goto LABEL_21;
    }
    *(_BYTE *)(a1 + 2536) = 0;
LABEL_7:
    v8 = (_OWORD *)(a1 + 2048);
    v9 = (_OWORD *)(a1 + 2544);
    v10 = *(unsigned __int8 *)(a1 + 2672);
    if (v10 != *(unsigned __int8 *)(a1 + 2176))
      goto LABEL_12;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a1 + 2536))
    goto LABEL_7;
  v4 = *(_OWORD *)(a1 + 1992);
  *(_OWORD *)(a1 + 2472) = *(_OWORD *)(a1 + 1976);
  *(_OWORD *)(a1 + 2488) = v4;
  v5 = *(_OWORD *)(a1 + 2024);
  *(_OWORD *)(a1 + 2504) = *(_OWORD *)(a1 + 2008);
  *(_OWORD *)(a1 + 2520) = v5;
  v6 = *(_OWORD *)(a1 + 1928);
  *v3 = *v2;
  *(_OWORD *)(a1 + 2424) = v6;
  v7 = *(_OWORD *)(a1 + 1960);
  *(_OWORD *)(a1 + 2440) = *(_OWORD *)(a1 + 1944);
  *(_OWORD *)(a1 + 2456) = v7;
  v8 = (_OWORD *)(a1 + 2048);
  v9 = (_OWORD *)(a1 + 2544);
  v10 = *(unsigned __int8 *)(a1 + 2672);
  if (v10 == *(unsigned __int8 *)(a1 + 2176))
    goto LABEL_8;
LABEL_12:
  if (v10)
  {
    *(_BYTE *)(a1 + 2672) = 0;
    goto LABEL_14;
  }
  v22 = v8[5];
  v9[4] = v8[4];
  v9[5] = v22;
  v23 = v8[7];
  v9[6] = v8[6];
  v9[7] = v23;
  v24 = v8[1];
  *v9 = *v8;
  v9[1] = v24;
  v25 = v8[3];
  v9[2] = v8[2];
  v9[3] = v25;
  *(_BYTE *)(a1 + 2672) = 1;
  v15 = a1 + 2184;
  v16 = a1 + 2680;
  v17 = *(unsigned __int8 *)(a1 + 2704);
  if (v17 != *(unsigned __int8 *)(a1 + 2208))
    goto LABEL_18;
LABEL_15:
  if (v17)
  {
    *(_OWORD *)v16 = *(_OWORD *)v15;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
  }
LABEL_21:
  *(_QWORD *)(a1 + 2712) = *(_QWORD *)(a1 + 2216);
  *(_BYTE *)(a1 + 2720) = *(_BYTE *)(a1 + 2224);
  v26 = (_OWORD *)(a1 + 2232);
  v27 = (_OWORD *)(a1 + 2728);
  if (*(unsigned __int8 *)(a1 + 2776) == *(unsigned __int8 *)(a1 + 2280))
  {
    if (*(_BYTE *)(a1 + 2776))
    {
      v28 = *(_OWORD *)(a1 + 2248);
      *v27 = *v26;
      *(_OWORD *)(a1 + 2744) = v28;
      *(_OWORD *)(a1 + 2760) = *(_OWORD *)(a1 + 2264);
    }
  }
  else if (*(_BYTE *)(a1 + 2776))
  {
    *(_BYTE *)(a1 + 2776) = 0;
  }
  else
  {
    v29 = *(_OWORD *)(a1 + 2248);
    *v27 = *v26;
    *(_OWORD *)(a1 + 2744) = v29;
    *(_OWORD *)(a1 + 2760) = *(_OWORD *)(a1 + 2264);
    *(_BYTE *)(a1 + 2776) = 1;
  }
  *(_QWORD *)(a1 + 2784) = *(_QWORD *)(a1 + 2336);
  *(_BYTE *)(a1 + 2792) = *(_BYTE *)(a1 + 2344);
  *(_DWORD *)(a1 + 2800) = *(_DWORD *)(a1 + 2368);
  sub_20E867E00((_QWORD *)(a1 + 2808), *(char **)(a1 + 1816), *(char **)(a1 + 1824), (uint64_t)(*(_QWORD *)(a1 + 1824) - *(_QWORD *)(a1 + 1816)) >> 2);
  return sub_20EE7BA48(a1 + 2832, *(__int128 **)(a1 + 1840), *(__int128 **)(a1 + 1848), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1848) - *(_QWORD *)(a1 + 1840)) >> 4));
}

_OWORD *sub_20F1E5FFC(uint64_t a1)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;

  *(_OWORD *)(a1 + 2352) = *(_OWORD *)(a1 + 2376);
  *(_QWORD *)(a1 + 1896) = *(_QWORD *)(a1 + 2392);
  *(_BYTE *)(a1 + 1904) = *(_BYTE *)(a1 + 2400);
  v2 = (_OWORD *)(a1 + 2408);
  v3 = (_OWORD *)(a1 + 1912);
  if (*(unsigned __int8 *)(a1 + 2040) != *(unsigned __int8 *)(a1 + 2536))
  {
    if (!*(_BYTE *)(a1 + 2040))
    {
      v18 = *(_OWORD *)(a1 + 2488);
      *(_OWORD *)(a1 + 1976) = *(_OWORD *)(a1 + 2472);
      *(_OWORD *)(a1 + 1992) = v18;
      v19 = *(_OWORD *)(a1 + 2520);
      *(_OWORD *)(a1 + 2008) = *(_OWORD *)(a1 + 2504);
      *(_OWORD *)(a1 + 2024) = v19;
      v20 = *(_OWORD *)(a1 + 2424);
      *v3 = *v2;
      *(_OWORD *)(a1 + 1928) = v20;
      v21 = *(_OWORD *)(a1 + 2456);
      *(_OWORD *)(a1 + 1944) = *(_OWORD *)(a1 + 2440);
      *(_OWORD *)(a1 + 1960) = v21;
      *(_BYTE *)(a1 + 2040) = 1;
      v8 = (_OWORD *)(a1 + 2544);
      v9 = (_OWORD *)(a1 + 2048);
      v10 = *(unsigned __int8 *)(a1 + 2176);
      if (v10 != *(unsigned __int8 *)(a1 + 2672))
        goto LABEL_12;
LABEL_8:
      if (v10)
      {
        v11 = v8[5];
        v9[4] = v8[4];
        v9[5] = v11;
        v12 = v8[7];
        v9[6] = v8[6];
        v9[7] = v12;
        v13 = v8[1];
        *v9 = *v8;
        v9[1] = v13;
        v14 = v8[3];
        v9[2] = v8[2];
        v9[3] = v14;
        v15 = a1 + 2680;
        v16 = a1 + 2184;
        v17 = *(unsigned __int8 *)(a1 + 2208);
        if (v17 == *(unsigned __int8 *)(a1 + 2704))
          goto LABEL_15;
        goto LABEL_18;
      }
LABEL_14:
      v15 = a1 + 2680;
      v16 = a1 + 2184;
      v17 = *(unsigned __int8 *)(a1 + 2208);
      if (v17 == *(unsigned __int8 *)(a1 + 2704))
        goto LABEL_15;
LABEL_18:
      if (v17)
      {
        *(_BYTE *)(a1 + 2208) = 0;
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)v15;
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
        *(_BYTE *)(a1 + 2208) = 1;
      }
      goto LABEL_21;
    }
    *(_BYTE *)(a1 + 2040) = 0;
LABEL_7:
    v8 = (_OWORD *)(a1 + 2544);
    v9 = (_OWORD *)(a1 + 2048);
    v10 = *(unsigned __int8 *)(a1 + 2176);
    if (v10 != *(unsigned __int8 *)(a1 + 2672))
      goto LABEL_12;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a1 + 2040))
    goto LABEL_7;
  v4 = *(_OWORD *)(a1 + 2488);
  *(_OWORD *)(a1 + 1976) = *(_OWORD *)(a1 + 2472);
  *(_OWORD *)(a1 + 1992) = v4;
  v5 = *(_OWORD *)(a1 + 2520);
  *(_OWORD *)(a1 + 2008) = *(_OWORD *)(a1 + 2504);
  *(_OWORD *)(a1 + 2024) = v5;
  v6 = *(_OWORD *)(a1 + 2424);
  *v3 = *v2;
  *(_OWORD *)(a1 + 1928) = v6;
  v7 = *(_OWORD *)(a1 + 2456);
  *(_OWORD *)(a1 + 1944) = *(_OWORD *)(a1 + 2440);
  *(_OWORD *)(a1 + 1960) = v7;
  v8 = (_OWORD *)(a1 + 2544);
  v9 = (_OWORD *)(a1 + 2048);
  v10 = *(unsigned __int8 *)(a1 + 2176);
  if (v10 == *(unsigned __int8 *)(a1 + 2672))
    goto LABEL_8;
LABEL_12:
  if (v10)
  {
    *(_BYTE *)(a1 + 2176) = 0;
    goto LABEL_14;
  }
  v22 = v8[5];
  v9[4] = v8[4];
  v9[5] = v22;
  v23 = v8[7];
  v9[6] = v8[6];
  v9[7] = v23;
  v24 = v8[1];
  *v9 = *v8;
  v9[1] = v24;
  v25 = v8[3];
  v9[2] = v8[2];
  v9[3] = v25;
  *(_BYTE *)(a1 + 2176) = 1;
  v15 = a1 + 2680;
  v16 = a1 + 2184;
  v17 = *(unsigned __int8 *)(a1 + 2208);
  if (v17 != *(unsigned __int8 *)(a1 + 2704))
    goto LABEL_18;
LABEL_15:
  if (v17)
  {
    *(_OWORD *)v16 = *(_OWORD *)v15;
    *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
  }
LABEL_21:
  *(_QWORD *)(a1 + 2216) = *(_QWORD *)(a1 + 2712);
  *(_BYTE *)(a1 + 2224) = *(_BYTE *)(a1 + 2720);
  v26 = (_OWORD *)(a1 + 2728);
  v27 = (_OWORD *)(a1 + 2232);
  if (*(unsigned __int8 *)(a1 + 2280) == *(unsigned __int8 *)(a1 + 2776))
  {
    if (*(_BYTE *)(a1 + 2280))
    {
      v28 = *(_OWORD *)(a1 + 2744);
      *v27 = *v26;
      *(_OWORD *)(a1 + 2248) = v28;
      *(_OWORD *)(a1 + 2264) = *(_OWORD *)(a1 + 2760);
    }
  }
  else if (*(_BYTE *)(a1 + 2280))
  {
    *(_BYTE *)(a1 + 2280) = 0;
  }
  else
  {
    v29 = *(_OWORD *)(a1 + 2744);
    *v27 = *v26;
    *(_OWORD *)(a1 + 2248) = v29;
    *(_OWORD *)(a1 + 2264) = *(_OWORD *)(a1 + 2760);
    *(_BYTE *)(a1 + 2280) = 1;
  }
  *(_QWORD *)(a1 + 2336) = *(_QWORD *)(a1 + 2784);
  *(_BYTE *)(a1 + 2344) = *(_BYTE *)(a1 + 2792);
  *(_DWORD *)(a1 + 2368) = *(_DWORD *)(a1 + 2800);
  sub_20E867E00((_QWORD *)(a1 + 1816), *(char **)(a1 + 2808), *(char **)(a1 + 2816), (uint64_t)(*(_QWORD *)(a1 + 2816) - *(_QWORD *)(a1 + 2808)) >> 2);
  return sub_20EE7BA48(a1 + 1840, *(__int128 **)(a1 + 2832), *(__int128 **)(a1 + 2840), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 2840) - *(_QWORD *)(a1 + 2832)) >> 4));
}

uint64_t sub_20F1E6284(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = *(void **)(a1 + 2832);
  if (v2)
  {
    *(_QWORD *)(a1 + 2840) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 2808);
  if (v3)
  {
    *(_QWORD *)(a1 + 2816) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 1840);
  if (v4)
  {
    *(_QWORD *)(a1 + 1848) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 1816);
  if (v5)
  {
    *(_QWORD *)(a1 + 1824) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 1792);
  if (v6)
  {
    *(_QWORD *)(a1 + 1800) = v6;
    operator delete(v6);
  }
  v7 = *(_QWORD *)(a1 + 1720);
  *(_QWORD *)(a1 + 1720) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (!*(_BYTE *)(a1 + 1680) || (*(char *)(a1 + 1679) & 0x80000000) == 0)
  {
    v8 = *(void **)(a1 + 1504);
    if (!v8)
      goto LABEL_17;
    goto LABEL_16;
  }
  operator delete(*(void **)(a1 + 1656));
  v8 = *(void **)(a1 + 1504);
  if (v8)
  {
LABEL_16:
    *(_QWORD *)(a1 + 1512) = v8;
    operator delete(v8);
  }
LABEL_17:
  if (*(char *)(a1 + 1479) < 0)
  {
    operator delete(*(void **)(a1 + 1456));
    v9 = *(void **)(a1 + 1424);
    if (!v9)
      return a1;
    goto LABEL_19;
  }
  v9 = *(void **)(a1 + 1424);
  if (v9)
  {
LABEL_19:
    *(_QWORD *)(a1 + 1432) = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_20F1E636C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A68198);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A68198))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A68190);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A68198);
  }
  *a1 = qword_254A68190;
}

void sub_20F1E6408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A68198);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A68198);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1E6460(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  unsigned __int8 v14;
  const char *v15;
  size_t v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  double v28;
  double v29;
  size_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  float64x2_t *v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  double v73;
  float64x2_t v75;
  float64x2_t v76;
  double v77;
  double v78;
  float64x2_t v84;
  float64x2_t v88;
  double v91;
  double v92;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  float64x2_t v97;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  int64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  int8x16_t v112;
  int8x16_t v113;
  float64x2_t v114;
  float64x2_t v115;
  int64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  int8x16_t v120;
  int8x16_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float v127;
  int v128;
  size_t v129;
  unint64_t v130;
  _OWORD *v131;
  uint64_t v132;
  uint64_t v133;
  const void *v134;
  const char *v135;
  FILE *v136;
  float64x2_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float64x2_t v140;
  unint64_t v141;
  uint64_t v142;
  double *v143;
  double *v144;
  unsigned __int8 v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 v148;
  uint64_t v149;
  float64x2_t v151;
  double v152;
  double cosval;
  __double2 v154;
  double v155;
  double v156;
  double v158;
  double v159;
  int8x16_t v160;
  double v161;
  double v162;
  float64x2_t v163;
  float64x2_t v164;
  double v165;
  double v166;
  float64x2_t v167;
  float64x2_t v168;
  double v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  double v175;
  double v176;
  uint64_t v177;
  float64x2_t v178;
  double v179;
  double v180;
  float64x2_t v181;
  float64x2_t v183;
  double v184;
  float64x2_t v185;
  float64x2_t v187;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  double v214;
  float64x2_t v216;
  double v217;
  double v219;
  float64x2_t v220;
  float64x2_t v221;
  int v222;
  size_t v223;
  unint64_t v224;
  float *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  const void *v229;
  const char *v230;
  FILE *v231;
  unint64_t v232;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  uint64_t v242;
  float64x2_t v243;
  double v244;
  float64x2_t v245;
  double v246;
  float64x2_t v247;
  double v248;
  float64x2_t v249;
  float64_t v250;
  float64x2_t v251;
  double v252;
  double v253;
  uint64_t v254;
  float64x2_t v255;
  double v256;
  unint64_t v257;
  float64x2_t v258;
  float64x2_t v259;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  int v261;
  const char *v262;
  int v263;
  const char *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  uint64_t v267[5];
  int v268;
  double *v269[2];
  uint64_t v270;
  _OWORD __dst[3];
  size_t v272;
  unint64_t v273;
  char v274;
  uint64_t v275;

  v275 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2224))
  {
    v2 = 0xBFF0000000000000;
    if (*(_BYTE *)(a1 + 1904))
      goto LABEL_3;
LABEL_5:
    v3 = 0xBFF0000000000000;
    goto LABEL_6;
  }
  v2 = *(_QWORD *)(a1 + 2216);
  if (!*(_BYTE *)(a1 + 1904))
    goto LABEL_5;
LABEL_3:
  v3 = *(_QWORD *)(a1 + 1896);
LABEL_6:
  v267[1] = v2;
  v267[2] = v3;
  v267[3] = 0;
  v267[4] = 0;
  v268 = 733228860;
  kdebug_trace();
  v4 = *(double *)(a1 + 2216);
  if (!*(_BYTE *)(a1 + 2344))
    goto LABEL_100;
  v5 = v4 - *(double *)(a1 + 2336);
  v6 = *(double *)(a1 + 1880);
  if (vabdd_f64(v5, v6) <= v6 * 0.09)
    goto LABEL_100;
  if (!*(_BYTE *)(a1 + 1688))
    goto LABEL_100;
  sub_20F1E636C(v267);
  if (**(int **)(v267[0] + 56) > 2)
    goto LABEL_100;
  v7 = *(unsigned __int8 *)(v267[0] + 72);
  v8 = sub_20E8C31DC(v267[0], "OSLogSurrogateAppender", 1, 0);
  v9 = v8;
  if (!v7 && !v8)
    goto LABEL_100;
  *(_QWORD *)&v259.f64[0] = v267;
  *(std::chrono::steady_clock::time_point *)&v259.f64[1] = (std::chrono::steady_clock::time_point)std::chrono::steady_clock::now().__d_.__rep_;
  rep = std::chrono::system_clock::now().__d_.__rep_;
  v261 = 2;
  v262 = "unknown file";
  v263 = 294;
  v265 = 0;
  v266 = 0;
  v264 = "unknown function";
  v10 = v267[0];
  v11 = v267[0] + 16;
  if (*(char *)(v267[0] + 39) < 0)
  {
    v13 = *(const char **)(v267[0] + 16);
    v12 = *(_QWORD *)(v267[0] + 24);
  }
  else
  {
    v12 = *(unsigned __int8 *)(v267[0] + 39);
    v13 = (const char *)(**(_QWORD **)&v259.f64[0] + 16);
  }
  v14 = atomic_load((unsigned __int8 *)&qword_254A4A510);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
  {
    sub_20E9E46F8((uint64_t)__dst);
    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)__dst);
    if (BYTE8(__dst[1]) && SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A4A510);
  }
  if (byte_254A4A4F8[23] >= 0)
    v15 = byte_254A4A4F8;
  else
    v15 = *(const char **)byte_254A4A4F8;
  if (byte_254A4A4F8[23] >= 0)
    v16 = byte_254A4A4F8[23];
  else
    v16 = *(_QWORD *)&byte_254A4A4F8[8];
  *(_QWORD *)&__dst[0] = os_log_create(v15, v13);
  v17 = (char *)__dst + 8;
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v16 >= 0x17)
  {
    v257 = v9;
    v18 = v13;
    v19 = v10;
    v20 = v7;
    v21 = v11;
    v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v22 = v16 | 7;
    v23 = v22 + 1;
    v17 = (char *)operator new(v22 + 1);
    *(_QWORD *)&__dst[1] = v16;
    *((_QWORD *)&__dst[1] + 1) = v23 | 0x8000000000000000;
    *((_QWORD *)&__dst[0] + 1) = v17;
    v11 = v21;
    v7 = v20;
    v10 = v19;
    v13 = v18;
    v9 = v257;
    goto LABEL_29;
  }
  HIBYTE(__dst[1]) = v16;
  if (v16)
LABEL_29:
    memmove(v17, v15, v16);
  v17[v16] = 0;
  LOBYTE(__dst[2]) = 1;
  v24 = (char *)&__dst[2] + 8;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v12 >= 0x17)
  {
    v25 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v25 = v12 | 7;
    v26 = v25 + 1;
    v24 = (char *)operator new(v25 + 1);
    v272 = v12;
    v273 = v26 | 0x8000000000000000;
    *((_QWORD *)&__dst[2] + 1) = v24;
  }
  else
  {
    HIBYTE(v273) = v12;
    if (!v12)
      goto LABEL_38;
  }
  memmove(v24, v13, v12);
LABEL_38:
  v24[v12] = 0;
  v274 = 1;
  v27 = *(NSObject **)&__dst[0];
  if (SHIBYTE(v273) < 0)
    operator delete(*((void **)&__dst[2] + 1));
  if (LOBYTE(__dst[2]) && SHIBYTE(__dst[1]) < 0)
    operator delete(*((void **)&__dst[0] + 1));
  if (*(_QWORD *)&__dst[0])
    os_release(*(void **)&__dst[0]);
  v28 = v6 * 1000.0;
  v29 = v5 * 1000.0;
  if (v9 && *(_QWORD *)(v9 + 24))
  {
    v30 = _os_log_pack_size();
    v31 = (std::__shared_weak_count_vtbl *)operator new(v30, (std::align_val_t)8uLL);
    v32 = (std::__shared_weak_count *)operator new();
    v33 = v32;
    v32->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = v31;
    *(_QWORD *)&__dst[0] = v31;
    *((_QWORD *)&__dst[0] + 1) = v31;
    *(_QWORD *)&__dst[1] = v32;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
    memset((char *)&__dst[1] + 8, 0, 24);
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v33);
    }
    v37 = *(_QWORD *)&__dst[0];
    v38 = _os_log_pack_fill();
    *(_DWORD *)v38 = 134218240;
    *(double *)(v38 + 4) = v28;
    *(_WORD *)(v38 + 12) = 2048;
    *(double *)(v38 + 14) = v29;
    v39 = operator new();
    v40 = *(unsigned __int8 *)(v10 + 39);
    if ((v40 & 0x80u) == 0)
      v41 = v11;
    else
      v41 = *(_QWORD *)(v10 + 16);
    if ((v40 & 0x80u) != 0)
      v40 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)v39 = v37;
    *(_OWORD *)(v39 + 8) = *(_OWORD *)((char *)__dst + 8);
    *((_QWORD *)&__dst[0] + 1) = 0;
    *(_QWORD *)&__dst[1] = 0;
    *(_OWORD *)(v39 + 24) = *(_OWORD *)((char *)&__dst[1] + 8);
    *((_QWORD *)&__dst[1] + 1) = 0;
    *(_QWORD *)&__dst[2] = 0;
    *(_QWORD *)(v39 + 40) = v41;
    *(_QWORD *)(v39 + 48) = v40;
    *(_BYTE *)(v39 + 56) = 2;
    v270 = 0;
    v269[0] = (double *)v39;
    (*(void (**)(_QWORD, double **))(**(_QWORD **)(v9 + 24) + 40))(*(_QWORD *)(v9 + 24), v269);
    v42 = v269[0];
    v269[0] = 0;
    if (v42)
    {
      v43 = (std::__shared_weak_count *)*((_QWORD *)v42 + 4);
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      v46 = (std::__shared_weak_count *)*((_QWORD *)v42 + 2);
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      MEMORY[0x212BC6398](v42, 0x10F0C40B62ED6C6);
      v49 = v270;
      v270 = 0;
      if (v49)
      {
        v50 = *(std::__shared_weak_count **)(v49 + 32);
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v53 = *(std::__shared_weak_count **)(v49 + 16);
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        MEMORY[0x212BC6398](v49, 0x10F0C40B62ED6C6);
      }
    }
    v56 = *(std::__shared_weak_count **)&__dst[2];
    if (*(_QWORD *)&__dst[2])
    {
      v57 = (unint64_t *)(*(_QWORD *)&__dst[2] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = *(std::__shared_weak_count **)&__dst[1];
    if (*(_QWORD *)&__dst[1])
    {
      v60 = (unint64_t *)(*(_QWORD *)&__dst[1] + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  else
  {
    os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG);
    LODWORD(__dst[0]) = 134218240;
    *(double *)((char *)__dst + 4) = v28;
    WORD6(__dst[0]) = 2048;
    *(double *)((char *)__dst + 14) = v29;
    v62 = (void *)_os_log_send_and_compose_impl();
    if (v62)
      free(v62);
  }
  if (v7)
  {
    sub_20E8C003C((uint64_t)&v259, "LSTM expects interval of %.2fms between adjacent steps, but gets %.2fms", v28, v29);
    sub_20E863570((uint64_t)&v259);
  }
  sub_20E863570((uint64_t)&v259);
  v63 = v266;
  if (v266)
  {
    v64 = (unint64_t *)&v266->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
LABEL_100:
  v66 = (float64x2_t *)(a1 + 1912);
  memset(__dst, 0, sizeof(__dst));
  v259 = (float64x2_t)(unint64_t)(a1 + 2048);
  v269[0] = (double *)__dst;
  v269[1] = 0;
  sub_20E95B988((float64x2_t **)&v259, v269);
  v69.f64[0] = *(float64_t *)&__dst[1];
  v258 = v69;
  v253 = *(double *)(a1 + 2160);
  v255 = (float64x2_t)__dst[0];
  v251 = *(float64x2_t *)(a1 + 2144);
  v70.f64[0] = *(float64_t *)(a1 + 2064);
  _Q0 = *(int64x2_t *)(a1 + 2048);
  _Q1 = *(int64x2_t *)(a1 + 2080);
  v73 = *(double *)(a1 + 2128);
  _Q16 = *(float64x2_t *)(a1 + 2112);
  v75 = (float64x2_t)vzip1q_s64(_Q0, _Q1);
  v76 = (float64x2_t)vzip2q_s64(_Q0, _Q1);
  v70.f64[1] = *(float64_t *)(a1 + 2096);
  v77 = *(double *)(a1 + 1960);
  v78 = *(double *)(a1 + 1992);
  _Q1.i64[0] = *(_QWORD *)(a1 + 1920);
  __asm { FMLA            D7, D1, V16.D[1] }
  v84 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, *(double *)(a1 + 1944)), v76, *(float64x2_t *)(a1 + 1944), 1), v70, v77);
  _D3 = *(_QWORD *)(a1 + 1952);
  __asm { FMLA            D7, D3, V16.D[1] }
  _D2 = _D7 + v73 * v77;
  v243 = v75;
  v245 = v76;
  v247 = v70;
  v249 = _Q16;
  v88 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, *(double *)(a1 + 1976)), v76, *(float64x2_t *)(a1 + 1976), 1), v70, v78);
  _D5 = *(_QWORD *)(a1 + 1984);
  __asm { FMLA            D7, D5, V16.D[1] }
  v91 = _D7 + v73 * v78;
  v92 = *(double *)(a1 + 2200);
  _Q7 = *(float64x2_t *)(a1 + 2184);
  __asm { FMLA            D0, D2, V7.D[1] }
  *(double *)_Q0.i64 = *(double *)_Q0.i64 + v91 * v92;
  v234 = (float64x2_t)_Q0;
  v235 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v75, v66->f64[0]), v76, *v66, 1), v70, *(double *)(a1 + 1928)), _Q7.f64[0]), v84, _Q7, 1), v88, v92);
  v259 = v235;
  rep = _Q0.i64[0];
  if (!*(_BYTE *)(a1 + 2280)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/MLPosePredictionFilter.cpp", 307, (uint64_t)"latest_imu_measurement_", 23, (uint64_t)&unk_210298D35, 0, (void (*)(void **))sub_21023DDB0))
  {
LABEL_179:
    abort();
  }
  v241 = *(float64x2_t *)(a1 + 2232);
  v239 = *(float64x2_t *)(a1 + 2288);
  v240 = *(float64x2_t *)(a1 + 2248);
  v237 = *(float64x2_t *)(a1 + 2304);
  v238 = *(float64x2_t *)(a1 + 2264);
  v236 = *(float64x2_t *)(a1 + 2320);
  v94 = (uint64_t)(*(_QWORD *)(a1 + 1512) - *(_QWORD *)(a1 + 1504)) >> 3;
  v95 = *(_QWORD *)(a1 + 1840);
  v96 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 1848) - v95) >> 4);
  if (v94 <= v96)
  {
    if (v94 < v96)
      *(_QWORD *)(a1 + 1848) = v95 + 144 * v94;
  }
  else
  {
    sub_20F1A69B0((void **)(a1 + 1840), v94 - v96);
  }
  v97 = v255;
  _V5.D[1] = v249.f64[1];
  _Q2 = vmulq_f64(v249, v251);
  _D3 = v251.f64[1];
  __asm { FMLA            D2, D3, V5.D[1] }
  _Q2.f64[0] = _Q2.f64[0] + v73 * v253;
  v101 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v243, v251.f64[0]), v245, v251, 1), v247, v253));
  v102 = vnegq_f64(_Q2);
  v103 = vsubq_f64(v238, v236);
  v104 = vsubq_f64(v240, v237);
  v111.f64[1] = v241.f64[1];
  v105 = vsubq_f64(v241, v239);
  v106 = (float64x2_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL);
  *(_QWORD *)&v107.f64[0] = vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL).u64[0];
  v111.f64[0] = *(float64_t *)(a1 + 1552);
  *(_QWORD *)&v97.f64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
  v108 = vmulq_n_f64(v97, v111.f64[0]);
  v110.f64[1] = v258.f64[1];
  v109 = (int64x2_t)vmulq_f64(v258, v111);
  v110.f64[0] = *(float64_t *)(a1 + 1544);
  v67.f64[0] = *(double *)(a1 + 1536) * v110.f64[0];
  v111.f64[0] = *(float64_t *)(a1 + 1888);
  v68.f64[0] = v111.f64[0] * v111.f64[0];
  *(_QWORD *)&v101.f64[1] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
  v112 = (int8x16_t)vdivq_f64(vmulq_f64(v67, v102), v68);
  v113 = (int8x16_t)vdivq_f64(vmulq_n_f64(v101, v67.f64[0]), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v111.f64[0] * v111.f64[0]), 0));
  v114 = (float64x2_t)vzip1q_s64(v109, (int64x2_t)v113);
  *(float32x4_t *)(a1 + 1728) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v108), v114);
  *(_QWORD *)&v105.f64[1] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
  v114.f64[0] = *(float64_t *)(a1 + 1576);
  v115 = vsubq_f64(v104, v114);
  v104.f64[0] = *(float64_t *)(a1 + 1624);
  v116 = (int64x2_t)vmulq_f64(v115, v104);
  v117 = vmulq_f64(vsubq_f64(v105, *(float64x2_t *)(a1 + 1560)), *(float64x2_t *)(a1 + 1608));
  *(_QWORD *)&v117.f64[1] = vdupq_laneq_s64((int64x2_t)v117, 1).u64[0];
  *(float32x4_t *)(a1 + 1744) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vextq_s8(v113, v112, 8uLL)), v117);
  v107.f64[1] = v103.f64[0];
  v103.f64[0] = *(float64_t *)(a1 + 1600);
  v118 = vmlaq_n_f64(vnegq_f64(*(float64x2_t *)(a1 + 1584)), v107, v111.f64[0]);
  v119 = vmlaq_f64(vnegq_f64(v103), v111, v106);
  v106.f64[0] = *(float64_t *)(a1 + 1648);
  v120 = (int8x16_t)vmulq_f64(v119, v106);
  v121 = (int8x16_t)vmulq_f64(v118, *(float64x2_t *)(a1 + 1632));
  v122 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vzip1q_s64(v116, (int64x2_t)v121)), (float64x2_t)vextq_s8(v121, v120, 8uLL));
  *(float64x2_t *)(a1 + 1760) = v122;
  if (*(_BYTE *)(a1 + 1528))
  {
    v123 = v235;
    v122.f64[0] = *(float64_t *)(a1 + 1488);
    v124 = vmulq_f64(v234, v122);
    *(_QWORD *)&v123.f64[1] = vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL).u64[0];
    v125 = vmulq_n_f64(v123, v122.f64[0]);
    v126.f64[0] = v111.f64[0];
    v126.f64[1] = v111.f64[0];
    *(float32x2_t *)(a1 + 1776) = vcvt_f32_f64(vmulq_n_f64(vdivq_f64(v125, v126), v110.f64[0]));
    v127 = vmulq_f64(v110, vdivq_f64(v124, v111)).f64[0];
    *(float *)(a1 + 1784) = v127;
  }
  if (*(_BYTE *)(a1 + 1680))
  {
    v128 = *(char *)(a1 + 1679);
    if (v128 >= 0)
      v129 = *(unsigned __int8 *)(a1 + 1679);
    else
      v129 = *(_QWORD *)(a1 + 1664);
    v130 = v129 + 10;
    if (v129 + 10 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_180;
    if (v130 >= 0x17)
    {
      v132 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v130 | 7) != 0x17)
        v132 = v130 | 7;
      v133 = v132 + 1;
      v131 = operator new(v132 + 1);
      *((_QWORD *)&__dst[0] + 1) = v129 + 10;
      *(_QWORD *)&__dst[1] = v133 | 0x8000000000000000;
      *(_QWORD *)&__dst[0] = v131;
    }
    else
    {
      memset(__dst, 0, 24);
      v131 = __dst;
      BYTE7(__dst[1]) = v129 + 10;
      if (!v129)
        goto LABEL_123;
    }
    if (v128 >= 0)
      v134 = (const void *)(a1 + 1656);
    else
      v134 = *(const void **)(a1 + 1656);
    memmove(v131, v134, v129);
LABEL_123:
    strcpy((char *)v131 + v129, "_input.csv");
    if ((SBYTE7(__dst[1]) & 0x80u) == 0)
      v135 = (const char *)__dst;
    else
      v135 = *(const char **)&__dst[0];
    v136 = fopen(v135, "a");
    fprintf(v136, "%.16f,%.16f,%.16f,%.16f,%.16f,%.16f,%.16f,%.16f,%.16f,%.16f,%.16f,%.16f,%.16f\n", v4, *(float *)(a1 + 1728), *(float *)(a1 + 1732), *(float *)(a1 + 1736), *(float *)(a1 + 1740), *(float *)(a1 + 1744), *(float *)(a1 + 1748), *(float *)(a1 + 1752), *(float *)(a1 + 1756), *(float *)(a1 + 1760), *(float *)(a1 + 1764), *(float *)(a1 + 1768), *(float *)(a1 + 1772));
    fclose(v136);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1720) + 16))(*(_QWORD *)(a1 + 1720), a1 + 1728, *(_QWORD *)(a1 + 1816), *(_QWORD *)(a1 + 1792), *(_QWORD *)(a1 + 1816));
  if (*(_QWORD *)(a1 + 1512) != *(_QWORD *)(a1 + 1504))
  {
    v141 = 0;
    v142 = *(_QWORD *)(a1 + 1792);
    do
    {
      if (fabsf(*(float *)(v142 + 4 * v141)) >= 100.0)
      {
        sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/MLPosePredictionFilter.cpp", 364, (uint64_t)"fabs(x_out[i]) < 1e2", 20, (uint64_t)&unk_210298D35, 0, (void (*)(void **))sub_21023DDB0);
        v145 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v145 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68 || byte_254A6DE70)
        {
          v146 = qword_254A6DE40;
          v147 = qword_254A6DE48;
          while (v146 != v147)
          {
            (*(void (**)(_QWORD, const char *, uint64_t, void *, _QWORD))v146)(*(_QWORD *)(v146 + 8), "fabs(x_out[i]) < 1e2", 20, &unk_210298D35, 0);
            v146 += 16;
          }
        }
        v148 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
        if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
        {
          __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DE78);
        }
        if (!byte_254A6DE68)
          goto LABEL_179;
        qword_254A6DE58(unk_254A6DE60, "fabs(x_out[i]) < 1e2", 20, &unk_210298D35, 0);
      }
      ++v141;
      v143 = *(double **)(a1 + 1512);
      v144 = *(double **)(a1 + 1504);
    }
    while (v141 < 2 * ((((char *)v143 - (char *)v144) >> 2) + v143 - v144));
    if (v144 != v143)
    {
      v149 = 0;
      __asm { FMOV            V28.2D, #1.0 }
      v151 = 0uLL;
      v242 = *((_QWORD *)&_Q28 + 1);
      do
      {
        v214 = *(double *)(a1 + 1888);
        v137.f64[0] = 1.0;
        if (*(_BYTE *)(a1 + 1529))
          v137.f64[0] = (v4 - *(double *)(a1 + 1896) + v214 * *v144) / *(double *)(a1 + 1872) + 1.0;
        v138.i64[0] = *(_QWORD *)v142;
        v138.i32[2] = *(_DWORD *)(v142 + 8);
        _Q2 = vcvtq_f64_f32(*(float32x2_t *)v142);
        v216 = vcvt_hight_f64_f32(v138);
        *(_QWORD *)&v155 = *(_OWORD *)&vmulq_f64(v137, v216);
        _Q17 = vmulq_n_f64(_Q2, v137.f64[0]);
        *(_QWORD *)&v156 = vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL).u64[0];
        v139.i64[0] = *(_QWORD *)(v142 + 12);
        v139.i32[2] = *(_DWORD *)(v142 + 20);
        v140.f64[0] = v137.f64[0] * (v214 * (v214 * *(double *)(a1 + 1536)));
        *(_QWORD *)&v159 = *(_OWORD *)&vmulq_f64(v140, vcvt_hight_f64_f32(v139));
        v160 = (int8x16_t)vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v139.f32), v140.f64[0]);
        *(_QWORD *)&v158 = vextq_s8(v160, v160, 8uLL).u64[0];
        _Q2.f64[0] = vmuld_lane_f64(v137.f64[0], _Q2, 1);
        v217 = _Q17.f64[1];
        __asm { FMLA            D3, D2, V17.D[1] }
        v219 = vmlad_n_f64(_D3, v137.f64[0] * v216.f64[0], v155);
        if (v219 >= 0.0000002635)
        {
          v152 = sqrt(v219);
          v254 = v160.i64[0];
          v256 = v159;
          v250 = _Q17.f64[0];
          v252 = v158;
          v246 = v155;
          v248 = v156;
          v244 = v219;
          v154 = __sincos_stret(v152);
          cosval = v154.__cosval;
          v155 = v246;
          v156 = v248;
          _Q17.f64[0] = v250;
          v158 = v252;
          v160.i64[0] = v254;
          v159 = v256;
          v151 = 0uLL;
          *((_QWORD *)&_Q28 + 1) = v242;
          v161 = v154.__sinval / v152;
          v162 = 1.0 / v244 * (1.0 - v154.__cosval);
        }
        else
        {
          v162 = 0.5 - v219 * (v219 / -720.0 + 0.0416666667);
          v161 = 1.0 - v219 * (0.166666667 - v219 * (v219 / -5040.0 + 0.00833333333));
          cosval = 1.0 - v219 * v162;
        }
        v163.f64[0] = _Q17.f64[0];
        v163.f64[1] = v156;
        v164 = vmulq_n_f64(v163, v162);
        v165 = cosval + v155 * (v155 * v162);
        v166 = v155 * v164.f64[0];
        _Q17.f64[1] = v155;
        v167.f64[1] = v164.f64[1];
        v167.f64[0] = v161;
        v168 = vmulq_f64(_Q17, v167);
        v169 = v217 * v161;
        v170 = vmulq_n_f64(v164, v156);
        v167.f64[0] = v217 * v161 + v166;
        v164.f64[1] = v161;
        v171 = vmulq_f64(_Q17, v164);
        v172 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v170.f64[0], 0);
        v172.f64[0] = cosval;
        v173 = vaddq_f64(v172, v171);
        v174 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v171, 1);
        *(_QWORD *)&v171.f64[0] = *(_OWORD *)&vsubq_f64(v170, v174);
        v174.f64[1] = cosval;
        v171.f64[1] = vaddq_f64(v170, v174).f64[1];
        v175 = v166 - v169;
        v170.f64[0] = vaddvq_f64(v168);
        v167.f64[1] = v168.f64[1] - v168.f64[0];
        v176 = *v144++;
        v177 = *(_QWORD *)(a1 + 1840) + v149;
        *(double *)(v177 + 128) = v4 + v214 * v176;
        v178 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v173, *(double *)v160.i64), v171, v158), v167, v159);
        v174.f64[0] = v175 * *(double *)v160.i64 + v170.f64[0] * v158 + v165 * v159;
        v179 = v175;
        v168.f64[0] = v170.f64[0];
        v180 = v165;
        v181.f64[1] = *((float64_t *)&_Q28 + 1);
        *(_QWORD *)&v181.f64[0] = *(_OWORD *)&vnegq_f64(v174);
        _Q21.f64[0] = *(float64_t *)(a1 + 2064);
        v183 = *(float64x2_t *)(a1 + 2048);
        v184 = *(double *)(a1 + 2096);
        v185 = *(float64x2_t *)(a1 + 2080);
        _D19 = *(double *)(a1 + 2128);
        v187 = *(float64x2_t *)(a1 + 2112);
        _D25 = *(double *)(a1 + 2160);
        _Q26 = *(float64x2_t *)(a1 + 2144);
        v190 = vmulq_n_f64(v173, _Q21.f64[0]);
        v191 = vmulq_n_f64((float64x2_t)*(unint64_t *)&v179, _Q21.f64[0]);
        _Q21.f64[1] = v184;
        v192 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v183, (int64x2_t)v185), vnegq_f64(_Q26).f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v183, (int64x2_t)v185), _Q26, 1), _Q21, _D25, 0);
        _Q21.f64[0] = *(float64_t *)(a1 + 2120);
        __asm
        {
          FMLS            D27, D21, V26.D[1]
          FMLS            D27, D19, V25.D[0]
        }
        v195 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v173, v183.f64[0]), v171, v185.f64[0]), v167, v187.f64[0]), v151, v178);
        v196 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v179, v183.f64[0]), (float64x2_t)*(unint64_t *)&v168.f64[0], v185.f64[0]), (float64x2_t)*(unint64_t *)&v180, v187.f64[0]), v151, v181);
        v197 = vmlsq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v173, v183, 1), v171, v185, 1), v167, v187, 1), v151, v178);
        v198 = vmlaq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)*(unint64_t *)&v179, v183, 1), (float64x2_t)*(unint64_t *)&v168.f64[0], v185, 1), (float64x2_t)*(unint64_t *)&v180, v187, 1), v151, v181);
        v199 = vmlsq_f64(vmlaq_n_f64(vmlaq_n_f64(v190, v171, v184), v167, _D19), v151, v178);
        v200 = vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(v191, (float64x2_t)*(unint64_t *)&v168.f64[0], v184), (float64x2_t)*(unint64_t *)&v180, _D19), v151, v181);
        v201 = vsubq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v173, v192.f64[0]), v171, v192, 1), v167, _D27), v178);
        v137 = vaddq_f64(v181, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)&v179, v192.f64[0]), (float64x2_t)*(unint64_t *)&v168.f64[0], v192, 1), (float64x2_t)*(unint64_t *)&v180, _D27));
        v202 = *(float64x2_t *)(a1 + 1928);
        v204 = *(float64x2_t *)(a1 + 1944);
        v203 = *(float64x2_t *)(a1 + 1960);
        v206 = *(float64x2_t *)(a1 + 1976);
        v205 = *(float64x2_t *)(a1 + 1992);
        v208 = *(float64x2_t *)(a1 + 2008);
        v207 = *(float64x2_t *)(a1 + 2024);
        v209 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v66->f64[0]), v197, *v66, 1), v199, v202.f64[0]), v201, v202, 1);
        v210 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v196, v66->f64[0]), v198, *v66, 1), v200, v202.f64[0]), v137, v202, 1);
        v211 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v204.f64[0]), v197, v204, 1), v199, v203.f64[0]), v201, v203, 1);
        v139 = (float32x4_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v196, v204.f64[0]), v198, v204, 1), v200, v203.f64[0]), v137, v203, 1);
        v212 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v206.f64[0]), v197, v206, 1), v199, v205.f64[0]), v201, v205, 1);
        v140 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v196, v206.f64[0]), v198, v206, 1), v200, v205.f64[0]), v137, v205, 1);
        v213 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v208.f64[0]), v197, v208, 1), v199, v207.f64[0]), v201, v207, 1);
        *(float64x2_t *)v177 = v209;
        *(float64x2_t *)(v177 + 16) = v210;
        *(float64x2_t *)(v177 + 32) = v211;
        *(float32x4_t *)(v177 + 48) = v139;
        *(float64x2_t *)(v177 + 64) = v212;
        *(float64x2_t *)(v177 + 80) = v140;
        v138 = (float32x4_t)vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v196, v208.f64[0]), v198, v208, 1), v200, v207.f64[0]), v137, v207, 1);
        *(float64x2_t *)(v177 + 96) = v213;
        *(float32x4_t *)(v177 + 112) = v138;
        v149 += 144;
        v142 += 24;
      }
      while (v144 != v143);
    }
  }
  v220 = vsubq_f64(*(float64x2_t *)(a1 + 2232), *(float64x2_t *)(a1 + 2288));
  v221 = vsubq_f64(*(float64x2_t *)(a1 + 2264), *(float64x2_t *)(a1 + 2320));
  __dst[1] = vsubq_f64(*(float64x2_t *)(a1 + 2248), *(float64x2_t *)(a1 + 2304));
  __dst[2] = v221;
  __dst[0] = v220;
  sub_20F1E7A48((double *)__dst, v259.f64, a1 + 8, a1 + 2352, v221);
  if (*(_BYTE *)(a1 + 1680))
  {
    v222 = *(char *)(a1 + 1679);
    if (v222 >= 0)
      v223 = *(unsigned __int8 *)(a1 + 1679);
    else
      v223 = *(_QWORD *)(a1 + 1664);
    v224 = v223 + 11;
    if (v223 + 11 <= 0x7FFFFFFFFFFFFFF7)
    {
      v225 = *(float **)(a1 + 1792);
      if (v224 >= 0x17)
      {
        v227 = (v224 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v224 | 7) != 0x17)
          v227 = v224 | 7;
        v228 = v227 + 1;
        v226 = (char *)operator new(v227 + 1);
        *((_QWORD *)&__dst[0] + 1) = v223 + 11;
        *(_QWORD *)&__dst[1] = v228 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v226;
      }
      else
      {
        memset(__dst, 0, 24);
        v226 = (char *)__dst;
        BYTE7(__dst[1]) = v223 + 11;
        if (!v223)
        {
LABEL_168:
          strcpy(&v226[v223], "_output.csv");
          if ((SBYTE7(__dst[1]) & 0x80u) == 0)
            v230 = (const char *)__dst;
          else
            v230 = *(const char **)&__dst[0];
          v231 = fopen(v230, "a");
          fprintf(v231, "%.16f", v4);
          if (*(_QWORD *)(a1 + 1512) != *(_QWORD *)(a1 + 1504))
          {
            v232 = 0;
            do
            {
              fprintf(v231, ",%.16f,%.16f,%.16f,%.16f,%.16f,%.16f", *v225, v225[1], v225[2], v225[3], v225[4], v225[5]);
              ++v232;
              v225 += 6;
            }
            while (v232 < (uint64_t)(*(_QWORD *)(a1 + 1512) - *(_QWORD *)(a1 + 1504)) >> 3);
          }
          fputc(10, v231);
          fclose(v231);
          if (SBYTE7(__dst[1]) < 0)
            operator delete(*(void **)&__dst[0]);
          goto LABEL_176;
        }
      }
      if (v222 >= 0)
        v229 = (const void *)(a1 + 1656);
      else
        v229 = *(const void **)(a1 + 1656);
      memmove(v226, v229, v223);
      goto LABEL_168;
    }
LABEL_180:
    sub_20E860B7C();
  }
LABEL_176:
  if (*(_BYTE *)(a1 + 2280))
    *(_BYTE *)(a1 + 2280) = 0;
  *(double *)(a1 + 2336) = v4;
  *(_BYTE *)(a1 + 2344) = 1;
  ++*(_DWORD *)(a1 + 2368);
  return kdebug_trace();
}

void sub_20F1E7914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  if (*(_BYTE *)(v67 - 216))
  {
    if (*(char *)(v67 - 217) < 0)
      operator delete(*(void **)(v67 - 240));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a57);
  sub_20E8E69C4((uint64_t)&a67);
  _Unwind_Resume(a1);
}

double *sub_20F1E7A48(double *result, double *a2, uint64_t a3, uint64_t a4, float64x2_t a5)
{
  double *v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  double *v18;
  double v19;
  unint64_t v20;
  uint64_t v22;
  double v23;
  double v24;
  double v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  double *v32;
  double v33;
  unint64_t v34;
  uint64_t v36;
  double v37;
  double v38;
  double v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  double *v45;
  double *v46;
  double v47;
  unint64_t v48;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double *v58;
  double *v59;
  double v60;
  unint64_t v61;
  uint64_t v63;
  double v64;
  double v65;
  float64x2_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  double *v71;
  double *v72;
  double v73;
  unint64_t v74;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  double *v84;
  double *v85;
  double v86;
  unint64_t v87;
  uint64_t v89;
  double v90;
  double v91;
  float64x2_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  double *v97;
  double *v98;
  double v99;
  unint64_t v100;
  uint64_t v102;
  double v103;
  double v104;
  double v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  double *v110;
  double *v111;
  double v112;
  unint64_t v113;
  uint64_t v115;
  double v116;
  double v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  double *v122;
  double *v123;
  double v124;
  unint64_t v125;
  uint64_t v127;
  double v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  double v142;
  int v143;
  double v144;
  BOOL v145;
  int v146;
  double v147;
  double v148;
  double v149;
  double v150;
  float64_t v151;
  float64_t v152;
  double v153;
  double v154;
  double v155;
  float64_t v156;
  float64_t v157;
  float64_t v158;
  float64_t v159;
  double v160;

  if (!*(_BYTE *)a3)
  {
    *(_QWORD *)a4 = 0x3FF0000000000000;
    return result;
  }
  v8 = result;
  v9 = *result;
  v10 = a3 + 144;
  v11 = a3 + 8;
  if (*(double *)(a3 + 144) < *result && *(double *)(a3 + 272) > v9)
  {
    v14 = 17;
    v15 = a3 + 144;
    do
    {
      v16 = v14 >> 1;
      v17 = (double *)(v15 + 8 * (v14 >> 1));
      v19 = *v17;
      v18 = v17 + 1;
      v14 += ~(v14 >> 1);
      if (v19 > v9)
        v14 = v16;
      else
        v15 = (unint64_t)v18;
    }
    while (v14);
    v20 = v15 - v10;
    if (v15 <= v10 || v15 >= a3 + 280)
    {
      result = (double *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/OODFusionUtils.cpp", 34, (uint64_t)"data_it > data.begin() && data_it < data.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        goto LABEL_159;
    }
    v22 = 8 * ((v20 >> 3) - 1);
    v23 = vabdd_f64(50.0, ((v9 - *(double *)(v10 + v22)) * *(double *)(v11 + (v20 & 0x7FFFFFFF8))+ (*(double *)(v10 + (v20 & 0x7FFFFFFF8)) - v9) * *(double *)(v11 + v22))/ (*(double *)(v10 + (v20 & 0x7FFFFFFF8)) - *(double *)(v10 + v22)));
    v13 = v23 + v23;
  }
  else
  {
    v13 = 100.0;
  }
  v159 = v13;
  v24 = v8[1];
  if (*(double *)(a3 + 280) < v24 && *(double *)(a3 + 408) > v24)
  {
    v27 = a3 + 280;
    v28 = 17;
    v29 = a3 + 280;
    do
    {
      v30 = v28 >> 1;
      v31 = (double *)(v29 + 8 * (v28 >> 1));
      v33 = *v31;
      v32 = v31 + 1;
      v28 += ~(v28 >> 1);
      if (v33 > v24)
        v28 = v30;
      else
        v29 = (unint64_t)v32;
    }
    while (v28);
    v34 = v29 - v27;
    if (v29 <= v27 || v29 >= a3 + 416)
    {
      result = (double *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/OODFusionUtils.cpp", 34, (uint64_t)"data_it > data.begin() && data_it < data.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        goto LABEL_159;
    }
    v36 = 8 * ((v34 >> 3) - 1);
    v37 = vabdd_f64(50.0, ((v24 - *(double *)(v27 + v36)) * *(double *)(v11 + (v34 & 0x7FFFFFFF8))+ (*(double *)(v27 + (v34 & 0x7FFFFFFF8)) - v24) * *(double *)(v11 + v36))/ (*(double *)(v27 + (v34 & 0x7FFFFFFF8)) - *(double *)(v27 + v36)));
    v26 = v37 + v37;
  }
  else
  {
    v26 = 100.0;
  }
  v158 = v26;
  v38 = v8[2];
  if (*(double *)(a3 + 416) < v38 && *(double *)(a3 + 544) > v38)
  {
    v41 = a3 + 416;
    v42 = 17;
    v43 = a3 + 416;
    do
    {
      v44 = v42 >> 1;
      v45 = (double *)(v43 + 8 * (v42 >> 1));
      v47 = *v45;
      v46 = v45 + 1;
      v42 += ~(v42 >> 1);
      if (v47 > v38)
        v42 = v44;
      else
        v43 = (unint64_t)v46;
    }
    while (v42);
    v48 = v43 - v41;
    if (v43 <= v41 || v43 >= a3 + 552)
    {
      result = (double *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/OODFusionUtils.cpp", 34, (uint64_t)"data_it > data.begin() && data_it < data.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        goto LABEL_159;
    }
    v50 = 8 * ((v48 >> 3) - 1);
    v51 = vabdd_f64(50.0, ((v38 - *(double *)(v41 + v50)) * *(double *)(v11 + (v48 & 0x7FFFFFFF8))+ (*(double *)(v41 + (v48 & 0x7FFFFFFF8)) - v38) * *(double *)(v11 + v50))/ (*(double *)(v41 + (v48 & 0x7FFFFFFF8)) - *(double *)(v41 + v50)));
    v40 = v51 + v51;
  }
  else
  {
    v40 = 100.0;
  }
  v157 = v40;
  v52 = v8[3];
  v53 = 100.0;
  if (*(double *)(a3 + 552) < v52 && *(double *)(a3 + 680) > v52)
  {
    v54 = a3 + 552;
    v55 = 17;
    v56 = a3 + 552;
    do
    {
      v57 = v55 >> 1;
      v58 = (double *)(v56 + 8 * (v55 >> 1));
      v60 = *v58;
      v59 = v58 + 1;
      v55 += ~(v55 >> 1);
      if (v60 > v52)
        v55 = v57;
      else
        v56 = (unint64_t)v59;
    }
    while (v55);
    v61 = v56 - v54;
    if (v56 <= v54 || v56 >= a3 + 688)
    {
      result = (double *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/OODFusionUtils.cpp", 34, (uint64_t)"data_it > data.begin() && data_it < data.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      if ((_DWORD)result)
        goto LABEL_159;
    }
    v63 = 8 * ((v61 >> 3) - 1);
    v64 = vabdd_f64(50.0, ((v52 - *(double *)(v54 + v63)) * *(double *)(v11 + (v61 & 0x7FFFFFFF8))+ (*(double *)(v54 + (v61 & 0x7FFFFFFF8)) - v52) * *(double *)(v11 + v63))/ (*(double *)(v54 + (v61 & 0x7FFFFFFF8)) - *(double *)(v54 + v63)));
    v53 = v64 + v64;
  }
  v65 = v8[4];
  v66.f64[0] = 100.0;
  v160 = v53;
  if (*(double *)(a3 + 688) < v65 && *(double *)(a3 + 816) > v65)
  {
    v67 = a3 + 688;
    v68 = 17;
    v69 = a3 + 688;
    do
    {
      v70 = v68 >> 1;
      v71 = (double *)(v69 + 8 * (v68 >> 1));
      v73 = *v71;
      v72 = v71 + 1;
      v68 += ~(v68 >> 1);
      if (v73 > v65)
        v68 = v70;
      else
        v69 = (unint64_t)v72;
    }
    while (v68);
    v74 = v69 - v67;
    if (v69 <= v67 || v69 >= a3 + 824)
    {
      result = (double *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/OODFusionUtils.cpp", 34, (uint64_t)"data_it > data.begin() && data_it < data.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v53 = v160;
      if ((_DWORD)result)
        goto LABEL_159;
    }
    v76 = 8 * ((v74 >> 3) - 1);
    v77 = vabdd_f64(50.0, ((v65 - *(double *)(v67 + v76)) * *(double *)(v11 + (v74 & 0x7FFFFFFF8))+ (*(double *)(v67 + (v74 & 0x7FFFFFFF8)) - v65) * *(double *)(v11 + v76))/ (*(double *)(v67 + (v74 & 0x7FFFFFFF8)) - *(double *)(v67 + v76)));
    v66.f64[0] = v77 + v77;
  }
  v78 = v8[5];
  v79 = 100.0;
  v156 = v66.f64[0];
  if (*(double *)(a3 + 824) < v78 && *(double *)(a3 + 952) > v78)
  {
    v80 = a3 + 824;
    v81 = 17;
    v82 = a3 + 824;
    do
    {
      v83 = v81 >> 1;
      v84 = (double *)(v82 + 8 * (v81 >> 1));
      v86 = *v84;
      v85 = v84 + 1;
      v81 += ~(v81 >> 1);
      if (v86 > v78)
        v81 = v83;
      else
        v82 = (unint64_t)v85;
    }
    while (v81);
    v87 = v82 - v80;
    if (v82 <= v80 || v82 >= a3 + 960)
    {
      result = (double *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/OODFusionUtils.cpp", 34, (uint64_t)"data_it > data.begin() && data_it < data.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v66.f64[0] = v156;
      v53 = v160;
      if ((_DWORD)result)
        goto LABEL_159;
    }
    v89 = 8 * ((v87 >> 3) - 1);
    v90 = vabdd_f64(50.0, ((v78 - *(double *)(v80 + v89)) * *(double *)(v11 + (v87 & 0x7FFFFFFF8))+ (*(double *)(v80 + (v87 & 0x7FFFFFFF8)) - v78) * *(double *)(v11 + v89))/ (*(double *)(v80 + (v87 & 0x7FFFFFFF8)) - *(double *)(v80 + v89)));
    v79 = v90 + v90;
  }
  v91 = *a2;
  v92.f64[0] = 100.0;
  if (*(double *)(a3 + 960) < *a2 && *(double *)(a3 + 1088) > v91)
  {
    v93 = a3 + 960;
    v94 = 17;
    v95 = a3 + 960;
    do
    {
      v96 = v94 >> 1;
      v97 = (double *)(v95 + 8 * (v94 >> 1));
      v99 = *v97;
      v98 = v97 + 1;
      v94 += ~(v94 >> 1);
      if (v99 > v91)
        v94 = v96;
      else
        v95 = (unint64_t)v98;
    }
    while (v94);
    v100 = v95 - v93;
    if (v95 <= v93 || v95 >= a3 + 1096)
    {
      v153 = v79;
      result = (double *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/OODFusionUtils.cpp", 34, (uint64_t)"data_it > data.begin() && data_it < data.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v79 = v153;
      v66.f64[0] = v156;
      v53 = v160;
      if ((_DWORD)result)
        goto LABEL_159;
    }
    v102 = 8 * ((v100 >> 3) - 1);
    v103 = vabdd_f64(50.0, ((v91 - *(double *)(v93 + v102)) * *(double *)(v11 + (v100 & 0x7FFFFFFF8))+ (*(double *)(v93 + (v100 & 0x7FFFFFFF8)) - v91) * *(double *)(v11 + v102))/ (*(double *)(v93 + (v100 & 0x7FFFFFFF8)) - *(double *)(v93 + v102)));
    v92.f64[0] = v103 + v103;
  }
  v104 = a2[1];
  v105 = 100.0;
  if (*(double *)(a3 + 1096) < v104 && *(double *)(a3 + 1224) > v104)
  {
    v106 = a3 + 1096;
    v107 = 17;
    v108 = a3 + 1096;
    do
    {
      v109 = v107 >> 1;
      v110 = (double *)(v108 + 8 * (v107 >> 1));
      v112 = *v110;
      v111 = v110 + 1;
      v107 += ~(v107 >> 1);
      if (v112 > v104)
        v107 = v109;
      else
        v108 = (unint64_t)v111;
    }
    while (v107);
    v113 = v108 - v106;
    if (v108 <= v106 || v108 >= a3 + 1232)
    {
      v151 = v92.f64[0];
      v154 = v79;
      result = (double *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/OODFusionUtils.cpp", 34, (uint64_t)"data_it > data.begin() && data_it < data.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
      v92.f64[0] = v151;
      v79 = v154;
      v66.f64[0] = v156;
      v53 = v160;
      if ((_DWORD)result)
        goto LABEL_159;
    }
    v115 = 8 * ((v113 >> 3) - 1);
    v116 = vabdd_f64(50.0, ((v104 - *(double *)(v106 + v115)) * *(double *)(v11 + (v113 & 0x7FFFFFFF8))+ (*(double *)(v106 + (v113 & 0x7FFFFFFF8)) - v104) * *(double *)(v11 + v115))/ (*(double *)(v106 + (v113 & 0x7FFFFFFF8)) - *(double *)(v106 + v115)));
    v105 = v116 + v116;
  }
  v117 = a2[2];
  a5.f64[0] = 100.0;
  if (*(double *)(a3 + 1232) >= v117 || *(double *)(a3 + 1360) <= v117)
    goto LABEL_138;
  v118 = a3 + 1232;
  v119 = 17;
  v120 = a3 + 1232;
  do
  {
    v121 = v119 >> 1;
    v122 = (double *)(v120 + 8 * (v119 >> 1));
    v124 = *v122;
    v123 = v122 + 1;
    v119 += ~(v119 >> 1);
    if (v124 > v117)
      v119 = v121;
    else
      v120 = (unint64_t)v123;
  }
  while (v119);
  v125 = v120 - v118;
  if (v120 <= v118 || v120 >= a3 + 1368)
  {
    v152 = v92.f64[0];
    v155 = v79;
    v150 = v105;
    result = (double *)sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/MLPosePrediction/src/OODFusionUtils.cpp", 34, (uint64_t)"data_it > data.begin() && data_it < data.end()", 46, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v105 = v150;
    v92.f64[0] = v152;
    v79 = v155;
    v66.f64[0] = v156;
    v53 = v160;
    if ((_DWORD)result)
LABEL_159:
      abort();
  }
  v127 = 8 * ((v125 >> 3) - 1);
  v128 = vabdd_f64(50.0, ((v117 - *(double *)(v118 + v127)) * *(double *)(v11 + (v125 & 0x7FFFFFFF8))+ (*(double *)(v118 + (v125 & 0x7FFFFFFF8)) - v117) * *(double *)(v11 + v127))/ (*(double *)(v118 + (v125 & 0x7FFFFFFF8)) - *(double *)(v118 + v127)));
  a5.f64[0] = v128 + v128;
LABEL_138:
  v92.f64[1] = v105;
  v66.f64[1] = v79;
  v129.f64[0] = v157;
  v129.f64[1] = v53;
  v130.f64[0] = v159;
  v130.f64[1] = v158;
  v131 = (float64x2_t)vdupq_n_s64(0x4059000029F16B12uLL);
  v132 = vsubq_f64(v131, v130);
  v133 = vsubq_f64(v131, v129);
  v134 = vsubq_f64(v131, v66);
  a5.f64[0] = 100.00001 - a5.f64[0];
  __asm { FMOV            V5.2D, #1.0 }
  v139 = vdivq_f64(_Q5, vsubq_f64(v131, v92));
  v140 = vdivq_f64(_Q5, v134);
  v141 = vdivq_f64(_Q5, v133);
  a5.f64[0] = -9.0
            / (vdivq_f64(_Q5, a5).f64[0]
             + v139.f64[1]
             + v139.f64[0]
             + v140.f64[1]
             + v140.f64[0]
             + v141.f64[1]
             + v141.f64[0]
             + vaddvq_f64(vdivq_f64(_Q5, v132)))
            + 100.0;
  if (a5.f64[0] <= *(double *)(a3 + 1400))
  {
    switch(*(_DWORD *)(a4 + 12))
    {
      case 0:
        v142 = *(double *)(a3 + 1368);
        v143 = *(_DWORD *)(a4 + 8);
        v144 = (double)(v143 + 1);
        v145 = a5.f64[0] <= v142;
        if (a5.f64[0] <= v142)
          v146 = v143 + 1;
        else
          v146 = 0;
        v147 = 0.0;
        if (v145)
          v147 = v144;
        *(_DWORD *)(a4 + 8) = v146;
        if (*(double *)(a3 + 1392) <= v147)
          *(_DWORD *)(a4 + 12) = 2;
        return result;
      case 1:
        if (a5.f64[0] <= *(double *)(a3 + 1368))
          return result;
        goto LABEL_154;
      case 2:
        v148 = *(double *)(a3 + 1384) + *(double *)a4;
        *(double *)a4 = v148;
        if (a5.f64[0] <= *(double *)(a3 + 1368))
        {
          if (v148 >= 1.0)
          {
            *(_QWORD *)a4 = 0x3FF0000000000000;
            *(_DWORD *)(a4 + 12) = 1;
          }
        }
        else
        {
LABEL_154:
          *(_DWORD *)(a4 + 12) = 3;
        }
        return result;
      case 3:
        v149 = *(double *)a4 - *(double *)(a3 + 1376);
        *(double *)a4 = v149;
        if (v149 > 0.0)
          return result;
        *(_QWORD *)(a4 + 8) = 0;
        break;
      case 4:
        break;
      default:
        return result;
    }
  }
  else
  {
    *(_DWORD *)(a4 + 12) = 4;
  }
  *(_QWORD *)a4 = 0;
  return result;
}

uint64_t sub_20F1E8494(uint64_t a1, __int128 *a2)
{
  char **v4;
  char *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _OWORD *v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  *(_QWORD *)a1 = *((_QWORD *)a2 + 20);
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (char **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (char *)operator new(0x320uLL);
  *v4 = v5;
  v6 = v5 + 800;
  *(_QWORD *)(a1 + 32) = v5 + 800;
  bzero(v5, 0x320uLL);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 1;
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  *(_OWORD *)(a1 + 120) = a2[3];
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  *(_OWORD *)(a1 + 184) = a2[7];
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[10];
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  v16 = *(__int128 *)((char *)a2 + 184);
  v17 = *(__int128 *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 272) = *(__int128 *)((char *)a2 + 200);
  *(_OWORD *)(a1 + 288) = v17;
  *(_OWORD *)(a1 + 256) = v16;
  v18 = *(__int128 *)((char *)a2 + 232);
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 31);
  *(_OWORD *)(a1 + 304) = v18;
  v20 = a2[18];
  v19 = a2[19];
  v21 = a2[17];
  *(_QWORD *)(a1 + 392) = *((_QWORD *)a2 + 40);
  *(_OWORD *)(a1 + 360) = v20;
  *(_OWORD *)(a1 + 376) = v19;
  *(_OWORD *)(a1 + 344) = v21;
  *(_OWORD *)(a1 + 328) = a2[16];
  *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 328);
  if (*((char *)a2 + 359) < 0)
  {
    sub_20E860C04((_BYTE *)(a1 + 408), *((void **)a2 + 42), *((_QWORD *)a2 + 43));
  }
  else
  {
    v22 = a2[21];
    *(_QWORD *)(a1 + 424) = *((_QWORD *)a2 + 44);
    *(_OWORD *)(a1 + 408) = v22;
  }
  v23 = *(__int128 *)((char *)a2 + 376);
  v24 = *(__int128 *)((char *)a2 + 392);
  *(_OWORD *)(a1 + 432) = *(__int128 *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 448) = v23;
  *(_OWORD *)(a1 + 464) = v24;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 560) = *((_QWORD *)a2 + 22);
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  v25 = (char *)operator new(0x438uLL);
  *(_QWORD *)(a1 + 568) = v25;
  *(_QWORD *)(a1 + 584) = v25 + 1080;
  *(_QWORD *)(a1 + 576) = v25 + 1080;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 736) = 0;
  v26 = (char *)operator new(0x27100uLL);
  *(_QWORD *)(a1 + 720) = v26;
  *(_QWORD *)(a1 + 728) = v26;
  *(_QWORD *)(a1 + 736) = v26 + 160000;
  v27 = v26 + 8;
  v28 = 2000;
  do
  {
    *((_QWORD *)v27 - 1) = 0xBFF0000000000000;
    *(_OWORD *)v27 = 0uLL;
    *((_OWORD *)v27 + 1) = 0uLL;
    *((_OWORD *)v27 + 2) = 0uLL;
    *((_OWORD *)v27 + 3) = 0uLL;
    *((_QWORD *)v27 + 8) = 0;
    v27 += 80;
    --v28;
  }
  while (v28);
  *(_QWORD *)(a1 + 728) = v26 + 160000;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  v29 = operator new(0x100uLL);
  *(_QWORD *)(a1 + 768) = v29;
  *(_QWORD *)(a1 + 784) = 32;
  *(_QWORD *)(a1 + 776) = 2001;
  *v29 = 0u;
  v29[1] = 0u;
  v29[2] = 0u;
  v29[3] = 0u;
  v29[4] = 0u;
  v29[5] = 0u;
  v29[6] = 0u;
  v29[7] = 0u;
  v29[8] = 0u;
  v29[9] = 0u;
  v29[10] = 0u;
  v29[11] = 0u;
  v29[12] = 0u;
  v29[13] = 0u;
  v29[14] = 0u;
  v29[15] = 0u;
  v30 = *(_BYTE *)a2;
  v31 = *((_QWORD *)a2 + 17);
  v32 = *(__int128 *)((char *)a2 + 184);
  v33 = *(__int128 *)((char *)a2 + 216);
  *(_OWORD *)(a1 + 808) = *(__int128 *)((char *)a2 + 200);
  *(_OWORD *)(a1 + 824) = v33;
  *(_OWORD *)(a1 + 792) = v32;
  v34 = *(__int128 *)((char *)a2 + 232);
  *(_QWORD *)(a1 + 856) = *((_QWORD *)a2 + 31);
  *(_OWORD *)(a1 + 840) = v34;
  *(_OWORD *)(a1 + 864) = a2[16];
  v35 = a2[17];
  v36 = a2[18];
  v37 = a2[19];
  *(_QWORD *)(a1 + 928) = *((_QWORD *)a2 + 40);
  *(_OWORD *)(a1 + 896) = v36;
  *(_OWORD *)(a1 + 912) = v37;
  *(_OWORD *)(a1 + 880) = v35;
  *(_WORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = v30;
  *(_QWORD *)(a1 + 960) = v31;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1008) = 0x40239D013A92A305;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1192) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_QWORD *)(a1 + 1232) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_QWORD *)(a1 + 1264) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_QWORD *)(a1 + 1296) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_QWORD *)(a1 + 1328) = 3;
  *(_QWORD *)(a1 + 1360) = 6;
  *(_QWORD *)(a1 + 1392) = 9;
  *(_QWORD *)(a1 + 1424) = 12;
  *(_QWORD *)(a1 + 1456) = 15;
  *(_QWORD *)(a1 + 1672) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_BYTE *)(a1 + 1688) = 0;
  *(_BYTE *)(a1 + 1696) = 0;
  *(_BYTE *)(a1 + 1664) = 0;
  v38 = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a1 + 1704) = *(_OWORD *)(a1 + 256);
  *(_OWORD *)(a1 + 1720) = v38;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_OWORD *)(a1 + 2065) = 0u;
  *(_QWORD *)(a1 + 2088) = 0x4197D78400000000;
  *(_BYTE *)(a1 + 2184) = 0;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_BYTE *)(a1 + 2112) = 0;
  *(_OWORD *)(a1 + 1488) = xmmword_210314980;
  *(_QWORD *)(a1 + 1504) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_QWORD *)(a1 + 1512) = 0;
  *(_QWORD *)(a1 + 1528) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1560) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  return a1;
}

void sub_20F1E88CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (!*v2)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v1 + 24) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F1E8954(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, float64x2_t _Q4, double a8, float64x2_t a9)
{
  _QWORD *v11;
  double v12;
  uint64_t v13;
  double v14;
  unsigned __int8 v15;
  _QWORD *v16;
  int v17;
  std::chrono::steady_clock::time_point v18;
  std::chrono::steady_clock::time_point *v19;
  uint64_t *v20;
  unsigned __int8 v21;
  _QWORD *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  int8x16_t *v34;
  int8x16_t *v35;
  double v43;
  _BOOL4 v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  std::string::size_type v53;
  float64x2_t v54;
  __n128 v55;
  float64x2_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  double v68;
  unint64_t v69;
  double v71;
  double v72;
  unint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  __int128 v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  double v81;
  double v82;
  double v83;
  __int128 v84;
  __int128 v85;
  double v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  float64x2_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  double v97;
  double v101;
  double v102;
  double v103;
  double cosval;
  double v105;
  __double2 v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  __int128 v119;
  __int128 v120;
  int8x16_t v121;
  __int128 v122;
  double v123;
  __int128 v124;
  __int128 v125;
  double v126;
  double v127;
  long double v128;
  std::string *v129;
  __int128 v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::string *v142;
  __int128 v143;
  uint64_t v144;
  _BYTE *v145;
  uint64_t v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::string *v155;
  __int128 v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  __int128 v168;
  std::string *v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  std::string *v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  std::string *v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  std::string *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  std::string *v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  std::string *v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  std::string *v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  std::string *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  std::string *v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  std::string *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  std::string *v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  std::string *v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  __int128 v217;
  std::string *v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  std::string *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  std::string *v226;
  __int128 v227;
  uint64_t v228;
  __int128 v229;
  std::string *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  std::string *v234;
  __int128 v235;
  uint64_t v236;
  __int128 v237;
  std::string *v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  double v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  double v255;
  unsigned __int8 v256;
  _QWORD *v257;
  int v258;
  std::chrono::steady_clock::time_point v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  std::chrono::steady_clock::time_point *v265;
  uint64_t *v266;
  unsigned __int8 v267;
  char *v269;
  size_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t j;
  uint64_t v274;
  unint64_t v275;
  float64x2_t *v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  float64x2_t v280;
  unint64_t v281;
  unint64_t v282;
  float64x2_t v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  int8x16_t v290;
  double v291;
  uint64_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  unint64_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t *v302;
  float64x2_t v303;
  float64x2_t v304;
  unint64_t v305;
  uint64_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v312;
  float64x2_t v313;
  double v315;
  double v317;
  double v319;
  double v320;
  double v321;
  int8x16_t v324;
  float64x2_t v325;
  double v326;
  double v327;
  float64x2_t v328;
  float64x2_t v329;
  double v330;
  double v331;
  __double2 v332;
  __double2 v333;
  double v334;
  float64x2_t v335;
  float64x2_t v338;
  int8x16_t v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  int v346;
  uint64_t v347;
  _QWORD *v348;
  _QWORD *v349;
  double v350;
  uint64_t v351;
  long double v352;
  _QWORD *v353;
  float64x2_t v354;
  std::string::size_type v355;
  long double v356;
  _BOOL4 v357;
  _BYTE v358[24];
  uint64_t v359;
  std::string v360;
  uint64_t v361;
  _QWORD *v362;
  char v363;
  uint64_t v364;
  _QWORD *v365;
  BOOL v366;
  uint64_t v367;
  _BYTE v368[72];
  char v369;
  char v370;
  void *v371;
  char v372;
  void *__p;
  char v374;
  __int128 v375;
  uint64_t v376;
  std::string v377;
  std::string v378;

  v11 = (_QWORD *)(a1 + 720);
  if (!*(_QWORD *)(a1 + 760))
    goto LABEL_43;
  v12 = *(double *)a2;
  v13 = *(_QWORD *)(a1 + 752);
  if (v13)
  {
    v14 = v12 - *(double *)(*v11 + 80 * v13 - 80);
    if (v14 > 0.0)
      goto LABEL_7;
  }
  else
  {
    v14 = v12
        - *(double *)(*(_QWORD *)(a1 + 720) + 16 * ((uint64_t)(*(_QWORD *)(a1 + 728) - *(_QWORD *)(a1 + 720)) >> 4) - 80);
    if (v14 > 0.0)
      goto LABEL_7;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AttitudeFilter/src/AttitudeFilter.cpp", 57, (uint64_t)"dt > 0.", 7, (uint64_t)"IMU samples is out of order", 27, (void (*)(void **))sub_21023DDB0))
  {
    goto LABEL_349;
  }
LABEL_7:
  if (v14 <= 0.08)
    goto LABEL_43;
  v15 = atomic_load((unsigned __int8 *)&qword_254A681A0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254A681A0))
  {
    v348 = operator new(0x28uLL);
    v348[1] = 0;
    v348[2] = 0;
    *v348 = &off_24C9C4340;
    *((_BYTE *)v348 + 24) = 0;
    *((_BYTE *)v348 + 32) = 0;
    qword_254A681D0 = (uint64_t)(v348 + 3);
    qword_254A681D8 = (uint64_t)v348;
    unk_254A681E0 = 1000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A681D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A681A0);
  }
  v16 = (_QWORD *)qword_254A681D0;
  v17 = *(unsigned __int8 *)(qword_254A681D0 + 8);
  v18.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v17)
  {
    v19 = (std::chrono::steady_clock::time_point *)qword_254A681D0;
    if (!*(_BYTE *)(qword_254A681D0 + 8))
      *(_BYTE *)(qword_254A681D0 + 8) = 1;
LABEL_14:
    v19->__d_.__rep_ = v18.__d_.__rep_;
    v20 = sub_210219C18();
    v21 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
    {
      __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DDD0);
    }
    if (!atomic_load(&qword_254A5A450))
      goto LABEL_34;
    v23 = v11;
    *(_WORD *)v368 = 0;
    v24 = (char *)_os_log_send_and_compose_impl();
    v25 = strlen(v24);
    v360.__r_.__value_.__r.__words[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)&v360);
    v26 = v360.__r_.__value_.__r.__words[0];
    timespec_get((timespec *)&v360, 1);
    sub_210219E20(v368, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v20 + 1), (__int128 *)(v20 + 5), "Large IMU timestamp gap is detected", 0x23uLL, v24, v25, v26, &v360);
    std::mutex::lock(&stru_254A5A410);
    v27 = qword_254A5A458;
    for (i = unk_254A5A460; v27 != i; v27 += 40)
    {
      v29 = *(_QWORD *)(v27 + 32);
      if (!v29)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v29 + 48))(v29, v368);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v374 < 0)
    {
      operator delete(__p);
      v11 = v23;
      if ((v372 & 0x80000000) == 0)
      {
LABEL_21:
        if (!v370)
        {
LABEL_27:
          if (v368[56] && (v368[55] & 0x80000000) != 0)
            operator delete(*(void **)&v368[32]);
          if ((v368[31] & 0x80000000) != 0)
            operator delete(*(void **)&v368[8]);
          if (v24)
            free(v24);
LABEL_34:
          if (os_signpost_enabled((os_log_t)*v20))
          {
            *(_WORD *)v368 = 0;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_36;
        }
LABEL_25:
        if (v369 < 0)
          operator delete(*(void **)&v368[64]);
        goto LABEL_27;
      }
    }
    else
    {
      v11 = v23;
      if ((v372 & 0x80000000) == 0)
        goto LABEL_21;
    }
    operator delete(v371);
    if (!v370)
      goto LABEL_27;
    goto LABEL_25;
  }
  if (v18.__d_.__rep_ - *v16 >= 1000000000)
  {
    v19 = (std::chrono::steady_clock::time_point *)qword_254A681D0;
    goto LABEL_14;
  }
LABEL_36:
  v30 = *(_QWORD *)(a1 + 2104);
  if (v30)
  {
    v31 = *(void **)(v30 + 80);
    v32 = *(_QWORD *)(v30 + 88) - (_QWORD)v31;
    if (v32 >= 1)
      bzero(v31, 4 * (((unint64_t)v32 >> 2) - ((unint64_t)v32 > 3)) + 4);
    if (*(_BYTE *)(v30 + 112))
      *(_BYTE *)(v30 + 112) = 0;
  }
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1672) = 0;
  *(_QWORD *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_WORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a1 + 1464);
  if (sub_20EAF5B90())
  {
    v33 = sub_210219C18();
    sub_20EAF5CE0((uint64_t)v368, (uint64_t)v33, 0xEEEEB0B5B2B2EEEELL);
  }
LABEL_43:
  v34 = (int8x16_t *)(a1 + 1496);
  v35 = (int8x16_t *)(a1 + 1232);
  if (*(_DWORD *)(a1 + 64) != 1)
    goto LABEL_53;
  _Q0 = *(_OWORD *)(a2 + 8);
  _D4 = *(_QWORD *)(a2 + 40);
  __asm { FMLA            D3, D4, V1.D[1] }
  v43 = fabs(sqrt(_D3 + *(double *)(a2 + 48) * *(double *)(a2 + 48)) + -9.80665);
  _Q4.f64[0] = *(float64_t *)(a2 + 16);
  __asm { FMLA            D3, D4, V0.D[1] }
  v45 = sqrt(_D3 + *(double *)(a2 + 24) * *(double *)(a2 + 24)) < 0.05;
  v46 = v43 < 0.06 && v45;
  if (v46)
  {
    if (*(_QWORD *)(a1 + 760))
    {
      v47 = *(_QWORD *)(a1 + 752);
      if (v47)
      {
        v48 = *v11;
        v49 = *(_QWORD *)(a1 + 752);
      }
      else
      {
        v48 = *(_QWORD *)(a1 + 720);
        v49 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 728) - v48) >> 4);
      }
      if (*(double *)a2 - *(double *)(v48 + 80 * v49 - 80) > 0.08)
      {
        v47 = 0;
        *(_QWORD *)(a1 + 752) = 0;
        *(_QWORD *)(a1 + 744) = 0;
        *(_QWORD *)(a1 + 760) = 0;
      }
    }
    else
    {
      v47 = *(_QWORD *)(a1 + 752);
      v48 = *(_QWORD *)(a1 + 720);
    }
    v242 = v48 + 80 * v47;
    v243 = *(double *)a2;
    *(_OWORD *)v368 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)&v368[16] = *(_QWORD *)(a2 + 24);
    v360 = *(std::string *)(a2 + 32);
    *(_OWORD *)v358 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)&v358[16] = *(_QWORD *)(a2 + 72);
    *(double *)v242 = v243;
    v244 = *(_OWORD *)v368;
    *(_QWORD *)(v242 + 24) = *(_QWORD *)&v368[16];
    *(_OWORD *)(v242 + 8) = v244;
    v245 = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
    *(_QWORD *)(v242 + 48) = *((_QWORD *)&v360.__r_.__value_.__l + 2);
    *(_OWORD *)(v242 + 32) = v245;
    v246 = *(_OWORD *)v358;
    *(_QWORD *)(v242 + 72) = *(_QWORD *)&v358[16];
    *(_OWORD *)(v242 + 56) = v246;
    v247 = *(_QWORD *)(a1 + 720);
    v248 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 728) - v247) >> 4);
    v249 = *(_QWORD *)(a1 + 752) + 1;
    if (v249 >= v248)
      v250 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 728) - v247) >> 4);
    else
      v250 = 0;
    *(_QWORD *)(a1 + 752) = v249 - v250;
    v251 = *(_QWORD *)(a1 + 760);
    if (v251 == v248)
    {
      v252 = *(_QWORD *)(a1 + 744) + 1;
      if (v252 >= v248)
        v253 = v248;
      else
        v253 = 0;
      v254 = v252 - v253;
      *(_QWORD *)(a1 + 744) = v254;
    }
    else
    {
      *(_QWORD *)(a1 + 760) = v251 + 1;
      v254 = *(_QWORD *)(a1 + 744);
    }
    if (v249 != v250)
      v248 = v249 - v250;
    v255 = *(double *)(v247 + 80 * v248 - 80) - *(double *)(v247 + 80 * v254);
    *(double *)(a1 + 712) = v255;
    if (v255 >= *(double *)(a1 + 224))
    {
LABEL_285:
      v357 = v46;
      v256 = atomic_load((unsigned __int8 *)&qword_254A681A8);
      if ((v256 & 1) == 0 && __cxa_guard_acquire(&qword_254A681A8))
      {
        v349 = operator new(0x28uLL);
        v349[1] = 0;
        v349[2] = 0;
        *v349 = &off_24C9C4340;
        *((_BYTE *)v349 + 24) = 0;
        *((_BYTE *)v349 + 32) = 0;
        qword_254A681E8 = (uint64_t)(v349 + 3);
        qword_254A681F0 = (uint64_t)v349;
        unk_254A681F8 = 1000000000;
        __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A681E8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A681A8);
      }
      v257 = (_QWORD *)qword_254A681E8;
      v258 = *(unsigned __int8 *)(qword_254A681E8 + 8);
      v259.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v258)
      {
        if (v259.__d_.__rep_ - *v257 < 1000000000)
          goto LABEL_313;
        v265 = (std::chrono::steady_clock::time_point *)qword_254A681E8;
      }
      else
      {
        v265 = (std::chrono::steady_clock::time_point *)qword_254A681E8;
        if (!*(_BYTE *)(qword_254A681E8 + 8))
          *(_BYTE *)(qword_254A681E8 + 8) = 1;
      }
      v265->__d_.__rep_ = v259.__d_.__rep_;
      v266 = sub_210219C18();
      v267 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v267 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
      {
LABEL_311:
        if (os_signpost_enabled((os_log_t)*v266))
        {
          *(_WORD *)v368 = 0;
          _os_signpost_emit_unreliably_with_name_impl();
        }
LABEL_313:
        v275 = *(_QWORD *)(a1 + 760);
        if (v275)
        {
          v276 = (float64x2_t *)(a1 + 616);
          v277 = *(_QWORD *)(a1 + 752);
          v278 = *(_QWORD *)(a1 + 720);
          v279 = v277 - v275;
          v280.f64[0] = 0.0;
          v281 = v277 - v275;
          v282 = *(_QWORD *)(a1 + 760);
          a8 = 0.0;
          v260.f64[0] = 0.0;
          v283.f64[0] = 0.0;
          _Q4.f64[0] = 0.0;
          v261.f64[0] = 0.0;
          do
          {
            v285 = v277 - v282;
            if (v277 < v282)
              v285 = v281 + (*(_QWORD *)(a1 + 728) - v278) / 80;
            v284 = v278 + 80 * v285;
            a9.f64[0] = *(float64_t *)(v284 + 24);
            v280.f64[1] = a8;
            v280 = vaddq_f64(v280, *(float64x2_t *)(v284 + 8));
            v260 = vaddq_f64(v260, a9);
            *(_QWORD *)&a8 = vextq_s8((int8x16_t)v280, (int8x16_t)v280, 8uLL).u64[0];
            a9.f64[0] = *(float64_t *)(v284 + 48);
            v283.f64[1] = _Q4.f64[0];
            v283 = vaddq_f64(v283, *(float64x2_t *)(v284 + 32));
            v261 = vaddq_f64(v261, a9);
            _Q4 = (float64x2_t)vextq_s8((int8x16_t)v283, (int8x16_t)v283, 8uLL);
            ++v281;
            --v282;
          }
          while (v282);
          v286 = v275 - 1;
          if (v275 > 1)
          {
            a9.f64[0] = (double)v275;
            v287 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v275), 0);
            v288 = vdivq_f64(v260, a9);
            v280.f64[1] = a8;
            v296 = vdivq_f64(v280, v287);
            *v276 = v296;
            *(float64_t *)(a1 + 632) = v288.f64[0];
            v289 = vdivq_f64(v261, a9);
            v283.f64[1] = _Q4.f64[0];
            v290 = (int8x16_t)vdivq_f64(v283, v287);
            *(_QWORD *)&v291 = vextq_s8(v290, v290, 8uLL).u64[0];
            *(int8x16_t *)(a1 + 664) = v290;
            *(float64_t *)(a1 + 680) = v289.f64[0];
            v292 = v278 + -80 * v275 + 80 * v277 + 8;
            v293.f64[0] = v296.f64[0];
            *(_QWORD *)&v293.f64[1] = vextq_s8((int8x16_t)v296, (int8x16_t)v296, 8uLL).u64[0];
            v294.f64[0] = 0.0;
            *(_QWORD *)&v295.f64[0] = v290.i64[0];
            v295.f64[1] = v291;
            v296.f64[1] = v293.f64[1];
            v297 = 0;
            v262.f64[0] = 0.0;
            v261.f64[0] = 0.0;
            _Q4.f64[0] = 0.0;
            a9.f64[0] = 0.0;
            do
            {
              v305 = v277 - v275;
              if (v277 >= v275)
              {
                v263.f64[0] = *(float64_t *)(v292 + 16);
                v298 = vsubq_f64(*(float64x2_t *)v292, v296);
                v299 = vsubq_f64(v263, v288);
                v300 = vmulq_f64(v299, v299);
                v301 = vmulq_f64(v298, v298);
              }
              else
              {
                v305 = v279 - 0x3333333333333333 * ((*(_QWORD *)(a1 + 728) - v278) >> 4);
                v306 = v278 + 80 * v305;
                v264.f64[0] = *(float64_t *)(v306 + 24);
                v307 = vsubq_f64(v264, v288);
                v308 = vsubq_f64(*(float64x2_t *)(v306 + 8), v293);
                v301 = vmulq_f64(v308, v308);
                v300 = vmulq_f64(v307, v307);
              }
              *(_QWORD *)&v301.f64[1] = vextq_s8((int8x16_t)v301, (int8x16_t)v301, 8uLL).u64[0];
              *(_QWORD *)&v294.f64[1] = v297;
              v294 = vaddq_f64(v294, v301);
              v297 = vextq_s8((int8x16_t)v294, (int8x16_t)v294, 8uLL).u64[0];
              v262 = vaddq_f64(v262, v300);
              v302 = (float64x2_t *)(v278 + 80 * v305);
              v300.f64[0] = v302[3].f64[0];
              v303 = vsubq_f64(v302[2], v295);
              v304 = vsubq_f64(v300, v289);
              v263 = vmulq_f64(v304, v304);
              v264 = vmulq_f64(v303, v303);
              v261.f64[1] = _Q4.f64[0];
              v261 = vaddq_f64(v261, v264);
              _Q4 = (float64x2_t)vextq_s8((int8x16_t)v261, (int8x16_t)v261, 8uLL);
              a9 = vaddq_f64(a9, v263);
              ++v279;
              v292 += 80;
              --v275;
            }
            while (v275);
            v288.f64[0] = (double)v286;
            v309 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v286), 0);
            v310 = vdivq_f64(v262, v288);
            *(_QWORD *)&v294.f64[1] = v297;
            v312 = vsqrtq_f64(vdivq_f64(v294, v309));
            *(float64x2_t *)(a1 + 640) = v312;
            *(double *)(a1 + 656) = sqrt(v310.f64[0]);
            v261.f64[1] = _Q4.f64[0];
            *(float64x2_t *)(a1 + 688) = vsqrtq_f64(vdivq_f64(v261, v309));
            *(double *)(a1 + 704) = sqrt(vdivq_f64(a9, v288).f64[0]);
            memset(&v368[8], 0, 56);
            *(_QWORD *)&_Q0.f64[0] = v290.i64[0];
            _Q0.f64[1] = v291;
            v313 = vmulq_f64(_Q0, _Q0);
            v312.f64[0] = sqrt(v313.f64[0] + v291 * v291 + v289.f64[0] * v289.f64[0]);
            v313.f64[0] = 1.0;
            if (v312.f64[0] == 0.0)
              v312.f64[0] = 1.0;
            else
              v312.f64[0] = 1.0 / v312.f64[0];
            _Q3 = vmulq_n_f64(_Q0, v312.f64[0]);
            v315 = vmulq_f64(v289, v312).f64[0];
            _D8 = 0.0;
            _Q0.f64[0] = 0.0 * v315 - _Q3.f64[1];
            v317 = _Q3.f64[0] - 0.0 * v315;
            _Q4.f64[0] = vmuld_lane_f64(0.0, _Q3, 1) - 0.0 * _Q3.f64[0];
            v310.f64[0] = sqrt(_Q0.f64[0] * _Q0.f64[0] + v317 * v317 + _Q4.f64[0] * _Q4.f64[0]);
            __asm { FMLA            D7, D8, V3.D[1] }
            v319 = v315 + _D7;
            v351 = v290.i64[0];
            v354 = v289;
            v350 = v291;
            if (v310.f64[0] >= 2.22507386e-308)
            {
              if (v310.f64[0] < 2.22044605e-16)
              {
                v313.f64[0] = 1.0 / v310.f64[0];
                v321 = _Q4.f64[0] * (1.0 / v310.f64[0]);
                _Q4 = vmulq_f64(_Q4, v313);
                _Q0.f64[1] = v317;
                _Q0 = vmulq_n_f64(_Q0, v313.f64[0]);
                _D1 = v317 * v313.f64[0];
                *(_QWORD *)&v317 = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
                __asm { FMLA            D6, D1, V0.D[1] }
                v310.f64[0] = sqrt(vmlad_n_f64(_D6, v321, _Q4.f64[0]));
              }
              v310.f64[0] = 1.0 / v310.f64[0];
              v324 = (int8x16_t)vmulq_f64(_Q4, v310);
              _Q0.f64[1] = v317;
              v325 = vmulq_n_f64(_Q0, v310.f64[0]);
              v326 = fmax(fmin(v319, 1.0), -1.0);
              v327 = sqrt(1.0 - v326 * v326);
              *(_QWORD *)&v368[48] = vmuld_n_f64(v325.f64[0], *(double *)v324.i64);
              v328 = vmulq_laneq_f64(v325, v325, 1);
              *(_QWORD *)v368 = vmuld_n_f64(v325.f64[0], v325.f64[0]);
              *(float64_t *)&v368[8] = v328.f64[0];
              *(_QWORD *)&v368[16] = *(_QWORD *)&v368[48];
              *(float64x2_t *)&v368[24] = v328;
              v329 = (float64x2_t)vextq_s8((int8x16_t)v325, v324, 8uLL);
              *(float64x2_t *)&v368[56] = vmulq_n_f64(v329, *(double *)v324.i64);
              v313.f64[0] = 1.0 - v326;
              v329.f64[0] = *(float64_t *)&v368[64];
              *(_QWORD *)&v368[40] = *(_QWORD *)&v368[56];
              *(double *)v368 = v326 + vmulq_n_f64(*(float64x2_t *)v368, 1.0 - v326).f64[0];
              v313.f64[0] = v326 + vmulq_f64(v313, v329).f64[0];
              _D8 = vmuld_lane_f64(v327, v325, 1) + vmulq_n_f64(*(float64x2_t *)&v368[16], 1.0 - v326).f64[0];
              v320 = COERCE_DOUBLE(*(_QWORD *)&vmulq_n_f64(*(float64x2_t *)(v368 + 32), 1.0 - v326).f64[1])
                   - v327 * v325.f64[0];
            }
            else
            {
              v320 = 0.0;
              if (v319 <= 0.0)
              {
                *(_OWORD *)v368 = xmmword_21039C230;
                *(int64x2_t *)&v368[16] = vdupq_n_s64(0x8000000000000000);
                *(_OWORD *)&v368[48] = xmmword_2103A58E0;
                *(_QWORD *)&v368[32] = 0;
                *(_QWORD *)&v368[40] = 0;
                *(_QWORD *)&v368[64] = 0;
                v313.f64[0] = vaddq_f64((float64x2_t)0, (float64x2_t)0).f64[0] + -1.0;
                _D8 = *(double *)&v368[16] + 0.0;
                v320 = COERCE_DOUBLE(*(_QWORD *)&vaddq_f64((float64x2_t)0, (float64x2_t)0).f64[1]) + 0.0;
              }
            }
            v330 = atan2(-v320, v313.f64[0]);
            v331 = asin(_D8);
            v332 = __sincos_stret(v330);
            v333 = __sincos_stret(v331);
            *(double *)v368 = v333.__cosval;
            *(_QWORD *)&v368[8] = 0;
            *(double *)&v368[16] = v333.__sinval;
            *(double *)&v368[24] = v332.__sinval * v333.__sinval;
            *(double *)&v368[32] = v332.__cosval;
            *(double *)&v368[40] = -(v332.__sinval * v333.__cosval);
            *(double *)&v368[48] = -(v332.__cosval * v333.__sinval);
            *(double *)&v368[56] = v332.__sinval;
            *(double *)&v368[64] = v332.__cosval * v333.__cosval;
            if (!v277)
              v277 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 728) - v278) >> 4);
            v334 = *(double *)(v278 + 80 * v277 - 80);
            memset(&v360, 0, sizeof(v360));
            memset(v358, 0, sizeof(v358));
            *(_QWORD *)&v335.f64[0] = v351;
            if (*(_BYTE *)(a1 + 2184))
            {
              v378 = *(std::string *)(a1 + 2112);
              v377 = *(std::string *)(a1 + 2136);
              v375 = *(_OWORD *)(a1 + 2160);
              v376 = *(_QWORD *)(a1 + 2176);
            }
            else
            {
              *(float64x2_t *)&v378.__r_.__value_.__l.__data_ = *v276;
              v378.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 632);
              _Q1.f64[0] = *(float64_t *)&v368[16];
              _V5.D[1] = *(_QWORD *)&v368[56];
              _Q1.f64[1] = *(float64_t *)&v368[40];
              v338 = vmlaq_f64(vmlaq_f64(vmulq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v368, *(int64x2_t *)&v368[24]), (float64x2_t)0), (float64x2_t)0, (float64x2_t)vzip2q_s64(*(int64x2_t *)v368, *(int64x2_t *)&v368[24])), (float64x2_t)vdupq_n_s64(0x40239D013A92A305uLL), _Q1);
              _Q1.f64[0] = 0.0;
              __asm { FMLA            D2, D1, V5.D[1] }
              _Q1.f64[0] = _D2 + *(double *)&v368[64] * 9.80665;
              v335.f64[1] = v350;
              *(float64x2_t *)&v377.__r_.__value_.__l.__data_ = vsubq_f64(v335, v338);
              v377.__r_.__value_.__r.__words[2] = *(_OWORD *)&vsubq_f64(v354, _Q1);
              v376 = 0x3FF0000000000000;
              v375 = xmmword_2103A5930;
            }
            sub_20F1F1388(a1 + 792, (float64x2_t *)v368, (__int128 *)&v378, (uint64_t)&v375, (__int128 *)&v377, (__int128 *)&v360, (__int128 *)v358, v334, *(double *)(a1 + 120), *(double *)(a1 + 128), *(double *)(a1 + 144), *(double *)(a1 + 152), *(double *)(a1 + 288), *(double *)(a1 + 296));
            *(_QWORD *)(a1 + 1488) = *(_QWORD *)(a1 + 1192);
            v340 = *v35;
            v341 = *(_OWORD *)(a1 + 1248);
            v342 = *(_OWORD *)(a1 + 1264);
            v343 = *(_OWORD *)(a1 + 1280);
            _Q4.f64[0] = *(float64_t *)(a1 + 1296);
            *(float64_t *)(a1 + 1560) = _Q4.f64[0];
            *(_OWORD *)(a1 + 1528) = v342;
            *(_OWORD *)(a1 + 1544) = v343;
            *v34 = v340;
            *(_OWORD *)(a1 + 1512) = v341;
            v344 = *(_OWORD *)(a1 + 1304);
            *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a1 + 1320);
            *(_OWORD *)(a1 + 1568) = v344;
            v345 = *(_OWORD *)(a1 + 1368);
            *(_QWORD *)(a1 + 1632) = *(_QWORD *)(a1 + 1384);
            *(_OWORD *)(a1 + 1616) = v345;
            *(_DWORD *)(a1 + 64) = 0;
          }
        }
        v346 = *(_DWORD *)(a1 + 64);
        if (v346)
        {
          if (v346 == 1)
            return 1;
        }
        else if (v357)
        {
          *(_QWORD *)(a1 + 752) = 0;
          *(_QWORD *)(a1 + 744) = 0;
          *(_QWORD *)(a1 + 760) = 0;
          if (*(_DWORD *)(a1 + 64) == 1)
            return 1;
        }
        else
        {
          v347 = *(_QWORD *)(a1 + 760);
          v366 = v347 == 0;
          v367 = 0;
          v362 = v11;
          v364 = v347 - 1;
          v365 = v11;
          v363 = 0;
          sub_20F1EB0E8((uint64_t)v368, v11, (uint64_t)&v365, (uint64_t)&v362);
          if (*(_DWORD *)(a1 + 64) == 1)
            return 1;
        }
LABEL_53:
        v50 = *(_QWORD *)(a1 + 720) + 80 * *(_QWORD *)(a1 + 752);
        v56.f64[0] = *(float64_t *)a2;
        *(_OWORD *)v368 = *(_OWORD *)(a2 + 8);
        v51 = *(_OWORD *)v368;
        *(_QWORD *)&v368[16] = *(_QWORD *)(a2 + 24);
        v52 = *(_QWORD *)&v368[16];
        v360 = *(std::string *)(a2 + 32);
        v53 = v360.__r_.__value_.__r.__words[2];
        v54 = *(float64x2_t *)&v360.__r_.__value_.__l.__data_;
        v55 = *(__n128 *)(a2 + 56);
        *(__n128 *)v358 = v55;
        *(_QWORD *)&v358[16] = *(_QWORD *)(a2 + 72);
        *(float64_t *)v50 = v56.f64[0];
        *(_OWORD *)(v50 + 8) = v51;
        *(_QWORD *)(v50 + 24) = v52;
        *(float64x2_t *)(v50 + 32) = v54;
        *(_QWORD *)(v50 + 48) = v53;
        *(_QWORD *)(v50 + 72) = *(_QWORD *)&v358[16];
        v56.f64[1] = *(float64_t *)&v358[8];
        *(_OWORD *)(v50 + 56) = *(_OWORD *)v358;
        v57 = *(_QWORD *)(a1 + 720);
        v58 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 728) - v57) >> 4);
        v59 = *(_QWORD *)(a1 + 752) + 1;
        if (v59 >= v58)
          v60 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 728) - v57) >> 4);
        else
          v60 = 0;
        v61 = v59 - v60;
        *(_QWORD *)(a1 + 752) = v59 - v60;
        v62 = *(_QWORD *)(a1 + 760);
        if (v62 == v58)
        {
          v63 = *(_QWORD *)(a1 + 744) + 1;
          if (v63 >= v58)
            v64 = v58;
          else
            v64 = 0;
          v65 = v63 - v64;
          *(_QWORD *)(a1 + 744) = v65;
          v66 = v58;
        }
        else
        {
          v66 = v62 + 1;
          *(_QWORD *)(a1 + 760) = v66;
          v65 = *(_QWORD *)(a1 + 744);
        }
        if (v59 == v60)
          v67 = v58;
        else
          v67 = v59 - v60;
        v68 = *(double *)(v57 + 80 * v67 - 80) - *(double *)(v57 + 80 * v65);
        *(double *)(a1 + 712) = v68;
        v69 = v66 - 1;
        if (v66 == 1)
          return 0;
        v71 = *(double *)(a1 + 240);
        if (v66)
        {
          v54.f64[0] = (double)v69;
          v72 = v68 / (double)v69;
          v56.f64[0] = v71 / v72;
          if (v66 < vcvtpd_u64_f64(v56.f64[0]))
            goto LABEL_69;
        }
        else
        {
          v72 = 0.01;
          v56.f64[0] = v71 / 0.01;
          if (vcvtpd_u64_f64(v56.f64[0]))
          {
LABEL_69:
            v73 = v61 - 2;
            if (v61 >= 2)
            {
              v74 = v57 + 80 * v73;
            }
            else
            {
              v74 = v57 + 80 * (v73 + v58);
              if (v59 == v60)
                goto LABEL_78;
            }
            v58 = v59 - v60;
LABEL_78:
            v86 = *(double *)v74;
            if (vabdd_f64(*(double *)v74, *(double *)(a1 + 1488)) < 0.001)
              goto LABEL_81;
            if (!sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AttitudeFilter/src/AttitudeFilter.cpp", 114, (uint64_t)"check_dt < 1e-3", 15, (uint64_t)"imu0 measurement is not at the inertial state timestamp", 55, (void (*)(void **))sub_21023DDB0))
            {
              v86 = *(double *)v74;
LABEL_81:
              v87 = v58 - 1;
              v88 = (_QWORD *)(v57 + 80 * (v58 - 1));
              *(double *)&v360.__r_.__value_.__l.__data_ = v86;
              v89 = *(_QWORD *)(v74 + 24);
              *(_OWORD *)&v360.__r_.__value_.__r.__words[1] = *(_OWORD *)(v74 + 8);
              v361 = v89;
              v90 = v57 + 80 * v87;
              *(_QWORD *)v358 = *v88;
              v91 = *(_OWORD *)(v90 + 8);
              v359 = *(_QWORD *)(v90 + 24);
              *(_OWORD *)&v358[8] = v91;
              v92 = *(_QWORD *)(a1 + 1512);
              v93 = *(float64x2_t *)(a1 + 1520);
              v94 = *(_QWORD *)(a1 + 1536);
              v95 = *(_OWORD *)(a1 + 1544);
              v96 = *(_QWORD *)(a1 + 1560);
              *(int8x16_t *)v368 = *v34;
              *(_QWORD *)&v368[16] = v92;
              *(_QWORD *)&v368[40] = v94;
              *(float64x2_t *)&v368[24] = v93;
              *(_QWORD *)&v368[64] = v96;
              *(_OWORD *)&v368[48] = v95;
              sub_20F1F1B0C(a1 + 792, (uint64_t)&v360, (uint64_t)v358, (uint64_t)v368, (float64x2_t *)(a1 + 1304), (double *)(a1 + 1336), 0, 0, (int64x2_t *)&v378, *(float64x2_t *)v368, v93);
              v97 = *(double *)&v378.__r_.__value_.__r.__words[2];
              _Q19 = *(_OWORD *)&v378.__r_.__value_.__l.__data_;
              _D10 = *(double *)&v378.__r_.__value_.__l.__size_;
              __asm { FMLA            D0, D10, V19.D[1] }
              v101 = _D0 + v97 * v97;
              if (v101 >= 0.0000002635)
              {
                v105 = sqrt(v101);
                v355 = v378.__r_.__value_.__r.__words[0];
                v106 = __sincos_stret(v105);
                *(_QWORD *)&_Q19 = v355;
                cosval = v106.__cosval;
                v103 = v106.__sinval / v105;
                v102 = 1.0 / v101 * (1.0 - v106.__cosval);
              }
              else
              {
                v102 = 0.5 - v101 * (v101 / -720.0 + 0.0416666667);
                v103 = 1.0 - v101 * (0.166666667 - v101 * (v101 / -5040.0 + 0.00833333333));
                cosval = 1.0 - v101 * v102;
              }
              v107 = *(double *)&_Q19 * v102;
              v108 = _D10 * v102;
              v109 = v97 * v102;
              *(double *)v79.i64 = cosval + *(double *)&_Q19 * (*(double *)&_Q19 * v102);
              v110 = _D10 * v108;
              v111 = v97 * v109;
              v112 = _D10 * v107;
              v113 = v97 * v107;
              v114 = v97 * v108;
              v115 = *(double *)&_Q19 * v103;
              v116 = _D10 * v103;
              v117 = v97 * v103;
              v82 = _D10 * v107 - v117;
              *(double *)&v77 = v116 + v97 * v107;
              v83 = v112 + v117;
              v118 = v114 - v115;
              *(double *)v80.i64 = v113 - v116;
              v81 = v115 + v114;
              *(_QWORD *)&v119 = v80.i64[0];
              *((double *)&v119 + 1) = v82;
              *(_QWORD *)&v120 = v77;
              *((double *)&v120 + 1) = v118;
              v121.i64[0] = v79.i64[0];
              *(double *)&v121.i64[1] = v83;
              *(double *)&v122 = cosval + v110;
              *((double *)&v122 + 1) = v81;
              v76 = cosval + v111;
              v123 = *(double *)v88;
              *(_QWORD *)(a1 + 1488) = *v88;
              *(double *)(a1 + 1560) = v76;
              *(_OWORD *)(a1 + 1528) = v122;
              *(_OWORD *)(a1 + 1544) = v120;
              *v34 = v121;
              *(_OWORD *)(a1 + 1512) = v119;
              v124 = *(_OWORD *)(a1 + 1304);
              *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a1 + 1320);
              *(_OWORD *)(a1 + 1568) = v124;
              v125 = *(_OWORD *)(a1 + 1368);
              *(_QWORD *)(a1 + 1632) = *(_QWORD *)(a1 + 1384);
              *(_OWORD *)(a1 + 1616) = v125;
              *(_DWORD *)(a1 + 64) = 2;
              if (vabdd_f64(v123, *(double *)(a1 + 2096)) <= 0.05)
                return *(unsigned int *)(a1 + 64);
              goto LABEL_85;
            }
LABEL_349:
            abort();
          }
        }
        sub_20F1EB34C(a1, v56, v72, v54, v55, _Q4, a8, a9);
        v75 = *(double *)(a1 + 1192);
        *(double *)(a1 + 1488) = v75;
        v76 = *(double *)(a1 + 1296);
        v78 = *(int8x16_t *)(a1 + 1264);
        v77 = *(_OWORD *)(a1 + 1280);
        v79 = *v35;
        v80 = *(int8x16_t *)(a1 + 1248);
        *(_QWORD *)&v81 = vextq_s8(v78, v78, 8uLL).u64[0];
        *(_QWORD *)&v82 = vextq_s8(v80, v80, 8uLL).u64[0];
        *(_QWORD *)&v83 = vextq_s8(v79, v79, 8uLL).u64[0];
        *(double *)(a1 + 1560) = v76;
        *(int8x16_t *)(a1 + 1528) = v78;
        *(_OWORD *)(a1 + 1544) = v77;
        *v34 = v79;
        *(int8x16_t *)(a1 + 1512) = v80;
        v84 = *(_OWORD *)(a1 + 1304);
        *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a1 + 1320);
        *(_OWORD *)(a1 + 1568) = v84;
        v85 = *(_OWORD *)(a1 + 1368);
        *(_QWORD *)(a1 + 1632) = *(_QWORD *)(a1 + 1384);
        *(_OWORD *)(a1 + 1616) = v85;
        if (vabdd_f64(v75, *(double *)(a1 + 2096)) <= 0.05)
          return *(unsigned int *)(a1 + 64);
LABEL_85:
        v126 = -*(double *)v80.i64;
        if (fabs(fabs(*(double *)v80.i64) + -1.0) >= 2.22044605e-16)
        {
          v352 = v81;
          v356 = v76;
          v128 = atan2(v83, *(long double *)v79.i64);
          v127 = atan2(v352, v356);
        }
        else
        {
          v127 = atan2(-(*(double *)v80.i64 * v82), -(*(double *)v80.i64 * *(double *)&v77));
          v128 = 0.0;
        }
        *(long double *)v358 = v128;
        *(double *)&v358[16] = v127;
        *(_QWORD *)&v358[8] = asin(v126);
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&v360.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
        strcpy(v360.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
        v129 = std::string::append(&v360, ".orientation", 0xCuLL);
        v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
        *(_QWORD *)&v368[16] = *((_QWORD *)&v129->__r_.__value_.__l + 2);
        *(_OWORD *)v368 = v130;
        v129->__r_.__value_.__l.__size_ = 0;
        v129->__r_.__value_.__r.__words[2] = 0;
        v129->__r_.__value_.__r.__words[0] = 0;
        v131 = v368[23];
        v132 = *(_BYTE **)v368;
        v133 = *(_QWORD *)&v368[8];
        sub_20FF3F5E8();
        if ((v131 & 0x80u) == 0)
          v134 = v368;
        else
          v134 = v132;
        if ((v131 & 0x80u) == 0)
          v135 = v131;
        else
          v135 = v133;
        v136 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v134, v135);
        if ((v368[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v368);
          if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_96:
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v136 + 24))(v136))
              goto LABEL_109;
            goto LABEL_100;
          }
        }
        else if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_96;
        }
        operator delete(v360.__r_.__value_.__l.__data_);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v136 + 24))(v136))
          goto LABEL_109;
LABEL_100:
        v378.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
        v378.__r_.__value_.__l.__size_ = 2;
        v137 = sub_20FF3F5E8();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v136 + 24))(v136))
        {
          v138 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v136 + 56))(v136);
          *(_WORD *)&v368[23] = 260;
          strcpy(v368, "roll");
          sub_20F1EE31C(&v360, (uint64_t *)&v358[16], (__int128 *)v368, (__int128 *)&v378);
          sub_20EB09324((uint64_t)v137, v138, (uint64_t)&v360);
          v139 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
          if (v360.__r_.__value_.__r.__words[2])
          {
            v140 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 - 1, v140));
            if (!v141)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
          }
          if (v368[24] && (v368[23] & 0x80000000) != 0)
            operator delete(*(void **)v368);
        }
LABEL_109:
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&v360.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
        strcpy(v360.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
        v142 = std::string::append(&v360, ".orientation", 0xCuLL);
        v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
        *(_QWORD *)&v368[16] = *((_QWORD *)&v142->__r_.__value_.__l + 2);
        *(_OWORD *)v368 = v143;
        v142->__r_.__value_.__l.__size_ = 0;
        v142->__r_.__value_.__r.__words[2] = 0;
        v142->__r_.__value_.__r.__words[0] = 0;
        v144 = v368[23];
        v145 = *(_BYTE **)v368;
        v146 = *(_QWORD *)&v368[8];
        sub_20FF3F5E8();
        if ((v144 & 0x80u) == 0)
          v147 = v368;
        else
          v147 = v145;
        if ((v144 & 0x80u) == 0)
          v148 = v144;
        else
          v148 = v146;
        v149 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v147, v148);
        if ((v368[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v368);
          if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_117:
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
              goto LABEL_130;
            goto LABEL_121;
          }
        }
        else if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_117;
        }
        operator delete(v360.__r_.__value_.__l.__data_);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
          goto LABEL_130;
LABEL_121:
        v378.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
        v378.__r_.__value_.__l.__size_ = 2;
        v150 = sub_20FF3F5E8();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v149 + 24))(v149))
        {
          v151 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v149 + 56))(v149);
          *(_WORD *)&v368[23] = 261;
          strcpy(v368, "pitch");
          sub_20F1EE31C(&v360, (uint64_t *)&v358[8], (__int128 *)v368, (__int128 *)&v378);
          sub_20EB09324((uint64_t)v150, v151, (uint64_t)&v360);
          v152 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
          if (v360.__r_.__value_.__r.__words[2])
          {
            v153 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
            do
              v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }
          if (v368[24] && (v368[23] & 0x80000000) != 0)
            operator delete(*(void **)v368);
        }
LABEL_130:
        v360.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&v360.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
        strcpy(v360.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
        v155 = std::string::append(&v360, ".orientation", 0xCuLL);
        v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
        *(_QWORD *)&v368[16] = *((_QWORD *)&v155->__r_.__value_.__l + 2);
        *(_OWORD *)v368 = v156;
        v155->__r_.__value_.__l.__size_ = 0;
        v155->__r_.__value_.__r.__words[2] = 0;
        v155->__r_.__value_.__r.__words[0] = 0;
        v157 = v368[23];
        v158 = *(_BYTE **)v368;
        v159 = *(_QWORD *)&v368[8];
        sub_20FF3F5E8();
        if ((v157 & 0x80u) == 0)
          v160 = v368;
        else
          v160 = v158;
        if ((v157 & 0x80u) == 0)
          v161 = v157;
        else
          v161 = v159;
        v162 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v160, v161);
        if ((v368[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v368);
          if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_138:
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
              goto LABEL_151;
            goto LABEL_142;
          }
        }
        else if ((SHIBYTE(v360.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_138;
        }
        operator delete(v360.__r_.__value_.__l.__data_);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
          goto LABEL_151;
LABEL_142:
        v378.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
        v378.__r_.__value_.__l.__size_ = 2;
        v163 = sub_20FF3F5E8();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v162 + 24))(v162))
        {
          v164 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v162 + 56))(v162);
          *(_WORD *)&v368[23] = 259;
          strcpy(v368, "yaw");
          sub_20F1EE31C(&v360, (uint64_t *)v358, (__int128 *)v368, (__int128 *)&v378);
          sub_20EB09324((uint64_t)v163, v164, (uint64_t)&v360);
          v165 = (std::__shared_weak_count *)v360.__r_.__value_.__r.__words[2];
          if (v360.__r_.__value_.__r.__words[2])
          {
            v166 = (unint64_t *)(v360.__r_.__value_.__r.__words[2] + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          if (v368[24] && (v368[23] & 0x80000000) != 0)
            operator delete(*(void **)v368);
        }
LABEL_151:
        v168 = *(_OWORD *)(a1 + 1568);
        *(_QWORD *)&v368[16] = *(_QWORD *)(a1 + 1584);
        *(_OWORD *)v368 = v168;
        v378.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
        *(_OWORD *)&v378.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
        strcpy(v378.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
        v169 = std::string::append(&v378, ".bias_gyro", 0xAuLL);
        v170 = *(_OWORD *)&v169->__r_.__value_.__l.__data_;
        v360.__r_.__value_.__r.__words[2] = v169->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v170;
        v169->__r_.__value_.__l.__size_ = 0;
        v169->__r_.__value_.__r.__words[2] = 0;
        v169->__r_.__value_.__r.__words[0] = 0;
        v171 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
        v172 = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
        sub_20FF3F5E8();
        if ((v171 & 0x80u) == 0)
          v173 = &v360;
        else
          v173 = (std::string *)v172;
        if ((v171 & 0x80u) == 0)
          v174 = v171;
        else
          v174 = *((_QWORD *)&v172 + 1);
        v175 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v173, v174);
        if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v360.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_159:
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v175 + 24))(v175))
              goto LABEL_161;
            goto LABEL_160;
          }
        }
        else if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_159;
        }
        operator delete(v378.__r_.__value_.__l.__data_);
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v175 + 24))(v175))
        {
LABEL_161:
          v378.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
          *(_OWORD *)&v378.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
          strcpy(v378.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
          v177 = std::string::append(&v378, ".bias_gyro", 0xAuLL);
          v178 = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
          v360.__r_.__value_.__r.__words[2] = v177->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v178;
          v177->__r_.__value_.__l.__size_ = 0;
          v177->__r_.__value_.__r.__words[2] = 0;
          v177->__r_.__value_.__r.__words[0] = 0;
          v179 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
          v180 = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
          sub_20FF3F5E8();
          if ((v179 & 0x80u) == 0)
            v181 = &v360;
          else
            v181 = (std::string *)v180;
          if ((v179 & 0x80u) == 0)
            v182 = v179;
          else
            v182 = *((_QWORD *)&v180 + 1);
          v183 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v181, v182);
          if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v360.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_169:
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v183 + 24))(v183))
                goto LABEL_171;
              goto LABEL_170;
            }
          }
          else if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_169;
          }
          operator delete(v378.__r_.__value_.__l.__data_);
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v183 + 24))(v183))
          {
LABEL_171:
            v378.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
            *(_OWORD *)&v378.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
            strcpy(v378.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
            v185 = std::string::append(&v378, ".bias_gyro", 0xAuLL);
            v186 = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
            v360.__r_.__value_.__r.__words[2] = v185->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v186;
            v185->__r_.__value_.__l.__size_ = 0;
            v185->__r_.__value_.__r.__words[2] = 0;
            v185->__r_.__value_.__r.__words[0] = 0;
            v187 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
            v188 = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
            sub_20FF3F5E8();
            if ((v187 & 0x80u) == 0)
              v189 = &v360;
            else
              v189 = (std::string *)v188;
            if ((v187 & 0x80u) == 0)
              v190 = v187;
            else
              v190 = *((_QWORD *)&v188 + 1);
            v191 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v189, v190);
            if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v360.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_179:
                if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v191 + 24))(v191))
                  goto LABEL_181;
                goto LABEL_180;
              }
            }
            else if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_179;
            }
            operator delete(v378.__r_.__value_.__l.__data_);
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v191 + 24))(v191))
            {
LABEL_181:
              v378.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
              *(_OWORD *)&v378.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
              strcpy(v378.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
              v193 = std::string::append(&v378, ".scale", 6uLL);
              v194 = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
              v360.__r_.__value_.__r.__words[2] = v193->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v194;
              v193->__r_.__value_.__l.__size_ = 0;
              v193->__r_.__value_.__r.__words[2] = 0;
              v193->__r_.__value_.__r.__words[0] = 0;
              v195 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
              v196 = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
              sub_20FF3F5E8();
              if ((v195 & 0x80u) == 0)
                v197 = &v360;
              else
                v197 = (std::string *)v196;
              if ((v195 & 0x80u) == 0)
                v198 = v195;
              else
                v198 = *((_QWORD *)&v196 + 1);
              v199 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v197, v198);
              if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v360.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_189:
                  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v199 + 24))(v199))
                    goto LABEL_191;
                  goto LABEL_190;
                }
              }
              else if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                goto LABEL_189;
              }
              operator delete(v378.__r_.__value_.__l.__data_);
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v199 + 24))(v199))
              {
LABEL_191:
                v378.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
                *(_OWORD *)&v378.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
                strcpy(v378.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
                v201 = std::string::append(&v378, ".scale", 6uLL);
                v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
                v360.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v202;
                v201->__r_.__value_.__l.__size_ = 0;
                v201->__r_.__value_.__r.__words[2] = 0;
                v201->__r_.__value_.__r.__words[0] = 0;
                v203 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
                v204 = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
                sub_20FF3F5E8();
                if ((v203 & 0x80u) == 0)
                  v205 = &v360;
                else
                  v205 = (std::string *)v204;
                if ((v203 & 0x80u) == 0)
                  v206 = v203;
                else
                  v206 = *((_QWORD *)&v204 + 1);
                v207 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v205, v206);
                if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v360.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_199:
                    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v207 + 24))(v207))
                      goto LABEL_201;
                    goto LABEL_200;
                  }
                }
                else if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_199;
                }
                operator delete(v378.__r_.__value_.__l.__data_);
                if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v207 + 24))(v207))
                {
LABEL_201:
                  v378.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
                  *(_OWORD *)&v378.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
                  strcpy(v378.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
                  v209 = std::string::append(&v378, ".scale", 6uLL);
                  v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
                  v360.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v210;
                  v209->__r_.__value_.__l.__size_ = 0;
                  v209->__r_.__value_.__r.__words[2] = 0;
                  v209->__r_.__value_.__r.__words[0] = 0;
                  v211 = HIBYTE(v360.__r_.__value_.__r.__words[2]);
                  v212 = *(_OWORD *)&v360.__r_.__value_.__l.__data_;
                  sub_20FF3F5E8();
                  if ((v211 & 0x80u) == 0)
                    v213 = &v360;
                  else
                    v213 = (std::string *)v212;
                  if ((v211 & 0x80u) == 0)
                    v214 = v211;
                  else
                    v214 = *((_QWORD *)&v212 + 1);
                  v215 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v213, v214);
                  if (SHIBYTE(v360.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v360.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_209:
                      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215))
                        goto LABEL_211;
                      goto LABEL_210;
                    }
                  }
                  else if ((SHIBYTE(v378.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    goto LABEL_209;
                  }
                  operator delete(v378.__r_.__value_.__l.__data_);
                  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v215 + 24))(v215))
                  {
LABEL_211:
                    v217 = *(_OWORD *)(a1 + 1616);
                    v360.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 1632);
                    *(_OWORD *)&v360.__r_.__value_.__l.__data_ = v217;
                    v377.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
                    *(_OWORD *)&v377.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
                    strcpy(v377.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
                    v218 = std::string::append(&v377, ".bias_accel", 0xBuLL);
                    v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
                    v378.__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v378.__r_.__value_.__l.__data_ = v219;
                    v218->__r_.__value_.__l.__size_ = 0;
                    v218->__r_.__value_.__r.__words[2] = 0;
                    v218->__r_.__value_.__r.__words[0] = 0;
                    v220 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
                    v221 = *(_OWORD *)&v378.__r_.__value_.__l.__data_;
                    sub_20FF3F5E8();
                    if ((v220 & 0x80u) == 0)
                      v222 = &v378;
                    else
                      v222 = (std::string *)v221;
                    if ((v220 & 0x80u) == 0)
                      v223 = v220;
                    else
                      v223 = *((_QWORD *)&v221 + 1);
                    v224 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v222, v223);
                    if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v378.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v377.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_219:
                        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v224 + 24))(v224))
                          goto LABEL_221;
                        goto LABEL_220;
                      }
                    }
                    else if ((SHIBYTE(v377.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_219;
                    }
                    operator delete(v377.__r_.__value_.__l.__data_);
                    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v224 + 24))(v224))
                    {
LABEL_221:
                      v377.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
                      *(_OWORD *)&v377.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
                      strcpy(v377.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
                      v226 = std::string::append(&v377, ".bias_accel", 0xBuLL);
                      v227 = *(_OWORD *)&v226->__r_.__value_.__l.__data_;
                      v378.__r_.__value_.__r.__words[2] = v226->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v378.__r_.__value_.__l.__data_ = v227;
                      v226->__r_.__value_.__l.__size_ = 0;
                      v226->__r_.__value_.__r.__words[2] = 0;
                      v226->__r_.__value_.__r.__words[0] = 0;
                      v228 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
                      v229 = *(_OWORD *)&v378.__r_.__value_.__l.__data_;
                      sub_20FF3F5E8();
                      if ((v228 & 0x80u) == 0)
                        v230 = &v378;
                      else
                        v230 = (std::string *)v229;
                      if ((v228 & 0x80u) == 0)
                        v231 = v228;
                      else
                        v231 = *((_QWORD *)&v229 + 1);
                      v232 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v230, v231);
                      if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v378.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v377.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_229:
                          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v232 + 24))(v232))
                            goto LABEL_231;
                          goto LABEL_230;
                        }
                      }
                      else if ((SHIBYTE(v377.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_229;
                      }
                      operator delete(v377.__r_.__value_.__l.__data_);
                      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v232 + 24))(v232))
                      {
LABEL_231:
                        v377.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
                        *(_OWORD *)&v377.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
                        strcpy(v377.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
                        v234 = std::string::append(&v377, ".bias_accel", 0xBuLL);
                        v235 = *(_OWORD *)&v234->__r_.__value_.__l.__data_;
                        v378.__r_.__value_.__r.__words[2] = v234->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v378.__r_.__value_.__l.__data_ = v235;
                        v234->__r_.__value_.__l.__size_ = 0;
                        v234->__r_.__value_.__r.__words[2] = 0;
                        v234->__r_.__value_.__r.__words[0] = 0;
                        v236 = HIBYTE(v378.__r_.__value_.__r.__words[2]);
                        v237 = *(_OWORD *)&v378.__r_.__value_.__l.__data_;
                        sub_20FF3F5E8();
                        if ((v236 & 0x80u) == 0)
                          v238 = &v378;
                        else
                          v238 = (std::string *)v237;
                        if ((v236 & 0x80u) == 0)
                          v239 = v236;
                        else
                          v239 = *((_QWORD *)&v237 + 1);
                        v240 = (*(uint64_t (**)(uint64_t *, std::string *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v238, v239);
                        if (SHIBYTE(v378.__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(v378.__r_.__value_.__l.__data_);
                          if ((SHIBYTE(v377.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          {
LABEL_239:
                            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v240 + 24))(v240))
                            {
LABEL_241:
                              *(_QWORD *)(a1 + 2096) = *(_QWORD *)(a1 + 1488);
                              return *(unsigned int *)(a1 + 64);
                            }
LABEL_240:
                            v378.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
                            v378.__r_.__value_.__l.__size_ = 2;
                            v241 = sub_20FF3F5E8();
                            sub_20F1EFC20((uint64_t)v241, v240, (uint64_t *)&v360.__r_.__value_.__r.__words[2], "z_axis", (__int128 *)&v378);
                            goto LABEL_241;
                          }
                        }
                        else if ((SHIBYTE(v377.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
                          goto LABEL_239;
                        }
                        operator delete(v377.__r_.__value_.__l.__data_);
                        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v240 + 24))(v240))
                          goto LABEL_241;
                        goto LABEL_240;
                      }
LABEL_230:
                      v378.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
                      v378.__r_.__value_.__l.__size_ = 2;
                      v233 = sub_20FF3F5E8();
                      sub_20F1EFC20((uint64_t)v233, v232, (uint64_t *)&v360.__r_.__value_.__l.__size_, "y_axis", (__int128 *)&v378);
                      goto LABEL_231;
                    }
LABEL_220:
                    v378.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
                    v378.__r_.__value_.__l.__size_ = 2;
                    v225 = sub_20FF3F5E8();
                    sub_20F1EFC20((uint64_t)v225, v224, (uint64_t *)&v360, "x_axis", (__int128 *)&v378);
                    goto LABEL_221;
                  }
LABEL_210:
                  v360.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
                  v360.__r_.__value_.__l.__size_ = 2;
                  v216 = sub_20FF3F5E8();
                  sub_20F1EFC20((uint64_t)v216, v215, (uint64_t *)(a1 + 1352), "z_axis", (__int128 *)&v360);
                  goto LABEL_211;
                }
LABEL_200:
                v360.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
                v360.__r_.__value_.__l.__size_ = 2;
                v208 = sub_20FF3F5E8();
                sub_20F1EFC20((uint64_t)v208, v207, (uint64_t *)(a1 + 1344), "y_axis", (__int128 *)&v360);
                goto LABEL_201;
              }
LABEL_190:
              v360.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
              v360.__r_.__value_.__l.__size_ = 2;
              v200 = sub_20FF3F5E8();
              sub_20F1EFC20((uint64_t)v200, v199, (uint64_t *)(a1 + 1336), "x_axis", (__int128 *)&v360);
              goto LABEL_191;
            }
LABEL_180:
            v360.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
            v360.__r_.__value_.__l.__size_ = 2;
            v192 = sub_20FF3F5E8();
            sub_20F1EFC20((uint64_t)v192, v191, (uint64_t *)&v368[16], "z_axis", (__int128 *)&v360);
            goto LABEL_181;
          }
LABEL_170:
          v360.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
          v360.__r_.__value_.__l.__size_ = 2;
          v184 = sub_20FF3F5E8();
          sub_20F1EFC20((uint64_t)v184, v183, (uint64_t *)&v368[8], "y_axis", (__int128 *)&v360);
          goto LABEL_171;
        }
LABEL_160:
        v360.__r_.__value_.__r.__words[0] = (uint64_t)(*(double *)(a1 + 1488) * 1000000000.0);
        v360.__r_.__value_.__l.__size_ = 2;
        v176 = sub_20FF3F5E8();
        sub_20F1EFC20((uint64_t)v176, v175, (uint64_t *)v368, "x_axis", (__int128 *)&v360);
        goto LABEL_161;
      }
      v353 = v11;
      *(_WORD *)v368 = 0;
      v269 = (char *)_os_log_send_and_compose_impl();
      v270 = strlen(v269);
      v360.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&v360);
      v271 = v360.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&v360, 1);
      sub_210219E20(v368, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v266 + 1), (__int128 *)(v266 + 5), "Attitude filter initializing...", 0x1FuLL, v269, v270, v271, &v360);
      std::mutex::lock(&stru_254A5A410);
      v272 = qword_254A5A458;
      for (j = unk_254A5A460; v272 != j; v272 += 40)
      {
        v274 = *(_QWORD *)(v272 + 32);
        if (!v274)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v274 + 48))(v274, v368);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (v374 < 0)
      {
        operator delete(__p);
        v11 = v353;
        if ((v372 & 0x80000000) == 0)
        {
LABEL_298:
          if (!v370)
          {
LABEL_304:
            if (v368[56] && (v368[55] & 0x80000000) != 0)
              operator delete(*(void **)&v368[32]);
            if ((v368[31] & 0x80000000) != 0)
              operator delete(*(void **)&v368[8]);
            if (v269)
              free(v269);
            goto LABEL_311;
          }
LABEL_302:
          if (v369 < 0)
            operator delete(*(void **)&v368[64]);
          goto LABEL_304;
        }
      }
      else
      {
        v11 = v353;
        if ((v372 & 0x80000000) == 0)
          goto LABEL_298;
      }
      operator delete(v371);
      if (!v370)
        goto LABEL_304;
      goto LABEL_302;
    }
  }
  else if (*(double *)(a1 + 712) >= *(double *)(a1 + 224))
  {
    goto LABEL_285;
  }
  if (*(_DWORD *)(a1 + 64) != 1)
    goto LABEL_53;
  return 1;
}

void sub_20F1EAE18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A681A8);
  _Unwind_Resume(a1);
}

void sub_20F1EAE30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A681A0);
  _Unwind_Resume(a1);
}

void sub_20F1EAE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,void *a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  sub_20FF1C8E4((uint64_t)&a25);
  if (a41)
  {
    if (a40 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 sub_20F1EB0E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  if (!*(_BYTE *)(a3 + 8))
  {
    v5 = *(_QWORD *)(a3 + 16);
    if (*(_BYTE *)(a4 + 8))
    {
      if (v5)
      {
        v6 = *(_QWORD *)(a4 + 16);
        v7 = v5 - v6;
        v8 = v6 - v5;
        if (v7)
          goto LABEL_16;
      }
      else
      {
        v8 = *(_QWORD *)(*(_QWORD *)a4 + 40);
        if (v8)
          goto LABEL_16;
      }
      goto LABEL_23;
    }
    v9 = *(_QWORD *)(a4 + 16);
    if (v5 == v9)
      goto LABEL_3;
    v10 = v9 | v5;
    if (!(v9 | v5))
    {
      v9 = 0;
      v5 = 0;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (*(_BYTE *)(a4 + 8))
  {
LABEL_3:
    result = *(__n128 *)a4;
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a4 + 16);
    return result;
  }
  v9 = *(_QWORD *)(a4 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
LABEL_12:
    v10 = v5 - v9;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(*(_QWORD *)a4 + 40);
LABEL_13:
  v11 = *(_QWORD **)a4;
  v12 = *(_QWORD **)a3;
  do
  {
    v13 = *v11 + 80 * ((v9 + v11[3]) % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11[1] - *v11) >> 4)));
    v14 = *v12 + 80 * ((v5 + v12[3]) % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12[1] - *v12) >> 4)));
    *(_QWORD *)v14 = *(_QWORD *)v13;
    v15 = *(_OWORD *)(v13 + 8);
    *(_QWORD *)(v14 + 24) = *(_QWORD *)(v13 + 24);
    *(_OWORD *)(v14 + 8) = v15;
    v16 = *(_OWORD *)(v13 + 32);
    *(_QWORD *)(v14 + 48) = *(_QWORD *)(v13 + 48);
    *(_OWORD *)(v14 + 32) = v16;
    result = *(__n128 *)(v13 + 56);
    *(_QWORD *)(v14 + 72) = *(_QWORD *)(v13 + 72);
    *(__n128 *)(v14 + 56) = result;
    ++v9;
    ++v5;
  }
  while (v9 != v11[5]);
  v8 = -v10;
  if (v10)
  {
LABEL_16:
    v17 = a2[4];
    result = 0uLL;
    do
    {
      if (!v17)
        v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 4);
      v19 = *a2 + 80 * v17;
      *(_QWORD *)(v19 - 80) = 0xBFF0000000000000;
      *(_QWORD *)(v19 - 72) = 0;
      *(_QWORD *)(v19 - 64) = 0;
      *(_QWORD *)(v19 - 56) = 0;
      *(_OWORD *)(v19 - 48) = 0uLL;
      *(_QWORD *)(v19 - 32) = 0;
      *(_OWORD *)(v19 - 24) = 0uLL;
      *(_QWORD *)(v19 - 8) = 0;
      v20 = a2[4];
      if (!v20)
        v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 4);
      v17 = v20 - 1;
      v18 = a2[5] - 1;
      a2[4] = v17;
      a2[5] = v18;
      --v8;
    }
    while (v8);
    goto LABEL_24;
  }
LABEL_23:
  v17 = a2[4];
LABEL_24:
  if ((a2[3] + *(_QWORD *)(a3 + 16)) % (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 4)) == v17)
  {
    v21 = a2[5];
    *(_QWORD *)a1 = a2;
    *(_BYTE *)(a1 + 8) = 1;
    *(_QWORD *)(a1 + 16) = v21;
  }
  else
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 16);
  }
  return result;
}

std::chrono::steady_clock::time_point sub_20F1EB34C(uint64_t a1, float64x2_t a2, double a3, float64x2_t _Q2, __n128 a5, float64x2_t _Q4, double a7, float64x2_t a8)
{
  float64x2_t v8;
  float64x2_t v9;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v25;
  std::string::size_type v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  float64x2_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  unint64_t v47;
  float64x2_t v48;
  unint64_t v49;
  float64x2_t v50;
  unint64_t v51;
  uint64_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t *v57;
  float64x2_t v58;
  float64x2_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  double v64;
  float64x2_t v65;
  float64x2_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  double v81;
  float64x2_t v82;
  __n128 v83;
  float64x2_t v84;
  int64x2_t v85;
  int8x16_t v86;
  float64x2_t v87;
  int8x16_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  double v93;
  double v94;
  double v95;
  double v97;
  double v98;
  unsigned __int8 v99;
  _QWORD *v100;
  int v101;
  std::chrono::steady_clock::time_point v102;
  std::chrono::steady_clock::time_point *v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  uint64_t v114;
  uint64_t v115;
  float64x2_t v116;
  float64x2_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  void *v126;
  int tv_sec;
  double v128;
  std::string::size_type size;
  double v130;
  double v131;
  double v132;
  double v133;
  _BOOL4 v134;
  uint64_t v135;
  int8x16_t *v136;
  int8x16_t v137;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unsigned __int8 v148;
  _QWORD *v149;
  int v150;
  std::chrono::steady_clock::time_point v151;
  std::chrono::steady_clock::time_point *v152;
  uint64_t *v153;
  unsigned __int8 v154;
  char *v156;
  size_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t j;
  uint64_t v161;
  uint64_t v162;
  double *v163;
  __int128 v164;
  double v168;
  double v169;
  double v170;
  __int128 v171;
  int v172;
  float64x2_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  double v179;
  uint64_t v180;
  float64x2_t v181;
  double v185;
  double v187;
  BOOL v188;
  double v189;
  double v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  double v232;
  double v233;
  double v234;
  double v235;
  double v236;
  int64x2_t v237;
  _OWORD *v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  char *v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __n128 v249;
  unsigned __int8 v250;
  _QWORD *v251;
  int v252;
  std::chrono::steady_clock::time_point v253;
  std::chrono::steady_clock::time_point *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t *v262;
  unsigned __int8 v263;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  size_t v272;
  __darwin_time_t v273;
  uint64_t v274;
  uint64_t k;
  uint64_t v276;
  uint64_t *v277;
  unsigned __int8 v278;
  size_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t i;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  _QWORD *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  double v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  double v305;
  unint64_t v306;
  double v307;
  unint64_t v308;
  unint64_t v309;
  double v310;
  unint64_t v311;
  unint64_t v312;
  double v313;
  char v314;
  double v315;
  double v316;
  double v317;
  double v318;
  double *v319;
  uint64_t v320;
  int v321;
  std::string *v322;
  __int128 v323;
  uint64_t v324;
  _BYTE *v325;
  uint64_t v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t *v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::string *v335;
  __int128 v336;
  uint64_t v337;
  _BYTE *v338;
  uint64_t v339;
  _BYTE *v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t *v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::string *v348;
  __int128 v349;
  uint64_t v350;
  _BYTE *v351;
  uint64_t v352;
  _BYTE *v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t *v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  double v361;
  double v362;
  double v363;
  uint64_t v364;
  unsigned __int8 v365;
  _QWORD *v366;
  int v367;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v369;
  uint64_t *v370;
  unsigned __int8 v371;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  size_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t m;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  _QWORD *v385;
  void *v386;
  float64_t v387;
  int8x16_t *v388;
  uint64_t v389;
  float64x2_t *v390;
  char v391;
  char *v392;
  int v393;
  uint64_t v394;
  char v395;
  uint64_t v396;
  uint64_t v397;
  BOOL v398;
  uint64_t v399;
  double v400;
  float64x2_t v401;
  double v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  float64x2_t v406;
  double v407;
  double v408;
  std::string v409;
  __int128 v410;
  uint64_t v411;
  char v412;
  timespec v413;
  _BYTE v414[32];
  _BYTE v415[32];
  _BYTE v416[48];
  __int128 v417;
  __int128 v418;
  uint64_t v419;

  v419 = *MEMORY[0x24BDAC8D0];
  v408 = *(double *)(a1 + 232) + *(double *)(a1 + 232);
  v389 = a1 + 232;
  v11 = *(_QWORD *)(a1 + 760);
  if (v11 <= 1
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AttitudeFilter/src/AttitudeFilter.cpp", 247, (uint64_t)"n > 1", 5, (uint64_t)"buffer has less than two IMU samples", 36, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v12 = *(_QWORD **)(a1 + 768);
  v13 = *(_QWORD *)(a1 + 776);
  if (v13)
  {
    if (v13 >= 0x40)
      bzero(*(void **)(a1 + 768), 8 * (v13 >> 6));
    if ((v13 & 0x3F) != 0)
      v12[v13 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 & 0x3F));
  }
  v14 = 0;
  if (v11 != 1)
  {
    v15 = *(double *)a1;
    v16 = *(_QWORD *)(a1 + 720);
    v17 = 1 - v11;
    v18 = v11 - 1;
    do
    {
      v20 = *(_QWORD *)(a1 + 752);
      v21 = v20 - v18;
      if (v20 < v18)
        v21 = v17 + v20 + (*(_QWORD *)(a1 + 728) - v16) / 80;
      v22 = v16 + 80 * v21;
      a5.n128_u64[0] = *(_QWORD *)(v22 + 48);
      _Q4.f64[0] = *(float64_t *)(v389 + 1152);
      a5 = (__n128)vsubq_f64((float64x2_t)a5, _Q4);
      _Q2 = vsubq_f64(*(float64x2_t *)(v22 + 32), *(float64x2_t *)(v389 + 1136));
      _Q4 = vmulq_f64(_Q2, _Q2);
      _D5 = *(_QWORD *)&_Q2.f64[1];
      __asm { FMLA            D4, D5, V2.D[1] }
      if (fabs(sqrt(vmlad_n_f64(_Q4.f64[0], a5.n128_f64[0], a5.n128_f64[0])) + -9.80665) < v15)
      {
        *(_QWORD *)((char *)v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        ++v14;
      }
      --v18;
      _CF = __CFADD__(v17++, 1);
    }
    while (!_CF);
  }
  v390 = (float64x2_t *)(v389 + 248);
  if ((double)v14 / (double)(v11 - 1) < 0.85)
  {
    v25 = *(_QWORD *)(a1 + 776);
    if (v25)
    {
      if (v25 >= 0x40)
        bzero(v12, 8 * (v25 >> 6));
      if ((v25 & 0x3F) != 0)
        v12[v25 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v25 & 0x3F));
    }
    v406 = 0uLL;
    v393 = 1;
    v407 = 0.0;
    v404 = 0;
    v405 = 0;
    v26 = -1.0;
    v403 = 0;
    v27 = -1.0;
    if (v11 < 2)
      goto LABEL_270;
    goto LABEL_52;
  }
  v406 = 0uLL;
  v407 = 0.0;
  if (!v14)
  {
    v393 = 1;
    v404 = 0;
    v405 = 0;
    v26 = -1.0;
    v403 = 0;
    v27 = -1.0;
    if (v11 < 2)
      goto LABEL_270;
    goto LABEL_52;
  }
  if (!*(_BYTE *)(a1 + 73))
  {
    v63 = *(_QWORD *)(a1 + 760);
    if (v63 < 2)
      v64 = 0.01;
    else
      v64 = *(double *)(a1 + 712) / (double)(v63 - 1);
    v393 = 0;
    v406.f64[0] = *(double *)(a1 + 176) * *(double *)(a1 + 104) / sqrt(v64);
    v406.f64[1] = v406.f64[0];
    v407 = v406.f64[0];
    v404 = 0;
    v405 = 0;
    v26 = -1.0;
    v403 = 0;
    v27 = -1.0;
    if (v11 < 2)
      goto LABEL_270;
    goto LABEL_52;
  }
  v28 = *(_QWORD *)(a1 + 760);
  if (v28)
  {
    v29 = 0;
    v30 = -(uint64_t)v28;
    v31.f64[0] = 0.0;
    v32 = -(uint64_t)v28;
    v33 = *(_QWORD *)(a1 + 760);
    v34 = 0;
    a2.f64[0] = 0.0;
    a5.n128_u64[0] = 0;
    v35 = 0;
    _Q2.f64[0] = 0.0;
    do
    {
      if (((*(_QWORD *)((char *)v12 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
      {
        v37 = *(_QWORD *)(a1 + 752);
        v38 = *(_QWORD *)(a1 + 720);
        v39 = v37 - v33;
        if (v37 < v33)
          v39 = v32 + v37 + (*(_QWORD *)(a1 + 728) - v38) / 80;
        v36 = v38 + 80 * v39;
        a8.f64[0] = *(float64_t *)(v36 + 24);
        *(_QWORD *)&v31.f64[1] = v34;
        v31 = vaddq_f64(v31, *(float64x2_t *)(v36 + 8));
        a2 = vaddq_f64(a2, a8);
        v34 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
        a8.f64[0] = *(float64_t *)(v36 + 48);
        a5.n128_u64[1] = v35;
        a5 = (__n128)vaddq_f64((float64x2_t)a5, *(float64x2_t *)(v36 + 32));
        _Q2 = vaddq_f64(_Q2, a8);
        v35 = vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL).u64[0];
        ++v29;
      }
      --v33;
      _CF = __CFADD__(v32++, 1);
    }
    while (!_CF);
    if (v29 >= 2)
    {
      a8.f64[0] = (double)v29;
      v40 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v29), 0);
      v41 = vdivq_f64(a2, a8);
      *(_QWORD *)&v31.f64[1] = v34;
      v46 = vdivq_f64(v31, v40);
      *(float64x2_t *)(v389 + 384) = v46;
      *(float64_t *)(v389 + 400) = v41.f64[0];
      v42 = vdivq_f64(_Q2, a8);
      a5.n128_u64[1] = v35;
      v45 = vdivq_f64((float64x2_t)a5, v40);
      v50 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL);
      *(float64x2_t *)(v389 + 432) = v45;
      *(float64_t *)(v389 + 448) = v42.f64[0];
      v43.f64[0] = 0.0;
      v44.f64[0] = v46.f64[0];
      *(_QWORD *)&v44.f64[1] = vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
      v45.f64[1] = v50.f64[0];
      v46.f64[1] = v44.f64[1];
      v47 = 0;
      v8.f64[0] = 0.0;
      v48.f64[0] = 0.0;
      v49 = 0;
      v50.f64[0] = 0.0;
      do
      {
        if (((*(_QWORD *)((char *)v12 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
        {
          v60 = *(_QWORD *)(a1 + 752);
          v61 = *(_QWORD *)(a1 + 720);
          v51 = v60 - v28;
          if (v60 < v28)
          {
            v51 = v30 + v60 - 0x3333333333333333 * ((*(_QWORD *)(a1 + 728) - v61) >> 4);
            v52 = v61 + 80 * v51;
            v9.f64[0] = *(float64_t *)(v52 + 24);
            v53 = vsubq_f64(v9, v41);
            v54 = vsubq_f64(*(float64x2_t *)(v52 + 8), v44);
          }
          else
          {
            v62 = v61 + 80 * (v30 + v60);
            v9.f64[0] = *(float64_t *)(v62 + 24);
            v53 = vsubq_f64(v9, v41);
            v54 = vsubq_f64(*(float64x2_t *)(v62 + 8), v46);
          }
          v55 = vmulq_f64(v54, v54);
          v56 = vmulq_f64(v53, v53);
          *(_QWORD *)&v55.f64[1] = vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL).u64[0];
          *(_QWORD *)&v43.f64[1] = v47;
          v43 = vaddq_f64(v43, v55);
          v47 = vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL).u64[0];
          v8 = vaddq_f64(v8, v56);
          v57 = (float64x2_t *)(v61 + 80 * v51);
          v56.f64[0] = v57[3].f64[0];
          v58 = vsubq_f64(v57[2], v45);
          v59 = vsubq_f64(v56, v42);
          v9 = vmulq_f64(v58, v58);
          *(_QWORD *)&v48.f64[1] = v49;
          v48 = vaddq_f64(v48, v9);
          v49 = vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
          v50 = vaddq_f64(v50, vmulq_f64(v59, v59));
        }
        --v28;
        _CF = __CFADD__(v30++, 1);
      }
      while (!_CF);
      v41.f64[0] = (double)(v29 - 1);
      v65 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41.f64[0], 0);
      _Q2 = vdivq_f64(v8, v41);
      *(_QWORD *)&v43.f64[1] = v47;
      a5 = (__n128)vsqrtq_f64(vdivq_f64(v43, v65));
      *(__n128 *)(a1 + 640) = a5;
      *(double *)(a1 + 656) = sqrt(_Q2.f64[0]);
      *(_QWORD *)&v48.f64[1] = v49;
      *(float64x2_t *)(a1 + 688) = vsqrtq_f64(vdivq_f64(v48, v65));
      *(double *)(a1 + 704) = sqrt(vdivq_f64(v50, v41).f64[0]);
    }
  }
  _Q2.f64[0] = *(float64_t *)(v389 + 472);
  v66 = *(float64x2_t *)(v389 + 456);
  v67 = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
  v393 = 0;
  if (*(double *)a1 >= 0.15)
    a5.n128_u64[0] = *(_QWORD *)(a1 + 176);
  else
    a5.n128_u64[0] = *(_QWORD *)(a1 + 168);
  *(_QWORD *)&v66.f64[1] = v67;
  v406 = vmulq_n_f64(v66, a5.n128_f64[0]);
  *(_QWORD *)&v407 = *(_OWORD *)&vmulq_f64(_Q2, (float64x2_t)a5);
  v404 = 0;
  v405 = 0;
  v26 = -1.0;
  v403 = 0;
  v27 = -1.0;
  if (v11 >= 2)
  {
LABEL_52:
    v391 = 0;
    v68 = a1 + 792;
    v388 = (int8x16_t *)(v389 + 1000);
    __asm { FMOV            V0.2D, #1.0 }
    v387 = *(double *)&_Q0;
    while (1)
    {
      v70 = *(_QWORD *)(a1 + 752);
      v71 = *(_QWORD *)(a1 + 720);
      v72 = v70 - v11;
      if (v70 < v11)
        break;
      v73 = v70 - v11;
      v74 = v11 - 1;
      v75 = v70 - (v11 - 1);
      if (v70 < v11 - 1)
        goto LABEL_59;
LABEL_60:
      v76 = v71 + 80 * v75;
      v77 = *(_QWORD *)(v71 + 80 * v73);
      v78 = v71 + 80 * v73;
      *(_QWORD *)v414 = v77;
      v79 = *(_OWORD *)(v78 + 8);
      *(_QWORD *)&v414[24] = *(_QWORD *)(v78 + 24);
      *(_OWORD *)&v414[8] = v79;
      v409.__r_.__value_.__r.__words[0] = *(_QWORD *)v76;
      v80 = *(_OWORD *)(v76 + 8);
      *(_QWORD *)&v410 = *(_QWORD *)(v76 + 24);
      *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = v80;
      sub_20F1F22B4(v68);
      if ((v393 & 1) != 0
        || ((*(_QWORD *)(*(_QWORD *)(a1 + 768) + ((v74 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v74) & 1) == 0)
      {
        goto LABEL_113;
      }
      if ((v391 & 1) == 0)
      {
        v93 = *(double *)(a1 + 1248);
        v94 = *(double *)(a1 + 1272);
        v82.f64[0] = *(float64_t *)(a1 + 1296);
        v95 = sqrt(v93 * v93 + v94 * v94 + v82.f64[0] * v82.f64[0]);
        _NF = v95 < 1.0;
        if (v95 == 1.0)
          goto LABEL_71;
        v97 = v95 + v27;
        v98 = 1.0 - v95;
        if (!_NF)
          v98 = v97;
        if (v98 <= 0.000001)
        {
LABEL_71:
          v104.f64[0] = *(float64_t *)(a1 + 1248);
          v104.f64[1] = *(float64_t *)(a1 + 1272);
          v105 = vmulq_n_f64(v104, v93);
          v84.f64[0] = v82.f64[0] * v93;
          v106 = vmulq_n_f64(v104, v94);
          v83.n128_f64[0] = v82.f64[0] * v94;
          v107 = vmulq_n_f64(v104, v82.f64[0]);
          v82.f64[0] = v82.f64[0] * v82.f64[0];
          v104.f64[0] = *(float64_t *)(v389 + 264);
          v87.f64[0] = *(float64_t *)(v389 + 288);
          v89.f64[0] = *(float64_t *)(v389 + 312);
          v108 = vaddq_f64(v84, v104);
          v109 = vaddq_f64(v105, *v390);
          v110 = vaddq_f64((float64x2_t)v83, v87);
          v111 = vaddq_f64(v106, *(float64x2_t *)(v389 + 272));
          v112 = vaddq_f64(v82, v89);
          v113 = vaddq_f64(v107, *(float64x2_t *)(v389 + 296));
          *v390 = v109;
          *(float64_t *)(v389 + 264) = v108.f64[0];
          *(float64x2_t *)(v389 + 272) = v111;
          *(float64_t *)(v389 + 288) = v110.f64[0];
          *(float64x2_t *)(v389 + 296) = v113;
          *(float64_t *)(v389 + 312) = v112.f64[0];
          v114 = *(_QWORD *)(a1 + 568);
          if (*(_QWORD *)(a1 + 608) >= 0xFuLL)
          {
            v115 = v114 + 72 * *(_QWORD *)(a1 + 592);
            v90.f64[0] = *(float64_t *)(v115 + 16);
            v91.f64[0] = *(float64_t *)(v115 + 40);
            v92.f64[0] = *(float64_t *)(v115 + 64);
            *(_QWORD *)&v109.f64[1] = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u64[0];
            *(_QWORD *)&v111.f64[1] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u64[0];
            v116 = vsubq_f64(v111, *(float64x2_t *)(v115 + 24));
            *(_QWORD *)&v113.f64[1] = vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL).u64[0];
            v117 = vsubq_f64(v113, *(float64x2_t *)(v115 + 48));
            *v390 = vsubq_f64(v109, *(float64x2_t *)v115);
            *(_QWORD *)(v389 + 264) = *(_OWORD *)&vsubq_f64(v108, v90);
            *(float64x2_t *)(v389 + 272) = v116;
            *(_QWORD *)(v389 + 288) = *(_OWORD *)&vsubq_f64(v110, v91);
            *(float64x2_t *)(v389 + 296) = v117;
            *(_QWORD *)(v389 + 312) = *(_OWORD *)&vsubq_f64(v112, v92);
          }
          v118 = v114 + 72 * *(_QWORD *)(a1 + 600);
          *(float64_t *)(v118 + 16) = v84.f64[0];
          *(_QWORD *)&v105.f64[1] = vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL).u64[0];
          *(float64x2_t *)v118 = v105;
          *(_QWORD *)(v118 + 40) = v83.n128_u64[0];
          *(_QWORD *)&v106.f64[1] = vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL).u64[0];
          *(float64x2_t *)(v118 + 24) = v106;
          *(float64_t *)(v118 + 64) = v82.f64[0];
          *(_QWORD *)&v107.f64[1] = vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL).u64[0];
          *(float64x2_t *)(v118 + 48) = v107;
          v119 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 576) - *(_QWORD *)(a1 + 568)) >> 3);
          v120 = *(_QWORD *)(a1 + 600) + 1;
          if (v120 >= v119)
            v121 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 576) - *(_QWORD *)(a1 + 568)) >> 3);
          else
            v121 = 0;
          *(_QWORD *)(a1 + 600) = v120 - v121;
          v122 = *(_QWORD *)(a1 + 608);
          if (v122 == v119)
          {
            v123 = *(_QWORD *)(a1 + 592) + 1;
            if (v123 < v119)
              v119 = 0;
            *(_QWORD *)(a1 + 592) = v123 - v119;
          }
          else
          {
            *(_QWORD *)(a1 + 608) = v122 + 1;
          }
          v124 = *(_OWORD *)(v389 + 296);
          *(_OWORD *)v415 = *(_OWORD *)(v389 + 280);
          *(_OWORD *)&v415[16] = v124;
          *(_QWORD *)v416 = *(_QWORD *)(v389 + 312);
          v125 = *(_OWORD *)(v389 + 264);
          *(float64x2_t *)v414 = *v390;
          *(_OWORD *)&v414[16] = v125;
          v400 = 0.0;
          LODWORD(v413.tv_sec) = 0;
          v126 = operator new(0x60uLL, (std::align_val_t)0x20uLL);
          sub_20E8BEB88();
          if (LODWORD(v413.tv_sec))
          {
            MEMORY[0x212BC6368](v126, 0x1000C8052888210);
            goto LABEL_93;
          }
          v386 = operator new((8 * (int)v400 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
          sub_20E8BEB88();
          MEMORY[0x212BC6368](v386, 0x1000C8000313F17);
          tv_sec = v413.tv_sec;
          MEMORY[0x212BC6368](v126, 0x1000C8052888210);
          if (tv_sec)
            goto LABEL_93;
          v128 = *(double *)&v409.__r_.__value_.__r.__words[2];
          size = v409.__r_.__value_.__l.__size_;
          v81 = *(double *)&v409.__r_.__value_.__l.__data_;
          if (*(double *)&v409.__r_.__value_.__l.__size_ == 0.0)
            size = v409.__r_.__value_.__r.__words[0];
          if (*(double *)&v409.__r_.__value_.__r.__words[2] == 0.0)
            v128 = *(double *)&size;
          v130 = v128 / *(double *)&v409.__r_.__value_.__l.__data_;
          if (v130 == 0.0)
            goto LABEL_93;
          v131 = 0.0 - v130;
          if (v130 >= 0.0)
            v131 = v130;
          v81 = 0.00000001;
          if (v131 <= 0.00000001)
LABEL_93:
            v132 = 100000000.0;
          else
            v132 = 1.0 / v130;
          v68 = a1 + 792;
          *(double *)(a1 + 552) = v132;
          goto LABEL_95;
        }
        v99 = atomic_load((unsigned __int8 *)&qword_254A681B0);
        if ((v99 & 1) == 0 && __cxa_guard_acquire(&qword_254A681B0))
        {
          v294 = operator new(0x28uLL);
          v294[1] = 0;
          v294[2] = 0;
          *v294 = &off_24C9C4340;
          *((_BYTE *)v294 + 24) = 0;
          *((_BYTE *)v294 + 32) = 0;
          qword_254A68200 = (uint64_t)(v294 + 3);
          qword_254A68208 = (uint64_t)v294;
          unk_254A68210 = 1000000000;
          __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A68200, &dword_20E81F000);
          __cxa_guard_release(&qword_254A681B0);
        }
        v100 = (_QWORD *)qword_254A68200;
        v101 = *(unsigned __int8 *)(qword_254A68200 + 8);
        v102.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (!v101)
        {
          v103 = (std::chrono::steady_clock::time_point *)qword_254A68200;
          if (!*(_BYTE *)(qword_254A68200 + 8))
            *(_BYTE *)(qword_254A68200 + 8) = 1;
          v68 = a1 + 792;
LABEL_217:
          v103->__d_.__rep_ = v102.__d_.__rep_;
          v277 = sub_210219C18();
          v278 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v278 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          if (atomic_load(&qword_254A5A450))
          {
            *(_WORD *)v414 = 0;
            v392 = (char *)_os_log_send_and_compose_impl();
            v280 = strlen(v392);
            v409.__r_.__value_.__r.__words[0] = 0;
            pthread_threadid_np(0, (__uint64_t *)&v409);
            v281 = v409.__r_.__value_.__r.__words[0];
            timespec_get((timespec *)&v409, 1);
            sub_210219E20(v414, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v277 + 1), (__int128 *)(v277 + 5), "Use invalid gravity direction to check changes", 0x2EuLL, v392, v280, v281, &v409);
            std::mutex::lock(&stru_254A5A410);
            v282 = qword_254A5A458;
            for (i = unk_254A5A460; v282 != i; v282 += 40)
            {
              v284 = *(_QWORD *)(v282 + 32);
              if (!v284)
                sub_20E86D37C();
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v284 + 48))(v284, v414);
            }
            std::mutex::unlock(&stru_254A5A410);
            if (SHIBYTE(v418) < 0)
            {
              operator delete(*((void **)&v417 + 1));
              v68 = a1 + 792;
              if (SBYTE7(v417) < 0)
                goto LABEL_245;
LABEL_224:
              if (v416[24])
              {
LABEL_246:
                if ((v416[23] & 0x80000000) != 0)
                  operator delete(*(void **)v416);
              }
            }
            else
            {
              v68 = a1 + 792;
              if ((SBYTE7(v417) & 0x80000000) == 0)
                goto LABEL_224;
LABEL_245:
              operator delete(*(void **)&v416[32]);
              if (v416[24])
                goto LABEL_246;
            }
            if (v415[24] && (v415[23] & 0x80000000) != 0)
              operator delete(*(void **)v415);
            if ((v414[31] & 0x80000000) != 0)
              operator delete(*(void **)&v414[8]);
            if (v392)
              free(v392);
          }
          if (os_signpost_enabled((os_log_t)*v277))
          {
            *(_WORD *)v414 = 0;
            _os_signpost_emit_unreliably_with_name_impl();
          }
          goto LABEL_95;
        }
        v68 = a1 + 792;
        if (v102.__d_.__rep_ - *v100 >= 1000000000)
        {
          v103 = (std::chrono::steady_clock::time_point *)qword_254A68200;
          goto LABEL_217;
        }
      }
LABEL_95:
      v26 = *(_QWORD *)v76;
      v133 = *(double *)(a1 + 560);
      v134 = *(double *)(a1 + 552) >= v133 || *(_BYTE *)(a1 + 74) != 0;
      if (*(_BYTE *)(a1 + 72))
        v135 = 0;
      else
        v135 = v134;
      v136 = (int8x16_t *)(v71 + 80 * v75);
      *(_QWORD *)v414 = *(_QWORD *)v76;
      v137 = v136[2];
      *(_QWORD *)&v414[24] = v136[3].i64[0];
      *(int8x16_t *)&v414[8] = v137;
      v137.i64[0] = *(_QWORD *)(a1 + 184);
      if (sub_20F1F93F8(v68, (uint64_t)v414, &v406, v135, *(unsigned __int8 *)(a1 + 75), v137, v133, v81, (int64x2_t)v82, v83.n128_f64[0], v84.f64[0], v85, (int64x2_t)v86))
      {
        if (0xCCCCCCCCCCCCCCCDLL * v11 <= 0x3333333333333333)
        {
          _Q1 = *(_OWORD *)(v389 + 1072);
          _D3 = *(_QWORD *)(v389 + 1080);
          __asm { FMLA            D2, D3, V1.D[1] }
          v141 = *(_QWORD *)(a1 + 48);
          v142 = *(_QWORD *)(a1 + 16);
          *(double *)(v142 + 8 * v141) = sqrt(_D2 + *(double *)(v389 + 1088) * *(double *)(v389 + 1088));
          v143 = (*(_QWORD *)(a1 + 24) - v142) >> 3;
          v144 = v141 + 1;
          if (v144 >= v143)
            v145 = v143;
          else
            v145 = 0;
          *(_QWORD *)(a1 + 48) = v144 - v145;
          v146 = *(_QWORD *)(a1 + 56);
          if (v146 == v143)
          {
            v147 = *(_QWORD *)(a1 + 40) + 1;
            if (v147 < v143)
              v143 = 0;
            *(_QWORD *)(a1 + 40) = v147 - v143;
          }
          else
          {
            *(_QWORD *)(a1 + 56) = v146 + 1;
          }
        }
        ++v405;
      }
      v391 = 1;
LABEL_113:
      if (!*(_QWORD *)(a1 + 2104))
        goto LABEL_143;
      if (vabdd_f64(*(double *)(a1 + 1192), *(double *)v76) >= 0.00001
        && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AttitudeFilter/src/AttitudeFilter.cpp", 335, (uint64_t)"abs(ekf_.GetState().Timestamp() - imu_1_extract_bias.timestamp) < 1e-5", 70, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
      {
        abort();
      }
      v148 = atomic_load((unsigned __int8 *)&qword_254A681B8);
      if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_254A681B8))
      {
        v292 = operator new(0x28uLL);
        v292[1] = 0;
        v292[2] = 0;
        *v292 = &off_24C9C4340;
        *((_BYTE *)v292 + 24) = 0;
        *((_BYTE *)v292 + 32) = 0;
        qword_254A68218 = (uint64_t)(v292 + 3);
        qword_254A68220 = (uint64_t)v292;
        unk_254A68228 = 1000000000;
        __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A68218, &dword_20E81F000);
        __cxa_guard_release(&qword_254A681B8);
      }
      v149 = (_QWORD *)qword_254A68218;
      v150 = *(unsigned __int8 *)(qword_254A68218 + 8);
      v151.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v150)
      {
        v68 = a1 + 792;
        if (v151.__d_.__rep_ - *v149 < 1000000000)
          goto LABEL_143;
        v152 = (std::chrono::steady_clock::time_point *)qword_254A68218;
      }
      else
      {
        v152 = (std::chrono::steady_clock::time_point *)qword_254A68218;
        v68 = a1 + 792;
        if (!*(_BYTE *)(qword_254A68218 + 8))
          *(_BYTE *)(qword_254A68218 + 8) = 1;
      }
      v152->__d_.__rep_ = v151.__d_.__rep_;
      v153 = sub_210219C18();
      v154 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
      if ((v154 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
      {
        __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
        __cxa_guard_release(&qword_254A6DDD0);
      }
      if (!atomic_load(&qword_254A5A450))
        goto LABEL_141;
      *(_WORD *)v414 = 0;
      v156 = (char *)_os_log_send_and_compose_impl();
      v157 = strlen(v156);
      v409.__r_.__value_.__r.__words[0] = 0;
      pthread_threadid_np(0, (__uint64_t *)&v409);
      v158 = v409.__r_.__value_.__r.__words[0];
      timespec_get((timespec *)&v409, 1);
      sub_210219E20(v414, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v153 + 1), (__int128 *)(v153 + 5), "IMU frequency should be 100hz, skipping NG update.", 0x32uLL, v156, v157, v158, &v409);
      std::mutex::lock(&stru_254A5A410);
      v159 = qword_254A5A458;
      for (j = unk_254A5A460; v159 != j; v159 += 40)
      {
        v161 = *(_QWORD *)(v159 + 32);
        if (!v161)
          sub_20E86D37C();
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v161 + 48))(v161, v414);
      }
      std::mutex::unlock(&stru_254A5A410);
      if (SHIBYTE(v418) < 0)
      {
        operator delete(*((void **)&v417 + 1));
        v68 = a1 + 792;
        if ((SBYTE7(v417) & 0x80000000) == 0)
        {
LABEL_129:
          if (v416[24])
            goto LABEL_133;
          goto LABEL_135;
        }
      }
      else
      {
        v68 = a1 + 792;
        if ((SBYTE7(v417) & 0x80000000) == 0)
          goto LABEL_129;
      }
      operator delete(*(void **)&v416[32]);
      if (v416[24])
      {
LABEL_133:
        if ((v416[23] & 0x80000000) != 0)
          operator delete(*(void **)v416);
      }
LABEL_135:
      if (v415[24] && (v415[23] & 0x80000000) != 0)
        operator delete(*(void **)v415);
      if ((v414[31] & 0x80000000) == 0)
      {
        if (!v156)
          goto LABEL_141;
LABEL_140:
        free(v156);
        goto LABEL_141;
      }
      operator delete(*(void **)&v414[8]);
      if (v156)
        goto LABEL_140;
LABEL_141:
      if (os_signpost_enabled((os_log_t)*v153))
      {
        *(_WORD *)v414 = 0;
        _os_signpost_emit_unreliably_with_name_impl();
      }
LABEL_143:
      if (!*(_BYTE *)(a1 + 72))
      {
        v179 = *(double *)v76;
        v180 = v71 + 80 * v75;
        v400 = *(double *)v76;
        v181 = *(float64x2_t *)(v180 + 56);
        v402 = *(double *)(v180 + 72);
        v401 = v181;
        _V2.D[1] = v181.f64[1];
        _D4 = v181.f64[1];
        __asm { FMLA            D3, D4, V2.D[1] }
        v185 = sqrt(_D3 + v402 * v402);
        if (v185 == 0.0)
          goto LABEL_242;
        if (v185 <= 1.0e-10 || *(_BYTE *)(a1 + 336) == 0)
          goto LABEL_242;
        v187 = *(double *)(a1 + 1192);
        v188 = v187 < v179;
        if (v187 != v179)
        {
          v189 = v187 - v179;
          v190 = v179 - v187;
          if (!v188)
            v190 = v189;
          if (v190 > 1.0e-10
            && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AttitudeFilter/src/AttitudeFilter.cpp", 469, (uint64_t)"Near<double>(ekf_.Timestamp(), mag_meas.timestamp, 1e-10)", 57, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
          {
            abort();
          }
        }
        if (!*(_BYTE *)(a1 + 2080))
        {
          v86.i64[0] = *(_QWORD *)(v389 + 1016);
          v87.f64[0] = *(float64_t *)(v389 + 1040);
          v191 = *(float64x2_t *)(v389 + 1024);
          v88.i64[0] = *(_QWORD *)(v389 + 1064);
          v192 = *(float64x2_t *)(v389 + 1048);
          v193 = *(float64x2_t *)(v389 + 1552);
          v194 = (float64x2_t)vextq_s8(*v388, v86, 8uLL);
          v195.f64[0] = 0.0;
          *(_QWORD *)&v195.f64[1] = v388->i64[0];
          v196.f64[0] = 0.0;
          v196.f64[1] = *(float64_t *)(v389 + 1024);
          v197 = (float64x2_t)vextq_s8((int8x16_t)v191, (int8x16_t)v87, 8uLL);
          v198 = (float64x2_t)vextq_s8((int8x16_t)v192, v88, 8uLL);
          v199.f64[0] = v387;
          v199.f64[1] = *(float64_t *)(v389 + 1048);
          v200 = vmulq_f64(v195, (float64x2_t)0);
          v201 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, *(double *)v388->i64), (float64x2_t)xmmword_2102DD520, v191.f64[0]), (float64x2_t)0, v192.f64[0]);
          v202 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v195, *(double *)v388->i64), v196, v191.f64[0]), v199, v192.f64[0]);
          v203 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v194, *(double *)v388->i64), v197, v191.f64[0]), v198, v192.f64[0]);
          v204 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64((float64x2_t)xmmword_21030D320, *(float64x2_t *)v388, 1), (float64x2_t)xmmword_2102DD520, v191, 1), (float64x2_t)0, v192, 1);
          v205 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v195, *(float64x2_t *)v388, 1), v196, v191, 1), v199, v192, 1);
          v206 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v194, *(float64x2_t *)v388, 1), v197, v191, 1), v198, v192, 1);
          v207 = vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, *(double *)v86.i64), (float64x2_t)xmmword_2102DD520, v87.f64[0]);
          v208 = vmlaq_n_f64(vmulq_n_f64(v195, *(double *)v86.i64), v196, v87.f64[0]);
          v209 = vmlaq_n_f64(vmulq_n_f64(v194, *(double *)v86.i64), v197, v87.f64[0]);
          v210 = vmulq_f64(v194, (float64x2_t)0);
          v211 = vmlaq_n_f64(v207, (float64x2_t)0, *(double *)v88.i64);
          v212 = vmlaq_n_f64(v208, v199, *(double *)v88.i64);
          v213 = vmlaq_n_f64(v209, v198, *(double *)v88.i64);
          v214 = vaddq_f64(*(float64x2_t *)(v389 + 1536), vmlaq_f64(vmlaq_f64(v194, (float64x2_t)0, v197), (float64x2_t)0, v198));
          v215 = vaddq_f64(*(float64x2_t *)(v389 + 1520), vmlaq_f64(vmlaq_f64(v195, (float64x2_t)0, v196), (float64x2_t)0, v199));
          v216 = vaddq_f64(*(float64x2_t *)(v389 + 1584), vmlaq_f64(vaddq_f64(v197, v210), (float64x2_t)0, v198));
          v217 = vaddq_f64(*(float64x2_t *)(v389 + 1568), vmlaq_f64(vaddq_f64(v196, v200), (float64x2_t)0, v199));
          v218 = vaddq_f64(*(float64x2_t *)(v389 + 1632), vaddq_f64(v198, vmlaq_f64(v210, (float64x2_t)0, v197)));
          v219 = vaddq_f64(*(float64x2_t *)(v389 + 1616), vaddq_f64(v199, vmlaq_f64(v200, (float64x2_t)0, v196)));
          v220 = vaddq_f64(*(float64x2_t *)(v389 + 1680), v203);
          v221 = vaddq_f64(*(float64x2_t *)(v389 + 1664), v202);
          v222 = vaddq_f64(*(float64x2_t *)(v389 + 1648), v201);
          v223 = vaddq_f64(*(float64x2_t *)(v389 + 1728), v206);
          v224 = vaddq_f64(*(float64x2_t *)(v389 + 1712), v205);
          v225 = vaddq_f64(*(float64x2_t *)(v389 + 1696), v204);
          v226 = vaddq_f64(*(float64x2_t *)(v389 + 1776), v213);
          v227 = vaddq_f64(*(float64x2_t *)(v389 + 1760), v212);
          v228 = vaddq_f64(*(float64x2_t *)(v389 + 1744), v211);
          *(float64x2_t *)(v389 + 1504) = vaddq_f64(*(float64x2_t *)(v389 + 1504), (float64x2_t)xmmword_21030D320);
          *(float64x2_t *)(v389 + 1520) = v215;
          *(float64x2_t *)(v389 + 1536) = v214;
          *(float64x2_t *)(v389 + 1552) = vaddq_f64(v193, (float64x2_t)xmmword_2102DD520);
          *(float64x2_t *)(v389 + 1568) = v217;
          *(float64x2_t *)(v389 + 1584) = v216;
          *(float64x2_t *)(v389 + 1600) = vaddq_f64(*(float64x2_t *)(v389 + 1600), (float64x2_t)0);
          *(float64x2_t *)(v389 + 1616) = v219;
          *(float64x2_t *)(v389 + 1632) = v218;
          *(float64x2_t *)(v389 + 1648) = v222;
          *(float64x2_t *)(v389 + 1664) = v221;
          *(float64x2_t *)(v389 + 1680) = v220;
          *(float64x2_t *)(v389 + 1696) = v225;
          *(float64x2_t *)(v389 + 1712) = v224;
          *(float64x2_t *)(v389 + 1728) = v223;
          *(float64x2_t *)(v389 + 1744) = v228;
          *(float64x2_t *)(v389 + 1760) = v227;
          *(float64x2_t *)(v389 + 1776) = v226;
          v229 = vaddq_f64(*(float64x2_t *)(v389 + 1824), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v194, v401.f64[0]), v197, v401, 1), v198, v402));
          v230 = vaddq_f64(*(float64x2_t *)(v389 + 1808), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v195, v401.f64[0]), v196, v401, 1), v199, v402));
          *(float64x2_t *)(v389 + 1792) = vaddq_f64(*(float64x2_t *)(v389 + 1792), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_21030D320, v401.f64[0]), (float64x2_t)xmmword_2102DD520, v401, 1), (float64x2_t)0, v402));
          *(float64x2_t *)(v389 + 1808) = v230;
          *(float64x2_t *)(v389 + 1824) = v229;
          ++*(_QWORD *)(a1 + 2072);
        }
        sub_20F214464(a1 + 1704, (uint64_t)&v409);
        if (!v412)
          goto LABEL_239;
        *(double *)(a1 + 1688) = v400;
        *(_BYTE *)(a1 + 1696) = 1;
        *(_BYTE *)(a1 + 1680) = 1;
        v238 = operator new(0xA0uLL, (std::align_val_t)0x20uLL);
        v239 = *(_OWORD *)(a1 + 1056);
        *v238 = *(_OWORD *)(a1 + 1040);
        v238[1] = v239;
        v240 = *(_OWORD *)(a1 + 1088);
        v238[2] = *(_OWORD *)(a1 + 1072);
        v238[3] = v240;
        v241 = *(_OWORD *)(a1 + 1120);
        v238[4] = *(_OWORD *)(a1 + 1104);
        v238[5] = v241;
        v242 = *(_OWORD *)(a1 + 1152);
        v238[6] = *(_OWORD *)(a1 + 1136);
        v238[7] = v242;
        v238[8] = *(_OWORD *)(a1 + 1168);
        *(_QWORD *)&v242 = v411;
        *(std::string *)((char *)v238 + 8 * *(unsigned int *)(a1 + 1424)) = v409;
        v243 = (char *)v238 + 8 * *(unsigned int *)(a1 + 1456);
        v244 = v410;
        *((_QWORD *)v243 + 2) = v242;
        *(_OWORD *)v243 = v244;
        v245 = v238[1];
        *(_OWORD *)v414 = *v238;
        *(_OWORD *)&v414[16] = v245;
        v246 = v238[3];
        *(_OWORD *)v415 = v238[2];
        *(_OWORD *)&v415[16] = v246;
        v247 = v238[5];
        *(_OWORD *)v416 = v238[4];
        *(_OWORD *)&v416[16] = v247;
        v248 = v238[7];
        *(_OWORD *)&v416[32] = v238[6];
        v417 = v248;
        v418 = v238[8];
        v249 = sub_20F1F1160(a1 + 1040, (uint64_t)v414);
        MEMORY[0x212BC6368](v238, 0x1000C8000313F17, v249);
        v250 = atomic_load((unsigned __int8 *)&qword_254A681C8);
        if ((v250 & 1) == 0 && __cxa_guard_acquire(&qword_254A681C8))
        {
          v293 = operator new(0x28uLL);
          v293[1] = 0;
          v293[2] = 0;
          *v293 = &off_24C9C4340;
          *((_BYTE *)v293 + 24) = 0;
          *((_BYTE *)v293 + 32) = 0;
          qword_254A68248 = (uint64_t)(v293 + 3);
          qword_254A68250 = (uint64_t)v293;
          unk_254A68258 = 5000000000;
          __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A68248, &dword_20E81F000);
          __cxa_guard_release(&qword_254A681C8);
          v68 = a1 + 792;
        }
        v251 = (_QWORD *)qword_254A68248;
        v252 = *(unsigned __int8 *)(qword_254A68248 + 8);
        v253.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (v252)
        {
          if (v253.__d_.__rep_ - *v251 >= 5000000000)
          {
            v254 = (std::chrono::steady_clock::time_point *)qword_254A68248;
            goto LABEL_205;
          }
LABEL_239:
          if (*(_BYTE *)(a1 + 1680)
            && sub_20F20249C(v68, (uint64_t)&v400, (float64x2_t *)(a1 + 304), *(double *)(a1 + 328), v231, v232, v233, v234, v235, v236, v237))
          {
            v291 = 1;
LABEL_243:
            v404 += v291;
            goto LABEL_54;
          }
LABEL_242:
          v291 = 0;
          goto LABEL_243;
        }
        v254 = (std::chrono::steady_clock::time_point *)qword_254A68248;
        if (!*(_BYTE *)(qword_254A68248 + 8))
          *(_BYTE *)(qword_254A68248 + 8) = 1;
LABEL_205:
        v254->__d_.__rep_ = v253.__d_.__rep_;
        v262 = sub_210219C18();
        v263 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
        if ((v263 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
        {
          __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
          __cxa_guard_release(&qword_254A6DDD0);
        }
        if (atomic_load(&qword_254A5A450))
        {
          v265 = *(_QWORD *)(a1 + 1400);
          v266 = *(_QWORD *)(a1 + 1408);
          v267 = *(_QWORD *)(a1 + 1416);
          v268 = *(_QWORD *)(a1 + 1432);
          v269 = *(_QWORD *)(a1 + 1440);
          v270 = *(_QWORD *)(a1 + 1448);
          *(_DWORD *)v414 = 134220288;
          *(double *)&v414[4] = v400;
          *(_WORD *)&v414[12] = 2048;
          *(float64_t *)&v414[14] = v401.f64[0];
          *(_WORD *)&v414[22] = 2048;
          *(float64_t *)&v414[24] = v401.f64[1];
          *(_WORD *)v415 = 2048;
          *(double *)&v415[2] = v402;
          *(_WORD *)&v415[10] = 2048;
          *(_QWORD *)&v415[12] = v265;
          *(_WORD *)&v415[20] = 2048;
          *(_QWORD *)&v415[22] = v266;
          *(_WORD *)&v415[30] = 2048;
          *(_QWORD *)v416 = v267;
          *(_WORD *)&v416[8] = 2048;
          *(_QWORD *)&v416[10] = v268;
          *(_WORD *)&v416[18] = 2048;
          *(_QWORD *)&v416[20] = v269;
          *(_WORD *)&v416[28] = 2048;
          *(_QWORD *)&v416[30] = v270;
          v271 = (char *)_os_log_send_and_compose_impl();
          v272 = strlen(v271);
          v413.tv_sec = 0;
          pthread_threadid_np(0, (__uint64_t *)&v413);
          v273 = v413.tv_sec;
          timespec_get(&v413, 1);
          sub_210219E20(v414, 0xEEEEB0B5B2B2EEEELL, "Trace", 5uLL, (__int128 *)(v262 + 1), (__int128 *)(v262 + 5), "ThreeDOFTracker: UPDATE MAG FIELD ESTIMATE timestamp = %lf mag data x/y/z = %lf/%lf/%lf, mag model bias =%lf/%lf/%lf, mag model vector =%lf/%lf/%lf", 0x93uLL, v271, v272, v273, &v413);
          std::mutex::lock(&stru_254A5A410);
          v274 = qword_254A5A458;
          for (k = unk_254A5A460; v274 != k; v274 += 40)
          {
            v276 = *(_QWORD *)(v274 + 32);
            if (!v276)
              sub_20E86D37C();
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v276 + 48))(v276, v414);
          }
          std::mutex::unlock(&stru_254A5A410);
          if (SHIBYTE(v418) < 0)
          {
            operator delete(*((void **)&v417 + 1));
            v68 = a1 + 792;
            if (SBYTE7(v417) < 0)
              goto LABEL_227;
LABEL_212:
            if (v416[24])
            {
LABEL_228:
              if ((v416[23] & 0x80000000) != 0)
                operator delete(*(void **)v416);
            }
          }
          else
          {
            v68 = a1 + 792;
            if ((SBYTE7(v417) & 0x80000000) == 0)
              goto LABEL_212;
LABEL_227:
            operator delete(*(void **)&v416[32]);
            if (v416[24])
              goto LABEL_228;
          }
          if (v415[24] && (v415[23] & 0x80000000) != 0)
            operator delete(*(void **)v415);
          if ((v414[31] & 0x80000000) != 0)
            operator delete(*(void **)&v414[8]);
          if (v271)
            free(v271);
        }
        if (os_signpost_enabled((os_log_t)*v262))
        {
          v285 = *(_QWORD *)(a1 + 1400);
          v286 = *(_QWORD *)(a1 + 1408);
          v287 = *(_QWORD *)(a1 + 1416);
          v288 = *(_QWORD *)(a1 + 1432);
          v289 = *(_QWORD *)(a1 + 1440);
          v290 = *(_QWORD *)(a1 + 1448);
          *(_DWORD *)v414 = 134220288;
          *(double *)&v414[4] = v400;
          *(_WORD *)&v414[12] = 2048;
          *(float64_t *)&v414[14] = v401.f64[0];
          *(_WORD *)&v414[22] = 2048;
          *(float64_t *)&v414[24] = v401.f64[1];
          *(_WORD *)v415 = 2048;
          *(double *)&v415[2] = v402;
          *(_WORD *)&v415[10] = 2048;
          *(_QWORD *)&v415[12] = v285;
          *(_WORD *)&v415[20] = 2048;
          *(_QWORD *)&v415[22] = v286;
          *(_WORD *)&v415[30] = 2048;
          *(_QWORD *)v416 = v287;
          *(_WORD *)&v416[8] = 2048;
          *(_QWORD *)&v416[10] = v288;
          *(_WORD *)&v416[18] = 2048;
          *(_QWORD *)&v416[20] = v289;
          *(_WORD *)&v416[28] = 2048;
          *(_QWORD *)&v416[30] = v290;
          _os_signpost_emit_unreliably_with_name_impl();
        }
        goto LABEL_239;
      }
      if (*(_BYTE *)(a1 + 336))
      {
        v162 = v71 + 80 * v75;
        v164 = *(_OWORD *)(v162 + 56);
        v163 = (double *)(v162 + 56);
        _V0.D[1] = *((_QWORD *)&v164 + 1);
        _D3 = *((double *)&v164 + 1);
        __asm { FMLA            D2, D3, V0.D[1] }
        v168 = sqrt(_D2 + v163[2] * v163[2]);
        if (v168 != 0.0 && v168 > 1.0e-10)
        {
          if (*(_QWORD *)(a1 + 1464) == *(_QWORD *)(a1 + 1472)
            || (v169 = *(double *)(a1 + 1192) - *(double *)(a1 + 1672), v170 = *(double *)(a1 + 200), v169 > v170))
          {
            *(_QWORD *)v414 = *(_QWORD *)v76;
            v171 = *(_OWORD *)v163;
            *(double *)&v414[24] = v163[2];
            *(_OWORD *)&v414[8] = v171;
            sub_20F202A44(v68, (uint64_t *)v414);
            v169 = *(double *)v76;
            *(_QWORD *)(a1 + 1672) = *(_QWORD *)v76;
          }
          v172 = sub_20F2044B4(v68, v169, v170, _D2, _D3, v83);
          if (((v393 | v172) & 1) != 0)
          {
            if (v172)
              goto LABEL_152;
LABEL_181:
            if (*(_BYTE *)(a1 + 936))
              goto LABEL_182;
LABEL_186:
            v258 = (_QWORD *)(a1 + 216);
            if (*(_BYTE *)(a1 + 937))
              v258 = (_QWORD *)(a1 + 208);
            if (0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 1472) - *(_QWORD *)(a1 + 1464)) >> 4) < *v258)
              goto LABEL_54;
            v255 = 0;
            v256 = *(_QWORD *)(a1 + 1472);
            v257 = *(_QWORD *)(a1 + 1464);
            if (*(_BYTE *)(a1 + 937))
              goto LABEL_190;
          }
          else
          {
            if (!sub_20F203AD4(v68, *(unsigned __int8 *)(a1 + 1664), v173))
              goto LABEL_181;
LABEL_152:
            v174 = *(_QWORD *)(a1 + 1472);
            v175 = *(_QWORD *)(a1 + 1464);
            if (v174 == v175)
            {
              v176 = 0;
            }
            else
            {
              v176 = 0;
              v177 = 0;
              do
              {
                if (v177 == *(_QWORD *)(a1 + 944) || *(_BYTE *)(v175 + 144 * v177 + 137) == 0)
                {
                  ++v177;
                }
                else
                {
                  sub_20F20332C(v68, v177);
                  ++v176;
                  v174 = *(_QWORD *)(a1 + 1472);
                  v175 = *(_QWORD *)(a1 + 1464);
                }
              }
              while (v177 < 0x8E38E38E38E38E39 * ((v174 - v175) >> 4));
            }
            v404 += v176;
            if (!*(_BYTE *)(a1 + 936))
              goto LABEL_186;
LABEL_182:
            v255 = *(_QWORD *)(a1 + 944);
            v256 = *(_QWORD *)(a1 + 1472);
            v257 = *(_QWORD *)(a1 + 1464);
            if (*(_BYTE *)(a1 + 937))
            {
LABEL_190:
              if (v256 == v257)
              {
                v257 = v256;
              }
              else
              {
                v259 = (v256 - v257) / 144;
                v260 = *(_QWORD *)(a1 + 944);
                if (v259 <= 1)
                  v259 = 1;
                if (v260 + 1 == v259)
                {
                  if (v260)
                    v255 = 0;
                }
                else
                {
                  v255 = v260 == 0;
                }
              }
            }
          }
          v261 = 0x8E38E38E38E38E39 * ((v256 - v257) >> 4);
          if (v255 < v261)
          {
            if (v255 == *(_QWORD *)(a1 + 944))
            {
              *(_BYTE *)(a1 + 936) = 0;
              if (v255 >= v261 - 1)
                *(_QWORD *)(a1 + 944) = 0;
            }
            sub_20F20332C(v68, v255);
          }
        }
      }
LABEL_54:
      v11 = v74;
      if (v74 <= 1)
      {
        v27 = *(double *)v76;
        goto LABEL_270;
      }
    }
    v73 = v72 - 0x3333333333333333 * ((*(_QWORD *)(a1 + 728) - v71) >> 4);
    v74 = v11 - 1;
    v75 = v70 - (v11 - 1);
    if (v70 >= v11 - 1)
      goto LABEL_60;
LABEL_59:
    v75 = v72 - 0x3333333333333333 * ((*(_QWORD *)(a1 + 728) - v71) >> 4) + 1;
    goto LABEL_60;
  }
LABEL_270:
  if ((v393 & 1) == 0)
  {
    v295 = *(_QWORD *)(a1 + 56);
    if (v295 < 0x64)
      goto LABEL_284;
    v296 = *(_QWORD *)(a1 + 40);
    v297 = *(_QWORD *)(a1 + 16);
    v298 = (*(_QWORD *)(a1 + 24) - v297) >> 3;
    v299 = v295 & 0xFFFFFFFFFFFFFFFELL;
    v300 = 0.0;
    v301 = v295 & 0xFFFFFFFFFFFFFFFELL;
    v302 = v296;
    do
    {
      v300 = v300 + *(double *)(v297 + 8 * (v302 % v298)) + *(double *)(v297 + 8 * ((v302 + 1) % v298));
      v302 += 2;
      v301 -= 2;
    }
    while (v301);
    v303 = v295 - v299;
    if (v295 != v299)
    {
      v304 = v296 + v299;
      do
      {
        v300 = v300 + *(double *)(v297 + 8 * (v304 % v298));
        ++v304;
        --v303;
      }
      while (v303);
    }
    v305 = v300 / (double)v295;
    v306 = v295 & 0xFFFFFFFFFFFFFFFELL;
    v307 = 0.0;
    v308 = v295 & 0xFFFFFFFFFFFFFFFELL;
    v309 = *(_QWORD *)(a1 + 40);
    do
    {
      v310 = *(double *)(v297 + 8 * (v309 % v298)) - v305;
      v307 = v307
           + v310 * v310
           + (*(double *)(v297 + 8 * ((v309 + 1) % v298)) - v305) * (*(double *)(v297 + 8 * ((v309 + 1) % v298)) - v305);
      v309 += 2;
      v308 -= 2;
    }
    while (v308);
    if (v295 != v306)
    {
      v311 = v295 - v306;
      v312 = v306 + v296;
      do
      {
        v313 = *(double *)(v297 + 8 * (v312 % v298)) - v305;
        v307 = v307 + v313 * v313;
        ++v312;
        --v311;
      }
      while (v311);
    }
    if (sqrt(v307 / (double)(v295 - 1)) * 57.2957795 >= *(double *)(a1 + 80))
LABEL_284:
      v314 = 0;
    else
      v314 = 1;
    *(_BYTE *)(a1 + 1664) = v314;
  }
  v315 = *(double *)(a1 + 8);
  v316 = *(double *)(*(_QWORD *)(a1 + 720) + 80 * *(_QWORD *)(a1 + 744));
  if (v315 < 0.0)
  {
    *(double *)(a1 + 8) = v316;
    v315 = v316;
  }
  v317 = v316 - v315;
  v318 = *(double *)a1;
  if ((v393 & 1) != 0)
  {
    if (v317 > 30.0)
    {
      v318 = v318 * 1.5;
      *(double *)a1 = v318;
    }
  }
  else
  {
    if (v317 < 5.0)
    {
      v318 = v318 * 0.9;
      *(double *)a1 = v318;
    }
    *(_QWORD *)(a1 + 8) = v26;
  }
  v319 = &v408;
  if (v408 >= v318)
    v319 = (double *)a1;
  if (v318 < *(double *)(a1 + 232))
    v319 = (double *)v389;
  *(double *)a1 = *v319;
  v320 = *(_QWORD *)(a1 + 760);
  v398 = v320 == 0;
  v399 = 0;
  v394 = v389 + 488;
  v396 = v320 - 1;
  v397 = v389 + 488;
  v395 = 0;
  sub_20F1EB0E8((uint64_t)v414, (_QWORD *)(v389 + 488), (uint64_t)&v397, (uint64_t)&v394);
  if (v405)
    v321 = 3;
  else
    v321 = 2;
  *(_DWORD *)(a1 + 64) = v321;
  v409.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
  strcpy(v409.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
  v322 = std::string::append(&v409, ".update", 7uLL);
  v323 = *(_OWORD *)&v322->__r_.__value_.__l.__data_;
  *(_QWORD *)&v414[16] = *((_QWORD *)&v322->__r_.__value_.__l + 2);
  *(_OWORD *)v414 = v323;
  v322->__r_.__value_.__l.__size_ = 0;
  v322->__r_.__value_.__r.__words[2] = 0;
  v322->__r_.__value_.__r.__words[0] = 0;
  v324 = v414[23];
  v325 = *(_BYTE **)v414;
  v326 = *(_QWORD *)&v414[8];
  sub_20FF3F5E8();
  if ((v324 & 0x80u) == 0)
    v327 = v414;
  else
    v327 = v325;
  if ((v324 & 0x80u) == 0)
    v328 = v324;
  else
    v328 = v326;
  v329 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v327, v328);
  if ((v414[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v414);
    if ((SHIBYTE(v409.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_309;
LABEL_360:
    operator delete(v409.__r_.__value_.__l.__data_);
    goto LABEL_309;
  }
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_360;
LABEL_309:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v329 + 24))(v329))
  {
    *(_QWORD *)&v400 = (uint64_t)(v27 * 1000000000.0);
    *(_QWORD *)&v401.f64[0] = 2;
    v330 = sub_20FF3F5E8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v329 + 24))(v329))
    {
      v331 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v329 + 56))(v329);
      *(_WORD *)&v414[23] = 273;
      strcpy(v414, "num_update_static");
      sub_20F1EFF48(&v409, &v405, (__int128 *)v414, (__int128 *)&v400);
      sub_20EB09324((uint64_t)v330, v331, (uint64_t)&v409);
      v332 = (std::__shared_weak_count *)v409.__r_.__value_.__r.__words[2];
      if (v409.__r_.__value_.__r.__words[2])
      {
        v333 = (unint64_t *)(v409.__r_.__value_.__r.__words[2] + 8);
        do
          v334 = __ldaxr(v333);
        while (__stlxr(v334 - 1, v333));
        if (!v334)
        {
          ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
          std::__shared_weak_count::__release_weak(v332);
        }
      }
      if (v414[24] && (v414[23] & 0x80000000) != 0)
        operator delete(*(void **)v414);
    }
  }
  v409.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
  strcpy(v409.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
  v335 = std::string::append(&v409, ".update", 7uLL);
  v336 = *(_OWORD *)&v335->__r_.__value_.__l.__data_;
  *(_QWORD *)&v414[16] = *((_QWORD *)&v335->__r_.__value_.__l + 2);
  *(_OWORD *)v414 = v336;
  v335->__r_.__value_.__l.__size_ = 0;
  v335->__r_.__value_.__r.__words[2] = 0;
  v335->__r_.__value_.__r.__words[0] = 0;
  v337 = v414[23];
  v338 = *(_BYTE **)v414;
  v339 = *(_QWORD *)&v414[8];
  sub_20FF3F5E8();
  if ((v337 & 0x80u) == 0)
    v340 = v414;
  else
    v340 = v338;
  if ((v337 & 0x80u) == 0)
    v341 = v337;
  else
    v341 = v339;
  v342 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v340, v341);
  if ((v414[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v414);
    if ((SHIBYTE(v409.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_327;
LABEL_362:
    operator delete(v409.__r_.__value_.__l.__data_);
    goto LABEL_327;
  }
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_362;
LABEL_327:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v342 + 24))(v342))
  {
    *(_QWORD *)&v400 = (uint64_t)(v27 * 1000000000.0);
    *(_QWORD *)&v401.f64[0] = 2;
    v343 = sub_20FF3F5E8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v342 + 24))(v342))
    {
      v344 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v342 + 56))(v342);
      *(_WORD *)&v414[23] = 270;
      strcpy(v414, "num_update_mag");
      sub_20F1EFF48(&v409, &v404, (__int128 *)v414, (__int128 *)&v400);
      sub_20EB09324((uint64_t)v343, v344, (uint64_t)&v409);
      v345 = (std::__shared_weak_count *)v409.__r_.__value_.__r.__words[2];
      if (v409.__r_.__value_.__r.__words[2])
      {
        v346 = (unint64_t *)(v409.__r_.__value_.__r.__words[2] + 8);
        do
          v347 = __ldaxr(v346);
        while (__stlxr(v347 - 1, v346));
        if (!v347)
        {
          ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
          std::__shared_weak_count::__release_weak(v345);
        }
      }
      if (v414[24] && (v414[23] & 0x80000000) != 0)
        operator delete(*(void **)v414);
    }
  }
  v409.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v409.__r_.__value_.__r.__words[1] = xmmword_2102DAFD0;
  strcpy(v409.__r_.__value_.__l.__data_, "cv3d.vio.AttitudeFilter");
  v348 = std::string::append(&v409, ".update", 7uLL);
  v349 = *(_OWORD *)&v348->__r_.__value_.__l.__data_;
  *(_QWORD *)&v414[16] = *((_QWORD *)&v348->__r_.__value_.__l + 2);
  *(_OWORD *)v414 = v349;
  v348->__r_.__value_.__l.__size_ = 0;
  v348->__r_.__value_.__r.__words[2] = 0;
  v348->__r_.__value_.__r.__words[0] = 0;
  v350 = v414[23];
  v351 = *(_BYTE **)v414;
  v352 = *(_QWORD *)&v414[8];
  sub_20FF3F5E8();
  if ((v350 & 0x80u) == 0)
    v353 = v414;
  else
    v353 = v351;
  if ((v350 & 0x80u) == 0)
    v354 = v350;
  else
    v354 = v352;
  v355 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(qword_254A6DC40 + 48))(&qword_254A6DC40, v353, v354);
  if ((v414[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v414);
    if ((SHIBYTE(v409.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_345;
LABEL_364:
    operator delete(v409.__r_.__value_.__l.__data_);
    goto LABEL_345;
  }
  if (SHIBYTE(v409.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_364;
LABEL_345:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v355 + 24))(v355))
  {
    *(_QWORD *)&v400 = (uint64_t)(v27 * 1000000000.0);
    *(_QWORD *)&v401.f64[0] = 2;
    v356 = sub_20FF3F5E8();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v355 + 24))(v355))
    {
      v357 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v355 + 56))(v355);
      *(_WORD *)&v414[23] = 274;
      strcpy(v414, "num_update_gravity");
      sub_20F1EFF48(&v409, &v403, (__int128 *)v414, (__int128 *)&v400);
      sub_20EB09324((uint64_t)v356, v357, (uint64_t)&v409);
      v358 = (std::__shared_weak_count *)v409.__r_.__value_.__r.__words[2];
      if (v409.__r_.__value_.__r.__words[2])
      {
        v359 = (unint64_t *)(v409.__r_.__value_.__r.__words[2] + 8);
        do
          v360 = __ldaxr(v359);
        while (__stlxr(v360 - 1, v359));
        if (!v360)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      if (v414[24] && (v414[23] & 0x80000000) != 0)
        operator delete(*(void **)v414);
    }
  }
  v361 = atan2(-*(double *)(a1 + 1272), *(long double *)(a1 + 1296));
  v362 = asin(*(long double *)(a1 + 1248));
  v363 = atan2(-*(double *)(a1 + 1240), *(long double *)(a1 + 1232));
  v364 = *(_QWORD *)(a1 + 1192);
  v365 = atomic_load((unsigned __int8 *)&qword_254A681C0);
  if ((v365 & 1) == 0 && __cxa_guard_acquire(&qword_254A681C0))
  {
    v385 = operator new(0x28uLL);
    v385[1] = 0;
    v385[2] = 0;
    *v385 = &off_24C9C4340;
    *((_BYTE *)v385 + 24) = 0;
    *((_BYTE *)v385 + 32) = 0;
    qword_254A68230 = (uint64_t)(v385 + 3);
    qword_254A68238 = (uint64_t)v385;
    unk_254A68240 = 10000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A68230, &dword_20E81F000);
    __cxa_guard_release(&qword_254A681C0);
  }
  v366 = (_QWORD *)qword_254A68230;
  v367 = *(unsigned __int8 *)(qword_254A68230 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v367)
  {
    if (result.__d_.__rep_ - *v366 < 10000000000)
      return result;
    v369 = (std::chrono::steady_clock::time_point *)qword_254A68230;
  }
  else
  {
    v369 = (std::chrono::steady_clock::time_point *)qword_254A68230;
    if (!*(_BYTE *)(qword_254A68230 + 8))
      *(_BYTE *)(qword_254A68230 + 8) = 1;
  }
  v369->__d_.__rep_ = result.__d_.__rep_;
  v370 = sub_210219C18();
  v371 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v371 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    v373 = *(_QWORD *)(a1 + 1400);
    v374 = *(_QWORD *)(a1 + 1408);
    v375 = *(_QWORD *)(a1 + 1416);
    *(_DWORD *)v414 = 134219520;
    *(_QWORD *)&v414[4] = v364;
    *(_WORD *)&v414[12] = 2048;
    *(double *)&v414[14] = v361 * 57.2957795;
    *(_WORD *)&v414[22] = 2048;
    *(double *)&v414[24] = v362 * 57.2957795;
    *(_WORD *)v415 = 2048;
    *(double *)&v415[2] = v363 * 57.2957795;
    *(_WORD *)&v415[10] = 2048;
    *(_QWORD *)&v415[12] = v373;
    *(_WORD *)&v415[20] = 2048;
    *(_QWORD *)&v415[22] = v374;
    *(_WORD *)&v415[30] = 2048;
    *(_QWORD *)v416 = v375;
    v376 = (char *)_os_log_send_and_compose_impl();
    v377 = strlen(v376);
    v409.__r_.__value_.__r.__words[0] = 0;
    pthread_threadid_np(0, (__uint64_t *)&v409);
    v378 = v409.__r_.__value_.__r.__words[0];
    timespec_get((timespec *)&v409, 1);
    sub_210219E20(v414, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v370 + 1), (__int128 *)(v370 + 5), "At time: %f, RPY: %lf, %lf, %lf, Mag Bias: %lf, %lf, %lf ", 0x39uLL, v376, v377, v378, &v409);
    std::mutex::lock(&stru_254A5A410);
    v379 = qword_254A5A458;
    for (m = unk_254A5A460; v379 != m; v379 += 40)
    {
      v381 = *(_QWORD *)(v379 + 32);
      if (!v381)
        sub_20E86D37C();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v381 + 48))(v381, v414);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v418) < 0)
    {
      operator delete(*((void **)&v417 + 1));
      if ((SBYTE7(v417) & 0x80000000) == 0)
      {
LABEL_374:
        if (!v416[24])
        {
LABEL_380:
          if (v415[24] && (v415[23] & 0x80000000) != 0)
            operator delete(*(void **)v415);
          if ((v414[31] & 0x80000000) != 0)
            operator delete(*(void **)&v414[8]);
          if (v376)
            free(v376);
          goto LABEL_387;
        }
LABEL_378:
        if ((v416[23] & 0x80000000) != 0)
          operator delete(*(void **)v416);
        goto LABEL_380;
      }
    }
    else if ((SBYTE7(v417) & 0x80000000) == 0)
    {
      goto LABEL_374;
    }
    operator delete(*(void **)&v416[32]);
    if (!v416[24])
      goto LABEL_380;
    goto LABEL_378;
  }
LABEL_387:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v370);
  if (LODWORD(result.__d_.__rep_))
  {
    v382 = *(_QWORD *)(a1 + 1400);
    v383 = *(_QWORD *)(a1 + 1408);
    v384 = *(_QWORD *)(a1 + 1416);
    *(_DWORD *)v414 = 134219520;
    *(_QWORD *)&v414[4] = v364;
    *(_WORD *)&v414[12] = 2048;
    *(double *)&v414[14] = v361 * 57.2957795;
    *(_WORD *)&v414[22] = 2048;
    *(double *)&v414[24] = v362 * 57.2957795;
    *(_WORD *)v415 = 2048;
    *(double *)&v415[2] = v363 * 57.2957795;
    *(_WORD *)&v415[10] = 2048;
    *(_QWORD *)&v415[12] = v382;
    *(_WORD *)&v415[20] = 2048;
    *(_QWORD *)&v415[22] = v383;
    *(_WORD *)&v415[30] = 2048;
    *(_QWORD *)v416 = v384;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20F1EDBFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A681C0);
  _Unwind_Resume(a1);
}

void sub_20F1EDC14(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A681C8);
  _Unwind_Resume(a1);
}

void sub_20F1EDC2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A681B8);
  _Unwind_Resume(a1);
}

void sub_20F1EDC44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A681B0);
  _Unwind_Resume(a1);
}

void sub_20F1EDC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  sub_20E96E218((uint64_t)&__p);
  if (a32)
  {
    free(a32);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F1EDF30(uint64_t a1, int a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, double a7)
{
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int64x2_t v17;
  int8x16_t v18;
  float64x2_t v19;
  uint64_t *v20;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v33;
  float64x2_t v35;
  int8x16_t v36;
  float64x2_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  float64x2_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t result;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  float64x2_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 2104);
  if (v14)
  {
    v15 = *(void **)(v14 + 80);
    v16 = *(_QWORD *)(v14 + 88) - (_QWORD)v15;
    if (v16 >= 1)
      bzero(v15, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
    if (*(_BYTE *)(v14 + 112))
      *(_BYTE *)(v14 + 112) = 0;
  }
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 1680) = 0;
  *(_QWORD *)(a1 + 1672) = 0;
  *(_QWORD *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_WORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 1472) = *(_QWORD *)(a1 + 1464);
  if (sub_20EAF5B90())
  {
    v20 = sub_210219C18();
    sub_20EAF5CE0((uint64_t)&v71, (uint64_t)v20, 0xEEEEB0B5B2B2EEEELL);
  }
  _Q3 = *(float64x2_t *)(a3 + 24);
  v19.f64[0] = *(float64_t *)(a3 + 64);
  _Q5 = *(float64x2_t *)(a3 + 48);
  _Q6 = (float64x2_t)vzip1q_s64(*(int64x2_t *)a3, (int64x2_t)_Q3);
  _Q16 = (float64x2_t)vzip2q_s64(*(int64x2_t *)a3, (int64x2_t)_Q3);
  v25.f64[0] = *(float64_t *)(a3 + 16);
  v25.f64[1] = *(float64_t *)(a3 + 40);
  v26 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, *(double *)a3), _Q16, *(float64x2_t *)a3, 1), v25, v25.f64[0]);
  _D1 = *(_QWORD *)(a3 + 8);
  __asm { FMLA            D18, D1, V5.D[1] }
  *(double *)v17.i64 = _D18 + v19.f64[0] * v25.f64[0];
  v33 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q3.f64[0]), _Q16, _Q3, 1), v25, v25.f64[1]);
  _Q3.f64[0] = *(float64_t *)(a3 + 32);
  __asm { FMLA            D18, D3, V5.D[1] }
  *(double *)v18.i64 = _D18 + v19.f64[0] * v25.f64[1];
  v35 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q6, _Q5.f64[0]), _Q16, _Q5, 1), v25, v19.f64[0]);
  _Q16.f64[0] = *(float64_t *)(a3 + 56);
  __asm { FMLA            D6, D16, V5.D[1] }
  v19.f64[0] = _Q6.f64[0] + v19.f64[0] * v19.f64[0];
  v36 = (int8x16_t)vaddq_f64(v33, (float64x2_t)xmmword_210389940);
  __asm { FMOV            V6.2D, #-1.0 }
  *(_QWORD *)&v38.f64[0] = *(_OWORD *)&vabsq_f64(vaddq_f64(v19, _Q6));
  v38.f64[1] = NAN;
  if (fabs(vmaxnmvq_f64(vmaxnmq_f64(vmaxnmq_f64(vmaxnmq_f64(vabsq_f64(vaddq_f64(v26, (float64x2_t)xmmword_2103A58F0)), v38), vabsq_f64((float64x2_t)vextq_s8(v36, v18, 8uLL))), vmaxnmq_f64(vabsq_f64((float64x2_t)vzip1q_s64(v17, (int64x2_t)v36)), vabsq_f64(v35))))) > 0.000000001&& sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/VIO/AttitudeFilter/src/AttitudeFilter.cpp", 219, (uint64_t)"std::abs(inv_err) <= kTolerance", 31, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v39 = *(_OWORD *)(a3 + 144);
  v79 = *(_OWORD *)(a3 + 128);
  v80 = v39;
  v81 = *(_QWORD *)(a3 + 160);
  v40 = v81;
  v41 = *(_OWORD *)(a3 + 80);
  v75 = *(_OWORD *)(a3 + 64);
  v76 = v41;
  v42 = *(_OWORD *)(a3 + 112);
  v77 = *(_OWORD *)(a3 + 96);
  v78 = v42;
  v43 = *(_OWORD *)(a3 + 16);
  v71 = *(float64x2_t *)a3;
  v72 = v43;
  v44 = *(_OWORD *)(a3 + 48);
  v73 = *(_OWORD *)(a3 + 32);
  v74 = v44;
  *(double *)(a1 + 1488) = a7;
  *(_OWORD *)(a1 + 1528) = v73;
  *(_OWORD *)(a1 + 1544) = v44;
  v45 = v72;
  *(float64x2_t *)(a1 + 1496) = v71;
  *(_OWORD *)(a1 + 1512) = v45;
  v46 = v77;
  v47 = v78;
  v48 = v76;
  *(_OWORD *)(a1 + 1560) = v75;
  *(_OWORD *)(a1 + 1576) = v48;
  *(_QWORD *)(a1 + 1656) = v40;
  v49 = v80;
  *(_OWORD *)(a1 + 1624) = v79;
  *(_OWORD *)(a1 + 1640) = v49;
  v50 = 128;
  if (a2)
    v50 = 136;
  v51 = *(double *)(a1 + v50);
  v52 = 152;
  if (a2)
    v52 = 160;
  v53 = *(double *)(a1 + v52);
  *(_OWORD *)(a1 + 1592) = v46;
  *(_OWORD *)(a1 + 1608) = v47;
  v54 = *(float64x2_t *)a3;
  v55 = *(_OWORD *)(a3 + 16);
  v56 = *(_OWORD *)(a3 + 32);
  v57 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)&v75 = *(_QWORD *)(a3 + 64);
  v73 = v56;
  v74 = v57;
  v71 = v54;
  v72 = v55;
  *(_QWORD *)&v55 = *(_QWORD *)(a1 + 120);
  v58 = *(_OWORD *)(a3 + 72);
  v70 = *(_QWORD *)(a3 + 88);
  v69 = v58;
  *(_QWORD *)&v56 = *(_QWORD *)(a1 + 144);
  v59 = *(_OWORD *)(a3 + 120);
  v68 = *(_QWORD *)(a3 + 136);
  v67 = v59;
  result = sub_20F1F1388(a1 + 792, &v71, &v69, a4, &v67, a5, a6, a7, *(double *)&v55, v51, *(double *)&v56, v53, *(double *)(a1 + 288), *(double *)(a1 + 296));
  *(_QWORD *)(a1 + 1488) = *(_QWORD *)(a1 + 1192);
  v61 = *(_OWORD *)(a1 + 1232);
  v62 = *(_OWORD *)(a1 + 1248);
  v63 = *(_OWORD *)(a1 + 1264);
  v64 = *(_OWORD *)(a1 + 1280);
  *(_QWORD *)(a1 + 1560) = *(_QWORD *)(a1 + 1296);
  *(_OWORD *)(a1 + 1528) = v63;
  *(_OWORD *)(a1 + 1544) = v64;
  *(_OWORD *)(a1 + 1496) = v61;
  *(_OWORD *)(a1 + 1512) = v62;
  v65 = *(_OWORD *)(a1 + 1304);
  *(_QWORD *)(a1 + 1584) = *(_QWORD *)(a1 + 1320);
  *(_OWORD *)(a1 + 1568) = v65;
  v66 = *(_OWORD *)(a1 + 1368);
  *(_QWORD *)(a1 + 1632) = *(_QWORD *)(a1 + 1384);
  *(_OWORD *)(a1 + 1616) = v66;
  *(_DWORD *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_20F1EE31C(_QWORD *a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info v15;
  void *__p;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
  {
    mach_timebase_info(&v15);
    LODWORD(v13) = v15.numer;
    LODWORD(v14) = v15.denom;
    *(double *)&qword_254A6D7C0 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_254A6D7C8);
  }
  v19[0] = llround(*(double *)&qword_254A6D7C0 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v20 = *a3;
    v21 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a4;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a2;
  LOBYTE(v15.numer) = 12;
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_20F1EE4F4(a1, (char *)&v15, (uint64_t)v19);
  if (__p)
    operator delete(__p);
  return sub_20EB0580C((uint64_t)v19);
}

void sub_20F1EE4A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D7C8);
  _Unwind_Resume(a1);
}

void sub_20F1EE4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_20EB0580C((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  sub_20EB0580C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_20F1EE4F4(_QWORD *a1, char *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  __int128 v9;

  v5 = *a2;
  v9 = *(_OWORD *)(a2 + 8);
  v6 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 1) = 0;
  v7 = operator new();
  *(_QWORD *)v7 = &off_24C9FACA8;
  *(_BYTE *)(v7 + 8) = v5;
  *(_OWORD *)(v7 + 16) = v9;
  *(_QWORD *)(v7 + 32) = v6;
  sub_20EB09F3C(v7 + 48, a3);
  *(_QWORD *)v7 = &off_24C9FAC28;
  *a1 = &off_24CA0C0E8;
  a1[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24CA0C1E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a1[2] = result;
  return result;
}

void sub_20F1EE5CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20F1EE5E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  if (v3)
  {
    *(_QWORD *)(v1 + 24) = v3;
    operator delete(v3);
  }
  MEMORY[0x212BC6398](v1, 0x10B3C402343F4F0);
  _Unwind_Resume(a1);
}

void sub_20F1EE61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20F1EE638(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FACA8;
  sub_20EB0580C((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F1EE678(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FACA8;
  sub_20EB0580C((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1EE6C8(uint64_t a1)
{
  return a1 + 48;
}

unint64_t sub_20F1EE6D0(unsigned __int8 *a1, unsigned __int8 *lpsrc)
{
  unint64_t result;

  result = (unint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24CA0C128, (const struct __class_type_info *)&unk_24C9FAC68, 0);
  if (result)
    return a1 == lpsrc || sub_210230694(a1 + 8, (_BYTE *)(result + 8)) == 0;
  return result;
}

void sub_20F1EE740(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20F1EF7B0();
  sub_20F1EE7F4(a1);
  sub_20EB0B80C(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 48, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20F1EE7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20F1EE7F4(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254A541A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A541A8))
  {
    v4 = sub_20F1EF5B4();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20E9E507C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20E860C04(&xmmword_254A54190, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254A541A0 = *(_QWORD *)(v9 - 8);
      xmmword_254A54190 = v7;
    }
    sub_20E89FB98(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A54190, &dword_20E81F000);
    __cxa_guard_release(&qword_254A541A8);
  }
  return sub_20F1EFA78(&xmmword_254A54190, (uint64_t)"{", (unsigned __int8 *)(a1 + 8), (uint64_t)"}");
}

void sub_20F1EE904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20E89FB98(&a9);
  __cxa_guard_abort(&qword_254A541A8);
  _Unwind_Resume(a1);
}

void sub_20F1EE924(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A541A8);
  _Unwind_Resume(a1);
}

void sub_20F1EE93C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 8;
}

void sub_20F1EE964(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20FF34BC0(lpsrc, 8, a2);
}

_QWORD *sub_20F1EE99C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FACA8;
  sub_20EB0580C((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20F1EE9DC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24C9FACA8;
  sub_20EB0580C((uint64_t)(a1 + 6));
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20F1EEA2C(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20F1EF050();
  return sub_20F1EEB80(v2, (uint64_t)"{", (unsigned __int8 *)(a1 + 8), (uint64_t)",", a1 + 48, (uint64_t)"}");
}

uint64_t sub_20F1EEA84(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20F1EEDAC((uint64_t)v5, (uint64_t)v2, (unsigned __int8 *)(a1 + 8));
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9FAC00[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9FABB8[v3])(v5, v2);
  return result;
}

void sub_20F1EEB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C9FABB8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20F1EEB54(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20F1EEB80(__int128 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20E89FEA0((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20F1EEDAC((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9FABD0[v16])(&p_p_dst, &__dst);
  sub_20EB0A838((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9FABD0[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C9FAC00[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C9FABB8[v16])(&p_dst, &__dst);
  return result;
}

void sub_20F1EED1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EED34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EED5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EED70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EEDAC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20E863438(v5);
  v21[0] = v5;
  sub_210231208((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20E860B7C();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](v14 + 128);
    MEMORY[0x212BC6398](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20E877AB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C9FABE8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20F1EEFFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20F1EF020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20F1EF03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20FD0DE48((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20F1EF050()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A54088);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54088))
    return &xmmword_254A54070;
  v2 = sub_20F1EF12C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20E860C04(&xmmword_254A54070, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254A54080 = v2->__r_.__value_.__r.__words[2];
    xmmword_254A54070 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A54070, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54088);
  return &xmmword_254A54070;
}

void sub_20F1EF114(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A54088);
  _Unwind_Resume(a1);
}

std::string *sub_20F1EF12C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A540A8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A540A8))
    return &stru_254A54090;
  sub_20F1EF3D0((uint64_t)__p);
  sub_20F1EF21C((char *)__p, &stru_254A54090);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54090, &dword_20E81F000);
  __cxa_guard_release(&qword_254A540A8);
  return &stru_254A54090;
}

void sub_20F1EF1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A540A8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A540A8);
  _Unwind_Resume(a1);
}

void sub_20F1EF21C(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20F1EF5B4();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20EB0B610();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20E860C04(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20E877C80(&__p, (uint64_t)__dst, 2uLL);
  sub_21023CE38(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20F1EF380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20E89FB98((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20F1EF3D0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A54128);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A54128))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::Number>]", qword_254A54110);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A54110, &dword_20E81F000);
    __cxa_guard_release(&qword_254A54128);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254A54148);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254A54148))
  {
    v5 = sub_20E8A2354(qword_254A54110, "<", 0);
    sub_20E89FC08(qword_254A54110, 0, v5, qword_254A54130);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A54130, &dword_20E81F000);
    __cxa_guard_release(&qword_254A54148);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254A54168);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254A54168))
  {
    sub_21023CD84((uint64_t)qword_254A54130, (uint64_t)&xmmword_254A54150);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A54150, &dword_20E81F000);
    __cxa_guard_release(&qword_254A54168);
  }
  if (byte_254A54167 < 0)
  {
    sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A54150, *((unint64_t *)&xmmword_254A54150 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254A54150;
    *(_QWORD *)(a1 + 16) = unk_254A54160;
  }
}

void sub_20F1EF56C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A54168);
  _Unwind_Resume(a1);
}

void sub_20F1EF584(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A54148);
  _Unwind_Resume(a1);
}

void sub_20F1EF59C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A54128);
  _Unwind_Resume(a1);
}

__int128 *sub_20F1EF5B4()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254A540C8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A540C8))
    return &xmmword_254A540B0;
  v2 = (char *)sub_20F1EF690();
  if (v2[23] < 0)
  {
    sub_20E860C04(&xmmword_254A540B0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254A540C0 = *((_QWORD *)v2 + 2);
    xmmword_254A540B0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A540B0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A540C8);
  return &xmmword_254A540B0;
}

void sub_20F1EF678(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A540C8);
  _Unwind_Resume(a1);
}

void *sub_20F1EF690()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254A540E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A540E8))
  {
    sub_21023CB10("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::Number]", qword_254A540D0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254A540D0, &dword_20E81F000);
    __cxa_guard_release(&qword_254A540E8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254A54108);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254A54108))
    return &unk_254A540F0;
  sub_21023CD84((uint64_t)qword_254A540D0, (uint64_t)&unk_254A540F0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254A540F0, &dword_20E81F000);
  __cxa_guard_release(&qword_254A54108);
  return &unk_254A540F0;
}

void sub_20F1EF780(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A54108);
  _Unwind_Resume(a1);
}

void sub_20F1EF798(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A540E8);
  _Unwind_Resume(a1);
}

std::string *sub_20F1EF7B0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254A54188);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254A54188))
  {
    sub_20E8610C0(v9, "viz::PackageData");
    v2 = sub_20F1EF5B4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20E860C04(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20EB0FD34();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20E860C04(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20E877C80(v8, (uint64_t)__dst, 4uLL);
    sub_21023CE38((char *)v9, (uint64_t *)v8, &stru_254A54170, v6, v7);
    sub_20E89FB98(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254A54170, &dword_20E81F000);
        __cxa_guard_release(&qword_254A54188);
        return &stru_254A54170;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254A54170;
}

void sub_20F1EF994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20E89FB98(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254A54188);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254A54188);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1EFA78(__int128 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20E89FEA0((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20F1EEDAC((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20E877AB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C9FABD0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20E877AB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C9FAC00[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C9FABB8[v11])(&p_dst, &__dst);
  return result;
}

void sub_20F1EFBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EFBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EFBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EFBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F1EFC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1EFC20(uint64_t a1, uint64_t a2, uint64_t *a3, const char *a4, __int128 *a5)
{
  uint64_t *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  __int128 __dst;
  unint64_t v27;
  char v28;
  _QWORD v29[2];
  std::__shared_weak_count *v30;
  mach_timebase_info info;
  void *__p;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD v35[2];
  __int128 v36;
  unint64_t v37;
  char v38;
  char v39;
  char v40;
  __int128 v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
    return a1;
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v11 = strlen(a4);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    v27 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v27) = v11;
  p_dst = &__dst;
  if (v11)
LABEL_9:
    memcpy(p_dst, a4, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v28 = 1;
  v16 = mach_continuous_time();
  v17 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
  {
    mach_timebase_info(&info);
    LODWORD(v24) = info.numer;
    LODWORD(v25) = info.denom;
    *(double *)&qword_254A6D7C0 = (double)v24 / (double)v25;
    __cxa_guard_release(&qword_254A6D7C8);
  }
  v35[0] = llround(*(double *)&qword_254A6D7C0 * (double)v16);
  v35[1] = 2;
  LOBYTE(v36) = 0;
  v38 = 0;
  if (v28)
  {
    v36 = __dst;
    v37 = v27;
    v27 = 0;
    __dst = 0uLL;
    v38 = 1;
  }
  v39 = 0;
  v40 = 0;
  v41 = *a5;
  v42 = 1;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v18 = *a3;
  LOBYTE(info.numer) = 12;
  v19 = operator new(8uLL);
  __p = v19;
  *v19 = v18;
  v33 = v19 + 1;
  v34 = v19 + 1;
  sub_20F1EE4F4(v29, (char *)&info, (uint64_t)v35);
  if (__p)
    operator delete(__p);
  sub_20EB0580C((uint64_t)v35);
  sub_20EB09324(a1, v10, (uint64_t)v29);
  v20 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v28 && SHIBYTE(v27) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_20F1EFECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,char a27)
{
  __cxa_guard_abort(&qword_254A6D7C8);
  if (a16)
  {
    if (a15 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20F1EFF48(_QWORD *a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  mach_timebase_info v15;
  void *__p;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[2];
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = mach_continuous_time();
  v9 = atomic_load((unsigned __int8 *)&qword_254A6D7C8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7C8))
  {
    mach_timebase_info(&v15);
    LODWORD(v13) = v15.numer;
    LODWORD(v14) = v15.denom;
    *(double *)&qword_254A6D7C0 = (double)v13 / (double)v14;
    __cxa_guard_release(&qword_254A6D7C8);
  }
  v19[0] = llround(*(double *)&qword_254A6D7C0 * (double)v8);
  v19[1] = 2;
  LOBYTE(v20) = 0;
  v22 = 0;
  if (*((_BYTE *)a3 + 24))
  {
    v20 = *a3;
    v21 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v22 = 1;
  }
  v23 = 0;
  v24 = 0;
  v25 = *a4;
  v26 = 1;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v10 = *a2;
  LOBYTE(v15.numer) = 3;
  v11 = operator new(8uLL);
  __p = v11;
  *v11 = v10;
  v17 = v11 + 1;
  v18 = v11 + 1;
  sub_20F1EE4F4(a1, (char *)&v15, (uint64_t)v19);
  if (__p)
    operator delete(__p);
  return sub_20EB0580C((uint64_t)v19);
}

void sub_20F1F00CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D7C8);
  _Unwind_Resume(a1);
}

void sub_20F1F00E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
  {
    operator delete(__p);
    sub_20EB0580C((uint64_t)&a13);
    _Unwind_Resume(a1);
  }
  sub_20EB0580C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20F1F0118@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const char *v5;
  char *v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *__p;
  __int128 v19;
  const char *v20;
  const char *v21;
  void *v22[2];
  char v23;
  uint64_t v24;
  char v25;
  void *v26[2];
  char v27;
  int v28;
  char *v29;
  __int128 v30;
  const char *v31;
  const char *v32;
  _QWORD v33[2];

  __p = operator new(0x28uLL);
  v19 = xmmword_2102DCA20;
  strcpy((char *)__p, "AttitudeFilter configuration parameters");
  sub_20E8B30B4(a2, (__int128 *)&__p, 80, 40);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  v24 = nullsub_1(a2);
  v4 = sub_20EAA14D8((_BYTE *)(a1 + 1));
  LODWORD(v31) = 0;
  sub_20EAA5274(&v29, "Whether or not use computed accel standard derivation as measurement noise.");
  __p = &v29;
  *(_QWORD *)&v19 = " (default = ";
  *((_QWORD *)&v19 + 1) = &v29;
  v20 = " (default = ";
  v21 = " (default = ";
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  v22[0] = &__p;
  ((void (*)(void **, char **))off_24C9FAD18[v31])(v22, &v29);
  if (*(_BYTE *)(a1 + 1))
    v5 = "true";
  else
    v5 = "false";
  v33[0] = v5;
  __p = &v29;
  *(_QWORD *)&v19 = v33;
  *((_QWORD *)&v19 + 1) = &v29;
  v20 = (const char *)v33;
  v21 = (const char *)v33;
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  v22[0] = &__p;
  ((void (*)(void **, char **))off_24C9FAD48[v31])(v22, &v29);
  __p = &v29;
  *(_QWORD *)&v19 = ")";
  *((_QWORD *)&v19 + 1) = &v29;
  v20 = ")";
  v21 = ")";
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  v22[0] = &__p;
  ((void (*)(void **, char **))off_24C9FAD30[v31])(v22, &v29);
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  __p = v22;
  ((void (*)(void **__return_ptr, void **, char **))off_24C9FAD00[v31])(v26, &__p, &v29);
  if ((_DWORD)v31 != -1)
    ((void (*)(void **, char **))off_24C9FACE8[v31])(&__p, &v29);
  if (v27 >= 0)
    v6 = (char *)v26;
  else
    v6 = (char *)v26[0];
  sub_20E8B2F9C(&v24, "FilterConfigs.use_computed_sigma", v4, v6);
  if (v27 < 0)
    operator delete(v26[0]);
  v24 = nullsub_1(a2);
  v7 = sub_20EAA14D8((_BYTE *)(a1 + 2));
  LODWORD(v31) = 0;
  sub_20E9B0FF4(&v29, "Whether or not fix yaw update in EKF.");
  __p = &v29;
  *(_QWORD *)&v19 = " (default = ";
  *((_QWORD *)&v19 + 1) = &v29;
  v20 = " (default = ";
  v21 = " (default = ";
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  v22[0] = &__p;
  ((void (*)(void **, char **))off_24C9FAD18[v31])(v22, &v29);
  v8 = "true";
  if (!*(_BYTE *)(a1 + 2))
    v8 = "false";
  v33[0] = v8;
  __p = &v29;
  *(_QWORD *)&v19 = v33;
  *((_QWORD *)&v19 + 1) = &v29;
  v20 = (const char *)v33;
  v21 = (const char *)v33;
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  v22[0] = &__p;
  ((void (*)(void **, char **))off_24C9FAD48[v31])(v22, &v29);
  __p = &v29;
  *(_QWORD *)&v19 = ")";
  *((_QWORD *)&v19 + 1) = &v29;
  v20 = ")";
  v21 = ")";
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  v22[0] = &__p;
  ((void (*)(void **, char **))off_24C9FAD30[v31])(v22, &v29);
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  __p = v22;
  ((void (*)(void **__return_ptr, void **, char **))off_24C9FAD00[v31])(v26, &__p, &v29);
  if ((_DWORD)v31 != -1)
    ((void (*)(void **, char **))off_24C9FACE8[v31])(&__p, &v29);
  if (v27 >= 0)
    v9 = (char *)v26;
  else
    v9 = (char *)v26[0];
  sub_20E8B2F9C(&v24, "FilterConfigs.fix_yaw", v7, v9);
  if (v27 < 0)
    operator delete(v26[0]);
  v24 = nullsub_1(a2);
  v10 = sub_20EAA14D8((_BYTE *)(a1 + 3));
  LODWORD(v31) = 0;
  sub_20EA7737C(&v29, "Whether or not fix gyroscope bias update in EKF.");
  __p = &v29;
  *(_QWORD *)&v19 = " (default = ";
  *((_QWORD *)&v19 + 1) = &v29;
  v20 = " (default = ";
  v21 = " (default = ";
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  v22[0] = &__p;
  ((void (*)(void **, char **))off_24C9FAD18[v31])(v22, &v29);
  v11 = "true";
  if (!*(_BYTE *)(a1 + 3))
    v11 = "false";
  v33[0] = v11;
  __p = &v29;
  *(_QWORD *)&v19 = v33;
  *((_QWORD *)&v19 + 1) = &v29;
  v20 = (const char *)v33;
  v21 = (const char *)v33;
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  v22[0] = &__p;
  ((void (*)(void **, char **))off_24C9FAD48[v31])(v22, &v29);
  __p = &v29;
  *(_QWORD *)&v19 = ")";
  *((_QWORD *)&v19 + 1) = &v29;
  v20 = ")";
  v21 = ")";
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  v22[0] = &__p;
  ((void (*)(void **, char **))off_24C9FAD30[v31])(v22, &v29);
  if ((_DWORD)v31 == -1)
    sub_20E877AB8();
  __p = v22;
  ((void (*)(void **__return_ptr, void **, char **))off_24C9FAD00[v31])(v26, &__p, &v29);
  if ((_DWORD)v31 != -1)
    ((void (*)(void **, char **))off_24C9FACE8[v31])(&__p, &v29);
  if (v27 >= 0)
    v12 = (char *)v26;
  else
    v12 = (char *)v26[0];
  sub_20E8B2F9C(&v24, "FilterConfigs.fix_gyro_bias", v10, v12);
  if (v27 < 0)
    operator delete(v26[0]);
  v29 = (char *)operator new(0x40uLL);
  v30 = xmmword_2102DBBD0;
  strcpy(v29, "AttitudeFilter Static Detection configuration parameters");
  sub_20E8B30B4(&__p, (__int128 *)&v29, 80, 40);
  if (SHIBYTE(v30) < 0)
    operator delete(v29);
  v24 = nullsub_1(&__p);
  v13 = sub_20EA9DB90((double *)(a1 + 152));
  v28 = 0;
  sub_20EAA4EB4(v26, "IMU durations in seconds needed to detect static for initialization.");
  v29 = (char *)v26;
  *(_QWORD *)&v30 = " (default = ";
  *((_QWORD *)&v30 + 1) = v26;
  v31 = " (default = ";
  v32 = " (default = ";
  if (v28 == -1)
    sub_20E877AB8();
  v33[0] = &v29;
  ((void (*)(_QWORD *, void **))off_24C9FAD18[v28])(v33, v26);
  sub_20E87876C((uint64_t)&v25, (uint64_t)v26, (double *)(a1 + 152));
  v29 = (char *)v26;
  *(_QWORD *)&v30 = ")";
  *((_QWORD *)&v30 + 1) = v26;
  v31 = ")";
  v32 = ")";
  if (v28 == -1)
    sub_20E877AB8();
  v33[0] = &v29;
  ((void (*)(_QWORD *, void **))off_24C9FAD30[v28])(v33, v26);
  if (v28 == -1)
    sub_20E877AB8();
  v29 = (char *)v33;
  ((void (*)(void **__return_ptr, char **, void **))off_24C9FAD00[v28])(v22, &v29, v26);
  if (v28 != -1)
    ((void (*)(char **, void **))off_24C9FACE8[v28])(&v29, v26);
  if (v23 >= 0)
    v14 = (char *)v22;
  else
    v14 = (char *)v22[0];
  sub_20E8B2F9C(&v24, "StaticInertialConfigs.static_duration", v13, v14);
  if (v23 < 0)
    operator delete(v22[0]);
  v24 = nullsub_1(&__p);
  v15 = sub_20EA9DB90((double *)(a1 + 168));
  v28 = 0;
  sub_20F1F0B4C(v26, "IMU durations in seconds needed to detect quasi static for updates.");
  v29 = (char *)v26;
  *(_QWORD *)&v30 = " (default = ";
  *((_QWORD *)&v30 + 1) = v26;
  v31 = " (default = ";
  v32 = " (default = ";
  if (v28 == -1)
    sub_20E877AB8();
  v33[0] = &v29;
  ((void (*)(_QWORD *, void **))off_24C9FAD18[v28])(v33, v26);
  sub_20E87876C((uint64_t)&v25, (uint64_t)v26, (double *)(a1 + 168));
  v29 = (char *)v26;
  *(_QWORD *)&v30 = ")";
  *((_QWORD *)&v30 + 1) = v26;
  v31 = ")";
  v32 = ")";
  if (v28 == -1)
    sub_20E877AB8();
  v33[0] = &v29;
  ((void (*)(_QWORD *, void **))off_24C9FAD30[v28])(v33, v26);
  if (v28 == -1)
    sub_20E877AB8();
  v29 = (char *)v33;
  ((void (*)(void **__return_ptr, char **, void **))off_24C9FAD00[v28])(v22, &v29, v26);
  if (v28 != -1)
    ((void (*)(char **, void **))off_24C9FACE8[v28])(&v29, v26);
  if (v23 >= 0)
    v16 = (char *)v22;
  else
    v16 = (char *)v22[0];
  sub_20E8B2F9C(&v24, "StaticInertialConfigs.quasi_static_duration", v15, v16);
  if (v23 < 0)
    operator delete(v22[0]);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  sub_20E869298((uint64_t)&__p);
  sub_20F213C04(a1 + 328, &__p);
  sub_20E8B32F0(a2, (uint64_t)&__p);
  return sub_20E869298((uint64_t)&__p);
}

void sub_20F1F09F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  sub_20E869298((uint64_t)&a12);
  sub_20E869298(a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20F1F0B4C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9FACE8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20F1F0C3C(uint64_t a1, _QWORD *a2)
{
  float64x2_t *v4;
  float64x2_t *v5;
  float64x2_t *v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  uint64_t v10;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  float64x2_t v21;
  uint64_t v22;
  float64x2_t v23;
  uint64_t v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  uint64_t v28;
  float64x2_t v29;
  uint64_t i;
  uint64_t v31;
  float64x2_t *v32;

  v4 = (float64x2_t *)(a1 + 264);
  v5 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(a1 + 184));
  sub_20F1F0E2C(a1 + 160, *v5, *(double *)vextq_s8(*(int8x16_t *)v5, *(int8x16_t *)v5, 8uLL).i64, v5[1].f64[0]);
  v6 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(a1 + 288));
  v7.f64[0] = v6[1].f64[0];
  v8.f64[0] = *(float64_t *)(a1 + 280);
  v9 = vaddq_f64(v7, v8);
  *v4 = vaddq_f64(*v6, *v4);
  *(float64_t *)(a1 + 280) = v9.f64[0];
  v10 = *a2 + 8 * *(unsigned int *)(a1 + 320);
  v9.f64[0] = *(float64_t *)(v10 + 16);
  v8.f64[0] = *(float64_t *)(a1 + 312);
  v11 = vaddq_f64(v9, v8);
  v12 = vaddq_f64(*(float64x2_t *)v10, v4[2]);
  *(float64_t *)(a1 + 312) = v11.f64[0];
  v4[2] = v12;
  v13 = *a2 + 8 * *(unsigned int *)(a1 + 352);
  v11.f64[0] = *(float64_t *)(v13 + 16);
  v8.f64[0] = *(float64_t *)(a1 + 344);
  v14 = vaddq_f64(v11, v8);
  v4[4] = vaddq_f64(*(float64x2_t *)v13, v4[4]);
  *(float64_t *)(a1 + 344) = v14.f64[0];
  v15 = *a2 + 8 * *(unsigned int *)(a1 + 384);
  v14.f64[0] = *(float64_t *)(v15 + 16);
  v8.f64[0] = *(float64_t *)(a1 + 376);
  v16 = vaddq_f64(v14, v8);
  v4[6] = vaddq_f64(*(float64x2_t *)v15, v4[6]);
  *(float64_t *)(a1 + 376) = v16.f64[0];
  v17 = *a2 + 8 * *(unsigned int *)(a1 + 416);
  v16.f64[0] = *(float64_t *)(v17 + 16);
  v8.f64[0] = *(float64_t *)(a1 + 408);
  v4[8] = vaddq_f64(*(float64x2_t *)v17, v4[8]);
  *(_QWORD *)(a1 + 408) = *(_OWORD *)&vaddq_f64(v16, v8);
  v18 = a1 + 8 * *(unsigned int *)(a1 + 184);
  v19 = *(_OWORD *)(a1 + 160);
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(a1 + 176);
  *(_OWORD *)v18 = v19;
  v20 = a1 + 8 * *(unsigned int *)(a1 + 288);
  v21 = *v4;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(a1 + 280);
  *(float64x2_t *)v20 = v21;
  v22 = a1 + 8 * *(unsigned int *)(a1 + 320);
  v23 = v4[2];
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(a1 + 312);
  *(float64x2_t *)v22 = v23;
  v24 = a1 + 8 * *(unsigned int *)(a1 + 352);
  v25 = v4[4];
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(a1 + 344);
  *(float64x2_t *)v24 = v25;
  v26 = a1 + 8 * *(unsigned int *)(a1 + 384);
  v27 = v4[6];
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 + 376);
  *(float64x2_t *)v26 = v27;
  v28 = a1 + 8 * *(unsigned int *)(a1 + 416);
  v29 = v4[8];
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(a1 + 408);
  *(float64x2_t *)v28 = v29;
  v31 = *(_QWORD *)(a1 + 424);
  for (i = *(_QWORD *)(a1 + 432); v31 != i; v31 += 144)
  {
    v32 = (float64x2_t *)(*a2 + 8 * *(unsigned int *)(v31 + 32));
    sub_20F1F0E2C(v31 + 8, *v32, *(double *)vextq_s8(*(int8x16_t *)v32, *(int8x16_t *)v32, 8uLL).i64, v32[1].f64[0]);
  }
}

double sub_20F1F0E2C(uint64_t a1, float64x2_t a2, double a3, double a4)
{
  double v5;
  double v6;
  double v8;
  double v9;
  double v10;
  double cosval;
  double v12;
  __double2 v13;
  double v14;
  double v15;
  float64x2_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  double v27;
  double v29;
  double v31;
  float64x2_t v33;
  double v39;
  double v42;
  double v44;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  __double2 v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double result;
  double v65;
  unint64_t v66;
  int8x16_t v67;
  double v69;
  __int128 v70;
  uint64_t v71;

  v5 = a3;
  v6 = a2.f64[0];
  a2.f64[1] = a3;
  v8 = vmulq_f64(a2, a2).f64[0] + a3 * a3 + a4 * a4;
  if (v8 >= 0.0000002635)
  {
    v12 = sqrt(v8);
    v66 = *(unint64_t *)&a2.f64[0];
    v13 = __sincos_stret(v12);
    cosval = v13.__cosval;
    v6 = *(double *)&v66;
    v5 = a3;
    v10 = v13.__sinval / v12;
    v9 = 1.0 / v8 * (1.0 - v13.__cosval);
  }
  else
  {
    v9 = 0.5 - v8 * (v8 / -720.0 + 0.0416666667);
    v10 = 1.0 - v8 * (0.166666667 - v8 * (v8 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v8 * v9;
  }
  v14 = v6 * v9;
  v15 = v5 * v9;
  v16.f64[0] = cosval + v6 * (v6 * v9);
  v17 = cosval + v5 * (v5 * v9);
  v18 = cosval + a4 * (a4 * v9);
  v19 = v5 * (v6 * v9);
  v20 = a4 * v15;
  v21 = v6 * v10;
  v22 = v5 * v10;
  v23 = a4 * v10;
  v24.f64[0] = v19 - v23;
  v25.f64[0] = v22 + a4 * v14;
  v16.f64[1] = v19 + v23;
  v24.f64[1] = v17;
  v25.f64[1] = v20 - v21;
  _D0 = v21 + v20;
  v27 = *(double *)(a1 + 48);
  _Q4 = *(float64x2_t *)(a1 + 32);
  v29 = *(double *)(a1 + 72);
  _Q7 = *(float64x2_t *)(a1 + 56);
  v31 = *(double *)(a1 + 96);
  _Q19 = *(float64x2_t *)(a1 + 80);
  v33 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, _Q4.f64[0]), v24, _Q4, 1), v25, v27);
  __asm { FMLA            D21, D0, V4.D[1] }
  v39 = _D21 + v18 * v27;
  __asm
  {
    FMLA            D21, D0, V7.D[1]
    FMLA            D3, D0, V19.D[1]
  }
  *(double *)(a1 + 48) = v39;
  *(float64x2_t *)(a1 + 32) = v33;
  *(double *)(a1 + 72) = _D21 + v18 * v29;
  *(float64x2_t *)(a1 + 56) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, _Q7.f64[0]), v24, _Q7, 1), v25, v29);
  *(double *)(a1 + 96) = _D3 + v18 * v31;
  *(float64x2_t *)(a1 + 80) = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v16, _Q19.f64[0]), v24, _Q19, 1), v25, v31);
  v70 = 0uLL;
  v71 = 0;
  sub_20E9733B8((float64x2_t *)(a1 + 32), (double *)&v70);
  *(_QWORD *)(a1 + 16) = v71;
  *(_OWORD *)a1 = v70;
  v42 = *(double *)(a1 + 16);
  _Q7 = *(int8x16_t *)a1;
  *(_QWORD *)&v44 = vextq_s8(_Q7, _Q7, 8uLL).u64[0];
  _D1 = *(_QWORD *)(a1 + 8);
  __asm { FMLA            D0, D1, V7.D[1] }
  v47 = _D0 + v42 * v42;
  if (v47 >= 0.0000002635)
  {
    v51 = sqrt(v47);
    v67 = *(int8x16_t *)a1;
    v69 = *(double *)(a1 + 16);
    v65 = v44;
    v52 = __sincos_stret(v51);
    v50 = v52.__cosval;
    v44 = v65;
    _Q7.i64[0] = v67.i64[0];
    v42 = v69;
    v49 = v52.__sinval / v51;
    v48 = 1.0 / v47 * (1.0 - v52.__cosval);
  }
  else
  {
    v48 = 0.5 - v47 * (v47 / -720.0 + 0.0416666667);
    v49 = 1.0 - v47 * (0.166666667 - v47 * (v47 / -5040.0 + 0.00833333333));
    v50 = 1.0 - v47 * v48;
  }
  v53 = *(double *)_Q7.i64 * v48;
  v54 = v44 * v48;
  v55 = v50 + *(double *)_Q7.i64 * (*(double *)_Q7.i64 * v48);
  v56 = v50 + v44 * (v44 * v48);
  v57 = v50 + v42 * (v42 * v48);
  v58 = v44 * (*(double *)_Q7.i64 * v48);
  v59 = v42 * v53;
  v60 = v42 * v54;
  v61 = *(double *)_Q7.i64 * v49;
  v62 = v44 * v49;
  v63 = v42 * v49;
  *(double *)(a1 + 32) = v55;
  *(double *)(a1 + 40) = v58 + v63;
  *(double *)(a1 + 48) = v59 - v62;
  *(double *)(a1 + 56) = v58 - v63;
  *(double *)(a1 + 64) = v56;
  *(double *)(a1 + 72) = v61 + v60;
  result = v60 - v61;
  *(double *)(a1 + 80) = v62 + v59;
  *(double *)(a1 + 88) = v60 - v61;
  *(double *)(a1 + 96) = v57;
  return result;
}

__n128 sub_20F1F1160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  double v7;
  double v8;
  double v15;
  double v16;
  double v17;
  double cosval;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __int128 *v32;
  __int128 v33;
  __int128 *v34;
  __int128 v35;
  __int128 *v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  __int128 v45;
  __int128 v46;
  double v47;
  double v48;
  uint64_t v49;

  v4 = a1 + 264;
  v5 = a2 + 8 * *(unsigned int *)(a1 + 184);
  _Q7 = *(int8x16_t *)v5;
  v7 = *(double *)(v5 + 16);
  *(_QWORD *)&v8 = vextq_s8(_Q7, _Q7, 8uLL).u64[0];
  *(double *)(a1 + 176) = v7;
  *(int8x16_t *)(a1 + 160) = _Q7;
  _D1 = _Q7.i64[1];
  __asm { FMLA            D0, D1, V7.D[1] }
  v15 = _D0 + v7 * v7;
  if (v15 >= 0.0000002635)
  {
    v19 = sqrt(v15);
    v48 = v7;
    v49 = _Q7.i64[0];
    v47 = v8;
    v20 = __sincos_stret(v19);
    cosval = v20.__cosval;
    v8 = v47;
    v7 = v48;
    _Q7.i64[0] = v49;
    v17 = v20.__sinval / v19;
    v16 = 1.0 / v15 * (1.0 - v20.__cosval);
  }
  else
  {
    v16 = 0.5 - v15 * (v15 / -720.0 + 0.0416666667);
    v17 = 1.0 - v15 * (0.166666667 - v15 * (v15 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v15 * v16;
  }
  v21 = *(double *)_Q7.i64 * v16;
  v22 = v8 * v16;
  v23 = cosval + *(double *)_Q7.i64 * (*(double *)_Q7.i64 * v16);
  v24 = cosval + v8 * (v8 * v16);
  v25 = cosval + v7 * (v7 * v16);
  v26 = v8 * (*(double *)_Q7.i64 * v16);
  v27 = v7 * v21;
  v28 = v7 * v22;
  v29 = *(double *)_Q7.i64 * v17;
  v30 = v8 * v17;
  v31 = v7 * v17;
  *(double *)(a1 + 192) = v23;
  *(double *)(a1 + 200) = v26 + v31;
  *(double *)(a1 + 208) = v27 - v30;
  *(double *)(a1 + 216) = v26 - v31;
  *(double *)(a1 + 224) = v24;
  *(double *)(a1 + 232) = v29 + v28;
  *(double *)(a1 + 240) = v30 + v27;
  *(double *)(a1 + 248) = v28 - v29;
  *(double *)(a1 + 256) = v25;
  v32 = (__int128 *)(a2 + 8 * *(unsigned int *)(a1 + 288));
  v33 = *v32;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v32 + 2);
  *(_OWORD *)v4 = v33;
  v34 = (__int128 *)(a2 + 8 * *(unsigned int *)(a1 + 320));
  v35 = *v34;
  *(_QWORD *)(v4 + 48) = *((_QWORD *)v34 + 2);
  *(_OWORD *)(v4 + 32) = v35;
  v36 = (__int128 *)(a2 + 8 * *(unsigned int *)(a1 + 352));
  v37 = *v36;
  *(_QWORD *)(v4 + 80) = *((_QWORD *)v36 + 2);
  *(_OWORD *)(v4 + 64) = v37;
  v38 = (__int128 *)(a2 + 8 * *(unsigned int *)(a1 + 384));
  v39 = *v38;
  *(_QWORD *)(v4 + 112) = *((_QWORD *)v38 + 2);
  *(_OWORD *)(v4 + 96) = v39;
  v40 = a2 + 8 * *(unsigned int *)(a1 + 416);
  *(_QWORD *)&v39 = *(_QWORD *)(v40 + 16);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)v40;
  *(_QWORD *)(v4 + 144) = v39;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v41 = *(_OWORD *)(a2 + 16);
  v42 = *(_OWORD *)(a2 + 32);
  v43 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v43;
  *(_OWORD *)(a1 + 16) = v41;
  *(_OWORD *)(a1 + 32) = v42;
  result = *(__n128 *)(a2 + 80);
  v45 = *(_OWORD *)(a2 + 96);
  v46 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v46;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v45;
  return result;
}

uint64_t sub_20F1F1388(uint64_t a1, float64x2_t *a2, __int128 *a3, uint64_t a4, __int128 *a5, __int128 *a6, __int128 *a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  __int128 v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  __int128 v35;
  char *v36;
  __int128 v37;
  char *v38;
  int v39;
  unsigned int v40;
  double v41;
  uint64_t v42;
  double *v43;
  uint64_t v44;
  unint64_t v45;
  double *v46;
  unint64_t v47;
  BOOL v48;
  double *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  double v53;
  double *v54;
  unint64_t v55;
  double *v56;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  double *v60;
  uint64_t v61;
  unint64_t v62;
  double *v63;
  double *v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  double *v68;
  uint64_t v69;
  unint64_t v70;
  double *v71;
  double *v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v75;
  double *v76;
  uint64_t v77;
  unint64_t v78;
  double *v79;
  double *v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  double *v84;
  uint64_t v85;
  unint64_t v86;
  double *v87;
  double *v88;
  double *v89;
  unint64_t v90;
  BOOL v91;
  double *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double *v97;
  double *v98;
  double *v99;
  uint64_t *v100;
  unsigned __int8 v101;
  char *v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t i;
  uint64_t v108;
  uint64_t result;
  _OWORD v110[9];
  __uint64_t v111[2];
  void *v112[2];
  uint64_t v113;
  char v114;
  void *v115;
  char v116;
  char v117;
  void *v118;
  char v119;
  char v120;
  void *v121;
  char v122;
  void *__p;
  char v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  memset(v110, 0, sizeof(v110));
  v112[0] = 0;
  v112[1] = 0;
  v113 = 0;
  sub_20E9733B8(a2, (double *)v112);
  v27 = *(_OWORD *)v112;
  v28 = (char *)v110 + 8 * *(unsigned int *)(a1 + 432);
  *((_QWORD *)v28 + 2) = v113;
  *(_OWORD *)v28 = v27;
  v29 = (char *)v110 + 8 * *(unsigned int *)(a1 + 536);
  v30 = *a3;
  *((_QWORD *)v29 + 2) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v29 = v30;
  v31 = (char *)v110 + 8 * *(unsigned int *)(a1 + 568);
  *(_QWORD *)&v30 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)v31 = *(_OWORD *)a4;
  *((_QWORD *)v31 + 2) = v30;
  v32 = (char *)v110 + 8 * *(unsigned int *)(a1 + 600);
  v33 = *a5;
  *((_QWORD *)v32 + 2) = *((_QWORD *)a5 + 2);
  *(_OWORD *)v32 = v33;
  v34 = (char *)v110 + 8 * *(unsigned int *)(a1 + 632);
  v35 = *a6;
  *((_QWORD *)v34 + 2) = *((_QWORD *)a6 + 2);
  *(_OWORD *)v34 = v35;
  v36 = (char *)v110 + 8 * *(unsigned int *)(a1 + 664);
  v37 = *a7;
  *((_QWORD *)v36 + 2) = *((_QWORD *)a7 + 2);
  *(_OWORD *)v36 = v37;
  sub_20F1F1160(a1 + 248, (uint64_t)v110);
  *(double *)(a1 + 400) = a8;
  if (*(_DWORD *)(a1 + 240) == 18 && *(_DWORD *)(a1 + 244) == 18)
  {
    v38 = *(char **)(a1 + 224);
    v39 = 18;
    v40 = 324;
LABEL_10:
    bzero(v38, 8 * v40);
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 240) = 0x1200000012;
  v38 = *(char **)(a1 + 224);
  if (*(_QWORD *)(a1 + 232) > 0x143uLL)
  {
    v39 = 18;
    v40 = 324;
    goto LABEL_10;
  }
  if (v38)
    MEMORY[0x212BC6368](*(_QWORD *)(a1 + 224), 0x1000C8000313F17);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 324;
  v38 = (char *)operator new(0xA20uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)(a1 + 224) = v38;
  v39 = *(_DWORD *)(a1 + 240);
  v40 = v39 * *(_DWORD *)(a1 + 244);
  if (v40)
    goto LABEL_10;
LABEL_11:
  v41 = a9 * a9;
  v42 = (v39 + 1);
  v43 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 432))];
  v44 = (3 * v39);
  if (v39)
  {
    v45 = (unint64_t)(v39 - 3) << 32;
    v46 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 432))];
    do
    {
      *v46 = 0.0;
      v47 = HIDWORD(v45);
      v48 = (int)v45 < 2;
      if ((int)v45 < 2)
        v47 = 0;
      v49 = &v46[v47];
      v50 = (v45 + 1);
      v51 = v45 & 0xFFFFFFFF00000000;
      if (!v48)
        v50 = 0;
      v45 = v50 | v51;
      v46 = v49 + 1;
    }
    while (v46 != &v43[v44]);
  }
  *v43 = v41;
  v43[v42] = v41;
  v52 = (2 * v42);
  v43[v52] = v41;
  v53 = a10 * a10;
  v54 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 536))];
  if (v39)
  {
    v55 = (unint64_t)(v39 - 3) << 32;
    v56 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 536))];
    v57 = v55;
    do
    {
      *v56 = 0.0;
      v58 = HIDWORD(v57);
      v59 = (int)v57 < 2;
      if ((int)v57 < 2)
        v58 = 0;
      v60 = &v56[v58];
      v61 = (v57 + 1);
      v62 = v57 & 0xFFFFFFFF00000000;
      if (!v59)
        v61 = 0;
      v57 = v61 | v62;
      v56 = v60 + 1;
    }
    while (v56 != &v54[v44]);
    *v54 = v53;
    v54[v42] = v53;
    v54[v52] = v53;
    v63 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 568))];
    v64 = v63;
    v65 = (unint64_t)(v39 - 3) << 32;
    do
    {
      *v64 = 0.0;
      v66 = HIDWORD(v65);
      v67 = (int)v65 < 2;
      if ((int)v65 < 2)
        v66 = 0;
      v68 = &v64[v66];
      v69 = (v65 + 1);
      v70 = v65 & 0xFFFFFFFF00000000;
      if (!v67)
        v69 = 0;
      v65 = v69 | v70;
      v64 = v68 + 1;
    }
    while (v64 != &v63[v44]);
    *v63 = a11 * a11;
    v63[v42] = a11 * a11;
    v63[v52] = a11 * a11;
    v71 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 600))];
    v72 = v71;
    v73 = (unint64_t)(v39 - 3) << 32;
    do
    {
      *v72 = 0.0;
      v74 = HIDWORD(v73);
      v75 = (int)v73 < 2;
      if ((int)v73 < 2)
        v74 = 0;
      v76 = &v72[v74];
      v77 = (v73 + 1);
      v78 = v73 & 0xFFFFFFFF00000000;
      if (!v75)
        v77 = 0;
      v73 = v77 | v78;
      v72 = v76 + 1;
    }
    while (v72 != &v71[v44]);
    *v71 = a12 * a12;
    v71[v42] = a12 * a12;
    v71[v52] = a12 * a12;
    v79 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 632))];
    v80 = v79;
    v81 = (unint64_t)(v39 - 3) << 32;
    do
    {
      *v80 = 0.0;
      v82 = HIDWORD(v81);
      v83 = (int)v81 < 2;
      if ((int)v81 < 2)
        v82 = 0;
      v84 = &v80[v82];
      v85 = (v81 + 1);
      v86 = v81 & 0xFFFFFFFF00000000;
      if (!v83)
        v85 = 0;
      v81 = v85 | v86;
      v80 = v84 + 1;
    }
    while (v80 != &v79[v44]);
    *v79 = a13 * a13;
    v79[v42] = a13 * a13;
    v79[v52] = a13 * a13;
    v87 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 664))];
    v88 = &v87[v44];
    v89 = v87;
    do
    {
      *v89 = 0.0;
      v90 = HIDWORD(v55);
      v91 = (int)v55 < 2;
      if ((int)v55 < 2)
        v90 = 0;
      v92 = &v89[v90];
      v93 = (v55 + 1);
      v94 = v55 & 0xFFFFFFFF00000000;
      if (!v91)
        v93 = 0;
      v55 = v93 | v94;
      v89 = v92 + 1;
    }
    while (v89 != v88);
  }
  else
  {
    *v54 = v53;
    v95 = v42;
    v54[v95] = v53;
    v96 = v52;
    v54[v96] = v53;
    v97 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 568))];
    *v97 = a11 * a11;
    v97[v95] = a11 * a11;
    v97[v96] = a11 * a11;
    v98 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 600))];
    *v98 = a12 * a12;
    v98[v95] = a12 * a12;
    v98[v96] = a12 * a12;
    v99 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 632))];
    *v99 = a13 * a13;
    v99[v95] = a13 * a13;
    v99[v96] = a13 * a13;
    v87 = (double *)&v38[8 * (v42 * *(_DWORD *)(a1 + 664))];
  }
  *v87 = a14 * a14;
  v87[v42] = a14 * a14;
  v87[v52] = a14 * a14;
  v100 = sub_210219C18();
  v101 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LODWORD(v112[0]) = 134217984;
    *(void **)((char *)v112 + 4) = *(void **)&a8;
    v103 = (char *)_os_log_send_and_compose_impl();
    v104 = strlen(v103);
    v111[0] = 0;
    pthread_threadid_np(0, v111);
    v105 = v111[0];
    timespec_get((timespec *)v111, 1);
    sub_210219E20(v112, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v100 + 1), (__int128 *)(v100 + 5), "Attitude filter is initialized successfully at time %f", 0x36uLL, v103, v104, v105, v111);
    std::mutex::lock(&stru_254A5A410);
    v106 = qword_254A5A458;
    for (i = unk_254A5A460; v106 != i; v106 += 40)
    {
      v108 = *(_QWORD *)(v106 + 32);
      if (!v108)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v108 + 48))(v108, v112);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v124 < 0)
    {
      operator delete(__p);
      if ((v122 & 0x80000000) == 0)
      {
LABEL_58:
        if (!v120)
        {
LABEL_64:
          if (v117 && v116 < 0)
            operator delete(v115);
          if (v114 < 0)
            operator delete(v112[1]);
          if (v103)
            free(v103);
          goto LABEL_71;
        }
LABEL_62:
        if (v119 < 0)
          operator delete(v118);
        goto LABEL_64;
      }
    }
    else if ((v122 & 0x80000000) == 0)
    {
      goto LABEL_58;
    }
    operator delete(v121);
    if (!v120)
      goto LABEL_64;
    goto LABEL_62;
  }
LABEL_71:
  result = os_signpost_enabled((os_log_t)*v100);
  if ((_DWORD)result)
  {
    LODWORD(v112[0]) = 134217984;
    *(void **)((char *)v112 + 4) = *(void **)&a8;
    return _os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20F1F1AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;

  sub_20E96E218((uint64_t)&a33);
  if (!v33)
    _Unwind_Resume(a1);
  free(v33);
  _Unwind_Resume(a1);
}

double sub_20F1F1B0C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, float64x2_t *a5@<X4>, double *a6@<X5>, _QWORD *a7@<X6>, char *a8@<X7>, int64x2_t *a9@<X8>, float64x2_t a10@<Q0>, float64x2_t a11@<Q2>)
{
  float64x2_t v11;
  float64x2_t v17;
  float64x2_t v19;
  float64x2_t v25;
  double v28;
  double v30;
  double v32;
  double v33;
  double v34;
  double cosval;
  double v36;
  __double2 v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float64_t v44;
  double v45;
  double v46;
  __int128 v47;
  float64x2_t v49;
  double v50;
  float64x2_t v51;
  int8x16_t v55;
  float64x2_t v57;
  int8x16_t v58;
  int8x16_t v60;
  float64x2_t v65;
  float64x2_t v68;
  float64x2_t v74;
  float64x2_t v78;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  double v88;
  float64x2_t *v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t *v95;
  float64x2_t v96;
  float64x2_t *v97;
  float64x2_t *v98;
  uint64_t v99;
  int v100;
  float64x2_t *v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v119;
  double v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  double v125;
  char *v126;
  BOOL v127;
  uint64_t v128;
  int v129;
  char *v130;
  BOOL v131;
  double result;
  float64x2_t v133;
  float64_t v134;
  unint64_t v135;
  float64_t v136;
  float64x2_t v137;
  float64x2_t v138;
  double v139;
  float64x2_t v140;
  float64_t v141;
  double v142;
  double v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  double v147;
  double v148;
  double v149;
  float64x2_t v150;
  double v151;
  int64x2_t v152;
  double v153;
  int64x2_t v154;
  double v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float64x2_t v159;
  double v160;
  float64x2_t v161;
  double v162;
  float64x2_t v163;
  double v164;
  float64x2_t v165;
  double v166;
  float64x2_t v167;
  double v168;
  float64x2_t v169;
  double v170;
  int64x2_t v171;
  uint64_t v172;
  int64x2_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;

  v11.f64[0] = vabdd_f64(*(double *)a3, *(double *)a2);
  a10.f64[0] = *(float64_t *)(a2 + 24);
  a11.f64[0] = *(float64_t *)(a3 + 24);
  v17 = *(float64x2_t *)(a3 + 8);
  _Q0 = vaddq_f64(a10, a11);
  v19 = vaddq_f64(*(float64x2_t *)(a2 + 8), v17);
  __asm { FMOV            V2.2D, #0.5 }
  v17.f64[0] = a5[1].f64[0];
  v25 = vmlaq_f64(vnegq_f64(v17), _Q0, _Q2);
  _Q4 = vmlaq_f64(vnegq_f64(*a5), v19, _Q2);
  _Q0.f64[0] = 0.0;
  v147 = *a6;
  v148 = a6[1];
  _Q2.f64[0] = 0.0;
  _Q2.f64[1] = v148;
  _Q1 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)*(unint64_t *)a6, _Q4.f64[0]), _Q2, _Q4, 1), (float64x2_t)0, v25.f64[0]);
  v145 = _Q4;
  v146 = v11;
  __asm { FMLA            D2, D0, V4.D[1] }
  v149 = a6[2];
  v133 = v25;
  _Q2.f64[0] = vmlad_n_f64(_Q2.f64[0], v149, v25.f64[0]);
  *(_QWORD *)&v28 = *(_OWORD *)&vmulq_f64(v11, _Q2);
  _Q7 = vmulq_n_f64(_Q1, v11.f64[0]);
  _Q1.f64[0] = vmuld_lane_f64(v11.f64[0], _Q1, 1);
  v30 = _Q7.f64[1];
  __asm { FMLA            D10, D1, V7.D[1] }
  v32 = vmlad_n_f64(_D10, v11.f64[0] * _Q2.f64[0], v28);
  if (v32 >= 0.0000002635)
  {
    v36 = sqrt(v32);
    v141 = _Q7.f64[0];
    v143 = v28;
    v37 = __sincos_stret(v36);
    cosval = v37.__cosval;
    _Q7.f64[0] = v141;
    v28 = v143;
    v34 = v37.__sinval / v36;
    v33 = 1.0 / v32 * (1.0 - v37.__cosval);
  }
  else
  {
    v33 = 0.5 - v32 * (v32 / -720.0 + 0.0416666667);
    v34 = 1.0 - v32 * (0.166666667 - v32 * (v32 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v32 * v33;
  }
  v38 = v30 * v33;
  v39 = cosval + _Q7.f64[0] * (_Q7.f64[0] * v33);
  v40 = cosval + v30 * (v30 * v33);
  v170 = cosval + v28 * (v28 * v33);
  v41 = v30 * (_Q7.f64[0] * v33);
  v42 = v28 * (_Q7.f64[0] * v33);
  v43 = v28 * v38;
  v44 = _Q7.f64[0] * v34;
  v45 = v30 * v34;
  v46 = v28 * v34;
  v165.f64[0] = v39;
  v165.f64[1] = v41 + v46;
  v169.f64[0] = v45 + v42;
  v169.f64[1] = v43 - v44;
  v166 = v42 - v45;
  v167.f64[0] = v41 - v46;
  v167.f64[1] = v40;
  v168 = v44 + v43;
  v150 = 0uLL;
  v151 = 0.0;
  sub_20F20830C(&v165, v150.f64, (double *)v152.i64);
  *(double *)&v47 = v153;
  *((double *)&v47 + 1) = v155;
  v172 = v156;
  v171 = vzip1q_s64(v152, v154);
  v174 = v157;
  v173 = vzip2q_s64(v152, v154);
  v176 = v158;
  v175 = v47;
  sub_20E8BE424((uint64_t)&v159);
  _D2 = *(_QWORD *)(a4 + 40);
  v49 = *(float64x2_t *)(a4 + 24);
  v50 = *(double *)(a4 + 64);
  v51 = *(float64x2_t *)(a4 + 48);
  _V6.D[1] = v165.f64[1];
  _V17.D[1] = v167.f64[1];
  _V19.D[1] = v169.f64[1];
  v55 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a4, v165.f64[0]), v49, v165, 1), v51, v166);
  __asm { FMLA            D20, D2, V6.D[1] }
  v57.f64[0] = _D20 + v50 * v166;
  v58 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a4, v167.f64[0]), v49, v167, 1), v51, v168);
  __asm { FMLA            D6, D2, V17.D[1] }
  v60 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)a4, v169.f64[0]), v49, v169, 1), v51, v170);
  __asm { FMLA            D0, D2, V19.D[1] }
  v151 = v57.f64[0];
  v150 = (float64x2_t)v55;
  v153 = _D6 + v50 * v168;
  v152 = (int64x2_t)v58;
  v155 = _D0 + v50 * v170;
  v154 = (int64x2_t)v60;
  v142 = v153;
  v144 = (float64x2_t)v58;
  v139 = v155;
  v140 = (float64x2_t)v60;
  v137 = v57;
  v138 = (float64x2_t)v55;
  v135 = vextq_s8(v58, v58, 8uLL).u64[0];
  *(_QWORD *)&v136 = vextq_s8(v55, v55, 8uLL).u64[0];
  *(_QWORD *)&v134 = vextq_s8(v60, v60, 8uLL).u64[0];
  if (a7)
  {
    bzero(a7 + 1, 0x470uLL);
    _D29 = v139;
    _D27 = v142;
    _Q0.f64[0] = v138.f64[0];
    _Q0.f64[1] = v136;
    v65 = vnegq_f64(_Q0);
    _Q7 = vnegq_f64(v137);
    _Q16.f64[0] = v144.f64[0];
    *(_QWORD *)&_Q16.f64[1] = v135;
    v68.f64[0] = v140.f64[0];
    v68.f64[1] = v134;
    _D4 = v160;
    _Q5 = v159;
    _D2 = v162;
    _Q3 = v161;
    _Q0.f64[0] = v164;
    _Q1 = v163;
    v74 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v65, v159.f64[0]), _Q16, v159, 1), v68, v160, 0);
    _D20 = v159.f64[1];
    __asm
    {
      FMLS            D19, D20, V27.D[0]
      FMLS            D19, D4, V29.D[0]
    }
    v78 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v65, v161.f64[0]), _Q16, v161, 1), v68, v162, 0);
    _D22 = v161.f64[1];
    __asm
    {
      FMLS            D21, D22, V27.D[0]
      FMLS            D21, D2, V29.D[0]
    }
    v82 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v65, v163.f64[0]), _Q16, v163, 1), v68, v164, 0);
    _Q16.f64[0] = v163.f64[1];
    __asm { FMLS            D7, D16, V27.D[0] }
    v83 = vmulq_n_f64(v74, v146.f64[0]);
    v68.f64[0] = vmulq_f64(v146, _Q19).f64[0];
    v84 = vmulq_n_f64(v78, v146.f64[0]);
    *(_QWORD *)&_Q19.f64[0] = *(_OWORD *)&vmulq_f64(v146, _Q21);
    v85 = vmulq_n_f64(v82, v146.f64[0]);
    v86 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v83, v147), (float64x2_t)0, v84), (float64x2_t)0, v85);
    v87 = vmulq_f64(v83, (float64x2_t)0);
    v88 = vmlad_n_f64(v147 * v68.f64[0], 0.0, _Q19.f64[0]);
    v68.f64[0] = 0.0 * v68.f64[0];
    __asm { FMLS            D7, D0, V29.D[0] }
    *(_QWORD *)&_Q7.f64[0] = *(_OWORD *)&vmulq_f64(v146, _Q7);
    *a7 = 0x3FF0000000000000;
    a7[13] = 0x3FF0000000000000;
    a7[26] = 0x3FF0000000000000;
    a7[39] = 0x3FF0000000000000;
    a7[52] = 0x3FF0000000000000;
    a7[65] = 0x3FF0000000000000;
    a7[78] = 0x3FF0000000000000;
    a7[91] = 0x3FF0000000000000;
    a7[104] = 0x3FF0000000000000;
    a7[117] = 0x3FF0000000000000;
    a7[130] = 0x3FF0000000000000;
    a7[143] = 0x3FF0000000000000;
    v89 = (float64x2_t *)&a7[*(_DWORD *)(a1 + 432) + 12 * *(_DWORD *)(a1 + 536)];
    *v89 = v86;
    v89[1].f64[0] = vmlad_n_f64(v88, 0.0, _Q7.f64[0]);
    v89[6] = vmlaq_f64(vmlaq_n_f64(v87, v84, v148), (float64x2_t)0, v85);
    v89[7].f64[0] = vmlad_n_f64(vmlad_n_f64(v68.f64[0], v148, _Q19.f64[0]), 0.0, _Q7.f64[0]);
    v89[12] = vmlaq_n_f64(vmlaq_f64(v87, (float64x2_t)0, v84), v85, v149);
    v89[13].f64[0] = vmlad_n_f64(vmlad_n_f64(v68.f64[0], 0.0, _Q19.f64[0]), v149, _Q7.f64[0]);
    v90 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, _Q5.f64[0]), v144, _Q5, 1), v140, _D4);
    __asm { FMLA            D7, D27, V5.D[1] }
    v91.f64[0] = _Q7.f64[0] + v139 * _D4;
    v92 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, _Q3.f64[0]), v144, _Q3, 1), v140, _D2);
    __asm { FMLA            D7, D27, V3.D[1] }
    v93.f64[0] = _Q7.f64[0] + v139 * _D2;
    __asm { FMLA            D7, D27, V1.D[1] }
    v94 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v138, _Q1.f64[0]), v144, _Q1, 1), v140, _Q0.f64[0]);
    _Q0.f64[0] = _Q7.f64[0] + v139 * _Q0.f64[0];
    LODWORD(v89) = *(_QWORD *)(a1 + 432) + 12 * *(_QWORD *)(a1 + 568);
    v95 = (float64x2_t *)&a7[v89];
    *(_QWORD *)&v95[1].f64[0] = *(_OWORD *)&vmulq_f64(v145, vmulq_f64(v146, v91));
    *v95 = vmulq_n_f64(vmulq_n_f64(v90, v146.f64[0]), v145.f64[0]);
    v96 = (float64x2_t)vextq_s8((int8x16_t)v145, (int8x16_t)v145, 8uLL);
    v97 = (float64x2_t *)&a7[(int)v89 + 12];
    *(_QWORD *)&v97[1].f64[0] = *(_OWORD *)&vmulq_f64(v96, vmulq_f64(v146, v93));
    *v97 = vmulq_n_f64(vmulq_n_f64(v92, v146.f64[0]), v96.f64[0]);
    v98 = (float64x2_t *)&a7[(int)v89 + 24];
    *(_QWORD *)&v98[1].f64[0] = *(_OWORD *)&vmulq_f64(v133, vmulq_f64(v146, _Q0));
    *v98 = vmulq_n_f64(vmulq_n_f64(v94, v146.f64[0]), v133.f64[0]);
  }
  if (a8)
  {
    bzero(a8, 0x360uLL);
    v99 = 0;
    v100 = 0;
    v101 = (float64x2_t *)&a8[8 * *(unsigned int *)(a1 + 432)];
    v102.f64[0] = v138.f64[0];
    v102.f64[1] = v136;
    v103 = vnegq_f64(v102);
    _Q1 = vnegq_f64(v137);
    _Q18.f64[0] = v144.f64[0];
    *(_QWORD *)&_Q18.f64[1] = v135;
    _Q17.f64[0] = v140.f64[0];
    _D19 = v142;
    _Q17.f64[1] = v134;
    _D2 = v160;
    _Q3.f64[1] = v159.f64[1];
    _D4 = v162;
    _D6 = v164;
    v112 = _Q18;
    v113 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v103, v159.f64[0]), _Q18, v159, 1), _Q17, v160, 0);
    v114 = _Q17;
    _D3 = v159.f64[1];
    __asm { FMLS            D17, D3, V19.D[0] }
    _Q18.f64[0] = v139;
    __asm { FMLS            D17, D2, V18.D[0] }
    _D5 = v161.f64[1];
    __asm
    {
      FMLS            D3, D5, V19.D[0]
      FMLS            D3, D4, V18.D[0]
    }
    _D4 = v163.f64[1];
    __asm
    {
      FMLS            D1, D4, V19.D[0]
      FMLS            D1, D6, V18.D[0]
    }
    v119 = vmulq_n_f64(v113, v146.f64[0]);
    v120 = vmulq_f64(v146, _Q17).f64[0];
    v121 = vmulq_n_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v103, v161.f64[0]), v112, v161, 1), v114, v162, 0), v146.f64[0]);
    *(_QWORD *)&_Q3.f64[0] = *(_OWORD *)&vmulq_f64(v146, _Q3);
    v122 = vmulq_n_f64(vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v103, v163.f64[0]), v112, v163, 1), v114, v164, 0), v146.f64[0]);
    *(_QWORD *)&_Q1.f64[0] = *(_OWORD *)&vmulq_f64(v146, _Q1);
    v123 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v119, v147), (float64x2_t)0, v121), (float64x2_t)0, v122);
    v113.f64[0] = vmlad_n_f64(vmlad_n_f64(v147 * v120, 0.0, _Q3.f64[0]), 0.0, _Q1.f64[0]);
    v124 = vmulq_f64(v119, (float64x2_t)0);
    v125 = 0.0 * v120;
    *v101 = v123;
    v101[1].f64[0] = v113.f64[0];
    v101[6] = vmlaq_f64(vmlaq_n_f64(v124, v121, v148), (float64x2_t)0, v122);
    v101[7].f64[0] = vmlad_n_f64(vmlad_n_f64(v125, v148, _Q3.f64[0]), 0.0, _Q1.f64[0]);
    v101[12] = vmlaq_n_f64(vmlaq_f64(v124, (float64x2_t)0, v121), v122, v149);
    v101[13].f64[0] = vmlad_n_f64(vmlad_n_f64(v125, 0.0, _Q3.f64[0]), v149, _Q1.f64[0]);
    v126 = &a8[8 * (*(_DWORD *)(a1 + 536) + 36)];
    do
    {
      *(_QWORD *)&v126[8 * v99] = 0;
      v127 = v100 < 2;
      if (v100 < 2)
        ++v100;
      else
        v100 = 0;
      if (v127)
        ++v99;
      else
        v99 += 10;
    }
    while (v99 != 36);
    v128 = 0;
    v129 = 0;
    *(_QWORD *)v126 = 0x3FF0000000000000;
    *((_QWORD *)v126 + 13) = 0x3FF0000000000000;
    *((_QWORD *)v126 + 26) = 0x3FF0000000000000;
    v130 = &a8[8 * (*(_DWORD *)(a1 + 600) + 72)];
    do
    {
      *(_QWORD *)&v130[8 * v128] = 0;
      v131 = v129 < 2;
      if (v129 < 2)
        ++v129;
      else
        v129 = 0;
      if (v131)
        ++v128;
      else
        v128 += 10;
    }
    while (v128 != 36);
    *(_QWORD *)v130 = 0x3FF0000000000000;
    *((_QWORD *)v130 + 13) = 0x3FF0000000000000;
    *((_QWORD *)v130 + 26) = 0x3FF0000000000000;
  }
  v171 = 0uLL;
  v172 = 0;
  sub_20E9733B8(&v150, (double *)v171.i64);
  result = *(double *)v171.i64;
  *a9 = v171;
  a9[1].i64[0] = v172;
  return result;
}

uint64_t sub_20F1F22B4(uint64_t a1)
{
  float64x2_t *v1;
  float64x2_t v2;
  double v3;
  double v4;
  double v5;
  float64x2_t v6;
  double v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double *v11;
  float64x2_t *v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  int64x2_t *v22;
  int64x2_t v23;
  double v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  double v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  float64x2_t *v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  uint64_t v70;
  float64x2_t *v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t *v107;
  float64x2_t *v108;
  float64x2_t *v109;
  float64x2_t *v110;
  float64x2_t *v111;
  float64x2_t *v112;
  float64x2_t *v113;
  float64x2_t *v114;
  float64x2_t *v115;
  float64x2_t *v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  float64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  float64x2_t v148;
  float64x2_t v149;
  float64x2_t v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  float64x2_t v182;
  float64x2_t v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  float64x2_t v204;
  float64x2_t v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  float64x2_t v226;
  float64x2_t v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  float64x2_t v241;
  float64x2_t v242;
  float64x2_t v243;
  float64x2_t v244;
  float64x2_t v245;
  float64x2_t v246;
  float64x2_t v247;
  float64x2_t v248;
  float64x2_t v249;
  float64x2_t v250;
  float64x2_t v251;
  float64x2_t v252;
  float64x2_t v253;
  float64x2_t v254;
  float64x2_t v255;
  float64x2_t v256;
  float64x2_t v257;
  float64x2_t v258;
  float64x2_t v259;
  float64x2_t v260;
  float64x2_t v261;
  float64x2_t v262;
  float64x2_t v263;
  float64x2_t v264;
  float64x2_t v265;
  float64x2_t v266;
  float64x2_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  float64x2_t v299;
  float64x2_t v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  float64x2_t v355;
  float64x2_t v356;
  float64x2_t v357;
  float64x2_t v358;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  float64x2_t v381;
  float64x2_t v382;
  float64x2_t v383;
  float64x2_t v384;
  float64x2_t v385;
  float64x2_t v386;
  float64x2_t v387;
  float64x2_t v388;
  float64x2_t v389;
  float64x2_t v390;
  float64x2_t v391;
  float64x2_t v392;
  float64x2_t v393;
  float64x2_t v394;
  float64x2_t v395;
  float64x2_t v396;
  float64x2_t v397;
  float64x2_t v398;
  float64x2_t v399;
  float64x2_t v400;
  float64x2_t v401;
  float64x2_t v402;
  float64x2_t v403;
  float64x2_t v404;
  float64x2_t v405;
  float64x2_t v406;
  float64x2_t v407;
  float64x2_t v408;
  float64x2_t v409;
  float64x2_t v410;
  float64x2_t v411;
  __int32 v412;
  float64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  size_t v417;
  unsigned int v418;
  uint64_t v419;
  char *v420;
  int v421;
  float64_t v422;
  uint64_t v423;
  uint64_t v424;
  size_t v425;
  uint64_t v426;
  unsigned int v427;
  char *v428;
  float64x2_t v430;
  float64x2_t v431;
  float64x2_t v432;
  float64x2_t v433;
  float64x2_t v434;
  float64x2_t *v435;
  float64x2_t v436;
  float64x2_t v437;
  float64x2_t v438;
  float64x2_t v439;
  float64x2_t v440;
  float64x2_t v441;
  float64x2_t v442;
  double v443;
  float64x2_t v444;
  float64x2_t v445;
  float64x2_t v446;
  float64x2_t v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v450;
  float64x2_t v451;
  float64x2_t v452;
  float64x2_t v453;
  float64x2_t v454;
  float64x2_t v455;
  float64x2_t v456;
  float64x2_t v457;
  float64x2_t v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  float64x2_t v472;
  float64x2_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  float64x2_t v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  float64x2_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  float64x2_t v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  float64x2_t v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float64x2_t v534;
  float64x2_t v535;
  float64x2_t v536;
  float64x2_t v537;
  float64x2_t v538;
  float64x2_t v539;
  float64x2_t v540;
  float64x2_t v541;
  float64x2_t v542;
  float64x2_t v543;
  float64x2_t v544;
  float64x2_t v545;
  float64x2_t v546;
  float64x2_t v547;
  float64x2_t v548;
  float64x2_t v549;
  float64x2_t v550;
  float64x2_t v551;
  float64x2_t v552;
  float64x2_t v553;
  float64x2_t v554;
  float64x2_t v555;
  float64x2_t v556;
  float64x2_t v557;
  float64x2_t v558;
  float64x2_t v559;
  float64x2_t v560;
  float64x2_t v561;
  float64x2_t v562;
  float64x2_t v563;
  float64x2_t v564;
  float64x2_t v565;
  float64x2_t v566;
  float64x2_t v567;
  float64x2_t v568;
  float64x2_t v569;
  float64x2_t v570;
  float64x2_t v571;
  float64x2_t v572;
  float64x2_t v573;
  float64x2_t v574;
  float64x2_t v575;
  float64x2_t v576;
  float64x2_t v577;
  float64x2_t v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  float64x2_t v584;
  float64x2_t v585;
  float64x2_t v586;
  float64x2_t v587;
  float64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  float64x2_t v591;
  float64x2_t v592;
  float64x2_t v593;
  float64x2_t v594;
  float64x2_t v595;
  float64x2_t v596;
  float64x2_t v597;
  float64x2_t v598;
  float64x2_t v599;
  float64x2_t v600;
  float64x2_t v601;
  float64x2_t v602;
  float64x2_t v603;
  float64x2_t v604;
  float64x2_t v605;
  float64x2_t v606;
  float64x2_t v607;
  float64x2_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  float64x2_t v612;
  float64x2_t v613;
  float64x2_t v614;
  float64x2_t v615;
  float64x2_t v616;
  float64x2_t v617;
  float64x2_t v618;
  float64x2_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float64x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  float64x2_t v625;
  float64x2_t v626;
  float64x2_t v627;
  float64x2_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  float64x2_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  float64x2_t v644;
  float64x2_t v645;
  float64x2_t v646;
  float64x2_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  float64x2_t v651;
  float64x2_t v652;
  float64x2_t v653;
  float64x2_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  float64x2_t v658;
  float64x2_t v659;
  float64x2_t v660;
  float64x2_t v661;
  float64x2_t v662;
  float64x2_t v663;
  float64x2_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  float64x2_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  float64x2_t v672;
  float64x2_t v673;
  float64x2_t v674;
  float64x2_t v675;
  float64x2_t v676;
  float64x2_t v677;
  float64x2_t v678;
  float64x2_t v679;
  float64x2_t v680;
  float64x2_t v681;
  float64x2_t v682;
  float64x2_t v683;
  float64x2_t v684;
  float64x2_t v685;
  float64x2_t v686;
  float64x2_t v687;
  float64x2_t v688;
  float64x2_t v689;
  float64x2_t v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  float64x2_t v695;
  float64x2_t v696;
  float64x2_t v697;
  float64x2_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  float64x2_t v702;
  float64x2_t v703;
  float64x2_t v704;
  float64x2_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  float64x2_t v709;
  float64x2_t v710;
  float64x2_t v711;
  float64x2_t v712;
  float64x2_t v713;
  float64x2_t v714;
  float64x2_t v715;
  float64x2_t v716;
  float64x2_t v717;
  float64x2_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  float64x2_t v722;
  float64x2_t v723;
  float64x2_t v724;
  float64x2_t v725;
  float64x2_t v726;
  float64x2_t v727;
  float64x2_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  float64x2_t v732;
  float64x2_t v733;
  float64x2_t v734;
  float64x2_t v735;
  float64x2_t v736;
  float64x2_t v737;
  float64x2_t v738;
  float64x2_t v739;
  float64x2_t v740;
  float64x2_t v741;
  float64x2_t v742;
  float64x2_t v743;
  float64x2_t v744;
  float64x2_t v745;
  float64x2_t v746;
  float64x2_t v747;
  float64x2_t v748;
  float64x2_t v749;
  float64x2_t v750;
  float64x2_t v751;
  float64x2_t v752;
  float64x2_t v753;
  float64x2_t v754;
  float64x2_t v755;
  float64x2_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  float64x2_t v760;
  float64x2_t v761;
  float64x2_t v762;
  float64x2_t v763;
  float64x2_t v764;
  float64x2_t v765;
  float64x2_t v766;
  float64x2_t v767;
  float64x2_t v768;
  float64x2_t v769;
  float64x2_t v770;
  float64x2_t v771;
  float64x2_t v772;
  float64x2_t v773;
  float64x2_t v774;
  float64x2_t v775;
  float64x2_t v776;
  float64x2_t v777;
  float64x2_t v778;
  float64x2_t v779;
  float64x2_t v780;
  float64x2_t v781;
  float64x2_t v782;
  float64x2_t v783;
  float64x2_t v784;
  float64x2_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  float64x2_t v789;
  float64x2_t v790;
  float64x2_t v791;
  float64x2_t v792;
  float64x2_t v793;
  float64x2_t v794;
  float64x2_t v795;
  float64x2_t v796;
  float64x2_t v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t v800;
  float64x2_t v801;
  float64x2_t v802;
  float64x2_t v803;
  float64x2_t v804;
  float64x2_t v805;
  float64x2_t v806;
  float64x2_t v807;
  float64x2_t v808;
  float64x2_t v809;
  float64x2_t v810;
  float64x2_t v811;
  float64x2_t v812;
  float64x2_t v813;
  float64x2_t v814;
  float64x2_t v815;
  float64x2_t v816;
  float64x2_t v817;
  float64x2_t v818;
  float64x2_t v819;
  float64x2_t v820;
  float64x2_t v821;
  float64x2_t v822;
  float64x2_t v823;
  float64x2_t v824;
  float64x2_t v825;
  float64x2_t v826;
  float64x2_t v827;
  float64x2_t v828;
  float64x2_t v829;
  float64x2_t v830;
  float64x2_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  float64x2_t v835;
  float64x2_t v836;
  float64x2_t v837;
  float64x2_t v838;
  float64x2_t v839;
  float64x2_t v840;
  float64x2_t v841;
  float64x2_t v842;
  float64x2_t v843;
  float64x2_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  float64x2_t v849;
  float64x2_t v850;
  float64x2_t v851;
  float64x2_t v852;
  float64x2_t v853;
  float64x2_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  float64x2_t v858;
  float64x2_t v859;
  float64x2_t v860;
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  float64x2_t v866;
  float64x2_t v867;
  float64x2_t v868;
  float64x2_t v869;
  float64x2_t v870;
  float64x2_t v871;
  float64x2_t v872;
  float64x2_t v873;
  float64x2_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  float64x2_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  float64x2_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  float64x2_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  float64x2_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  float64x2_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  float64x2_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  float64x2_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  float64x2_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  float64x2_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  float64x2_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  float64x2_t v920;
  float64x2_t v921;
  float64x2_t v922;
  float64x2_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  float64x2_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  float64x2_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  float64x2_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  float64x2_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  float64x2_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  float64x2_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  float64x2_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  float64x2_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  float64x2_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  float64x2_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  float64x2_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  float64x2_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  float64x2_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  float64x2_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  float64x2_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  float64x2_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  float64x2_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  float64x2_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  float64x2_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  float64x2_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  float64x2_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  float64x2_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  float64x2_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  float64x2_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  float64x2_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  float64x2_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  float64x2_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  float64x2_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  float64x2_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  float64x2_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  float64x2_t v1059;
  float64x2_t v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  float64x2_t v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  float64x2_t v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  float64x2_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t __sz;
  float64x2_t __sza;
  float64x2_t __szb;
  float64x2_t __szc;
  float64x2_t __szd;
  float64x2_t v1082;
  float64x2_t v1083;
  float64x2_t v1084;
  float64x2_t v1085;
  float64x2_t *v1086;
  int64x2_t __src;
  uint64_t v1088;
  int v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  float64x2_t v1092;
  float64x2_t v1093;
  _BYTE v1094[80];
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  double v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  double v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  double v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  double v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  double v1119;
  float64x2_t v1120;
  float64x2_t v1121;
  float64x2_t v1122;
  float64x2_t v1123;
  double v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  double v1129;
  int64x2_t v1130;
  uint64_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  float64x2_t v1178;
  float64x2_t v1179;
  float64x2_t v1180;
  float64x2_t v1181;
  float64x2_t v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  float64x2_t v1187;
  float64x2_t v1188;
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  _QWORD v1258[2];
  int v1259;
  unsigned __int32 v1260;
  _DWORD v1261[2];
  float64x2_t *v1262;
  int64x2_t *p_src;
  uint64_t v1264;
  uint64_t v1265;

  v1 = (float64x2_t *)MEMORY[0x24BDAC7A8](a1);
  v3 = v2.f64[0];
  v5 = v4;
  v7 = v6.f64[0];
  v9 = (double *)v8;
  v11 = (double *)v10;
  v12 = v1;
  v1265 = *MEMORY[0x24BDAC8D0];
  sub_20F1F1B0C((uint64_t)v1, v10, v8, (uint64_t)&v1[27].f64[1], v1 + 32, v1[34].f64, &v1186, (char *)&v1132, &v1130, v6, v2);
  v13 = (float64x2_t *)operator new(0xA0uLL, (std::align_val_t)0x20uLL);
  v14 = *(float64x2_t *)((char *)v12 + 264);
  v15 = *(float64x2_t *)((char *)v12 + 280);
  *v13 = *(float64x2_t *)((char *)v12 + 248);
  v13[1] = v14;
  v16 = *(float64x2_t *)((char *)v12 + 296);
  v17 = *(float64x2_t *)((char *)v12 + 312);
  v13[2] = v15;
  v13[3] = v16;
  v18 = *(float64x2_t *)((char *)v12 + 328);
  v19 = *(float64x2_t *)((char *)v12 + 344);
  v13[4] = v17;
  v13[5] = v18;
  v20 = *(float64x2_t *)((char *)v12 + 360);
  v21 = *(float64x2_t *)((char *)v12 + 376);
  v13[6] = v19;
  v13[7] = v20;
  v13[8] = v21;
  v22 = (int64x2_t *)&v13->f64[LODWORD(v12[27].f64[0])];
  v23 = v1130;
  v22[1].i64[0] = v1131;
  *v22 = v23;
  v24 = *v9;
  v25 = v13[1];
  v1090 = *v13;
  v1091 = v25;
  v26 = v13[3];
  v1092 = v13[2];
  v1093 = v26;
  v27 = v13[5];
  *(float64x2_t *)v1094 = v13[4];
  *(float64x2_t *)&v1094[16] = v27;
  v28 = v13[7];
  *(float64x2_t *)&v1094[32] = v13[6];
  *(float64x2_t *)&v1094[48] = v28;
  v435 = v13;
  *(float64x2_t *)&v1094[64] = v13[8];
  sub_20F1F1160((uint64_t)&v12[15].f64[1], (uint64_t)&v1090);
  v12[25].f64[0] = v24;
  v29 = sqrt(vabdd_f64(*v9, *v11));
  v30 = v7 / v29;
  bzero(&v1090.f64[1], 0x278uLL);
  v31 = 0;
  v32 = 0;
  do
  {
    v1090.f64[v31] = 0.0;
    v33 = v32 < 2;
    if (v32 < 2)
      ++v32;
    else
      v32 = 0;
    if (v33)
      ++v31;
    else
      v31 += 7;
  }
  while (v31 != 27);
  v34 = 0;
  v35 = 0;
  v1090.f64[0] = v30 * v30;
  *(double *)&v1094[16] = v30 * v30;
  v1096.f64[0] = v30 * v30;
  do
  {
    v1101.f64[v34 + 1] = 0.0;
    v36 = v35 < 2;
    if (v35 < 2)
      ++v35;
    else
      v35 = 0;
    if (v36)
      ++v34;
    else
      v34 += 7;
  }
  while (v34 != 27);
  v37 = 0;
  v38 = 0;
  v1101.f64[1] = v29 * v5 * (v29 * v5);
  v1107.f64[0] = v1101.f64[1];
  v1112.f64[1] = v1101.f64[1];
  do
  {
    v1118.f64[v37] = 0.0;
    v39 = v38 < 2;
    if (v38 < 2)
      ++v38;
    else
      v38 = 0;
    if (v39)
      ++v37;
    else
      v37 += 7;
  }
  while (v37 != 27);
  v1118.f64[0] = v29 * v3 * (v29 * v3);
  v1123.f64[1] = v1118.f64[0];
  v1129 = v1118.f64[0];
  v40 = *(float64x2_t **)&v12[14].f64[0];
  v41 = v40[1];
  v42 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v40->f64[0]), v1192, *v40, 1), v1198, v41.f64[0]), v1204, v41, 1);
  v43 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v40->f64[0]), v1193, *v40, 1), v1199, v41.f64[0]), v1205, v41, 1);
  v44 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v40->f64[0]), v1194, *v40, 1), v1200, v41.f64[0]), v1206, v41, 1);
  v45 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v40->f64[0]), v1195, *v40, 1), v1201, v41.f64[0]), v1207, v41, 1);
  v46 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v40->f64[0]), v1196, *v40, 1), v1202, v41.f64[0]), v1208, v41, 1);
  v47 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v40->f64[0]), v1197, *v40, 1), v1203, v41.f64[0]), v1209, v41, 1);
  v48 = v40[2];
  v49 = vmlaq_laneq_f64(vmlaq_n_f64(v42, v1210, v48.f64[0]), v1216, v48, 1);
  v50 = vmlaq_laneq_f64(vmlaq_n_f64(v43, v1211, v48.f64[0]), v1217, v48, 1);
  v51 = vmlaq_laneq_f64(vmlaq_n_f64(v44, v1212, v48.f64[0]), v1218, v48, 1);
  v52 = vmlaq_laneq_f64(vmlaq_n_f64(v45, v1213, v48.f64[0]), v1219, v48, 1);
  v53 = vmlaq_laneq_f64(vmlaq_n_f64(v46, v1214, v48.f64[0]), v1220, v48, 1);
  v54 = vmlaq_laneq_f64(vmlaq_n_f64(v47, v1215, v48.f64[0]), v1221, v48, 1);
  v55 = v40[3];
  v56 = vmlaq_laneq_f64(vmlaq_n_f64(v49, v1222, v55.f64[0]), v1228, v55, 1);
  v57 = vmlaq_laneq_f64(vmlaq_n_f64(v50, v1223, v55.f64[0]), v1229, v55, 1);
  v58 = vmlaq_laneq_f64(vmlaq_n_f64(v51, v1224, v55.f64[0]), v1230, v55, 1);
  v59 = vmlaq_laneq_f64(vmlaq_n_f64(v52, v1225, v55.f64[0]), v1231, v55, 1);
  v60 = vmlaq_laneq_f64(vmlaq_n_f64(v53, v1226, v55.f64[0]), v1232, v55, 1);
  v61 = vmlaq_laneq_f64(vmlaq_n_f64(v54, v1227, v55.f64[0]), v1233, v55, 1);
  v62 = v40[4];
  v63 = vmlaq_laneq_f64(vmlaq_n_f64(v56, v1234, v62.f64[0]), v1240, v62, 1);
  v64 = vmlaq_laneq_f64(vmlaq_n_f64(v57, v1235, v62.f64[0]), v1241, v62, 1);
  v65 = vmlaq_laneq_f64(vmlaq_n_f64(v58, v1236, v62.f64[0]), v1242, v62, 1);
  v66 = vmlaq_laneq_f64(vmlaq_n_f64(v59, v1237, v62.f64[0]), v1243, v62, 1);
  v67 = vmlaq_laneq_f64(vmlaq_n_f64(v60, v1238, v62.f64[0]), v1244, v62, 1);
  v68 = vmlaq_laneq_f64(vmlaq_n_f64(v61, v1239, v62.f64[0]), v1245, v62, 1);
  v69 = v40[5];
  v965 = vmlaq_laneq_f64(vmlaq_n_f64(v63, v1246, v69.f64[0]), v1252, v69, 1);
  v948 = vmlaq_laneq_f64(vmlaq_n_f64(v64, v1247, v69.f64[0]), v1253, v69, 1);
  v764 = vmlaq_laneq_f64(vmlaq_n_f64(v65, v1248, v69.f64[0]), v1254, v69, 1);
  v845 = vmlaq_laneq_f64(vmlaq_n_f64(v66, v1249, v69.f64[0]), v1255, v69, 1);
  v910 = vmlaq_laneq_f64(vmlaq_n_f64(v67, v1250, v69.f64[0]), v1256, v69, 1);
  v904 = vmlaq_laneq_f64(vmlaq_n_f64(v68, v1251, v69.f64[0]), v1257, v69, 1);
  v70 = LODWORD(v12[15].f64[0]);
  v71 = (float64x2_t *)((char *)v40 + 8 * v70);
  v72 = v71[1];
  v73 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v71->f64[0]), v1192, *v71, 1), v1198, v72.f64[0]), v1204, v72, 1);
  v74 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v71->f64[0]), v1193, *v71, 1), v1199, v72.f64[0]), v1205, v72, 1);
  v75 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v71->f64[0]), v1194, *v71, 1), v1200, v72.f64[0]), v1206, v72, 1);
  v76 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v71->f64[0]), v1195, *v71, 1), v1201, v72.f64[0]), v1207, v72, 1);
  v77 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v71->f64[0]), v1196, *v71, 1), v1202, v72.f64[0]), v1208, v72, 1);
  v78 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v71->f64[0]), v1197, *v71, 1), v1203, v72.f64[0]), v1209, v72, 1);
  v79 = v71[2];
  v80 = vmlaq_laneq_f64(vmlaq_n_f64(v73, v1210, v79.f64[0]), v1216, v79, 1);
  v81 = vmlaq_laneq_f64(vmlaq_n_f64(v74, v1211, v79.f64[0]), v1217, v79, 1);
  v82 = vmlaq_laneq_f64(vmlaq_n_f64(v75, v1212, v79.f64[0]), v1218, v79, 1);
  v83 = vmlaq_laneq_f64(vmlaq_n_f64(v76, v1213, v79.f64[0]), v1219, v79, 1);
  v84 = vmlaq_laneq_f64(vmlaq_n_f64(v77, v1214, v79.f64[0]), v1220, v79, 1);
  v85 = vmlaq_laneq_f64(vmlaq_n_f64(v78, v1215, v79.f64[0]), v1221, v79, 1);
  v86 = v71[3];
  v87 = vmlaq_laneq_f64(vmlaq_n_f64(v80, v1222, v86.f64[0]), v1228, v86, 1);
  v88 = vmlaq_laneq_f64(vmlaq_n_f64(v81, v1223, v86.f64[0]), v1229, v86, 1);
  v89 = vmlaq_laneq_f64(vmlaq_n_f64(v82, v1224, v86.f64[0]), v1230, v86, 1);
  v90 = vmlaq_laneq_f64(vmlaq_n_f64(v83, v1225, v86.f64[0]), v1231, v86, 1);
  v91 = vmlaq_laneq_f64(vmlaq_n_f64(v84, v1226, v86.f64[0]), v1232, v86, 1);
  v92 = vmlaq_laneq_f64(vmlaq_n_f64(v85, v1227, v86.f64[0]), v1233, v86, 1);
  v93 = v71[4];
  v94 = vmlaq_laneq_f64(vmlaq_n_f64(v87, v1234, v93.f64[0]), v1240, v93, 1);
  v95 = vmlaq_laneq_f64(vmlaq_n_f64(v88, v1235, v93.f64[0]), v1241, v93, 1);
  v96 = vmlaq_laneq_f64(vmlaq_n_f64(v89, v1236, v93.f64[0]), v1242, v93, 1);
  v97 = vmlaq_laneq_f64(vmlaq_n_f64(v90, v1237, v93.f64[0]), v1243, v93, 1);
  v98 = vmlaq_laneq_f64(vmlaq_n_f64(v91, v1238, v93.f64[0]), v1244, v93, 1);
  v99 = vmlaq_laneq_f64(vmlaq_n_f64(v92, v1239, v93.f64[0]), v1245, v93, 1);
  v100 = v71[5];
  v101 = vmlaq_laneq_f64(vmlaq_n_f64(v94, v1246, v100.f64[0]), v1252, v100, 1);
  v102 = vmlaq_laneq_f64(vmlaq_n_f64(v95, v1247, v100.f64[0]), v1253, v100, 1);
  v103 = vmlaq_laneq_f64(vmlaq_n_f64(v96, v1248, v100.f64[0]), v1254, v100, 1);
  v104 = vmlaq_laneq_f64(vmlaq_n_f64(v97, v1249, v100.f64[0]), v1255, v100, 1);
  v105 = vmlaq_laneq_f64(vmlaq_n_f64(v98, v1250, v100.f64[0]), v1256, v100, 1);
  v106 = vmlaq_laneq_f64(vmlaq_n_f64(v99, v1251, v100.f64[0]), v1257, v100, 1);
  v107 = &v40[v70];
  v108 = (float64x2_t *)((char *)v40 + 24 * v70);
  v109 = &v40[2 * v70];
  v110 = (float64x2_t *)((char *)v40 + 40 * v70);
  v111 = &v40[3 * v70];
  v112 = (float64x2_t *)((char *)v40 + 56 * v70);
  v113 = &v40[4 * v70];
  v114 = (float64x2_t *)((char *)v40 + 72 * v70);
  v115 = &v40[5 * v70];
  v116 = (float64x2_t *)((char *)v40 + 88 * v70);
  v980 = vmlaq_n_f64(vmulq_n_f64(v965, v1186.f64[0]), v101, v1192.f64[0]);
  v1082 = vmlaq_n_f64(vmulq_n_f64(v948, v1186.f64[0]), v102, v1192.f64[0]);
  v892 = vmlaq_n_f64(vmulq_n_f64(v764, v1186.f64[0]), v103, v1192.f64[0]);
  v988 = vmlaq_n_f64(vmulq_n_f64(v845, v1186.f64[0]), v104, v1192.f64[0]);
  v985 = vmlaq_n_f64(vmulq_n_f64(v910, v1186.f64[0]), v105, v1192.f64[0]);
  v885 = vmlaq_n_f64(vmulq_n_f64(v904, v1186.f64[0]), v106, v1192.f64[0]);
  v976 = vmlaq_laneq_f64(vmulq_laneq_f64(v965, v1186, 1), v101, v1192, 1);
  v835 = vmlaq_laneq_f64(vmulq_laneq_f64(v948, v1186, 1), v102, v1192, 1);
  v823 = vmlaq_laneq_f64(vmulq_laneq_f64(v764, v1186, 1), v103, v1192, 1);
  v957 = vmlaq_laneq_f64(vmulq_laneq_f64(v845, v1186, 1), v104, v1192, 1);
  v820 = vmlaq_laneq_f64(vmulq_laneq_f64(v910, v1186, 1), v105, v1192, 1);
  __sz = vmlaq_laneq_f64(vmulq_laneq_f64(v904, v1186, 1), v106, v1192, 1);
  v797 = vmlaq_n_f64(vmulq_n_f64(v965, v1187.f64[0]), v101, v1193.f64[0]);
  v794 = vmlaq_n_f64(vmulq_n_f64(v948, v1187.f64[0]), v102, v1193.f64[0]);
  v783 = vmlaq_n_f64(vmulq_n_f64(v764, v1187.f64[0]), v103, v1193.f64[0]);
  v831 = vmlaq_n_f64(vmulq_n_f64(v845, v1187.f64[0]), v104, v1193.f64[0]);
  v889 = vmlaq_n_f64(vmulq_n_f64(v910, v1187.f64[0]), v105, v1193.f64[0]);
  v936 = vmlaq_n_f64(vmulq_n_f64(v904, v1187.f64[0]), v106, v1193.f64[0]);
  v808 = vmlaq_laneq_f64(vmulq_laneq_f64(v965, v1187, 1), v101, v1193, 1);
  v804 = vmlaq_laneq_f64(vmulq_laneq_f64(v948, v1187, 1), v102, v1193, 1);
  v790 = vmlaq_laneq_f64(vmulq_laneq_f64(v764, v1187, 1), v103, v1193, 1);
  v787 = vmlaq_laneq_f64(vmulq_laneq_f64(v845, v1187, 1), v104, v1193, 1);
  v827 = vmlaq_laneq_f64(vmulq_laneq_f64(v910, v1187, 1), v105, v1193, 1);
  v779 = vmlaq_laneq_f64(vmulq_laneq_f64(v904, v1187, 1), v106, v1193, 1);
  v816 = vmlaq_n_f64(vmulq_n_f64(v965, v1188.f64[0]), v101, v1194.f64[0]);
  v812 = vmlaq_n_f64(vmulq_n_f64(v948, v1188.f64[0]), v102, v1194.f64[0]);
  v800 = vmlaq_n_f64(vmulq_n_f64(v764, v1188.f64[0]), v103, v1194.f64[0]);
  v944 = vmlaq_n_f64(vmulq_n_f64(v845, v1188.f64[0]), v104, v1194.f64[0]);
  v941 = vmlaq_n_f64(vmulq_n_f64(v910, v1188.f64[0]), v105, v1194.f64[0]);
  v1052 = vmlaq_n_f64(vmulq_n_f64(v904, v1188.f64[0]), v106, v1194.f64[0]);
  v953 = vmlaq_laneq_f64(vmulq_laneq_f64(v965, v1188, 1), v101, v1194, 1);
  v1072 = vmlaq_laneq_f64(vmulq_laneq_f64(v948, v1188, 1), v102, v1194, 1);
  v1067 = vmlaq_laneq_f64(vmulq_laneq_f64(v764, v1188, 1), v103, v1194, 1);
  v850 = vmlaq_laneq_f64(vmulq_laneq_f64(v845, v1188, 1), v104, v1194, 1);
  v900 = vmlaq_laneq_f64(vmulq_laneq_f64(v910, v1188, 1), v105, v1194, 1);
  v896 = vmlaq_laneq_f64(vmulq_laneq_f64(v904, v1188, 1), v106, v1194, 1);
  v873 = vmlaq_n_f64(vmulq_n_f64(v965, v1189.f64[0]), v101, v1195.f64[0]);
  v868 = vmlaq_n_f64(vmulq_n_f64(v948, v1189.f64[0]), v102, v1195.f64[0]);
  v858 = vmlaq_n_f64(vmulq_n_f64(v764, v1189.f64[0]), v103, v1195.f64[0]);
  v854 = vmlaq_n_f64(vmulq_n_f64(v845, v1189.f64[0]), v104, v1195.f64[0]);
  v1049 = vmlaq_n_f64(vmulq_n_f64(v910, v1189.f64[0]), v105, v1195.f64[0]);
  v931 = vmlaq_n_f64(vmulq_n_f64(v904, v1189.f64[0]), v106, v1195.f64[0]);
  v839 = vmlaq_laneq_f64(vmulq_laneq_f64(v965, v1189, 1), v101, v1195, 1);
  v881 = vmlaq_laneq_f64(vmulq_laneq_f64(v948, v1189, 1), v102, v1195, 1);
  v1015 = vmlaq_laneq_f64(vmulq_laneq_f64(v764, v1189, 1), v103, v1195, 1);
  v878 = vmlaq_laneq_f64(vmulq_laneq_f64(v845, v1189, 1), v104, v1195, 1);
  v992 = vmlaq_laneq_f64(vmulq_laneq_f64(v910, v1189, 1), v105, v1195, 1);
  v863 = vmlaq_laneq_f64(vmulq_laneq_f64(v904, v1189, 1), v106, v1195, 1);
  v996 = vmlaq_n_f64(vmulq_n_f64(v965, v1190.f64[0]), v101, v1196.f64[0]);
  v1025 = vmlaq_n_f64(vmulq_n_f64(v948, v1190.f64[0]), v102, v1196.f64[0]);
  v1011 = vmlaq_n_f64(vmulq_n_f64(v764, v1190.f64[0]), v103, v1196.f64[0]);
  v1008 = vmlaq_n_f64(vmulq_n_f64(v845, v1190.f64[0]), v104, v1196.f64[0]);
  v1005 = vmlaq_n_f64(vmulq_n_f64(v910, v1190.f64[0]), v105, v1196.f64[0]);
  v1001 = vmlaq_n_f64(vmulq_n_f64(v904, v1190.f64[0]), v106, v1196.f64[0]);
  v1061 = vmlaq_laneq_f64(vmulq_laneq_f64(v965, v1190, 1), v101, v1196, 1);
  v961 = vmlaq_laneq_f64(vmulq_laneq_f64(v948, v1190, 1), v102, v1196, 1);
  v1056 = vmlaq_laneq_f64(vmulq_laneq_f64(v764, v1190, 1), v103, v1196, 1);
  v971 = vmlaq_laneq_f64(vmulq_laneq_f64(v845, v1190, 1), v104, v1196, 1);
  v1045 = vmlaq_laneq_f64(vmulq_laneq_f64(v910, v1190, 1), v105, v1196, 1);
  v915 = vmlaq_laneq_f64(vmulq_laneq_f64(v904, v1190, 1), v106, v1196, 1);
  v1019 = vmlaq_n_f64(vmulq_n_f64(v965, v1191.f64[0]), v101, v1197.f64[0]);
  v925 = vmlaq_laneq_f64(vmulq_laneq_f64(v965, v1191, 1), v101, v1197, 1);
  v966 = vmlaq_n_f64(vmulq_n_f64(v948, v1191.f64[0]), v102, v1197.f64[0]);
  v949 = vmlaq_laneq_f64(vmulq_laneq_f64(v948, v1191, 1), v102, v1197, 1);
  v1040 = vmlaq_n_f64(vmulq_n_f64(v764, v1191.f64[0]), v103, v1197.f64[0]);
  v1035 = vmlaq_laneq_f64(vmulq_laneq_f64(v764, v1191, 1), v103, v1197, 1);
  v1030 = vmlaq_n_f64(vmulq_n_f64(v845, v1191.f64[0]), v104, v1197.f64[0]);
  v846 = vmlaq_laneq_f64(vmulq_laneq_f64(v845, v1191, 1), v104, v1197, 1);
  v765 = vmlaq_n_f64(vmulq_n_f64(v910, v1191.f64[0]), v105, v1197.f64[0]);
  v911 = vmlaq_laneq_f64(vmulq_laneq_f64(v910, v1191, 1), v105, v1197, 1);
  v117 = vmulq_laneq_f64(v904, v1191, 1);
  v905 = vmlaq_n_f64(vmulq_n_f64(v904, v1191.f64[0]), v106, v1197.f64[0]);
  v920 = vmlaq_laneq_f64(v117, v106, v1197, 1);
  v118 = v107[1];
  v119 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v107->f64[0]), v1192, *v107, 1), v1198, v118.f64[0]), v1204, v118, 1);
  v120 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v107->f64[0]), v1193, *v107, 1), v1199, v118.f64[0]), v1205, v118, 1);
  v121 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v107->f64[0]), v1194, *v107, 1), v1200, v118.f64[0]), v1206, v118, 1);
  v122 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v107->f64[0]), v1195, *v107, 1), v1201, v118.f64[0]), v1207, v118, 1);
  v123 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v107->f64[0]), v1196, *v107, 1), v1202, v118.f64[0]), v1208, v118, 1);
  v124 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v107->f64[0]), v1197, *v107, 1), v1203, v118.f64[0]), v1209, v118, 1);
  v125 = v107[2];
  v126 = vmlaq_laneq_f64(vmlaq_n_f64(v119, v1210, v125.f64[0]), v1216, v125, 1);
  v127 = vmlaq_laneq_f64(vmlaq_n_f64(v120, v1211, v125.f64[0]), v1217, v125, 1);
  v128 = vmlaq_laneq_f64(vmlaq_n_f64(v121, v1212, v125.f64[0]), v1218, v125, 1);
  v129 = vmlaq_laneq_f64(vmlaq_n_f64(v122, v1213, v125.f64[0]), v1219, v125, 1);
  v130 = vmlaq_laneq_f64(vmlaq_n_f64(v123, v1214, v125.f64[0]), v1220, v125, 1);
  v131 = vmlaq_laneq_f64(vmlaq_n_f64(v124, v1215, v125.f64[0]), v1221, v125, 1);
  v132 = v107[3];
  v133 = vmlaq_laneq_f64(vmlaq_n_f64(v126, v1222, v132.f64[0]), v1228, v132, 1);
  v134 = vmlaq_laneq_f64(vmlaq_n_f64(v127, v1223, v132.f64[0]), v1229, v132, 1);
  v135 = vmlaq_laneq_f64(vmlaq_n_f64(v128, v1224, v132.f64[0]), v1230, v132, 1);
  v136 = vmlaq_laneq_f64(vmlaq_n_f64(v129, v1225, v132.f64[0]), v1231, v132, 1);
  v137 = vmlaq_laneq_f64(vmlaq_n_f64(v130, v1226, v132.f64[0]), v1232, v132, 1);
  v138 = vmlaq_laneq_f64(vmlaq_n_f64(v131, v1227, v132.f64[0]), v1233, v132, 1);
  v139 = v107[4];
  v140 = vmlaq_laneq_f64(vmlaq_n_f64(v133, v1234, v139.f64[0]), v1240, v139, 1);
  v141 = vmlaq_laneq_f64(vmlaq_n_f64(v134, v1235, v139.f64[0]), v1241, v139, 1);
  v142 = vmlaq_laneq_f64(vmlaq_n_f64(v135, v1236, v139.f64[0]), v1242, v139, 1);
  v143 = vmlaq_laneq_f64(vmlaq_n_f64(v136, v1237, v139.f64[0]), v1243, v139, 1);
  v144 = vmlaq_laneq_f64(vmlaq_n_f64(v137, v1238, v139.f64[0]), v1244, v139, 1);
  v145 = vmlaq_laneq_f64(vmlaq_n_f64(v138, v1239, v139.f64[0]), v1245, v139, 1);
  v146 = v107[5];
  v454 = vmlaq_laneq_f64(vmlaq_n_f64(v140, v1246, v146.f64[0]), v1252, v146, 1);
  v147 = vmlaq_laneq_f64(vmlaq_n_f64(v141, v1247, v146.f64[0]), v1253, v146, 1);
  v148 = vmlaq_laneq_f64(vmlaq_n_f64(v142, v1248, v146.f64[0]), v1254, v146, 1);
  v149 = vmlaq_laneq_f64(vmlaq_n_f64(v143, v1249, v146.f64[0]), v1255, v146, 1);
  v448 = vmlaq_laneq_f64(vmlaq_n_f64(v145, v1251, v146.f64[0]), v1257, v146, 1);
  v450 = vmlaq_laneq_f64(vmlaq_n_f64(v144, v1250, v146.f64[0]), v1256, v146, 1);
  v150 = v108[1];
  v151 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v108->f64[0]), v1192, *v108, 1), v1198, v150.f64[0]), v1204, v150, 1);
  v152 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v108->f64[0]), v1193, *v108, 1), v1199, v150.f64[0]), v1205, v150, 1);
  v153 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v108->f64[0]), v1194, *v108, 1), v1200, v150.f64[0]), v1206, v150, 1);
  v154 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v108->f64[0]), v1195, *v108, 1), v1201, v150.f64[0]), v1207, v150, 1);
  v155 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v108->f64[0]), v1196, *v108, 1), v1202, v150.f64[0]), v1208, v150, 1);
  v156 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v108->f64[0]), v1197, *v108, 1), v1203, v150.f64[0]), v1209, v150, 1);
  v157 = v108[2];
  v158 = vmlaq_laneq_f64(vmlaq_n_f64(v151, v1210, v157.f64[0]), v1216, v157, 1);
  v159 = vmlaq_laneq_f64(vmlaq_n_f64(v152, v1211, v157.f64[0]), v1217, v157, 1);
  v160 = vmlaq_laneq_f64(vmlaq_n_f64(v153, v1212, v157.f64[0]), v1218, v157, 1);
  v161 = vmlaq_laneq_f64(vmlaq_n_f64(v154, v1213, v157.f64[0]), v1219, v157, 1);
  v162 = vmlaq_laneq_f64(vmlaq_n_f64(v155, v1214, v157.f64[0]), v1220, v157, 1);
  v163 = vmlaq_laneq_f64(vmlaq_n_f64(v156, v1215, v157.f64[0]), v1221, v157, 1);
  v164 = v108[3];
  v165 = vmlaq_laneq_f64(vmlaq_n_f64(v158, v1222, v164.f64[0]), v1228, v164, 1);
  v166 = vmlaq_laneq_f64(vmlaq_n_f64(v159, v1223, v164.f64[0]), v1229, v164, 1);
  v167 = vmlaq_laneq_f64(vmlaq_n_f64(v160, v1224, v164.f64[0]), v1230, v164, 1);
  v168 = vmlaq_laneq_f64(vmlaq_n_f64(v161, v1225, v164.f64[0]), v1231, v164, 1);
  v169 = vmlaq_laneq_f64(vmlaq_n_f64(v162, v1226, v164.f64[0]), v1232, v164, 1);
  v170 = vmlaq_laneq_f64(vmlaq_n_f64(v163, v1227, v164.f64[0]), v1233, v164, 1);
  v171 = v108[4];
  v172 = vmlaq_laneq_f64(vmlaq_n_f64(v165, v1234, v171.f64[0]), v1240, v171, 1);
  v173 = vmlaq_laneq_f64(vmlaq_n_f64(v166, v1235, v171.f64[0]), v1241, v171, 1);
  v174 = vmlaq_laneq_f64(vmlaq_n_f64(v167, v1236, v171.f64[0]), v1242, v171, 1);
  v175 = vmlaq_laneq_f64(vmlaq_n_f64(v168, v1237, v171.f64[0]), v1243, v171, 1);
  v176 = vmlaq_laneq_f64(vmlaq_n_f64(v169, v1238, v171.f64[0]), v1244, v171, 1);
  v177 = vmlaq_laneq_f64(vmlaq_n_f64(v170, v1239, v171.f64[0]), v1245, v171, 1);
  v178 = v108[5];
  v179 = vmlaq_laneq_f64(vmlaq_n_f64(v172, v1246, v178.f64[0]), v1252, v178, 1);
  v465 = vmlaq_laneq_f64(vmlaq_n_f64(v173, v1247, v178.f64[0]), v1253, v178, 1);
  v180 = vmlaq_laneq_f64(vmlaq_n_f64(v174, v1248, v178.f64[0]), v1254, v178, 1);
  v181 = vmlaq_laneq_f64(vmlaq_n_f64(v175, v1249, v178.f64[0]), v1255, v178, 1);
  v459 = vmlaq_laneq_f64(vmlaq_n_f64(v177, v1251, v178.f64[0]), v1257, v178, 1);
  v461 = vmlaq_laneq_f64(vmlaq_n_f64(v176, v1250, v178.f64[0]), v1256, v178, 1);
  v182 = v109[1];
  v463 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v109->f64[0]), v1192, *v109, 1), v1198, v182.f64[0]), v1204, v182, 1);
  v506 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v109->f64[0]), v1193, *v109, 1), v1199, v182.f64[0]), v1205, v182, 1);
  v504 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v109->f64[0]), v1194, *v109, 1), v1200, v182.f64[0]), v1206, v182, 1);
  v502 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v109->f64[0]), v1195, *v109, 1), v1201, v182.f64[0]), v1207, v182, 1);
  v499 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v109->f64[0]), v1196, *v109, 1), v1202, v182.f64[0]), v1208, v182, 1);
  v496 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v109->f64[0]), v1197, *v109, 1), v1203, v182.f64[0]), v1209, v182, 1);
  v183 = v110[1];
  v493 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v110->f64[0]), v1192, *v110, 1), v1198, v183.f64[0]), v1204, v183, 1);
  v491 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v110->f64[0]), v1193, *v110, 1), v1199, v183.f64[0]), v1205, v183, 1);
  v489 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v110->f64[0]), v1194, *v110, 1), v1200, v183.f64[0]), v1206, v183, 1);
  v457 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v110->f64[0]), v1195, *v110, 1), v1201, v183.f64[0]), v1207, v183, 1);
  v487 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v110->f64[0]), v1196, *v110, 1), v1202, v183.f64[0]), v1208, v183, 1);
  v485 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v110->f64[0]), v1197, *v110, 1), v1203, v183.f64[0]), v1209, v183, 1);
  v184 = v111[1];
  v590 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v111->f64[0]), v1192, *v111, 1), v1198, v184.f64[0]), v1204, v184, 1);
  v482 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v111->f64[0]), v1193, *v111, 1), v1199, v184.f64[0]), v1205, v184, 1);
  v479 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v111->f64[0]), v1194, *v111, 1), v1200, v184.f64[0]), v1206, v184, 1);
  v474 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v111->f64[0]), v1195, *v111, 1), v1201, v184.f64[0]), v1207, v184, 1);
  v476 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v111->f64[0]), v1196, *v111, 1), v1202, v184.f64[0]), v1208, v184, 1);
  v472 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v111->f64[0]), v1197, *v111, 1), v1203, v184.f64[0]), v1209, v184, 1);
  v185 = v112[1];
  v585 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v112->f64[0]), v1192, *v112, 1), v1198, v185.f64[0]), v1204, v185, 1);
  v581 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v112->f64[0]), v1193, *v112, 1), v1199, v185.f64[0]), v1205, v185, 1);
  v577 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v112->f64[0]), v1194, *v112, 1), v1200, v185.f64[0]), v1206, v185, 1);
  v573 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v112->f64[0]), v1195, *v112, 1), v1201, v185.f64[0]), v1207, v185, 1);
  v568 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v112->f64[0]), v1196, *v112, 1), v1202, v185.f64[0]), v1208, v185, 1);
  v564 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v112->f64[0]), v1197, *v112, 1), v1203, v185.f64[0]), v1209, v185, 1);
  v186 = v113[1];
  v729 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v113->f64[0]), v1192, *v113, 1), v1198, v186.f64[0]), v1204, v186, 1);
  v722 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v113->f64[0]), v1193, *v113, 1), v1199, v186.f64[0]), v1205, v186, 1);
  v716 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v113->f64[0]), v1194, *v113, 1), v1200, v186.f64[0]), v1206, v186, 1);
  v559 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v113->f64[0]), v1195, *v113, 1), v1201, v186.f64[0]), v1207, v186, 1);
  v710 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v113->f64[0]), v1196, *v113, 1), v1202, v186.f64[0]), v1208, v186, 1);
  v705 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v113->f64[0]), v1197, *v113, 1), v1203, v186.f64[0]), v1209, v186, 1);
  v187 = v114[1];
  v699 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v114->f64[0]), v1192, *v114, 1), v1198, v187.f64[0]), v1204, v187, 1);
  v694 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v114->f64[0]), v1193, *v114, 1), v1199, v187.f64[0]), v1205, v187, 1);
  v689 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v114->f64[0]), v1194, *v114, 1), v1200, v187.f64[0]), v1206, v187, 1);
  v681 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v114->f64[0]), v1195, *v114, 1), v1201, v187.f64[0]), v1207, v187, 1);
  v675 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v114->f64[0]), v1196, *v114, 1), v1202, v187.f64[0]), v1208, v187, 1);
  v553 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v114->f64[0]), v1197, *v114, 1), v1203, v187.f64[0]), v1209, v187, 1);
  v188 = v115[1];
  v668 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v115->f64[0]), v1192, *v115, 1), v1198, v188.f64[0]), v1204, v188, 1);
  v661 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v115->f64[0]), v1193, *v115, 1), v1199, v188.f64[0]), v1205, v188, 1);
  v654 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v115->f64[0]), v1194, *v115, 1), v1200, v188.f64[0]), v1206, v188, 1);
  v648 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v115->f64[0]), v1195, *v115, 1), v1201, v188.f64[0]), v1207, v188, 1);
  v642 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v115->f64[0]), v1196, *v115, 1), v1202, v188.f64[0]), v1208, v188, 1);
  v636 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v115->f64[0]), v1197, *v115, 1), v1203, v188.f64[0]), v1209, v188, 1);
  v189 = v116[1];
  v774 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1186, v116->f64[0]), v1192, *v116, 1), v1198, v189.f64[0]), v1204, v189, 1);
  v758 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1187, v116->f64[0]), v1193, *v116, 1), v1199, v189.f64[0]), v1205, v189, 1);
  v769 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1188, v116->f64[0]), v1194, *v116, 1), v1200, v189.f64[0]), v1206, v189, 1);
  v190 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1189, v116->f64[0]), v1195, *v116, 1), v1201, v189.f64[0]), v1207, v189, 1);
  v752 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1190, v116->f64[0]), v1196, *v116, 1), v1202, v189.f64[0]), v1208, v189, 1);
  v631 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1191, v116->f64[0]), v1197, *v116, 1), v1203, v189.f64[0]), v1209, v189, 1);
  v981 = vmlaq_n_f64(vmlaq_n_f64(v980, v454, v1198.f64[0]), v179, v1204.f64[0]);
  v893 = vmlaq_n_f64(vmlaq_n_f64(v892, v148, v1198.f64[0]), v180, v1204.f64[0]);
  v977 = vmlaq_laneq_f64(vmlaq_laneq_f64(v976, v454, v1198, 1), v179, v1204, 1);
  v824 = vmlaq_laneq_f64(vmlaq_laneq_f64(v823, v148, v1198, 1), v180, v1204, 1);
  v191 = vmlaq_n_f64(vmlaq_n_f64(v797, v454, v1199.f64[0]), v179, v1205.f64[0]);
  v192 = vmlaq_n_f64(vmlaq_n_f64(v783, v148, v1199.f64[0]), v180, v1205.f64[0]);
  v809 = vmlaq_laneq_f64(vmlaq_laneq_f64(v808, v454, v1199, 1), v179, v1205, 1);
  v791 = vmlaq_laneq_f64(vmlaq_laneq_f64(v790, v148, v1199, 1), v180, v1205, 1);
  v817 = vmlaq_n_f64(vmlaq_n_f64(v816, v454, v1200.f64[0]), v179, v1206.f64[0]);
  v801 = vmlaq_n_f64(vmlaq_n_f64(v800, v148, v1200.f64[0]), v180, v1206.f64[0]);
  v954 = vmlaq_laneq_f64(vmlaq_laneq_f64(v953, v454, v1200, 1), v179, v1206, 1);
  v1068 = vmlaq_laneq_f64(vmlaq_laneq_f64(v1067, v148, v1200, 1), v180, v1206, 1);
  v874 = vmlaq_n_f64(vmlaq_n_f64(v873, v454, v1201.f64[0]), v179, v1207.f64[0]);
  v859 = vmlaq_n_f64(vmlaq_n_f64(v858, v148, v1201.f64[0]), v180, v1207.f64[0]);
  v840 = vmlaq_laneq_f64(vmlaq_laneq_f64(v839, v454, v1201, 1), v179, v1207, 1);
  v1016 = vmlaq_laneq_f64(vmlaq_laneq_f64(v1015, v148, v1201, 1), v180, v1207, 1);
  v997 = vmlaq_n_f64(vmlaq_n_f64(v996, v454, v1202.f64[0]), v179, v1208.f64[0]);
  v1012 = vmlaq_n_f64(vmlaq_n_f64(v1011, v148, v1202.f64[0]), v180, v1208.f64[0]);
  v1062 = vmlaq_laneq_f64(vmlaq_laneq_f64(v1061, v454, v1202, 1), v179, v1208, 1);
  v1057 = vmlaq_laneq_f64(vmlaq_laneq_f64(v1056, v148, v1202, 1), v180, v1208, 1);
  v972 = vmlaq_laneq_f64(vmlaq_laneq_f64(v971, v149, v1202, 1), v181, v1208, 1);
  v1020 = vmlaq_n_f64(vmlaq_n_f64(v1019, v454, v1203.f64[0]), v179, v1209.f64[0]);
  v926 = vmlaq_laneq_f64(vmlaq_laneq_f64(v925, v454, v1203, 1), v179, v1209, 1);
  v1041 = vmlaq_n_f64(vmlaq_n_f64(v1040, v148, v1203.f64[0]), v180, v1209.f64[0]);
  v1036 = vmlaq_laneq_f64(vmlaq_laneq_f64(v1035, v148, v1203, 1), v180, v1209, 1);
  v193 = v109[2];
  v194 = vmlaq_laneq_f64(vmlaq_n_f64(v463, v1210, v193.f64[0]), v1216, v193, 1);
  v195 = vmlaq_laneq_f64(vmlaq_n_f64(v506, v1211, v193.f64[0]), v1217, v193, 1);
  v196 = vmlaq_laneq_f64(vmlaq_n_f64(v504, v1212, v193.f64[0]), v1218, v193, 1);
  v197 = vmlaq_laneq_f64(vmlaq_n_f64(v502, v1213, v193.f64[0]), v1219, v193, 1);
  v198 = vmlaq_laneq_f64(vmlaq_n_f64(v499, v1214, v193.f64[0]), v1220, v193, 1);
  v199 = vmlaq_laneq_f64(vmlaq_n_f64(v496, v1215, v193.f64[0]), v1221, v193, 1);
  v200 = v109[3];
  v201 = vmlaq_laneq_f64(vmlaq_n_f64(v194, v1222, v200.f64[0]), v1228, v200, 1);
  v202 = vmlaq_laneq_f64(vmlaq_n_f64(v195, v1223, v200.f64[0]), v1229, v200, 1);
  v203 = vmlaq_laneq_f64(vmlaq_n_f64(v196, v1224, v200.f64[0]), v1230, v200, 1);
  v204 = vmlaq_laneq_f64(vmlaq_n_f64(v197, v1225, v200.f64[0]), v1231, v200, 1);
  v205 = vmlaq_laneq_f64(vmlaq_n_f64(v198, v1226, v200.f64[0]), v1232, v200, 1);
  v206 = vmlaq_laneq_f64(vmlaq_n_f64(v199, v1227, v200.f64[0]), v1233, v200, 1);
  v207 = v109[4];
  v208 = vmlaq_laneq_f64(vmlaq_n_f64(v201, v1234, v207.f64[0]), v1240, v207, 1);
  v209 = vmlaq_laneq_f64(vmlaq_n_f64(v202, v1235, v207.f64[0]), v1241, v207, 1);
  v210 = vmlaq_laneq_f64(vmlaq_n_f64(v203, v1236, v207.f64[0]), v1242, v207, 1);
  v211 = vmlaq_laneq_f64(vmlaq_n_f64(v204, v1237, v207.f64[0]), v1243, v207, 1);
  v212 = vmlaq_laneq_f64(vmlaq_n_f64(v205, v1238, v207.f64[0]), v1244, v207, 1);
  v213 = vmlaq_laneq_f64(vmlaq_n_f64(v206, v1239, v207.f64[0]), v1245, v207, 1);
  v214 = v109[5];
  v215 = vmlaq_laneq_f64(vmlaq_n_f64(v208, v1246, v214.f64[0]), v1252, v214, 1);
  v216 = vmlaq_laneq_f64(vmlaq_n_f64(v209, v1247, v214.f64[0]), v1253, v214, 1);
  v505 = vmlaq_laneq_f64(vmlaq_n_f64(v210, v1248, v214.f64[0]), v1254, v214, 1);
  v503 = vmlaq_laneq_f64(vmlaq_n_f64(v211, v1249, v214.f64[0]), v1255, v214, 1);
  v500 = vmlaq_laneq_f64(vmlaq_n_f64(v212, v1250, v214.f64[0]), v1256, v214, 1);
  v497 = vmlaq_laneq_f64(vmlaq_n_f64(v213, v1251, v214.f64[0]), v1257, v214, 1);
  v217 = v110[2];
  v218 = vmlaq_laneq_f64(vmlaq_n_f64(v493, v1210, v217.f64[0]), v1216, v217, 1);
  v219 = vmlaq_laneq_f64(vmlaq_n_f64(v491, v1211, v217.f64[0]), v1217, v217, 1);
  v220 = vmlaq_laneq_f64(vmlaq_n_f64(v489, v1212, v217.f64[0]), v1218, v217, 1);
  v221 = vmlaq_laneq_f64(vmlaq_n_f64(v457, v1213, v217.f64[0]), v1219, v217, 1);
  v222 = vmlaq_laneq_f64(vmlaq_n_f64(v487, v1214, v217.f64[0]), v1220, v217, 1);
  v223 = vmlaq_laneq_f64(vmlaq_n_f64(v485, v1215, v217.f64[0]), v1221, v217, 1);
  v224 = v110[3];
  v225 = vmlaq_laneq_f64(vmlaq_n_f64(v218, v1222, v224.f64[0]), v1228, v224, 1);
  v226 = vmlaq_laneq_f64(vmlaq_n_f64(v219, v1223, v224.f64[0]), v1229, v224, 1);
  v227 = vmlaq_laneq_f64(vmlaq_n_f64(v220, v1224, v224.f64[0]), v1230, v224, 1);
  v228 = vmlaq_laneq_f64(vmlaq_n_f64(v221, v1225, v224.f64[0]), v1231, v224, 1);
  v229 = vmlaq_laneq_f64(vmlaq_n_f64(v222, v1226, v224.f64[0]), v1232, v224, 1);
  v230 = vmlaq_laneq_f64(vmlaq_n_f64(v223, v1227, v224.f64[0]), v1233, v224, 1);
  v231 = v110[4];
  v232 = vmlaq_laneq_f64(vmlaq_n_f64(v225, v1234, v231.f64[0]), v1240, v231, 1);
  v233 = vmlaq_laneq_f64(vmlaq_n_f64(v226, v1235, v231.f64[0]), v1241, v231, 1);
  v234 = vmlaq_laneq_f64(vmlaq_n_f64(v227, v1236, v231.f64[0]), v1242, v231, 1);
  v235 = vmlaq_laneq_f64(vmlaq_n_f64(v228, v1237, v231.f64[0]), v1243, v231, 1);
  v236 = vmlaq_laneq_f64(vmlaq_n_f64(v229, v1238, v231.f64[0]), v1244, v231, 1);
  v237 = vmlaq_laneq_f64(vmlaq_n_f64(v230, v1239, v231.f64[0]), v1245, v231, 1);
  v238 = v110[5];
  v494 = vmlaq_laneq_f64(vmlaq_n_f64(v232, v1246, v238.f64[0]), v1252, v238, 1);
  v490 = vmlaq_laneq_f64(vmlaq_n_f64(v234, v1248, v238.f64[0]), v1254, v238, 1);
  v492 = vmlaq_laneq_f64(vmlaq_n_f64(v233, v1247, v238.f64[0]), v1253, v238, 1);
  v239 = vmlaq_laneq_f64(vmlaq_n_f64(v235, v1249, v238.f64[0]), v1255, v238, 1);
  v486 = vmlaq_laneq_f64(vmlaq_n_f64(v237, v1251, v238.f64[0]), v1257, v238, 1);
  v488 = vmlaq_laneq_f64(vmlaq_n_f64(v236, v1250, v238.f64[0]), v1256, v238, 1);
  v240 = v111[2];
  v591 = vmlaq_laneq_f64(vmlaq_n_f64(v590, v1210, v240.f64[0]), v1216, v240, 1);
  v483 = vmlaq_laneq_f64(vmlaq_n_f64(v482, v1211, v240.f64[0]), v1217, v240, 1);
  v480 = vmlaq_laneq_f64(vmlaq_n_f64(v479, v1212, v240.f64[0]), v1218, v240, 1);
  v475 = vmlaq_laneq_f64(vmlaq_n_f64(v474, v1213, v240.f64[0]), v1219, v240, 1);
  v477 = vmlaq_laneq_f64(vmlaq_n_f64(v476, v1214, v240.f64[0]), v1220, v240, 1);
  v473 = vmlaq_laneq_f64(vmlaq_n_f64(v472, v1215, v240.f64[0]), v1221, v240, 1);
  v241 = v112[2];
  v586 = vmlaq_laneq_f64(vmlaq_n_f64(v585, v1210, v241.f64[0]), v1216, v241, 1);
  v582 = vmlaq_laneq_f64(vmlaq_n_f64(v581, v1211, v241.f64[0]), v1217, v241, 1);
  v578 = vmlaq_laneq_f64(vmlaq_n_f64(v577, v1212, v241.f64[0]), v1218, v241, 1);
  v574 = vmlaq_laneq_f64(vmlaq_n_f64(v573, v1213, v241.f64[0]), v1219, v241, 1);
  v569 = vmlaq_laneq_f64(vmlaq_n_f64(v568, v1214, v241.f64[0]), v1220, v241, 1);
  v565 = vmlaq_laneq_f64(vmlaq_n_f64(v564, v1215, v241.f64[0]), v1221, v241, 1);
  v242 = v113[2];
  v730 = vmlaq_laneq_f64(vmlaq_n_f64(v729, v1210, v242.f64[0]), v1216, v242, 1);
  v723 = vmlaq_laneq_f64(vmlaq_n_f64(v722, v1211, v242.f64[0]), v1217, v242, 1);
  v717 = vmlaq_laneq_f64(vmlaq_n_f64(v716, v1212, v242.f64[0]), v1218, v242, 1);
  v560 = vmlaq_laneq_f64(vmlaq_n_f64(v559, v1213, v242.f64[0]), v1219, v242, 1);
  v711 = vmlaq_laneq_f64(vmlaq_n_f64(v710, v1214, v242.f64[0]), v1220, v242, 1);
  v706 = vmlaq_laneq_f64(vmlaq_n_f64(v705, v1215, v242.f64[0]), v1221, v242, 1);
  v243 = v114[2];
  v700 = vmlaq_laneq_f64(vmlaq_n_f64(v699, v1210, v243.f64[0]), v1216, v243, 1);
  v695 = vmlaq_laneq_f64(vmlaq_n_f64(v694, v1211, v243.f64[0]), v1217, v243, 1);
  v690 = vmlaq_laneq_f64(vmlaq_n_f64(v689, v1212, v243.f64[0]), v1218, v243, 1);
  v682 = vmlaq_laneq_f64(vmlaq_n_f64(v681, v1213, v243.f64[0]), v1219, v243, 1);
  v676 = vmlaq_laneq_f64(vmlaq_n_f64(v675, v1214, v243.f64[0]), v1220, v243, 1);
  v554 = vmlaq_laneq_f64(vmlaq_n_f64(v553, v1215, v243.f64[0]), v1221, v243, 1);
  v244 = v115[2];
  v669 = vmlaq_laneq_f64(vmlaq_n_f64(v668, v1210, v244.f64[0]), v1216, v244, 1);
  v662 = vmlaq_laneq_f64(vmlaq_n_f64(v661, v1211, v244.f64[0]), v1217, v244, 1);
  v655 = vmlaq_laneq_f64(vmlaq_n_f64(v654, v1212, v244.f64[0]), v1218, v244, 1);
  v649 = vmlaq_laneq_f64(vmlaq_n_f64(v648, v1213, v244.f64[0]), v1219, v244, 1);
  v643 = vmlaq_laneq_f64(vmlaq_n_f64(v642, v1214, v244.f64[0]), v1220, v244, 1);
  v637 = vmlaq_laneq_f64(vmlaq_n_f64(v636, v1215, v244.f64[0]), v1221, v244, 1);
  v245 = v116[2];
  v982 = vmlaq_n_f64(v981, v215, v1210.f64[0]);
  v978 = vmlaq_laneq_f64(v977, v215, v1210, 1);
  v798 = vmlaq_n_f64(v191, v215, v1211.f64[0]);
  v795 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v794, v147, v1199.f64[0]), v465, v1205.f64[0]), v216, v1211.f64[0]);
  v810 = vmlaq_laneq_f64(v809, v215, v1211, 1);
  v818 = vmlaq_n_f64(v817, v215, v1212.f64[0]);
  v246 = vmlaq_laneq_f64(v954, v215, v1212, 1);
  v247 = vmlaq_n_f64(v874, v215, v1213.f64[0]);
  v841 = vmlaq_laneq_f64(v840, v215, v1213, 1);
  v998 = vmlaq_n_f64(v997, v215, v1214.f64[0]);
  v1063 = vmlaq_laneq_f64(v1062, v215, v1214, 1);
  v1021 = vmlaq_n_f64(v1020, v215, v1215.f64[0]);
  v784 = vmlaq_n_f64(vmlaq_n_f64(v192, v505, v1211.f64[0]), v490, v1217.f64[0]);
  v945 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v944, v149, v1200.f64[0]), v181, v1206.f64[0]), v503, v1212.f64[0]), v239, v1218.f64[0]);
  v927 = vmlaq_laneq_f64(vmlaq_laneq_f64(v926, v215, v1215, 1), v494, v1221, 1);
  v1031 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1030, v149, v1203.f64[0]), v181, v1209.f64[0]), v503, v1215.f64[0]), v239, v1221.f64[0]);
  v847 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v846, v149, v1203, 1), v181, v1209, 1), v503, v1215, 1), v239, v1221, 1);
  v248 = v111[3];
  v249 = vmlaq_laneq_f64(vmlaq_n_f64(v591, v1222, v248.f64[0]), v1228, v248, 1);
  v250 = vmlaq_laneq_f64(vmlaq_n_f64(v483, v1223, v248.f64[0]), v1229, v248, 1);
  v251 = vmlaq_laneq_f64(vmlaq_n_f64(v480, v1224, v248.f64[0]), v1230, v248, 1);
  v252 = vmlaq_laneq_f64(vmlaq_n_f64(v475, v1225, v248.f64[0]), v1231, v248, 1);
  v253 = vmlaq_laneq_f64(vmlaq_n_f64(v477, v1226, v248.f64[0]), v1232, v248, 1);
  v254 = vmlaq_laneq_f64(vmlaq_n_f64(v473, v1227, v248.f64[0]), v1233, v248, 1);
  v255 = v111[4];
  v256 = vmlaq_laneq_f64(vmlaq_n_f64(v249, v1234, v255.f64[0]), v1240, v255, 1);
  v257 = vmlaq_laneq_f64(vmlaq_n_f64(v250, v1235, v255.f64[0]), v1241, v255, 1);
  v258 = vmlaq_laneq_f64(vmlaq_n_f64(v251, v1236, v255.f64[0]), v1242, v255, 1);
  v259 = vmlaq_laneq_f64(vmlaq_n_f64(v252, v1237, v255.f64[0]), v1243, v255, 1);
  v260 = vmlaq_laneq_f64(vmlaq_n_f64(v253, v1238, v255.f64[0]), v1244, v255, 1);
  v261 = vmlaq_laneq_f64(vmlaq_n_f64(v254, v1239, v255.f64[0]), v1245, v255, 1);
  v262 = v111[5];
  v263 = vmlaq_laneq_f64(vmlaq_n_f64(v256, v1246, v262.f64[0]), v1252, v262, 1);
  v264 = vmlaq_laneq_f64(vmlaq_n_f64(v257, v1247, v262.f64[0]), v1253, v262, 1);
  v265 = vmlaq_laneq_f64(vmlaq_n_f64(v258, v1248, v262.f64[0]), v1254, v262, 1);
  v266 = vmlaq_laneq_f64(vmlaq_n_f64(v259, v1249, v262.f64[0]), v1255, v262, 1);
  v267 = vmlaq_laneq_f64(vmlaq_n_f64(v260, v1250, v262.f64[0]), v1256, v262, 1);
  v268 = vmlaq_laneq_f64(vmlaq_n_f64(v261, v1251, v262.f64[0]), v1257, v262, 1);
  v269 = v112[3];
  v270 = vmlaq_laneq_f64(vmlaq_n_f64(v586, v1222, v269.f64[0]), v1228, v269, 1);
  v271 = vmlaq_laneq_f64(vmlaq_n_f64(v582, v1223, v269.f64[0]), v1229, v269, 1);
  v272 = vmlaq_laneq_f64(vmlaq_n_f64(v578, v1224, v269.f64[0]), v1230, v269, 1);
  v273 = vmlaq_laneq_f64(vmlaq_n_f64(v574, v1225, v269.f64[0]), v1231, v269, 1);
  v274 = vmlaq_laneq_f64(vmlaq_n_f64(v569, v1226, v269.f64[0]), v1232, v269, 1);
  v275 = vmlaq_laneq_f64(vmlaq_n_f64(v565, v1227, v269.f64[0]), v1233, v269, 1);
  v276 = v112[4];
  v277 = vmlaq_laneq_f64(vmlaq_n_f64(v270, v1234, v276.f64[0]), v1240, v276, 1);
  v278 = vmlaq_laneq_f64(vmlaq_n_f64(v271, v1235, v276.f64[0]), v1241, v276, 1);
  v279 = vmlaq_laneq_f64(vmlaq_n_f64(v272, v1236, v276.f64[0]), v1242, v276, 1);
  v280 = vmlaq_laneq_f64(vmlaq_n_f64(v273, v1237, v276.f64[0]), v1243, v276, 1);
  v281 = vmlaq_laneq_f64(vmlaq_n_f64(v274, v1238, v276.f64[0]), v1244, v276, 1);
  v282 = vmlaq_laneq_f64(vmlaq_n_f64(v275, v1239, v276.f64[0]), v1245, v276, 1);
  v283 = v112[5];
  v587 = vmlaq_laneq_f64(vmlaq_n_f64(v277, v1246, v283.f64[0]), v1252, v283, 1);
  v583 = vmlaq_laneq_f64(vmlaq_n_f64(v278, v1247, v283.f64[0]), v1253, v283, 1);
  v579 = vmlaq_laneq_f64(vmlaq_n_f64(v279, v1248, v283.f64[0]), v1254, v283, 1);
  v575 = vmlaq_laneq_f64(vmlaq_n_f64(v280, v1249, v283.f64[0]), v1255, v283, 1);
  v570 = vmlaq_laneq_f64(vmlaq_n_f64(v281, v1250, v283.f64[0]), v1256, v283, 1);
  v566 = vmlaq_laneq_f64(vmlaq_n_f64(v282, v1251, v283.f64[0]), v1257, v283, 1);
  v284 = v113[3];
  v731 = vmlaq_laneq_f64(vmlaq_n_f64(v730, v1222, v284.f64[0]), v1228, v284, 1);
  v724 = vmlaq_laneq_f64(vmlaq_n_f64(v723, v1223, v284.f64[0]), v1229, v284, 1);
  v718 = vmlaq_laneq_f64(vmlaq_n_f64(v717, v1224, v284.f64[0]), v1230, v284, 1);
  v561 = vmlaq_laneq_f64(vmlaq_n_f64(v560, v1225, v284.f64[0]), v1231, v284, 1);
  v712 = vmlaq_laneq_f64(vmlaq_n_f64(v711, v1226, v284.f64[0]), v1232, v284, 1);
  v707 = vmlaq_laneq_f64(vmlaq_n_f64(v706, v1227, v284.f64[0]), v1233, v284, 1);
  v285 = v114[3];
  v701 = vmlaq_laneq_f64(vmlaq_n_f64(v700, v1222, v285.f64[0]), v1228, v285, 1);
  v696 = vmlaq_laneq_f64(vmlaq_n_f64(v695, v1223, v285.f64[0]), v1229, v285, 1);
  v691 = vmlaq_laneq_f64(vmlaq_n_f64(v690, v1224, v285.f64[0]), v1230, v285, 1);
  v683 = vmlaq_laneq_f64(vmlaq_n_f64(v682, v1225, v285.f64[0]), v1231, v285, 1);
  v677 = vmlaq_laneq_f64(vmlaq_n_f64(v676, v1226, v285.f64[0]), v1232, v285, 1);
  v555 = vmlaq_laneq_f64(vmlaq_n_f64(v554, v1227, v285.f64[0]), v1233, v285, 1);
  v286 = v115[3];
  v670 = vmlaq_laneq_f64(vmlaq_n_f64(v669, v1222, v286.f64[0]), v1228, v286, 1);
  v663 = vmlaq_laneq_f64(vmlaq_n_f64(v662, v1223, v286.f64[0]), v1229, v286, 1);
  v656 = vmlaq_laneq_f64(vmlaq_n_f64(v655, v1224, v286.f64[0]), v1230, v286, 1);
  v650 = vmlaq_laneq_f64(vmlaq_n_f64(v649, v1225, v286.f64[0]), v1231, v286, 1);
  v644 = vmlaq_laneq_f64(vmlaq_n_f64(v643, v1226, v286.f64[0]), v1232, v286, 1);
  v638 = vmlaq_laneq_f64(vmlaq_n_f64(v637, v1227, v286.f64[0]), v1233, v286, 1);
  v287 = v116[3];
  v1083 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1082, v147, v1198.f64[0]), v465, v1204.f64[0]), v216, v1210.f64[0]), v492, v1216.f64[0]), v264, v1222.f64[0]);
  v989 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v988, v149, v1198.f64[0]), v181, v1204.f64[0]), v503, v1210.f64[0]), v239, v1216.f64[0]), v266, v1222.f64[0]);
  v836 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v835, v147, v1198, 1), v465, v1204, 1), v216, v1210, 1), v492, v1216, 1), v264, v1222, 1);
  v958 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v957, v149, v1198, 1), v181, v1204, 1), v503, v1210, 1), v239, v1216, 1), v266, v1222, 1);
  v832 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v831, v149, v1199.f64[0]), v181, v1205.f64[0]), v503, v1211.f64[0]), v239, v1217.f64[0]), v266, v1223.f64[0]);
  v805 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v804, v147, v1199, 1), v465, v1205, 1), v216, v1211, 1), v492, v1217, 1), v264, v1223, 1);
  v788 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v787, v149, v1199, 1), v181, v1205, 1), v503, v1211, 1), v239, v1217, 1), v266, v1223, 1);
  v813 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v812, v147, v1200.f64[0]), v465, v1206.f64[0]), v216, v1212.f64[0]), v492, v1218.f64[0]), v264, v1224.f64[0]);
  v1073 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v1072, v147, v1200, 1), v465, v1206, 1), v216, v1212, 1), v492, v1218, 1), v264, v1224, 1);
  v851 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v850, v149, v1200, 1), v181, v1206, 1), v503, v1212, 1), v239, v1218, 1), v266, v1224, 1);
  v875 = vmlaq_n_f64(vmlaq_n_f64(v247, v494, v1219.f64[0]), v263, v1225.f64[0]);
  v869 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v868, v147, v1201.f64[0]), v465, v1207.f64[0]), v216, v1213.f64[0]), v492, v1219.f64[0]), v264, v1225.f64[0]);
  v855 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v854, v149, v1201.f64[0]), v181, v1207.f64[0]), v503, v1213.f64[0]), v239, v1219.f64[0]), v266, v1225.f64[0]);
  v842 = vmlaq_laneq_f64(vmlaq_laneq_f64(v841, v494, v1219, 1), v263, v1225, 1);
  v882 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v881, v147, v1201, 1), v465, v1207, 1), v216, v1213, 1), v492, v1219, 1), v264, v1225, 1);
  v879 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v878, v149, v1201, 1), v181, v1207, 1), v503, v1213, 1), v239, v1219, 1), v266, v1225, 1);
  v288 = vmlaq_n_f64(vmlaq_n_f64(v998, v494, v1220.f64[0]), v263, v1226.f64[0]);
  v1026 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1025, v147, v1202.f64[0]), v465, v1208.f64[0]), v216, v1214.f64[0]), v492, v1220.f64[0]), v264, v1226.f64[0]);
  v1009 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1008, v149, v1202.f64[0]), v181, v1208.f64[0]), v503, v1214.f64[0]), v239, v1220.f64[0]), v266, v1226.f64[0]);
  v289 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v961, v147, v1202, 1), v465, v1208, 1), v216, v1214, 1), v492, v1220, 1), v264, v1226, 1);
  v1022 = vmlaq_n_f64(vmlaq_n_f64(v1021, v494, v1221.f64[0]), v263, v1227.f64[0]);
  v290 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v949, v147, v1203, 1), v465, v1209, 1), v216, v1215, 1), v492, v1221, 1), v264, v1227, 1);
  v848 = vmlaq_laneq_f64(v847, v266, v1227, 1);
  v775 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v774, v1210, v245.f64[0]), v1216, v245, 1), v1222, v287.f64[0]), v1228, v287, 1);
  v759 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v758, v1211, v245.f64[0]), v1217, v245, 1), v1223, v287.f64[0]), v1229, v287, 1);
  v770 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v769, v1212, v245.f64[0]), v1218, v245, 1), v1224, v287.f64[0]), v1230, v287, 1);
  v746 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v190, v1213, v245.f64[0]), v1219, v245, 1), v1225, v287.f64[0]), v1231, v287, 1);
  v753 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v752, v1214, v245.f64[0]), v1220, v245, 1), v1226, v287.f64[0]), v1232, v287, 1);
  v632 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(v631, v1215, v245.f64[0]), v1221, v245, 1), v1227, v287.f64[0]), v1233, v287, 1);
  v291 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v885, v448, v1198.f64[0]), v459, v1204.f64[0]), v497, v1210.f64[0]), v486, v1216.f64[0]), v268, v1222.f64[0]), v566, v1228.f64[0]);
  __sza = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(__sz, v448, v1198, 1), v459, v1204, 1), v497, v1210, 1), v486, v1216, 1), v268, v1222, 1), v566, v1228, 1);
  v937 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v936, v448, v1199.f64[0]), v459, v1205.f64[0]), v497, v1211.f64[0]), v486, v1217.f64[0]), v268, v1223.f64[0]), v566, v1229.f64[0]);
  v780 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v779, v448, v1199, 1), v459, v1205, 1), v497, v1211, 1), v486, v1217, 1), v268, v1223, 1), v566, v1229, 1);
  v1053 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1052, v448, v1200.f64[0]), v459, v1206.f64[0]), v497, v1212.f64[0]), v486, v1218.f64[0]), v268, v1224.f64[0]), v566, v1230.f64[0]);
  v292 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v896, v448, v1200, 1), v459, v1206, 1), v497, v1212, 1), v486, v1218, 1), v268, v1224, 1), v566, v1230, 1);
  v932 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v931, v448, v1201.f64[0]), v459, v1207.f64[0]), v497, v1213.f64[0]), v486, v1219.f64[0]), v268, v1225.f64[0]), v566, v1231.f64[0]);
  v864 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v863, v448, v1201, 1), v459, v1207, 1), v497, v1213, 1), v486, v1219, 1), v268, v1225, 1), v566, v1231, 1);
  v1002 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1001, v448, v1202.f64[0]), v459, v1208.f64[0]), v497, v1214.f64[0]), v486, v1220.f64[0]), v268, v1226.f64[0]), v566, v1232.f64[0]);
  v1064 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v1063, v494, v1220, 1), v263, v1226, 1), v587, v1232, 1);
  v973 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v972, v503, v1214, 1), v239, v1220, 1), v266, v1226, 1), v575, v1232, 1);
  v916 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v915, v448, v1202, 1), v459, v1208, 1), v497, v1214, 1), v486, v1220, 1), v268, v1226, 1), v566, v1232, 1);
  v928 = vmlaq_laneq_f64(vmlaq_laneq_f64(v927, v263, v1227, 1), v587, v1233, 1);
  v967 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v966, v147, v1203.f64[0]), v465, v1209.f64[0]), v216, v1215.f64[0]), v492, v1221.f64[0]), v264, v1227.f64[0]), v583, v1233.f64[0]);
  v906 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v905, v448, v1203.f64[0]), v459, v1209.f64[0]), v497, v1215.f64[0]), v486, v1221.f64[0]), v268, v1227.f64[0]), v566, v1233.f64[0]);
  v921 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v920, v448, v1203, 1), v459, v1209, 1), v497, v1215, 1), v486, v1221, 1), v268, v1227, 1), v566, v1233, 1);
  v293 = v113[4];
  v294 = vmlaq_laneq_f64(vmlaq_n_f64(v731, v1234, v293.f64[0]), v1240, v293, 1);
  v295 = vmlaq_laneq_f64(vmlaq_n_f64(v724, v1235, v293.f64[0]), v1241, v293, 1);
  v296 = vmlaq_laneq_f64(vmlaq_n_f64(v718, v1236, v293.f64[0]), v1242, v293, 1);
  v297 = vmlaq_laneq_f64(vmlaq_n_f64(v561, v1237, v293.f64[0]), v1243, v293, 1);
  v298 = vmlaq_laneq_f64(vmlaq_n_f64(v712, v1238, v293.f64[0]), v1244, v293, 1);
  v299 = vmlaq_laneq_f64(vmlaq_n_f64(v707, v1239, v293.f64[0]), v1245, v293, 1);
  v300 = v113[5];
  v732 = vmlaq_laneq_f64(vmlaq_n_f64(v294, v1246, v300.f64[0]), v1252, v300, 1);
  v725 = vmlaq_laneq_f64(vmlaq_n_f64(v295, v1247, v300.f64[0]), v1253, v300, 1);
  v301 = vmlaq_laneq_f64(vmlaq_n_f64(v296, v1248, v300.f64[0]), v1254, v300, 1);
  v302 = vmlaq_laneq_f64(vmlaq_n_f64(v297, v1249, v300.f64[0]), v1255, v300, 1);
  v303 = vmlaq_laneq_f64(vmlaq_n_f64(v298, v1250, v300.f64[0]), v1256, v300, 1);
  v304 = vmlaq_laneq_f64(vmlaq_n_f64(v299, v1251, v300.f64[0]), v1257, v300, 1);
  v305 = v114[4];
  v306 = vmlaq_laneq_f64(vmlaq_n_f64(v701, v1234, v305.f64[0]), v1240, v305, 1);
  v307 = vmlaq_laneq_f64(vmlaq_n_f64(v696, v1235, v305.f64[0]), v1241, v305, 1);
  v308 = vmlaq_laneq_f64(vmlaq_n_f64(v691, v1236, v305.f64[0]), v1242, v305, 1);
  v309 = vmlaq_laneq_f64(vmlaq_n_f64(v683, v1237, v305.f64[0]), v1243, v305, 1);
  v310 = vmlaq_laneq_f64(vmlaq_n_f64(v677, v1238, v305.f64[0]), v1244, v305, 1);
  v311 = vmlaq_laneq_f64(vmlaq_n_f64(v555, v1239, v305.f64[0]), v1245, v305, 1);
  v312 = v114[5];
  v702 = vmlaq_laneq_f64(vmlaq_n_f64(v306, v1246, v312.f64[0]), v1252, v312, 1);
  v313 = vmlaq_laneq_f64(vmlaq_n_f64(v307, v1247, v312.f64[0]), v1253, v312, 1);
  v314 = vmlaq_laneq_f64(vmlaq_n_f64(v308, v1248, v312.f64[0]), v1254, v312, 1);
  v684 = vmlaq_laneq_f64(vmlaq_n_f64(v309, v1249, v312.f64[0]), v1255, v312, 1);
  v678 = vmlaq_laneq_f64(vmlaq_n_f64(v310, v1250, v312.f64[0]), v1256, v312, 1);
  v315 = vmlaq_laneq_f64(vmlaq_n_f64(v311, v1251, v312.f64[0]), v1257, v312, 1);
  v316 = v115[4];
  v671 = vmlaq_laneq_f64(vmlaq_n_f64(v670, v1234, v316.f64[0]), v1240, v316, 1);
  v664 = vmlaq_laneq_f64(vmlaq_n_f64(v663, v1235, v316.f64[0]), v1241, v316, 1);
  v657 = vmlaq_laneq_f64(vmlaq_n_f64(v656, v1236, v316.f64[0]), v1242, v316, 1);
  v651 = vmlaq_laneq_f64(vmlaq_n_f64(v650, v1237, v316.f64[0]), v1243, v316, 1);
  v645 = vmlaq_laneq_f64(vmlaq_n_f64(v644, v1238, v316.f64[0]), v1244, v316, 1);
  v639 = vmlaq_laneq_f64(vmlaq_n_f64(v638, v1239, v316.f64[0]), v1245, v316, 1);
  v317 = v116[4];
  v828 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v827, v450, v1199, 1), v461, v1205, 1), v500, v1211, 1), v488, v1217, 1), v267, v1223, 1), v570, v1229, 1), v303, v1235, 1);
  v946 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v945, v266, v1224.f64[0]), v575, v1230.f64[0]), v302, v1236.f64[0]);
  v942 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v941, v450, v1200.f64[0]), v461, v1206.f64[0]), v500, v1212.f64[0]), v488, v1218.f64[0]), v267, v1224.f64[0]), v570, v1230.f64[0]), v303, v1236.f64[0]);
  v955 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v246, v494, v1218, 1), v263, v1224, 1), v587, v1230, 1), v732, v1236, 1);
  v901 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v900, v450, v1200, 1), v461, v1206, 1), v500, v1212, 1), v488, v1218, 1), v267, v1224, 1), v570, v1230, 1), v303, v1236, 1);
  v318 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1049, v450, v1201.f64[0]), v461, v1207.f64[0]), v500, v1213.f64[0]), v488, v1219.f64[0]), v267, v1225.f64[0]), v570, v1231.f64[0]), v303, v1237.f64[0]);
  v993 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v992, v450, v1201, 1), v461, v1207, 1), v500, v1213, 1), v488, v1219, 1), v267, v1225, 1), v570, v1231, 1), v303, v1237, 1);
  v1006 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1005, v450, v1202.f64[0]), v461, v1208.f64[0]), v500, v1214.f64[0]), v488, v1220.f64[0]), v267, v1226.f64[0]), v570, v1232.f64[0]), v303, v1238.f64[0]);
  v1046 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v1045, v450, v1202, 1), v461, v1208, 1), v500, v1214, 1), v488, v1220, 1), v267, v1226, 1), v570, v1232, 1), v303, v1238,
            1);
  v1032 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1031, v266, v1227.f64[0]), v575, v1233.f64[0]), v302, v1239.f64[0]);
  v766 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v765, v450, v1203.f64[0]), v461, v1209.f64[0]), v500, v1215.f64[0]), v488, v1221.f64[0]), v267, v1227.f64[0]), v570, v1233.f64[0]), v303, v1239.f64[0]);
  v912 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v911, v450, v1203, 1), v461, v1209, 1), v500, v1215, 1), v488, v1221, 1), v267, v1227, 1), v570, v1233, 1), v303, v1239, 1);
  v776 = vmlaq_laneq_f64(vmlaq_n_f64(v775, v1234, v317.f64[0]), v1240, v317, 1);
  v760 = vmlaq_laneq_f64(vmlaq_n_f64(v759, v1235, v317.f64[0]), v1241, v317, 1);
  v771 = vmlaq_laneq_f64(vmlaq_n_f64(v770, v1236, v317.f64[0]), v1242, v317, 1);
  v319 = vmlaq_laneq_f64(vmlaq_n_f64(v746, v1237, v317.f64[0]), v1243, v317, 1);
  v754 = vmlaq_laneq_f64(vmlaq_n_f64(v753, v1238, v317.f64[0]), v1244, v317, 1);
  v633 = vmlaq_laneq_f64(vmlaq_n_f64(v632, v1239, v317.f64[0]), v1245, v317, 1);
  v886 = vmlaq_n_f64(vmlaq_n_f64(v291, v304, v1234.f64[0]), v315, v1240.f64[0]);
  v320 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v824, v505, v1210, 1), v490, v1216, 1), v265, v1222, 1), v579, v1228, 1), v301, v1234, 1), v314, v1240, 1);
  __szb = vmlaq_laneq_f64(vmlaq_laneq_f64(__sza, v304, v1234, 1), v315, v1240, 1);
  v785 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v784, v265, v1223.f64[0]), v579, v1229.f64[0]), v301, v1235.f64[0]), v314, v1241.f64[0]);
  v938 = vmlaq_n_f64(vmlaq_n_f64(v937, v304, v1235.f64[0]), v315, v1241.f64[0]);
  v806 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v805, v583, v1229, 1), v725, v1235, 1), v313, v1241, 1);
  v792 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v791, v505, v1211, 1), v490, v1217, 1), v265, v1223, 1), v579, v1229, 1), v301, v1235, 1), v314, v1241, 1);
  v781 = vmlaq_laneq_f64(vmlaq_laneq_f64(v780, v304, v1235, 1), v315, v1241, 1);
  v814 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v813, v583, v1230.f64[0]), v725, v1236.f64[0]), v313, v1242.f64[0]);
  v802 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v801, v505, v1212.f64[0]), v490, v1218.f64[0]), v265, v1224.f64[0]), v579, v1230.f64[0]), v301, v1236.f64[0]), v314, v1242.f64[0]);
  v321 = vmlaq_n_f64(vmlaq_n_f64(v1053, v304, v1236.f64[0]), v315, v1242.f64[0]);
  v1074 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v1073, v583, v1230, 1), v725, v1236, 1), v313, v1242, 1);
  v1069 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v1068, v505, v1212, 1), v490, v1218, 1), v265, v1224, 1), v579, v1230, 1), v301, v1236, 1), v314, v1242, 1);
  v897 = vmlaq_laneq_f64(vmlaq_laneq_f64(v292, v304, v1236, 1), v315, v1242, 1);
  v870 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v869, v583, v1231.f64[0]), v725, v1237.f64[0]), v313, v1243.f64[0]);
  v860 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v859, v505, v1213.f64[0]), v490, v1219.f64[0]), v265, v1225.f64[0]), v579, v1231.f64[0]), v301, v1237.f64[0]), v314, v1243.f64[0]);
  v933 = vmlaq_n_f64(vmlaq_n_f64(v932, v304, v1237.f64[0]), v315, v1243.f64[0]);
  v883 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v882, v583, v1231, 1), v725, v1237, 1), v313, v1243, 1);
  v1017 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v1016, v505, v1213, 1), v490, v1219, 1), v265, v1225, 1), v579, v1231, 1), v301, v1237, 1), v314, v1243, 1);
  v865 = vmlaq_laneq_f64(vmlaq_laneq_f64(v864, v304, v1237, 1), v315, v1243, 1);
  v1027 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1026, v583, v1232.f64[0]), v725, v1238.f64[0]), v313, v1244.f64[0]);
  v1013 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1012, v505, v1214.f64[0]), v490, v1220.f64[0]), v265, v1226.f64[0]), v579, v1232.f64[0]), v301, v1238.f64[0]), v314, v1244.f64[0]);
  v1003 = vmlaq_n_f64(vmlaq_n_f64(v1002, v304, v1238.f64[0]), v315, v1244.f64[0]);
  v962 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v289, v583, v1232, 1), v725, v1238, 1), v313, v1244, 1);
  v1058 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v1057, v505, v1214, 1), v490, v1220, 1), v265, v1226, 1), v579, v1232, 1), v301, v1238, 1), v314, v1244, 1);
  v917 = vmlaq_laneq_f64(vmlaq_laneq_f64(v916, v304, v1238, 1), v315, v1244, 1);
  v968 = vmlaq_n_f64(vmlaq_n_f64(v967, v725, v1239.f64[0]), v313, v1245.f64[0]);
  v950 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v290, v583, v1233, 1), v725, v1239, 1), v313, v1245, 1);
  v1042 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1041, v505, v1215.f64[0]), v490, v1221.f64[0]), v265, v1227.f64[0]), v579, v1233.f64[0]), v301, v1239.f64[0]), v314, v1245.f64[0]);
  v1037 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v1036, v505, v1215, 1), v490, v1221, 1), v265, v1227, 1), v579, v1233, 1), v301, v1239, 1), v314, v1245, 1);
  v907 = vmlaq_n_f64(vmlaq_n_f64(v906, v304, v1239.f64[0]), v315, v1245.f64[0]);
  v922 = vmlaq_laneq_f64(vmlaq_laneq_f64(v921, v304, v1239, 1), v315, v1245, 1);
  v322 = v115[5];
  v323 = vmlaq_laneq_f64(vmlaq_n_f64(v671, v1246, v322.f64[0]), v1252, v322, 1);
  v324 = vmlaq_laneq_f64(vmlaq_n_f64(v664, v1247, v322.f64[0]), v1253, v322, 1);
  v325 = vmlaq_laneq_f64(vmlaq_n_f64(v657, v1248, v322.f64[0]), v1254, v322, 1);
  v326 = vmlaq_laneq_f64(vmlaq_n_f64(v651, v1249, v322.f64[0]), v1255, v322, 1);
  v327 = vmlaq_laneq_f64(vmlaq_n_f64(v645, v1250, v322.f64[0]), v1256, v322, 1);
  v328 = vmlaq_laneq_f64(vmlaq_n_f64(v639, v1251, v322.f64[0]), v1257, v322, 1);
  v329 = v116[5];
  v983 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v982, v494, v1216.f64[0]), v263, v1222.f64[0]), v587, v1228.f64[0]), v732, v1234.f64[0]), v702, v1240.f64[0]), v323, v1246.f64[0]);
  v1084 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1083, v583, v1228.f64[0]), v725, v1234.f64[0]), v313, v1240.f64[0]), v324, v1246.f64[0]);
  v894 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v893, v505, v1210.f64[0]), v490, v1216.f64[0]), v265, v1222.f64[0]), v579, v1228.f64[0]), v301, v1234.f64[0]), v314, v1240.f64[0]), v325, v1246.f64[0]);
  v990 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v989, v575, v1228.f64[0]), v302, v1234.f64[0]), v684, v1240.f64[0]), v326, v1246.f64[0]);
  v986 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v985, v450, v1198.f64[0]), v461, v1204.f64[0]), v500, v1210.f64[0]), v488, v1216.f64[0]), v267, v1222.f64[0]), v570, v1228.f64[0]), v303, v1234.f64[0]), v678, v1240.f64[0]),
           v327,
           v1246.f64[0]);
  v887 = vmlaq_n_f64(v886, v328, v1246.f64[0]);
  v330 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v978, v494, v1216, 1), v263, v1222, 1), v587, v1228, 1), v732, v1234, 1), v702, v1240, 1), v323, v1246, 1);
  v837 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v836, v583, v1228, 1), v725, v1234, 1), v313, v1240, 1), v324, v1246, 1);
  v825 = vmlaq_laneq_f64(v320, v325, v1246, 1);
  v959 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v958, v575, v1228, 1), v302, v1234, 1), v684, v1240, 1), v326, v1246, 1);
  v821 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v820, v450, v1198, 1), v461, v1204, 1), v500, v1210, 1), v488, v1216, 1), v267, v1222, 1), v570, v1228, 1),
               v303,
               v1234,
               1),
             v678,
             v1240,
             1),
           v327,
           v1246,
           1);
  __szc = vmlaq_laneq_f64(__szb, v328, v1246, 1);
  v331 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v798, v494, v1217.f64[0]), v263, v1223.f64[0]), v587, v1229.f64[0]), v732, v1235.f64[0]), v702, v1241.f64[0]), v323, v1247.f64[0]);
  v332 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v795, v492, v1217.f64[0]), v264, v1223.f64[0]), v583, v1229.f64[0]), v725, v1235.f64[0]), v313, v1241.f64[0]), v324, v1247.f64[0]);
  v333 = vmlaq_n_f64(v785, v325, v1247.f64[0]);
  v833 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v832, v575, v1229.f64[0]), v302, v1235.f64[0]), v684, v1241.f64[0]), v326, v1247.f64[0]);
  v890 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v889, v450, v1199.f64[0]), v461, v1205.f64[0]), v500, v1211.f64[0]), v488, v1217.f64[0]), v267, v1223.f64[0]), v570, v1229.f64[0]), v303, v1235.f64[0]), v678, v1241.f64[0]),
           v327,
           v1247.f64[0]);
  v939 = vmlaq_n_f64(v938, v328, v1247.f64[0]);
  v334 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v810, v494, v1217, 1), v263, v1223, 1), v587, v1229, 1), v732, v1235, 1), v702, v1241, 1), v323, v1247, 1);
  v335 = vmlaq_laneq_f64(v806, v324, v1247, 1);
  v336 = vmlaq_laneq_f64(v792, v325, v1247, 1);
  v337 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v788, v575, v1229, 1), v302, v1235, 1), v684, v1241, 1), v326, v1247, 1);
  v829 = vmlaq_laneq_f64(vmlaq_laneq_f64(v828, v678, v1241, 1), v327, v1247, 1);
  v338 = vmlaq_laneq_f64(v781, v328, v1247, 1);
  v339 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v818, v494, v1218.f64[0]), v263, v1224.f64[0]), v587, v1230.f64[0]), v732, v1236.f64[0]), v702, v1242.f64[0]), v323, v1248.f64[0]);
  v340 = vmlaq_n_f64(v814, v324, v1248.f64[0]);
  v341 = vmlaq_n_f64(v802, v325, v1248.f64[0]);
  v342 = vmlaq_n_f64(vmlaq_n_f64(v946, v684, v1242.f64[0]), v326, v1248.f64[0]);
  v343 = vmlaq_n_f64(vmlaq_n_f64(v942, v678, v1242.f64[0]), v327, v1248.f64[0]);
  v1054 = vmlaq_n_f64(v321, v328, v1248.f64[0]);
  v344 = vmlaq_laneq_f64(vmlaq_laneq_f64(v955, v702, v1242, 1), v323, v1248, 1);
  v1075 = vmlaq_laneq_f64(v1074, v324, v1248, 1);
  v1070 = vmlaq_laneq_f64(v1069, v325, v1248, 1);
  v852 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v851, v575, v1230, 1), v302, v1236, 1), v684, v1242, 1), v326, v1248, 1);
  v902 = vmlaq_laneq_f64(vmlaq_laneq_f64(v901, v678, v1242, 1), v327, v1248, 1);
  v898 = vmlaq_laneq_f64(v897, v328, v1248, 1);
  v747 = vmlaq_n_f64(v319, v1249, v329.f64[0]);
  v876 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v875, v587, v1231.f64[0]), v732, v1237.f64[0]), v702, v1243.f64[0]), v323, v1249.f64[0]);
  v871 = vmlaq_n_f64(v870, v324, v1249.f64[0]);
  v861 = vmlaq_n_f64(v860, v325, v1249.f64[0]);
  v856 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v855, v575, v1231.f64[0]), v302, v1237.f64[0]), v684, v1243.f64[0]), v326, v1249.f64[0]);
  v1050 = vmlaq_n_f64(vmlaq_n_f64(v318, v678, v1243.f64[0]), v327, v1249.f64[0]);
  v934 = vmlaq_n_f64(v933, v328, v1249.f64[0]);
  v843 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v842, v587, v1231, 1), v732, v1237, 1), v702, v1243, 1), v323, v1249, 1);
  v345 = vmlaq_laneq_f64(v883, v324, v1249, 1);
  v346 = vmlaq_laneq_f64(v1017, v325, v1249, 1);
  v347 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v879, v575, v1231, 1), v302, v1237, 1), v684, v1243, 1), v326, v1249, 1);
  v994 = vmlaq_laneq_f64(vmlaq_laneq_f64(v993, v678, v1243, 1), v327, v1249, 1);
  v866 = vmlaq_laneq_f64(v865, v328, v1249, 1);
  v999 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v288, v587, v1232.f64[0]), v732, v1238.f64[0]), v702, v1244.f64[0]), v323, v1250.f64[0]);
  v1028 = vmlaq_n_f64(v1027, v324, v1250.f64[0]);
  v348 = v324;
  v349 = vmlaq_n_f64(v1013, v325, v1250.f64[0]);
  v350 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1009, v575, v1232.f64[0]), v302, v1238.f64[0]), v684, v1244.f64[0]), v326, v1250.f64[0]);
  v351 = vmlaq_n_f64(vmlaq_n_f64(v1006, v678, v1244.f64[0]), v327, v1250.f64[0]);
  v352 = vmlaq_n_f64(v1003, v328, v1250.f64[0]);
  v1065 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v1064, v732, v1238, 1), v702, v1244, 1), v323, v1250, 1);
  v963 = vmlaq_laneq_f64(v962, v348, v1250, 1);
  v1059 = vmlaq_laneq_f64(v1058, v325, v1250, 1);
  v974 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v973, v302, v1238, 1), v684, v1244, 1), v326, v1250, 1);
  v1047 = vmlaq_laneq_f64(vmlaq_laneq_f64(v1046, v678, v1244, 1), v327, v1250, 1);
  v918 = vmlaq_laneq_f64(v917, v328, v1250, 1);
  v1023 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v1022, v587, v1233.f64[0]), v732, v1239.f64[0]), v702, v1245.f64[0]), v323, v1251.f64[0]);
  v929 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v928, v732, v1239, 1), v702, v1245, 1), v323, v1251, 1);
  v969 = vmlaq_n_f64(v968, v348, v1251.f64[0]);
  v951 = vmlaq_laneq_f64(v950, v348, v1251, 1);
  v1043 = vmlaq_n_f64(v1042, v325, v1251.f64[0]);
  v1038 = vmlaq_laneq_f64(v1037, v325, v1251, 1);
  v1033 = vmlaq_n_f64(vmlaq_n_f64(v1032, v684, v1245.f64[0]), v326, v1251.f64[0]);
  v353 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v848, v575, v1233, 1), v302, v1239, 1), v684, v1245, 1), v326, v1251, 1);
  v767 = vmlaq_n_f64(vmlaq_n_f64(v766, v678, v1245.f64[0]), v327, v1251.f64[0]);
  v913 = vmlaq_laneq_f64(vmlaq_laneq_f64(v912, v678, v1245, 1), v327, v1251, 1);
  v908 = vmlaq_n_f64(v907, v328, v1251.f64[0]);
  v923 = vmlaq_laneq_f64(v922, v328, v1251, 1);
  v354 = vmlaq_laneq_f64(vmlaq_n_f64(v776, v1246, v329.f64[0]), v1252, v329, 1);
  v355 = vmlaq_laneq_f64(vmlaq_n_f64(v760, v1247, v329.f64[0]), v1253, v329, 1);
  v356 = vmlaq_laneq_f64(vmlaq_n_f64(v771, v1248, v329.f64[0]), v1254, v329, 1);
  v357 = vmlaq_laneq_f64(v747, v1255, v329, 1);
  v358 = vmlaq_laneq_f64(vmlaq_n_f64(v754, v1250, v329.f64[0]), v1256, v329, 1);
  v359 = vmlaq_laneq_f64(vmlaq_n_f64(v633, v1251, v329.f64[0]), v1257, v329, 1);
  v984 = vmlaq_n_f64(v983, v354, v1252.f64[0]);
  v1085 = vmlaq_n_f64(v1084, v355, v1252.f64[0]);
  v895 = vmlaq_n_f64(v894, v356, v1252.f64[0]);
  v991 = vmlaq_n_f64(v990, v357, v1252.f64[0]);
  v987 = vmlaq_n_f64(v986, v358, v1252.f64[0]);
  v888 = vmlaq_n_f64(v887, v359, v1252.f64[0]);
  v979 = vmlaq_laneq_f64(v330, v354, v1252, 1);
  v838 = vmlaq_laneq_f64(v837, v355, v1252, 1);
  v826 = vmlaq_laneq_f64(v825, v356, v1252, 1);
  v960 = vmlaq_laneq_f64(v959, v357, v1252, 1);
  v822 = vmlaq_laneq_f64(v821, v358, v1252, 1);
  __szd = vmlaq_laneq_f64(__szc, v359, v1252, 1);
  v799 = vmlaq_n_f64(v331, v354, v1253.f64[0]);
  v796 = vmlaq_n_f64(v332, v355, v1253.f64[0]);
  v786 = vmlaq_n_f64(v333, v356, v1253.f64[0]);
  v834 = vmlaq_n_f64(v833, v357, v1253.f64[0]);
  v891 = vmlaq_n_f64(v890, v358, v1253.f64[0]);
  v940 = vmlaq_n_f64(v939, v359, v1253.f64[0]);
  v811 = vmlaq_laneq_f64(v334, v354, v1253, 1);
  v807 = vmlaq_laneq_f64(v335, v355, v1253, 1);
  v793 = vmlaq_laneq_f64(v336, v356, v1253, 1);
  v789 = vmlaq_laneq_f64(v337, v357, v1253, 1);
  v830 = vmlaq_laneq_f64(v829, v358, v1253, 1);
  v782 = vmlaq_laneq_f64(v338, v359, v1253, 1);
  v819 = vmlaq_n_f64(v339, v354, v1254.f64[0]);
  v815 = vmlaq_n_f64(v340, v355, v1254.f64[0]);
  v803 = vmlaq_n_f64(v341, v356, v1254.f64[0]);
  v947 = vmlaq_n_f64(v342, v357, v1254.f64[0]);
  v943 = vmlaq_n_f64(v343, v358, v1254.f64[0]);
  v1055 = vmlaq_n_f64(v1054, v359, v1254.f64[0]);
  v956 = vmlaq_laneq_f64(v344, v354, v1254, 1);
  v1076 = vmlaq_laneq_f64(v1075, v355, v1254, 1);
  v1071 = vmlaq_laneq_f64(v1070, v356, v1254, 1);
  v853 = vmlaq_laneq_f64(v852, v357, v1254, 1);
  v903 = vmlaq_laneq_f64(v902, v358, v1254, 1);
  v899 = vmlaq_laneq_f64(v898, v359, v1254, 1);
  v877 = vmlaq_n_f64(v876, v354, v1255.f64[0]);
  v872 = vmlaq_n_f64(v871, v355, v1255.f64[0]);
  v862 = vmlaq_n_f64(v861, v356, v1255.f64[0]);
  v857 = vmlaq_n_f64(v856, v357, v1255.f64[0]);
  v1051 = vmlaq_n_f64(v1050, v358, v1255.f64[0]);
  v935 = vmlaq_n_f64(v934, v359, v1255.f64[0]);
  v844 = vmlaq_laneq_f64(v843, v354, v1255, 1);
  v884 = vmlaq_laneq_f64(v345, v355, v1255, 1);
  v1018 = vmlaq_laneq_f64(v346, v356, v1255, 1);
  v880 = vmlaq_laneq_f64(v347, v357, v1255, 1);
  v995 = vmlaq_laneq_f64(v994, v358, v1255, 1);
  v867 = vmlaq_laneq_f64(v866, v359, v1255, 1);
  v1000 = vmlaq_n_f64(v999, v354, v1256.f64[0]);
  v1029 = vmlaq_n_f64(v1028, v355, v1256.f64[0]);
  v1014 = vmlaq_n_f64(v349, v356, v1256.f64[0]);
  v1010 = vmlaq_n_f64(v350, v357, v1256.f64[0]);
  v1007 = vmlaq_n_f64(v351, v358, v1256.f64[0]);
  v1004 = vmlaq_n_f64(v352, v359, v1256.f64[0]);
  v1066 = vmlaq_laneq_f64(v1065, v354, v1256, 1);
  v964 = vmlaq_laneq_f64(v963, v355, v1256, 1);
  v1060 = vmlaq_laneq_f64(v1059, v356, v1256, 1);
  v975 = vmlaq_laneq_f64(v974, v357, v1256, 1);
  v1048 = vmlaq_laneq_f64(v1047, v358, v1256, 1);
  v919 = vmlaq_laneq_f64(v918, v359, v1256, 1);
  v1024 = vmlaq_n_f64(v1023, v354, v1257.f64[0]);
  v930 = vmlaq_laneq_f64(v929, v354, v1257, 1);
  v970 = vmlaq_n_f64(v969, v355, v1257.f64[0]);
  v952 = vmlaq_laneq_f64(v951, v355, v1257, 1);
  v1044 = vmlaq_n_f64(v1043, v356, v1257.f64[0]);
  v1039 = vmlaq_laneq_f64(v1038, v356, v1257, 1);
  v1034 = vmlaq_n_f64(v1033, v357, v1257.f64[0]);
  v849 = vmlaq_laneq_f64(v353, v357, v1257, 1);
  v768 = vmlaq_n_f64(v767, v358, v1257.f64[0]);
  v914 = vmlaq_laneq_f64(v913, v358, v1257, 1);
  v909 = vmlaq_n_f64(v908, v359, v1257.f64[0]);
  v924 = vmlaq_laneq_f64(v923, v359, v1257, 1);
  v495 = v1162;
  v492.f64[0] = v1163.f64[0];
  v437 = v1161;
  v512 = v1167;
  v440 = v1168;
  v444 = v1175;
  v436 = v1170;
  v438 = v1176;
  v439 = v1171;
  v442 = v1172;
  v443 = v1169.f64[0];
  v478 = v1174;
  v481 = v1178;
  v467 = v1173;
  v468 = v1177;
  v501 = v1179;
  v617 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1132, v1090.f64[0]), v1138, v1090, 1), v1144, v1091.f64[0]), v1150, v1091, 1), v1156, v1092.f64[0]), v1162, v1092, 1), v1168, v1093.f64[0]),
             v1174,
             v1093,
             1),
           v1180,
           *(double *)v1094);
  v441 = v1180;
  v622 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1133, v1090.f64[0]), v1139, v1090, 1), v1145, v1091.f64[0]), v1151, v1091, 1), v1157, v1092.f64[0]), v1163, v1092, 1), v1169, v1093.f64[0]),
             v1175,
             v1093,
             1),
           v1181,
           *(double *)v1094);
  v626 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1134, v1090.f64[0]), v1140, v1090, 1), v1146, v1091.f64[0]), v1152, v1091, 1), v1158, v1092.f64[0]), v1164, v1092, 1), v1170, v1093.f64[0]),
             v1176,
             v1093,
             1),
           v1182,
           *(double *)v1094);
  v469 = v1181;
  v470 = v1182;
  v471 = v1183;
  v498 = v1184;
  v615 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, v1090.f64[0]), v1142, v1090, 1), v1148, v1091.f64[0]), v1154, v1091, 1), v1160, v1092.f64[0]), v1166, v1092, 1), v1172, v1093.f64[0]),
             v1178,
             v1093,
             1),
           v1184,
           *(double *)v1094);
  v430 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1135, v1090.f64[0]), v1141, v1090, 1), v1147, v1091.f64[0]), v1153, v1091, 1), v1159, v1092.f64[0]), v1165, v1092, 1), v1171, v1093.f64[0]),
             v1177,
             v1093,
             1),
           v1183,
           *(double *)v1094);
  v431 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1137, v1090.f64[0]), v1143, v1090, 1), v1149, v1091.f64[0]), v1155, v1091, 1), v1161, v1092.f64[0]), v1167, v1092, 1), v1173, v1093.f64[0]),
             v1179,
             v1093,
             1),
           v1185,
           *(double *)v1094);
  v484 = v1185;
  v360 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1132, *(double *)&v1094[8]), v1138, *(float64x2_t *)&v1094[8], 1), v1144, *(double *)&v1094[24]), v1150, *(float64x2_t *)&v1094[24], 1), v1156, *(double *)&v1094[40]), v1162, *(float64x2_t *)&v1094[40], 1), v1168, *(double *)&v1094[56]),
             v1174,
             *(float64x2_t *)&v1094[56],
             1),
           v1180,
           *(double *)&v1094[72]);
  v361 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1133, *(double *)&v1094[8]), v1139, *(float64x2_t *)&v1094[8], 1), v1145, *(double *)&v1094[24]), v1151, *(float64x2_t *)&v1094[24], 1), v1157, *(double *)&v1094[40]), v1163, *(float64x2_t *)&v1094[40], 1), v1169, *(double *)&v1094[56]),
             v1175,
             *(float64x2_t *)&v1094[56],
             1),
           v1181,
           *(double *)&v1094[72]);
  v362 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1134, *(double *)&v1094[8]), v1140, *(float64x2_t *)&v1094[8], 1), v1146, *(double *)&v1094[24]), v1152, *(float64x2_t *)&v1094[24], 1), v1158, *(double *)&v1094[40]), v1164, *(float64x2_t *)&v1094[40], 1), v1170, *(double *)&v1094[56]),
             v1176,
             *(float64x2_t *)&v1094[56],
             1),
           v1182,
           *(double *)&v1094[72]);
  v363 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1135, *(double *)&v1094[8]), v1141, *(float64x2_t *)&v1094[8], 1), v1147, *(double *)&v1094[24]), v1153, *(float64x2_t *)&v1094[24], 1), v1159, *(double *)&v1094[40]), v1165, *(float64x2_t *)&v1094[40], 1), v1171, *(double *)&v1094[56]),
             v1177,
             *(float64x2_t *)&v1094[56],
             1),
           v1183,
           *(double *)&v1094[72]);
  v364 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, *(double *)&v1094[8]), v1142, *(float64x2_t *)&v1094[8], 1), v1148, *(double *)&v1094[24]), v1154, *(float64x2_t *)&v1094[24], 1), v1160, *(double *)&v1094[40]), v1166, *(float64x2_t *)&v1094[40], 1), v1172, *(double *)&v1094[56]),
             v1178,
             *(float64x2_t *)&v1094[56],
             1),
           v1184,
           *(double *)&v1094[72]);
  v365 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1137, *(double *)&v1094[8]), v1143, *(float64x2_t *)&v1094[8], 1), v1149, *(double *)&v1094[24]), v1155, *(float64x2_t *)&v1094[24], 1), v1161, *(double *)&v1094[40]), v1167, *(float64x2_t *)&v1094[40], 1), v1173, *(double *)&v1094[56]),
             v1179,
             *(float64x2_t *)&v1094[56],
             1),
           v1185,
           *(double *)&v1094[72]);
  v562 = vmlaq_n_f64(vmulq_n_f64(v617, v1132.f64[0]), v360, v1138.f64[0]);
  v556 = vmlaq_n_f64(vmulq_n_f64(v622, v1132.f64[0]), v361, v1138.f64[0]);
  v520 = vmlaq_n_f64(vmulq_n_f64(v615, v1132.f64[0]), v364, v1138.f64[0]);
  v518 = vmlaq_n_f64(vmulq_n_f64(v431, v1132.f64[0]), v365, v1138.f64[0]);
  v552 = vmlaq_laneq_f64(vmulq_laneq_f64(v617, v1132, 1), v360, v1138, 1);
  v546 = vmlaq_laneq_f64(vmulq_laneq_f64(v622, v1132, 1), v361, v1138, 1);
  v544 = vmlaq_laneq_f64(vmulq_laneq_f64(v615, v1132, 1), v364, v1138, 1);
  v549 = vmlaq_laneq_f64(vmulq_laneq_f64(v431, v1132, 1), v365, v1138, 1);
  v541 = vmlaq_n_f64(vmulq_n_f64(v617, v1133.f64[0]), v360, v1139.f64[0]);
  v515 = vmlaq_n_f64(vmulq_n_f64(v622, v1133.f64[0]), v361, v1139.f64[0]);
  v634 = vmlaq_n_f64(vmulq_n_f64(v615, v1133.f64[0]), v364, v1139.f64[0]);
  v736 = vmlaq_n_f64(vmulq_n_f64(v431, v1133.f64[0]), v365, v1139.f64[0]);
  v733 = vmlaq_laneq_f64(vmulq_laneq_f64(v617, v1133, 1), v360, v1139, 1);
  v719 = vmlaq_laneq_f64(vmulq_laneq_f64(v622, v1133, 1), v361, v1139, 1);
  v524 = vmlaq_laneq_f64(vmulq_laneq_f64(v615, v1133, 1), v364, v1139, 1);
  v513 = vmlaq_laneq_f64(vmulq_laneq_f64(v431, v1133, 1), v365, v1139, 1);
  v588 = vmlaq_n_f64(vmulq_n_f64(v617, v1134.f64[0]), v360, v1140.f64[0]);
  v597 = vmlaq_n_f64(vmulq_n_f64(v622, v1134.f64[0]), v361, v1140.f64[0]);
  v571 = vmlaq_n_f64(vmulq_n_f64(v431, v1134.f64[0]), v365, v1140.f64[0]);
  v567 = vmlaq_laneq_f64(vmulq_laneq_f64(v617, v1134, 1), v360, v1140, 1);
  v755 = vmlaq_laneq_f64(vmulq_laneq_f64(v622, v1134, 1), v361, v1140, 1);
  v713 = vmlaq_laneq_f64(vmulq_laneq_f64(v626, v1134, 1), v362, v1140, 1);
  v777 = vmlaq_laneq_f64(vmulq_laneq_f64(v615, v1134, 1), v364, v1140, 1);
  v742 = vmlaq_laneq_f64(vmulq_laneq_f64(v431, v1134, 1), v365, v1140, 1);
  v738 = vmlaq_n_f64(vmulq_n_f64(v617, v1135.f64[0]), v360, v1141.f64[0]);
  v594 = vmlaq_n_f64(vmulq_n_f64(v622, v1135.f64[0]), v361, v1141.f64[0]);
  v708 = vmlaq_n_f64(vmulq_n_f64(v626, v1135.f64[0]), v362, v1141.f64[0]);
  v629 = vmlaq_n_f64(vmulq_n_f64(v615, v1135.f64[0]), v364, v1141.f64[0]);
  v620 = vmlaq_n_f64(vmulq_n_f64(v431, v1135.f64[0]), v365, v1141.f64[0]);
  v610 = vmlaq_laneq_f64(vmulq_laneq_f64(v617, v1135, 1), v360, v1141, 1);
  v726 = vmlaq_laneq_f64(vmulq_laneq_f64(v622, v1135, 1), v361, v1141, 1);
  v538 = vmlaq_laneq_f64(vmulq_laneq_f64(v626, v1135, 1), v362, v1141, 1);
  v772 = vmlaq_laneq_f64(vmulq_laneq_f64(v615, v1135, 1), v364, v1141, 1);
  v536 = vmlaq_laneq_f64(vmulq_laneq_f64(v431, v1135, 1), v365, v1141, 1);
  v533 = vmlaq_n_f64(vmulq_n_f64(v617, v1136.f64[0]), v360, v1142.f64[0]);
  v748 = vmlaq_n_f64(vmulq_n_f64(v622, v1136.f64[0]), v361, v1142.f64[0]);
  v665 = vmlaq_n_f64(vmulq_n_f64(v626, v1136.f64[0]), v362, v1142.f64[0]);
  v679 = vmlaq_n_f64(vmulq_n_f64(v615, v1136.f64[0]), v364, v1142.f64[0]);
  v697 = vmlaq_n_f64(vmulq_n_f64(v431, v1136.f64[0]), v365, v1142.f64[0]);
  v672 = vmlaq_laneq_f64(vmulq_laneq_f64(v617, v1136, 1), v360, v1142, 1);
  v685 = vmlaq_laneq_f64(vmulq_laneq_f64(v622, v1136, 1), v361, v1142, 1);
  v658 = vmlaq_laneq_f64(vmulq_laneq_f64(v626, v1136, 1), v362, v1142, 1);
  v640 = vmlaq_laneq_f64(vmulq_laneq_f64(v615, v1136, 1), v364, v1142, 1);
  v646 = vmlaq_laneq_f64(vmulq_laneq_f64(v431, v1136, 1), v365, v1142, 1);
  v599 = vmlaq_n_f64(vmulq_n_f64(v617, v1137.f64[0]), v360, v1143.f64[0]);
  v761 = vmlaq_laneq_f64(vmulq_laneq_f64(v617, v1137, 1), v360, v1143, 1);
  v604 = vmlaq_n_f64(vmulq_n_f64(v622, v1137.f64[0]), v361, v1143.f64[0]);
  v528 = vmlaq_laneq_f64(vmulq_laneq_f64(v622, v1137, 1), v361, v1143, 1);
  v623 = vmlaq_n_f64(vmulq_n_f64(v626, v1137.f64[0]), v362, v1143.f64[0]);
  v525 = vmlaq_laneq_f64(vmulq_laneq_f64(v626, v1137, 1), v362, v1143, 1);
  v618 = vmlaq_n_f64(vmulq_n_f64(v615, v1137.f64[0]), v364, v1143.f64[0]);
  v608 = vmlaq_n_f64(vmulq_n_f64(v431, v1137.f64[0]), v365, v1143.f64[0]);
  v613 = vmlaq_laneq_f64(vmulq_laneq_f64(v431, v1137, 1), v365, v1143, 1);
  v434 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1132, v1095.f64[0]), v1138, v1095, 1), v1144, v1096.f64[0]), v1150, v1096, 1), v1156, v1097.f64[0]), v1162, v1097, 1), v1168, v1098.f64[0]),
             v1174,
             v1098,
             1),
           v1180,
           v1099);
  v366 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1133, v1095.f64[0]), v1139, v1095, 1), v1145, v1096.f64[0]), v1151, v1096, 1), v1157, v1097.f64[0]), v1163, v1097, 1), v1169, v1098.f64[0]),
             v1175,
             v1098,
             1),
           v1181,
           v1099);
  v432 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1134, v1095.f64[0]), v1140, v1095, 1), v1146, v1096.f64[0]), v1152, v1096, 1), v1158, v1097.f64[0]), v1164, v1097, 1), v1170, v1098.f64[0]),
             v1176,
             v1098,
             1),
           v1182,
           v1099);
  v367 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1135, v1095.f64[0]), v1141, v1095, 1), v1147, v1096.f64[0]), v1153, v1096, 1), v1159, v1097.f64[0]), v1165, v1097, 1), v1171, v1098.f64[0]),
             v1177,
             v1098,
             1),
           v1183,
           v1099);
  v368 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, v1095.f64[0]), v1142, v1095, 1), v1148, v1096.f64[0]), v1154, v1096, 1), v1160, v1097.f64[0]), v1166, v1097, 1), v1172, v1098.f64[0]),
             v1178,
             v1098,
             1),
           v1184,
           v1099);
  v433 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1137, v1095.f64[0]), v1143, v1095, 1), v1149, v1096.f64[0]), v1155, v1096, 1), v1161, v1097.f64[0]), v1167, v1097, 1), v1173, v1098.f64[0]),
             v1179,
             v1098,
             1),
           v1185,
           v1099);
  v452 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1132, v1100.f64[0]), v1138, v1100, 1), v1144, v1101.f64[0]), v1150, v1101, 1), v1156, v1102.f64[0]), v1162, v1102, 1), v1168, v1103.f64[0]),
             v1174,
             v1103,
             1),
           v1180,
           v1104);
  v511 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1133, v1100.f64[0]), v1139, v1100, 1), v1145, v1101.f64[0]), v1151, v1101, 1), v1157, v1102.f64[0]), v1163, v1102, 1), v1169, v1103.f64[0]),
             v1175,
             v1103,
             1),
           v1181,
           v1104);
  v464 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1135, v1100.f64[0]), v1141, v1100, 1), v1147, v1101.f64[0]), v1153, v1101, 1), v1159, v1102.f64[0]), v1165, v1102, 1), v1171, v1103.f64[0]),
             v1177,
             v1103,
             1),
           v1183,
           v1104);
  v466 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1134, v1100.f64[0]), v1140, v1100, 1), v1146, v1101.f64[0]), v1152, v1101, 1), v1158, v1102.f64[0]), v1164, v1102, 1), v1170, v1103.f64[0]),
             v1176,
             v1103,
             1),
           v1182,
           v1104);
  v458 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1137, v1100.f64[0]), v1143, v1100, 1), v1149, v1101.f64[0]), v1155, v1101, 1), v1161, v1102.f64[0]), v1167, v1102, 1), v1173, v1103.f64[0]),
             v1179,
             v1103,
             1),
           v1185,
           v1104);
  v462 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, v1100.f64[0]), v1142, v1100, 1), v1148, v1101.f64[0]), v1154, v1101, 1), v1160, v1102.f64[0]), v1166, v1102, 1), v1172, v1103.f64[0]),
             v1178,
             v1103,
             1),
           v1184,
           v1104);
  v369 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v615, v1134.f64[0]), v364, v1140.f64[0]), v368, v1146.f64[0]), v462, v1152.f64[0]);
  v616 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v615, v1137, 1), v364, v1143, 1), v368, v1149, 1), v462, v1155, 1);
  v370 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1132, v1105.f64[0]), v1138, v1105, 1), v1144, v1106.f64[0]), v1150, v1106, 1), v1156, v1107.f64[0]), v1162, v1107, 1), v1168, v1108.f64[0]),
             v1174,
             v1108,
             1),
           v1180,
           v1109);
  v371 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1133, v1105.f64[0]), v1139, v1105, 1), v1145, v1106.f64[0]), v1151, v1106, 1), v1157, v1107.f64[0]), v1163, v1107, 1), v1169, v1108.f64[0]),
             v1175,
             v1108,
             1),
           v1181,
           v1109);
  v460 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1134, v1105.f64[0]), v1140, v1105, 1), v1146, v1106.f64[0]), v1152, v1106, 1), v1158, v1107.f64[0]), v1164, v1107, 1), v1170, v1108.f64[0]),
             v1176,
             v1108,
             1),
           v1182,
           v1109);
  v455 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, v1105.f64[0]), v1142, v1105, 1), v1148, v1106.f64[0]), v1154, v1106, 1), v1160, v1107.f64[0]), v1166, v1107, 1), v1172, v1108.f64[0]),
             v1178,
             v1108,
             1),
           v1184,
           v1109);
  v456 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1135, v1105.f64[0]), v1141, v1105, 1), v1147, v1106.f64[0]), v1153, v1106, 1), v1159, v1107.f64[0]), v1165, v1107, 1), v1171, v1108.f64[0]),
             v1177,
             v1108,
             1),
           v1183,
           v1109);
  v453 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1137, v1105.f64[0]), v1143, v1105, 1), v1149, v1106.f64[0]), v1155, v1106, 1), v1161, v1107.f64[0]), v1167, v1107, 1), v1173, v1108.f64[0]),
             v1179,
             v1108,
             1),
           v1185,
           v1109);
  v449 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1133, v1110.f64[0]), v1139, v1110, 1), v1145, v1111.f64[0]), v1151, v1111, 1), v1157, v1112.f64[0]), v1163, v1112, 1), v1169, v1113.f64[0]),
             v1175,
             v1113,
             1),
           v1181,
           v1114);
  v451 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1132, v1110.f64[0]), v1138, v1110, 1), v1144, v1111.f64[0]), v1150, v1111, 1), v1156, v1112.f64[0]), v1162, v1112, 1), v1168, v1113.f64[0]),
             v1174,
             v1113,
             1),
           v1180,
           v1114);
  v510 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1135, v1110.f64[0]), v1141, v1110, 1), v1147, v1111.f64[0]), v1153, v1111, 1), v1159, v1112.f64[0]), v1165, v1112, 1), v1171, v1113.f64[0]),
             v1177,
             v1113,
             1),
           v1183,
           v1114);
  v447 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, v1110.f64[0]), v1142, v1110, 1), v1148, v1111.f64[0]), v1154, v1111, 1), v1160, v1112.f64[0]), v1166, v1112, 1), v1172, v1113.f64[0]),
             v1178,
             v1113,
             1),
           v1184,
           v1114);
  v445 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1134, v1110.f64[0]), v1140, v1110, 1), v1146, v1111.f64[0]), v1152, v1111, 1), v1158, v1112.f64[0]), v1164, v1112, 1), v1170, v1113.f64[0]),
             v1176,
             v1113,
             1),
           v1182,
           v1114);
  v446 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1137, v1110.f64[0]), v1143, v1110, 1), v1149, v1111.f64[0]), v1155, v1111, 1), v1161, v1112.f64[0]), v1167, v1112, 1), v1173, v1113.f64[0]),
             v1179,
             v1113,
             1),
           v1185,
           v1114);
  v557 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v556, v366, v1144.f64[0]), v511, v1150.f64[0]), v371, v1156.f64[0]);
  v521 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v520, v368, v1144.f64[0]), v462, v1150.f64[0]), v455, v1156.f64[0]);
  v547 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v546, v366, v1144, 1), v511, v1150, 1), v371, v1156, 1);
  v545 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v544, v368, v1144, 1), v462, v1150, 1), v455, v1156, 1);
  v516 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v515, v366, v1145.f64[0]), v511, v1151.f64[0]), v371, v1157.f64[0]);
  v635 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v634, v368, v1145.f64[0]), v462, v1151.f64[0]), v455, v1157.f64[0]);
  v372 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v719, v366, v1145, 1), v511, v1151, 1), v371, v1157, 1);
  v598 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v597, v366, v1146.f64[0]), v511, v1152.f64[0]), v371, v1158.f64[0]);
  v756 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v755, v366, v1146, 1), v511, v1152, 1), v371, v1158, 1);
  v595 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v594, v366, v1147.f64[0]), v511, v1153.f64[0]), v371, v1159.f64[0]);
  v373 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v524, v368, v1145, 1), v462, v1151, 1), v455, v1157, 1), v447, v1163, 1);
  v778 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v777, v368, v1146, 1), v462, v1152, 1), v455, v1158, 1), v447, v1164, 1);
  v739 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v738, v434, v1147.f64[0]), v452, v1153.f64[0]), v370, v1159.f64[0]), v451, v1165.f64[0]);
  v630 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v629, v368, v1147.f64[0]), v462, v1153.f64[0]), v455, v1159.f64[0]), v447, v1165.f64[0]);
  v611 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v610, v434, v1147, 1), v452, v1153, 1), v370, v1159, 1), v451, v1165, 1);
  v727 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v726, v366, v1147, 1), v511, v1153, 1), v371, v1159, 1), v449, v1165, 1);
  v773 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v772, v368, v1147, 1), v462, v1153, 1), v455, v1159, 1), v447, v1165, 1);
  v534 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v533, v434, v1148.f64[0]), v452, v1154.f64[0]), v370, v1160.f64[0]), v451, v1166.f64[0]);
  v749 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v748, v366, v1148.f64[0]), v511, v1154.f64[0]), v371, v1160.f64[0]), v449, v1166.f64[0]);
  v680 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v679, v368, v1148.f64[0]), v462, v1154.f64[0]), v455, v1160.f64[0]), v447, v1166.f64[0]);
  v673 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v672, v434, v1148, 1), v452, v1154, 1), v370, v1160, 1), v451, v1166, 1);
  v686 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v685, v366, v1148, 1), v511, v1154, 1), v371, v1160, 1), v449, v1166, 1);
  v641 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v640, v368, v1148, 1), v462, v1154, 1), v455, v1160, 1), v447, v1166, 1);
  v600 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v599, v434, v1149.f64[0]), v452, v1155.f64[0]), v370, v1161.f64[0]), v451, v1167.f64[0]);
  v762 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v761, v434, v1149, 1), v452, v1155, 1), v370, v1161, 1), v451, v1167, 1);
  v605 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v604, v366, v1149.f64[0]), v511, v1155.f64[0]), v371, v1161.f64[0]), v449, v1167.f64[0]);
  v529 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v528, v366, v1149, 1), v511, v1155, 1), v371, v1161, 1), v449, v1167, 1);
  v619 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v618, v368, v1149.f64[0]), v462, v1155.f64[0]), v455, v1161.f64[0]), v447, v1167.f64[0]);
  v374 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1132, v1115.f64[0]), v1138, v1115, 1), v1144, v1116.f64[0]), v1150, v1116, 1), v1156, v1117.f64[0]), v1162, v1117, 1), v1168, v1118.f64[0]),
             v1174,
             v1118,
             1),
           v1180,
           v1119);
  v375 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1133, v1115.f64[0]), v1139, v1115, 1), v1145, v1116.f64[0]), v1151, v1116, 1), v1157, v1117.f64[0]), v1163, v1117, 1), v1169, v1118.f64[0]),
             v1175,
             v1118,
             1),
           v1181,
           v1119);
  v376 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1134, v1115.f64[0]), v1140, v1115, 1), v1146, v1116.f64[0]), v1152, v1116, 1), v1158, v1117.f64[0]), v1164, v1117, 1), v1170, v1118.f64[0]),
             v1176,
             v1118,
             1),
           v1182,
           v1119);
  v377 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1135, v1115.f64[0]), v1141, v1115, 1), v1147, v1116.f64[0]), v1153, v1116, 1), v1159, v1117.f64[0]), v1165, v1117, 1), v1171, v1118.f64[0]),
             v1177,
             v1118,
             1),
           v1183,
           v1119);
  v378 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, v1115.f64[0]), v1142, v1115, 1), v1148, v1116.f64[0]), v1154, v1116, 1), v1160, v1117.f64[0]), v1166, v1117, 1), v1172, v1118.f64[0]),
             v1178,
             v1118,
             1),
           v1184,
           v1119);
  v379 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1137, v1115.f64[0]), v1143, v1115, 1), v1149, v1116.f64[0]), v1155, v1116, 1), v1161, v1117.f64[0]), v1167, v1117, 1), v1173, v1118.f64[0]),
             v1179,
             v1118,
             1),
           v1185,
           v1119);
  v509 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1132, v1120.f64[0]), v1138, v1120, 1), v1144, v1121.f64[0]), v1150, v1121, 1), v1156, v1122.f64[0]), v1162, v1122, 1), v1168, v1123.f64[0]),
             v1174,
             v1123,
             1),
           v1180,
           v1124);
  v508 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, v1120.f64[0]), v1142, v1120, 1), v1148, v1121.f64[0]), v1154, v1121, 1), v1160, v1122.f64[0]), v1166, v1122, 1), v1172, v1123.f64[0]),
             v1178,
             v1123,
             1),
           v1184,
           v1124);
  v507 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1137, v1120.f64[0]), v1143, v1120, 1), v1149, v1121.f64[0]), v1155, v1121, 1), v1161, v1122.f64[0]), v1167, v1122, 1), v1173, v1123.f64[0]),
             v1179,
             v1123,
             1),
           v1185,
           v1124);
  v380 = vmlaq_n_f64(vmlaq_n_f64(v557, v449, v1162.f64[0]), v375, v1168.f64[0]);
  v523 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v626, v1132.f64[0]), v362, v1138.f64[0]), v432, v1144.f64[0]), v466, v1150.f64[0]), v460, v1156.f64[0]), v445, v1162.f64[0]), v376, v1168.f64[0]);
  v522 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v430, v1132.f64[0]), v363, v1138.f64[0]), v367, v1144.f64[0]), v464, v1150.f64[0]), v456, v1156.f64[0]), v510, v1162.f64[0]), v377, v1168.f64[0]);
  v519 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v518, v433, v1144.f64[0]), v458, v1150.f64[0]), v453, v1156.f64[0]), v446, v1162.f64[0]), v379, v1168.f64[0]);
  v548 = vmlaq_laneq_f64(vmlaq_laneq_f64(v547, v449, v1162, 1), v375, v1168, 1);
  v551 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v626, v1132, 1), v362, v1138, 1), v432, v1144, 1), v466, v1150, 1), v460, v1156, 1), v445, v1162, 1), v376, v1168, 1);
  v543 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v430, v1132, 1), v363, v1138, 1), v367, v1144, 1), v464, v1150, 1), v456, v1156, 1), v510, v1162, 1), v377, v1168, 1);
  v381 = vmlaq_n_f64(vmlaq_n_f64(v516, v449, v1163.f64[0]), v375, v1169.f64[0]);
  v744 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v626, v1133.f64[0]), v362, v1139.f64[0]), v432, v1145.f64[0]), v466, v1151.f64[0]), v460, v1157.f64[0]), v445, v1163.f64[0]), v376, v1169.f64[0]);
  v703 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v430, v1133.f64[0]), v363, v1139.f64[0]), v367, v1145.f64[0]), v464, v1151.f64[0]), v456, v1157.f64[0]), v510, v1163.f64[0]), v377, v1169.f64[0]);
  v720 = vmlaq_laneq_f64(vmlaq_laneq_f64(v372, v449, v1163, 1), v375, v1169, 1);
  v382 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v626, v1133, 1), v362, v1139, 1), v432, v1145, 1), v466, v1151, 1), v460, v1157, 1), v445, v1163, 1), v376, v1169, 1);
  v592 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v430, v1133, 1), v363, v1139, 1), v367, v1145, 1), v464, v1151, 1), v456, v1157, 1), v510, v1163, 1), v377, v1169, 1);
  v383 = vmlaq_laneq_f64(v373, v378, v1169, 1);
  v589 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v588, v434, v1146.f64[0]), v452, v1152.f64[0]), v370, v1158.f64[0]), v451, v1164.f64[0]), v374, v1170.f64[0]);
  v384 = vmlaq_n_f64(vmlaq_n_f64(v598, v449, v1164.f64[0]), v375, v1170.f64[0]);
  v584 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v626, v1134.f64[0]), v362, v1140.f64[0]), v432, v1146.f64[0]), v466, v1152.f64[0]), v460, v1158.f64[0]), v445, v1164.f64[0]), v376, v1170.f64[0]);
  v385 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v430, v1134.f64[0]), v363, v1140.f64[0]), v367, v1146.f64[0]), v464, v1152.f64[0]), v456, v1158.f64[0]), v510, v1164.f64[0]), v377, v1170.f64[0]);
  v757 = vmlaq_laneq_f64(vmlaq_laneq_f64(v756, v449, v1164, 1), v375, v1170, 1);
  v714 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v713, v432, v1146, 1), v466, v1152, 1), v460, v1158, 1), v445, v1164, 1), v376, v1170, 1);
  v580 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v430, v1134, 1), v363, v1140, 1), v367, v1146, 1), v464, v1152, 1), v456, v1158, 1), v510, v1164, 1), v377, v1170, 1);
  v386 = vmlaq_n_f64(vmlaq_n_f64(v595, v449, v1165.f64[0]), v375, v1171.f64[0]);
  v709 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v708, v432, v1147.f64[0]), v466, v1153.f64[0]), v460, v1159.f64[0]), v445, v1165.f64[0]), v376, v1171.f64[0]);
  v741 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v430, v1135.f64[0]), v363, v1141.f64[0]), v367, v1147.f64[0]), v464, v1153.f64[0]), v456, v1159.f64[0]), v510, v1165.f64[0]), v377, v1171.f64[0]);
  v728 = vmlaq_laneq_f64(v727, v375, v1171, 1);
  v539 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v538, v432, v1147, 1), v466, v1153, 1), v460, v1159, 1), v445, v1165, 1), v376, v1171, 1);
  v735 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v430, v1135, 1), v363, v1141, 1), v367, v1147, 1), v464, v1153, 1), v456, v1159, 1), v510, v1165, 1), v377, v1171, 1);
  v750 = vmlaq_n_f64(v749, v375, v1172.f64[0]);
  v666 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v665, v432, v1148.f64[0]), v466, v1154.f64[0]), v460, v1160.f64[0]), v445, v1166.f64[0]), v376, v1172.f64[0]);
  v692 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v430, v1136.f64[0]), v363, v1142.f64[0]), v367, v1148.f64[0]), v464, v1154.f64[0]), v456, v1160.f64[0]), v510, v1166.f64[0]), v377, v1172.f64[0]);
  v687 = vmlaq_laneq_f64(v686, v375, v1172, 1);
  v659 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v658, v432, v1148, 1), v466, v1154, 1), v460, v1160, 1), v445, v1166, 1), v376, v1172, 1);
  v652 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v430, v1136, 1), v363, v1142, 1), v367, v1148, 1), v464, v1154, 1), v456, v1160, 1), v510, v1166, 1), v377, v1172, 1);
  v606 = vmlaq_n_f64(v605, v375, v1173.f64[0]);
  v530 = vmlaq_laneq_f64(v529, v375, v1173, 1);
  v624 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v623, v432, v1149.f64[0]), v466, v1155.f64[0]), v460, v1161.f64[0]), v445, v1167.f64[0]), v376, v1173.f64[0]);
  v526 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v525, v432, v1149, 1), v466, v1155, 1), v460, v1161, 1), v445, v1167, 1), v376, v1173, 1);
  v602 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v430, v1137.f64[0]), v363, v1143.f64[0]), v367, v1149.f64[0]), v464, v1155.f64[0]), v456, v1161.f64[0]), v510, v1167.f64[0]), v377, v1173.f64[0]);
  v627 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v430, v1137, 1), v363, v1143, 1), v367, v1149, 1), v464, v1155, 1), v456, v1161, 1), v510, v1167, 1), v377, v1173, 1);
  v563 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v562, v434, v1144.f64[0]), v452, v1150.f64[0]), v370, v1156.f64[0]), v451, v1162.f64[0]), v374, v1168.f64[0]), v509, v1174.f64[0]);
  v387 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1133, v1120.f64[0]), v1139, v1120, 1), v1145, v1121.f64[0]), v1151, v1121, 1), v1157, v1122.f64[0]), v1163, v1122, 1), v1169, v1123.f64[0]),
             v1175,
             v1123,
             1),
           v1181,
           v1124);
  v558 = vmlaq_n_f64(v380, v387, v1174.f64[0]);
  v388 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1134, v1120.f64[0]), v1140, v1120, 1), v1146, v1121.f64[0]), v1152, v1121, 1), v1158, v1122.f64[0]), v1164, v1122, 1), v1170, v1123.f64[0]),
             v1176,
             v1123,
             1),
           v1182,
           v1124);
  v389 = vmlaq_n_f64(v523, v388, v1174.f64[0]);
  v390 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1135, v1120.f64[0]), v1141, v1120, 1), v1147, v1121.f64[0]), v1153, v1121, 1), v1159, v1122.f64[0]), v1165, v1122, 1), v1171, v1123.f64[0]),
             v1177,
             v1123,
             1),
           v1183,
           v1124);
  v391 = vmlaq_n_f64(v522, v390, v1174.f64[0]);
  v392 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v552, v434, v1144, 1), v452, v1150, 1), v370, v1156, 1), v451, v1162, 1), v374, v1168, 1), v509, v1174, 1);
  v393 = vmlaq_laneq_f64(v548, v387, v1174, 1);
  v394 = vmlaq_laneq_f64(v551, v388, v1174, 1);
  v395 = vmlaq_laneq_f64(v543, v390, v1174, 1);
  v542 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v541, v434, v1145.f64[0]), v452, v1151.f64[0]), v370, v1157.f64[0]), v451, v1163.f64[0]), v374, v1169.f64[0]), v509, v1175.f64[0]);
  v517 = vmlaq_n_f64(v381, v387, v1175.f64[0]);
  v745 = vmlaq_n_f64(v744, v388, v1175.f64[0]);
  v704 = vmlaq_n_f64(v703, v390, v1175.f64[0]);
  v734 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v733, v434, v1145, 1), v452, v1151, 1), v370, v1157, 1), v451, v1163, 1), v374, v1169, 1), v509, v1175, 1);
  v721 = vmlaq_laneq_f64(v720, v387, v1175, 1);
  v593 = vmlaq_laneq_f64(v382, v388, v1175, 1);
  v396 = vmlaq_laneq_f64(v592, v390, v1175, 1);
  v397 = vmlaq_n_f64(v384, v387, v1176.f64[0]);
  v398 = vmlaq_n_f64(v584, v388, v1176.f64[0]);
  v576 = vmlaq_n_f64(v385, v390, v1176.f64[0]);
  v532 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v369, v455, v1158.f64[0]), v447, v1164.f64[0]), v378, v1170.f64[0]), v508, v1176.f64[0]);
  v399 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v567, v434, v1146, 1), v452, v1152, 1), v370, v1158, 1), v451, v1164, 1), v374, v1170, 1), v509, v1176, 1);
  v400 = vmlaq_laneq_f64(v757, v387, v1176, 1);
  v715 = vmlaq_laneq_f64(v714, v388, v1176, 1);
  v401 = vmlaq_laneq_f64(v580, v390, v1176, 1);
  v740 = vmlaq_n_f64(vmlaq_n_f64(v739, v374, v1171.f64[0]), v509, v1177.f64[0]);
  v596 = vmlaq_n_f64(v386, v387, v1177.f64[0]);
  v402 = vmlaq_n_f64(v709, v388, v1177.f64[0]);
  v403 = vmlaq_n_f64(v741, v390, v1177.f64[0]);
  v612 = vmlaq_laneq_f64(vmlaq_laneq_f64(v611, v374, v1171, 1), v509, v1177, 1);
  v404 = vmlaq_laneq_f64(v728, v387, v1177, 1);
  v540 = vmlaq_laneq_f64(v539, v388, v1177, 1);
  v405 = vmlaq_laneq_f64(v735, v390, v1177, 1);
  v537 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v536, v433, v1147, 1), v458, v1153, 1), v453, v1159, 1), v446, v1165, 1), v379, v1171, 1), v507, v1177, 1);
  v535 = vmlaq_n_f64(vmlaq_n_f64(v534, v374, v1172.f64[0]), v509, v1178.f64[0]);
  v751 = vmlaq_n_f64(v750, v387, v1178.f64[0]);
  v667 = vmlaq_n_f64(v666, v388, v1178.f64[0]);
  v693 = vmlaq_n_f64(v692, v390, v1178.f64[0]);
  v698 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v697, v433, v1148.f64[0]), v458, v1154.f64[0]), v453, v1160.f64[0]), v446, v1166.f64[0]), v379, v1172.f64[0]), v507, v1178.f64[0]);
  v674 = vmlaq_laneq_f64(vmlaq_laneq_f64(v673, v374, v1172, 1), v509, v1178, 1);
  v688 = vmlaq_laneq_f64(v687, v387, v1178, 1);
  v660 = vmlaq_laneq_f64(v659, v388, v1178, 1);
  v653 = vmlaq_laneq_f64(v652, v390, v1178, 1);
  v647 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v646, v433, v1148, 1), v458, v1154, 1), v453, v1160, 1), v446, v1166, 1), v379, v1172, 1), v507, v1178, 1);
  v601 = vmlaq_n_f64(vmlaq_n_f64(v600, v374, v1173.f64[0]), v509, v1179.f64[0]);
  v763 = vmlaq_laneq_f64(vmlaq_laneq_f64(v762, v374, v1173, 1), v509, v1179, 1);
  v607 = vmlaq_n_f64(v606, v387, v1179.f64[0]);
  v531 = vmlaq_laneq_f64(v530, v387, v1179, 1);
  v625 = vmlaq_n_f64(v624, v388, v1179.f64[0]);
  v527 = vmlaq_laneq_f64(v526, v388, v1179, 1);
  v603 = vmlaq_n_f64(v602, v390, v1179.f64[0]);
  v628 = vmlaq_laneq_f64(v627, v390, v1179, 1);
  v609 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v608, v433, v1149.f64[0]), v458, v1155.f64[0]), v453, v1161.f64[0]), v446, v1167.f64[0]), v379, v1173.f64[0]), v507, v1179.f64[0]);
  v406 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1132, v1125.f64[0]), v1138, v1125, 1), v1144, v1126.f64[0]), v1150, v1126, 1), v1156, v1127.f64[0]), v1162, v1127, 1), v1168, v1128.f64[0]),
             v1174,
             v1128,
             1),
           v1180,
           v1118.f64[0]);
  v407 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1133, v1125.f64[0]), v1139, v1125, 1), v1145, v1126.f64[0]), v1151, v1126, 1), v1157, v1127.f64[0]), v1163, v1127, 1), v1169, v1128.f64[0]),
             v1175,
             v1128,
             1),
           v1181,
           v1118.f64[0]);
  v408 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1134, v1125.f64[0]), v1140, v1125, 1), v1146, v1126.f64[0]), v1152, v1126, 1), v1158, v1127.f64[0]), v1164, v1127, 1), v1170, v1128.f64[0]),
             v1176,
             v1128,
             1),
           v1182,
           v1118.f64[0]);
  v409 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1135, v1125.f64[0]), v1141, v1125, 1), v1147, v1126.f64[0]), v1153, v1126, 1), v1159, v1127.f64[0]), v1165, v1127, 1), v1171, v1128.f64[0]),
             v1177,
             v1128,
             1),
           v1183,
           v1118.f64[0]);
  v410 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1136, v1125.f64[0]), v1142, v1125, 1), v1148, v1126.f64[0]), v1154, v1126, 1), v1160, v1127.f64[0]), v1166, v1127, 1), v1172, v1128.f64[0]),
             v1178,
             v1128,
             1),
           v1184,
           v1118.f64[0]);
  v411 = vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1137, v1125.f64[0]), v1143, v1125, 1), v1149, v1126.f64[0]), v1155, v1126, 1), v1161, v1127.f64[0]), v1167, v1127, 1), v1173, v1128.f64[0]),
             v1179,
             v1128,
             1),
           v1185,
           v1118.f64[0]);
  v550 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v549, v433, v1144, 1), v458, v1150, 1), v453, v1156, 1), v446, v1162, 1), v379, v1168, 1), v507, v1174, 1), v411, v1180, 1);
  v737 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v736, v433, v1145.f64[0]), v458, v1151.f64[0]), v453, v1157.f64[0]), v446, v1163.f64[0]), v379, v1169.f64[0]), v507, v1175.f64[0]), v411, v1181.f64[0]);
  v514 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v513, v433, v1145, 1), v458, v1151, 1), v453, v1157, 1), v446, v1163, 1), v379, v1169, 1), v507, v1175, 1), v411, v1181, 1);
  v572 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v571, v433, v1146.f64[0]), v458, v1152.f64[0]), v453, v1158.f64[0]), v446, v1164.f64[0]), v379, v1170.f64[0]), v507, v1176.f64[0]), v411, v1182.f64[0]);
  v743 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v742, v433, v1146, 1), v458, v1152, 1), v453, v1158, 1), v446, v1164, 1), v379, v1170, 1), v507, v1176, 1), v411, v1182, 1);
  v621 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v620, v433, v1147.f64[0]), v458, v1153.f64[0]), v453, v1159.f64[0]), v446, v1165.f64[0]), v379, v1171.f64[0]), v507, v1177.f64[0]), v411, v1183.f64[0]);
  v614 = vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v613, v433, v1149, 1), v458, v1155, 1), v453, v1161, 1), v446, v1167, 1), v379, v1173, 1), v507, v1179, 1), v411, v1185, 1);
  v40[4] = vaddq_f64(v987, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v521, v447, v1162.f64[0]), v378, v1168.f64[0]), v508, v1174.f64[0]), v410, v1180.f64[0]));
  v40[5] = vaddq_f64(v888, vmlaq_n_f64(vmlaq_n_f64(v519, v507, v478.f64[0]), v411, v441.f64[0]));
  v40[2] = vaddq_f64(v895, vmlaq_n_f64(v389, v408, v441.f64[0]));
  v40[3] = vaddq_f64(v991, vmlaq_n_f64(v391, v409, v441.f64[0]));
  *v40 = vaddq_f64(v984, vmlaq_n_f64(v563, v406, v441.f64[0]));
  v40[1] = vaddq_f64(v1085, vmlaq_n_f64(v558, v407, v441.f64[0]));
  v71[4] = vaddq_f64(v822, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v545, v447, v495, 1), v378, v440, 1), v508, v478, 1), v410, v441, 1));
  v71[5] = vaddq_f64(__szd, v550);
  v71[2] = vaddq_f64(v826, vmlaq_laneq_f64(v394, v408, v441, 1));
  v71[3] = vaddq_f64(v960, vmlaq_laneq_f64(v395, v409, v441, 1));
  *v71 = vaddq_f64(v979, vmlaq_laneq_f64(v392, v406, v441, 1));
  v71[1] = vaddq_f64(v838, vmlaq_laneq_f64(v393, v407, v441, 1));
  v107[4] = vaddq_f64(v891, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v635, v447, v492.f64[0]), v378, v443), v508, v444.f64[0]), v410, v469.f64[0]));
  v107[5] = vaddq_f64(v940, v737);
  v107[2] = vaddq_f64(v786, vmlaq_n_f64(v745, v408, v469.f64[0]));
  v107[3] = vaddq_f64(v834, vmlaq_n_f64(v704, v409, v469.f64[0]));
  *v107 = vaddq_f64(v799, vmlaq_n_f64(v542, v406, v469.f64[0]));
  v107[1] = vaddq_f64(v796, vmlaq_n_f64(v517, v407, v469.f64[0]));
  v108[4] = vaddq_f64(v830, vmlaq_laneq_f64(vmlaq_laneq_f64(v383, v508, v444, 1), v410, v469, 1));
  v108[5] = vaddq_f64(v782, v514);
  v108[2] = vaddq_f64(v793, vmlaq_laneq_f64(v593, v408, v469, 1));
  v108[3] = vaddq_f64(v789, vmlaq_laneq_f64(v396, v409, v469, 1));
  *v108 = vaddq_f64(v811, vmlaq_laneq_f64(v734, v406, v469, 1));
  v108[1] = vaddq_f64(v807, vmlaq_laneq_f64(v721, v407, v469, 1));
  v109[4] = vaddq_f64(v943, vmlaq_n_f64(v532, v410, v470.f64[0]));
  v109[5] = vaddq_f64(v1055, v572);
  v109[2] = vaddq_f64(v803, vmlaq_n_f64(v398, v408, v470.f64[0]));
  v109[3] = vaddq_f64(v947, vmlaq_n_f64(v576, v409, v470.f64[0]));
  *v109 = vaddq_f64(v819, vmlaq_n_f64(vmlaq_n_f64(v589, v509, v438.f64[0]), v406, v470.f64[0]));
  v109[1] = vaddq_f64(v815, vmlaq_n_f64(v397, v407, v470.f64[0]));
  v110[4] = vaddq_f64(v903, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v778, v378, v436, 1), v508, v438, 1), v410, v470, 1));
  v110[5] = vaddq_f64(v899, v743);
  v110[2] = vaddq_f64(v1071, vmlaq_laneq_f64(v715, v408, v470, 1));
  v110[3] = vaddq_f64(v853, vmlaq_laneq_f64(v401, v409, v470, 1));
  *v110 = vaddq_f64(v956, vmlaq_laneq_f64(v399, v406, v470, 1));
  v110[1] = vaddq_f64(v1076, vmlaq_laneq_f64(v400, v407, v470, 1));
  v111[4] = vaddq_f64(v1051, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v630, v378, v439.f64[0]), v508, v468.f64[0]), v410, v471.f64[0]));
  v111[5] = vaddq_f64(v935, v621);
  v111[2] = vaddq_f64(v862, vmlaq_n_f64(v402, v408, v471.f64[0]));
  v111[3] = vaddq_f64(v857, vmlaq_n_f64(v403, v409, v471.f64[0]));
  *v111 = vaddq_f64(v877, vmlaq_n_f64(v740, v406, v471.f64[0]));
  v111[1] = vaddq_f64(v872, vmlaq_n_f64(v596, v407, v471.f64[0]));
  v112[4] = vaddq_f64(v995, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v773, v378, v439, 1), v508, v468, 1), v410, v471, 1));
  v112[5] = vaddq_f64(v867, vmlaq_laneq_f64(v537, v411, v471, 1));
  v112[2] = vaddq_f64(v1018, vmlaq_laneq_f64(v540, v408, v471, 1));
  v112[3] = vaddq_f64(v880, vmlaq_laneq_f64(v405, v409, v471, 1));
  *v112 = vaddq_f64(v844, vmlaq_laneq_f64(v612, v406, v471, 1));
  v112[1] = vaddq_f64(v884, vmlaq_laneq_f64(v404, v407, v471, 1));
  v113[4] = vaddq_f64(v1007, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v680, v378, v442.f64[0]), v508, v481.f64[0]), v410, v498.f64[0]));
  v113[5] = vaddq_f64(v1004, vmlaq_n_f64(v698, v411, v498.f64[0]));
  v113[2] = vaddq_f64(v1014, vmlaq_n_f64(v667, v408, v498.f64[0]));
  v113[3] = vaddq_f64(v1010, vmlaq_n_f64(v693, v409, v498.f64[0]));
  *v113 = vaddq_f64(v1000, vmlaq_n_f64(v535, v406, v498.f64[0]));
  v113[1] = vaddq_f64(v1029, vmlaq_n_f64(v751, v407, v498.f64[0]));
  v114[4] = vaddq_f64(v1048, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v641, v378, v442, 1), v508, v481, 1), v410, v498, 1));
  v114[5] = vaddq_f64(v919, vmlaq_laneq_f64(v647, v411, v498, 1));
  v114[2] = vaddq_f64(v1060, vmlaq_laneq_f64(v660, v408, v498, 1));
  v114[3] = vaddq_f64(v975, vmlaq_laneq_f64(v653, v409, v498, 1));
  *v114 = vaddq_f64(v1066, vmlaq_laneq_f64(v674, v406, v498, 1));
  v114[1] = vaddq_f64(v964, vmlaq_laneq_f64(v688, v407, v498, 1));
  v115[4] = vaddq_f64(v768, vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(v619, v378, v467.f64[0]), v508, v501.f64[0]), v410, v484.f64[0]));
  v115[5] = vaddq_f64(v909, vmlaq_n_f64(v609, v411, v484.f64[0]));
  v115[2] = vaddq_f64(v1044, vmlaq_n_f64(v625, v408, v484.f64[0]));
  v115[3] = vaddq_f64(v1034, vmlaq_n_f64(v603, v409, v484.f64[0]));
  *v115 = vaddq_f64(v1024, vmlaq_n_f64(v601, v406, v484.f64[0]));
  v115[1] = vaddq_f64(v970, vmlaq_n_f64(v607, v407, v484.f64[0]));
  v116[4] = vaddq_f64(v914, vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(v616, v455, v437, 1), v447, v512, 1), v378, v467, 1), v508, v501, 1), v410, v484, 1));
  v116[5] = vaddq_f64(v924, v614);
  v116[2] = vaddq_f64(v1039, vmlaq_laneq_f64(v527, v408, v484, 1));
  v116[3] = vaddq_f64(v849, vmlaq_laneq_f64(v628, v409, v484, 1));
  *v116 = vaddq_f64(v930, vmlaq_laneq_f64(v763, v406, v484, 1));
  v116[1] = vaddq_f64(v952, vmlaq_laneq_f64(v531, v407, v484, 1));
  v412 = LODWORD(v12[15].f64[0]);
  v413 = v12[14].f64[0];
  __src.i32[0] = 12;
  __src.i32[1] = v412 - 12;
  __src.i32[2] = v412;
  v1088 = *(_QWORD *)&v413 + 8 * (12 * v412);
  v1089 = 12 * v412;
  v1262 = &v1186;
  p_src = &__src;
  v1264 = 0x3FF0000000000000;
  v414 = (12 * v412 - 144);
  v1258[1] = v414;
  v1086 = v12;
  v1258[0] = operator new(8 * v414, (std::align_val_t)0x20uLL);
  v1259 = 12;
  v1260 = v412 - 12;
  sub_20F2084DC((uint64_t)v1258, (uint64_t)v1261);
  v415 = v1258[0];
  if (v1259)
  {
    v416 = v1260;
    if (v1260)
    {
      v417 = 8 * v1259;
      v418 = 12 * v412;
      v419 = 8 * v1259;
      v420 = (char *)v1258[0];
      do
      {
        memmove((void *)(*(_QWORD *)&v413 + 8 * v418), v420, v417);
        v418 += v412;
        v420 += v419;
        --v416;
      }
      while (v416);
    }
  }
  if (v415)
    MEMORY[0x212BC6368](v415, 0x1000C8000313F17);
  v421 = LODWORD(v1086[15].f64[0]);
  v422 = v1086[14].f64[0];
  v1261[0] = 12;
  v1261[1] = v412 - 12;
  LODWORD(v1262) = v421;
  p_src = (int64x2_t *)(*(_QWORD *)&v422 + 8 * (12 * v421));
  LODWORD(v1264) = 12 * v421;
  __src.i64[0] = 0;
  __src.i64[1] = (12 * v412 - 144);
  __src.i64[0] = (uint64_t)operator new(8 * v414, (std::align_val_t)0x20uLL);
  LODWORD(v1088) = v412 - 12;
  HIDWORD(v1088) = 12;
  sub_20F208630(&__src, (uint64_t)v1261);
  if (!(_DWORD)v1088)
  {
    v424 = __src.i64[0];
    if (!__src.i64[0])
      return MEMORY[0x212BC6368](v435, 0x1000C8000313F17);
    goto LABEL_36;
  }
  v423 = HIDWORD(v1088);
  v424 = __src.i64[0];
  if (HIDWORD(v1088))
  {
    v425 = 8 * v1088;
    v426 = 8 * (int)v1088;
    v427 = 12;
    v428 = (char *)__src.i64[0];
    do
    {
      memmove((void *)(*(_QWORD *)&v422 + 8 * v427), v428, v425);
      v427 += v421;
      v428 += v426;
      --v423;
    }
    while (v423);
  }
  if (v424)
LABEL_36:
    MEMORY[0x212BC6368](v424, 0x1000C8000313F17);
  return MEMORY[0x212BC6368](v435, 0x1000C8000313F17);
}

void sub_20F1F9394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (STACK[0xE30])
    MEMORY[0x212BC6368](STACK[0xE30], 0x1000C8000313F17);
  MEMORY[0x212BC6368](a18, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

BOOL sub_20F1F93F8(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t a4, uint64_t a5, int8x16_t a6, double a7, double a8, int64x2_t a9, double a10, double a11, int64x2_t a12, int64x2_t a13)
{
  float64x2_t v14;
  int v15;
  int v16;
  double v17;
  int64x2_t v19;
  int64x2_t v20;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v32;
  int8x16_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t *v36;
  float64x2_t v37;
  uint64_t v38;
  char *v39;
  double v40;
  int8x16_t v41;
  double v42;
  int8x16_t *v43;
  char *v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  double v56;
  float64x2_t v57;
  float64x2_t v58;
  double v59;
  double v60;
  _BOOL8 v61;
  float64x2_t v62;
  double v63;
  float64x2_t v64;
  double v65;
  float64x2_t v66;
  float64x2_t v67;
  double v68;
  double v69;
  double v71;
  double v72;
  double v73;
  float64x2_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x16_t v84;
  uint64_t v85;
  float64x2_t v86;
  double v87;
  float64x2_t v88;
  double v89;
  float64x2_t v90;
  double v91;
  float64x2_t v92;
  _BYTE v93[32];
  float64x2_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  double *v118[3];
  uint64_t v119[2];
  _QWORD v120[3];
  _QWORD v121[2];
  int8x16_t v122;
  uint64_t v123;
  float64x2_t v124;
  __int128 v125;
  __int128 v126;
  float64x2_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;

  v15 = a5;
  v16 = a4;
  v17 = *(double *)a6.i64;
  a6.i64[0] = *(_QWORD *)(a1 + 456);
  v19 = *(int64x2_t *)(a1 + 440);
  a9.i64[0] = *(_QWORD *)(a1 + 480);
  v20 = *(int64x2_t *)(a1 + 464);
  a13.i64[0] = *(_QWORD *)(a1 + 504);
  _Q2 = *(float64x2_t *)(a1 + 488);
  a12.i64[0] = *(_QWORD *)(a1 + 216);
  v22 = *(float64x2_t *)(a1 + 200);
  v23 = (float64x2_t)vzip1q_s64(v19, v20);
  v24 = (float64x2_t)vzip2q_s64(v19, v20);
  v25 = (float64x2_t)vextq_s8((int8x16_t)_Q2, a6, 8uLL);
  *(_QWORD *)&v26.f64[0] = a6.i64[0];
  *(_QWORD *)&v26.f64[1] = a9.i64[0];
  _Q0 = vmulq_f64(_Q2, v22);
  _Q21.f64[0] = *(float64_t *)(a1 + 208);
  __asm { FMLA            D0, D21, V2.D[1] }
  _Q21.f64[0] = *(float64_t *)(a2 + 24);
  _Q0.f64[0] = _Q0.f64[0] + *(double *)a13.i64 * *(double *)a12.i64;
  v14.f64[0] = *(float64_t *)(a1 + 592);
  v32 = vsubq_f64(_Q21, v14);
  v33 = (int8x16_t)vsubq_f64(vsubq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 576)), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v23, v22.f64[0]), v24, v22, 1), v26, *(double *)a12.i64));
  v34 = *(_OWORD *)&vsubq_f64(v32, _Q0);
  v122 = v33;
  v123 = v34;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0u;
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  v135 = 0u;
  v136 = 0u;
  v137 = 0u;
  v138 = 0u;
  v139 = 0u;
  v140 = 0u;
  v141 = 0u;
  v35 = *(_QWORD *)(a1 + 432);
  v36 = (int8x16_t *)&v124.f64[(3 * v35)];
  v37 = vsubq_f64(vmulq_f64(v25, (float64x2_t)vzip1q_s64(a12, (int64x2_t)v22)), vmulq_f64((float64x2_t)vzip1q_s64(a13, v19), (float64x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)a12, 8uLL)));
  v36[4].i64[0] = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(_Q2, v22, 1), vmulq_laneq_f64(v22, _Q2, 1));
  v36[2] = (int8x16_t)vsubq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(a9, a13), v22.f64[0]), vmulq_n_f64((float64x2_t)vzip1q_s64(v20, (int64x2_t)_Q2), *(double *)a12.i64));
  v36[3] = (int8x16_t)vsubq_f64(vmulq_laneq_f64(v23, v22, 1), vmulq_n_f64(v24, v22.f64[0]));
  *(float64x2_t *)v36 = vsubq_f64(vmulq_n_f64(v24, *(double *)a12.i64), vmulq_laneq_f64(v26, v22, 1));
  v36[1] = (int8x16_t)v37;
  v38 = *(_QWORD *)(a1 + 600);
  v39 = (char *)&v124.f64[(3 * v38)];
  *(_OWORD *)(v39 + 24) = 0u;
  *(_OWORD *)(v39 + 40) = 0u;
  *(_OWORD *)(v39 + 8) = 0u;
  *(_QWORD *)v39 = 0x3FF0000000000000;
  *((_QWORD *)v39 + 4) = 0x3FF0000000000000;
  *((_QWORD *)v39 + 7) = 0;
  *((_QWORD *)v39 + 8) = 0x3FF0000000000000;
  v37.f64[0] = a3[1].f64[0];
  *(_QWORD *)&v40 = *(_OWORD *)&vmulq_f64(v37, v37);
  v41 = (int8x16_t)vmulq_f64(*a3, *a3);
  *(_QWORD *)&v42 = vextq_s8(v41, v41, 8uLL).u64[0];
  if (*(_BYTE *)(a1 + 160))
  {
    v71 = *(double *)v41.i64;
    v72 = v42;
    v33.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
    v83 = v36[4].i64[0];
    v84 = v33;
    v76 = v36[2];
    v77 = v36[3];
    v75 = v36[1];
    v73 = v40;
    v74 = *(float64x2_t *)v36;
    v82 = *((_QWORD *)v39 + 8);
    v80 = *((int8x16_t *)v39 + 2);
    v81 = *((int8x16_t *)v39 + 3);
    v78 = *(int8x16_t *)v39;
    v79 = *((int8x16_t *)v39 + 1);
    v121[0] = v35;
    v121[1] = v38;
    *(_QWORD *)&v86.f64[1] = 4;
    v85 = v34;
    v43 = (int8x16_t *)operator new(0x20uLL, (std::align_val_t)0x20uLL);
    *(_QWORD *)&v86.f64[0] = v43;
    LODWORD(v87) = 3;
    *v43 = v84;
    v43[1].i64[0] = v85;
    v120[1] = 20;
    v44 = (char *)operator new(0xA0uLL, (std::align_val_t)0x20uLL);
    v46 = v76;
    v45 = v77;
    v120[0] = v44;
    v48 = (int8x16_t)v74;
    v47 = v75;
    v45.i64[1] = vextq_s8(v45, v45, 8uLL).u64[0];
    v46.i64[1] = vextq_s8(v46, v46, 8uLL).u64[0];
    v50 = v80;
    v49 = v81;
    v51 = v79;
    v120[2] = 0x600000003;
    v47.i64[1] = vextq_s8(v47, v47, 8uLL).u64[0];
    v48.i64[1] = vextq_s8(v48, v48, 8uLL).u64[0];
    v52 = v78;
    *(int8x16_t *)v44 = v48;
    *((int8x16_t *)v44 + 1) = v47;
    *((int8x16_t *)v44 + 2) = v46;
    *((int8x16_t *)v44 + 3) = v45;
    v49.i64[1] = vextq_s8(v49, v49, 8uLL).u64[0];
    v50.i64[1] = vextq_s8(v50, v50, 8uLL).u64[0];
    v51.i64[1] = vextq_s8(v51, v51, 8uLL).u64[0];
    v52.i64[1] = vextq_s8(v52, v52, 8uLL).u64[0];
    *((_QWORD *)v44 + 8) = v83;
    *(int8x16_t *)(v44 + 72) = v52;
    *(int8x16_t *)(v44 + 88) = v51;
    *(int8x16_t *)(v44 + 104) = v50;
    *(int8x16_t *)(v44 + 120) = v49;
    *((_QWORD *)v44 + 17) = v82;
    v119[0] = (uint64_t)v121;
    v119[1] = 2;
    v118[1] = (double *)12;
    v118[0] = (double *)operator new(0x60uLL, (std::align_val_t)0x20uLL);
    v118[2] = (double *)0x300000003;
    v53 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)xmmword_21030D320, v71);
    v54 = v71 * 0.0 + 0.0;
    v55 = vaddq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)xmmword_2102DD520, v72), (float64x2_t)0);
    v56 = v72 * 0.0 + 0.0 + 0.0;
    v57 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v73);
    v58 = vmulq_f64(v53, (float64x2_t)0);
    v59 = v54 + v56 * 0.0 + v73 * 0.0;
    v60 = v54 * 0.0;
    *(double *)v93 = v59;
    v92 = vmlaq_f64(vmlaq_f64(v53, (float64x2_t)0, v55), (float64x2_t)0, v57);
    *(double *)&v93[24] = v56 + v60 + v73 * 0.0;
    *(float64x2_t *)&v93[8] = vmlaq_f64(vaddq_f64(v55, v58), (float64x2_t)0, v57);
    *(double *)&v95 = v73 + v60 + v56 * 0.0;
    v94 = vaddq_f64(v57, vmlaq_f64(v58, (float64x2_t)0, v55));
    sub_20F209640((uint64_t)v118, (uint64_t)&v92);
    v61 = sub_20F1F9A14(a1, (uint64_t)&v86, (uint64_t)v120, v119, v118, 0, v16, v15, v17, 0, 0, 0, 1, 0);
    if (v118[0])
      MEMORY[0x212BC6368](v118[0], 0x1000C8000313F17);
    if (v120[0])
      MEMORY[0x212BC6368](v120[0], 0x1000C8000313F17);
    if (*(_QWORD *)&v86.f64[0])
      MEMORY[0x212BC6368](*(_QWORD *)&v86.f64[0], 0x1000C8000313F17);
  }
  else
  {
    v116 = 0uLL;
    v117 = 0uLL;
    v114 = 0uLL;
    v115 = 0uLL;
    v112 = 0uLL;
    v113 = 0uLL;
    v110 = 0uLL;
    v111 = 0uLL;
    v108 = v141;
    v109 = 0uLL;
    v106 = v139;
    v107 = v140;
    v104 = v137;
    v105 = v138;
    v102 = v135;
    v103 = v136;
    v100 = v133;
    v101 = v134;
    v98 = v131;
    v99 = v132;
    v96 = v129;
    v97 = v130;
    v95 = v128;
    v94 = v127;
    *(_OWORD *)&v93[16] = v126;
    *(_OWORD *)v93 = v125;
    v92 = v124;
    v62 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)xmmword_21030D320, *(double *)v41.i64);
    v63 = *(double *)v41.i64 * 0.0 + 0.0;
    v64 = vaddq_f64(vmlaq_n_f64((float64x2_t)0, (float64x2_t)xmmword_2102DD520, v42), (float64x2_t)0);
    v65 = v42 * 0.0 + 0.0 + 0.0;
    v66 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v40);
    v67 = vmulq_f64(v62, (float64x2_t)0);
    v68 = v63 + v65 * 0.0 + v40 * 0.0;
    v69 = v63 * 0.0;
    v87 = v68;
    v86 = vmlaq_f64(vmlaq_f64(v62, (float64x2_t)0, v64), (float64x2_t)0, v66);
    v89 = v65 + v69 + v40 * 0.0;
    v88 = vmlaq_f64(vaddq_f64(v64, v67), (float64x2_t)0, v66);
    v91 = v40 + v69 + v65 * 0.0;
    v90 = vaddq_f64(v66, vmlaq_f64(v67, (float64x2_t)0, v64));
    return sub_20F1FACCC(a1, (uint64_t)&v122, (uint64_t)&v92, (uint64_t)&v86, 0, a4, a5, 0, 0);
  }
  return v61;
}

void sub_20F1F9978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (STACK[0x2F8])
  {
    MEMORY[0x212BC6368](STACK[0x2F8], 0x1000C8000313F17);
    if (!STACK[0x320])
    {
LABEL_3:
      if (!a41)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (!STACK[0x320])
  {
    goto LABEL_3;
  }
  MEMORY[0x212BC6368]();
  if (!a41)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  MEMORY[0x212BC6368]();
  _Unwind_Resume(a1);
}

BOOL sub_20F1F9A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double **a5, int a6, int a7, int a8, double a9, char a10, char a11, char a12, char a13, int *a14)
{
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  __int128 *v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  size_t v61;
  int v62;
  int v63;
  uint64_t v64;
  size_t v65;
  float64x2_t *v66;
  double ***v67;
  double *v68;
  unint64_t v69;
  double *v70;
  double ***v71;
  double *v72;
  double v73;
  double v74;
  double v75;
  double *v76;
  int v77;
  int v78;
  size_t v79;
  double *v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  double *v84;
  unsigned int v85;
  double *v86;
  size_t v87;
  uint64_t v88;
  double **v89;
  double *v90;
  unint64_t v91;
  double *v92;
  double *v93;
  unint64_t v94;
  uint64_t v95;
  float64x2_t *v96;
  float64x2_t *v97;
  uint64_t v98;
  float64x2_t v99;
  double *v100;
  double v101;
  unint64_t v102;
  uint64_t v103;
  double *v104;
  float64x2_t *v105;
  float64x2_t *v106;
  float64x2_t *v107;
  uint64_t v108;
  float64x2_t v109;
  unsigned int v110;
  size_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  double *v115;
  double *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  double *v123;
  double *v124;
  int v125;
  uint64_t v126;
  double *v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v142;
  uint64_t v143;
  double *v144;
  unsigned int v145;
  uint64_t v146;
  size_t v147;
  uint64_t v148;
  double *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  double *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  double *v162;
  double *v163;
  size_t v164;
  uint64_t v165;
  double **v166;
  double **v167;
  __int128 v168;
  double *v169;
  int v170;
  double *v171;
  uint64_t v172;
  double *v173;
  int v174;
  double *v175;
  uint64_t v176;
  double *v177;
  int v178;
  double *v179;
  uint64_t v180;
  double *v181;
  int v182;
  double *v183;
  uint64_t v184;
  double *v185;
  int v186;
  double *v187;
  uint64_t v188;
  double *v189;
  uint64_t v190;
  int v191;
  double *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  double *v196;
  uint64_t v197;
  int v198;
  int v199;
  size_t v200;
  double **v201;
  unsigned int v202;
  size_t v203;
  double **v204;
  double ****v205;
  double **v206;
  unsigned int v207;
  int v208;
  double *v209;
  uint64_t v210;
  double *v211;
  uint64_t v212;
  unint64_t v213;
  double *v214;
  double *v215;
  double *v216;
  int v217;
  int v218;
  uint64_t v219;
  double v220;
  double v221;
  double v222;
  double v223;
  double v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unsigned int v228;
  unint64_t v229;
  size_t v230;
  uint64_t v231;
  double *v232;
  unint64_t v233;
  double *v234;
  double *v235;
  double *v236;
  uint64_t *v237;
  uint64_t v238;
  int v239;
  int v240;
  double *v241;
  double v242;
  double v243;
  double v244;
  double v245;
  double v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  size_t v250;
  double *v251;
  double **v252;
  int v253;
  int v254;
  uint64_t v255;
  unint64_t v256;
  double *v257;
  double *v258;
  double *v259;
  uint64_t *v260;
  uint64_t v261;
  int v262;
  int v263;
  uint64_t v264;
  double *v265;
  double v266;
  double v267;
  double v268;
  double v269;
  double v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unsigned int v274;
  size_t v275;
  double *v277;
  double **v278;
  double **v282;
  _QWORD v283[2];
  double **v284;
  _QWORD v285[3];
  _QWORD v286[3];
  double *__B;
  double *v288;
  int v289;
  int v290;
  double *v291;
  double *v292;
  unsigned int v293;
  unsigned int v294;
  double *v295[2];
  int v296;
  int v297;
  _QWORD v298[2];
  unsigned int v299;
  _QWORD v300[2];
  int v301;
  int v302;
  _QWORD v303[2];
  int v304;
  int v305;
  double ****v306;
  double ***v307;
  double **p_B;
  uint64_t v309;
  double **v310;
  double **v311;
  double *v312;
  double **v313;
  uint64_t v314;
  uint64_t v315;

  v315 = *MEMORY[0x24BDAC8D0];
  v20 = a4[1];
  v21 = (3 * v20);
  v22 = (8 * (v21 * v21) + 31) & 0xFFFFFFFE0;
  v303[1] = v22 >> 3;
  v23 = (char *)operator new(v22, (std::align_val_t)0x20uLL);
  v24 = v23;
  v303[0] = v23;
  v304 = 3 * v20;
  v305 = 3 * v20;
  if ((_DWORD)v21 * (_DWORD)v21)
    bzero(v23, 8 * (v21 * v21));
  if (v20)
  {
    v25 = *a4;
    v26 = *(unsigned int *)(a1 + 240);
    v27 = *(char **)(a1 + 224);
    if (v27 == v24)
    {
      v44 = 0;
      v45 = 0;
      do
      {
        v46 = 0;
        v47 = v45;
        do
        {
          v48 = &v24[8 * *(_DWORD *)(v25 + 8 * v44) + 8 * v26 * *(_QWORD *)(v25 + 8 * v46)];
          v49 = *(_OWORD *)v48;
          v50 = *((_QWORD *)v48 + 2);
          v51 = &v48[8 * v26];
          v52 = *(_OWORD *)v51;
          v53 = *((_QWORD *)v51 + 2);
          v54 = &v48[16 * v26];
          v55 = *(_OWORD *)v54;
          v56 = *((_QWORD *)v54 + 2);
          v57 = &v24[8 * v47];
          *((_QWORD *)v57 + 2) = v50;
          *(_OWORD *)v57 = v49;
          v58 = &v57[8 * v21];
          *((_QWORD *)v58 + 2) = v53;
          *(_OWORD *)v58 = v52;
          v59 = &v57[16 * (3 * v20)];
          *((_QWORD *)v59 + 2) = v56;
          *(_OWORD *)v59 = v55;
          ++v46;
          v47 += 9 * v20;
        }
        while (v20 != v46);
        v45 += 3;
        ++v44;
      }
      while (v44 != v20);
    }
    else
    {
      v28 = 0;
      v29 = 0;
      do
      {
        v30 = 0;
        v31 = v29;
        do
        {
          v32 = &v27[8 * *(_DWORD *)(v25 + 8 * v28) + 8 * v26 * *(_QWORD *)(v25 + 8 * v30)];
          v33 = *(_OWORD *)v32;
          v34 = *((_QWORD *)v32 + 2);
          v35 = &v32[8 * v26];
          v36 = *(_OWORD *)v35;
          v37 = *((_QWORD *)v35 + 2);
          v38 = (__int128 *)&v32[16 * v26];
          v39 = *v38;
          v40 = *((_QWORD *)v38 + 2);
          v41 = &v24[8 * v31];
          *((_QWORD *)v41 + 2) = v34;
          *(_OWORD *)v41 = v33;
          v42 = &v41[8 * v21];
          *((_QWORD *)v42 + 2) = v37;
          *(_OWORD *)v42 = v36;
          v43 = &v41[16 * (3 * v20)];
          *((_QWORD *)v43 + 2) = v40;
          *(_OWORD *)v43 = v39;
          ++v30;
          v31 += 9 * v20;
        }
        while (v20 != v30);
        v29 += 3;
        ++v28;
      }
      while (v28 != v20);
    }
  }
  v298[0] = a3;
  v298[1] = v303;
  v295[0] = (double *)a3;
  v60 = *(_DWORD *)(a3 + 16);
  v61 = (8 * (v60 * v60) + 31) & 0xFFFFFFFE0;
  p_B = (double **)(v61 >> 3);
  v307 = (double ***)operator new(v61, (std::align_val_t)0x20uLL);
  LODWORD(v309) = v60;
  HIDWORD(v309) = v60;
  v312 = (double *)v298;
  v313 = v295;
  v314 = 0x3FF0000000000000;
  sub_20F20AA28((uint64_t)&v307, (uint64_t)&v311);
  v310 = a5;
  v62 = v309;
  v63 = HIDWORD(v309);
  v64 = (HIDWORD(v309) * v309);
  v65 = (8 * v64 + 31) & 0xFFFFFFFE0;
  v300[0] = 0;
  v300[1] = v65 >> 3;
  v66 = (float64x2_t *)operator new(v65, (std::align_val_t)0x20uLL);
  v300[0] = v66;
  v301 = v62;
  v302 = v63;
  v67 = v307;
  if ((_DWORD)v64)
  {
    v68 = *a5;
    v69 = (v64 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v69 < 7 || (unint64_t)((char *)v66 - (char *)v307) < 0x20)
    {
      v70 = (double *)v66;
      v71 = v307;
    }
    else
    {
      v70 = (double *)v66;
      v71 = v307;
      if ((unint64_t)((char *)v66 - (char *)v68) >= 0x20)
      {
        v102 = v69 + 1;
        v103 = v102 & 0x3FFFFFFFFFFFFFFCLL;
        v70 = &v66->f64[v103];
        v104 = &v68[v103];
        v71 = &v307[v103];
        v105 = (float64x2_t *)(v307 + 2);
        v106 = (float64x2_t *)(v68 + 2);
        v107 = v66 + 1;
        v108 = v102 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v109 = vaddq_f64(*v105, *v106);
          v107[-1] = vaddq_f64(v105[-1], v106[-1]);
          *v107 = v109;
          v105 += 2;
          v106 += 2;
          v107 += 2;
          v108 -= 4;
        }
        while (v108);
        v68 = v104;
        if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_19;
      }
    }
    v72 = &v66->f64[v64];
    do
    {
      v73 = *(double *)v71++;
      v74 = v73;
      v75 = *v68++;
      *v70++ = v74 + v75;
    }
    while (v70 != v72);
  }
LABEL_19:
  if (v67)
    MEMORY[0x212BC6368](v67, 0x1000C8000313F17);
  sub_20F196C54((uint64_t)v300);
  v291 = (double *)a2;
  v311 = &v291;
  v312 = (double *)v298;
  v307 = &v311;
  p_B = (double **)a2;
  v309 = 0x3FF0000000000000;
  sub_20F20AC48(v295, (uint64_t)&v306);
  v76 = v295[0];
  if (*(double *)v295 <= a9)
  {
    v77 = *(_DWORD *)(a1 + 240);
    v78 = *(_DWORD *)(a2 + 16);
    v79 = (8 * (v78 * v77) + 31) & 0xFFFFFFFE0;
    v295[1] = (double *)(v79 >> 3);
    v80 = (double *)operator new(v79, (std::align_val_t)0x20uLL);
    v295[0] = v80;
    v296 = v77;
    v297 = v78;
    if (v78 * v77)
      bzero(v80, 8 * (v78 * v77));
    v278 = (double **)a2;
    if (a4[1])
    {
      v81 = 0;
      while (1)
      {
        v82 = *(_DWORD *)(a1 + 240);
        v83 = v82 * *(_QWORD *)(*a4 + 8 * v81);
        v84 = *(double **)(a1 + 224);
        LODWORD(v291) = v82;
        HIDWORD(v291) = v82;
        v292 = &v84[v83];
        v293 = v83;
        v86 = *(double **)a3;
        LODWORD(__B) = *(_DWORD *)(a3 + 16);
        v85 = __B;
        HIDWORD(__B) = (_DWORD)__B;
        v288 = &v86[(3 * v81 * (_DWORD)__B)];
        v289 = 3 * v81 * (_DWORD)__B;
        v286[0] = &__B;
        v307 = (double ***)&v291;
        p_B = (double **)v286;
        v309 = 0x3FF0000000000000;
        if (v84 == v295[0] || v86 == v295[0])
          break;
        if (v82 && (_DWORD)__B)
          sub_20E8BE654(0, 1, v82, (int)__B, 3, &v84[v83], v82, &v86[(3 * v81 * (_DWORD)__B)], 1.0, 1.0, (int)__B, v295[0], v296);
LABEL_26:
        if (++v81 >= (unint64_t)a4[1])
        {
          v77 = v296;
          goto LABEL_51;
        }
      }
      v87 = (8 * ((_DWORD)__B * v82) + 31) & 0xFFFFFFFE0;
      v312 = (double *)(v87 >> 3);
      v311 = (double **)operator new(v87, (std::align_val_t)0x20uLL);
      v313 = (double **)__PAIR64__(v85, v82);
      sub_20F20AF20((uint64_t)&v311, (uint64_t)&v306);
      v88 = (v297 * v296);
      v89 = v311;
      if ((_DWORD)v88)
      {
        v90 = v295[0];
        v91 = (v88 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v91 < 9)
        {
          v92 = (double *)v311;
          v93 = v295[0];
LABEL_40:
          v100 = &v90[v88];
          do
          {
            v101 = *v92++;
            *v93 = v101 + *v93;
            ++v93;
          }
          while (v93 != v100);
          goto LABEL_42;
        }
        if (v295[0] < (double *)&v311[v88])
        {
          v92 = (double *)v311;
          v93 = v295[0];
          if ((double *)v311 < &v295[0][v88])
            goto LABEL_40;
        }
        v94 = v91 + 1;
        v95 = v94 & 0x3FFFFFFFFFFFFFFCLL;
        v92 = (double *)&v311[v95];
        v93 = &v295[0][v95];
        v96 = (float64x2_t *)(v295[0] + 2);
        v97 = (float64x2_t *)(v311 + 2);
        v98 = v94 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v99 = vaddq_f64(*v97, *v96);
          v96[-1] = vaddq_f64(v97[-1], v96[-1]);
          *v96 = v99;
          v96 += 2;
          v97 += 2;
          v98 -= 4;
        }
        while (v98);
        if (v94 != (v94 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_40;
      }
LABEL_42:
      if (v89)
        MEMORY[0x212BC6368](v89, 0x1000C8000313F17);
      goto LABEL_26;
    }
LABEL_51:
    v110 = v299;
    v111 = (8 * v299 * v77 + 31) & 0xFFFFFFFE0;
    v292 = (double *)(v111 >> 3);
    v291 = (double *)operator new(v111, (std::align_val_t)0x20uLL);
    v293 = v77;
    v294 = v110;
    v307 = (double ***)v295;
    p_B = (double **)v298;
    v309 = 0x3FF0000000000000;
    sub_20F197DE0((uint64_t)&v291, (uint64_t)&v306);
    if (a6)
    {
      v112 = v294;
      if (v294)
      {
        v113 = *(_DWORD *)(a1 + 432);
        v114 = v293;
        v115 = v291;
        do
        {
          v116 = &v115[v113];
          *v116 = 0.0;
          v116[1] = 0.0;
          v113 += v114;
          --v112;
        }
        while (v112);
      }
      v117 = *(_QWORD *)(a1 + 680);
      v118 = *(_QWORD *)(a1 + 672);
      if (v117 != v118)
      {
        v119 = 0;
        do
        {
          v120 = v294;
          if (v294)
          {
            v121 = *(_DWORD *)(v118 + 144 * v119 + 32);
            v122 = v293;
            v123 = v291;
            do
            {
              v124 = &v123[v121];
              *v124 = 0.0;
              v124[1] = 0.0;
              v121 += v122;
              --v120;
            }
            while (v120);
            v117 = *(_QWORD *)(a1 + 680);
            v118 = *(_QWORD *)(a1 + 672);
          }
          ++v119;
        }
        while (v119 < 0x8E38E38E38E38E39 * ((v117 - v118) >> 4));
      }
    }
    v125 = v293;
    if (!a7)
      goto LABEL_89;
    v126 = v294;
    v127 = v291;
    if (v294)
    {
      v128 = *(_DWORD *)(a1 + 432);
      if (v294 < 0x10)
      {
        v129 = 0;
LABEL_66:
        v130 = v126 - v129;
        v131 = v128 + v125 * v129 + 2;
        do
        {
          v127[v131] = 0.0;
          v131 += v125;
          --v130;
        }
        while (v130);
        goto LABEL_68;
      }
      v129 = 0;
      if (v293 != 1)
        goto LABEL_66;
      if (-3 - v128 < v294 - 1)
        goto LABEL_66;
      if (((unint64_t)v294 - 1) >> 32)
        goto LABEL_66;
      v129 = v294 & 0xFFFFFFFC;
      v151 = v128 + 2;
      v152 = v129;
      do
      {
        v153 = &v127[v151];
        *(_OWORD *)v153 = 0uLL;
        *((_OWORD *)v153 + 1) = 0uLL;
        v151 += 4;
        v152 -= 4;
      }
      while (v152);
      if (v129 != v126)
        goto LABEL_66;
    }
LABEL_68:
    v132 = *(_QWORD *)(a1 + 680);
    v133 = *(_QWORD *)(a1 + 672);
    v134 = v132 - v133;
    if (v132 != v133)
    {
      v135 = 0;
      v136 = v134 / 144;
      if (v136 <= 1)
        v136 = 1;
      do
      {
        if ((_DWORD)v126)
        {
          v137 = *(_DWORD *)(v133 + 144 * v135 + 32);
          if (v126 >= 0xE)
          {
            v138 = 0;
            if (v125 == 1 && -3 - v137 >= (v126 - 1) && (unint64_t)(v126 - 1) >> 32 == 0)
            {
              v142 = v137 + 2;
              v143 = v126 & 0xFFFFFFFC;
              do
              {
                v144 = &v127[v142];
                *(_OWORD *)v144 = 0uLL;
                *((_OWORD *)v144 + 1) = 0uLL;
                v142 += 4;
                v143 -= 4;
              }
              while (v143);
              v138 = v126 & 0xFFFFFFFC;
              if (v138 == v126)
                goto LABEL_72;
            }
          }
          else
          {
            v138 = 0;
          }
          v139 = v126 - v138;
          v140 = v137 + v125 * v138 + 2;
          do
          {
            v127[v140] = 0.0;
            v140 += v125;
            --v139;
          }
          while (v139);
        }
LABEL_72:
        ++v135;
      }
      while (v135 != v136);
    }
LABEL_89:
    v145 = v294;
    if (!a10)
      goto LABEL_121;
    v146 = *(_QWORD *)(a1 + 536);
    v311 = (double **)__PAIR64__(v125, v294);
    v312 = &v291[v146];
    LODWORD(v313) = v146;
    v147 = (24 * v294 + 31) & 0xFFFFFFFE0;
    v288 = (double *)(v147 >> 3);
    __B = (double *)operator new(v147, (std::align_val_t)0x20uLL);
    v289 = v145;
    v307 = (double ***)(a1 + 440);
    p_B = (double **)&v311;
    v309 = 0x3FF0000000000000;
    sub_20F20B08C((uint64_t)&__B, (uint64_t)&v306);
    v148 = v289;
    if (v289)
    {
      v149 = __B;
      if (v289 == 1)
      {
        v150 = 0;
LABEL_106:
        v157 = v148 - v150;
        v158 = 3 * v150 + 2;
        do
        {
          v149[v158] = 0.0;
          v158 += 3;
          --v157;
        }
        while (v157);
        goto LABEL_108;
      }
      v150 = 0;
      v154 = 3 * (v289 - 1);
      if (v154 > 0xFFFFFFFD)
        goto LABEL_106;
      if ((v154 & 0xFFFFFFFF00000000) != 0)
        goto LABEL_106;
      if (((unint64_t)v289 - 1) >> 32)
        goto LABEL_106;
      v150 = v289 & 0xFFFFFFFE;
      v155 = 5;
      v156 = v150;
      do
      {
        v149[((_DWORD)v155 - 3) & 0xFFFFFFFE] = 0.0;
        v149[v155] = 0.0;
        v155 += 6;
        v156 -= 2;
      }
      while (v156);
      if (v150 != v148)
        goto LABEL_106;
    }
LABEL_108:
    v286[0] = a1 + 440;
    v159 = *(_QWORD *)(a1 + 536);
    v161 = v293;
    v160 = v294;
    v162 = v291;
    v307 = (double ***)v286;
    p_B = &__B;
    v309 = 0x3FF0000000000000;
    if ((double *)(a1 + 440) == v291 || (v163 = __B, __B == v291))
    {
      v164 = (8 * (3 * v148) + 31) & 0xFFFFFFFE0;
      v312 = (double *)(v164 >> 3);
      v311 = (double **)operator new(v164, (std::align_val_t)0x20uLL);
      LODWORD(v313) = v148;
      sub_20F20B1E8((uint64_t)&v311, (uint64_t)&v306);
      v165 = v313;
      v166 = v311;
      if ((_DWORD)v313)
      {
        v167 = v311;
        do
        {
          v168 = *(_OWORD *)v167;
          v169 = &v162[v159];
          *((_QWORD *)v169 + 2) = v167[2];
          *(_OWORD *)v169 = v168;
          v167 += 3;
          LODWORD(v159) = v159 + v161;
          --v165;
        }
        while (v165);
      }
      if (v166)
        MEMORY[0x212BC6368](v166, 0x1000C8000313F17);
    }
    else if ((_DWORD)v148)
    {
      sub_20E8BE654(1, 0, 3, v148, 3, (const double *)(a1 + 440), 3, __B, 1.0, 0.0, 3, &v291[v159], v293);
    }
    else
    {
      if (!v294)
        goto LABEL_118;
      do
      {
        v277 = &v162[v159];
        *v277 = 0.0;
        v277[1] = 0.0;
        v277[2] = 0.0;
        LODWORD(v159) = v159 + v161;
        --v160;
      }
      while (v160);
    }
    v163 = __B;
LABEL_118:
    if (v163)
      MEMORY[0x212BC6368](v163, 0x1000C8000313F17);
    v125 = v293;
    v145 = v294;
LABEL_121:
    if (a8)
    {
      if (!v145)
        goto LABEL_131;
      v170 = *(_DWORD *)(a1 + 536);
      v171 = v291;
      v172 = v145;
      do
      {
        v173 = &v171[v170];
        *v173 = 0.0;
        v173[1] = 0.0;
        v173[2] = 0.0;
        v170 += v125;
        --v172;
      }
      while (v172);
      v125 = v293;
      v145 = v294;
    }
    if (a11 && v145)
    {
      v174 = *(_DWORD *)(a1 + 568);
      v175 = v291;
      v176 = v145;
      do
      {
        v177 = &v175[v174];
        *v177 = 0.0;
        v177[1] = 0.0;
        v177[2] = 0.0;
        v174 += v125;
        --v176;
      }
      while (v176);
      v125 = v293;
      v145 = v294;
    }
LABEL_131:
    if (a12)
    {
      if (!v145)
        goto LABEL_145;
      v178 = *(_DWORD *)(a1 + 600);
      v179 = v291;
      v180 = v145;
      do
      {
        v181 = &v179[v178];
        *v181 = 0.0;
        v181[1] = 0.0;
        v181[2] = 0.0;
        v178 += v125;
        --v180;
      }
      while (v180);
      v125 = v293;
      v145 = v294;
    }
    if (a13)
    {
      if (!v145)
        goto LABEL_145;
      v182 = *(_DWORD *)(a1 + 632);
      v183 = v291;
      v184 = v145;
      do
      {
        v185 = &v183[v182];
        *v185 = 0.0;
        v185[1] = 0.0;
        v185[2] = 0.0;
        v182 += v125;
        --v184;
      }
      while (v184);
      v125 = v293;
      v145 = v294;
    }
    if (v145)
    {
      v186 = *(_DWORD *)(a1 + 664);
      v187 = v291;
      v188 = v145;
      do
      {
        v189 = &v187[v186];
        *v189 = 0.0;
        v189[1] = 0.0;
        v189[2] = 0.0;
        v186 += v125;
        --v188;
      }
      while (v188);
      v125 = v293;
    }
LABEL_145:
    if (a14)
    {
      v190 = v294;
      if (v294)
      {
        v191 = *a14;
        v192 = v291;
        if (v294 < 0x10)
        {
          v193 = 0;
LABEL_155:
          v197 = v190 - v193;
          v198 = v191 + v125 * v193 + 2;
          do
          {
            v192[v198] = 0.0;
            v198 += v125;
            --v197;
          }
          while (v197);
          goto LABEL_157;
        }
        v193 = 0;
        if (v125 != 1)
          goto LABEL_155;
        if (-3 - v191 < v294 - 1)
          goto LABEL_155;
        if (((unint64_t)v294 - 1) >> 32)
          goto LABEL_155;
        v193 = v294 & 0xFFFFFFFC;
        v194 = v191 + 2;
        v195 = v193;
        do
        {
          v196 = &v192[v194];
          *(_OWORD *)v196 = 0uLL;
          *((_OWORD *)v196 + 1) = 0uLL;
          v194 += 4;
          v195 -= 4;
        }
        while (v195);
        if (v193 != v190)
          goto LABEL_155;
      }
    }
LABEL_157:
    v311 = v295;
    v199 = v296;
    v200 = (8 * (v296 * v125) + 31) & 0xFFFFFFFE0;
    v288 = (double *)(v200 >> 3);
    __B = (double *)operator new(v200, (std::align_val_t)0x20uLL);
    v289 = v125;
    v290 = v199;
    v307 = (double ***)&v291;
    p_B = (double **)&v311;
    v309 = 0x3FF0000000000000;
    sub_20F20B334((uint64_t)&__B, (uint64_t)&v306);
    v201 = (double **)(a1 + 224);
    v285[0] = a1 + 224;
    v285[1] = &__B;
    v286[0] = v285;
    v286[1] = &v284;
    v282 = &v291;
    v283[0] = &v291;
    v283[1] = v300;
    v284 = &__B;
    v202 = v293;
    v203 = (8 * v202 * v202 + 31) & 0xFFFFFFFE0;
    v306 = (double ****)v286;
    p_B = (double **)(v203 >> 3);
    v307 = (double ***)operator new(v203, (std::align_val_t)0x20uLL);
    LODWORD(v309) = v202;
    HIDWORD(v309) = v202;
    v312 = (double *)v283;
    v313 = (double **)&v282;
    v314 = 0x3FF0000000000000;
    sub_20F20B490((uint64_t)&v307, (uint64_t)&v311);
    v204 = v278;
    v205 = v306;
    v206 = **v306;
    v207 = *((_DWORD *)v206 + 4);
    if (v207 == *(_DWORD *)(a1 + 240) && (v208 = *((_DWORD *)v206 + 5), v208 == *(_DWORD *)(a1 + 244)))
    {
      v209 = *v201;
      v210 = (uint64_t)*v306[1];
      v211 = *(double **)v210;
      v212 = v208 * v207;
      if (*(double **)v210 != *v201)
      {
LABEL_160:
        if ((_DWORD)v212)
        {
          v213 = 0;
          v214 = (double *)v307;
          v215 = *(*v205)[1];
          v216 = ***v205;
          v217 = *(_DWORD *)(v210 + 16);
          v218 = *(_DWORD *)(v210 + 20);
          v219 = 8 * v212;
          do
          {
            v220 = *v216++;
            v221 = v220;
            v222 = *v215++;
            v223 = v221 - v222 - v211[(HIDWORD(v213) + v217 * v213)];
            v224 = *v214++;
            *v209++ = v223 + v224;
            v225 = (v213 + 1);
            v226 = v213 & 0xFFFFFFFF00000000;
            v227 = v226 | v225;
            v213 = v226 + 0x100000000;
            if (v218 > (int)v225)
              v213 = v227;
            v219 -= 8;
          }
          while (v219);
        }
        goto LABEL_188;
      }
    }
    else
    {
      v209 = *v201;
      if (*v206 == *v201 || *(*v306)[1] == v209 || **v306[1] == v209)
      {
        v250 = (8 * *((_DWORD *)v206 + 5) * v207 + 31) & 0xFFFFFFFE0;
        v251 = (double *)operator new(v250, (std::align_val_t)0x20uLL);
        v252 = **v205;
        v253 = *((_DWORD *)v252 + 4);
        v254 = *((_DWORD *)v252 + 5);
        v255 = (v254 * v253);
        if ((_DWORD)v255)
        {
          v256 = 0;
          v257 = (double *)v307;
          v258 = *(*v205)[1];
          v259 = *v252;
          v260 = (uint64_t *)*v205[1];
          v261 = *v260;
          v262 = *((_DWORD *)v260 + 4);
          v263 = *((_DWORD *)v260 + 5);
          v264 = 8 * v255;
          v265 = v251;
          do
          {
            v266 = *v259++;
            v267 = v266;
            v268 = *v258++;
            v269 = v267 - v268 - *(double *)(v261 + 8 * (HIDWORD(v256) + v262 * v256));
            v270 = *v257++;
            *v265++ = v269 + v270;
            v271 = (v256 + 1);
            v272 = v256 & 0xFFFFFFFF00000000;
            v273 = v272 | v271;
            v256 = v272 + 0x100000000;
            if (v263 > (int)v271)
              v256 = v273;
            v264 -= 8;
          }
          while (v264);
        }
        *(_QWORD *)(a1 + 224) = v251;
        *(_QWORD *)(a1 + 232) = v250 >> 3;
        *(_DWORD *)(a1 + 240) = v253;
        *(_DWORD *)(a1 + 244) = v254;
        v204 = v278;
        if (!v209)
          goto LABEL_188;
LABEL_187:
        MEMORY[0x212BC6368](v209, 0x1000C8000313F17);
LABEL_188:
        if (v307)
          MEMORY[0x212BC6368](v307, 0x1000C8000313F17);
        sub_20F20B6B0(a1 + 224);
        v274 = v293;
        v275 = (8 * v293 + 31) & 0xFFFFFFFE0;
        v312 = (double *)(v275 >> 3);
        v311 = (double **)operator new(v275, (std::align_val_t)0x20uLL);
        LODWORD(v313) = v274;
        v307 = (double ***)&v291;
        p_B = v204;
        v309 = 0x3FF0000000000000;
        sub_20F20C794((uint64_t)&v311, (uint64_t)&v306);
        sub_20F1F0C3C(a1 + 248, &v311);
        if (v311)
          MEMORY[0x212BC6368](v311, 0x1000C8000313F17);
        if (__B)
          MEMORY[0x212BC6368](__B, 0x1000C8000313F17);
        if (v291)
          MEMORY[0x212BC6368](v291, 0x1000C8000313F17);
        if (v295[0])
          MEMORY[0x212BC6368](v295[0], 0x1000C8000313F17);
        goto LABEL_198;
      }
      v228 = *((_DWORD *)v206 + 5);
      *(_DWORD *)(a1 + 240) = v207;
      *(_DWORD *)(a1 + 244) = v228;
      v229 = v228 * (unint64_t)v207;
      if (*(_QWORD *)(a1 + 232) < v229)
      {
        if (v209)
          MEMORY[0x212BC6368](v209, 0x1000C8000313F17);
        v230 = (8 * v229 + 31) & 0xFFFFFFFFFFFFFFE0;
        *(_QWORD *)(a1 + 224) = 0;
        *(_QWORD *)(a1 + 232) = v230 >> 3;
        v209 = (double *)operator new(v230, (std::align_val_t)0x20uLL);
        *(_QWORD *)(a1 + 224) = v209;
        v207 = *(_DWORD *)(a1 + 240);
        v228 = *(_DWORD *)(a1 + 244);
      }
      v204 = v278;
      v210 = (uint64_t)*v205[1];
      v211 = *(double **)v210;
      v212 = v228 * v207;
      if (*(double **)v210 != v209)
        goto LABEL_160;
    }
    v231 = 8 * v212;
    v232 = (double *)operator new((8 * v212 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    if ((_DWORD)v212)
    {
      v233 = 0;
      v234 = (double *)v307;
      v235 = *(*v205)[1];
      v236 = ***v205;
      v237 = (uint64_t *)*v205[1];
      v238 = *v237;
      v239 = *((_DWORD *)v237 + 4);
      v240 = *((_DWORD *)v237 + 5);
      v241 = v232;
      do
      {
        v242 = *v236++;
        v243 = v242;
        v244 = *v235++;
        v245 = v243 - v244 - *(double *)(v238 + 8 * (HIDWORD(v233) + v239 * v233));
        v246 = *v234++;
        *v241++ = v245 + v246;
        v247 = (v233 + 1);
        v248 = v233 & 0xFFFFFFFF00000000;
        v249 = v248 | v247;
        v233 = v248 + 0x100000000;
        if (v240 > (int)v247)
          v233 = v249;
        v231 -= 8;
      }
      while (v231);
    }
    *(_QWORD *)(a1 + 224) = v232;
    *(_QWORD *)(a1 + 232) = ((8 * v212 + 31) & 0xFFFFFFFE0uLL) >> 3;
    v204 = v278;
    if (!v209)
      goto LABEL_188;
    goto LABEL_187;
  }
LABEL_198:
  if (v298[0])
    MEMORY[0x212BC6368](v298[0], 0x1000C8000313F17);
  if (v300[0])
    MEMORY[0x212BC6368](v300[0], 0x1000C8000313F17);
  if (v303[0])
    MEMORY[0x212BC6368](v303[0], 0x1000C8000313F17);
  return *(double *)&v76 <= a9;
}

void sub_20F1FAB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = *(_QWORD *)(v37 - 144);
  if (v39)
    MEMORY[0x212BC6368](v39, 0x1000C8000313F17);
  if (a25)
    MEMORY[0x212BC6368](a25, 0x1000C8000313F17);
  if (a28)
    MEMORY[0x212BC6368](a28, 0x1000C8000313F17);
  if (a31)
  {
    MEMORY[0x212BC6368](a31, 0x1000C8000313F17);
    v40 = a34;
    if (!a34)
    {
LABEL_9:
      v41 = a37;
      if (!a37)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else
  {
    v40 = a34;
    if (!a34)
      goto LABEL_9;
  }
  MEMORY[0x212BC6368](v40, 0x1000C8000313F17);
  v41 = a37;
  if (!a37)
  {
LABEL_11:
    v42 = *(_QWORD *)(v37 - 216);
    if (v42)
      MEMORY[0x212BC6368](v42, 0x1000C8000313F17);
    _Unwind_Resume(exception_object);
  }
LABEL_10:
  MEMORY[0x212BC6368](v41, 0x1000C8000313F17);
  goto LABEL_11;
}

BOOL sub_20F1FACCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  float64_t v20;
  float64_t v21;
  double v22;
  double v23;
  float64x2_t *v24;
  uint64_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  double v45;
  uint64_t v46;
  int v47;
  char *v48;
  BOOL v49;
  _QWORD *v50;
  float64x2_t *v51;
  float64x2_t v53;
  float64x2_t v54;
  double v55;
  float64x2_t v57;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v62;
  float64x2_t v65;
  float64x2_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  BOOL v71;
  uint64_t v72;
  int v73;
  char *v74;
  BOOL v75;
  float64x2_t *v76;
  uint64_t v77;
  int v78;
  char *v79;
  BOOL v80;
  double v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  float64x2_t v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v113;
  float64x2_t v114;
  float64x2_t v115;
  float64x2_t v116;
  float64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  float64x2_t v125;
  float64x2_t v126;
  double v127;
  float64x2_t v128;
  double v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  float64x2_t v138;
  double v139;
  double v140;
  double v141;
  float64x2_t v142;
  double v143;
  float64x2_t v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  double v148;
  double v149;
  double v150;
  float64x2_t v151;
  float64x2_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  float64x2_t v156;
  float64x2_t v157;
  float64x2_t v158;
  float64x2_t v159;
  double v160;
  double v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  float64x2_t v165;
  float64x2_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  double v171;
  double v172;
  float64x2_t v173;
  float64x2_t v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  float64x2_t v178;
  float64x2_t v179;
  float64x2_t v180;
  float64x2_t v181;
  double v182;
  double v183;
  float64x2_t v184;
  float64x2_t v185;
  float64x2_t v186;
  float64x2_t v187;
  float64x2_t v188;
  float64x2_t v189;
  float64x2_t v190;
  float64x2_t v191;
  float64x2_t v192;
  double v193;
  double v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  float64x2_t v198;
  float64x2_t v199;
  float64x2_t v200;
  float64x2_t v201;
  float64x2_t v202;
  float64x2_t v203;
  double v204;
  double v205;
  float64x2_t v206;
  float64x2_t v207;
  float64x2_t v208;
  float64x2_t v209;
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  double v215;
  double v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  float64x2_t v223;
  float64x2_t v224;
  float64x2_t v225;
  double v226;
  double v227;
  float64x2_t v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  float64x2_t v235;
  float64x2_t v236;
  float64x2_t v237;
  float64x2_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  void *v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  float64x2_t v268;
  float64x2_t v269;
  float64x2_t v270;
  float64x2_t v271;
  float64x2_t v272;
  float64x2_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  float64x2_t v278;
  float64x2_t v279;
  float64x2_t v280;
  float64x2_t v281;
  float64x2_t v282;
  float64x2_t v283;
  float64x2_t v284;
  float64x2_t v285;
  float64x2_t v286;
  float64x2_t v287;
  float64x2_t v288;
  float64x2_t v289;
  float64x2_t v290;
  float64x2_t v291;
  float64x2_t v292;
  float64x2_t v293;
  float64x2_t v294;
  float64x2_t v295;
  float64x2_t v296;
  float64x2_t v297;
  float64x2_t v298;
  int v299;
  int v300;
  float64x2_t v301;
  float64x2_t v302;
  float64x2_t v303;
  float64x2_t v304;
  float64x2_t v305;
  float64x2_t v306;
  float64x2_t v307;
  float64x2_t v308;
  float64x2_t v309;
  float64x2_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  float64x2_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  double v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  float64x2_t v338;
  float64x2_t v339;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  double v344;
  double v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  unint64_t v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  float64_t v497;
  unint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  int8x16_t v505;
  float64x2_t v506;
  float64x2_t v507;
  float64x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  int8x16_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  float64x2_t v519;
  float64x2_t v520;
  float64x2_t v521;
  float64x2_t *v522;
  int8x16_t v523;
  float64x2_t v524;
  float64x2_t v525;
  int8x16_t v526;
  float64x2_t v527;
  float64x2_t v528;
  int8x16_t v529;
  float64x2_t v530;
  float64x2_t v531;
  int8x16_t v532;
  float64x2_t v533;
  float64x2_t v534;
  int8x16_t v535;
  float64x2_t v536;
  float64x2_t v537;
  int8x16_t v538;
  float64x2_t v539;
  float64x2_t v540;
  int8x16_t v541;
  float64x2_t v542;
  float64x2_t v543;
  int8x16_t v544;
  float64x2_t v545;
  float64x2_t v546;
  int8x16_t v547;
  float64x2_t v548;
  float64x2_t v549;
  int8x16_t v550;
  float64x2_t v551;
  float64x2_t v552;
  int8x16_t v553;
  float64x2_t v554;
  float64x2_t v555;
  void **v556;
  int8x16_t v557;
  float64x2_t v558;
  float64x2_t v559;
  int8x16_t v560;
  float64x2_t v561;
  float64x2_t v562;
  int8x16_t v563;
  float64x2_t v564;
  float64x2_t v565;
  int8x16_t v566;
  float64x2_t v567;
  float64x2_t v568;
  int8x16_t v569;
  float64x2_t v570;
  float64x2_t v571;
  int8x16_t v572;
  float64x2_t v573;
  float64x2_t v574;
  int8x16_t v575;
  float64x2_t v576;
  float64x2_t v577;
  int8x16_t v578;
  float64x2_t v579;
  float64x2_t v580;
  int8x16_t v581;
  uint64_t v582;
  float64x2_t v583;
  int8x16_t v584;
  uint64_t v585;
  float64x2_t v586;
  int8x16_t v587;
  uint64_t v588;
  float64x2_t v589;
  float64x2_t v590;
  int8x16_t v591;
  uint64_t v592;
  float64x2_t v593;
  int8x16_t v594;
  uint64_t v595;
  float64x2_t v596;
  float64x2_t v597;
  int8x16_t v598;
  uint64_t v599;
  float64x2_t v600;
  int8x16_t v601;
  uint64_t v602;
  float64x2_t v603;
  int8x16_t v604;
  uint64_t v605;
  float64x2_t v606;
  float64x2_t v607;
  int8x16_t v608;
  float64x2_t v609;
  float64x2_t v610;
  float64x2_t v611;
  uint64_t v612;
  float64x2_t v613;
  float64x2_t v614;
  int8x16_t v615;
  float64x2_t v616;
  float64x2_t v617;
  int8x16_t v618;
  float64x2_t v619;
  int8x16_t v620;
  float64x2_t v621;
  float64x2_t v622;
  int8x16_t v623;
  float64x2_t v624;
  int8x16_t v625;
  float64x2_t v626;
  int8x16_t v627;
  int8x16_t v628;
  float64x2_t v629;
  float64x2_t v630;
  float64x2_t v631;
  float64x2_t v632;
  float64x2_t v633;
  float64x2_t v634;
  float64x2_t v635;
  float64x2_t v636;
  float64x2_t v637;
  float64x2_t v638;
  float64x2_t v639;
  int8x16_t v640;
  float64x2_t v641;
  float64x2_t v642;
  float64x2_t v643;
  int8x16_t v644;
  float64x2_t v645;
  float64x2_t v646;
  int8x16_t v647;
  float64x2_t v648;
  float64x2_t v649;
  float64x2_t v650;
  int8x16_t v651;
  float64x2_t v652;
  float64x2_t v653;
  int8x16_t v654;
  float64x2_t v655;
  float64x2_t v656;
  float64x2_t v657;
  int8x16_t v658;
  float64x2_t v659;
  float64x2_t v660;
  int8x16_t v661;
  float64x2_t v662;
  float64x2_t v663;
  int8x16_t v664;
  float64x2_t v665;
  float64x2_t v666;
  float64x2_t v667;
  int8x16_t v668;
  float64x2_t v669;
  float64x2_t v670;
  float64x2_t v671;
  int8x16_t v672;
  float64x2_t v673;
  float64x2_t v674;
  double v675;
  int8x16_t v676;
  float64x2_t v677;
  float64x2_t v678;
  int8x16_t v679;
  float64x2_t v680;
  float64x2_t v681;
  int8x16_t v682;
  float64x2_t v683;
  float64x2_t v684;
  int8x16_t v685;
  float64x2_t v686;
  float64x2_t v687;
  int8x16_t v688;
  float64x2_t v689;
  float64x2_t v690;
  int8x16_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float64x2_t v694;
  int8x16_t v695;
  float64x2_t v696;
  float64x2_t v697;
  int8x16_t v698;
  float64x2_t v699;
  float64x2_t v700;
  float64x2_t v701;
  int8x16_t v702;
  float64x2_t v703;
  float64x2_t v704;
  int8x16_t v705;
  float64x2_t v706;
  float64x2_t v707;
  float64x2_t v708;
  int8x16_t v709;
  float64x2_t v710;
  float64x2_t v711;
  int8x16_t v712;
  float64x2_t v713;
  float64x2_t v714;
  int8x16_t v715;
  float64x2_t v716;
  float64x2_t v717;
  int8x16_t v718;
  float64x2_t v719;
  float64x2_t v720;
  float64x2_t v721;
  int8x16_t v722;
  float64x2_t v723;
  float64x2_t v724;
  int8x16_t v725;
  float64x2_t v726;
  float64x2_t v727;
  int8x16_t v728;
  float64x2_t v729;
  float64x2_t v730;
  float64x2_t v731;
  int8x16_t v732;
  float64x2_t v733;
  float64x2_t v734;
  int8x16_t v735;
  float64x2_t v736;
  float64x2_t v737;
  double v738;
  int8x16_t v739;
  uint64_t v740;
  float64x2_t v741;
  float64x2_t v742;
  int8x16_t v743;
  uint64_t v744;
  float64x2_t v745;
  float64x2_t v746;
  int8x16_t v747;
  uint64_t v748;
  float64x2_t v749;
  float64x2_t v750;
  int8x16_t v751;
  uint64_t v752;
  float64x2_t v753;
  float64x2_t v754;
  int8x16_t v755;
  uint64_t v756;
  float64x2_t v757;
  float64x2_t v758;
  float64x2_t v759;
  int8x16_t v760;
  uint64_t v761;
  float64x2_t v762;
  float64x2_t v763;
  int8x16_t v764;
  uint64_t v765;
  float64x2_t v766;
  float64x2_t v767;
  int8x16_t v768;
  uint64_t v769;
  float64x2_t v770;
  float64x2_t v771;
  int8x16_t v772;
  uint64_t v773;
  float64x2_t v774;
  float64x2_t v775;
  int8x16_t v776;
  uint64_t v777;
  float64x2_t v778;
  float64x2_t v779;
  int8x16_t v780;
  uint64_t v781;
  float64x2_t v782;
  float64x2_t v783;
  int8x16_t v784;
  uint64_t v785;
  float64x2_t v786;
  float64x2_t v787;
  float64x2_t v788;
  int8x16_t v789;
  uint64_t v790;
  float64x2_t v791;
  float64x2_t v792;
  int8x16_t v793;
  uint64_t v794;
  float64x2_t v795;
  float64x2_t v796;
  int8x16_t v797;
  uint64_t v798;
  float64x2_t v799;
  float64x2_t v800;
  double v801;
  int8x16_t v802;
  uint64_t v803;
  float64x2_t v804;
  float64x2_t v805;
  double v806;
  int8x16_t v807;
  float64x2_t v808;
  int8x16_t v809;
  float64x2_t v810;
  int8x16_t v811;
  float64x2_t v812;
  int8x16_t v813;
  float64x2_t v814;
  float64x2_t v815;
  int8x16_t v816;
  float64x2_t v817;
  float64x2_t v818;
  int8x16_t v819;
  float64x2_t v820;
  float64x2_t v821;
  int8x16_t v822;
  float64x2_t v823;
  float64x2_t v824;
  int8x16_t v825;
  float64x2_t v826;
  float64x2_t v827;
  int8x16_t v828;
  float64x2_t v829;
  float64x2_t v830;
  int8x16_t v831;
  float64x2_t v832;
  float64x2_t v833;
  float64x2_t v834;
  int8x16_t v835;
  float64x2_t v836;
  float64x2_t v837;
  double v838;
  int8x16_t v839;
  float64x2_t v840;
  float64x2_t v841;
  double v842;
  float64x2_t v843;
  int8x16_t v844;
  float64x2_t v845;
  float64x2_t v846;
  float64x2_t v847;
  float64x2_t v848;
  int8x16_t v849;
  float64x2_t v850;
  float64x2_t v851;
  double v852;
  float64x2_t v853;
  int8x16_t v854;
  float64x2_t v855;
  float64x2_t v856;
  float64x2_t v857;
  int8x16_t v858;
  float64x2_t v859;
  float64x2_t v860;
  int8x16_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  float64x2_t v865;
  int8x16_t v866;
  float64x2_t v867;
  float64x2_t v868;
  double v869;
  float64x2_t v870;
  int8x16_t v871;
  float64x2_t v872;
  float64x2_t v873;
  int8x16_t v874;
  float64x2_t v875;
  float64x2_t v876;
  float64x2_t v877;
  float64x2_t v878;
  int8x16_t v879;
  float64x2_t v880;
  float64x2_t v881;
  float64x2_t v882;
  float64x2_t v883;
  int8x16_t v884;
  float64x2_t v885;
  float64x2_t v886;
  float64x2_t v887;
  int8x16_t v888;
  float64x2_t v889;
  float64x2_t v890;
  float64x2_t v891;
  int8x16_t v892;
  float64x2_t v893;
  float64x2_t v894;
  float64x2_t v895;
  int8x16_t v896;
  float64x2_t v897;
  float64x2_t v898;
  float64x2_t v899;
  int8x16_t v900;
  float64x2_t v901;
  float64x2_t v902;
  float64x2_t v903;
  int8x16_t v904;
  float64x2_t v905;
  float64x2_t v906;
  float64x2_t v907;
  int8x16_t v908;
  float64x2_t v909;
  float64x2_t v910;
  float64x2_t v911;
  int8x16_t v912;
  float64x2_t v913;
  float64x2_t v914;
  float64x2_t v915;
  int8x16_t v916;
  float64x2_t v917;
  float64x2_t v918;
  float64x2_t v919;
  int8x16_t v920;
  float64x2_t v921;
  float64x2_t v922;
  int8x16_t v923;
  float64x2_t v924;
  float64x2_t v925;
  float64x2_t v926;
  float64x2_t v927;
  int8x16_t v928;
  float64x2_t v929;
  float64x2_t v930;
  float64x2_t v931;
  float64x2_t v932;
  int8x16_t v933;
  float64x2_t v934;
  float64x2_t v935;
  float64x2_t v936;
  int8x16_t v937;
  float64x2_t v938;
  float64x2_t v939;
  float64x2_t v940;
  int8x16_t v941;
  float64x2_t v942;
  float64x2_t v943;
  float64x2_t v944;
  int8x16_t v945;
  float64x2_t v946;
  float64x2_t v947;
  float64x2_t v948;
  int8x16_t v949;
  float64x2_t v950;
  float64x2_t v951;
  float64x2_t v952;
  int8x16_t v953;
  float64x2_t v954;
  float64x2_t v955;
  float64x2_t v956;
  int8x16_t v957;
  float64x2_t v958;
  float64x2_t v959;
  float64x2_t v960;
  int8x16_t v961;
  float64x2_t v962;
  float64x2_t v963;
  float64x2_t v964;
  int8x16_t v965;
  float64x2_t v966;
  float64x2_t v967;
  float64x2_t v968;
  float64x2_t v969;
  int8x16_t v970;
  float64x2_t v971;
  float64x2_t v972;
  float64x2_t v973;
  int8x16_t v974;
  float64x2_t v975;
  float64x2_t v976;
  float64x2_t v977;
  int8x16_t v978;
  float64x2_t v979;
  float64x2_t v980;
  float64x2_t v981;
  int8x16_t v982;
  float64x2_t v983;
  float64x2_t v984;
  float64x2_t v985;
  int8x16_t v986;
  float64x2_t v987;
  float64x2_t v988;
  float64x2_t v989;
  int8x16_t v990;
  float64x2_t v991;
  float64x2_t v992;
  float64x2_t v993;
  int8x16_t v994;
  float64x2_t v995;
  float64x2_t v996;
  float64x2_t v997;
  int8x16_t v998;
  float64x2_t v999;
  float64x2_t v1000;
  float64x2_t v1001;
  int8x16_t v1002;
  float64x2_t v1003;
  float64x2_t v1004;
  float64x2_t v1005;
  int8x16_t v1006;
  float64x2_t v1007;
  float64x2_t v1008;
  float64x2_t v1009;
  int8x16_t v1010;
  float64x2_t v1011;
  float64x2_t v1012;
  float64x2_t v1013;
  int8x16_t v1014;
  float64x2_t v1015;
  float64x2_t v1016;
  float64x2_t v1017;
  int8x16_t v1018;
  float64x2_t v1019;
  float64x2_t v1020;
  float64x2_t v1021;
  float64x2_t v1022;
  float64x2_t v1023;
  int8x16_t v1024;
  float64x2_t v1025;
  float64x2_t v1026;
  float64x2_t v1027;
  float64x2_t v1028;
  int8x16_t v1029;
  float64x2_t v1030;
  float64x2_t v1031;
  float64x2_t v1032;
  float64x2_t v1033;
  int8x16_t v1034;
  float64x2_t v1035;
  float64x2_t v1036;
  float64x2_t v1037;
  float64x2_t v1038;
  int8x16_t v1039;
  float64x2_t v1040;
  float64x2_t v1041;
  float64x2_t v1042;
  float64x2_t v1043;
  int8x16_t v1044;
  float64x2_t v1045;
  float64x2_t v1046;
  float64x2_t v1047;
  float64x2_t v1048;
  int8x16_t v1049;
  float64x2_t v1050;
  float64x2_t v1051;
  float64x2_t v1052;
  float64x2_t v1053;
  int8x16_t v1054;
  float64x2_t v1055;
  float64x2_t v1056;
  float64x2_t v1057;
  float64x2_t v1058;
  int8x16_t v1059;
  float64x2_t v1060;
  float64x2_t v1061;
  float64x2_t v1062;
  float64x2_t v1063;
  float64x2_t v1064;
  int8x16_t v1065;
  float64x2_t v1066;
  float64x2_t v1067;
  float64x2_t v1068;
  float64x2_t v1069;
  int8x16_t v1070;
  float64x2_t v1071;
  float64x2_t v1072;
  float64x2_t v1073;
  int8x16_t v1074;
  float64x2_t v1075;
  float64x2_t v1076;
  float64x2_t v1077;
  float64x2_t v1078;
  int8x16_t v1079;
  float64x2_t v1080;
  float64x2_t v1081;
  float64x2_t v1082;
  float64x2_t v1083;
  int8x16_t v1084;
  float64x2_t v1085;
  float64x2_t v1086;
  float64x2_t v1087;
  int8x16_t v1088;
  float64x2_t v1089;
  float64x2_t v1090;
  float64x2_t v1091;
  int8x16_t v1092;
  float64x2_t v1093;
  float64x2_t v1094;
  float64x2_t v1095;
  float64x2_t v1096;
  float64x2_t v1097;
  float64x2_t v1098;
  float64x2_t v1099;
  float64x2_t v1100;
  float64x2_t v1101;
  float64x2_t v1102;
  float64x2_t v1103;
  float64x2_t v1104;
  float64x2_t v1105;
  float64x2_t v1106;
  float64x2_t v1107;
  float64x2_t v1108;
  float64x2_t v1109;
  float64x2_t v1110;
  float64x2_t v1111;
  float64x2_t v1112;
  float64x2_t v1113;
  float64x2_t v1114;
  float64x2_t v1115;
  float64x2_t v1116;
  float64x2_t v1117;
  float64x2_t v1118;
  float64x2_t v1119;
  _OWORD *v1120;
  _QWORD v1121[2];
  _OWORD v1122[162];
  float64x2_t v1123;
  float64x2_t v1124;
  float64x2_t v1125;
  float64x2_t v1126;
  float64x2_t v1127;
  float64x2_t v1128;
  float64x2_t v1129;
  float64x2_t v1130;
  float64x2_t v1131;
  float64x2_t v1132;
  float64x2_t v1133;
  float64x2_t v1134;
  float64x2_t v1135;
  float64x2_t v1136;
  float64x2_t v1137;
  float64x2_t v1138;
  float64x2_t v1139;
  float64x2_t v1140;
  float64x2_t v1141;
  float64x2_t v1142;
  float64x2_t v1143;
  float64x2_t v1144;
  float64x2_t v1145;
  float64x2_t v1146;
  float64x2_t v1147;
  float64x2_t v1148;
  float64x2_t v1149;
  float64x2_t v1150;
  float64x2_t v1151;
  float64x2_t v1152;
  float64x2_t v1153;
  float64x2_t v1154;
  float64x2_t v1155;
  float64x2_t v1156;
  float64x2_t v1157;
  float64x2_t v1158;
  float64x2_t v1159;
  float64x2_t v1160;
  float64x2_t v1161;
  float64x2_t v1162;
  float64x2_t v1163;
  float64x2_t v1164;
  float64x2_t v1165;
  float64x2_t v1166;
  float64x2_t v1167;
  float64x2_t v1168;
  float64x2_t v1169;
  float64x2_t v1170;
  float64x2_t v1171;
  float64x2_t v1172;
  float64x2_t v1173;
  float64x2_t v1174;
  float64x2_t v1175;
  float64x2_t v1176;
  float64x2_t v1177;
  double v1178;
  float64x2_t v1179;
  double v1180;
  float64x2_t v1181;
  double v1182;
  float64x2_t v1183;
  float64x2_t v1184;
  float64x2_t v1185;
  float64x2_t v1186;
  uint64_t v1187;
  _BYTE v1188[152];
  float64x2_t v1189;
  float64x2_t v1190;
  float64x2_t v1191;
  float64x2_t v1192;
  float64x2_t v1193;
  float64x2_t v1194;
  float64x2_t v1195;
  float64x2_t v1196;
  float64x2_t v1197;
  float64x2_t v1198;
  float64x2_t v1199;
  float64x2_t v1200;
  float64x2_t v1201;
  float64x2_t v1202;
  float64x2_t v1203;
  float64x2_t v1204;
  float64x2_t v1205;
  float64x2_t v1206;
  float64x2_t v1207;
  float64x2_t v1208;
  float64x2_t v1209;
  float64x2_t v1210;
  float64x2_t v1211;
  float64x2_t v1212;
  float64x2_t v1213;
  float64x2_t v1214;
  float64x2_t v1215;
  float64x2_t v1216;
  float64x2_t v1217;
  float64x2_t v1218;
  float64x2_t v1219;
  float64x2_t v1220;
  float64x2_t v1221;
  float64x2_t v1222;
  float64x2_t v1223;
  float64x2_t v1224;
  float64x2_t v1225;
  float64x2_t v1226;
  float64x2_t v1227;
  float64x2_t v1228;
  float64x2_t v1229;
  float64x2_t v1230;
  float64x2_t v1231;
  float64x2_t v1232;
  float64x2_t v1233;
  float64x2_t v1234;
  float64x2_t v1235;
  float64x2_t v1236;
  float64x2_t v1237;
  float64x2_t v1238;
  float64x2_t v1239;
  float64x2_t v1240;
  float64x2_t v1241;
  float64x2_t v1242;
  float64x2_t v1243;
  float64x2_t v1244;
  float64x2_t v1245;
  float64x2_t v1246;
  float64x2_t v1247;
  float64x2_t v1248;
  float64x2_t v1249;
  float64x2_t v1250;
  float64x2_t v1251;
  float64x2_t v1252;
  float64x2_t v1253;
  float64x2_t v1254;
  float64x2_t v1255;
  float64x2_t v1256;
  float64x2_t v1257;
  float64x2_t v1258;
  float64x2_t v1259;
  float64x2_t v1260;
  float64x2_t v1261;
  float64x2_t v1262;
  float64x2_t v1263;
  float64x2_t v1264;
  float64x2_t v1265;
  float64x2_t v1266;
  float64x2_t v1267;
  float64x2_t v1268;
  float64x2_t v1269;
  float64x2_t v1270;
  float64x2_t v1271;
  float64x2_t v1272;
  float64x2_t v1273;
  float64x2_t v1274;
  float64x2_t v1275;
  float64x2_t v1276;
  float64x2_t v1277;
  float64x2_t v1278;
  float64x2_t v1279;
  float64x2_t v1280;
  float64x2_t v1281;
  float64x2_t v1282;
  float64x2_t v1283;
  float64x2_t v1284;
  float64x2_t v1285;
  float64x2_t v1286;
  float64x2_t v1287;
  float64x2_t v1288;
  float64x2_t v1289;
  float64x2_t v1290;
  float64x2_t v1291;
  float64x2_t v1292;
  float64x2_t v1293;
  float64x2_t v1294;
  float64x2_t v1295;
  float64x2_t v1296;
  float64x2_t v1297;
  float64x2_t v1298;
  float64x2_t v1299;
  float64x2_t v1300;
  float64x2_t v1301;
  float64x2_t v1302;
  float64x2_t v1303;
  float64x2_t v1304;
  float64x2_t v1305;
  float64x2_t v1306;
  float64x2_t v1307;
  float64x2_t v1308;
  float64x2_t v1309;
  float64x2_t v1310;
  float64x2_t v1311;
  float64x2_t v1312;
  float64x2_t v1313;
  float64x2_t v1314;
  float64x2_t v1315;
  float64x2_t v1316;
  float64x2_t v1317;
  float64x2_t v1318;
  float64x2_t v1319;
  float64x2_t v1320;
  float64x2_t v1321;
  float64x2_t v1322;
  float64x2_t v1323;
  float64x2_t v1324;
  float64x2_t v1325;
  float64x2_t v1326;
  float64x2_t v1327;
  float64x2_t v1328;
  float64x2_t v1329;
  float64x2_t v1330;
  float64x2_t v1331;
  float64x2_t v1332;
  float64x2_t v1333;
  float64x2_t v1334;
  float64x2_t v1335;
  float64x2_t v1336;
  float64x2_t v1337;
  float64x2_t v1338;
  float64x2_t v1339;
  float64x2_t v1340;
  float64x2_t v1341;
  int8x16_t v1342;
  int8x16_t v1343;
  int8x16_t v1344;
  int8x16_t v1345;
  int8x16_t v1346;
  int8x16_t v1347;
  int8x16_t v1348;
  int8x16_t v1349;
  int8x16_t v1350;
  int8x16_t v1351;
  int8x16_t v1352;
  int8x16_t v1353;
  int8x16_t v1354;
  int8x16_t v1355;
  int8x16_t v1356;
  int8x16_t v1357;
  int8x16_t v1358;
  int8x16_t v1359;
  int8x16_t v1360;
  int8x16_t v1361;
  int8x16_t v1362;
  int8x16_t v1363;
  int8x16_t v1364;
  int8x16_t v1365;
  int8x16_t v1366;
  int8x16_t v1367;
  int8x16_t v1368;
  int8x16_t v1369;
  int8x16_t v1370;
  int8x16_t v1371;
  int8x16_t v1372;
  int8x16_t v1373;
  int8x16_t v1374;
  int8x16_t v1375;
  int8x16_t v1376;
  int8x16_t v1377;
  int8x16_t v1378;
  int8x16_t v1379;
  int8x16_t v1380;
  int8x16_t v1381;
  int8x16_t v1382;
  int8x16_t v1383;
  int8x16_t v1384;
  int8x16_t v1385;
  int8x16_t v1386;
  int8x16_t v1387;
  int8x16_t v1388;
  int8x16_t v1389;
  int8x16_t v1390;
  int8x16_t v1391;
  int8x16_t v1392;
  int8x16_t v1393;
  int8x16_t v1394;
  int8x16_t v1395;
  int8x16_t v1396;
  int8x16_t v1397;
  int8x16_t v1398;
  int8x16_t v1399;
  int8x16_t v1400;
  int8x16_t v1401;
  int8x16_t v1402;
  int8x16_t v1403;
  int8x16_t v1404;
  int8x16_t v1405;
  int8x16_t v1406;
  int8x16_t v1407;
  int8x16_t v1408;
  int8x16_t v1409;
  int8x16_t v1410;
  int8x16_t v1411;
  int8x16_t v1412;
  int8x16_t v1413;
  int8x16_t v1414;
  int8x16_t v1415;
  int8x16_t v1416;
  int8x16_t v1417;
  int8x16_t v1418;
  int8x16_t v1419;
  int8x16_t v1420;
  int8x16_t v1421;
  int8x16_t v1422;
  int8x16_t v1423;
  int8x16_t v1424;
  int8x16_t v1425;
  int8x16_t v1426;
  int8x16_t v1427;
  int8x16_t v1428;
  int8x16_t v1429;
  int8x16_t v1430;
  int8x16_t v1431;
  int8x16_t v1432;
  int8x16_t v1433;
  int8x16_t v1434;
  int8x16_t v1435;
  int8x16_t v1436;
  int8x16_t v1437;
  int8x16_t v1438;
  int8x16_t v1439;
  int8x16_t v1440;
  int8x16_t v1441;
  int8x16_t v1442;
  int8x16_t v1443;
  int8x16_t v1444;
  int8x16_t v1445;
  int8x16_t v1446;
  int8x16_t v1447;
  int8x16_t v1448;
  int8x16_t v1449;
  int8x16_t v1450;
  int8x16_t v1451;
  int8x16_t v1452;
  int8x16_t v1453;
  int8x16_t v1454;
  int8x16_t v1455;
  int8x16_t v1456;
  int8x16_t v1457;
  int8x16_t v1458;
  int8x16_t v1459;
  int8x16_t v1460;
  int8x16_t v1461;
  int8x16_t v1462;
  int8x16_t v1463;
  int8x16_t v1464;
  int8x16_t v1465;
  int8x16_t v1466;
  int8x16_t v1467;
  int8x16_t v1468;
  int8x16_t v1469;
  int8x16_t v1470;
  int8x16_t v1471;
  int8x16_t v1472;
  int8x16_t v1473;
  int8x16_t v1474;
  int8x16_t v1475;
  int8x16_t v1476;
  int8x16_t v1477;
  int8x16_t v1478;
  int8x16_t v1479;
  int8x16_t v1480;
  int8x16_t v1481;
  int8x16_t v1482;
  int8x16_t v1483;
  int8x16_t v1484;
  int8x16_t v1485;
  int8x16_t v1486;
  int8x16_t v1487;
  int8x16_t v1488;
  int8x16_t v1489;
  int8x16_t v1490;
  int8x16_t v1491;
  int8x16_t v1492;
  int8x16_t v1493;
  int8x16_t v1494;
  int8x16_t v1495;
  int8x16_t v1496;
  int8x16_t v1497;
  int8x16_t v1498;
  int8x16_t v1499;
  int8x16_t v1500;
  int8x16_t v1501;
  int8x16_t v1502;
  int8x16_t v1503;
  float64x2_t v1504;
  float64x2_t v1505;
  float64x2_t v1506;
  float64x2_t v1507;
  float64x2_t v1508;
  float64x2_t v1509;
  float64x2_t v1510;
  float64x2_t v1511;
  float64x2_t v1512;
  float64x2_t v1513;
  float64x2_t v1514;
  float64x2_t v1515;
  float64x2_t v1516;
  float64x2_t v1517;
  float64x2_t v1518;
  float64x2_t v1519;
  float64x2_t v1520;
  float64x2_t v1521;
  float64x2_t v1522;
  float64x2_t v1523;
  float64x2_t v1524;
  float64x2_t v1525;
  float64x2_t v1526;
  float64x2_t v1527;
  float64x2_t v1528;
  float64x2_t v1529;
  float64x2_t v1530;
  float64x2_t v1531;
  float64x2_t v1532;
  float64x2_t v1533;
  float64x2_t v1534;
  float64x2_t v1535;
  float64x2_t v1536;
  float64x2_t v1537;
  float64x2_t v1538;
  float64x2_t v1539;
  float64x2_t v1540;
  float64x2_t v1541;
  float64x2_t v1542;
  float64x2_t v1543;
  float64x2_t v1544;
  float64x2_t v1545;
  float64x2_t v1546;
  float64x2_t v1547;
  float64x2_t v1548;
  float64x2_t v1549;
  float64x2_t v1550;
  float64x2_t v1551;
  float64x2_t v1552;
  float64x2_t v1553;
  float64x2_t v1554;
  float64x2_t v1555;
  float64x2_t v1556;
  float64x2_t v1557;
  float64x2_t v1558;
  float64x2_t v1559;
  float64x2_t v1560;
  float64x2_t v1561;
  float64x2_t v1562;
  float64x2_t v1563;
  float64x2_t v1564;
  float64x2_t v1565;
  float64x2_t v1566;
  float64x2_t v1567;
  float64x2_t v1568;
  float64x2_t v1569;
  float64x2_t v1570;
  float64x2_t v1571;
  float64x2_t v1572;
  float64x2_t v1573;
  float64x2_t v1574;
  float64x2_t v1575;
  float64x2_t v1576;
  float64x2_t v1577;
  float64x2_t v1578;
  float64x2_t v1579;
  float64x2_t v1580;
  float64x2_t v1581;
  float64x2_t v1582;
  float64x2_t v1583;
  float64x2_t v1584;
  float64x2_t v1585;
  float64x2_t v1586;
  float64x2_t v1587;
  float64x2_t v1588;
  float64x2_t v1589;
  float64x2_t v1590;
  float64x2_t v1591;
  float64x2_t v1592;
  float64x2_t v1593;
  float64x2_t v1594;
  float64x2_t v1595;
  float64x2_t v1596;
  float64x2_t v1597;
  float64x2_t v1598;
  float64x2_t v1599;
  float64x2_t v1600;
  float64x2_t v1601;
  float64x2_t v1602;
  float64x2_t v1603;
  float64x2_t v1604;
  float64x2_t v1605;
  float64x2_t v1606;
  float64x2_t v1607;
  float64x2_t v1608;
  float64x2_t v1609;
  float64x2_t v1610;
  float64x2_t v1611;
  float64x2_t v1612;
  float64x2_t v1613;
  float64x2_t v1614;
  float64x2_t v1615;
  float64x2_t v1616;
  float64x2_t v1617;
  float64x2_t v1618;
  float64x2_t v1619;
  float64x2_t v1620;
  float64x2_t v1621;
  float64x2_t v1622;
  float64x2_t v1623;
  float64x2_t v1624;
  float64x2_t v1625;
  float64x2_t v1626;
  float64x2_t v1627;
  float64x2_t v1628;
  float64x2_t v1629;
  float64x2_t v1630;
  float64x2_t v1631;
  float64x2_t v1632;
  float64x2_t v1633;
  float64x2_t v1634;
  float64x2_t v1635;
  float64x2_t v1636;
  float64x2_t v1637;
  float64x2_t v1638;
  float64x2_t v1639;
  float64x2_t v1640;
  float64x2_t v1641;
  float64x2_t v1642;
  float64x2_t v1643;
  float64x2_t v1644;
  float64x2_t v1645;
  float64x2_t v1646;
  float64x2_t v1647;
  float64x2_t v1648;
  float64x2_t v1649;
  float64x2_t v1650;
  float64x2_t v1651;
  float64x2_t v1652;
  float64x2_t v1653;
  float64x2_t v1654;
  float64x2_t v1655;
  float64x2_t v1656;
  float64x2_t v1657;
  float64x2_t v1658;
  float64x2_t v1659;
  float64x2_t v1660;
  float64x2_t v1661;
  float64x2_t v1662;
  float64x2_t v1663;
  float64x2_t v1664;
  float64x2_t v1665;
  uint64_t v1666;

  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v522 = v24;
  v25 = v9;
  v1666 = *MEMORY[0x24BDAC8D0];
  *(float64_t *)v1122 = v20;
  v556 = (void **)(v9 + 224);
  *((_QWORD *)&v1122[0] + 1) = v9 + 224;
  v1150.f64[0] = v20;
  *(_QWORD *)&v1504.f64[1] = v1122;
  *(_QWORD *)&v1505.f64[0] = &v1150;
  v1505.f64[1] = 1.0;
  sub_20F20975C((uint64_t)&v1188[8], (uint64_t)&v1504);
  v26.f64[0] = *(float64_t *)&v1188[72];
  v27.f64[0] = *(float64_t *)(v19 + 64);
  v28 = vaddq_f64(*(float64x2_t *)&v1188[8], *(float64x2_t *)v19);
  v29 = vaddq_f64(*(float64x2_t *)&v1188[24], *(float64x2_t *)(v19 + 16));
  v30 = vaddq_f64(*(float64x2_t *)&v1188[40], *(float64x2_t *)(v19 + 32));
  v1186 = vaddq_f64(*(float64x2_t *)&v1188[56], *(float64x2_t *)(v19 + 48));
  v1185 = v30;
  v1184 = v29;
  v1183 = v28;
  v1187 = *(_OWORD *)&vaddq_f64(v26, v27);
  sub_20E8BE424((uint64_t)&v1177);
  v31 = v522[1].f64[0];
  _Q1 = *v522;
  _D2 = v1177.f64[1];
  __asm { FMLA            D16, D2, V1.D[1] }
  _D5 = v1179.f64[1];
  __asm { FMLA            D3, D5, V1.D[1] }
  _D3 = _D3 + v31 * v1180;
  _D5 = v1181.f64[1];
  __asm
  {
    FMLA            D4, D5, V1.D[1]
    FMLA            D2, D3, V1.D[1]
  }
  v45 = _D2 + (_D4 + v31 * v1182) * v31;
  if (v45 > v23)
    return v45 <= v23;
  v344 = v45;
  v1504.f64[0] = v21;
  *(_QWORD *)&v1188[8] = v556;
  *(_QWORD *)&v1188[16] = &v1504;
  *(_QWORD *)&v1188[24] = 0x3FF0000000000000;
  sub_20F209A80(v1150.f64, (uint64_t)v1188);
  v1124 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1151, v1177.f64[0]), v1160, v1177, 1), v1169, v1178);
  v1123 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1150, v1177.f64[0]), v1159, v1177, 1), v1168, v1178);
  v1133 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1151, v1179.f64[0]), v1160, v1179, 1), v1169, v1180);
  v1132 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1150, v1179.f64[0]), v1159, v1179, 1), v1168, v1180);
  v1142 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1151, v1181.f64[0]), v1160, v1181, 1), v1169, v1182);
  v1141 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1150, v1181.f64[0]), v1159, v1181, 1), v1168, v1182);
  v1126 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1153, v1177.f64[0]), v1162, v1177, 1), v1171, v1178);
  v1125 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1152, v1177.f64[0]), v1161, v1177, 1), v1170, v1178);
  v1135 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1153, v1179.f64[0]), v1162, v1179, 1), v1171, v1180);
  v1134 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1152, v1179.f64[0]), v1161, v1179, 1), v1170, v1180);
  v1144 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1153, v1181.f64[0]), v1162, v1181, 1), v1171, v1182);
  v1143 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1152, v1181.f64[0]), v1161, v1181, 1), v1170, v1182);
  v1128 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1155, v1177.f64[0]), v1164, v1177, 1), v1173, v1178);
  v1127 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1154, v1177.f64[0]), v1163, v1177, 1), v1172, v1178);
  v1137 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1155, v1179.f64[0]), v1164, v1179, 1), v1173, v1180);
  v1136 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1154, v1179.f64[0]), v1163, v1179, 1), v1172, v1180);
  v1146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1155, v1181.f64[0]), v1164, v1181, 1), v1173, v1182);
  v1145 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1154, v1181.f64[0]), v1163, v1181, 1), v1172, v1182);
  v1130 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1157, v1177.f64[0]), v1166, v1177, 1), v1175, v1178);
  v1129 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1156, v1177.f64[0]), v1165, v1177, 1), v1174, v1178);
  v1139 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1157, v1179.f64[0]), v1166, v1179, 1), v1175, v1180);
  v1138 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1156, v1179.f64[0]), v1165, v1179, 1), v1174, v1180);
  v1148 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1157, v1181.f64[0]), v1166, v1181, 1), v1175, v1182);
  v1147 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1156, v1181.f64[0]), v1165, v1181, 1), v1174, v1182);
  v1131 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1158, v1177.f64[0]), v1167, v1177, 1), v1176, v1178);
  v1140 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1158, v1179.f64[0]), v1167, v1179, 1), v1176, v1180);
  v1149 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1158, v1181.f64[0]), v1167, v1181, 1), v1176, v1182);
  if (v17)
  {
    v46 = 0;
    v47 = 0;
    v48 = (char *)&v1123.f64[*(unsigned int *)(v25 + 432)];
    do
    {
      *(_QWORD *)&v48[8 * v46] = 0;
      v49 = v47 < 1;
      if (v47 < 1)
        ++v47;
      else
        v47 = 0;
      if (v49)
        ++v46;
      else
        v46 += 17;
    }
    while (v46 != 54);
  }
  if (v15)
  {
    v50 = (_QWORD *)&v1123.f64[*(_DWORD *)(v25 + 432) + 2];
    *v50 = 0;
    v50[18] = 0;
    v50[36] = 0;
    v51 = (float64x2_t *)((char *)&v1123 + 8 * *(unsigned int *)(v25 + 536));
    _Q1.f64[0] = *(float64_t *)(v25 + 456);
    v53 = *(float64x2_t *)(v25 + 440);
    v54 = *(float64x2_t *)(v25 + 464);
    v55 = *(double *)(v25 + 504);
    _Q4 = *(float64x2_t *)(v25 + 488);
    v57 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, v51->f64[0]), v54, *v51, 1), _Q4, v51[1].f64[0]);
    _Q5 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, v51[9].f64[0]), v54, v51[9], 1), _Q4, v51[10].f64[0]);
    v59 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v53, v51[18].f64[0]), v54, v51[18], 1), _Q4, v51[19].f64[0]);
    v60 = (float64x2_t)vzip1q_s64((int64x2_t)v53, (int64x2_t)v54);
    _Q2 = (float64x2_t)vzip2q_s64((int64x2_t)v53, (int64x2_t)v54);
    _Q1.f64[1] = *(float64_t *)(v25 + 480);
    v62 = vmlaq_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, v57.f64[0]), _Q2, v57, 1), (float64x2_t)0, _Q1);
    _D18 = v57.f64[1];
    __asm { FMLA            D17, D18, V4.D[1] }
    v65 = vmlaq_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, _Q5.f64[0]), _Q2, _Q5, 1), (float64x2_t)0, _Q1);
    _Q5.f64[0] = _Q5.f64[1];
    __asm { FMLA            D20, D5, V4.D[1] }
    v67 = vmlaq_f64(vmlaq_laneq_f64(vmulq_n_f64(v60, v59.f64[0]), _Q2, v59, 1), (float64x2_t)0, _Q1);
    _Q2.f64[0] = v59.f64[1];
    __asm { FMLA            D1, D2, V4.D[1] }
    *v51 = v62;
    v51[1].f64[0] = _D17 + v55 * 0.0;
    v51[9] = v65;
    v51[10].f64[0] = _D20 + v55 * 0.0;
    v51[18] = v67;
    v51[19].f64[0] = _Q1.f64[0] + v55 * 0.0;
  }
  if (v13)
  {
    v68 = 0;
    v69 = 0;
    v70 = (char *)&v1123.f64[*(unsigned int *)(v25 + 536)];
    do
    {
      *(_QWORD *)&v70[8 * v68] = 0;
      v71 = v69 < 2;
      if (v69 < 2)
        ++v69;
      else
        v69 = 0;
      if (v71)
        ++v68;
      else
        v68 += 16;
    }
    while (v68 != 54);
  }
  if (v11)
  {
    v72 = 0;
    v73 = 0;
    v74 = (char *)&v1123.f64[*(unsigned int *)(v25 + 568)];
    do
    {
      *(_QWORD *)&v74[8 * v72] = 0;
      v75 = v73 < 2;
      if (v73 < 2)
        ++v73;
      else
        v73 = 0;
      if (v75)
        ++v72;
      else
        v72 += 16;
    }
    while (v72 != 54);
  }
  v345 = v23;
  v76 = (float64x2_t *)(*(_QWORD *)&v21 + 264);
  if (a9)
  {
    v77 = 0;
    v78 = 0;
    v79 = (char *)&v1123.f64[*(unsigned int *)(v25 + 600)];
    do
    {
      *(_QWORD *)&v79[8 * v77] = 0;
      v80 = v78 < 2;
      if (v78 < 2)
        ++v78;
      else
        v78 = 0;
      if (v80)
        ++v77;
      else
        v77 += 16;
    }
    while (v77 != 54);
  }
  v1114 = v1142;
  v1112 = v1141;
  v81 = *(double *)(*(_QWORD *)&v21 + 16);
  v877 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, **(double **)&v21), v1132, **(float64x2_t **)&v21, 1), v1141, v81);
  v1052 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, **(double **)&v21), v1133, **(float64x2_t **)&v21, 1), v1142, v81);
  v1110 = v1137;
  v1118 = v1129;
  v1101 = v1130;
  v1108 = v1131;
  v1111 = v1140;
  v1109 = v1143;
  v1047 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, **(double **)&v21), v1134, **(float64x2_t **)&v21, 1), v1143, v81);
  v1042 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, **(double **)&v21), v1135, **(float64x2_t **)&v21, 1), v1144, v81);
  v1103 = v1144;
  v1037 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, **(double **)&v21), v1136, **(float64x2_t **)&v21, 1), v1145, v81);
  v1105 = v1146;
  v1032 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, **(double **)&v21), v1137, **(float64x2_t **)&v21, 1), v1146, v81);
  v1119 = v1147;
  v1027 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, **(double **)&v21), v1138, **(float64x2_t **)&v21, 1), v1147, v81);
  v1022 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, **(double **)&v21), v1139, **(float64x2_t **)&v21, 1), v1148, v81);
  v1095 = v1148;
  v1017 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, **(double **)&v21), v1140, **(float64x2_t **)&v21, 1), v1149, v81);
  v82 = *(float64x2_t *)(*(_QWORD *)&v21 + 24);
  v1115 = v1132;
  v83 = vmlaq_laneq_f64(vmulq_n_f64(v1123, v82.f64[0]), v1132, v82, 1);
  v84 = vmlaq_laneq_f64(vmulq_n_f64(v1124, v82.f64[0]), v1133, v82, 1);
  v85 = vmlaq_laneq_f64(vmulq_n_f64(v1125, v82.f64[0]), v1134, v82, 1);
  v1106 = v1134;
  v1113 = v1126;
  v86 = vmlaq_laneq_f64(vmulq_n_f64(v1126, v82.f64[0]), v1135, v82, 1);
  v1117 = v1127;
  v87 = vmlaq_laneq_f64(vmulq_n_f64(v1127, v82.f64[0]), v1136, v82, 1);
  v1107 = v1136;
  v88 = vmlaq_laneq_f64(vmulq_n_f64(v1128, v82.f64[0]), v1137, v82, 1);
  v89 = vmlaq_laneq_f64(vmulq_n_f64(v1129, v82.f64[0]), v1138, v82, 1);
  v90 = vmlaq_laneq_f64(vmulq_n_f64(v1130, v82.f64[0]), v1139, v82, 1);
  v91 = vmlaq_laneq_f64(vmulq_n_f64(v1131, v82.f64[0]), v1140, v82, 1);
  v82.f64[0] = *(float64_t *)(*(_QWORD *)&v21 + 40);
  v882 = vmlaq_n_f64(v83, v1141, v82.f64[0]);
  v1013 = vmlaq_n_f64(v84, v1142, v82.f64[0]);
  v1009 = vmlaq_n_f64(v85, v1143, v82.f64[0]);
  v1005 = vmlaq_n_f64(v86, v1144, v82.f64[0]);
  v1104 = v1145;
  v1001 = vmlaq_n_f64(v87, v1145, v82.f64[0]);
  v997 = vmlaq_n_f64(v88, v1146, v82.f64[0]);
  v993 = vmlaq_n_f64(v89, v1147, v82.f64[0]);
  v989 = vmlaq_n_f64(v90, v1148, v82.f64[0]);
  v985 = vmlaq_n_f64(v91, v1149, v82.f64[0]);
  v92 = *(float64x2_t *)(*(_QWORD *)&v21 + 48);
  v93 = vmlaq_laneq_f64(vmulq_n_f64(v1123, v92.f64[0]), v1132, v92, 1);
  v94 = vmlaq_laneq_f64(vmulq_n_f64(v1124, v92.f64[0]), v1133, v92, 1);
  v95 = vmlaq_laneq_f64(vmulq_n_f64(v1125, v92.f64[0]), v1134, v92, 1);
  v96 = vmlaq_laneq_f64(vmulq_n_f64(v1126, v92.f64[0]), v1135, v92, 1);
  v97 = vmlaq_laneq_f64(vmulq_n_f64(v1127, v92.f64[0]), v1136, v92, 1);
  v1099 = v1128;
  v98 = vmlaq_laneq_f64(vmulq_n_f64(v1128, v92.f64[0]), v1137, v92, 1);
  v1098 = v1138;
  v99 = vmlaq_laneq_f64(vmulq_n_f64(v1129, v92.f64[0]), v1138, v92, 1);
  v100 = vmlaq_laneq_f64(vmulq_n_f64(v1130, v92.f64[0]), v1139, v92, 1);
  v101 = vmlaq_laneq_f64(vmulq_n_f64(v1131, v92.f64[0]), v1140, v92, 1);
  v92.f64[0] = *(float64_t *)(*(_QWORD *)&v21 + 64);
  v981 = vmlaq_n_f64(v93, v1141, v92.f64[0]);
  v102 = vmlaq_n_f64(v94, v1142, v92.f64[0]);
  v977 = vmlaq_n_f64(v95, v1143, v92.f64[0]);
  v973 = vmlaq_n_f64(v96, v1144, v92.f64[0]);
  v968 = vmlaq_n_f64(v97, v1145, v92.f64[0]);
  v964 = vmlaq_n_f64(v98, v1146, v92.f64[0]);
  v952 = vmlaq_n_f64(v99, v1147, v92.f64[0]);
  v948 = vmlaq_n_f64(v100, v1148, v92.f64[0]);
  v960 = vmlaq_n_f64(v101, v1149, v92.f64[0]);
  v103 = *(float64x2_t *)(*(_QWORD *)&v21 + 72);
  v104 = vmlaq_laneq_f64(vmulq_n_f64(v1123, v103.f64[0]), v1132, v103, 1);
  v105 = vmlaq_laneq_f64(vmulq_n_f64(v1124, v103.f64[0]), v1133, v103, 1);
  v106 = vmlaq_laneq_f64(vmulq_n_f64(v1125, v103.f64[0]), v1134, v103, 1);
  v107 = vmlaq_laneq_f64(vmulq_n_f64(v1126, v103.f64[0]), v1135, v103, 1);
  v1102 = v1135;
  v108 = vmlaq_laneq_f64(vmulq_n_f64(v1127, v103.f64[0]), v1136, v103, 1);
  v109 = vmlaq_laneq_f64(vmulq_n_f64(v1128, v103.f64[0]), v1137, v103, 1);
  v110 = vmlaq_laneq_f64(vmulq_n_f64(v1129, v103.f64[0]), v1138, v103, 1);
  v111 = vmlaq_laneq_f64(vmulq_n_f64(v1130, v103.f64[0]), v1139, v103, 1);
  v112 = vmlaq_laneq_f64(vmulq_n_f64(v1131, v103.f64[0]), v1140, v103, 1);
  v103.f64[0] = *(float64_t *)(*(_QWORD *)&v21 + 88);
  v956 = vmlaq_n_f64(v104, v1141, v103.f64[0]);
  v873 = vmlaq_n_f64(v105, v1142, v103.f64[0]);
  v944 = vmlaq_n_f64(v106, v1143, v103.f64[0]);
  v940 = vmlaq_n_f64(v107, v1144, v103.f64[0]);
  v936 = vmlaq_n_f64(v108, v1145, v103.f64[0]);
  v931 = vmlaq_n_f64(v109, v1146, v103.f64[0]);
  v927 = vmlaq_n_f64(v110, v1147, v103.f64[0]);
  v919 = vmlaq_n_f64(v111, v1148, v103.f64[0]);
  v1100 = v1149;
  v911 = vmlaq_n_f64(v112, v1149, v103.f64[0]);
  v113 = *(float64x2_t *)(*(_QWORD *)&v21 + 96);
  v1116 = v1123;
  v114 = vmlaq_laneq_f64(vmulq_n_f64(v1123, v113.f64[0]), v1132, v113, 1);
  v1096 = v1124;
  v115 = vmlaq_laneq_f64(vmulq_n_f64(v1124, v113.f64[0]), v1133, v113, 1);
  v818 = v1133;
  v1097 = v1125;
  v116 = vmlaq_laneq_f64(vmulq_n_f64(v1125, v113.f64[0]), v1134, v113, 1);
  v117 = vmlaq_laneq_f64(vmulq_n_f64(v1126, v113.f64[0]), v1135, v113, 1);
  v118 = vmlaq_laneq_f64(vmulq_n_f64(v1127, v113.f64[0]), v1136, v113, 1);
  v119 = vmlaq_laneq_f64(vmulq_n_f64(v1128, v113.f64[0]), v1137, v113, 1);
  v120 = vmlaq_laneq_f64(vmulq_n_f64(v1129, v113.f64[0]), v1138, v113, 1);
  v121 = vmlaq_laneq_f64(vmulq_n_f64(v1130, v113.f64[0]), v1139, v113, 1);
  v122 = vmlaq_laneq_f64(vmulq_n_f64(v1131, v113.f64[0]), v1140, v113, 1);
  v113.f64[0] = *(float64_t *)(*(_QWORD *)&v21 + 112);
  v922 = vmlaq_n_f64(v114, v1141, v113.f64[0]);
  v915 = vmlaq_n_f64(v115, v1142, v113.f64[0]);
  v123 = vmlaq_n_f64(v116, v1143, v113.f64[0]);
  v907 = vmlaq_n_f64(v117, v1144, v113.f64[0]);
  v899 = vmlaq_n_f64(v118, v1145, v113.f64[0]);
  v895 = vmlaq_n_f64(v119, v1146, v113.f64[0]);
  v891 = vmlaq_n_f64(v120, v1147, v113.f64[0]);
  v887 = vmlaq_n_f64(v121, v1148, v113.f64[0]);
  v903 = vmlaq_n_f64(v122, v1149, v113.f64[0]);
  v124 = *(float64x2_t *)(*(_QWORD *)&v21 + 120);
  v1068 = vmlaq_laneq_f64(vmulq_n_f64(v1123, v124.f64[0]), v1132, v124, 1);
  v1091 = vmlaq_laneq_f64(vmulq_n_f64(v1124, v124.f64[0]), v1133, v124, 1);
  v125 = vmlaq_laneq_f64(vmulq_n_f64(v1125, v124.f64[0]), v1134, v124, 1);
  v1087 = vmlaq_laneq_f64(vmulq_n_f64(v1126, v124.f64[0]), v1135, v124, 1);
  v1082 = vmlaq_laneq_f64(vmulq_n_f64(v1127, v124.f64[0]), v1136, v124, 1);
  v1063 = vmlaq_laneq_f64(vmulq_n_f64(v1128, v124.f64[0]), v1137, v124, 1);
  v1077 = vmlaq_laneq_f64(vmulq_n_f64(v1129, v124.f64[0]), v1138, v124, 1);
  v126 = vmlaq_laneq_f64(vmulq_n_f64(v1130, v124.f64[0]), v1139, v124, 1);
  v1057 = vmlaq_laneq_f64(vmulq_n_f64(v1131, v124.f64[0]), v1140, v124, 1);
  v864 = *(float64x2_t *)(*(_QWORD *)&v21 + 144);
  v869 = *(double *)(*(_QWORD *)&v21 + 160);
  v857 = *(float64x2_t *)(*(_QWORD *)&v21 + 192);
  v852 = *(double *)(*(_QWORD *)&v21 + 208);
  v847 = *(float64x2_t *)(*(_QWORD *)&v21 + 240);
  v842 = *(double *)(*(_QWORD *)&v21 + 256);
  v815 = vsubq_f64((float64x2_t)xmmword_21030D320, v877);
  v731 = *(float64x2_t *)(*(_QWORD *)&v21 + 288);
  v806 = *(double *)(*(_QWORD *)&v21 + 304);
  v759 = *(float64x2_t *)(*(_QWORD *)&v21 + 336);
  v926 = v1139;
  v838 = *(double *)(*(_QWORD *)&v21 + 352);
  v878 = *(float64x2_t *)(*(_QWORD *)&v21 + 384);
  v114.f64[0] = *(float64_t *)(*(_QWORD *)&v21 + 400);
  v834 = vsubq_f64((float64x2_t)xmmword_21030D320, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v847.f64[0]), v1137, v847, 1), v1146, v842));
  v127 = *(double *)(*(_QWORD *)&v21 + 136);
  v128 = *(float64x2_t *)(*(_QWORD *)&v21 + 168);
  v129 = *(double *)(*(_QWORD *)&v21 + 184);
  v130 = *(float64x2_t *)(*(_QWORD *)&v21 + 216);
  v112.f64[0] = *(float64_t *)(*(_QWORD *)&v21 + 232);
  v590 = vsubq_f64((float64x2_t)xmmword_2102DD520, v882);
  v675 = *(double *)(*(_QWORD *)&v21 + 280);
  v131 = *(float64x2_t *)(*(_QWORD *)&v21 + 312);
  v738 = *(double *)(*(_QWORD *)&v21 + 328);
  v708 = *(float64x2_t *)(*(_QWORD *)&v21 + 360);
  v801 = *(double *)(*(_QWORD *)&v21 + 376);
  v883 = *(float64x2_t *)(*(_QWORD *)&v21 + 408);
  v98.f64[0] = *(float64_t *)(*(_QWORD *)&v21 + 424);
  v788 = vsubq_f64((float64x2_t)xmmword_2102DD520, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v76->f64[0]), v1137, *v76, 1), v1146, v675));
  v1073 = vmlaq_n_f64(v126, v1148, v127);
  v132 = vmlaq_laneq_f64(vmulq_n_f64(v1124, v847.f64[0]), v1133, v847, 1);
  v133 = vmlaq_laneq_f64(vmulq_n_f64(v1125, v847.f64[0]), v1134, v847, 1);
  v134 = vmlaq_laneq_f64(vmulq_n_f64(v1126, v847.f64[0]), v1135, v847, 1);
  v135 = vmlaq_laneq_f64(vmulq_n_f64(v1127, v847.f64[0]), v1136, v847, 1);
  v136 = vmlaq_laneq_f64(vmulq_n_f64(v1129, v847.f64[0]), v1138, v847, 1);
  v137 = vmlaq_laneq_f64(vmulq_n_f64(v1130, v847.f64[0]), v1139, v847, 1);
  v138 = vmlaq_laneq_f64(vmulq_n_f64(v1131, v847.f64[0]), v1140, v847, 1);
  v848 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v847.f64[0]), v1132, v847, 1), v1141, v842);
  v721 = vmlaq_n_f64(v132, v1142, v842);
  v701 = vmlaq_n_f64(v133, v1143, v842);
  v690 = vmlaq_n_f64(v134, v1144, v842);
  v667 = vmlaq_n_f64(v135, v1145, v842);
  v650 = vmlaq_n_f64(v136, v1147, v842);
  v633 = vmlaq_n_f64(v137, v1148, v842);
  v617 = vmlaq_n_f64(v138, v1149, v842);
  v843 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v76->f64[0]), v1132, *v76, 1), v1141, v675);
  v694 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v76->f64[0]), v1133, *v76, 1), v1142, v675);
  v671 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v76->f64[0]), v1134, *v76, 1), v1143, v675);
  v657 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v76->f64[0]), v1135, *v76, 1), v1144, v675);
  v643 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v76->f64[0]), v1136, *v76, 1), v1145, v675);
  v622 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v76->f64[0]), v1138, *v76, 1), v1147, v675);
  v607 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v76->f64[0]), v1139, *v76, 1), v1148, v675);
  v597 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v76->f64[0]), v1140, *v76, 1), v1149, v675);
  v1122[7] = vsubq_f64((float64x2_t)0, v1022);
  v1122[8] = vsubq_f64((float64x2_t)0, v1017);
  v1122[6] = vsubq_f64((float64x2_t)0, v1027);
  v1122[5] = vsubq_f64((float64x2_t)0, v1032);
  v1122[4] = vsubq_f64((float64x2_t)0, v1037);
  v1122[3] = vsubq_f64((float64x2_t)0, v1042);
  v1122[2] = vsubq_f64((float64x2_t)0, v1047);
  v1122[1] = vsubq_f64((float64x2_t)0, v1052);
  v1122[0] = v815;
  v1122[17] = vsubq_f64((float64x2_t)0, v985);
  v1122[15] = vsubq_f64((float64x2_t)0, v993);
  v1122[16] = vsubq_f64((float64x2_t)0, v989);
  v1122[13] = vsubq_f64((float64x2_t)0, v1001);
  v1122[14] = vsubq_f64((float64x2_t)0, v997);
  v1122[11] = vsubq_f64((float64x2_t)0, v1009);
  v1122[12] = vsubq_f64((float64x2_t)0, v1005);
  v1122[10] = vsubq_f64((float64x2_t)0, v1013);
  v1122[9] = v590;
  v1122[24] = vsubq_f64((float64x2_t)0, v952);
  v1122[25] = vsubq_f64((float64x2_t)0, v948);
  v1122[22] = vsubq_f64((float64x2_t)0, v968);
  v1122[23] = vsubq_f64((float64x2_t)0, v964);
  v1122[20] = vsubq_f64((float64x2_t)0, v977);
  v1122[21] = vsubq_f64((float64x2_t)0, v973);
  v1122[18] = vsubq_f64((float64x2_t)0, v981);
  v1122[19] = vsubq_f64((float64x2_t)xmmword_21030D320, v102);
  v1122[34] = vsubq_f64((float64x2_t)0, v919);
  v1122[35] = vsubq_f64((float64x2_t)0, v911);
  v1122[32] = vsubq_f64((float64x2_t)0, v931);
  v1122[33] = vsubq_f64((float64x2_t)0, v927);
  v1122[30] = vsubq_f64((float64x2_t)0, v940);
  v1122[31] = vsubq_f64((float64x2_t)0, v936);
  v1122[28] = vsubq_f64((float64x2_t)xmmword_2102DD520, v873);
  v1122[29] = vsubq_f64((float64x2_t)0, v944);
  v1122[26] = vsubq_f64((float64x2_t)0, v960);
  v1122[27] = vsubq_f64((float64x2_t)0, v956);
  v1122[42] = vsubq_f64((float64x2_t)0, v891);
  v1122[43] = vsubq_f64((float64x2_t)0, v887);
  v1122[40] = vsubq_f64((float64x2_t)0, v899);
  v1122[41] = vsubq_f64((float64x2_t)0, v895);
  v1122[38] = vsubq_f64((float64x2_t)xmmword_21030D320, v123);
  v1122[39] = vsubq_f64((float64x2_t)0, v907);
  v1122[36] = vsubq_f64((float64x2_t)0, v922);
  v1122[37] = vsubq_f64((float64x2_t)0, v915);
  v1122[52] = vsubq_f64((float64x2_t)0, v1073);
  v1122[53] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(v1057, v1149, v127));
  v1122[50] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(v1063, v1146, v127));
  v1122[51] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(v1077, v1147, v127));
  v1122[48] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(v1087, v1144, v127));
  v1122[49] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(v1082, v1145, v127));
  v1122[46] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(v1091, v1142, v127));
  v1122[47] = vsubq_f64((float64x2_t)xmmword_2102DD520, vmlaq_n_f64(v125, v1143, v127));
  v1122[44] = vsubq_f64((float64x2_t)0, v903);
  v1122[45] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(v1068, v1141, v127));
  v1122[60] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v864.f64[0]), v1138, v864, 1), v1147, v869));
  v1122[61] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v864.f64[0]), v1139, v864, 1), v1148, v869));
  v1122[58] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v864.f64[0]), v1136, v864, 1), v1145, v869));
  v1122[59] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v864.f64[0]), v1137, v864, 1), v1146, v869));
  v1122[56] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v864.f64[0]), v1134, v864, 1), v1143, v869));
  v1122[57] = vsubq_f64((float64x2_t)xmmword_21030D320, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v864.f64[0]), v1135, v864, 1), v1144, v869));
  v1122[54] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v864.f64[0]), v1132, v864, 1), v1141, v869));
  v1122[55] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v864.f64[0]), v1133, v864, 1), v1142, v869));
  v1122[70] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v128.f64[0]), v1139, v128, 1), v1148, v129));
  v1122[71] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v128.f64[0]), v1140, v128, 1), v1149, v129));
  v1122[68] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v128.f64[0]), v1137, v128, 1), v1146, v129));
  v1122[69] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v128.f64[0]), v1138, v128, 1), v1147, v129));
  v1122[66] = vsubq_f64((float64x2_t)xmmword_2102DD520, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v128.f64[0]), v1135, v128, 1), v1144, v129));
  v1122[67] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v128.f64[0]), v1136, v128, 1), v1145, v129));
  v1122[64] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v128.f64[0]), v1133, v128, 1), v1142, v129));
  v1122[65] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v128.f64[0]), v1134, v128, 1), v1143, v129));
  v1122[62] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v864.f64[0]), v1140, v864, 1), v1149, v869));
  v1122[63] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v128.f64[0]), v1132, v128, 1), v1141, v129));
  v1122[78] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v857.f64[0]), v1138, v857, 1), v1147, v852));
  v1122[79] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v857.f64[0]), v1139, v857, 1), v1148, v852));
  v1122[76] = vsubq_f64((float64x2_t)xmmword_21030D320, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v857.f64[0]), v1136, v857, 1), v1145, v852));
  v1122[77] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v857.f64[0]), v1137, v857, 1), v1146, v852));
  v1122[74] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v857.f64[0]), v1134, v857, 1), v1143, v852));
  v1122[75] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v857.f64[0]), v1135, v857, 1), v1144, v852));
  v1122[72] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v857.f64[0]), v1132, v857, 1), v1141, v852));
  v1122[73] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v857.f64[0]), v1133, v857, 1), v1142, v852));
  v1122[89] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v130.f64[0]), v1140, v130, 1), v1149, v112.f64[0]));
  v1122[88] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v130.f64[0]), v1139, v130, 1), v1148, v112.f64[0]));
  v1122[87] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v130.f64[0]), v1138, v130, 1), v1147, v112.f64[0]));
  v1122[86] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v130.f64[0]), v1137, v130, 1), v1146, v112.f64[0]));
  v1122[85] = vsubq_f64((float64x2_t)xmmword_2102DD520, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v130.f64[0]), v1136, v130, 1), v1145, v112.f64[0]));
  v1122[84] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v130.f64[0]), v1135, v130, 1), v1144, v112.f64[0]));
  v1122[83] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v130.f64[0]), v1134, v130, 1), v1143, v112.f64[0]));
  v1122[82] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v130.f64[0]), v1133, v130, 1), v1142, v112.f64[0]));
  v1122[80] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v857.f64[0]), v1140, v857, 1), v1149, v852));
  v1122[81] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v130.f64[0]), v1132, v130, 1), v1141, v112.f64[0]));
  v1122[98] = vsubq_f64((float64x2_t)0, v617);
  v1122[97] = vsubq_f64((float64x2_t)0, v633);
  v1122[96] = vsubq_f64((float64x2_t)0, v650);
  v1122[95] = v834;
  v1122[94] = vsubq_f64((float64x2_t)0, v667);
  v1122[93] = vsubq_f64((float64x2_t)0, v690);
  v1122[92] = vsubq_f64((float64x2_t)0, v701);
  v1122[91] = vsubq_f64((float64x2_t)0, v721);
  v1122[90] = vsubq_f64((float64x2_t)0, v848);
  v1122[107] = vsubq_f64((float64x2_t)0, v597);
  v1122[106] = vsubq_f64((float64x2_t)0, v607);
  v1122[105] = vsubq_f64((float64x2_t)0, v622);
  v1122[104] = v788;
  v1122[103] = vsubq_f64((float64x2_t)0, v643);
  v1122[102] = vsubq_f64((float64x2_t)0, v657);
  v1122[101] = vsubq_f64((float64x2_t)0, v671);
  v1122[100] = vsubq_f64((float64x2_t)0, v694);
  v1122[99] = vsubq_f64((float64x2_t)0, v843);
  v1122[116] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v731.f64[0]), v1140, v731, 1), v1149, v806));
  v1122[115] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v731.f64[0]), v1139, v731, 1), v1148, v806));
  v1122[114] = vsubq_f64((float64x2_t)xmmword_21030D320, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v731.f64[0]), v1138, v731, 1), v1147, v806));
  v1122[113] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v731.f64[0]), v1137, v731, 1), v1146, v806));
  v1122[112] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v731.f64[0]), v1136, v731, 1), v1145, v806));
  v1122[111] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v731.f64[0]), v1135, v731, 1), v1144, v806));
  v1122[110] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v731.f64[0]), v1134, v731, 1), v1143, v806));
  v1122[109] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v731.f64[0]), v1133, v731, 1), v1142, v806));
  v1122[108] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v731.f64[0]), v1132, v731, 1), v1141, v806));
  v1122[125] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v131.f64[0]), v1140, v131, 1), v1149, v738));
  v1122[124] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v131.f64[0]), v1139, v131, 1), v1148, v738));
  v1122[123] = vsubq_f64((float64x2_t)xmmword_2102DD520, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v131.f64[0]), v1138, v131, 1), v1147, v738));
  v1122[122] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v131.f64[0]), v1137, v131, 1), v1146, v738));
  v1122[121] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v131.f64[0]), v1136, v131, 1), v1145, v738));
  v1122[120] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v131.f64[0]), v1135, v131, 1), v1144, v738));
  v1122[119] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v131.f64[0]), v1134, v131, 1), v1143, v738));
  v1122[118] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v131.f64[0]), v1133, v131, 1), v1142, v738));
  v1122[117] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v131.f64[0]), v1132, v131, 1), v1141, v738));
  v1122[134] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v759.f64[0]), v1140, v759, 1), v1149, v838));
  v1122[133] = vsubq_f64((float64x2_t)xmmword_21030D320, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v759.f64[0]), v1139, v759, 1), v1148, v838));
  v1122[132] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v759.f64[0]), v1138, v759, 1), v1147, v838));
  v1122[131] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v759.f64[0]), v1137, v759, 1), v1146, v838));
  v1122[130] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v759.f64[0]), v1136, v759, 1), v1145, v838));
  v1122[129] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v759.f64[0]), v1135, v759, 1), v1144, v838));
  v1122[128] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v759.f64[0]), v1134, v759, 1), v1143, v838));
  v1122[127] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v759.f64[0]), v1133, v759, 1), v1142, v838));
  v1122[126] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v759.f64[0]), v1132, v759, 1), v1141, v838));
  v1122[143] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v708.f64[0]), v1140, v708, 1), v1149, v801));
  v1122[142] = vsubq_f64((float64x2_t)xmmword_2102DD520, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v708.f64[0]), v1139, v708, 1), v1148, v801));
  v1122[141] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v708.f64[0]), v1138, v708, 1), v1147, v801));
  v1122[140] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v708.f64[0]), v1137, v708, 1), v1146, v801));
  v1122[139] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v708.f64[0]), v1136, v708, 1), v1145, v801));
  v1122[138] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v708.f64[0]), v1135, v708, 1), v1144, v801));
  v1122[137] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v708.f64[0]), v1134, v708, 1), v1143, v801));
  v1122[136] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v708.f64[0]), v1133, v708, 1), v1142, v801));
  v1122[135] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v708.f64[0]), v1132, v708, 1), v1141, v801));
  v1122[152] = vsubq_f64((float64x2_t)xmmword_21030D320, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v878.f64[0]), v1140, v878, 1), v1149, v114.f64[0]));
  v1122[151] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v878.f64[0]), v1139, v878, 1), v1148, v114.f64[0]));
  v1122[150] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v878.f64[0]), v1138, v878, 1), v1147, v114.f64[0]));
  v1122[149] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v878.f64[0]), v1137, v878, 1), v1146, v114.f64[0]));
  v1122[148] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v878.f64[0]), v1136, v878, 1), v1145, v114.f64[0]));
  v1122[147] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v878.f64[0]), v1135, v878, 1), v1144, v114.f64[0]));
  v1122[146] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v878.f64[0]), v1134, v878, 1), v1143, v114.f64[0]));
  v1122[145] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v878.f64[0]), v1133, v878, 1), v1142, v114.f64[0]));
  v1122[144] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v878.f64[0]), v1132, v878, 1), v1141, v114.f64[0]));
  v1122[161] = vsubq_f64((float64x2_t)xmmword_2102DD520, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1131, v883.f64[0]), v1140, v883, 1), v1149, v98.f64[0]));
  v1122[160] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1130, v883.f64[0]), v1139, v883, 1), v1148, v98.f64[0]));
  v1122[159] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1129, v883.f64[0]), v1138, v883, 1), v1147, v98.f64[0]));
  v1122[158] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1128, v883.f64[0]), v1137, v883, 1), v1146, v98.f64[0]));
  v1122[157] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1127, v883.f64[0]), v1136, v883, 1), v1145, v98.f64[0]));
  v1122[156] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1126, v883.f64[0]), v1135, v883, 1), v1144, v98.f64[0]));
  v1122[155] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1125, v883.f64[0]), v1134, v883, 1), v1143, v98.f64[0]));
  v1122[154] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1124, v883.f64[0]), v1133, v883, 1), v1142, v98.f64[0]));
  v1122[153] = vsubq_f64((float64x2_t)0, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1123, v883.f64[0]), v1132, v883, 1), v1141, v98.f64[0]));
  v1121[0] = v1122;
  v1121[1] = v556;
  v1120 = v1122;
  *(_QWORD *)&v1504.f64[1] = v1121;
  *(_QWORD *)&v1505.f64[0] = &v1120;
  v1505.f64[1] = 1.0;
  sub_20F209B74(&v1188[8], (uint64_t)&v1504);
  *(_QWORD *)&v1091.f64[0] = vextq_s8((int8x16_t)v1116, (int8x16_t)v1116, 8uLL).u64[0];
  v139 = *(double *)(v19 + 16);
  v1083 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1116, *(double *)v19), v1115, *(float64x2_t *)v19, 1), v1112, v139);
  *(_QWORD *)&v140 = vextq_s8((int8x16_t)v1115, (int8x16_t)v1115, 8uLL).u64[0];
  v141 = *(double *)(v19 + 40);
  v142 = *(float64x2_t *)(v19 + 24);
  v143 = *(double *)(v19 + 64);
  v1064 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1096, *(double *)v19), v818, *(float64x2_t *)v19, 1), v1114, v139);
  v144 = *(float64x2_t *)(v19 + 48);
  v1053 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1097, *(double *)v19), v1106, *(float64x2_t *)v19, 1), v1109, v139);
  v1028 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1113, *(double *)v19), v1102, *(float64x2_t *)v19, 1), v1103, v139);
  v1023 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1117, *(double *)v19), v1107, *(float64x2_t *)v19, 1), v1104, v139);
  v1033 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1099, *(double *)v19), v1110, *(float64x2_t *)v19, 1), v1105, v139);
  v932 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1118, *(double *)v19), v1098, *(float64x2_t *)v19, 1), v1119, v139);
  v865 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1101, *(double *)v19), v926, *(float64x2_t *)v19, 1), v1095, v139);
  v853 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1108, *(double *)v19), v1111, *(float64x2_t *)v19, 1), v1100, v139);
  v1078 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1116, v142.f64[0]), v1115, v142, 1), v1112, v141);
  v1069 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1096, v142.f64[0]), v818, v142, 1), v1114, v141);
  v1058 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1097, v142.f64[0]), v1106, v142, 1), v1109, v141);
  v1048 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1113, v142.f64[0]), v1102, v142, 1), v1103, v141);
  v1043 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1117, v142.f64[0]), v1107, v142, 1), v1104, v141);
  v1038 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1099, v142.f64[0]), v1110, v142, 1), v1105, v141);
  v969 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1118, v142.f64[0]), v1098, v142, 1), v1119, v141);
  v870 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1101, v142.f64[0]), v926, v142, 1), v1095, v141);
  v517 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1108, v142.f64[0]), v1111, v142, 1), v1100, v141);
  v511 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1116, v144.f64[0]), v1115, v144, 1), v1112, v143);
  v145 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1096, v144.f64[0]), v818, v144, 1), v1114, v143);
  v146 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1113, v144.f64[0]), v1102, v144, 1), v1103, v143);
  v630 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1117, v144.f64[0]), v1107, v144, 1), v1104, v143);
  v147 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1099, v144.f64[0]), v1110, v144, 1), v1105, v143);
  v634 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1118, v144.f64[0]), v1098, v144, 1), v1119, v143);
  v519 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1101, v144.f64[0]), v926, v144, 1), v1095, v143);
  v637 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1108, v144.f64[0]), v1111, v144, 1), v1100, v143);
  *(_QWORD *)&v148 = vextq_s8((int8x16_t)v1112, (int8x16_t)v1112, 8uLL).u64[0];
  v553 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1091.f64[0]), v1078, v140), v511, v148);
  v550 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1091.f64[0]), v1069, v140), v145, v148);
  v513 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1097, v144.f64[0]), v1106, v144, 1), v1109, v143);
  v802 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1091.f64[0]), v1058, v140), v513, v148);
  v797 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1091.f64[0]), v1048, v140), v146, v148);
  v793 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1091.f64[0]), v1043, v140), v630, v148);
  v789 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1091.f64[0]), v1038, v140), v147, v148);
  v784 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v1091.f64[0]), v969, v140), v634, v148);
  v780 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v865, v1091.f64[0]), v870, v140), v519, v148);
  v772 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v853, v1091.f64[0]), v517, v140), v637, v148);
  *(_QWORD *)&v149 = vextq_s8((int8x16_t)v1096, (int8x16_t)v1096, 8uLL).u64[0];
  *(_QWORD *)&v150 = vextq_s8((int8x16_t)v818, (int8x16_t)v818, 8uLL).u64[0];
  v151 = vmlaq_n_f64(vmulq_n_f64(v1083, v149), v1078, v150);
  v152 = vmlaq_n_f64(vmulq_n_f64(v1064, v149), v1069, v150);
  v153 = vmlaq_n_f64(vmulq_n_f64(v1053, v149), v1058, v150);
  v154 = vmlaq_n_f64(vmulq_n_f64(v1028, v149), v1048, v150);
  v155 = vmlaq_n_f64(vmulq_n_f64(v1023, v149), v1043, v150);
  v156 = vmlaq_n_f64(vmulq_n_f64(v1033, v149), v1038, v150);
  v157 = vmlaq_n_f64(vmulq_n_f64(v932, v149), v969, v150);
  v158 = vmlaq_n_f64(vmulq_n_f64(v865, v149), v870, v150);
  v159 = vmlaq_n_f64(vmulq_n_f64(v853, v149), v517, v150);
  *(_QWORD *)&v160 = vextq_s8((int8x16_t)v1114, (int8x16_t)v1114, 8uLL).u64[0];
  v776 = (int8x16_t)vmlaq_n_f64(v151, v511, v160);
  v604 = (int8x16_t)vmlaq_n_f64(v152, v145, v160);
  v601 = (int8x16_t)vmlaq_n_f64(v153, v513, v160);
  v598 = (int8x16_t)vmlaq_n_f64(v154, v146, v160);
  v594 = (int8x16_t)vmlaq_n_f64(v155, v630, v160);
  v591 = (int8x16_t)vmlaq_n_f64(v156, v147, v160);
  v587 = (int8x16_t)vmlaq_n_f64(v157, v634, v160);
  v584 = (int8x16_t)vmlaq_n_f64(v158, v519, v160);
  v581 = (int8x16_t)vmlaq_n_f64(v159, v637, v160);
  *(_QWORD *)&v153.f64[0] = vextq_s8((int8x16_t)v1097, (int8x16_t)v1097, 8uLL).u64[0];
  *(_QWORD *)&v161 = vextq_s8((int8x16_t)v1106, (int8x16_t)v1106, 8uLL).u64[0];
  v162 = vmlaq_n_f64(vmulq_n_f64(v1083, v153.f64[0]), v1078, v161);
  v163 = vmlaq_n_f64(vmulq_n_f64(v1064, v153.f64[0]), v1069, v161);
  v164 = vmlaq_n_f64(vmulq_n_f64(v1053, v153.f64[0]), v1058, v161);
  v165 = vmlaq_n_f64(vmulq_n_f64(v1028, v153.f64[0]), v1048, v161);
  v166 = vmlaq_n_f64(vmulq_n_f64(v1023, v153.f64[0]), v1043, v161);
  v167 = vmlaq_n_f64(vmulq_n_f64(v1033, v153.f64[0]), v1038, v161);
  v168 = vmlaq_n_f64(vmulq_n_f64(v932, v153.f64[0]), v969, v161);
  v169 = vmlaq_n_f64(vmulq_n_f64(v865, v153.f64[0]), v870, v161);
  v170 = vmlaq_n_f64(vmulq_n_f64(v853, v153.f64[0]), v517, v161);
  *(_QWORD *)&v171 = vextq_s8((int8x16_t)v1109, (int8x16_t)v1109, 8uLL).u64[0];
  v768 = (int8x16_t)vmlaq_n_f64(v162, v511, v171);
  v764 = (int8x16_t)vmlaq_n_f64(v163, v145, v171);
  v760 = (int8x16_t)vmlaq_n_f64(v164, v513, v171);
  v755 = (int8x16_t)vmlaq_n_f64(v165, v146, v171);
  v611 = vmlaq_n_f64(v166, v630, v171);
  v547 = (int8x16_t)vmlaq_n_f64(v167, v147, v171);
  v751 = (int8x16_t)vmlaq_n_f64(v168, v634, v171);
  v747 = (int8x16_t)vmlaq_n_f64(v169, v519, v171);
  v739 = (int8x16_t)vmlaq_n_f64(v170, v637, v171);
  *(_QWORD *)&v168.f64[0] = vextq_s8((int8x16_t)v1113, (int8x16_t)v1113, 8uLL).u64[0];
  *(_QWORD *)&v172 = vextq_s8((int8x16_t)v1102, (int8x16_t)v1102, 8uLL).u64[0];
  v173 = vmlaq_n_f64(vmulq_n_f64(v1083, v168.f64[0]), v1078, v172);
  v174 = vmlaq_n_f64(vmulq_n_f64(v1064, v168.f64[0]), v1069, v172);
  v175 = vmlaq_n_f64(vmulq_n_f64(v1053, v168.f64[0]), v1058, v172);
  v176 = vmlaq_n_f64(vmulq_n_f64(v1028, v168.f64[0]), v1048, v172);
  v177 = vmlaq_n_f64(vmulq_n_f64(v1023, v168.f64[0]), v1043, v172);
  v178 = vmlaq_n_f64(vmulq_n_f64(v1033, v168.f64[0]), v1038, v172);
  v179 = vmlaq_n_f64(vmulq_n_f64(v932, v168.f64[0]), v969, v172);
  v180 = vmlaq_n_f64(vmulq_n_f64(v865, v168.f64[0]), v870, v172);
  v181 = vmlaq_n_f64(vmulq_n_f64(v853, v168.f64[0]), v517, v172);
  *(_QWORD *)&v182 = vextq_s8((int8x16_t)v1103, (int8x16_t)v1103, 8uLL).u64[0];
  v743 = (int8x16_t)vmlaq_n_f64(v173, v511, v182);
  v685 = (int8x16_t)vmlaq_n_f64(v174, v145, v182);
  v682 = (int8x16_t)vmlaq_n_f64(v175, v513, v182);
  v679 = (int8x16_t)vmlaq_n_f64(v176, v146, v182);
  v676 = (int8x16_t)vmlaq_n_f64(v177, v630, v182);
  v544 = (int8x16_t)vmlaq_n_f64(v178, v147, v182);
  v541 = (int8x16_t)vmlaq_n_f64(v179, v634, v182);
  v538 = (int8x16_t)vmlaq_n_f64(v180, v519, v182);
  v535 = (int8x16_t)vmlaq_n_f64(v181, v637, v182);
  *(_QWORD *)&v168.f64[0] = vextq_s8((int8x16_t)v1117, (int8x16_t)v1117, 8uLL).u64[0];
  *(_QWORD *)&v183 = vextq_s8((int8x16_t)v1107, (int8x16_t)v1107, 8uLL).u64[0];
  v184 = vmlaq_n_f64(vmulq_n_f64(v1083, v168.f64[0]), v1078, v183);
  v185 = vmlaq_n_f64(vmulq_n_f64(v1064, v168.f64[0]), v1069, v183);
  v186 = vmlaq_n_f64(vmulq_n_f64(v1053, v168.f64[0]), v1058, v183);
  v187 = vmlaq_n_f64(vmulq_n_f64(v1028, v168.f64[0]), v1048, v183);
  v188 = vmlaq_n_f64(vmulq_n_f64(v1023, v168.f64[0]), v1043, v183);
  v189 = vmlaq_n_f64(vmulq_n_f64(v1033, v168.f64[0]), v1038, v183);
  v190 = vmlaq_n_f64(vmulq_n_f64(v932, v168.f64[0]), v969, v183);
  v191 = vmlaq_n_f64(vmulq_n_f64(v865, v168.f64[0]), v870, v183);
  v192 = vmlaq_n_f64(vmulq_n_f64(v853, v168.f64[0]), v517, v183);
  *(_QWORD *)&v193 = vextq_s8((int8x16_t)v1104, (int8x16_t)v1104, 8uLL).u64[0];
  v672 = (int8x16_t)vmlaq_n_f64(v184, v511, v193);
  v532 = (int8x16_t)vmlaq_n_f64(v185, v145, v193);
  v509 = v145;
  v529 = (int8x16_t)vmlaq_n_f64(v186, v513, v193);
  v526 = (int8x16_t)vmlaq_n_f64(v187, v146, v193);
  v668 = (int8x16_t)vmlaq_n_f64(v188, v630, v193);
  v664 = (int8x16_t)vmlaq_n_f64(v189, v147, v193);
  v661 = (int8x16_t)vmlaq_n_f64(v190, v634, v193);
  v523 = (int8x16_t)vmlaq_n_f64(v191, v519, v193);
  v658 = (int8x16_t)vmlaq_n_f64(v192, v637, v193);
  *(_QWORD *)&v168.f64[0] = vextq_s8((int8x16_t)v1099, (int8x16_t)v1099, 8uLL).u64[0];
  *(_QWORD *)&v194 = vextq_s8((int8x16_t)v1110, (int8x16_t)v1110, 8uLL).u64[0];
  v195 = vmlaq_n_f64(vmulq_n_f64(v1083, v168.f64[0]), v1078, v194);
  v196 = vmlaq_n_f64(vmulq_n_f64(v1064, v168.f64[0]), v1069, v194);
  v197 = vmlaq_n_f64(vmulq_n_f64(v1053, v168.f64[0]), v1058, v194);
  v198 = vmlaq_n_f64(vmulq_n_f64(v1028, v168.f64[0]), v1048, v194);
  v199 = vmlaq_n_f64(vmulq_n_f64(v1023, v168.f64[0]), v1043, v194);
  v200 = vmlaq_n_f64(vmulq_n_f64(v1033, v168.f64[0]), v1038, v194);
  v201 = vmlaq_n_f64(vmulq_n_f64(v932, v168.f64[0]), v969, v194);
  v202 = vmlaq_n_f64(vmulq_n_f64(v865, v168.f64[0]), v870, v194);
  v203 = vmlaq_n_f64(vmulq_n_f64(v853, v168.f64[0]), v517, v194);
  *(_QWORD *)&v204 = vextq_s8((int8x16_t)v1105, (int8x16_t)v1105, 8uLL).u64[0];
  v702 = (int8x16_t)vmlaq_n_f64(v195, v511, v204);
  v698 = (int8x16_t)vmlaq_n_f64(v196, v145, v204);
  v695 = (int8x16_t)vmlaq_n_f64(v197, v513, v204);
  v691 = (int8x16_t)vmlaq_n_f64(v198, v146, v204);
  v654 = (int8x16_t)vmlaq_n_f64(v199, v630, v204);
  v651 = (int8x16_t)vmlaq_n_f64(v200, v147, v204);
  v647 = (int8x16_t)vmlaq_n_f64(v201, v634, v204);
  v644 = (int8x16_t)vmlaq_n_f64(v202, v519, v204);
  v640 = (int8x16_t)vmlaq_n_f64(v203, v637, v204);
  *(_QWORD *)&v168.f64[0] = vextq_s8((int8x16_t)v1118, (int8x16_t)v1118, 8uLL).u64[0];
  *(_QWORD *)&v205 = vextq_s8((int8x16_t)v1098, (int8x16_t)v1098, 8uLL).u64[0];
  v206 = vmlaq_n_f64(vmulq_n_f64(v1083, v168.f64[0]), v1078, v205);
  v207 = vmlaq_n_f64(vmulq_n_f64(v1064, v168.f64[0]), v1069, v205);
  v208 = vmlaq_n_f64(vmulq_n_f64(v1053, v168.f64[0]), v1058, v205);
  v209 = vmlaq_n_f64(vmulq_n_f64(v1028, v168.f64[0]), v1048, v205);
  v210 = vmlaq_n_f64(vmulq_n_f64(v1023, v168.f64[0]), v1043, v205);
  v211 = vmlaq_n_f64(vmulq_n_f64(v1033, v168.f64[0]), v1038, v205);
  v212 = vmlaq_n_f64(vmulq_n_f64(v932, v168.f64[0]), v969, v205);
  v213 = vmlaq_n_f64(vmulq_n_f64(v865, v168.f64[0]), v870, v205);
  v214 = vmlaq_n_f64(vmulq_n_f64(v853, v168.f64[0]), v517, v205);
  *(_QWORD *)&v215 = vextq_s8((int8x16_t)v1119, (int8x16_t)v1119, 8uLL).u64[0];
  v732 = (int8x16_t)vmlaq_n_f64(v206, v511, v215);
  v728 = (int8x16_t)vmlaq_n_f64(v207, v145, v215);
  v725 = (int8x16_t)vmlaq_n_f64(v208, v513, v215);
  v722 = (int8x16_t)vmlaq_n_f64(v209, v146, v215);
  v718 = (int8x16_t)vmlaq_n_f64(v210, v630, v215);
  v507 = v147;
  v715 = (int8x16_t)vmlaq_n_f64(v211, v147, v215);
  v712 = (int8x16_t)vmlaq_n_f64(v212, v634, v215);
  v709 = (int8x16_t)vmlaq_n_f64(v213, v519, v215);
  v705 = (int8x16_t)vmlaq_n_f64(v214, v637, v215);
  *(_QWORD *)&v168.f64[0] = vextq_s8((int8x16_t)v1101, (int8x16_t)v1101, 8uLL).u64[0];
  *(_QWORD *)&v216 = vextq_s8((int8x16_t)v926, (int8x16_t)v926, 8uLL).u64[0];
  v217 = vmlaq_n_f64(vmulq_n_f64(v1083, v168.f64[0]), v1078, v216);
  v218 = vmlaq_n_f64(vmulq_n_f64(v1064, v168.f64[0]), v1069, v216);
  v219 = vmlaq_n_f64(vmulq_n_f64(v1053, v168.f64[0]), v1058, v216);
  v220 = vmlaq_n_f64(vmulq_n_f64(v1028, v168.f64[0]), v1048, v216);
  v221 = vmlaq_n_f64(vmulq_n_f64(v1023, v168.f64[0]), v1043, v216);
  v222 = vmlaq_n_f64(vmulq_n_f64(v1033, v168.f64[0]), v1038, v216);
  v223 = vmlaq_n_f64(vmulq_n_f64(v932, v168.f64[0]), v969, v216);
  v224 = vmlaq_n_f64(vmulq_n_f64(v865, v168.f64[0]), v870, v216);
  v225 = vmlaq_n_f64(vmulq_n_f64(v853, v168.f64[0]), v517, v216);
  *(_QWORD *)&v226 = vextq_s8((int8x16_t)v1095, (int8x16_t)v1095, 8uLL).u64[0];
  v578 = (int8x16_t)vmlaq_n_f64(v217, v511, v226);
  v575 = (int8x16_t)vmlaq_n_f64(v218, v145, v226);
  v608 = (int8x16_t)vmlaq_n_f64(v219, v513, v226);
  v572 = (int8x16_t)vmlaq_n_f64(v220, v146, v226);
  v569 = (int8x16_t)vmlaq_n_f64(v221, v630, v226);
  v566 = (int8x16_t)vmlaq_n_f64(v222, v147, v226);
  v563 = (int8x16_t)vmlaq_n_f64(v223, v634, v226);
  v560 = (int8x16_t)vmlaq_n_f64(v224, v519, v226);
  v557 = (int8x16_t)vmlaq_n_f64(v225, v637, v226);
  *(_QWORD *)&v227 = vextq_s8((int8x16_t)v1108, (int8x16_t)v1108, 8uLL).u64[0];
  *(_QWORD *)&v153.f64[0] = vextq_s8((int8x16_t)v1111, (int8x16_t)v1111, 8uLL).u64[0];
  v228 = vmlaq_n_f64(vmulq_n_f64(v932, v1116.f64[0]), v969, v1115.f64[0]);
  v229 = vmlaq_n_f64(vmulq_n_f64(v932, v1096.f64[0]), v969, v818.f64[0]);
  v230 = vmlaq_n_f64(vmulq_n_f64(v865, v1116.f64[0]), v870, v1115.f64[0]);
  v231 = vmlaq_n_f64(vmulq_n_f64(v865, v1096.f64[0]), v870, v818.f64[0]);
  v232 = vmlaq_n_f64(vmulq_n_f64(v865, v1097.f64[0]), v870, v1106.f64[0]);
  v233 = vmlaq_n_f64(vmulq_n_f64(v853, v1116.f64[0]), v517, v1115.f64[0]);
  v234 = vmlaq_n_f64(vmulq_n_f64(v853, v1096.f64[0]), v517, v818.f64[0]);
  v235 = vmlaq_n_f64(vmulq_n_f64(v853, v1097.f64[0]), v517, v1106.f64[0]);
  v236 = vmlaq_n_f64(vmulq_n_f64(v853, v1113.f64[0]), v517, v1102.f64[0]);
  v237 = vmlaq_n_f64(vmulq_n_f64(v853, v1117.f64[0]), v517, v1107.f64[0]);
  v238 = vmlaq_n_f64(vmulq_n_f64(v853, v1099.f64[0]), v517, v1110.f64[0]);
  v627 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1116.f64[0]), v1078, v1115.f64[0]), v511, v1112.f64[0]);
  v628 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1096.f64[0]), v1078, v818.f64[0]), v511, v1114.f64[0]);
  v835 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1097.f64[0]), v1078, v1106.f64[0]), v511, v1109.f64[0]);
  v839 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1113.f64[0]), v1078, v1102.f64[0]), v511, v1103.f64[0]);
  v1010 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1117.f64[0]), v1078, v1107.f64[0]), v511, v1104.f64[0]);
  v1014 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1099.f64[0]), v1078, v1110.f64[0]), v511, v1105.f64[0]);
  v1088 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1118.f64[0]), v1078, v1098.f64[0]), v511, v1119.f64[0]);
  v1092 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1101.f64[0]), v1078, v926.f64[0]), v511, v1095.f64[0]);
  v923 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v1108.f64[0]), v1078, v1111.f64[0]), v511, v1100.f64[0]);
  *(_QWORD *)&v207.f64[0] = vextq_s8((int8x16_t)v1100, (int8x16_t)v1100, 8uLL).u64[0];
  v688 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1083, v227), v1078, v153.f64[0]), v511, v207.f64[0]);
  v623 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1116.f64[0]), v1069, v1115.f64[0]), v509, v1112.f64[0]);
  v625 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1096.f64[0]), v1069, v818.f64[0]), v509, v1114.f64[0]);
  v949 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1097.f64[0]), v1069, v1106.f64[0]), v509, v1109.f64[0]);
  v974 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1113.f64[0]), v1069, v1102.f64[0]), v509, v1103.f64[0]);
  v994 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1117.f64[0]), v1069, v1107.f64[0]), v509, v1104.f64[0]);
  v1006 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1099.f64[0]), v1069, v1110.f64[0]), v509, v1105.f64[0]);
  v1074 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1118.f64[0]), v1069, v1098.f64[0]), v509, v1119.f64[0]);
  v1084 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1101.f64[0]), v1069, v926.f64[0]), v509, v1095.f64[0]);
  v916 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v1108.f64[0]), v1069, v1111.f64[0]), v509, v1100.f64[0]);
  v920 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1064, v227), v1069, v153.f64[0]), v509, v207.f64[0]);
  v809 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1116.f64[0]), v1058, v1115.f64[0]), v513, v1112.f64[0]);
  v816 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1096.f64[0]), v1058, v818.f64[0]), v513, v1114.f64[0]);
  v945 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1097.f64[0]), v1058, v1106.f64[0]), v513, v1109.f64[0]);
  v965 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1113.f64[0]), v1058, v1102.f64[0]), v513, v1103.f64[0]);
  v990 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1117.f64[0]), v1058, v1107.f64[0]), v513, v1104.f64[0]);
  v1002 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1099.f64[0]), v1058, v1110.f64[0]), v513, v1105.f64[0]);
  v1065 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1118.f64[0]), v1058, v1098.f64[0]), v513, v1119.f64[0]);
  v1079 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1101.f64[0]), v1058, v926.f64[0]), v513, v1095.f64[0]);
  v908 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v1108.f64[0]), v1058, v1111.f64[0]), v513, v1100.f64[0]);
  v912 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1053, v227), v1058, v153.f64[0]), v513, v207.f64[0]);
  v807 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1116.f64[0]), v1048, v1115.f64[0]), v146, v1112.f64[0]);
  v813 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1096.f64[0]), v1048, v818.f64[0]), v146, v1114.f64[0]);
  v941 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1097.f64[0]), v1048, v1106.f64[0]), v146, v1109.f64[0]);
  v957 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1113.f64[0]), v1048, v1102.f64[0]), v146, v1103.f64[0]);
  v982 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1117.f64[0]), v1048, v1107.f64[0]), v146, v1104.f64[0]);
  v998 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1099.f64[0]), v1048, v1110.f64[0]), v146, v1105.f64[0]);
  v1054 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1118.f64[0]), v1048, v1098.f64[0]), v146, v1119.f64[0]);
  v1070 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1101.f64[0]), v1048, v926.f64[0]), v146, v1095.f64[0]);
  v900 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v1108.f64[0]), v1048, v1111.f64[0]), v146, v1100.f64[0]);
  v904 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1028, v227), v1048, v153.f64[0]), v146, v207.f64[0]);
  v618 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1116.f64[0]), v1043, v1115.f64[0]), v630, v1112.f64[0]);
  v811 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1096.f64[0]), v1043, v818.f64[0]), v630, v1114.f64[0]);
  v937 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1097.f64[0]), v1043, v1106.f64[0]), v630, v1109.f64[0]);
  v953 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1113.f64[0]), v1043, v1102.f64[0]), v630, v1103.f64[0]);
  v978 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1117.f64[0]), v1043, v1107.f64[0]), v630, v1104.f64[0]);
  v1029 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1099.f64[0]), v1043, v1110.f64[0]), v630, v1105.f64[0]);
  v1049 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1118.f64[0]), v1043, v1098.f64[0]), v630, v1119.f64[0]);
  v1059 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1101.f64[0]), v1043, v926.f64[0]), v630, v1095.f64[0]);
  v892 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v1108.f64[0]), v1043, v1111.f64[0]), v630, v1100.f64[0]);
  v896 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1023, v227), v1043, v153.f64[0]), v630, v207.f64[0]);
  v615 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1116.f64[0]), v1038, v1115.f64[0]), v507, v1112.f64[0]);
  v620 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1096.f64[0]), v1038, v818.f64[0]), v507, v1114.f64[0]);
  v928 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1097.f64[0]), v1038, v1106.f64[0]), v507, v1109.f64[0]);
  v825 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1113.f64[0]), v1038, v1102.f64[0]), v507, v1103.f64[0]);
  v831 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1117.f64[0]), v1038, v1107.f64[0]), v507, v1104.f64[0]);
  v986 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1099.f64[0]), v1038, v1110.f64[0]), v507, v1105.f64[0]);
  v1044 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1118.f64[0]), v1038, v1098.f64[0]), v507, v1119.f64[0]);
  v1018 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1101.f64[0]), v1038, v926.f64[0]), v507, v1095.f64[0]);
  v884 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v1108.f64[0]), v1038, v1111.f64[0]), v507, v1100.f64[0]);
  v888 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v1033, v227), v1038, v153.f64[0]), v507, v207.f64[0]);
  v819 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v1097.f64[0]), v969, v1106.f64[0]), v634, v1109.f64[0]);
  v822 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v1113.f64[0]), v969, v1102.f64[0]), v634, v1103.f64[0]);
  v961 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v1117.f64[0]), v969, v1107.f64[0]), v634, v1104.f64[0]);
  v1024 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v1099.f64[0]), v969, v1110.f64[0]), v634, v1105.f64[0]);
  v1039 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v1118.f64[0]), v969, v1098.f64[0]), v634, v1119.f64[0]);
  v858 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v1101.f64[0]), v969, v926.f64[0]), v634, v1095.f64[0]);
  v874 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v1108.f64[0]), v969, v1111.f64[0]), v634, v1100.f64[0]);
  v879 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v932, v227), v969, v153.f64[0]), v634, v207.f64[0]);
  v933 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v865, v1113.f64[0]), v870, v1102.f64[0]), v519, v1103.f64[0]);
  v828 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v865, v1117.f64[0]), v870, v1107.f64[0]), v519, v1104.f64[0]);
  v970 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v865, v1099.f64[0]), v870, v1110.f64[0]), v519, v1105.f64[0]);
  v1034 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v865, v1118.f64[0]), v870, v1098.f64[0]), v519, v1119.f64[0]);
  v849 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v865, v1101.f64[0]), v870, v926.f64[0]), v519, v1095.f64[0]);
  v861 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v865, v1108.f64[0]), v870, v1111.f64[0]), v519, v1100.f64[0]);
  v871 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v865, v227), v870, v153.f64[0]), v519, v207.f64[0]);
  v866 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v853, v227), v517, v153.f64[0]), v637, v207.f64[0]);
  v844 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v853, v1118.f64[0]), v517, v1098.f64[0]), v637, v1119.f64[0]);
  v735 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v853, v1101.f64[0]), v517, v926.f64[0]), v637, v1095.f64[0]);
  v854 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v853, v1108.f64[0]), v517, v1111.f64[0]), v637, v1100.f64[0]);
  v1348 = (int8x16_t)vmlaq_n_f64(v228, v634, v1112.f64[0]);
  v1349 = (int8x16_t)vmlaq_n_f64(v230, v519, v1112.f64[0]);
  v1346 = v618;
  v1347 = v615;
  v1344 = v809;
  v1345 = v807;
  v1342 = v627;
  v1343 = v623;
  v1358 = v780;
  v1359 = v772;
  v1356 = v789;
  v1357 = v784;
  v1354 = v797;
  v1355 = v793;
  v1352 = v550;
  v1353 = v802;
  v1350 = (int8x16_t)vmlaq_n_f64(v233, v637, v1112.f64[0]);
  v1351 = v553;
  v1366 = (int8x16_t)vmlaq_n_f64(v229, v634, v1114.f64[0]);
  v1367 = (int8x16_t)vmlaq_n_f64(v231, v519, v1114.f64[0]);
  v1364 = v811;
  v1365 = v620;
  v1362 = v816;
  v1363 = v813;
  v1360 = v628;
  v1361 = v625;
  v1376 = v584;
  v1377 = v581;
  v1374 = v591;
  v1375 = v587;
  v1372 = v598;
  v1373 = v594;
  v1370 = v604;
  v1371 = v601;
  v1368 = (int8x16_t)vmlaq_n_f64(v234, v637, v1114.f64[0]);
  v1369 = v776;
  v1384 = v819;
  v1385 = (int8x16_t)vmlaq_n_f64(v232, v519, v1109.f64[0]);
  v1382 = v937;
  v1383 = v928;
  v1380 = v945;
  v1381 = v941;
  v1378 = v835;
  v1379 = v949;
  v1394 = v747;
  v1395 = v739;
  v1392 = v547;
  v1393 = v751;
  v1390 = v755;
  v1391 = (int8x16_t)v611;
  v1388 = v764;
  v1389 = v760;
  v1386 = (int8x16_t)vmlaq_n_f64(v235, v637, v1109.f64[0]);
  v1387 = v768;
  v1402 = v822;
  v1403 = v933;
  v1400 = v953;
  v1401 = v825;
  v1398 = v965;
  v1399 = v957;
  v1396 = v839;
  v1397 = v974;
  v1413 = v535;
  v1412 = v538;
  v1411 = v541;
  v1410 = v544;
  v1409 = v676;
  v1408 = v679;
  v1407 = v682;
  v1406 = v685;
  v1404 = (int8x16_t)vmlaq_n_f64(v236, v637, v1103.f64[0]);
  v1405 = v743;
  v1422 = (int8x16_t)vmlaq_n_f64(v237, v637, v1104.f64[0]);
  v1421 = v828;
  v1420 = v961;
  v1419 = v831;
  v1418 = v978;
  v1417 = v982;
  v1416 = v990;
  v1415 = v994;
  v1414 = v1010;
  v1431 = v658;
  v1430 = v523;
  v1429 = v661;
  v1428 = v664;
  v1427 = v668;
  v1426 = v526;
  v1425 = v529;
  v1424 = v532;
  v1423 = v672;
  v1440 = (int8x16_t)vmlaq_n_f64(v238, v637, v1105.f64[0]);
  v1439 = v970;
  v1438 = v1024;
  v1437 = v986;
  v1436 = v1029;
  v1435 = v998;
  v1434 = v1002;
  v1433 = v1006;
  v1432 = v1014;
  v1449 = v640;
  v1448 = v644;
  v1447 = v647;
  v1446 = v651;
  v1445 = v654;
  v1444 = v691;
  v1443 = v695;
  v1442 = v698;
  v1441 = v702;
  v1458 = v844;
  v1457 = v1034;
  v1456 = v1039;
  v1455 = v1044;
  v1454 = v1049;
  v1453 = v1054;
  v1452 = v1065;
  v1451 = v1074;
  v1450 = v1088;
  v1467 = v705;
  v1466 = v709;
  v1465 = v712;
  v1464 = v715;
  v1463 = v718;
  v1462 = v722;
  v1461 = v725;
  v1460 = v728;
  v1459 = v732;
  v1476 = v735;
  v1475 = v849;
  v1474 = v858;
  v1473 = v1018;
  v1472 = v1059;
  v1471 = v1070;
  v1470 = v1079;
  v1469 = v1084;
  v1468 = v1092;
  v1485 = v557;
  v1484 = v560;
  v1483 = v563;
  v1482 = v566;
  v1481 = v569;
  v1480 = v572;
  v1479 = v608;
  v1478 = v575;
  v1477 = v578;
  v1494 = v854;
  v1493 = v861;
  v1492 = v874;
  v1491 = v884;
  v1490 = v892;
  v1489 = v900;
  v1488 = v908;
  v1487 = v916;
  v1486 = v923;
  v1503 = v866;
  v1502 = v871;
  v1501 = v879;
  v1500 = v888;
  v1499 = v896;
  v1498 = v904;
  v1497 = v912;
  v1496 = v920;
  v1495 = v688;
  v505.i64[0] = v1350.i64[0];
  v355 = vextq_s8(v1350, v1350, 8uLL).u64[0];
  *(_QWORD *)&v507.f64[0] = v1349.i64[0];
  *(_QWORD *)&v509.f64[0] = v1348.i64[0];
  v352 = vextq_s8(v1348, v1348, 8uLL).u64[0];
  v353 = vextq_s8(v1349, v1349, 8uLL).u64[0];
  v350 = vextq_s8(v618, v618, 8uLL).u64[0];
  v351 = vextq_s8(v615, v615, 8uLL).u64[0];
  v348 = vextq_s8(v809, v809, 8uLL).u64[0];
  v349 = vextq_s8(v807, v807, 8uLL).u64[0];
  v346 = vextq_s8(v627, v627, 8uLL).u64[0];
  v347 = vextq_s8(v1343, v1343, 8uLL).u64[0];
  v364 = vextq_s8(v772, v772, 8uLL).u64[0];
  v361 = vextq_s8(v784, v784, 8uLL).u64[0];
  v362 = vextq_s8(v780, v780, 8uLL).u64[0];
  v359 = vextq_s8(v793, v793, 8uLL).u64[0];
  v360 = vextq_s8(v789, v789, 8uLL).u64[0];
  v357 = vextq_s8(v802, v802, 8uLL).u64[0];
  v358 = vextq_s8(v797, v797, 8uLL).u64[0];
  v356 = vextq_s8(v550, v550, 8uLL).u64[0];
  v354 = vextq_s8(v1351, v1351, 8uLL).u64[0];
  *(_QWORD *)&v511.f64[0] = v1368.i64[0];
  v373 = vextq_s8(v1368, v1368, 8uLL).u64[0];
  *(_QWORD *)&v513.f64[0] = v1367.i64[0];
  v515.i64[0] = v1366.i64[0];
  v370 = vextq_s8(v1366, v1366, 8uLL).u64[0];
  v371 = vextq_s8(v1367, v1367, 8uLL).u64[0];
  v368 = vextq_s8(v811, v811, 8uLL).u64[0];
  v369 = vextq_s8(v620, v620, 8uLL).u64[0];
  v366 = vextq_s8(v816, v816, 8uLL).u64[0];
  v367 = vextq_s8(v813, v813, 8uLL).u64[0];
  v365 = vextq_s8(v1361, v1361, 8uLL).u64[0];
  v363 = vextq_s8(v628, v628, 8uLL).u64[0];
  v382 = vextq_s8(v581, v581, 8uLL).u64[0];
  v379 = vextq_s8(v587, v587, 8uLL).u64[0];
  v380 = vextq_s8(v584, v584, 8uLL).u64[0];
  v377 = vextq_s8(v594, v594, 8uLL).u64[0];
  v378 = vextq_s8(v591, v591, 8uLL).u64[0];
  v375 = vextq_s8(v601, v601, 8uLL).u64[0];
  v376 = vextq_s8(v598, v598, 8uLL).u64[0];
  v374 = vextq_s8(v604, v604, 8uLL).u64[0];
  v372 = vextq_s8(v776, v776, 8uLL).u64[0];
  *(_QWORD *)&v519.f64[0] = v1386.i64[0];
  v391 = vextq_s8(v1386, v1386, 8uLL).u64[0];
  *(_QWORD *)&v630.f64[0] = v1385.i64[0];
  v388 = vextq_s8(v819, v819, 8uLL).u64[0];
  v389 = vextq_s8(v1385, v1385, 8uLL).u64[0];
  v386 = vextq_s8(v937, v937, 8uLL).u64[0];
  v387 = vextq_s8(v928, v928, 8uLL).u64[0];
  v384 = vextq_s8(v945, v945, 8uLL).u64[0];
  v385 = vextq_s8(v941, v941, 8uLL).u64[0];
  v383 = vextq_s8(v949, v949, 8uLL).u64[0];
  v381 = vextq_s8(v835, v835, 8uLL).u64[0];
  v400 = vextq_s8(v739, v739, 8uLL).u64[0];
  v397 = vextq_s8(v751, v751, 8uLL).u64[0];
  v398 = vextq_s8(v747, v747, 8uLL).u64[0];
  v395 = vextq_s8(v1391, v1391, 8uLL).u64[0];
  v396 = vextq_s8(v547, v547, 8uLL).u64[0];
  v393 = vextq_s8(v760, v760, 8uLL).u64[0];
  v394 = vextq_s8(v755, v755, 8uLL).u64[0];
  v392 = vextq_s8(v764, v764, 8uLL).u64[0];
  v390 = vextq_s8(v768, v768, 8uLL).u64[0];
  *(_QWORD *)&v517.f64[0] = v1404.i64[0];
  v409 = vextq_s8(v1404, v1404, 8uLL).u64[0];
  v407 = vextq_s8(v933, v933, 8uLL).u64[0];
  v405 = vextq_s8(v1401, v1401, 8uLL).u64[0];
  v406 = vextq_s8(v822, v822, 8uLL).u64[0];
  v403 = vextq_s8(v957, v957, 8uLL).u64[0];
  v404 = vextq_s8(v953, v953, 8uLL).u64[0];
  v401 = vextq_s8(v974, v974, 8uLL).u64[0];
  v402 = vextq_s8(v965, v965, 8uLL).u64[0];
  v399 = vextq_s8(v839, v839, 8uLL).u64[0];
  v418 = vextq_s8(v535, v535, 8uLL).u64[0];
  v416 = vextq_s8(v538, v538, 8uLL).u64[0];
  v415 = vextq_s8(v541, v541, 8uLL).u64[0];
  v414 = vextq_s8(v544, v544, 8uLL).u64[0];
  v413 = vextq_s8(v676, v676, 8uLL).u64[0];
  v412 = vextq_s8(v679, v679, 8uLL).u64[0];
  v411 = vextq_s8(v682, v682, 8uLL).u64[0];
  v410 = vextq_s8(v685, v685, 8uLL).u64[0];
  v408 = vextq_s8(v743, v743, 8uLL).u64[0];
  *(_QWORD *)&v634.f64[0] = v1422.i64[0];
  v427 = vextq_s8(v1422, v1422, 8uLL).u64[0];
  v425 = vextq_s8(v828, v828, 8uLL).u64[0];
  v424 = vextq_s8(v961, v961, 8uLL).u64[0];
  v423 = vextq_s8(v831, v831, 8uLL).u64[0];
  v422 = vextq_s8(v978, v978, 8uLL).u64[0];
  v421 = vextq_s8(v982, v982, 8uLL).u64[0];
  v420 = vextq_s8(v990, v990, 8uLL).u64[0];
  v419 = vextq_s8(v994, v994, 8uLL).u64[0];
  v417 = vextq_s8(v1010, v1010, 8uLL).u64[0];
  v436 = vextq_s8(v658, v658, 8uLL).u64[0];
  v434 = vextq_s8(v523, v523, 8uLL).u64[0];
  v433 = vextq_s8(v661, v661, 8uLL).u64[0];
  v432 = vextq_s8(v664, v664, 8uLL).u64[0];
  v431 = vextq_s8(v668, v668, 8uLL).u64[0];
  v430 = vextq_s8(v526, v526, 8uLL).u64[0];
  v429 = vextq_s8(v529, v529, 8uLL).u64[0];
  v428 = vextq_s8(v532, v532, 8uLL).u64[0];
  v426 = vextq_s8(v672, v672, 8uLL).u64[0];
  *(_QWORD *)&v637.f64[0] = v1440.i64[0];
  v445 = vextq_s8(v1440, v1440, 8uLL).u64[0];
  v443 = vextq_s8(v970, v970, 8uLL).u64[0];
  v442 = vextq_s8(v1024, v1024, 8uLL).u64[0];
  v441 = vextq_s8(v986, v986, 8uLL).u64[0];
  v440 = vextq_s8(v1029, v1029, 8uLL).u64[0];
  v439 = vextq_s8(v998, v998, 8uLL).u64[0];
  v438 = vextq_s8(v1002, v1002, 8uLL).u64[0];
  v437 = vextq_s8(v1006, v1006, 8uLL).u64[0];
  v435 = vextq_s8(v1014, v1014, 8uLL).u64[0];
  v454 = vextq_s8(v640, v640, 8uLL).u64[0];
  v452 = vextq_s8(v644, v644, 8uLL).u64[0];
  v451 = vextq_s8(v647, v647, 8uLL).u64[0];
  v450 = vextq_s8(v651, v651, 8uLL).u64[0];
  v449 = vextq_s8(v654, v654, 8uLL).u64[0];
  v448 = vextq_s8(v691, v691, 8uLL).u64[0];
  v447 = vextq_s8(v695, v695, 8uLL).u64[0];
  v446 = vextq_s8(v698, v698, 8uLL).u64[0];
  v444 = vextq_s8(v702, v702, 8uLL).u64[0];
  v463 = vextq_s8(v844, v844, 8uLL).u64[0];
  v461 = vextq_s8(v1034, v1034, 8uLL).u64[0];
  v460 = vextq_s8(v1039, v1039, 8uLL).u64[0];
  v459 = vextq_s8(v1044, v1044, 8uLL).u64[0];
  v458 = vextq_s8(v1049, v1049, 8uLL).u64[0];
  v457 = vextq_s8(v1054, v1054, 8uLL).u64[0];
  v456 = vextq_s8(v1065, v1065, 8uLL).u64[0];
  v455 = vextq_s8(v1074, v1074, 8uLL).u64[0];
  v453 = vextq_s8(v1088, v1088, 8uLL).u64[0];
  v472 = vextq_s8(v705, v705, 8uLL).u64[0];
  v470 = vextq_s8(v709, v709, 8uLL).u64[0];
  v469 = vextq_s8(v712, v712, 8uLL).u64[0];
  v468 = vextq_s8(v715, v715, 8uLL).u64[0];
  v467 = vextq_s8(v718, v718, 8uLL).u64[0];
  v466 = vextq_s8(v722, v722, 8uLL).u64[0];
  v465 = vextq_s8(v725, v725, 8uLL).u64[0];
  v464 = vextq_s8(v728, v728, 8uLL).u64[0];
  v462 = vextq_s8(v732, v732, 8uLL).u64[0];
  v478 = vextq_s8(v858, v858, 8uLL).u64[0];
  v477 = vextq_s8(v1018, v1018, 8uLL).u64[0];
  v476 = vextq_s8(v1059, v1059, 8uLL).u64[0];
  v475 = vextq_s8(v1070, v1070, 8uLL).u64[0];
  v474 = vextq_s8(v1079, v1079, 8uLL).u64[0];
  v473 = vextq_s8(v1084, v1084, 8uLL).u64[0];
  v471 = vextq_s8(v1092, v1092, 8uLL).u64[0];
  v239 = vextq_s8(v854, v854, 8uLL).u64[0];
  v240 = vextq_s8(v861, v861, 8uLL).u64[0];
  v241 = vextq_s8(v866, v866, 8uLL).u64[0];
  v504 = vextq_s8(v871, v871, 8uLL).u64[0];
  v503 = vextq_s8(v879, v879, 8uLL).u64[0];
  v502 = vextq_s8(v888, v888, 8uLL).u64[0];
  v501 = vextq_s8(v896, v896, 8uLL).u64[0];
  v500 = vextq_s8(v904, v904, 8uLL).u64[0];
  v499 = vextq_s8(v912, v912, 8uLL).u64[0];
  v498 = vextq_s8(v920, v920, 8uLL).u64[0];
  *(_QWORD *)&v497 = vextq_s8(v688, v688, 8uLL).u64[0];
  v496 = vextq_s8(v874, v874, 8uLL).u64[0];
  v495 = vextq_s8(v884, v884, 8uLL).u64[0];
  v494 = vextq_s8(v892, v892, 8uLL).u64[0];
  v493 = vextq_s8(v900, v900, 8uLL).u64[0];
  v492 = vextq_s8(v908, v908, 8uLL).u64[0];
  v491 = vextq_s8(v916, v916, 8uLL).u64[0];
  v490 = vextq_s8(v557, v557, 8uLL).u64[0];
  v489 = vextq_s8(v923, v923, 8uLL).u64[0];
  v488 = vextq_s8(v560, v560, 8uLL).u64[0];
  v487 = vextq_s8(v563, v563, 8uLL).u64[0];
  v486 = vextq_s8(v566, v566, 8uLL).u64[0];
  v485 = vextq_s8(v569, v569, 8uLL).u64[0];
  v484 = vextq_s8(v572, v572, 8uLL).u64[0];
  v483 = vextq_s8(v608, v608, 8uLL).u64[0];
  v482 = vextq_s8(v575, v575, 8uLL).u64[0];
  v481 = vextq_s8(v735, v735, 8uLL).u64[0];
  v480 = vextq_s8(v578, v578, 8uLL).u64[0];
  v479 = vextq_s8(v849, v849, 8uLL).u64[0];
  if (*(_DWORD *)(v25 + 240) == 18 && *(_DWORD *)(v25 + 244) == 18)
  {
    v242 = *v556;
LABEL_50:
    *(_QWORD *)&v301.f64[0] = v505.i64[0];
    *(_QWORD *)&v301.f64[1] = v355;
    v302.f64[0] = v507.f64[0];
    *(_QWORD *)&v302.f64[1] = v353;
    v303.f64[0] = v509.f64[0];
    *(_QWORD *)&v303.f64[1] = v352;
    *(_QWORD *)&v304.f64[0] = v615.i64[0];
    *(_QWORD *)&v304.f64[1] = v351;
    *(_QWORD *)&v305.f64[0] = v618.i64[0];
    *(_QWORD *)&v305.f64[1] = v350;
    *(_QWORD *)&v306.f64[0] = v807.i64[0];
    *(_QWORD *)&v306.f64[1] = v349;
    *(_QWORD *)&v307.f64[0] = v809.i64[0];
    *(_QWORD *)&v307.f64[1] = v348;
    *(_QWORD *)&v308.f64[0] = v623.i64[0];
    *(_QWORD *)&v308.f64[1] = v347;
    *(_QWORD *)&v309.f64[0] = v627.i64[0];
    *(_QWORD *)&v309.f64[1] = v346;
    *(_QWORD *)&v310.f64[0] = v772.i64[0];
    *(_QWORD *)&v310.f64[1] = v364;
    v775 = v310;
    *(_QWORD *)&v310.f64[0] = v780.i64[0];
    *(_QWORD *)&v310.f64[1] = v362;
    v783 = v310;
    *(_QWORD *)&v310.f64[0] = v784.i64[0];
    *(_QWORD *)&v310.f64[1] = v361;
    v787 = v310;
    *(_QWORD *)&v310.f64[0] = v789.i64[0];
    *(_QWORD *)&v310.f64[1] = v360;
    v792 = v310;
    *(_QWORD *)&v310.f64[0] = v793.i64[0];
    *(_QWORD *)&v310.f64[1] = v359;
    v796 = v310;
    *(_QWORD *)&v310.f64[0] = v797.i64[0];
    *(_QWORD *)&v310.f64[1] = v358;
    v800 = v310;
    *(_QWORD *)&v310.f64[0] = v802.i64[0];
    *(_QWORD *)&v310.f64[1] = v357;
    v805 = v310;
    *(_QWORD *)&v311.f64[0] = v550.i64[0];
    *(_QWORD *)&v311.f64[1] = v356;
    v552 = v311;
    *(_QWORD *)&v310.f64[0] = v553.i64[0];
    *(_QWORD *)&v310.f64[1] = v354;
    v555 = v310;
    v312.f64[0] = v511.f64[0];
    *(_QWORD *)&v312.f64[1] = v373;
    v313.f64[0] = v513.f64[0];
    *(_QWORD *)&v313.f64[1] = v371;
    *(_QWORD *)&v314.f64[0] = v515.i64[0];
    *(_QWORD *)&v314.f64[1] = v370;
    *(_QWORD *)&v315.f64[0] = v620.i64[0];
    *(_QWORD *)&v315.f64[1] = v369;
    *(_QWORD *)&v316.f64[0] = v811.i64[0];
    *(_QWORD *)&v316.f64[1] = v368;
    *(_QWORD *)&v317.f64[0] = v813.i64[0];
    *(_QWORD *)&v317.f64[1] = v367;
    *(_QWORD *)&v318.f64[0] = v816.i64[0];
    *(_QWORD *)&v318.f64[1] = v366;
    *(_QWORD *)&v319.f64[0] = v625.i64[0];
    *(_QWORD *)&v319.f64[1] = v365;
    *(_QWORD *)&v320.f64[0] = v628.i64[0];
    *(_QWORD *)&v320.f64[1] = v363;
    *(_QWORD *)&v321.f64[0] = v581.i64[0];
    *(_QWORD *)&v321.f64[1] = v382;
    *(_QWORD *)&v322.f64[0] = v584.i64[0];
    *(_QWORD *)&v322.f64[1] = v380;
    *(_QWORD *)&v323.f64[0] = v587.i64[0];
    *(_QWORD *)&v323.f64[1] = v379;
    *(_QWORD *)&v324.f64[0] = v591.i64[0];
    *(_QWORD *)&v324.f64[1] = v378;
    *(_QWORD *)&v325.f64[0] = v594.i64[0];
    *(_QWORD *)&v325.f64[1] = v377;
    *(_QWORD *)&v326.f64[0] = v598.i64[0];
    *(_QWORD *)&v326.f64[1] = v376;
    *(_QWORD *)&v327.f64[0] = v601.i64[0];
    *(_QWORD *)&v327.f64[1] = v375;
    *(_QWORD *)&v328.f64[0] = v604.i64[0];
    *(_QWORD *)&v328.f64[1] = v374;
    *(_QWORD *)&v310.f64[0] = v776.i64[0];
    *(_QWORD *)&v310.f64[1] = v372;
    v779 = v310;
    v310.f64[0] = v519.f64[0];
    *(_QWORD *)&v310.f64[1] = v391;
    v521 = v310;
    v310.f64[0] = v630.f64[0];
    *(_QWORD *)&v310.f64[1] = v389;
    v632 = v310;
    *(_QWORD *)&v310.f64[0] = v819.i64[0];
    *(_QWORD *)&v310.f64[1] = v388;
    v821 = v310;
    *(_QWORD *)&v310.f64[0] = v928.i64[0];
    *(_QWORD *)&v310.f64[1] = v387;
    v930 = v310;
    *(_QWORD *)&v310.f64[0] = v937.i64[0];
    *(_QWORD *)&v310.f64[1] = v386;
    v939 = v310;
    *(_QWORD *)&v310.f64[0] = v941.i64[0];
    *(_QWORD *)&v310.f64[1] = v385;
    v943 = v310;
    *(_QWORD *)&v310.f64[0] = v945.i64[0];
    *(_QWORD *)&v310.f64[1] = v384;
    v947 = v310;
    *(_QWORD *)&v310.f64[0] = v949.i64[0];
    *(_QWORD *)&v310.f64[1] = v383;
    v951 = v310;
    *(_QWORD *)&v310.f64[0] = v835.i64[0];
    *(_QWORD *)&v310.f64[1] = v381;
    v837 = v310;
    *(_QWORD *)&v310.f64[0] = v739.i64[0];
    *(_QWORD *)&v310.f64[1] = v400;
    v742 = v310;
    *(_QWORD *)&v310.f64[0] = v747.i64[0];
    *(_QWORD *)&v310.f64[1] = v398;
    v750 = v310;
    *(_QWORD *)&v310.f64[0] = v751.i64[0];
    *(_QWORD *)&v310.f64[1] = v397;
    v754 = v310;
    *(_QWORD *)&v310.f64[0] = v547.i64[0];
    *(_QWORD *)&v310.f64[1] = v396;
    v549 = v310;
    v310.f64[0] = v611.f64[0];
    *(_QWORD *)&v310.f64[1] = v395;
    v614 = v310;
    *(_QWORD *)&v310.f64[0] = v755.i64[0];
    *(_QWORD *)&v310.f64[1] = v394;
    v758 = v310;
    *(_QWORD *)&v310.f64[0] = v760.i64[0];
    *(_QWORD *)&v310.f64[1] = v393;
    v763 = v310;
    *(_QWORD *)&v310.f64[0] = v764.i64[0];
    *(_QWORD *)&v310.f64[1] = v392;
    v767 = v310;
    *(_QWORD *)&v310.f64[0] = v768.i64[0];
    *(_QWORD *)&v310.f64[1] = v390;
    v771 = v310;
    v329.f64[0] = v517.f64[0];
    *(_QWORD *)&v329.f64[1] = v409;
    *(_QWORD *)&v310.f64[0] = v933.i64[0];
    *(_QWORD *)&v310.f64[1] = v407;
    v935 = v310;
    *(_QWORD *)&v310.f64[0] = v822.i64[0];
    *(_QWORD *)&v310.f64[1] = v406;
    v824 = v310;
    *(_QWORD *)&v310.f64[0] = v825.i64[0];
    *(_QWORD *)&v310.f64[1] = v405;
    v827 = v310;
    *(_QWORD *)&v310.f64[0] = v953.i64[0];
    *(_QWORD *)&v310.f64[1] = v404;
    v955 = v310;
    *(_QWORD *)&v310.f64[0] = v957.i64[0];
    *(_QWORD *)&v310.f64[1] = v403;
    v959 = v310;
    *(_QWORD *)&v310.f64[0] = v965.i64[0];
    *(_QWORD *)&v310.f64[1] = v402;
    v967 = v310;
    *(_QWORD *)&v310.f64[0] = v974.i64[0];
    *(_QWORD *)&v310.f64[1] = v401;
    v976 = v310;
    *(_QWORD *)&v310.f64[0] = v839.i64[0];
    *(_QWORD *)&v310.f64[1] = v399;
    v841 = v310;
    *(_QWORD *)&v310.f64[0] = v535.i64[0];
    *(_QWORD *)&v310.f64[1] = v418;
    v537 = v310;
    *(_QWORD *)&v310.f64[0] = v538.i64[0];
    *(_QWORD *)&v310.f64[1] = v416;
    v540 = v310;
    *(_QWORD *)&v310.f64[0] = v541.i64[0];
    *(_QWORD *)&v310.f64[1] = v415;
    v543 = v310;
    *(_QWORD *)&v310.f64[0] = v544.i64[0];
    *(_QWORD *)&v310.f64[1] = v414;
    v546 = v310;
    *(_QWORD *)&v310.f64[0] = v676.i64[0];
    *(_QWORD *)&v310.f64[1] = v413;
    v678 = v310;
    *(_QWORD *)&v310.f64[0] = v679.i64[0];
    *(_QWORD *)&v310.f64[1] = v412;
    v681 = v310;
    *(_QWORD *)&v310.f64[0] = v682.i64[0];
    *(_QWORD *)&v310.f64[1] = v411;
    v684 = v310;
    *(_QWORD *)&v310.f64[0] = v685.i64[0];
    *(_QWORD *)&v310.f64[1] = v410;
    v687 = v310;
    *(_QWORD *)&v310.f64[0] = v743.i64[0];
    *(_QWORD *)&v310.f64[1] = v408;
    v746 = v310;
    v310.f64[0] = v634.f64[0];
    *(_QWORD *)&v310.f64[1] = v427;
    v636 = v310;
    *(_QWORD *)&v310.f64[0] = v828.i64[0];
    *(_QWORD *)&v310.f64[1] = v425;
    v830 = v310;
    *(_QWORD *)&v310.f64[0] = v961.i64[0];
    *(_QWORD *)&v310.f64[1] = v424;
    v963 = v310;
    *(_QWORD *)&v310.f64[0] = v831.i64[0];
    *(_QWORD *)&v310.f64[1] = v423;
    v833 = v310;
    *(_QWORD *)&v310.f64[0] = v978.i64[0];
    *(_QWORD *)&v310.f64[1] = v422;
    v980 = v310;
    *(_QWORD *)&v310.f64[0] = v982.i64[0];
    *(_QWORD *)&v310.f64[1] = v421;
    v984 = v310;
    *(_QWORD *)&v310.f64[0] = v990.i64[0];
    *(_QWORD *)&v310.f64[1] = v420;
    v992 = v310;
    *(_QWORD *)&v310.f64[0] = v994.i64[0];
    *(_QWORD *)&v310.f64[1] = v419;
    v996 = v310;
    *(_QWORD *)&v310.f64[0] = v1010.i64[0];
    *(_QWORD *)&v310.f64[1] = v417;
    v1012 = v310;
    *(_QWORD *)&v310.f64[0] = v658.i64[0];
    *(_QWORD *)&v310.f64[1] = v436;
    v660 = v310;
    *(_QWORD *)&v310.f64[0] = v523.i64[0];
    *(_QWORD *)&v310.f64[1] = v434;
    v525 = v310;
    *(_QWORD *)&v310.f64[0] = v661.i64[0];
    *(_QWORD *)&v310.f64[1] = v433;
    v663 = v310;
    *(_QWORD *)&v310.f64[0] = v664.i64[0];
    *(_QWORD *)&v310.f64[1] = v432;
    v666 = v310;
    *(_QWORD *)&v310.f64[0] = v668.i64[0];
    *(_QWORD *)&v310.f64[1] = v431;
    v670 = v310;
    *(_QWORD *)&v310.f64[0] = v526.i64[0];
    *(_QWORD *)&v310.f64[1] = v430;
    v528 = v310;
    *(_QWORD *)&v310.f64[0] = v529.i64[0];
    *(_QWORD *)&v310.f64[1] = v429;
    v531 = v310;
    *(_QWORD *)&v310.f64[0] = v532.i64[0];
    *(_QWORD *)&v310.f64[1] = v428;
    v534 = v310;
    *(_QWORD *)&v310.f64[0] = v672.i64[0];
    *(_QWORD *)&v310.f64[1] = v426;
    v674 = v310;
    v310.f64[0] = v637.f64[0];
    *(_QWORD *)&v310.f64[1] = v445;
    v639 = v310;
    *(_QWORD *)&v310.f64[0] = v970.i64[0];
    *(_QWORD *)&v310.f64[1] = v443;
    v972 = v310;
    *(_QWORD *)&v310.f64[0] = v1024.i64[0];
    *(_QWORD *)&v310.f64[1] = v442;
    v1026 = v310;
    *(_QWORD *)&v310.f64[0] = v986.i64[0];
    *(_QWORD *)&v310.f64[1] = v441;
    v988 = v310;
    *(_QWORD *)&v310.f64[0] = v1029.i64[0];
    *(_QWORD *)&v310.f64[1] = v440;
    v1031 = v310;
    *(_QWORD *)&v310.f64[0] = v998.i64[0];
    *(_QWORD *)&v310.f64[1] = v439;
    v1000 = v310;
    *(_QWORD *)&v310.f64[0] = v1002.i64[0];
    *(_QWORD *)&v310.f64[1] = v438;
    v1004 = v310;
    *(_QWORD *)&v310.f64[0] = v1006.i64[0];
    *(_QWORD *)&v310.f64[1] = v437;
    v1008 = v310;
    *(_QWORD *)&v310.f64[0] = v1014.i64[0];
    *(_QWORD *)&v310.f64[1] = v435;
    v1016 = v310;
    *(_QWORD *)&v310.f64[0] = v640.i64[0];
    *(_QWORD *)&v310.f64[1] = v454;
    v642 = v310;
    *(_QWORD *)&v310.f64[0] = v644.i64[0];
    *(_QWORD *)&v310.f64[1] = v452;
    v646 = v310;
    *(_QWORD *)&v310.f64[0] = v647.i64[0];
    *(_QWORD *)&v310.f64[1] = v451;
    v649 = v310;
    *(_QWORD *)&v310.f64[0] = v651.i64[0];
    *(_QWORD *)&v310.f64[1] = v450;
    v653 = v310;
    *(_QWORD *)&v310.f64[0] = v654.i64[0];
    *(_QWORD *)&v310.f64[1] = v449;
    v656 = v310;
    *(_QWORD *)&v310.f64[0] = v691.i64[0];
    *(_QWORD *)&v310.f64[1] = v448;
    v693 = v310;
    *(_QWORD *)&v310.f64[0] = v695.i64[0];
    *(_QWORD *)&v310.f64[1] = v447;
    v697 = v310;
    *(_QWORD *)&v310.f64[0] = v698.i64[0];
    *(_QWORD *)&v310.f64[1] = v446;
    v700 = v310;
    *(_QWORD *)&v310.f64[0] = v702.i64[0];
    *(_QWORD *)&v310.f64[1] = v444;
    v704 = v310;
    *(_QWORD *)&v310.f64[0] = v844.i64[0];
    *(_QWORD *)&v310.f64[1] = v463;
    v846 = v310;
    *(_QWORD *)&v310.f64[0] = v1034.i64[0];
    *(_QWORD *)&v310.f64[1] = v461;
    v1036 = v310;
    *(_QWORD *)&v310.f64[0] = v1039.i64[0];
    *(_QWORD *)&v310.f64[1] = v460;
    v1041 = v310;
    *(_QWORD *)&v310.f64[0] = v1044.i64[0];
    *(_QWORD *)&v310.f64[1] = v459;
    v1046 = v310;
    *(_QWORD *)&v310.f64[0] = v1049.i64[0];
    *(_QWORD *)&v310.f64[1] = v458;
    v1051 = v310;
    *(_QWORD *)&v310.f64[0] = v1054.i64[0];
    *(_QWORD *)&v310.f64[1] = v457;
    v1056 = v310;
    *(_QWORD *)&v310.f64[0] = v1065.i64[0];
    *(_QWORD *)&v310.f64[1] = v456;
    v1067 = v310;
    *(_QWORD *)&v310.f64[0] = v1074.i64[0];
    *(_QWORD *)&v310.f64[1] = v455;
    v1076 = v310;
    *(_QWORD *)&v310.f64[0] = v1088.i64[0];
    *(_QWORD *)&v310.f64[1] = v453;
    v1090 = v310;
    *(_QWORD *)&v310.f64[0] = v705.i64[0];
    *(_QWORD *)&v310.f64[1] = v472;
    v707 = v310;
    *(_QWORD *)&v310.f64[0] = v709.i64[0];
    *(_QWORD *)&v310.f64[1] = v470;
    v711 = v310;
    *(_QWORD *)&v310.f64[0] = v712.i64[0];
    *(_QWORD *)&v310.f64[1] = v469;
    v714 = v310;
    *(_QWORD *)&v310.f64[0] = v715.i64[0];
    *(_QWORD *)&v310.f64[1] = v468;
    v717 = v310;
    *(_QWORD *)&v310.f64[0] = v718.i64[0];
    *(_QWORD *)&v310.f64[1] = v467;
    v720 = v310;
    *(_QWORD *)&v310.f64[0] = v722.i64[0];
    *(_QWORD *)&v310.f64[1] = v466;
    v724 = v310;
    *(_QWORD *)&v310.f64[0] = v725.i64[0];
    *(_QWORD *)&v310.f64[1] = v465;
    v727 = v310;
    *(_QWORD *)&v310.f64[0] = v728.i64[0];
    *(_QWORD *)&v310.f64[1] = v464;
    v730 = v310;
    *(_QWORD *)&v310.f64[0] = v732.i64[0];
    *(_QWORD *)&v310.f64[1] = v462;
    v734 = v310;
    *(_QWORD *)&v310.f64[0] = v735.i64[0];
    *(_QWORD *)&v310.f64[1] = v481;
    v737 = v310;
    *(_QWORD *)&v310.f64[0] = v849.i64[0];
    *(_QWORD *)&v310.f64[1] = v479;
    v851 = v310;
    *(_QWORD *)&v310.f64[0] = v858.i64[0];
    *(_QWORD *)&v310.f64[1] = v478;
    v860 = v310;
    *(_QWORD *)&v310.f64[0] = v1018.i64[0];
    *(_QWORD *)&v310.f64[1] = v477;
    v1021 = v310;
    *(_QWORD *)&v310.f64[0] = v1059.i64[0];
    *(_QWORD *)&v310.f64[1] = v476;
    v1062 = v310;
    *(_QWORD *)&v310.f64[0] = v1070.i64[0];
    *(_QWORD *)&v310.f64[1] = v475;
    v1072 = v310;
    *(_QWORD *)&v310.f64[0] = v1079.i64[0];
    *(_QWORD *)&v310.f64[1] = v474;
    v1081 = v310;
    *(_QWORD *)&v310.f64[0] = v1084.i64[0];
    *(_QWORD *)&v310.f64[1] = v473;
    v1086 = v310;
    *(_QWORD *)&v310.f64[0] = v1092.i64[0];
    *(_QWORD *)&v310.f64[1] = v471;
    v1094 = v310;
    *(_QWORD *)&v310.f64[0] = v557.i64[0];
    *(_QWORD *)&v310.f64[1] = v490;
    v559 = v310;
    *(_QWORD *)&v310.f64[0] = v560.i64[0];
    *(_QWORD *)&v310.f64[1] = v488;
    v562 = v310;
    *(_QWORD *)&v310.f64[0] = v563.i64[0];
    *(_QWORD *)&v310.f64[1] = v487;
    v565 = v310;
    *(_QWORD *)&v310.f64[0] = v566.i64[0];
    *(_QWORD *)&v310.f64[1] = v486;
    v568 = v310;
    *(_QWORD *)&v310.f64[0] = v569.i64[0];
    *(_QWORD *)&v310.f64[1] = v485;
    v571 = v310;
    *(_QWORD *)&v310.f64[0] = v572.i64[0];
    *(_QWORD *)&v310.f64[1] = v484;
    v574 = v310;
    *(_QWORD *)&v310.f64[0] = v608.i64[0];
    *(_QWORD *)&v310.f64[1] = v483;
    v610 = v310;
    *(_QWORD *)&v310.f64[0] = v575.i64[0];
    *(_QWORD *)&v310.f64[1] = v482;
    v577 = v310;
    *(_QWORD *)&v310.f64[0] = v578.i64[0];
    *(_QWORD *)&v310.f64[1] = v480;
    v580 = v310;
    *(_QWORD *)&v311.f64[0] = v854.i64[0];
    *(_QWORD *)&v311.f64[1] = v239;
    v856 = v311;
    *(_QWORD *)&v311.f64[0] = v861.i64[0];
    *(_QWORD *)&v311.f64[1] = v240;
    v863 = v311;
    *(_QWORD *)&v310.f64[0] = v874.i64[0];
    *(_QWORD *)&v310.f64[1] = v496;
    v876 = v310;
    *(_QWORD *)&v310.f64[0] = v884.i64[0];
    *(_QWORD *)&v310.f64[1] = v495;
    v886 = v310;
    *(_QWORD *)&v310.f64[0] = v892.i64[0];
    *(_QWORD *)&v310.f64[1] = v494;
    v894 = v310;
    *(_QWORD *)&v310.f64[0] = v900.i64[0];
    *(_QWORD *)&v310.f64[1] = v493;
    v902 = v310;
    *(_QWORD *)&v310.f64[0] = v908.i64[0];
    *(_QWORD *)&v310.f64[1] = v492;
    v910 = v310;
    *(_QWORD *)&v310.f64[0] = v916.i64[0];
    *(_QWORD *)&v310.f64[1] = v491;
    v918 = v310;
    *(_QWORD *)&v310.f64[0] = v923.i64[0];
    *(_QWORD *)&v310.f64[1] = v489;
    v925 = v310;
    *(_QWORD *)&v311.f64[0] = v866.i64[0];
    *(_QWORD *)&v311.f64[1] = v241;
    v868 = v311;
    *(_QWORD *)&v311.f64[0] = v871.i64[0];
    *(_QWORD *)&v311.f64[1] = v504;
    *(_QWORD *)&v310.f64[0] = v879.i64[0];
    *(_QWORD *)&v310.f64[1] = v503;
    v881 = v310;
    *(_QWORD *)&v310.f64[0] = v888.i64[0];
    *(_QWORD *)&v310.f64[1] = v502;
    v890 = v310;
    *(_QWORD *)&v310.f64[0] = v896.i64[0];
    *(_QWORD *)&v310.f64[1] = v501;
    v898 = v310;
    *(_QWORD *)&v310.f64[0] = v904.i64[0];
    *(_QWORD *)&v310.f64[1] = v500;
    v906 = v310;
    *(_QWORD *)&v310.f64[0] = v912.i64[0];
    *(_QWORD *)&v310.f64[1] = v499;
    v914 = v310;
    *(_QWORD *)&v310.f64[0] = v920.i64[0];
    *(_QWORD *)&v310.f64[1] = v498;
    *(_QWORD *)&v330.f64[0] = v688.i64[0];
    v330.f64[1] = v497;
    v1504 = vaddq_f64(v309, *(float64x2_t *)&v1188[8]);
    v1505 = vaddq_f64(v308, *(float64x2_t *)&v1188[24]);
    v1506 = vaddq_f64(v307, *(float64x2_t *)&v1188[40]);
    v1507 = vaddq_f64(v306, *(float64x2_t *)&v1188[56]);
    v1508 = vaddq_f64(v305, *(float64x2_t *)&v1188[72]);
    v1509 = vaddq_f64(v304, *(float64x2_t *)&v1188[88]);
    v1510 = vaddq_f64(v303, *(float64x2_t *)&v1188[104]);
    v1511 = vaddq_f64(v302, *(float64x2_t *)&v1188[120]);
    v1512 = vaddq_f64(v301, *(float64x2_t *)&v1188[136]);
    v1513 = vaddq_f64(v555, v1189);
    v1514 = vaddq_f64(v552, v1190);
    v1515 = vaddq_f64(v805, v1191);
    v1516 = vaddq_f64(v800, v1192);
    v1517 = vaddq_f64(v796, v1193);
    v1518 = vaddq_f64(v792, v1194);
    v1519 = vaddq_f64(v787, v1195);
    v1520 = vaddq_f64(v783, v1196);
    v1521 = vaddq_f64(v775, v1197);
    v1522 = vaddq_f64(v320, v1198);
    v1523 = vaddq_f64(v319, v1199);
    v1524 = vaddq_f64(v318, v1200);
    v1525 = vaddq_f64(v317, v1201);
    v1526 = vaddq_f64(v316, v1202);
    v1527 = vaddq_f64(v315, v1203);
    v1528 = vaddq_f64(v314, v1204);
    v1529 = vaddq_f64(v313, v1205);
    v1530 = vaddq_f64(v312, v1206);
    v1531 = vaddq_f64(v779, v1207);
    v1532 = vaddq_f64(v328, v1208);
    v1533 = vaddq_f64(v327, v1209);
    v1534 = vaddq_f64(v326, v1210);
    v1535 = vaddq_f64(v325, v1211);
    v1536 = vaddq_f64(v324, v1212);
    v1537 = vaddq_f64(v323, v1213);
    v1538 = vaddq_f64(v322, v1214);
    v1539 = vaddq_f64(v321, v1215);
    v1540 = vaddq_f64(v837, v1216);
    v1541 = vaddq_f64(v951, v1217);
    v1542 = vaddq_f64(v947, v1218);
    v1543 = vaddq_f64(v943, v1219);
    v1544 = vaddq_f64(v939, v1220);
    v1545 = vaddq_f64(v930, v1221);
    v1546 = vaddq_f64(v821, v1222);
    v1547 = vaddq_f64(v632, v1223);
    v1548 = vaddq_f64(v521, v1224);
    v1549 = vaddq_f64(v771, v1225);
    v1550 = vaddq_f64(v767, v1226);
    v1551 = vaddq_f64(v763, v1227);
    v1552 = vaddq_f64(v758, v1228);
    v1553 = vaddq_f64(v614, v1229);
    v1554 = vaddq_f64(v549, v1230);
    v1555 = vaddq_f64(v754, v1231);
    v1556 = vaddq_f64(v750, v1232);
    v1557 = vaddq_f64(v742, v1233);
    v1558 = vaddq_f64(v841, v1234);
    v1559 = vaddq_f64(v976, v1235);
    v1560 = vaddq_f64(v967, v1236);
    v1561 = vaddq_f64(v959, v1237);
    v1562 = vaddq_f64(v955, v1238);
    v1563 = vaddq_f64(v827, v1239);
    v1564 = vaddq_f64(v824, v1240);
    v1565 = vaddq_f64(v935, v1241);
    v1566 = vaddq_f64(v329, v1242);
    v1567 = vaddq_f64(v746, v1243);
    v1568 = vaddq_f64(v687, v1244);
    v1569 = vaddq_f64(v684, v1245);
    v1570 = vaddq_f64(v681, v1246);
    v1571 = vaddq_f64(v678, v1247);
    v1572 = vaddq_f64(v546, v1248);
    v1573 = vaddq_f64(v543, v1249);
    v1574 = vaddq_f64(v540, v1250);
    v1575 = vaddq_f64(v537, v1251);
    v1576 = vaddq_f64(v1012, v1252);
    v1577 = vaddq_f64(v996, v1253);
    v1578 = vaddq_f64(v992, v1254);
    v1579 = vaddq_f64(v984, v1255);
    v1580 = vaddq_f64(v980, v1256);
    v1581 = vaddq_f64(v833, v1257);
    v1582 = vaddq_f64(v963, v1258);
    v1583 = vaddq_f64(v830, v1259);
    v1584 = vaddq_f64(v636, v1260);
    v1585 = vaddq_f64(v674, v1261);
    v1586 = vaddq_f64(v534, v1262);
    v1587 = vaddq_f64(v531, v1263);
    v1588 = vaddq_f64(v528, v1264);
    v1589 = vaddq_f64(v670, v1265);
    v1590 = vaddq_f64(v666, v1266);
    v1591 = vaddq_f64(v663, v1267);
    v1592 = vaddq_f64(v525, v1268);
    v1593 = vaddq_f64(v660, v1269);
    v1594 = vaddq_f64(v1016, v1270);
    v1595 = vaddq_f64(v1008, v1271);
    v1596 = vaddq_f64(v1004, v1272);
    v1597 = vaddq_f64(v1000, v1273);
    v1598 = vaddq_f64(v1031, v1274);
    v1599 = vaddq_f64(v988, v1275);
    v1600 = vaddq_f64(v1026, v1276);
    v1601 = vaddq_f64(v972, v1277);
    v1602 = vaddq_f64(v639, v1278);
    v1603 = vaddq_f64(v704, v1279);
    v1604 = vaddq_f64(v700, v1280);
    v1605 = vaddq_f64(v697, v1281);
    v1606 = vaddq_f64(v693, v1282);
    v1607 = vaddq_f64(v656, v1283);
    v1608 = vaddq_f64(v653, v1284);
    v1609 = vaddq_f64(v649, v1285);
    v1610 = vaddq_f64(v646, v1286);
    v1611 = vaddq_f64(v642, v1287);
    v1612 = vaddq_f64(v1090, v1288);
    v1613 = vaddq_f64(v1076, v1289);
    v1614 = vaddq_f64(v1067, v1290);
    v1615 = vaddq_f64(v1056, v1291);
    v1616 = vaddq_f64(v1051, v1292);
    v1617 = vaddq_f64(v1046, v1293);
    v1618 = vaddq_f64(v1041, v1294);
    v1619 = vaddq_f64(v1036, v1295);
    v1620 = vaddq_f64(v846, v1296);
    v1621 = vaddq_f64(v734, v1297);
    v1622 = vaddq_f64(v730, v1298);
    v1623 = vaddq_f64(v727, v1299);
    v1624 = vaddq_f64(v724, v1300);
    v1625 = vaddq_f64(v720, v1301);
    v1626 = vaddq_f64(v717, v1302);
    v1627 = vaddq_f64(v714, v1303);
    v1628 = vaddq_f64(v711, v1304);
    v1629 = vaddq_f64(v707, v1305);
    v1630 = vaddq_f64(v1094, v1306);
    v1631 = vaddq_f64(v1086, v1307);
    v1632 = vaddq_f64(v1081, v1308);
    v1633 = vaddq_f64(v1072, v1309);
    v1634 = vaddq_f64(v1062, v1310);
    v1635 = vaddq_f64(v1021, v1311);
    v1636 = vaddq_f64(v860, v1312);
    v1637 = vaddq_f64(v851, v1313);
    v1638 = vaddq_f64(v737, v1314);
    v1639 = vaddq_f64(v580, v1315);
    v1640 = vaddq_f64(v577, v1316);
    v1641 = vaddq_f64(v610, v1317);
    v1642 = vaddq_f64(v574, v1318);
    v1643 = vaddq_f64(v571, v1319);
    v1644 = vaddq_f64(v568, v1320);
    v1645 = vaddq_f64(v565, v1321);
    v1646 = vaddq_f64(v562, v1322);
    v1647 = vaddq_f64(v559, v1323);
    v1648 = vaddq_f64(v925, v1324);
    v1649 = vaddq_f64(v918, v1325);
    v1650 = vaddq_f64(v910, v1326);
    v1651 = vaddq_f64(v902, v1327);
    v1652 = vaddq_f64(v894, v1328);
    v1653 = vaddq_f64(v886, v1329);
    v1654 = vaddq_f64(v876, v1330);
    v1655 = vaddq_f64(v863, v1331);
    v1656 = vaddq_f64(v856, v1332);
    v1657 = vaddq_f64(v330, v1333);
    v1658 = vaddq_f64(v310, v1334);
    v1659 = vaddq_f64(v914, v1335);
    v1660 = vaddq_f64(v906, v1336);
    v1661 = vaddq_f64(v898, v1337);
    v1662 = vaddq_f64(v890, v1338);
    v1663 = vaddq_f64(v881, v1339);
    v1664 = vaddq_f64(v311, v1340);
    v1665 = vaddq_f64(v868, v1341);
LABEL_51:
    v23 = v345;
    goto LABEL_52;
  }
  *(_QWORD *)(v25 + 240) = 0x1200000012;
  v242 = *(void **)(v25 + 224);
  if (*(_QWORD *)(v25 + 232) > 0x143uLL)
    goto LABEL_50;
  v341 = v240;
  v342 = v239;
  v343 = v241;
  v243.i64[0] = v743.i64[0];
  v244.i64[0] = v739.i64[0];
  v245.i64[0] = v755.i64[0];
  v246.i64[0] = v764.i64[0];
  v247.i64[0] = v747.i64[0];
  v248.i64[0] = v751.i64[0];
  v249.i64[0] = v768.i64[0];
  v250.i64[0] = *(_QWORD *)&v611.f64[0];
  v251.i64[0] = v760.i64[0];
  v252.i64[0] = v587.i64[0];
  v253.i64[0] = v581.i64[0];
  v254.i64[0] = v584.i64[0];
  v255.i64[0] = v591.i64[0];
  v256.i64[0] = v598.i64[0];
  v257.i64[0] = v594.i64[0];
  v258.i64[0] = v604.i64[0];
  v259.i64[0] = v601.i64[0];
  v260.i64[0] = v776.i64[0];
  v261.i64[0] = v802.i64[0];
  v262.i64[0] = v780.i64[0];
  v263.i64[0] = v797.i64[0];
  v264.i64[0] = v789.i64[0];
  v265.i64[0] = v784.i64[0];
  v266.i64[0] = v772.i64[0];
  v267.i64[0] = v793.i64[0];
  if (v242)
  {
    MEMORY[0x212BC6368](v242, 0x1000C8000313F17);
    v608 = v1479;
    v1059 = v1472;
    v1070 = v1471;
    v1079 = v1470;
    v1084 = v1469;
    v1092 = v1468;
    v705 = v1467;
    v709 = v1466;
    v712 = v1465;
    v715 = v1464;
    v718 = v1463;
    v722 = v1462;
    v725 = v1461;
    v728 = v1460;
    v732 = v1459;
    v844 = v1458;
    v1034 = v1457;
    v1039 = v1456;
    v1044 = v1455;
    v1049 = v1454;
    v1054 = v1453;
    v1065 = v1452;
    v1074 = v1451;
    v1088 = v1450;
    v866 = v1503;
    v343 = vextq_s8(v866, v866, 8uLL).u64[0];
    v871 = v1502;
    v504 = vextq_s8(v871, v871, 8uLL).u64[0];
    v879 = v1501;
    v503 = vextq_s8(v879, v879, 8uLL).u64[0];
    v888 = v1500;
    v502 = vextq_s8(v888, v888, 8uLL).u64[0];
    v896 = v1499;
    v501 = vextq_s8(v896, v896, 8uLL).u64[0];
    v904 = v1498;
    v500 = vextq_s8(v904, v904, 8uLL).u64[0];
    v912 = v1497;
    v499 = vextq_s8(v912, v912, 8uLL).u64[0];
    v920 = v1496;
    v498 = vextq_s8(v920, v920, 8uLL).u64[0];
    v691 = v1444;
    v688 = v1495;
    *(_QWORD *)&v497 = vextq_s8(v688, v688, 8uLL).u64[0];
    v854 = v1494;
    v342 = vextq_s8(v854, v854, 8uLL).u64[0];
    v695 = v1443;
    v861 = v1493;
    v341 = vextq_s8(v861, v861, 8uLL).u64[0];
    v698 = v1442;
    v874 = v1492;
    v496 = vextq_s8(v874, v874, 8uLL).u64[0];
    v884 = v1491;
    v495 = vextq_s8(v884, v884, 8uLL).u64[0];
    v702 = v1441;
    v892 = v1490;
    v494 = vextq_s8(v892, v892, 8uLL).u64[0];
    v637 = (float64x2_t)v1440;
    v900 = v1489;
    v493 = vextq_s8(v900, v900, 8uLL).u64[0];
    v908 = v1488;
    v492 = vextq_s8(v908, v908, 8uLL).u64[0];
    v916 = v1487;
    v491 = vextq_s8(v916, v916, 8uLL).u64[0];
    v1024 = v1438;
    v923 = v1486;
    v489 = vextq_s8(v923, v923, 8uLL).u64[0];
    v557 = v1485;
    v490 = vextq_s8(v557, v557, 8uLL).u64[0];
    v560 = v1484;
    v488 = vextq_s8(v560, v560, 8uLL).u64[0];
    v1029 = v1436;
    v563 = v1483;
    v487 = vextq_s8(v563, v563, 8uLL).u64[0];
    v566 = v1482;
    v486 = vextq_s8(v566, v566, 8uLL).u64[0];
    v569 = v1481;
    v485 = vextq_s8(v569, v569, 8uLL).u64[0];
    v572 = v1480;
    v484 = vextq_s8(v572, v572, 8uLL).u64[0];
    v483 = vextq_s8(v608, v608, 8uLL).u64[0];
    v575 = v1478;
    v482 = vextq_s8(v575, v575, 8uLL).u64[0];
    v578 = v1477;
    v480 = vextq_s8(v578, v578, 8uLL).u64[0];
    v735 = v1476;
    v481 = vextq_s8(v735, v735, 8uLL).u64[0];
    v849 = v1475;
    v479 = vextq_s8(v849, v849, 8uLL).u64[0];
    v858 = v1474;
    v478 = vextq_s8(v858, v858, 8uLL).u64[0];
    v1018 = v1473;
    v477 = vextq_s8(v1018, v1018, 8uLL).u64[0];
    v476 = vextq_s8(v1059, v1059, 8uLL).u64[0];
    v475 = vextq_s8(v1070, v1070, 8uLL).u64[0];
    v474 = vextq_s8(v1079, v1079, 8uLL).u64[0];
    v473 = vextq_s8(v1084, v1084, 8uLL).u64[0];
    v471 = vextq_s8(v1092, v1092, 8uLL).u64[0];
    v472 = vextq_s8(v705, v705, 8uLL).u64[0];
    v470 = vextq_s8(v709, v709, 8uLL).u64[0];
    v469 = vextq_s8(v712, v712, 8uLL).u64[0];
    v468 = vextq_s8(v715, v715, 8uLL).u64[0];
    v467 = vextq_s8(v718, v718, 8uLL).u64[0];
    v466 = vextq_s8(v722, v722, 8uLL).u64[0];
    v465 = vextq_s8(v725, v725, 8uLL).u64[0];
    v464 = vextq_s8(v728, v728, 8uLL).u64[0];
    v462 = vextq_s8(v732, v732, 8uLL).u64[0];
    v463 = vextq_s8(v844, v844, 8uLL).u64[0];
    v461 = vextq_s8(v1034, v1034, 8uLL).u64[0];
    v460 = vextq_s8(v1039, v1039, 8uLL).u64[0];
    v459 = vextq_s8(v1044, v1044, 8uLL).u64[0];
    v458 = vextq_s8(v1049, v1049, 8uLL).u64[0];
    v457 = vextq_s8(v1054, v1054, 8uLL).u64[0];
    v456 = vextq_s8(v1065, v1065, 8uLL).u64[0];
    v455 = vextq_s8(v1074, v1074, 8uLL).u64[0];
    v453 = vextq_s8(v1088, v1088, 8uLL).u64[0];
    v640 = v1449;
    v454 = vextq_s8(v640, v640, 8uLL).u64[0];
    v644 = v1448;
    v452 = vextq_s8(v644, v644, 8uLL).u64[0];
    v647 = v1447;
    v451 = vextq_s8(v647, v647, 8uLL).u64[0];
    v651 = v1446;
    v450 = vextq_s8(v651, v651, 8uLL).u64[0];
    v654 = v1445;
    v449 = vextq_s8(v654, v654, 8uLL).u64[0];
    v448 = vextq_s8(v691, v691, 8uLL).u64[0];
    v447 = vextq_s8(v695, v695, 8uLL).u64[0];
    v446 = vextq_s8(v698, v698, 8uLL).u64[0];
    v444 = vextq_s8(v702, v702, 8uLL).u64[0];
    v445 = vextq_s8((int8x16_t)v637, (int8x16_t)v637, 8uLL).u64[0];
    v970 = v1439;
    v443 = vextq_s8(v970, v970, 8uLL).u64[0];
    v442 = vextq_s8(v1024, v1024, 8uLL).u64[0];
    v986 = v1437;
    v441 = vextq_s8(v986, v986, 8uLL).u64[0];
    v440 = vextq_s8(v1029, v1029, 8uLL).u64[0];
    v243 = v1405;
    v998 = v1435;
    v439 = vextq_s8(v998, v998, 8uLL).u64[0];
    v1002 = v1434;
    v438 = vextq_s8(v1002, v1002, 8uLL).u64[0];
    v1006 = v1433;
    v437 = vextq_s8(v1006, v1006, 8uLL).u64[0];
    v1014 = v1432;
    v435 = vextq_s8(v1014, v1014, 8uLL).u64[0];
    v658 = v1431;
    v436 = vextq_s8(v658, v658, 8uLL).u64[0];
    v523 = v1430;
    v434 = vextq_s8(v523, v523, 8uLL).u64[0];
    v661 = v1429;
    v433 = vextq_s8(v661, v661, 8uLL).u64[0];
    v664 = v1428;
    v432 = vextq_s8(v664, v664, 8uLL).u64[0];
    v668 = v1427;
    v431 = vextq_s8(v668, v668, 8uLL).u64[0];
    v526 = v1426;
    v430 = vextq_s8(v526, v526, 8uLL).u64[0];
    v529 = v1425;
    v429 = vextq_s8(v529, v529, 8uLL).u64[0];
    v532 = v1424;
    v428 = vextq_s8(v532, v532, 8uLL).u64[0];
    v672 = v1423;
    v426 = vextq_s8(v672, v672, 8uLL).u64[0];
    v634 = (float64x2_t)v1422;
    v427 = vextq_s8((int8x16_t)v634, (int8x16_t)v634, 8uLL).u64[0];
    v828 = v1421;
    v425 = vextq_s8(v828, v828, 8uLL).u64[0];
    v244 = v1395;
    v248 = v1393;
    v247 = v1394;
    v961 = v1420;
    v424 = vextq_s8(v961, v961, 8uLL).u64[0];
    v831 = v1419;
    v423 = vextq_s8(v831, v831, 8uLL).u64[0];
    v978 = v1418;
    v422 = vextq_s8(v978, v978, 8uLL).u64[0];
    v250 = v1391;
    v982 = v1417;
    v421 = vextq_s8(v982, v982, 8uLL).u64[0];
    v990 = v1416;
    v420 = vextq_s8(v990, v990, 8uLL).u64[0];
    v994 = v1415;
    v419 = vextq_s8(v994, v994, 8uLL).u64[0];
    v251 = v1389;
    v245 = v1390;
    v1010 = v1414;
    v417 = vextq_s8(v1010, v1010, 8uLL).u64[0];
    v535 = v1413;
    v418 = vextq_s8(v535, v535, 8uLL).u64[0];
    v538 = v1412;
    v416 = vextq_s8(v538, v538, 8uLL).u64[0];
    v249 = v1387;
    v246 = v1388;
    v541 = v1411;
    v415 = vextq_s8(v541, v541, 8uLL).u64[0];
    v544 = v1410;
    v414 = vextq_s8(v544, v544, 8uLL).u64[0];
    v676 = v1409;
    v413 = vextq_s8(v676, v676, 8uLL).u64[0];
    v679 = v1408;
    v412 = vextq_s8(v679, v679, 8uLL).u64[0];
    v682 = v1407;
    v411 = vextq_s8(v682, v682, 8uLL).u64[0];
    v685 = v1406;
    v410 = vextq_s8(v685, v685, 8uLL).u64[0];
    v408 = vextq_s8(v243, v243, 8uLL).u64[0];
    v517 = (float64x2_t)v1404;
    v409 = vextq_s8((int8x16_t)v517, (int8x16_t)v517, 8uLL).u64[0];
    v933 = v1403;
    v407 = vextq_s8(v933, v933, 8uLL).u64[0];
    v822 = v1402;
    v825 = v1401;
    v405 = vextq_s8(v825, v825, 8uLL).u64[0];
    v406 = vextq_s8(v822, v822, 8uLL).u64[0];
    v953 = v1400;
    v957 = v1399;
    v403 = vextq_s8(v957, v957, 8uLL).u64[0];
    v404 = vextq_s8(v953, v953, 8uLL).u64[0];
    v965 = v1398;
    v974 = v1397;
    v401 = vextq_s8(v974, v974, 8uLL).u64[0];
    v402 = vextq_s8(v965, v965, 8uLL).u64[0];
    v253 = v1377;
    v839 = v1396;
    v399 = vextq_s8(v839, v839, 8uLL).u64[0];
    v400 = vextq_s8(v244, v244, 8uLL).u64[0];
    v398 = vextq_s8(v247, v247, 8uLL).u64[0];
    v252 = v1375;
    v254 = v1376;
    v397 = vextq_s8(v248, v248, 8uLL).u64[0];
    v547 = v1392;
    v396 = vextq_s8(v547, v547, 8uLL).u64[0];
    v395 = vextq_s8(v250, v250, 8uLL).u64[0];
    v257 = v1373;
    v255 = v1374;
    v394 = vextq_s8(v245, v245, 8uLL).u64[0];
    v393 = vextq_s8(v251, v251, 8uLL).u64[0];
    v392 = vextq_s8(v246, v246, 8uLL).u64[0];
    v259 = v1371;
    v256 = v1372;
    v390 = vextq_s8(v249, v249, 8uLL).u64[0];
    v519 = (float64x2_t)v1386;
    v391 = vextq_s8((int8x16_t)v519, (int8x16_t)v519, 8uLL).u64[0];
    v630 = (float64x2_t)v1385;
    v389 = vextq_s8((int8x16_t)v630, (int8x16_t)v630, 8uLL).u64[0];
    v260 = v1369;
    v258 = v1370;
    v819 = v1384;
    v388 = vextq_s8(v819, v819, 8uLL).u64[0];
    v928 = v1383;
    v937 = v1382;
    v386 = vextq_s8(v937, v937, 8uLL).u64[0];
    v387 = vextq_s8(v928, v928, 8uLL).u64[0];
    v941 = v1381;
    v945 = v1380;
    v384 = vextq_s8(v945, v945, 8uLL).u64[0];
    v385 = vextq_s8(v941, v941, 8uLL).u64[0];
    v949 = v1379;
    v835 = v1378;
    v382 = vextq_s8(v253, v253, 8uLL).u64[0];
    v383 = vextq_s8(v949, v949, 8uLL).u64[0];
    v380 = vextq_s8(v254, v254, 8uLL).u64[0];
    v381 = vextq_s8(v835, v835, 8uLL).u64[0];
    v378 = vextq_s8(v255, v255, 8uLL).u64[0];
    v379 = vextq_s8(v252, v252, 8uLL).u64[0];
    v376 = vextq_s8(v256, v256, 8uLL).u64[0];
    v377 = vextq_s8(v257, v257, 8uLL).u64[0];
    v374 = vextq_s8(v258, v258, 8uLL).u64[0];
    v375 = vextq_s8(v259, v259, 8uLL).u64[0];
    v511 = (float64x2_t)v1368;
    v372 = vextq_s8(v260, v260, 8uLL).u64[0];
    v373 = vextq_s8((int8x16_t)v511, (int8x16_t)v511, 8uLL).u64[0];
    v513 = (float64x2_t)v1367;
    v371 = vextq_s8((int8x16_t)v513, (int8x16_t)v513, 8uLL).u64[0];
    v266 = v1359;
    v515 = v1366;
    v620 = v1365;
    v369 = vextq_s8(v620, v620, 8uLL).u64[0];
    v370 = vextq_s8(v515, v515, 8uLL).u64[0];
    v811 = v1364;
    v265 = v1357;
    v262 = v1358;
    v267 = v1355;
    v264 = v1356;
    v813 = v1363;
    v367 = vextq_s8(v813, v813, 8uLL).u64[0];
    v368 = vextq_s8(v811, v811, 8uLL).u64[0];
    v816 = v1362;
    v625 = v1361;
    v365 = vextq_s8(v625, v625, 8uLL).u64[0];
    v366 = vextq_s8(v816, v816, 8uLL).u64[0];
    v261 = v1353;
    v263 = v1354;
    v628 = v1360;
    v363 = vextq_s8(v628, v628, 8uLL).u64[0];
    v364 = vextq_s8(v266, v266, 8uLL).u64[0];
    v361 = vextq_s8(v265, v265, 8uLL).u64[0];
    v362 = vextq_s8(v262, v262, 8uLL).u64[0];
    v359 = vextq_s8(v267, v267, 8uLL).u64[0];
    v360 = vextq_s8(v264, v264, 8uLL).u64[0];
    v358 = vextq_s8(v263, v263, 8uLL).u64[0];
    v550 = v1352;
    v356 = vextq_s8(v550, v550, 8uLL).u64[0];
    v357 = vextq_s8(v261, v261, 8uLL).u64[0];
    v553 = v1351;
    v505 = v1350;
    v354 = vextq_s8(v553, v553, 8uLL).u64[0];
    v355 = vextq_s8(v505, v505, 8uLL).u64[0];
    v507 = (float64x2_t)v1349;
    v353 = vextq_s8((int8x16_t)v507, (int8x16_t)v507, 8uLL).u64[0];
    v509 = (float64x2_t)v1348;
    v615 = v1347;
    v351 = vextq_s8(v615, v615, 8uLL).u64[0];
    v352 = vextq_s8((int8x16_t)v509, (int8x16_t)v509, 8uLL).u64[0];
    v618 = v1346;
    v807 = v1345;
    v349 = vextq_s8(v807, v807, 8uLL).u64[0];
    v350 = vextq_s8(v618, v618, 8uLL).u64[0];
    v809 = v1344;
    v623 = v1343;
    v347 = vextq_s8(v623, v623, 8uLL).u64[0];
    v348 = vextq_s8(v809, v809, 8uLL).u64[0];
    v627 = v1342;
    v346 = vextq_s8(v627, v627, 8uLL).u64[0];
  }
  v740 = v244.i64[0];
  v744 = v243.i64[0];
  v748 = v247.i64[0];
  v752 = v248.i64[0];
  v612 = v250.i64[0];
  v756 = v245.i64[0];
  v761 = v251.i64[0];
  v765 = v246.i64[0];
  v582 = v253.i64[0];
  v769 = v249.i64[0];
  v585 = v254.i64[0];
  v588 = v252.i64[0];
  v592 = v255.i64[0];
  v595 = v257.i64[0];
  v599 = v256.i64[0];
  v602 = v259.i64[0];
  v605 = v258.i64[0];
  v773 = v266.i64[0];
  v777 = v260.i64[0];
  v781 = v262.i64[0];
  v785 = v265.i64[0];
  v790 = v264.i64[0];
  v794 = v267.i64[0];
  v798 = v263.i64[0];
  v803 = v261.i64[0];
  *(_QWORD *)(v25 + 224) = 0;
  *(_QWORD *)(v25 + 232) = 324;
  v242 = operator new(0xA20uLL, (std::align_val_t)0x20uLL);
  *(_QWORD *)&v268.f64[0] = v866.i64[0];
  *(_QWORD *)&v268.f64[1] = v343;
  *(_QWORD *)&v269.f64[0] = v871.i64[0];
  *(_QWORD *)&v269.f64[1] = v504;
  *(_QWORD *)&v270.f64[0] = v879.i64[0];
  *(_QWORD *)&v270.f64[1] = v503;
  *(_QWORD *)&v271.f64[0] = v888.i64[0];
  *(_QWORD *)&v271.f64[1] = v502;
  *(_QWORD *)&v272.f64[0] = v896.i64[0];
  *(_QWORD *)&v272.f64[1] = v501;
  *(_QWORD *)&v273.f64[0] = v904.i64[0];
  *(_QWORD *)&v273.f64[1] = v500;
  *(_QWORD *)&v274.f64[0] = v912.i64[0];
  *(_QWORD *)&v274.f64[1] = v499;
  *(_QWORD *)&v275.f64[0] = v920.i64[0];
  *(_QWORD *)&v275.f64[1] = v498;
  *(_QWORD *)&v276.f64[0] = v688.i64[0];
  v276.f64[1] = v497;
  *(_QWORD *)&v277.f64[0] = v854.i64[0];
  *(_QWORD *)&v277.f64[1] = v342;
  *(_QWORD *)&v278.f64[0] = v861.i64[0];
  *(_QWORD *)&v278.f64[1] = v341;
  *(_QWORD *)&v279.f64[0] = v874.i64[0];
  *(_QWORD *)&v279.f64[1] = v496;
  *(_QWORD *)&v280.f64[0] = v884.i64[0];
  *(_QWORD *)&v280.f64[1] = v495;
  *(_QWORD *)&v281.f64[0] = v892.i64[0];
  *(_QWORD *)&v281.f64[1] = v494;
  *(_QWORD *)&v282.f64[0] = v900.i64[0];
  *(_QWORD *)&v282.f64[1] = v493;
  *(_QWORD *)&v283.f64[0] = v908.i64[0];
  *(_QWORD *)&v283.f64[1] = v492;
  *(_QWORD *)&v284.f64[0] = v916.i64[0];
  *(_QWORD *)&v284.f64[1] = v491;
  *(_QWORD *)&v285.f64[0] = v923.i64[0];
  *(_QWORD *)&v285.f64[1] = v489;
  *(_QWORD *)&v286.f64[0] = v557.i64[0];
  *(_QWORD *)&v286.f64[1] = v490;
  *(_QWORD *)&v287.f64[0] = v560.i64[0];
  *(_QWORD *)&v287.f64[1] = v488;
  *(_QWORD *)&v288.f64[0] = v563.i64[0];
  *(_QWORD *)&v288.f64[1] = v487;
  *(_QWORD *)&v289.f64[0] = v566.i64[0];
  *(_QWORD *)&v289.f64[1] = v486;
  *(_QWORD *)&v290.f64[0] = v569.i64[0];
  *(_QWORD *)&v290.f64[1] = v485;
  *(_QWORD *)&v291.f64[0] = v572.i64[0];
  *(_QWORD *)&v291.f64[1] = v484;
  *(_QWORD *)&v292.f64[0] = v608.i64[0];
  *(_QWORD *)&v292.f64[1] = v483;
  *(_QWORD *)&v293.f64[0] = v575.i64[0];
  *(_QWORD *)&v293.f64[1] = v482;
  *(_QWORD *)&v294.f64[0] = v578.i64[0];
  *(_QWORD *)&v294.f64[1] = v480;
  *(_QWORD *)&v295.f64[0] = v735.i64[0];
  *(_QWORD *)&v295.f64[1] = v481;
  *(_QWORD *)&v296.f64[0] = v849.i64[0];
  *(_QWORD *)&v296.f64[1] = v479;
  *(_QWORD *)&v297.f64[0] = v858.i64[0];
  *(_QWORD *)&v297.f64[1] = v478;
  *(_QWORD *)&v298.f64[0] = v1018.i64[0];
  *(_QWORD *)&v298.f64[1] = v477;
  v1019 = v298;
  *(_QWORD *)&v298.f64[0] = v1059.i64[0];
  *(_QWORD *)&v298.f64[1] = v476;
  v1060 = v298;
  *(_QWORD *)&v298.f64[0] = v1070.i64[0];
  *(_QWORD *)&v298.f64[1] = v475;
  v1071 = v298;
  *(_QWORD *)&v298.f64[0] = v1079.i64[0];
  *(_QWORD *)&v298.f64[1] = v474;
  v1080 = v298;
  *(_QWORD *)&v298.f64[0] = v1084.i64[0];
  *(_QWORD *)&v298.f64[1] = v473;
  v1085 = v298;
  *(_QWORD *)&v298.f64[0] = v1092.i64[0];
  *(_QWORD *)&v298.f64[1] = v471;
  v1093 = v298;
  *(_QWORD *)&v298.f64[0] = v705.i64[0];
  *(_QWORD *)&v298.f64[1] = v472;
  v706 = v298;
  *(_QWORD *)&v298.f64[0] = v709.i64[0];
  *(_QWORD *)&v298.f64[1] = v470;
  v710 = v298;
  *(_QWORD *)&v298.f64[0] = v712.i64[0];
  *(_QWORD *)&v298.f64[1] = v469;
  v713 = v298;
  *(_QWORD *)&v298.f64[0] = v715.i64[0];
  *(_QWORD *)&v298.f64[1] = v468;
  v716 = v298;
  *(_QWORD *)&v298.f64[0] = v718.i64[0];
  *(_QWORD *)&v298.f64[1] = v467;
  v719 = v298;
  *(_QWORD *)&v298.f64[0] = v722.i64[0];
  *(_QWORD *)&v298.f64[1] = v466;
  v723 = v298;
  *(_QWORD *)&v298.f64[0] = v725.i64[0];
  *(_QWORD *)&v298.f64[1] = v465;
  v726 = v298;
  *(_QWORD *)&v298.f64[0] = v728.i64[0];
  *(_QWORD *)&v298.f64[1] = v464;
  v729 = v298;
  *(_QWORD *)&v298.f64[0] = v732.i64[0];
  *(_QWORD *)&v298.f64[1] = v462;
  v733 = v298;
  *(_QWORD *)&v298.f64[0] = v844.i64[0];
  *(_QWORD *)&v298.f64[1] = v463;
  v845 = v298;
  *(_QWORD *)&v298.f64[0] = v1034.i64[0];
  *(_QWORD *)&v298.f64[1] = v461;
  v1035 = v298;
  *(_QWORD *)&v298.f64[0] = v1039.i64[0];
  *(_QWORD *)&v298.f64[1] = v460;
  v1040 = v298;
  *(_QWORD *)&v298.f64[0] = v1044.i64[0];
  *(_QWORD *)&v298.f64[1] = v459;
  v1045 = v298;
  *(_QWORD *)&v298.f64[0] = v1049.i64[0];
  *(_QWORD *)&v298.f64[1] = v458;
  v1050 = v298;
  *(_QWORD *)&v298.f64[0] = v1054.i64[0];
  *(_QWORD *)&v298.f64[1] = v457;
  v1055 = v298;
  *(_QWORD *)&v298.f64[0] = v1065.i64[0];
  *(_QWORD *)&v298.f64[1] = v456;
  v1066 = v298;
  *(_QWORD *)&v298.f64[0] = v1074.i64[0];
  *(_QWORD *)&v298.f64[1] = v455;
  v1075 = v298;
  *(_QWORD *)&v298.f64[0] = v1088.i64[0];
  *(_QWORD *)&v298.f64[1] = v453;
  v1089 = v298;
  *(_QWORD *)&v298.f64[0] = v640.i64[0];
  *(_QWORD *)&v298.f64[1] = v454;
  v641 = v298;
  *(_QWORD *)&v298.f64[0] = v644.i64[0];
  *(_QWORD *)&v298.f64[1] = v452;
  v645 = v298;
  *(_QWORD *)&v298.f64[0] = v647.i64[0];
  *(_QWORD *)&v298.f64[1] = v451;
  v648 = v298;
  *(_QWORD *)&v298.f64[0] = v651.i64[0];
  *(_QWORD *)&v298.f64[1] = v450;
  v652 = v298;
  *(_QWORD *)&v298.f64[0] = v654.i64[0];
  *(_QWORD *)&v298.f64[1] = v449;
  v655 = v298;
  *(_QWORD *)&v298.f64[0] = v691.i64[0];
  *(_QWORD *)&v298.f64[1] = v448;
  v692 = v298;
  *(_QWORD *)&v298.f64[0] = v695.i64[0];
  *(_QWORD *)&v298.f64[1] = v447;
  v696 = v298;
  *(_QWORD *)&v298.f64[0] = v698.i64[0];
  *(_QWORD *)&v298.f64[1] = v446;
  v699 = v298;
  *(_QWORD *)&v298.f64[0] = v702.i64[0];
  *(_QWORD *)&v298.f64[1] = v444;
  v703 = v298;
  v298.f64[0] = v637.f64[0];
  *(_QWORD *)&v298.f64[1] = v445;
  v638 = v298;
  *(_QWORD *)&v298.f64[0] = v970.i64[0];
  *(_QWORD *)&v298.f64[1] = v443;
  v971 = v298;
  *(_QWORD *)&v298.f64[0] = v1024.i64[0];
  *(_QWORD *)&v298.f64[1] = v442;
  v1025 = v298;
  *(_QWORD *)&v298.f64[0] = v986.i64[0];
  *(_QWORD *)&v298.f64[1] = v441;
  v987 = v298;
  *(_QWORD *)&v298.f64[0] = v1029.i64[0];
  *(_QWORD *)&v298.f64[1] = v440;
  v1030 = v298;
  *(_QWORD *)&v298.f64[0] = v998.i64[0];
  *(_QWORD *)&v298.f64[1] = v439;
  v999 = v298;
  *(_QWORD *)&v298.f64[0] = v1002.i64[0];
  *(_QWORD *)&v298.f64[1] = v438;
  v1003 = v298;
  *(_QWORD *)&v298.f64[0] = v1006.i64[0];
  *(_QWORD *)&v298.f64[1] = v437;
  v1007 = v298;
  *(_QWORD *)&v298.f64[0] = v1014.i64[0];
  *(_QWORD *)&v298.f64[1] = v435;
  v1015 = v298;
  *(_QWORD *)&v298.f64[0] = v658.i64[0];
  *(_QWORD *)&v298.f64[1] = v436;
  v659 = v298;
  *(_QWORD *)&v298.f64[0] = v523.i64[0];
  *(_QWORD *)&v298.f64[1] = v434;
  v524 = v298;
  *(_QWORD *)&v298.f64[0] = v661.i64[0];
  *(_QWORD *)&v298.f64[1] = v433;
  v662 = v298;
  *(_QWORD *)&v298.f64[0] = v664.i64[0];
  *(_QWORD *)&v298.f64[1] = v432;
  v665 = v298;
  *(_QWORD *)&v298.f64[0] = v668.i64[0];
  *(_QWORD *)&v298.f64[1] = v431;
  v669 = v298;
  *(_QWORD *)&v298.f64[0] = v526.i64[0];
  *(_QWORD *)&v298.f64[1] = v430;
  v527 = v298;
  *(_QWORD *)&v298.f64[0] = v529.i64[0];
  *(_QWORD *)&v298.f64[1] = v429;
  v530 = v298;
  *(_QWORD *)&v298.f64[0] = v532.i64[0];
  *(_QWORD *)&v298.f64[1] = v428;
  v533 = v298;
  *(_QWORD *)&v298.f64[0] = v672.i64[0];
  *(_QWORD *)&v298.f64[1] = v426;
  v673 = v298;
  v298.f64[0] = v634.f64[0];
  *(_QWORD *)&v298.f64[1] = v427;
  v635 = v298;
  *(_QWORD *)&v298.f64[0] = v828.i64[0];
  *(_QWORD *)&v298.f64[1] = v425;
  v829 = v298;
  *(_QWORD *)&v298.f64[0] = v961.i64[0];
  *(_QWORD *)&v298.f64[1] = v424;
  v962 = v298;
  *(_QWORD *)&v298.f64[0] = v831.i64[0];
  *(_QWORD *)&v298.f64[1] = v423;
  v832 = v298;
  *(_QWORD *)&v298.f64[0] = v978.i64[0];
  *(_QWORD *)&v298.f64[1] = v422;
  v979 = v298;
  *(_QWORD *)&v298.f64[0] = v982.i64[0];
  *(_QWORD *)&v298.f64[1] = v421;
  v983 = v298;
  *(_QWORD *)&v298.f64[0] = v990.i64[0];
  *(_QWORD *)&v298.f64[1] = v420;
  v991 = v298;
  *(_QWORD *)&v298.f64[0] = v994.i64[0];
  *(_QWORD *)&v298.f64[1] = v419;
  v995 = v298;
  *(_QWORD *)&v298.f64[0] = v1010.i64[0];
  *(_QWORD *)&v298.f64[1] = v417;
  v1011 = v298;
  *(_QWORD *)&v298.f64[0] = v535.i64[0];
  *(_QWORD *)&v298.f64[1] = v418;
  v536 = v298;
  *(_QWORD *)&v298.f64[0] = v538.i64[0];
  *(_QWORD *)&v298.f64[1] = v416;
  v539 = v298;
  *(_QWORD *)&v298.f64[0] = v541.i64[0];
  *(_QWORD *)&v298.f64[1] = v415;
  v542 = v298;
  *(_QWORD *)&v298.f64[0] = v544.i64[0];
  *(_QWORD *)&v298.f64[1] = v414;
  v545 = v298;
  *(_QWORD *)&v298.f64[0] = v676.i64[0];
  *(_QWORD *)&v298.f64[1] = v413;
  v677 = v298;
  *(_QWORD *)&v298.f64[0] = v679.i64[0];
  *(_QWORD *)&v298.f64[1] = v412;
  v680 = v298;
  *(_QWORD *)&v298.f64[0] = v682.i64[0];
  *(_QWORD *)&v298.f64[1] = v411;
  v683 = v298;
  *(_QWORD *)&v298.f64[0] = v685.i64[0];
  *(_QWORD *)&v298.f64[1] = v410;
  v686 = v298;
  *(_QWORD *)&v298.f64[0] = v744;
  *(_QWORD *)&v298.f64[1] = v408;
  v745 = v298;
  v298.f64[0] = v517.f64[0];
  *(_QWORD *)&v298.f64[1] = v409;
  v518 = v298;
  *(_QWORD *)&v298.f64[0] = v933.i64[0];
  *(_QWORD *)&v298.f64[1] = v407;
  v934 = v298;
  *(_QWORD *)&v298.f64[0] = v822.i64[0];
  *(_QWORD *)&v298.f64[1] = v406;
  v823 = v298;
  *(_QWORD *)&v298.f64[0] = v825.i64[0];
  *(_QWORD *)&v298.f64[1] = v405;
  v826 = v298;
  *(_QWORD *)&v298.f64[0] = v953.i64[0];
  *(_QWORD *)&v298.f64[1] = v404;
  v954 = v298;
  *(_QWORD *)&v298.f64[0] = v957.i64[0];
  *(_QWORD *)&v298.f64[1] = v403;
  v958 = v298;
  *(_QWORD *)&v298.f64[0] = v965.i64[0];
  *(_QWORD *)&v298.f64[1] = v402;
  v966 = v298;
  *(_QWORD *)&v298.f64[0] = v974.i64[0];
  *(_QWORD *)&v298.f64[1] = v401;
  v975 = v298;
  *(_QWORD *)&v298.f64[0] = v839.i64[0];
  *(_QWORD *)&v298.f64[1] = v399;
  v840 = v298;
  *(_QWORD *)&v298.f64[0] = v740;
  *(_QWORD *)&v298.f64[1] = v400;
  v741 = v298;
  *(_QWORD *)&v298.f64[0] = v748;
  *(_QWORD *)&v298.f64[1] = v398;
  v749 = v298;
  *(_QWORD *)&v298.f64[0] = v752;
  *(_QWORD *)&v298.f64[1] = v397;
  v753 = v298;
  *(_QWORD *)&v298.f64[0] = v547.i64[0];
  *(_QWORD *)&v298.f64[1] = v396;
  v548 = v298;
  *(_QWORD *)&v298.f64[0] = v612;
  *(_QWORD *)&v298.f64[1] = v395;
  v613 = v298;
  *(_QWORD *)&v298.f64[0] = v756;
  *(_QWORD *)&v298.f64[1] = v394;
  v757 = v298;
  *(_QWORD *)&v298.f64[0] = v761;
  *(_QWORD *)&v298.f64[1] = v393;
  v762 = v298;
  *(_QWORD *)&v298.f64[0] = v765;
  *(_QWORD *)&v298.f64[1] = v392;
  v766 = v298;
  *(_QWORD *)&v298.f64[0] = v769;
  *(_QWORD *)&v298.f64[1] = v390;
  v770 = v298;
  v298.f64[0] = v519.f64[0];
  *(_QWORD *)&v298.f64[1] = v391;
  v520 = v298;
  v298.f64[0] = v630.f64[0];
  *(_QWORD *)&v298.f64[1] = v389;
  v631 = v298;
  *(_QWORD *)&v298.f64[0] = v819.i64[0];
  *(_QWORD *)&v298.f64[1] = v388;
  v820 = v298;
  *(_QWORD *)&v298.f64[0] = v928.i64[0];
  *(_QWORD *)&v298.f64[1] = v387;
  v929 = v298;
  *(_QWORD *)&v298.f64[0] = v937.i64[0];
  *(_QWORD *)&v298.f64[1] = v386;
  v938 = v298;
  *(_QWORD *)&v298.f64[0] = v941.i64[0];
  *(_QWORD *)&v298.f64[1] = v385;
  v942 = v298;
  *(_QWORD *)&v298.f64[0] = v945.i64[0];
  *(_QWORD *)&v298.f64[1] = v384;
  v946 = v298;
  *(_QWORD *)&v298.f64[0] = v949.i64[0];
  *(_QWORD *)&v298.f64[1] = v383;
  v950 = v298;
  *(_QWORD *)&v298.f64[0] = v835.i64[0];
  *(_QWORD *)&v298.f64[1] = v381;
  v836 = v298;
  *(_QWORD *)&v298.f64[0] = v582;
  *(_QWORD *)&v298.f64[1] = v382;
  v583 = v298;
  *(_QWORD *)&v298.f64[0] = v585;
  *(_QWORD *)&v298.f64[1] = v380;
  v586 = v298;
  *(_QWORD *)&v298.f64[0] = v588;
  *(_QWORD *)&v298.f64[1] = v379;
  v589 = v298;
  *(_QWORD *)&v298.f64[0] = v592;
  *(_QWORD *)&v298.f64[1] = v378;
  v593 = v298;
  *(_QWORD *)&v298.f64[0] = v595;
  *(_QWORD *)&v298.f64[1] = v377;
  v596 = v298;
  *(_QWORD *)&v298.f64[0] = v599;
  *(_QWORD *)&v298.f64[1] = v376;
  v600 = v298;
  *(_QWORD *)&v298.f64[0] = v602;
  *(_QWORD *)&v298.f64[1] = v375;
  v603 = v298;
  *(_QWORD *)&v298.f64[0] = v605;
  *(_QWORD *)&v298.f64[1] = v374;
  v606 = v298;
  *(_QWORD *)&v298.f64[0] = v777;
  *(_QWORD *)&v298.f64[1] = v372;
  v778 = v298;
  v298.f64[0] = v511.f64[0];
  *(_QWORD *)&v298.f64[1] = v373;
  v512 = v298;
  v298.f64[0] = v513.f64[0];
  *(_QWORD *)&v298.f64[1] = v371;
  v514 = v298;
  *(_QWORD *)&v298.f64[0] = v515.i64[0];
  *(_QWORD *)&v298.f64[1] = v370;
  v516 = v298;
  *(_QWORD *)&v298.f64[0] = v620.i64[0];
  *(_QWORD *)&v298.f64[1] = v369;
  v621 = v298;
  *(_QWORD *)&v298.f64[0] = v811.i64[0];
  *(_QWORD *)&v298.f64[1] = v368;
  v812 = v298;
  *(_QWORD *)&v298.f64[0] = v813.i64[0];
  *(_QWORD *)&v298.f64[1] = v367;
  v814 = v298;
  *(_QWORD *)&v298.f64[0] = v816.i64[0];
  *(_QWORD *)&v298.f64[1] = v366;
  v817 = v298;
  *(_QWORD *)&v298.f64[0] = v625.i64[0];
  *(_QWORD *)&v298.f64[1] = v365;
  v626 = v298;
  *(_QWORD *)&v298.f64[0] = v628.i64[0];
  *(_QWORD *)&v298.f64[1] = v363;
  v629 = v298;
  *(_QWORD *)&v298.f64[0] = v773;
  *(_QWORD *)&v298.f64[1] = v364;
  v774 = v298;
  *(_QWORD *)&v298.f64[0] = v781;
  *(_QWORD *)&v298.f64[1] = v362;
  v782 = v298;
  *(_QWORD *)&v298.f64[0] = v785;
  *(_QWORD *)&v298.f64[1] = v361;
  v786 = v298;
  *(_QWORD *)&v298.f64[0] = v790;
  *(_QWORD *)&v298.f64[1] = v360;
  v791 = v298;
  *(_QWORD *)&v298.f64[0] = v794;
  *(_QWORD *)&v298.f64[1] = v359;
  v795 = v298;
  *(_QWORD *)&v298.f64[0] = v798;
  *(_QWORD *)&v298.f64[1] = v358;
  v799 = v298;
  *(_QWORD *)&v298.f64[0] = v803;
  *(_QWORD *)&v298.f64[1] = v357;
  v804 = v298;
  *(_QWORD *)&v298.f64[0] = v550.i64[0];
  *(_QWORD *)&v298.f64[1] = v356;
  v551 = v298;
  *(_QWORD *)&v298.f64[0] = v553.i64[0];
  *(_QWORD *)&v298.f64[1] = v354;
  v554 = v298;
  *(_QWORD *)&v298.f64[0] = v505.i64[0];
  *(_QWORD *)&v298.f64[1] = v355;
  v506 = v298;
  v298.f64[0] = v507.f64[0];
  *(_QWORD *)&v298.f64[1] = v353;
  v508 = v298;
  v298.f64[0] = v509.f64[0];
  *(_QWORD *)&v298.f64[1] = v352;
  v510 = v298;
  *(_QWORD *)&v298.f64[0] = v615.i64[0];
  *(_QWORD *)&v298.f64[1] = v351;
  v616 = v298;
  *(_QWORD *)&v298.f64[0] = v618.i64[0];
  *(_QWORD *)&v298.f64[1] = v350;
  v619 = v298;
  *(_QWORD *)&v298.f64[0] = v807.i64[0];
  *(_QWORD *)&v298.f64[1] = v349;
  v808 = v298;
  *(_QWORD *)&v298.f64[0] = v809.i64[0];
  *(_QWORD *)&v298.f64[1] = v348;
  v810 = v298;
  *(_QWORD *)&v298.f64[0] = v623.i64[0];
  *(_QWORD *)&v298.f64[1] = v347;
  v624 = v298;
  *(_QWORD *)&v298.f64[0] = v627.i64[0];
  *(_QWORD *)&v298.f64[1] = v346;
  v924 = vaddq_f64(v268, v1341);
  v921 = vaddq_f64(v269, v1340);
  v917 = vaddq_f64(v270, v1339);
  v913 = vaddq_f64(v271, v1338);
  v909 = vaddq_f64(v272, v1337);
  v905 = vaddq_f64(v273, v1336);
  v901 = vaddq_f64(v274, v1335);
  v897 = vaddq_f64(v275, v1334);
  v893 = vaddq_f64(v276, v1333);
  v889 = vaddq_f64(v277, v1332);
  v885 = vaddq_f64(v278, v1331);
  v880 = vaddq_f64(v279, v1330);
  v875 = vaddq_f64(v280, v1329);
  v872 = vaddq_f64(v281, v1328);
  v867 = vaddq_f64(v282, v1327);
  v862 = vaddq_f64(v283, v1326);
  v859 = vaddq_f64(v284, v1325);
  v855 = vaddq_f64(v285, v1324);
  v850 = vaddq_f64(v286, v1323);
  v736 = vaddq_f64(v287, v1322);
  v689 = vaddq_f64(v288, v1321);
  v609 = vaddq_f64(v289, v1320);
  v579 = vaddq_f64(v290, v1319);
  v576 = vaddq_f64(v291, v1318);
  v573 = vaddq_f64(v292, v1317);
  v570 = vaddq_f64(v293, v1316);
  v567 = vaddq_f64(v294, v1315);
  v564 = vaddq_f64(v295, v1314);
  v561 = vaddq_f64(v296, v1313);
  v558 = vaddq_f64(v297, v1312);
  v1020 = vaddq_f64(v1019, v1311);
  v1061 = vaddq_f64(v1060, v1310);
  v1504 = vaddq_f64(v298, *(float64x2_t *)&v1188[8]);
  v1505 = vaddq_f64(v624, *(float64x2_t *)&v1188[24]);
  v1506 = vaddq_f64(v810, *(float64x2_t *)&v1188[40]);
  v1507 = vaddq_f64(v808, *(float64x2_t *)&v1188[56]);
  v1508 = vaddq_f64(v619, *(float64x2_t *)&v1188[72]);
  v1509 = vaddq_f64(v616, *(float64x2_t *)&v1188[88]);
  v1510 = vaddq_f64(v510, *(float64x2_t *)&v1188[104]);
  v1511 = vaddq_f64(v508, *(float64x2_t *)&v1188[120]);
  v1512 = vaddq_f64(v506, *(float64x2_t *)&v1188[136]);
  v1513 = vaddq_f64(v554, v1189);
  v1514 = vaddq_f64(v551, v1190);
  v1515 = vaddq_f64(v804, v1191);
  v1516 = vaddq_f64(v799, v1192);
  v1517 = vaddq_f64(v795, v1193);
  v1518 = vaddq_f64(v791, v1194);
  v1519 = vaddq_f64(v786, v1195);
  v1520 = vaddq_f64(v782, v1196);
  v1521 = vaddq_f64(v774, v1197);
  v1522 = vaddq_f64(v629, v1198);
  v1523 = vaddq_f64(v626, v1199);
  v1524 = vaddq_f64(v817, v1200);
  v1525 = vaddq_f64(v814, v1201);
  v1526 = vaddq_f64(v812, v1202);
  v1527 = vaddq_f64(v621, v1203);
  v1528 = vaddq_f64(v516, v1204);
  v1529 = vaddq_f64(v514, v1205);
  v1530 = vaddq_f64(v512, v1206);
  v1531 = vaddq_f64(v778, v1207);
  v1532 = vaddq_f64(v606, v1208);
  v1533 = vaddq_f64(v603, v1209);
  v1534 = vaddq_f64(v600, v1210);
  v1535 = vaddq_f64(v596, v1211);
  v1536 = vaddq_f64(v593, v1212);
  v1537 = vaddq_f64(v589, v1213);
  v1538 = vaddq_f64(v586, v1214);
  v1539 = vaddq_f64(v583, v1215);
  v1540 = vaddq_f64(v836, v1216);
  v1541 = vaddq_f64(v950, v1217);
  v1542 = vaddq_f64(v946, v1218);
  v1543 = vaddq_f64(v942, v1219);
  v1544 = vaddq_f64(v938, v1220);
  v1545 = vaddq_f64(v929, v1221);
  v1546 = vaddq_f64(v820, v1222);
  v1547 = vaddq_f64(v631, v1223);
  v1548 = vaddq_f64(v520, v1224);
  v1549 = vaddq_f64(v770, v1225);
  v1550 = vaddq_f64(v766, v1226);
  v1551 = vaddq_f64(v762, v1227);
  v1552 = vaddq_f64(v757, v1228);
  v1553 = vaddq_f64(v613, v1229);
  v1554 = vaddq_f64(v548, v1230);
  v1555 = vaddq_f64(v753, v1231);
  v1556 = vaddq_f64(v749, v1232);
  v1557 = vaddq_f64(v741, v1233);
  v1558 = vaddq_f64(v840, v1234);
  v1559 = vaddq_f64(v975, v1235);
  v1560 = vaddq_f64(v966, v1236);
  v1561 = vaddq_f64(v958, v1237);
  v1562 = vaddq_f64(v954, v1238);
  v1563 = vaddq_f64(v826, v1239);
  v1564 = vaddq_f64(v823, v1240);
  v1565 = vaddq_f64(v934, v1241);
  v1566 = vaddq_f64(v518, v1242);
  v1567 = vaddq_f64(v745, v1243);
  v1568 = vaddq_f64(v686, v1244);
  v1569 = vaddq_f64(v683, v1245);
  v1570 = vaddq_f64(v680, v1246);
  v1571 = vaddq_f64(v677, v1247);
  v1572 = vaddq_f64(v545, v1248);
  v1573 = vaddq_f64(v542, v1249);
  v1574 = vaddq_f64(v539, v1250);
  v1575 = vaddq_f64(v536, v1251);
  v1576 = vaddq_f64(v1011, v1252);
  v1577 = vaddq_f64(v995, v1253);
  v1578 = vaddq_f64(v991, v1254);
  v1579 = vaddq_f64(v983, v1255);
  v1580 = vaddq_f64(v979, v1256);
  v1581 = vaddq_f64(v832, v1257);
  v1582 = vaddq_f64(v962, v1258);
  v1583 = vaddq_f64(v829, v1259);
  v1584 = vaddq_f64(v635, v1260);
  v1585 = vaddq_f64(v673, v1261);
  v1586 = vaddq_f64(v533, v1262);
  v1587 = vaddq_f64(v530, v1263);
  v1588 = vaddq_f64(v527, v1264);
  v1589 = vaddq_f64(v669, v1265);
  v1590 = vaddq_f64(v665, v1266);
  v1591 = vaddq_f64(v662, v1267);
  v1592 = vaddq_f64(v524, v1268);
  v1593 = vaddq_f64(v659, v1269);
  v1594 = vaddq_f64(v1015, v1270);
  v1595 = vaddq_f64(v1007, v1271);
  v1596 = vaddq_f64(v1003, v1272);
  v1597 = vaddq_f64(v999, v1273);
  v1598 = vaddq_f64(v1030, v1274);
  v1599 = vaddq_f64(v987, v1275);
  v1600 = vaddq_f64(v1025, v1276);
  v1601 = vaddq_f64(v971, v1277);
  v1602 = vaddq_f64(v638, v1278);
  v1603 = vaddq_f64(v703, v1279);
  v1604 = vaddq_f64(v699, v1280);
  v1605 = vaddq_f64(v696, v1281);
  v1606 = vaddq_f64(v692, v1282);
  v1607 = vaddq_f64(v655, v1283);
  v1608 = vaddq_f64(v652, v1284);
  v1609 = vaddq_f64(v648, v1285);
  v1610 = vaddq_f64(v645, v1286);
  v1611 = vaddq_f64(v641, v1287);
  v1612 = vaddq_f64(v1089, v1288);
  v1613 = vaddq_f64(v1075, v1289);
  v1614 = vaddq_f64(v1066, v1290);
  v1615 = vaddq_f64(v1055, v1291);
  v1616 = vaddq_f64(v1050, v1292);
  v1617 = vaddq_f64(v1045, v1293);
  v1618 = vaddq_f64(v1040, v1294);
  v1619 = vaddq_f64(v1035, v1295);
  v1620 = vaddq_f64(v845, v1296);
  v1621 = vaddq_f64(v733, v1297);
  v1622 = vaddq_f64(v729, v1298);
  v1623 = vaddq_f64(v726, v1299);
  v1624 = vaddq_f64(v723, v1300);
  v1625 = vaddq_f64(v719, v1301);
  v1626 = vaddq_f64(v716, v1302);
  v1627 = vaddq_f64(v713, v1303);
  v1628 = vaddq_f64(v710, v1304);
  v1629 = vaddq_f64(v706, v1305);
  v1630 = vaddq_f64(v1093, v1306);
  v1631 = vaddq_f64(v1085, v1307);
  v1632 = vaddq_f64(v1080, v1308);
  v1633 = vaddq_f64(v1071, v1309);
  *(_QWORD *)(v25 + 224) = v242;
  v300 = *(_DWORD *)(v25 + 240);
  v299 = *(_DWORD *)(v25 + 244);
  v1634 = v1061;
  v1635 = v1020;
  v1636 = v558;
  v1637 = v561;
  v1638 = v564;
  v1639 = v567;
  v1640 = v570;
  v1641 = v573;
  v1642 = v576;
  v1643 = v579;
  v1644 = v609;
  v1645 = v689;
  v1646 = v736;
  v1647 = v850;
  v1648 = v855;
  v1649 = v859;
  v1650 = v862;
  v1651 = v867;
  v1652 = v872;
  v1653 = v875;
  v1654 = v880;
  v1655 = v885;
  v1656 = v889;
  v1657 = v893;
  v1658 = v897;
  v1659 = v901;
  v1660 = v905;
  v1661 = v909;
  v1662 = v913;
  v1663 = v917;
  v1664 = v921;
  v1665 = v924;
  if (v300 == 18 && v299 == 18)
    goto LABEL_51;
  *(_QWORD *)(v25 + 240) = 0x1200000012;
  if (*(_QWORD *)(v25 + 232) > 0x143uLL)
    goto LABEL_51;
  MEMORY[0x212BC6368]();
  *(_QWORD *)(v25 + 224) = 0;
  *(_QWORD *)(v25 + 232) = 324;
  v242 = operator new(0xA20uLL, (std::align_val_t)0x20uLL);
  v23 = v345;
  *(_QWORD *)(v25 + 224) = v242;
LABEL_52:
  sub_20F209E94((uint64_t)v242, (uint64_t)&v1504);
  sub_20F20B6B0((uint64_t)v556);
  *(_QWORD *)&v1504.f64[1] = 20;
  *(_QWORD *)&v1504.f64[0] = operator new(0xA0uLL, (std::align_val_t)0x20uLL);
  LODWORD(v1505.f64[0]) = 18;
  v331 = v522[1].f64[0];
  v332 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1116, v522->f64[0]), v1115, *v522, 1), v1112, v331);
  v333 = vmlaq_laneq_f64(vmulq_n_f64(v1096, v522->f64[0]), v818, *v522, 1);
  v334 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1097, v522->f64[0]), v1106, *v522, 1), v1109, v331);
  v335 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1113, v522->f64[0]), v1102, *v522, 1), v1103, v331);
  v336 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1117, v522->f64[0]), v1107, *v522, 1), v1104, v331);
  v337 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1099, v522->f64[0]), v1110, *v522, 1), v1105, v331);
  v338 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1118, v522->f64[0]), v1098, *v522, 1), v1119, v331);
  v339 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1108, v522->f64[0]), v1111, *v522, 1), v1100, v331);
  *(float64x2_t *)&v1188[112] = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v1101, v522->f64[0]), v926, *v522, 1), v1095, v331);
  *(float64x2_t *)&v1188[128] = v339;
  *(float64x2_t *)&v1188[80] = v337;
  *(float64x2_t *)&v1188[96] = v338;
  *(float64x2_t *)&v1188[48] = v335;
  *(float64x2_t *)&v1188[64] = v336;
  *(float64x2_t *)&v1188[16] = vmlaq_n_f64(v333, v1114, v331);
  *(float64x2_t *)&v1188[32] = v334;
  *(float64x2_t *)v1188 = v332;
  sub_20F20A8B8((uint64_t)&v1504, (double *)v1188);
  sub_20F1F0C3C(v25 + 248, &v1504);
  if (*(_QWORD *)&v1504.f64[0])
    MEMORY[0x212BC6368](*(_QWORD *)&v1504.f64[0], 0x1000C8000313F17);
  v45 = v344;
  return v45 <= v23;
}

void sub_20F202464(_Unwind_Exception *a1)
{
  if (STACK[0x38A0])
  {
    MEMORY[0x212BC6368](STACK[0x38A0], 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_20F20249C(uint64_t a1, uint64_t a2, float64x2_t *a3, double a4, float64x2_t a5, double a6, double a7, double a8, double a9, double a10, int64x2_t a11)
{
  int8x16_t v11;
  int64x2_t v12;
  float64x2_t v20;
  int64x2_t v22;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  void **v30;
  void **v31;
  void **v32;
  double v33;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  _BOOL8 result;
  uint64_t *v40;
  unsigned __int8 v41;
  char *v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  __uint64_t v49[2];
  uint64_t v50;
  float64x2_t v51;
  double v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  uint64_t v56;
  void *v57[2];
  __int128 v58;
  void *v59[2];
  __int128 v60;
  void *v61[2];
  __int128 v62;
  void *v63[2];
  void *__p[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

  a5.f64[0] = *(float64_t *)(a2 + 24);
  _Q21 = *(float64x2_t *)(a2 + 8);
  _Q2 = vmulq_f64(_Q21, _Q21);
  _D3 = *(_QWORD *)(a2 + 16);
  __asm { FMLA            D2, D3, V21.D[1] }
  _Q2.f64[0] = sqrt(_Q2.f64[0] + a5.f64[0] * a5.f64[0]);
  if (_Q2.f64[0] != 0.0 && _Q2.f64[0] > 0.00000001)
  {
    v20 = (float64x2_t)vextq_s8((int8x16_t)_Q21, (int8x16_t)_Q21, 8uLL);
    a11.i64[0] = *(_QWORD *)(a1 + 456);
    _Q16 = *(int64x2_t *)(a1 + 440);
    v12.i64[0] = *(_QWORD *)(a1 + 480);
    v22 = *(int64x2_t *)(a1 + 464);
    _Q2.f64[0] = *(float64_t *)(a1 + 504);
    _Q3 = *(float64x2_t *)(a1 + 488);
    v24 = (float64x2_t)vzip1q_s64(_Q16, v22);
    v25 = (float64x2_t)vzip2q_s64(_Q16, v22);
    v26 = (float64x2_t)vzip1q_s64(a11, v12);
    v11.i64[0] = *(_QWORD *)(a1 + 656);
    v27 = *(float64x2_t *)(a1 + 640);
    _Q24 = vmulq_f64(_Q3, v27);
    _D25 = *(_QWORD *)(a1 + 648);
    __asm { FMLA            D24, D25, V3.D[1] }
    _Q24.f64[0] = _Q24.f64[0] + _Q2.f64[0] * *(double *)v11.i64;
    _Q21.f64[1] = v20.f64[0];
    v20.f64[0] = *(float64_t *)(a1 + 624);
    v55 = vsubq_f64(vsubq_f64(_Q21, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v24, v27.f64[0]), v25, v27, 1), v26, *(double *)v11.i64)), *(float64x2_t *)(a1 + 608));
    v56 = *(_OWORD *)&vsubq_f64(vsubq_f64(a5, _Q24), v20);
    *(_OWORD *)v57 = 0u;
    v58 = 0u;
    *(_OWORD *)v59 = 0u;
    v60 = 0u;
    *(_OWORD *)v61 = 0u;
    v62 = 0u;
    *(_OWORD *)v63 = 0u;
    *(_OWORD *)__p = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v30 = &v57[3 * *(_DWORD *)(a1 + 432)];
    v30[8] = (void *)*(_OWORD *)&vsubq_f64(vmulq_laneq_f64(_Q3, v27, 1), vmulq_laneq_f64(v27, _Q3, 1));
    *((float64x2_t *)v30 + 2) = vsubq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v12, (int64x2_t)_Q2), v27.f64[0]), vmulq_n_f64((float64x2_t)vzip1q_s64(v22, (int64x2_t)_Q3), *(double *)v11.i64));
    *((float64x2_t *)v30 + 3) = vsubq_f64(vmulq_laneq_f64(v24, v27, 1), vmulq_n_f64(v25, v27.f64[0]));
    *(float64x2_t *)v30 = vsubq_f64(vmulq_n_f64(v25, *(double *)v11.i64), vmulq_laneq_f64(v26, v27, 1));
    *((float64x2_t *)v30 + 1) = vsubq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)_Q3, (int8x16_t)a11, 8uLL), (float64x2_t)vzip1q_s64((int64x2_t)v11, (int64x2_t)v27)), vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)_Q2, _Q16), (float64x2_t)vextq_s8((int8x16_t)v27, v11, 8uLL)));
    v31 = &v57[3 * *(_DWORD *)(a1 + 632)];
    *(_OWORD *)(v31 + 3) = 0u;
    *(_OWORD *)(v31 + 5) = 0u;
    *(_OWORD *)(v31 + 1) = 0u;
    *v31 = (void *)0x3FF0000000000000;
    v31[4] = (void *)0x3FF0000000000000;
    v31[7] = 0;
    v31[8] = (void *)0x3FF0000000000000;
    v32 = &v57[3 * *(_DWORD *)(a1 + 664)];
    v32[2] = *(void **)&_Q3.f64[0];
    *(float64x2_t *)v32 = v24;
    v32[5] = *(void **)&_Q3.f64[1];
    *(float64x2_t *)(v32 + 3) = v25;
    v32[8] = *(void **)&_Q2.f64[0];
    *((float64x2_t *)v32 + 3) = v26;
    _Q2.f64[0] = a3[1].f64[0];
    v33 = vmulq_f64(_Q2, _Q2).f64[0];
    _Q3 = vmulq_f64(*a3, *a3);
    v35 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)xmmword_21030D320, _Q3.f64[0]);
    v24.f64[0] = 0.0 * _Q3.f64[0] + 0.0;
    v36 = vaddq_f64(vmlaq_laneq_f64((float64x2_t)0, (float64x2_t)xmmword_2102DD520, _Q3, 1), (float64x2_t)0);
    _Q16.i64[0] = 0;
    __asm { FMLA            D16, D16, V3.D[1] }
    _Q3.f64[0] = *(double *)_Q16.i64 + 0.0;
    v37 = vmlaq_n_f64((float64x2_t)0, (float64x2_t)0, v33);
    v38 = vmulq_f64(v35, (float64x2_t)0);
    *(double *)v22.i64 = vmlad_n_f64(v24.f64[0] + _Q3.f64[0] * 0.0, 0.0, v33);
    v24.f64[0] = v24.f64[0] * 0.0;
    v50 = v22.i64[0];
    *(float64x2_t *)v49 = vmlaq_f64(vmlaq_f64(v35, (float64x2_t)0, v36), (float64x2_t)0, v37);
    v52 = vmlad_n_f64(_Q3.f64[0] + v24.f64[0], 0.0, v33);
    v51 = vmlaq_f64(vaddq_f64(v36, v38), (float64x2_t)0, v37);
    v54 = v33 + v24.f64[0] + _Q3.f64[0] * 0.0;
    v53 = vaddq_f64(v37, vmlaq_f64(v38, (float64x2_t)0, v36));
    return sub_20F1FACCC(a1, (uint64_t)&v55, (uint64_t)v57, (uint64_t)v49, 1, 0, 1, 1, 1);
  }
  v40 = sub_210219C18();
  v41 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  if (atomic_load(&qword_254A5A450))
  {
    LOWORD(v57[0]) = 0;
    v43 = (char *)_os_log_send_and_compose_impl();
    v44 = strlen(v43);
    v49[0] = 0;
    pthread_threadid_np(0, v49);
    v45 = v49[0];
    timespec_get((timespec *)v49, 1);
    sub_210219E20(v57, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v40 + 1), (__int128 *)(v40 + 5), "Invalid magnetometer measurement", 0x20uLL, v43, v44, v45, v49);
    std::mutex::lock(&stru_254A5A410);
    v46 = qword_254A5A458;
    for (i = unk_254A5A460; v46 != i; v46 += 40)
    {
      v48 = *(_QWORD *)(v46 + 32);
      if (!v48)
        sub_20E86D37C();
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v48 + 48))(v48, v57);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (SHIBYTE(v65) < 0)
    {
      operator delete(__p[1]);
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
      {
LABEL_11:
        if (!BYTE8(v62))
        {
LABEL_17:
          if (BYTE8(v60) && SBYTE7(v60) < 0)
            operator delete(v59[0]);
          if (SHIBYTE(v58) < 0)
            operator delete(v57[1]);
          if (v43)
            free(v43);
          goto LABEL_24;
        }
LABEL_15:
        if (SBYTE7(v62) < 0)
          operator delete(v61[0]);
        goto LABEL_17;
      }
    }
    else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v63[0]);
    if (!BYTE8(v62))
      goto LABEL_17;
    goto LABEL_15;
  }
LABEL_24:
  result = os_signpost_enabled((os_log_t)*v40);
  if (result)
  {
    LOWORD(v57[0]) = 0;
    _os_signpost_emit_unreliably_with_name_impl();
    return 0;
  }
  return result;
}

void sub_20F202988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;

  if (a57 < 0)
  {
    operator delete(__p);
    if ((a51 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a45)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a51 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a46);
  if (!a45)
    goto LABEL_9;
LABEL_7:
  if (a44 < 0)
    operator delete(a39);
LABEL_9:
  if (a38)
  {
    if (a37 < 0)
      operator delete(a32);
  }
  if (a31 < 0)
  {
    operator delete(a26);
    if (!v57)
LABEL_14:
      _Unwind_Resume(exception_object);
  }
  else if (!v57)
  {
    goto LABEL_14;
  }
  free(v57);
  _Unwind_Resume(exception_object);
}

void sub_20F202A44(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  __int128 *v46;
  __int128 v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  __int128 v51;
  uint64_t v52;
  double v53;
  unint64_t v55;
  double v62;
  double v63;
  double v64;
  double cosval;
  double v66;
  __double2 v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  __int128 v97;
  uint64_t v98;
  char *v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  double v105;
  double v106;
  double v107;
  unint64_t v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;

  if (*(_QWORD *)(a1 + 672) == *(_QWORD *)(a1 + 680))
    *(_QWORD *)(a1 + 152) = 0;
  v4 = *(unsigned int *)(a1 + 240);
  sub_20F2030A0((unsigned int *)(a1 + 224), v4 + 3, v4 + 3);
  v5 = *(_DWORD *)(a1 + 432);
  v6 = *(unsigned int *)(a1 + 240);
  v7 = *(_QWORD *)(a1 + 224);
  v8 = (__int128 *)(v7 + 8 * ((_DWORD)v6 + 1) * v5);
  v9 = v7 + 8 * ((v6 + 1) * v4);
  v10 = *v8;
  v11 = *((_QWORD *)v8 + 2);
  v12 = 8 * v6;
  v13 = (__int128 *)((char *)v8 + 8 * v6);
  v14 = *v13;
  v15 = *((_QWORD *)v13 + 2);
  v6 *= 16;
  v16 = (__int128 *)((char *)v8 + v6);
  v17 = *v16;
  v18 = *((_QWORD *)v16 + 2);
  *(_QWORD *)(v9 + 16) = v11;
  *(_OWORD *)v9 = v10;
  v19 = v9 + v12;
  *(_QWORD *)(v19 + 16) = v15;
  *(_OWORD *)v19 = v14;
  v20 = v9 + v6;
  *(_QWORD *)(v20 + 16) = v18;
  *(_OWORD *)v20 = v17;
  v21 = *(_DWORD *)(a1 + 240);
  v22 = (v21 + 1) * v5;
  v23 = *(_QWORD *)(a1 + 224);
  v24 = (char *)operator new(0x60uLL, (std::align_val_t)0x20uLL);
  v25 = (__int128 *)(v23 + 8 * v22);
  v26 = *v25;
  *((_QWORD *)v24 + 2) = *((_QWORD *)v25 + 2);
  *(_OWORD *)v24 = v26;
  v27 = v23 + 8 * (v22 + v21);
  v28 = *(_QWORD *)(v27 + 16);
  *(_OWORD *)(v24 + 24) = *(_OWORD *)v27;
  *((_QWORD *)v24 + 5) = v28;
  v29 = (__int128 *)(v23 + 8 * (v22 + 2 * v21));
  v30 = *v29;
  *((_QWORD *)v24 + 8) = *((_QWORD *)v29 + 2);
  *((_OWORD *)v24 + 3) = v30;
  v31 = v23 + 8 * ((v21 + 1) * v4);
  v32 = *((_QWORD *)v24 + 2);
  *(_OWORD *)v31 = *(_OWORD *)v24;
  *(_QWORD *)(v31 + 16) = v32;
  v33 = v23 + 8 * ((v21 + 1) * v4 + v21);
  v34 = *(_OWORD *)(v24 + 24);
  *(_QWORD *)(v33 + 16) = *((_QWORD *)v24 + 5);
  *(_OWORD *)v33 = v34;
  v35 = v23 + 8 * ((v21 + 1) * v4 + 2 * v21);
  v36 = *((_OWORD *)v24 + 3);
  *(_QWORD *)(v35 + 16) = *((_QWORD *)v24 + 8);
  *(_OWORD *)v35 = v36;
  MEMORY[0x212BC6368]();
  v37 = *(_DWORD *)(a1 + 240);
  v38 = *(_QWORD *)(a1 + 224);
  v39 = (char *)operator new((8 * (3 * v4) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v40 = v39;
  if ((_DWORD)v4)
  {
    memmove(v39, (const void *)(v38 + 8 * v37 * v5), 8 * v4);
    memmove(&v40[8 * v4], (const void *)(v38 + 8 * (v37 + v37 * v5)), 8 * v4);
    memmove(&v40[8 * v4 + 8 * v4], (const void *)(v38 + 8 * v37 * (v5 + 2)), 8 * v4);
    memmove((void *)(v38 + 8 * (v37 * v4)), v40, 8 * v4);
    memmove((void *)(v38 + 8 * (v37 + v37 * v4)), &v40[8 * (int)v4], 8 * v4);
    memmove((void *)(v38 + 8 * (v37 * (v4 + 2))), &v40[8 * (int)v4 + 8 * (int)v4], 8 * v4);
  }
  MEMORY[0x212BC6368](v40, 0x1000C8000313F17);
  v41 = *(_DWORD *)(a1 + 240);
  v42 = *(_QWORD *)(a1 + 224);
  v43 = operator new((8 * (3 * v4) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  if ((_DWORD)v4)
  {
    v44 = v4;
    v45 = v43;
    do
    {
      v46 = (__int128 *)(v42 + 8 * v5);
      v47 = *v46;
      v45[2] = *((_QWORD *)v46 + 2);
      *(_OWORD *)v45 = v47;
      v45 += 3;
      v5 += v41;
      --v44;
    }
    while (v44);
    v48 = v4;
    v49 = v4;
    v50 = v43;
    do
    {
      v51 = *(_OWORD *)v50;
      v52 = v42 + 8 * v48;
      *(_QWORD *)(v52 + 16) = v50[2];
      *(_OWORD *)v52 = v51;
      v50 += 3;
      v48 += v41;
      --v49;
    }
    while (v49);
  }
  MEMORY[0x212BC6368](v43, 0x1000C8000313F17);
  v53 = *(double *)(a1 + 424);
  _Q6 = *(int8x16_t *)(a1 + 408);
  v55 = vextq_s8(_Q6, _Q6, 8uLL).u64[0];
  _D11 = *(double *)(a1 + 416);
  __asm { FMLA            D0, D11, V6.D[1] }
  v62 = _D0 + v53 * v53;
  v108 = v55;
  v109 = _Q6.i64[0];
  v107 = v53;
  if (v62 >= 0.0000002635)
  {
    v66 = sqrt(v62);
    v67 = __sincos_stret(v66);
    cosval = v67.__cosval;
    v53 = v107;
    v55 = v108;
    _Q6.i64[0] = v109;
    v64 = v67.__sinval / v66;
    v63 = 1.0 / v62 * (1.0 - v67.__cosval);
  }
  else
  {
    v63 = 0.5 - v62 * (v62 / -720.0 + 0.0416666667);
    v64 = 1.0 - v62 * (0.166666667 - v62 * (v62 / -5040.0 + 0.00833333333));
    cosval = 1.0 - v62 * v63;
  }
  v68 = _D11 * v63;
  v69 = cosval + *(double *)_Q6.i64 * (*(double *)_Q6.i64 * v63);
  v70 = cosval + _D11 * (_D11 * v63);
  v71 = cosval + v53 * (v53 * v63);
  v72 = _D11 * (*(double *)_Q6.i64 * v63);
  v73 = v53 * (*(double *)_Q6.i64 * v63);
  v74 = v53 * v68;
  v75 = *(double *)_Q6.i64 * v64;
  v76 = _D11 * v64;
  v77 = v53 * v64;
  v78 = v72 - v77;
  v79 = v76 + v73;
  v80 = v72 + v77;
  v81 = v74 - v75;
  v82 = v73 - v76;
  v83 = v75 + v74;
  v84 = *a2;
  v110 = *(_OWORD *)(a2 + 1);
  v111 = a2[3];
  v85 = *(char **)(a1 + 680);
  v86 = *(_QWORD *)(a1 + 688);
  if ((unint64_t)v85 >= v86)
  {
    v88 = *(char **)(a1 + 672);
    v89 = 0x8E38E38E38E38E39 * ((v85 - v88) >> 4) + 1;
    if (v89 > 0x1C71C71C71C71C7)
      sub_20E867F44();
    v105 = v70;
    v106 = v71;
    v90 = 0x8E38E38E38E38E39 * ((uint64_t)(v86 - (_QWORD)v88) >> 4);
    if (2 * v90 > v89)
      v89 = 2 * v90;
    if (v90 >= 0xE38E38E38E38E3)
      v91 = 0x1C71C71C71C71C7;
    else
      v91 = v89;
    if (v91 > 0x1C71C71C71C71C7)
      sub_20E877A38();
    v92 = a2 + 1;
    v93 = 144 * v91;
    v94 = (char *)operator new(144 * v91);
    v95 = &v94[16 * ((v85 - v88) >> 4)];
    *(_QWORD *)v95 = v84;
    *((double *)v95 + 3) = v107;
    v96 = &v94[v93];
    *(_QWORD *)&v97 = v109;
    *((_QWORD *)&v97 + 1) = v108;
    *(_OWORD *)(v95 + 8) = v97;
    *((_QWORD *)v95 + 4) = v4;
    *((double *)v95 + 5) = v69;
    *((double *)v95 + 6) = v80;
    *((double *)v95 + 7) = v82;
    *((double *)v95 + 8) = v78;
    *((double *)v95 + 9) = v105;
    *((double *)v95 + 10) = v83;
    *((double *)v95 + 11) = v79;
    *((double *)v95 + 12) = v81;
    *((double *)v95 + 13) = v106;
    *((_OWORD *)v95 + 7) = *(_OWORD *)v92;
    *((_QWORD *)v95 + 16) = v92[2];
    v87 = v95 + 144;
    *((_WORD *)v95 + 68) = 0;
    if (v85 != v88)
    {
      v98 = 0;
      do
      {
        v99 = &v95[v98];
        *((_QWORD *)v99 - 18) = *(_QWORD *)&v85[v98 - 144];
        v100 = *(_OWORD *)&v85[v98 - 136];
        *((_QWORD *)v99 - 15) = *(_QWORD *)&v85[v98 - 120];
        *(_OWORD *)(v99 - 136) = v100;
        *((_QWORD *)v99 - 14) = *(_QWORD *)&v85[v98 - 112];
        *(_OWORD *)(v99 - 104) = *(_OWORD *)&v85[v98 - 104];
        v101 = *(_OWORD *)&v85[v98 - 88];
        v102 = *(_OWORD *)&v85[v98 - 72];
        v103 = *(_OWORD *)&v85[v98 - 56];
        *((_QWORD *)v99 - 5) = *(_QWORD *)&v85[v98 - 40];
        *(_OWORD *)(v99 - 56) = v103;
        *(_OWORD *)(v99 - 72) = v102;
        *(_OWORD *)(v99 - 88) = v101;
        v104 = *(_OWORD *)&v85[v98 - 32];
        *((_QWORD *)v99 - 2) = *(_QWORD *)&v85[v98 - 16];
        *((_OWORD *)v99 - 2) = v104;
        *((_WORD *)v99 - 4) = *(_WORD *)&v85[v98 - 8];
        v98 -= 144;
      }
      while (&v85[v98] != v88);
      v95 += v98;
    }
    *(_QWORD *)(a1 + 672) = v95;
    *(_QWORD *)(a1 + 680) = v87;
    *(_QWORD *)(a1 + 688) = v96;
    if (v88)
      operator delete(v88);
  }
  else
  {
    *(_QWORD *)v85 = v84;
    _Q6.i64[1] = v55;
    *((double *)v85 + 3) = v53;
    *(int8x16_t *)(v85 + 8) = _Q6;
    *((_QWORD *)v85 + 4) = v4;
    *((double *)v85 + 5) = v69;
    *((double *)v85 + 6) = v80;
    *((double *)v85 + 7) = v82;
    *((double *)v85 + 8) = v78;
    *((double *)v85 + 9) = v70;
    *((double *)v85 + 10) = v83;
    *((double *)v85 + 11) = v79;
    *((double *)v85 + 12) = v81;
    *((double *)v85 + 13) = v71;
    *((_OWORD *)v85 + 7) = v110;
    *((_QWORD *)v85 + 16) = v111;
    v87 = v85 + 144;
    *((_WORD *)v85 + 68) = 0;
  }
  *(_QWORD *)(a1 + 680) = v87;
}

unsigned int *sub_20F2030A0(unsigned int *result, unsigned int a2, unsigned int a3)
{
  unsigned int *v5;
  size_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  int v14;
  int v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char *__dst;
  size_t v31;

  v5 = result;
  if (*((_QWORD *)result + 1) < a3 * (unint64_t)a2)
  {
    v6 = (8 * a3 * a2 + 31) & 0xFFFFFFFE0;
    result = (unsigned int *)operator new(v6, (std::align_val_t)0x20uLL);
    v7 = result;
    v9 = v5[4];
    v8 = v5[5];
    if (v9 >= a2)
      v10 = a2;
    else
      v10 = v5[4];
    if (v8 >= a3)
      v11 = a3;
    else
      v11 = v8;
    v12 = *(char **)v5;
    if (*(unsigned int **)v5 == result)
    {
      v31 = v6;
      __dst = (char *)operator new((8 * v11 * v10 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      if (v10 && (_DWORD)v11)
      {
        v22 = 0;
        v29 = v10;
        v23 = 8 * v10;
        v24 = __dst;
        v25 = v11;
        do
        {
          memcpy(v24, &v7[2 * v22], v23);
          v22 += v9;
          v24 += v23;
          --v25;
        }
        while (v25);
        v26 = __dst;
        do
        {
          memcpy(&v7[2 * v25], v26, v23);
          LODWORD(v25) = v25 + a2;
          v26 += 8 * (int)v29;
          --v11;
        }
        while (v11);
      }
      result = (unsigned int *)MEMORY[0x212BC6368](__dst, 0x1000C8000313F17);
      v12 = *(char **)v5;
    }
    else
    {
      if (v10)
        v13 = (_DWORD)v11 == 0;
      else
        v13 = 1;
      if (v13)
        goto LABEL_34;
      v31 = v6;
      v14 = 0;
      v15 = 0;
      v16 = 8 * v10;
      do
      {
        result = (unsigned int *)memmove(&v7[2 * v15], &v12[8 * v14], v16);
        v15 += a2;
        v14 += v9;
        --v11;
      }
      while (v11);
    }
    v6 = v31;
LABEL_34:
    *(_QWORD *)v5 = v7;
    *((_QWORD *)v5 + 1) = v6 >> 3;
    v5[4] = a2;
    v5[5] = a3;
    if (v12)
      JUMPOUT(0x212BC6368);
    return result;
  }
  if (a3 >= 2)
  {
    v17 = result[4];
    if (v17 != a2)
    {
      v18 = result[5];
      if (v18 > 1)
      {
        if (v18 >= a3)
          v19 = a3;
        else
          v19 = v18;
        if (v17 <= a2)
        {
          v27 = v19 - 1;
          v28 = a2 * (v19 - 1);
          do
          {
            result = (unsigned int *)memmove((void *)(*(_QWORD *)v5 + 8 * v28), (const void *)(*(_QWORD *)v5 + 8 * v5[4] * v27), 8 * v5[4]);
            v28 -= a2;
            --v27;
          }
          while (v27);
        }
        else
        {
          v20 = 1;
          v21 = a2;
          do
          {
            result = (unsigned int *)memmove((void *)(*(_QWORD *)v5 + 8 * v21), (const void *)(*(_QWORD *)v5 + 8 * v5[4] * v20++), 8 * a2);
            v21 += a2;
          }
          while (v19 != v20);
        }
      }
    }
  }
  v5[4] = a2;
  v5[5] = a3;
  return result;
}

void sub_20F203308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F20332C(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  void *v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  int v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  size_t v46;
  void *v47;
  size_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int16 v65;
  char *__dst;
  unint64_t __sz;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  char *__src;
  unsigned int __srca;
  int v75;
  unsigned int v76;
  int v77;
  char *v78;
  int v79;
  int64x2_t v80;
  unsigned int v81;
  unsigned int v82;

  v2 = *(_QWORD *)(result + 672);
  if (0x8E38E38E38E38E39 * ((*(_QWORD *)(result + 680) - v2) >> 4) <= a2)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(v2 + 144 * a2 + 32);
  v5 = *(_DWORD *)(result + 240);
  v6 = v5 - 3;
  __sz = (8 * (v6 * v6) + 31) & 0xFFFFFFFE0;
  v7 = (char *)operator new(__sz, (std::align_val_t)0x20uLL);
  v8 = v7;
  v69 = (v6 * v6);
  if (v6 * v6)
    bzero(v7, 8 * (v6 * v6));
  v9 = *(char **)(v3 + 224);
  v71 = v3;
  if (v9 == v8)
  {
    v14 = (char *)operator new((((8 * v4 * v4) & 0x7FFFFFFF8) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    v15 = v14;
    if ((_DWORD)v4)
    {
      v16 = 0;
      v17 = v4;
      __src = v14;
      v18 = v14;
      v19 = v4;
      do
      {
        memcpy(v18, &v8[8 * v16], 8 * v4);
        v16 += v5;
        v18 += 8 * v4;
        --v19;
      }
      while (v19);
      v20 = 0;
      v15 = __src;
      v21 = __src;
      do
      {
        memcpy(&v8[8 * v20], v21, (8 * v4) & 0x7FFFFFFF8);
        v20 += v6;
        v21 += 8 * (int)v4;
        --v17;
      }
      while (v17);
    }
    MEMORY[0x212BC6368](v15, 0x1000C8000313F17);
    v13 = *(_DWORD *)(v71 + 240);
    v9 = *(char **)(v71 + 224);
  }
  else
  {
    if ((_DWORD)v4)
    {
      v10 = 0;
      v11 = 0;
      v12 = v4;
      do
      {
        memmove(&v8[8 * v11], &v9[8 * v10], 8 * v4);
        v11 += v6;
        v10 += v5;
        --v12;
      }
      while (v12);
    }
    v13 = v5;
  }
  __srca = v5 - (v4 + 3);
  v72 = v4 + 3;
  if (v9 == v8)
  {
    __dst = (char *)operator new((8 * __srca * v4 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    if ((_DWORD)v4 && v5 != v72)
    {
      if (__srca <= 1)
        v25 = 1;
      else
        v25 = __srca;
      v26 = v13 * v72;
      v27 = __dst;
      v28 = v25;
      do
      {
        memcpy(v27, &v8[8 * v26], 8 * v4);
        v26 += v13;
        v27 += 8 * v4;
        --v28;
      }
      while (v28);
      v29 = v6 * v4;
      v30 = __dst;
      do
      {
        memcpy(&v8[8 * v29], v30, 8 * v4);
        v29 += v6;
        v30 += 8 * (int)v4;
        --v25;
      }
      while (v25);
    }
    MEMORY[0x212BC6368](__dst, 0x1000C8000313F17);
  }
  else if ((_DWORD)v4 && v5 != v72)
  {
    if (__srca <= 1)
      v22 = 1;
    else
      v22 = __srca;
    v23 = v6 * v4;
    v24 = v13 * v72;
    do
    {
      memmove(&v8[8 * v23], &v9[8 * v24], 8 * v4);
      v23 += v6;
      v24 += v13;
      --v22;
    }
    while (v22);
  }
  v75 = v4;
  v76 = v5 - (v4 + 3);
  v77 = v5 - 3;
  v78 = &v8[8 * (v6 * v4)];
  v79 = v6 * v4;
  v31 = (8 * __srca * v4 + 31) & 0xFFFFFFFE0;
  v80.i64[1] = v31 >> 3;
  v80.i64[0] = (uint64_t)operator new(v31, (std::align_val_t)0x20uLL);
  v81 = v76;
  v82 = v4;
  sub_20F208630(&v80, (uint64_t)&v75);
  v32 = v71;
  if (v81)
  {
    v33 = v82;
    v34 = v80.i64[0];
    if (v82)
    {
      v35 = 8 * v81;
      v36 = 8 * (int)v81;
      v37 = (char *)v80.i64[0];
      v38 = v4;
      do
      {
        memmove(&v8[8 * v38], v37, v35);
        v38 += v6;
        v37 += v36;
        --v33;
      }
      while (v33);
      v32 = v71;
    }
    if (v34)
      goto LABEL_40;
  }
  else
  {
    v34 = v80.i64[0];
    if (v80.i64[0])
LABEL_40:
      MEMORY[0x212BC6368](v34, 0x1000C8000313F17);
  }
  v39 = *(_DWORD *)(v32 + 240);
  v40 = v72 + v72 * v39;
  v41 = *(char **)(v32 + 224);
  v42 = (v5 - 2) * v4;
  if (v41 == v8)
  {
    v70 = (char *)operator new((8 * __srca * __srca + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
    if (v5 != v72)
    {
      v48 = 8 * (v5 - (v4 + 3));
      if (__srca <= 1)
        v49 = 1;
      else
        v49 = __srca;
      v50 = v70;
      v51 = v49;
      do
      {
        memcpy(v50, &v8[8 * v40], v48);
        v40 += v39;
        v50 += v48;
        --v51;
      }
      while (v51);
      v52 = v70;
      do
      {
        memcpy(&v8[8 * v42], v52, v48);
        v42 += v6;
        v52 += 8 * (int)__srca;
        --v49;
      }
      while (v49);
    }
    MEMORY[0x212BC6368](v70, 0x1000C8000313F17);
    v32 = v71;
    v44 = v6 * v6;
    if (*(_QWORD *)(v71 + 232) < v69)
      goto LABEL_48;
  }
  else
  {
    if (v5 != v72)
    {
      if (__srca <= 1)
        v43 = 1;
      else
        v43 = __srca;
      do
      {
        memmove(&v8[8 * v42], &v41[8 * v40], 8 * __srca);
        v42 += v6;
        v40 += v39;
        --v43;
      }
      while (v43);
    }
    v44 = v6 * v6;
    if (*(_QWORD *)(v32 + 232) < v69)
    {
LABEL_48:
      v45 = *(_QWORD *)(v32 + 224);
      v46 = 8 * (v6 * v6);
      if (v45)
        MEMORY[0x212BC6368](v45, 0x1000C8000313F17);
      *(_QWORD *)(v32 + 224) = 0;
      *(_QWORD *)(v32 + 232) = __sz >> 3;
      v47 = operator new(__sz, (std::align_val_t)0x20uLL);
      *(_QWORD *)(v32 + 224) = v47;
      goto LABEL_64;
    }
  }
  v46 = 8 * (v6 * v6);
  if (v44)
  {
    v47 = *(void **)(v32 + 224);
LABEL_64:
    memcpy(v47, v8, v46);
  }
  *(_DWORD *)(v32 + 240) = v6;
  *(_DWORD *)(v32 + 244) = v6;
  v53 = *(_QWORD *)(v32 + 680);
  v54 = *(_QWORD *)(v32 + 672);
  v55 = (v53 - v54) / 144;
  if (v53 != v54)
  {
    v56 = 0;
    if (v55 <= 1)
      v57 = 1;
    else
      v57 = (v53 - v54) / 144;
    v58 = (unint64_t *)(v54 + 32);
    do
    {
      if (v55 > v56 && *v58 > v4)
        *v58 -= 3;
      ++v56;
      v58 += 18;
    }
    while (v57 != v56);
  }
  if (v55 > a2)
  {
    v59 = v54 + 144 * (int)a2;
    if (v59 + 144 != v53)
    {
      v60 = -v54;
      v61 = 144 * (int)a2;
      do
      {
        v62 = v54 + v61;
        *(_QWORD *)v62 = *(_QWORD *)(v54 + v61 + 144);
        *(_OWORD *)(v62 + 8) = *(_OWORD *)(v54 + v61 + 152);
        v63 = *(_QWORD *)(v54 + v61 + 176);
        *(_QWORD *)(v62 + 24) = *(_QWORD *)(v54 + v61 + 168);
        *(_QWORD *)(v62 + 32) = v63;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)(v54 + v61 + 200);
        *(_OWORD *)(v62 + 72) = *(_OWORD *)(v54 + v61 + 216);
        *(_OWORD *)(v62 + 88) = *(_OWORD *)(v54 + v61 + 232);
        *(_QWORD *)(v62 + 104) = *(_QWORD *)(v54 + v61 + 248);
        *(_OWORD *)(v62 + 40) = *(_OWORD *)(v54 + v61 + 184);
        v64 = *(_OWORD *)(v54 + v61 + 256);
        *(_QWORD *)(v62 + 128) = *(_QWORD *)(v54 + v61 + 272);
        v65 = *(_WORD *)(v54 + v61 + 280);
        v60 -= 144;
        v54 += 144;
        *(_WORD *)(v62 + 136) = v65;
        *(_OWORD *)(v62 + 112) = v64;
      }
      while (v54 + v61 + 144 != v53);
      v59 = 144 * (int)a2 - v60;
    }
    *(_QWORD *)(v32 + 680) = v59;
  }
  return MEMORY[0x212BC6368](v8, 0x1000C8000313F17);
}

void sub_20F203994(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6368](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

double sub_20F2039EC(double *a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v8;
  double v11;

  if (a2 <= 0.0 || (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    sub_20F20D054("boost::math::quantile(const chi_squared_distribution<%1%>&, %1%)", "Degrees of freedom argument is %1%, but must be > 0 !");
  v8 = *a1;
  if (*a1 < 0.0 || v8 > 1.0 || (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    sub_20F20D054("boost::math::quantile(const chi_squared_distribution<%1%>&, %1%)", "Probability argument is %1%, but must be >= 0 and <= 1 !");
  sub_20F20DACC(a2 * 0.5, v8, 0.5, a5, a6, a7);
  return v11 + v11;
}

void sub_20F203A84(long double *a1, uint64_t a2)
{
  *a1 = atan2(-*(double *)(a2 + 40), *(long double *)(a2 + 64));
  a1[1] = asin(*(long double *)(a2 + 16));
  a1[2] = atan2(-*(double *)(a2 + 8), *(long double *)a2);
}

BOOL sub_20F203AD4(uint64_t a1, int a2, float64x2_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  double v8;
  double v9;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  float64x2_t v15;
  uint64_t v16;
  float64x2_t v17;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  const double *v26;
  double v27;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  uint64_t v35;
  float64x2_t v36;
  float64x2_t v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double *v44;
  char *v45;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v54;
  float64x2_t v60;
  float64x2_t v66;
  float64x2_t v67;
  int64x2_t v69;
  int64x2_t v71;
  int64x2_t v73;
  double *v74;
  _BOOL8 v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  unsigned __int8 v80;
  _QWORD *v81;
  int v82;
  std::chrono::steady_clock::time_point v83;
  std::chrono::steady_clock::time_point *v84;
  uint64_t *v86;
  unsigned __int8 v87;
  double v88;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  float64x2_t v94;
  double v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  float64x2_t v99;
  void *v100;
  double v101;
  double v102;
  float64x2_t v103;
  double v104;
  double v105;
  double *v106[3];
  uint64_t v107[2];
  uint64_t v108;
  float64x2_t v109;
  uint64_t v110;
  float64x2_t v111;
  double v112;
  float64x2_t v113;
  double v114;
  double v115[3];
  _BYTE v116[40];
  void *v117;
  float64x2_t v118;
  double v119;
  void *v120;
  char v121;
  void *__p;
  char v123;
  uint64_t v124;
  float64x2x3_t v125;

  v124 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 680);
  v4 = *(_QWORD *)(a1 + 672);
  v5 = 0x8E38E38E38E38E39 * ((v3 - v4) >> 4);
  if (v5 >= 2)
  {
    v8 = *(double *)(a1 + 400);
    v9 = *(double *)(v3 - 144);
    _NF = v9 < v8;
    if (v9 == v8)
      goto LABEL_6;
    v11 = v9 - v8;
    v12 = v8 - v9;
    if (!_NF)
      v12 = v11;
    if (v12 <= 0.00001)
    {
LABEL_6:
      v13 = v5 - 1;
      if (v13)
      {
        v14 = 0;
        v17 = *(float64x2_t *)(v3 - 32);
        v15 = (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
        v16 = v4 + 64;
        v17.f64[1] = v15.f64[0];
        while (1)
        {
          v15.f64[0] = *(float64_t *)(v16 + 64);
          a3.f64[0] = *(float64_t *)(v3 - 16);
          v15 = vsubq_f64(v15, a3);
          _D6 = vsubq_f64(*(float64x2_t *)(v16 + 48), v17).f64[1];
          __asm { FMLA            D5, D6, V4.D[1] }
          if (sqrt(vmlad_n_f64(_D5, v15.f64[0], v15.f64[0])) <= *(double *)(a1 + 120))
            break;
          ++v14;
          v16 += 144;
          if (v13 == v14)
            return 0;
        }
        if (v14 < v13)
        {
          v23 = *(_QWORD *)(v16 - 32);
          v24 = *(_QWORD *)(v3 - 112);
          v25 = operator new(0x10uLL);
          v26 = (const double *)(v3 - 104);
          v125 = vld3q_f64(v26);
          *v25 = v23;
          v25[1] = v24;
          v27 = *(double *)(v3 - 40);
          _Q4 = *(_OWORD *)(v3 - 56);
          v29 = *(double *)(v16 - 8);
          v30 = *(double *)(v16 + 16);
          v31 = *(double *)(v16 + 40);
          v32 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v125.val[0], *(double *)(v16 - 24)), v125.val[1], *(float64x2_t *)(v16 - 24), 1), v125.val[2], v29);
          _D6 = *(_QWORD *)(v16 - 16);
          __asm { FMLA            D20, D6, V4.D[1] }
          *(double *)&v35 = _D20 + v27 * v29;
          v36 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v125.val[0], *(double *)v16), v125.val[1], *(float64x2_t *)v16, 1), v125.val[2], v30);
          _D16 = *(_QWORD *)(v16 + 8);
          __asm { FMLA            D20, D16, V4.D[1] }
          v39 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v125.val[0], *(double *)(v16 + 24)), v125.val[1], *(float64x2_t *)(v16 + 24), 1), v125.val[2], v31);
          v125.val[1].f64[0] = *(float64_t *)(v16 + 32);
          __asm { FMLA            D0, D1, V4.D[1] }
          v109 = v32;
          v110 = v35;
          v111 = v36;
          v112 = _D20 + v27 * v30;
          v113 = v39;
          v114 = v125.val[0].f64[0] + v27 * v31;
          memset(v115, 0, sizeof(v115));
          sub_20E9733B8(&v109, v115);
          v40 = v115[0];
          v41 = v115[1];
          v42 = v115[2];
          memset(v115, 0, sizeof(v115));
          sub_20F20830C(&v109, v115, (double *)v116);
          v94 = *(float64x2_t *)v116;
          v95 = *(double *)&v116[16];
          v100 = v117;
          v105 = v119;
          v102 = *(double *)(v16 - 8);
          v103 = v118;
          v101 = *(double *)(v16 + 16);
          v96 = *(float64x2_t *)v16;
          v97 = *(float64x2_t *)(v16 - 24);
          v104 = *(double *)(v16 + 40);
          v98 = *(float64x2_t *)(v16 + 24);
          v99 = *(float64x2_t *)&v116[24];
          v43 = *(_QWORD *)(a1 + 112);
          v108 = *(_QWORD *)(v16 - 32);
          *(_QWORD *)&v115[1] = 4;
          v44 = (double *)operator new(0x20uLL, (std::align_val_t)0x20uLL);
          *(_QWORD *)&v115[0] = v44;
          LODWORD(v115[2]) = 3;
          *v44 = v40;
          v44[1] = v41;
          v44[2] = v42;
          *(_QWORD *)&v109.f64[1] = 20;
          v45 = (char *)operator new(0xA0uLL, (std::align_val_t)0x20uLL);
          _V24.D[1] = v99.f64[1];
          _V29.D[1] = v94.f64[1];
          _Q3 = (float64x2_t)vzip2q_s64((int64x2_t)v94, (int64x2_t)v99);
          v49.f64[0] = v95;
          *(_QWORD *)&v49.f64[1] = v100;
          v50 = vnegq_f64((float64x2_t)vzip1q_s64((int64x2_t)v94, (int64x2_t)v99));
          _V20.D[1] = v103.f64[1];
          _D27 = v96.f64[0];
          _D25 = v98.f64[0];
          v54 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v50, v97.f64[0]), _Q3, v96.f64[0], 0), v49, v98.f64[0], 0);
          _D7 = vdupq_laneq_s64((int64x2_t)v103, 1).u64[0];
          __asm { FMLS            D1, D27, V7.D[0] }
          _D22 = v104;
          _D21 = v105;
          __asm { FMLS            D1, D25, V21.D[0] }
          v60 = vmlsq_laneq_f64(vmlsq_laneq_f64(vmulq_laneq_f64(v50, v97, 1), _Q3, v96, 1), v49, v98, 1);
          _D17 = v96.f64[1];
          __asm { FMLS            D16, D17, V7.D[0] }
          _D17 = v98.f64[1];
          __asm { FMLS            D16, D17, V21.D[0] }
          _D23 = v101;
          v66 = vmlsq_lane_f64(vmlsq_lane_f64(vmulq_n_f64(v50, v102), _Q3, v101, 0), v49, v104, 0);
          __asm
          {
            FMLS            D3, D23, V7.D[0]
            FMLS            D3, D22, V21.D[0]
          }
          v67 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, v94.f64[0]), v96, v94, 1), v98, v95);
          __asm { FMLA            D6, D23, V29.D[1] }
          v69 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, v99.f64[0]), v96, v99, 1), v98, *(double *)&v100);
          __asm { FMLA            D17, D23, V24.D[1] }
          v71 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v97, v103.f64[0]), v96, v103, 1), v98, v105);
          __asm { FMLA            D19, D23, V20.D[1] }
          *(_QWORD *)&v109.f64[0] = v45;
          v110 = 0x600000003;
          *(float64x2_t *)v45 = v54;
          *((_QWORD *)v45 + 2) = _D1;
          *(float64x2_t *)(v45 + 24) = v60;
          *((_QWORD *)v45 + 5) = _D16;
          *((float64x2_t *)v45 + 3) = v66;
          *((_QWORD *)v45 + 8) = *(_QWORD *)&_Q3.f64[0];
          *((_QWORD *)v45 + 9) = *(_QWORD *)&v67.f64[0];
          v73 = vzip2q_s64(v69, v71);
          v71.i64[1] = *(_QWORD *)&v67.f64[1];
          *((_QWORD *)v45 + 10) = v69.i64[0];
          *(int64x2_t *)(v45 + 88) = v71;
          *(int64x2_t *)(v45 + 104) = v73;
          *((double *)v45 + 15) = _D6 + v104 * v95;
          *((double *)v45 + 16) = _D17 + v104 * *(double *)&v100;
          *((double *)v45 + 17) = _D19 + v104 * v105;
          v107[0] = (uint64_t)v25;
          v107[1] = 2;
          v106[1] = (double *)12;
          v74 = (double *)operator new(0x60uLL, (std::align_val_t)0x20uLL);
          v106[0] = v74;
          v106[2] = (double *)0x300000003;
          *(_QWORD *)v74 = v43;
          v74[2] = 0.0;
          v74[3] = 0.0;
          v74[1] = 0.0;
          *((_QWORD *)v74 + 4) = v43;
          v74[6] = 0.0;
          v74[7] = 0.0;
          v74[5] = 0.0;
          *((_QWORD *)v74 + 8) = v43;
          v75 = sub_20F1F9A14(a1, (uint64_t)v115, (uint64_t)&v109, v107, v106, 1, 0, a2, *(double *)(a1 + 72), 0, 1, 1, 1, (int *)&v108);
          if (v106[0])
            MEMORY[0x212BC6368](v106[0], 0x1000C8000313F17);
          if (*(_QWORD *)&v109.f64[0])
            MEMORY[0x212BC6368](*(_QWORD *)&v109.f64[0], 0x1000C8000313F17);
          if (*(_QWORD *)&v115[0])
            MEMORY[0x212BC6368](*(_QWORD *)&v115[0], 0x1000C8000313F17);
          if (!v75)
            goto LABEL_46;
          ++*(_QWORD *)(a1 + 184);
          v76 = atan2(-*(double *)(a1 + 480), *(long double *)(a1 + 504));
          v77 = asin(*(long double *)(a1 + 456));
          v78 = atan2(-*(double *)(a1 + 448), *(long double *)(a1 + 440));
          v79 = *(_QWORD *)(a1 + 400);
          v80 = atomic_load((unsigned __int8 *)&qword_254A68268);
          if ((v80 & 1) == 0 && __cxa_guard_acquire(&qword_254A68268))
          {
            v93 = operator new(0x28uLL);
            v93[1] = 0;
            v93[2] = 0;
            *v93 = &off_24C9C4340;
            *((_BYTE *)v93 + 24) = 0;
            *((_BYTE *)v93 + 32) = 0;
            qword_254A68298 = (uint64_t)(v93 + 3);
            qword_254A682A0 = (uint64_t)v93;
            unk_254A682A8 = 10000000000;
            __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A68298, &dword_20E81F000);
            __cxa_guard_release(&qword_254A68268);
          }
          v81 = (_QWORD *)qword_254A68298;
          v82 = *(unsigned __int8 *)(qword_254A68298 + 8);
          v83.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (v82)
          {
            if (v83.__d_.__rep_ - *v81 < 10000000000)
            {
LABEL_46:
              operator delete(v25);
              return v75;
            }
            v84 = (std::chrono::steady_clock::time_point *)qword_254A68298;
          }
          else
          {
            v84 = (std::chrono::steady_clock::time_point *)qword_254A68298;
            if (!*(_BYTE *)(qword_254A68298 + 8))
              *(_BYTE *)(qword_254A68298 + 8) = 1;
          }
          v84->__d_.__rep_ = v83.__d_.__rep_;
          v86 = sub_210219C18();
          v87 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
          if ((v87 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
          {
            __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
            __cxa_guard_release(&qword_254A6DDD0);
          }
          v88 = v77 * 57.2957795;
          if (!atomic_load(&qword_254A5A450))
          {
LABEL_44:
            if (os_signpost_enabled((os_log_t)*v86))
            {
              v92 = *(_QWORD *)(a1 + 192);
              LODWORD(v115[0]) = 134219008;
              *(_QWORD *)((char *)v115 + 4) = v92;
              WORD2(v115[1]) = 2048;
              *(_QWORD *)((char *)&v115[1] + 6) = v79;
              HIWORD(v115[2]) = 2048;
              *(double *)v116 = v76 * 57.2957795;
              *(_WORD *)&v116[8] = 2048;
              *(double *)&v116[10] = v88;
              *(_WORD *)&v116[18] = 2048;
              *(double *)&v116[20] = v78 * 57.2957795;
              _os_signpost_emit_unreliably_with_name_impl();
            }
            goto LABEL_46;
          }
          v90 = *(_QWORD *)(a1 + 192);
          LODWORD(v115[0]) = 134219008;
          *(_QWORD *)((char *)v115 + 4) = v90;
          WORD2(v115[1]) = 2048;
          *(_QWORD *)((char *)&v115[1] + 6) = v79;
          HIWORD(v115[2]) = 2048;
          *(double *)v116 = v76 * 57.2957795;
          *(_WORD *)&v116[8] = 2048;
          *(double *)&v116[10] = v88;
          *(_WORD *)&v116[18] = 2048;
          *(double *)&v116[20] = v78 * 57.2957795;
          v91 = (void *)_os_log_send_and_compose_impl();
          *(_QWORD *)&v109.f64[0] = v91;
          sub_21021A118(v115, (uint64_t)v86, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, "Successful mag update using same rotation constrain %zu at time: %f, RPY: %lf, %lf, %lf ", 0x58uLL, (const char **)&v109);
          sub_21021A2DC((uint64_t)&stru_254A5A410, (uint64_t)v115);
          if (v123 < 0)
          {
            operator delete(__p);
            if ((v121 & 0x80000000) == 0)
            {
LABEL_31:
              if (!LOBYTE(v119))
              {
LABEL_37:
                if (v116[32] && (v116[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v116[8]);
                if ((v116[7] & 0x80000000) != 0)
                  operator delete(*(void **)&v115[1]);
                if (v91)
                  free(v91);
                goto LABEL_44;
              }
LABEL_35:
              if (SHIBYTE(v118.f64[1]) < 0)
                operator delete(v117);
              goto LABEL_37;
            }
          }
          else if ((v121 & 0x80000000) == 0)
          {
            goto LABEL_31;
          }
          operator delete(v120);
          if (!LOBYTE(v119))
            goto LABEL_37;
          goto LABEL_35;
        }
      }
    }
  }
  return 0;
}

void sub_20F204320(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_254A68268);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20F204340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  char a71;
  void *a72;
  char a73;
  void *__p;
  char a75;
  void *v75;
  void *v76;

  if (a75 < 0)
  {
    operator delete(__p);
    if ((a73 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a73 & 0x80000000) == 0)
  {
LABEL_3:
    if (!a71)
      goto LABEL_9;
LABEL_7:
    if (a70 < 0)
      operator delete(a65);
LABEL_9:
    if (a64 && a63 < 0)
      operator delete(a58);
    if (a57 < 0)
      operator delete(a52);
    if (v76)
    {
      free(v76);
      operator delete(v75);
      _Unwind_Resume(a1);
    }
    operator delete(v75);
    _Unwind_Resume(a1);
  }
  operator delete(a72);
  if (!a71)
    goto LABEL_9;
  goto LABEL_7;
}

uint64_t sub_20F2044B4(uint64_t a1, double a2, double a3, double a4, double a5, __n128 a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v10;
  double v11;
  double v13;
  double v14;
  unint64_t v15;
  long double *v16;
  float64x2_t v17;
  float64x2_t v18;
  long double *v19;
  uint64_t v20;
  int8x16_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v26;
  double v30;
  double v33;
  uint64_t v34;
  __uint64_t **v35;
  double v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  unsigned int v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  float64x2_t *v64;
  double v65;
  char v66;
  unint64_t v67;
  double v68;
  double v69;
  char v70;
  unsigned int v71;
  size_t v72;
  void *v73;
  int v74;
  size_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t *v82;
  uint64_t v85;
  float64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  double v89;
  float64x2_t v91;
  float64x2_t v93;
  double v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v98;
  float64x2_t v101;
  float64x2_t v103;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  float64x2_t v114;
  float64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  float64x2_t v119;
  int8x16_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v123;
  float64x2_t v124;
  int8x16_t v125;
  float64x2_t v126;
  int64x2_t v127;
  float64x2_t v128;
  float64x2_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  int8x16_t v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float64x2_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  _OWORD *v148;
  _OWORD *v149;
  uint64_t v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  char *v166;
  __int128 v167;
  uint64_t v168;
  char *v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  char *v174;
  __int128 v175;
  uint64_t v176;
  char *v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  char *v181;
  __int128 v182;
  uint64_t v183;
  char *v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  char *v189;
  __int128 v190;
  uint64_t v191;
  char *v192;
  __int128 v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  char *v197;
  __int128 v198;
  uint64_t v199;
  char *v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  char *v205;
  __int128 v206;
  uint64_t v207;
  char *v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  char *v212;
  __int128 v213;
  char *v214;
  __int128 v215;
  __int128 v216;
  char *v217;
  __int128 v218;
  char *v219;
  char *v220;
  __int128 v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  char *v225;
  __int128 v226;
  uint64_t v227;
  char *v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  char *v233;
  __int128 v234;
  uint64_t v235;
  char *v236;
  __int128 v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  char *v241;
  __int128 v242;
  uint64_t v243;
  char *v244;
  __int128 v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  char *v249;
  __int128 v250;
  uint64_t v251;
  char *v252;
  __int128 v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  char *v257;
  __int128 v258;
  uint64_t v259;
  char *v260;
  __int128 v261;
  uint64_t v262;
  __int128 v263;
  uint64_t v264;
  char *v265;
  __int128 v266;
  uint64_t v267;
  char *v268;
  __int128 v269;
  uint64_t v270;
  __int128 v271;
  char *v272;
  __int128 v273;
  char *v274;
  __int128 v275;
  __int128 v276;
  char *v277;
  __int128 v278;
  uint64_t v279;
  int8x16_t *v280;
  int8x16_t v281;
  uint64_t v282;
  int8x16_t *v283;
  int8x16_t v284;
  uint64_t v285;
  float64x2_t v286;
  float64x2_t v287;
  double v288;
  uint64_t v289;
  uint64_t v290;
  float64x2_t v291;
  uint64_t v292;
  _BYTE *v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  __int128 v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int8x16_t v303;
  unint64_t v304;
  int8x16_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int8x16_t v309;
  unint64_t v310;
  int8x16_t *v311;
  int8x16_t *v312;
  int8x16_t *v313;
  int8x16_t v314;
  __int128 v315;
  int8x16_t v316;
  int8x16_t v317;
  unint64_t v318;
  int8x16_t v319;
  uint64_t v320;
  unint64_t v321;
  _BYTE *v322;
  int8x16_t *v323;
  int8x16_t *v324;
  unint64_t v325;
  int8x16_t *v326;
  __int8 *v327;
  int8x16_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  _BYTE *v334;
  _QWORD *v335;
  int64_t v336;
  unint64_t v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _OWORD *v343;
  char *v344;
  uint64_t v345;
  __int128 v346;
  _BOOL8 v347;
  unsigned int v348;
  char *v349;
  int v350;
  size_t v351;
  char *v352;
  char *v353;
  int v354;
  uint64_t v355;
  char *v356;
  int v357;
  int v358;
  int v359;
  char *v360;
  char *v361;
  uint64_t v362;
  double v363;
  uint64_t v364;
  size_t v365;
  double *v366;
  double v367;
  double v368;
  double v369;
  double v370;
  double v371;
  double *v372;
  double v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  int v377;
  unint64_t v378;
  double v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  _BYTE *v389;
  unint64_t v390;
  float64_t v391;
  float64_t v392;
  unint64_t v393;
  long double *v394;
  float64x2_t v395;
  float64x2_t v396;
  long double *v397;
  uint64_t v398;
  int8x16_t v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  double v404;
  double v407;
  unint64_t v410;
  double v411;
  char *v412;
  double v413;
  double v414;
  char v415;
  size_t v416;
  void *v417;
  unsigned int v418;
  size_t v419;
  void *v420;
  void *v421;
  unint64_t v422;
  uint64_t v423;
  char *v424;
  float64x2_t v426;
  float64x2_t v427;
  char *v428;
  unint64_t v429;
  float64x2_t *v430;
  double *v433;
  unint64_t v434;
  int v435;
  int v436;
  unint64_t v438;
  float64x2_t v439;
  int64x2_t v440;
  int64x2_t v441;
  double v442;
  float64x2_t v444;
  float64x2_t v446;
  double v447;
  float64x2_t v448;
  float64x2_t v449;
  float64x2_t v451;
  float64x2_t v454;
  float64x2_t v456;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  float64x2_t v464;
  float64x2_t v465;
  float64x2_t v467;
  float64x2_t v468;
  int64x2_t v469;
  int64x2_t v470;
  int64x2_t v471;
  float64x2_t v472;
  int8x16_t v473;
  float64x2_t v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  int8x16_t v478;
  float64x2_t v479;
  int64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  int8x16_t v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  float64x2_t v495;
  uint64_t v496;
  double v497;
  _DWORD *v498;
  uint64_t v499;
  double *v500;
  double v501;
  _OWORD *v502;
  uint64_t v503;
  int v504;
  int v505;
  int v506;
  uint64_t v507;
  uint64_t v508;
  _OWORD *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  char *v514;
  __int128 v515;
  uint64_t v516;
  __int128 v517;
  uint64_t v518;
  char *v519;
  __int128 v520;
  uint64_t v521;
  char *v522;
  __int128 v523;
  uint64_t v524;
  __int128 v525;
  uint64_t v526;
  char *v527;
  __int128 v528;
  uint64_t v529;
  char *v530;
  __int128 v531;
  __int128 v532;
  uint64_t v533;
  char *v534;
  __int128 v535;
  uint64_t v536;
  char *v537;
  __int128 v538;
  uint64_t v539;
  __int128 v540;
  uint64_t v541;
  char *v542;
  __int128 v543;
  uint64_t v544;
  char *v545;
  __int128 v546;
  uint64_t v547;
  __int128 v548;
  uint64_t v549;
  char *v550;
  __int128 v551;
  uint64_t v552;
  char *v553;
  __int128 v554;
  uint64_t v555;
  __int128 v556;
  uint64_t v557;
  char *v558;
  __int128 v559;
  uint64_t v560;
  char *v561;
  __int128 v562;
  uint64_t v563;
  __int128 v564;
  char *v565;
  __int128 v566;
  char *v567;
  __int128 v568;
  __int128 v569;
  char *v570;
  __int128 v571;
  char *v572;
  char *v573;
  __int128 v574;
  uint64_t v575;
  __int128 v576;
  uint64_t v577;
  char *v578;
  __int128 v579;
  uint64_t v580;
  char *v581;
  __int128 v582;
  uint64_t v583;
  __int128 v584;
  uint64_t v585;
  char *v586;
  __int128 v587;
  uint64_t v588;
  char *v589;
  __int128 v590;
  uint64_t v591;
  __int128 v592;
  uint64_t v593;
  char *v594;
  __int128 v595;
  uint64_t v596;
  char *v597;
  __int128 v598;
  uint64_t v599;
  __int128 v600;
  uint64_t v601;
  char *v602;
  __int128 v603;
  uint64_t v604;
  char *v605;
  __int128 v606;
  uint64_t v607;
  __int128 v608;
  uint64_t v609;
  char *v610;
  __int128 v611;
  uint64_t v612;
  char *v613;
  __int128 v614;
  uint64_t v615;
  __int128 v616;
  uint64_t v617;
  char *v618;
  __int128 v619;
  uint64_t v620;
  char *v621;
  __int128 v622;
  uint64_t v623;
  __int128 v624;
  char *v625;
  __int128 v626;
  char *v627;
  __int128 v628;
  __int128 v629;
  char *v630;
  __int128 v631;
  uint64_t v632;
  int8x16_t *v633;
  int8x16_t v634;
  uint64_t v635;
  int8x16_t *v636;
  int8x16_t v637;
  uint64_t v638;
  float64x2_t v639;
  float64x2_t v640;
  double v641;
  uint64_t v642;
  char *v643;
  __int128 v644;
  uint64_t v645;
  __int128 v646;
  __int128 v647;
  uint64_t v648;
  __int128 v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  float64x2_t v653;
  __int128 v654;
  float64x2_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  unint64_t v670;
  _BYTE *v671;
  _QWORD *v672;
  int64_t v673;
  unint64_t v674;
  char *v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  _OWORD *v680;
  char *v681;
  uint64_t v682;
  __int128 v683;
  unsigned int v684;
  uint64_t v685;
  unsigned __int8 v686;
  _QWORD *v687;
  int v688;
  std::chrono::steady_clock::time_point v689;
  std::chrono::steady_clock::time_point *v690;
  unsigned int v691;
  unint64_t v692;
  BOOL v693;
  int v695;
  uint64_t v696;
  unint64_t v697;
  double v698;
  double v699;
  unint64_t v700;
  unint64_t v701;
  unint64_t v702;
  double v703;
  double v704;
  char *v706;
  char *v707;
  int v708;
  size_t v709;
  char *v710;
  char *v711;
  int v712;
  float64_t v713;
  char *v714;
  int v715;
  int v716;
  int v717;
  char *v718;
  char *v719;
  uint64_t v720;
  double v721;
  uint64_t v722;
  size_t v723;
  double *v724;
  double v725;
  double v726;
  double v727;
  double v728;
  double *v729;
  double v730;
  int v731;
  uint64_t v732;
  uint64_t v733;
  int v734;
  unint64_t v735;
  double v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  unint64_t v743;
  uint64_t v744;
  _BYTE *v745;
  uint64_t *v746;
  unsigned __int8 v747;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  char *v753;
  size_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t i;
  uint64_t v758;
  unsigned int v759;
  unint64_t v760;
  BOOL v761;
  int v763;
  uint64_t v764;
  double v765;
  double v766;
  double v767;
  uint64_t v768;
  unsigned __int8 v769;
  _QWORD *v770;
  int v771;
  std::chrono::steady_clock::time_point v772;
  std::chrono::steady_clock::time_point *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t *v778;
  unsigned __int8 v779;
  double v780;
  uint64_t v782;
  char *v783;
  size_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t j;
  uint64_t v788;
  uint64_t v789;
  _QWORD *v790;
  _QWORD *v791;
  uint64_t v792;
  void *v793;
  BOOL v794;
  uint64_t v795;
  char *v796;
  char *v797;
  float64x2_t v798;
  float64x2_t v799;
  float64x2_t *v800;
  float64x2_t *v801;
  uint64_t v802;
  float64x2_t *v803;
  uint64_t v804;
  float64x2_t *v805;
  char *v806;
  long double *v807;
  long double *v808;
  float64x2_t *v809;
  char *v810;
  float64x2_t *v811;
  uint64_t v812;
  uint64_t *__len;
  uint64_t __lena;
  size_t __lenb;
  float64x2_t v817;
  unint64_t v818;
  float64x2_t v819;
  double *v820;
  float64x2_t v821;
  char *v822;
  float64x2_t v823;
  char *v824;
  __int128 v825;
  uint64_t v826;
  char v827;
  __uint64_t *v828;
  __uint64_t **v829;
  float64x2_t *v830;
  double v831;
  uint64_t p_p;
  uint64_t v833;
  __uint64_t v834[2];
  uint64_t v835;
  void *__p;
  uint64_t v837;
  uint64_t v838;
  float64x2_t v839;
  uint64_t v840;
  void *v841;
  _QWORD *v842;
  char *v843;
  _BYTE v844[80];
  __int128 v845;
  __int128 v846;
  __int128 v847;
  __int128 v848;
  double v849[2];
  _BYTE v850[72];
  float64_t v851;
  double *v852;
  double v853[3];
  _BYTE v854[24];
  _BYTE v855[40];
  void *v856;
  float64x2_t v857;
  _BYTE v858[32];
  float64x2_t v859;
  _OWORD v860[5];
  float64x2_t v861;
  float64x2_t v862;
  float64x2_t v863;
  float64x2_t v864;
  uint64_t v865;
  uint64_t v866;

  v866 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 680);
  v7 = *(_QWORD *)(a1 + 672);
  v8 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 4);
  if (v8 < 2)
    return 0;
  v10 = *(double *)(a1 + 400);
  v11 = *(double *)(v6 - 144);
  _NF = v11 < v10;
  if (v11 != v10)
  {
    v13 = v11 - v10;
    v14 = v10 - v11;
    if (!_NF)
      v14 = v13;
    if (v14 > 0.00001)
      return 0;
  }
  v15 = *(_QWORD *)(a1 + 152);
  if (v15 >= v8)
    return 0;
  if (!*(_BYTE *)(a1 + 145))
  {
    sub_20F214DA8((uint64_t *)(a1 + 672), v15, (uint64_t)&v825, *(double *)(a1 + 96), *(double *)(a1 + 88), a6);
    if (v827)
    {
      v40 = *(_QWORD *)(a1 + 400);
      v41 = *(_OWORD *)(a1 + 296);
      *(_OWORD *)&v844[32] = *(_OWORD *)(a1 + 280);
      *(_OWORD *)&v844[48] = v41;
      v42 = *(_OWORD *)(a1 + 376);
      v43 = *(_OWORD *)(a1 + 344);
      v847 = *(_OWORD *)(a1 + 360);
      v848 = v42;
      v44 = *(_OWORD *)(a1 + 328);
      *(_OWORD *)&v844[64] = *(_OWORD *)(a1 + 312);
      v845 = v44;
      v846 = v43;
      v45 = *(_OWORD *)(a1 + 264);
      *(_OWORD *)v844 = *(_OWORD *)(a1 + 248);
      *(_OWORD *)&v844[16] = v45;
      v46 = &v844[8 * *(unsigned int *)(a1 + 632)];
      v47 = v825;
      *((_QWORD *)v46 + 2) = v826;
      *(_OWORD *)v46 = v47;
      sub_20F1F1160(a1 + 248, (uint64_t)v844);
      *(_QWORD *)(a1 + 400) = v40;
      v48 = *(_QWORD *)(a1 + 632);
      v50 = *(unsigned int *)(a1 + 240);
      v49 = *(unsigned int *)(a1 + 244);
      v51 = *(_QWORD *)(a1 + 224);
      if ((_DWORD)v49)
      {
        v52 = v48;
        do
        {
          v53 = (_QWORD *)(v51 + 8 * v52);
          *v53 = 0;
          v53[1] = 0;
          v53[2] = 0;
          v52 += v50;
          --v49;
        }
        while (v49);
      }
      v54 = v50 * v48;
      if ((_DWORD)v50)
      {
        bzero((void *)(v51 + 8 * v54), 8 * v50);
        bzero((void *)(v51 + 8 * (v50 + v50 * v48)), 8 * v50);
        bzero((void *)(v51 + 8 * ((v48 + 2) * v50)), 8 * v50);
        v55 = *(_QWORD *)(a1 + 136);
        v56 = (_QWORD *)(v51 + 8 * (v54 + v48));
        v57 = (unint64_t)(v50 - 3) << 32;
        v58 = v56;
        do
        {
          *v58 = 0;
          v59 = HIDWORD(v57);
          v60 = (int)v57 < 2;
          if ((int)v57 < 2)
            v59 = 0;
          v61 = &v58[v59];
          v62 = (v57 + 1);
          v63 = v57 & 0xFFFFFFFF00000000;
          if (!v60)
            v62 = 0;
          v57 = v62 | v63;
          v58 = v61 + 1;
        }
        while (v58 != &v56[(3 * v50)]);
        v64 = (float64x2_t *)a1;
      }
      else
      {
        v55 = *(_QWORD *)(a1 + 136);
        v56 = (_QWORD *)(v51 + 8 * (v54 + v48));
        v64 = (float64x2_t *)a1;
      }
      *v56 = v55;
      v56[(v50 + 1)] = v55;
      v56[(2 * (v50 + 1))] = v55;
      v390 = *(_QWORD *)&v64[9].f64[1];
      v391 = v64[42].f64[1];
      v392 = v64[42].f64[0];
      v393 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4);
      if (v390 < v393)
      {
        v394 = (long double *)operator new((7635497416 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
        v397 = v394;
        if ((_DWORD)v393)
          bzero(v394, 7635497416 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4));
        v811 = v64 + 38;
        if (*(_QWORD *)&v391 != *(_QWORD *)&v392)
        {
          v398 = 0;
          v395.f64[0] = v64[39].f64[0];
          v823 = v395;
          v399 = *(int8x16_t *)v811;
          v400 = vextq_s8(v399, v399, 8uLL).u64[0];
          if (v393 <= 1)
            v401 = 1;
          else
            v401 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4);
          v402 = *(_QWORD *)&v392 + 64;
          v399.i64[1] = v400;
          v819 = (float64x2_t)v399;
          do
          {
            _D2 = *(_QWORD *)(v402 + 16);
            v396.f64[0] = *(float64_t *)(v402 + 64);
            *(_QWORD *)&v404 = *(_OWORD *)&vsubq_f64(v396, v823);
            _Q7 = vsubq_f64(*(float64x2_t *)(v402 + 48), v819);
            __asm { FMLA            D0, D2, V7.D[1] }
            v407 = vmlad_n_f64(_D0, *(double *)(v402 + 40), v404);
            _D3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v402 - 24), *(double *)&_Q7), *(float64x2_t *)v402, _Q7, 1), *(float64x2_t *)(v402 + 24), v404).f64[1];
            __asm { FMLA            D2, D3, V1.D[1] }
            v397[v398++] = acos(v407 * (1.0 / sqrt(_D2 + v407 * v407))) * 57.2957795;
            v402 += 144;
          }
          while (v401 != v398);
          v410 = 0;
          v411 = v397[v390];
          v412 = (char *)(*(_QWORD *)&v392 + 136);
          do
          {
            v413 = v397[v410];
            if (v411 == v413
              || (v411 >= v413 ? (v414 = v411 - v413) : (v414 = v413 - v411), v414 <= *(double *)(a1 + 88)))
            {
              if (v393 <= v410)
                goto LABEL_156;
              v415 = 1;
            }
            else
            {
              if (v393 <= v410)
                goto LABEL_156;
              v415 = 0;
            }
            *v412 = v415;
LABEL_156:
            ++v410;
            v412 += 144;
          }
          while (v401 != v410);
        }
        v416 = (8 * (-1431655765 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4) - 3) + 31) & 0xFFFFFFFE0;
        v842 = (_QWORD *)(v416 >> 3);
        v808 = v397;
        v417 = operator new(v416, (std::align_val_t)0x20uLL);
        v841 = v417;
        LODWORD(v843) = -1431655765 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4) - 3;
        if (-1431655765 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4) != 3)
          bzero(v417, 8 * (-1431655765 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4) - 3));
        v418 = (-1431655765 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4) - 3) * v50;
        v419 = (8 * v418 + 31) & 0xFFFFFFFE0;
        *(_QWORD *)&v839.f64[1] = v419 >> 3;
        v420 = operator new(v419, (std::align_val_t)0x20uLL);
        *(_QWORD *)&v839.f64[0] = v420;
        v795 = -1431655765 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4) - 3;
        LODWORD(v840) = -1431655765 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4) - 3;
        HIDWORD(v840) = v50;
        v421 = v420;
        if (v418)
          bzero(v420, 8 * v418);
        v793 = v421;
        v422 = *(_QWORD *)&v392 + 144 * v390;
        v423 = *(_QWORD *)(v422 + 32);
        v820 = (double *)(v422 + 32);
        v424 = (char *)operator new(0x10uLL);
        v428 = v424;
        v837 = (uint64_t)(v424 + 16);
        v838 = (uint64_t)(v424 + 16);
        *(_QWORD *)v424 = v48;
        *((_QWORD *)v424 + 1) = v423;
        v429 = v390 + 1;
        __p = v424;
        if (v390 + 1 >= v393)
        {
LABEL_223:
          v347 = 0;
          goto LABEL_224;
        }
        __lenb = 0;
        v430 = (float64x2_t *)(*(_QWORD *)&v392 + 144 * v390);
        v801 = (float64x2_t *)((char *)v430 + 40);
        v805 = v430 + 7;
        _Q1.i64[1] = 0x3FF0000000000000;
        __asm { FMOV            V0.2D, #1.0 }
        v799 = _Q0;
        v792 = 16 * v795;
        v797 = v424 + 16;
        v824 = v424 + 16;
        v433 = (double *)a1;
        while (1)
        {
          v434 = *(_QWORD *)&v392 + 144 * v429;
          v435 = *(unsigned __int8 *)(v434 + 137);
          v436 = *(unsigned __int8 *)(v434 + 136);
          if (!v435 && v436 != 0)
            break;
LABEL_173:
          if (++v429 >= 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)&v391 - *(_QWORD *)&v392) >> 4))
          {
            v684 = __lenb;
            if (__lenb < 3)
              goto LABEL_223;
            sub_20F20CEEC(&v841, __lenb, 1u);
            sub_20F2030A0((unsigned int *)&v839, __lenb, HIDWORD(v840));
            v706 = (char *)__p;
            v707 = v824;
            v802 = v824 - (_BYTE *)__p;
            v708 = 3 * ((unint64_t)(v824 - (_BYTE *)__p) >> 3);
            v709 = (8 * (v708 * __lenb) + 31) & 0xFFFFFFFE0;
            *(_QWORD *)&v850[8] = v709 >> 3;
            v710 = (char *)operator new(v709, (std::align_val_t)0x20uLL);
            v711 = v710;
            *(_QWORD *)v850 = v710;
            *(_DWORD *)&v850[16] = __lenb;
            *(_DWORD *)&v850[20] = v708;
            v806 = v706;
            if (v706 != v824)
            {
              v712 = v840;
              v713 = v839.f64[0];
              v812 = 8 * v840;
              v714 = v706 + 8;
              v715 = 2;
              v716 = 0;
              v717 = *(_DWORD *)v806;
              if (*(char **)&v839.f64[0] != v710)
                goto LABEL_287;
LABEL_289:
              v718 = (char *)operator new((24 * v684 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
              v719 = v718;
              if (v712)
              {
                memmove(v718, (const void *)(*(_QWORD *)&v713 + 8 * (v712 * v717)), v812);
                memmove(&v719[v812], (const void *)(*(_QWORD *)&v713 + 8 * (v712 + v712 * v717)), v812);
                memmove(&v719[v812 + v812], (const void *)(*(_QWORD *)&v713 + 8 * ((v717 + 2) * v712)), v812);
              }
              if (v684)
              {
                memmove((void *)(*(_QWORD *)&v713 + 8 * v716 * v684), v719, 8 * v684);
                v720 = 8 * (int)v684;
                memmove((void *)(*(_QWORD *)&v713 + 8 * (v715 - 1) * v684), &v719[v720], 8 * v684);
                memmove((void *)(*(_QWORD *)&v713 + 8 * v715 * v684), &v719[v720 + v720], 8 * v684);
              }
              MEMORY[0x212BC6368](v719, 0x1000C8000313F17);
              v707 = v824;
              while (v714 != v707)
              {
                v684 = *(_DWORD *)&v850[16];
                v711 = *(char **)v850;
                v715 += 3;
                v714 += 8;
                v716 = v715 - 2;
                v717 = *((_DWORD *)v714 - 2);
                if (*(_QWORD *)&v713 == *(_QWORD *)v850)
                  goto LABEL_289;
LABEL_287:
                if (v712)
                {
                  memmove(&v711[8 * v716 * v684], (const void *)(*(_QWORD *)&v713 + 8 * (v712 * v717)), v812);
                  v707 = v824;
                  memmove(&v711[8 * (v715 - 1) * v684], (const void *)(*(_QWORD *)&v713 + 8 * (v712 + v712 * v717)), v812);
                  memmove(&v711[8 * v715 * v684], (const void *)(*(_QWORD *)&v713 + 8 * ((v717 + 2) * v712)), v812);
                }
              }
            }
            v721 = *(double *)(a1 + 104);
            v722 = v843;
            v723 = (8 * (v722 * v722) + 31) & 0xFFFFFFFE0;
            *(_QWORD *)&v861.f64[1] = v723 >> 3;
            v724 = (double *)operator new(v723, (std::align_val_t)0x20uLL);
            v729 = v724;
            *(_QWORD *)&v861.f64[0] = v724;
            LODWORD(v862.f64[0]) = v722;
            HIDWORD(v862.f64[0]) = v722;
            if ((_DWORD)v722 * (_DWORD)v722)
              bzero(v724, 8 * (v722 * v722));
            if (!(_DWORD)v722)
            {
              v831 = 0.0;
              goto LABEL_405;
            }
            v730 = v721 + v721;
            v731 = v722 + 1;
            v397 = v808;
            v732 = 0;
            if ((_DWORD)v722 == 1)
              goto LABEL_299;
            v759 = v731 < 0 ? ~(_DWORD)v722 : v722 + 1;
            v760 = (v722 - 1) * (unint64_t)v759;
            v761 = (_DWORD)v722 != -1 && (unint64_t)(v722 - 1) >> 32 != 0;
            if ((_DWORD)v760 && v731 < 0)
              goto LABEL_299;
            if ((v760 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_299;
            if (v761)
              goto LABEL_299;
            v763 = 0;
            v732 = v722 & 0xFFFFFFFE;
            v764 = v732;
            do
            {
              v729[v763] = v730;
              v729[v731 + v763] = v730;
              v763 += 2 * v722 + 2;
              v764 -= 2;
            }
            while (v764);
            if (v732 != v722)
            {
LABEL_299:
              v733 = v722 - v732;
              v734 = v731 * v732;
              do
              {
                v729[v734] = v730;
                v734 += v731;
                --v733;
              }
              while (v733);
            }
            v831 = (double)v722;
            v735 = (unint64_t)(COERCE__INT64(fabs((double)v722)) - 0x10000000000000) >> 53;
            if ((COERCE__INT64((double)v722) <= -1 || v735 >= 0x3FF)
              && COERCE__INT64((double)v722) != 0)
            {
LABEL_405:
              sub_20F20D054("boost::math::chi_squared_distribution<%1%>::chi_squared_distribution", "Degrees of freedom argument is %1%, but must be > 0 !");
            }
            sub_20F20DACC((double)v722 * 0.5, 0.95, v725, v726, v727, v728);
            v853[0] = *v820;
            *(_QWORD *)v854 = v806;
            *(_QWORD *)&v854[8] = v802 >> 3;
            v347 = sub_20F1F9A14(a1, (uint64_t)&v841, (uint64_t)v850, (uint64_t *)v854, (double **)&v861, 1, 0, 1, v738 + v738, 1, 1, 1, 0, (int *)v853);
            if (!v347)
              goto LABEL_388;
            ++*(_QWORD *)(a1 + 192);
            v739 = *(_QWORD *)(a1 + 680);
            v740 = *(_QWORD *)(a1 + 672);
            v741 = v739 - v740;
            if (v739 != v740)
            {
              v742 = 0;
              v743 = v741 / 144;
              if (v743 <= 1)
                v744 = 1;
              else
                v744 = v743;
              v745 = (_BYTE *)(v740 + 137);
              do
              {
                if (v743 > v742 && *(v745 - 1))
                  *v745 = 1;
                ++v742;
                v745 += 144;
              }
              while (v744 != v742);
            }
            v765 = atan2(-*(double *)(a1 + 480), *(long double *)(a1 + 504));
            v766 = asin(*(long double *)(a1 + 456));
            v767 = atan2(-*(double *)(a1 + 448), *(long double *)(a1 + 440));
            v768 = *(_QWORD *)(a1 + 400);
            v769 = atomic_load((unsigned __int8 *)&qword_254A68260);
            if ((v769 & 1) == 0 && __cxa_guard_acquire(&qword_254A68260))
            {
              v791 = operator new(0x28uLL);
              v791[1] = 0;
              v791[2] = 0;
              *v791 = &off_24C9C4340;
              *((_BYTE *)v791 + 24) = 0;
              *((_BYTE *)v791 + 32) = 0;
              qword_254A68280 = (uint64_t)(v791 + 3);
              qword_254A68288 = (uint64_t)v791;
              unk_254A68290 = 1000000000;
              __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A68280, &dword_20E81F000);
              __cxa_guard_release(&qword_254A68260);
              v397 = v808;
            }
            v770 = (_QWORD *)qword_254A68280;
            v771 = *(unsigned __int8 *)(qword_254A68280 + 8);
            v772.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            if (v771)
            {
              if (v772.__d_.__rep_ - *v770 >= 1000000000)
              {
                v773 = (std::chrono::steady_clock::time_point *)qword_254A68280;
                goto LABEL_366;
              }
LABEL_388:
              if (*(_QWORD *)&v861.f64[0])
                MEMORY[0x212BC6368](*(_QWORD *)&v861.f64[0], 0x1000C8000313F17);
              if (*(_QWORD *)v850)
                MEMORY[0x212BC6368](*(_QWORD *)v850, 0x1000C8000313F17);
LABEL_224:
              if (__p)
                operator delete(__p);
              if (*(_QWORD *)&v839.f64[0])
                MEMORY[0x212BC6368](*(_QWORD *)&v839.f64[0], 0x1000C8000313F17);
              if (v841)
                MEMORY[0x212BC6368](v841, 0x1000C8000313F17);
              MEMORY[0x212BC6368](v397, 0x1000C8000313F17);
              if (!v347)
                return v347;
              ++*(_QWORD *)(a1 + 176);
              v685 = *(_QWORD *)(a1 + 400);
              v686 = atomic_load((unsigned __int8 *)&qword_254A68270);
              if ((v686 & 1) == 0 && __cxa_guard_acquire(&qword_254A68270))
              {
                v790 = operator new(0x28uLL);
                v790[1] = 0;
                v790[2] = 0;
                *v790 = &off_24C9C4340;
                *((_BYTE *)v790 + 24) = 0;
                *((_BYTE *)v790 + 32) = 0;
                qword_254A682B0 = (uint64_t)(v790 + 3);
                qword_254A682B8 = (uint64_t)v790;
                unk_254A682C0 = 1000000000;
                __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A682B0, &dword_20E81F000);
                __cxa_guard_release(&qword_254A68270);
              }
              v687 = (_QWORD *)qword_254A682B0;
              v688 = *(unsigned __int8 *)(qword_254A682B0 + 8);
              v689.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
              if (v688)
              {
                if (v689.__d_.__rep_ - *v687 >= 1000000000)
                {
                  v690 = (std::chrono::steady_clock::time_point *)qword_254A682B0;
                  goto LABEL_321;
                }
LABEL_363:
                *(_WORD *)(a1 + 144) = 256;
                return 1;
              }
              v690 = (std::chrono::steady_clock::time_point *)qword_254A682B0;
              if (!*(_BYTE *)(qword_254A682B0 + 8))
                *(_BYTE *)(qword_254A682B0 + 8) = 1;
LABEL_321:
              v690->__d_.__rep_ = v689.__d_.__rep_;
              v746 = sub_210219C18();
              v747 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
              if ((v747 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
              {
                __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
                __cxa_guard_release(&qword_254A6DDD0);
              }
              if (atomic_load(&qword_254A5A450))
              {
                v749 = *(_QWORD *)(a1 + 176);
                v750 = *(_QWORD *)(a1 + 608);
                v751 = *(_QWORD *)(a1 + 616);
                v752 = *(_QWORD *)(a1 + 624);
                *(_DWORD *)v854 = 134219008;
                *(_QWORD *)&v854[4] = v749;
                *(_WORD *)&v854[12] = 2048;
                *(_QWORD *)&v854[14] = v685;
                *(_WORD *)&v854[22] = 2048;
                *(_QWORD *)v855 = v750;
                *(_WORD *)&v855[8] = 2048;
                *(_QWORD *)&v855[10] = v751;
                *(_WORD *)&v855[18] = 2048;
                *(_QWORD *)&v855[20] = v752;
                v753 = (char *)_os_log_send_and_compose_impl();
                v754 = strlen(v753);
                *(_QWORD *)v850 = 0;
                pthread_threadid_np(0, (__uint64_t *)v850);
                v755 = *(_QWORD *)v850;
                timespec_get((timespec *)v850, 1);
                sub_210219E20(v854, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v746 + 1), (__int128 *)(v746 + 5), "Successful mag bias init %zu at time: %f, value: %lf, %lf, %lf ", 0x3FuLL, v753, v754, v755, v850);
                std::mutex::lock(&stru_254A5A410);
                v756 = qword_254A5A458;
                for (i = unk_254A5A460; v756 != i; v756 += 40)
                {
                  v758 = *(_QWORD *)(v756 + 32);
                  if (!v758)
                    sub_20E86D37C();
                  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v758 + 48))(v758, v854);
                }
                std::mutex::unlock(&stru_254A5A410);
                if (SBYTE7(v860[0]) < 0)
                {
                  operator delete(*(void **)&v859.f64[0]);
                  if ((v858[31] & 0x80000000) != 0)
                    goto LABEL_351;
LABEL_328:
                  if (v858[0])
                  {
LABEL_352:
                    if (SHIBYTE(v857.f64[1]) < 0)
                      operator delete(v856);
                  }
                }
                else
                {
                  if ((v858[31] & 0x80000000) == 0)
                    goto LABEL_328;
LABEL_351:
                  operator delete(*(void **)&v858[8]);
                  if (v858[0])
                    goto LABEL_352;
                }
                if (v855[32] && (v855[31] & 0x80000000) != 0)
                  operator delete(*(void **)&v855[8]);
                if ((v855[7] & 0x80000000) != 0)
                  operator delete(*(void **)&v854[8]);
                if (v753)
                  free(v753);
              }
              if (os_signpost_enabled((os_log_t)*v746))
              {
                v774 = *(_QWORD *)(a1 + 176);
                v775 = *(_QWORD *)(a1 + 608);
                v776 = *(_QWORD *)(a1 + 616);
                v777 = *(_QWORD *)(a1 + 624);
                *(_DWORD *)v854 = 134219008;
                *(_QWORD *)&v854[4] = v774;
                *(_WORD *)&v854[12] = 2048;
                *(_QWORD *)&v854[14] = v685;
                *(_WORD *)&v854[22] = 2048;
                *(_QWORD *)v855 = v775;
                *(_WORD *)&v855[8] = 2048;
                *(_QWORD *)&v855[10] = v776;
                *(_WORD *)&v855[18] = 2048;
                *(_QWORD *)&v855[20] = v777;
                _os_signpost_emit_unreliably_with_name_impl();
              }
              goto LABEL_363;
            }
            v773 = (std::chrono::steady_clock::time_point *)qword_254A68280;
            if (!*(_BYTE *)(qword_254A68280 + 8))
              *(_BYTE *)(qword_254A68280 + 8) = 1;
LABEL_366:
            v773->__d_.__rep_ = v772.__d_.__rep_;
            v778 = sub_210219C18();
            v779 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
            if ((v779 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
            {
              __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
              __cxa_guard_release(&qword_254A6DDD0);
            }
            v780 = v766 * 57.2957795;
            if (atomic_load(&qword_254A5A450))
            {
              v782 = *(_QWORD *)(a1 + 192);
              *(_DWORD *)v854 = 134219008;
              *(_QWORD *)&v854[4] = v782;
              *(_WORD *)&v854[12] = 2048;
              *(_QWORD *)&v854[14] = v768;
              *(_WORD *)&v854[22] = 2048;
              *(double *)v855 = v765 * 57.2957795;
              *(_WORD *)&v855[8] = 2048;
              *(double *)&v855[10] = v780;
              *(_WORD *)&v855[18] = 2048;
              *(double *)&v855[20] = v767 * 57.2957795;
              v783 = (char *)_os_log_send_and_compose_impl();
              v784 = strlen(v783);
              v834[0] = 0;
              pthread_threadid_np(0, v834);
              v785 = v834[0];
              timespec_get((timespec *)v834, 1);
              sub_210219E20(v854, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v778 + 1), (__int128 *)(v778 + 5), "Successful init mag update using relative constrain %zu at time: %f, RPY: %lf, %lf, %lf ", 0x58uLL, v783, v784, v785, v834);
              std::mutex::lock(&stru_254A5A410);
              v786 = qword_254A5A458;
              for (j = unk_254A5A460; v786 != j; v786 += 40)
              {
                v788 = *(_QWORD *)(v786 + 32);
                if (!v788)
                  sub_20E86D37C();
                (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v788 + 48))(v788, v854);
              }
              std::mutex::unlock(&stru_254A5A410);
              if (SBYTE7(v860[0]) < 0)
              {
                operator delete(*(void **)&v859.f64[0]);
                if ((v858[31] & 0x80000000) != 0)
                  goto LABEL_376;
LABEL_373:
                if (v858[0])
                {
LABEL_377:
                  if (SHIBYTE(v857.f64[1]) < 0)
                    operator delete(v856);
                }
              }
              else
              {
                if ((v858[31] & 0x80000000) == 0)
                  goto LABEL_373;
LABEL_376:
                operator delete(*(void **)&v858[8]);
                if (v858[0])
                  goto LABEL_377;
              }
              if (v855[32] && (v855[31] & 0x80000000) != 0)
                operator delete(*(void **)&v855[8]);
              if ((v855[7] & 0x80000000) != 0)
                operator delete(*(void **)&v854[8]);
              if (v783)
                free(v783);
            }
            if (os_signpost_enabled((os_log_t)*v778))
            {
              v789 = *(_QWORD *)(a1 + 192);
              *(_DWORD *)v854 = 134219008;
              *(_QWORD *)&v854[4] = v789;
              *(_WORD *)&v854[12] = 2048;
              *(_QWORD *)&v854[14] = v768;
              *(_WORD *)&v854[22] = 2048;
              *(double *)v855 = v765 * 57.2957795;
              *(_WORD *)&v855[8] = 2048;
              *(double *)&v855[10] = v780;
              *(_WORD *)&v855[18] = 2048;
              *(double *)&v855[20] = v767 * 57.2957795;
              _os_signpost_emit_unreliably_with_name_impl();
            }
            goto LABEL_388;
          }
        }
        v438 = *(_QWORD *)&v392 + 144 * v429;
        v439.f64[0] = *(float64_t *)(v438 + 56);
        v440 = *(int64x2_t *)(v438 + 40);
        v441 = *(int64x2_t *)(v438 + 64);
        v442 = *(double *)(v438 + 104);
        _Q18 = *(float64x2_t *)(v438 + 88);
        _Q1.i64[0] = *(_QWORD *)&v801[1].f64[0];
        v444 = *v801;
        _D2 = v801[2].f64[1];
        v446 = *(float64x2_t *)((char *)v801 + 24);
        v447 = v801[4].f64[0];
        v448 = v801[3];
        v449 = (float64x2_t)vzip1q_s64(v440, v441);
        _Q7 = (float64x2_t)vzip2q_s64(v440, v441);
        v439.f64[1] = *(float64_t *)(v438 + 80);
        v451 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v449, v801->f64[0]), _Q7, *v801, 1), v439, *(double *)_Q1.i64);
        _Q16 = vmulq_f64(_Q18, *v801);
        _D21 = v801->f64[1];
        __asm { FMLA            D16, D21, V18.D[1] }
        _Q16.f64[0] = _Q16.f64[0] + v442 * *(double *)_Q1.i64;
        v454 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v449, v446.f64[0]), _Q7, v446, 1), v439, _D2);
        _Q22 = vmulq_f64(_Q18, v446);
        _Q23.f64[0] = v801[2].f64[0];
        __asm { FMLA            D22, D23, V18.D[1] }
        _Q22.f64[0] = _Q22.f64[0] + v442 * _D2;
        v456 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v449, v448.f64[0]), _Q7, v448, 1), v439, v447);
        _Q6 = vmulq_f64(_Q18, v448);
        _Q7.f64[0] = v801[3].f64[1];
        __asm { FMLA            D6, D7, V18.D[1] }
        _Q6.f64[0] = _Q6.f64[0] + v442 * v447;
        _Q7.f64[0] = v805[1].f64[0];
        _Q17 = *v805;
        __asm { FMLA            D23, D22, V17.D[1] }
        _Q23.f64[0] = _Q23.f64[0] + _Q6.f64[0] * _Q7.f64[0];
        v426.f64[0] = *(float64_t *)(v438 + 128);
        v459 = vsubq_f64(*(float64x2_t *)(v438 + 112), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v451, v805->f64[0]), v454, *v805, 1), v456, _Q7.f64[0]));
        v460 = vsubq_f64(v426, _Q23);
        v461 = vsubq_f64((float64x2_t)xmmword_21030D320, v451);
        *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q16);
        v462 = vsubq_f64((float64x2_t)xmmword_2102DD520, v454);
        *(_QWORD *)&_Q22.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q22);
        v463 = vsubq_f64((float64x2_t)0, v456);
        v464.f64[1] = v799.f64[1];
        *(_QWORD *)&_Q6.f64[0] = *(_OWORD *)&vsubq_f64(v799, _Q6);
        v464.f64[0] = v811[1].f64[0];
        v465 = *v811;
        v427.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q16.f64[0], v811->f64[0]), v811->f64[1], _Q22.f64[0]), v464.f64[0], _Q6.f64[0]);
        *(float64x2_t *)v834 = vsubq_f64(v459, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v461, v811->f64[0]), v462, *v811, 1), v463, v464.f64[0]));
        v835 = *(_OWORD *)&vsubq_f64(v460, v427);
        *(_QWORD *)&_Q7.f64[0] = *(_OWORD *)&vsubq_f64(_Q7, v464);
        _Q17 = vsubq_f64(_Q17, v465);
        v467 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v444, _Q17.f64[0]), v446, _Q17, 1), v448, _Q7.f64[0]);
        __asm { FMLA            D1, D2, V17.D[1] }
        *(double *)_Q1.i64 = vmlad_n_f64(*(double *)_Q1.i64, v447, _Q7.f64[0]);
        memset(v860, 0, sizeof(v860));
        *(_OWORD *)&v858[16] = 0u;
        v859 = 0u;
        v857 = 0u;
        *(_OWORD *)v858 = 0u;
        *(float64x2_t *)v854 = v461;
        *(float64x2_t *)v855 = v462;
        *(float64_t *)&v854[16] = _Q16.f64[0];
        *(float64_t *)&v855[16] = _Q22.f64[0];
        *(float64x2_t *)&v855[24] = v463;
        v856 = *(void **)&_Q6.f64[0];
        v468.f64[0] = *(float64_t *)(v438 + 56);
        v469 = *(int64x2_t *)(v438 + 40);
        v470 = *(int64x2_t *)(v438 + 64);
        v448.f64[0] = *(float64_t *)(v438 + 104);
        v471 = *(int64x2_t *)(v438 + 88);
        v472 = (float64x2_t)vzip1q_s64(v469, v470);
        v468.f64[1] = *(float64_t *)(v438 + 80);
        v473 = (int8x16_t)vzip2q_s64(v469, v470);
        v474 = (float64x2_t)vextq_s8(v473, (int8x16_t)vdupq_laneq_s64(v471, 1), 8uLL);
        v475 = (float64x2_t)vzip1q_s64(v471, (int64x2_t)v473);
        v476 = vnegq_f64(v472);
        v477 = vnegq_f64(v475);
        v478 = (int8x16_t)vnegq_f64(v468);
        v479 = vnegq_f64(v474);
        v480 = (int64x2_t)vnegq_f64(v448);
        v481 = (float64x2_t)vzip1q_s64((int64x2_t)_Q1, (int64x2_t)v467);
        v482 = (float64x2_t)vextq_s8((int8x16_t)v479, v478, 8uLL);
        v483 = (float64x2_t)vextq_s8((int8x16_t)v477, (int8x16_t)v479, 8uLL);
        v484 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v478, 1), v480);
        v485 = (float64x2_t)vextq_s8((int8x16_t)v467, _Q1, 8uLL);
        v486 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v476.f64[0], 0);
        *(_QWORD *)&v486.f64[0] = v480.i64[0];
        v487 = vmulq_n_f64(v483, *(double *)_Q1.i64);
        *(float64x2_t *)v858 = vsubq_f64(vmulq_f64(v481, v482), vmulq_f64(v485, v486));
        v859 = vsubq_f64(vmulq_laneq_f64(v476, v467, 1), vmulq_n_f64(v483, v467.f64[0]));
        *(_QWORD *)&v860[0] = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v477, v467, 1), vmulq_laneq_f64(v467, v479, 1));
        v857 = vaddq_f64(v487, vmulq_laneq_f64(v468, v467, 1));
        *(float64x2_t *)&v858[16] = vsubq_f64(vmulq_n_f64(v484, v467.f64[0]), vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v476, (int8x16_t)v477, 8uLL), *(double *)_Q1.i64));
        v488 = *(float64x2_t *)(v438 + 88);
        v489 = *(float64x2_t *)(v438 + 56);
        v490 = *(float64x2_t *)(v438 + 40);
        v487.f64[0] = *(float64_t *)(v438 + 104);
        v491 = *(int8x16_t *)(v438 + 72);
        v492 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v490.f64[0], 0);
        v493 = (float64x2_t)vextq_s8((int8x16_t)v490, v491, 8uLL);
        v490.f64[1] = *(float64_t *)(v438 + 64);
        v494 = (float64x2_t)vextq_s8((int8x16_t)v488, (int8x16_t)v489, 8uLL);
        v495 = (float64x2_t)vextq_s8((int8x16_t)v489, (int8x16_t)v488, 8uLL);
        v489.f64[1] = *(float64_t *)(v438 + 80);
        v492.f64[0] = v487.f64[0];
        *((_QWORD *)&v860[4] + 1) = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v488, v467, 1), vmulq_laneq_f64(v467, v488, 1));
        *(float64x2_t *)((char *)&v860[2] + 8) = vsubq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v491, 1), (int64x2_t)v487), v467.f64[0]), vmulq_n_f64(v495, *(double *)_Q1.i64));
        *(float64x2_t *)((char *)&v860[3] + 8) = vsubq_f64(vmulq_laneq_f64(v490, v467, 1), vmulq_n_f64(v493, v467.f64[0]));
        *(float64x2_t *)((char *)v860 + 8) = vsubq_f64(vmulq_n_f64(v493, *(double *)_Q1.i64), vmulq_laneq_f64(v489, v467, 1));
        *(float64x2_t *)((char *)&v860[1] + 8) = vsubq_f64(vmulq_f64(v481, v494), vmulq_f64(v485, v492));
        v496 = *((_QWORD *)v433 + 79);
        v497 = *v820;
        v499 = *(_QWORD *)(v438 + 32);
        v498 = (_DWORD *)(v438 + 32);
        v500 = (double *)operator new(0x18uLL);
        *(_QWORD *)v500 = v496;
        v500[1] = v497;
        *((_QWORD *)v500 + 2) = v499;
        p_p = 84;
        v501 = COERCE_DOUBLE(operator new(0x2A0uLL, (std::align_val_t)0x20uLL));
        v502 = (_OWORD *)(*(_QWORD *)&v501 + 264);
        v831 = v501;
        v833 = 0x900000009;
        bzero(*(void **)&v501, 0x288uLL);
        v503 = *(unsigned int *)(a1 + 240);
        v504 = v503 * v496;
        v505 = v503 * LODWORD(v497);
        v433 = (double *)a1;
        v506 = v503 * v499;
        v507 = (v503 * v496 + *(_DWORD *)v500);
        v508 = 8 * v503;
        v509 = *(_OWORD **)(a1 + 224);
        v510 = (v505 + *(_DWORD *)v500);
        v511 = (v503 * v499 + *(_DWORD *)v500);
        v512 = 16 * v503;
        v513 = 16 * v503;
        if (v509 == *(_OWORD **)&v501)
        {
          v573 = (char *)(*(_QWORD *)&v501 + 8 * v507);
          v574 = *(_OWORD *)v573;
          v575 = *((_QWORD *)v573 + 2);
          v576 = *(_OWORD *)&v573[v508];
          v577 = *(_QWORD *)&v573[v508 + 16];
          v578 = &v573[v512];
          v579 = *(_OWORD *)v578;
          v580 = *((_QWORD *)v578 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 16) = v575;
          **(_OWORD **)&v501 = v574;
          *(_QWORD *)(*(_QWORD *)&v501 + 88) = v577;
          *(_OWORD *)(*(_QWORD *)&v501 + 72) = v576;
          *(_QWORD *)(*(_QWORD *)&v501 + 160) = v580;
          *(_OWORD *)(*(_QWORD *)&v501 + 144) = v579;
          v581 = (char *)(*(_QWORD *)&v501 + 8 * v510);
          v582 = *(_OWORD *)v581;
          v583 = *((_QWORD *)v581 + 2);
          v584 = *(_OWORD *)&v581[v508];
          v585 = *(_QWORD *)&v581[v508 + 16];
          v586 = &v581[v512];
          v587 = *(_OWORD *)v586;
          v588 = *((_QWORD *)v586 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 232) = v583;
          *(_OWORD *)(*(_QWORD *)&v501 + 216) = v582;
          *(_QWORD *)(*(_QWORD *)&v501 + 304) = v585;
          *(_OWORD *)(*(_QWORD *)&v501 + 288) = v584;
          *(_QWORD *)(*(_QWORD *)&v501 + 376) = v588;
          *(_OWORD *)(*(_QWORD *)&v501 + 360) = v587;
          v589 = (char *)(*(_QWORD *)&v501 + 8 * v511);
          v590 = *(_OWORD *)v589;
          v591 = *((_QWORD *)v589 + 2);
          v592 = *(_OWORD *)&v589[v508];
          v593 = *(_QWORD *)&v589[v508 + 16];
          v594 = &v589[v512];
          v595 = *(_OWORD *)v594;
          v596 = *((_QWORD *)v594 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 448) = v591;
          *(_OWORD *)(*(_QWORD *)&v501 + 432) = v590;
          *(_QWORD *)(*(_QWORD *)&v501 + 520) = v593;
          *(_OWORD *)(*(_QWORD *)&v501 + 504) = v592;
          *(_QWORD *)(*(_QWORD *)&v501 + 592) = v596;
          *(_OWORD *)(*(_QWORD *)&v501 + 576) = v595;
          LODWORD(v594) = *((_DWORD *)v500 + 2);
          v597 = (char *)(*(_QWORD *)&v501 + 8 * (v504 + (_DWORD)v594));
          v598 = *(_OWORD *)v597;
          v599 = *((_QWORD *)v597 + 2);
          v600 = *(_OWORD *)&v597[v508];
          v601 = *(_QWORD *)&v597[v508 + 16];
          v602 = &v597[v513];
          v603 = *(_OWORD *)v602;
          v604 = *((_QWORD *)v602 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 40) = v599;
          *(_OWORD *)(*(_QWORD *)&v501 + 24) = v598;
          *(_QWORD *)(*(_QWORD *)&v501 + 112) = v601;
          *(_OWORD *)(*(_QWORD *)&v501 + 96) = v600;
          *(_QWORD *)(*(_QWORD *)&v501 + 184) = v604;
          *(_OWORD *)(*(_QWORD *)&v501 + 168) = v603;
          v605 = (char *)(*(_QWORD *)&v501 + 8 * (v505 + (_DWORD)v594));
          v606 = *(_OWORD *)v605;
          v607 = *((_QWORD *)v605 + 2);
          v608 = *(_OWORD *)&v605[v508];
          v609 = *(_QWORD *)&v605[v508 + 16];
          v610 = &v605[v513];
          v611 = *(_OWORD *)v610;
          v612 = *((_QWORD *)v610 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 256) = v607;
          *(_OWORD *)(*(_QWORD *)&v501 + 240) = v606;
          *(_QWORD *)(*(_QWORD *)&v501 + 328) = v609;
          *(_OWORD *)(*(_QWORD *)&v501 + 312) = v608;
          *(_QWORD *)(*(_QWORD *)&v501 + 400) = v612;
          *(_OWORD *)(*(_QWORD *)&v501 + 384) = v611;
          v613 = (char *)(*(_QWORD *)&v501 + 8 * (v506 + (_DWORD)v594));
          v614 = *(_OWORD *)v613;
          v615 = *((_QWORD *)v613 + 2);
          v616 = *(_OWORD *)&v613[v508];
          v617 = *(_QWORD *)&v613[v508 + 16];
          v618 = &v613[v513];
          v619 = *(_OWORD *)v618;
          v620 = *((_QWORD *)v618 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 472) = v615;
          *(_OWORD *)(*(_QWORD *)&v501 + 456) = v614;
          *(_QWORD *)(*(_QWORD *)&v501 + 544) = v617;
          *(_OWORD *)(*(_QWORD *)&v501 + 528) = v616;
          *(_QWORD *)(*(_QWORD *)&v501 + 616) = v620;
          *(_OWORD *)(*(_QWORD *)&v501 + 600) = v619;
          LODWORD(v618) = *((_DWORD *)v500 + 4);
          v621 = (char *)(*(_QWORD *)&v501 + 8 * (v504 + (_DWORD)v618));
          v622 = *(_OWORD *)v621;
          v623 = *((_QWORD *)v621 + 2);
          *(_QWORD *)&v616 = *(_QWORD *)&v621[v508 + 16];
          v624 = *(_OWORD *)&v621[v508];
          v625 = &v621[v513];
          *(_QWORD *)&v619 = *((_QWORD *)v625 + 2);
          v626 = *(_OWORD *)v625;
          *(_QWORD *)(*(_QWORD *)&v501 + 64) = v623;
          *(_OWORD *)(*(_QWORD *)&v501 + 48) = v622;
          *(_OWORD *)(*(_QWORD *)&v501 + 120) = v624;
          *(_QWORD *)(*(_QWORD *)&v501 + 136) = v616;
          *(_OWORD *)(*(_QWORD *)&v501 + 192) = v626;
          *(_QWORD *)(*(_QWORD *)&v501 + 208) = v619;
          v627 = (char *)(*(_QWORD *)&v501 + 8 * (v505 + (_DWORD)v618));
          *(_QWORD *)&v622 = *((_QWORD *)v627 + 2);
          v628 = *(_OWORD *)v627;
          *(_QWORD *)&v616 = *(_QWORD *)&v627[v508 + 16];
          v629 = *(_OWORD *)&v627[v508];
          v630 = &v627[v513];
          v631 = *(_OWORD *)v630;
          *(_QWORD *)&v626 = *((_QWORD *)v630 + 2);
          *v502 = v628;
          *(_QWORD *)(*(_QWORD *)&v501 + 280) = v622;
          *(_OWORD *)(*(_QWORD *)&v501 + 336) = v629;
          *(_QWORD *)(*(_QWORD *)&v501 + 352) = v616;
          *(_QWORD *)(*(_QWORD *)&v501 + 424) = v626;
          *(_OWORD *)(*(_QWORD *)&v501 + 408) = v631;
          v572 = (char *)(*(_QWORD *)&v501 + 8 * (v506 + (_DWORD)v618));
        }
        else
        {
          v514 = (char *)v509 + 8 * v507;
          v515 = *(_OWORD *)v514;
          v516 = *((_QWORD *)v514 + 2);
          v517 = *(_OWORD *)&v514[v508];
          v518 = *(_QWORD *)&v514[v508 + 16];
          v519 = &v514[v512];
          v520 = *(_OWORD *)v519;
          v521 = *((_QWORD *)v519 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 16) = v516;
          **(_OWORD **)&v501 = v515;
          *(_QWORD *)(*(_QWORD *)&v501 + 88) = v518;
          *(_OWORD *)(*(_QWORD *)&v501 + 72) = v517;
          *(_QWORD *)(*(_QWORD *)&v501 + 160) = v521;
          *(_OWORD *)(*(_QWORD *)&v501 + 144) = v520;
          v522 = (char *)v509 + 8 * v510;
          v523 = *(_OWORD *)v522;
          v524 = *((_QWORD *)v522 + 2);
          v525 = *(_OWORD *)&v522[v508];
          v526 = *(_QWORD *)&v522[v508 + 16];
          v527 = &v522[v512];
          v528 = *(_OWORD *)v527;
          v529 = *((_QWORD *)v527 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 232) = v524;
          *(_OWORD *)(*(_QWORD *)&v501 + 216) = v523;
          *(_QWORD *)(*(_QWORD *)&v501 + 304) = v526;
          *(_OWORD *)(*(_QWORD *)&v501 + 288) = v525;
          *(_QWORD *)(*(_QWORD *)&v501 + 376) = v529;
          *(_OWORD *)(*(_QWORD *)&v501 + 360) = v528;
          v530 = (char *)v509 + 8 * v511;
          v531 = *(_OWORD *)v530;
          v532 = *(_OWORD *)&v530[v508];
          v533 = *(_QWORD *)&v530[v508 + 16];
          v534 = &v530[v512];
          v535 = *(_OWORD *)v534;
          v536 = *((_QWORD *)v534 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 448) = *((_QWORD *)v530 + 2);
          *(_OWORD *)(*(_QWORD *)&v501 + 432) = v531;
          *(_QWORD *)(*(_QWORD *)&v501 + 520) = v533;
          *(_OWORD *)(*(_QWORD *)&v501 + 504) = v532;
          *(_QWORD *)(*(_QWORD *)&v501 + 592) = v536;
          *(_OWORD *)(*(_QWORD *)&v501 + 576) = v535;
          LODWORD(v534) = *((_DWORD *)v500 + 2);
          v537 = (char *)v509 + 8 * (v504 + (_DWORD)v534);
          v538 = *(_OWORD *)v537;
          v539 = *((_QWORD *)v537 + 2);
          v540 = *(_OWORD *)&v537[v508];
          v541 = *(_QWORD *)&v537[v508 + 16];
          v542 = &v537[v513];
          v543 = *(_OWORD *)v542;
          v544 = *((_QWORD *)v542 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 40) = v539;
          *(_OWORD *)(*(_QWORD *)&v501 + 24) = v538;
          *(_QWORD *)(*(_QWORD *)&v501 + 112) = v541;
          *(_OWORD *)(*(_QWORD *)&v501 + 96) = v540;
          *(_QWORD *)(*(_QWORD *)&v501 + 184) = v544;
          *(_OWORD *)(*(_QWORD *)&v501 + 168) = v543;
          v545 = (char *)v509 + 8 * (v505 + (_DWORD)v534);
          v546 = *(_OWORD *)v545;
          v547 = *((_QWORD *)v545 + 2);
          v548 = *(_OWORD *)&v545[v508];
          v549 = *(_QWORD *)&v545[v508 + 16];
          v550 = &v545[v513];
          v551 = *(_OWORD *)v550;
          v552 = *((_QWORD *)v550 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 256) = v547;
          *(_OWORD *)(*(_QWORD *)&v501 + 240) = v546;
          *(_QWORD *)(*(_QWORD *)&v501 + 328) = v549;
          *(_OWORD *)(*(_QWORD *)&v501 + 312) = v548;
          *(_QWORD *)(*(_QWORD *)&v501 + 400) = v552;
          *(_OWORD *)(*(_QWORD *)&v501 + 384) = v551;
          v553 = (char *)v509 + 8 * (v506 + (_DWORD)v534);
          v554 = *(_OWORD *)v553;
          v555 = *((_QWORD *)v553 + 2);
          v556 = *(_OWORD *)&v553[v508];
          v557 = *(_QWORD *)&v553[v508 + 16];
          v558 = &v553[v513];
          v559 = *(_OWORD *)v558;
          v560 = *((_QWORD *)v558 + 2);
          *(_QWORD *)(*(_QWORD *)&v501 + 472) = v555;
          *(_OWORD *)(*(_QWORD *)&v501 + 456) = v554;
          *(_QWORD *)(*(_QWORD *)&v501 + 544) = v557;
          *(_OWORD *)(*(_QWORD *)&v501 + 528) = v556;
          *(_QWORD *)(*(_QWORD *)&v501 + 616) = v560;
          *(_OWORD *)(*(_QWORD *)&v501 + 600) = v559;
          LODWORD(v558) = *((_DWORD *)v500 + 4);
          v561 = (char *)v509 + 8 * (v504 + (_DWORD)v558);
          v562 = *(_OWORD *)v561;
          v563 = *((_QWORD *)v561 + 2);
          *(_QWORD *)&v556 = *(_QWORD *)&v561[v508 + 16];
          v564 = *(_OWORD *)&v561[v508];
          v565 = &v561[v513];
          *(_QWORD *)&v559 = *((_QWORD *)v565 + 2);
          v566 = *(_OWORD *)v565;
          *(_QWORD *)(*(_QWORD *)&v501 + 64) = v563;
          *(_OWORD *)(*(_QWORD *)&v501 + 48) = v562;
          *(_OWORD *)(*(_QWORD *)&v501 + 120) = v564;
          *(_QWORD *)(*(_QWORD *)&v501 + 136) = v556;
          *(_OWORD *)(*(_QWORD *)&v501 + 192) = v566;
          *(_QWORD *)(*(_QWORD *)&v501 + 208) = v559;
          v567 = (char *)v509 + 8 * (v505 + (_DWORD)v558);
          *(_QWORD *)&v562 = *((_QWORD *)v567 + 2);
          v568 = *(_OWORD *)v567;
          *(_QWORD *)&v556 = *(_QWORD *)&v567[v508 + 16];
          v569 = *(_OWORD *)&v567[v508];
          v570 = &v567[v513];
          v571 = *(_OWORD *)v570;
          *(_QWORD *)&v566 = *((_QWORD *)v570 + 2);
          *v502 = v568;
          *(_QWORD *)(*(_QWORD *)&v501 + 280) = v562;
          *(_OWORD *)(*(_QWORD *)&v501 + 336) = v569;
          *(_QWORD *)(*(_QWORD *)&v501 + 352) = v556;
          *(_QWORD *)(*(_QWORD *)&v501 + 424) = v566;
          *(_OWORD *)(*(_QWORD *)&v501 + 408) = v571;
          v572 = (char *)v509 + 8 * (v506 + (_DWORD)v558);
        }
        v632 = *((_QWORD *)v572 + 2);
        v633 = (int8x16_t *)&v572[v508];
        v634 = *v633;
        v635 = v633[1].i64[0];
        v636 = (int8x16_t *)&v572[v513];
        v637 = *v636;
        v638 = v636[1].i64[0];
        *(_OWORD *)(*(_QWORD *)&v501 + 480) = *(_OWORD *)v572;
        *(_QWORD *)(*(_QWORD *)&v501 + 496) = v632;
        *(_QWORD *)(*(_QWORD *)&v501 + 568) = v635;
        v634.i64[1] = vextq_s8(v634, v634, 8uLL).u64[0];
        *(int8x16_t *)(*(_QWORD *)&v501 + 552) = v634;
        *(_QWORD *)(*(_QWORD *)&v501 + 640) = v638;
        v637.i64[1] = vextq_s8(v637, v637, 8uLL).u64[0];
        *(int8x16_t *)(*(_QWORD *)&v501 + 624) = v637;
        v829 = (__uint64_t **)v854;
        v830 = (float64x2_t *)&v831;
        v828 = (__uint64_t *)v854;
        v849[0] = *(double *)(a1 + 104) + *(double *)(a1 + 104);
        *(_QWORD *)&v861.f64[1] = &v829;
        *(_QWORD *)&v862.f64[0] = &v828;
        v862.f64[1] = 1.0;
        sub_20F20C8DC((uint64_t)&v850[8], (uint64_t)&v861);
        v852 = v849;
        *(_QWORD *)&v853[1] = 12;
        *(_QWORD *)&v853[0] = operator new(0x60uLL, (std::align_val_t)0x20uLL);
        *(_QWORD *)&v853[2] = 0x300000003;
        v639.f64[0] = v851;
        v640.f64[0] = v849[0];
        v865 = *(_OWORD *)&vaddq_f64(v639, v640);
        v863 = vaddq_f64(*(float64x2_t *)&v850[40], (float64x2_t)*(unint64_t *)&v849[0]);
        v864 = vaddq_f64(*(float64x2_t *)&v850[56], (float64x2_t)0);
        v861 = vaddq_f64(*(float64x2_t *)&v850[8], (float64x2_t)*(unint64_t *)&v849[0]);
        v862 = vaddq_f64(*(float64x2_t *)&v850[24], (float64x2_t)0);
        sub_20F209640((uint64_t)v853, (uint64_t)&v861);
        v828 = v834;
        sub_20F196C54((uint64_t)v853);
        v829 = &v828;
        v830 = &v861;
        *(_QWORD *)&v850[8] = &v829;
        *(_QWORD *)&v850[16] = v834;
        *(_QWORD *)&v850[24] = 0x3FF0000000000000;
        sub_20F20CC00(v849, (uint64_t)v850);
        v641 = v849[0];
        if (*(_QWORD *)&v861.f64[0])
          MEMORY[0x212BC6368](*(_QWORD *)&v861.f64[0], 0x1000C8000313F17);
        if (v641 > *(double *)(a1 + 72))
        {
          v642 = *(_QWORD *)(a1 + 672);
          if (0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 680) - v642) >> 4) > v429)
            *(_BYTE *)(v642 + 144 * v429 + 136) = 0;
          v397 = v808;
          goto LABEL_210;
        }
        v643 = (char *)v841 + 8 * __lenb;
        v644 = *(_OWORD *)v834;
        *((_QWORD *)v643 + 2) = v835;
        *(_OWORD *)v643 = v644;
        v645 = (uint64_t)v793 + 8 * (__lenb + v795 * *(_DWORD *)(a1 + 632));
        v646 = *(_OWORD *)v854;
        v647 = *(_OWORD *)v855;
        v648 = *(_QWORD *)&v855[16];
        v649 = *(_OWORD *)&v855[24];
        *(_QWORD *)(v645 + 16) = *(_QWORD *)&v854[16];
        *(_OWORD *)v645 = v646;
        v650 = v645 + 8 * v795;
        *(_QWORD *)(v650 + 16) = v648;
        *(_OWORD *)v650 = v647;
        v651 = v645 + v792;
        *(_QWORD *)&v647 = *(_QWORD *)v858;
        *(_QWORD *)(v651 + 16) = v856;
        *(_OWORD *)v651 = v649;
        v652 = (uint64_t)v793 + 8 * (__lenb + v795 * *(_DWORD *)v820);
        v653 = v857;
        v654 = *(_OWORD *)&v858[8];
        v655 = v859;
        *(_QWORD *)&v649 = *(_QWORD *)&v858[24];
        v656 = *(_QWORD *)&v860[0];
        *(_QWORD *)(v652 + 16) = v647;
        *(float64x2_t *)v652 = v653;
        v657 = v652 + 8 * v795;
        *(_QWORD *)(v657 + 16) = v649;
        *(_OWORD *)v657 = v654;
        v658 = v652 + v792;
        *(_QWORD *)(v658 + 16) = v656;
        *(float64x2_t *)v658 = v655;
        v659 = *(_OWORD *)((char *)v860 + 8);
        v660 = v860[2];
        v655.f64[0] = *(float64_t *)&v860[3];
        v661 = *(_OWORD *)((char *)&v860[3] + 8);
        v662 = *((_QWORD *)&v860[4] + 1);
        v663 = (uint64_t)v793 + 8 * (__lenb + v795 * *v498);
        *(_QWORD *)(v663 + 16) = *((_QWORD *)&v860[1] + 1);
        *(_OWORD *)v663 = v659;
        v664 = v663 + 8 * v795;
        *(float64_t *)(v664 + 16) = v655.f64[0];
        *(_OWORD *)v664 = v660;
        v665 = v663 + v792;
        *(_QWORD *)(v665 + 16) = v662;
        *(_OWORD *)v665 = v661;
        v666 = *(_QWORD *)v498;
        if (v824 < v797)
        {
          *(_QWORD *)v824 = v666;
          v667 = (uint64_t)(v824 + 8);
          v397 = v808;
LABEL_209:
          v837 = v667;
          __lenb += 3;
          v824 = (char *)v667;
LABEL_210:
          if (*(_QWORD *)&v853[0])
            MEMORY[0x212BC6368](*(_QWORD *)&v853[0], 0x1000C8000313F17);
          if (v831 != 0.0)
            MEMORY[0x212BC6368](*(_QWORD *)&v831, 0x1000C8000313F17);
          operator delete(v500);
          v391 = v433[85];
          v392 = v433[84];
          goto LABEL_173;
        }
        v668 = (v824 - v428) >> 3;
        v669 = v668 + 1;
        if ((unint64_t)(v668 + 1) >> 61)
          sub_20E867F44();
        if ((v797 - v428) >> 2 > v669)
          v669 = (v797 - v428) >> 2;
        if ((unint64_t)(v797 - v428) >= 0x7FFFFFFFFFFFFFF8)
          v670 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v670 = v669;
        if (v670)
        {
          if (v670 >> 61)
            sub_20E877A38();
          v671 = operator new(8 * v670);
          v672 = &v671[8 * v668];
          *v672 = v666;
          v667 = (uint64_t)(v672 + 1);
          v673 = v824 - v428;
          if (v824 != v428)
          {
LABEL_199:
            v674 = v673 - 8;
            if (v674 < 0x168
              || (v677 = (v824 - 8 - v428) & 0xFFFFFFFFFFFFFFF8, &v671[v824 - v428 - 8 - v677] > &v671[v824 - v428 - 8])
              || &v824[-v677 - 8] > v824 - 8)
            {
              v675 = v824;
            }
            else
            {
              if ((unint64_t)(v428 - v671) >= 0x20)
              {
                v678 = (v674 >> 3) + 1;
                v679 = 8 * (v678 & 0x3FFFFFFFFFFFFFFCLL);
                v675 = &v824[-v679];
                v672 = (_QWORD *)((char *)v672 - v679);
                v680 = &v671[8 * v668 - 16];
                v681 = v824 - 16;
                v682 = v678 & 0x3FFFFFFFFFFFFFFCLL;
                v433 = (double *)a1;
                do
                {
                  v683 = *(_OWORD *)v681;
                  *(v680 - 1) = *((_OWORD *)v681 - 1);
                  *v680 = v683;
                  v680 -= 2;
                  v681 -= 32;
                  v682 -= 4;
                }
                while (v682);
                v397 = v808;
                if (v678 == (v678 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_206;
                goto LABEL_202;
              }
              v675 = v824;
            }
            v433 = (double *)a1;
            v397 = v808;
            do
            {
LABEL_202:
              v676 = *((_QWORD *)v675 - 1);
              v675 -= 8;
              *--v672 = v676;
            }
            while (v675 != v428);
            goto LABEL_206;
          }
        }
        else
        {
          v671 = 0;
          v672 = (_QWORD *)(8 * v668);
          *(_QWORD *)(8 * v668) = v666;
          v667 = 8 * v668 + 8;
          v673 = v824 - v428;
          if (v824 != v428)
            goto LABEL_199;
        }
        v433 = (double *)a1;
        v397 = v808;
LABEL_206:
        __p = v672;
        v797 = &v671[8 * v670];
        v838 = (uint64_t)v797;
        if (v428)
          operator delete(v428);
        v428 = (char *)v672;
        goto LABEL_209;
      }
    }
    return 0;
  }
  v16 = (long double *)operator new((7635497416 * ((v6 - v7) >> 4) + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
  v19 = v16;
  if ((_DWORD)v8)
    bzero(v16, 7635497416 * ((v6 - v7) >> 4));
  v809 = (float64x2_t *)(a1 + 608);
  if (v6 != v7)
  {
    v20 = 0;
    v17.f64[0] = *(float64_t *)(a1 + 624);
    v821 = v17;
    v21 = *(int8x16_t *)v809;
    v22 = vextq_s8(v21, v21, 8uLL).u64[0];
    if (v8 <= 1)
      v23 = 1;
    else
      v23 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 4);
    v24 = v7 + 64;
    v21.i64[1] = v22;
    v817 = (float64x2_t)v21;
    do
    {
      _D2 = *(_QWORD *)(v24 + 16);
      v18.f64[0] = *(float64_t *)(v24 + 64);
      *(_QWORD *)&v26 = *(_OWORD *)&vsubq_f64(v18, v821);
      _Q7 = vsubq_f64(*(float64x2_t *)(v24 + 48), v817);
      __asm { FMLA            D0, D2, V7.D[1] }
      v30 = vmlad_n_f64(_D0, *(double *)(v24 + 40), v26);
      _D3 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*(float64x2_t *)(v24 - 24), *(double *)&_Q7), *(float64x2_t *)v24, _Q7, 1), *(float64x2_t *)(v24 + 24), v26).f64[1];
      __asm { FMLA            D2, D3, V1.D[1] }
      v19[v20++] = acos(v30 * (1.0 / sqrt(_D2 + v30 * v30))) * 57.2957795;
      v24 += 144;
    }
    while (v23 != v20);
  }
  v33 = v19[v15];
  v34 = v7 + 144 * v15;
  v35 = *(__uint64_t ***)(v34 + 32);
  __len = (uint64_t *)(v34 + 32);
  v829 = v35;
  v36 = v19[(v8 - 1)];
  if (v36 == v33)
  {
    v37 = 1;
    v38 = a1;
    v39 = v15 + 1;
    if (v15 + 1 >= v8)
      goto LABEL_103;
  }
  else
  {
    v38 = a1;
    v65 = v36 - v33;
    if (v36 < v33)
      v65 = v33 - v36;
    v37 = v65 <= *(double *)(a1 + 88);
    v39 = v15 + 1;
    if (v15 + 1 >= v8)
    {
LABEL_103:
      v347 = 0;
      if (!v37)
        goto LABEL_263;
      goto LABEL_281;
    }
  }
  v66 = 0;
  v67 = v39;
  do
  {
    while (1)
    {
      v68 = v19[v67];
      if (v68 != v33)
      {
        v69 = v68 >= v33 ? v68 - v33 : v33 - v68;
        if (v69 > *(double *)(v38 + 88))
          break;
      }
      if (v8 > v67)
      {
        v70 = 1;
        v66 = 1;
        goto LABEL_45;
      }
      ++v67;
      v66 = 1;
      if (v67 == v8)
        goto LABEL_48;
    }
    if (v8 <= v67)
      goto LABEL_46;
    v70 = 0;
LABEL_45:
    *(_BYTE *)(v7 + 144 * v67 + 136) = v70;
LABEL_46:
    ++v67;
  }
  while (v67 != v8);
  if ((v66 & 1) == 0)
    goto LABEL_103;
LABEL_48:
  v794 = v37;
  v71 = -1431655765 * ((v6 - v7) >> 4);
  v72 = (8 * v71 + 31) & 0xFFFFFFFE0;
  *(_QWORD *)&v861.f64[1] = v72 >> 3;
  v807 = v19;
  v73 = operator new(v72, (std::align_val_t)0x20uLL);
  *(_QWORD *)&v861.f64[0] = v73;
  LODWORD(v862.f64[0]) = v71;
  if ((_DWORD)v8)
    bzero(v73, 0xFFFFFFFD55555558 * ((v6 - v7) >> 4));
  v74 = *(_DWORD *)(a1 + 240);
  v75 = (8 * v74 * v71 + 31) & 0xFFFFFFFE0;
  *((_QWORD *)&v825 + 1) = v75 >> 3;
  v76 = operator new(v75, (std::align_val_t)0x20uLL);
  *(_QWORD *)&v825 = v76;
  LODWORD(v826) = -1431655765 * ((v6 - v7) >> 4);
  HIDWORD(v826) = v74;
  if (v74 * v71)
    bzero(v76, 8 * v74 * v71);
  v77 = *(_QWORD *)(a1 + 632);
  v78 = (char *)operator new(0x10uLL);
  v818 = 0;
  v842 = v78 + 16;
  v843 = v78 + 16;
  v82 = (float64x2_t *)(v7 + 144 * v15);
  *(_QWORD *)v78 = v77;
  *((_QWORD *)v78 + 1) = v35;
  v841 = v78;
  v800 = (float64x2_t *)((char *)v82 + 40);
  v803 = v82 + 7;
  _Q1.i64[1] = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  v798 = _Q0;
  v796 = v78 + 16;
  v822 = v78 + 16;
  v38 = a1;
  while (2)
  {
    if (!*(_BYTE *)(v7 + 144 * v39 + 136))
      goto LABEL_54;
    v85 = v7 + 144 * v39;
    v86.f64[0] = *(float64_t *)(v85 + 56);
    v87 = *(int64x2_t *)(v85 + 40);
    v88 = *(int64x2_t *)(v85 + 64);
    v89 = *(double *)(v85 + 104);
    _Q18 = *(float64x2_t *)(v85 + 88);
    _Q1.i64[0] = *(_QWORD *)&v800[1].f64[0];
    v91 = *v800;
    _D2 = v800[2].f64[1];
    v93 = *(float64x2_t *)((char *)v800 + 24);
    v94 = v800[4].f64[0];
    v95 = v800[3];
    v96 = (float64x2_t)vzip1q_s64(v87, v88);
    _Q7 = (float64x2_t)vzip2q_s64(v87, v88);
    v86.f64[1] = *(float64_t *)(v85 + 80);
    v98 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v800->f64[0]), _Q7, *v800, 1), v86, *(double *)_Q1.i64);
    _Q16 = vmulq_f64(_Q18, *v800);
    _D21 = v800->f64[1];
    __asm { FMLA            D16, D21, V18.D[1] }
    _Q16.f64[0] = _Q16.f64[0] + v89 * *(double *)_Q1.i64;
    v101 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v93.f64[0]), _Q7, v93, 1), v86, _D2);
    _Q22 = vmulq_f64(_Q18, v93);
    _Q23.f64[0] = v800[2].f64[0];
    __asm { FMLA            D22, D23, V18.D[1] }
    _Q22.f64[0] = _Q22.f64[0] + v89 * _D2;
    v103 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v96, v95.f64[0]), _Q7, v95, 1), v86, v94);
    _Q6 = vmulq_f64(_Q18, v95);
    _Q7.f64[0] = v800[3].f64[1];
    __asm { FMLA            D6, D7, V18.D[1] }
    _Q6.f64[0] = _Q6.f64[0] + v89 * v94;
    _Q7.f64[0] = v803[1].f64[0];
    _Q17 = *v803;
    __asm { FMLA            D23, D22, V17.D[1] }
    _Q23.f64[0] = _Q23.f64[0] + _Q6.f64[0] * _Q7.f64[0];
    v80.f64[0] = *(float64_t *)(v85 + 128);
    v106 = vsubq_f64(*(float64x2_t *)(v85 + 112), vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v98, v803->f64[0]), v101, *v803, 1), v103, _Q7.f64[0]));
    v107 = vsubq_f64(v80, _Q23);
    v108 = vsubq_f64((float64x2_t)xmmword_21030D320, v98);
    *(_QWORD *)&_Q16.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q16);
    v109 = vsubq_f64((float64x2_t)xmmword_2102DD520, v101);
    *(_QWORD *)&_Q22.f64[0] = *(_OWORD *)&vsubq_f64((float64x2_t)0, _Q22);
    v110 = vsubq_f64((float64x2_t)0, v103);
    v111.f64[1] = v798.f64[1];
    *(_QWORD *)&_Q6.f64[0] = *(_OWORD *)&vsubq_f64(v798, _Q6);
    v111.f64[0] = v809[1].f64[0];
    v112 = *v809;
    v81.f64[0] = vmlad_n_f64(vmlad_n_f64(vmuld_n_f64(_Q16.f64[0], v809->f64[0]), v809->f64[1], _Q22.f64[0]), v111.f64[0], _Q6.f64[0]);
    v839 = vsubq_f64(v106, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v108, v809->f64[0]), v109, *v809, 1), v110, v111.f64[0]));
    v840 = *(_OWORD *)&vsubq_f64(v107, v81);
    *(_QWORD *)&_Q7.f64[0] = *(_OWORD *)&vsubq_f64(_Q7, v111);
    _Q17 = vsubq_f64(_Q17, v112);
    v114 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, _Q17.f64[0]), v93, _Q17, 1), v95, _Q7.f64[0]);
    __asm { FMLA            D1, D2, V17.D[1] }
    *(double *)_Q1.i64 = vmlad_n_f64(*(double *)_Q1.i64, v94, _Q7.f64[0]);
    memset(v860, 0, sizeof(v860));
    *(_OWORD *)&v858[16] = 0u;
    v859 = 0u;
    v857 = 0u;
    *(_OWORD *)v858 = 0u;
    *(float64x2_t *)v854 = v108;
    *(float64x2_t *)v855 = v109;
    *(float64_t *)&v854[16] = _Q16.f64[0];
    *(float64_t *)&v855[16] = _Q22.f64[0];
    *(float64x2_t *)&v855[24] = v110;
    v856 = *(void **)&_Q6.f64[0];
    v115.f64[0] = *(float64_t *)(v85 + 56);
    v116 = *(int64x2_t *)(v85 + 40);
    v117 = *(int64x2_t *)(v85 + 64);
    v95.f64[0] = *(float64_t *)(v85 + 104);
    v118 = *(int64x2_t *)(v85 + 88);
    v119 = (float64x2_t)vzip1q_s64(v116, v117);
    v115.f64[1] = *(float64_t *)(v85 + 80);
    v120 = (int8x16_t)vzip2q_s64(v116, v117);
    v121 = (float64x2_t)vextq_s8(v120, (int8x16_t)vdupq_laneq_s64(v118, 1), 8uLL);
    v122 = (float64x2_t)vzip1q_s64(v118, (int64x2_t)v120);
    v123 = vnegq_f64(v119);
    v124 = vnegq_f64(v122);
    v125 = (int8x16_t)vnegq_f64(v115);
    v126 = vnegq_f64(v121);
    v127 = (int64x2_t)vnegq_f64(v95);
    v128 = (float64x2_t)vzip1q_s64((int64x2_t)_Q1, (int64x2_t)v114);
    v129 = (float64x2_t)vextq_s8((int8x16_t)v126, v125, 8uLL);
    v130 = (float64x2_t)vextq_s8((int8x16_t)v124, (int8x16_t)v126, 8uLL);
    v131 = (float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v125, 1), v127);
    v132 = (float64x2_t)vextq_s8((int8x16_t)v114, _Q1, 8uLL);
    v133 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v123.f64[0], 0);
    *(_QWORD *)&v133.f64[0] = v127.i64[0];
    v134 = vmulq_n_f64(v130, *(double *)_Q1.i64);
    *(float64x2_t *)v858 = vsubq_f64(vmulq_f64(v128, v129), vmulq_f64(v132, v133));
    v859 = vsubq_f64(vmulq_laneq_f64(v123, v114, 1), vmulq_n_f64(v130, v114.f64[0]));
    *(_QWORD *)&v860[0] = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v124, v114, 1), vmulq_laneq_f64(v114, v126, 1));
    v857 = vaddq_f64(v134, vmulq_laneq_f64(v115, v114, 1));
    *(float64x2_t *)&v858[16] = vsubq_f64(vmulq_n_f64(v131, v114.f64[0]), vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v123, (int8x16_t)v124, 8uLL), *(double *)_Q1.i64));
    v135 = *(float64x2_t *)(v85 + 88);
    v136 = *(float64x2_t *)(v85 + 56);
    v137 = *(float64x2_t *)(v85 + 40);
    v134.f64[0] = *(float64_t *)(v85 + 104);
    v138 = *(int8x16_t *)(v85 + 72);
    v139 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v137.f64[0], 0);
    v140 = (float64x2_t)vextq_s8((int8x16_t)v137, v138, 8uLL);
    v137.f64[1] = *(float64_t *)(v85 + 64);
    v141 = (float64x2_t)vextq_s8((int8x16_t)v135, (int8x16_t)v136, 8uLL);
    v142 = (float64x2_t)vextq_s8((int8x16_t)v136, (int8x16_t)v135, 8uLL);
    v136.f64[1] = *(float64_t *)(v85 + 80);
    v139.f64[0] = v134.f64[0];
    *((_QWORD *)&v860[4] + 1) = *(_OWORD *)&vsubq_f64(vmulq_laneq_f64(v135, v114, 1), vmulq_laneq_f64(v114, v135, 1));
    *(float64x2_t *)((char *)&v860[2] + 8) = vsubq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(vdupq_laneq_s64((int64x2_t)v138, 1), (int64x2_t)v134), v114.f64[0]), vmulq_n_f64(v142, *(double *)_Q1.i64));
    *(float64x2_t *)((char *)&v860[3] + 8) = vsubq_f64(vmulq_laneq_f64(v137, v114, 1), vmulq_n_f64(v140, v114.f64[0]));
    *(float64x2_t *)((char *)v860 + 8) = vsubq_f64(vmulq_n_f64(v140, *(double *)_Q1.i64), vmulq_laneq_f64(v136, v114, 1));
    *(float64x2_t *)((char *)&v860[1] + 8) = vsubq_f64(vmulq_f64(v128, v141), vmulq_f64(v132, v139));
    v143 = *(_QWORD *)(v38 + 632);
    v144 = *__len;
    v146 = *(_QWORD *)(v85 + 32);
    v145 = (_DWORD *)(v85 + 32);
    v147 = operator new(0x18uLL);
    *v147 = v143;
    v147[1] = v144;
    v147[2] = v146;
    v837 = 84;
    v148 = operator new(0x2A0uLL, (std::align_val_t)0x20uLL);
    v149 = (_OWORD *)((char *)v148 + 264);
    __p = v148;
    v838 = 0x900000009;
    bzero(v148, 0x288uLL);
    v150 = *(unsigned int *)(a1 + 240);
    v151 = v150 * v143;
    v152 = v150 * v144;
    v38 = a1;
    v153 = v150 * v146;
    v154 = (v150 * v143 + *(_DWORD *)v147);
    v155 = 8 * v150;
    v156 = *(_OWORD **)(a1 + 224);
    v157 = (v152 + *(_DWORD *)v147);
    v158 = (v150 * v146 + *(_DWORD *)v147);
    v159 = 16 * v150;
    v160 = 16 * v150;
    if (v156 == v148)
    {
      v220 = (char *)v148 + 8 * v154;
      v221 = *(_OWORD *)v220;
      v222 = *((_QWORD *)v220 + 2);
      v223 = *(_OWORD *)&v220[v155];
      v224 = *(_QWORD *)&v220[v155 + 16];
      v225 = &v220[v159];
      v226 = *(_OWORD *)v225;
      v227 = *((_QWORD *)v225 + 2);
      *((_QWORD *)v148 + 2) = v222;
      *v148 = v221;
      *((_QWORD *)v148 + 11) = v224;
      *(_OWORD *)((char *)v148 + 72) = v223;
      *((_QWORD *)v148 + 20) = v227;
      v148[9] = v226;
      v228 = (char *)v148 + 8 * v157;
      v229 = *(_OWORD *)v228;
      v230 = *((_QWORD *)v228 + 2);
      v231 = *(_OWORD *)&v228[v155];
      v232 = *(_QWORD *)&v228[v155 + 16];
      v233 = &v228[v159];
      v234 = *(_OWORD *)v233;
      v235 = *((_QWORD *)v233 + 2);
      *((_QWORD *)v148 + 29) = v230;
      *(_OWORD *)((char *)v148 + 216) = v229;
      *((_QWORD *)v148 + 38) = v232;
      v148[18] = v231;
      *((_QWORD *)v148 + 47) = v235;
      *(_OWORD *)((char *)v148 + 360) = v234;
      v236 = (char *)v148 + 8 * v158;
      v237 = *(_OWORD *)v236;
      v238 = *((_QWORD *)v236 + 2);
      v239 = *(_OWORD *)&v236[v155];
      v240 = *(_QWORD *)&v236[v155 + 16];
      v241 = &v236[v159];
      v242 = *(_OWORD *)v241;
      v243 = *((_QWORD *)v241 + 2);
      *((_QWORD *)v148 + 56) = v238;
      v148[27] = v237;
      *((_QWORD *)v148 + 65) = v240;
      *(_OWORD *)((char *)v148 + 504) = v239;
      *((_QWORD *)v148 + 74) = v243;
      v148[36] = v242;
      LODWORD(v241) = *((_DWORD *)v147 + 2);
      v244 = (char *)v148 + 8 * (v151 + (_DWORD)v241);
      v245 = *(_OWORD *)v244;
      v246 = *((_QWORD *)v244 + 2);
      v247 = *(_OWORD *)&v244[v155];
      v248 = *(_QWORD *)&v244[v155 + 16];
      v249 = &v244[v160];
      v250 = *(_OWORD *)v249;
      v251 = *((_QWORD *)v249 + 2);
      *((_QWORD *)v148 + 5) = v246;
      *(_OWORD *)((char *)v148 + 24) = v245;
      *((_QWORD *)v148 + 14) = v248;
      v148[6] = v247;
      *((_QWORD *)v148 + 23) = v251;
      *(_OWORD *)((char *)v148 + 168) = v250;
      v252 = (char *)v148 + 8 * (v152 + (_DWORD)v241);
      v253 = *(_OWORD *)v252;
      v254 = *((_QWORD *)v252 + 2);
      v255 = *(_OWORD *)&v252[v155];
      v256 = *(_QWORD *)&v252[v155 + 16];
      v257 = &v252[v160];
      v258 = *(_OWORD *)v257;
      v259 = *((_QWORD *)v257 + 2);
      *((_QWORD *)v148 + 32) = v254;
      v148[15] = v253;
      *((_QWORD *)v148 + 41) = v256;
      *(_OWORD *)((char *)v148 + 312) = v255;
      *((_QWORD *)v148 + 50) = v259;
      v148[24] = v258;
      v260 = (char *)v148 + 8 * (v153 + (_DWORD)v241);
      v261 = *(_OWORD *)v260;
      v262 = *((_QWORD *)v260 + 2);
      v263 = *(_OWORD *)&v260[v155];
      v264 = *(_QWORD *)&v260[v155 + 16];
      v265 = &v260[v160];
      v266 = *(_OWORD *)v265;
      v267 = *((_QWORD *)v265 + 2);
      *((_QWORD *)v148 + 59) = v262;
      *(_OWORD *)((char *)v148 + 456) = v261;
      *((_QWORD *)v148 + 68) = v264;
      v148[33] = v263;
      *((_QWORD *)v148 + 77) = v267;
      *(_OWORD *)((char *)v148 + 600) = v266;
      LODWORD(v265) = *((_DWORD *)v147 + 4);
      v268 = (char *)v148 + 8 * (v151 + (_DWORD)v265);
      v269 = *(_OWORD *)v268;
      v270 = *((_QWORD *)v268 + 2);
      *(_QWORD *)&v263 = *(_QWORD *)&v268[v155 + 16];
      v271 = *(_OWORD *)&v268[v155];
      v272 = &v268[v160];
      *(_QWORD *)&v266 = *((_QWORD *)v272 + 2);
      v273 = *(_OWORD *)v272;
      *((_QWORD *)v148 + 8) = v270;
      v148[3] = v269;
      *(_OWORD *)((char *)v148 + 120) = v271;
      *((_QWORD *)v148 + 17) = v263;
      v148[12] = v273;
      *((_QWORD *)v148 + 26) = v266;
      v274 = (char *)v148 + 8 * (v152 + (_DWORD)v265);
      *(_QWORD *)&v269 = *((_QWORD *)v274 + 2);
      v275 = *(_OWORD *)v274;
      *(_QWORD *)&v263 = *(_QWORD *)&v274[v155 + 16];
      v276 = *(_OWORD *)&v274[v155];
      v277 = &v274[v160];
      v278 = *(_OWORD *)v277;
      *(_QWORD *)&v273 = *((_QWORD *)v277 + 2);
      *v149 = v275;
      *((_QWORD *)v148 + 35) = v269;
      v148[21] = v276;
      *((_QWORD *)v148 + 44) = v263;
      *((_QWORD *)v148 + 53) = v273;
      *(_OWORD *)((char *)v148 + 408) = v278;
      v219 = (char *)v148 + 8 * (v153 + (_DWORD)v265);
    }
    else
    {
      v161 = (char *)v156 + 8 * v154;
      v162 = *(_OWORD *)v161;
      v163 = *((_QWORD *)v161 + 2);
      v164 = *(_OWORD *)&v161[v155];
      v165 = *(_QWORD *)&v161[v155 + 16];
      v166 = &v161[v159];
      v167 = *(_OWORD *)v166;
      v168 = *((_QWORD *)v166 + 2);
      *((_QWORD *)v148 + 2) = v163;
      *v148 = v162;
      *((_QWORD *)v148 + 11) = v165;
      *(_OWORD *)((char *)v148 + 72) = v164;
      *((_QWORD *)v148 + 20) = v168;
      v148[9] = v167;
      v169 = (char *)v156 + 8 * v157;
      v170 = *(_OWORD *)v169;
      v171 = *((_QWORD *)v169 + 2);
      v172 = *(_OWORD *)&v169[v155];
      v173 = *(_QWORD *)&v169[v155 + 16];
      v174 = &v169[v159];
      v175 = *(_OWORD *)v174;
      v176 = *((_QWORD *)v174 + 2);
      *((_QWORD *)v148 + 29) = v171;
      *(_OWORD *)((char *)v148 + 216) = v170;
      *((_QWORD *)v148 + 38) = v173;
      v148[18] = v172;
      *((_QWORD *)v148 + 47) = v176;
      *(_OWORD *)((char *)v148 + 360) = v175;
      v177 = (char *)v156 + 8 * v158;
      v178 = *(_OWORD *)v177;
      v179 = *(_OWORD *)&v177[v155];
      v180 = *(_QWORD *)&v177[v155 + 16];
      v181 = &v177[v159];
      v182 = *(_OWORD *)v181;
      v183 = *((_QWORD *)v181 + 2);
      *((_QWORD *)v148 + 56) = *((_QWORD *)v177 + 2);
      v148[27] = v178;
      *((_QWORD *)v148 + 65) = v180;
      *(_OWORD *)((char *)v148 + 504) = v179;
      *((_QWORD *)v148 + 74) = v183;
      v148[36] = v182;
      LODWORD(v181) = *((_DWORD *)v147 + 2);
      v184 = (char *)v156 + 8 * (v151 + (_DWORD)v181);
      v185 = *(_OWORD *)v184;
      v186 = *((_QWORD *)v184 + 2);
      v187 = *(_OWORD *)&v184[v155];
      v188 = *(_QWORD *)&v184[v155 + 16];
      v189 = &v184[v160];
      v190 = *(_OWORD *)v189;
      v191 = *((_QWORD *)v189 + 2);
      *((_QWORD *)v148 + 5) = v186;
      *(_OWORD *)((char *)v148 + 24) = v185;
      *((_QWORD *)v148 + 14) = v188;
      v148[6] = v187;
      *((_QWORD *)v148 + 23) = v191;
      *(_OWORD *)((char *)v148 + 168) = v190;
      v192 = (char *)v156 + 8 * (v152 + (_DWORD)v181);
      v193 = *(_OWORD *)v192;
      v194 = *((_QWORD *)v192 + 2);
      v195 = *(_OWORD *)&v192[v155];
      v196 = *(_QWORD *)&v192[v155 + 16];
      v197 = &v192[v160];
      v198 = *(_OWORD *)v197;
      v199 = *((_QWORD *)v197 + 2);
      *((_QWORD *)v148 + 32) = v194;
      v148[15] = v193;
      *((_QWORD *)v148 + 41) = v196;
      *(_OWORD *)((char *)v148 + 312) = v195;
      *((_QWORD *)v148 + 50) = v199;
      v148[24] = v198;
      v200 = (char *)v156 + 8 * (v153 + (_DWORD)v181);
      v201 = *(_OWORD *)v200;
      v202 = *((_QWORD *)v200 + 2);
      v203 = *(_OWORD *)&v200[v155];
      v204 = *(_QWORD *)&v200[v155 + 16];
      v205 = &v200[v160];
      v206 = *(_OWORD *)v205;
      v207 = *((_QWORD *)v205 + 2);
      *((_QWORD *)v148 + 59) = v202;
      *(_OWORD *)((char *)v148 + 456) = v201;
      *((_QWORD *)v148 + 68) = v204;
      v148[33] = v203;
      *((_QWORD *)v148 + 77) = v207;
      *(_OWORD *)((char *)v148 + 600) = v206;
      LODWORD(v205) = *((_DWORD *)v147 + 4);
      v208 = (char *)v156 + 8 * (v151 + (_DWORD)v205);
      v209 = *(_OWORD *)v208;
      v210 = *((_QWORD *)v208 + 2);
      *(_QWORD *)&v203 = *(_QWORD *)&v208[v155 + 16];
      v211 = *(_OWORD *)&v208[v155];
      v212 = &v208[v160];
      *(_QWORD *)&v206 = *((_QWORD *)v212 + 2);
      v213 = *(_OWORD *)v212;
      *((_QWORD *)v148 + 8) = v210;
      v148[3] = v209;
      *(_OWORD *)((char *)v148 + 120) = v211;
      *((_QWORD *)v148 + 17) = v203;
      v148[12] = v213;
      *((_QWORD *)v148 + 26) = v206;
      v214 = (char *)v156 + 8 * (v152 + (_DWORD)v205);
      *(_QWORD *)&v209 = *((_QWORD *)v214 + 2);
      v215 = *(_OWORD *)v214;
      *(_QWORD *)&v203 = *(_QWORD *)&v214[v155 + 16];
      v216 = *(_OWORD *)&v214[v155];
      v217 = &v214[v160];
      v218 = *(_OWORD *)v217;
      *(_QWORD *)&v213 = *((_QWORD *)v217 + 2);
      *v149 = v215;
      *((_QWORD *)v148 + 35) = v209;
      v148[21] = v216;
      *((_QWORD *)v148 + 44) = v203;
      *((_QWORD *)v148 + 53) = v213;
      *(_OWORD *)((char *)v148 + 408) = v218;
      v219 = (char *)v156 + 8 * (v153 + (_DWORD)v205);
    }
    v279 = *((_QWORD *)v219 + 2);
    v280 = (int8x16_t *)&v219[v155];
    v281 = *v280;
    v282 = v280[1].i64[0];
    v283 = (int8x16_t *)&v219[v160];
    v284 = *v283;
    v285 = v283[1].i64[0];
    v148[30] = *(_OWORD *)v219;
    *((_QWORD *)v148 + 62) = v279;
    *((_QWORD *)v148 + 71) = v282;
    v281.i64[1] = vextq_s8(v281, v281, 8uLL).u64[0];
    *(int8x16_t *)((char *)v148 + 552) = v281;
    *((_QWORD *)v148 + 80) = v285;
    v284.i64[1] = vextq_s8(v284, v284, 8uLL).u64[0];
    v148[39] = v284;
    v831 = COERCE_DOUBLE(v854);
    p_p = (uint64_t)&__p;
    *(_QWORD *)&v849[0] = v854;
    v853[0] = *(double *)(a1 + 104) + *(double *)(a1 + 104);
    *(_QWORD *)&v850[8] = &v831;
    *(_QWORD *)&v850[16] = v849;
    *(_QWORD *)&v850[24] = 0x3FF0000000000000;
    sub_20F20C8DC((uint64_t)&v844[8], (uint64_t)v850);
    *(_QWORD *)&v845 = v853;
    v834[1] = 12;
    v834[0] = (__uint64_t)operator new(0x60uLL, (std::align_val_t)0x20uLL);
    v835 = 0x300000003;
    v286.f64[0] = *(float64_t *)&v844[72];
    v287.f64[0] = v853[0];
    *(_QWORD *)&v850[64] = *(_OWORD *)&vaddq_f64(v286, v287);
    *(float64x2_t *)&v850[32] = vaddq_f64(*(float64x2_t *)&v844[40], (float64x2_t)*(unint64_t *)&v853[0]);
    *(float64x2_t *)&v850[48] = vaddq_f64(*(float64x2_t *)&v844[56], (float64x2_t)0);
    *(float64x2_t *)v850 = vaddq_f64(*(float64x2_t *)&v844[8], (float64x2_t)*(unint64_t *)&v853[0]);
    *(float64x2_t *)&v850[16] = vaddq_f64(*(float64x2_t *)&v844[24], (float64x2_t)0);
    sub_20F209640((uint64_t)v834, (uint64_t)v850);
    *(_QWORD *)&v849[0] = &v839;
    sub_20F196C54((uint64_t)v834);
    v831 = COERCE_DOUBLE(v849);
    p_p = (uint64_t)v850;
    *(_QWORD *)&v844[8] = &v831;
    *(_QWORD *)&v844[16] = &v839;
    *(_QWORD *)&v844[24] = 0x3FF0000000000000;
    sub_20F20CC00(v853, (uint64_t)v844);
    v288 = v853[0];
    if (*(_QWORD *)v850)
      MEMORY[0x212BC6368](*(_QWORD *)v850, 0x1000C8000313F17);
    if (v288 <= *(double *)(a1 + 72))
    {
      v290 = *(_QWORD *)&v861.f64[0] + 8 * v818;
      v291 = v839;
      *(_QWORD *)(v290 + 16) = v840;
      *(float64x2_t *)v290 = v291;
      v292 = v826;
      v293 = (_BYTE *)v825;
      v294 = v825 + 8 * (v818 + v826 * *(_DWORD *)(a1 + 632));
      v295 = *(_OWORD *)v854;
      v296 = *(_OWORD *)v855;
      v297 = *(_QWORD *)&v855[16];
      v298 = *(_OWORD *)&v855[24];
      v299 = v856;
      *(_QWORD *)(v294 + 16) = *(_QWORD *)&v854[16];
      *(_OWORD *)v294 = v295;
      v300 = v294 + 8 * v292;
      *(_QWORD *)(v300 + 16) = v297;
      *(_OWORD *)v300 = v296;
      v301 = v294 + 16 * v292;
      *(_QWORD *)(v301 + 16) = v299;
      *(_OWORD *)v301 = v298;
      v302 = (v818 + v292 * *(_DWORD *)__len);
      v303 = (int8x16_t)v857;
      v304 = vextq_s8(v303, v303, 8uLL).u64[0];
      v305 = *(int8x16_t *)&v858[8];
      v306 = vextq_s8(v305, v305, 8uLL).u64[0];
      v307 = *(_QWORD *)&v858[24];
      v308 = *(_QWORD *)&v860[0];
      v309 = (int8x16_t)v859;
      v310 = vextq_s8(v309, v309, 8uLL).u64[0];
      if (v854 == v293)
      {
        v322 = &v854[8 * v302];
        *((_QWORD *)v322 + 2) = *(_QWORD *)v858;
        v303.i64[1] = v304;
        *(int8x16_t *)v322 = v303;
        v323 = (int8x16_t *)&v322[8 * v292];
        v323[1].i64[0] = v307;
        v305.i64[1] = v306;
        *v323 = v305;
        v324 = (int8x16_t *)&v322[16 * v292];
        v324[1].i64[0] = v308;
        v309.i64[1] = v310;
        *v324 = v309;
        v320 = *((_QWORD *)&v860[4] + 1);
        v317 = *(int8x16_t *)((char *)&v860[2] + 8);
        v316 = *(int8x16_t *)((char *)&v860[3] + 8);
        v314 = *(int8x16_t *)((char *)v860 + 8);
        v319 = *(int8x16_t *)((char *)&v860[1] + 8);
        v321 = vextq_s8(v316, v316, 8uLL).u64[0];
        v318 = vextq_s8(v317, v317, 8uLL).u64[0];
        *(_QWORD *)&v315 = vextq_s8(v319, v319, 8uLL).u64[0];
      }
      else
      {
        v311 = (int8x16_t *)&v293[8 * v302];
        v311[1].i64[0] = *(_QWORD *)v858;
        v303.i64[1] = v304;
        *v311 = v303;
        v312 = (int8x16_t *)((char *)v311 + 8 * v292);
        v312[1].i64[0] = v307;
        v305.i64[1] = v306;
        *v312 = v305;
        v313 = &v311[v292];
        v313[1].i64[0] = v308;
        v309.i64[1] = v310;
        *v313 = v309;
        v314 = *(int8x16_t *)((char *)v860 + 8);
        *(_QWORD *)&v315 = *(_QWORD *)&v860[2];
        v316 = *(int8x16_t *)((char *)&v860[3] + 8);
        v318 = *(_QWORD *)&v860[3];
        v317.i64[0] = *((_QWORD *)&v860[2] + 1);
        v319.i64[0] = *((_QWORD *)&v860[1] + 1);
        v320 = *((_QWORD *)&v860[4] + 1);
        v321 = vextq_s8(v316, v316, 8uLL).u64[0];
      }
      v325 = v818;
      v326 = (int8x16_t *)&v293[8 * (v818 + v292 * *v145)];
      v314.i64[1] = vextq_s8(v314, v314, 8uLL).u64[0];
      *((_QWORD *)&v315 + 1) = v317.i64[0];
      v316.i64[1] = v321;
      v326[1].i64[0] = v319.i64[0];
      *v326 = v314;
      v327 = &v326->i8[8 * v292];
      *((_QWORD *)v327 + 2) = v318;
      *(_OWORD *)v327 = v315;
      v328 = &v326[v292];
      v328[1].i64[0] = v320;
      *v328 = v316;
      v329 = *(_QWORD *)v145;
      if (v822 < v796)
      {
        *(_QWORD *)v822 = v329;
        v330 = (uint64_t)(v822 + 8);
        v19 = v807;
LABEL_87:
        v842 = (_QWORD *)v330;
        v818 = v325 + 3;
        v822 = (char *)v330;
        goto LABEL_88;
      }
      v331 = (v822 - v78) >> 3;
      v332 = v331 + 1;
      if ((unint64_t)(v331 + 1) >> 61)
        sub_20E867F44();
      if ((v796 - v78) >> 2 > v332)
        v332 = (v796 - v78) >> 2;
      if ((unint64_t)(v796 - v78) >= 0x7FFFFFFFFFFFFFF8)
        v333 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v333 = v332;
      if (v333)
      {
        if (v333 >> 61)
          sub_20E877A38();
        v334 = operator new(8 * v333);
        v335 = &v334[8 * v331];
        *v335 = v329;
        v330 = (uint64_t)(v335 + 1);
        v336 = v822 - v78;
        if (v822 != v78)
        {
LABEL_80:
          v337 = v336 - 8;
          if (v337 < 0x168
            || (v340 = (v822 - 8 - v78) & 0xFFFFFFFFFFFFFFF8, &v334[v822 - v78 - 8 - v340] > &v334[v822 - v78 - 8])
            || &v822[-v340 - 8] > v822 - 8)
          {
            v338 = v822;
          }
          else
          {
            if ((unint64_t)(v78 - v334) >= 0x20)
            {
              v341 = (v337 >> 3) + 1;
              v342 = 8 * (v341 & 0x3FFFFFFFFFFFFFFCLL);
              v338 = &v822[-v342];
              v335 = (_QWORD *)((char *)v335 - v342);
              v343 = &v334[8 * v331 - 16];
              v344 = v822 - 16;
              v345 = v341 & 0x3FFFFFFFFFFFFFFCLL;
              v38 = a1;
              do
              {
                v346 = *(_OWORD *)v344;
                *(v343 - 1) = *((_OWORD *)v344 - 1);
                *v343 = v346;
                v343 -= 2;
                v344 -= 32;
                v345 -= 4;
              }
              while (v345);
              v19 = v807;
              if (v341 == (v341 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_84:
                v841 = v335;
                v842 = (_QWORD *)v330;
                v796 = &v334[8 * v333];
                v843 = v796;
                if (!v78)
                {
LABEL_86:
                  v78 = (char *)v335;
                  v325 = v818;
                  goto LABEL_87;
                }
LABEL_85:
                operator delete(v78);
                goto LABEL_86;
              }
              do
              {
LABEL_83:
                v339 = *((_QWORD *)v338 - 1);
                v338 -= 8;
                *--v335 = v339;
              }
              while (v338 != v78);
              goto LABEL_84;
            }
            v338 = v822;
          }
          v38 = a1;
          v19 = v807;
          goto LABEL_83;
        }
      }
      else
      {
        v334 = 0;
        v335 = (_QWORD *)(8 * v331);
        *(_QWORD *)(8 * v331) = v329;
        v330 = 8 * v331 + 8;
        v336 = v822 - v78;
        if (v822 != v78)
          goto LABEL_80;
      }
      v38 = a1;
      v19 = v807;
      v841 = v335;
      v842 = (_QWORD *)v330;
      v796 = &v334[8 * v333];
      v843 = v796;
      if (!v78)
        goto LABEL_86;
      goto LABEL_85;
    }
    v289 = *(_QWORD *)(a1 + 672);
    if (0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 680) - v289) >> 4) > v39)
      *(_BYTE *)(v289 + 144 * v39 + 136) = 0;
    v19 = v807;
LABEL_88:
    if (v834[0])
      MEMORY[0x212BC6368](v834[0], 0x1000C8000313F17);
    if (__p)
      MEMORY[0x212BC6368](__p, 0x1000C8000313F17);
    operator delete(v147);
    v6 = *(_QWORD *)(v38 + 680);
    v7 = *(_QWORD *)(v38 + 672);
LABEL_54:
    if (++v39 < 0x8E38E38E38E38E39 * ((v6 - v7) >> 4))
      continue;
    break;
  }
  v348 = v818;
  if (v818 <= 2)
  {
    v347 = 0;
    v382 = v841;
  }
  else
  {
    sub_20F20CEEC(&v861, v818, 1u);
    sub_20F2030A0((unsigned int *)&v825, v818, HIDWORD(v826));
    v349 = (char *)v841;
    v804 = v822 - (_BYTE *)v841;
    v350 = 3 * ((unint64_t)(v822 - (_BYTE *)v841) >> 3);
    v351 = (8 * (v350 * v818) + 31) & 0xFFFFFFFE0;
    *(_QWORD *)&v854[8] = v351 >> 3;
    v352 = (char *)operator new(v351, (std::align_val_t)0x20uLL);
    v353 = v352;
    *(_QWORD *)v854 = v352;
    *(_DWORD *)&v854[16] = v818;
    *(_DWORD *)&v854[20] = v350;
    v810 = v349;
    if (v349 != v822)
    {
      v354 = v826;
      v355 = v825;
      __lena = 8 * v826;
      v356 = v349 + 8;
      v357 = 2;
      v358 = 0;
      v359 = *(_DWORD *)v810;
      if ((char *)v825 != v352)
        goto LABEL_110;
LABEL_112:
      v360 = (char *)operator new((24 * v348 + 31) & 0xFFFFFFFE0, (std::align_val_t)0x20uLL);
      v361 = v360;
      if (v354)
      {
        memmove(v360, (const void *)(v355 + 8 * (v354 * v359)), __lena);
        memmove(&v361[__lena], (const void *)(v355 + 8 * (v354 + v354 * v359)), __lena);
        memmove(&v361[__lena + __lena], (const void *)(v355 + 8 * ((v359 + 2) * v354)), __lena);
      }
      if (v348)
      {
        memmove((void *)(v355 + 8 * v358 * v348), v361, 8 * v348);
        v362 = 8 * (int)v348;
        memmove((void *)(v355 + 8 * (v357 - 1) * v348), &v361[v362], 8 * v348);
        memmove((void *)(v355 + 8 * v357 * v348), &v361[v362 + v362], 8 * v348);
      }
      MEMORY[0x212BC6368](v361, 0x1000C8000313F17);
      while (v356 != v822)
      {
        v348 = *(_DWORD *)&v854[16];
        v353 = *(char **)v854;
        v357 += 3;
        v356 += 8;
        v358 = v357 - 2;
        v359 = *((_DWORD *)v356 - 2);
        if (v355 == *(_QWORD *)v854)
          goto LABEL_112;
LABEL_110:
        if (v354)
        {
          memmove(&v353[8 * v358 * v348], (const void *)(v355 + 8 * (v354 * v359)), __lena);
          memmove(&v353[8 * (v357 - 1) * v348], (const void *)(v355 + 8 * (v354 + v354 * v359)), __lena);
          memmove(&v353[8 * v357 * v348], (const void *)(v355 + 8 * ((v359 + 2) * v354)), __lena);
        }
      }
    }
    v363 = *(double *)(a1 + 104);
    v364 = LODWORD(v862.f64[0]);
    v365 = (8 * (v364 * v364) + 31) & 0xFFFFFFFE0;
    *(_QWORD *)&v844[8] = v365 >> 3;
    v366 = (double *)operator new(v365, (std::align_val_t)0x20uLL);
    v372 = v366;
    *(_QWORD *)v844 = v366;
    *(_DWORD *)&v844[16] = v364;
    *(_DWORD *)&v844[20] = v364;
    if ((_DWORD)v364 * (_DWORD)v364)
      bzero(v366, 8 * (v364 * v364));
    if (!(_DWORD)v364)
    {
      v839.f64[0] = 0.0;
      goto LABEL_399;
    }
    v373 = v363 + v363;
    v374 = v364 + 1;
    v38 = a1;
    v19 = v807;
    v375 = 0;
    if ((_DWORD)v364 == 1)
      goto LABEL_122;
    v691 = v374 < 0 ? ~(_DWORD)v364 : v364 + 1;
    v692 = (v364 - 1) * (unint64_t)v691;
    v693 = (_DWORD)v364 != -1 && (unint64_t)(v364 - 1) >> 32 != 0;
    if ((_DWORD)v692 && v374 < 0)
      goto LABEL_122;
    if ((v692 & 0xFFFFFFFF00000000) != 0)
      goto LABEL_122;
    if (v693)
      goto LABEL_122;
    v695 = 0;
    v375 = v364 & 0xFFFFFFFE;
    v696 = v375;
    do
    {
      v372[v695] = v373;
      v372[v374 + v695] = v373;
      v695 += 2 * v364 + 2;
      v696 -= 2;
    }
    while (v696);
    if (v375 != v364)
    {
LABEL_122:
      v376 = v364 - v375;
      v377 = v374 * v375;
      do
      {
        v372[v377] = v373;
        v377 += v374;
        --v376;
      }
      while (v376);
    }
    v839.f64[0] = (double)v364;
    v378 = (unint64_t)(COERCE__INT64(fabs((double)v364)) - 0x10000000000000) >> 53;
    if ((COERCE__INT64((double)v364) <= -1 || v378 >= 0x3FF)
      && COERCE__INT64((double)v364) != 0)
    {
LABEL_399:
      sub_20F20D054("boost::math::chi_squared_distribution<%1%>::chi_squared_distribution", "Degrees of freedom argument is %1%, but must be > 0 !");
    }
    *(_QWORD *)v850 = 0x3FEE666666666666;
    v381 = sub_20F2039EC((double *)v850, (double)v364, v367, v368, v369, v370, v371);
    v382 = v810;
    *(_QWORD *)v850 = v810;
    *(_QWORD *)&v850[8] = v804 >> 3;
    v347 = sub_20F1F9A14(a1, (uint64_t)&v861, (uint64_t)v854, (uint64_t *)v850, (double **)v844, 1, 0, 1, v381, 1, 1, 1, 0, (int *)&v829);
    if (v347)
    {
      ++*(_QWORD *)(a1 + 192);
      v384 = *(_QWORD *)(a1 + 672);
      v383 = *(_QWORD *)(a1 + 680);
      v385 = v383 - v384;
      if (v383 != v384)
      {
        v386 = 0;
        v387 = v385 / 144;
        if (v387 <= 1)
          v388 = 1;
        else
          v388 = v387;
        v389 = (_BYTE *)(v384 + 137);
        do
        {
          if (v387 > v386 && *(v389 - 1))
            *v389 = 1;
          ++v386;
          v389 += 144;
        }
        while (v388 != v386);
      }
      sub_20F203A84((long double *)v850, a1 + 440);
      __p = *(void **)(a1 + 400);
      *(double *)v834 = *(double *)v850 * 57.2957795;
      v831 = *(double *)&v850[8] * 57.2957795;
      v853[0] = *(double *)&v850[16] * 57.2957795;
      sub_20F207E0C((uint64_t *)(a1 + 192), (uint64_t *)&__p, (uint64_t *)v834, &v831, v853);
    }
    if (*(_QWORD *)v844)
      MEMORY[0x212BC6368](*(_QWORD *)v844, 0x1000C8000313F17);
    if (*(_QWORD *)v854)
      MEMORY[0x212BC6368](*(_QWORD *)v854, 0x1000C8000313F17);
  }
  if (v382)
    operator delete(v382);
  if ((_QWORD)v825)
    MEMORY[0x212BC6368](v825, 0x1000C8000313F17);
  if (*(_QWORD *)&v861.f64[0])
    MEMORY[0x212BC6368](*(_QWORD *)&v861.f64[0], 0x1000C8000313F17);
  if (!v794)
  {
LABEL_263:
    v697 = *(_QWORD *)(v38 + 152) + 1;
    v698 = v19[v697];
    if (v698 == v36)
      goto LABEL_267;
    v699 = v698 - v36;
    if (v698 < v36)
      v699 = v36 - v698;
    if (v699 <= *(double *)(v38 + 88))
    {
LABEL_267:
      v700 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v38 + 680) - *(_QWORD *)(v38 + 672)) >> 4);
      v701 = *(_QWORD *)(v38 + 168);
      if (v700 >= v701)
      {
        if (v697 >= v700)
        {
          v702 = 0;
        }
        else
        {
          v702 = 0;
          do
          {
            v703 = v19[v697];
            if (v698 == v703
              || (v698 >= v703 ? (v704 = v698 - v703) : (v704 = v703 - v698), v704 <= *(double *)(v38 + 88)))
            {
              ++v702;
            }
            ++v697;
          }
          while (v700 != v697);
        }
        if (*(double *)(v38 + 128) * (double)v701 <= (double)v702)
          *(_WORD *)(v38 + 144) = 1;
      }
    }
  }
LABEL_281:
  MEMORY[0x212BC6368](v19, 0x1000C8000313F17);
  return v347;
}

void sub_20F2078F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  uint64_t v54;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;

  __cxa_guard_abort(&qword_254A68260);
  v56 = *(_QWORD *)(v54 - 224);
  if (v56)
    MEMORY[0x212BC6368](v56, 0x1000C8000313F17);
  if (STACK[0x220])
  {
    MEMORY[0x212BC6368](STACK[0x220], 0x1000C8000313F17);
    v57 = __p;
    if (!__p)
    {
LABEL_5:
      v58 = a51;
      if (!a51)
        goto LABEL_6;
      goto LABEL_13;
    }
  }
  else
  {
    v57 = __p;
    if (!__p)
      goto LABEL_5;
  }
  operator delete(v57);
  v58 = a51;
  if (!a51)
  {
LABEL_6:
    v59 = a54;
    if (!a54)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_13:
  MEMORY[0x212BC6368](v58, 0x1000C8000313F17);
  v59 = a54;
  if (!a54)
  {
LABEL_11:
    MEMORY[0x212BC6368](a27, 0x1000C8000313F17);
    _Unwind_Resume(a1);
  }
LABEL_10:
  MEMORY[0x212BC6368](v59, 0x1000C8000313F17);
  goto LABEL_11;
}

void sub_20F207D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p)
{
  void *v54;
  uint64_t v55;

  if (a45)
  {
    MEMORY[0x212BC6368](a45, 0x1000C8000313F17);
    if (!a48)
      goto LABEL_6;
  }
  else if (!a48)
  {
LABEL_6:
    operator delete(v54);
    if (__p)
    {
      operator delete(__p);
      if (a35)
      {
        MEMORY[0x212BC6368](a35, 0x1000C8000313F17);
        if (!*(_QWORD *)(v55 - 224))
          JUMPOUT(0x20F207C04);
        JUMPOUT(0x20F207BF0);
      }
      JUMPOUT(0x20F207BE8);
    }
    JUMPOUT(0x20F207BE0);
  }
  MEMORY[0x212BC6368]();
  goto LABEL_6;
}

std::chrono::steady_clock::time_point sub_20F207E0C(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  unsigned __int8 v10;
  _QWORD *v11;
  int v12;
  std::chrono::steady_clock::time_point result;
  std::chrono::steady_clock::time_point *v14;
  uint64_t *v15;
  unsigned __int8 v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  __uint64_t v38[2];
  int v39;
  _BYTE v40[18];
  __int16 v41;
  uint64_t v42;
  _BYTE v43[10];
  __int16 v44;
  uint64_t v45;
  char v46;
  char v47;
  void *v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  void *__p;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v10 = atomic_load((unsigned __int8 *)&qword_254A68278);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254A68278))
  {
    v36 = operator new(0x28uLL);
    v36[1] = 0;
    v36[2] = 0;
    *v36 = &off_24C9C4340;
    *((_BYTE *)v36 + 24) = 0;
    *((_BYTE *)v36 + 32) = 0;
    qword_254A682C8 = (uint64_t)(v36 + 3);
    qword_254A682D0 = (uint64_t)v36;
    unk_254A682D8 = 10000000000;
    __cxa_atexit((void (*)(void *))sub_20EAF5AE0, &qword_254A682C8, &dword_20E81F000);
    __cxa_guard_release(&qword_254A68278);
  }
  v11 = (_QWORD *)qword_254A682C8;
  v12 = *(unsigned __int8 *)(qword_254A682C8 + 8);
  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (v12)
  {
    if (result.__d_.__rep_ - *v11 < 10000000000)
      return result;
    v14 = (std::chrono::steady_clock::time_point *)qword_254A682C8;
  }
  else
  {
    v14 = (std::chrono::steady_clock::time_point *)qword_254A682C8;
    if (!*(_BYTE *)(qword_254A682C8 + 8))
      *(_BYTE *)(qword_254A682C8 + 8) = 1;
  }
  v14->__d_.__rep_ = result.__d_.__rep_;
  v15 = sub_210219C18();
  v16 = atomic_load((unsigned __int8 *)&qword_254A6DDD0);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DDD0))
  {
    __cxa_atexit((void (*)(void *))sub_21021A250, &stru_254A5A410, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6DDD0);
  }
  v17 = atomic_load(&qword_254A5A450);
  v18 = "EE";
  if (v17)
  {
    v19 = *a1;
    v20 = *a2;
    v21 = *a3;
    v37 = a4;
    v22 = *a4;
    v23 = a5;
    v24 = *a5;
    v39 = 134219008;
    *(_QWORD *)v40 = v19;
    *(_WORD *)&v40[8] = 2048;
    *(_QWORD *)&v40[10] = v20;
    v41 = 2048;
    v42 = v21;
    *(_WORD *)v43 = 2048;
    *(_QWORD *)&v43[2] = v22;
    v44 = 2048;
    v45 = v24;
    v25 = (char *)_os_log_send_and_compose_impl();
    v26 = strlen(v25);
    v38[0] = 0;
    pthread_threadid_np(0, v38);
    v27 = v38[0];
    timespec_get((timespec *)v38, 1);
    sub_210219E20(&v39, 0xEEEEB0B5B2B2EEEELL, "AttitudeFilter", 0xEuLL, (__int128 *)(v15 + 1), (__int128 *)(v15 + 5), "Successful mag update using relative constrain %zu at time: %f, RPY: %lf, %lf, %lf ", 0x53uLL, v25, v26, v27, v38);
    std::mutex::lock(&stru_254A5A410);
    v28 = qword_254A5A458;
    for (i = unk_254A5A460; v28 != i; v28 += 40)
    {
      v30 = *(_QWORD *)(v28 + 32);
      if (!v30)
        sub_20E86D37C();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v30 + 48))(v30, &v39);
    }
    std::mutex::unlock(&stru_254A5A410);
    if (v54 < 0)
    {
      operator delete(__p);
      a5 = v23;
      v18 = "EE";
      if ((v52 & 0x80000000) == 0)
      {
LABEL_14:
        a4 = v37;
        if (!v50)
        {
LABEL_20:
          if (v47 && v46 < 0)
            operator delete(*(void **)v43);
          if (SHIBYTE(v42) < 0)
            operator delete(*(void **)&v40[4]);
          if (v25)
            free(v25);
          goto LABEL_27;
        }
LABEL_18:
        if (v49 < 0)
          operator delete(v48);
        goto LABEL_20;
      }
    }
    else
    {
      a5 = v23;
      v18 = "N4cv3d3kit11concurrency6detail21ChannelInputModelBaseINS_3vio8cv_types21ImageProcessingSampleEEE" + 94;
      if ((v52 & 0x80000000) == 0)
        goto LABEL_14;
    }
    operator delete(v51);
    a4 = v37;
    if (!v50)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_27:
  result.__d_.__rep_ = os_signpost_enabled((os_log_t)*v15);
  if (LODWORD(result.__d_.__rep_))
  {
    v31 = *a1;
    v32 = *a2;
    v33 = *a3;
    v34 = *a4;
    v35 = *a5;
    v39 = *((_QWORD *)v18 + 445);
    *(_QWORD *)v40 = v31;
    *(_WORD *)&v40[8] = 2048;
    *(_QWORD *)&v40[10] = v32;
    v41 = 2048;
    v42 = v33;
    *(_WORD *)v43 = 2048;
    *(_QWORD *)&v43[2] = v34;
    v44 = 2048;
    v45 = v35;
    return (std::chrono::steady_clock::time_point)_os_signpost_emit_unreliably_with_name_impl();
  }
  return result;
}

void sub_20F208240(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A68278);
  _Unwind_Resume(a1);
}

void sub_20F208258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  void *v49;

  if (a49 < 0)
  {
    operator delete(__p);
    if ((a43 & 0x80000000) == 0)
    {
LABEL_3:
      if (!a37)
        goto LABEL_9;
LABEL_7:
      if (a36 < 0)
        operator delete(a31);
LABEL_9:
      if (a30 && a29 < 0)
        operator delete(a24);
      if (a23 < 0)
        operator delete(a18);
      if (!v49)
        _Unwind_Resume(exception_object);
      free(v49);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a43 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a38);
  if (!a37)
    goto LABEL_9;
  goto LABEL_7;
}

double sub_20F20830C(float64x2_t *a1, double *a2, double *a3)
{
  double v5;
  double v7;
  double v14;
  double v15;
  double v16;
  double v17;
  double cosval;
  double v19;
  __double2 v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double result;
  double v34;
  int8x16_t v35;
  double v36;

  sub_20E9733B8(a1, a2);
  v5 = a2[2];
  _Q6 = *(int8x16_t *)a2;
  *(_QWORD *)&v7 = vextq_s8(_Q6, _Q6, 8uLL).u64[0];
  _D1 = *((_QWORD *)a2 + 1);
  __asm { FMLA            D0, D1, V6.D[1] }
  v14 = _D0 + v5 * v5;
  if (v14 >= 0.0000002635)
  {
    v19 = sqrt(v14);
    v35 = *(int8x16_t *)a2;
    v36 = a2[2];
    v34 = v7;
    v20 = __sincos_stret(v19);
    cosval = v20.__cosval;
    v7 = v34;
    _Q6.i64[0] = v35.i64[0];
    v5 = v36;
    v17 = v20.__sinval / v19;
    v15 = 1.0 / v14 * (1.0 - v20.__cosval);
    v16 = 1.0 / v14 * (1.0 - v20.__sinval / v19);
  }
  else
  {
    v15 = 0.5 - v14 * (v14 / -720.0 + 0.0416666667);
    v16 = 0.166666667 - v14 * (v14 / -5040.0 + 0.00833333333);
    v17 = 1.0 - v14 * v16;
    cosval = 1.0 - v14 * v15;
  }
  v21 = (v15 * 0.5 - v16) / v17;
  v22 = (v15 + v17 * -0.5) / (1.0 - cosval);
  if (cosval >= 0.9)
    v22 = v21;
  v23 = 1.0 - v14 * v22;
  v24 = *(double *)_Q6.i64 * v22;
  v25 = v7 * v22;
  *a3 = v23 + *(double *)_Q6.i64 * (*(double *)_Q6.i64 * v22);
  a3[4] = v23 + v7 * v22 * a2[1];
  a3[8] = v23 + v5 * v22 * a2[2];
  v26 = a2[1];
  v27 = v24 * v26;
  v28 = a2[2];
  v29 = v24 * v28;
  v30 = v25 * v28;
  v31 = *a2 * -0.5;
  v32 = v26 * -0.5;
  a3[3] = v27 - v28 * -0.5;
  a3[6] = v32 + v29;
  a3[7] = v30 - v31;
  a3[1] = v27 + v28 * -0.5;
  a3[2] = v29 - v32;
  result = v30 + v31;
  a3[5] = v30 + v31;
  return result;
}

void sub_20F2084DC(uint64_t a1, uint64_t a2)
{
  double *v4;
  const double *v5;
  uint64_t v6;
  double *v7;
  int v8;
  int v9;
  double *v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(double **)a1;
  v5 = *(const double **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5 == v4 || (v7 = *(double **)(v6 + 16), &v7[-*(unsigned int *)(v6 + 24)] == v4))
  {
    v9 = *(_DWORD *)(v6 + 4);
    v14 = (12 * v9);
    v13 = operator new(8 * v14, (std::align_val_t)0x20uLL);
    LODWORD(v15) = 12;
    HIDWORD(v15) = v9;
    sub_20F2084DC(&v13, a2);
    v10 = *(double **)a1;
    v11 = v14;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v15;
    if (v10)
      MEMORY[0x212BC6368](v10, 0x1000C8000313F17);
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 4);
    if (v8 * *(_DWORD *)v6)
    {
      sub_20E8BE654(0, 0, 12, v8, 12, v5, 12, v7, *(double *)(a2 + 24), 0.0, *(_DWORD *)(v6 + 8), v4, *(_DWORD *)(a1 + 16));
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 20);
      if (v12 * *(_DWORD *)(a1 + 16))
        bzero(v4, 8 * (v12 * *(_DWORD *)(a1 + 16)));
    }
  }
}

void sub_20F208608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x212BC6368](a12, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

int64x2_t *sub_20F208630(int64x2_t *result, uint64_t a2)
{
  int64x2_t *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  size_t v7;
  int v8;
  int v9;
  int32x4_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int32 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  int32x4_t v40;
  int32x4_t v41;
  unsigned int v42;
  unint64_t v43;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64x2_t *v49;
  int64x2_t *v50;
  BOOL v51;
  int v52;
  int v53;
  unsigned int v54;
  int32x4_t v55;
  int32x4_t v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64x2_t *v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t *v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t *v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  int64x2_t *v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t *v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t *v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t *v112;
  int64x2_t *v113;
  int64x2_t *v114;
  int64x2_t *v115;
  int64x2_t *v116;
  int64x2_t *v117;
  int64x2_t *v118;
  uint64_t v119;
  unint64_t v120;
  __int32 v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v132;
  int v133;
  unsigned int v134;
  unint64_t v135;
  int32x4_t v136;
  int32x4_t v137;
  unsigned int v138;
  unint64_t v139;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int64x2_t *v145;
  int64x2_t *v146;
  BOOL v147;
  int v148;
  int v149;
  unsigned int v150;
  int32x4_t v151;
  int32x4_t v152;
  unsigned int v153;
  unint64_t v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  int v158;
  int v159;
  int v160;
  int64x2_t v161;
  uint64_t v162;
  int64x2_t v163;

  v3 = result;
  v5 = *(_DWORD *)a2;
  v4 = *(unsigned int *)(a2 + 4);
  result[1].i32[0] = v4;
  result[1].i32[1] = v5;
  v6 = v5 * (unint64_t)v4;
  if (result->i64[1] < v6)
  {
    if (result->i64[0])
      MEMORY[0x212BC6368]();
    v7 = (8 * v6 + 31) & 0xFFFFFFFFFFFFFFE0;
    v3->i64[0] = 0;
    v3->i64[1] = v7 >> 3;
    result = (int64x2_t *)operator new(v7, (std::align_val_t)0x20uLL);
    v3->i64[0] = (uint64_t)result;
  }
  if (v5)
  {
    v8 = 0;
    v9 = v4 & 7;
    v160 = 2 * v9;
    v158 = v4 & 0xFFFFFFF8;
    v159 = -2 * v9;
    v10.i64[0] = -1;
    v10.i64[1] = -1;
    v11 = v5;
    v155 = v5;
    while (1)
    {
      v157 = v11;
      v12 = v11 <= 1 ? 1 : v11;
      v156 = v8 + 8;
      if (v8 + 8 <= v5 || v5 - v8 == 8)
        break;
      if ((_DWORD)v4)
      {
        v13 = 0;
        v14 = v3[1].i32[0];
        v15 = v3->i64[0];
        v16 = *(unsigned int *)(a2 + 24);
        v162 = *(_QWORD *)(a2 + 16) - 8 * v16;
        v17 = *(_DWORD *)(a2 + 8);
        v18 = v16 + v8;
        while (1)
        {
          v19 = v13 + 8;
          v20 = v13 + 8 <= v4 ? 8 : v4 - v13;
          if (v20)
            break;
LABEL_15:
          v13 += 8;
          if (v19 >= v4)
            goto LABEL_7;
        }
        v21 = 0;
        v22 = 0;
        if (v20 >= 0)
          v23 = v20;
        else
          v23 = -v20;
        v24 = 2 * v20;
        v25 = -2 * v20;
        while (1)
        {
          v29 = HIDWORD(v22);
          if (v23 >> 4 >= 0x271)
          {
            v32 = v20 + v22 + v20 * HIDWORD(v22);
            v33 = (v32 / v20);
            v34 = (v32 % v20);
            v31 = v34 | (v33 << 32);
            v35 = (v34 + v20) | ((unint64_t)(v33 - 1) << 32);
            if ((int)v34 < 0)
              v31 = v35;
            goto LABEL_48;
          }
          v30 = (v20 + v22);
          if (v20 + (int)v22 >= 0)
          {
            v31 = v22 & 0xFFFFFFFF00000000 | v30;
            if ((int)v30 >= v20)
              goto LABEL_45;
            goto LABEL_48;
          }
          v36 = v25 + ((v24 + v22) & ~((v24 + (int)v22) >> 31));
          v37 = v36 == (_DWORD)v22 ? 1 : 2;
          v38 = v37 + (v36 - (v36 != (_DWORD)v22) - v22) / v20;
          if (v38 < 8)
            break;
          result = (int64x2_t *)(v38 & 0xFFFFFFF8);
          LODWORD(v30) = v30 + (_DWORD)result * v20;
          v40 = 0uLL;
          v41 = (int32x4_t)HIDWORD(v22);
          v42 = v38 & 0xFFFFFFF8;
          do
          {
            v41 = vaddq_s32(v41, v10);
            v40 = vaddq_s32(v40, v10);
            v42 -= 8;
          }
          while (v42);
          v39 = vaddvq_s32(vaddq_s32(v40, v41));
          if (v38 != (_DWORD)result)
            goto LABEL_43;
LABEL_44:
          v31 = v30 | (v39 << 32);
          if ((int)v30 >= v20)
          {
LABEL_45:
            v43 = HIDWORD(v31);
            do
            {
              v30 = (v30 - v20);
              v43 = (v43 + 1);
            }
            while ((int)v30 >= v20);
            v31 = v30 | (v43 << 32);
          }
LABEL_48:
          if ((_DWORD)v22 != (_DWORD)v31 || HIDWORD(v22) != HIDWORD(v31))
          {
            v45 = (_QWORD *)(v15 + 8 * (v13 + (v8 + v21) * v14));
            LODWORD(result) = v22;
            v46 = v22;
            do
            {
              *v45++ = *(_QWORD *)(v162
                                 + 8 * (v18 + v17 * v13)
                                 + 8 * (HIDWORD(v46) + (_DWORD)result * v17));
              v47 = ((_DWORD)result + 1);
              v48 = v46 & 0xFFFFFFFF00000000;
              v49 = (int64x2_t *)(v48 | v47);
              v50 = (int64x2_t *)(v48 + 0x100000000);
              if (v20 <= (int)v47)
                result = v50;
              else
                result = v49;
              v51 = (_DWORD)result == (_DWORD)v31 && HIDWORD(result) == HIDWORD(v31);
              v46 = (unint64_t)result;
            }
            while (!v51);
          }
          if (v23 >> 4 >= 0x271)
          {
            v26 = v20 + v22 + v20 * HIDWORD(v22);
            v27 = (v26 / v20);
            v28 = (v26 % v20);
            if ((v28 & 0x80000000) != 0)
            {
              v28 = (v28 + v20);
              v27 = (v27 - 1);
            }
          }
          else
          {
            v28 = (v20 + v22);
            if (v20 + (int)v22 < 0)
            {
              v52 = v25 + ((v24 + v22) & ~((v24 + (int)v22) >> 31));
              if (v52 == (_DWORD)v22)
                v53 = 1;
              else
                v53 = 2;
              v54 = v53 + (v52 - (v52 != (_DWORD)v22) - v22) / v20;
              if (v54 < 8)
                goto LABEL_133;
              LODWORD(v28) = v28 + (v54 & 0xFFFFFFF8) * v20;
              v55 = 0uLL;
              v56 = (int32x4_t)HIDWORD(v22);
              v57 = v54 & 0xFFFFFFF8;
              do
              {
                v56 = vaddq_s32(v56, v10);
                v55 = vaddq_s32(v55, v10);
                v57 -= 8;
              }
              while (v57);
              v29 = vaddvq_s32(vaddq_s32(v55, v56));
              if (v54 != (v54 & 0xFFFFFFF8))
              {
LABEL_133:
                do
                {
                  LODWORD(v28) = v28 + v20;
                  v29 = (v29 - 1);
                }
                while ((v28 & 0x80000000) != 0);
              }
              v22 = v28 | (v29 << 32);
              if ((int)v28 < v20)
                goto LABEL_27;
            }
            else
            {
              v22 = v22 & 0xFFFFFFFF00000000 | v28;
              if ((int)v28 < v20)
                goto LABEL_27;
            }
            v27 = HIDWORD(v22);
            do
            {
              v28 = (v28 - v20);
              v27 = (v27 + 1);
            }
            while ((int)v28 >= v20);
          }
          v22 = v28 | (v27 << 32);
LABEL_27:
          if (++v21 == v12)
            goto LABEL_15;
        }
        v39 = HIDWORD(v22);
        do
        {
LABEL_43:
          LODWORD(v30) = v30 + v20;
          v39 = (v39 - 1);
        }
        while ((v30 & 0x80000000) != 0);
        goto LABEL_44;
      }
LABEL_7:
      v11 = v157 - 8;
      v8 += 8;
      v5 = v155;
      if (v156 >= v155)
        return result;
    }
    if (v4 >= 8)
    {
      v58 = 0;
      do
      {
        v59 = v3[1].u32[0];
        v60 = v3->i64[0] + 8 * (v58 + v8 * v59);
        v61 = *(unsigned int *)(a2 + 8);
        v62 = (int64x2_t *)(*(_QWORD *)(a2 + 16)
                          - 8 * *(unsigned int *)(a2 + 24)
                          + 8 * (*(_DWORD *)(a2 + 24) + v8 + v61 * v58));
        v63 = v62[2];
        v161 = v62[3];
        v65 = *v62;
        v64 = v62[1];
        v66 = (int64x2_t *)((char *)v62 + 8 * v61);
        v68 = v66[2];
        v67 = v66[3];
        v70 = *v66;
        v69 = v66[1];
        v71 = &v62[v61];
        v73 = v71[2];
        v72 = v71[3];
        v75 = *v71;
        v74 = v71[1];
        v76 = (int64x2_t *)((char *)v62 + 24 * v61);
        v77 = &v62[2 * v61];
        v79 = v76[2];
        v78 = v76[3];
        v81 = v77[2];
        v80 = v77[3];
        v83 = *v77;
        v82 = v77[1];
        v85 = *v76;
        v84 = v76[1];
        v86 = (int64x2_t *)((char *)v62 + 40 * v61);
        result = &v62[3 * v61];
        v87 = result[2];
        v88 = result[3];
        v89 = result[1];
        v90 = (int64x2_t *)((char *)v62 + 56 * v61);
        v163 = vzip1q_s64(v65, v70);
        v91 = vzip2q_s64(v65, v70);
        v70.i64[0] = vdupq_laneq_s64(v75, 1).u64[0];
        v92 = vzip1q_s64(v75, v85);
        v70.i64[1] = v85.i64[1];
        v85.i64[0] = vdupq_laneq_s64(v83, 1).u64[0];
        v85.i64[1] = v86->i64[1];
        v93 = vzip1q_s64(v64, v69);
        v94 = vzip2q_s64(v64, v69);
        v69.i64[0] = vdupq_laneq_s64(v74, 1).u64[0];
        v95 = vzip1q_s64(v74, v84);
        v69.i64[1] = v84.i64[1];
        v84.i64[0] = vdupq_laneq_s64(v82, 1).u64[0];
        v96 = vzip1q_s64(v82, v86[1]);
        v84.i64[1] = v86[1].i64[1];
        v97.i64[0] = vdupq_laneq_s64(v73, 1).u64[0];
        v97.i64[1] = v79.i64[1];
        v98 = vzip1q_s64(v73, v79);
        v99 = vzip1q_s64(*result, *v90);
        v100.i64[0] = vdupq_laneq_s64(*result, 1).u64[0];
        v100.i64[1] = v90->i64[1];
        v101 = vzip1q_s64(v81, v86[2]);
        v81.i64[0] = vdupq_laneq_s64(v81, 1).u64[0];
        v81.i64[1] = v86[2].i64[1];
        v102 = vzip1q_s64(v63, v68);
        v103 = vzip2q_s64(v63, v68);
        v104 = vzip1q_s64(v89, v90[1]);
        v89.i64[0] = vdupq_laneq_s64(v89, 1).u64[0];
        v89.i64[1] = v90[1].i64[1];
        v105 = vzip1q_s64(v72, v78);
        v72.i64[0] = vdupq_laneq_s64(v72, 1).u64[0];
        v72.i64[1] = v78.i64[1];
        v106 = vzip1q_s64(v161, v67);
        v107 = vzip2q_s64(v161, v67);
        v108 = vzip1q_s64(v87, v90[2]);
        v87.i64[0] = vdupq_laneq_s64(v87, 1).u64[0];
        v87.i64[1] = v90[2].i64[1];
        v109 = vzip1q_s64(v80, v86[3]);
        v80.i64[0] = vdupq_laneq_s64(v80, 1).u64[0];
        v80.i64[1] = v86[3].i64[1];
        v110 = v90[3];
        *(int64x2_t *)(v60 + 32) = vzip1q_s64(v83, *v86);
        *(int64x2_t *)(v60 + 48) = v99;
        v111 = vzip1q_s64(v88, v110);
        v88.i64[0] = vdupq_laneq_s64(v88, 1).u64[0];
        v88.i64[1] = v110.i64[1];
        *(int64x2_t *)v60 = v163;
        *(int64x2_t *)(v60 + 16) = v92;
        v112 = (int64x2_t *)(v60 + 8 * v59);
        *v112 = v91;
        v112[1] = v70;
        v112[2] = v85;
        v112[3] = v100;
        v113 = (int64x2_t *)(v60 + 16 * v59);
        *v113 = v93;
        v113[1] = v95;
        v113[2] = v96;
        v113[3] = v104;
        v114 = (int64x2_t *)(v60 + 24 * v59);
        *v114 = v94;
        v114[1] = v69;
        v114[2] = v84;
        v114[3] = v89;
        v115 = (int64x2_t *)(v60 + 32 * v59);
        *v115 = v102;
        v115[1] = v98;
        v115[2] = v101;
        v115[3] = v108;
        v116 = (int64x2_t *)(v60 + 40 * v59);
        *v116 = v103;
        v116[1] = v97;
        v116[2] = v81;
        v116[3] = v87;
        v117 = (int64x2_t *)(v60 + 48 * v59);
        *v117 = v106;
        v117[1] = v105;
        v117[2] = v109;
        v117[3] = v111;
        v118 = (int64x2_t *)(v60 + 56 * v59);
        v118[2] = v80;
        v118[3] = v88;
        *v118 = v107;
        v118[1] = v72;
        LODWORD(v118) = v58 + 16;
        v58 += 8;
      }
      while (v118 <= v4);
    }
    if ((v4 & 7) == 0)
      goto LABEL_7;
    v119 = 0;
    v120 = 0;
    v121 = v3[1].i32[0];
    v122 = v3->i64[0];
    v123 = *(_DWORD *)(a2 + 8);
    v124 = *(_QWORD *)(a2 + 16)
         - 8 * *(unsigned int *)(a2 + 24)
         + 8 * (*(_DWORD *)(a2 + 24) + v8 + v123 * v158);
    while (1)
    {
      v125 = HIDWORD(v120);
      v126 = (v9 + v120);
      v127 = v120 & 0xFFFFFFFF00000000 | v126;
      v128 = v127;
      LODWORD(v129) = v9 + v120;
      if (v9 + (int)v120 >= 0)
      {
        if ((int)v129 < v9)
          goto LABEL_85;
        goto LABEL_101;
      }
      v132 = v159 + ((v160 + v120) & ~((v160 + (int)v120) >> 31));
      v133 = v132 == (_DWORD)v120 ? 1 : 2;
      v134 = v133 + (v132 - (v132 != (_DWORD)v120) - v120) / v9;
      if (v134 < 8)
        break;
      result = (int64x2_t *)(v134 & 0xFFFFFFF8);
      LODWORD(v129) = v126 + (_DWORD)result * v9;
      v136 = 0uLL;
      v137 = (int32x4_t)HIDWORD(v120);
      v138 = v134 & 0xFFFFFFF8;
      do
      {
        v137 = vaddq_s32(v137, v10);
        v136 = vaddq_s32(v136, v10);
        v138 -= 8;
      }
      while (v138);
      v135 = vaddvq_s32(vaddq_s32(v136, v137));
      if (v134 != (_DWORD)result)
        goto LABEL_99;
LABEL_100:
      v128 = v129 | (v135 << 32);
      if ((int)v129 < v9)
      {
LABEL_85:
        v130 = HIDWORD(v128);
        if ((_DWORD)v120 == (_DWORD)v128 && HIDWORD(v120) == HIDWORD(v128))
          goto LABEL_116;
        goto LABEL_107;
      }
LABEL_101:
      v139 = HIDWORD(v128);
      do
      {
        v129 = (v129 - v9);
        v139 = (v139 + 1);
      }
      while ((int)v129 >= v9);
      v128 = v129 | (v139 << 32);
      v130 = HIDWORD(v128);
      if ((_DWORD)v120 == (_DWORD)v128 && HIDWORD(v120) == HIDWORD(v128))
        goto LABEL_116;
LABEL_107:
      v141 = (_QWORD *)(v122 + 8 * (v158 + (v8 + v119) * v121));
      LODWORD(result) = v120;
      v142 = v120;
      do
      {
        *v141++ = *(_QWORD *)(v124 + 8 * (HIDWORD(v142) + (_DWORD)result * v123));
        v143 = ((_DWORD)result + 1);
        v144 = v142 & 0xFFFFFFFF00000000;
        v145 = (int64x2_t *)(v144 | v143);
        v146 = (int64x2_t *)(v144 + 0x100000000);
        if (v9 <= (int)v143)
          result = v146;
        else
          result = v145;
        v147 = (_DWORD)result == (_DWORD)v128 && HIDWORD(result) == (_DWORD)v130;
        v142 = (unint64_t)result;
      }
      while (!v147);
LABEL_116:
      if ((v126 & 0x80000000) != 0)
      {
        v148 = v159 + ((v160 + v120) & ~((v160 + (int)v120) >> 31));
        if (v148 == (_DWORD)v120)
          v149 = 1;
        else
          v149 = 2;
        v150 = v149 + (v148 - (v148 != (_DWORD)v120) - v120) / v9;
        if (v150 < 8)
          goto LABEL_134;
        LODWORD(v126) = v126 + (v150 & 0xFFFFFFF8) * v9;
        v151 = 0uLL;
        v152 = (int32x4_t)HIDWORD(v120);
        v153 = v150 & 0xFFFFFFF8;
        do
        {
          v152 = vaddq_s32(v152, v10);
          v151 = vaddq_s32(v151, v10);
          v153 -= 8;
        }
        while (v153);
        v125 = vaddvq_s32(vaddq_s32(v151, v152));
        if (v150 != (v150 & 0xFFFFFFF8))
        {
LABEL_134:
          do
          {
            LODWORD(v126) = v126 + v9;
            v125 = (v125 - 1);
          }
          while ((v126 & 0x80000000) != 0);
        }
        v127 = v126 | (v125 << 32);
        if ((int)v126 < v9)
          goto LABEL_82;
LABEL_128:
        v154 = HIDWORD(v127);
        do
        {
          v126 = (v126 - v9);
          v154 = (v154 + 1);
        }
        while ((int)v126 >= v9);
        v127 = v126 | (v154 << 32);
        goto LABEL_82;
      }
      if ((int)v126 >= v9)
        goto LABEL_128;
LABEL_82:
      ++v119;
      v120 = v127;
      if (v119 == 8)
        goto LABEL_7;
    }
    v135 = HIDWORD(v120);
    LODWORD(v129) = v9 + v120;
    do
    {
LABEL_99:
      LODWORD(v129) = v129 + v9;
      v135 = (v135 - 1);
    }
    while ((v129 & 0x80000000) != 0);
    goto LABEL_100;
  }
  return result;
}

uint64_t sub_20F208E50(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  int v5;
  int32x4_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  int32x4_t v38;
  int32x4_t v39;
  unsigned int v40;
  unint64_t v41;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int32x4_t v55;
  int32x4_t v56;
  unsigned int v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  int64x2_t v65;
  int64x2_t *v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t *v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t *v76;
  int64x2_t *v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t *v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t *v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t *v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t *v117;
  int64x2_t *v118;
  int64x2_t *v119;
  int64x2_t *v120;
  int64x2_t *v121;
  int64x2_t *v122;
  int64x2_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  int v139;
  int v140;
  unsigned int v141;
  unint64_t v142;
  int32x4_t v143;
  int32x4_t v144;
  unsigned int v145;
  unint64_t v146;
  _QWORD *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  BOOL v155;
  int v156;
  int v157;
  unsigned int v158;
  int32x4_t v159;
  int32x4_t v160;
  unsigned int v161;
  unint64_t v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  int64x2_t v170;
  uint64_t v171;
  int64x2_t v172;

  v2 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
    v3 = 0;
    v4 = *(unsigned int *)(a2 + 4);
    v5 = *(_DWORD *)(a2 + 4) & 7;
    v163 = v4 & 0xFFFFFFF8;
    v164 = *(_DWORD *)a2;
    v168 = 2 * v5;
    v167 = -2 * v5;
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = *(_DWORD *)a2;
    while (1)
    {
      v8 = v7 <= 1 ? 1 : v7;
      v165 = v3 + 8;
      v166 = v7;
      if (v3 + 8 <= v2 || v2 - v3 == 8)
        break;
      if ((_DWORD)v4)
      {
        v9 = 0;
        v10 = *(unsigned int *)(result + 24);
        v11 = *(_QWORD *)(result + 16) - 8 * v10;
        v12 = *(_DWORD *)(result + 8);
        v13 = *(unsigned int *)(a2 + 24);
        v171 = *(_QWORD *)(a2 + 16) - 8 * v13;
        v14 = *(_DWORD *)(a2 + 8);
        v169 = v13 + v3;
        while (1)
        {
          v15 = v9 + 8;
          v16 = v9 + 8 <= v4 ? 8 : v4 - v9;
          if (v16)
            break;
LABEL_11:
          v9 = v15;
          if (v15 >= v4)
            goto LABEL_3;
        }
        v17 = 0;
        v18 = 0;
        v19 = v171 + 8 * (v169 + v14 * v9);
        v20 = v10 + v9;
        if (v16 >= 0)
          v21 = v16;
        else
          v21 = -v16;
        v22 = 2 * v16;
        v23 = -2 * v16;
        while (1)
        {
          v27 = HIDWORD(v18);
          if (v21 >> 4 >= 0x271)
          {
            v30 = v16 + v18 + v16 * HIDWORD(v18);
            v31 = (v30 / v16);
            v32 = (v30 % v16);
            v29 = v32 | (v31 << 32);
            v33 = (v32 + v16) | ((unint64_t)(v31 - 1) << 32);
            if ((int)v32 < 0)
              v29 = v33;
            goto LABEL_44;
          }
          v28 = (v16 + v18);
          if (v16 + (int)v18 >= 0)
          {
            v29 = v18 & 0xFFFFFFFF00000000 | v28;
            if ((int)v28 >= v16)
              goto LABEL_41;
            goto LABEL_44;
          }
          v34 = v23 + ((v22 + v18) & ~((v22 + (int)v18) >> 31));
          v35 = v34 == (_DWORD)v18 ? 1 : 2;
          v36 = v35 + (v34 - (v34 != (_DWORD)v18) - v18) / v16;
          if (v36 < 8)
            break;
          LODWORD(v28) = v28 + (v36 & 0xFFFFFFF8) * v16;
          v38 = 0uLL;
          v39 = (int32x4_t)HIDWORD(v18);
          v40 = v36 & 0xFFFFFFF8;
          do
          {
            v39 = vaddq_s32(v39, v6);
            v38 = vaddq_s32(v38, v6);
            v40 -= 8;
          }
          while (v40);
          v37 = vaddvq_s32(vaddq_s32(v38, v39));
          if (v36 != (v36 & 0xFFFFFFF8))
            goto LABEL_39;
LABEL_40:
          v29 = v28 | (v37 << 32);
          if ((int)v28 >= v16)
          {
LABEL_41:
            v41 = HIDWORD(v29);
            do
            {
              v28 = (v28 - v16);
              v41 = (v41 + 1);
            }
            while ((int)v28 >= v16);
            v29 = v28 | (v41 << 32);
          }
LABEL_44:
          if ((_DWORD)v18 != (_DWORD)v29 || HIDWORD(v18) != HIDWORD(v29))
          {
            v43 = (_QWORD *)(v11 + 8 * (v20 + (v3 + v17) * v12));
            LODWORD(v44) = v18;
            v45 = v18;
            do
            {
              *v43++ = *(_QWORD *)(v19 + 8 * (HIDWORD(v45) + v44 * v14));
              v46 = (v44 + 1);
              v47 = v45 & 0xFFFFFFFF00000000;
              v48 = v47 | v46;
              v49 = v47 + 0x100000000;
              if (v16 <= (int)v46)
                v44 = v49;
              else
                v44 = v48;
              v50 = (_DWORD)v44 == (_DWORD)v29 && HIDWORD(v44) == HIDWORD(v29);
              v45 = v44;
            }
            while (!v50);
          }
          if (v21 >> 4 >= 0x271)
          {
            v24 = v16 + v18 + v16 * HIDWORD(v18);
            v25 = (v24 / v16);
            v26 = (v24 % v16);
            if ((v26 & 0x80000000) != 0)
            {
              v26 = (v26 + v16);
              v25 = (v25 - 1);
            }
            v18 = v26 | (v25 << 32);
            goto LABEL_23;
          }
          v51 = (v16 + v18);
          if (v16 + (int)v18 < 0)
          {
            v52 = v23 + ((v22 + v18) & ~((v22 + (int)v18) >> 31));
            if (v52 == (_DWORD)v18)
              v53 = 1;
            else
              v53 = 2;
            v54 = v53 + (v52 - (v52 != (_DWORD)v18) - v18) / v16;
            if (v54 < 8)
              goto LABEL_129;
            LODWORD(v51) = v51 + (v54 & 0xFFFFFFF8) * v16;
            v55 = 0uLL;
            v56 = (int32x4_t)HIDWORD(v18);
            v57 = v54 & 0xFFFFFFF8;
            do
            {
              v56 = vaddq_s32(v56, v6);
              v55 = vaddq_s32(v55, v6);
              v57 -= 8;
            }
            while (v57);
            v27 = vaddvq_s32(vaddq_s32(v55, v56));
            if (v54 != (v54 & 0xFFFFFFF8))
            {
LABEL_129:
              do
              {
                LODWORD(v51) = v51 + v16;
                v27 = (v27 - 1);
              }
              while ((v51 & 0x80000000) != 0);
            }
            v18 = v51 | (v27 << 32);
            if ((int)v51 < v16)
              goto LABEL_23;
LABEL_70:
            v58 = HIDWORD(v18);
            do
            {
              v51 = (v51 - v16);
              v58 = (v58 + 1);
            }
            while ((int)v51 >= v16);
            v18 = v51 | (v58 << 32);
            goto LABEL_23;
          }
          v18 = v18 & 0xFFFFFFFF00000000 | v51;
          if ((int)v51 >= v16)
            goto LABEL_70;
LABEL_23:
          if (++v17 == v8)
            goto LABEL_11;
        }
        v37 = HIDWORD(v18);
        do
        {
LABEL_39:
          LODWORD(v28) = v28 + v16;
          v37 = (v37 - 1);
        }
        while ((v28 & 0x80000000) != 0);
        goto LABEL_40;
      }
LABEL_3:
      v7 = v166 - 8;
      v3 += 8;
      v2 = v164;
      if (v165 >= v164)
        return result;
    }
    if (v4 >= 8)
    {
      v59 = 0;
      do
      {
        v60 = *(unsigned int *)(result + 8);
        v61 = *(unsigned int *)(a2 + 8);
        v62 = *(_QWORD *)(a2 + 16)
            - 8 * *(unsigned int *)(a2 + 24)
            + 8 * (*(_DWORD *)(a2 + 24) + v3 + v61 * v59);
        v63 = *(int64x2_t *)(v62 + 32);
        v170 = *(int64x2_t *)(v62 + 48);
        v64 = (int64x2_t *)(*(_QWORD *)(result + 16)
                          - 8 * *(unsigned int *)(result + 24)
                          + 8 * (v59 + *(_DWORD *)(result + 24) + v3 * v60));
        v65 = *(int64x2_t *)(v62 + 16);
        v66 = (int64x2_t *)(v62 + 8 * v61);
        v68 = v66[2];
        v67 = v66[3];
        v70 = *v66;
        v69 = v66[1];
        v71 = (int64x2_t *)(v62 + 16 * v61);
        v73 = v71[2];
        v72 = v71[3];
        v75 = *v71;
        v74 = v71[1];
        v76 = (int64x2_t *)(v62 + 24 * v61);
        v77 = (int64x2_t *)(v62 + 32 * v61);
        v79 = v76[2];
        v78 = v76[3];
        v81 = v77[2];
        v80 = v77[3];
        v83 = *v77;
        v82 = v77[1];
        v85 = *v76;
        v84 = v76[1];
        v86 = (int64x2_t *)(v62 + 40 * v61);
        v88 = v86[2];
        v87 = v86[3];
        v89 = (int64x2_t *)(v62 + 48 * v61);
        v91 = *v86;
        v90 = v86[1];
        v92 = v89[2];
        v93 = v89[3];
        v94 = v89[1];
        v95 = (int64x2_t *)(v62 + 56 * v61);
        v172 = vzip1q_s64(*(int64x2_t *)v62, v70);
        v96 = vzip2q_s64(*(int64x2_t *)v62, v70);
        v70.i64[0] = vdupq_laneq_s64(v75, 1).u64[0];
        v97 = vzip1q_s64(v75, v85);
        v70.i64[1] = v85.i64[1];
        v85.i64[0] = vdupq_laneq_s64(v83, 1).u64[0];
        v98 = vzip1q_s64(v83, v91);
        v85.i64[1] = v91.i64[1];
        v99 = vzip1q_s64(v65, v69);
        v100 = vzip2q_s64(v65, v69);
        v69.i64[0] = vdupq_laneq_s64(v74, 1).u64[0];
        v101 = vzip1q_s64(v74, v84);
        v69.i64[1] = v84.i64[1];
        v84.i64[0] = vdupq_laneq_s64(v82, 1).u64[0];
        v102 = vzip1q_s64(v82, v90);
        v84.i64[1] = v90.i64[1];
        v90.i64[0] = vdupq_laneq_s64(v73, 1).u64[0];
        v90.i64[1] = v79.i64[1];
        v103 = vzip1q_s64(v73, v79);
        v104 = vzip1q_s64(*v89, *v95);
        v105.i64[0] = vdupq_laneq_s64(*v89, 1).u64[0];
        v105.i64[1] = v95->i64[1];
        v106 = vzip1q_s64(v81, v88);
        v81.i64[0] = vdupq_laneq_s64(v81, 1).u64[0];
        v81.i64[1] = v88.i64[1];
        v107 = vzip1q_s64(v63, v68);
        v108 = vzip2q_s64(v63, v68);
        v109 = vzip1q_s64(v94, v95[1]);
        v94.i64[0] = vdupq_laneq_s64(v94, 1).u64[0];
        v94.i64[1] = v95[1].i64[1];
        v110 = vzip1q_s64(v72, v78);
        v72.i64[0] = vdupq_laneq_s64(v72, 1).u64[0];
        v72.i64[1] = v78.i64[1];
        v111 = vzip1q_s64(v170, v67);
        v112 = vzip2q_s64(v170, v67);
        v113 = vzip1q_s64(v92, v95[2]);
        v92.i64[0] = vdupq_laneq_s64(v92, 1).u64[0];
        v92.i64[1] = v95[2].i64[1];
        v114 = vzip1q_s64(v80, v87);
        v80.i64[0] = vdupq_laneq_s64(v80, 1).u64[0];
        v80.i64[1] = v87.i64[1];
        v115 = v95[3];
        v64[2] = v98;
        v64[3] = v104;
        v116 = vzip1q_s64(v93, v115);
        v93.i64[0] = vdupq_laneq_s64(v93, 1).u64[0];
        v93.i64[1] = v115.i64[1];
        *v64 = v172;
        v64[1] = v97;
        v117 = (int64x2_t *)((char *)v64 + 8 * v60);
        *v117 = v96;
        v117[1] = v70;
        v117[2] = v85;
        v117[3] = v105;
        v118 = &v64[v60];
        *v118 = v99;
        v118[1] = v101;
        v118[2] = v102;
        v118[3] = v109;
        v119 = (int64x2_t *)((char *)v64 + 24 * v60);
        *v119 = v100;
        v119[1] = v69;
        v119[2] = v84;
        v119[3] = v94;
        v120 = &v64[2 * v60];
        *v120 = v107;
        v120[1] = v103;
        v120[2] = v106;
        v120[3] = v113;
        v121 = (int64x2_t *)((char *)v64 + 40 * v60);
        *v121 = v108;
        v121[1] = v90;
        v121[2] = v81;
        v121[3] = v92;
        v122 = &v64[3 * v60];
        *v122 = v111;
        v122[1] = v110;
        v122[2] = v114;
        v122[3] = v116;
        v123 = (int64x2_t *)((char *)v64 + 56 * v60);
        v123[2] = v80;
        v123[3] = v93;
        *v123 = v112;
        v123[1] = v72;
        LODWORD(v123) = v59 + 16;
        v59 += 8;
      }
      while (v123 <= v4);
    }
    if (!v5)
      goto LABEL_3;
    v124 = 0;
    v125 = 0;
    v126 = *(unsigned int *)(result + 24);
    v127 = *(_QWORD *)(result + 16) - 8 * v126;
    v128 = *(_DWORD *)(result + 8);
    v129 = *(_DWORD *)(a2 + 8);
    v130 = *(_QWORD *)(a2 + 16)
         - 8 * *(unsigned int *)(a2 + 24)
         + 8 * (*(_DWORD *)(a2 + 24) + v3 + v129 * v163);
    v131 = v126 + v163;
    while (1)
    {
      v132 = HIDWORD(v125);
      v133 = (v5 + v125);
      v134 = v125 & 0xFFFFFFFF00000000 | v133;
      v135 = v134;
      LODWORD(v136) = v5 + v125;
      if (v5 + (int)v125 >= 0)
      {
        if ((int)v136 < v5)
          goto LABEL_81;
        goto LABEL_97;
      }
      v139 = v167 + ((v168 + v125) & ~((v168 + (int)v125) >> 31));
      v140 = v139 == (_DWORD)v125 ? 1 : 2;
      v141 = v140 + (v139 - (v139 != (_DWORD)v125) - v125) / v5;
      if (v141 < 8)
        break;
      LODWORD(v136) = v133 + (v141 & 0xFFFFFFF8) * v5;
      v143 = 0uLL;
      v144 = (int32x4_t)HIDWORD(v125);
      v145 = v141 & 0xFFFFFFF8;
      do
      {
        v144 = vaddq_s32(v144, v6);
        v143 = vaddq_s32(v143, v6);
        v145 -= 8;
      }
      while (v145);
      v142 = vaddvq_s32(vaddq_s32(v143, v144));
      if (v141 != (v141 & 0xFFFFFFF8))
        goto LABEL_95;
LABEL_96:
      v135 = v136 | (v142 << 32);
      if ((int)v136 < v5)
      {
LABEL_81:
        v137 = HIDWORD(v135);
        if ((_DWORD)v125 == (_DWORD)v135 && HIDWORD(v125) == HIDWORD(v135))
          goto LABEL_112;
        goto LABEL_103;
      }
LABEL_97:
      v146 = HIDWORD(v135);
      do
      {
        v136 = (v136 - v5);
        v146 = (v146 + 1);
      }
      while ((int)v136 >= v5);
      v135 = v136 | (v146 << 32);
      v137 = HIDWORD(v135);
      if ((_DWORD)v125 == (_DWORD)v135 && HIDWORD(v125) == HIDWORD(v135))
        goto LABEL_112;
LABEL_103:
      v148 = (_QWORD *)(v127 + 8 * (v131 + (v3 + v124) * v128));
      LODWORD(v149) = v125;
      v150 = v125;
      do
      {
        *v148++ = *(_QWORD *)(v130 + 8 * (HIDWORD(v150) + v149 * v129));
        v151 = (v149 + 1);
        v152 = v150 & 0xFFFFFFFF00000000;
        v153 = v152 | v151;
        v154 = v152 + 0x100000000;
        if (v5 <= (int)v151)
          v149 = v154;
        else
          v149 = v153;
        v155 = (_DWORD)v149 == (_DWORD)v135 && HIDWORD(v149) == (_DWORD)v137;
        v150 = v149;
      }
      while (!v155);
LABEL_112:
      if ((v133 & 0x80000000) != 0)
      {
        v156 = v167 + ((v168 + v125) & ~((v168 + (int)v125) >> 31));
        if (v156 == (_DWORD)v125)
          v157 = 1;
        else
          v157 = 2;
        v158 = v157 + (v156 - (v156 != (_DWORD)v125) - v125) / v5;
        if (v158 < 8)
          goto LABEL_130;
        LODWORD(v133) = v133 + (v158 & 0xFFFFFFF8) * v5;
        v159 = 0uLL;
        v160 = (int32x4_t)HIDWORD(v125);
        v161 = v158 & 0xFFFFFFF8;
        do
        {
          v160 = vaddq_s32(v160, v6);
          v159 = vaddq_s32(v159, v6);
          v161 -= 8;
        }
        while (v161);
        v132 = vaddvq_s32(vaddq_s32(v159, v160));
        if (v158 != (v158 & 0xFFFFFFF8))
        {
LABEL_130:
          do
          {
            LODWORD(v133) = v133 + v5;
            v132 = (v132 - 1);
          }
          while ((v133 & 0x80000000) != 0);
        }
        v134 = v133 | (v132 << 32);
        if ((int)v133 < v5)
          goto LABEL_78;
LABEL_124:
        v162 = HIDWORD(v134);
        do
        {
          v133 = (v133 - v5);
          v162 = (v162 + 1);
        }
        while ((int)v133 >= v5);
        v134 = v133 | (v162 << 32);
        goto LABEL_78;
      }
      if ((int)v133 >= v5)
        goto LABEL_124;
LABEL_78:
      ++v124;
      v125 = v134;
      if (v124 == 8)
        goto LABEL_3;
    }
    v142 = HIDWORD(v125);
    LODWORD(v136) = v5 + v125;
    do
    {
LABEL_95:
      LODWORD(v136) = v136 + v5;
      v142 = (v142 - 1);
    }
    while ((v136 & 0x80000000) != 0);
    goto LABEL_96;
  }
  return result;
}

