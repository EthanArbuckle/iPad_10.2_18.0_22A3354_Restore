void sub_20E9C8CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9C8CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9C8CF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E9C8D18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::runtime_error *exception;
  std::runtime_error *v18;
  std::runtime_error v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_24C9B69F8;
  v23 = v6;
  *a3 = v6;
  std::mutex::lock((std::mutex *)(v6 + 24));
  v8 = *(_DWORD *)(v6 + 136);
  if ((v8 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v9 = __ldxr(v7);
  while (__stxr(v9 + 1, v7));
  *(_DWORD *)(v6 + 136) = v8 | 2;
  std::mutex::unlock((std::mutex *)(v6 + 24));
  v21 = 0;
  v22 = 0;
  v10 = (std::__shared_weak_count *)a1[1];
  if (!v10
    || (v11 = std::__shared_weak_count::lock(v10), (v22 = v11) == 0)
    || (v12 = v11, v13 = *a1, (v21 = v13) == 0))
  {
    std::runtime_error::runtime_error(&v19, "ChannelInputWithPromise: Invalid operation. Processor is released.");
    v19.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v18 = std::runtime_error::runtime_error(exception, &v19);
    v18->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v18, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v20 = v23;
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 56))(v13, a2, &v20);
  sub_20E9B4870(&v20);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  return sub_20E9B4870(&v23);
}

void sub_20E9C8ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t *v4;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_20E9B4870((uint64_t *)va);
  sub_20E86665C((uint64_t)va1);
  v6 = v4 + 1;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
    (*(void (**)(unint64_t *))(*v4 + 16))(v4);
  sub_20E9B4870((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_20E9C8EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  sub_20E9B4870(&a15);
  _Unwind_Resume(a1);
}

void sub_20E9C8EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20E9B4870((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20E9C8F0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__assoc_sub_state *a14, std::exception_ptr a15)
{
  std::__assoc_sub_state *v15;
  std::exception_ptr v16;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v15 = a14;
  if (a14)
  {
    std::exception_ptr::exception_ptr(&a15, &a10);
    v16.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v15, v16);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a10);
    std::runtime_error::~runtime_error(&a9);
    if (!a13)
      JUMPOUT(0x20E9C8E58);
    JUMPOUT(0x20E9C8E28);
  }
  sub_20E96CE78(3u);
}

void sub_20E9C8F6C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, std::exception_ptr a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t *v15;
  uint64_t v16;

  std::exception_ptr::~exception_ptr(&a10);
  std::runtime_error::~runtime_error(&a9);
  v16 = *v15;
  sub_20E86665C((uint64_t)&a12);
  if (!v16)
    JUMPOUT(0x20E9C8FDCLL);
  JUMPOUT(0x20E9C8FB4);
}

void sub_20E9C8FEC(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20E9C9038(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9C9098(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_20E9C90A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::exception_ptr v10;
  std::exception_ptr v11;
  std::exception_ptr v12;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v12.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v12);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v11, (const std::exception_ptr *)(a1 + 16));
    v10.__ptr_ = &v11;
    std::rethrow_exception(v10);
    __break(1u);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 160) = 0;
    if (*(_BYTE *)(a1 + 304))
    {
      v5 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a2 + 16) = v5;
      v6 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a2 + 112) = v6;
      v7 = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a2 + 144) = v7;
      v8 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a2 + 48) = v8;
      v9 = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 208);
      *(_OWORD *)(a2 + 80) = v9;
      *(_BYTE *)(a2 + 160) = 1;
    }
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_20E9C9174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20E9C91A0()
{
  uint64_t v0;
  _BYTE *v1;
  __int128 v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *size;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  std::string *p_p;
  char *v17;
  std::string *v18;
  char *v19;
  size_t v22;
  __int128 v23;
  std::string::size_type v24;
  void *v25;
  std::string *v26;
  std::string::size_type v27;
  int v28;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  std::string *v36;
  std::string::size_type v37;
  int v38;
  BOOL v39;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string *v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char *v53;
  unsigned __int8 v54;
  uint64_t v55;
  const char *v56;
  NSObject *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  CFTypeID TypeID;
  std::string::size_type data_low;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  size_t v70;
  const char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  CFTypeID v78;
  int data;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  size_t v84;
  const char *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  const void *v91;
  CFTypeID v92;
  unsigned __int16 v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  size_t v98;
  const char *v99;
  unsigned __int8 v100;
  const char *v101;
  size_t v102;
  std::string::size_type *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  size_t v110;
  std::__shared_weak_count_vtbl *v111;
  std::__shared_weak_count *v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  std::string::size_type v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  std::string::size_type v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::string::size_type v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  const void *v150;
  CFTypeID v151;
  unsigned __int16 v152;
  int v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  size_t v157;
  const char *v158;
  unsigned __int8 v159;
  const char *v160;
  size_t v161;
  std::string::size_type *v162;
  const char *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  size_t v171;
  std::__shared_weak_count_vtbl *v172;
  std::__shared_weak_count *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  std::string::size_type v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  std::string::size_type v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  std::string::size_type v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  void *v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  const void *v211;
  CFTypeID v212;
  int v213;
  int v214;
  unint64_t v215;
  unint64_t v216;
  const char *v217;
  uint64_t v218;
  size_t v219;
  const char *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  const void *v231;
  CFTypeID v232;
  int v233;
  int v234;
  unint64_t v235;
  unint64_t v236;
  const char *v237;
  uint64_t v238;
  size_t v239;
  const char *v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  const __CFBoolean *v246;
  CFTypeID v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t v252;
  const __CFBoolean *v253;
  CFTypeID v254;
  uint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unint64_t v259;
  const __CFNumber *v260;
  CFTypeID v261;
  uint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  const __CFBoolean *v267;
  CFTypeID v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  const __CFNumber *v274;
  CFTypeID v275;
  uint64_t v276;
  std::__shared_weak_count *v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t v280;
  const __CFBoolean *v281;
  CFTypeID v282;
  uint64_t v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t v287;
  const __CFBoolean *v288;
  CFTypeID v289;
  uint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  unint64_t v294;
  const __CFBoolean *v295;
  CFTypeID v296;
  __int32 v297;
  int v298;
  __int32 v299;
  int v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  std::string::size_type v305;
  uint64_t v306;
  int v307;
  unint64_t v308;
  unint64_t v309;
  uint64_t v310;
  size_t v311;
  const char *v312;
  unsigned __int8 v313;
  int v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  std::string::size_type v319;
  uint64_t v320;
  std::string *p_dst;
  size_t v322;
  unsigned __int8 v323;
  const char *v324;
  size_t v325;
  std::string::size_type *p_size;
  unint64_t v327;
  const char *v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  void *v333;
  uint64_t v334;
  uint64_t v335;
  NSObject *v336;
  size_t v337;
  std::__shared_weak_count_vtbl *v338;
  std::__shared_weak_count *v339;
  std::__shared_weak_count *v340;
  unint64_t *p_shared_owners;
  unint64_t v342;
  unint64_t v343;
  std::string::size_type v344;
  _DWORD *v345;
  __int32 v346;
  uint64_t v347;
  uint64_t v348;
  const char *v349;
  std::string::size_type v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::string::size_type v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  std::__shared_weak_count *v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  std::__shared_weak_count *v367;
  unint64_t *v368;
  unint64_t v369;
  void *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  unsigned __int8 v374;
  const char *v375;
  size_t v376;
  std::string::size_type *v377;
  unint64_t v378;
  const char *v379;
  std::string::size_type v380;
  uint64_t v381;
  uint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  NSObject *v386;
  size_t v387;
  std::__shared_weak_count_vtbl *v388;
  std::__shared_weak_count *v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t v393;
  std::string::size_type v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  std::string::size_type v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  std::string::size_type v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  std::__shared_weak_count *v410;
  unint64_t *v411;
  unint64_t v412;
  std::__shared_weak_count *v413;
  int v414;
  unint64_t *v415;
  unint64_t v416;
  std::__shared_weak_count *v417;
  unint64_t *v418;
  unint64_t v419;
  void *v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  unsigned __int8 v424;
  const char *v425;
  size_t v426;
  std::string::size_type *v427;
  const char *v428;
  unint64_t v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  NSObject *v436;
  size_t v437;
  std::__shared_weak_count_vtbl *v438;
  std::__shared_weak_count *v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  unint64_t v443;
  std::string::size_type v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  void *v448;
  std::string::size_type v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  std::__shared_weak_count *v453;
  unint64_t *v454;
  unint64_t v455;
  std::string::size_type v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  std::__shared_weak_count *v460;
  unint64_t *v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  std::__shared_weak_count *v466;
  unint64_t *v467;
  unint64_t v468;
  void *v469;
  std::__shared_weak_count *v470;
  unint64_t *v471;
  unint64_t v472;
  unsigned __int8 v473;
  const char *v474;
  size_t v475;
  std::string::size_type *v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  void *v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  NSObject *v484;
  size_t v485;
  void *v486;
  _QWORD *v487;
  unint64_t *v488;
  size_t v489;
  std::string::size_type v490;
  char v491;
  char *v492;
  std::__shared_weak_count *v493;
  unint64_t *v494;
  std::string::size_type v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  std::string::size_type v502;
  char *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  std::string::size_type v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::string::size_type v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  std::__shared_weak_count *v519;
  unint64_t *v520;
  unint64_t v521;
  std::__shared_weak_count *v522;
  unint64_t *v523;
  unint64_t v524;
  std::__shared_weak_count *v525;
  unint64_t *v526;
  unint64_t v527;
  void *v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  unsigned __int8 v532;
  const char *v533;
  size_t v534;
  std::string::size_type *v535;
  uint64_t v536;
  uint64_t v537;
  void *v538;
  unint64_t v539;
  uint64_t v540;
  uint64_t v541;
  NSObject *v542;
  size_t v543;
  void *v544;
  _QWORD *v545;
  unint64_t *v546;
  size_t v547;
  std::string::size_type v548;
  char v549;
  char *v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::string::size_type v560;
  char *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  std::string::size_type v566;
  std::__shared_weak_count *v567;
  unint64_t *v568;
  unint64_t v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  std::string::size_type v573;
  std::__shared_weak_count *v574;
  unint64_t *v575;
  unint64_t v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  std::__shared_weak_count *v583;
  unint64_t *v584;
  unint64_t v585;
  void *v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  unsigned __int8 v590;
  std::string::size_type v591;
  const char *v592;
  NSObject *v593;
  unsigned __int8 v594;
  std::string::size_type v595;
  const char *v596;
  NSObject *v597;
  uint64_t v598;
  std::__shared_weak_count *v599;
  unint64_t *v600;
  unint64_t v601;
  unint64_t v602;
  void *v603;
  CFTypeID v604;
  char v605;
  uint64_t v606;
  std::__shared_weak_count *v607;
  unint64_t *v608;
  unint64_t v609;
  unint64_t v610;
  const __CFBoolean *v611;
  CFTypeID v612;
  uint64_t v613;
  std::__shared_weak_count *v614;
  unint64_t *v615;
  unint64_t v616;
  unint64_t v617;
  const __CFBoolean *v618;
  CFTypeID v619;
  uint64_t v620;
  std::__shared_weak_count *v621;
  unint64_t *v622;
  unint64_t v623;
  unint64_t v624;
  const __CFBoolean *v625;
  CFTypeID v626;
  uint64_t v627;
  std::__shared_weak_count *v628;
  unint64_t *v629;
  unint64_t v630;
  unint64_t v631;
  const __CFBoolean *v632;
  CFTypeID v633;
  uint64_t v634;
  std::__shared_weak_count *v635;
  unint64_t *v636;
  unint64_t v637;
  unint64_t v638;
  const __CFNumber *v639;
  CFTypeID v640;
  uint64_t v641;
  std::__shared_weak_count *v642;
  unint64_t *v643;
  unint64_t v644;
  unint64_t v645;
  const __CFNumber *v646;
  CFTypeID v647;
  uint64_t v648;
  std::__shared_weak_count *v649;
  unint64_t *v650;
  unint64_t v651;
  unint64_t v652;
  uint64_t v653;
  std::__shared_weak_count *v654;
  unint64_t *v655;
  unint64_t v656;
  unint64_t v657;
  std::string::size_type v658;
  std::string *p_object;
  unsigned __int8 v660;
  BOOL v661;
  BOOL v662;
  __int128 *v663;
  size_t v664;
  void *v665;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v666;
  unint64_t *v667;
  unint64_t v668;
  std::__shared_weak_count *v669;
  unint64_t *v670;
  unint64_t v671;
  int v672;
  unint64_t *v673;
  unint64_t v674;
  std::__shared_weak_count *v675;
  unint64_t *v676;
  unint64_t v677;
  int v678;
  unint64_t v679;
  unint64_t v680;
  uint64_t v681;
  const char *v682;
  size_t v683;
  int v684;
  unint64_t v685;
  unint64_t v686;
  uint64_t v687;
  const char *v688;
  size_t v689;
  int v690;
  unint64_t v691;
  unint64_t v692;
  uint64_t v693;
  size_t v694;
  const char *v695;
  unsigned __int8 v696;
  const char *v697;
  size_t v698;
  std::string::size_type *v699;
  uint64_t v700;
  uint64_t v701;
  void *v702;
  uint64_t v703;
  uint64_t v704;
  NSObject *v705;
  size_t v706;
  std::__shared_weak_count_vtbl *v707;
  std::__shared_weak_count *v708;
  std::__shared_weak_count *v709;
  unint64_t *v710;
  unint64_t v711;
  unint64_t v712;
  std::string::size_type v713;
  uint64_t v714;
  uint64_t v715;
  const char *v716;
  std::string::size_type v717;
  std::__shared_weak_count *v718;
  unint64_t *v719;
  unint64_t v720;
  std::__shared_weak_count *v721;
  unint64_t *v722;
  unint64_t v723;
  std::string::size_type v724;
  std::__shared_weak_count *v725;
  unint64_t *v726;
  unint64_t v727;
  std::__shared_weak_count *v728;
  unint64_t *v729;
  unint64_t v730;
  std::__shared_weak_count *v731;
  unint64_t *v732;
  unint64_t v733;
  std::__shared_weak_count *v734;
  unint64_t *v735;
  unint64_t v736;
  void *v737;
  std::__shared_weak_count *v738;
  unint64_t *v739;
  unint64_t v740;
  unsigned __int8 v741;
  const char *v742;
  size_t v743;
  std::string::size_type *v744;
  uint64_t v745;
  uint64_t v746;
  void *v747;
  uint64_t v748;
  uint64_t v749;
  NSObject *v750;
  size_t v751;
  std::__shared_weak_count_vtbl *v752;
  std::__shared_weak_count *v753;
  std::__shared_weak_count *v754;
  unint64_t *v755;
  unint64_t v756;
  unint64_t v757;
  std::string::size_type v758;
  _DWORD *v759;
  uint64_t v760;
  uint64_t v761;
  const char *v762;
  std::string::size_type v763;
  std::__shared_weak_count *v764;
  unint64_t *v765;
  unint64_t v766;
  std::__shared_weak_count *v767;
  unint64_t *v768;
  unint64_t v769;
  std::string::size_type v770;
  std::__shared_weak_count *v771;
  unint64_t *v772;
  unint64_t v773;
  std::__shared_weak_count *v774;
  unint64_t *v775;
  unint64_t v776;
  std::__shared_weak_count *v777;
  unint64_t *v778;
  unint64_t v779;
  std::__shared_weak_count *v780;
  unint64_t *v781;
  unint64_t v782;
  void *v783;
  unint64_t *v784;
  uint64_t v785;
  std::__shared_weak_count *v786;
  unint64_t *v787;
  unint64_t v788;
  unint64_t v789;
  const __CFBoolean *v790;
  CFTypeID v791;
  std::__shared_weak_count *v792;
  unint64_t *v793;
  unint64_t v794;
  unsigned __int8 v795;
  const char *v796;
  size_t v797;
  std::string::size_type *v798;
  unint64_t v799;
  const char *v800;
  uint64_t v801;
  int v802;
  uint64_t v803;
  uint64_t v804;
  void *v805;
  uint64_t v806;
  uint64_t v807;
  NSObject *v808;
  size_t v809;
  std::__shared_weak_count_vtbl *v810;
  std::__shared_weak_count *v811;
  std::__shared_weak_count *v812;
  unint64_t *v813;
  unint64_t v814;
  unint64_t v815;
  std::string::size_type v816;
  _DWORD *v817;
  __int32 v818;
  uint64_t v819;
  uint64_t v820;
  CFTypeRef v821;
  std::string::size_type v822;
  std::__shared_weak_count *v823;
  unint64_t *v824;
  unint64_t v825;
  std::__shared_weak_count *v826;
  unint64_t *v827;
  unint64_t v828;
  std::string::size_type v829;
  std::__shared_weak_count *v830;
  unint64_t *v831;
  unint64_t v832;
  std::__shared_weak_count *v833;
  unint64_t *v834;
  unint64_t v835;
  std::__shared_weak_count *v836;
  unint64_t *v837;
  unint64_t v838;
  std::__shared_weak_count *v839;
  unint64_t *v840;
  unint64_t v841;
  void *v842;
  std::__shared_weak_count *v843;
  unint64_t *v844;
  unint64_t v845;
  unsigned __int8 v846;
  uint64_t v847;
  const char *v848;
  NSObject *v849;
  uint64_t v850;
  unint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  unint64_t v856;
  _QWORD *__src;
  void *__srca;
  void *__srcb;
  const char *__srcc;
  void *__srcd;
  int __srce;
  int v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  const char *v867;
  const char *v868;
  _BYTE *v869;
  CFTypeRef cf;
  const char *cfa;
  const char *cfb;
  CFTypeRef cfc;
  int v874;
  uint64_t v875;
  std::string __dst;
  int v877;
  const char *v878;
  int v879;
  const char *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  __int128 theDict;
  char *category;
  uint64_t v886;
  std::__fs::filesystem::path v887;
  char *v888;
  char *v889;
  void *v890[4];
  void *value;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v893;
  int v894;
  const char *v895;
  int v896;
  const char *v897;
  uint64_t v898;
  std::__shared_weak_count *v899;
  std::string object;
  __int128 v901;
  void *v902;
  size_t v903;
  unint64_t v904;
  char v905;
  int v906;
  char v907;
  int64x2_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  char v914;
  char v915;
  std::string __p;
  char v917;
  int32x2_t v918;
  __int16 v919;
  __int128 v920;
  uint64_t v921;
  char v922;
  char v923;
  _QWORD v924[31];
  BOOL v925;
  BOOL v926;
  std::string::size_type v927;
  BOOL v928;
  BOOL v929;
  uint64_t v930;
  int v931;
  char v932;
  uint64_t v933;
  int64x2_t v934;
  BOOL v935;
  uint64_t v936;
  uint64_t v937;
  BOOL v938;
  int v939;
  BOOL v940;
  BOOL v941;
  char v942;
  char v943;
  BOOL v944;
  uint64_t v945;
  uint64_t v946;
  int v947;
  int v948;
  char v949;
  __int128 v950;
  uint64_t v951;
  void *v952;
  std::__shared_weak_count *v953;
  char v954;
  BOOL v955;
  std::string v956[96];
  uint64_t v957;
  void *v958;
  void *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  int v964;
  uint64_t v965;
  __int16 v966;
  char v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  int v971;
  uint64_t v972;
  uint64_t v973;
  __int128 v974;
  __int128 v975;
  int v976;
  uint64_t v977;
  int v978;
  char v979;
  uint64_t v980;
  int v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  int v985;
  uint64_t v986;
  uint64_t v987;
  __int128 v988;
  uint64_t v989;

  v0 = MEMORY[0x24BDAC7A8]();
  v869 = v1;
  cf = (CFTypeRef)v0;
  v989 = *MEMORY[0x24BDAC8D0];
  v918 = vdup_n_s32(0x140u);
  v919 = 0;
  LOBYTE(v920) = 0;
  v922 = 0;
  v923 = 0;
  v875 = sub_20EE7D5CC((uint64_t)v924);
  sub_20EE7EBDC(v875);
  v936 = 0x4014000000000000;
  v932 = 1;
  v931 = 4;
  v945 = 40;
  v946 = 0x3FE6666666666666;
  v933 = 0x3F1A36E2EB1C432DLL;
  v934 = vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
  v949 = 1;
  v937 = 12;
  sub_20E8EC534((uint64_t)&v957);
  v964 = 10;
  v965 = 0x4120000040400000;
  v966 = 0;
  v967 = 0;
  v968 = 0u;
  v969 = 0u;
  v970 = 0u;
  v971 = 0;
  v972 = 0x5A00000028;
  v973 = 0x4024000000000000;
  v974 = xmmword_2102EF000;
  v975 = xmmword_2102EF010;
  v976 = 1028443341;
  v977 = 0x4049000000000000;
  v978 = 200;
  v979 = 1;
  v980 = 30;
  v981 = 20;
  v982 = 0x3F8EB851EB851EB8;
  v983 = 0x3FC893011F31982ELL;
  v984 = 0xF0000001ELL;
  v985 = 3;
  v986 = 0;
  v987 = 0x3F747AE147AE147BLL;
  sub_20EE7D5CC((uint64_t)&object);
  sub_20EE7EBDC((uint64_t)&object);
  v910 = 0x4014000000000000;
  v907 = 1;
  v906 = 4;
  v912 = 40;
  v913 = 0x3FE6666666666666;
  v908 = vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
  v909 = 0x3F1A36E2EB1C432DLL;
  v914 = 1;
  v911 = 12;
  sub_20E9107DC(v875, (uint64_t)&object);
  sub_20E869418((uint64_t)&object);
  sub_20E9DA754(&object, cf);
  v2 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
  if (object.__r_.__value_.__l.__size_)
  {
    v3 = (unint64_t *)(object.__r_.__value_.__l.__size_ + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
    size = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
    if (object.__r_.__value_.__l.__size_)
    {
      v6 = (unint64_t *)(object.__r_.__value_.__l.__size_ + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    do
      v8 = __ldxr(v3);
    while (__stxr(v8 + 1, v3));
    theDict = v2;
    do
      v9 = __ldxr(v3);
    while (__stxr(v9 + 1, v3));
    do
      v10 = __ldaxr(v3);
    while (__stlxr(v10 - 1, v3));
    if (!v10)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v2 + 1) + 16))(*((_QWORD *)&v2 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v2 + 1));
    }
    do
      v11 = __ldaxr(v3);
    while (__stlxr(v11 - 1, v3));
    if (!v11)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v2 + 1) + 16))(*((_QWORD *)&v2 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v2 + 1));
    }
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_23;
    v12 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&theDict + 1) + 16))(*((_QWORD *)&theDict + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theDict + 1));
      if (!(_QWORD)theDict)
        goto LABEL_116;
    }
    else
    {
LABEL_23:
      if (!(_QWORD)theDict)
        goto LABEL_116;
    }
  }
  else
  {
    theDict = object.__r_.__value_.__r.__words[0];
    if (!object.__r_.__value_.__r.__words[0])
      goto LABEL_116;
  }
  object.__r_.__value_.__r.__words[0] = 0;
  if (!CFSTR("SLAMConfigurationName")
    || !CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("SLAMConfigurationName"), (const void **)&object.__r_.__value_.__l.__data_)|| (sub_20EA5E5C4((CFIndex)object.__r_.__value_.__l.__data_, &__p), !v917))
  {
LABEL_116:
    v59 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
    v58 = theDict;
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_121;
    v60 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
    do
      v61 = __ldxr(v60);
    while (__stxr(v61 + 1, v60));
    do
      v62 = __ldaxr(v60);
    while (__stlxr(v62 - 1, v60));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
      if (!v58)
        goto LABEL_131;
    }
    else
    {
LABEL_121:
      if (!v58)
        goto LABEL_131;
    }
    value = 0;
    if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("SlidingWindowSize"), (const void **)&value))
      goto LABEL_131;
    v63 = value;
    if (!value)
      goto LABEL_131;
    TypeID = CFNumberGetTypeID();
    if (CFGetTypeID(v63) != TypeID)
      goto LABEL_131;
    object.__r_.__value_.__r.__words[0] = 0;
    CFNumberGetValue((CFNumberRef)v63, kCFNumberNSIntegerType, &object);
    data_low = SLODWORD(object.__r_.__value_.__l.__data_);
    v930 = SLODWORD(object.__r_.__value_.__l.__data_);
    sub_20E9D092C(&__p);
    if (**(int **)(__p.__r_.__value_.__r.__words[0] + 56) > 3
      || (v66 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 72),
          v67 = sub_20E8C31DC((uint64_t)__p.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0),
          v68 = v67,
          !v66)
      && !v67)
    {
LABEL_131:
      v73 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
      v72 = theDict;
      if (!*((_QWORD *)&theDict + 1))
        goto LABEL_136;
      v74 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
      do
        v76 = __ldaxr(v74);
      while (__stlxr(v76 - 1, v74));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
        if (!v72)
          goto LABEL_146;
      }
      else
      {
LABEL_136:
        if (!v72)
          goto LABEL_146;
      }
      value = 0;
      if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("MaxFeatures"), (const void **)&value))
        goto LABEL_146;
      v77 = value;
      if (!value)
        goto LABEL_146;
      v78 = CFNumberGetTypeID();
      if (CFGetTypeID(v77) != v78)
        goto LABEL_146;
      object.__r_.__value_.__r.__words[0] = 0;
      CFNumberGetValue((CFNumberRef)v77, kCFNumberNSIntegerType, &object);
      data = (int)object.__r_.__value_.__l.__data_;
      v939 = (int)object.__r_.__value_.__l.__data_;
      sub_20E9D092C(&__p);
      if (**(int **)(__p.__r_.__value_.__r.__words[0] + 56) > 3
        || (v80 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 72),
            v81 = sub_20E8C31DC((uint64_t)__p.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0),
            v82 = v81,
            !v80)
        && !v81)
      {
LABEL_146:
        v87 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
        v86 = theDict;
        if (!*((_QWORD *)&theDict + 1))
          goto LABEL_151;
        v88 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
        do
          v89 = __ldxr(v88);
        while (__stxr(v89 + 1, v88));
        do
          v90 = __ldaxr(v88);
        while (__stlxr(v90 - 1, v88));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
          if (!v86)
            goto LABEL_249;
        }
        else
        {
LABEL_151:
          if (!v86)
            goto LABEL_249;
        }
        object.__r_.__value_.__r.__words[0] = 0;
        if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("UseFactorGraph"), (const void **)&object.__r_.__value_.__l.__data_)|| (v91 = (const void *)object.__r_.__value_.__r.__words[0]) == 0|| (v92 = CFBooleanGetTypeID(), CFGetTypeID(v91) != v92)|| (v93 = (CFBooleanGetValue((CFBooleanRef)v91) != 0) | 0x100, v93 < 0x100u)|| (_BYTE)v93|| (sub_20E9D092C(&__p), **(int **)(__p.__r_.__value_.__r.__words[0] + 56) > 4)|| (v94 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 72), v95 = sub_20E8C31DC((uint64_t)__p.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0), v96 = v95, !v94)&& !v95)
        {
LABEL_249:
          v146 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
          v145 = theDict;
          if (!*((_QWORD *)&theDict + 1))
            goto LABEL_254;
          v147 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
          do
            v148 = __ldxr(v147);
          while (__stxr(v148 + 1, v147));
          do
            v149 = __ldaxr(v147);
          while (__stlxr(v149 - 1, v147));
          if (!v149)
          {
            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
            std::__shared_weak_count::__release_weak(v146);
            if (!v145)
              goto LABEL_352;
          }
          else
          {
LABEL_254:
            if (!v145)
              goto LABEL_352;
          }
          object.__r_.__value_.__r.__words[0] = 0;
          if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("UseLowPower"), (const void **)&object.__r_.__value_.__l.__data_)|| (v150 = (const void *)object.__r_.__value_.__r.__words[0]) == 0|| (v151 = CFBooleanGetTypeID(), CFGetTypeID(v150) != v151)|| (v152 = (CFBooleanGetValue((CFBooleanRef)v150) != 0) | 0x100, v152 < 0x100u)|| !(_BYTE)v152|| (sub_20E9D092C(&__p), **(int **)(__p.__r_.__value_.__r.__words[0] + 56) > 4)|| (v153 = *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0] + 72), v154 = sub_20E8C31DC((uint64_t)__p.__r_.__value_.__l.__data_, "OSLogSurrogateAppender", 1, 0), v155 = v154, !v153)&& !v154)
          {
LABEL_352:
            v207 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
            v206 = theDict;
            if (!*((_QWORD *)&theDict + 1))
              goto LABEL_357;
            v208 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
            do
              v209 = __ldxr(v208);
            while (__stxr(v209 + 1, v208));
            do
              v210 = __ldaxr(v208);
            while (__stlxr(v210 - 1, v208));
            if (!v210)
            {
              ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
              std::__shared_weak_count::__release_weak(v207);
              if (!v206)
                goto LABEL_369;
            }
            else
            {
LABEL_357:
              if (!v206)
                goto LABEL_369;
            }
            object.__r_.__value_.__r.__words[0] = 0;
            if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("EnforceScanOrderLapReadout"), (const void **)&object.__r_.__value_.__l.__data_))goto LABEL_369;
            v211 = (const void *)object.__r_.__value_.__r.__words[0];
            if (!object.__r_.__value_.__r.__words[0]
              || (v212 = CFBooleanGetTypeID(), CFGetTypeID(v211) != v212)
              || (v213 = CFBooleanGetValue((CFBooleanRef)v211),
                  v944 = v213 != 0,
                  sub_20E9D092C(&v988),
                  **(int **)(v988 + 56) > 3)
              || (v214 = *(unsigned __int8 *)(v988 + 72),
                  v215 = sub_20E8C31DC(v988, "OSLogSurrogateAppender", 1, 0),
                  v216 = v215,
                  !v214)
              && !v215)
            {
LABEL_369:
              v222 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
              v221 = theDict;
              if (!*((_QWORD *)&theDict + 1))
                goto LABEL_374;
              v223 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
              do
                v224 = __ldxr(v223);
              while (__stxr(v224 + 1, v223));
              do
                v225 = __ldaxr(v223);
              while (__stlxr(v225 - 1, v223));
              if (!v225)
              {
                ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
                std::__shared_weak_count::__release_weak(v222);
                if (!v221)
                  goto LABEL_381;
              }
              else
              {
LABEL_374:
                if (!v221)
                  goto LABEL_381;
              }
              object.__r_.__value_.__r.__words[0] = 0;
              if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("RangingResultsOutputDir"), (const void **)&object.__r_.__value_.__l.__data_))
              {
                sub_20EA5E5C4((CFIndex)object.__r_.__value_.__l.__data_, &__dst);
                if ((_BYTE)v877)
                {
                  if (SHIBYTE(v956[0].__r_.__value_.__r.__words[2]) < 0)
                  {
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      p_dst = &__dst;
                    else
                      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v322 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    else
                      v322 = __dst.__r_.__value_.__l.__size_;
                    sub_20E867CBC((void **)&v956[0].__r_.__value_.__l.__data_, p_dst, v322);
                  }
                  else if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    sub_20E867BF8(v956, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v956[0] = __dst;
                  }
                }
LABEL_382:
                v227 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                v226 = theDict;
                if (!*((_QWORD *)&theDict + 1))
                  goto LABEL_387;
                v228 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                do
                  v229 = __ldxr(v228);
                while (__stxr(v229 + 1, v228));
                do
                  v230 = __ldaxr(v228);
                while (__stlxr(v230 - 1, v228));
                if (!v230)
                {
                  ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                  std::__shared_weak_count::__release_weak(v227);
                  if (!v226)
                    goto LABEL_399;
                }
                else
                {
LABEL_387:
                  if (!v226)
                    goto LABEL_399;
                }
                object.__r_.__value_.__r.__words[0] = 0;
                if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("OutputSlidingWindowEstimateInPoseMetadata"), (const void **)&object.__r_.__value_.__l.__data_))goto LABEL_399;
                v231 = (const void *)object.__r_.__value_.__r.__words[0];
                if (!object.__r_.__value_.__r.__words[0]
                  || (v232 = CFBooleanGetTypeID(), CFGetTypeID(v231) != v232)
                  || (v233 = CFBooleanGetValue((CFBooleanRef)v231),
                      v938 = v233 != 0,
                      sub_20E9D092C(&category),
                      **((int **)category + 7) > 3)
                  || (v234 = category[72],
                      v235 = sub_20E8C31DC((uint64_t)category, "OSLogSurrogateAppender", 1, 0),
                      v236 = v235,
                      !v234)
                  && !v235)
                {
LABEL_399:
                  v242 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                  v241 = theDict;
                  if (!*((_QWORD *)&theDict + 1))
                    goto LABEL_404;
                  v243 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                  do
                    v244 = __ldxr(v243);
                  while (__stxr(v244 + 1, v243));
                  do
                    v245 = __ldaxr(v243);
                  while (__stlxr(v245 - 1, v243));
                  if (!v245)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                    if (!v241)
                      goto LABEL_411;
                  }
                  else
                  {
LABEL_404:
                    if (!v241)
                      goto LABEL_411;
                  }
                  object.__r_.__value_.__r.__words[0] = 0;
                  if (CFSTR("TurnOnRelocalization"))
                  {
                    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("TurnOnRelocalization"), (const void **)&object.__r_.__value_.__l.__data_))
                    {
                      v246 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                      if (object.__r_.__value_.__r.__words[0])
                      {
                        v247 = CFBooleanGetTypeID();
                        if (CFGetTypeID(v246) == v247)
                          v928 = CFBooleanGetValue(v246) != 0;
                      }
                    }
                  }
LABEL_411:
                  v935 = v928;
                  v249 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                  v248 = theDict;
                  if (!*((_QWORD *)&theDict + 1))
                    goto LABEL_416;
                  v250 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                  do
                    v251 = __ldxr(v250);
                  while (__stxr(v251 + 1, v250));
                  do
                    v252 = __ldaxr(v250);
                  while (__stlxr(v252 - 1, v250));
                  if (!v252)
                  {
                    ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                    std::__shared_weak_count::__release_weak(v249);
                    if (!v248)
                      goto LABEL_423;
                  }
                  else
                  {
LABEL_416:
                    if (!v248)
                      goto LABEL_423;
                  }
                  object.__r_.__value_.__r.__words[0] = 0;
                  if (CFSTR("DeterministicMode"))
                  {
                    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("DeterministicMode"), (const void **)&object.__r_.__value_.__l.__data_))
                    {
                      v253 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                      if (object.__r_.__value_.__r.__words[0])
                      {
                        v254 = CFBooleanGetTypeID();
                        if (CFGetTypeID(v253) == v254)
                          LOBYTE(v919) = CFBooleanGetValue(v253) != 0;
                      }
                    }
                  }
LABEL_423:
                  v256 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                  v255 = theDict;
                  if (!*((_QWORD *)&theDict + 1))
                    goto LABEL_428;
                  v257 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                  do
                    v258 = __ldxr(v257);
                  while (__stxr(v258 + 1, v257));
                  do
                    v259 = __ldaxr(v257);
                  while (__stlxr(v259 - 1, v257));
                  if (!v259)
                  {
                    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                    std::__shared_weak_count::__release_weak(v256);
                    if (!v255)
                      goto LABEL_434;
                  }
                  else
                  {
LABEL_428:
                    if (!v255)
                      goto LABEL_434;
                  }
                  value = 0;
                  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("SessionOverride"), (const void **)&value))
                  {
                    v260 = (const __CFNumber *)value;
                    if (value)
                    {
                      v261 = CFNumberGetTypeID();
                      if (CFGetTypeID(v260) == v261)
                      {
                        object.__r_.__value_.__r.__words[0] = 0;
                        CFNumberGetValue(v260, kCFNumberNSIntegerType, &object);
                        v927 = object.__r_.__value_.__r.__words[0];
                      }
                    }
                  }
LABEL_434:
                  v263 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                  v262 = theDict;
                  if (!*((_QWORD *)&theDict + 1))
                    goto LABEL_439;
                  v264 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                  do
                    v265 = __ldxr(v264);
                  while (__stxr(v265 + 1, v264));
                  do
                    v266 = __ldaxr(v264);
                  while (__stlxr(v266 - 1, v264));
                  if (!v266)
                  {
                    ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                    std::__shared_weak_count::__release_weak(v263);
                    if (!v262)
                      goto LABEL_446;
                  }
                  else
                  {
LABEL_439:
                    if (!v262)
                      goto LABEL_446;
                  }
                  object.__r_.__value_.__r.__words[0] = 0;
                  if (CFSTR("OutputCollaborativeMappingStatistics"))
                  {
                    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("OutputCollaborativeMappingStatistics"), (const void **)&object.__r_.__value_.__l.__data_))
                    {
                      v267 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                      if (object.__r_.__value_.__r.__words[0])
                      {
                        v268 = CFBooleanGetTypeID();
                        if (CFGetTypeID(v267) == v268)
                          v955 = CFBooleanGetValue(v267) != 0;
                      }
                    }
                  }
LABEL_446:
                  v270 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                  v269 = theDict;
                  if (!*((_QWORD *)&theDict + 1))
                    goto LABEL_451;
                  v271 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                  do
                    v272 = __ldxr(v271);
                  while (__stxr(v272 + 1, v271));
                  do
                    v273 = __ldaxr(v271);
                  while (__stlxr(v273 - 1, v271));
                  if (!v273)
                  {
                    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                    std::__shared_weak_count::__release_weak(v270);
                    if (!v269)
                      goto LABEL_457;
                  }
                  else
                  {
LABEL_451:
                    if (!v269)
                      goto LABEL_457;
                  }
                  value = 0;
                  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("MachTimeSince1970"), (const void **)&value))
                  {
                    v274 = (const __CFNumber *)value;
                    if (value)
                    {
                      v275 = CFNumberGetTypeID();
                      if (CFGetTypeID(v274) == v275)
                      {
                        object.__r_.__value_.__r.__words[0] = 0;
                        CFNumberGetValue(v274, kCFNumberDoubleType, &object);
                        v924[30] = object.__r_.__value_.__r.__words[0];
                      }
                    }
                  }
LABEL_457:
                  v277 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                  v276 = theDict;
                  if (!*((_QWORD *)&theDict + 1))
                    goto LABEL_462;
                  v278 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                  do
                    v279 = __ldxr(v278);
                  while (__stxr(v279 + 1, v278));
                  do
                    v280 = __ldaxr(v278);
                  while (__stlxr(v280 - 1, v278));
                  if (!v280)
                  {
                    ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                    std::__shared_weak_count::__release_weak(v277);
                    if (!v276)
                      goto LABEL_469;
                  }
                  else
                  {
LABEL_462:
                    if (!v276)
                      goto LABEL_469;
                  }
                  object.__r_.__value_.__r.__words[0] = 0;
                  if (CFSTR("UseHWFeaturePoints"))
                  {
                    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("UseHWFeaturePoints"), (const void **)&object.__r_.__value_.__l.__data_))
                    {
                      v281 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                      if (object.__r_.__value_.__r.__words[0])
                      {
                        v282 = CFBooleanGetTypeID();
                        if (CFGetTypeID(v281) == v282)
                          HIBYTE(v919) = CFBooleanGetValue(v281) != 0;
                      }
                    }
                  }
LABEL_469:
                  HIBYTE(v966) = HIBYTE(v919);
                  v284 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                  v283 = theDict;
                  if (!*((_QWORD *)&theDict + 1))
                    goto LABEL_474;
                  v285 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                  do
                    v286 = __ldxr(v285);
                  while (__stxr(v286 + 1, v285));
                  do
                    v287 = __ldaxr(v285);
                  while (__stlxr(v287 - 1, v285));
                  if (!v287)
                  {
                    ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                    std::__shared_weak_count::__release_weak(v284);
                    if (!v283)
                      goto LABEL_481;
                  }
                  else
                  {
LABEL_474:
                    if (!v283)
                      goto LABEL_481;
                  }
                  object.__r_.__value_.__r.__words[0] = 0;
                  if (CFSTR("UseSWProxyFeaturePoints"))
                  {
                    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("UseSWProxyFeaturePoints"), (const void **)&object.__r_.__value_.__l.__data_))
                    {
                      v288 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                      if (object.__r_.__value_.__r.__words[0])
                      {
                        v289 = CFBooleanGetTypeID();
                        if (CFGetTypeID(v288) == v289)
                          v940 = CFBooleanGetValue(v288) != 0;
                      }
                    }
                  }
LABEL_481:
                  v291 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                  v290 = theDict;
                  if (!*((_QWORD *)&theDict + 1))
                    goto LABEL_486;
                  v292 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                  do
                    v293 = __ldxr(v292);
                  while (__stxr(v293 + 1, v292));
                  do
                    v294 = __ldaxr(v292);
                  while (__stlxr(v294 - 1, v292));
                  if (!v294)
                  {
                    ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                    std::__shared_weak_count::__release_weak(v291);
                    if (!v290)
                      goto LABEL_492;
                  }
                  else
                  {
LABEL_486:
                    if (!v290)
                      goto LABEL_492;
                  }
                  object.__r_.__value_.__r.__words[0] = 0;
                  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("UseSWProxyPowerOptimization"), (const void **)&object.__r_.__value_.__l.__data_))
                  {
                    v295 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                    if (object.__r_.__value_.__r.__words[0])
                    {
                      v296 = CFBooleanGetTypeID();
                      if (CFGetTypeID(v295) == v296)
                        v941 = CFBooleanGetValue(v295) != 0;
                    }
                  }
LABEL_492:
                  v297 = v918.i32[0];
                  v918.i32[1] = v918.i32[0];
                  if (HIBYTE(v919) || v940)
                  {
                    v298 = sub_20E9D8390(cf);
                    v299 = v918.i32[0];
                    switch(v298)
                    {
                      case 0:
                      case 1:
                      case 11:
                      case 12:
                        v918 = vdup_n_s32(0x140u);
                        if (v299 == 320)
                          goto LABEL_990;
                        break;
                      case 2:
                        v918 = (int32x2_t)0x14000000168;
                        if (v299 == 360)
                          goto LABEL_990;
                        break;
                      case 4:
                      case 5:
                      case 6:
                        v918 = (int32x2_t)0x140000001E0;
                        v942 = 1;
                        if (v299 == 480)
                          goto LABEL_990;
                        break;
                      case 8:
                      case 9:
                      case 10:
                        v918 = (int32x2_t)0x140000001E0;
                        if (v299 == 480)
                          goto LABEL_990;
                        break;
                      default:
                        sub_20E9D092C(&v988);
                        if (**(int **)(v988 + 56) <= 3)
                        {
                          v314 = *(unsigned __int8 *)(v988 + 72);
                          v315 = sub_20E8C31DC(v988, "OSLogSurrogateAppender", 1, 0);
                          v316 = v315 ? v315 + 16 : 0;
                          if (v314 || v315)
                          {
                            value = &v988;
                            rep = std::chrono::steady_clock::now().__d_.__rep_;
                            v893 = std::chrono::system_clock::now().__d_.__rep_;
                            v894 = 3;
                            v895 = "unknown file";
                            v896 = 263;
                            v898 = 0;
                            v899 = 0;
                            v897 = "unknown function";
                            v317 = *(_QWORD *)value;
                            v318 = (uint64_t *)(*(_QWORD *)value + 16);
                            if (*(char *)(*(_QWORD *)value + 39) < 0)
                            {
                              v320 = *(_QWORD *)(v317 + 16);
                              v319 = *(_QWORD *)(v317 + 24);
                            }
                            else
                            {
                              v319 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
                              v320 = *(_QWORD *)value + 16;
                            }
                            __p.__r_.__value_.__r.__words[0] = v320;
                            __p.__r_.__value_.__l.__size_ = v319;
                            v590 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                            if ((v590 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                            {
                              sub_20E9E46F8((uint64_t)&object);
                              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                              if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(object.__r_.__value_.__l.__data_);
                              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                              __cxa_guard_release(&qword_254A4A510);
                            }
                            v591 = byte_254A4A4F8[23];
                            if (byte_254A4A4F8[23] >= 0)
                            {
                              v592 = byte_254A4A4F8;
                            }
                            else
                            {
                              v591 = *(_QWORD *)&byte_254A4A4F8[8];
                              v592 = *(const char **)byte_254A4A4F8;
                            }
                            v887.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v592;
                            v887.__pn_.__r_.__value_.__l.__size_ = v591;
                            object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v592, __p.__r_.__value_.__l.__data_);
                            sub_20E86E5A8(&object.__r_.__value_.__l.__size_, (uint64_t)&v887);
                            sub_20E86E5A8(&v902, (uint64_t)&__p);
                            v593 = object.__r_.__value_.__r.__words[0];
                            sub_20E86E44C((uint64_t)&object);
                            sub_20E9D38CC(v316, v318, v593, OS_LOG_TYPE_INFO);
                            if (v314)
                            {
                              sub_20E8C003C((uint64_t)&value, "The camera video mode is not supported for HWFP");
                              sub_20E863570((uint64_t)&value);
                            }
                            sub_20E863714((uint64_t)&value);
                          }
                        }
                        goto LABEL_1000;
                    }
                    sub_20E9D092C(&v988);
                    if (**(int **)(v988 + 56) <= 4)
                    {
                      v307 = *(unsigned __int8 *)(v988 + 72);
                      v308 = sub_20E8C31DC(v988, "OSLogSurrogateAppender", 1, 0);
                      v309 = v308;
                      if (v307 || v308)
                      {
                        value = &v988;
                        rep = std::chrono::steady_clock::now().__d_.__rep_;
                        v893 = std::chrono::system_clock::now().__d_.__rep_;
                        v894 = 4;
                        v895 = "unknown file";
                        v896 = 268;
                        v898 = 0;
                        v899 = 0;
                        v897 = "unknown function";
                        v310 = *(_QWORD *)value;
                        if (*(char *)(*(_QWORD *)value + 39) < 0)
                        {
                          v312 = *(const char **)(v310 + 16);
                          v311 = *(_QWORD *)(v310 + 24);
                          cfa = (const char *)(*(_QWORD *)value + 16);
                          v323 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                          if ((v323 & 1) != 0)
                            goto LABEL_534;
                        }
                        else
                        {
                          v311 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
                          v312 = (const char *)(*(_QWORD *)value + 16);
                          cfa = v312;
                          v313 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                          if ((v313 & 1) != 0)
                            goto LABEL_534;
                        }
                        if (__cxa_guard_acquire(&qword_254A4A510))
                        {
                          sub_20E9E46F8((uint64_t)&object);
                          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                          if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                            operator delete(object.__r_.__value_.__l.__data_);
                          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                          __cxa_guard_release(&qword_254A4A510);
                        }
LABEL_534:
                        if (byte_254A4A4F8[23] >= 0)
                          v324 = byte_254A4A4F8;
                        else
                          v324 = *(const char **)byte_254A4A4F8;
                        if (byte_254A4A4F8[23] >= 0)
                          v325 = byte_254A4A4F8[23];
                        else
                          v325 = *(_QWORD *)&byte_254A4A4F8[8];
                        object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v324, v312);
                        p_size = &object.__r_.__value_.__l.__size_;
                        if (v325 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        if (v325 >= 0x17)
                        {
                          v327 = v309;
                          v328 = v312;
                          v329 = v310;
                          v330 = v307;
                          v331 = (v325 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v325 | 7) != 0x17)
                            v331 = v325 | 7;
                          v332 = v331 + 1;
                          p_size = (std::string::size_type *)operator new(v331 + 1);
                          *(_QWORD *)&v901 = v332 | 0x8000000000000000;
                          object.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
                          object.__r_.__value_.__r.__words[2] = v325;
                          v307 = v330;
                          v310 = v329;
                          v312 = v328;
                          v309 = v327;
                        }
                        else
                        {
                          BYTE7(v901) = v325;
                          if (!v325)
                          {
LABEL_548:
                            *((_BYTE *)p_size + v325) = 0;
                            BYTE8(v901) = 1;
                            v333 = &v902;
                            if (v311 > 0x7FFFFFFFFFFFFFF7)
                              sub_20E860B7C();
                            if (v311 >= 0x17)
                            {
                              v334 = (v311 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v311 | 7) != 0x17)
                                v334 = v311 | 7;
                              v335 = v334 + 1;
                              v333 = operator new(v334 + 1);
                              v904 = v335 | 0x8000000000000000;
                              v902 = v333;
                              v903 = v311;
                            }
                            else
                            {
                              HIBYTE(v904) = v311;
                              if (!v311)
                                goto LABEL_556;
                            }
                            memmove(v333, v312, v311);
LABEL_556:
                            *((_BYTE *)v333 + v311) = 0;
                            v905 = 1;
                            v336 = object.__r_.__value_.__r.__words[0];
                            if (SHIBYTE(v904) < 0)
                              operator delete(v902);
                            if (BYTE8(v901) && SBYTE7(v901) < 0)
                              operator delete((void *)object.__r_.__value_.__l.__size_);
                            if (object.__r_.__value_.__r.__words[0])
                              os_release(object.__r_.__value_.__l.__data_);
                            if (v309 && *(_QWORD *)(v309 + 24))
                            {
                              v337 = _os_log_pack_size();
                              v338 = (std::__shared_weak_count_vtbl *)operator new(v337, (std::align_val_t)8uLL);
                              v339 = (std::__shared_weak_count *)operator new();
                              v340 = v339;
                              v339->__shared_owners_ = 0;
                              p_shared_owners = (unint64_t *)&v339->__shared_owners_;
                              v339->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                              v339->__shared_weak_owners_ = 0;
                              v339[1].__vftable = v338;
                              object.__r_.__value_.__r.__words[0] = (std::string::size_type)v338;
                              object.__r_.__value_.__l.__size_ = (std::string::size_type)v338;
                              object.__r_.__value_.__r.__words[2] = (std::string::size_type)v339;
                              do
                                v342 = __ldxr(p_shared_owners);
                              while (__stxr(v342 + 1, p_shared_owners));
                              v901 = 0uLL;
                              v902 = 0;
                              do
                                v343 = __ldaxr(p_shared_owners);
                              while (__stlxr(v343 - 1, p_shared_owners));
                              if (!v343)
                              {
                                ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                                std::__shared_weak_count::__release_weak(v340);
                              }
                              v344 = object.__r_.__value_.__r.__words[0];
                              v345 = (_DWORD *)_os_log_pack_fill();
                              v346 = v918.i32[0];
                              *v345 = 67109120;
                              v345[1] = v346;
                              v347 = operator new();
                              v348 = *(unsigned __int8 *)(v310 + 39);
                              v349 = cfa;
                              if ((v348 & 0x80u) != 0)
                              {
                                v349 = *(const char **)(v310 + 16);
                                v348 = *(_QWORD *)(v310 + 24);
                              }
                              *(_QWORD *)v347 = v344;
                              *(_OWORD *)(v347 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                              *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                              *(_OWORD *)(v347 + 24) = v901;
                              v901 = 0uLL;
                              *(_QWORD *)(v347 + 40) = v349;
                              *(_QWORD *)(v347 + 48) = v348;
                              *(_BYTE *)(v347 + 56) = 16;
                              __p.__r_.__value_.__r.__words[0] = 0;
                              v887.__pn_.__r_.__value_.__r.__words[0] = v347;
                              (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v309 + 24)
                                                                                            + 40))(*(_QWORD *)(v309 + 24), &v887);
                              v350 = v887.__pn_.__r_.__value_.__r.__words[0];
                              v887.__pn_.__r_.__value_.__r.__words[0] = 0;
                              if (v350)
                              {
                                v351 = *(std::__shared_weak_count **)(v350 + 32);
                                if (v351)
                                {
                                  v352 = (unint64_t *)&v351->__shared_owners_;
                                  do
                                    v353 = __ldaxr(v352);
                                  while (__stlxr(v353 - 1, v352));
                                  if (!v353)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
                                    std::__shared_weak_count::__release_weak(v351);
                                  }
                                }
                                v354 = *(std::__shared_weak_count **)(v350 + 16);
                                if (v354)
                                {
                                  v355 = (unint64_t *)&v354->__shared_owners_;
                                  do
                                    v356 = __ldaxr(v355);
                                  while (__stlxr(v356 - 1, v355));
                                  if (!v356)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
                                    std::__shared_weak_count::__release_weak(v354);
                                  }
                                }
                                MEMORY[0x212BC6398](v350, 0x10F0C40B62ED6C6);
                                v357 = __p.__r_.__value_.__r.__words[0];
                                __p.__r_.__value_.__r.__words[0] = 0;
                                if (v357)
                                {
                                  v358 = *(std::__shared_weak_count **)(v357 + 32);
                                  if (v358)
                                  {
                                    v359 = (unint64_t *)&v358->__shared_owners_;
                                    do
                                      v360 = __ldaxr(v359);
                                    while (__stlxr(v360 - 1, v359));
                                    if (!v360)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                                      std::__shared_weak_count::__release_weak(v358);
                                    }
                                  }
                                  v361 = *(std::__shared_weak_count **)(v357 + 16);
                                  if (v361)
                                  {
                                    v362 = (unint64_t *)&v361->__shared_owners_;
                                    do
                                      v363 = __ldaxr(v362);
                                    while (__stlxr(v363 - 1, v362));
                                    if (!v363)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v361->__on_zero_shared)(v361);
                                      std::__shared_weak_count::__release_weak(v361);
                                    }
                                  }
                                  MEMORY[0x212BC6398](v357, 0x10F0C40B62ED6C6);
                                }
                              }
                              v364 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
                              if (*((_QWORD *)&v901 + 1))
                              {
                                v365 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
                                do
                                  v366 = __ldaxr(v365);
                                while (__stlxr(v366 - 1, v365));
                                if (!v366)
                                {
                                  ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                                  std::__shared_weak_count::__release_weak(v364);
                                }
                              }
                              v367 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                              if (object.__r_.__value_.__r.__words[2])
                              {
                                v368 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                                do
                                  v369 = __ldaxr(v368);
                                while (__stlxr(v369 - 1, v368));
                                if (!v369)
                                {
                                  ((void (*)(std::__shared_weak_count *))v367->__on_zero_shared)(v367);
                                  std::__shared_weak_count::__release_weak(v367);
                                }
                              }
                            }
                            else
                            {
                              os_log_type_enabled(v336, OS_LOG_TYPE_ERROR);
                              LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
                              HIDWORD(object.__r_.__value_.__r.__words[0]) = v918.i32[0];
                              v370 = (void *)_os_log_send_and_compose_impl();
                              if (v370)
                                free(v370);
                            }
                            if (v307)
                            {
                              sub_20E8C003C((uint64_t)&value, "The video mode was changed to %d", v918.i32[0]);
                              sub_20E863570((uint64_t)&value);
                            }
                            sub_20E863570((uint64_t)&value);
                            v371 = v899;
                            if (v899)
                            {
                              v372 = (unint64_t *)&v899->__shared_owners_;
                              do
                                v373 = __ldaxr(v372);
                              while (__stlxr(v373 - 1, v372));
                              if (!v373)
                              {
                                ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
                                std::__shared_weak_count::__release_weak(v371);
                              }
                            }
                            goto LABEL_990;
                          }
                        }
                        memmove(p_size, v324, v325);
                        goto LABEL_548;
                      }
                    }
                  }
                  else if (v943)
                  {
                    v918.i32[0] = 640;
                    if (v297 != 640)
                    {
                      sub_20E9D092C(&v988);
                      if (**(int **)(v988 + 56) <= 4)
                      {
                        v300 = *(unsigned __int8 *)(v988 + 72);
                        v301 = sub_20E8C31DC(v988, "OSLogSurrogateAppender", 1, 0);
                        v302 = v301 ? v301 + 16 : 0;
                        if (v300 || v301)
                        {
                          value = &v988;
                          rep = std::chrono::steady_clock::now().__d_.__rep_;
                          v893 = std::chrono::system_clock::now().__d_.__rep_;
                          v894 = 4;
                          v895 = "unknown file";
                          v896 = 277;
                          v898 = 0;
                          v899 = 0;
                          v897 = "unknown function";
                          v303 = *(_QWORD *)value;
                          v304 = (uint64_t *)(*(_QWORD *)value + 16);
                          if (*(char *)(*(_QWORD *)value + 39) < 0)
                          {
                            v306 = *(_QWORD *)(v303 + 16);
                            v305 = *(_QWORD *)(v303 + 24);
                          }
                          else
                          {
                            v305 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
                            v306 = *(_QWORD *)value + 16;
                          }
                          __p.__r_.__value_.__r.__words[0] = v306;
                          __p.__r_.__value_.__l.__size_ = v305;
                          v594 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                          if ((v594 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                          {
                            sub_20E9E46F8((uint64_t)&object);
                            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                            if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(object.__r_.__value_.__l.__data_);
                            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                            __cxa_guard_release(&qword_254A4A510);
                          }
                          v595 = byte_254A4A4F8[23];
                          if (byte_254A4A4F8[23] >= 0)
                          {
                            v596 = byte_254A4A4F8;
                          }
                          else
                          {
                            v595 = *(_QWORD *)&byte_254A4A4F8[8];
                            v596 = *(const char **)byte_254A4A4F8;
                          }
                          v887.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v596;
                          v887.__pn_.__r_.__value_.__l.__size_ = v595;
                          object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v596, __p.__r_.__value_.__l.__data_);
                          sub_20E86E5A8(&object.__r_.__value_.__l.__size_, (uint64_t)&v887);
                          sub_20E86E5A8(&v902, (uint64_t)&__p);
                          v597 = object.__r_.__value_.__r.__words[0];
                          sub_20E86E44C((uint64_t)&object);
                          sub_20E9D3CB8(v302, v304, v597, OS_LOG_TYPE_ERROR, (int *)&v918);
                          if (v300)
                          {
                            sub_20E8C003C((uint64_t)&value, "The video mode was changed to %d", v918.i32[0]);
                            sub_20E863570((uint64_t)&value);
                          }
                          sub_20E863714((uint64_t)&value);
                        }
                      }
                    }
                  }
LABEL_990:
                  v599 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                  v598 = theDict;
                  if (!*((_QWORD *)&theDict + 1))
                    goto LABEL_995;
                  v600 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                  do
                    v601 = __ldxr(v600);
                  while (__stxr(v601 + 1, v600));
                  do
                    v602 = __ldaxr(v600);
                  while (__stlxr(v602 - 1, v600));
                  if (!v602)
                  {
                    ((void (*)(std::__shared_weak_count *))v599->__on_zero_shared)(v599);
                    std::__shared_weak_count::__release_weak(v599);
                    if (!v598)
                      goto LABEL_1002;
                  }
                  else
                  {
LABEL_995:
                    if (!v598)
                      goto LABEL_1002;
                  }
                  value = 0;
                  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("ImageProcessingResolutionWidth"), (const void **)&value))goto LABEL_1002;
                  v603 = value;
                  if (!value)
                    goto LABEL_1002;
                  v604 = CFNumberGetTypeID();
                  if (CFGetTypeID(v603) != v604)
                    goto LABEL_1002;
                  object.__r_.__value_.__r.__words[0] = 0;
                  CFNumberGetValue((CFNumberRef)v603, kCFNumberNSIntegerType, &object);
                  v918.i32[0] = (__int32)object.__r_.__value_.__l.__data_;
                  if ((LODWORD(object.__r_.__value_.__l.__data_) - 10001) < 0xFFFFD953)
                  {
LABEL_1000:
                    v605 = 0;
                    *v869 = 0;
LABEL_1346:
                    v869[13112] = v605;
                    goto LABEL_1347;
                  }
                  sub_20E9D092C(&v988);
                  if (**(int **)(v988 + 56) > 3
                    || (v690 = *(unsigned __int8 *)(v988 + 72),
                        v691 = sub_20E8C31DC(v988, "OSLogSurrogateAppender", 1, 0),
                        v692 = v691,
                        !v690)
                    && !v691)
                  {
LABEL_1002:
                    v607 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                    v606 = theDict;
                    if (!*((_QWORD *)&theDict + 1))
                      goto LABEL_1007;
                    v608 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                    do
                      v609 = __ldxr(v608);
                    while (__stxr(v609 + 1, v608));
                    do
                      v610 = __ldaxr(v608);
                    while (__stlxr(v610 - 1, v608));
                    if (!v610)
                    {
                      ((void (*)(std::__shared_weak_count *))v607->__on_zero_shared)(v607);
                      std::__shared_weak_count::__release_weak(v607);
                      if (!v606)
                        goto LABEL_1014;
                    }
                    else
                    {
LABEL_1007:
                      if (!v606)
                        goto LABEL_1014;
                    }
                    object.__r_.__value_.__r.__words[0] = 0;
                    if (CFSTR("EnableLineTracking"))
                    {
                      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("EnableLineTracking"), (const void **)&object.__r_.__value_.__l.__data_))
                      {
                        v611 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                        if (object.__r_.__value_.__r.__words[0])
                        {
                          v612 = CFBooleanGetTypeID();
                          if (CFGetTypeID(v611) == v612)
                            v925 = CFBooleanGetValue(v611) != 0;
                        }
                      }
                    }
LABEL_1014:
                    v614 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                    v613 = theDict;
                    if (!*((_QWORD *)&theDict + 1))
                      goto LABEL_1019;
                    v615 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                    do
                      v616 = __ldxr(v615);
                    while (__stxr(v616 + 1, v615));
                    do
                      v617 = __ldaxr(v615);
                    while (__stlxr(v617 - 1, v615));
                    if (!v617)
                    {
                      ((void (*)(std::__shared_weak_count *))v614->__on_zero_shared)(v614);
                      std::__shared_weak_count::__release_weak(v614);
                      if (!v613)
                        goto LABEL_1026;
                    }
                    else
                    {
LABEL_1019:
                      if (!v613)
                        goto LABEL_1026;
                    }
                    object.__r_.__value_.__r.__words[0] = 0;
                    if (CFSTR("EnableLineTrackingAlways"))
                    {
                      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("EnableLineTrackingAlways"), (const void **)&object.__r_.__value_.__l.__data_))
                      {
                        v618 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                        if (object.__r_.__value_.__r.__words[0])
                        {
                          v619 = CFBooleanGetTypeID();
                          if (CFGetTypeID(v618) == v619)
                            v926 = CFBooleanGetValue(v618) != 0;
                        }
                      }
                    }
LABEL_1026:
                    v621 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                    v620 = theDict;
                    if (!*((_QWORD *)&theDict + 1))
                      goto LABEL_1031;
                    v622 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                    do
                      v623 = __ldxr(v622);
                    while (__stxr(v623 + 1, v622));
                    do
                      v624 = __ldaxr(v622);
                    while (__stlxr(v624 - 1, v622));
                    if (!v624)
                    {
                      ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
                      std::__shared_weak_count::__release_weak(v621);
                      if (!v620)
                        goto LABEL_1038;
                    }
                    else
                    {
LABEL_1031:
                      if (!v620)
                        goto LABEL_1038;
                    }
                    object.__r_.__value_.__r.__words[0] = 0;
                    if (CFSTR("TurnOnReinitialization"))
                    {
                      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("TurnOnReinitialization"), (const void **)&object.__r_.__value_.__l.__data_))
                      {
                        v625 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                        if (object.__r_.__value_.__r.__words[0])
                        {
                          v626 = CFBooleanGetTypeID();
                          if (CFGetTypeID(v625) == v626)
                            v929 = CFBooleanGetValue(v625) != 0;
                        }
                      }
                    }
LABEL_1038:
                    v628 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                    v627 = theDict;
                    if (!*((_QWORD *)&theDict + 1))
                      goto LABEL_1043;
                    v629 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                    do
                      v630 = __ldxr(v629);
                    while (__stxr(v630 + 1, v629));
                    do
                      v631 = __ldaxr(v629);
                    while (__stlxr(v631 - 1, v629));
                    if (!v631)
                    {
                      ((void (*)(std::__shared_weak_count *))v628->__on_zero_shared)(v628);
                      std::__shared_weak_count::__release_weak(v628);
                      if (!v627)
                        goto LABEL_1049;
                    }
                    else
                    {
LABEL_1043:
                      if (!v627)
                        goto LABEL_1049;
                    }
                    object.__r_.__value_.__r.__words[0] = 0;
                    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("TurnOnInplaceP2PCorrection"), (const void **)&object.__r_.__value_.__l.__data_))
                    {
                      v632 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                      if (object.__r_.__value_.__r.__words[0])
                      {
                        v633 = CFBooleanGetTypeID();
                        if (CFGetTypeID(v632) == v633)
                          v935 = CFBooleanGetValue(v632) != 0;
                      }
                    }
LABEL_1049:
                    v635 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                    v634 = theDict;
                    if (!*((_QWORD *)&theDict + 1))
                      goto LABEL_1054;
                    v636 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                    do
                      v637 = __ldxr(v636);
                    while (__stxr(v637 + 1, v636));
                    do
                      v638 = __ldaxr(v636);
                    while (__stlxr(v638 - 1, v636));
                    if (!v638)
                    {
                      ((void (*)(std::__shared_weak_count *))v635->__on_zero_shared)(v635);
                      std::__shared_weak_count::__release_weak(v635);
                      if (!v634)
                        goto LABEL_1060;
                    }
                    else
                    {
LABEL_1054:
                      if (!v634)
                        goto LABEL_1060;
                    }
                    value = 0;
                    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("MaxIterationsPerFrame"), (const void **)&value))
                    {
                      v639 = (const __CFNumber *)value;
                      if (value)
                      {
                        v640 = CFNumberGetTypeID();
                        if (CFGetTypeID(v639) == v640)
                        {
                          object.__r_.__value_.__r.__words[0] = 0;
                          CFNumberGetValue(v639, kCFNumberNSIntegerType, &object);
                          v948 = (int)object.__r_.__value_.__l.__data_;
                        }
                      }
                    }
LABEL_1060:
                    v642 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                    v641 = theDict;
                    if (!*((_QWORD *)&theDict + 1))
                      goto LABEL_1065;
                    v643 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                    do
                      v644 = __ldxr(v643);
                    while (__stxr(v644 + 1, v643));
                    do
                      v645 = __ldaxr(v643);
                    while (__stlxr(v645 - 1, v643));
                    if (!v645)
                    {
                      ((void (*)(std::__shared_weak_count *))v642->__on_zero_shared)(v642);
                      std::__shared_weak_count::__release_weak(v642);
                      if (!v641)
                        goto LABEL_1071;
                    }
                    else
                    {
LABEL_1065:
                      if (!v641)
                        goto LABEL_1071;
                    }
                    value = 0;
                    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("MaxOptimizationResumeFrames"), (const void **)&value))
                    {
                      v646 = (const __CFNumber *)value;
                      if (value)
                      {
                        v647 = CFNumberGetTypeID();
                        if (CFGetTypeID(v646) == v647)
                        {
                          object.__r_.__value_.__r.__words[0] = 0;
                          CFNumberGetValue(v646, kCFNumberNSIntegerType, &object);
                          v947 = (int)object.__r_.__value_.__l.__data_;
                        }
                      }
                    }
LABEL_1071:
                    v649 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                    v648 = theDict;
                    if (!*((_QWORD *)&theDict + 1))
                      goto LABEL_1076;
                    v650 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                    do
                      v651 = __ldxr(v650);
                    while (__stxr(v651 + 1, v650));
                    do
                      v652 = __ldaxr(v650);
                    while (__stlxr(v652 - 1, v650));
                    if (!v652)
                    {
                      ((void (*)(std::__shared_weak_count *))v649->__on_zero_shared)(v649);
                      std::__shared_weak_count::__release_weak(v649);
                      if (!v648)
                        goto LABEL_1082;
                    }
                    else
                    {
LABEL_1076:
                      if (!v648)
                        goto LABEL_1082;
                    }
                    value = 0;
                    if (CFSTR("MapLoadFile")
                      && CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("MapLoadFile"), (const void **)&value))
                    {
                      sub_20EA5E5C4((CFIndex)value, &object);
                      v654 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                      v653 = theDict;
                      if (!*((_QWORD *)&theDict + 1))
                        goto LABEL_1087;
                      goto LABEL_1083;
                    }
LABEL_1082:
                    object.__r_.__value_.__s.__data_[0] = 0;
                    LOBYTE(v901) = 0;
                    v654 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                    v653 = theDict;
                    if (!*((_QWORD *)&theDict + 1))
                      goto LABEL_1087;
LABEL_1083:
                    v655 = (unint64_t *)&v654->__shared_owners_;
                    do
                      v656 = __ldxr(v655);
                    while (__stxr(v656 + 1, v655));
                    do
                      v657 = __ldaxr(v655);
                    while (__stlxr(v657 - 1, v655));
                    if (!v657)
                    {
                      ((void (*)(std::__shared_weak_count *))v654->__on_zero_shared)(v654);
                      std::__shared_weak_count::__release_weak(v654);
                      if (v653)
                        goto LABEL_1088;
                      goto LABEL_1095;
                    }
LABEL_1087:
                    if (v653)
                    {
LABEL_1088:
                      v887.__pn_.__r_.__value_.__r.__words[0] = 0;
                      if (CFSTR("MapLoadFromCFData")
                        && CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("MapLoadFromCFData"), (const void **)&v887.__pn_.__r_.__value_.__l.__data_))
                      {
                        sub_20EA5E720(v887.__pn_.__r_.__value_.__r.__words[0], (uint64_t)&value);
                        if (!(_BYTE)v901)
                          goto LABEL_1108;
                      }
                      else
                      {
                        LOBYTE(value) = 0;
                        LOBYTE(v893) = 0;
                        if (!(_BYTE)v901)
                          goto LABEL_1108;
                      }
LABEL_1096:
                      if ((_BYTE)v893)
                        goto LABEL_1135;
                      memset(&v887, 0, sizeof(v887));
                      v658 = HIBYTE(object.__r_.__value_.__r.__words[2]);
                      if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_object = &object;
                      else
                        p_object = (std::string *)object.__r_.__value_.__r.__words[0];
                      if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v658 = object.__r_.__value_.__l.__size_;
                      sub_20E8A9678(&v887.__pn_, p_object, (std::string *)((char *)p_object + v658));
                      v660 = atomic_load((unsigned __int8 *)&qword_254A6DE08);
                      if ((v660 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE08))
                      {
                        __cxa_atexit((void (*)(void *))nullsub_1015, &off_254A5A4B8, &dword_20E81F000);
                        __cxa_guard_release(&qword_254A6DE08);
                      }
                      v661 = ((BOOL (*)(int, std::__fs::filesystem::path *))off_254A5A4B8[22])((int)&off_254A5A4B8, &v887);
                      v662 = v661;
                      if (SHIBYTE(v887.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v887.__pn_.__r_.__value_.__l.__data_);
                        if (!v662)
                          goto LABEL_1135;
                      }
                      else if (!v661)
                      {
                        goto LABEL_1135;
                      }
                      sub_20E869118((uint64_t)&v920, &object);
LABEL_1108:
                      if (v922)
                      {
                        if (SHIBYTE(v951) < 0)
                        {
                          if (v921 >= 0)
                            v663 = &v920;
                          else
                            v663 = (__int128 *)v920;
                          if (v921 >= 0)
                            v664 = HIBYTE(v921);
                          else
                            v664 = *((_QWORD *)&v920 + 1);
                          sub_20E867CBC((void **)&v950, v663, v664);
                        }
                        else
                        {
                          if ((v921 & 0x8000000000000000) == 0)
                          {
                            v950 = v920;
                            v951 = v921;
                            if (!(_BYTE)v893)
                              goto LABEL_1141;
LABEL_1125:
                            v665 = value;
                            if (*(_QWORD *)value != *((_QWORD *)value + 1))
                            {
                              if (v954)
                              {
                                v666 = rep;
                                if (rep)
                                {
                                  v667 = (unint64_t *)(rep + 8);
                                  do
                                    v668 = __ldxr(v667);
                                  while (__stxr(v668 + 1, v667));
                                }
                                v952 = v665;
                                v669 = v953;
                                v953 = (std::__shared_weak_count *)v666;
                                if (v669)
                                {
                                  v670 = (unint64_t *)&v669->__shared_owners_;
                                  do
                                    v671 = __ldaxr(v670);
                                  while (__stlxr(v671 - 1, v670));
                                  if (!v671)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v669->__on_zero_shared)(v669);
                                    std::__shared_weak_count::__release_weak(v669);
                                  }
                                }
                                goto LABEL_1141;
                              }
                              v952 = value;
                              v953 = (std::__shared_weak_count *)rep;
                              if (rep)
                              {
                                v673 = (unint64_t *)(rep + 8);
                                do
                                  v674 = __ldxr(v673);
                                while (__stxr(v674 + 1, v673));
                              }
                              v672 = 1;
                              v954 = 1;
LABEL_1142:
                              if ((_BYTE)v893)
                              {
                                v675 = (std::__shared_weak_count *)rep;
                                if (rep)
                                {
                                  v676 = (unint64_t *)(rep + 8);
                                  do
                                    v677 = __ldaxr(v676);
                                  while (__stlxr(v677 - 1, v676));
                                  if (!v677)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v675->__on_zero_shared)(v675);
                                    std::__shared_weak_count::__release_weak(v675);
                                  }
                                }
                              }
                              if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(object.__r_.__value_.__l.__data_);
                              if (!v672)
                              {
LABEL_1347:
                                if ((_BYTE)v877 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                                {
                                  v25 = (void *)__dst.__r_.__value_.__r.__words[0];
                                  goto LABEL_1350;
                                }
                                goto LABEL_1351;
                              }
                              if (v930 == 10)
                                goto LABEL_1334;
                              if (!v930)
                              {
                                sub_20E9D092C(&v988);
                                if (**(int **)(v988 + 56) > 3)
                                  goto LABEL_1334;
                                v678 = *(unsigned __int8 *)(v988 + 72);
                                v679 = sub_20E8C31DC(v988, "OSLogSurrogateAppender", 1, 0);
                                v680 = v679;
                                if (!v678 && !v679)
                                  goto LABEL_1334;
                                value = &v988;
                                rep = std::chrono::steady_clock::now().__d_.__rep_;
                                v893 = std::chrono::system_clock::now().__d_.__rep_;
                                v894 = 3;
                                v895 = "unknown file";
                                v896 = 396;
                                v898 = 0;
                                v899 = 0;
                                v897 = "unknown function";
                                v681 = *(_QWORD *)value;
                                v682 = (const char *)(*(_QWORD *)value + 16);
                                cfb = v682;
                                if (*(char *)(*(_QWORD *)value + 39) < 0)
                                {
                                  v682 = *(const char **)(v681 + 16);
                                  v683 = *(_QWORD *)(v681 + 24);
                                }
                                else
                                {
                                  v683 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
                                }
                                v696 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                                if ((v696 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                                {
                                  sub_20E9E46F8((uint64_t)&object);
                                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                                  if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(object.__r_.__value_.__l.__data_);
                                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                  __cxa_guard_release(&qword_254A4A510);
                                }
                                if (byte_254A4A4F8[23] >= 0)
                                  v697 = byte_254A4A4F8;
                                else
                                  v697 = *(const char **)byte_254A4A4F8;
                                if (byte_254A4A4F8[23] >= 0)
                                  v698 = byte_254A4A4F8[23];
                                else
                                  v698 = *(_QWORD *)&byte_254A4A4F8[8];
                                object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v697, v682);
                                v699 = &object.__r_.__value_.__l.__size_;
                                if (v698 > 0x7FFFFFFFFFFFFFF7)
                                  sub_20E860B7C();
                                if (v698 >= 0x17)
                                {
                                  v700 = (v698 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v698 | 7) != 0x17)
                                    v700 = v698 | 7;
                                  v701 = v700 + 1;
                                  v699 = (std::string::size_type *)operator new(v700 + 1);
                                  *(_QWORD *)&v901 = v701 | 0x8000000000000000;
                                  object.__r_.__value_.__l.__size_ = (std::string::size_type)v699;
                                  object.__r_.__value_.__r.__words[2] = v698;
                                }
                                else
                                {
                                  BYTE7(v901) = v698;
                                  if (!v698)
                                  {
LABEL_1185:
                                    *((_BYTE *)v699 + v698) = 0;
                                    BYTE8(v901) = 1;
                                    v702 = &v902;
                                    if (v683 > 0x7FFFFFFFFFFFFFF7)
                                      sub_20E860B7C();
                                    if (v683 >= 0x17)
                                    {
                                      v703 = (v683 & 0xFFFFFFFFFFFFFFF8) + 8;
                                      if ((v683 | 7) != 0x17)
                                        v703 = v683 | 7;
                                      v704 = v703 + 1;
                                      v702 = operator new(v703 + 1);
                                      v904 = v704 | 0x8000000000000000;
                                      v902 = v702;
                                      v903 = v683;
                                    }
                                    else
                                    {
                                      HIBYTE(v904) = v683;
                                      if (!v683)
                                      {
LABEL_1193:
                                        *((_BYTE *)v702 + v683) = 0;
                                        v905 = 1;
                                        v705 = object.__r_.__value_.__r.__words[0];
                                        if (SHIBYTE(v904) < 0)
                                          operator delete(v902);
                                        if (BYTE8(v901) && SBYTE7(v901) < 0)
                                          operator delete((void *)object.__r_.__value_.__l.__size_);
                                        if (object.__r_.__value_.__r.__words[0])
                                          os_release(object.__r_.__value_.__l.__data_);
                                        if (v680 && *(_QWORD *)(v680 + 24))
                                        {
                                          v706 = _os_log_pack_size();
                                          v707 = (std::__shared_weak_count_vtbl *)operator new(v706, (std::align_val_t)8uLL);
                                          v708 = (std::__shared_weak_count *)operator new();
                                          v709 = v708;
                                          v708->__shared_owners_ = 0;
                                          v710 = (unint64_t *)&v708->__shared_owners_;
                                          v708->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                                          v708->__shared_weak_owners_ = 0;
                                          v708[1].__vftable = v707;
                                          object.__r_.__value_.__r.__words[0] = (std::string::size_type)v707;
                                          object.__r_.__value_.__l.__size_ = (std::string::size_type)v707;
                                          object.__r_.__value_.__r.__words[2] = (std::string::size_type)v708;
                                          do
                                            v711 = __ldxr(v710);
                                          while (__stxr(v711 + 1, v710));
                                          v901 = 0uLL;
                                          v902 = 0;
                                          do
                                            v712 = __ldaxr(v710);
                                          while (__stlxr(v712 - 1, v710));
                                          if (!v712)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v708->__on_zero_shared)(v708);
                                            std::__shared_weak_count::__release_weak(v709);
                                          }
                                          v713 = object.__r_.__value_.__r.__words[0];
                                          *(_WORD *)_os_log_pack_fill() = 0;
                                          v714 = operator new();
                                          v715 = *(unsigned __int8 *)(v681 + 39);
                                          v716 = cfb;
                                          if ((v715 & 0x80u) != 0)
                                          {
                                            v716 = *(const char **)(v681 + 16);
                                            v715 = *(_QWORD *)(v681 + 24);
                                          }
                                          *(_QWORD *)v714 = v713;
                                          *(_OWORD *)(v714 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                                          *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                                          *(_OWORD *)(v714 + 24) = v901;
                                          v901 = 0uLL;
                                          *(_QWORD *)(v714 + 40) = v716;
                                          *(_QWORD *)(v714 + 48) = v715;
                                          *(_BYTE *)(v714 + 56) = 1;
                                          __p.__r_.__value_.__r.__words[0] = 0;
                                          v887.__pn_.__r_.__value_.__r.__words[0] = v714;
                                          (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v680 + 24) + 40))(*(_QWORD *)(v680 + 24), &v887);
                                          v717 = v887.__pn_.__r_.__value_.__r.__words[0];
                                          v887.__pn_.__r_.__value_.__r.__words[0] = 0;
                                          if (v717)
                                          {
                                            v718 = *(std::__shared_weak_count **)(v717 + 32);
                                            if (v718)
                                            {
                                              v719 = (unint64_t *)&v718->__shared_owners_;
                                              do
                                                v720 = __ldaxr(v719);
                                              while (__stlxr(v720 - 1, v719));
                                              if (!v720)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v718->__on_zero_shared)(v718);
                                                std::__shared_weak_count::__release_weak(v718);
                                              }
                                            }
                                            v721 = *(std::__shared_weak_count **)(v717 + 16);
                                            if (v721)
                                            {
                                              v722 = (unint64_t *)&v721->__shared_owners_;
                                              do
                                                v723 = __ldaxr(v722);
                                              while (__stlxr(v723 - 1, v722));
                                              if (!v723)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v721->__on_zero_shared)(v721);
                                                std::__shared_weak_count::__release_weak(v721);
                                              }
                                            }
                                            MEMORY[0x212BC6398](v717, 0x10F0C40B62ED6C6);
                                            v724 = __p.__r_.__value_.__r.__words[0];
                                            __p.__r_.__value_.__r.__words[0] = 0;
                                            if (v724)
                                            {
                                              v725 = *(std::__shared_weak_count **)(v724 + 32);
                                              if (v725)
                                              {
                                                v726 = (unint64_t *)&v725->__shared_owners_;
                                                do
                                                  v727 = __ldaxr(v726);
                                                while (__stlxr(v727 - 1, v726));
                                                if (!v727)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v725->__on_zero_shared)(v725);
                                                  std::__shared_weak_count::__release_weak(v725);
                                                }
                                              }
                                              v728 = *(std::__shared_weak_count **)(v724 + 16);
                                              if (v728)
                                              {
                                                v729 = (unint64_t *)&v728->__shared_owners_;
                                                do
                                                  v730 = __ldaxr(v729);
                                                while (__stlxr(v730 - 1, v729));
                                                if (!v730)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v728->__on_zero_shared)(v728);
                                                  std::__shared_weak_count::__release_weak(v728);
                                                }
                                              }
                                              MEMORY[0x212BC6398](v724, 0x10F0C40B62ED6C6);
                                            }
                                          }
                                          v731 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
                                          if (*((_QWORD *)&v901 + 1))
                                          {
                                            v732 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
                                            do
                                              v733 = __ldaxr(v732);
                                            while (__stlxr(v733 - 1, v732));
                                            if (!v733)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v731->__on_zero_shared)(v731);
                                              std::__shared_weak_count::__release_weak(v731);
                                            }
                                          }
                                          v734 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                                          if (object.__r_.__value_.__r.__words[2])
                                          {
                                            v735 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                                            do
                                              v736 = __ldaxr(v735);
                                            while (__stlxr(v736 - 1, v735));
                                            if (!v736)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v734->__on_zero_shared)(v734);
                                              std::__shared_weak_count::__release_weak(v734);
                                            }
                                          }
                                        }
                                        else
                                        {
                                          os_log_type_enabled(v705, OS_LOG_TYPE_INFO);
                                          LOWORD(object.__r_.__value_.__l.__data_) = 0;
                                          v737 = (void *)_os_log_send_and_compose_impl();
                                          if (v737)
                                            free(v737);
                                        }
                                        if (v678)
                                        {
                                          sub_20E8C003C((uint64_t)&value, "Headless mode is still on");
                                          sub_20E863570((uint64_t)&value);
                                        }
                                        sub_20E863570((uint64_t)&value);
                                        v738 = v899;
                                        if (v899)
                                        {
                                          v739 = (unint64_t *)&v899->__shared_owners_;
                                          do
                                            v740 = __ldaxr(v739);
                                          while (__stlxr(v740 - 1, v739));
                                          goto LABEL_1332;
                                        }
                                        goto LABEL_1334;
                                      }
                                    }
                                    memmove(v702, v682, v683);
                                    goto LABEL_1193;
                                  }
                                }
                                memmove(v699, v697, v698);
                                goto LABEL_1185;
                              }
                              sub_20E9D092C(&v988);
                              if (**(int **)(v988 + 56) > 3)
                                goto LABEL_1334;
                              v684 = *(unsigned __int8 *)(v988 + 72);
                              v685 = sub_20E8C31DC(v988, "OSLogSurrogateAppender", 1, 0);
                              v686 = v685;
                              if (!v684 && !v685)
                                goto LABEL_1334;
                              value = &v988;
                              rep = std::chrono::steady_clock::now().__d_.__rep_;
                              v893 = std::chrono::system_clock::now().__d_.__rep_;
                              v894 = 3;
                              v895 = "unknown file";
                              v896 = 401;
                              v898 = 0;
                              v899 = 0;
                              v897 = "unknown function";
                              v687 = *(_QWORD *)value;
                              v688 = (const char *)(*(_QWORD *)value + 16);
                              v868 = v688;
                              if (*(char *)(*(_QWORD *)value + 39) < 0)
                              {
                                v688 = *(const char **)(v687 + 16);
                                v689 = *(_QWORD *)(v687 + 24);
                              }
                              else
                              {
                                v689 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
                              }
                              v874 = v930;
                              v741 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                              if ((v741 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                              {
                                sub_20E9E46F8((uint64_t)&object);
                                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                                if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(object.__r_.__value_.__l.__data_);
                                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                                __cxa_guard_release(&qword_254A4A510);
                              }
                              if (byte_254A4A4F8[23] >= 0)
                                v742 = byte_254A4A4F8;
                              else
                                v742 = *(const char **)byte_254A4A4F8;
                              if (byte_254A4A4F8[23] >= 0)
                                v743 = byte_254A4A4F8[23];
                              else
                                v743 = *(_QWORD *)&byte_254A4A4F8[8];
                              object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v742, v688);
                              v744 = &object.__r_.__value_.__l.__size_;
                              if (v743 > 0x7FFFFFFFFFFFFFF7)
                                sub_20E860B7C();
                              if (v743 >= 0x17)
                              {
                                v745 = (v743 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v743 | 7) != 0x17)
                                  v745 = v743 | 7;
                                v746 = v745 + 1;
                                v744 = (std::string::size_type *)operator new(v745 + 1);
                                *(_QWORD *)&v901 = v746 | 0x8000000000000000;
                                object.__r_.__value_.__l.__size_ = (std::string::size_type)v744;
                                object.__r_.__value_.__r.__words[2] = v743;
                              }
                              else
                              {
                                BYTE7(v901) = v743;
                                if (!v743)
                                {
LABEL_1267:
                                  *((_BYTE *)v744 + v743) = 0;
                                  BYTE8(v901) = 1;
                                  v747 = &v902;
                                  if (v689 > 0x7FFFFFFFFFFFFFF7)
                                    sub_20E860B7C();
                                  if (v689 >= 0x17)
                                  {
                                    v748 = (v689 & 0xFFFFFFFFFFFFFFF8) + 8;
                                    if ((v689 | 7) != 0x17)
                                      v748 = v689 | 7;
                                    v749 = v748 + 1;
                                    v747 = operator new(v748 + 1);
                                    v904 = v749 | 0x8000000000000000;
                                    v902 = v747;
                                    v903 = v689;
                                  }
                                  else
                                  {
                                    HIBYTE(v904) = v689;
                                    if (!v689)
                                    {
LABEL_1275:
                                      *((_BYTE *)v747 + v689) = 0;
                                      v905 = 1;
                                      v750 = object.__r_.__value_.__r.__words[0];
                                      if (SHIBYTE(v904) < 0)
                                        operator delete(v902);
                                      if (BYTE8(v901) && SBYTE7(v901) < 0)
                                        operator delete((void *)object.__r_.__value_.__l.__size_);
                                      if (object.__r_.__value_.__r.__words[0])
                                        os_release(object.__r_.__value_.__l.__data_);
                                      if (v686 && *(_QWORD *)(v686 + 24))
                                      {
                                        v751 = _os_log_pack_size();
                                        v752 = (std::__shared_weak_count_vtbl *)operator new(v751, (std::align_val_t)8uLL);
                                        v753 = (std::__shared_weak_count *)operator new();
                                        v754 = v753;
                                        v753->__shared_owners_ = 0;
                                        v755 = (unint64_t *)&v753->__shared_owners_;
                                        v753->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                                        v753->__shared_weak_owners_ = 0;
                                        v753[1].__vftable = v752;
                                        object.__r_.__value_.__r.__words[0] = (std::string::size_type)v752;
                                        object.__r_.__value_.__l.__size_ = (std::string::size_type)v752;
                                        object.__r_.__value_.__r.__words[2] = (std::string::size_type)v753;
                                        do
                                          v756 = __ldxr(v755);
                                        while (__stxr(v756 + 1, v755));
                                        v901 = 0uLL;
                                        v902 = 0;
                                        do
                                          v757 = __ldaxr(v755);
                                        while (__stlxr(v757 - 1, v755));
                                        if (!v757)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v753->__on_zero_shared)(v753);
                                          std::__shared_weak_count::__release_weak(v754);
                                        }
                                        v758 = object.__r_.__value_.__r.__words[0];
                                        v759 = (_DWORD *)_os_log_pack_fill();
                                        *v759 = 67109120;
                                        v759[1] = v874;
                                        v760 = operator new();
                                        v761 = *(unsigned __int8 *)(v687 + 39);
                                        v762 = v868;
                                        if ((v761 & 0x80u) != 0)
                                        {
                                          v762 = *(const char **)(v687 + 16);
                                          v761 = *(_QWORD *)(v687 + 24);
                                        }
                                        *(_QWORD *)v760 = v758;
                                        *(_OWORD *)(v760 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                                        *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                                        *(_OWORD *)(v760 + 24) = v901;
                                        v901 = 0uLL;
                                        *(_QWORD *)(v760 + 40) = v762;
                                        *(_QWORD *)(v760 + 48) = v761;
                                        *(_BYTE *)(v760 + 56) = 1;
                                        __p.__r_.__value_.__r.__words[0] = 0;
                                        v887.__pn_.__r_.__value_.__r.__words[0] = v760;
                                        (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v686 + 24) + 40))(*(_QWORD *)(v686 + 24), &v887);
                                        v763 = v887.__pn_.__r_.__value_.__r.__words[0];
                                        v887.__pn_.__r_.__value_.__r.__words[0] = 0;
                                        if (v763)
                                        {
                                          v764 = *(std::__shared_weak_count **)(v763 + 32);
                                          if (v764)
                                          {
                                            v765 = (unint64_t *)&v764->__shared_owners_;
                                            do
                                              v766 = __ldaxr(v765);
                                            while (__stlxr(v766 - 1, v765));
                                            if (!v766)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v764->__on_zero_shared)(v764);
                                              std::__shared_weak_count::__release_weak(v764);
                                            }
                                          }
                                          v767 = *(std::__shared_weak_count **)(v763 + 16);
                                          if (v767)
                                          {
                                            v768 = (unint64_t *)&v767->__shared_owners_;
                                            do
                                              v769 = __ldaxr(v768);
                                            while (__stlxr(v769 - 1, v768));
                                            if (!v769)
                                            {
                                              ((void (*)(std::__shared_weak_count *))v767->__on_zero_shared)(v767);
                                              std::__shared_weak_count::__release_weak(v767);
                                            }
                                          }
                                          MEMORY[0x212BC6398](v763, 0x10F0C40B62ED6C6);
                                          v770 = __p.__r_.__value_.__r.__words[0];
                                          __p.__r_.__value_.__r.__words[0] = 0;
                                          if (v770)
                                          {
                                            v771 = *(std::__shared_weak_count **)(v770 + 32);
                                            if (v771)
                                            {
                                              v772 = (unint64_t *)&v771->__shared_owners_;
                                              do
                                                v773 = __ldaxr(v772);
                                              while (__stlxr(v773 - 1, v772));
                                              if (!v773)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v771->__on_zero_shared)(v771);
                                                std::__shared_weak_count::__release_weak(v771);
                                              }
                                            }
                                            v774 = *(std::__shared_weak_count **)(v770 + 16);
                                            if (v774)
                                            {
                                              v775 = (unint64_t *)&v774->__shared_owners_;
                                              do
                                                v776 = __ldaxr(v775);
                                              while (__stlxr(v776 - 1, v775));
                                              if (!v776)
                                              {
                                                ((void (*)(std::__shared_weak_count *))v774->__on_zero_shared)(v774);
                                                std::__shared_weak_count::__release_weak(v774);
                                              }
                                            }
                                            MEMORY[0x212BC6398](v770, 0x10F0C40B62ED6C6);
                                          }
                                        }
                                        v777 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
                                        if (*((_QWORD *)&v901 + 1))
                                        {
                                          v778 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
                                          do
                                            v779 = __ldaxr(v778);
                                          while (__stlxr(v779 - 1, v778));
                                          if (!v779)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v777->__on_zero_shared)(v777);
                                            std::__shared_weak_count::__release_weak(v777);
                                          }
                                        }
                                        v780 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                                        if (object.__r_.__value_.__r.__words[2])
                                        {
                                          v781 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                                          do
                                            v782 = __ldaxr(v781);
                                          while (__stlxr(v782 - 1, v781));
                                          if (!v782)
                                          {
                                            ((void (*)(std::__shared_weak_count *))v780->__on_zero_shared)(v780);
                                            std::__shared_weak_count::__release_weak(v780);
                                          }
                                        }
                                      }
                                      else
                                      {
                                        os_log_type_enabled(v750, OS_LOG_TYPE_INFO);
                                        LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
                                        HIDWORD(object.__r_.__value_.__r.__words[0]) = v874;
                                        v783 = (void *)_os_log_send_and_compose_impl();
                                        if (v783)
                                          free(v783);
                                      }
                                      if (v684)
                                      {
                                        sub_20E8C003C((uint64_t)&value, "Window size is %.d", v930);
                                        sub_20E863570((uint64_t)&value);
                                      }
                                      sub_20E863570((uint64_t)&value);
                                      v738 = v899;
                                      if (v899)
                                      {
                                        v784 = (unint64_t *)&v899->__shared_owners_;
                                        do
                                          v740 = __ldaxr(v784);
                                        while (__stlxr(v740 - 1, v784));
LABEL_1332:
                                        if (!v740)
                                        {
                                          ((void (*)(std::__shared_weak_count *))v738->__on_zero_shared)(v738);
                                          std::__shared_weak_count::__release_weak(v738);
                                        }
                                      }
LABEL_1334:
                                      v786 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
                                      v785 = theDict;
                                      if (!*((_QWORD *)&theDict + 1))
                                        goto LABEL_1339;
                                      v787 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
                                      do
                                        v788 = __ldxr(v787);
                                      while (__stxr(v788 + 1, v787));
                                      do
                                        v789 = __ldaxr(v787);
                                      while (__stlxr(v789 - 1, v787));
                                      if (!v789)
                                      {
                                        ((void (*)(std::__shared_weak_count *))v786->__on_zero_shared)(v786);
                                        std::__shared_weak_count::__release_weak(v786);
                                        if (v785)
                                          goto LABEL_1340;
                                      }
                                      else
                                      {
LABEL_1339:
                                        if (v785)
                                        {
LABEL_1340:
                                          object.__r_.__value_.__r.__words[0] = 0;
                                          if (CFDictionaryGetValueIfPresent((CFDictionaryRef)theDict, CFSTR("UseAccelerateForDownsampling"), (const void **)&object.__r_.__value_.__l.__data_))
                                          {
                                            v790 = (const __CFBoolean *)object.__r_.__value_.__r.__words[0];
                                            if (object.__r_.__value_.__r.__words[0])
                                            {
                                              v791 = CFBooleanGetTypeID();
                                              if (CFGetTypeID(v790) == v791)
                                                LOBYTE(v966) = CFBooleanGetValue(v790) != 0;
                                            }
                                          }
                                        }
                                      }
                                      sub_20E92CEEC((uint64_t)v869, (uint64_t *)&v918);
                                      v605 = 1;
                                      goto LABEL_1346;
                                    }
                                  }
                                  memmove(v747, v688, v689);
                                  goto LABEL_1275;
                                }
                              }
                              memmove(v744, v742, v743);
                              goto LABEL_1267;
                            }
LABEL_1135:
                            v672 = 0;
                            *v869 = 0;
                            v869[13112] = 0;
                            goto LABEL_1142;
                          }
                          sub_20E867BF8(&v950, (void *)v920, *((size_t *)&v920 + 1));
                        }
                        if ((_BYTE)v893)
                          goto LABEL_1125;
                      }
                      else
                      {
                        if ((SHIBYTE(v951) & 0x80000000) == 0)
                        {
                          HIBYTE(v951) = 0;
                          LOBYTE(v950) = 0;
                          if (!(_BYTE)v893)
                            goto LABEL_1141;
                          goto LABEL_1125;
                        }
                        *((_QWORD *)&v950 + 1) = 0;
                        *(_BYTE *)v950 = 0;
                        if ((_BYTE)v893)
                          goto LABEL_1125;
                      }
LABEL_1141:
                      v672 = 1;
                      goto LABEL_1142;
                    }
LABEL_1095:
                    LOBYTE(value) = 0;
                    LOBYTE(v893) = 0;
                    if (!(_BYTE)v901)
                      goto LABEL_1108;
                    goto LABEL_1096;
                  }
                  value = &v988;
                  rep = std::chrono::steady_clock::now().__d_.__rep_;
                  v893 = std::chrono::system_clock::now().__d_.__rep_;
                  v894 = 3;
                  v895 = "unknown file";
                  v896 = 297;
                  v898 = 0;
                  v899 = 0;
                  v897 = "unknown function";
                  v693 = *(_QWORD *)value;
                  if (*(char *)(*(_QWORD *)value + 39) < 0)
                  {
                    v695 = *(const char **)(v693 + 16);
                    v694 = *(_QWORD *)(v693 + 24);
                  }
                  else
                  {
                    v694 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
                    v695 = (const char *)(*(_QWORD *)value + 16);
                  }
                  cfc = (CFTypeRef)(*(_QWORD *)value + 16);
                  v795 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v795 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)&object);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                    if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(object.__r_.__value_.__l.__data_);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
                  if (byte_254A4A4F8[23] >= 0)
                    v796 = byte_254A4A4F8;
                  else
                    v796 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v797 = byte_254A4A4F8[23];
                  else
                    v797 = *(_QWORD *)&byte_254A4A4F8[8];
                  object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v796, v695);
                  v798 = &object.__r_.__value_.__l.__size_;
                  if (v797 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v797 >= 0x17)
                  {
                    v799 = v692;
                    v800 = v695;
                    v801 = v693;
                    v802 = v690;
                    v803 = (v797 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v797 | 7) != 0x17)
                      v803 = v797 | 7;
                    v804 = v803 + 1;
                    v798 = (std::string::size_type *)operator new(v803 + 1);
                    *(_QWORD *)&v901 = v804 | 0x8000000000000000;
                    object.__r_.__value_.__l.__size_ = (std::string::size_type)v798;
                    object.__r_.__value_.__r.__words[2] = v797;
                    v690 = v802;
                    v693 = v801;
                    v695 = v800;
                    v692 = v799;
                  }
                  else
                  {
                    BYTE7(v901) = v797;
                    if (!v797)
                    {
LABEL_1390:
                      *((_BYTE *)v798 + v797) = 0;
                      BYTE8(v901) = 1;
                      v805 = &v902;
                      if (v694 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v694 >= 0x17)
                      {
                        v806 = (v694 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v694 | 7) != 0x17)
                          v806 = v694 | 7;
                        v807 = v806 + 1;
                        v805 = operator new(v806 + 1);
                        v904 = v807 | 0x8000000000000000;
                        v902 = v805;
                        v903 = v694;
                      }
                      else
                      {
                        HIBYTE(v904) = v694;
                        if (!v694)
                          goto LABEL_1398;
                      }
                      memmove(v805, v695, v694);
LABEL_1398:
                      *((_BYTE *)v805 + v694) = 0;
                      v905 = 1;
                      v808 = object.__r_.__value_.__r.__words[0];
                      if (SHIBYTE(v904) < 0)
                        operator delete(v902);
                      if (BYTE8(v901) && SBYTE7(v901) < 0)
                        operator delete((void *)object.__r_.__value_.__l.__size_);
                      if (object.__r_.__value_.__r.__words[0])
                        os_release(object.__r_.__value_.__l.__data_);
                      if (v692 && *(_QWORD *)(v692 + 24))
                      {
                        v809 = _os_log_pack_size();
                        v810 = (std::__shared_weak_count_vtbl *)operator new(v809, (std::align_val_t)8uLL);
                        v811 = (std::__shared_weak_count *)operator new();
                        v812 = v811;
                        v811->__shared_owners_ = 0;
                        v813 = (unint64_t *)&v811->__shared_owners_;
                        v811->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                        v811->__shared_weak_owners_ = 0;
                        v811[1].__vftable = v810;
                        object.__r_.__value_.__r.__words[0] = (std::string::size_type)v810;
                        object.__r_.__value_.__l.__size_ = (std::string::size_type)v810;
                        object.__r_.__value_.__r.__words[2] = (std::string::size_type)v811;
                        do
                          v814 = __ldxr(v813);
                        while (__stxr(v814 + 1, v813));
                        v901 = 0uLL;
                        v902 = 0;
                        do
                          v815 = __ldaxr(v813);
                        while (__stlxr(v815 - 1, v813));
                        if (!v815)
                        {
                          ((void (*)(std::__shared_weak_count *))v811->__on_zero_shared)(v811);
                          std::__shared_weak_count::__release_weak(v812);
                        }
                        v816 = object.__r_.__value_.__r.__words[0];
                        v817 = (_DWORD *)_os_log_pack_fill();
                        v818 = v918.i32[0];
                        *v817 = 67109120;
                        v817[1] = v818;
                        v819 = operator new();
                        v820 = *(unsigned __int8 *)(v693 + 39);
                        v821 = cfc;
                        if ((v820 & 0x80u) != 0)
                        {
                          v821 = *(CFTypeRef *)(v693 + 16);
                          v820 = *(_QWORD *)(v693 + 24);
                        }
                        *(_QWORD *)v819 = v816;
                        *(_OWORD *)(v819 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                        *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                        *(_OWORD *)(v819 + 24) = v901;
                        v901 = 0uLL;
                        *(_QWORD *)(v819 + 40) = v821;
                        *(_QWORD *)(v819 + 48) = v820;
                        *(_BYTE *)(v819 + 56) = 1;
                        __p.__r_.__value_.__r.__words[0] = 0;
                        v887.__pn_.__r_.__value_.__r.__words[0] = v819;
                        (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v692 + 24) + 40))(*(_QWORD *)(v692 + 24), &v887);
                        v822 = v887.__pn_.__r_.__value_.__r.__words[0];
                        v887.__pn_.__r_.__value_.__r.__words[0] = 0;
                        if (v822)
                        {
                          v823 = *(std::__shared_weak_count **)(v822 + 32);
                          if (v823)
                          {
                            v824 = (unint64_t *)&v823->__shared_owners_;
                            do
                              v825 = __ldaxr(v824);
                            while (__stlxr(v825 - 1, v824));
                            if (!v825)
                            {
                              ((void (*)(std::__shared_weak_count *))v823->__on_zero_shared)(v823);
                              std::__shared_weak_count::__release_weak(v823);
                            }
                          }
                          v826 = *(std::__shared_weak_count **)(v822 + 16);
                          if (v826)
                          {
                            v827 = (unint64_t *)&v826->__shared_owners_;
                            do
                              v828 = __ldaxr(v827);
                            while (__stlxr(v828 - 1, v827));
                            if (!v828)
                            {
                              ((void (*)(std::__shared_weak_count *))v826->__on_zero_shared)(v826);
                              std::__shared_weak_count::__release_weak(v826);
                            }
                          }
                          MEMORY[0x212BC6398](v822, 0x10F0C40B62ED6C6);
                          v829 = __p.__r_.__value_.__r.__words[0];
                          __p.__r_.__value_.__r.__words[0] = 0;
                          if (v829)
                          {
                            v830 = *(std::__shared_weak_count **)(v829 + 32);
                            if (v830)
                            {
                              v831 = (unint64_t *)&v830->__shared_owners_;
                              do
                                v832 = __ldaxr(v831);
                              while (__stlxr(v832 - 1, v831));
                              if (!v832)
                              {
                                ((void (*)(std::__shared_weak_count *))v830->__on_zero_shared)(v830);
                                std::__shared_weak_count::__release_weak(v830);
                              }
                            }
                            v833 = *(std::__shared_weak_count **)(v829 + 16);
                            if (v833)
                            {
                              v834 = (unint64_t *)&v833->__shared_owners_;
                              do
                                v835 = __ldaxr(v834);
                              while (__stlxr(v835 - 1, v834));
                              if (!v835)
                              {
                                ((void (*)(std::__shared_weak_count *))v833->__on_zero_shared)(v833);
                                std::__shared_weak_count::__release_weak(v833);
                              }
                            }
                            MEMORY[0x212BC6398](v829, 0x10F0C40B62ED6C6);
                          }
                        }
                        v836 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
                        if (*((_QWORD *)&v901 + 1))
                        {
                          v837 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
                          do
                            v838 = __ldaxr(v837);
                          while (__stlxr(v838 - 1, v837));
                          if (!v838)
                          {
                            ((void (*)(std::__shared_weak_count *))v836->__on_zero_shared)(v836);
                            std::__shared_weak_count::__release_weak(v836);
                          }
                        }
                        v839 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                        if (object.__r_.__value_.__r.__words[2])
                        {
                          v840 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                          do
                            v841 = __ldaxr(v840);
                          while (__stlxr(v841 - 1, v840));
                          if (!v841)
                          {
                            ((void (*)(std::__shared_weak_count *))v839->__on_zero_shared)(v839);
                            std::__shared_weak_count::__release_weak(v839);
                          }
                        }
                      }
                      else
                      {
                        os_log_type_enabled(v808, OS_LOG_TYPE_INFO);
                        LODWORD(object.__r_.__value_.__l.__data_) = 67109120;
                        HIDWORD(object.__r_.__value_.__r.__words[0]) = v918.i32[0];
                        v842 = (void *)_os_log_send_and_compose_impl();
                        if (v842)
                          free(v842);
                      }
                      if (v690)
                      {
                        sub_20E8C003C((uint64_t)&value, "Changing the image width to %d", v918.i32[0]);
                        sub_20E863570((uint64_t)&value);
                      }
                      sub_20E863570((uint64_t)&value);
                      v843 = v899;
                      if (v899)
                      {
                        v844 = (unint64_t *)&v899->__shared_owners_;
                        do
                          v845 = __ldaxr(v844);
                        while (__stlxr(v845 - 1, v844));
                        if (!v845)
                        {
                          ((void (*)(std::__shared_weak_count *))v843->__on_zero_shared)(v843);
                          std::__shared_weak_count::__release_weak(v843);
                        }
                      }
                      goto LABEL_1002;
                    }
                  }
                  memmove(v798, v796, v797);
                  goto LABEL_1390;
                }
                value = &category;
                rep = std::chrono::steady_clock::now().__d_.__rep_;
                v893 = std::chrono::system_clock::now().__d_.__rep_;
                v894 = 3;
                v895 = "unknown file";
                v896 = 134;
                v898 = 0;
                v899 = 0;
                v897 = "unknown function";
                v237 = "Dis";
                if (v233)
                  v237 = "En";
                __srcc = v237;
                v238 = *(_QWORD *)value;
                if (*(char *)(*(_QWORD *)value + 39) < 0)
                {
                  v240 = *(const char **)(v238 + 16);
                  v239 = *(_QWORD *)(v238 + 24);
                }
                else
                {
                  v239 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
                  v240 = (const char *)(*(_QWORD *)value + 16);
                }
                v850 = *(_QWORD *)value + 16;
                v852 = *(_QWORD *)value;
                v856 = v236;
                v532 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                if ((v532 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                {
                  sub_20E9E46F8((uint64_t)&object);
                  sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
                  if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(object.__r_.__value_.__l.__data_);
                  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                  __cxa_guard_release(&qword_254A4A510);
                }
                if (byte_254A4A4F8[23] >= 0)
                  v533 = byte_254A4A4F8;
                else
                  v533 = *(const char **)byte_254A4A4F8;
                if (byte_254A4A4F8[23] >= 0)
                  v534 = byte_254A4A4F8[23];
                else
                  v534 = *(_QWORD *)&byte_254A4A4F8[8];
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v533, v240);
                v535 = &object.__r_.__value_.__l.__size_;
                if (v534 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v534 >= 0x17)
                {
                  v536 = (v534 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v534 | 7) != 0x17)
                    v536 = v534 | 7;
                  v537 = v536 + 1;
                  v535 = (std::string::size_type *)operator new(v536 + 1);
                  *(_QWORD *)&v901 = v537 | 0x8000000000000000;
                  object.__r_.__value_.__l.__size_ = (std::string::size_type)v535;
                  object.__r_.__value_.__r.__words[2] = v534;
                }
                else
                {
                  BYTE7(v901) = v534;
                  if (!v534)
                  {
LABEL_894:
                    *((_BYTE *)v535 + v534) = 0;
                    BYTE8(v901) = 1;
                    v538 = &v902;
                    if (v239 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v239 >= 0x17)
                    {
                      v540 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v239 | 7) != 0x17)
                        v540 = v239 | 7;
                      v541 = v540 + 1;
                      v538 = operator new(v540 + 1);
                      v904 = v541 | 0x8000000000000000;
                      v902 = v538;
                      v903 = v239;
                      v539 = v856;
                    }
                    else
                    {
                      HIBYTE(v904) = v239;
                      v539 = v856;
                      if (!v239)
                        goto LABEL_902;
                    }
                    memmove(v538, v240, v239);
LABEL_902:
                    *((_BYTE *)v538 + v239) = 0;
                    v905 = 1;
                    v542 = object.__r_.__value_.__r.__words[0];
                    if (SHIBYTE(v904) < 0)
                      operator delete(v902);
                    if (BYTE8(v901) && SBYTE7(v901) < 0)
                      operator delete((void *)object.__r_.__value_.__l.__size_);
                    if (object.__r_.__value_.__r.__words[0])
                      os_release(object.__r_.__value_.__l.__data_);
                    if (v539 && *(_QWORD *)(v539 + 24))
                    {
                      v543 = _os_log_pack_size();
                      v544 = operator new(v543, (std::align_val_t)8uLL);
                      v545 = (_QWORD *)operator new();
                      v545[1] = 0;
                      v546 = v545 + 1;
                      *v545 = &off_24C9ABB80;
                      v545[2] = 0;
                      v545[3] = v544;
                      v887.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v544;
                      v887.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v544;
                      v888 = 0;
                      v889 = 0;
                      v887.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v545;
                      if (v233)
                        v547 = 2;
                      else
                        v547 = 3;
                      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v547;
                      memcpy(&__p, __srcc, v547);
                      *(_BYTE *)((unint64_t)&__p | v547) = 0;
                      *(_QWORD *)&v988 = __p.__r_.__value_.__l.__size_;
                      v548 = __p.__r_.__value_.__r.__words[0];
                      *(_QWORD *)((char *)&v988 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1]
                                                                                 + 7);
                      v549 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      v550 = (char *)operator new(0x38uLL);
                      v551 = (std::__shared_weak_count *)v550;
                      *((_QWORD *)v550 + 1) = 0;
                      v552 = (unint64_t *)(v550 + 8);
                      *((_QWORD *)v550 + 2) = 0;
                      *(_QWORD *)v550 = &off_24C9ABBD0;
                      *((_QWORD *)v550 + 3) = off_24C9ABC20;
                      v553 = v988;
                      *((_QWORD *)v550 + 4) = v548;
                      *((_QWORD *)v550 + 5) = v553;
                      *(_QWORD *)(v550 + 47) = *(_QWORD *)((char *)&v988 + 7);
                      v550[55] = v549;
                      v888 = v550 + 24;
                      v889 = v550;
                      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v544;
                      object.__r_.__value_.__l.__size_ = (std::string::size_type)v544;
                      object.__r_.__value_.__r.__words[2] = (std::string::size_type)v545;
                      do
                        v554 = __ldxr(v546);
                      while (__stxr(v554 + 1, v546));
                      *(_QWORD *)&v901 = v550 + 24;
                      *((_QWORD *)&v901 + 1) = v550;
                      do
                        v555 = __ldxr(v552);
                      while (__stxr(v555 + 1, v552));
                      v902 = v550 + 24;
                      do
                        v556 = __ldaxr(v552);
                      while (__stlxr(v556 - 1, v552));
                      if (!v556)
                      {
                        (*(void (**)(char *))(*(_QWORD *)v550 + 16))(v550);
                        std::__shared_weak_count::__release_weak(v551);
                      }
                      v557 = (std::__shared_weak_count *)v887.__pn_.__r_.__value_.__r.__words[2];
                      if (v887.__pn_.__r_.__value_.__r.__words[2])
                      {
                        v558 = (unint64_t *)(v887.__pn_.__r_.__value_.__r.__words[2] + 8);
                        do
                          v559 = __ldaxr(v558);
                        while (__stlxr(v559 - 1, v558));
                        if (!v559)
                        {
                          ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
                          std::__shared_weak_count::__release_weak(v557);
                        }
                      }
                      v560 = object.__r_.__value_.__r.__words[0];
                      if (*((char *)v902 + 31) >= 0)
                        v561 = (char *)v902 + 8;
                      else
                        v561 = (char *)*((_QWORD *)v902 + 1);
                      v562 = _os_log_pack_fill();
                      *(_DWORD *)v562 = 136315138;
                      *(_QWORD *)(v562 + 4) = v561;
                      v563 = operator new();
                      v564 = *(unsigned __int8 *)(v852 + 39);
                      v565 = v850;
                      if ((v564 & 0x80u) != 0)
                      {
                        v565 = *(_QWORD *)(v852 + 16);
                        v564 = *(_QWORD *)(v852 + 24);
                      }
                      *(_QWORD *)v563 = v560;
                      *(_OWORD *)(v563 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                      *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                      *(_OWORD *)(v563 + 24) = v901;
                      v901 = 0uLL;
                      *(_QWORD *)(v563 + 40) = v565;
                      *(_QWORD *)(v563 + 48) = v564;
                      *(_BYTE *)(v563 + 56) = 1;
                      __p.__r_.__value_.__r.__words[0] = 0;
                      v887.__pn_.__r_.__value_.__r.__words[0] = v563;
                      (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v856 + 24) + 40))(*(_QWORD *)(v856 + 24), &v887);
                      v566 = v887.__pn_.__r_.__value_.__r.__words[0];
                      v887.__pn_.__r_.__value_.__r.__words[0] = 0;
                      if (v566)
                      {
                        v567 = *(std::__shared_weak_count **)(v566 + 32);
                        if (v567)
                        {
                          v568 = (unint64_t *)&v567->__shared_owners_;
                          do
                            v569 = __ldaxr(v568);
                          while (__stlxr(v569 - 1, v568));
                          if (!v569)
                          {
                            ((void (*)(std::__shared_weak_count *))v567->__on_zero_shared)(v567);
                            std::__shared_weak_count::__release_weak(v567);
                          }
                        }
                        v570 = *(std::__shared_weak_count **)(v566 + 16);
                        if (v570)
                        {
                          v571 = (unint64_t *)&v570->__shared_owners_;
                          do
                            v572 = __ldaxr(v571);
                          while (__stlxr(v572 - 1, v571));
                          if (!v572)
                          {
                            ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
                            std::__shared_weak_count::__release_weak(v570);
                          }
                        }
                        MEMORY[0x212BC6398](v566, 0x10F0C40B62ED6C6);
                        v573 = __p.__r_.__value_.__r.__words[0];
                        __p.__r_.__value_.__r.__words[0] = 0;
                        if (v573)
                        {
                          v574 = *(std::__shared_weak_count **)(v573 + 32);
                          if (v574)
                          {
                            v575 = (unint64_t *)&v574->__shared_owners_;
                            do
                              v576 = __ldaxr(v575);
                            while (__stlxr(v576 - 1, v575));
                            if (!v576)
                            {
                              ((void (*)(std::__shared_weak_count *))v574->__on_zero_shared)(v574);
                              std::__shared_weak_count::__release_weak(v574);
                            }
                          }
                          v577 = *(std::__shared_weak_count **)(v573 + 16);
                          if (v577)
                          {
                            v578 = (unint64_t *)&v577->__shared_owners_;
                            do
                              v579 = __ldaxr(v578);
                            while (__stlxr(v579 - 1, v578));
                            if (!v579)
                            {
                              ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
                              std::__shared_weak_count::__release_weak(v577);
                            }
                          }
                          MEMORY[0x212BC6398](v573, 0x10F0C40B62ED6C6);
                        }
                      }
                      v580 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
                      if (*((_QWORD *)&v901 + 1))
                      {
                        v581 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
                        do
                          v582 = __ldaxr(v581);
                        while (__stlxr(v582 - 1, v581));
                        if (!v582)
                        {
                          ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
                          std::__shared_weak_count::__release_weak(v580);
                        }
                      }
                      v583 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                      if (object.__r_.__value_.__r.__words[2])
                      {
                        v584 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                        do
                          v585 = __ldaxr(v584);
                        while (__stlxr(v585 - 1, v584));
                        if (!v585)
                        {
                          ((void (*)(std::__shared_weak_count *))v583->__on_zero_shared)(v583);
                          std::__shared_weak_count::__release_weak(v583);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v542, OS_LOG_TYPE_INFO);
                      LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)__srcc;
                      v586 = (void *)_os_log_send_and_compose_impl();
                      if (v586)
                        free(v586);
                    }
                    if (v234)
                    {
                      sub_20E8C003C((uint64_t)&value, "%sabling output sliding-window estimate in pose metadata", __srcc);
                      sub_20E863570((uint64_t)&value);
                    }
                    sub_20E863570((uint64_t)&value);
                    v587 = v899;
                    if (v899)
                    {
                      v588 = (unint64_t *)&v899->__shared_owners_;
                      do
                        v589 = __ldaxr(v588);
                      while (__stlxr(v589 - 1, v588));
                      if (!v589)
                      {
                        ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
                        std::__shared_weak_count::__release_weak(v587);
                      }
                    }
                    goto LABEL_399;
                  }
                }
                memmove(v535, v533, v534);
                goto LABEL_894;
              }
LABEL_381:
              __dst.__r_.__value_.__s.__data_[0] = 0;
              LOBYTE(v877) = 0;
              goto LABEL_382;
            }
            value = &v988;
            rep = std::chrono::steady_clock::now().__d_.__rep_;
            v893 = std::chrono::system_clock::now().__d_.__rep_;
            v894 = 3;
            v895 = "unknown file";
            v896 = 115;
            v898 = 0;
            v899 = 0;
            v897 = "unknown function";
            v217 = "En";
            if (!v213)
              v217 = "Dis";
            v218 = *(_QWORD *)value;
            if (*(char *)(*(_QWORD *)value + 39) < 0)
            {
              v220 = *(const char **)(v218 + 16);
              v219 = *(_QWORD *)(v218 + 24);
            }
            else
            {
              v219 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
              v220 = (const char *)(*(_QWORD *)value + 16);
            }
            v853 = *(_QWORD *)value + 16;
            v855 = *(_QWORD *)value;
            v867 = v217;
            __srce = v214;
            v473 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v473 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&object);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
              if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                operator delete(object.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v474 = byte_254A4A4F8;
            else
              v474 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v475 = byte_254A4A4F8[23];
            else
              v475 = *(_QWORD *)&byte_254A4A4F8[8];
            object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v474, v220);
            v476 = &object.__r_.__value_.__l.__size_;
            if (v475 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v475 >= 0x17)
            {
              v477 = v216;
              v478 = (v475 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v475 | 7) != 0x17)
                v478 = v475 | 7;
              v479 = v478 + 1;
              v476 = (std::string::size_type *)operator new(v478 + 1);
              *(_QWORD *)&v901 = v479 | 0x8000000000000000;
              object.__r_.__value_.__l.__size_ = (std::string::size_type)v476;
              object.__r_.__value_.__r.__words[2] = v475;
              v216 = v477;
            }
            else
            {
              BYTE7(v901) = v475;
              if (!v475)
              {
LABEL_798:
                *((_BYTE *)v476 + v475) = 0;
                BYTE8(v901) = 1;
                v480 = &v902;
                if (v219 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v219 >= 0x17)
                {
                  v481 = v216;
                  v482 = (v219 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v219 | 7) != 0x17)
                    v482 = v219 | 7;
                  v483 = v482 + 1;
                  v480 = operator new(v482 + 1);
                  v904 = v483 | 0x8000000000000000;
                  v902 = v480;
                  v903 = v219;
                  v216 = v481;
                }
                else
                {
                  HIBYTE(v904) = v219;
                  if (!v219)
                    goto LABEL_806;
                }
                memmove(v480, v220, v219);
LABEL_806:
                *((_BYTE *)v480 + v219) = 0;
                v905 = 1;
                v484 = object.__r_.__value_.__r.__words[0];
                if (SHIBYTE(v904) < 0)
                  operator delete(v902);
                if (BYTE8(v901) && SBYTE7(v901) < 0)
                  operator delete((void *)object.__r_.__value_.__l.__size_);
                if (object.__r_.__value_.__r.__words[0])
                  os_release(object.__r_.__value_.__l.__data_);
                if (v216 && *(_QWORD *)(v216 + 24))
                {
                  v485 = _os_log_pack_size();
                  v486 = operator new(v485, (std::align_val_t)8uLL);
                  v851 = v216;
                  v487 = (_QWORD *)operator new();
                  v487[1] = 0;
                  v488 = v487 + 1;
                  *v487 = &off_24C9ABB80;
                  v487[2] = 0;
                  v487[3] = v486;
                  v887.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v486;
                  v887.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v486;
                  v888 = 0;
                  v889 = 0;
                  v887.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)v487;
                  if (v213)
                    v489 = 2;
                  else
                    v489 = 3;
                  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v489;
                  memcpy(&__dst, v867, v489);
                  *(_BYTE *)((unint64_t)&__dst | v489) = 0;
                  __p.__r_.__value_.__r.__words[0] = __dst.__r_.__value_.__l.__size_;
                  v490 = __dst.__r_.__value_.__r.__words[0];
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
                  v491 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                  v492 = (char *)operator new(0x38uLL);
                  v493 = (std::__shared_weak_count *)v492;
                  *((_QWORD *)v492 + 1) = 0;
                  v494 = (unint64_t *)(v492 + 8);
                  *((_QWORD *)v492 + 2) = 0;
                  *(_QWORD *)v492 = &off_24C9ABBD0;
                  *((_QWORD *)v492 + 3) = off_24C9ABC20;
                  v495 = __p.__r_.__value_.__r.__words[0];
                  *((_QWORD *)v492 + 4) = v490;
                  *((_QWORD *)v492 + 5) = v495;
                  *(_QWORD *)(v492 + 47) = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7);
                  v492[55] = v491;
                  v888 = v492 + 24;
                  v889 = v492;
                  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v486;
                  object.__r_.__value_.__l.__size_ = (std::string::size_type)v486;
                  object.__r_.__value_.__r.__words[2] = (std::string::size_type)v487;
                  do
                    v496 = __ldxr(v488);
                  while (__stxr(v496 + 1, v488));
                  *(_QWORD *)&v901 = v492 + 24;
                  *((_QWORD *)&v901 + 1) = v492;
                  do
                    v497 = __ldxr(v494);
                  while (__stxr(v497 + 1, v494));
                  v902 = v492 + 24;
                  do
                    v498 = __ldaxr(v494);
                  while (__stlxr(v498 - 1, v494));
                  if (!v498)
                  {
                    (*(void (**)(char *))(*(_QWORD *)v492 + 16))(v492);
                    std::__shared_weak_count::__release_weak(v493);
                  }
                  v499 = (std::__shared_weak_count *)v887.__pn_.__r_.__value_.__r.__words[2];
                  if (v887.__pn_.__r_.__value_.__r.__words[2])
                  {
                    v500 = (unint64_t *)(v887.__pn_.__r_.__value_.__r.__words[2] + 8);
                    do
                      v501 = __ldaxr(v500);
                    while (__stlxr(v501 - 1, v500));
                    if (!v501)
                    {
                      ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
                      std::__shared_weak_count::__release_weak(v499);
                    }
                  }
                  v502 = object.__r_.__value_.__r.__words[0];
                  if (*((char *)v902 + 31) >= 0)
                    v503 = (char *)v902 + 8;
                  else
                    v503 = (char *)*((_QWORD *)v902 + 1);
                  v504 = _os_log_pack_fill();
                  *(_DWORD *)v504 = 136315138;
                  *(_QWORD *)(v504 + 4) = v503;
                  v505 = operator new();
                  v506 = *(unsigned __int8 *)(v855 + 39);
                  v507 = v853;
                  if ((v506 & 0x80u) != 0)
                  {
                    v507 = *(_QWORD *)(v855 + 16);
                    v506 = *(_QWORD *)(v855 + 24);
                  }
                  *(_QWORD *)v505 = v502;
                  *(_OWORD *)(v505 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                  *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                  *(_OWORD *)(v505 + 24) = v901;
                  v901 = 0uLL;
                  *(_QWORD *)(v505 + 40) = v507;
                  *(_QWORD *)(v505 + 48) = v506;
                  *(_BYTE *)(v505 + 56) = 1;
                  __dst.__r_.__value_.__r.__words[0] = 0;
                  v887.__pn_.__r_.__value_.__r.__words[0] = v505;
                  (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v851 + 24) + 40))(*(_QWORD *)(v851 + 24), &v887);
                  v508 = v887.__pn_.__r_.__value_.__r.__words[0];
                  v887.__pn_.__r_.__value_.__r.__words[0] = 0;
                  if (v508)
                  {
                    v509 = *(std::__shared_weak_count **)(v508 + 32);
                    if (v509)
                    {
                      v510 = (unint64_t *)&v509->__shared_owners_;
                      do
                        v511 = __ldaxr(v510);
                      while (__stlxr(v511 - 1, v510));
                      if (!v511)
                      {
                        ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
                        std::__shared_weak_count::__release_weak(v509);
                      }
                    }
                    v512 = *(std::__shared_weak_count **)(v508 + 16);
                    if (v512)
                    {
                      v513 = (unint64_t *)&v512->__shared_owners_;
                      do
                        v514 = __ldaxr(v513);
                      while (__stlxr(v514 - 1, v513));
                      if (!v514)
                      {
                        ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
                        std::__shared_weak_count::__release_weak(v512);
                      }
                    }
                    MEMORY[0x212BC6398](v508, 0x10F0C40B62ED6C6);
                    v515 = __dst.__r_.__value_.__r.__words[0];
                    __dst.__r_.__value_.__r.__words[0] = 0;
                    if (v515)
                    {
                      v516 = *(std::__shared_weak_count **)(v515 + 32);
                      if (v516)
                      {
                        v517 = (unint64_t *)&v516->__shared_owners_;
                        do
                          v518 = __ldaxr(v517);
                        while (__stlxr(v518 - 1, v517));
                        if (!v518)
                        {
                          ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
                          std::__shared_weak_count::__release_weak(v516);
                        }
                      }
                      v519 = *(std::__shared_weak_count **)(v515 + 16);
                      if (v519)
                      {
                        v520 = (unint64_t *)&v519->__shared_owners_;
                        do
                          v521 = __ldaxr(v520);
                        while (__stlxr(v521 - 1, v520));
                        if (!v521)
                        {
                          ((void (*)(std::__shared_weak_count *))v519->__on_zero_shared)(v519);
                          std::__shared_weak_count::__release_weak(v519);
                        }
                      }
                      MEMORY[0x212BC6398](v515, 0x10F0C40B62ED6C6);
                    }
                  }
                  v522 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
                  if (*((_QWORD *)&v901 + 1))
                  {
                    v523 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
                    do
                      v524 = __ldaxr(v523);
                    while (__stlxr(v524 - 1, v523));
                    if (!v524)
                    {
                      ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
                      std::__shared_weak_count::__release_weak(v522);
                    }
                  }
                  v525 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                  if (object.__r_.__value_.__r.__words[2])
                  {
                    v526 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                    do
                      v527 = __ldaxr(v526);
                    while (__stlxr(v527 - 1, v526));
                    if (!v527)
                    {
                      ((void (*)(std::__shared_weak_count *))v525->__on_zero_shared)(v525);
                      std::__shared_weak_count::__release_weak(v525);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v484, OS_LOG_TYPE_INFO);
                  LODWORD(object.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = (std::string::size_type)v867;
                  v528 = (void *)_os_log_send_and_compose_impl();
                  if (v528)
                    free(v528);
                }
                if (__srce)
                {
                  sub_20E8C003C((uint64_t)&value, "%sabling scan-order Laplacian readout", v867);
                  sub_20E863570((uint64_t)&value);
                }
                sub_20E863570((uint64_t)&value);
                v529 = v899;
                if (v899)
                {
                  v530 = (unint64_t *)&v899->__shared_owners_;
                  do
                    v531 = __ldaxr(v530);
                  while (__stlxr(v531 - 1, v530));
                  if (!v531)
                  {
                    ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
                    std::__shared_weak_count::__release_weak(v529);
                  }
                }
                goto LABEL_369;
              }
            }
            memmove(v476, v474, v475);
            goto LABEL_798;
          }
          value = &__p;
          rep = std::chrono::steady_clock::now().__d_.__rep_;
          v893 = std::chrono::system_clock::now().__d_.__rep_;
          v894 = 4;
          v895 = "unknown file";
          v896 = 105;
          v898 = 0;
          v899 = 0;
          v897 = "unknown function";
          v156 = *(_QWORD *)value;
          if (*(char *)(*(_QWORD *)value + 39) < 0)
          {
            v158 = *(const char **)(v156 + 16);
            v157 = *(_QWORD *)(v156 + 24);
          }
          else
          {
            v157 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
            v158 = (const char *)(*(_QWORD *)value + 16);
          }
          __srcb = (void *)(*(_QWORD *)value + 16);
          v866 = *(_QWORD *)value;
          v159 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v159 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)&object);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
            if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
              operator delete(object.__r_.__value_.__l.__data_);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v160 = byte_254A4A4F8;
          else
            v160 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v161 = byte_254A4A4F8[23];
          else
            v161 = *(_QWORD *)&byte_254A4A4F8[8];
          object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v160, v158);
          v162 = &object.__r_.__value_.__l.__size_;
          if (v161 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v161 >= 0x17)
          {
            v163 = v158;
            v164 = v153;
            v165 = (v161 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v161 | 7) != 0x17)
              v165 = v161 | 7;
            v166 = v165 + 1;
            v162 = (std::string::size_type *)operator new(v165 + 1);
            *(_QWORD *)&v901 = v166 | 0x8000000000000000;
            object.__r_.__value_.__l.__size_ = (std::string::size_type)v162;
            object.__r_.__value_.__r.__words[2] = v161;
            v153 = v164;
            v158 = v163;
          }
          else
          {
            BYTE7(v901) = v161;
            if (!v161)
            {
LABEL_285:
              *((_BYTE *)v162 + v161) = 0;
              BYTE8(v901) = 1;
              v167 = &v902;
              if (v157 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v157 >= 0x17)
              {
                v168 = (v157 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v157 | 7) != 0x17)
                  v168 = v157 | 7;
                v169 = v168 + 1;
                v167 = operator new(v168 + 1);
                v904 = v169 | 0x8000000000000000;
                v902 = v167;
                v903 = v157;
              }
              else
              {
                HIBYTE(v904) = v157;
                if (!v157)
                  goto LABEL_293;
              }
              memmove(v167, v158, v157);
LABEL_293:
              *((_BYTE *)v167 + v157) = 0;
              v905 = 1;
              v170 = object.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v904) < 0)
                operator delete(v902);
              if (BYTE8(v901) && SBYTE7(v901) < 0)
                operator delete((void *)object.__r_.__value_.__l.__size_);
              if (object.__r_.__value_.__r.__words[0])
                os_release(object.__r_.__value_.__l.__data_);
              if (v155 && *(_QWORD *)(v155 + 24))
              {
                v171 = _os_log_pack_size();
                v172 = (std::__shared_weak_count_vtbl *)operator new(v171, (std::align_val_t)8uLL);
                v173 = (std::__shared_weak_count *)operator new();
                v174 = v173;
                v173->__shared_owners_ = 0;
                v175 = (unint64_t *)&v173->__shared_owners_;
                v173->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                v173->__shared_weak_owners_ = 0;
                v173[1].__vftable = v172;
                object.__r_.__value_.__r.__words[0] = (std::string::size_type)v172;
                object.__r_.__value_.__l.__size_ = (std::string::size_type)v172;
                object.__r_.__value_.__r.__words[2] = (std::string::size_type)v173;
                do
                  v176 = __ldxr(v175);
                while (__stxr(v176 + 1, v175));
                v901 = 0uLL;
                v902 = 0;
                do
                  v177 = __ldaxr(v175);
                while (__stlxr(v177 - 1, v175));
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                  std::__shared_weak_count::__release_weak(v174);
                }
                v178 = object.__r_.__value_.__r.__words[0];
                *(_WORD *)_os_log_pack_fill() = 0;
                v179 = operator new();
                v180 = *(unsigned __int8 *)(v866 + 39);
                v181 = __srcb;
                if ((v180 & 0x80u) != 0)
                {
                  v181 = *(void **)(v866 + 16);
                  v180 = *(_QWORD *)(v866 + 24);
                }
                *(_QWORD *)v179 = v178;
                *(_OWORD *)(v179 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
                *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
                *(_OWORD *)(v179 + 24) = v901;
                v901 = 0uLL;
                *(_QWORD *)(v179 + 40) = v181;
                *(_QWORD *)(v179 + 48) = v180;
                *(_BYTE *)(v179 + 56) = 16;
                __dst.__r_.__value_.__r.__words[0] = 0;
                v887.__pn_.__r_.__value_.__r.__words[0] = v179;
                (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v155 + 24) + 40))(*(_QWORD *)(v155 + 24), &v887);
                v182 = v887.__pn_.__r_.__value_.__r.__words[0];
                v887.__pn_.__r_.__value_.__r.__words[0] = 0;
                if (v182)
                {
                  v183 = *(std::__shared_weak_count **)(v182 + 32);
                  if (v183)
                  {
                    v184 = (unint64_t *)&v183->__shared_owners_;
                    do
                      v185 = __ldaxr(v184);
                    while (__stlxr(v185 - 1, v184));
                    if (!v185)
                    {
                      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
                      std::__shared_weak_count::__release_weak(v183);
                    }
                  }
                  v186 = *(std::__shared_weak_count **)(v182 + 16);
                  if (v186)
                  {
                    v187 = (unint64_t *)&v186->__shared_owners_;
                    do
                      v188 = __ldaxr(v187);
                    while (__stlxr(v188 - 1, v187));
                    if (!v188)
                    {
                      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                      std::__shared_weak_count::__release_weak(v186);
                    }
                  }
                  MEMORY[0x212BC6398](v182, 0x10F0C40B62ED6C6);
                  v189 = __dst.__r_.__value_.__r.__words[0];
                  __dst.__r_.__value_.__r.__words[0] = 0;
                  if (v189)
                  {
                    v190 = *(std::__shared_weak_count **)(v189 + 32);
                    if (v190)
                    {
                      v191 = (unint64_t *)&v190->__shared_owners_;
                      do
                        v192 = __ldaxr(v191);
                      while (__stlxr(v192 - 1, v191));
                      if (!v192)
                      {
                        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                        std::__shared_weak_count::__release_weak(v190);
                      }
                    }
                    v193 = *(std::__shared_weak_count **)(v189 + 16);
                    if (v193)
                    {
                      v194 = (unint64_t *)&v193->__shared_owners_;
                      do
                        v195 = __ldaxr(v194);
                      while (__stlxr(v195 - 1, v194));
                      if (!v195)
                      {
                        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
                        std::__shared_weak_count::__release_weak(v193);
                      }
                    }
                    MEMORY[0x212BC6398](v189, 0x10F0C40B62ED6C6);
                  }
                }
                v196 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
                if (*((_QWORD *)&v901 + 1))
                {
                  v197 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 - 1, v197));
                  if (!v198)
                  {
                    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                    std::__shared_weak_count::__release_weak(v196);
                  }
                }
                v199 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
                if (object.__r_.__value_.__r.__words[2])
                {
                  v200 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                  do
                    v201 = __ldaxr(v200);
                  while (__stlxr(v201 - 1, v200));
                  if (!v201)
                  {
                    ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                }
              }
              else
              {
                os_log_type_enabled(v170, OS_LOG_TYPE_ERROR);
                LOWORD(object.__r_.__value_.__l.__data_) = 0;
                v202 = (void *)_os_log_send_and_compose_impl();
                if (v202)
                  free(v202);
              }
              if (v153)
              {
                sub_20E8C003C((uint64_t)&value, "kCV3DVIO_UseLowPower was deprecated: Not enabling Low power VFusion");
                sub_20E863570((uint64_t)&value);
              }
              sub_20E863570((uint64_t)&value);
              v203 = v899;
              if (v899)
              {
                v204 = (unint64_t *)&v899->__shared_owners_;
                do
                  v205 = __ldaxr(v204);
                while (__stlxr(v205 - 1, v204));
                if (!v205)
                {
                  ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
                  std::__shared_weak_count::__release_weak(v203);
                }
              }
              goto LABEL_352;
            }
          }
          memmove(v162, v160, v161);
          goto LABEL_285;
        }
        value = &__p;
        rep = std::chrono::steady_clock::now().__d_.__rep_;
        v893 = std::chrono::system_clock::now().__d_.__rep_;
        v894 = 4;
        v895 = "unknown file";
        v896 = 100;
        v898 = 0;
        v899 = 0;
        v897 = "unknown function";
        v97 = *(_QWORD *)value;
        v865 = *(_QWORD *)value;
        if (*(char *)(*(_QWORD *)value + 39) < 0)
        {
          v99 = *(const char **)(v97 + 16);
          v98 = *(_QWORD *)(v97 + 24);
        }
        else
        {
          v98 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
          v99 = (const char *)(*(_QWORD *)value + 16);
        }
        __srca = (void *)(*(_QWORD *)value + 16);
        v100 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v100 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
        {
          sub_20E9E46F8((uint64_t)&object);
          sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
          if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
            operator delete(object.__r_.__value_.__l.__data_);
          __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
          __cxa_guard_release(&qword_254A4A510);
        }
        if (byte_254A4A4F8[23] >= 0)
          v101 = byte_254A4A4F8;
        else
          v101 = *(const char **)byte_254A4A4F8;
        if (byte_254A4A4F8[23] >= 0)
          v102 = byte_254A4A4F8[23];
        else
          v102 = *(_QWORD *)&byte_254A4A4F8[8];
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v101, v99);
        v103 = &object.__r_.__value_.__l.__size_;
        if (v102 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v102 >= 0x17)
        {
          v104 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v102 | 7) != 0x17)
            v104 = v102 | 7;
          v105 = v104 + 1;
          v103 = (std::string::size_type *)operator new(v104 + 1);
          *(_QWORD *)&v901 = v105 | 0x8000000000000000;
          object.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
          object.__r_.__value_.__r.__words[2] = v102;
        }
        else
        {
          BYTE7(v901) = v102;
          if (!v102)
          {
LABEL_182:
            *((_BYTE *)v103 + v102) = 0;
            BYTE8(v901) = 1;
            v106 = &v902;
            if (v98 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v98 >= 0x17)
            {
              v107 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v98 | 7) != 0x17)
                v107 = v98 | 7;
              v108 = v107 + 1;
              v106 = operator new(v107 + 1);
              v904 = v108 | 0x8000000000000000;
              v902 = v106;
              v903 = v98;
            }
            else
            {
              HIBYTE(v904) = v98;
              if (!v98)
                goto LABEL_190;
            }
            memmove(v106, v99, v98);
LABEL_190:
            *((_BYTE *)v106 + v98) = 0;
            v905 = 1;
            v109 = object.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v904) < 0)
              operator delete(v902);
            if (BYTE8(v901) && SBYTE7(v901) < 0)
              operator delete((void *)object.__r_.__value_.__l.__size_);
            if (object.__r_.__value_.__r.__words[0])
              os_release(object.__r_.__value_.__l.__data_);
            if (v96 && *(_QWORD *)(v96 + 24))
            {
              v110 = _os_log_pack_size();
              v111 = (std::__shared_weak_count_vtbl *)operator new(v110, (std::align_val_t)8uLL);
              v112 = (std::__shared_weak_count *)operator new();
              v113 = v112;
              v112->__shared_owners_ = 0;
              v114 = (unint64_t *)&v112->__shared_owners_;
              v112->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
              v112->__shared_weak_owners_ = 0;
              v112[1].__vftable = v111;
              object.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
              object.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
              object.__r_.__value_.__r.__words[2] = (std::string::size_type)v112;
              do
                v115 = __ldxr(v114);
              while (__stxr(v115 + 1, v114));
              v901 = 0uLL;
              v902 = 0;
              do
                v116 = __ldaxr(v114);
              while (__stlxr(v116 - 1, v114));
              if (!v116)
              {
                ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                std::__shared_weak_count::__release_weak(v113);
              }
              v117 = object.__r_.__value_.__r.__words[0];
              *(_WORD *)_os_log_pack_fill() = 0;
              v118 = operator new();
              v119 = *(unsigned __int8 *)(v865 + 39);
              v120 = __srca;
              if ((v119 & 0x80u) != 0)
              {
                v120 = *(void **)(v865 + 16);
                v119 = *(_QWORD *)(v865 + 24);
              }
              *(_QWORD *)v118 = v117;
              *(_OWORD *)(v118 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
              *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
              *(_OWORD *)(v118 + 24) = v901;
              v901 = 0uLL;
              *(_QWORD *)(v118 + 40) = v120;
              *(_QWORD *)(v118 + 48) = v119;
              *(_BYTE *)(v118 + 56) = 16;
              __dst.__r_.__value_.__r.__words[0] = 0;
              v887.__pn_.__r_.__value_.__r.__words[0] = v118;
              (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v96 + 24) + 40))(*(_QWORD *)(v96 + 24), &v887);
              v121 = v887.__pn_.__r_.__value_.__r.__words[0];
              v887.__pn_.__r_.__value_.__r.__words[0] = 0;
              if (v121)
              {
                v122 = *(std::__shared_weak_count **)(v121 + 32);
                if (v122)
                {
                  v123 = (unint64_t *)&v122->__shared_owners_;
                  do
                    v124 = __ldaxr(v123);
                  while (__stlxr(v124 - 1, v123));
                  if (!v124)
                  {
                    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                    std::__shared_weak_count::__release_weak(v122);
                  }
                }
                v125 = *(std::__shared_weak_count **)(v121 + 16);
                if (v125)
                {
                  v126 = (unint64_t *)&v125->__shared_owners_;
                  do
                    v127 = __ldaxr(v126);
                  while (__stlxr(v127 - 1, v126));
                  if (!v127)
                  {
                    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                    std::__shared_weak_count::__release_weak(v125);
                  }
                }
                MEMORY[0x212BC6398](v121, 0x10F0C40B62ED6C6);
                v128 = __dst.__r_.__value_.__r.__words[0];
                __dst.__r_.__value_.__r.__words[0] = 0;
                if (v128)
                {
                  v129 = *(std::__shared_weak_count **)(v128 + 32);
                  if (v129)
                  {
                    v130 = (unint64_t *)&v129->__shared_owners_;
                    do
                      v131 = __ldaxr(v130);
                    while (__stlxr(v131 - 1, v130));
                    if (!v131)
                    {
                      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                      std::__shared_weak_count::__release_weak(v129);
                    }
                  }
                  v132 = *(std::__shared_weak_count **)(v128 + 16);
                  if (v132)
                  {
                    v133 = (unint64_t *)&v132->__shared_owners_;
                    do
                      v134 = __ldaxr(v133);
                    while (__stlxr(v134 - 1, v133));
                    if (!v134)
                    {
                      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                      std::__shared_weak_count::__release_weak(v132);
                    }
                  }
                  MEMORY[0x212BC6398](v128, 0x10F0C40B62ED6C6);
                }
              }
              v135 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
              if (*((_QWORD *)&v901 + 1))
              {
                v136 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
                do
                  v137 = __ldaxr(v136);
                while (__stlxr(v137 - 1, v136));
                if (!v137)
                {
                  ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                  std::__shared_weak_count::__release_weak(v135);
                }
              }
              v138 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
              if (object.__r_.__value_.__r.__words[2])
              {
                v139 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
                do
                  v140 = __ldaxr(v139);
                while (__stlxr(v140 - 1, v139));
                if (!v140)
                {
                  ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
                  std::__shared_weak_count::__release_weak(v138);
                }
              }
            }
            else
            {
              os_log_type_enabled(v109, OS_LOG_TYPE_ERROR);
              LOWORD(object.__r_.__value_.__l.__data_) = 0;
              v141 = (void *)_os_log_send_and_compose_impl();
              if (v141)
                free(v141);
            }
            if (v94)
            {
              sub_20E8C003C((uint64_t)&value, "kCV3DVIO_UseFactorGraph was deprecated: Not disabling FactorGraph");
              sub_20E863570((uint64_t)&value);
            }
            sub_20E863570((uint64_t)&value);
            v142 = v899;
            if (v899)
            {
              v143 = (unint64_t *)&v899->__shared_owners_;
              do
                v144 = __ldaxr(v143);
              while (__stlxr(v144 - 1, v143));
              if (!v144)
              {
                ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                std::__shared_weak_count::__release_weak(v142);
              }
            }
            goto LABEL_249;
          }
        }
        memmove(v103, v101, v102);
        goto LABEL_182;
      }
      value = &__p;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v893 = std::chrono::system_clock::now().__d_.__rep_;
      v894 = 3;
      v895 = "unknown file";
      v896 = 95;
      v898 = 0;
      v899 = 0;
      v897 = "unknown function";
      v83 = *(_QWORD *)value;
      v864 = *(_QWORD *)value;
      if (*(char *)(*(_QWORD *)value + 39) < 0)
      {
        v85 = *(const char **)(v83 + 16);
        v84 = *(_QWORD *)(v83 + 24);
      }
      else
      {
        v84 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
        v85 = (const char *)(*(_QWORD *)value + 16);
      }
      __srcd = (void *)(*(_QWORD *)value + 16);
      v424 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v424 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)&object);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
        if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(object.__r_.__value_.__l.__data_);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v425 = byte_254A4A4F8;
      else
        v425 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v426 = byte_254A4A4F8[23];
      else
        v426 = *(_QWORD *)&byte_254A4A4F8[8];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v425, v85);
      v427 = &object.__r_.__value_.__l.__size_;
      if (v426 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v426 >= 0x17)
      {
        v428 = v85;
        v429 = v82;
        v430 = v80;
        v431 = (v426 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v426 | 7) != 0x17)
          v431 = v426 | 7;
        v432 = v431 + 1;
        v427 = (std::string::size_type *)operator new(v431 + 1);
        *(_QWORD *)&v901 = v432 | 0x8000000000000000;
        object.__r_.__value_.__l.__size_ = (std::string::size_type)v427;
        object.__r_.__value_.__r.__words[2] = v426;
        v80 = v430;
        v82 = v429;
        v85 = v428;
      }
      else
      {
        BYTE7(v901) = v426;
        if (!v426)
        {
LABEL_715:
          *((_BYTE *)v427 + v426) = 0;
          BYTE8(v901) = 1;
          v433 = &v902;
          if (v84 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v84 >= 0x17)
          {
            v434 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v84 | 7) != 0x17)
              v434 = v84 | 7;
            v435 = v434 + 1;
            v433 = operator new(v434 + 1);
            v904 = v435 | 0x8000000000000000;
            v902 = v433;
            v903 = v84;
          }
          else
          {
            HIBYTE(v904) = v84;
            if (!v84)
              goto LABEL_723;
          }
          memmove(v433, v85, v84);
LABEL_723:
          *((_BYTE *)v433 + v84) = 0;
          v905 = 1;
          v436 = object.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v904) < 0)
            operator delete(v902);
          if (BYTE8(v901) && SBYTE7(v901) < 0)
            operator delete((void *)object.__r_.__value_.__l.__size_);
          if (object.__r_.__value_.__r.__words[0])
            os_release(object.__r_.__value_.__l.__data_);
          if (v82 && *(_QWORD *)(v82 + 24))
          {
            v437 = _os_log_pack_size();
            v438 = (std::__shared_weak_count_vtbl *)operator new(v437, (std::align_val_t)8uLL);
            v439 = (std::__shared_weak_count *)operator new();
            v440 = v439;
            v439->__shared_owners_ = 0;
            v441 = (unint64_t *)&v439->__shared_owners_;
            v439->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v439->__shared_weak_owners_ = 0;
            v439[1].__vftable = v438;
            object.__r_.__value_.__r.__words[0] = (std::string::size_type)v438;
            object.__r_.__value_.__l.__size_ = (std::string::size_type)v438;
            object.__r_.__value_.__r.__words[2] = (std::string::size_type)v439;
            do
              v442 = __ldxr(v441);
            while (__stxr(v442 + 1, v441));
            v901 = 0uLL;
            v902 = 0;
            do
              v443 = __ldaxr(v441);
            while (__stlxr(v443 - 1, v441));
            if (!v443)
            {
              ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
              std::__shared_weak_count::__release_weak(v440);
            }
            v444 = object.__r_.__value_.__r.__words[0];
            v445 = _os_log_pack_fill();
            *(_DWORD *)v445 = 134217984;
            *(_QWORD *)(v445 + 4) = data;
            v446 = operator new();
            v447 = *(unsigned __int8 *)(v864 + 39);
            v448 = __srcd;
            if ((v447 & 0x80u) != 0)
            {
              v448 = *(void **)(v864 + 16);
              v447 = *(_QWORD *)(v864 + 24);
            }
            *(_QWORD *)v446 = v444;
            *(_OWORD *)(v446 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
            *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
            *(_OWORD *)(v446 + 24) = v901;
            v901 = 0uLL;
            *(_QWORD *)(v446 + 40) = v448;
            *(_QWORD *)(v446 + 48) = v447;
            *(_BYTE *)(v446 + 56) = 1;
            __dst.__r_.__value_.__r.__words[0] = 0;
            v887.__pn_.__r_.__value_.__r.__words[0] = v446;
            (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v82 + 24) + 40))(*(_QWORD *)(v82 + 24), &v887);
            v449 = v887.__pn_.__r_.__value_.__r.__words[0];
            v887.__pn_.__r_.__value_.__r.__words[0] = 0;
            if (v449)
            {
              v450 = *(std::__shared_weak_count **)(v449 + 32);
              if (v450)
              {
                v451 = (unint64_t *)&v450->__shared_owners_;
                do
                  v452 = __ldaxr(v451);
                while (__stlxr(v452 - 1, v451));
                if (!v452)
                {
                  ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                  std::__shared_weak_count::__release_weak(v450);
                }
              }
              v453 = *(std::__shared_weak_count **)(v449 + 16);
              if (v453)
              {
                v454 = (unint64_t *)&v453->__shared_owners_;
                do
                  v455 = __ldaxr(v454);
                while (__stlxr(v455 - 1, v454));
                if (!v455)
                {
                  ((void (*)(std::__shared_weak_count *))v453->__on_zero_shared)(v453);
                  std::__shared_weak_count::__release_weak(v453);
                }
              }
              MEMORY[0x212BC6398](v449, 0x10F0C40B62ED6C6);
              v456 = __dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = 0;
              if (v456)
              {
                v457 = *(std::__shared_weak_count **)(v456 + 32);
                if (v457)
                {
                  v458 = (unint64_t *)&v457->__shared_owners_;
                  do
                    v459 = __ldaxr(v458);
                  while (__stlxr(v459 - 1, v458));
                  if (!v459)
                  {
                    ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
                    std::__shared_weak_count::__release_weak(v457);
                  }
                }
                v460 = *(std::__shared_weak_count **)(v456 + 16);
                if (v460)
                {
                  v461 = (unint64_t *)&v460->__shared_owners_;
                  do
                    v462 = __ldaxr(v461);
                  while (__stlxr(v462 - 1, v461));
                  if (!v462)
                  {
                    ((void (*)(std::__shared_weak_count *))v460->__on_zero_shared)(v460);
                    std::__shared_weak_count::__release_weak(v460);
                  }
                }
                MEMORY[0x212BC6398](v456, 0x10F0C40B62ED6C6);
              }
            }
            v463 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
            if (*((_QWORD *)&v901 + 1))
            {
              v464 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
              do
                v465 = __ldaxr(v464);
              while (__stlxr(v465 - 1, v464));
              if (!v465)
              {
                ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                std::__shared_weak_count::__release_weak(v463);
              }
            }
            v466 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
            if (object.__r_.__value_.__r.__words[2])
            {
              v467 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
              do
                v468 = __ldaxr(v467);
              while (__stlxr(v468 - 1, v467));
              if (!v468)
              {
                ((void (*)(std::__shared_weak_count *))v466->__on_zero_shared)(v466);
                std::__shared_weak_count::__release_weak(v466);
              }
            }
          }
          else
          {
            os_log_type_enabled(v436, OS_LOG_TYPE_INFO);
            LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
            *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = data;
            v469 = (void *)_os_log_send_and_compose_impl();
            if (v469)
              free(v469);
          }
          if (v80)
          {
            sub_20E8C003C((uint64_t)&value, "Changing the number of features to track to %zu", data);
            sub_20E863570((uint64_t)&value);
          }
          sub_20E863570((uint64_t)&value);
          v470 = v899;
          if (v899)
          {
            v471 = (unint64_t *)&v899->__shared_owners_;
            do
              v472 = __ldaxr(v471);
            while (__stlxr(v472 - 1, v471));
            if (!v472)
            {
              ((void (*)(std::__shared_weak_count *))v470->__on_zero_shared)(v470);
              std::__shared_weak_count::__release_weak(v470);
            }
          }
          goto LABEL_146;
        }
      }
      memmove(v427, v425, v426);
      goto LABEL_715;
    }
    v863 = v66;
    value = &__p;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v893 = std::chrono::system_clock::now().__d_.__rep_;
    v894 = 3;
    v895 = "unknown file";
    v896 = 86;
    v898 = 0;
    v899 = 0;
    v897 = "unknown function";
    v69 = *(_QWORD *)value;
    __src = *(_QWORD **)value;
    if (*(char *)(*(_QWORD *)value + 39) < 0)
    {
      v71 = *(const char **)(v69 + 16);
      v70 = *(_QWORD *)(v69 + 24);
    }
    else
    {
      v70 = *(unsigned __int8 *)(*(_QWORD *)value + 39);
      v71 = (const char *)(*(_QWORD *)value + 16);
    }
    v854 = *(_QWORD *)value + 16;
    v374 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v374 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&object);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&object);
      if ((_BYTE)v901 && SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v375 = byte_254A4A4F8;
    else
      v375 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v376 = byte_254A4A4F8[23];
    else
      v376 = *(_QWORD *)&byte_254A4A4F8[8];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v375, v71);
    v377 = &object.__r_.__value_.__l.__size_;
    if (v376 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v376 >= 0x17)
    {
      v378 = v68;
      v379 = v71;
      v380 = data_low;
      v381 = (v376 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v376 | 7) != 0x17)
        v381 = v376 | 7;
      v382 = v381 + 1;
      v377 = (std::string::size_type *)operator new(v381 + 1);
      *(_QWORD *)&v901 = v382 | 0x8000000000000000;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)v377;
      object.__r_.__value_.__r.__words[2] = v376;
      data_low = v380;
      v71 = v379;
      v68 = v378;
    }
    else
    {
      BYTE7(v901) = v376;
      if (!v376)
      {
LABEL_632:
        *((_BYTE *)v377 + v376) = 0;
        BYTE8(v901) = 1;
        v383 = &v902;
        if (v70 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v70 >= 0x17)
        {
          v384 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v70 | 7) != 0x17)
            v384 = v70 | 7;
          v385 = v384 + 1;
          v383 = operator new(v384 + 1);
          v904 = v385 | 0x8000000000000000;
          v902 = v383;
          v903 = v70;
        }
        else
        {
          HIBYTE(v904) = v70;
          if (!v70)
            goto LABEL_640;
        }
        memmove(v383, v71, v70);
LABEL_640:
        *((_BYTE *)v383 + v70) = 0;
        v905 = 1;
        v386 = object.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v904) < 0)
          operator delete(v902);
        if (BYTE8(v901) && SBYTE7(v901) < 0)
          operator delete((void *)object.__r_.__value_.__l.__size_);
        if (object.__r_.__value_.__r.__words[0])
          os_release(object.__r_.__value_.__l.__data_);
        if (v68 && *(_QWORD *)(v68 + 24))
        {
          v387 = _os_log_pack_size();
          v388 = (std::__shared_weak_count_vtbl *)operator new(v387, (std::align_val_t)8uLL);
          v389 = (std::__shared_weak_count *)operator new();
          v390 = v389;
          v389->__shared_owners_ = 0;
          v391 = (unint64_t *)&v389->__shared_owners_;
          v389->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v389->__shared_weak_owners_ = 0;
          v389[1].__vftable = v388;
          object.__r_.__value_.__r.__words[0] = (std::string::size_type)v388;
          object.__r_.__value_.__l.__size_ = (std::string::size_type)v388;
          object.__r_.__value_.__r.__words[2] = (std::string::size_type)v389;
          do
            v392 = __ldxr(v391);
          while (__stxr(v392 + 1, v391));
          v901 = 0uLL;
          v902 = 0;
          do
            v393 = __ldaxr(v391);
          while (__stlxr(v393 - 1, v391));
          if (!v393)
          {
            ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
            std::__shared_weak_count::__release_weak(v390);
          }
          v394 = object.__r_.__value_.__r.__words[0];
          v395 = _os_log_pack_fill();
          *(_DWORD *)v395 = 134217984;
          *(_QWORD *)(v395 + 4) = data_low;
          v396 = operator new();
          v397 = *((unsigned __int8 *)__src + 39);
          v398 = v854;
          if ((v397 & 0x80u) != 0)
          {
            v398 = __src[2];
            v397 = __src[3];
          }
          *(_QWORD *)v396 = v394;
          *(_OWORD *)(v396 + 8) = *(_OWORD *)&object.__r_.__value_.__r.__words[1];
          *(_OWORD *)&object.__r_.__value_.__r.__words[1] = 0uLL;
          *(_OWORD *)(v396 + 24) = v901;
          v901 = 0uLL;
          *(_QWORD *)(v396 + 40) = v398;
          *(_QWORD *)(v396 + 48) = v397;
          *(_BYTE *)(v396 + 56) = 1;
          __dst.__r_.__value_.__r.__words[0] = 0;
          v887.__pn_.__r_.__value_.__r.__words[0] = v396;
          (*(void (**)(_QWORD, std::__fs::filesystem::path *))(**(_QWORD **)(v68 + 24) + 40))(*(_QWORD *)(v68 + 24), &v887);
          v399 = v887.__pn_.__r_.__value_.__r.__words[0];
          v887.__pn_.__r_.__value_.__r.__words[0] = 0;
          if (v399)
          {
            v400 = *(std::__shared_weak_count **)(v399 + 32);
            if (v400)
            {
              v401 = (unint64_t *)&v400->__shared_owners_;
              do
                v402 = __ldaxr(v401);
              while (__stlxr(v402 - 1, v401));
              if (!v402)
              {
                ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
                std::__shared_weak_count::__release_weak(v400);
              }
            }
            v403 = *(std::__shared_weak_count **)(v399 + 16);
            if (v403)
            {
              v404 = (unint64_t *)&v403->__shared_owners_;
              do
                v405 = __ldaxr(v404);
              while (__stlxr(v405 - 1, v404));
              if (!v405)
              {
                ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
                std::__shared_weak_count::__release_weak(v403);
              }
            }
            MEMORY[0x212BC6398](v399, 0x10F0C40B62ED6C6);
            v406 = __dst.__r_.__value_.__r.__words[0];
            __dst.__r_.__value_.__r.__words[0] = 0;
            if (v406)
            {
              v407 = *(std::__shared_weak_count **)(v406 + 32);
              if (v407)
              {
                v408 = (unint64_t *)&v407->__shared_owners_;
                do
                  v409 = __ldaxr(v408);
                while (__stlxr(v409 - 1, v408));
                if (!v409)
                {
                  ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                  std::__shared_weak_count::__release_weak(v407);
                }
              }
              v410 = *(std::__shared_weak_count **)(v406 + 16);
              if (v410)
              {
                v411 = (unint64_t *)&v410->__shared_owners_;
                do
                  v412 = __ldaxr(v411);
                while (__stlxr(v412 - 1, v411));
                if (!v412)
                {
                  ((void (*)(std::__shared_weak_count *))v410->__on_zero_shared)(v410);
                  std::__shared_weak_count::__release_weak(v410);
                }
              }
              MEMORY[0x212BC6398](v406, 0x10F0C40B62ED6C6);
            }
          }
          v413 = (std::__shared_weak_count *)*((_QWORD *)&v901 + 1);
          v414 = v863;
          if (*((_QWORD *)&v901 + 1))
          {
            v415 = (unint64_t *)(*((_QWORD *)&v901 + 1) + 8);
            do
              v416 = __ldaxr(v415);
            while (__stlxr(v416 - 1, v415));
            if (!v416)
            {
              ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
              std::__shared_weak_count::__release_weak(v413);
            }
          }
          v417 = (std::__shared_weak_count *)object.__r_.__value_.__r.__words[2];
          if (object.__r_.__value_.__r.__words[2])
          {
            v418 = (unint64_t *)(object.__r_.__value_.__r.__words[2] + 8);
            do
              v419 = __ldaxr(v418);
            while (__stlxr(v419 - 1, v418));
            if (!v419)
            {
              ((void (*)(std::__shared_weak_count *))v417->__on_zero_shared)(v417);
              std::__shared_weak_count::__release_weak(v417);
            }
          }
        }
        else
        {
          os_log_type_enabled(v386, OS_LOG_TYPE_INFO);
          LODWORD(object.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)object.__r_.__value_.__r.__words + 4) = data_low;
          v420 = (void *)_os_log_send_and_compose_impl();
          v414 = v863;
          if (v420)
            free(v420);
        }
        if (v414)
        {
          sub_20E8C003C((uint64_t)&value, "Changing the sliding window size to %zu", data_low);
          sub_20E863570((uint64_t)&value);
        }
        sub_20E863570((uint64_t)&value);
        v421 = v899;
        if (v899)
        {
          v422 = (unint64_t *)&v899->__shared_owners_;
          do
            v423 = __ldaxr(v422);
          while (__stlxr(v423 - 1, v422));
          if (!v423)
          {
            ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
            std::__shared_weak_count::__release_weak(v421);
          }
        }
        goto LABEL_131;
      }
    }
    memmove(v377, v375, v376);
    goto LABEL_632;
  }
  v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    p_p = &__p;
  }
  else
  {
    v15 = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v15 >= 20)
  {
    v17 = (char *)p_p + v15;
    v18 = p_p;
    do
    {
      v19 = (char *)memchr(v18, 67, v15 - 19);
      if (!v19)
        break;
      if (*(_QWORD *)v19 == 0x726F62616C6C6F43
        && *((_QWORD *)v19 + 1) == 0x70614D6576697461
        && *((_DWORD *)v19 + 4) == 1735289200)
      {
        if (v19 != v17 && v19 - (char *)p_p != -1)
        {
          sub_20EE80934((char *)&__p, (uint64_t)&object);
          sub_20E9107DC(v875, (uint64_t)&object);
          sub_20E869418((uint64_t)&object);
          goto LABEL_113;
        }
        break;
      }
      v18 = (std::string *)(v19 + 1);
      v15 = v17 - (char *)v18;
    }
    while (v17 - (char *)v18 >= 20);
  }
  LODWORD(value) = CV3DSLAMConfigPresetFromString((const char *)p_p);
  sub_20E90F850();
  if (v915)
  {
    sub_20E86AC88((uint64_t)&value, (uint64_t)&object.__r_.__value_.__l.__size_);
    sub_20E862C24(v875, &value);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v22 = __p.__r_.__value_.__l.__size_;
    *((_QWORD *)&v23 + 1) = v22;
    *(_QWORD *)&v23 = v22 - 8;
    switch((unint64_t)(v23 >> 1))
    {
      case 0uLL:
        v24 = __p.__r_.__value_.__r.__words[0];
        goto LABEL_90;
      case 1uLL:
        v24 = __p.__r_.__value_.__r.__words[0];
        v36 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v37 = v36->__r_.__value_.__r.__words[0];
        v38 = LOWORD(v36->__r_.__value_.__r.__words[1]);
        v39 = v37 == 0x416572757361654DLL;
        v40 = 28784;
        goto LABEL_85;
      case 2uLL:
        v24 = __p.__r_.__value_.__r.__words[0];
        v26 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v27 = v26->__r_.__value_.__r.__words[0];
        v28 = v26->__r_.__value_.__r.__words[1];
        if (v27 != 0x797274656D6F644FLL || v28 != 2037149263)
          goto LABEL_89;
        sub_20E9D092C(&v883);
        if (**(int **)(v883 + 56) <= 3)
        {
          v30 = *(unsigned __int8 *)(v883 + 72);
          v31 = sub_20E8C31DC(v883, "OSLogSurrogateAppender", 1, 0);
          v32 = v31 ? v31 + 16 : 0;
          if (v30 || v31)
          {
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v883;
            __dst.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
            __dst.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
            v877 = 3;
            v878 = "unknown file";
            v879 = 69;
            v881 = 0;
            v882 = 0;
            v880 = "unknown function";
            v33 = (uint64_t *)(v883 + 16);
            if (*(char *)(v883 + 39) < 0)
            {
              v35 = *(char **)(v883 + 16);
              v34 = *(_QWORD *)(v883 + 24);
            }
            else
            {
              v34 = *(unsigned __int8 *)(v883 + 39);
              v35 = (char *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16);
            }
            category = v35;
            v886 = v34;
            v846 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v846 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v887);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v887);
              if ((_BYTE)v888 && SHIBYTE(v887.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v887.__pn_.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            v847 = byte_254A4A4F8[23];
            if (byte_254A4A4F8[23] >= 0)
            {
              v848 = byte_254A4A4F8;
            }
            else
            {
              v847 = *(_QWORD *)&byte_254A4A4F8[8];
              v848 = *(const char **)byte_254A4A4F8;
            }
            *(_QWORD *)&v988 = v848;
            *((_QWORD *)&v988 + 1) = v847;
            v887.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v848, category);
            sub_20E86E5A8(&v887.__pn_.__r_.__value_.__l.__size_, (uint64_t)&v988);
            sub_20E86E5A8(v890, (uint64_t)&category);
            v849 = v887.__pn_.__r_.__value_.__r.__words[0];
            sub_20E86E44C((uint64_t)&v887);
            sub_20E9D30F4(v32, v33, v849, OS_LOG_TYPE_INFO);
            if (v30)
            {
              sub_20E8C003C((uint64_t)&__dst, "Entering VIO only mode");
              sub_20E863570((uint64_t)&__dst);
            }
            sub_20E863714((uint64_t)&__dst);
          }
        }
        break;
      case 9uLL:
        v24 = __p.__r_.__value_.__r.__words[0];
        v41 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v42 = v41->__r_.__value_.__r.__words[0];
        v43 = v41->__r_.__value_.__l.__size_;
        v44 = v41->__r_.__value_.__r.__words[2];
        v38 = LOWORD(v41[1].__r_.__value_.__l.__data_);
        v39 = v42 == 0x65447463656A624FLL && v43 == 0x4D6E6F6974636574 && v44 == 0x69646C6975427061;
        v40 = 26478;
LABEL_85:
        if (v39 && v38 == v40)
        {
          v918.i32[0] = 640;
        }
        else
        {
LABEL_89:
          if (v22 == 8)
          {
LABEL_90:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v47 = &__p;
            else
              v47 = (std::string *)v24;
            if (!memcmp(v47, "Headless", v22))
            {
              sub_20E9D092C(&v883);
              if (**(int **)(v883 + 56) <= 3)
              {
                v48 = *(unsigned __int8 *)(v883 + 72);
                v49 = sub_20E8C31DC(v883, "OSLogSurrogateAppender", 1, 0);
                v50 = v49 ? v49 + 16 : 0;
                if (v48 || v49)
                {
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v883;
                  __dst.__r_.__value_.__r.__words[1] = std::chrono::steady_clock::now().__d_.__rep_;
                  __dst.__r_.__value_.__r.__words[2] = std::chrono::system_clock::now().__d_.__rep_;
                  v877 = 3;
                  v878 = "unknown file";
                  v879 = 71;
                  v881 = 0;
                  v882 = 0;
                  v880 = "unknown function";
                  v51 = (uint64_t *)(v883 + 16);
                  if (*(char *)(v883 + 39) < 0)
                  {
                    v53 = *(char **)(v883 + 16);
                    v52 = *(_QWORD *)(v883 + 24);
                  }
                  else
                  {
                    v52 = *(unsigned __int8 *)(v883 + 39);
                    v53 = (char *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16);
                  }
                  category = v53;
                  v886 = v52;
                  v54 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v54 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)&v887);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v887);
                    if ((_BYTE)v888 && SHIBYTE(v887.__pn_.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v887.__pn_.__r_.__value_.__l.__data_);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
                  v55 = byte_254A4A4F8[23];
                  if (byte_254A4A4F8[23] >= 0)
                  {
                    v56 = byte_254A4A4F8;
                  }
                  else
                  {
                    v55 = *(_QWORD *)&byte_254A4A4F8[8];
                    v56 = *(const char **)byte_254A4A4F8;
                  }
                  *(_QWORD *)&v988 = v56;
                  *((_QWORD *)&v988 + 1) = v55;
                  v887.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v56, category);
                  sub_20E86E5A8(&v887.__pn_.__r_.__value_.__l.__size_, (uint64_t)&v988);
                  sub_20E86E5A8(v890, (uint64_t)&category);
                  v57 = v887.__pn_.__r_.__value_.__r.__words[0];
                  sub_20E86E44C((uint64_t)&v887);
                  sub_20E9D34E0(v50, v51, v57, OS_LOG_TYPE_INFO);
                  if (v48)
                  {
                    sub_20E8C003C((uint64_t)&__dst, "Entering headless mode");
                    sub_20E863570((uint64_t)&__dst);
                  }
                  sub_20E863714((uint64_t)&__dst);
                }
              }
              if ((sub_20E8E742C((uint64_t)&theDict, CFSTR("SlidingWindowSize")) & 0xFF00000000) != 0)
              {
                sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/SLAM/VIOEngineAndPosePredictionConfigUtil.cpp", 73, (uint64_t)"", 0, (uint64_t)"Changing sliding window size disables headless mode!", 52, (void (*)(void **))sub_21023DDB0);
                abort();
              }
            }
          }
        }
        return;
      default:
        break;
    }
    sub_20E869418((uint64_t)&value);
    sub_20E915DB8((uint64_t)&object);
LABEL_113:
    if (v917 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_116;
  }
  *v869 = 0;
  v869[13112] = 0;
  sub_20E915DB8((uint64_t)&object);
  if (v917 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_1350:
    operator delete(v25);
  }
LABEL_1351:
  v792 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
  if (*((_QWORD *)&theDict + 1))
  {
    v793 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
    do
      v794 = __ldaxr(v793);
    while (__stlxr(v794 - 1, v793));
    if (!v794)
    {
      ((void (*)(std::__shared_weak_count *))v792->__on_zero_shared)(v792);
      std::__shared_weak_count::__release_weak(v792);
    }
  }
  if (*((_QWORD *)&v969 + 1))
  {
    *(_QWORD *)&v970 = *((_QWORD *)&v969 + 1);
    operator delete(*((void **)&v969 + 1));
  }
  if ((_QWORD)v968)
  {
    *((_QWORD *)&v968 + 1) = v968;
    operator delete((void *)v968);
  }
  if (v963)
    MEMORY[0x212BC6368](v963, 0x1000C8000313F17);
  if (v962)
    MEMORY[0x212BC6368](v962, 0x1000C8000313F17);
  if (v961)
    MEMORY[0x212BC6368](v961, 0x1000C8000313F17);
  if (v960)
    MEMORY[0x212BC6368](v960, 0x1000C8000313F17);
  if (v958)
  {
    v959 = v958;
    operator delete(v958);
  }
  sub_20E869418(v875);
  if (v922)
  {
    if (SHIBYTE(v921) < 0)
      operator delete((void *)v920);
  }
}

void sub_20E9CFF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,void *a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  uint64_t v48;

  if (a42 && a41 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a22);
  sub_20E869418((uint64_t)&a48);
  sub_20E915DB8((uint64_t)&STACK[0x2DC0]);
  if (*(_BYTE *)(v48 + 24))
  {
    if (*(char *)(v48 + 23) < 0)
      operator delete((void *)STACK[0x6030]);
  }
  sub_20E86665C((uint64_t)&a32);
  sub_20E937AF4((uint64_t)&STACK[0x6050]);
  _Unwind_Resume(a1);
}

void sub_20E9D08D0()
{
  JUMPOUT(0x20E9D08BCLL);
}

void sub_20E9D08D8()
{
  sub_20E869418((uint64_t)&STACK[0x2DC0]);
  JUMPOUT(0x20E9D08BCLL);
}

void sub_20E9D08EC()
{
  JUMPOUT(0x20E9D08BCLL);
}

void sub_20E9D08F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  sub_20E869418(a21);
  if (*(_BYTE *)(v21 + 72))
  {
    if (*(char *)(v21 + 71) < 0)
    {
      operator delete((void *)STACK[0x6060]);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20E9D08C8);
}

void sub_20E9D092C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5AC98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5AC98))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.applecv3d");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5AC90);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5AC98);
  }
  *a1 = qword_254A5AC90;
}

void sub_20E9D09C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5AC98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5AC98);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9D0A20()
{
  uint64_t result;
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  char v5;
  int v6;
  size_t v7;
  const char *v8;
  unsigned __int8 v9;
  const char *v10;
  size_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  size_t v20;
  NSObject *v21;
  _BYTE *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  os_log_t v28;
  _DWORD *v29;
  __int32 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  _BYTE *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int16 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;
  uint64_t v227;
  const char *__src;
  int v229;
  unint64_t v230;
  _BYTE *v231;
  _QWORD v232[3];
  int v233;
  const char *v234;
  int v235;
  const char *v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int32x2_t v242;
  __int16 v243;
  __int128 v244;
  uint64_t v245;
  char v246;
  char v247;
  _BYTE v248[272];
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  _BYTE v263[29];
  __int16 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  uint64_t v280;
  char v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  _BYTE v300[560];
  __int128 v301;
  uint64_t v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  _DWORD v313[68];
  _BYTE v314[541];
  __int128 v315;
  uint64_t v316;
  __int128 v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  uint64_t v343;
  __int128 v344;
  uint64_t v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  _OWORD v351[7];
  __int128 v352;
  uint64_t v353;
  _BYTE v354[296];
  _QWORD v355[95];
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  uint64_t v360;
  uint64_t v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int16 v368;
  _BYTE v369[432];
  _DWORD v370[2];
  uint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  int v379;
  char v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  _OWORD v387[2];
  __int128 v388;
  uint64_t v389;
  int v390;
  __int128 v391;
  uint64_t v392;
  __int128 v393;
  __int128 v394;
  uint64_t v395;
  __int128 v396;
  uint64_t v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;
  _OWORD v405[7];
  uint64_t v406;
  __int128 v407;
  _BYTE v408[313];
  __int128 v409;
  _OWORD v410[2];
  __int128 v411;
  uint64_t v412;
  __int128 v413;
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  char v417;
  int v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  uint64_t v424;
  _QWORD v425[126];
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  _OWORD v430[2];
  __int128 v431;
  uint64_t v432;
  __int128 v433;
  uint64_t v434;
  __int128 v435;
  uint64_t v436;
  __int128 v437;
  uint64_t v438;
  __int128 v439;
  uint64_t v440;
  __int16 v441;
  char v442;
  __int128 v443;
  uint64_t v444;
  __int128 v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  __int16 v449;
  __int128 v450;
  uint64_t v451;
  uint64_t v452;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  uint64_t v461;
  uint64_t v462;
  __int128 v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int16 v469;
  __int128 v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;
  __int128 v476;
  __int128 v477;
  uint64_t v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  __int16 v484;
  __int128 v485;
  __int128 v486;
  _OWORD v487[5];
  __int128 v488;
  uint64_t v489;
  uint64_t v490;
  __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int16 v497;
  char v498;
  _BYTE v499[288];
  __int128 v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  __int128 v504;
  uint64_t v505;
  __int128 v506;
  uint64_t v507;
  __int128 v508;
  char v509;
  __int128 v510;
  char v511;
  uint64_t v512;
  int v513;
  __int16 v514;
  _BYTE v515[24];
  char v516;
  __int128 v517;
  uint64_t v518;
  __int128 v519;
  uint64_t v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  __int128 v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  __int128 v534;
  uint64_t v535;
  __int128 v536;
  uint64_t v537;
  __int128 v538;
  __int128 v539;
  _OWORD v540[2];
  __int128 v541;
  uint64_t v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  uint64_t v546;
  __int128 v547;
  uint64_t v548;
  __int128 v549;
  uint64_t v550;
  __int128 v551;
  uint64_t v552;
  char v553;
  uint64_t v554;
  int v555;
  uint64_t v556;
  __int128 v557;
  uint64_t v558;
  __int128 v559;
  char v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  __int128 v567;
  __int128 v568;
  __int128 v569;
  __int128 v570;
  __int128 v571;
  __int128 v572;
  uint64_t v573;
  uint64_t v574;
  __int16 v575;
  __int128 v576;
  uint64_t v577;
  __int128 v578;
  uint64_t v579;
  __int128 v580;
  char v581;
  __int128 v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  __int128 v586;
  __int128 v587;
  _OWORD v588[2];
  __int128 v589;
  uint64_t v590;
  int v591;
  __int128 v592;
  uint64_t v593;
  __int128 v594;
  __int128 v595;
  uint64_t v596;
  __int128 v597;
  uint64_t v598;
  __int128 v599;
  __int128 v600;
  __int128 v601;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  __int128 v605;
  _OWORD v606[7];
  uint64_t v607;
  __int128 v608;
  _BYTE v609[313];
  __int128 v610;
  _OWORD v611[2];
  __int128 v612;
  uint64_t v613;
  __int128 v614;
  uint64_t v615;
  __int128 v616;
  uint64_t v617;
  char v618;
  int v619;
  __int128 v620;
  __int128 v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  _QWORD v630[2];
  __int128 v631;
  __int128 v632;
  __int128 v633;
  uint64_t v634;
  char v635;
  __int16 v636;
  __int128 v637;
  __int128 v638;
  __int128 v639;
  _QWORD v640[3];
  __int128 v641;
  __int128 v642;
  __int128 v643;
  __int128 v644;
  __int128 v645;
  __int128 v646;
  __int128 v647;
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  uint64_t v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  __int128 v656;
  uint64_t v657;
  __int128 v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  uint64_t v662;
  char v663;
  __int128 v664;
  uint64_t v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  __int128 v670;
  __int128 v671;
  __int128 v672;
  uint64_t v673;
  __int128 v674;
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  __int128 v683;
  __int128 v684;
  _BYTE v685[856];
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  uint64_t v690;
  uint64_t v691;
  __int128 v692;
  __int128 v693;
  __int128 v694;
  __int128 v695;
  __int128 v696;
  __int128 v697;
  __int128 v698;
  __int128 v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  _OWORD v709[6];
  uint64_t v710;
  uint64_t v711;
  int v712;
  __int128 v713;
  int v714;
  uint64_t v715;
  __int128 v716;
  int v717;
  uint64_t v718;
  uint64_t v719;
  int v720;
  uint64_t v721;
  char v722;
  __int128 v723;
  _QWORD v724[6];
  __int128 v725;
  _BYTE v726[48];
  __int128 v727;
  __int128 v728;
  __int128 v729;
  __int128 v730;
  __int128 v731;
  os_log_t v732;
  __int128 v733;
  __int128 v734;
  void *v735[2];
  unint64_t v736;
  char v737;
  uint64_t v738;

  result = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v738 = *MEMORY[0x24BDAC8D0];
  v3 = v1 + 11152;
  if (!result)
  {
    *v1 = 0;
    v1[13112] = 0;
    return result;
  }
  v4 = result;
  v242 = vdup_n_s32(0x140u);
  v243 = 0;
  LOBYTE(v244) = 0;
  v246 = 0;
  v247 = 0;
  sub_20EE7D5CC((uint64_t)v248);
  sub_20EE7EBDC((uint64_t)v248);
  v355[79] = 0x4014000000000000;
  v314[417] = 1;
  v313[62] = 4;
  v425[30] = 40;
  v425[32] = 0x3FE6666666666666;
  *(_QWORD *)&v351[0] = 0x3F1A36E2EB1C432DLL;
  *(int64x2_t *)((char *)v351 + 8) = vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
  BYTE5(v425[90]) = 1;
  *((_QWORD *)&v363 + 1) = 12;
  sub_20E8EC534((uint64_t)v685);
  LODWORD(v723) = 10;
  *(_QWORD *)((char *)&v723 + 4) = 0x4120000040400000;
  WORD6(v723) = 0;
  BYTE14(v723) = 0;
  memset(v724, 0, sizeof(v724));
  LODWORD(v725) = 0;
  *(_QWORD *)((char *)&v725 + 4) = 0x5A00000028;
  *(_QWORD *)v726 = 0x4024000000000000;
  *(_OWORD *)&v726[8] = xmmword_2102EF000;
  *(_OWORD *)&v726[24] = xmmword_2102EF010;
  *(_DWORD *)&v726[40] = 1028443341;
  *(_QWORD *)&v727 = 0x4049000000000000;
  DWORD2(v727) = 200;
  BYTE12(v727) = 1;
  *(_QWORD *)&v728 = 30;
  DWORD2(v728) = 20;
  *(_QWORD *)&v729 = 0x3F8EB851EB851EB8;
  *((_QWORD *)&v729 + 1) = 0x3FC893011F31982ELL;
  *(_QWORD *)&v730 = 0xF0000001ELL;
  DWORD2(v730) = 3;
  *(_QWORD *)&v731 = 0;
  *((_QWORD *)&v731 + 1) = 0x3F747AE147AE147BLL;
  sub_20E862C24((uint64_t)v248, (_QWORD *)(v4 + 8));
  memcpy(v685, (const void *)(v4 + 11432), 0x356uLL);
  v687 = *(_OWORD *)(v4 + 12304);
  v688 = *(_OWORD *)(v4 + 12320);
  v689 = *(_OWORD *)(v4 + 12336);
  v690 = *(_QWORD *)(v4 + 12352);
  v686 = *(_OWORD *)(v4 + 12288);
  if (v685 != (_BYTE *)(v4 + 11432))
    sub_20E86A1AC((uint64_t)&v691, *(char **)(v4 + 12360), *(char **)(v4 + 12368), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 12368) - *(_QWORD *)(v4 + 12360)) >> 3));
  v693 = *(_OWORD *)(v4 + 12384);
  v694 = *(_OWORD *)(v4 + 12400);
  v695 = *(_OWORD *)(v4 + 12416);
  v696 = *(_OWORD *)(v4 + 12432);
  v705 = *(_OWORD *)(v4 + 12576);
  v706 = *(_OWORD *)(v4 + 12592);
  v707 = *(_OWORD *)(v4 + 12608);
  v708 = *(_OWORD *)(v4 + 12624);
  v701 = *(_OWORD *)(v4 + 12512);
  v702 = *(_OWORD *)(v4 + 12528);
  v703 = *(_OWORD *)(v4 + 12544);
  v704 = *(_OWORD *)(v4 + 12560);
  v697 = *(_OWORD *)(v4 + 12448);
  v698 = *(_OWORD *)(v4 + 12464);
  v699 = *(_OWORD *)(v4 + 12480);
  v700 = *(_OWORD *)(v4 + 12496);
  sub_20E869F44((uint64_t)v709, v4 + 12640);
  v722 = *(_BYTE *)(v4 + 12848);
  *(_QWORD *)&v723 = *(_QWORD *)(v4 + 12856);
  *(_QWORD *)((char *)&v723 + 7) = *(_QWORD *)(v4 + 12863);
  v242 = *(int32x2_t *)v4;
  if ((v242.i32[0] - 10001) > 0xFFFFD952)
  {
    sub_20E9D092C(&v239);
    if (**(int **)(v239 + 56) > 3
      || (v6 = *(unsigned __int8 *)(v239 + 72), v230 = sub_20E8C31DC(v239, "OSLogSurrogateAppender", 1, 0), !v6)
      && !v230)
    {
LABEL_97:
      if (!*(_DWORD *)(v4 + 12880))
        LOBYTE(v243) = 1;
      v59 = v2 + 7984;
      v231 = v3;
      LODWORD(v725) = *(_DWORD *)(v4 + 12876);
      HIBYTE(v243) = *(_BYTE *)(v4 + 12892);
      BYTE13(v723) = HIBYTE(v243);
      *(int32x2_t *)v2 = v242;
      *((_WORD *)v2 + 4) = v243;
      v2[16] = 0;
      v2[40] = 0;
      if (v246)
      {
        *((_OWORD *)v2 + 1) = v244;
        *((_QWORD *)v2 + 4) = v245;
        v245 = 0;
        v244 = 0uLL;
        v2[40] = 1;
      }
      v60 = v2 + 8560;
      v2[48] = v247;
      memcpy(v2 + 56, v248, 0x10AuLL);
      v61 = v262;
      *(_OWORD *)(v2 + 520) = v261;
      *(_OWORD *)(v2 + 536) = v61;
      *(_OWORD *)(v2 + 552) = *(_OWORD *)v263;
      *(_OWORD *)(v2 + 565) = *(_OWORD *)&v263[13];
      v62 = v258;
      *(_OWORD *)(v2 + 456) = v257;
      *(_OWORD *)(v2 + 472) = v62;
      v63 = v260;
      *(_OWORD *)(v2 + 488) = v259;
      *(_OWORD *)(v2 + 504) = v63;
      v64 = v254;
      *(_OWORD *)(v2 + 392) = v253;
      *(_OWORD *)(v2 + 408) = v64;
      v65 = v256;
      *(_OWORD *)(v2 + 424) = v255;
      *(_OWORD *)(v2 + 440) = v65;
      v66 = v250;
      *(_OWORD *)(v2 + 328) = v249;
      *(_OWORD *)(v2 + 344) = v66;
      v67 = v252;
      *(_OWORD *)(v2 + 360) = v251;
      *(_OWORD *)(v2 + 376) = v67;
      *((_WORD *)v2 + 292) = v264;
      *((_OWORD *)v2 + 37) = v265;
      *((_QWORD *)v2 + 76) = v266;
      *((_QWORD *)v2 + 77) = v267;
      v267 = 0;
      v68 = v269;
      *((_OWORD *)v2 + 39) = v268;
      *((_OWORD *)v2 + 40) = v68;
      *((_QWORD *)v2 + 82) = v270;
      v270 = 0;
      v268 = 0u;
      v269 = 0u;
      v69 = v271;
      *((_QWORD *)v2 + 85) = v272;
      *(_OWORD *)(v2 + 664) = v69;
      v271 = 0u;
      v272 = 0;
      *((_DWORD *)v2 + 172) = v273;
      *((_QWORD *)v2 + 87) = v274;
      v274 = 0;
      v70 = v276;
      *((_OWORD *)v2 + 44) = v275;
      *((_OWORD *)v2 + 45) = v70;
      v71 = v277;
      v72 = v278;
      v73 = v279;
      *((_QWORD *)v2 + 98) = v280;
      *((_OWORD *)v2 + 47) = v72;
      *((_OWORD *)v2 + 48) = v73;
      *((_OWORD *)v2 + 46) = v71;
      v2[792] = v281;
      v74 = v283;
      *((_OWORD *)v2 + 50) = v282;
      *((_OWORD *)v2 + 51) = v74;
      v75 = v284;
      v76 = v285;
      v77 = v287;
      *((_OWORD *)v2 + 54) = v286;
      *((_OWORD *)v2 + 55) = v77;
      *((_OWORD *)v2 + 52) = v75;
      *((_OWORD *)v2 + 53) = v76;
      *((_OWORD *)v2 + 56) = v288;
      *((_QWORD *)v2 + 114) = v289;
      v275 = 0u;
      v288 = 0u;
      v289 = 0;
      *((_QWORD *)v2 + 115) = v290;
      v290 = 0;
      v78 = v292;
      *((_OWORD *)v2 + 58) = v291;
      *((_OWORD *)v2 + 59) = v78;
      *((_QWORD *)v2 + 120) = v293;
      v291 = 0u;
      v292 = 0u;
      v293 = 0;
      v79 = v295;
      *(_OWORD *)(v2 + 968) = v294;
      *(_OWORD *)(v2 + 984) = v79;
      v80 = v296;
      v81 = v297;
      v82 = v299;
      *(_OWORD *)(v2 + 1032) = v298;
      *(_OWORD *)(v2 + 1048) = v82;
      *(_OWORD *)(v2 + 1000) = v80;
      *(_OWORD *)(v2 + 1016) = v81;
      memcpy(v2 + 1064, v300, 0x230uLL);
      *(_OWORD *)(v2 + 1624) = v301;
      *((_QWORD *)v2 + 205) = v302;
      v301 = 0u;
      v302 = 0;
      *((_OWORD *)v2 + 103) = v303;
      *((_OWORD *)v2 + 104) = v304;
      *((_OWORD *)v2 + 105) = v305;
      *((_OWORD *)v2 + 109) = v309;
      *((_OWORD *)v2 + 110) = v310;
      *((_OWORD *)v2 + 111) = v311;
      *((_QWORD *)v2 + 224) = v312;
      *((_OWORD *)v2 + 106) = v306;
      *((_OWORD *)v2 + 107) = v307;
      *((_OWORD *)v2 + 108) = v308;
      memcpy(v2 + 1800, v313, 0x109uLL);
      memcpy(v2 + 2072, v314, 0x21DuLL);
      *(_OWORD *)(v2 + 2616) = v315;
      *((_QWORD *)v2 + 329) = v316;
      v315 = 0u;
      v316 = 0;
      *((_OWORD *)v2 + 165) = v317;
      *((_QWORD *)v2 + 332) = v318;
      v317 = 0u;
      v318 = 0;
      *(_OWORD *)(v2 + 2664) = v319;
      *((_QWORD *)v2 + 335) = v320;
      v319 = 0u;
      v320 = 0;
      v83 = v321;
      *((_OWORD *)v2 + 169) = v322;
      *((_OWORD *)v2 + 168) = v83;
      v84 = v323;
      v85 = v324;
      v86 = v325;
      *((_OWORD *)v2 + 173) = v326;
      *((_OWORD *)v2 + 172) = v86;
      *((_OWORD *)v2 + 171) = v85;
      *((_OWORD *)v2 + 170) = v84;
      v87 = v327;
      v88 = v328;
      v89 = v329;
      *((_OWORD *)v2 + 177) = v330;
      *((_OWORD *)v2 + 176) = v89;
      *((_OWORD *)v2 + 175) = v88;
      *((_OWORD *)v2 + 174) = v87;
      v90 = v331;
      v91 = v332;
      v92 = v333;
      *((_OWORD *)v2 + 181) = v334;
      *((_OWORD *)v2 + 180) = v92;
      *((_OWORD *)v2 + 179) = v91;
      *((_OWORD *)v2 + 178) = v90;
      *((_OWORD *)v2 + 185) = v338;
      *((_OWORD *)v2 + 186) = v339;
      *((_OWORD *)v2 + 187) = v340;
      *((_OWORD *)v2 + 188) = v341;
      *((_OWORD *)v2 + 182) = v335;
      *((_OWORD *)v2 + 183) = v336;
      *((_OWORD *)v2 + 184) = v337;
      *((_OWORD *)v2 + 189) = v342;
      *((_QWORD *)v2 + 380) = v343;
      v342 = 0u;
      v343 = 0;
      *(_OWORD *)(v2 + 3048) = v344;
      *((_QWORD *)v2 + 383) = v345;
      v344 = 0u;
      v345 = 0;
      *((_OWORD *)v2 + 192) = v346;
      *((_OWORD *)v2 + 193) = v347;
      *((_OWORD *)v2 + 194) = v348;
      *((_OWORD *)v2 + 195) = v349;
      *((_QWORD *)v2 + 392) = v350;
      v350 = 0;
      v349 = 0u;
      v93 = v351[0];
      v94 = v351[1];
      v95 = v351[3];
      *(_OWORD *)(v2 + 3176) = v351[2];
      *(_OWORD *)(v2 + 3160) = v94;
      *(_OWORD *)(v2 + 3144) = v93;
      v96 = v351[4];
      v97 = v351[5];
      *(_OWORD *)(v2 + 3240) = v351[6];
      *(_OWORD *)(v2 + 3224) = v97;
      *(_OWORD *)(v2 + 3208) = v96;
      *(_OWORD *)(v2 + 3192) = v95;
      v98 = v352;
      *((_QWORD *)v2 + 409) = v353;
      *(_OWORD *)(v2 + 3256) = v98;
      v352 = 0u;
      v353 = 0;
      memcpy(v2 + 3280, v354, 0x128uLL);
      memcpy(v2 + 3576, v355, 0x2F8uLL);
      *((_OWORD *)v2 + 271) = v356;
      *((_OWORD *)v2 + 272) = v357;
      *((_OWORD *)v2 + 273) = v358;
      *((_OWORD *)v2 + 274) = v359;
      *((_QWORD *)v2 + 550) = v360;
      v359 = 0uLL;
      v99 = v361;
      v361 = 0;
      v360 = 0;
      *((_QWORD *)v2 + 551) = v99;
      *((_OWORD *)v2 + 276) = v362;
      v362 = 0uLL;
      *((_OWORD *)v2 + 277) = v363;
      *((_WORD *)v2 + 2256) = v368;
      *((_OWORD *)v2 + 281) = v367;
      *((_OWORD *)v2 + 280) = v366;
      *((_OWORD *)v2 + 279) = v365;
      *((_OWORD *)v2 + 278) = v364;
      memcpy(v2 + 4520, v369, 0x1B0uLL);
      *((_DWORD *)v2 + 1238) = v370[0];
      *(_DWORD *)(v2 + 4955) = *(_DWORD *)((char *)v370 + 3);
      *((_QWORD *)v2 + 620) = v371;
      v100 = v2 + 4968;
      v101 = v372;
      *((_QWORD *)v2 + 621) = v372;
      v102 = v373;
      *((_QWORD *)v2 + 622) = v373;
      if (v102)
      {
        *(_QWORD *)(v101 + 16) = v100;
        v371 = &v372;
        v372 = 0;
        v373 = 0;
      }
      else
      {
        *((_QWORD *)v2 + 620) = v100;
      }
      *(_OWORD *)(v2 + 5000) = v375;
      *(_OWORD *)(v2 + 5016) = v376;
      *(_OWORD *)(v2 + 5032) = v377;
      *(_OWORD *)(v2 + 5048) = v378;
      *(_OWORD *)(v2 + 4984) = v374;
      *((_DWORD *)v2 + 1266) = v379;
      v2[5068] = v380;
      v103 = v381;
      v104 = v382;
      v105 = v383;
      *((_OWORD *)v2 + 320) = v384;
      *((_OWORD *)v2 + 319) = v105;
      *((_OWORD *)v2 + 318) = v104;
      *((_OWORD *)v2 + 317) = v103;
      v106 = v385;
      v107 = v386;
      v108 = v387[0];
      *(_OWORD *)(v2 + 5177) = *(_OWORD *)((char *)v387 + 9);
      *((_OWORD *)v2 + 323) = v108;
      *((_OWORD *)v2 + 322) = v107;
      *((_OWORD *)v2 + 321) = v106;
      *((_OWORD *)v2 + 325) = v388;
      *((_QWORD *)v2 + 652) = v389;
      v388 = 0uLL;
      v389 = 0;
      *((_DWORD *)v2 + 1306) = v390;
      *((_OWORD *)v2 + 327) = v391;
      *((_QWORD *)v2 + 656) = v392;
      v391 = 0uLL;
      v392 = 0;
      v109 = v393;
      v110 = v394;
      *((_QWORD *)v2 + 661) = v395;
      *(_OWORD *)(v2 + 5272) = v110;
      *(_OWORD *)(v2 + 5256) = v109;
      v111 = v396;
      *((_QWORD *)v2 + 664) = v397;
      *((_OWORD *)v2 + 331) = v111;
      v396 = 0uLL;
      v397 = 0;
      *(_OWORD *)(v2 + 5320) = v398;
      v112 = v399;
      v113 = v400;
      v114 = v401;
      *(_OWORD *)(v2 + 5384) = v402;
      *(_OWORD *)(v2 + 5368) = v114;
      *(_OWORD *)(v2 + 5352) = v113;
      *(_OWORD *)(v2 + 5336) = v112;
      v115 = v403;
      v116 = v404;
      v117 = v405[0];
      *(_OWORD *)(v2 + 5441) = *(_OWORD *)((char *)v405 + 9);
      *(_OWORD *)(v2 + 5432) = v117;
      *(_OWORD *)(v2 + 5416) = v116;
      *(_OWORD *)(v2 + 5400) = v115;
      *(_OWORD *)(v2 + 5480) = v405[3];
      *(_OWORD *)(v2 + 5496) = v405[4];
      *(_OWORD *)(v2 + 5512) = v405[5];
      *(_OWORD *)(v2 + 5528) = v405[6];
      *(_OWORD *)(v2 + 5464) = v405[2];
      *((_QWORD *)v2 + 693) = v406;
      *((_OWORD *)v2 + 347) = v407;
      v406 = 0;
      v407 = 0uLL;
      memcpy(v2 + 5568, v408, 0x139uLL);
      *((_OWORD *)v2 + 368) = v409;
      *((_OWORD *)v2 + 369) = v410[0];
      *(_OWORD *)(v2 + 5916) = *(_OWORD *)((char *)v410 + 12);
      *((_OWORD *)v2 + 371) = v411;
      *((_QWORD *)v2 + 744) = v412;
      v411 = 0uLL;
      v412 = 0;
      *(_OWORD *)(v2 + 5960) = v413;
      *((_QWORD *)v2 + 747) = v414;
      v118 = v415;
      *((_QWORD *)v2 + 750) = v416;
      *((_OWORD *)v2 + 374) = v118;
      v416 = 0;
      v415 = 0uLL;
      v2[6008] = v417;
      *((_DWORD *)v2 + 1504) = v418;
      *(_OWORD *)(v2 + 6024) = v419;
      *((_QWORD *)v2 + 763) = v424;
      *(_OWORD *)(v2 + 6088) = v423;
      *(_OWORD *)(v2 + 6072) = v422;
      *(_OWORD *)(v2 + 6056) = v421;
      *(_OWORD *)(v2 + 6040) = v420;
      memcpy(v2 + 6112, v425, 0x3E9uLL);
      *((_OWORD *)v2 + 447) = v428;
      *((_OWORD *)v2 + 448) = v429;
      *((_OWORD *)v2 + 449) = v430[0];
      *(_OWORD *)(v2 + 7196) = *(_OWORD *)((char *)v430 + 12);
      *((_OWORD *)v2 + 445) = v426;
      *((_OWORD *)v2 + 446) = v427;
      *((_OWORD *)v2 + 451) = v431;
      *((_QWORD *)v2 + 904) = v432;
      v432 = 0;
      v431 = 0uLL;
      *(_OWORD *)(v2 + 7240) = v433;
      *((_QWORD *)v2 + 907) = v434;
      v433 = 0uLL;
      v434 = 0;
      *((_OWORD *)v2 + 454) = v435;
      *((_QWORD *)v2 + 910) = v436;
      v435 = 0uLL;
      v436 = 0;
      *((_QWORD *)v2 + 913) = v438;
      *(_OWORD *)(v2 + 7288) = v437;
      v437 = 0uLL;
      v438 = 0;
      v119 = v439;
      *((_QWORD *)v2 + 916) = v440;
      *((_OWORD *)v2 + 457) = v119;
      v439 = 0uLL;
      v440 = 0;
      v120 = v441;
      v2[7338] = v442;
      *((_WORD *)v2 + 3668) = v120;
      v121 = v443;
      *((_QWORD *)v2 + 920) = v444;
      *((_OWORD *)v2 + 459) = v121;
      v443 = 0uLL;
      v444 = 0;
      v122 = v445;
      *((_QWORD *)v2 + 923) = v446;
      *(_OWORD *)(v2 + 7368) = v122;
      v445 = 0uLL;
      v446 = 0;
      v123 = v447;
      *((_QWORD *)v2 + 926) = v448;
      *((_OWORD *)v2 + 462) = v123;
      v447 = 0uLL;
      v448 = 0;
      *((_WORD *)v2 + 3708) = v449;
      *((_OWORD *)v2 + 464) = v450;
      *((_QWORD *)v2 + 930) = v451;
      v450 = 0uLL;
      v451 = 0;
      *((_QWORD *)v2 + 931) = v452;
      *((_OWORD *)v2 + 466) = v453;
      v452 = 0;
      v453 = 0uLL;
      v124 = v454;
      v125 = v455;
      *((_OWORD *)v2 + 469) = v456;
      *((_OWORD *)v2 + 468) = v125;
      *((_OWORD *)v2 + 467) = v124;
      v126 = v457;
      v127 = v458;
      *((_OWORD *)v2 + 472) = v459;
      *((_OWORD *)v2 + 471) = v127;
      *((_OWORD *)v2 + 470) = v126;
      *((_OWORD *)v2 + 473) = v460;
      *((_QWORD *)v2 + 948) = v461;
      v460 = 0uLL;
      v461 = 0;
      *((_QWORD *)v2 + 949) = v462;
      *((_OWORD *)v2 + 475) = v463;
      v462 = 0;
      v463 = 0uLL;
      v128 = v464;
      *((_OWORD *)v2 + 477) = v465;
      *((_OWORD *)v2 + 476) = v128;
      v129 = v466;
      v130 = v467;
      v131 = v468;
      *((_WORD *)v2 + 3848) = v469;
      *((_OWORD *)v2 + 480) = v131;
      *((_OWORD *)v2 + 479) = v130;
      *((_OWORD *)v2 + 478) = v129;
      v132 = v470;
      *(_OWORD *)(v2 + 7720) = v471;
      *(_OWORD *)(v2 + 7704) = v132;
      v133 = v472;
      v134 = v473;
      *(_OWORD *)(v2 + 7768) = v474;
      *(_OWORD *)(v2 + 7752) = v134;
      *(_OWORD *)(v2 + 7736) = v133;
      *((_QWORD *)v2 + 973) = v475;
      *((_OWORD *)v2 + 487) = v476;
      v475 = 0;
      v476 = 0uLL;
      *((_OWORD *)v2 + 488) = v477;
      *((_QWORD *)v2 + 978) = v478;
      v477 = 0uLL;
      v478 = 0;
      v135 = v479;
      *(_OWORD *)(v2 + 7848) = v480;
      *(_OWORD *)(v2 + 7832) = v135;
      v136 = v481;
      v137 = v482;
      v138 = v483;
      *((_WORD *)v2 + 3956) = v484;
      *(_OWORD *)(v2 + 7896) = v138;
      *(_OWORD *)(v2 + 7880) = v137;
      *(_OWORD *)(v2 + 7864) = v136;
      v139 = v485;
      v140 = v486;
      v141 = v487[0];
      *(_OWORD *)(v2 + 7964) = *(_OWORD *)((char *)v487 + 12);
      *((_OWORD *)v2 + 497) = v141;
      *((_OWORD *)v2 + 496) = v140;
      *((_OWORD *)v2 + 495) = v139;
      *v59 = 0;
      v2[8168] = 0;
      if (v498)
      {
        v142 = v487[3];
        *(_OWORD *)v59 = v487[2];
        *((_OWORD *)v2 + 500) = v142;
        *((_OWORD *)v2 + 501) = v487[4];
        *((_OWORD *)v2 + 502) = v488;
        *((_QWORD *)v2 + 1006) = v489;
        v488 = 0uLL;
        v143 = v490;
        v490 = 0;
        v489 = 0;
        *((_QWORD *)v2 + 1007) = v143;
        *((_OWORD *)v2 + 504) = v491;
        v491 = 0uLL;
        v144 = v492;
        *((_OWORD *)v2 + 506) = v493;
        *((_OWORD *)v2 + 505) = v144;
        v145 = v494;
        v146 = v495;
        v147 = v496;
        *((_WORD *)v2 + 4080) = v497;
        *((_OWORD *)v2 + 509) = v147;
        *((_OWORD *)v2 + 508) = v146;
        *((_OWORD *)v2 + 507) = v145;
        v2[8168] = 1;
      }
      v148 = v2 + 10712;
      memcpy(v2 + 8176, v499, 0x120uLL);
      *((_OWORD *)v2 + 529) = v500;
      *((_QWORD *)v2 + 1060) = v501;
      v500 = 0u;
      v501 = 0;
      *(_OWORD *)(v2 + 8488) = v502;
      *((_QWORD *)v2 + 1063) = v503;
      v502 = 0u;
      v503 = 0;
      *((_OWORD *)v2 + 532) = v504;
      *((_QWORD *)v2 + 1066) = v505;
      v505 = 0;
      v504 = 0u;
      v149 = v506;
      *((_QWORD *)v2 + 1069) = v507;
      *(_OWORD *)(v2 + 8536) = v149;
      v506 = 0u;
      v507 = 0;
      *v60 = 0;
      v2[8576] = 0;
      if (v509)
      {
        *(_OWORD *)v60 = v508;
        v508 = 0uLL;
        v2[8576] = 1;
      }
      v2[8584] = 0;
      v2[8600] = 0;
      if (v511)
      {
        *(_OWORD *)(v2 + 8584) = v510;
        v510 = 0uLL;
        v2[8600] = 1;
      }
      *((_QWORD *)v2 + 1076) = v512;
      *((_DWORD *)v2 + 2154) = v513;
      *((_WORD *)v2 + 4312) = v514;
      *((_QWORD *)v2 + 1081) = *(_QWORD *)&v515[16];
      *(_OWORD *)(v2 + 8632) = *(_OWORD *)v515;
      memset(v515, 0, sizeof(v515));
      v2[8656] = v516;
      *((_QWORD *)v2 + 1085) = v518;
      *(_OWORD *)(v2 + 8664) = v517;
      v517 = 0u;
      v518 = 0;
      v150 = v519;
      *((_QWORD *)v2 + 1088) = v520;
      *((_OWORD *)v2 + 543) = v150;
      *(_OWORD *)(v2 + 8712) = v521;
      v151 = v522;
      v152 = v523;
      v153 = v524;
      *(_OWORD *)(v2 + 8776) = v525;
      *(_OWORD *)(v2 + 8760) = v153;
      *(_OWORD *)(v2 + 8744) = v152;
      *(_OWORD *)(v2 + 8728) = v151;
      v154 = v526;
      v155 = v527;
      v156 = v528;
      *(_OWORD *)(v2 + 8840) = v529;
      *(_OWORD *)(v2 + 8824) = v156;
      *(_OWORD *)(v2 + 8808) = v155;
      *(_OWORD *)(v2 + 8792) = v154;
      v157 = v530;
      v158 = v531;
      v159 = v532;
      *(_OWORD *)(v2 + 8904) = v533;
      *(_OWORD *)(v2 + 8888) = v159;
      *(_OWORD *)(v2 + 8872) = v158;
      *(_OWORD *)(v2 + 8856) = v157;
      *(_OWORD *)(v2 + 8920) = v534;
      *((_QWORD *)v2 + 1117) = v535;
      v534 = 0u;
      v160 = v536;
      *(_QWORD *)&v536 = 0;
      v535 = 0;
      *((_OWORD *)v2 + 559) = v160;
      *((_QWORD *)v2 + 1120) = v537;
      *((_QWORD *)&v536 + 1) = 0;
      v537 = 0;
      *(_OWORD *)(v2 + 9009) = *(_OWORD *)((char *)v540 + 9);
      *(_OWORD *)(v2 + 9000) = v540[0];
      *(_OWORD *)(v2 + 8984) = v539;
      *(_OWORD *)(v2 + 8968) = v538;
      *(_OWORD *)(v2 + 9032) = v541;
      *((_QWORD *)v2 + 1131) = v542;
      v541 = 0uLL;
      v542 = 0;
      *((_OWORD *)v2 + 566) = v543;
      *((_OWORD *)v2 + 567) = v544;
      *((_OWORD *)v2 + 568) = v545;
      *((_QWORD *)v2 + 1138) = v546;
      *((_QWORD *)v2 + 1141) = v548;
      *(_OWORD *)(v2 + 9112) = v547;
      *((_QWORD *)v2 + 1144) = v550;
      *((_OWORD *)v2 + 571) = v549;
      *((_QWORD *)v2 + 1147) = v552;
      *(_OWORD *)(v2 + 9160) = v551;
      v551 = 0uLL;
      v552 = 0;
      v2[9184] = v553;
      *((_DWORD *)v2 + 2300) = v555;
      *((_QWORD *)v2 + 1149) = v554;
      *((_QWORD *)v2 + 1151) = v556;
      *((_OWORD *)v2 + 576) = v557;
      v556 = 0;
      v557 = 0uLL;
      *((_QWORD *)v2 + 1154) = v558;
      v161 = v559;
      v2[9256] = v560;
      *(_OWORD *)(v2 + 9240) = v161;
      v162 = v561;
      v163 = v562;
      *((_OWORD *)v2 + 581) = v563;
      *((_OWORD *)v2 + 580) = v163;
      *((_OWORD *)v2 + 579) = v162;
      v164 = v564;
      v165 = v565;
      v166 = v566;
      *((_OWORD *)v2 + 585) = v567;
      *((_OWORD *)v2 + 584) = v166;
      *((_OWORD *)v2 + 583) = v165;
      *((_OWORD *)v2 + 582) = v164;
      v167 = v568;
      v168 = v569;
      v169 = v570;
      *((_OWORD *)v2 + 589) = v571;
      *((_OWORD *)v2 + 588) = v169;
      *((_OWORD *)v2 + 587) = v168;
      *((_OWORD *)v2 + 586) = v167;
      *((_OWORD *)v2 + 590) = v572;
      *((_QWORD *)v2 + 1182) = v573;
      v572 = 0uLL;
      v573 = 0;
      *((_QWORD *)v2 + 1183) = v574;
      *((_WORD *)v2 + 4736) = v575;
      *(_OWORD *)(v2 + 9480) = v576;
      *((_QWORD *)v2 + 1187) = v577;
      v576 = 0uLL;
      v577 = 0;
      v170 = v578;
      *((_QWORD *)v2 + 1190) = v579;
      *((_OWORD *)v2 + 594) = v170;
      v171 = v580;
      v2[9544] = v581;
      *(_OWORD *)(v2 + 9528) = v171;
      v172 = v582;
      v173 = v583;
      v174 = v584;
      *((_OWORD *)v2 + 600) = v585;
      *((_OWORD *)v2 + 599) = v174;
      *((_OWORD *)v2 + 598) = v173;
      *((_OWORD *)v2 + 597) = v172;
      v175 = v586;
      v176 = v587;
      v177 = v588[0];
      *(_OWORD *)(v2 + 9657) = *(_OWORD *)((char *)v588 + 9);
      *((_OWORD *)v2 + 603) = v177;
      *((_OWORD *)v2 + 602) = v176;
      *((_OWORD *)v2 + 601) = v175;
      *((_OWORD *)v2 + 605) = v589;
      *((_QWORD *)v2 + 1212) = v590;
      v589 = 0uLL;
      v590 = 0;
      *((_DWORD *)v2 + 2426) = v591;
      *((_OWORD *)v2 + 607) = v592;
      *((_QWORD *)v2 + 1216) = v593;
      v592 = 0uLL;
      v593 = 0;
      v178 = v594;
      v179 = v595;
      *((_QWORD *)v2 + 1221) = v596;
      *(_OWORD *)(v2 + 9752) = v179;
      *(_OWORD *)(v2 + 9736) = v178;
      v180 = v597;
      *((_QWORD *)v2 + 1224) = v598;
      *((_OWORD *)v2 + 611) = v180;
      v597 = 0uLL;
      v598 = 0;
      *(_OWORD *)(v2 + 9800) = v599;
      v181 = v600;
      v182 = v601;
      v183 = v602;
      *(_OWORD *)(v2 + 9864) = v603;
      *(_OWORD *)(v2 + 9848) = v183;
      *(_OWORD *)(v2 + 9832) = v182;
      *(_OWORD *)(v2 + 9816) = v181;
      v184 = v604;
      v185 = v605;
      v186 = v606[0];
      *(_OWORD *)(v2 + 9921) = *(_OWORD *)((char *)v606 + 9);
      *(_OWORD *)(v2 + 9912) = v186;
      *(_OWORD *)(v2 + 9896) = v185;
      *(_OWORD *)(v2 + 9880) = v184;
      *(_OWORD *)(v2 + 9960) = v606[3];
      *(_OWORD *)(v2 + 9976) = v606[4];
      *(_OWORD *)(v2 + 9992) = v606[5];
      *(_OWORD *)(v2 + 10008) = v606[6];
      *(_OWORD *)(v2 + 9944) = v606[2];
      *((_QWORD *)v2 + 1253) = v607;
      *((_OWORD *)v2 + 627) = v608;
      v608 = 0uLL;
      v607 = 0;
      memcpy(v2 + 10048, v609, 0x139uLL);
      v187 = v611[0];
      *((_OWORD *)v2 + 648) = v610;
      *((_OWORD *)v2 + 649) = v187;
      *(_OWORD *)(v2 + 10396) = *(_OWORD *)((char *)v611 + 12);
      *((_OWORD *)v2 + 651) = v612;
      *((_QWORD *)v2 + 1304) = v613;
      v612 = 0uLL;
      v613 = 0;
      *(_OWORD *)(v2 + 10440) = v614;
      *((_QWORD *)v2 + 1307) = v615;
      v188 = v616;
      *((_QWORD *)v2 + 1310) = v617;
      *((_OWORD *)v2 + 654) = v188;
      v616 = 0uLL;
      v617 = 0;
      v2[10488] = v618;
      *((_DWORD *)v2 + 2624) = v619;
      *(_OWORD *)(v2 + 10600) = v626;
      *(_OWORD *)(v2 + 10616) = v627;
      *(_OWORD *)(v2 + 10632) = v628;
      *(_OWORD *)(v2 + 10648) = v629;
      *(_OWORD *)(v2 + 10536) = v622;
      *(_OWORD *)(v2 + 10552) = v623;
      *(_OWORD *)(v2 + 10568) = v624;
      *(_OWORD *)(v2 + 10584) = v625;
      *(_OWORD *)(v2 + 10504) = v620;
      *(_OWORD *)(v2 + 10520) = v621;
      *((_QWORD *)v2 + 1333) = v630[0];
      *(_DWORD *)(v2 + 10671) = *(_DWORD *)((char *)v630 + 7);
      *(_OWORD *)(v2 + 10680) = v631;
      *(_OWORD *)(v2 + 10696) = v632;
      *v148 = 0;
      v2[10736] = 0;
      if (v635)
      {
        *((_QWORD *)v2 + 1341) = v634;
        *(_OWORD *)v148 = v633;
        v634 = 0;
        v633 = 0uLL;
        v2[10736] = 1;
      }
      *((_WORD *)v2 + 5372) = v636;
      *((_OWORD *)v2 + 672) = v637;
      *((_QWORD *)v2 + 1346) = v638;
      v637 = 0u;
      v189 = *((_QWORD *)&v638 + 1);
      v638 = 0u;
      *((_QWORD *)v2 + 1347) = v189;
      *((_OWORD *)v2 + 674) = v639;
      v639 = 0uLL;
      *((_QWORD *)v2 + 1350) = v640[0];
      *(_QWORD *)(v2 + 10805) = *(_QWORD *)((char *)v640 + 5);
      *((_QWORD *)v2 + 1352) = v640[2];
      v190 = v641;
      v191 = v642;
      v192 = v643;
      *(_OWORD *)(v2 + 10872) = v644;
      *(_OWORD *)(v2 + 10856) = v192;
      *(_OWORD *)(v2 + 10840) = v191;
      *(_OWORD *)(v2 + 10824) = v190;
      v193 = v645;
      v194 = v646;
      v195 = v647;
      *(_OWORD *)(v2 + 10936) = v648;
      *(_OWORD *)(v2 + 10920) = v195;
      *(_OWORD *)(v2 + 10904) = v194;
      *(_OWORD *)(v2 + 10888) = v193;
      v196 = v649;
      v197 = v650;
      v198 = v651;
      *((_QWORD *)v2 + 1375) = v652;
      *(_OWORD *)(v2 + 10984) = v198;
      *(_OWORD *)(v2 + 10968) = v197;
      *(_OWORD *)(v2 + 10952) = v196;
      *((_OWORD *)v2 + 688) = v653;
      *((_OWORD *)v2 + 689) = v654;
      *((_OWORD *)v2 + 690) = v655;
      *((_OWORD *)v2 + 691) = v656;
      *((_QWORD *)v2 + 1384) = v657;
      *(_OWORD *)(v2 + 11096) = v659;
      *(_OWORD *)(v2 + 11112) = v660;
      *(_OWORD *)(v2 + 11128) = v661;
      *((_QWORD *)v2 + 1393) = v662;
      *(_OWORD *)(v2 + 11080) = v658;
      v3 = v231;
      *v231 = v663;
      *(_OWORD *)(v2 + 11160) = v664;
      *((_QWORD *)v2 + 1397) = v665;
      v664 = 0uLL;
      v665 = 0;
      *((_OWORD *)v2 + 701) = v668;
      *((_OWORD *)v2 + 699) = v666;
      *((_OWORD *)v2 + 700) = v667;
      *((_OWORD *)v2 + 702) = v669;
      v199 = v670;
      v200 = v671;
      v201 = v672;
      *((_QWORD *)v2 + 1412) = v673;
      *((_OWORD *)v2 + 705) = v201;
      *((_OWORD *)v2 + 704) = v200;
      *((_OWORD *)v2 + 703) = v199;
      *(_OWORD *)(v2 + 11304) = v674;
      *(_OWORD *)(v2 + 11320) = v675;
      *(_OWORD *)(v2 + 11400) = v680;
      *(_OWORD *)(v2 + 11384) = v679;
      *(_OWORD *)(v2 + 11368) = v678;
      *(_OWORD *)(v2 + 11352) = v677;
      *(_OWORD *)(v2 + 11464) = v684;
      *(_OWORD *)(v2 + 11448) = v683;
      *(_OWORD *)(v2 + 11432) = v682;
      *(_OWORD *)(v2 + 11416) = v681;
      *(_OWORD *)(v2 + 11336) = v676;
      memcpy(v2 + 11480, v685, 0x356uLL);
      v202 = v686;
      *((_OWORD *)v2 + 772) = v687;
      v203 = v689;
      *((_OWORD *)v2 + 773) = v688;
      *((_OWORD *)v2 + 774) = v203;
      *((_QWORD *)v2 + 1550) = v690;
      *((_OWORD *)v2 + 771) = v202;
      *((_QWORD *)v2 + 1551) = v691;
      *((_OWORD *)v2 + 776) = v692;
      v691 = 0;
      v692 = 0uLL;
      v204 = v693;
      v205 = v694;
      v206 = v695;
      *((_OWORD *)v2 + 780) = v696;
      *((_OWORD *)v2 + 779) = v206;
      *((_OWORD *)v2 + 778) = v205;
      *((_OWORD *)v2 + 777) = v204;
      v207 = v706;
      *((_OWORD *)v2 + 789) = v705;
      *((_OWORD *)v2 + 790) = v207;
      v208 = v708;
      *((_OWORD *)v2 + 791) = v707;
      *((_OWORD *)v2 + 792) = v208;
      v209 = v702;
      *((_OWORD *)v2 + 785) = v701;
      *((_OWORD *)v2 + 786) = v209;
      v210 = v704;
      *((_OWORD *)v2 + 787) = v703;
      *((_OWORD *)v2 + 788) = v210;
      v211 = v698;
      *((_OWORD *)v2 + 781) = v697;
      *((_OWORD *)v2 + 782) = v211;
      v212 = v700;
      *((_OWORD *)v2 + 783) = v699;
      *((_OWORD *)v2 + 784) = v212;
      v213 = v709[3];
      *((_OWORD *)v2 + 795) = v709[2];
      *((_OWORD *)v2 + 796) = v213;
      v214 = v709[5];
      *((_OWORD *)v2 + 797) = v709[4];
      *((_OWORD *)v2 + 798) = v214;
      v215 = v709[1];
      *((_OWORD *)v2 + 793) = v709[0];
      *((_OWORD *)v2 + 794) = v215;
      *((_QWORD *)v2 + 1598) = v710;
      v216 = v711;
      v711 = 0;
      v710 = 0;
      *((_QWORD *)v2 + 1599) = v216;
      *((_DWORD *)v2 + 3200) = v712;
      v712 = 0;
      *((_QWORD *)v2 + 1601) = v713;
      v217 = *((_QWORD *)&v713 + 1);
      v713 = 0u;
      *((_QWORD *)v2 + 1602) = v217;
      *((_DWORD *)v2 + 3206) = v714;
      v714 = 0;
      *((_QWORD *)v2 + 1604) = v715;
      *((_QWORD *)v2 + 1605) = v716;
      v218 = *((_QWORD *)&v716 + 1);
      v716 = 0u;
      *((_QWORD *)v2 + 1606) = v218;
      *((_DWORD *)v2 + 3214) = v717;
      v717 = 0;
      *((_QWORD *)v2 + 1608) = v718;
      v718 = 0;
      *((_QWORD *)v2 + 1609) = v719;
      v719 = 0;
      *((_DWORD *)v2 + 3220) = v720;
      v720 = 0;
      *((_QWORD *)v2 + 1611) = v721;
      LOBYTE(v218) = v722;
      *(_OWORD *)(v2 + 12904) = v723;
      v231[1744] = v218;
      *((_QWORD *)v2 + 1615) = v724[0];
      *((_OWORD *)v2 + 808) = *(_OWORD *)&v724[1];
      memset(v724, 0, 24);
      *((_OWORD *)v2 + 809) = *(_OWORD *)&v724[3];
      *((_QWORD *)v2 + 1620) = v724[5];
      memset(&v724[3], 0, 24);
      v219 = v725;
      v220 = *(_OWORD *)v726;
      v221 = *(_OWORD *)&v726[32];
      *(_OWORD *)(v2 + 13000) = *(_OWORD *)&v726[16];
      *(_OWORD *)(v2 + 13016) = v221;
      *(_OWORD *)(v2 + 12968) = v219;
      *(_OWORD *)(v2 + 12984) = v220;
      v222 = v727;
      v223 = v728;
      v224 = v729;
      v225 = v731;
      *(_OWORD *)(v2 + 13080) = v730;
      *(_OWORD *)(v2 + 13096) = v225;
      *(_OWORD *)(v2 + 13048) = v223;
      *(_OWORD *)(v2 + 13064) = v224;
      v5 = 1;
      *(_OWORD *)(v2 + 13032) = v222;
      goto LABEL_113;
    }
    v229 = v6;
    v232[0] = &v239;
    v232[1] = std::chrono::steady_clock::now().__d_.__rep_;
    v232[2] = std::chrono::system_clock::now().__d_.__rep_;
    v233 = 3;
    v234 = "unknown file";
    v235 = 440;
    v237 = 0;
    v238 = 0;
    v236 = "unknown function";
    v227 = v239;
    if (*(char *)(v239 + 39) < 0)
    {
      v8 = *(const char **)(v239 + 16);
      v7 = *(_QWORD *)(v239 + 24);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v239 + 39);
      v8 = (const char *)(v239 + 16);
    }
    v226 = v239 + 16;
    v9 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)&v732);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)&v732);
      if ((_BYTE)v734 && SHIBYTE(v733) < 0)
        operator delete(v732);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v10 = byte_254A4A4F8;
    else
      v10 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v11 = byte_254A4A4F8[23];
    else
      v11 = *(_QWORD *)&byte_254A4A4F8[8];
    __src = v8;
    v732 = os_log_create(v10, v8);
    v12 = &v733;
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v11 >= 0x17)
    {
      v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v13 = v11 | 7;
      v14 = v13 + 1;
      v12 = (__int128 *)operator new(v13 + 1);
      *((_QWORD *)&v733 + 1) = v11;
      *(_QWORD *)&v734 = v14 | 0x8000000000000000;
      *(_QWORD *)&v733 = v12;
      v3 = v2 + 11152;
    }
    else
    {
      BYTE7(v734) = v11;
      if (!v11)
      {
LABEL_28:
        *((_BYTE *)v12 + v11) = 0;
        BYTE8(v734) = 1;
        v15 = v735;
        if (v7 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v7 >= 0x17)
        {
          v16 = v3;
          v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v17 = v7 | 7;
          v18 = v17 + 1;
          v15 = (void **)operator new(v17 + 1);
          v735[1] = (void *)v7;
          v736 = v18 | 0x8000000000000000;
          v735[0] = v15;
          v3 = v16;
        }
        else
        {
          HIBYTE(v736) = v7;
          if (!v7)
            goto LABEL_36;
        }
        memmove(v15, __src, v7);
LABEL_36:
        *((_BYTE *)v15 + v7) = 0;
        v737 = 1;
        v19 = v732;
        if (SHIBYTE(v736) < 0)
          operator delete(v735[0]);
        if (BYTE8(v734) && SBYTE7(v734) < 0)
          operator delete((void *)v733);
        if (v732)
          os_release(v732);
        if (v230 && *(_QWORD *)(v230 + 24))
        {
          v20 = _os_log_pack_size();
          v21 = operator new(v20, (std::align_val_t)8uLL);
          v22 = v3;
          v23 = (std::__shared_weak_count *)operator new();
          v24 = v23;
          v23->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v23->__shared_weak_owners_ = 0;
          v23[1].__vftable = (std::__shared_weak_count_vtbl *)v21;
          v732 = v21;
          *(_QWORD *)&v733 = v21;
          *((_QWORD *)&v733 + 1) = v23;
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
          v734 = 0uLL;
          v735[0] = 0;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v24);
          }
          v28 = v732;
          v29 = (_DWORD *)_os_log_pack_fill();
          v30 = v242.i32[0];
          *v29 = 67109120;
          v29[1] = v30;
          v31 = operator new();
          v32 = *(unsigned __int8 *)(v227 + 39);
          v33 = v226;
          if ((v32 & 0x80u) != 0)
          {
            v33 = *(_QWORD *)(v227 + 16);
            v32 = *(_QWORD *)(v227 + 24);
          }
          *(_QWORD *)v31 = v28;
          *(_OWORD *)(v31 + 8) = v733;
          v733 = 0uLL;
          *(_OWORD *)(v31 + 24) = v734;
          v734 = 0uLL;
          *(_QWORD *)(v31 + 40) = v33;
          *(_QWORD *)(v31 + 48) = v32;
          *(_BYTE *)(v31 + 56) = 1;
          v240 = 0;
          v241 = v31;
          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v230 + 24) + 40))(*(_QWORD *)(v230 + 24), &v241);
          v34 = v241;
          v241 = 0;
          if (v34)
          {
            v35 = *(std::__shared_weak_count **)(v34 + 32);
            if (v35)
            {
              v36 = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            v38 = *(std::__shared_weak_count **)(v34 + 16);
            if (v38)
            {
              v39 = (unint64_t *)&v38->__shared_owners_;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            MEMORY[0x212BC6398](v34, 0x10F0C40B62ED6C6);
            v41 = v240;
            v240 = 0;
            if (v41)
            {
              v42 = *(std::__shared_weak_count **)(v41 + 32);
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldaxr(v43);
                while (__stlxr(v44 - 1, v43));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                  std::__shared_weak_count::__release_weak(v42);
                }
              }
              v45 = *(std::__shared_weak_count **)(v41 + 16);
              if (v45)
              {
                v46 = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldaxr(v46);
                while (__stlxr(v47 - 1, v46));
                if (!v47)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
              MEMORY[0x212BC6398](v41, 0x10F0C40B62ED6C6);
            }
          }
          v48 = (std::__shared_weak_count *)*((_QWORD *)&v734 + 1);
          if (*((_QWORD *)&v734 + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v734 + 1) + 8);
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v51 = (std::__shared_weak_count *)*((_QWORD *)&v733 + 1);
          if (*((_QWORD *)&v733 + 1))
          {
            v52 = (unint64_t *)(*((_QWORD *)&v733 + 1) + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v3 = v22;
        }
        else
        {
          os_log_type_enabled(v19, OS_LOG_TYPE_INFO);
          LODWORD(v732) = 67109120;
          HIDWORD(v732) = v242.i32[0];
          v54 = (void *)_os_log_send_and_compose_impl();
          if (v54)
            free(v54);
        }
        if (v229)
        {
          sub_20E8C003C((uint64_t)v232, "Changing the image width to %d", v242.i32[0]);
          sub_20E863570((uint64_t)v232);
        }
        v55 = v3;
        sub_20E863570((uint64_t)v232);
        v56 = v238;
        if (v238)
        {
          v57 = (unint64_t *)&v238->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v3 = v55;
        goto LABEL_97;
      }
    }
    memmove(v12, v10, v11);
    goto LABEL_28;
  }
  v5 = 0;
  *v2 = 0;
LABEL_113:
  v3[1960] = v5;
  return sub_20E937AF4((uint64_t)&v242);
}

void sub_20E9D2F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (*(_BYTE *)(v34 - 152))
  {
    if (*(char *)(v34 - 153) < 0)
      operator delete(*(void **)(v34 - 176));
  }
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a22);
  sub_20E937AF4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_20E9D3080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_20E937AF4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_20E9D3094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_20E937AF4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_20E9D30A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  uint64_t v42;

  sub_20E869418(v42);
  if (a42)
  {
    if (a41 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20E9D30E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_20E937AF4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_20E9D30F4(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20E9D3484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D34A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D34BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E9D34E0(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20E9D3870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D3894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D38A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E9D38CC(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type)
{
  size_t v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v7 = _os_log_pack_size();
    v8 = (std::__shared_weak_count_vtbl *)operator new(v7, (std::align_val_t)8uLL);
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v9;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = v8;
    *(_QWORD *)&v25 = v8;
    *((_QWORD *)&v25 + 1) = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    *(_WORD *)_os_log_pack_fill() = 0;
    v14 = operator new();
    v15 = *((unsigned __int8 *)a2 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
    if ((v15 & 0x80u) != 0)
      v15 = a2[1];
    *(_QWORD *)v14 = v8;
    *(_OWORD *)(v14 + 8) = v25;
    *(_OWORD *)(v14 + 24) = 0uLL;
    *(_QWORD *)(v14 + 40) = v16;
    *(_QWORD *)(v14 + 48) = v15;
    *(_BYTE *)(v14 + 56) = type;
    v26 = v14;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v26);
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(v17 + 32);
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v21 = *(std::__shared_weak_count **)(v17 + 16);
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      MEMORY[0x212BC6398](v17, 0x10F0C40B62ED6C6);
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v24 = (void *)_os_log_send_and_compose_impl();
    if (v24)
      free(v24);
  }
}

void sub_20E9D3C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va2);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D3C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D3C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E9D3CB8(uint64_t a1, uint64_t *a2, os_log_t oslog, os_log_type_t type, int *a5)
{
  size_t v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v9 = _os_log_pack_size();
    v10 = (std::__shared_weak_count_vtbl *)operator new(v9, (std::align_val_t)8uLL);
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v11;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v10;
    v38 = v10;
    *(_QWORD *)&v39 = v10;
    *((_QWORD *)&v39 + 1) = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v40 = 0uLL;
    v41 = 0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v12);
    }
    v16 = v38;
    v17 = (_DWORD *)_os_log_pack_fill();
    v18 = *a5;
    *v17 = 67109120;
    v17[1] = v18;
    v19 = operator new();
    v20 = *((unsigned __int8 *)a2 + 23);
    if ((v20 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    if ((v20 & 0x80u) != 0)
      v20 = a2[1];
    *(_QWORD *)v19 = v16;
    *(_OWORD *)(v19 + 8) = v39;
    v39 = 0uLL;
    *(_OWORD *)(v19 + 24) = v40;
    v40 = 0uLL;
    *(_QWORD *)(v19 + 40) = v21;
    *(_QWORD *)(v19 + 48) = v20;
    *(_BYTE *)(v19 + 56) = type;
    v37 = v19;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v37);
    v22 = v37;
    v37 = 0;
    if (v22)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 32);
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = *(std::__shared_weak_count **)(v22 + 16);
      if (v26)
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      MEMORY[0x212BC6398](v22, 0x10F0C40B62ED6C6);
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  else
  {
    os_log_type_enabled(oslog, type);
    v35 = *a5;
    LODWORD(v38) = 67109120;
    HIDWORD(v38) = v35;
    v36 = (void *)_os_log_send_and_compose_impl();
    if (v36)
      free(v36);
  }
}

void sub_20E9D409C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  sub_20E86E8C4((uint64_t *)va1);
  sub_20E86E8C4((uint64_t *)va);
  sub_20E86E658((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20E9D40C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20E86E658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D40D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC6398](v1, 0x10D0C40B950D02ALL);
  _Unwind_Resume(a1);
}

void sub_20E9D40FC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9D4120(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  float32x2_t *v11;
  float64x2_t v12;
  float32x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float32x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float32x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float32x2_t v22;
  float64x2_t v23;
  int v24;
  _OWORD *v25;
  float64x2_t v27;
  float64x2_t v28;

  v3 = *a1;
  v2 = a1[1];
  v4 = (v2 - *a1) / 108;
  v5 = (_QWORD *)operator new();
  v5[1] = v4;
  if (is_mul_ok(v4, 0x108uLL))
    v6 = 264 * v4;
  else
    v6 = -1;
  v7 = (char *)operator new[]();
  bzero(v7, v6);
  *v5 = v7;
  if (v2 != v3)
  {
    if (v4 <= 1)
      v8 = 1;
    else
      v8 = v4;
    v9 = v7 + 128;
    v10 = 100;
    do
    {
      v11 = (float32x2_t *)(*a1 + v10);
      v12 = vcvtq_f64_f32(*(float32x2_t *)((char *)v11 - 92));
      *((float64x2_t *)v9 - 8) = vcvtq_f64_f32(*(float32x2_t *)((char *)v11 - 100));
      *((float64x2_t *)v9 - 7) = v12;
      v13 = v11[-8];
      v14 = vcvtq_f64_f32(v11[-9]);
      *((float64x2_t *)v9 - 6) = vcvtq_f64_f32(*(float32x2_t *)((char *)v11 - 84));
      *((float64x2_t *)v9 - 5) = v14;
      v15 = vcvtq_f64_f32(v13);
      v16 = v11[-6];
      v17 = vcvtq_f64_f32(v11[-7]);
      *((float64x2_t *)v9 - 4) = v15;
      *((float64x2_t *)v9 - 3) = v17;
      v18 = vcvtq_f64_f32(v16);
      v19 = v11[-4];
      v20 = vcvtq_f64_f32(v11[-5]);
      *((float64x2_t *)v9 - 2) = v18;
      *((float64x2_t *)v9 - 1) = v20;
      v21 = vcvtq_f64_f32(v19);
      v22 = v11[-2];
      v23 = vcvtq_f64_f32(v11[-3]);
      *(float64x2_t *)v9 = v21;
      *((float64x2_t *)v9 + 1) = v23;
      *((float64x2_t *)v9 + 2) = vcvtq_f64_f32(v22);
      if (v11[-10].i8[4] == 1)
        v24 = 1;
      else
        v24 = 2;
      *((_DWORD *)v9 + 12) = v24;
      *((_QWORD *)v9 + 15) = 0;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      v27 = vcvtq_f64_f32(*v11);
      v28 = vcvtq_f64_f32(v11[-1]);
      v25 = (_OWORD *)operator new();
      *((_QWORD *)v9 + 16) = 0;
      *((_QWORD *)v9 + 7) = v25;
      *((_QWORD *)v9 + 8) = 0;
      *((_QWORD *)v9 + 9) = 0;
      *((_QWORD *)v9 + 10) = 0;
      v9 += 264;
      v10 += 108;
      *v25 = v28;
      v25[1] = v27;
      --v8;
    }
    while (v8);
  }
  return v5;
}

uint64_t CV3DVIOAddCameraCalibrationToDictionaryV2_0(const void *a1, unsigned int a2, unsigned int a3, double *a4, uint64_t *a5, char *a6, char *a7, const char *a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v46;
  double v47;
  unint64_t v48;
  char *v49[2];
  __int128 v50;

  v47 = a13;
  v49[0] = 0;
  v49[1] = 0;
  v48 = (unint64_t)v49;
  sub_20EA65D20(&v48, &v50);
  v46 = v50;
  sub_20E866BE0((uint64_t)&v48, v49[0]);
  sub_20E9DFC64((const void *)v46, CFSTR("CameraIntrinsics"), a2, a3, a8, a9, a10, a11, a12, *a4, a4[1], a4[2], a4[3], v25, v26, v27, *a5, a5[1]);
  if (!a6
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v48 = 3;
  v49[0] = a6;
  sub_20E9D4690((uint64_t)&v46, CFSTR("TranslationCameraToIMU"), (uint64_t *)&v48);
  if (!a7
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v48 = 9;
  v49[0] = a7;
  sub_20E9D4690((uint64_t)&v46, CFSTR("RotationIMUToCamera"), (uint64_t *)&v48);
  sub_20E912AF8((uint64_t)&v46, CFSTR("TimeStampCorrectionForCamera"), &v47);
  sub_20E9350E4(&v48, a1);
  v29 = v48;
  v28 = (std::__shared_weak_count *)v49[0];
  if (v49[0])
  {
    v30 = (unint64_t *)(v49[0] + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v32 = (std::__shared_weak_count *)v49[0];
    if (v49[0])
    {
      v33 = (unint64_t *)(v49[0] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    do
      v35 = __ldxr(v30);
    while (__stxr(v35 + 1, v30));
    *(_QWORD *)&v50 = v29;
    *((_QWORD *)&v50 + 1) = v28;
    do
      v36 = __ldxr(v30);
    while (__stxr(v36 + 1, v30));
    do
      v37 = __ldaxr(v30);
    while (__stlxr(v37 - 1, v30));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
    do
      v38 = __ldaxr(v30);
    while (__stlxr(v38 - 1, v30));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  else
  {
    v50 = v48;
  }
  sub_20E934F24((uint64_t)&v50, CFSTR("CameraDescription"), (void **)&v46);
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
  if (*((_QWORD *)&v50 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return 0;
}

void sub_20E9D460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D4628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D463C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
  sub_20E866BE0((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void sub_20E9D4654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D4668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D467C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9D4690(uint64_t a1, void *key, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v12;
  CFMutableArrayRef v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40[2];
  void *value;
  std::__shared_weak_count *v42;
  CFMutableArrayRef theArray[2];

  v7 = *(CFDictionaryRef *)a1;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      return;
  }
  else
  {
LABEL_6:
    if (!v7)
      return;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)a1, key))
    return;
  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)theArray, Mutable, 0);
  v13 = theArray[0];
  v12 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v14 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v13)
        goto LABEL_17;
LABEL_37:
      v28 = v40;
      goto LABEL_38;
    }
  }
  if (!v13)
    goto LABEL_37;
LABEL_17:
  v17 = *a3;
  if (*a3)
  {
    v18 = (char *)a3[1];
    v19 = &v18[8 * v17];
    do
    {
      sub_20EA5E260(v18, (CFNumberRef *)&value);
      v21 = value;
      v20 = v42;
      if (!v42)
        goto LABEL_24;
      v22 = (unint64_t *)&v42->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      do
        v24 = __ldaxr(v22);
      while (__stlxr(v24 - 1, v22));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if (v21)
        {
LABEL_25:
          CFArrayAppendValue(theArray[0], value);
          v25 = v42;
          if (v42)
            goto LABEL_29;
          goto LABEL_33;
        }
      }
      else
      {
LABEL_24:
        if (v21)
          goto LABEL_25;
      }
      v40[0] = 0;
      v40[1] = 0;
      v25 = v42;
      if (v42)
      {
LABEL_29:
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
LABEL_33:
      if (!v21)
        goto LABEL_39;
      v18 += 8;
    }
    while (v18 != v19);
  }
  *(_OWORD *)v40 = *(_OWORD *)theArray;
  v28 = theArray;
LABEL_38:
  *v28 = 0;
  v28[1] = 0;
LABEL_39:
  v29 = (std::__shared_weak_count *)theArray[1];
  if (theArray[1])
  {
    v30 = (unint64_t *)((char *)theArray[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v33 = v40[0];
  v32 = (std::__shared_weak_count *)v40[1];
  if (!v40[1])
    goto LABEL_49;
  v34 = (unint64_t *)((char *)v40[1] + 8);
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 - 1, v34));
  if (v36)
  {
LABEL_49:
    if (!v33)
      goto LABEL_51;
    goto LABEL_50;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (v33)
LABEL_50:
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)a1, key, v40[0]);
LABEL_51:
  v37 = (std::__shared_weak_count *)v40[1];
  if (v40[1])
  {
    v38 = (unint64_t *)((char *)v40[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_20E9D4980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9D4994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v17 = (unint64_t *)&a14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9D4A18(CFTypeRef cf@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  CFDictionaryRef v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  CGFloat y;
  CGFloat x;
  CGFloat v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  CGPoint v27;
  CFDictionaryRef v28;
  std::__shared_weak_count *v29;
  char v30;
  CGPoint point;
  CFDictionaryRef dict;
  std::__shared_weak_count *v33;
  char v34;
  CFDictionaryRef v35;
  std::__shared_weak_count *v36;

  if (!cf)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
    return;
  }
  sub_20E9DA754(&dict, cf);
  v4 = dict;
  v3 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = v33;
    if (v33)
    {
      v8 = (unint64_t *)&v33->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v35 = v4;
    v36 = v3;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    v35 = dict;
    v36 = 0;
  }
  sub_20E9D4D14(CFSTR("EffectiveFocusLength"), (uint64_t)&v35, (uint64_t)&dict);
  if (v34)
  {
    v14 = CGPointMakeWithDictionaryRepresentation(dict, &point);
    sub_20E9D4D14(CFSTR("PrincipalPoint"), (uint64_t)&v35, (uint64_t)&v28);
    if (v30)
    {
      if ((v14 & CGPointMakeWithDictionaryRepresentation(v28, &v27) & 1) != 0)
      {
        y = point.y;
        x = v27.x;
        v17 = v27.y;
        *(CGFloat *)a2 = point.x;
        *(_QWORD *)(a2 + 8) = 0;
        *(CGFloat *)(a2 + 16) = x;
        *(_QWORD *)(a2 + 24) = 0;
        *(CGFloat *)(a2 + 32) = y;
        *(CGFloat *)(a2 + 40) = v17;
        *(_QWORD *)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 64) = 0x3FF0000000000000;
        *(_QWORD *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 72) = 1;
        if (!v30)
          goto LABEL_35;
LABEL_30:
        v18 = v29;
        if (v29)
        {
          v19 = (unint64_t *)&v29->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        goto LABEL_35;
      }
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 72) = 0;
      if (v30)
        goto LABEL_30;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 72) = 0;
    }
LABEL_35:
    if (v34)
    {
      v21 = v33;
      if (v33)
      {
        v22 = (unint64_t *)&v33->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    goto LABEL_41;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 72) = 0;
LABEL_41:
  v24 = v36;
  if (v36)
  {
    v25 = (unint64_t *)&v36->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_20E9D4CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20E869AA8((uint64_t)va);
  sub_20E869AA8((uint64_t)va1);
  sub_20E86665C(v3 - 64);
  _Unwind_Resume(a1);
}

void sub_20E9D4D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20E9D4D14(void *key@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  CFTypeID TypeID;
  void *value;
  __int128 v14;

  v7 = *(CFDictionaryRef *)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      goto LABEL_13;
  }
  else
  {
LABEL_6:
    if (!v7)
      goto LABEL_13;
  }
  value = 0;
  if (key)
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a2, key, (const void **)&value))
    {
      v11 = value;
      if (value)
      {
        TypeID = CFDictionaryGetTypeID();
        if (CFGetTypeID(v11) == TypeID)
        {
          sub_20E9DA754(&v14, v11);
          *(_OWORD *)a3 = v14;
          *(_BYTE *)(a3 + 16) = 1;
          return;
        }
      }
    }
  }
LABEL_13:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
}

void sub_20E9D4E18(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string *p_p;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  const __CFBoolean *v32;
  CFTypeID TypeID;
  _BOOL4 v34;
  std::__shared_weak_count *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  size_t v40;
  const char *v41;
  unsigned __int8 v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  const char *v49;
  uint64_t v50;
  const char *v51;
  size_t v52;
  unsigned __int8 v53;
  const __CFBoolean *v54;
  CFTypeID v55;
  char v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v64;
  size_t v65;
  const char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const char *v71;
  uint64_t v72;
  const char *v73;
  size_t v74;
  unsigned __int8 v75;
  const char *v76;
  size_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  size_t v85;
  std::__shared_weak_count_vtbl *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  size_t v89;
  uint64_t v90;
  char v91;
  char *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  void *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unsigned __int8 v133;
  const char *v134;
  size_t v135;
  _BYTE *v136;
  unint64_t v137;
  const char *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  size_t v146;
  std::__shared_weak_count_vtbl *v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  void *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unsigned __int8 v192;
  const char *v193;
  size_t v194;
  _BYTE *v195;
  unint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  NSObject *v205;
  size_t v206;
  std::__shared_weak_count_vtbl *v207;
  std::__shared_weak_count *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t *v219;
  int v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  void *v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unsigned __int8 v244;
  const char *v245;
  size_t v246;
  _BYTE *v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  uint64_t v251;
  uint64_t v252;
  NSObject *v253;
  size_t v254;
  std::__shared_weak_count_vtbl *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  size_t v258;
  uint64_t v259;
  char v260;
  char *v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t *v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  __int128 v277;
  uint64_t *v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  std::__shared_weak_count *v282;
  unint64_t *v283;
  unint64_t v284;
  uint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  void *v298;
  unint64_t *v299;
  int v300;
  unint64_t v301;
  unint64_t v302;
  uint64_t v303;
  const char *v304;
  size_t v305;
  int v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  const char *v310;
  size_t v311;
  unsigned __int8 v312;
  const char *v313;
  size_t v314;
  _BYTE *v315;
  uint64_t v316;
  uint64_t v317;
  _BYTE *v318;
  uint64_t v319;
  uint64_t v320;
  NSObject *v321;
  size_t v322;
  std::__shared_weak_count_vtbl *v323;
  std::__shared_weak_count *v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  CFDictionaryRef v331;
  CFDictionaryRef v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  double v336;
  uint64_t v337;
  uint64_t v338;
  const char *v339;
  uint64_t v340;
  __int128 v341;
  uint64_t v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  uint64_t v349;
  std::__shared_weak_count *v350;
  unint64_t *v351;
  unint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  std::__shared_weak_count *v356;
  int v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  void *v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  uint64_t v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  std::__shared_weak_count *v389;
  unint64_t *v390;
  unint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  unsigned __int8 v395;
  const char *v396;
  size_t v397;
  _BYTE *v398;
  uint64_t v399;
  uint64_t v400;
  _BYTE *v401;
  uint64_t v402;
  uint64_t v403;
  NSObject *v404;
  size_t v405;
  std::__shared_weak_count_vtbl *v406;
  std::__shared_weak_count *v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  const char *v415;
  uint64_t v416;
  __int128 v417;
  uint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  std::__shared_weak_count *v422;
  unint64_t *v423;
  unint64_t v424;
  uint64_t v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  std::__shared_weak_count *v429;
  unint64_t *v430;
  unint64_t v431;
  std::__shared_weak_count *v432;
  int v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  void *v439;
  std::__shared_weak_count *v440;
  unint64_t *v441;
  unint64_t v442;
  const char *v443;
  const char *v444;
  int v445;
  int v446;
  const char *__src;
  const char *__srca;
  uint64_t v449;
  _BOOL4 v450;
  uint64_t v451;
  _BOOL4 v452;
  const char *v453;
  const char *v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  int v459;
  int v460;
  uint64_t *v461;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::__shared_weak_count *v463;
  char *v464;
  const char *v465;
  int v466;
  const char *v467;
  uint64_t v468;
  std::__shared_weak_count *v469;
  CFDictionaryRef theDict[2];
  __int128 v471;
  __int128 v472;
  __int128 v473;
  double v474;
  char v475;
  uint64_t v476;
  std::string __p;
  char v478;
  uint64_t v479;
  int v480;
  void *v481[2];
  uint64_t v482;
  __int128 v483;
  uint64_t v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  uint64_t v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  uint64_t v499;
  __int128 v500;
  _BYTE v501[80];
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  __int128 v508;
  int v509;
  __int128 v510;
  uint64_t __dst;
  _BYTE v512[15];
  char v513;
  _BYTE v514[15];
  _BYTE value[24];
  _BYTE v516[40];
  uint64_t v517;
  __int16 v518;
  uint64_t v519;
  __int16 v520;
  double v521;
  uint64_t v522;

  v522 = *MEMORY[0x24BDAC8D0];
  sub_20E89E538((uint64_t)&v479, (uint64_t *)a4);
  v8 = *(_OWORD *)(a4 + 464);
  v506 = *(_OWORD *)(a4 + 448);
  v507 = v8;
  v508 = *(_OWORD *)(a4 + 480);
  v509 = *(_DWORD *)(a4 + 496);
  v9 = *(_OWORD *)(a4 + 400);
  v502 = *(_OWORD *)(a4 + 384);
  v503 = v9;
  v10 = *(_OWORD *)(a4 + 432);
  v504 = *(_OWORD *)(a4 + 416);
  v505 = v10;
  v11 = *(_OWORD *)(a4 + 336);
  *(_OWORD *)&v501[16] = *(_OWORD *)(a4 + 320);
  *(_OWORD *)&v501[32] = v11;
  v12 = *(_OWORD *)(a4 + 368);
  *(_OWORD *)&v501[48] = *(_OWORD *)(a4 + 352);
  *(_OWORD *)&v501[64] = v12;
  v13 = *(_OWORD *)(a4 + 304);
  v500 = *(_OWORD *)(a4 + 288);
  *(_OWORD *)v501 = v13;
  v14 = *(_QWORD *)(a4 + 512);
  *(_QWORD *)&v510 = *(_QWORD *)(a4 + 504);
  *((_QWORD *)&v510 + 1) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20EA5E5C4(*MEMORY[0x24BDBD580], &__p);
  if (v478)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_20E9DA754(value, a2);
    v18 = *(const __CFDictionary **)value;
    v19 = *(const __CFDictionary **)&value[8];
    if (*(_QWORD *)&value[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v22 = *(std::__shared_weak_count **)&value[8];
      if (*(_QWORD *)&value[8])
      {
        v23 = (unint64_t *)(*(_QWORD *)&value[8] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      do
        v25 = __ldxr(v20);
      while (__stxr(v25 + 1, v20));
      theDict[0] = v18;
      theDict[1] = v19;
      do
        v26 = __ldxr(v20);
      while (__stxr(v26 + 1, v20));
      do
        v27 = __ldaxr(v20);
      while (__stlxr(v27 - 1, v20));
      if (!v27)
      {
        (*(void (**)(const __CFDictionary *))(*(_QWORD *)v19 + 16))(v19);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
      }
      do
        v28 = __ldaxr(v20);
      while (__stlxr(v28 - 1, v20));
      if (!v28)
      {
        (*(void (**)(const __CFDictionary *))(*(_QWORD *)v19 + 16))(v19);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v19);
      }
      LODWORD(v18) = theDict[0];
      if (!theDict[1])
        goto LABEL_30;
      v29 = (unint64_t *)((char *)theDict[1] + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      if (!v31)
      {
        (*(void (**)(CFDictionaryRef))(*(_QWORD *)theDict[1] + 16))(theDict[1]);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)theDict[1]);
        if (theDict[0])
          goto LABEL_31;
      }
      else
      {
LABEL_30:
        if (theDict[0])
        {
LABEL_31:
          *(_QWORD *)value = 0;
          if (CFSTR("SkipExtrinsicsDeserialization")
            && CFDictionaryGetValueIfPresent(theDict[0], CFSTR("SkipExtrinsicsDeserialization"), (const void **)value)
            && (v32 = *(const __CFBoolean **)value) != 0
            && (TypeID = CFBooleanGetTypeID(), CFGetTypeID(v32) == TypeID))
          {
            v34 = CFBooleanGetValue(v32) != 0;
            LODWORD(v18) = 1;
            v35 = (std::__shared_weak_count *)theDict[1];
            if (!theDict[1])
              goto LABEL_52;
          }
          else
          {
            LODWORD(v18) = 0;
            v34 = 0;
            v35 = (std::__shared_weak_count *)theDict[1];
            if (!theDict[1])
              goto LABEL_52;
          }
LABEL_49:
          p_shared_owners = (unint64_t *)&v35->__shared_owners_;
          do
            v44 = __ldaxr(p_shared_owners);
          while (__stlxr(v44 - 1, p_shared_owners));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
            if ((_DWORD)v18)
              goto LABEL_53;
            goto LABEL_64;
          }
LABEL_52:
          if ((_DWORD)v18)
          {
LABEL_53:
            sub_20E9D829C(&v476);
            if (**(int **)(v476 + 56) > 3)
              goto LABEL_455;
            v45 = *(unsigned __int8 *)(v476 + 72);
            v46 = sub_20E8C31DC(v476, "OSLogSurrogateAppender", 1, 0);
            v47 = v46;
            if (!v45 && v46 == 0)
              goto LABEL_455;
            v445 = v45;
            theDict[0] = (CFDictionaryRef)&v476;
            theDict[1] = (CFDictionaryRef)std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)&v471 = std::chrono::system_clock::now();
            DWORD2(v471) = 3;
            *(_QWORD *)&v472 = "unknown file";
            DWORD2(v472) = 153;
            *((_QWORD *)&v473 + 1) = 0;
            v474 = 0.0;
            *(_QWORD *)&v473 = "unknown function";
            v49 = "Will";
            v450 = v34;
            if (!v34)
              v49 = "Will not";
            __src = v49;
            v50 = *(_QWORD *)theDict[0];
            v51 = (const char *)(*(_QWORD *)theDict[0] + 16);
            v443 = v51;
            if (*(char *)(*(_QWORD *)theDict[0] + 39) < 0)
            {
              v51 = *(const char **)(v50 + 16);
              v52 = *(_QWORD *)(v50 + 24);
              v456 = a3;
              v75 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v75 & 1) != 0)
                goto LABEL_93;
            }
            else
            {
              v52 = *(unsigned __int8 *)(*(_QWORD *)theDict[0] + 39);
              v456 = a3;
              v53 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v53 & 1) != 0)
                goto LABEL_93;
            }
            if (__cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)value);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
              if (v516[0] && (value[23] & 0x80000000) != 0)
                operator delete(*(void **)value);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
LABEL_93:
            if (byte_254A4A4F8[23] >= 0)
              v76 = byte_254A4A4F8;
            else
              v76 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v77 = byte_254A4A4F8[23];
            else
              v77 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)value = os_log_create(v76, v51);
            v78 = &value[8];
            if (v77 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v77 >= 0x17)
            {
              v79 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v77 | 7) != 0x17)
                v79 = v77 | 7;
              v80 = v79 + 1;
              v78 = operator new(v79 + 1);
              *(_QWORD *)&value[16] = v77;
              *(_QWORD *)v516 = v80 | 0x8000000000000000;
              *(_QWORD *)&value[8] = v78;
            }
            else
            {
              v516[7] = v77;
              if (!v77)
              {
LABEL_107:
                v78[v77] = 0;
                v516[8] = 1;
                v81 = &v516[16];
                if (v52 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                a3 = v456;
                if (v52 >= 0x17)
                {
                  v82 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v52 | 7) != 0x17)
                    v82 = v52 | 7;
                  v83 = v82 + 1;
                  v81 = operator new(v82 + 1);
                  *(_QWORD *)&v516[24] = v52;
                  *(_QWORD *)&v516[32] = v83 | 0x8000000000000000;
                  *(_QWORD *)&v516[16] = v81;
                }
                else
                {
                  v516[39] = v52;
                  if (!v52)
                  {
LABEL_115:
                    v81[v52] = 0;
                    LOBYTE(v517) = 1;
                    v84 = *(NSObject **)value;
                    if ((v516[39] & 0x80000000) != 0)
                      operator delete(*(void **)&v516[16]);
                    if (v516[8] && (v516[7] & 0x80000000) != 0)
                      operator delete(*(void **)&value[8]);
                    if (*(_QWORD *)value)
                      os_release(*(void **)value);
                    if (v47 && *(_QWORD *)(v47 + 24))
                    {
                      v85 = _os_log_pack_size();
                      v86 = (std::__shared_weak_count_vtbl *)operator new(v85, (std::align_val_t)8uLL);
                      v87 = (std::__shared_weak_count *)operator new();
                      v87->__shared_owners_ = 0;
                      v88 = (unint64_t *)&v87->__shared_owners_;
                      v87->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                      v87->__shared_weak_owners_ = 0;
                      v87[1].__vftable = v86;
                      v461 = (uint64_t *)v86;
                      rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v86;
                      v464 = 0;
                      v465 = 0;
                      v463 = v87;
                      if (v450)
                        v89 = 4;
                      else
                        v89 = 8;
                      v513 = v89;
                      memcpy(&__dst, __src, v89);
                      v512[v89 - 8] = 0;
                      v90 = __dst;
                      *(_QWORD *)v514 = *(_QWORD *)v512;
                      *(_QWORD *)&v514[7] = *(_QWORD *)&v512[7];
                      v91 = v513;
                      v92 = (char *)operator new(0x38uLL);
                      v93 = (std::__shared_weak_count *)v92;
                      *((_QWORD *)v92 + 1) = 0;
                      v94 = (unint64_t *)(v92 + 8);
                      *((_QWORD *)v92 + 2) = 0;
                      *(_QWORD *)v92 = &off_24C9ABBD0;
                      *((_QWORD *)v92 + 3) = off_24C9ABC20;
                      v95 = *(_QWORD *)v514;
                      *((_QWORD *)v92 + 4) = v90;
                      *((_QWORD *)v92 + 5) = v95;
                      *(_QWORD *)(v92 + 47) = *(_QWORD *)&v514[7];
                      v92[55] = v91;
                      v464 = v92 + 24;
                      v465 = v92;
                      *(_QWORD *)value = v86;
                      *(_QWORD *)&value[8] = v86;
                      *(_QWORD *)&value[16] = v87;
                      do
                        v96 = __ldxr(v88);
                      while (__stxr(v96 + 1, v88));
                      *(_QWORD *)v516 = v92 + 24;
                      *(_QWORD *)&v516[8] = v92;
                      do
                        v97 = __ldxr(v94);
                      while (__stxr(v97 + 1, v94));
                      *(_QWORD *)&v516[16] = v92 + 24;
                      do
                        v98 = __ldaxr(v94);
                      while (__stlxr(v98 - 1, v94));
                      if (!v98)
                      {
                        (*(void (**)(char *))(*(_QWORD *)v92 + 16))(v92);
                        std::__shared_weak_count::__release_weak(v93);
                      }
                      if (v463)
                      {
                        v99 = &v463->__shared_owners_;
                        do
                          v100 = __ldaxr((unint64_t *)v99);
                        while (__stlxr(v100 - 1, (unint64_t *)v99));
                        if (!v100)
                        {
                          ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                          std::__shared_weak_count::__release_weak(v463);
                        }
                      }
                      v101 = *(_QWORD *)value;
                      if (*(char *)(*(_QWORD *)&v516[16] + 31) >= 0)
                        v102 = *(_QWORD *)&v516[16] + 8;
                      else
                        v102 = *(_QWORD *)(*(_QWORD *)&v516[16] + 8);
                      v103 = _os_log_pack_fill();
                      *(_DWORD *)v103 = 136315138;
                      *(_QWORD *)(v103 + 4) = v102;
                      v104 = operator new();
                      v105 = *(unsigned __int8 *)(v50 + 39);
                      v106 = *(const char **)(v50 + 16);
                      v107 = *(_QWORD *)(v50 + 24);
                      v108 = *(_OWORD *)v516;
                      *(_OWORD *)(v104 + 8) = *(_OWORD *)&value[8];
                      if ((v105 & 0x80u) != 0)
                        v105 = v107;
                      else
                        v106 = v443;
                      *(_QWORD *)v104 = v101;
                      *(_QWORD *)&value[8] = 0;
                      *(_QWORD *)&value[16] = 0;
                      *(_OWORD *)(v104 + 24) = v108;
                      *(_QWORD *)v516 = 0;
                      *(_QWORD *)&v516[8] = 0;
                      *(_QWORD *)(v104 + 40) = v106;
                      *(_QWORD *)(v104 + 48) = v105;
                      *(_BYTE *)(v104 + 56) = 1;
                      __dst = 0;
                      v461 = (uint64_t *)v104;
                      (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v47 + 24) + 40))(*(_QWORD *)(v47 + 24), &v461);
                      a3 = v456;
                      v109 = v461;
                      v461 = 0;
                      v45 = v445;
                      if (v109)
                      {
                        v110 = (std::__shared_weak_count *)v109[4];
                        if (v110)
                        {
                          v111 = (unint64_t *)&v110->__shared_owners_;
                          do
                            v112 = __ldaxr(v111);
                          while (__stlxr(v112 - 1, v111));
                          if (!v112)
                          {
                            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
                            std::__shared_weak_count::__release_weak(v110);
                          }
                        }
                        v113 = (std::__shared_weak_count *)v109[2];
                        if (v113)
                        {
                          v114 = (unint64_t *)&v113->__shared_owners_;
                          do
                            v115 = __ldaxr(v114);
                          while (__stlxr(v115 - 1, v114));
                          if (!v115)
                          {
                            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                            std::__shared_weak_count::__release_weak(v113);
                          }
                        }
                        MEMORY[0x212BC6398](v109, 0x10F0C40B62ED6C6);
                        v116 = __dst;
                        __dst = 0;
                        if (v116)
                        {
                          v117 = *(std::__shared_weak_count **)(v116 + 32);
                          if (v117)
                          {
                            v118 = (unint64_t *)&v117->__shared_owners_;
                            do
                              v119 = __ldaxr(v118);
                            while (__stlxr(v119 - 1, v118));
                            if (!v119)
                            {
                              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
                              std::__shared_weak_count::__release_weak(v117);
                            }
                          }
                          v120 = *(std::__shared_weak_count **)(v116 + 16);
                          if (v120)
                          {
                            v121 = (unint64_t *)&v120->__shared_owners_;
                            do
                              v122 = __ldaxr(v121);
                            while (__stlxr(v122 - 1, v121));
                            if (!v122)
                            {
                              ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                              std::__shared_weak_count::__release_weak(v120);
                            }
                          }
                          MEMORY[0x212BC6398](v116, 0x10F0C40B62ED6C6);
                        }
                      }
                      v123 = *(std::__shared_weak_count **)&v516[8];
                      if (*(_QWORD *)&v516[8])
                      {
                        v124 = (unint64_t *)(*(_QWORD *)&v516[8] + 8);
                        do
                          v125 = __ldaxr(v124);
                        while (__stlxr(v125 - 1, v124));
                        if (!v125)
                        {
                          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                          std::__shared_weak_count::__release_weak(v123);
                        }
                      }
                      v126 = *(std::__shared_weak_count **)&value[16];
                      if (*(_QWORD *)&value[16])
                      {
                        v127 = (unint64_t *)(*(_QWORD *)&value[16] + 8);
                        do
                          v128 = __ldaxr(v127);
                        while (__stlxr(v128 - 1, v127));
                        if (!v128)
                        {
                          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                          std::__shared_weak_count::__release_weak(v126);
                        }
                      }
                    }
                    else
                    {
                      os_log_type_enabled(v84, OS_LOG_TYPE_INFO);
                      *(_DWORD *)value = 136315138;
                      *(_QWORD *)&value[4] = __src;
                      v129 = (void *)_os_log_send_and_compose_impl();
                      if (v129)
                        free(v129);
                    }
                    if (v45)
                    {
                      sub_20E8C003C((uint64_t)theDict, "%s skip loading camera extrinsics based on initialization parameters.", __src);
                      sub_20E863570((uint64_t)theDict);
                    }
                    sub_20E863570((uint64_t)theDict);
                    v34 = v450;
                    v130 = *(std::__shared_weak_count **)&v474;
                    if (v474 != 0.0)
                    {
                      v131 = (unint64_t *)(*(_QWORD *)&v474 + 8);
                      do
                        v132 = __ldaxr(v131);
                      while (__stlxr(v132 - 1, v131));
                      goto LABEL_453;
                    }
                    goto LABEL_455;
                  }
                }
                memmove(v81, v51, v52);
                goto LABEL_115;
              }
            }
            memmove(v78, v76, v77);
            goto LABEL_107;
          }
LABEL_64:
          sub_21010B45C((const char *)p_p, "AppleCV3DSkipExtrinsicsDeserialization", value);
          v54 = *(const __CFBoolean **)value;
          if (*(_QWORD *)value && (v55 = CFBooleanGetTypeID(), CFGetTypeID(v54) == v55))
          {
            v56 = 0;
            v34 = CFBooleanGetValue(v54) != 0;
            v57 = *(std::__shared_weak_count **)&value[8];
            if (!*(_QWORD *)&value[8])
              goto LABEL_72;
          }
          else
          {
            v34 = 0;
            v56 = 1;
            v57 = *(std::__shared_weak_count **)&value[8];
            if (!*(_QWORD *)&value[8])
              goto LABEL_72;
          }
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
            if ((v56 & 1) != 0)
              goto LABEL_73;
            goto LABEL_83;
          }
LABEL_72:
          if ((v56 & 1) != 0)
          {
LABEL_73:
            sub_20E9D829C(v514);
            if (**(int **)(*(_QWORD *)v514 + 56) > 3)
              goto LABEL_456;
            v60 = *(unsigned __int8 *)(*(_QWORD *)v514 + 72);
            v61 = sub_20E8C31DC(*(uint64_t *)v514, "OSLogSurrogateAppender", 1, 0);
            v62 = v61;
            if (!v60 && v61 == 0)
              goto LABEL_456;
            theDict[0] = (CFDictionaryRef)v514;
            theDict[1] = (CFDictionaryRef)std::chrono::steady_clock::now().__d_.__rep_;
            *(std::chrono::system_clock::time_point *)&v471 = std::chrono::system_clock::now();
            DWORD2(v471) = 3;
            *(_QWORD *)&v472 = "unknown file";
            DWORD2(v472) = 149;
            *((_QWORD *)&v473 + 1) = 0;
            v474 = 0.0;
            *(_QWORD *)&v473 = "unknown function";
            v64 = *(_QWORD *)v514 + 16;
            v451 = *(_QWORD *)v514;
            if (*(char *)(*(_QWORD *)v514 + 39) < 0)
            {
              v66 = *(const char **)(*(_QWORD *)v514 + 16);
              v65 = *(_QWORD *)(*(_QWORD *)v514 + 24);
            }
            else
            {
              v65 = *(unsigned __int8 *)(*(_QWORD *)v514 + 39);
              v66 = (const char *)(*(_QWORD *)v514 + 16);
            }
            v457 = v60;
            v192 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v192 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)value);
              sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
              if (v516[0] && (value[23] & 0x80000000) != 0)
                operator delete(*(void **)value);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A4F8[23] >= 0)
              v193 = byte_254A4A4F8;
            else
              v193 = *(const char **)byte_254A4A4F8;
            if (byte_254A4A4F8[23] >= 0)
              v194 = byte_254A4A4F8[23];
            else
              v194 = *(_QWORD *)&byte_254A4A4F8[8];
            *(_QWORD *)value = os_log_create(v193, v66);
            v195 = &value[8];
            if (v194 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v194 >= 0x17)
            {
              v196 = v62;
              v197 = v66;
              v198 = v64;
              v199 = a3;
              v200 = (v194 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v194 | 7) != 0x17)
                v200 = v194 | 7;
              v201 = v200 + 1;
              v195 = operator new(v200 + 1);
              *(_QWORD *)&value[16] = v194;
              *(_QWORD *)v516 = v201 | 0x8000000000000000;
              *(_QWORD *)&value[8] = v195;
              a3 = v199;
              v64 = v198;
              v66 = v197;
              v62 = v196;
            }
            else
            {
              v516[7] = v194;
              if (!v194)
              {
LABEL_290:
                v195[v194] = 0;
                v516[8] = 1;
                v202 = &v516[16];
                if (v65 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                if (v65 >= 0x17)
                {
                  v203 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v65 | 7) != 0x17)
                    v203 = v65 | 7;
                  v204 = v203 + 1;
                  v202 = operator new(v203 + 1);
                  *(_QWORD *)&v516[24] = v65;
                  *(_QWORD *)&v516[32] = v204 | 0x8000000000000000;
                  *(_QWORD *)&v516[16] = v202;
                }
                else
                {
                  v516[39] = v65;
                  if (!v65)
                    goto LABEL_298;
                }
                memmove(v202, v66, v65);
LABEL_298:
                v202[v65] = 0;
                LOBYTE(v517) = 1;
                v205 = *(NSObject **)value;
                if ((v516[39] & 0x80000000) != 0)
                  operator delete(*(void **)&v516[16]);
                if (v516[8] && (v516[7] & 0x80000000) != 0)
                  operator delete(*(void **)&value[8]);
                if (*(_QWORD *)value)
                  os_release(*(void **)value);
                if (v62 && *(_QWORD *)(v62 + 24))
                {
                  v206 = _os_log_pack_size();
                  v207 = (std::__shared_weak_count_vtbl *)operator new(v206, (std::align_val_t)8uLL);
                  v208 = (std::__shared_weak_count *)operator new();
                  v209 = v208;
                  v208->__shared_owners_ = 0;
                  v210 = (unint64_t *)&v208->__shared_owners_;
                  v208->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                  v208->__shared_weak_owners_ = 0;
                  v208[1].__vftable = v207;
                  *(_QWORD *)value = v207;
                  *(_QWORD *)&value[8] = v207;
                  *(_QWORD *)&value[16] = v208;
                  do
                    v211 = __ldxr(v210);
                  while (__stxr(v211 + 1, v210));
                  memset(v516, 0, 24);
                  do
                    v212 = __ldaxr(v210);
                  while (__stlxr(v212 - 1, v210));
                  if (!v212)
                  {
                    ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
                    std::__shared_weak_count::__release_weak(v209);
                  }
                  v213 = *(_QWORD *)value;
                  *(_WORD *)_os_log_pack_fill() = 0;
                  v214 = operator new();
                  v215 = *(unsigned __int8 *)(v451 + 39);
                  v216 = *(_QWORD *)(v451 + 16);
                  v217 = *(_QWORD *)(v451 + 24);
                  v218 = *(_OWORD *)v516;
                  *(_OWORD *)(v214 + 8) = *(_OWORD *)&value[8];
                  if ((v215 & 0x80u) != 0)
                    v215 = v217;
                  else
                    v216 = v64;
                  *(_QWORD *)v214 = v213;
                  *(_QWORD *)&value[8] = 0;
                  *(_QWORD *)&value[16] = 0;
                  *(_OWORD *)(v214 + 24) = v218;
                  *(_QWORD *)v516 = 0;
                  *(_QWORD *)&v516[8] = 0;
                  *(_QWORD *)(v214 + 40) = v216;
                  *(_QWORD *)(v214 + 48) = v215;
                  *(_BYTE *)(v214 + 56) = 1;
                  __dst = 0;
                  v461 = (uint64_t *)v214;
                  (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v62 + 24) + 40))(*(_QWORD *)(v62 + 24), &v461);
                  v219 = v461;
                  v461 = 0;
                  v220 = v457;
                  if (v219)
                  {
                    v221 = (std::__shared_weak_count *)v219[4];
                    if (v221)
                    {
                      v222 = (unint64_t *)&v221->__shared_owners_;
                      do
                        v223 = __ldaxr(v222);
                      while (__stlxr(v223 - 1, v222));
                      if (!v223)
                      {
                        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                        std::__shared_weak_count::__release_weak(v221);
                      }
                    }
                    v224 = (std::__shared_weak_count *)v219[2];
                    if (v224)
                    {
                      v225 = (unint64_t *)&v224->__shared_owners_;
                      do
                        v226 = __ldaxr(v225);
                      while (__stlxr(v226 - 1, v225));
                      if (!v226)
                      {
                        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                        std::__shared_weak_count::__release_weak(v224);
                      }
                    }
                    MEMORY[0x212BC6398](v219, 0x10F0C40B62ED6C6);
                    v227 = __dst;
                    __dst = 0;
                    if (v227)
                    {
                      v228 = *(std::__shared_weak_count **)(v227 + 32);
                      if (v228)
                      {
                        v229 = (unint64_t *)&v228->__shared_owners_;
                        do
                          v230 = __ldaxr(v229);
                        while (__stlxr(v230 - 1, v229));
                        if (!v230)
                        {
                          ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
                          std::__shared_weak_count::__release_weak(v228);
                        }
                      }
                      v231 = *(std::__shared_weak_count **)(v227 + 16);
                      if (v231)
                      {
                        v232 = (unint64_t *)&v231->__shared_owners_;
                        do
                          v233 = __ldaxr(v232);
                        while (__stlxr(v233 - 1, v232));
                        if (!v233)
                        {
                          ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
                          std::__shared_weak_count::__release_weak(v231);
                        }
                      }
                      MEMORY[0x212BC6398](v227, 0x10F0C40B62ED6C6);
                    }
                  }
                  v234 = *(std::__shared_weak_count **)&v516[8];
                  if (*(_QWORD *)&v516[8])
                  {
                    v235 = (unint64_t *)(*(_QWORD *)&v516[8] + 8);
                    do
                      v236 = __ldaxr(v235);
                    while (__stlxr(v236 - 1, v235));
                    if (!v236)
                    {
                      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                      std::__shared_weak_count::__release_weak(v234);
                    }
                  }
                  v237 = *(std::__shared_weak_count **)&value[16];
                  if (*(_QWORD *)&value[16])
                  {
                    v238 = (unint64_t *)(*(_QWORD *)&value[16] + 8);
                    do
                      v239 = __ldaxr(v238);
                    while (__stlxr(v239 - 1, v238));
                    if (!v239)
                    {
                      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                      std::__shared_weak_count::__release_weak(v237);
                    }
                  }
                }
                else
                {
                  os_log_type_enabled(v205, OS_LOG_TYPE_INFO);
                  *(_WORD *)value = 0;
                  v240 = (void *)_os_log_send_and_compose_impl();
                  v220 = v457;
                  if (v240)
                    free(v240);
                }
                if (v220)
                {
                  sub_20E8C003C((uint64_t)theDict, "No initialization or defaults parameters found. Will attempt to load camera extrinsics.");
                  sub_20E863570((uint64_t)theDict);
                }
                sub_20E863570((uint64_t)theDict);
                v241 = *(std::__shared_weak_count **)&v474;
                if (v474 != 0.0)
                {
                  v242 = (unint64_t *)(*(_QWORD *)&v474 + 8);
                  do
                    v243 = __ldaxr(v242);
                  while (__stlxr(v243 - 1, v242));
                  if (!v243)
                  {
                    ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
                    std::__shared_weak_count::__release_weak(v241);
                  }
                }
                goto LABEL_456;
              }
            }
            memmove(v195, v193, v194);
            goto LABEL_290;
          }
LABEL_83:
          sub_20E9D829C(&v476);
          if (**(int **)(v476 + 56) > 3)
            goto LABEL_455;
          v67 = *(unsigned __int8 *)(v476 + 72);
          v68 = sub_20E8C31DC(v476, "OSLogSurrogateAppender", 1, 0);
          v69 = v68;
          if (!v67 && v68 == 0)
            goto LABEL_455;
          v446 = v67;
          theDict[0] = (CFDictionaryRef)&v476;
          theDict[1] = (CFDictionaryRef)std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::system_clock::time_point *)&v471 = std::chrono::system_clock::now();
          DWORD2(v471) = 3;
          *(_QWORD *)&v472 = "unknown file";
          DWORD2(v472) = 145;
          *((_QWORD *)&v473 + 1) = 0;
          v474 = 0.0;
          *(_QWORD *)&v473 = "unknown function";
          v71 = "Will";
          v452 = v34;
          if (!v34)
            v71 = "Will not";
          __srca = v71;
          v72 = *(_QWORD *)theDict[0];
          v73 = (const char *)(*(_QWORD *)theDict[0] + 16);
          v444 = v73;
          if (*(char *)(*(_QWORD *)theDict[0] + 39) < 0)
          {
            v73 = *(const char **)(v72 + 16);
            v74 = *(_QWORD *)(v72 + 24);
          }
          else
          {
            v74 = *(unsigned __int8 *)(*(_QWORD *)theDict[0] + 39);
          }
          v458 = a3;
          v244 = atomic_load((unsigned __int8 *)&qword_254A4A510);
          if ((v244 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
          {
            sub_20E9E46F8((uint64_t)value);
            sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
            if (v516[0] && (value[23] & 0x80000000) != 0)
              operator delete(*(void **)value);
            __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
            __cxa_guard_release(&qword_254A4A510);
          }
          if (byte_254A4A4F8[23] >= 0)
            v245 = byte_254A4A4F8;
          else
            v245 = *(const char **)byte_254A4A4F8;
          if (byte_254A4A4F8[23] >= 0)
            v246 = byte_254A4A4F8[23];
          else
            v246 = *(_QWORD *)&byte_254A4A4F8[8];
          *(_QWORD *)value = os_log_create(v245, v73);
          v247 = &value[8];
          if (v246 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v246 >= 0x17)
          {
            v248 = (v246 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v246 | 7) != 0x17)
              v248 = v246 | 7;
            v249 = v248 + 1;
            v247 = operator new(v248 + 1);
            *(_QWORD *)&value[16] = v246;
            *(_QWORD *)v516 = v249 | 0x8000000000000000;
            *(_QWORD *)&value[8] = v247;
          }
          else
          {
            v516[7] = v246;
            if (!v246)
            {
LABEL_374:
              v247[v246] = 0;
              v516[8] = 1;
              v250 = &v516[16];
              if (v74 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              a3 = v458;
              if (v74 >= 0x17)
              {
                v251 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v74 | 7) != 0x17)
                  v251 = v74 | 7;
                v252 = v251 + 1;
                v250 = operator new(v251 + 1);
                *(_QWORD *)&v516[24] = v74;
                *(_QWORD *)&v516[32] = v252 | 0x8000000000000000;
                *(_QWORD *)&v516[16] = v250;
              }
              else
              {
                v516[39] = v74;
                if (!v74)
                {
LABEL_382:
                  v250[v74] = 0;
                  LOBYTE(v517) = 1;
                  v253 = *(NSObject **)value;
                  if ((v516[39] & 0x80000000) != 0)
                    operator delete(*(void **)&v516[16]);
                  if (v516[8] && (v516[7] & 0x80000000) != 0)
                    operator delete(*(void **)&value[8]);
                  if (*(_QWORD *)value)
                    os_release(*(void **)value);
                  if (v69 && *(_QWORD *)(v69 + 24))
                  {
                    v254 = _os_log_pack_size();
                    v255 = (std::__shared_weak_count_vtbl *)operator new(v254, (std::align_val_t)8uLL);
                    v256 = (std::__shared_weak_count *)operator new();
                    v256->__shared_owners_ = 0;
                    v257 = (unint64_t *)&v256->__shared_owners_;
                    v256->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v256->__shared_weak_owners_ = 0;
                    v256[1].__vftable = v255;
                    v461 = (uint64_t *)v255;
                    rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v255;
                    v464 = 0;
                    v465 = 0;
                    v463 = v256;
                    if (v452)
                      v258 = 4;
                    else
                      v258 = 8;
                    v513 = v258;
                    memcpy(&__dst, __srca, v258);
                    v512[v258 - 8] = 0;
                    v259 = __dst;
                    *(_QWORD *)v514 = *(_QWORD *)v512;
                    *(_QWORD *)&v514[7] = *(_QWORD *)&v512[7];
                    v260 = v513;
                    v261 = (char *)operator new(0x38uLL);
                    v262 = (std::__shared_weak_count *)v261;
                    *((_QWORD *)v261 + 1) = 0;
                    v263 = (unint64_t *)(v261 + 8);
                    *((_QWORD *)v261 + 2) = 0;
                    *(_QWORD *)v261 = &off_24C9ABBD0;
                    *((_QWORD *)v261 + 3) = off_24C9ABC20;
                    v264 = *(_QWORD *)v514;
                    *((_QWORD *)v261 + 4) = v259;
                    *((_QWORD *)v261 + 5) = v264;
                    *(_QWORD *)(v261 + 47) = *(_QWORD *)&v514[7];
                    v261[55] = v260;
                    v464 = v261 + 24;
                    v465 = v261;
                    *(_QWORD *)value = v255;
                    *(_QWORD *)&value[8] = v255;
                    *(_QWORD *)&value[16] = v256;
                    do
                      v265 = __ldxr(v257);
                    while (__stxr(v265 + 1, v257));
                    *(_QWORD *)v516 = v261 + 24;
                    *(_QWORD *)&v516[8] = v261;
                    do
                      v266 = __ldxr(v263);
                    while (__stxr(v266 + 1, v263));
                    *(_QWORD *)&v516[16] = v261 + 24;
                    do
                      v267 = __ldaxr(v263);
                    while (__stlxr(v267 - 1, v263));
                    if (!v267)
                    {
                      (*(void (**)(char *))(*(_QWORD *)v261 + 16))(v261);
                      std::__shared_weak_count::__release_weak(v262);
                    }
                    if (v463)
                    {
                      v268 = &v463->__shared_owners_;
                      do
                        v269 = __ldaxr((unint64_t *)v268);
                      while (__stlxr(v269 - 1, (unint64_t *)v268));
                      if (!v269)
                      {
                        ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
                        std::__shared_weak_count::__release_weak(v463);
                      }
                    }
                    v270 = *(_QWORD *)value;
                    if (*(char *)(*(_QWORD *)&v516[16] + 31) >= 0)
                      v271 = *(_QWORD *)&v516[16] + 8;
                    else
                      v271 = *(_QWORD *)(*(_QWORD *)&v516[16] + 8);
                    v272 = _os_log_pack_fill();
                    *(_DWORD *)v272 = 136315138;
                    *(_QWORD *)(v272 + 4) = v271;
                    v273 = operator new();
                    v274 = *(unsigned __int8 *)(v72 + 39);
                    v275 = *(const char **)(v72 + 16);
                    v276 = *(_QWORD *)(v72 + 24);
                    v277 = *(_OWORD *)v516;
                    *(_OWORD *)(v273 + 8) = *(_OWORD *)&value[8];
                    if ((v274 & 0x80u) != 0)
                      v274 = v276;
                    else
                      v275 = v444;
                    *(_QWORD *)v273 = v270;
                    *(_QWORD *)&value[8] = 0;
                    *(_QWORD *)&value[16] = 0;
                    *(_OWORD *)(v273 + 24) = v277;
                    *(_QWORD *)v516 = 0;
                    *(_QWORD *)&v516[8] = 0;
                    *(_QWORD *)(v273 + 40) = v275;
                    *(_QWORD *)(v273 + 48) = v274;
                    *(_BYTE *)(v273 + 56) = 1;
                    __dst = 0;
                    v461 = (uint64_t *)v273;
                    (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v69 + 24) + 40))(*(_QWORD *)(v69 + 24), &v461);
                    a3 = v458;
                    v278 = v461;
                    v461 = 0;
                    v67 = v446;
                    if (v278)
                    {
                      v279 = (std::__shared_weak_count *)v278[4];
                      if (v279)
                      {
                        v280 = (unint64_t *)&v279->__shared_owners_;
                        do
                          v281 = __ldaxr(v280);
                        while (__stlxr(v281 - 1, v280));
                        if (!v281)
                        {
                          ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                          std::__shared_weak_count::__release_weak(v279);
                        }
                      }
                      v282 = (std::__shared_weak_count *)v278[2];
                      if (v282)
                      {
                        v283 = (unint64_t *)&v282->__shared_owners_;
                        do
                          v284 = __ldaxr(v283);
                        while (__stlxr(v284 - 1, v283));
                        if (!v284)
                        {
                          ((void (*)(std::__shared_weak_count *))v282->__on_zero_shared)(v282);
                          std::__shared_weak_count::__release_weak(v282);
                        }
                      }
                      MEMORY[0x212BC6398](v278, 0x10F0C40B62ED6C6);
                      v285 = __dst;
                      __dst = 0;
                      if (v285)
                      {
                        v286 = *(std::__shared_weak_count **)(v285 + 32);
                        if (v286)
                        {
                          v287 = (unint64_t *)&v286->__shared_owners_;
                          do
                            v288 = __ldaxr(v287);
                          while (__stlxr(v288 - 1, v287));
                          if (!v288)
                          {
                            ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                            std::__shared_weak_count::__release_weak(v286);
                          }
                        }
                        v289 = *(std::__shared_weak_count **)(v285 + 16);
                        if (v289)
                        {
                          v290 = (unint64_t *)&v289->__shared_owners_;
                          do
                            v291 = __ldaxr(v290);
                          while (__stlxr(v291 - 1, v290));
                          if (!v291)
                          {
                            ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
                            std::__shared_weak_count::__release_weak(v289);
                          }
                        }
                        MEMORY[0x212BC6398](v285, 0x10F0C40B62ED6C6);
                      }
                    }
                    v292 = *(std::__shared_weak_count **)&v516[8];
                    if (*(_QWORD *)&v516[8])
                    {
                      v293 = (unint64_t *)(*(_QWORD *)&v516[8] + 8);
                      do
                        v294 = __ldaxr(v293);
                      while (__stlxr(v294 - 1, v293));
                      if (!v294)
                      {
                        ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                        std::__shared_weak_count::__release_weak(v292);
                      }
                    }
                    v295 = *(std::__shared_weak_count **)&value[16];
                    if (*(_QWORD *)&value[16])
                    {
                      v296 = (unint64_t *)(*(_QWORD *)&value[16] + 8);
                      do
                        v297 = __ldaxr(v296);
                      while (__stlxr(v297 - 1, v296));
                      if (!v297)
                      {
                        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
                        std::__shared_weak_count::__release_weak(v295);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v253, OS_LOG_TYPE_INFO);
                    *(_DWORD *)value = 136315138;
                    *(_QWORD *)&value[4] = __srca;
                    v298 = (void *)_os_log_send_and_compose_impl();
                    if (v298)
                      free(v298);
                  }
                  if (v67)
                  {
                    sub_20E8C003C((uint64_t)theDict, "%s skip loading camera extrinsics based on application defaults.", __srca);
                    sub_20E863570((uint64_t)theDict);
                  }
                  sub_20E863570((uint64_t)theDict);
                  v34 = v452;
                  v130 = *(std::__shared_weak_count **)&v474;
                  if (v474 != 0.0)
                  {
                    v299 = (unint64_t *)(*(_QWORD *)&v474 + 8);
                    do
                      v132 = __ldaxr(v299);
                    while (__stlxr(v132 - 1, v299));
LABEL_453:
                    if (!v132)
                    {
                      ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                      std::__shared_weak_count::__release_weak(v130);
                    }
                  }
LABEL_455:
                  if (v34)
                  {
LABEL_552:
                    *(_QWORD *)a1 = v479;
                    *(_DWORD *)(a1 + 8) = v480;
                    *(_OWORD *)(a1 + 16) = *(_OWORD *)v481;
                    v367 = v484;
                    *(_QWORD *)(a1 + 32) = v482;
                    v481[0] = 0;
                    v481[1] = 0;
                    *(_OWORD *)(a1 + 40) = v483;
                    *(_QWORD *)(a1 + 56) = v367;
                    v482 = 0;
                    v483 = 0uLL;
                    v484 = 0;
                    v368 = v485;
                    v369 = v486;
                    v370 = v488;
                    *(_OWORD *)(a1 + 96) = v487;
                    *(_OWORD *)(a1 + 112) = v370;
                    *(_OWORD *)(a1 + 64) = v368;
                    *(_OWORD *)(a1 + 80) = v369;
                    v371 = v489;
                    v372 = v490;
                    v373 = v491;
                    v374 = v499;
                    *(_QWORD *)(a1 + 176) = v492;
                    *(_OWORD *)(a1 + 144) = v372;
                    *(_OWORD *)(a1 + 160) = v373;
                    *(_OWORD *)(a1 + 128) = v371;
                    *(_OWORD *)(a1 + 184) = v493;
                    v493 = 0uLL;
                    v375 = v498;
                    v376 = v494;
                    *(_OWORD *)(a1 + 216) = v495;
                    *(_OWORD *)(a1 + 200) = v376;
                    v377 = v496;
                    v378 = v497;
                    *(_QWORD *)(a1 + 280) = v374;
                    *(_OWORD *)(a1 + 264) = v375;
                    *(_OWORD *)(a1 + 248) = v378;
                    *(_OWORD *)(a1 + 232) = v377;
                    v379 = *(_OWORD *)v501;
                    *(_OWORD *)(a1 + 288) = v500;
                    *(_OWORD *)(a1 + 304) = v379;
                    v380 = *(_OWORD *)&v501[16];
                    v381 = *(_OWORD *)&v501[32];
                    v382 = *(_OWORD *)&v501[64];
                    *(_OWORD *)(a1 + 352) = *(_OWORD *)&v501[48];
                    *(_OWORD *)(a1 + 368) = v382;
                    *(_OWORD *)(a1 + 320) = v380;
                    *(_OWORD *)(a1 + 336) = v381;
                    v383 = v502;
                    v384 = v503;
                    v385 = v505;
                    *(_OWORD *)(a1 + 416) = v504;
                    *(_OWORD *)(a1 + 432) = v385;
                    *(_OWORD *)(a1 + 384) = v383;
                    *(_OWORD *)(a1 + 400) = v384;
                    v386 = v506;
                    v387 = v507;
                    v388 = v508;
                    *(_DWORD *)(a1 + 496) = v509;
                    *(_OWORD *)(a1 + 464) = v387;
                    *(_OWORD *)(a1 + 480) = v388;
                    *(_OWORD *)(a1 + 448) = v386;
                    *(_OWORD *)(a1 + 504) = v510;
                    v510 = 0uLL;
                    goto LABEL_553;
                  }
LABEL_456:
                  sub_21010A8B0(a3, a3 + 24, a3 + 48, theDict);
                  if (v475)
                  {
                    sub_20E9D829C(&v476);
                    if (**(int **)(v476 + 56) > 3
                      || (v300 = *(unsigned __int8 *)(v476 + 72),
                          v301 = sub_20E8C31DC(v476, "OSLogSurrogateAppender", 1, 0),
                          v302 = v301,
                          !v300)
                      && !v301)
                    {
LABEL_551:
                      *(_OWORD *)&v501[40] = v472;
                      *(_OWORD *)&v501[56] = v473;
                      *(_OWORD *)&v501[8] = *(_OWORD *)theDict;
                      *(_OWORD *)&v501[24] = v471;
                      *(double *)&v501[72] = v474;
                      goto LABEL_552;
                    }
                    v459 = v300;
                    v461 = &v476;
                    rep = std::chrono::steady_clock::now().__d_.__rep_;
                    v463 = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
                    LODWORD(v464) = 3;
                    v465 = "unknown file";
                    v466 = 165;
                    v468 = 0;
                    v469 = 0;
                    v467 = "unknown function";
                    v303 = *v461;
                    v304 = (const char *)(*v461 + 16);
                    v453 = v304;
                    if (*(char *)(*v461 + 39) < 0)
                    {
                      v304 = *(const char **)(v303 + 16);
                      v305 = *(_QWORD *)(v303 + 24);
                    }
                    else
                    {
                      v305 = *(unsigned __int8 *)(*v461 + 39);
                    }
                    v312 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                    if ((v312 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                    {
                      sub_20E9E46F8((uint64_t)value);
                      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
                      if (v516[0] && (value[23] & 0x80000000) != 0)
                        operator delete(*(void **)value);
                      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                      __cxa_guard_release(&qword_254A4A510);
                    }
                    if (byte_254A4A4F8[23] >= 0)
                      v313 = byte_254A4A4F8;
                    else
                      v313 = *(const char **)byte_254A4A4F8;
                    if (byte_254A4A4F8[23] >= 0)
                      v314 = byte_254A4A4F8[23];
                    else
                      v314 = *(_QWORD *)&byte_254A4A4F8[8];
                    *(_QWORD *)value = os_log_create(v313, v304);
                    v315 = &value[8];
                    if (v314 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    if (v314 >= 0x17)
                    {
                      v316 = (v314 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v314 | 7) != 0x17)
                        v316 = v314 | 7;
                      v317 = v316 + 1;
                      v315 = operator new(v316 + 1);
                      *(_QWORD *)&value[16] = v314;
                      *(_QWORD *)v516 = v317 | 0x8000000000000000;
                      *(_QWORD *)&value[8] = v315;
                    }
                    else
                    {
                      v516[7] = v314;
                      if (!v314)
                      {
LABEL_483:
                        v315[v314] = 0;
                        v516[8] = 1;
                        v318 = &v516[16];
                        if (v305 > 0x7FFFFFFFFFFFFFF7)
                          sub_20E860B7C();
                        if (v305 >= 0x17)
                        {
                          v319 = (v305 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v305 | 7) != 0x17)
                            v319 = v305 | 7;
                          v320 = v319 + 1;
                          v318 = operator new(v319 + 1);
                          *(_QWORD *)&v516[24] = v305;
                          *(_QWORD *)&v516[32] = v320 | 0x8000000000000000;
                          *(_QWORD *)&v516[16] = v318;
                        }
                        else
                        {
                          v516[39] = v305;
                          if (!v305)
                            goto LABEL_491;
                        }
                        memmove(v318, v304, v305);
LABEL_491:
                        v318[v305] = 0;
                        LOBYTE(v517) = 1;
                        v321 = *(NSObject **)value;
                        if ((v516[39] & 0x80000000) != 0)
                          operator delete(*(void **)&v516[16]);
                        if (v516[8] && (v516[7] & 0x80000000) != 0)
                          operator delete(*(void **)&value[8]);
                        if (*(_QWORD *)value)
                          os_release(*(void **)value);
                        if (v302 && *(_QWORD *)(v302 + 24))
                        {
                          v322 = _os_log_pack_size();
                          v323 = (std::__shared_weak_count_vtbl *)operator new(v322, (std::align_val_t)8uLL);
                          v324 = (std::__shared_weak_count *)operator new();
                          v325 = v324;
                          v324->__shared_owners_ = 0;
                          v326 = (unint64_t *)&v324->__shared_owners_;
                          v324->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                          v324->__shared_weak_owners_ = 0;
                          v324[1].__vftable = v323;
                          *(_QWORD *)value = v323;
                          *(_QWORD *)&value[8] = v323;
                          *(_QWORD *)&value[16] = v324;
                          do
                            v327 = __ldxr(v326);
                          while (__stxr(v327 + 1, v326));
                          memset(v516, 0, 24);
                          do
                            v328 = __ldaxr(v326);
                          while (__stlxr(v328 - 1, v326));
                          if (!v328)
                          {
                            ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
                            std::__shared_weak_count::__release_weak(v325);
                          }
                          v329 = *(_QWORD *)value;
                          v330 = _os_log_pack_fill();
                          v331 = theDict[0];
                          v332 = theDict[1];
                          v333 = v471;
                          v334 = v472;
                          v335 = v473;
                          v336 = v474;
                          *(_DWORD *)v330 = 134220032;
                          *(_QWORD *)(v330 + 4) = v331;
                          *(_WORD *)(v330 + 12) = 2048;
                          *(_QWORD *)(v330 + 14) = v332;
                          *(_WORD *)(v330 + 22) = 2048;
                          *(_QWORD *)(v330 + 24) = v333;
                          *(_WORD *)(v330 + 32) = 2048;
                          *(_QWORD *)(v330 + 34) = *((_QWORD *)&v333 + 1);
                          *(_WORD *)(v330 + 42) = 2048;
                          *(_QWORD *)(v330 + 44) = v334;
                          *(_WORD *)(v330 + 52) = 2048;
                          *(_QWORD *)(v330 + 54) = *((_QWORD *)&v334 + 1);
                          *(_WORD *)(v330 + 62) = 2048;
                          *(_QWORD *)(v330 + 64) = v335;
                          *(_WORD *)(v330 + 72) = 2048;
                          *(_QWORD *)(v330 + 74) = *((_QWORD *)&v335 + 1);
                          *(_WORD *)(v330 + 82) = 2048;
                          *(double *)(v330 + 84) = v336;
                          v337 = operator new();
                          v338 = *(unsigned __int8 *)(v303 + 39);
                          v339 = *(const char **)(v303 + 16);
                          v340 = *(_QWORD *)(v303 + 24);
                          v341 = *(_OWORD *)v516;
                          *(_OWORD *)(v337 + 8) = *(_OWORD *)&value[8];
                          if ((v338 & 0x80u) != 0)
                            v338 = v340;
                          else
                            v339 = v453;
                          *(_QWORD *)v337 = v329;
                          *(_QWORD *)&value[8] = 0;
                          *(_QWORD *)&value[16] = 0;
                          *(_OWORD *)(v337 + 24) = v341;
                          *(_QWORD *)v516 = 0;
                          *(_QWORD *)&v516[8] = 0;
                          *(_QWORD *)(v337 + 40) = v339;
                          *(_QWORD *)(v337 + 48) = v338;
                          *(_BYTE *)(v337 + 56) = 1;
                          *(_QWORD *)v514 = 0;
                          __dst = v337;
                          (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v302 + 24) + 40))(*(_QWORD *)(v302 + 24), &__dst);
                          v342 = __dst;
                          __dst = 0;
                          if (v342)
                          {
                            v343 = *(std::__shared_weak_count **)(v342 + 32);
                            if (v343)
                            {
                              v344 = (unint64_t *)&v343->__shared_owners_;
                              do
                                v345 = __ldaxr(v344);
                              while (__stlxr(v345 - 1, v344));
                              if (!v345)
                              {
                                ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                                std::__shared_weak_count::__release_weak(v343);
                              }
                            }
                            v346 = *(std::__shared_weak_count **)(v342 + 16);
                            if (v346)
                            {
                              v347 = (unint64_t *)&v346->__shared_owners_;
                              do
                                v348 = __ldaxr(v347);
                              while (__stlxr(v348 - 1, v347));
                              if (!v348)
                              {
                                ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
                                std::__shared_weak_count::__release_weak(v346);
                              }
                            }
                            MEMORY[0x212BC6398](v342, 0x10F0C40B62ED6C6);
                            v349 = *(_QWORD *)v514;
                            *(_QWORD *)v514 = 0;
                            if (v349)
                            {
                              v350 = *(std::__shared_weak_count **)(v349 + 32);
                              if (v350)
                              {
                                v351 = (unint64_t *)&v350->__shared_owners_;
                                do
                                  v352 = __ldaxr(v351);
                                while (__stlxr(v352 - 1, v351));
                                if (!v352)
                                {
                                  ((void (*)(std::__shared_weak_count *))v350->__on_zero_shared)(v350);
                                  std::__shared_weak_count::__release_weak(v350);
                                }
                              }
                              v353 = *(std::__shared_weak_count **)(v349 + 16);
                              if (v353)
                              {
                                v354 = (unint64_t *)&v353->__shared_owners_;
                                do
                                  v355 = __ldaxr(v354);
                                while (__stlxr(v355 - 1, v354));
                                if (!v355)
                                {
                                  ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
                                  std::__shared_weak_count::__release_weak(v353);
                                }
                              }
                              MEMORY[0x212BC6398](v349, 0x10F0C40B62ED6C6);
                            }
                          }
                          v356 = *(std::__shared_weak_count **)&v516[8];
                          v357 = v459;
                          if (*(_QWORD *)&v516[8])
                          {
                            v358 = (unint64_t *)(*(_QWORD *)&v516[8] + 8);
                            do
                              v359 = __ldaxr(v358);
                            while (__stlxr(v359 - 1, v358));
                            if (!v359)
                            {
                              ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
                              std::__shared_weak_count::__release_weak(v356);
                            }
                          }
                          v360 = *(std::__shared_weak_count **)&value[16];
                          if (*(_QWORD *)&value[16])
                          {
                            v361 = (unint64_t *)(*(_QWORD *)&value[16] + 8);
                            do
                              v362 = __ldaxr(v361);
                            while (__stlxr(v362 - 1, v361));
                            if (!v362)
                            {
                              ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
                              std::__shared_weak_count::__release_weak(v360);
                            }
                          }
                        }
                        else
                        {
                          os_log_type_enabled(v321, OS_LOG_TYPE_INFO);
                          *(_DWORD *)value = 134220032;
                          *(CFDictionaryRef *)&value[4] = theDict[0];
                          *(_WORD *)&value[12] = 2048;
                          *(CFDictionaryRef *)&value[14] = theDict[1];
                          *(_WORD *)&value[22] = 2048;
                          *(_QWORD *)v516 = v471;
                          *(_WORD *)&v516[8] = 2048;
                          *(_QWORD *)&v516[10] = *((_QWORD *)&v471 + 1);
                          *(_WORD *)&v516[18] = 2048;
                          *(_QWORD *)&v516[20] = v472;
                          *(_WORD *)&v516[28] = 2048;
                          *(_QWORD *)&v516[30] = *((_QWORD *)&v472 + 1);
                          *(_WORD *)&v516[38] = 2048;
                          v517 = v473;
                          v518 = 2048;
                          v519 = *((_QWORD *)&v473 + 1);
                          v520 = 2048;
                          v521 = v474;
                          v363 = (void *)_os_log_send_and_compose_impl();
                          v357 = v459;
                          if (v363)
                            free(v363);
                        }
                        if (v357)
                        {
                          sub_20E8C003C((uint64_t)&v461, "Loaded camera extrinsics from previous execution as rotation matrix: [[%lf, %lf, %lf], [%lf, %lf, %lf], [%lf, %lf, %lf]]", *(double *)theDict, *(double *)&theDict[1], *(double *)&v471, *((double *)&v471 + 1), *(double *)&v472, *((double *)&v472 + 1), *(double *)&v473, *((double *)&v473 + 1), v474);
                          sub_20E863570((uint64_t)&v461);
                        }
                        sub_20E863570((uint64_t)&v461);
                        v364 = v469;
                        if (v469)
                        {
                          v365 = (unint64_t *)&v469->__shared_owners_;
                          do
                            v366 = __ldaxr(v365);
                          while (__stlxr(v366 - 1, v365));
                          if (!v366)
                          {
                            ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                            std::__shared_weak_count::__release_weak(v364);
                          }
                        }
                        goto LABEL_551;
                      }
                    }
                    memmove(v315, v313, v314);
                    goto LABEL_483;
                  }
                  sub_20E9D829C(&v476);
                  if (**(int **)(v476 + 56) > 3)
                    goto LABEL_552;
                  v306 = *(unsigned __int8 *)(v476 + 72);
                  v307 = sub_20E8C31DC(v476, "OSLogSurrogateAppender", 1, 0);
                  v308 = v307;
                  if (!v306 && !v307)
                    goto LABEL_552;
                  v460 = v306;
                  v461 = &v476;
                  rep = std::chrono::steady_clock::now().__d_.__rep_;
                  v463 = (std::__shared_weak_count *)std::chrono::system_clock::now().__d_.__rep_;
                  LODWORD(v464) = 3;
                  v465 = "unknown file";
                  v466 = 168;
                  v468 = 0;
                  v469 = 0;
                  v467 = "unknown function";
                  v309 = *v461;
                  v310 = (const char *)(*v461 + 16);
                  v454 = v310;
                  if (*(char *)(*v461 + 39) < 0)
                  {
                    v310 = *(const char **)(v309 + 16);
                    v311 = *(_QWORD *)(v309 + 24);
                  }
                  else
                  {
                    v311 = *(unsigned __int8 *)(*v461 + 39);
                  }
                  v395 = atomic_load((unsigned __int8 *)&qword_254A4A510);
                  if ((v395 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
                  {
                    sub_20E9E46F8((uint64_t)value);
                    sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
                    if (v516[0] && (value[23] & 0x80000000) != 0)
                      operator delete(*(void **)value);
                    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                    __cxa_guard_release(&qword_254A4A510);
                  }
                  if (byte_254A4A4F8[23] >= 0)
                    v396 = byte_254A4A4F8;
                  else
                    v396 = *(const char **)byte_254A4A4F8;
                  if (byte_254A4A4F8[23] >= 0)
                    v397 = byte_254A4A4F8[23];
                  else
                    v397 = *(_QWORD *)&byte_254A4A4F8[8];
                  *(_QWORD *)value = os_log_create(v396, v310);
                  v398 = &value[8];
                  if (v397 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v397 >= 0x17)
                  {
                    v399 = (v397 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v397 | 7) != 0x17)
                      v399 = v397 | 7;
                    v400 = v399 + 1;
                    v398 = operator new(v399 + 1);
                    *(_QWORD *)&value[16] = v397;
                    *(_QWORD *)v516 = v400 | 0x8000000000000000;
                    *(_QWORD *)&value[8] = v398;
                  }
                  else
                  {
                    v516[7] = v397;
                    if (!v397)
                    {
LABEL_587:
                      v398[v397] = 0;
                      v516[8] = 1;
                      v401 = &v516[16];
                      if (v311 > 0x7FFFFFFFFFFFFFF7)
                        sub_20E860B7C();
                      if (v311 >= 0x17)
                      {
                        v402 = (v311 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v311 | 7) != 0x17)
                          v402 = v311 | 7;
                        v403 = v402 + 1;
                        v401 = operator new(v402 + 1);
                        *(_QWORD *)&v516[24] = v311;
                        *(_QWORD *)&v516[32] = v403 | 0x8000000000000000;
                        *(_QWORD *)&v516[16] = v401;
                      }
                      else
                      {
                        v516[39] = v311;
                        if (!v311)
                          goto LABEL_595;
                      }
                      memmove(v401, v310, v311);
LABEL_595:
                      v401[v311] = 0;
                      LOBYTE(v517) = 1;
                      v404 = *(NSObject **)value;
                      if ((v516[39] & 0x80000000) != 0)
                        operator delete(*(void **)&v516[16]);
                      if (v516[8] && (v516[7] & 0x80000000) != 0)
                        operator delete(*(void **)&value[8]);
                      if (*(_QWORD *)value)
                        os_release(*(void **)value);
                      if (v308 && *(_QWORD *)(v308 + 24))
                      {
                        v405 = _os_log_pack_size();
                        v406 = (std::__shared_weak_count_vtbl *)operator new(v405, (std::align_val_t)8uLL);
                        v407 = (std::__shared_weak_count *)operator new();
                        v408 = v407;
                        v407->__shared_owners_ = 0;
                        v409 = (unint64_t *)&v407->__shared_owners_;
                        v407->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                        v407->__shared_weak_owners_ = 0;
                        v407[1].__vftable = v406;
                        *(_QWORD *)value = v406;
                        *(_QWORD *)&value[8] = v406;
                        *(_QWORD *)&value[16] = v407;
                        do
                          v410 = __ldxr(v409);
                        while (__stxr(v410 + 1, v409));
                        memset(v516, 0, 24);
                        do
                          v411 = __ldaxr(v409);
                        while (__stlxr(v411 - 1, v409));
                        if (!v411)
                        {
                          ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
                          std::__shared_weak_count::__release_weak(v408);
                        }
                        v412 = *(_QWORD *)value;
                        *(_WORD *)_os_log_pack_fill() = 0;
                        v413 = operator new();
                        v414 = *(unsigned __int8 *)(v309 + 39);
                        v415 = *(const char **)(v309 + 16);
                        v416 = *(_QWORD *)(v309 + 24);
                        v417 = *(_OWORD *)v516;
                        *(_OWORD *)(v413 + 8) = *(_OWORD *)&value[8];
                        if ((v414 & 0x80u) != 0)
                          v414 = v416;
                        else
                          v415 = v454;
                        *(_QWORD *)v413 = v412;
                        *(_QWORD *)&value[8] = 0;
                        *(_QWORD *)&value[16] = 0;
                        *(_OWORD *)(v413 + 24) = v417;
                        *(_QWORD *)v516 = 0;
                        *(_QWORD *)&v516[8] = 0;
                        *(_QWORD *)(v413 + 40) = v415;
                        *(_QWORD *)(v413 + 48) = v414;
                        *(_BYTE *)(v413 + 56) = 1;
                        *(_QWORD *)v514 = 0;
                        __dst = v413;
                        (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v308 + 24) + 40))(*(_QWORD *)(v308 + 24), &__dst);
                        v418 = __dst;
                        __dst = 0;
                        if (v418)
                        {
                          v419 = *(std::__shared_weak_count **)(v418 + 32);
                          if (v419)
                          {
                            v420 = (unint64_t *)&v419->__shared_owners_;
                            do
                              v421 = __ldaxr(v420);
                            while (__stlxr(v421 - 1, v420));
                            if (!v421)
                            {
                              ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
                              std::__shared_weak_count::__release_weak(v419);
                            }
                          }
                          v422 = *(std::__shared_weak_count **)(v418 + 16);
                          if (v422)
                          {
                            v423 = (unint64_t *)&v422->__shared_owners_;
                            do
                              v424 = __ldaxr(v423);
                            while (__stlxr(v424 - 1, v423));
                            if (!v424)
                            {
                              ((void (*)(std::__shared_weak_count *))v422->__on_zero_shared)(v422);
                              std::__shared_weak_count::__release_weak(v422);
                            }
                          }
                          MEMORY[0x212BC6398](v418, 0x10F0C40B62ED6C6);
                          v425 = *(_QWORD *)v514;
                          *(_QWORD *)v514 = 0;
                          if (v425)
                          {
                            v426 = *(std::__shared_weak_count **)(v425 + 32);
                            if (v426)
                            {
                              v427 = (unint64_t *)&v426->__shared_owners_;
                              do
                                v428 = __ldaxr(v427);
                              while (__stlxr(v428 - 1, v427));
                              if (!v428)
                              {
                                ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
                                std::__shared_weak_count::__release_weak(v426);
                              }
                            }
                            v429 = *(std::__shared_weak_count **)(v425 + 16);
                            if (v429)
                            {
                              v430 = (unint64_t *)&v429->__shared_owners_;
                              do
                                v431 = __ldaxr(v430);
                              while (__stlxr(v431 - 1, v430));
                              if (!v431)
                              {
                                ((void (*)(std::__shared_weak_count *))v429->__on_zero_shared)(v429);
                                std::__shared_weak_count::__release_weak(v429);
                              }
                            }
                            MEMORY[0x212BC6398](v425, 0x10F0C40B62ED6C6);
                          }
                        }
                        v432 = *(std::__shared_weak_count **)&v516[8];
                        v433 = v460;
                        if (*(_QWORD *)&v516[8])
                        {
                          v434 = (unint64_t *)(*(_QWORD *)&v516[8] + 8);
                          do
                            v435 = __ldaxr(v434);
                          while (__stlxr(v435 - 1, v434));
                          if (!v435)
                          {
                            ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
                            std::__shared_weak_count::__release_weak(v432);
                          }
                        }
                        v436 = *(std::__shared_weak_count **)&value[16];
                        if (*(_QWORD *)&value[16])
                        {
                          v437 = (unint64_t *)(*(_QWORD *)&value[16] + 8);
                          do
                            v438 = __ldaxr(v437);
                          while (__stlxr(v438 - 1, v437));
                          if (!v438)
                          {
                            ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
                            std::__shared_weak_count::__release_weak(v436);
                          }
                        }
                      }
                      else
                      {
                        os_log_type_enabled(v404, OS_LOG_TYPE_INFO);
                        *(_WORD *)value = 0;
                        v439 = (void *)_os_log_send_and_compose_impl();
                        v433 = v460;
                        if (v439)
                          free(v439);
                      }
                      if (v433)
                      {
                        sub_20E8C003C((uint64_t)&v461, "Attempted to load extrinsics, but none found.");
                        sub_20E863570((uint64_t)&v461);
                      }
                      sub_20E863570((uint64_t)&v461);
                      v440 = v469;
                      if (v469)
                      {
                        v441 = (unint64_t *)&v469->__shared_owners_;
                        do
                          v442 = __ldaxr(v441);
                        while (__stlxr(v442 - 1, v441));
                        if (!v442)
                        {
                          ((void (*)(std::__shared_weak_count *))v440->__on_zero_shared)(v440);
                          std::__shared_weak_count::__release_weak(v440);
                        }
                      }
                      goto LABEL_552;
                    }
                  }
                  memmove(v398, v396, v397);
                  goto LABEL_587;
                }
              }
              memmove(v250, v73, v74);
              goto LABEL_382;
            }
          }
          memmove(v247, v245, v246);
          goto LABEL_374;
        }
      }
    }
    else
    {
      theDict[0] = *(CFDictionaryRef *)value;
      theDict[1] = 0;
      if (*(_QWORD *)value)
        goto LABEL_31;
    }
    v34 = 0;
    v35 = (std::__shared_weak_count *)theDict[1];
    if (!theDict[1])
      goto LABEL_52;
    goto LABEL_49;
  }
  sub_20E9D829C(v514);
  if (**(int **)(*(_QWORD *)v514 + 56) <= 5)
  {
    v36 = *(unsigned __int8 *)(*(_QWORD *)v514 + 72);
    v37 = sub_20E8C31DC(*(uint64_t *)v514, "OSLogSurrogateAppender", 1, 0);
    v38 = v37;
    if (v36 || v37 != 0)
    {
      theDict[0] = (CFDictionaryRef)v514;
      theDict[1] = (CFDictionaryRef)std::chrono::steady_clock::now().__d_.__rep_;
      *(std::chrono::system_clock::time_point *)&v471 = std::chrono::system_clock::now();
      DWORD2(v471) = 5;
      *(_QWORD *)&v472 = "unknown file";
      DWORD2(v472) = 132;
      *((_QWORD *)&v473 + 1) = 0;
      v474 = 0.0;
      *(_QWORD *)&v473 = "unknown function";
      v449 = *(_QWORD *)v514;
      if (*(char *)(*(_QWORD *)v514 + 39) < 0)
      {
        v41 = *(const char **)(*(_QWORD *)v514 + 16);
        v40 = *(_QWORD *)(*(_QWORD *)v514 + 24);
        v455 = *(_QWORD *)v514 + 16;
        v133 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v133 & 1) != 0)
          goto LABEL_188;
      }
      else
      {
        v40 = *(unsigned __int8 *)(*(_QWORD *)v514 + 39);
        v41 = (const char *)(*(_QWORD *)v514 + 16);
        v455 = *(_QWORD *)v514 + 16;
        v42 = atomic_load((unsigned __int8 *)&qword_254A4A510);
        if ((v42 & 1) != 0)
          goto LABEL_188;
      }
      if (__cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)value);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
        if (v516[0] && (value[23] & 0x80000000) != 0)
          operator delete(*(void **)value);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
LABEL_188:
      if (byte_254A4A4F8[23] >= 0)
        v134 = byte_254A4A4F8;
      else
        v134 = *(const char **)byte_254A4A4F8;
      if (byte_254A4A4F8[23] >= 0)
        v135 = byte_254A4A4F8[23];
      else
        v135 = *(_QWORD *)&byte_254A4A4F8[8];
      *(_QWORD *)value = os_log_create(v134, v41);
      v136 = &value[8];
      if (v135 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v135 >= 0x17)
      {
        v137 = v38;
        v138 = v41;
        v139 = v36;
        v140 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v135 | 7) != 0x17)
          v140 = v135 | 7;
        v141 = v140 + 1;
        v136 = operator new(v140 + 1);
        *(_QWORD *)&value[16] = v135;
        *(_QWORD *)v516 = v141 | 0x8000000000000000;
        *(_QWORD *)&value[8] = v136;
        v36 = v139;
        v41 = v138;
        v38 = v137;
      }
      else
      {
        v516[7] = v135;
        if (!v135)
        {
LABEL_202:
          v136[v135] = 0;
          v516[8] = 1;
          v142 = &v516[16];
          if (v40 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v40 >= 0x17)
          {
            v143 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v40 | 7) != 0x17)
              v143 = v40 | 7;
            v144 = v143 + 1;
            v142 = operator new(v143 + 1);
            *(_QWORD *)&v516[24] = v40;
            *(_QWORD *)&v516[32] = v144 | 0x8000000000000000;
            *(_QWORD *)&v516[16] = v142;
          }
          else
          {
            v516[39] = v40;
            if (!v40)
              goto LABEL_210;
          }
          memmove(v142, v41, v40);
LABEL_210:
          v142[v40] = 0;
          LOBYTE(v517) = 1;
          v145 = *(NSObject **)value;
          if ((v516[39] & 0x80000000) != 0)
            operator delete(*(void **)&v516[16]);
          if (v516[8] && (v516[7] & 0x80000000) != 0)
            operator delete(*(void **)&value[8]);
          if (*(_QWORD *)value)
            os_release(*(void **)value);
          if (v38 && *(_QWORD *)(v38 + 24))
          {
            v146 = _os_log_pack_size();
            v147 = (std::__shared_weak_count_vtbl *)operator new(v146, (std::align_val_t)8uLL);
            v148 = (std::__shared_weak_count *)operator new();
            v149 = v148;
            v148->__shared_owners_ = 0;
            v150 = (unint64_t *)&v148->__shared_owners_;
            v148->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v148->__shared_weak_owners_ = 0;
            v148[1].__vftable = v147;
            *(_QWORD *)value = v147;
            *(_QWORD *)&value[8] = v147;
            *(_QWORD *)&value[16] = v148;
            do
              v151 = __ldxr(v150);
            while (__stxr(v151 + 1, v150));
            memset(v516, 0, 24);
            do
              v152 = __ldaxr(v150);
            while (__stlxr(v152 - 1, v150));
            if (!v152)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v149);
            }
            v153 = *(_QWORD *)value;
            *(_WORD *)_os_log_pack_fill() = 0;
            v154 = operator new();
            v155 = *(unsigned __int8 *)(v449 + 39);
            v156 = *(_QWORD *)(v449 + 16);
            v157 = *(_QWORD *)(v449 + 24);
            v158 = *(_OWORD *)v516;
            *(_OWORD *)(v154 + 8) = *(_OWORD *)&value[8];
            if ((v155 & 0x80u) != 0)
              v155 = v157;
            else
              v156 = v455;
            *(_QWORD *)v154 = v153;
            *(_QWORD *)&value[8] = 0;
            *(_QWORD *)&value[16] = 0;
            *(_OWORD *)(v154 + 24) = v158;
            *(_QWORD *)v516 = 0;
            *(_QWORD *)&v516[8] = 0;
            *(_QWORD *)(v154 + 40) = v156;
            *(_QWORD *)(v154 + 48) = v155;
            *(_BYTE *)(v154 + 56) = 16;
            __dst = 0;
            v461 = (uint64_t *)v154;
            (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)(v38 + 24) + 40))(*(_QWORD *)(v38 + 24), &v461);
            v159 = v461;
            v461 = 0;
            if (v159)
            {
              v160 = (std::__shared_weak_count *)v159[4];
              if (v160)
              {
                v161 = (unint64_t *)&v160->__shared_owners_;
                do
                  v162 = __ldaxr(v161);
                while (__stlxr(v162 - 1, v161));
                if (!v162)
                {
                  ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
                  std::__shared_weak_count::__release_weak(v160);
                }
              }
              v163 = (std::__shared_weak_count *)v159[2];
              if (v163)
              {
                v164 = (unint64_t *)&v163->__shared_owners_;
                do
                  v165 = __ldaxr(v164);
                while (__stlxr(v165 - 1, v164));
                if (!v165)
                {
                  ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                  std::__shared_weak_count::__release_weak(v163);
                }
              }
              MEMORY[0x212BC6398](v159, 0x10F0C40B62ED6C6);
              v166 = __dst;
              __dst = 0;
              if (v166)
              {
                v167 = *(std::__shared_weak_count **)(v166 + 32);
                if (v167)
                {
                  v168 = (unint64_t *)&v167->__shared_owners_;
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                  if (!v169)
                  {
                    ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
                    std::__shared_weak_count::__release_weak(v167);
                  }
                }
                v170 = *(std::__shared_weak_count **)(v166 + 16);
                if (v170)
                {
                  v171 = (unint64_t *)&v170->__shared_owners_;
                  do
                    v172 = __ldaxr(v171);
                  while (__stlxr(v172 - 1, v171));
                  if (!v172)
                  {
                    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                    std::__shared_weak_count::__release_weak(v170);
                  }
                }
                MEMORY[0x212BC6398](v166, 0x10F0C40B62ED6C6);
              }
            }
            v173 = *(std::__shared_weak_count **)&v516[8];
            if (*(_QWORD *)&v516[8])
            {
              v174 = (unint64_t *)(*(_QWORD *)&v516[8] + 8);
              do
                v175 = __ldaxr(v174);
              while (__stlxr(v175 - 1, v174));
              if (!v175)
              {
                ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
                std::__shared_weak_count::__release_weak(v173);
              }
            }
            v176 = *(std::__shared_weak_count **)&value[16];
            if (*(_QWORD *)&value[16])
            {
              v177 = (unint64_t *)(*(_QWORD *)&value[16] + 8);
              do
                v178 = __ldaxr(v177);
              while (__stlxr(v178 - 1, v177));
              if (!v178)
              {
                ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                std::__shared_weak_count::__release_weak(v176);
              }
            }
          }
          else
          {
            os_log_type_enabled(v145, OS_LOG_TYPE_ERROR);
            *(_WORD *)value = 0;
            v179 = (void *)_os_log_send_and_compose_impl();
            if (v179)
              free(v179);
          }
          if (v36)
          {
            sub_20E8C003C((uint64_t)theDict, "Could not obtain application domain ID for user preferences!");
            sub_20E863570((uint64_t)theDict);
          }
          sub_20E863570((uint64_t)theDict);
          v180 = *(std::__shared_weak_count **)&v474;
          if (v474 != 0.0)
          {
            v181 = (unint64_t *)(*(_QWORD *)&v474 + 8);
            do
              v182 = __ldaxr(v181);
            while (__stlxr(v182 - 1, v181));
            if (!v182)
            {
              ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
              std::__shared_weak_count::__release_weak(v180);
            }
          }
          goto LABEL_270;
        }
      }
      memmove(v136, v134, v135);
      goto LABEL_202;
    }
  }
LABEL_270:
  sub_20E89E538(a1, (uint64_t *)a4);
  v183 = *(_OWORD *)(a4 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a4 + 448);
  *(_OWORD *)(a1 + 464) = v183;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a4 + 480);
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a4 + 496);
  v184 = *(_OWORD *)(a4 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a4 + 384);
  *(_OWORD *)(a1 + 400) = v184;
  v185 = *(_OWORD *)(a4 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a4 + 416);
  *(_OWORD *)(a1 + 432) = v185;
  v186 = *(_OWORD *)(a4 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a4 + 320);
  *(_OWORD *)(a1 + 336) = v186;
  v187 = *(_OWORD *)(a4 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a4 + 352);
  *(_OWORD *)(a1 + 368) = v187;
  v188 = *(_OWORD *)(a4 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a4 + 288);
  *(_OWORD *)(a1 + 304) = v188;
  v189 = *(_QWORD *)(a4 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a4 + 504);
  *(_QWORD *)(a1 + 512) = v189;
  if (v189)
  {
    v190 = (unint64_t *)(v189 + 8);
    do
      v191 = __ldxr(v190);
    while (__stxr(v191 + 1, v190));
  }
LABEL_553:
  if (v478 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v389 = (std::__shared_weak_count *)*((_QWORD *)&v510 + 1);
  if (*((_QWORD *)&v510 + 1))
  {
    v390 = (unint64_t *)(*((_QWORD *)&v510 + 1) + 8);
    do
      v391 = __ldaxr(v390);
    while (__stlxr(v391 - 1, v390));
    if (!v391)
    {
      ((void (*)(std::__shared_weak_count *))v389->__on_zero_shared)(v389);
      std::__shared_weak_count::__release_weak(v389);
    }
  }
  v392 = (std::__shared_weak_count *)*((_QWORD *)&v493 + 1);
  if (*((_QWORD *)&v493 + 1))
  {
    v393 = (unint64_t *)(*((_QWORD *)&v493 + 1) + 8);
    do
      v394 = __ldaxr(v393);
    while (__stlxr(v394 - 1, v393));
    if (!v394)
    {
      ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
      std::__shared_weak_count::__release_weak(v392);
    }
  }
  if ((_QWORD)v483)
  {
    *((_QWORD *)&v483 + 1) = v483;
    operator delete((void *)v483);
  }
  if (v481[0])
  {
    v481[1] = v481[0];
    operator delete(v481[0]);
  }
}

void sub_20E9D7E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,int a52,uint64_t a53)
{
  uint64_t v53;

  if (*(_BYTE *)(v53 - 184) && *(char *)(v53 - 185) < 0)
    operator delete(*(void **)(v53 - 208));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a25);
  if (a51)
  {
    if (a50 < 0)
    {
      operator delete(__p);
      sub_20E90BD50(&a53);
      _Unwind_Resume(a1);
    }
  }
  sub_20E90BD50(&a53);
  _Unwind_Resume(a1);
}

void sub_20E9D829C(_QWORD *a1)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A5ACA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ACA8))
  {
    sub_21021D3D8(&v5);
    sub_20E8610C0(__p, "cv3d.vio");
    sub_20E8C4068(&v5, (uint64_t)__p, &qword_254A5ACA0);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_254A5ACA8);
  }
  *a1 = qword_254A5ACA0;
}

void sub_20E9D8338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254A5ACA8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254A5ACA8);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9D8390(CFTypeRef cf)
{
  std::__shared_weak_count *v1;
  const __CFDictionary *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  void *v19;
  std::string *v20;
  size_t size;
  char **v22;
  unint64_t v23;
  unint64_t v24;
  char **v25;
  size_t v26;
  size_t v27;
  int v28;
  uint64_t v29;
  const __CFDictionary *theDict;
  std::__shared_weak_count *v32;
  std::string v33;
  char v34;
  void *value;
  std::__shared_weak_count *v36;

  sub_20E9DA754(&value, cf);
  v2 = (const __CFDictionary *)value;
  v1 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    v5 = v36;
    if (v36)
    {
      v6 = (unint64_t *)&v36->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    theDict = v2;
    v32 = v1;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    if (!v1)
      goto LABEL_23;
    v12 = (unint64_t *)&v1->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
      if (!v2)
        goto LABEL_32;
    }
    else
    {
LABEL_23:
      if (!v2)
        goto LABEL_32;
    }
  }
  else
  {
    theDict = (const __CFDictionary *)value;
    v32 = 0;
    if (!value)
      goto LABEL_32;
  }
  value = 0;
  if (CFSTR("CameraVideoMode")
    && CFDictionaryGetValueIfPresent(theDict, CFSTR("CameraVideoMode"), (const void **)&value))
  {
    sub_20EA5E5C4((CFIndex)value, &v33);
    v15 = v32;
    if (!v32)
      goto LABEL_36;
    goto LABEL_33;
  }
LABEL_32:
  v33.__r_.__value_.__s.__data_[0] = 0;
  v34 = 0;
  v15 = v32;
  if (!v32)
    goto LABEL_36;
LABEL_33:
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v34)
      goto LABEL_37;
    return 1;
  }
LABEL_36:
  if (!v34)
    return 1;
LABEL_37:
  v18 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
  v19 = (void *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v33;
  else
    v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    size = v33.__r_.__value_.__l.__size_;
  v22 = &off_24C9C16D0;
  v23 = 16;
  do
  {
    v24 = v23 >> 1;
    v25 = &v22[3 * (v23 >> 1)];
    v26 = (size_t)v25[1];
    if (size >= v26)
      v27 = (size_t)v25[1];
    else
      v27 = size;
    v28 = memcmp(*v25, v20, v27);
    if (v28)
    {
      if (v28 < 0)
        goto LABEL_44;
    }
    else if (v26 < size)
    {
LABEL_44:
      v22 = v25 + 3;
      v24 = v23 + ~v24;
    }
    v23 = v24;
  }
  while (v24);
  if (v22 != &off_24C9C1850 && v22[1] == (char *)size && !memcmp(*v22, v20, size))
  {
    v29 = *((unsigned int *)v22 + 4);
    if (v18 < 0)
LABEL_58:
      operator delete(v19);
  }
  else
  {
    v29 = 13;
    if (v18 < 0)
      goto LABEL_58;
  }
  return v29;
}

void sub_20E9D8670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9D8684(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  std::__shared_weak_count *v9;
  const __CFDictionary *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  CFDictionaryRef v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v24;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  CFDictionaryRef v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  const __CFBoolean *v40;
  CFTypeID TypeID;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::string *v52;
  std::__shared_weak_count *v53;
  const __CFDictionary *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  size_t v72;
  const char *v73;
  const __CFBoolean *v74;
  CFTypeID v75;
  int v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  size_t v84;
  const char *v85;
  const __CFBoolean *v86;
  CFTypeID v87;
  char v88;
  _BOOL4 v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  char v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v98;
  size_t v99;
  const char *v100;
  unsigned __int8 v101;
  const char *v102;
  size_t v103;
  void **v104;
  unint64_t v105;
  const char *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  size_t v114;
  std::__shared_weak_count_vtbl *v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unsigned __int8 v149;
  const char *v150;
  size_t v151;
  void **v152;
  unint64_t v153;
  const char *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  void **v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  size_t v162;
  std::__shared_weak_count_vtbl *v163;
  std::__shared_weak_count *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  unint64_t *v194;
  unsigned __int8 v195;
  size_t v196;
  const char *v197;
  void **v198;
  unint64_t v199;
  const char *v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  void **v204;
  uint64_t v205;
  uint64_t v206;
  NSObject *v207;
  size_t v208;
  std::__shared_weak_count_vtbl *v209;
  std::__shared_weak_count *v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  void *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  std::__shared_weak_count *v236;
  unint64_t *v237;
  unint64_t v238;
  void *v239;
  unint64_t *v240;
  __int128 v241;
  __int128 v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  void *value[66];
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  __int128 v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  __int128 v270;
  uint64_t v271;
  __int16 v272;
  uint64_t v273[2];
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  std::__shared_weak_count *v278;
  std::__shared_weak_count *v279;
  char v280;
  std::string __p;
  char v282;
  CFDictionaryRef v283;
  std::__shared_weak_count *v284;
  CFDictionaryRef v285;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v287;
  int v288;
  const char *v289;
  int v290;
  const char *v291;
  uint64_t v292;
  std::__shared_weak_count *v293;
  uint64_t v294;
  std::string v295;
  char v296;
  uint64_t v297;
  _QWORD v298[2];

  result = sub_20E9E13C4(a1, a2, a3);
  if (!(_DWORD)result)
    return result;
  sub_20E9DA754(value, a1);
  v10 = (const __CFDictionary *)value[0];
  v9 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v11 = (unint64_t *)((char *)value[1] + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v14 = (unint64_t *)((char *)value[1] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    do
      v16 = __ldxr(v11);
    while (__stxr(v16 + 1, v11));
    v283 = v10;
    v284 = v9;
    do
      v17 = __ldxr(v11);
    while (__stxr(v17 + 1, v11));
    do
      v18 = __ldaxr(v11);
    while (__stlxr(v18 - 1, v11));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    do
      v19 = __ldaxr(v11);
    while (__stlxr(v19 - 1, v11));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    v21 = v283;
    v20 = v284;
    if (!v284)
      goto LABEL_24;
    p_shared_owners = (unint64_t *)&v284->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      if (!v21)
      {
LABEL_35:
        __p.__r_.__value_.__s.__data_[0] = 0;
        v282 = 0;
        goto LABEL_36;
      }
    }
    else
    {
LABEL_24:
      if (!v21)
        goto LABEL_35;
    }
  }
  else
  {
    v283 = (CFDictionaryRef)value[0];
    v284 = 0;
    if (!value[0])
      goto LABEL_35;
  }
  value[0] = 0;
  if (!CFSTR("CalibrationForDeviceModel")
    || !CFDictionaryGetValueIfPresent(v283, CFSTR("CalibrationForDeviceModel"), (const void **)value))
  {
    goto LABEL_35;
  }
  sub_20EA5E5C4((CFIndex)value[0], &__p);
  if (!v282)
  {
LABEL_36:
    v285 = (CFDictionaryRef)&off_24C9B6C08;
    sub_20E9E60C8((uint64_t)&v285, (char *)value);
    v28 = HIBYTE(value[2]);
    if (SHIBYTE(value[2]) >= 0)
      v29 = value;
    else
      v29 = (void **)value[0];
    if (SHIBYTE(value[2]) < 0)
      v28 = (uint64_t)value[1];
    v273[0] = (uint64_t)v29;
    v273[1] = v28;
    v27 = sub_20EA8E754((uint64_t)v273);
    if (SHIBYTE(value[2]) < 0)
      operator delete(value[0]);
    goto LABEL_43;
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  value[0] = p_p;
  value[1] = (void *)size;
  v27 = sub_20EA8E754((uint64_t)value);
LABEL_43:
  v30 = sub_20E9D8390(a1);
  sub_20EA7A0A4(v27, v30);
  if (v280)
  {
    sub_20E92D63C(a2, v273);
    if (!a4)
      goto LABEL_46;
    v31 = *(unsigned __int8 *)(a4 + 176);
    *(_OWORD *)(a4 + 104) = *(_OWORD *)(a2 + 312);
    v33 = *(_OWORD *)(a2 + 344);
    v32 = *(_OWORD *)(a2 + 360);
    v34 = *(_QWORD *)(a2 + 376);
    *(_OWORD *)(a4 + 120) = *(_OWORD *)(a2 + 328);
    *(_QWORD *)(a4 + 168) = v34;
    *(_OWORD *)(a4 + 152) = v32;
    *(_OWORD *)(a4 + 136) = v33;
    if (!v31)
    {
      *(_BYTE *)(a4 + 176) = 1;
      v36 = v283;
      v35 = v284;
      if (!v284)
        goto LABEL_51;
    }
    else
    {
LABEL_46:
      v36 = v283;
      v35 = v284;
      if (!v284)
        goto LABEL_51;
    }
    v37 = (unint64_t *)&v35->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      if (!v36)
        goto LABEL_70;
      goto LABEL_52;
    }
LABEL_51:
    if (!v36)
      goto LABEL_70;
LABEL_52:
    value[0] = 0;
    if (CFSTR("DeterministicMode"))
    {
      if (CFDictionaryGetValueIfPresent(v283, CFSTR("DeterministicMode"), (const void **)value))
      {
        v40 = (const __CFBoolean *)value[0];
        if (value[0])
        {
          TypeID = CFBooleanGetTypeID();
          if (CFGetTypeID(v40) == TypeID)
          {
            LOWORD(v42) = (CFBooleanGetValue(v40) != 0) | 0x100;
            if ((unsigned __int16)v42 > 0xFFu)
            {
              v42 = v42;
              if (!a4)
                goto LABEL_87;
              goto LABEL_71;
            }
          }
        }
      }
    }
LABEL_70:
    v42 = 0;
    if (!a4)
      goto LABEL_87;
LABEL_71:
    if (!v42)
    {
      sub_20E9D4E18((uint64_t)value, a1, a4, a2);
      sub_20E9DA564(a2, (uint64_t *)value);
      v46 = (std::__shared_weak_count *)value[64];
      if (value[64])
      {
        v47 = (unint64_t *)((char *)value[64] + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v49 = (std::__shared_weak_count *)value[24];
      if (value[24])
      {
        v50 = (unint64_t *)((char *)value[24] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (value[5])
      {
        value[6] = value[5];
        operator delete(value[5]);
      }
      if (value[2])
      {
        value[3] = value[2];
        operator delete(value[2]);
      }
      goto LABEL_88;
    }
LABEL_87:
    if (!a4)
    {
LABEL_412:
      sub_20EA798F4(v27, (uint64_t)value);
      memcpy((void *)a3, value, 0x210uLL);
      v241 = v262;
      *(_OWORD *)(a3 + 560) = v261;
      *(_OWORD *)(a3 + 576) = v241;
      *(_QWORD *)(a3 + 592) = v263;
      v242 = v260;
      *(_OWORD *)(a3 + 528) = v259;
      *(_OWORD *)(a3 + 544) = v242;
      *(_OWORD *)(a3 + 600) = v264;
      *(_QWORD *)(a3 + 616) = v265;
      *(_QWORD *)(a3 + 640) = v267;
      *(_OWORD *)(a3 + 624) = v266;
      *(_OWORD *)(a3 + 648) = v268;
      *(_QWORD *)(a3 + 664) = v269;
      *(_OWORD *)(a3 + 672) = v270;
      *(_QWORD *)(a3 + 688) = v271;
      *(_WORD *)(a3 + 696) = v272;
      if (v280)
      {
        v243 = v279;
        if (v279)
        {
          v244 = (unint64_t *)&v279->__shared_owners_;
          do
            v245 = __ldaxr(v244);
          while (__stlxr(v245 - 1, v244));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
            std::__shared_weak_count::__release_weak(v243);
          }
        }
        v246 = v278;
        if (v278)
        {
          v247 = (unint64_t *)&v278->__shared_owners_;
          do
            v248 = __ldaxr(v247);
          while (__stlxr(v248 - 1, v247));
          if (!v248)
          {
            ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
            std::__shared_weak_count::__release_weak(v246);
          }
        }
        if (v276)
        {
          v277 = v276;
          operator delete(v276);
        }
        if (v274)
        {
          v275 = v274;
          operator delete(v274);
        }
      }
      if (v282 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v249 = v284;
      if (v284)
      {
        v250 = (unint64_t *)&v284->__shared_owners_;
        do
          v251 = __ldaxr(v250);
        while (__stlxr(v251 - 1, v250));
        if (!v251)
        {
          ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
          std::__shared_weak_count::__release_weak(v249);
        }
      }
      return 0;
    }
LABEL_88:
    sub_20EA5E5C4(*MEMORY[0x24BDBD580], &v295);
    if (v296)
    {
      if ((v295.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v295;
      else
        v52 = (std::string *)v295.__r_.__value_.__r.__words[0];
      sub_20E9DA754(value, a1);
      v54 = (const __CFDictionary *)value[0];
      v53 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v55 = (unint64_t *)((char *)value[1] + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
        v57 = (std::__shared_weak_count *)value[1];
        if (value[1])
        {
          v58 = (unint64_t *)((char *)value[1] + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        do
          v60 = __ldxr(v55);
        while (__stxr(v60 + 1, v55));
        v285 = v54;
        rep = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v53;
        do
          v61 = __ldxr(v55);
        while (__stxr(v61 + 1, v55));
        do
          v62 = __ldaxr(v55);
        while (__stlxr(v62 - 1, v55));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
        do
          v63 = __ldaxr(v55);
        while (__stlxr(v63 - 1, v55));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
        v54 = v285;
        v64 = (std::__shared_weak_count *)rep;
        if (rep)
        {
          v65 = (unint64_t *)(rep + 8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
          do
            v67 = __ldaxr(v65);
          while (__stlxr(v67 - 1, v65));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      else
      {
        v285 = (CFDictionaryRef)value[0];
        rep = 0;
      }
      if (v54)
      {
        value[0] = 0;
        if (CFSTR("SkipExtrinsicsSerialization")
          && CFDictionaryGetValueIfPresent(v285, CFSTR("SkipExtrinsicsSerialization"), (const void **)value)
          && (v74 = (const __CFBoolean *)value[0]) != 0
          && (v75 = CFBooleanGetTypeID(), CFGetTypeID(v74) == v75))
        {
          LODWORD(v54) = CFBooleanGetValue(v74) != 0;
          v76 = 1;
          v77 = (std::__shared_weak_count *)rep;
          if (!rep)
            goto LABEL_135;
        }
        else
        {
          v76 = 0;
          LODWORD(v54) = 0;
          v77 = (std::__shared_weak_count *)rep;
          if (!rep)
            goto LABEL_135;
        }
      }
      else
      {
        v76 = 0;
        v77 = (std::__shared_weak_count *)rep;
        if (!rep)
          goto LABEL_135;
      }
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
LABEL_135:
      if (v76)
      {
        if ((_DWORD)v54)
        {
          *(_BYTE *)(a4 + 184) = 0;
          sub_20E9D829C(&v294);
          if (**(int **)(v294 + 56) <= 3)
          {
            v80 = *(unsigned __int8 *)(v294 + 72);
            v81 = sub_20E8C31DC(v294, "OSLogSurrogateAppender", 1, 0);
            v82 = v81;
            if (v80 || v81)
            {
              v285 = (CFDictionaryRef)&v294;
              rep = std::chrono::steady_clock::now().__d_.__rep_;
              v287 = std::chrono::system_clock::now().__d_.__rep_;
              v288 = 3;
              v289 = "unknown file";
              v290 = 190;
              v292 = 0;
              v293 = 0;
              v291 = "unknown function";
              v83 = *(_QWORD *)v285;
              v256 = *(_QWORD *)v285;
              if (*(char *)(*(_QWORD *)v285 + 39) < 0)
              {
                v85 = *(const char **)(v83 + 16);
                v84 = *(_QWORD *)(v83 + 24);
              }
              else
              {
                v84 = *(unsigned __int8 *)(*(_QWORD *)v285 + 39);
                v85 = (const char *)(v83 + 16);
              }
              v253 = v83 + 16;
              v149 = atomic_load((unsigned __int8 *)&qword_254A4A510);
              if ((v149 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
              {
                sub_20E9E46F8((uint64_t)value);
                sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
                if (LOBYTE(value[3]) && SHIBYTE(value[2]) < 0)
                  operator delete(value[0]);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
                __cxa_guard_release(&qword_254A4A510);
              }
              if (byte_254A4A4F8[23] >= 0)
                v150 = byte_254A4A4F8;
              else
                v150 = *(const char **)byte_254A4A4F8;
              if (byte_254A4A4F8[23] >= 0)
                v151 = byte_254A4A4F8[23];
              else
                v151 = *(_QWORD *)&byte_254A4A4F8[8];
              value[0] = os_log_create(v150, v85);
              v152 = &value[1];
              if (v151 > 0x7FFFFFFFFFFFFFF7)
                sub_20E860B7C();
              if (v151 >= 0x17)
              {
                v153 = v82;
                v154 = v85;
                v155 = v80;
                v156 = (v151 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v151 | 7) != 0x17)
                  v156 = v151 | 7;
                v157 = v156 + 1;
                v152 = (void **)operator new(v156 + 1);
                value[2] = (void *)v151;
                value[3] = (void *)(v157 | 0x8000000000000000);
                value[1] = v152;
                v80 = v155;
                v85 = v154;
                v82 = v153;
              }
              else
              {
                HIBYTE(value[3]) = v151;
                if (!v151)
                {
LABEL_260:
                  *((_BYTE *)v152 + v151) = 0;
                  LOBYTE(value[4]) = 1;
                  v158 = &value[5];
                  if (v84 > 0x7FFFFFFFFFFFFFF7)
                    sub_20E860B7C();
                  if (v84 >= 0x17)
                  {
                    v159 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v84 | 7) != 0x17)
                      v159 = v84 | 7;
                    v160 = v159 + 1;
                    v158 = (void **)operator new(v159 + 1);
                    value[6] = (void *)v84;
                    value[7] = (void *)(v160 | 0x8000000000000000);
                    value[5] = v158;
                  }
                  else
                  {
                    HIBYTE(value[7]) = v84;
                    if (!v84)
                      goto LABEL_268;
                  }
                  memmove(v158, v85, v84);
LABEL_268:
                  *((_BYTE *)v158 + v84) = 0;
                  LOBYTE(value[8]) = 1;
                  v161 = value[0];
                  if (SHIBYTE(value[7]) < 0)
                    operator delete(value[5]);
                  if (LOBYTE(value[4]) && SHIBYTE(value[3]) < 0)
                    operator delete(value[1]);
                  if (value[0])
                    os_release(value[0]);
                  if (v82 && *(_QWORD *)(v82 + 24))
                  {
                    v162 = _os_log_pack_size();
                    v163 = (std::__shared_weak_count_vtbl *)operator new(v162, (std::align_val_t)8uLL);
                    v164 = (std::__shared_weak_count *)operator new();
                    v165 = v164;
                    v164->__shared_owners_ = 0;
                    v166 = (unint64_t *)&v164->__shared_owners_;
                    v164->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
                    v164->__shared_weak_owners_ = 0;
                    v164[1].__vftable = v163;
                    value[0] = v163;
                    value[1] = v163;
                    value[2] = v164;
                    do
                      v167 = __ldxr(v166);
                    while (__stxr(v167 + 1, v166));
                    memset(&value[3], 0, 24);
                    do
                      v168 = __ldaxr(v166);
                    while (__stlxr(v168 - 1, v166));
                    if (!v168)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v165);
                    }
                    v169 = value[0];
                    *(_WORD *)_os_log_pack_fill() = 0;
                    v170 = operator new();
                    v171 = *(unsigned __int8 *)(v256 + 39);
                    v172 = v253;
                    if ((v171 & 0x80u) != 0)
                    {
                      v172 = *(_QWORD *)(v256 + 16);
                      v171 = *(_QWORD *)(v256 + 24);
                    }
                    *(_QWORD *)v170 = v169;
                    *(_OWORD *)(v170 + 8) = *(_OWORD *)&value[1];
                    value[1] = 0;
                    value[2] = 0;
                    *(_OWORD *)(v170 + 24) = *(_OWORD *)&value[3];
                    *(_OWORD *)&value[3] = 0uLL;
                    *(_QWORD *)(v170 + 40) = v172;
                    *(_QWORD *)(v170 + 48) = v171;
                    *(_BYTE *)(v170 + 56) = 1;
                    v297 = 0;
                    v298[0] = v170;
                    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v82 + 24) + 40))(*(_QWORD *)(v82 + 24), v298);
                    v173 = v298[0];
                    v298[0] = 0;
                    if (v173)
                    {
                      v174 = *(std::__shared_weak_count **)(v173 + 32);
                      if (v174)
                      {
                        v175 = (unint64_t *)&v174->__shared_owners_;
                        do
                          v176 = __ldaxr(v175);
                        while (__stlxr(v176 - 1, v175));
                        if (!v176)
                        {
                          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
                          std::__shared_weak_count::__release_weak(v174);
                        }
                      }
                      v177 = *(std::__shared_weak_count **)(v173 + 16);
                      if (v177)
                      {
                        v178 = (unint64_t *)&v177->__shared_owners_;
                        do
                          v179 = __ldaxr(v178);
                        while (__stlxr(v179 - 1, v178));
                        if (!v179)
                        {
                          ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                          std::__shared_weak_count::__release_weak(v177);
                        }
                      }
                      MEMORY[0x212BC6398](v173, 0x10F0C40B62ED6C6);
                      v180 = v297;
                      v297 = 0;
                      if (v180)
                      {
                        v181 = *(std::__shared_weak_count **)(v180 + 32);
                        if (v181)
                        {
                          v182 = (unint64_t *)&v181->__shared_owners_;
                          do
                            v183 = __ldaxr(v182);
                          while (__stlxr(v183 - 1, v182));
                          if (!v183)
                          {
                            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
                            std::__shared_weak_count::__release_weak(v181);
                          }
                        }
                        v184 = *(std::__shared_weak_count **)(v180 + 16);
                        if (v184)
                        {
                          v185 = (unint64_t *)&v184->__shared_owners_;
                          do
                            v186 = __ldaxr(v185);
                          while (__stlxr(v186 - 1, v185));
                          if (!v186)
                          {
                            ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                            std::__shared_weak_count::__release_weak(v184);
                          }
                        }
                        MEMORY[0x212BC6398](v180, 0x10F0C40B62ED6C6);
                      }
                    }
                    v187 = (std::__shared_weak_count *)value[4];
                    if (value[4])
                    {
                      v188 = (unint64_t *)((char *)value[4] + 8);
                      do
                        v189 = __ldaxr(v188);
                      while (__stlxr(v189 - 1, v188));
                      if (!v189)
                      {
                        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                        std::__shared_weak_count::__release_weak(v187);
                      }
                    }
                    v190 = (std::__shared_weak_count *)value[2];
                    if (value[2])
                    {
                      v191 = (unint64_t *)((char *)value[2] + 8);
                      do
                        v192 = __ldaxr(v191);
                      while (__stlxr(v192 - 1, v191));
                      if (!v192)
                      {
                        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                        std::__shared_weak_count::__release_weak(v190);
                      }
                    }
                  }
                  else
                  {
                    os_log_type_enabled(v161, OS_LOG_TYPE_INFO);
                    LOWORD(value[0]) = 0;
                    v193 = (void *)_os_log_send_and_compose_impl();
                    if (v193)
                      free(v193);
                  }
                  if (v80)
                  {
                    sub_20E8C003C((uint64_t)&v285, "Disabling extrinsics serialization due to initialization parameters.");
                    sub_20E863570((uint64_t)&v285);
                  }
                  sub_20E863570((uint64_t)&v285);
                  v146 = v293;
                  if (!v293)
                    goto LABEL_409;
                  v194 = (unint64_t *)&v293->__shared_owners_;
                  do
                    v148 = __ldaxr(v194);
                  while (__stlxr(v148 - 1, v194));
                  goto LABEL_407;
                }
              }
              memmove(v152, v150, v151);
              goto LABEL_260;
            }
          }
        }
LABEL_409:
        if (v296 && SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v295.__r_.__value_.__l.__data_);
        goto LABEL_412;
      }
      sub_21010B45C((const char *)v52, "AppleCV3DSkipExtrinsicsSerialization", value);
      v86 = (const __CFBoolean *)value[0];
      if (value[0] && (v87 = CFBooleanGetTypeID(), CFGetTypeID(v86) == v87))
      {
        v88 = 0;
        v89 = CFBooleanGetValue(v86) != 0;
      }
      else
      {
        v89 = 0;
        v88 = 1;
      }
      v90 = (std::__shared_weak_count *)value[1];
      if (value[1])
      {
        v91 = (unint64_t *)((char *)value[1] + 8);
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (v89)
        v93 = v88;
      else
        v93 = 1;
      if ((v93 & 1) != 0)
        goto LABEL_409;
      *(_BYTE *)(a4 + 184) = 0;
      sub_20E9D829C(&v294);
      if (**(int **)(v294 + 56) > 3)
        goto LABEL_409;
      v94 = *(unsigned __int8 *)(v294 + 72);
      v95 = sub_20E8C31DC(v294, "OSLogSurrogateAppender", 1, 0);
      v96 = v95;
      if (!v94 && v95 == 0)
        goto LABEL_409;
      v285 = (CFDictionaryRef)&v294;
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      v287 = std::chrono::system_clock::now().__d_.__rep_;
      v288 = 3;
      v289 = "unknown file";
      v290 = 197;
      v292 = 0;
      v293 = 0;
      v291 = "unknown function";
      v98 = *(_QWORD *)v285;
      v257 = *(_QWORD *)v285;
      if (*(char *)(*(_QWORD *)v285 + 39) < 0)
      {
        v100 = *(const char **)(v98 + 16);
        v99 = *(_QWORD *)(v98 + 24);
      }
      else
      {
        v99 = *(unsigned __int8 *)(*(_QWORD *)v285 + 39);
        v100 = (const char *)(v98 + 16);
      }
      v254 = v98 + 16;
      v195 = atomic_load((unsigned __int8 *)&qword_254A4A510);
      if ((v195 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
      {
        sub_20E9E46F8((uint64_t)value);
        sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
        if (LOBYTE(value[3]) && SHIBYTE(value[2]) < 0)
          operator delete(value[0]);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
        __cxa_guard_release(&qword_254A4A510);
      }
      if (byte_254A4A4F8[23] >= 0)
        v196 = byte_254A4A4F8[23];
      else
        v196 = *(_QWORD *)&byte_254A4A4F8[8];
      if (byte_254A4A4F8[23] >= 0)
        v197 = byte_254A4A4F8;
      else
        v197 = *(const char **)byte_254A4A4F8;
      value[0] = os_log_create(v197, v100);
      v198 = &value[1];
      if (v196 > 0x7FFFFFFFFFFFFFF7)
        sub_20E860B7C();
      if (v196 >= 0x17)
      {
        v199 = v96;
        v200 = v100;
        v201 = v94;
        v202 = (v196 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v196 | 7) != 0x17)
          v202 = v196 | 7;
        v203 = v202 + 1;
        v198 = (void **)operator new(v202 + 1);
        value[2] = (void *)v196;
        value[3] = (void *)(v203 | 0x8000000000000000);
        value[1] = v198;
        v94 = v201;
        v100 = v200;
        v96 = v199;
      }
      else
      {
        HIBYTE(value[3]) = v196;
        if (!v196)
        {
LABEL_342:
          *((_BYTE *)v198 + v196) = 0;
          LOBYTE(value[4]) = 1;
          v204 = &value[5];
          if (v99 > 0x7FFFFFFFFFFFFFF7)
            sub_20E860B7C();
          if (v99 >= 0x17)
          {
            v205 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v99 | 7) != 0x17)
              v205 = v99 | 7;
            v206 = v205 + 1;
            v204 = (void **)operator new(v205 + 1);
            value[6] = (void *)v99;
            value[7] = (void *)(v206 | 0x8000000000000000);
            value[5] = v204;
          }
          else
          {
            HIBYTE(value[7]) = v99;
            if (!v99)
              goto LABEL_350;
          }
          memmove(v204, v100, v99);
LABEL_350:
          *((_BYTE *)v204 + v99) = 0;
          LOBYTE(value[8]) = 1;
          v207 = value[0];
          if (SHIBYTE(value[7]) < 0)
            operator delete(value[5]);
          if (LOBYTE(value[4]) && SHIBYTE(value[3]) < 0)
            operator delete(value[1]);
          if (value[0])
            os_release(value[0]);
          if (v96 && *(_QWORD *)(v96 + 24))
          {
            v208 = _os_log_pack_size();
            v209 = (std::__shared_weak_count_vtbl *)operator new(v208, (std::align_val_t)8uLL);
            v210 = (std::__shared_weak_count *)operator new();
            v211 = v210;
            v210->__shared_owners_ = 0;
            v212 = (unint64_t *)&v210->__shared_owners_;
            v210->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
            v210->__shared_weak_owners_ = 0;
            v210[1].__vftable = v209;
            value[0] = v209;
            value[1] = v209;
            value[2] = v210;
            do
              v213 = __ldxr(v212);
            while (__stxr(v213 + 1, v212));
            memset(&value[3], 0, 24);
            do
              v214 = __ldaxr(v212);
            while (__stlxr(v214 - 1, v212));
            if (!v214)
            {
              ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
              std::__shared_weak_count::__release_weak(v211);
            }
            v215 = value[0];
            *(_WORD *)_os_log_pack_fill() = 0;
            v216 = operator new();
            v217 = *(unsigned __int8 *)(v257 + 39);
            v218 = v254;
            if ((v217 & 0x80u) != 0)
            {
              v218 = *(_QWORD *)(v257 + 16);
              v217 = *(_QWORD *)(v257 + 24);
            }
            *(_QWORD *)v216 = v215;
            *(_OWORD *)(v216 + 8) = *(_OWORD *)&value[1];
            value[1] = 0;
            value[2] = 0;
            *(_OWORD *)(v216 + 24) = *(_OWORD *)&value[3];
            *(_OWORD *)&value[3] = 0uLL;
            *(_QWORD *)(v216 + 40) = v218;
            *(_QWORD *)(v216 + 48) = v217;
            *(_BYTE *)(v216 + 56) = 1;
            v297 = 0;
            v298[0] = v216;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v96 + 24) + 40))(*(_QWORD *)(v96 + 24), v298);
            v219 = v298[0];
            v298[0] = 0;
            if (v219)
            {
              v220 = *(std::__shared_weak_count **)(v219 + 32);
              if (v220)
              {
                v221 = (unint64_t *)&v220->__shared_owners_;
                do
                  v222 = __ldaxr(v221);
                while (__stlxr(v222 - 1, v221));
                if (!v222)
                {
                  ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                  std::__shared_weak_count::__release_weak(v220);
                }
              }
              v223 = *(std::__shared_weak_count **)(v219 + 16);
              if (v223)
              {
                v224 = (unint64_t *)&v223->__shared_owners_;
                do
                  v225 = __ldaxr(v224);
                while (__stlxr(v225 - 1, v224));
                if (!v225)
                {
                  ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                  std::__shared_weak_count::__release_weak(v223);
                }
              }
              MEMORY[0x212BC6398](v219, 0x10F0C40B62ED6C6);
              v226 = v297;
              v297 = 0;
              if (v226)
              {
                v227 = *(std::__shared_weak_count **)(v226 + 32);
                if (v227)
                {
                  v228 = (unint64_t *)&v227->__shared_owners_;
                  do
                    v229 = __ldaxr(v228);
                  while (__stlxr(v229 - 1, v228));
                  if (!v229)
                  {
                    ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                    std::__shared_weak_count::__release_weak(v227);
                  }
                }
                v230 = *(std::__shared_weak_count **)(v226 + 16);
                if (v230)
                {
                  v231 = (unint64_t *)&v230->__shared_owners_;
                  do
                    v232 = __ldaxr(v231);
                  while (__stlxr(v232 - 1, v231));
                  if (!v232)
                  {
                    ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
                    std::__shared_weak_count::__release_weak(v230);
                  }
                }
                MEMORY[0x212BC6398](v226, 0x10F0C40B62ED6C6);
              }
            }
            v233 = (std::__shared_weak_count *)value[4];
            if (value[4])
            {
              v234 = (unint64_t *)((char *)value[4] + 8);
              do
                v235 = __ldaxr(v234);
              while (__stlxr(v235 - 1, v234));
              if (!v235)
              {
                ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
                std::__shared_weak_count::__release_weak(v233);
              }
            }
            v236 = (std::__shared_weak_count *)value[2];
            if (value[2])
            {
              v237 = (unint64_t *)((char *)value[2] + 8);
              do
                v238 = __ldaxr(v237);
              while (__stlxr(v238 - 1, v237));
              if (!v238)
              {
                ((void (*)(std::__shared_weak_count *))v236->__on_zero_shared)(v236);
                std::__shared_weak_count::__release_weak(v236);
              }
            }
          }
          else
          {
            os_log_type_enabled(v207, OS_LOG_TYPE_INFO);
            LOWORD(value[0]) = 0;
            v239 = (void *)_os_log_send_and_compose_impl();
            if (v239)
              free(v239);
          }
          if (v94)
          {
            sub_20E8C003C((uint64_t)&v285, "Disabling extrinsics serialization due to application defaults.");
            sub_20E863570((uint64_t)&v285);
          }
          sub_20E863570((uint64_t)&v285);
          v146 = v293;
          if (!v293)
            goto LABEL_409;
          v240 = (unint64_t *)&v293->__shared_owners_;
          do
            v148 = __ldaxr(v240);
          while (__stlxr(v148 - 1, v240));
          goto LABEL_407;
        }
      }
      memmove(v198, v197, v196);
      goto LABEL_342;
    }
    sub_20E9D829C(&v294);
    if (**(int **)(v294 + 56) > 5)
      goto LABEL_409;
    v68 = *(unsigned __int8 *)(v294 + 72);
    v69 = sub_20E8C31DC(v294, "OSLogSurrogateAppender", 1, 0);
    v70 = v69;
    if (!v68 && !v69)
      goto LABEL_409;
    v285 = (CFDictionaryRef)&v294;
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    v287 = std::chrono::system_clock::now().__d_.__rep_;
    v288 = 5;
    v289 = "unknown file";
    v290 = 180;
    v292 = 0;
    v293 = 0;
    v291 = "unknown function";
    v71 = *(_QWORD *)v285;
    v255 = *(_QWORD *)v285;
    if (*(char *)(*(_QWORD *)v285 + 39) < 0)
    {
      v73 = *(const char **)(v71 + 16);
      v72 = *(_QWORD *)(v71 + 24);
    }
    else
    {
      v72 = *(unsigned __int8 *)(*(_QWORD *)v285 + 39);
      v73 = (const char *)(v71 + 16);
    }
    v252 = v71 + 16;
    v101 = atomic_load((unsigned __int8 *)&qword_254A4A510);
    if ((v101 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
    {
      sub_20E9E46F8((uint64_t)value);
      sub_20E86E4C8((uint64_t *)byte_254A4A4F8, "com.apple.cv3d", (unint64_t)value);
      if (LOBYTE(value[3]) && SHIBYTE(value[2]) < 0)
        operator delete(value[0]);
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], byte_254A4A4F8, &dword_20E81F000);
      __cxa_guard_release(&qword_254A4A510);
    }
    if (byte_254A4A4F8[23] >= 0)
      v102 = byte_254A4A4F8;
    else
      v102 = *(const char **)byte_254A4A4F8;
    if (byte_254A4A4F8[23] >= 0)
      v103 = byte_254A4A4F8[23];
    else
      v103 = *(_QWORD *)&byte_254A4A4F8[8];
    value[0] = os_log_create(v102, v73);
    v104 = &value[1];
    if (v103 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    if (v103 >= 0x17)
    {
      v105 = v70;
      v106 = v73;
      v107 = v68;
      v108 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v103 | 7) != 0x17)
        v108 = v103 | 7;
      v109 = v108 + 1;
      v104 = (void **)operator new(v108 + 1);
      value[2] = (void *)v103;
      value[3] = (void *)(v109 | 0x8000000000000000);
      value[1] = v104;
      v68 = v107;
      v73 = v106;
      v70 = v105;
    }
    else
    {
      HIBYTE(value[3]) = v103;
      if (!v103)
      {
LABEL_178:
        *((_BYTE *)v104 + v103) = 0;
        LOBYTE(value[4]) = 1;
        v110 = &value[5];
        if (v72 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v72 >= 0x17)
        {
          v111 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v72 | 7) != 0x17)
            v111 = v72 | 7;
          v112 = v111 + 1;
          v110 = (void **)operator new(v111 + 1);
          value[6] = (void *)v72;
          value[7] = (void *)(v112 | 0x8000000000000000);
          value[5] = v110;
        }
        else
        {
          HIBYTE(value[7]) = v72;
          if (!v72)
            goto LABEL_186;
        }
        memmove(v110, v73, v72);
LABEL_186:
        *((_BYTE *)v110 + v72) = 0;
        LOBYTE(value[8]) = 1;
        v113 = value[0];
        if (SHIBYTE(value[7]) < 0)
          operator delete(value[5]);
        if (LOBYTE(value[4]) && SHIBYTE(value[3]) < 0)
          operator delete(value[1]);
        if (value[0])
          os_release(value[0]);
        if (v70 && *(_QWORD *)(v70 + 24))
        {
          v114 = _os_log_pack_size();
          v115 = (std::__shared_weak_count_vtbl *)operator new(v114, (std::align_val_t)8uLL);
          v116 = (std::__shared_weak_count *)operator new();
          v117 = v116;
          v116->__shared_owners_ = 0;
          v118 = (unint64_t *)&v116->__shared_owners_;
          v116->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9ABB80;
          v116->__shared_weak_owners_ = 0;
          v116[1].__vftable = v115;
          value[0] = v115;
          value[1] = v115;
          value[2] = v116;
          do
            v119 = __ldxr(v118);
          while (__stxr(v119 + 1, v118));
          memset(&value[3], 0, 24);
          do
            v120 = __ldaxr(v118);
          while (__stlxr(v120 - 1, v118));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v117);
          }
          v121 = value[0];
          *(_WORD *)_os_log_pack_fill() = 0;
          v122 = operator new();
          v123 = *(unsigned __int8 *)(v255 + 39);
          v124 = v252;
          if ((v123 & 0x80u) != 0)
          {
            v124 = *(_QWORD *)(v255 + 16);
            v123 = *(_QWORD *)(v255 + 24);
          }
          *(_QWORD *)v122 = v121;
          *(_OWORD *)(v122 + 8) = *(_OWORD *)&value[1];
          value[1] = 0;
          value[2] = 0;
          *(_OWORD *)(v122 + 24) = *(_OWORD *)&value[3];
          *(_OWORD *)&value[3] = 0uLL;
          *(_QWORD *)(v122 + 40) = v124;
          *(_QWORD *)(v122 + 48) = v123;
          *(_BYTE *)(v122 + 56) = 16;
          v297 = 0;
          v298[0] = v122;
          (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v70 + 24) + 40))(*(_QWORD *)(v70 + 24), v298);
          v125 = v298[0];
          v298[0] = 0;
          if (v125)
          {
            v126 = *(std::__shared_weak_count **)(v125 + 32);
            if (v126)
            {
              v127 = (unint64_t *)&v126->__shared_owners_;
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
            v129 = *(std::__shared_weak_count **)(v125 + 16);
            if (v129)
            {
              v130 = (unint64_t *)&v129->__shared_owners_;
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            MEMORY[0x212BC6398](v125, 0x10F0C40B62ED6C6);
            v132 = v297;
            v297 = 0;
            if (v132)
            {
              v133 = *(std::__shared_weak_count **)(v132 + 32);
              if (v133)
              {
                v134 = (unint64_t *)&v133->__shared_owners_;
                do
                  v135 = __ldaxr(v134);
                while (__stlxr(v135 - 1, v134));
                if (!v135)
                {
                  ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                  std::__shared_weak_count::__release_weak(v133);
                }
              }
              v136 = *(std::__shared_weak_count **)(v132 + 16);
              if (v136)
              {
                v137 = (unint64_t *)&v136->__shared_owners_;
                do
                  v138 = __ldaxr(v137);
                while (__stlxr(v138 - 1, v137));
                if (!v138)
                {
                  ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                  std::__shared_weak_count::__release_weak(v136);
                }
              }
              MEMORY[0x212BC6398](v132, 0x10F0C40B62ED6C6);
            }
          }
          v139 = (std::__shared_weak_count *)value[4];
          if (value[4])
          {
            v140 = (unint64_t *)((char *)value[4] + 8);
            do
              v141 = __ldaxr(v140);
            while (__stlxr(v141 - 1, v140));
            if (!v141)
            {
              ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
              std::__shared_weak_count::__release_weak(v139);
            }
          }
          v142 = (std::__shared_weak_count *)value[2];
          if (value[2])
          {
            v143 = (unint64_t *)((char *)value[2] + 8);
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
            if (!v144)
            {
              ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
              std::__shared_weak_count::__release_weak(v142);
            }
          }
        }
        else
        {
          os_log_type_enabled(v113, OS_LOG_TYPE_ERROR);
          LOWORD(value[0]) = 0;
          v145 = (void *)_os_log_send_and_compose_impl();
          if (v145)
            free(v145);
        }
        if (v68)
        {
          sub_20E8C003C((uint64_t)&v285, "Could not obtain application domain ID for user preferences!");
          sub_20E863570((uint64_t)&v285);
        }
        sub_20E863570((uint64_t)&v285);
        v146 = v293;
        if (!v293)
          goto LABEL_409;
        v147 = (unint64_t *)&v293->__shared_owners_;
        do
          v148 = __ldaxr(v147);
        while (__stlxr(v148 - 1, v147));
LABEL_407:
        if (!v148)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
        }
        goto LABEL_409;
      }
    }
    memmove(v104, v102, v103);
    goto LABEL_178;
  }
  if (v282 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v43 = v284;
  if (v284)
  {
    v44 = (unint64_t *)&v284->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  return 8;
}

void sub_20E9DA2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 && a18 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714(v19 - 216);
  if (*(_BYTE *)(v19 - 112) && *(char *)(v19 - 113) < 0)
    operator delete(*(void **)(v19 - 136));
  sub_20E90DCE4((uint64_t)&STACK[0x2E8]);
  if (LOBYTE(STACK[0x510]))
  {
    if (SLOBYTE(STACK[0x50F]) < 0)
      operator delete((void *)STACK[0x4F8]);
  }
  sub_20E86665C(v19 - 232);
  _Unwind_Resume(a1);
}

void sub_20E9DA520(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E86665C(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_20E9DA534(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x20E9DA4F8);
}

void sub_20E9DA54C()
{
  JUMPOUT(0x20E9DA4F8);
}

void sub_20E9DA554()
{
  JUMPOUT(0x20E9DA4F8);
}

void sub_20E9DA55C()
{
  JUMPOUT(0x20E9DA4F8);
}

uint64_t sub_20E9DA564(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  v6 = (_QWORD *)(a1 + 16);
  v5 = *(void **)(a1 + 16);
  v7 = a2 + 2;
  if (v5)
  {
    *(_QWORD *)(a1 + 24) = v5;
    operator delete(v5);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 32) = a2[4];
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  v8 = *(void **)(a1 + 40);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = v8;
    operator delete(v8);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = a2[7];
  a2[6] = 0;
  a2[7] = 0;
  a2[5] = 0;
  v10 = *((_OWORD *)a2 + 9);
  v9 = *((_OWORD *)a2 + 10);
  v11 = *((_OWORD *)a2 + 8);
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 128) = v11;
  v12 = *((_OWORD *)a2 + 4);
  v13 = *((_OWORD *)a2 + 5);
  v14 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v14;
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = v13;
  v15 = *(_OWORD *)(a2 + 23);
  a2[23] = 0;
  a2[24] = 0;
  v16 = *(std::__shared_weak_count **)(a1 + 192);
  *(_OWORD *)(a1 + 184) = v15;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(_OWORD *)(a1 + 200) = v19;
  v20 = *(_OWORD *)(a2 + 29);
  v21 = *(_OWORD *)(a2 + 31);
  v22 = *(_OWORD *)(a2 + 33);
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_OWORD *)(a1 + 264) = v22;
  *(_OWORD *)(a1 + 248) = v21;
  *(_OWORD *)(a1 + 232) = v20;
  v23 = *((_OWORD *)a2 + 23);
  v25 = *((_OWORD *)a2 + 20);
  v24 = *((_OWORD *)a2 + 21);
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v23;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 336) = v24;
  v26 = *((_OWORD *)a2 + 27);
  v28 = *((_OWORD *)a2 + 24);
  v27 = *((_OWORD *)a2 + 25);
  *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
  *(_OWORD *)(a1 + 432) = v26;
  *(_OWORD *)(a1 + 384) = v28;
  *(_OWORD *)(a1 + 400) = v27;
  v30 = *((_OWORD *)a2 + 29);
  v29 = *((_OWORD *)a2 + 30);
  v31 = *((_OWORD *)a2 + 28);
  *(_DWORD *)(a1 + 496) = *((_DWORD *)a2 + 124);
  *(_OWORD *)(a1 + 464) = v30;
  *(_OWORD *)(a1 + 480) = v29;
  *(_OWORD *)(a1 + 448) = v31;
  v32 = *((_OWORD *)a2 + 19);
  *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
  *(_OWORD *)(a1 + 304) = v32;
  v33 = *(_OWORD *)(a2 + 63);
  a2[63] = 0;
  a2[64] = 0;
  v34 = *(std::__shared_weak_count **)(a1 + 512);
  *(_OWORD *)(a1 + 504) = v33;
  if (!v34)
    return a1;
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (v36)
    return a1;
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  return a1;
}

_QWORD *sub_20E9DA754(_QWORD *a1, CFTypeRef cf)
{
  _QWORD *v4;

  if (cf)
    CFRetain(cf);
  *a1 = cf;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24C9B4418;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = cf;
  a1[1] = v4;
  return a1;
}

void sub_20E9DA7B4(void *a1)
{
  const void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    CFRelease(v1);
  __cxa_rethrow();
}

void sub_20E9DA7CC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20E9DA7E0(const __CFData *a1, uint64_t a2)
{
  const UInt8 *BytePtr;
  int v5;
  char v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t *v12;
  _QWORD v13[2];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  char v21;
  int v22;
  void **v23;
  std::__shared_weak_count *v24;
  size_t __len;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[4];
  __int128 v31;
  uint64_t v32;
  char v33;

  if (!a1)
    return 3;
  BytePtr = CFDataGetBytePtr(a1);
  __len = CFDataGetLength(a1);
  if (!__len)
    return 3;
  sub_20E9DF390(&__len, &v23);
  if (__len)
    memmove(*v23, BytePtr, __len);
  v26 = &v27;
  v27 = 0;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v31 = 0u;
  v28 = 0;
  v32 = 0;
  v33 = 3;
  v5 = sub_20F4388CC((uint64_t *)&v23, (uint64_t)&v26);
  if (v5 == 2)
  {
    v6 = 0;
    LOBYTE(v12) = 0;
  }
  else
  {
    v12 = v26;
    v13[0] = v27;
    v13[1] = v28;
    if (v28)
    {
      *(_QWORD *)(v27 + 16) = v13;
      v26 = &v27;
      v27 = 0;
      v28 = 0;
    }
    else
    {
      v12 = v13;
    }
    v14 = v29;
    v15 = v30[0];
    memset(v30, 0, sizeof(v30));
    v29 = 0uLL;
    v16 = *(_OWORD *)&v30[1];
    v17 = v30[3];
    v18 = v31;
    v19 = v32;
    v31 = 0uLL;
    v32 = 0;
    v6 = 1;
    v20 = v33;
  }
  v21 = v6;
  v22 = v5;
  sub_20E8FB5B8((uint64_t)&v26);
  if (v22 == 2)
  {
    v7 = 2;
    if (!v21)
      goto LABEL_17;
    goto LABEL_16;
  }
  sub_20E9470EC(a2, (uint64_t)&v12);
  v7 = v22 == 1;
  if (v21)
LABEL_16:
    sub_20E8FB5B8((uint64_t)&v12);
LABEL_17:
  v8 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_20E9DA9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20E8FB5B8((uint64_t)&a28);
  sub_20E86665C((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9DA9E8(const __CFData *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;

  v6[0] = 0;
  v6[1] = 0;
  v5 = v6;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v12 = 3;
  v3 = sub_20E9DA7E0(a1, (uint64_t)&v5);
  if (v3 <= 1)
    sub_20FCD9BAC(&v5, a2);
  sub_20E8FB5B8((uint64_t)&v5);
  return v3;
}

void sub_20E9DAA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E8FB5B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9DAA74(__CFData *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  if (!a1)
    return 3;
  sub_20F43619C(a2, &v7);
  CFDataAppendBytes(a1, *(const UInt8 **)v7, *(_QWORD *)(v7 + 8) - *(_QWORD *)v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return 0;
}

uint64_t sub_20E9DAB00(void *a1)
{
  uint64_t v3;

  sub_20E86665C((uint64_t)&v3);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 4;
}

uint64_t sub_20E9DAB34(__CFData *a1, _QWORD *a2)
{
  uint64_t v3;
  void *__p;
  void *v6;
  uint64_t v7;
  uint64_t *v8[13];

  __p = 0;
  v6 = 0;
  v7 = 0;
  sub_20FCD5C18(a2, (uint64_t)&__p, v8);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  v3 = sub_20E9DAA74(a1, (uint64_t)v8);
  sub_20E8FB5B8((uint64_t)v8);
  return v3;
}

void sub_20E9DABA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20E8FB5B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9DABB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9DABD8(int64x2_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, float64x2_t *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  float64x2_t v11;
  int8x16_t *v12;
  char v13;
  int8x16_t v15;
  float64x2_t v18;
  int8x16_t v24;
  uint64_t v25;
  int8x16_t v26;
  uint64_t v27;
  float64x2_t v28;
  uint64_t *v29;
  float64x2_t v30;
  uint64_t v31;
  double v32;
  float64x2_t v33;
  float64x2_t v34;
  char v35;
  uint64_t v36;
  float64x2_t v37;
  double *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int8x16_t v42;
  unint64_t v43;
  float64x2_t *v44;
  int8x16_t *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  float64x2_t v51;
  float64_t v52;
  unint64_t v53;
  float64x2_t *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  int8x16_t v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  unint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  int8x16_t v70;
  unint64_t v71;
  float64x2_t v72;
  int8x16_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  float64x2_t v78;
  uint64_t v79;
  double v80;
  float64x2_t v81;
  double v82;
  float64x2_t v83;
  double v84;
  float64x2_t v85;
  double *v86;
  double *v87;
  unint64_t v88;
  float64x2_t *v89;
  float64x2_t v90;
  float64x2_t v91;
  float64x2_t v92;
  float64x2_t v96;
  int8x16_t v97;
  double v99;
  double v101;
  double v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v107;
  double v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  float64x2_t v116;
  int64x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  int8x16_t v122;
  int8x16_t v123;
  double v124;
  double v129;
  double v130;
  float64x2_t v132;
  float64x2_t v135;
  float64x2_t *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  float64x2_t *v142;
  char *v143;
  float64x2_t *v144;
  float64x2_t *v145;
  float64x2_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  char *v153;
  float64x2_t v154;
  double v155;
  double v156;
  int8x16_t v157;
  double v158;
  double v159;
  float64x2_t v160;
  int8x16_t v163;
  double v164;
  double v165;
  BOOL v168;
  float64x2_t v171;
  uint64_t v172;
  _BOOL4 v173;
  unint64_t *v174;
  unint64_t *v175;
  int64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  _BYTE *v181;
  unint64_t *v182;
  uint64_t v183;
  int64_t v184;
  uint64_t v186;
  double v187;
  double v189;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  float64x2_t v197;
  int32x4_t v198;
  float64x2_t v203;
  int64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  int64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t *v212;
  _OWORD *v213;
  unint64_t *v214;
  uint64_t v215;
  __int128 v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t *v221;
  _OWORD *v222;
  unint64_t *v223;
  uint64_t v224;
  __int128 v225;
  unint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  char *v231;
  int64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  char *v238;
  int64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  __int128 v262;
  char v263;
  char v264;
  int64x2_t v265;
  char *v266;
  char *v267;
  void *v268;
  __int128 *v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  unint64_t *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  size_t v277;
  char *v278;
  size_t v279;
  uint64_t v280;
  _OWORD *v281;
  uint64_t v282;
  __int128 *v283;
  __int128 v284;
  __int128 v285;
  void *v286;
  _QWORD *v287;
  char *v288;
  char *v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  char *v295;
  __int128 *v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  void *v300;
  _QWORD *v301;
  char *v302;
  unint64_t *v303;
  uint64_t *v304;
  uint64_t v305;
  char *v306;
  char *v307;
  char *v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  size_t v316;
  char *v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  char *v322;
  char *v323;
  size_t v324;
  __int128 v325;
  size_t v326;
  char *v327;
  void *v328;
  void *v329;
  _QWORD *v330;
  unint64_t *v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  size_t v335;
  _QWORD *v336;
  size_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  _QWORD *v343;
  unint64_t *v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  size_t v348;
  _QWORD *v349;
  size_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  unint64_t *v357;
  uint64_t *v358;
  uint64_t v359;
  uint64_t v360;
  size_t v361;
  char *v362;
  char *v363;
  char *v364;
  size_t v365;
  char *v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  char *v370;
  char *v371;
  char *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  char *v377;
  char *v378;
  char *v379;
  __int128 v380;
  char *v381;
  char *v382;
  void *v383;
  void *v384;
  void **v385;
  uint64_t v386;
  int64x2_t **v387;
  uint64_t v388;
  void *v389;
  void *v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  int64x2_t *v396;
  int64x2_t *v397;
  _BYTE *v398;
  _BYTE *v399;
  int64_t v400;
  char *v401;
  char *v402;
  int64x2_t *v403;
  int64x2_t v404;
  void *v405;
  char *v406;
  char *v407;
  void *v408;
  void *v409;
  char *v410;
  char *v411;
  void *v412;
  char *v413;
  void *v414;
  void *v415;
  char *v416;
  char *v417;
  void *v418;
  char *v419;
  void *v420;
  void *v421;
  char *v422;
  char *v423;
  void *v424;
  char *v425;
  void *v426;
  void *v427;
  char *v428;
  char *v429;
  void *v430;
  char *v431;
  void *v432;
  void *v433;
  char *v434;
  char *v435;
  void *v436;
  char *v437;
  void *v438;
  void *v439;
  char *v440;
  char *v441;
  void *v442;
  char *v443;
  void *v444;
  void *v445;
  void *v446;
  size_t v447;
  void *v448;
  size_t v449;
  void *v450;
  void *v451;
  char *v452;
  char *v453;
  void *v454;
  char *v455;
  void *v456;
  void *v457;
  void **v458;
  int64x2_t *v459;
  unint64_t v461;
  float64x2_t v462;
  double v463;
  float64x2_t v464;
  double v465;
  float64x2_t v466;
  double v467;
  float64x2_t v468;
  double v469;
  float64x2_t v470;
  int8x16_t v471;
  float64x2_t v473;
  float64x2_t v474;
  uint64_t *v475;
  double v477;
  _QWORD *v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  float64x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float64x2_t v486;
  double v487;
  float64x2_t v488;
  uint64_t v489;
  int8x16_t v490;
  float64x2_t v491;
  int8x16_t v492;
  float64x2_t v493;
  char v494;
  double v495;
  uint64_t v496;
  int8x16_t v497;
  float64x2_t v498;
  uint64_t v499;
  double v500;
  unint64_t v501;
  float64x2_t v502;
  uint64_t v503;
  double v504;
  float64x2_t v505;
  float64x2_t v506;
  float64x2_t v507;
  int8x16_t v508;
  unint64_t v509;
  float64x2_t v510;
  int8x16_t v511;
  float64_t v512;
  float64x2_t v513;
  float64x2_t v514;
  double v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  double v519;
  unint64_t v520;
  float64x2_t v521;
  double v522;
  unint64_t v523;
  float64x2_t v524;
  int64x2_t v525;
  unint64_t v526;
  float64x2_t v527;
  float64x2_t v528;
  int64x2_t v529;
  float64x2_t v530;
  float64x2_t v531;
  float64x2_t v532;
  int8x16_t v533;
  float64x2_t v534;
  double v535;
  int64x2_t v536;
  uint64_t v537;
  int64x2_t v538;
  float64x2_t v539;
  double v540;
  int64x2_t v541;
  double v542;
  float64x2_t v543;
  uint64_t v544;
  char *v545;
  void *v546[2];
  uint64_t v547;
  void *v548;
  unint64_t *v549;
  char *v550;
  void *v551;
  char *v552;
  char *v553;
  void *__p;
  double *v555;
  int8x16_t *v556;
  void *v557;
  char *v558;
  char *v559;
  void *v560;
  char *v561;
  uint64_t v562;
  void *v563;
  char *v564;
  unint64_t v565;
  void *v566;
  char *v567;
  uint64_t v568;
  void *v569;
  char *v570;
  unint64_t v571;
  void *v572;
  char *v573;
  uint64_t v574;
  void *v575;
  size_t __sz;
  size_t v577;
  void *v578;
  char *v579;
  uint64_t v580;
  _BYTE __dst[744];
  void *v582;
  void *v583;
  uint64_t v584;
  int64x2_t v585[4];
  _BYTE v586[24];
  char *v587;
  uint64_t v588;
  uint64_t v589;

  v589 = *MEMORY[0x24BDAC8D0];
  v579 = 0;
  v578 = 0;
  v580 = 0;
  __sz = 0;
  v575 = 0;
  v577 = 0;
  v573 = 0;
  v572 = 0;
  v574 = 0;
  v570 = 0;
  v569 = 0;
  v571 = 0;
  v567 = 0;
  v566 = 0;
  v568 = 0;
  v564 = 0;
  v563 = 0;
  v565 = 0;
  v561 = 0;
  v560 = 0;
  v562 = 0;
  v558 = 0;
  v557 = 0;
  v559 = 0;
  v475 = (uint64_t *)(a1 + 6);
  sub_20FCCD598((uint64_t *)a1 + 6, (uint64_t **)a1 + 9, (char **)&v578, (uint64_t *)&v572, &v566, (uint64_t)&v560);
  v11.f64[0] = *(float64_t *)(a4 + 16);
  v493 = v11;
  v488 = *(float64x2_t *)a4;
  v11.f64[1] = *(float64_t *)(a4 + 8);
  v11.f64[0] = *(float64_t *)(a4 + 40);
  v492 = (int8x16_t)v11;
  v11.f64[0] = *(float64_t *)(a4 + 64);
  v524 = *(float64x2_t *)(a4 + 24);
  v527 = v11;
  v11.f64[0] = a5[1].f64[0];
  v514 = v11;
  v517 = *a5;
  v521 = *(float64x2_t *)(a4 + 48);
  v12 = (int8x16_t *)operator new(0xC0uLL);
  v13 = 0;
  *(_QWORD *)&v487 = vextq_s8((int8x16_t)v488, (int8x16_t)v488, 8uLL).u64[0];
  v489 = vextq_s8((int8x16_t)v524, (int8x16_t)v524, 8uLL).u64[0];
  v537 = vextq_s8((int8x16_t)v521, (int8x16_t)v521, 8uLL).u64[0];
  v24 = (int8x16_t)vzip1q_s64((int64x2_t)v488, (int64x2_t)v524);
  v26 = (int8x16_t)vzip2q_s64((int64x2_t)v488, (int64x2_t)v524);
  _D20 = v492.i64[0];
  v15 = (int8x16_t)vzip1q_s64((int64x2_t)v493, (int64x2_t)v492);
  _D22 = v514.f64[0];
  _Q23 = (int8x16_t)v517;
  v18 = vnegq_f64(v517);
  v480 = vmlsq_lane_f64(vmlsq_laneq_f64(vmulq_n_f64(v488, v18.f64[0]), v524, v517, 1), v521, v514.f64[0], 0);
  _Q5 = vmulq_f64(v493, v18);
  __asm { FMLS            D5, D20, V23.D[1] }
  _D6 = v527.f64[0];
  __asm { FMLS            D5, D6, V22.D[0] }
  v479 = _Q5;
  _Q5.f64[0] = v524.f64[0];
  *(_QWORD *)&_Q5.f64[1] = vextq_s8((int8x16_t)v524, v492, 8uLL).u64[0];
  v498 = _Q5;
  __p = v12;
  v555 = (double *)v12;
  v556 = v12 + 12;
  v24.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
  v25 = a3[2];
  v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
  v531 = (float64x2_t)v26;
  v534 = (float64x2_t)v24;
  v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
  v528 = (float64x2_t)v15;
  *(_QWORD *)__dst = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&__dst[8] = v25;
  v27 = 1;
  v28.f64[0] = v517.f64[0];
  *(_QWORD *)&v28.f64[1] = vextq_s8(_Q23, _Q23, 8uLL).u64[0];
  v506 = v28;
  _Q23.i64[1] = *(_QWORD *)&v28.f64[1];
  v29 = (uint64_t *)__dst;
  v30 = v527;
  v31 = *(_QWORD *)&v524.f64[0];
  v32 = v521.f64[0];
  v33 = v514;
  v34 = (float64x2_t)_Q23;
  v518 = (float64x2_t)_Q23;
  while (2)
  {
    v496 = v27;
    v35 = 0;
    v494 = v13;
    v36 = a3[1];
    *(_QWORD *)v586 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v586[8] = v36;
    v542 = *(double *)v29;
    v37 = (float64x2_t)vdupq_lane_s64(*v29, 0);
    v539 = v37;
    v38 = (double *)v586;
    v39 = 1;
    do
    {
      v40 = v35;
      v26.i64[0] = *a3;
      v24.i64[0] = *(uint64_t *)v38;
      v37.f64[0] = v32 * *(double *)a2 + *(double *)&v537 * *v38 + v30.f64[0] * v542;
      v41 = *(_OWORD *)&vaddq_f64(v33, v37);
      v42 = (int8x16_t)vaddq_f64(v506, vmlaq_f64(vmlaq_n_f64(vmulq_n_f64(v534, *(double *)a2), v531, *v38), v539, v528));
      v43 = vextq_s8(v42, v42, 8uLL).u64[0];
      if (v12 < v556)
      {
        v12[1].i64[0] = v41;
        v42.i64[1] = v43;
        *v12 = v42;
        v44 = (float64x2_t *)&v12[1].u64[1];
        goto LABEL_24;
      }
      v45 = (int8x16_t *)__p;
      v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (_BYTE *)__p) >> 3) + 1;
      if (v46 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_393;
      if (0x5555555555555556 * (((char *)v556 - (_BYTE *)__p) >> 3) > v46)
        v46 = 0x5555555555555556 * (((char *)v556 - (_BYTE *)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v556 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
        v47 = 0xAAAAAAAAAAAAAAALL;
      else
        v47 = v46;
      v508 = v26;
      v511 = v24;
      if (v47)
      {
        if (v47 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_394;
        v499 = v41;
        v501 = v43;
        v503 = v42.i64[0];
        v48 = (char *)operator new(24 * v47);
        v31 = *(_QWORD *)&v524.f64[0];
        v30 = v527;
        v34 = v518;
        v32 = v521.f64[0];
        v24 = v511;
        v33 = v514;
        v26 = v508;
        v43 = v501;
        v42.i64[0] = v503;
        v41 = v499;
      }
      else
      {
        v48 = 0;
      }
      v49 = &v48[8 * (((char *)v12 - (_BYTE *)__p) >> 3)];
      *((_QWORD *)v49 + 2) = v41;
      v42.i64[1] = v43;
      *(int8x16_t *)v49 = v42;
      v44 = (float64x2_t *)(v49 + 24);
      if (v12 == v45)
      {
        __p = v49;
        v555 = (double *)(v49 + 24);
        v556 = (int8x16_t *)&v48[24 * v47];
LABEL_23:
        operator delete(v12);
        v26 = v508;
        v24 = v511;
        v33 = v514;
        v34 = v518;
        v32 = v521.f64[0];
        v31 = *(_QWORD *)&v524.f64[0];
        v30 = v527;
        goto LABEL_24;
      }
      do
      {
        v50 = *(__int128 *)((char *)&v12[-2] + 8);
        *((_QWORD *)v49 - 1) = v12[-1].i64[1];
        *(_OWORD *)(v49 - 24) = v50;
        v49 -= 24;
        v12 = (int8x16_t *)((char *)v12 - 24);
      }
      while (v12 != v45);
      v12 = (int8x16_t *)__p;
      __p = v49;
      v555 = (double *)v44;
      v556 = (int8x16_t *)&v48[24 * v47];
      if (v12)
        goto LABEL_23;
LABEL_24:
      v555 = (double *)v44;
      v51.f64[1] = v528.f64[1];
      v51.f64[0] = v32 * *(double *)v26.i64 + *(double *)&v537 * *(double *)v24.i64 + v30.f64[0] * v542;
      *(_QWORD *)&v52 = *(_OWORD *)&vaddq_f64(v51, v33);
      v37 = vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_n_f64(v534, *(double *)v26.i64), (float64x2_t)vdupq_lane_s64(v24.i64[0], 0), v531), v539, v528), v34);
      v53 = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
      if (v44 < (float64x2_t *)v556)
      {
        v44[1].f64[0] = v52;
        *(_QWORD *)&v37.f64[1] = v53;
        *v44 = v37;
        v12 = (int8x16_t *)&v44[1].f64[1];
        goto LABEL_5;
      }
      v54 = (float64x2_t *)__p;
      v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (_BYTE *)__p) >> 3) + 1;
      if (v55 > 0xAAAAAAAAAAAAAAALL)
LABEL_393:
        sub_20E969238();
      if (0x5555555555555556 * (((char *)v556 - (_BYTE *)__p) >> 3) > v55)
        v55 = 0x5555555555555556 * (((char *)v556 - (_BYTE *)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v556 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
        v56 = 0xAAAAAAAAAAAAAAALL;
      else
        v56 = v55;
      if (v56)
      {
        if (v56 > 0xAAAAAAAAAAAAAAALL)
LABEL_394:
          sub_20E877A38();
        v504 = v52;
        v509 = v53;
        v512 = v37.f64[0];
        v57 = (char *)operator new(24 * v56);
        v31 = *(_QWORD *)&v524.f64[0];
        v30 = v527;
        v34 = v518;
        v32 = v521.f64[0];
        v37.f64[0] = v512;
        v33 = v514;
        v53 = v509;
        v52 = v504;
      }
      else
      {
        v57 = 0;
      }
      v58 = &v57[8 * (((char *)v44 - (_BYTE *)__p) >> 3)];
      *((float64_t *)v58 + 2) = v52;
      *(_QWORD *)&v37.f64[1] = v53;
      *(float64x2_t *)v58 = v37;
      v12 = (int8x16_t *)(v58 + 24);
      if (v44 == v54)
      {
        __p = v58;
        v555 = (double *)(v58 + 24);
        v556 = (int8x16_t *)&v57[24 * v56];
LABEL_40:
        operator delete(v44);
        v33 = v514;
        v34 = v518;
        v32 = v521.f64[0];
        v31 = *(_QWORD *)&v524.f64[0];
        v30 = v527;
        goto LABEL_5;
      }
      do
      {
        v37 = *(float64x2_t *)((char *)v44 - 24);
        *((_QWORD *)v58 - 1) = *(_QWORD *)&v44[-1].f64[1];
        *(float64x2_t *)(v58 - 24) = v37;
        v58 -= 24;
        v44 = (float64x2_t *)((char *)v44 - 24);
      }
      while (v44 != v54);
      v44 = (float64x2_t *)__p;
      __p = v58;
      v555 = (double *)v12;
      v556 = (int8x16_t *)&v57[24 * v56];
      if (v44)
        goto LABEL_40;
LABEL_5:
      v555 = (double *)v12;
      v38 = (double *)&v586[8 * v39];
      v35 = 1;
      v39 = 2;
    }
    while ((v40 & 1) == 0);
    v29 = (uint64_t *)&__dst[8 * v496];
    v13 = 1;
    v27 = 2;
    if ((v494 & 1) == 0)
      continue;
    break;
  }
  *(_QWORD *)(a7 + 16) = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)a7 = a7 + 8;
  *(_OWORD *)(a7 + 24) = 0u;
  v458 = (void **)(a7 + 24);
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 56) = 0u;
  *(_OWORD *)(a7 + 72) = 0u;
  *(_QWORD *)(a7 + 88) = 0;
  *(_BYTE *)(a7 + 96) = 3;
  if ((int64x2_t **)a7 != a1)
  {
    sub_20E9DF450(a7, (*a1)->i64, (uint64_t *)a1 + 1);
    v32 = v521.f64[0];
    v31 = *(_QWORD *)&v524.f64[0];
  }
  v552 = 0;
  v551 = 0;
  v553 = 0;
  v59 = (char *)a1[4] - (char *)a1[3];
  if (v59)
  {
    v60 = 0x8F5C28F5C28F5C29 * (v59 >> 5);
    if (v60 >> 61)
      sub_20E867F44();
    v551 = operator new(0x7AE147AE147AE148 * (v59 >> 5));
    v552 = (char *)v551;
    v553 = (char *)v551 + 8 * v60;
    v32 = v521.f64[0];
    v31 = *(_QWORD *)&v524.f64[0];
  }
  v61 = (char *)a1[7] - (char *)a1[6];
  if (v61)
  {
    v62 = 0;
    v30.f64[0] = *(float64_t *)(a2 + 16);
    v63 = *(int8x16_t *)a2;
    v64 = vextq_s8(v63, v63, 8uLL).u64[0];
    *(_QWORD *)&v34.f64[0] = a3[2];
    v65 = *(int8x16_t *)a3;
    v66 = vextq_s8(v65, v65, 8uLL).u64[0];
    v67 = v61 / 168;
    v68.f64[0] = *(float64_t *)a2;
    *(_QWORD *)&v68.f64[1] = v64;
    *(_QWORD *)&v69.f64[0] = *a3;
    *(_QWORD *)&v69.f64[1] = v66;
    v70 = (int8x16_t)vsubq_f64(v69, v68);
    v71 = vextq_s8(v70, v70, 8uLL).u64[0];
    v510 = v34;
    v513 = v30;
    *(_QWORD *)&v477 = *(_OWORD *)&vsubq_f64(v34, v30);
    v459 = (int64x2_t *)(a7 + 48);
    v72.f64[0] = v488.f64[0];
    v72.f64[1] = v487;
    v69.f64[0] = v32;
    *(_QWORD *)&v69.f64[1] = v537;
    v505 = v69;
    v507 = v72;
    if (v67 <= 1)
      v67 = 1;
    v461 = v67;
    v73 = (int8x16_t)v480;
    v485 = (float64x2_t)vdupq_lane_s64(v31, 0);
    v484 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32, 0);
    v483 = (float64x2_t)vdupq_lane_s64(v489, 0);
    v73.i64[1] = vextq_s8(v73, v73, 8uLL).u64[0];
    v481 = (float64x2_t)v73;
    v482 = (float64x2_t)vdupq_lane_s64(v537, 0);
    v70.i64[1] = v71;
    v486 = (float64x2_t)v70;
    v500 = *(double *)&v64;
    v502 = *(float64x2_t *)a2;
    v63.i64[1] = v64;
    v495 = *(double *)&v66;
    v497 = *(int8x16_t *)a3;
    v65.i64[1] = v66;
    v473 = (float64x2_t)v65;
    v474 = (float64x2_t)v63;
    do
    {
      v74 = 24 * v62;
      v75 = (char *)v560;
      v549 = 0;
      v548 = 0;
      v550 = 0;
      v478 = (char *)v572 + 24 * v62;
      v76 = v478[1] - *v478;
      if (v76)
      {
        v77 = 0xAAAAAAAAAAAAAAABLL * (v76 >> 3);
        if (v77 >> 61)
          sub_20E867F44();
        v548 = operator new(0x5555555555555558 * (v76 >> 3));
        v549 = (unint64_t *)v548;
        v550 = (char *)v548 + 8 * v77;
      }
      *(_QWORD *)&v78.f64[0] = (*a1)[3].i64[1];
      v525 = (*a1)[4];
      v540 = *(double *)&(*a1)[6].i64[1];
      v535 = *(double *)(*a1)[8].i64;
      v538 = *(int64x2_t *)((char *)*a1 + 88);
      v529 = *(int64x2_t *)((char *)*a1 + 40);
      v532 = (float64x2_t)(*a1)[7];
      *(_QWORD *)&v78.f64[1] = (*a1)[5].i64[0];
      v543 = v78;
      sub_20FCD0CB8((__int128 *)a1[3][50 * v62].i8, (uint64_t)__dst);
      v490 = *(int8x16_t *)__dst;
      v519 = *(double *)&__dst[16];
      v522 = *(double *)&__dst[40];
      v470 = *(float64x2_t *)&__dst[48];
      v471 = *(int8x16_t *)&__dst[24];
      v515 = *(double *)&__dst[64];
      v469 = *(double *)&__dst[88];
      v468 = *(float64x2_t *)&__dst[72];
      if (v582)
      {
        v583 = v582;
        operator delete(v582);
      }
      v79 = *(_QWORD *)(*v475 + 168 * v62 + 88);
      v80 = *(double *)(v79 + 16);
      v81 = *(float64x2_t *)v79;
      v82 = *(double *)(v79 + 40);
      v83 = *(float64x2_t *)(v79 + 24);
      v84 = *(double *)(v79 + 64);
      v85 = *(float64x2_t *)(v79 + 48);
      memset(v586, 0, sizeof(v586));
      v86 = v555;
      v87 = (double *)__p;
      if (v555 == __p)
      {
        v146 = 0;
        v89 = 0;
        goto LABEL_85;
      }
      v462 = v81;
      v463 = v80;
      v464 = v83;
      v465 = v82;
      v466 = v85;
      v467 = v84;
      v88 = 0xAAAAAAAAAAAAAAABLL * (((char *)v555 - (_BYTE *)__p) >> 3);
      if (v88 >> 60)
        sub_20E867F44();
      v89 = (float64x2_t *)operator new(0xAAAAAAAAAAAAAAB0 * (((char *)v555 - (_BYTE *)__p) >> 3));
      v90.f64[1] = v532.f64[1];
      v91 = (float64x2_t)vzip1q_s64(v529, v525);
      v92 = (float64x2_t)vzip2q_s64(v529, v525);
      _V6.D[1] = v538.i64[1];
      _D5 = v532.f64[1];
      __asm { FMLA            D3, D5, V6.D[1] }
      v90.f64[0] = _D3 + v540 * v535;
      v96 = vnegq_f64(vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, v532.f64[0]), v92, v532, 1), v543, v535));
      v97 = vextq_s8((int8x16_t)v92, (int8x16_t)vdupq_laneq_s64(v538, 1), 8uLL);
      *(_QWORD *)&v92.f64[1] = v97.i64[0];
      __asm { FMOV            V4.2D, #1.0 }
      *(_QWORD *)&_Q4.f64[0] = *(_OWORD *)&vnegq_f64(v90);
      *(_QWORD *)&v99 = vextq_s8(v490, v490, 8uLL).u64[0];
      _Q29 = (int8x16_t)v470;
      *(_QWORD *)&v101 = vextq_s8(v471, v471, 8uLL).u64[0];
      *(_QWORD *)&v102 = vextq_s8(_Q29, _Q29, 8uLL).u64[0];
      v103.f64[0] = v519;
      v103.f64[1] = v522;
      v104 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v490, (int64x2_t)v471), v468.f64[0]), (float64x2_t)vzip2q_s64((int64x2_t)v490, (int64x2_t)v471), v468, 1), v103, v469);
      _Q20 = vmulq_f64(v470, v468);
      _D21 = v468.f64[1];
      __asm { FMLA            D20, D21, V29.D[1] }
      _Q20.f64[0] = _Q20.f64[0] + v515 * v469;
      v107 = vnegq_f64(v104);
      *(_QWORD *)&v91.f64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      *(_QWORD *)&v108 = *(_OWORD *)&vnegq_f64(_Q20);
      v109 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v91, *(double *)v490.i64), v92, *(double *)v471.i64), v543, v470.f64[0]), (float64x2_t)0, v96);
      v110 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v538.u64[0], *(double *)v490.i64), (float64x2_t)v97.u64[1], *(double *)v471.i64), (float64x2_t)*(unint64_t *)&v540, v470.f64[0]), (float64x2_t)0, _Q4);
      v111 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v91, v99), v92, v101), v543, v102), (float64x2_t)0, v96);
      v112 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v538.u64[0], v99), (float64x2_t)v97.u64[1], v101), (float64x2_t)*(unint64_t *)&v540, v102), (float64x2_t)0, _Q4);
      v113 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v91, v519), v92, v522), v543, v515), (float64x2_t)0, v96);
      v114 = (int64x2_t)vmlaq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)v538.u64[0], v519), (float64x2_t)v97.u64[1], v522), (float64x2_t)*(unint64_t *)&v540, v515), (float64x2_t)0, _Q4);
      v115 = (int64x2_t)vaddq_f64(v96, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v91, v107.f64[0]), v92, v107, 1), v543, v108));
      v116 = (float64x2_t)vdupq_lane_s64(v111.i64[0], 0);
      *(_QWORD *)&v116.f64[0] = v109.i64[0];
      v117 = (int64x2_t)vaddq_f64(_Q4, vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v538.u64[0], v107.f64[0]), (float64x2_t)v97.u64[1], v107, 1), (float64x2_t)*(unint64_t *)&v540, v108));
      v118 = (float64x2_t)vzip2q_s64(v109, v111);
      *(_QWORD *)&_Q4.f64[0] = vdupq_laneq_s64(v113, 1).u64[0];
      *(_QWORD *)&_Q4.f64[1] = v115.i64[1];
      v119 = (float64x2_t)vzip1q_s64(v110, v112);
      v120 = (float64x2_t)vzip1q_s64(v114, v117);
      v121 = (float64x2_t)vzip1q_s64(v113, v115);
      v122 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v462.f64[0]), v118, v462, 1), v119, v463);
      v123 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v464.f64[0]), v118, v464, 1), v119, v465);
      *(_QWORD *)v586 = v89;
      *(_QWORD *)&v586[8] = v89;
      *(_QWORD *)&v586[16] = &v89[v88];
      v530 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, v466.f64[0]), _Q4, v466, 1), v120, v467);
      v533 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v116, v466.f64[0]), v118, v466, 1), v119, v467);
      v541 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, v462.f64[0]), _Q4, v462, 1), v120, v463);
      v523 = vextq_s8(v122, v122, 8uLL).u64[0];
      v526 = vextq_s8(v533, v533, 8uLL).u64[0];
      v536 = (int64x2_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v121, v464.f64[0]), _Q4, v464, 1), v120, v465);
      v516 = (float64x2_t)vzip2q_s64(v541, v536);
      v520 = vextq_s8(v123, v123, 8uLL).u64[0];
      do
      {
        while (1)
        {
          while (1)
          {
            v124 = v87[2];
            _Q1 = *(_OWORD *)v87;
            _D4 = v523;
            _D3 = v526;
            __asm { FMLA            D2, D3, V1.D[1] }
            v129 = v530.f64[1] + _D2 + v530.f64[0] * v124;
            v130 = v129 == 0.0 ? 1.0 : 1.0 / v129;
            __asm { FMLA            D3, D4, V1.D[1] }
            v132.f64[0] = _D3 + *(double *)v541.i64 * v124;
            _D5 = v520;
            __asm { FMLA            D4, D5, V1.D[1] }
            v132.f64[1] = _D4 + *(double *)v536.i64 * v124;
            v135 = vmulq_n_f64(vaddq_f64(v516, v132), v130);
            if ((unint64_t)v89 >= *(_QWORD *)&v586[16])
              break;
            *v89++ = v135;
            *(_QWORD *)&v586[8] = v89;
            v87 += 3;
            if (v87 == v86)
              goto LABEL_81;
          }
          v136 = *(float64x2_t **)v586;
          v137 = ((uint64_t)v89 - *(_QWORD *)v586) >> 4;
          v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 60)
            sub_20E867F44();
          v139 = *(_QWORD *)&v586[16] - *(_QWORD *)v586;
          if ((uint64_t)(*(_QWORD *)&v586[16] - *(_QWORD *)v586) >> 3 > v138)
            v138 = v139 >> 3;
          v140 = (unint64_t)v139 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v138;
          if (v140)
          {
            v491 = v135;
            if (v140 >> 60)
              sub_20E877A38();
            v141 = (char *)operator new(16 * v140);
            v142 = (float64x2_t *)&v141[16 * v137];
            v143 = &v141[16 * v140];
            *v142 = v491;
            v144 = v142 + 1;
            if (v89 == v136)
            {
LABEL_79:
              *(_QWORD *)v586 = v142;
              *(_QWORD *)&v586[8] = v144;
              *(_QWORD *)&v586[16] = v143;
              break;
            }
          }
          else
          {
            v142 = (float64x2_t *)(16 * v137);
            v143 = 0;
            v145 = (float64x2_t *)(16 * v137);
            *v145 = v135;
            v144 = v145 + 1;
            if (v89 == v136)
              goto LABEL_79;
          }
          do
          {
            v142[-1] = v89[-1];
            --v142;
            --v89;
          }
          while (v89 != v136);
          v89 = *(float64x2_t **)v586;
          *(_QWORD *)v586 = v142;
          *(_QWORD *)&v586[8] = v144;
          *(_QWORD *)&v586[16] = v143;
          if (v89)
            break;
          v89 = v144;
          *(_QWORD *)&v586[8] = v144;
          v87 += 3;
          if (v87 == v86)
            goto LABEL_81;
        }
        operator delete(v89);
        v89 = v144;
        *(_QWORD *)&v586[8] = v144;
        v87 += 3;
      }
      while (v87 != v86);
LABEL_81:
      v146 = *(float64x2_t **)v586;
      if (!*(_QWORD *)v586)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v146 = 0;
      }
LABEL_85:
      sub_20FDC63F0(v89 - v146, v146, (uint64_t)__dst);
      *(_OWORD *)v546 = *(_OWORD *)__dst;
      v547 = *(_QWORD *)&__dst[16];
      if (*(_QWORD *)v586)
      {
        *(_QWORD *)&v586[8] = *(_QWORD *)v586;
        operator delete(*(void **)v586);
      }
      v544 = v62;
      v147 = *v475 + 168 * v62;
      v150 = *(_QWORD *)(v147 + 32);
      v149 = (uint64_t *)(v147 + 32);
      v148 = v150;
      v151 = v478;
      if (v149[1] != v150)
      {
        v152 = 0;
        v153 = &v75[v74];
        do
        {
          v171 = vcvtq_f64_f32(vcvt_f32_f64(*(float64x2_t *)(v148 + 48 * v152 + 8)));
          *(float64x2_t *)__dst = v171;
          v172 = *v151 + 24 * v152;
          if (*(double *)v172 == 0.0 && *(double *)(v172 + 8) == 0.0 && *(double *)(v172 + 16) == 0.0)
          {
            v173 = sub_20FDC6204((float64x2_t **)v546, (double *)__dst, 0, 0.00000001);
            v151 = v478;
            if (v173)
            {
              v174 = v549;
              if (v549 < (unint64_t *)v550)
                goto LABEL_129;
              v175 = (unint64_t *)v548;
              v176 = (char *)v549 - (_BYTE *)v548;
              v177 = ((char *)v549 - (_BYTE *)v548) >> 3;
              v178 = v177 + 1;
              if ((unint64_t)(v177 + 1) >> 61)
                sub_20E867F44();
              v179 = v550 - (_BYTE *)v548;
              if ((v550 - (_BYTE *)v548) >> 2 > v178)
                v178 = v179 >> 2;
              if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v178;
              if (v180)
              {
                if (v180 >> 61)
                  sub_20E877A38();
                v181 = operator new(8 * v180);
                v182 = (unint64_t *)&v181[8 * v177];
                *v182 = v152;
                v183 = (uint64_t)(v182 + 1);
                v184 = (char *)v174 - (char *)v175;
                if (v174 == v175)
                  goto LABEL_155;
              }
              else
              {
                v181 = 0;
                v182 = (unint64_t *)(8 * v177);
                *(_QWORD *)(8 * v177) = v152;
                v183 = 8 * v177 + 8;
                v184 = (char *)v174 - (char *)v175;
                if (v174 == v175)
                  goto LABEL_155;
              }
              v209 = v184 - 8;
              if (v209 < 0x58)
                goto LABEL_423;
              if ((unint64_t)((char *)v174 - &v181[v176]) < 0x20)
                goto LABEL_423;
              v210 = (v209 >> 3) + 1;
              v211 = 8 * (v210 & 0x3FFFFFFFFFFFFFFCLL);
              v212 = &v174[v211 / 0xFFFFFFFFFFFFFFF8];
              v182 = (unint64_t *)((char *)v182 - v211);
              v213 = &v181[8 * v177 - 16];
              v214 = v174 - 2;
              v215 = v210 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v216 = *(_OWORD *)v214;
                *(v213 - 1) = *((_OWORD *)v214 - 1);
                *v213 = v216;
                v213 -= 2;
                v214 -= 4;
                v215 -= 4;
              }
              while (v215);
              v174 = v212;
              if (v210 != (v210 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_423:
                do
                {
                  v217 = *--v174;
                  *--v182 = v217;
                }
                while (v174 != v175);
              }
              goto LABEL_155;
            }
          }
          else
          {
            v171.f64[0] = *(float64_t *)(v172 + 16);
            _Q1 = *(float64x2_t *)v172;
            v155 = v500;
            v154 = v502;
            v159 = v510.f64[0];
            v156 = v513.f64[0];
            v158 = v495;
            v157.i64[0] = v497.i64[0];
            if (!*(_BYTE *)(*(_QWORD *)v153 + 80 * v152 + 72))
              goto LABEL_90;
            v186 = *(_QWORD *)v153 + 80 * v152;
            v187 = *(double *)(v186 + 16);
            _Q16 = *(_OWORD *)v186;
            v189 = *(double *)(v186 + 40);
            _Q6 = *(float64x2_t *)(v186 + 24);
            v154.f64[0] = *(float64_t *)(v186 + 64);
            _Q3 = *(float64x2_t *)(v186 + 48);
            v192 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v507, *(double *)v186), v498, *(float64x2_t *)v186, 1), v505, v187);
            v193 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v507, _Q6.f64[0]), v498, _Q6, 1), v505, v189);
            v194 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v507, _Q3.f64[0]), v498, _Q3, 1), v505, v154.f64[0]);
            *(_QWORD *)&v195.f64[0] = *(_OWORD *)&vmlaq_f64(vmlaq_f64(vmulq_n_f64(v192, v488.f64[0]), v485, v193), v484, v194);
            v195.f64[1] = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v192, v487), v483, v193), v482, v194).f64[1];
            v196 = vsqrtq_f64(v195);
            v197 = vaddq_f64(v196, v196);
            v198 = (int32x4_t)vcgtq_f64(v197, v486);
            *(int32x2_t *)v198.i8 = vmovn_s64((int64x2_t)v198);
            *(int16x4_t *)v198.i8 = vmovn_s32(v198);
            if (!(v198.i8[0] & 1 | v198.i8[2] & 1))
            {
              _D19 = v492.i64[0];
              __asm
              {
                FMLA            D17, D19, V16.D[1]
                FMLA            D16, D19, V6.D[1]
                FMLA            D6, D19, V3.D[1]
              }
              v154.f64[0] = sqrt((_D17 + v527.f64[0] * v187) * v493.f64[0]+ (_D16 + v527.f64[0] * v189) * *(double *)v492.i64+ (_D6 + v527.f64[0] * v154.f64[0]) * v527.f64[0]);
              v203 = vaddq_f64(v154, v154);
              if (v203.f64[0] <= v477 && (a6 & 1) != 0)
              {
                *(_QWORD *)&v197.f64[1] = vextq_s8((int8x16_t)v197, (int8x16_t)v197, 8uLL).u64[0];
                v154 = vsubq_f64(v474, v197);
                *(_QWORD *)&v155 = vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL).u64[0];
                *(_QWORD *)&v156 = *(_OWORD *)&vsubq_f64(v513, v203);
                v157 = (int8x16_t)vaddq_f64(v473, v197);
                *(_QWORD *)&v158 = vextq_s8(v157, v157, 8uLL).u64[0];
                *(_QWORD *)&v159 = *(_OWORD *)&vaddq_f64(v510, v203);
              }
              else
              {
                v155 = v500;
                v154.f64[0] = v502.f64[0];
                v168 = v203.f64[0] <= v477;
                v159 = v510.f64[0];
                v156 = v513.f64[0];
                v158 = v495;
                v157.i64[0] = v497.i64[0];
                if (!v168)
                  goto LABEL_106;
              }
LABEL_90:
              v160 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v507, _Q1.f64[0]), v498, _Q1, 1), v505, v171.f64[0]);
              _D18 = v492.i64[0];
              __asm { FMLA            D17, D18, V1.D[1] }
              v171.f64[0] = _D17 + v527.f64[0] * v171.f64[0];
              v163 = (int8x16_t)vaddq_f64(v160, v481);
              *(_QWORD *)&v164 = vextq_s8(v163, v163, 8uLL).u64[0];
              *(_QWORD *)&v165 = *(_OWORD *)&vaddq_f64(v171, v479);
              v168 = *(double *)v163.i64 >= v154.f64[0]
                  && v164 >= v155
                  && v165 >= v156
                  && *(double *)v163.i64 <= *(double *)v157.i64;
              if (!v168 || v164 > v158 || v165 > v159)
                goto LABEL_106;
              v174 = v549;
              if (v549 < (unint64_t *)v550)
              {
LABEL_129:
                *v174 = v152;
                v183 = (uint64_t)(v174 + 1);
LABEL_158:
                v549 = (unint64_t *)v183;
                goto LABEL_106;
              }
              v175 = (unint64_t *)v548;
              v204 = (char *)v549 - (_BYTE *)v548;
              v205 = ((char *)v549 - (_BYTE *)v548) >> 3;
              v206 = v205 + 1;
              if ((unint64_t)(v205 + 1) >> 61)
                sub_20E867F44();
              v207 = v550 - (_BYTE *)v548;
              if ((v550 - (_BYTE *)v548) >> 2 > v206)
                v206 = v207 >> 2;
              if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFF8)
                v180 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v180 = v206;
              if (v180)
              {
                if (v180 >> 61)
                  sub_20E877A38();
                v181 = operator new(8 * v180);
                v182 = (unint64_t *)&v181[8 * v205];
                *v182 = v152;
                v183 = (uint64_t)(v182 + 1);
                v208 = (char *)v174 - (char *)v175;
                if (v174 == v175)
                  goto LABEL_155;
LABEL_149:
                v218 = v208 - 8;
                if (v218 < 0x58)
                  goto LABEL_424;
                if ((unint64_t)((char *)v174 - &v181[v204]) < 0x20)
                  goto LABEL_424;
                v219 = (v218 >> 3) + 1;
                v220 = 8 * (v219 & 0x3FFFFFFFFFFFFFFCLL);
                v221 = &v174[v220 / 0xFFFFFFFFFFFFFFF8];
                v182 = (unint64_t *)((char *)v182 - v220);
                v222 = &v181[8 * v205 - 16];
                v223 = v174 - 2;
                v224 = v219 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v225 = *(_OWORD *)v223;
                  *(v222 - 1) = *((_OWORD *)v223 - 1);
                  *v222 = v225;
                  v222 -= 2;
                  v223 -= 4;
                  v224 -= 4;
                }
                while (v224);
                v174 = v221;
                if (v219 != (v219 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_424:
                  do
                  {
                    v226 = *--v174;
                    *--v182 = v226;
                  }
                  while (v174 != v175);
                }
              }
              else
              {
                v181 = 0;
                v182 = (unint64_t *)(8 * v205);
                *(_QWORD *)(8 * v205) = v152;
                v183 = 8 * v205 + 8;
                v208 = (char *)v174 - (char *)v175;
                if (v174 != v175)
                  goto LABEL_149;
              }
LABEL_155:
              v548 = v182;
              v549 = (unint64_t *)v183;
              v550 = &v181[8 * v180];
              if (v175)
                operator delete(v175);
              v151 = v478;
              goto LABEL_158;
            }
          }
LABEL_106:
          ++v152;
          v148 = *v149;
        }
        while (v152 < 0xAAAAAAAAAAAAAAABLL * ((v149[1] - *v149) >> 4));
      }
      if ((unint64_t)((char *)v549 - (_BYTE *)v548) >= 0x28)
      {
        v227 = v552;
        if (v552 < v553)
        {
          v228 = v544;
          *(_QWORD *)v552 = v544;
          v229 = (uint64_t)(v227 + 8);
          v230 = (_QWORD *)a7;
          goto LABEL_182;
        }
        v231 = (char *)v551;
        v232 = v552 - (_BYTE *)v551;
        v233 = (v552 - (_BYTE *)v551) >> 3;
        v234 = v233 + 1;
        v228 = v544;
        if ((unint64_t)(v233 + 1) >> 61)
          sub_20E867F44();
        v235 = v553 - (_BYTE *)v551;
        if ((v553 - (_BYTE *)v551) >> 2 > v234)
          v234 = v235 >> 2;
        if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFF8)
          v236 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v236 = v234;
        if (v236)
        {
          if (v236 >> 61)
            sub_20E877A38();
          v237 = (char *)operator new(8 * v236);
          v238 = &v237[8 * v233];
          *(_QWORD *)v238 = v544;
          v229 = (uint64_t)(v238 + 8);
          v239 = v227 - v231;
          if (v227 != v231)
          {
LABEL_171:
            v240 = v239 - 8;
            if (v240 < 0x58)
            {
              v230 = (_QWORD *)a7;
              goto LABEL_179;
            }
            v241 = v227 - &v237[v232];
            v230 = (_QWORD *)a7;
            if (v241 < 0x20)
              goto LABEL_425;
            v242 = (v240 >> 3) + 1;
            v243 = 8 * (v242 & 0x3FFFFFFFFFFFFFFCLL);
            v244 = &v227[-v243];
            v238 -= v243;
            v245 = &v237[8 * v233 - 16];
            v246 = v227 - 16;
            v247 = v242 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v248 = *(_OWORD *)v246;
              *((_OWORD *)v245 - 1) = *((_OWORD *)v246 - 1);
              *(_OWORD *)v245 = v248;
              v245 -= 32;
              v246 -= 32;
              v247 -= 4;
            }
            while (v247);
            v227 = v244;
            if (v242 != (v242 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_425:
              do
              {
LABEL_179:
                v249 = *((_QWORD *)v227 - 1);
                v227 -= 8;
                *((_QWORD *)v238 - 1) = v249;
                v238 -= 8;
              }
              while (v227 != v231);
            }
LABEL_180:
            v551 = v238;
            v552 = (char *)v229;
            v553 = &v237[8 * v236];
            if (v231)
              operator delete(v231);
LABEL_182:
            v552 = (char *)v229;
            v250 = *v475;
            memset(__dst, 0, 168);
            v252 = v230[7];
            v251 = v230[8];
            if (v252 >= v251)
            {
              v253 = v459->i64[0];
              v254 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v252 - v459->i64[0]) >> 3);
              v255 = v254 + 1;
              if (v254 + 1 > 0x186186186186186)
                sub_20E92CED8();
              if (0x9E79E79E79E79E7ALL * ((uint64_t)(v251 - v253) >> 3) > v255)
                v255 = 0x9E79E79E79E79E7ALL * ((uint64_t)(v251 - v253) >> 3);
              if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v251 - v253) >> 3) >= 0xC30C30C30C30C3)
                v256 = 0x186186186186186;
              else
                v256 = v255;
              v588 = a7 + 64;
              if (v256 > 0x186186186186186)
                sub_20E877A38();
              v257 = (char *)operator new(168 * v256);
              v258 = &v257[168 * v254];
              *(_QWORD *)v586 = v257;
              *(_QWORD *)&v586[8] = v258;
              *(_QWORD *)&v586[16] = v258;
              v587 = &v257[168 * v256];
              *(_OWORD *)v258 = 0u;
              *((_OWORD *)v258 + 1) = 0u;
              *((_OWORD *)v258 + 2) = 0u;
              *((_QWORD *)v258 + 6) = 0;
              *((_QWORD *)v258 + 7) = 0;
              memset(&__dst[32], 0, 24);
              *((_QWORD *)v258 + 8) = 0;
              *((_QWORD *)v258 + 9) = 0;
              memset(&__dst[56], 0, 24);
              v258[80] = 0;
              *((_QWORD *)v258 + 11) = 0;
              *((_QWORD *)v258 + 12) = 0;
              *((_QWORD *)v258 + 13) = 0;
              memset(&__dst[88], 0, 24);
              v258[112] = 0;
              *((_QWORD *)v258 + 15) = 0;
              *((_QWORD *)v258 + 16) = 0;
              memset(&__dst[120], 0, 24);
              *((_QWORD *)v258 + 17) = 0;
              *((_QWORD *)v258 + 18) = 0;
              *((_QWORD *)v258 + 19) = 0;
              *((_QWORD *)v258 + 20) = 0;
              memset(&__dst[144], 0, 24);
              if (v252 == v253)
              {
                v265 = vdupq_n_s64(v252);
                v266 = &v257[168 * v254];
                v230 = (_QWORD *)a7;
              }
              else
              {
                v259 = 0;
                v230 = (_QWORD *)a7;
                do
                {
                  v260 = &v258[v259];
                  v261 = v252 + v259;
                  v262 = *(_OWORD *)(v252 + v259 - 168);
                  *(_OWORD *)(v260 - 152) = *(_OWORD *)(v252 + v259 - 152);
                  *((_QWORD *)v260 - 16) = 0;
                  *((_QWORD *)v260 - 15) = 0;
                  *((_QWORD *)v260 - 17) = 0;
                  *(_OWORD *)(v260 - 168) = v262;
                  *(_OWORD *)(v260 - 136) = *(_OWORD *)(v252 + v259 - 136);
                  *((_QWORD *)v260 - 15) = *(_QWORD *)(v252 + v259 - 120);
                  *(_QWORD *)(v261 - 136) = 0;
                  *(_QWORD *)(v261 - 128) = 0;
                  *(_QWORD *)(v261 - 120) = 0;
                  *((_QWORD *)v260 - 14) = 0;
                  *((_QWORD *)v260 - 13) = 0;
                  *((_QWORD *)v260 - 12) = 0;
                  *((_OWORD *)v260 - 7) = *(_OWORD *)(v252 + v259 - 112);
                  *((_QWORD *)v260 - 12) = *(_QWORD *)(v252 + v259 - 96);
                  *(_QWORD *)(v261 - 104) = 0;
                  *(_QWORD *)(v261 - 96) = 0;
                  v263 = *(_BYTE *)(v252 + v259 - 88);
                  *(_QWORD *)(v261 - 112) = 0;
                  *(v260 - 88) = v263;
                  *((_QWORD *)v260 - 9) = 0;
                  *((_QWORD *)v260 - 8) = 0;
                  *((_QWORD *)v260 - 10) = 0;
                  *((_OWORD *)v260 - 5) = *(_OWORD *)(v252 + v259 - 80);
                  *((_QWORD *)v260 - 8) = *(_QWORD *)(v252 + v259 - 64);
                  *(_QWORD *)(v261 - 72) = 0;
                  *(_QWORD *)(v261 - 64) = 0;
                  v264 = *(_BYTE *)(v252 + v259 - 56);
                  *(_QWORD *)(v261 - 80) = 0;
                  *(v260 - 56) = v264;
                  *((_QWORD *)v260 - 5) = 0;
                  *((_QWORD *)v260 - 4) = 0;
                  *((_QWORD *)v260 - 6) = 0;
                  *((_OWORD *)v260 - 3) = *(_OWORD *)(v252 + v259 - 48);
                  *((_QWORD *)v260 - 4) = *(_QWORD *)(v252 + v259 - 32);
                  *(_QWORD *)(v261 - 48) = 0;
                  *(_QWORD *)(v261 - 40) = 0;
                  *(_QWORD *)(v261 - 32) = 0;
                  *((_QWORD *)v260 - 2) = 0;
                  *((_QWORD *)v260 - 1) = 0;
                  *((_QWORD *)v260 - 3) = 0;
                  *(_OWORD *)(v260 - 24) = *(_OWORD *)(v252 + v259 - 24);
                  *((_QWORD *)v260 - 1) = *(_QWORD *)(v252 + v259 - 8);
                  *(_QWORD *)(v261 - 24) = 0;
                  *(_QWORD *)(v261 - 16) = 0;
                  *(_QWORD *)(v261 - 8) = 0;
                  v259 -= 168;
                }
                while (v252 + v259 != v253);
                v265 = *v459;
                v251 = *(_QWORD *)(a7 + 64);
                v266 = &v258[v259];
              }
              v267 = v258 + 168;
              v230[6] = v266;
              v230[7] = v258 + 168;
              *(int64x2_t *)&v586[8] = v265;
              v230[8] = &v257[168 * v256];
              v587 = (char *)v251;
              *(_QWORD *)v586 = v265.i64[0];
              sub_20E9467F8((uint64_t)v586, v265.i64[0]);
              if (*(_QWORD *)v586)
                operator delete(*(void **)v586);
              v268 = *(void **)&__dst[144];
              v230[7] = v267;
              if (v268)
              {
                *(_QWORD *)&__dst[152] = v268;
                operator delete(v268);
              }
            }
            else
            {
              *(_QWORD *)(v252 + 48) = 0;
              *(_QWORD *)(v252 + 56) = 0;
              *(_OWORD *)(v252 + 16) = 0uLL;
              *(_OWORD *)(v252 + 32) = 0uLL;
              *(_OWORD *)v252 = 0uLL;
              *(_OWORD *)(v252 + 32) = *(_OWORD *)&__dst[32];
              *(_QWORD *)(v252 + 48) = *(_QWORD *)&__dst[48];
              memset(&__dst[32], 0, 24);
              *(_QWORD *)(v252 + 64) = 0;
              *(_QWORD *)(v252 + 72) = 0;
              *(_OWORD *)(v252 + 56) = *(_OWORD *)&__dst[56];
              *(_QWORD *)(v252 + 72) = *(_QWORD *)&__dst[72];
              memset(&__dst[56], 0, 24);
              *(_BYTE *)(v252 + 80) = __dst[80];
              *(_QWORD *)(v252 + 88) = 0;
              *(_QWORD *)(v252 + 96) = 0;
              *(_QWORD *)(v252 + 104) = 0;
              *(_OWORD *)(v252 + 88) = *(_OWORD *)&__dst[88];
              *(_QWORD *)(v252 + 104) = *(_QWORD *)&__dst[104];
              memset(&__dst[88], 0, 24);
              *(_BYTE *)(v252 + 112) = __dst[112];
              *(_QWORD *)(v252 + 120) = 0;
              *(_QWORD *)(v252 + 128) = 0;
              *(_QWORD *)(v252 + 136) = 0;
              *(_QWORD *)(v252 + 144) = 0;
              *(_OWORD *)(v252 + 120) = *(_OWORD *)&__dst[120];
              *(_QWORD *)(v252 + 136) = *(_QWORD *)&__dst[136];
              memset(&__dst[120], 0, 24);
              *(_QWORD *)(v252 + 152) = 0;
              *(_QWORD *)(v252 + 160) = 0;
              *(_OWORD *)(v252 + 144) = *(_OWORD *)&__dst[144];
              *(_QWORD *)(v252 + 160) = *(_QWORD *)&__dst[160];
              memset(&__dst[144], 0, 24);
              v230[7] = v252 + 168;
            }
            if (*(_QWORD *)&__dst[120])
            {
              *(_QWORD *)&__dst[128] = *(_QWORD *)&__dst[120];
              operator delete(*(void **)&__dst[120]);
            }
            if (*(_QWORD *)&__dst[88])
            {
              *(_QWORD *)&__dst[96] = *(_QWORD *)&__dst[88];
              operator delete(*(void **)&__dst[88]);
            }
            if (*(_QWORD *)&__dst[56])
            {
              *(_QWORD *)&__dst[64] = *(_QWORD *)&__dst[56];
              operator delete(*(void **)&__dst[56]);
            }
            if (*(_QWORD *)&__dst[32])
            {
              *(_QWORD *)&__dst[40] = *(_QWORD *)&__dst[32];
              operator delete(*(void **)&__dst[32]);
            }
            v269 = (__int128 *)(v250 + 168 * v228);
            v270 = v230[7];
            v271 = *v269;
            *(_DWORD *)(v270 - 152) = *((_DWORD *)v269 + 4);
            *(_OWORD *)(v270 - 168) = v271;
            *(_QWORD *)(v270 - 144) = *((_QWORD *)v269 + 3);
            *(_BYTE *)(v270 - 88) = *((_BYTE *)v269 + 80);
            if ((__int128 *)(v270 - 168) != v269)
              sub_20E86811C((_QWORD *)(v270 - 80), *(char **)(v250 + 168 * v228 + 88), *(char **)(v250 + 168 * v228 + 96), (uint64_t)(*(_QWORD *)(v250 + 168 * v228 + 96) - *(_QWORD *)(v250 + 168 * v228 + 88)) >> 3);
            v272 = v250 + 168 * v228;
            *(_BYTE *)(v270 - 56) = *(_BYTE *)(v272 + 112);
            v273 = v549;
            v274 = (uint64_t *)v548;
            memset(__dst, 0, 24);
            v275 = (char *)v549 - (_BYTE *)v548;
            if (v549 == v548)
            {
              v278 = 0;
              v287 = (_QWORD *)(v270 - 136);
              v286 = *(void **)(v270 - 136);
              if (v286)
                goto LABEL_215;
            }
            else
            {
              if ((unint64_t)v275 >= 0x2AAAAAAAAAAAAAA9)
                sub_20E92CED8();
              v276 = v275 >> 3;
              v277 = 48 * (v275 >> 3);
              v278 = (char *)operator new(v277);
              *(_QWORD *)__dst = v278;
              *(_QWORD *)&__dst[16] = &v278[48 * v276];
              v279 = 48 * ((v277 - 48) / 0x30) + 48;
              bzero(v278, v279);
              v275 = (uint64_t)&v278[v279];
              *(_QWORD *)&__dst[8] = &v278[v279];
              v280 = *(_QWORD *)(v272 + 32);
              v281 = v278;
              do
              {
                v282 = *v274++;
                v283 = (__int128 *)(v280 + 48 * v282);
                v284 = *v283;
                v285 = v283[2];
                v281[1] = v283[1];
                v281[2] = v285;
                *v281 = v284;
                v281 += 3;
              }
              while (v274 != (uint64_t *)v273);
              v228 = v544;
              v287 = (_QWORD *)(v270 - 136);
              v286 = *(void **)(v270 - 136);
              if (v286)
              {
LABEL_215:
                *(_QWORD *)(v270 - 128) = v286;
                operator delete(v286);
                *v287 = 0;
                v287[1] = 0;
                v287[2] = 0;
                v278 = *(char **)__dst;
                v275 = *(_QWORD *)&__dst[8];
              }
            }
            *(_QWORD *)(v270 - 136) = v278;
            *(_QWORD *)(v270 - 128) = v275;
            *(_QWORD *)(v270 - 120) = *(_QWORD *)&__dst[16];
            v288 = (char *)v549;
            v289 = (char *)v548;
            memset(__dst, 0, 24);
            v290 = (char *)v549 - (_BYTE *)v548;
            if (v549 == v548)
            {
              v293 = 0;
              v291 = 0;
              v301 = (_QWORD *)(v270 - 112);
              v300 = *(void **)(v270 - 112);
              if (v300)
                goto LABEL_221;
            }
            else
            {
              if ((unint64_t)v290 >= 0x1FFFFFFFFFFFFFF9)
                sub_20E92CED8();
              v291 = (char *)operator new(8 * v290);
              *(_QWORD *)__dst = v291;
              *(_QWORD *)&__dst[16] = &v291[64 * (v290 >> 3)];
              bzero(v291, 8 * v290);
              v292 = 0;
              v293 = &v291[8 * v290];
              *(_QWORD *)&__dst[8] = v293;
              v294 = *(_QWORD *)(v250 + 168 * v228 + 56);
              do
              {
                v295 = &v291[8 * v292];
                v296 = (__int128 *)(v294 + (*(_QWORD *)&v289[v292] << 6));
                v297 = *v296;
                v298 = v296[1];
                v299 = v296[3];
                *((_OWORD *)v295 + 2) = v296[2];
                *((_OWORD *)v295 + 3) = v299;
                *(_OWORD *)v295 = v297;
                *((_OWORD *)v295 + 1) = v298;
                v292 += 8;
              }
              while (&v289[v292] != v288);
              v301 = (_QWORD *)(v270 - 112);
              v300 = *(void **)(v270 - 112);
              if (v300)
              {
LABEL_221:
                *(_QWORD *)(v270 - 104) = v300;
                operator delete(v300);
                *v301 = 0;
                v301[1] = 0;
                v301[2] = 0;
                v291 = *(char **)__dst;
                v293 = *(char **)&__dst[8];
              }
            }
            *(_QWORD *)(v270 - 112) = v291;
            *(_QWORD *)(v270 - 104) = v293;
            *(_QWORD *)(v270 - 96) = *(_QWORD *)&__dst[16];
            v302 = (char *)v578;
            v303 = v549;
            v304 = (uint64_t *)v548;
            memset(__dst, 0, 24);
            v305 = (char *)v549 - (_BYTE *)v548;
            if (v549 == v548)
            {
              v308 = 0;
              v306 = 0;
              v315 = (char *)__sz;
              v316 = v577;
              if (__sz < v577)
                goto LABEL_227;
            }
            else
            {
              if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFF9)
                sub_20E9DEF2C();
              v306 = (char *)operator new(2 * v305);
              v307 = &v302[24 * v228];
              v308 = &v306[16 * (v305 >> 3)];
              *(_QWORD *)__dst = v306;
              *(_QWORD *)&__dst[16] = v308;
              bzero(v306, 2 * v305);
              v305 = (uint64_t)&v306[2 * v305];
              *(_QWORD *)&__dst[8] = v305;
              v309 = *(_QWORD *)v307;
              v310 = v306;
              do
              {
                v311 = *v304++;
                v312 = (uint64_t *)(v309 + 16 * v311);
                v314 = *v312;
                v313 = v312[1];
                *(_QWORD *)v310 = v314;
                *((_DWORD *)v310 + 2) = v313;
                v310 += 16;
              }
              while (v304 != (uint64_t *)v303);
              v315 = (char *)__sz;
              v316 = v577;
              if (__sz < v577)
              {
LABEL_227:
                *(_QWORD *)v315 = 0;
                *((_QWORD *)v315 + 1) = 0;
                *((_QWORD *)v315 + 2) = 0;
                *(_OWORD *)v315 = *(_OWORD *)__dst;
                *((_QWORD *)v315 + 2) = *(_QWORD *)&__dst[16];
                __sz = (size_t)(v315 + 24);
                goto LABEL_252;
              }
            }
            v317 = (char *)v575;
            v318 = 0xAAAAAAAAAAAAAAABLL * ((v315 - (_BYTE *)v575) >> 3);
            v319 = v318 + 1;
            if (v318 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20E9DEF2C();
            v320 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v316 - (_QWORD)v575) >> 3);
            if (2 * v320 > v319)
              v319 = 2 * v320;
            if (v320 >= 0x555555555555555)
              v321 = 0xAAAAAAAAAAAAAAALL;
            else
              v321 = v319;
            if (v321 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v322 = (char *)operator new(24 * v321);
            v323 = &v322[24 * v318];
            *(_QWORD *)v323 = v306;
            *((_QWORD *)v323 + 1) = v305;
            *((_QWORD *)v323 + 2) = v308;
            memset(__dst, 0, 24);
            v324 = (size_t)(v323 + 24);
            if (v315 == v317)
            {
              v575 = &v322[24 * v318];
              __sz = (size_t)(v323 + 24);
              v577 = (size_t)&v322[24 * v321];
            }
            else
            {
              do
              {
                v325 = *(_OWORD *)(v315 - 24);
                v315 -= 24;
                *(_OWORD *)(v323 - 24) = v325;
                v323 -= 24;
                *((_QWORD *)v323 + 2) = *((_QWORD *)v315 + 2);
                *(_QWORD *)v315 = 0;
                *((_QWORD *)v315 + 1) = 0;
                *((_QWORD *)v315 + 2) = 0;
              }
              while (v315 != v317);
              v315 = (char *)v575;
              v326 = __sz;
              v575 = v323;
              __sz = v324;
              v577 = (size_t)&v322[24 * v321];
              if ((char *)v326 != v315)
              {
                v327 = (char *)v326;
                do
                {
                  v329 = (void *)*((_QWORD *)v327 - 3);
                  v327 -= 24;
                  v328 = v329;
                  if (v329)
                  {
                    *(_QWORD *)(v326 - 16) = v328;
                    operator delete(v328);
                  }
                  v326 = (size_t)v327;
                }
                while (v327 != v315);
              }
            }
            if (v315)
              operator delete(v315);
            __sz = v324;
            if (*(_QWORD *)__dst)
            {
              *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
              operator delete(*(void **)__dst);
            }
LABEL_252:
            v330 = v572;
            v331 = v549;
            v332 = (uint64_t *)v548;
            memset(__dst, 0, 24);
            v333 = (char *)v549 - (_BYTE *)v548;
            if (v549 != v548)
            {
              if ((unint64_t)v333 > 0x5555555555555550)
                sub_20E9DEF2C();
              v334 = v333 >> 3;
              v335 = 24 * (v333 >> 3);
              v336 = operator new(v335);
              *(_QWORD *)__dst = v336;
              *(_QWORD *)&__dst[16] = &v336[3 * v334];
              v337 = 24 * ((v335 - 24) / 0x18) + 24;
              bzero(v336, v337);
              *(_QWORD *)&__dst[8] = (char *)v336 + v337;
              v338 = v330[3 * v228];
              do
              {
                v339 = *v332++;
                v340 = v338 + 24 * v339;
                v341 = *(_QWORD *)(v340 + 16);
                *(_OWORD *)v336 = *(_OWORD *)v340;
                v336[2] = v341;
                v336 += 3;
              }
              while (v332 != (uint64_t *)v331);
            }
            v342 = v570;
            if ((unint64_t)v570 >= v571)
            {
              v570 = sub_20E9DEF40((char **)&v569, (uint64_t)__dst);
              if (*(_QWORD *)__dst)
              {
                *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
                operator delete(*(void **)__dst);
              }
            }
            else
            {
              *(_QWORD *)v570 = 0;
              *((_QWORD *)v342 + 1) = 0;
              *((_QWORD *)v342 + 2) = 0;
              *(_OWORD *)v342 = *(_OWORD *)__dst;
              *((_QWORD *)v342 + 2) = *(_QWORD *)&__dst[16];
              v570 = v342 + 24;
            }
            v343 = v566;
            v344 = v549;
            v345 = (uint64_t *)v548;
            memset(__dst, 0, 24);
            v346 = (char *)v549 - (_BYTE *)v548;
            if (v549 != v548)
            {
              if ((unint64_t)v346 > 0x5555555555555550)
                sub_20E9DEF2C();
              v347 = v346 >> 3;
              v348 = 24 * (v346 >> 3);
              v349 = operator new(v348);
              *(_QWORD *)__dst = v349;
              *(_QWORD *)&__dst[16] = &v349[3 * v347];
              v350 = 24 * ((v348 - 24) / 0x18) + 24;
              bzero(v349, v350);
              *(_QWORD *)&__dst[8] = (char *)v349 + v350;
              v351 = v343[3 * v228];
              do
              {
                v352 = *v345++;
                v353 = v351 + 24 * v352;
                v354 = *(_QWORD *)(v353 + 16);
                *(_OWORD *)v349 = *(_OWORD *)v353;
                v349[2] = v354;
                v349 += 3;
              }
              while (v345 != (uint64_t *)v344);
            }
            v355 = v564;
            if ((unint64_t)v564 >= v565)
            {
              v564 = sub_20E9DEF40((char **)&v563, (uint64_t)__dst);
              if (*(_QWORD *)__dst)
              {
                *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
                operator delete(*(void **)__dst);
              }
            }
            else
            {
              *(_QWORD *)v564 = 0;
              *((_QWORD *)v355 + 1) = 0;
              *((_QWORD *)v355 + 2) = 0;
              *(_OWORD *)v355 = *(_OWORD *)__dst;
              *((_QWORD *)v355 + 2) = *(_QWORD *)&__dst[16];
              v564 = v355 + 24;
            }
            v356 = (char *)v560;
            v357 = v549;
            v358 = (uint64_t *)v548;
            memset(__dst, 0, 24);
            v359 = (char *)v549 - (_BYTE *)v548;
            if (v549 == v548)
            {
              v364 = 0;
              v366 = 0;
              v362 = 0;
              v370 = v558;
              v371 = v559;
              if (v558 < v559)
                goto LABEL_273;
            }
            else
            {
              if ((unint64_t)v359 >= 0x1999999999999999)
                sub_20E9DEF2C();
              v360 = v359 >> 3;
              v361 = 80 * (v359 >> 3);
              v362 = (char *)operator new(v361);
              v363 = &v356[24 * v228];
              v364 = &v362[80 * v360];
              *(_QWORD *)__dst = v362;
              *(_QWORD *)&__dst[16] = v364;
              v365 = 80 * ((v361 - 80) / 0x50) + 80;
              bzero(v362, v365);
              v366 = &v362[v365];
              *(_QWORD *)&__dst[8] = &v362[v365];
              v367 = *(_QWORD *)v363;
              v368 = v362;
              do
              {
                v369 = *v358++;
                memmove(v368, (const void *)(v367 + 80 * v369), 0x49uLL);
                v368 += 80;
              }
              while (v358 != (uint64_t *)v357);
              v370 = v558;
              v371 = v559;
              if (v558 < v559)
              {
LABEL_273:
                *(_QWORD *)v370 = 0;
                *((_QWORD *)v370 + 1) = 0;
                *((_QWORD *)v370 + 2) = 0;
                *(_OWORD *)v370 = *(_OWORD *)__dst;
                *((_QWORD *)v370 + 2) = *(_QWORD *)&__dst[16];
                v558 = v370 + 24;
                goto LABEL_294;
              }
            }
            v372 = (char *)v557;
            v373 = 0xAAAAAAAAAAAAAAABLL * ((v370 - (_BYTE *)v557) >> 3);
            v374 = v373 + 1;
            if (v373 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20E9DEF2C();
            v375 = 0xAAAAAAAAAAAAAAABLL * ((v371 - (_BYTE *)v557) >> 3);
            if (2 * v375 > v374)
              v374 = 2 * v375;
            if (v375 >= 0x555555555555555)
              v376 = 0xAAAAAAAAAAAAAAALL;
            else
              v376 = v374;
            if (v376 > 0xAAAAAAAAAAAAAAALL)
              sub_20E877A38();
            v377 = (char *)operator new(24 * v376);
            v378 = &v377[24 * v373];
            *(_QWORD *)v378 = v362;
            *((_QWORD *)v378 + 1) = v366;
            *((_QWORD *)v378 + 2) = v364;
            memset(__dst, 0, 24);
            v379 = v378 + 24;
            if (v370 == v372)
            {
              v557 = &v377[24 * v373];
              v558 = v378 + 24;
              v559 = &v377[24 * v376];
            }
            else
            {
              do
              {
                v380 = *(_OWORD *)(v370 - 24);
                v370 -= 24;
                *(_OWORD *)(v378 - 24) = v380;
                v378 -= 24;
                *((_QWORD *)v378 + 2) = *((_QWORD *)v370 + 2);
                *(_QWORD *)v370 = 0;
                *((_QWORD *)v370 + 1) = 0;
                *((_QWORD *)v370 + 2) = 0;
              }
              while (v370 != v372);
              v370 = (char *)v557;
              v381 = v558;
              v557 = v378;
              v558 = v379;
              v559 = &v377[24 * v376];
              if (v381 != v370)
              {
                v382 = v381;
                do
                {
                  v384 = (void *)*((_QWORD *)v382 - 3);
                  v382 -= 24;
                  v383 = v384;
                  if (v384)
                  {
                    *((_QWORD *)v381 - 2) = v383;
                    operator delete(v383);
                  }
                  v381 = v382;
                }
                while (v382 != v370);
              }
            }
            if (v370)
              operator delete(v370);
            v558 = v379;
            if (*(_QWORD *)__dst)
            {
              *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
              operator delete(*(void **)__dst);
            }
            goto LABEL_294;
          }
        }
        else
        {
          v237 = 0;
          v238 = (char *)(8 * v233);
          *(_QWORD *)(8 * v233) = v544;
          v229 = 8 * v233 + 8;
          v239 = v227 - v231;
          if (v227 != v231)
            goto LABEL_171;
        }
        v230 = (_QWORD *)a7;
        goto LABEL_180;
      }
LABEL_294:
      if (v546[0])
      {
        v546[1] = v546[0];
        operator delete(v546[0]);
      }
      if (v548)
      {
        v549 = (unint64_t *)v548;
        operator delete(v548);
      }
      v62 = v544 + 1;
    }
    while (v544 + 1 != v461);
  }
  sub_20FCCDFEC((uint64_t *)&v575, &v569, &v563, &v557, (int64x2_t *)__dst);
  v385 = (void **)(a7 + 72);
  v386 = *(_QWORD *)(a7 + 72);
  v387 = a1;
  if (v386)
  {
    v388 = *(_QWORD *)(a7 + 80);
    v389 = *(void **)(a7 + 72);
    if (v388 != v386)
    {
      do
      {
        v390 = *(void **)(v388 - 32);
        if (v390)
        {
          *(_QWORD *)(v388 - 24) = v390;
          operator delete(v390);
        }
        v388 -= 176;
      }
      while (v388 != v386);
      v389 = *v385;
    }
    *(_QWORD *)(a7 + 80) = v386;
    operator delete(v389);
    *v385 = 0;
    *(_QWORD *)(a7 + 80) = 0;
    *(_QWORD *)(a7 + 88) = 0;
  }
  *(_OWORD *)(a7 + 72) = *(_OWORD *)__dst;
  *(_QWORD *)(a7 + 88) = *(_QWORD *)&__dst[16];
  v391 = (char *)v551;
  memset(v586, 0, sizeof(v586));
  v545 = v552;
  v392 = v552 - (_BYTE *)v551;
  if (v552 != v551)
  {
    if ((unint64_t)v392 >= 0x28F5C28F5C28F59)
      sub_20E92CED8();
    v393 = v392 >> 3;
    v394 = (char *)operator new(800 * (v392 >> 3));
    *(_QWORD *)v586 = v394;
    *(_QWORD *)&v586[16] = &v394[800 * v393];
    bzero(v394, 800 * ((800 * v393 - 800) / 0x320uLL) + 800);
    *(_QWORD *)&v586[8] = &v394[800 * ((800 * v393 - 800) / 0x320uLL) + 800];
    do
    {
      v395 = *(_QWORD *)v391;
      v396 = v387[3];
      v397 = &v396[50 * *(_QWORD *)v391];
      memcpy(__dst, v397, sizeof(__dst));
      v583 = 0;
      v584 = 0;
      v582 = 0;
      v398 = (_BYTE *)v397[46].i64[1];
      v399 = (_BYTE *)v397[47].i64[0];
      v400 = v399 - v398;
      if (v399 == v398)
      {
        v402 = 0;
        v401 = 0;
      }
      else
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v400 >> 3)) >= 0x492492492492493)
          sub_20E92CED8();
        v401 = (char *)operator new(v400);
        v402 = &v401[8 * (v400 >> 3)];
        memcpy(v401, v398, v400);
      }
      v403 = &v396[50 * v395];
      v404 = v403[48];
      *(int64x2_t *)((char *)v585 + 12) = *(int64x2_t *)((char *)v403 + 780);
      v585[0] = v404;
      memcpy(v394, __dst, 0x2E8uLL);
      v405 = (void *)*((_QWORD *)v394 + 93);
      if (v405)
      {
        *((_QWORD *)v394 + 94) = v405;
        operator delete(v405);
        *((_QWORD *)v394 + 93) = 0;
        *((_QWORD *)v394 + 94) = 0;
        *((_QWORD *)v394 + 95) = 0;
      }
      *((_QWORD *)v394 + 93) = v401;
      *((_QWORD *)v394 + 94) = v402;
      *((_QWORD *)v394 + 95) = v402;
      *((int64x2_t *)v394 + 48) = v585[0];
      *(int64x2_t *)(v394 + 780) = *(int64x2_t *)((char *)v585 + 12);
      v391 += 8;
      v394 += 800;
      v387 = a1;
    }
    while (v391 != v545);
  }
  v406 = (char *)*v458;
  if (*v458)
  {
    v407 = *(char **)(a7 + 32);
    v408 = *v458;
    if (v407 != v406)
    {
      do
      {
        v409 = (void *)*((_QWORD *)v407 - 7);
        if (v409)
        {
          *((_QWORD *)v407 - 6) = v409;
          operator delete(v409);
        }
        v407 -= 800;
      }
      while (v407 != v406);
      v408 = *v458;
    }
    *(_QWORD *)(a7 + 32) = v406;
    operator delete(v408);
    *v458 = 0;
    *(_QWORD *)(a7 + 32) = 0;
    *(_QWORD *)(a7 + 40) = 0;
  }
  *(_OWORD *)(a7 + 24) = *(_OWORD *)v586;
  *(_QWORD *)(a7 + 40) = *(_QWORD *)&v586[16];
  if (v551)
  {
    v552 = (char *)v551;
    operator delete(v551);
  }
  if (__p)
  {
    v555 = (double *)__p;
    operator delete(__p);
  }
  v410 = (char *)v557;
  if (v557)
  {
    v411 = v558;
    v412 = v557;
    if (v558 != v557)
    {
      v413 = v558;
      do
      {
        v415 = (void *)*((_QWORD *)v413 - 3);
        v413 -= 24;
        v414 = v415;
        if (v415)
        {
          *((_QWORD *)v411 - 2) = v414;
          operator delete(v414);
        }
        v411 = v413;
      }
      while (v413 != v410);
      v412 = v557;
    }
    v558 = v410;
    operator delete(v412);
  }
  v416 = (char *)v560;
  if (v560)
  {
    v417 = v561;
    v418 = v560;
    if (v561 != v560)
    {
      v419 = v561;
      do
      {
        v421 = (void *)*((_QWORD *)v419 - 3);
        v419 -= 24;
        v420 = v421;
        if (v421)
        {
          *((_QWORD *)v417 - 2) = v420;
          operator delete(v420);
        }
        v417 = v419;
      }
      while (v419 != v416);
      v418 = v560;
    }
    v561 = v416;
    operator delete(v418);
  }
  v422 = (char *)v563;
  if (v563)
  {
    v423 = v564;
    v424 = v563;
    if (v564 != v563)
    {
      v425 = v564;
      do
      {
        v427 = (void *)*((_QWORD *)v425 - 3);
        v425 -= 24;
        v426 = v427;
        if (v427)
        {
          *((_QWORD *)v423 - 2) = v426;
          operator delete(v426);
        }
        v423 = v425;
      }
      while (v425 != v422);
      v424 = v563;
    }
    v564 = v422;
    operator delete(v424);
  }
  v428 = (char *)v566;
  if (v566)
  {
    v429 = v567;
    v430 = v566;
    if (v567 != v566)
    {
      v431 = v567;
      do
      {
        v433 = (void *)*((_QWORD *)v431 - 3);
        v431 -= 24;
        v432 = v433;
        if (v433)
        {
          *((_QWORD *)v429 - 2) = v432;
          operator delete(v432);
        }
        v429 = v431;
      }
      while (v431 != v428);
      v430 = v566;
    }
    v567 = v428;
    operator delete(v430);
  }
  v434 = (char *)v569;
  if (v569)
  {
    v435 = v570;
    v436 = v569;
    if (v570 != v569)
    {
      v437 = v570;
      do
      {
        v439 = (void *)*((_QWORD *)v437 - 3);
        v437 -= 24;
        v438 = v439;
        if (v439)
        {
          *((_QWORD *)v435 - 2) = v438;
          operator delete(v438);
        }
        v435 = v437;
      }
      while (v437 != v434);
      v436 = v569;
    }
    v570 = v434;
    operator delete(v436);
  }
  v440 = (char *)v572;
  if (v572)
  {
    v441 = v573;
    v442 = v572;
    if (v573 != v572)
    {
      v443 = v573;
      do
      {
        v445 = (void *)*((_QWORD *)v443 - 3);
        v443 -= 24;
        v444 = v445;
        if (v445)
        {
          *((_QWORD *)v441 - 2) = v444;
          operator delete(v444);
        }
        v441 = v443;
      }
      while (v443 != v440);
      v442 = v572;
    }
    v573 = v440;
    operator delete(v442);
  }
  v446 = v575;
  if (v575)
  {
    v447 = __sz;
    v448 = v575;
    if ((void *)__sz != v575)
    {
      v449 = __sz;
      do
      {
        v451 = *(void **)(v449 - 24);
        v449 -= 24;
        v450 = v451;
        if (v451)
        {
          *(_QWORD *)(v447 - 16) = v450;
          operator delete(v450);
        }
        v447 = v449;
      }
      while ((void *)v449 != v446);
      v448 = v575;
    }
    __sz = (size_t)v446;
    operator delete(v448);
  }
  v452 = (char *)v578;
  if (v578)
  {
    v453 = v579;
    v454 = v578;
    if (v579 != v578)
    {
      v455 = v579;
      do
      {
        v457 = (void *)*((_QWORD *)v455 - 3);
        v455 -= 24;
        v456 = v457;
        if (v457)
        {
          *((_QWORD *)v453 - 2) = v456;
          operator delete(v456);
        }
        v453 = v455;
      }
      while (v455 != v452);
      v454 = v578;
    }
    v579 = v452;
    operator delete(v454);
  }
}

void sub_20E9DD16C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  void *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  unint64_t v32;
  void *v33;
  unint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  void *v38;
  unint64_t v39;
  void *v40;
  void *v41;
  unint64_t v42;
  void *v43;
  unint64_t v44;
  void *v45;
  void *v46;
  unint64_t v47;
  void *v48;
  unint64_t v49;
  void *v50;
  void *v51;

  sub_20E8FB5B8(v1);
  v3 = (void *)STACK[0x398];
  if (STACK[0x398])
  {
    STACK[0x3A0] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = STACK[0x3B0];
  if (STACK[0x3B0])
  {
    v5 = STACK[0x3B8];
    v6 = (void *)STACK[0x3B0];
    if (STACK[0x3B8] != v4)
    {
      v7 = STACK[0x3B8];
      do
      {
        v9 = *(void **)(v7 - 24);
        v7 -= 24;
        v8 = v9;
        if (v9)
        {
          *(_QWORD *)(v5 - 16) = v8;
          operator delete(v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
      v6 = (void *)STACK[0x3B0];
    }
    STACK[0x3B8] = v4;
    operator delete(v6);
  }
  v10 = STACK[0x3C8];
  if (STACK[0x3C8])
  {
    v17 = STACK[0x3D0];
    v18 = (void *)STACK[0x3C8];
    if (STACK[0x3D0] != v10)
    {
      v19 = STACK[0x3D0];
      do
      {
        v21 = *(void **)(v19 - 24);
        v19 -= 24;
        v20 = v21;
        if (v21)
        {
          *(_QWORD *)(v17 - 16) = v20;
          operator delete(v20);
        }
        v17 = v19;
      }
      while (v19 != v10);
      v18 = (void *)STACK[0x3C8];
    }
    STACK[0x3D0] = v10;
    operator delete(v18);
    v11 = STACK[0x3E0];
    if (!STACK[0x3E0])
    {
LABEL_13:
      v12 = STACK[0x3F8];
      if (!STACK[0x3F8])
        goto LABEL_14;
      goto LABEL_33;
    }
  }
  else
  {
    v11 = STACK[0x3E0];
    if (!STACK[0x3E0])
      goto LABEL_13;
  }
  v22 = STACK[0x3E8];
  v23 = (void *)v11;
  if (STACK[0x3E8] != v11)
  {
    v24 = STACK[0x3E8];
    do
    {
      v26 = *(void **)(v24 - 24);
      v24 -= 24;
      v25 = v26;
      if (v26)
      {
        *(_QWORD *)(v22 - 16) = v25;
        operator delete(v25);
      }
      v22 = v24;
    }
    while (v24 != v11);
    v23 = (void *)STACK[0x3E0];
  }
  STACK[0x3E8] = v11;
  operator delete(v23);
  v12 = STACK[0x3F8];
  if (!STACK[0x3F8])
  {
LABEL_14:
    v13 = STACK[0x410];
    if (!STACK[0x410])
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_33:
  v27 = STACK[0x400];
  v28 = (void *)v12;
  if (STACK[0x400] != v12)
  {
    v29 = STACK[0x400];
    do
    {
      v31 = *(void **)(v29 - 24);
      v29 -= 24;
      v30 = v31;
      if (v31)
      {
        *(_QWORD *)(v27 - 16) = v30;
        operator delete(v30);
      }
      v27 = v29;
    }
    while (v29 != v12);
    v28 = (void *)STACK[0x3F8];
  }
  STACK[0x400] = v12;
  operator delete(v28);
  v13 = STACK[0x410];
  if (!STACK[0x410])
  {
LABEL_15:
    v14 = STACK[0x428];
    if (!STACK[0x428])
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_40:
  v32 = STACK[0x418];
  v33 = (void *)v13;
  if (STACK[0x418] != v13)
  {
    v34 = STACK[0x418];
    do
    {
      v36 = *(void **)(v34 - 24);
      v34 -= 24;
      v35 = v36;
      if (v36)
      {
        *(_QWORD *)(v32 - 16) = v35;
        operator delete(v35);
      }
      v32 = v34;
    }
    while (v34 != v13);
    v33 = (void *)STACK[0x410];
  }
  STACK[0x418] = v13;
  operator delete(v33);
  v14 = STACK[0x428];
  if (!STACK[0x428])
  {
LABEL_16:
    v15 = STACK[0x440];
    if (!STACK[0x440])
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_47:
  v37 = STACK[0x430];
  v38 = (void *)v14;
  if (STACK[0x430] != v14)
  {
    v39 = STACK[0x430];
    do
    {
      v41 = *(void **)(v39 - 24);
      v39 -= 24;
      v40 = v41;
      if (v41)
      {
        *(_QWORD *)(v37 - 16) = v40;
        operator delete(v40);
      }
      v37 = v39;
    }
    while (v39 != v14);
    v38 = (void *)STACK[0x428];
  }
  STACK[0x430] = v14;
  operator delete(v38);
  v15 = STACK[0x440];
  if (!STACK[0x440])
  {
LABEL_17:
    v16 = STACK[0x458];
    if (!STACK[0x458])
      goto LABEL_18;
    goto LABEL_61;
  }
LABEL_54:
  v42 = STACK[0x448];
  v43 = (void *)v15;
  if (STACK[0x448] != v15)
  {
    v44 = STACK[0x448];
    do
    {
      v46 = *(void **)(v44 - 24);
      v44 -= 24;
      v45 = v46;
      if (v46)
      {
        *(_QWORD *)(v42 - 16) = v45;
        operator delete(v45);
      }
      v42 = v44;
    }
    while (v44 != v15);
    v43 = (void *)STACK[0x440];
  }
  STACK[0x448] = v15;
  operator delete(v43);
  v16 = STACK[0x458];
  if (!STACK[0x458])
LABEL_18:
    _Unwind_Resume(a1);
LABEL_61:
  v47 = STACK[0x460];
  v48 = (void *)v16;
  if (STACK[0x460] != v16)
  {
    v49 = STACK[0x460];
    do
    {
      v51 = *(void **)(v49 - 24);
      v49 -= 24;
      v50 = v51;
      if (v51)
      {
        *(_QWORD *)(v47 - 16) = v50;
        operator delete(v50);
      }
      v47 = v49;
    }
    while (v49 != v16);
    v48 = (void *)STACK[0x458];
  }
  STACK[0x460] = v16;
  operator delete(v48);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9DD610(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)a1[18];
  if (v2)
  {
    a1[19] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  return a1;
}

void **sub_20E9DD680(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20E9DD6F4(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  void *v43;
  char *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  void *v49;
  char *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  void *v55;
  char *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  void *v61;
  void *__p;
  char *v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  a2[1] = 0;
  v4 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  __p = 0;
  v63 = 0;
  v64 = 0;
  sub_20FCCD598((uint64_t *)(a1 + 48), (uint64_t **)(a1 + 72), (char **)&v71, (uint64_t *)&v68, &v65, (uint64_t)&__p);
  if (v72 - (_BYTE *)v71 != v69 - (_BYTE *)v68
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/internal/ODTMapUtils.cpp", 318, (uint64_t)"frame_feature_track_ids.size() == frame_feature_positions.size()", 64, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v5 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v6 = 0;
    v7 = v5 / 168;
    if (v7 <= 1)
      v8 = 1;
    else
      v8 = v7;
    do
    {
      v9 = (uint64_t)(*((_QWORD *)v71 + 3 * v6 + 1) - *((_QWORD *)v71 + 3 * v6)) >> 4;
      v11 = *((_QWORD *)v68 + 3 * v6);
      v10 = *((_QWORD *)v68 + 3 * v6 + 1);
      if (v9 != (v10 - v11) / 24)
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/internal/ODTMapUtils.cpp", 321, (uint64_t)"frame_feature_track_ids[i_frame].size() == frame_feature_positions[i_frame].size()", 82, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v12 = (uint64_t *)((char *)v68 + 24 * v6);
        v11 = *v12;
        v10 = v12[1];
        v13 = (unsigned __int128)((v10 - *v12) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
        v9 = (v13 >> 2) + ((unint64_t)v13 >> 63);
      }
      if (v10 != v11)
      {
        v14 = 0;
        if (v9 <= 1)
          v15 = 1;
        else
          v15 = v9;
        do
        {
          v16 = *(_DWORD *)(*((_QWORD *)v71 + 3 * v6) + 16 * v14 + 8);
          if (v16 != -1)
          {
            v17 = *((_QWORD *)v68 + 3 * v6) + 24 * v14;
            v74 = *(_OWORD *)v17;
            v75 = *(_QWORD *)(v17 + 16);
            v18 = (uint64_t *)operator new(0x40uLL);
            *((_DWORD *)v18 + 8) = v16;
            *(_OWORD *)(v18 + 5) = v74;
            v18[7] = v75;
            v19 = *v4;
            v20 = a2 + 1;
            v21 = (uint64_t *)(a2 + 1);
            if (*v4)
            {
              do
              {
                while (1)
                {
                  v21 = v19;
                  v25 = *((_DWORD *)v19 + 8);
                  if (v16 >= v25)
                    break;
                  v19 = (uint64_t *)*v19;
                  v20 = (uint64_t **)v21;
                  if (!*v21)
                    goto LABEL_22;
                }
                if (v25 >= v16)
                {
                  operator delete(v18);
                  goto LABEL_19;
                }
                v19 = (uint64_t *)v19[1];
              }
              while (v19);
              v20 = (uint64_t **)(v21 + 1);
              *v18 = 0;
              v18[1] = 0;
              v18[2] = (uint64_t)v21;
              v21[1] = (uint64_t)v18;
              v22 = (uint64_t *)**a2;
              if (v22)
                goto LABEL_23;
            }
            else
            {
LABEL_22:
              *v18 = 0;
              v18[1] = 0;
              v18[2] = (uint64_t)v21;
              *v20 = v18;
              v22 = (uint64_t *)**a2;
              if (v22)
              {
LABEL_23:
                *a2 = v22;
                v18 = *v20;
              }
            }
            v23 = *v4;
            v24 = v18 == *v4;
            *((_BYTE *)v18 + 24) = v24;
            if (!v24)
            {
              do
              {
                v26 = v18[2];
                if (*(_BYTE *)(v26 + 24))
                  break;
                v27 = *(uint64_t **)(v26 + 16);
                v28 = *v27;
                if (*v27 == v26)
                {
                  v31 = v27[1];
                  if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), v29 = (_BYTE *)(v31 + 24), v32))
                  {
                    if (*(uint64_t **)v26 == v18)
                    {
                      *(_BYTE *)(v26 + 24) = 1;
                      *((_BYTE *)v27 + 24) = 0;
                      v35 = *(_QWORD *)(v26 + 8);
                      *v27 = v35;
                      if (v35)
                        goto LABEL_45;
                    }
                    else
                    {
                      v33 = *(uint64_t **)(v26 + 8);
                      v34 = *v33;
                      *(_QWORD *)(v26 + 8) = *v33;
                      if (v34)
                      {
                        *(_QWORD *)(v34 + 16) = v26;
                        v27 = *(uint64_t **)(v26 + 16);
                      }
                      v33[2] = (uint64_t)v27;
                      *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v33;
                      *v33 = v26;
                      *(_QWORD *)(v26 + 16) = v33;
                      v27 = (uint64_t *)v33[2];
                      v26 = *v27;
                      *((_BYTE *)v33 + 24) = 1;
                      *((_BYTE *)v27 + 24) = 0;
                      v35 = *(_QWORD *)(v26 + 8);
                      *v27 = v35;
                      if (v35)
LABEL_45:
                        *(_QWORD *)(v35 + 16) = v27;
                    }
                    *(_QWORD *)(v26 + 16) = v27[2];
                    *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v26;
                    *(_QWORD *)(v26 + 8) = v27;
LABEL_17:
                    v27[2] = v26;
                    break;
                  }
                }
                else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), v29 = (_BYTE *)(v28 + 24), v30))
                {
                  if (*(uint64_t **)v26 == v18)
                  {
                    v37 = v18[1];
                    *(_QWORD *)v26 = v37;
                    if (v37)
                    {
                      *(_QWORD *)(v37 + 16) = v26;
                      v27 = *(uint64_t **)(v26 + 16);
                    }
                    v18[2] = (uint64_t)v27;
                    *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v18;
                    v18[1] = v26;
                    *(_QWORD *)(v26 + 16) = v18;
                    v27 = (uint64_t *)v18[2];
                    *((_BYTE *)v18 + 24) = 1;
                    *((_BYTE *)v27 + 24) = 0;
                    v26 = v27[1];
                    v36 = *(uint64_t **)v26;
                    v27[1] = *(_QWORD *)v26;
                    if (!v36)
                      goto LABEL_16;
                  }
                  else
                  {
                    *(_BYTE *)(v26 + 24) = 1;
                    *((_BYTE *)v27 + 24) = 0;
                    v26 = v27[1];
                    v36 = *(uint64_t **)v26;
                    v27[1] = *(_QWORD *)v26;
                    if (!v36)
                      goto LABEL_16;
                  }
                  v36[2] = (uint64_t)v27;
LABEL_16:
                  *(_QWORD *)(v26 + 16) = v27[2];
                  *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v26;
                  *(_QWORD *)v26 = v27;
                  goto LABEL_17;
                }
                *(_BYTE *)(v26 + 24) = 1;
                v18 = v27;
                *((_BYTE *)v27 + 24) = v27 == v23;
                *v29 = 1;
              }
              while (v27 != v23);
            }
            a2[2] = (uint64_t *)((char *)a2[2] + 1);
          }
LABEL_19:
          ++v14;
        }
        while (v14 != v15);
      }
      ++v6;
    }
    while (v6 != v8);
  }
  v38 = (char *)__p;
  if (__p)
  {
    v39 = v63;
    v40 = __p;
    if (v63 != __p)
    {
      v41 = v63;
      do
      {
        v43 = (void *)*((_QWORD *)v41 - 3);
        v41 -= 24;
        v42 = v43;
        if (v43)
        {
          *((_QWORD *)v39 - 2) = v42;
          operator delete(v42);
        }
        v39 = v41;
      }
      while (v41 != v38);
      v40 = __p;
    }
    v63 = v38;
    operator delete(v40);
  }
  v44 = (char *)v65;
  if (v65)
  {
    v45 = v66;
    v46 = v65;
    if (v66 != v65)
    {
      v47 = v66;
      do
      {
        v49 = (void *)*((_QWORD *)v47 - 3);
        v47 -= 24;
        v48 = v49;
        if (v49)
        {
          *((_QWORD *)v45 - 2) = v48;
          operator delete(v48);
        }
        v45 = v47;
      }
      while (v47 != v44);
      v46 = v65;
    }
    v66 = v44;
    operator delete(v46);
  }
  v50 = (char *)v68;
  if (v68)
  {
    v51 = v69;
    v52 = v68;
    if (v69 != v68)
    {
      v53 = v69;
      do
      {
        v55 = (void *)*((_QWORD *)v53 - 3);
        v53 -= 24;
        v54 = v55;
        if (v55)
        {
          *((_QWORD *)v51 - 2) = v54;
          operator delete(v54);
        }
        v51 = v53;
      }
      while (v53 != v50);
      v52 = v68;
    }
    v69 = v50;
    operator delete(v52);
  }
  v56 = (char *)v71;
  if (v71)
  {
    v57 = v72;
    v58 = v71;
    if (v72 != v71)
    {
      v59 = v72;
      do
      {
        v61 = (void *)*((_QWORD *)v59 - 3);
        v59 -= 24;
        v60 = v61;
        if (v61)
        {
          *((_QWORD *)v57 - 2) = v60;
          operator delete(v60);
        }
        v57 = v59;
      }
      while (v59 != v56);
      v58 = v71;
    }
    v72 = v56;
    operator delete(v58);
  }
}

void sub_20E9DDD08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, void *);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, void *);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  sub_20E9DD680((void **)va);
  sub_20E9DD680((void **)va1);
  sub_20E9DD680((void **)va2);
  sub_20E9DD680((void **)va3);
  sub_20E86872C(v2, *(_QWORD **)(v2 + 8));
  _Unwind_Resume(a1);
}

void sub_20E9DDD4C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  _QWORD *v11[2];

  sub_20E9DD6F4(a1, &v10);
  v3 = (unint64_t)v11[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!v3)
  {
    v4 = 0;
    v5 = v10;
    if (v10 == (uint64_t *)v11)
      goto LABEL_6;
    goto LABEL_8;
  }
  if (v3 >= 0xAAAAAAAAAAAAAABLL)
    sub_20E9DEF2C();
  v4 = operator new(24 * v3);
  *a2 = v4;
  a2[2] = &v4[3 * v3];
  bzero(v4, 24 * ((24 * v3 - 24) / 0x18) + 24);
  a2[1] = &v4[3 * ((24 * v3 - 24) / 0x18) + 3];
  v5 = v10;
  if (v10 != (uint64_t *)v11)
  {
    do
    {
LABEL_8:
      v6 = v5[7];
      *(_OWORD *)v4 = *(_OWORD *)(v5 + 5);
      v4[2] = v6;
      v7 = (uint64_t *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v4 += 3;
      v5 = v8;
    }
    while (v8 != (uint64_t *)v11);
  }
LABEL_6:
  sub_20E86872C((uint64_t)&v10, v11[0]);
}

void sub_20E9DDE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  sub_20E86872C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20E9DDEB8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  _OWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  _QWORD *v12[2];

  sub_20E9DD6F4(a1, &v11);
  v3 = (unint64_t)v12[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (!v3)
  {
    v4 = 0;
    v5 = v11;
    if (v11 == (uint64_t *)v12)
      goto LABEL_6;
    goto LABEL_8;
  }
  if (v3 >> 59)
    sub_20E9DEF2C();
  v4 = operator new(32 * v3);
  *a2 = v4;
  a2[2] = &v4[2 * v3];
  bzero(v4, 32 * v3);
  a2[1] = &v4[2 * v3];
  v5 = v11;
  if (v11 != (uint64_t *)v12)
  {
    do
    {
LABEL_8:
      v6 = v5[7];
      v7 = *((_DWORD *)v5 + 8);
      *v4 = *(_OWORD *)(v5 + 5);
      *((_QWORD *)v4 + 2) = v6;
      *((_DWORD *)v4 + 6) = v7;
      v8 = (uint64_t *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v4 += 2;
      v5 = v9;
    }
    while (v9 != (uint64_t *)v12);
  }
LABEL_6:
  sub_20E86872C((uint64_t)&v11, v12[0]);
}

void sub_20E9DDFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  sub_20E86872C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20E9DDFFC(_QWORD *a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *i;
  _QWORD *j;
  double *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  double v19;
  uint64_t **v20;
  uint64_t ***v21;
  uint64_t **v22;
  double v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  double *v29;
  double *v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  char *v36;
  char *v37;
  void *v38;
  char *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  double v48;
  _QWORD **v49;
  _QWORD *v50;
  _QWORD **v51;
  double v52;
  _QWORD *v53;
  double *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  uint8x8_t v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint8x8_t v64;
  unint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double *v75;
  double *v76;
  double *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  double *v82;
  double *v83;
  __int128 v84;
  double *v85;
  double *v86;
  float *v87;
  double v88;
  double v89;
  double v90;
  double *v91;
  double *v92;
  double *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  double *v98;
  double *v99;
  __int128 v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  uint64_t *v115;
  uint64_t **v116;
  float64x2_t v117;
  char *v118;
  _QWORD *v119;
  void *v120;
  _QWORD *v121;
  void *v122;
  _QWORD *v123;
  std::__shared_weak_count *v124;
  unint64_t *p_shared_owners;
  unint64_t v126;
  _QWORD *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  void *v132;
  int64x2_t v133;
  uint64_t v134;
  int64x2_t v135;
  int64x2_t v136;
  __int128 v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  char *v142;
  unint64_t v143;
  void *__p[2];
  void *v145[2];
  int64x2_t v146;
  uint64_t v147;
  int64x2_t v148;
  uint64_t v149;
  int64x2_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  char v156;
  void *v157;
  char *v158;
  uint64_t v159;
  void *v160;
  __int128 v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  _BYTE v165[16];
  void *v166;
  double *v167;
  double *v168;
  void *v169;
  double *v170;
  double *v171;
  __int16 v172;
  int64x2_t v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  int64x2_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  _QWORD *v192;
  _QWORD v193[3];
  _QWORD v194[2];
  __int128 v195;
  __int128 v196;
  int v197;
  __int128 v198;
  __int128 v199;
  int v200;
  uint64_t v201;
  double *v202;
  _QWORD *v203[2];
  __int128 v204;
  __int128 v205;
  int v206;
  _QWORD **v207;
  _QWORD *v208[2];
  __int128 v209;
  __int128 v210;
  int v211;

  v208[0] = 0;
  v208[1] = 0;
  v207 = v208;
  v209 = 0u;
  v210 = 0u;
  v211 = 1065353216;
  v203[0] = 0;
  v203[1] = 0;
  v202 = (double *)v203;
  v204 = 0u;
  v205 = 0u;
  v206 = 1065353216;
  sub_20EDB9F70((uint64_t)&v207, (_QWORD *)*a1);
  sub_20EDB9F70((uint64_t)&v202, *a2);
  for (i = (_QWORD *)v210; i; i = (_QWORD *)*i)
    *(_BYTE *)(i[3] + 52) = 0;
  for (j = (_QWORD *)v205; j; j = (_QWORD *)*j)
    *(_BYTE *)(j[3] + 52) = 0;
  v193[0] = 0;
  v192 = v193;
  v194[1] = 0;
  v194[0] = 0;
  v193[1] = 0;
  v193[2] = v194;
  v195 = 0u;
  v196 = 0u;
  v197 = 1065353216;
  v198 = 0u;
  v199 = 0u;
  v200 = 1065353216;
  v201 = 0;
  v172 = 1;
  v173 = vdupq_n_s64(0x10uLL);
  v174 = xmmword_2102EF0A0;
  v175 = 4;
  v176 = 0x402E000000000000;
  v177 = 1061997773;
  v178 = 12;
  v179 = 1;
  v181 = xmmword_2102EF0B0;
  __asm { FMOV            V0.2D, #0.5 }
  v182 = _Q0;
  v180 = 20;
  v183 = vdupq_n_s64(0x3FD3333333333333uLL);
  __asm { FMOV            V0.2D, #1.0 }
  v184 = _Q0;
  v185 = xmmword_2102EF0C0;
  v186 = xmmword_2102EF0D0;
  v187 = 0x3F0000003F333333;
  v188 = 20;
  v189 = 0x3FE3333333333333;
  v190 = 4;
  v191 = 1;
  if (sub_20EDC1A7C((__int128 *)&v172, a1, 1uLL))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 96) = 0;
    goto LABEL_211;
  }
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v165[0] = 0;
  v165[8] = 0;
  v163 = 0;
  v164 = 0;
  v162 = &v163;
  v14 = v202;
  if (v202 != (double *)v203)
  {
    while (1)
    {
      v15 = v163;
      v16 = &v163;
      if (v162 != &v163)
      {
        v17 = v163;
        v18 = &v163;
        if (v163)
        {
          do
          {
            v16 = (uint64_t **)v17;
            v17 = (uint64_t *)v17[1];
          }
          while (v17);
        }
        else
        {
          do
          {
            v16 = (uint64_t **)v18[2];
            _ZF = *v16 == (uint64_t *)v18;
            v18 = v16;
          }
          while (_ZF);
        }
        v19 = v14[4];
        if (*((double *)v16 + 4) >= v19)
          break;
      }
      if (v163)
        v20 = v16;
      else
        v20 = &v163;
      if (v163)
        v21 = (uint64_t ***)v16;
      else
        v21 = &v162;
      if (v163)
        v22 = v16 + 1;
      else
        v22 = &v163;
      if (!v21[1])
        goto LABEL_34;
LABEL_40:
      v29 = (double *)*((_QWORD *)v14 + 1);
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = *(double **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (double *)*((_QWORD *)v14 + 2);
          _ZF = *(_QWORD *)v30 == (_QWORD)v14;
          v14 = v30;
        }
        while (!_ZF);
      }
      v14 = v30;
      if (v30 == (double *)v203)
      {
        v31 = (uint64_t *)v162;
        if (v162 == &v163)
          goto LABEL_201;
        while (2)
        {
          v153 = 0;
          v154 = 0uLL;
          v32 = v31[5];
          v157 = 0;
          v158 = 0;
          v159 = 0;
          *(_OWORD *)__p = 0u;
          *(_OWORD *)v145 = 0u;
          v146.i32[0] = 1065353216;
          sub_20EDC2BD4((uint64_t)&v172, v32 + 344, (double *)(v32 + 104), (uint64_t *)&v157, __p, (uint64_t)v165, (uint64_t)&v160);
          v33 = v145[0];
          v34 = v160;
          v153 = (uint64_t)v160;
          v141 = (_QWORD *)v161;
          v154 = v161;
          v161 = 0uLL;
          v160 = 0;
          if (v145[0])
          {
            do
            {
              v40 = (_QWORD *)*v33;
              v41 = (void *)v33[3];
              if (v41)
              {
                v33[4] = v41;
                operator delete(v41);
              }
              operator delete(v33);
              v33 = v40;
            }
            while (v40);
          }
          v35 = __p[0];
          __p[0] = 0;
          if (v35)
            operator delete(v35);
          v36 = (char *)v157;
          if (v157)
          {
            v37 = v158;
            v38 = v157;
            if (v158 != v157)
            {
              v39 = v158;
              do
              {
                v43 = (void *)*((_QWORD *)v39 - 3);
                v39 -= 24;
                v42 = v43;
                if (v43)
                {
                  *((_QWORD *)v37 - 2) = v42;
                  operator delete(v42);
                }
                v37 = v39;
              }
              while (v39 != v36);
              v38 = v157;
            }
            v158 = v36;
            operator delete(v38);
          }
          v44 = v141;
          if (v34 != v141)
          {
            if (*((_BYTE *)v34 + 312))
            {
              v45 = v34[36];
              v46 = v34[37];
              if (v45 != v46)
              {
                v47 = v208[0];
                if (v208[0])
                {
LABEL_67:
                  v48 = *(double *)v45;
                  v49 = v208;
                  do
                  {
                    v50 = v47;
                    v51 = v49;
                    v52 = *((double *)v47 + 4);
                    v53 = v47 + 1;
                    if (v52 >= v48)
                    {
                      v53 = v50;
                      v49 = (_QWORD **)v50;
                    }
                    v47 = (_QWORD *)*v53;
                  }
                  while (v47);
                  if (v49 == v208)
                    goto LABEL_160;
                  v54 = (double *)(v52 >= v48 ? v50 : v51);
                  if (v48 < v54[4])
                    goto LABEL_160;
                  v55 = *(_DWORD *)(v45 + 8);
                  if (v55 == -1)
                    goto LABEL_160;
                  v56 = *(_DWORD *)(v45 + 16);
                  if (v56 == -1)
                    goto LABEL_160;
                  if (v52 < v48)
                    v50 = v51;
                  if (*((_QWORD *)&v209 + 1))
                  {
                    v57 = *(unsigned int *)(*(_QWORD *)(v50[5] + 176) + 12 * v55 + 8);
                    v58 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v209 + 8));
                    v58.i16[0] = vaddlv_u8(v58);
                    if (v58.u32[0] > 1uLL)
                    {
                      v59 = *(unsigned int *)(*(_QWORD *)(v50[5] + 176) + 12 * v55 + 8);
                      if (*((_QWORD *)&v209 + 1) <= v57)
                        v59 = v57 % *((_QWORD *)&v209 + 1);
                    }
                    else
                    {
                      v59 = (DWORD2(v209) - 1) & v57;
                    }
                    v60 = *(uint64_t **)(v209 + 8 * v59);
                    if (v60)
                    {
                      v60 = (uint64_t *)*v60;
                      if (v60)
                      {
                        if (v58.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v62 = v60[1];
                            if (v62 == v57)
                            {
                              if (*((_DWORD *)v60 + 4) == (_DWORD)v57)
                                goto LABEL_101;
                            }
                            else if ((v62 & (*((_QWORD *)&v209 + 1) - 1)) != v59)
                            {
                              goto LABEL_100;
                            }
                            v60 = (uint64_t *)*v60;
                            if (!v60)
                              goto LABEL_101;
                          }
                        }
                        do
                        {
                          v61 = v60[1];
                          if (v61 == v57)
                          {
                            if (*((_DWORD *)v60 + 4) == (_DWORD)v57)
                              break;
                          }
                          else
                          {
                            if (v61 >= *((_QWORD *)&v209 + 1))
                              v61 %= *((_QWORD *)&v209 + 1);
                            if (v61 != v59)
                              goto LABEL_100;
                          }
                          v60 = (uint64_t *)*v60;
                        }
                        while (v60);
                      }
                    }
                  }
                  else
                  {
LABEL_100:
                    v60 = 0;
                  }
LABEL_101:
                  if (*((_QWORD *)&v204 + 1))
                  {
                    v63 = *(unsigned int *)(*(_QWORD *)(v31[5] + 176) + 12 * v56 + 8);
                    v64 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v204 + 8));
                    v64.i16[0] = vaddlv_u8(v64);
                    if (v64.u32[0] > 1uLL)
                    {
                      v65 = v63;
                      if (*((_QWORD *)&v204 + 1) <= v63)
                        v65 = v63 % *((_QWORD *)&v204 + 1);
                    }
                    else
                    {
                      v65 = (DWORD2(v204) - 1) & v63;
                    }
                    v66 = *(uint64_t ***)(v204 + 8 * v65);
                    if (v66)
                    {
                      v67 = *v66;
                      if (*v66)
                      {
                        if (v64.u32[0] < 2uLL)
                        {
                          while (1)
                          {
                            v69 = v67[1];
                            if (v69 == v63)
                            {
                              if (*((_DWORD *)v67 + 4) == (_DWORD)v63)
                                goto LABEL_122;
                            }
                            else if ((v69 & (*((_QWORD *)&v204 + 1) - 1)) != v65)
                            {
                              goto LABEL_160;
                            }
                            v67 = (uint64_t *)*v67;
                            if (!v67)
                              goto LABEL_160;
                          }
                        }
                        do
                        {
                          v68 = v67[1];
                          if (v68 == v63)
                          {
                            if (*((_DWORD *)v67 + 4) == (_DWORD)v63)
                            {
LABEL_122:
                              if (v60)
                              {
                                v70 = v60[3];
                                if (!*(_BYTE *)(v70 + 52))
                                {
                                  v71 = v67[3];
                                  if (!*(_BYTE *)(v71 + 52))
                                  {
                                    *(_BYTE *)(v70 + 52) = 1;
                                    *(_BYTE *)(v71 + 52) = 1;
                                    v72 = *(float *)v70;
                                    v73 = *(float *)(v70 + 4);
                                    v74 = *(float *)(v70 + 8);
                                    v75 = v170;
                                    if (v170 >= v171)
                                    {
                                      v77 = (double *)v169;
                                      v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v170 - (_BYTE *)v169) >> 3);
                                      v79 = v78 + 1;
                                      if (v78 + 1 > 0xAAAAAAAAAAAAAAALL)
                                        sub_20E969238();
                                      if (0x5555555555555556 * (((char *)v171 - (_BYTE *)v169) >> 3) > v79)
                                        v79 = 0x5555555555555556 * (((char *)v171 - (_BYTE *)v169) >> 3);
                                      if (0xAAAAAAAAAAAAAAABLL * (((char *)v171 - (_BYTE *)v169) >> 3) >= 0x555555555555555)
                                        v80 = 0xAAAAAAAAAAAAAAALL;
                                      else
                                        v80 = v79;
                                      if (v80)
                                      {
                                        v139 = 0xAAAAAAAAAAAAAAABLL * (((char *)v170 - (_BYTE *)v169) >> 3);
                                        v142 = (char *)v169;
                                        if (v80 > 0xAAAAAAAAAAAAAAALL)
                                          sub_20E877A38();
                                        v138 = v80;
                                        v81 = (char *)operator new(24 * v80);
                                        v78 = v139;
                                        v77 = (double *)v142;
                                        v80 = v138;
                                      }
                                      else
                                      {
                                        v81 = 0;
                                      }
                                      v82 = (double *)&v81[24 * v78];
                                      *v82 = v72;
                                      v82[1] = v73;
                                      v82[2] = v74;
                                      v83 = v82;
                                      if (v75 != v77)
                                      {
                                        do
                                        {
                                          v84 = *(_OWORD *)(v75 - 3);
                                          *(v83 - 1) = *(v75 - 1);
                                          *(_OWORD *)(v83 - 3) = v84;
                                          v83 -= 3;
                                          v75 -= 3;
                                        }
                                        while (v75 != v77);
                                        v75 = (double *)v169;
                                      }
                                      v76 = v82 + 3;
                                      v169 = v83;
                                      v171 = (double *)&v81[24 * v80];
                                      if (v75)
                                      {
                                        v85 = v75;
                                        v86 = v76;
                                        operator delete(v85);
                                        v76 = v86;
                                      }
                                    }
                                    else
                                    {
                                      *v170 = v72;
                                      v75[1] = v73;
                                      v76 = v75 + 3;
                                      v75[2] = v74;
                                    }
                                    v170 = v76;
                                    v87 = (float *)v67[3];
                                    v88 = *v87;
                                    v89 = v87[1];
                                    v90 = v87[2];
                                    v91 = v167;
                                    if (v167 >= v168)
                                    {
                                      v93 = (double *)v166;
                                      v94 = 0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (_BYTE *)v166) >> 3);
                                      v95 = v94 + 1;
                                      if (v94 + 1 > 0xAAAAAAAAAAAAAAALL)
                                        sub_20E969238();
                                      if (0x5555555555555556 * (((char *)v168 - (_BYTE *)v166) >> 3) > v95)
                                        v95 = 0x5555555555555556 * (((char *)v168 - (_BYTE *)v166) >> 3);
                                      if (0xAAAAAAAAAAAAAAABLL * (((char *)v168 - (_BYTE *)v166) >> 3) >= 0x555555555555555)
                                        v96 = 0xAAAAAAAAAAAAAAALL;
                                      else
                                        v96 = v95;
                                      if (v96)
                                      {
                                        v143 = 0xAAAAAAAAAAAAAAABLL * (((char *)v167 - (_BYTE *)v166) >> 3);
                                        if (v96 > 0xAAAAAAAAAAAAAAALL)
                                          sub_20E877A38();
                                        v140 = v96;
                                        v97 = (char *)operator new(24 * v96);
                                        v96 = v140;
                                        v94 = v143;
                                      }
                                      else
                                      {
                                        v97 = 0;
                                      }
                                      v98 = (double *)&v97[24 * v94];
                                      *v98 = v88;
                                      v98[1] = v89;
                                      v98[2] = v90;
                                      v99 = v98;
                                      if (v91 != v93)
                                      {
                                        do
                                        {
                                          v100 = *(_OWORD *)(v91 - 3);
                                          *(v99 - 1) = *(v91 - 1);
                                          *(_OWORD *)(v99 - 3) = v100;
                                          v99 -= 3;
                                          v91 -= 3;
                                        }
                                        while (v91 != v93);
                                        v91 = (double *)v166;
                                      }
                                      v92 = v98 + 3;
                                      v166 = v99;
                                      v168 = (double *)&v97[24 * v96];
                                      if (v91)
                                        operator delete(v91);
                                    }
                                    else
                                    {
                                      *v167 = v88;
                                      v91[1] = v89;
                                      v92 = v91 + 3;
                                      v91[2] = v90;
                                    }
                                    v167 = v92;
                                  }
                                }
                              }
                              break;
                            }
                          }
                          else
                          {
                            if (v68 >= *((_QWORD *)&v204 + 1))
                              v68 %= *((_QWORD *)&v204 + 1);
                            if (v68 != v65)
                              break;
                          }
                          v67 = (uint64_t *)*v67;
                        }
                        while (v67);
                      }
                    }
                  }
LABEL_160:
                  while (1)
                  {
                    v45 += 24;
                    if (v45 == v46)
                      break;
                    v47 = v208[0];
                    if (v208[0])
                      goto LABEL_67;
                  }
                  v34 = (_QWORD *)v153;
                  if (!v153)
                  {
LABEL_195:
                    v115 = (uint64_t *)v31[1];
                    if (v115)
                      goto LABEL_196;
                    do
                    {
LABEL_198:
                      v116 = (uint64_t **)v31[2];
                      _ZF = *v116 == v31;
                      v31 = (uint64_t *)v116;
                    }
                    while (!_ZF);
                    goto LABEL_48;
                  }
LABEL_164:
                  v44 = (_QWORD *)v154;
                }
              }
            }
            while (v44 != v34)
            {
              if (*((_BYTE *)v44 - 8))
              {
                v101 = (void *)*(v44 - 4);
                if (v101)
                {
                  *(v44 - 3) = v101;
                  operator delete(v101);
                }
                v102 = *(v44 - 7);
                if (v102)
                {
                  v103 = *(v44 - 6);
                  v104 = (void *)*(v44 - 7);
                  if (v103 != v102)
                  {
                    do
                    {
                      v105 = *(void **)(v103 - 24);
                      if (v105)
                      {
                        *(_QWORD *)(v103 - 16) = v105;
                        operator delete(v105);
                      }
                      v103 -= 32;
                    }
                    while (v103 != v102);
                    v104 = (void *)*(v44 - 7);
                  }
                  *(v44 - 6) = v102;
                  operator delete(v104);
                }
                v106 = (void *)*(v44 - 16);
                if (v106)
                {
                  *(v44 - 15) = v106;
                  operator delete(v106);
                }
                v107 = *(v44 - 19);
                if (v107)
                {
                  v108 = *(v44 - 18);
                  v109 = (void *)*(v44 - 19);
                  if (v108 != v107)
                  {
                    v110 = *(v44 - 18);
                    do
                    {
                      v112 = *(void **)(v110 - 24);
                      v110 -= 24;
                      v111 = v112;
                      if (v112)
                      {
                        *(_QWORD *)(v108 - 16) = v111;
                        operator delete(v111);
                      }
                      v108 = v110;
                    }
                    while (v110 != v107);
                    v109 = (void *)*(v44 - 19);
                  }
                  *(v44 - 18) = v107;
                  operator delete(v109);
                }
                v113 = (void *)*(v44 - 22);
                if (v113)
                {
                  *(v44 - 21) = v113;
                  operator delete(v113);
                }
                v114 = (void *)*(v44 - 25);
                if (v114)
                {
                  *(v44 - 24) = v114;
                  operator delete(v114);
                }
              }
              v44 -= 40;
            }
            *(_QWORD *)&v154 = v34;
            operator delete(v34);
            v115 = (uint64_t *)v31[1];
            if (!v115)
              goto LABEL_198;
            do
            {
LABEL_196:
              v116 = (uint64_t **)v115;
              v115 = (uint64_t *)*v115;
            }
            while (v115);
LABEL_48:
            v31 = (uint64_t *)v116;
            if (v116 == &v163)
              goto LABEL_201;
            continue;
          }
          break;
        }
        v34 = v141;
        if (!v141)
          goto LABEL_195;
        goto LABEL_164;
      }
    }
    v22 = &v163;
    v20 = &v163;
    if (v163)
    {
      while (1)
      {
        while (1)
        {
          v20 = (uint64_t **)v15;
          v23 = *((double *)v15 + 4);
          if (v23 <= v19)
            break;
          v15 = (uint64_t *)*v15;
          v22 = v20;
          if (!*v20)
            goto LABEL_34;
        }
        if (v23 >= v19)
          goto LABEL_40;
        v15 = (uint64_t *)v15[1];
        if (!v15)
        {
          v22 = v20 + 1;
          break;
        }
      }
    }
LABEL_34:
    v24 = (uint64_t *)operator new(0x38uLL);
    v25 = v24;
    v24[4] = *((_QWORD *)v14 + 4);
    v24[5] = *((_QWORD *)v14 + 5);
    v26 = (_QWORD *)*((_QWORD *)v14 + 6);
    v24[6] = (uint64_t)v26;
    if (v26)
    {
      v27 = v26 + 1;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    *v24 = 0;
    v24[1] = 0;
    v24[2] = (uint64_t)v20;
    *v22 = v24;
    if (*v162)
    {
      v162 = (uint64_t **)*v162;
      v25 = *v22;
    }
    sub_20E868578(v163, v25);
    ++v164;
    goto LABEL_40;
  }
LABEL_201:
  sub_20EB6E1A4(&v166, (__int128 **)&v169, &v160);
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v154 = xmmword_2102EF0E0;
  v156 = 1;
  v155 = 100;
  v153 = 0x3F999999A0000000;
  sub_20EB6E30C(&v160, (uint64_t)&v153, (uint64_t)&v157, (int8x16_t *)__p, (float64x2_t)xmmword_2102EF0E0, v117);
  v118 = (char *)v157;
  if (v152 && (unint64_t)(v158 - (_BYTE *)v157) > 0x27)
  {
    *(_QWORD *)&v131 = v147;
    v132 = __p[1];
    v133 = v146;
    v134 = v151;
    v135 = v148;
    v136 = v150;
    *(int64x2_t *)a3 = vzip1q_s64(*(int64x2_t *)__p, v146);
    *(_QWORD *)&v137 = vdupq_laneq_s64(v136, 1).u64[0];
    v136.i64[1] = (uint64_t)v132;
    *(_QWORD *)(a3 + 16) = v135.i64[0];
    *(int64x2_t *)(a3 + 24) = v136;
    *(int64x2_t *)(a3 + 40) = vzip2q_s64(v133, v135);
    *((void **)&v137 + 1) = v145[0];
    *(_OWORD *)(a3 + 56) = v137;
    *((_QWORD *)&v131 + 1) = v149;
    *(_OWORD *)(a3 + 72) = v131;
    *(_QWORD *)(a3 + 88) = v134;
    *(_BYTE *)(a3 + 96) = 1;
    if (!v118)
      goto LABEL_205;
    goto LABEL_204;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 96) = 0;
  if (v118)
  {
LABEL_204:
    v158 = v118;
    operator delete(v118);
  }
LABEL_205:
  if (v160)
  {
    *(_QWORD *)&v161 = v160;
    operator delete(v160);
  }
  sub_20E8D03C0((uint64_t)&v162, v163);
  if (v166)
    operator delete(v166);
  if (v169)
    operator delete(v169);
LABEL_211:
  sub_20E9DF188((uint64_t)&v172);
  v119 = (_QWORD *)v205;
  while (v119)
  {
    v123 = v119;
    v119 = (_QWORD *)*v119;
    v124 = (std::__shared_weak_count *)v123[4];
    if (v124)
    {
      p_shared_owners = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldaxr(p_shared_owners);
      while (__stlxr(v126 - 1, p_shared_owners));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    operator delete(v123);
  }
  v120 = (void *)v204;
  *(_QWORD *)&v204 = 0;
  if (v120)
    operator delete(v120);
  sub_20E8D03C0((uint64_t)&v202, v203[0]);
  v121 = (_QWORD *)v210;
  while (v121)
  {
    v127 = v121;
    v121 = (_QWORD *)*v121;
    v128 = (std::__shared_weak_count *)v127[4];
    if (v128)
    {
      v129 = (unint64_t *)&v128->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    operator delete(v127);
  }
  v122 = (void *)v209;
  *(_QWORD *)&v209 = 0;
  if (v122)
    operator delete(v122);
  sub_20E8D03C0((uint64_t)&v207, v208[0]);
}

void sub_20E9DED0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,_QWORD *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;
  void *v54;

  sub_20E9DEE54(&a30);
  sub_20E8D03C0((uint64_t)&a41, a42);
  if (__p)
  {
    a47 = (uint64_t)__p;
    operator delete(__p);
    v54 = a49;
    if (!a49)
      goto LABEL_7;
  }
  else
  {
    v54 = a49;
    if (!a49)
    {
LABEL_7:
      sub_20E9DF188((uint64_t)&a52);
      sub_20E8FA108(v52 - 256);
      sub_20E8FA108(v52 - 192);
      _Unwind_Resume(a1);
    }
  }
  a50 = (uint64_t)v54;
  operator delete(v54);
  goto LABEL_7;
}

void **sub_20E9DEE54(void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*(v3 - 8))
          sub_20E9DF08C((uint64_t)(v3 - 200));
        v3 -= 320;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20E9DEEC4(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  void *v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_20E9DEF2C()
{
  sub_20E860B90("vector");
}

char *sub_20E9DEF40(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E9DEF2C();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_20E877A38();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

uint64_t sub_20E9DF08C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(_QWORD *)(a1 + 176) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 144);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 152);
    v5 = *(void **)(a1 + 144);
    if (v4 != v3)
    {
      do
      {
        v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(_QWORD *)(v4 - 16) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 144);
    }
    *(_QWORD *)(a1 + 152) = v3;
    operator delete(v5);
  }
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(_QWORD *)(a1 + 80) = v7;
    operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(void **)(a1 + 48);
    if (v9 != v8)
    {
      v11 = *(_QWORD *)(a1 + 56);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v8;
    operator delete(v10);
  }
  v14 = *(void **)(a1 + 24);
  if (v14)
  {
    *(_QWORD *)(a1 + 32) = v14;
    operator delete(v14);
  }
  v15 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v15;
    operator delete(v15);
  }
  return a1;
}

uint64_t sub_20E9DF188(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v8;
  void *v9;

  v2 = *(_QWORD **)(a1 + 328);
  if (v2)
  {
    do
    {
      v8 = (_QWORD *)*v2;
      v9 = (void *)v2[3];
      if (v9)
      {
        v2[4] = v9;
        operator delete(v9);
      }
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD **)(a1 + 288);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = *(void **)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v6)
    operator delete(v6);
  sub_20E9DF230(a1 + 248, *(_QWORD **)(a1 + 256));
  sub_20E8D03C0(a1 + 224, *(_QWORD **)(a1 + 232));
  return a1;
}

void sub_20E9DF230(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20E9DF230(a1, *a2);
    sub_20E9DF230(a1, a2[1]);
    sub_20E9DF278(a2 + 5);
    operator delete(a2);
  }
}

uint64_t *sub_20E9DF278(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  if (a1[2])
  {
    v8 = *a1;
    v9 = (uint64_t *)a1[1];
    v10 = *v9;
    *(_QWORD *)(v10 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v8 + 8) = v10;
    a1[2] = 0;
    if (v9 != a1)
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        v13 = (std::__shared_weak_count *)v9[3];
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != a1);
    }
  }
  return a1;
}

void sub_20E9DF390(size_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  size_t v5;
  char *v6;
  char *v7;

  v4 = operator new(0x30uLL);
  v4[2] = 0;
  v4[3] = 0;
  *v4 = &unk_24C9B0508;
  v4[1] = 0;
  v5 = *a1;
  v4[4] = 0;
  v4[5] = 0;
  if (v5)
  {
    if ((v5 & 0x8000000000000000) != 0)
      sub_20E867F44();
    v6 = (char *)operator new(v5);
    v4[3] = v6;
    v7 = &v6[v5];
    v4[5] = &v6[v5];
    bzero(v6, v5);
    v4[4] = v7;
  }
  *a2 = v4 + 3;
  a2[1] = v4;
}

void sub_20E9DF428(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_20E9DF450(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_50;
  v6 = *(uint64_t **)a1;
  v8 = (uint64_t **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = v6[1] ? (uint64_t *)v6[1] : v6;
  v35 = a1;
  v37 = v9;
  if (!v9)
    goto LABEL_50;
  v10 = (uint64_t *)v9[2];
  if (v10)
  {
    v11 = (uint64_t *)*v10;
    if ((uint64_t *)*v10 == v9)
    {
      *v10 = 0;
      while (1)
      {
        v34 = (uint64_t *)v10[1];
        if (!v34)
          break;
        do
        {
          v10 = v34;
          v34 = (uint64_t *)*v34;
        }
        while (v34);
      }
    }
    else
    {
      for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
      {
        do
        {
          v10 = v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
  v36 = v10;
  if (a2 == a3)
  {
    v25 = a1;
    sub_20E8FB1C0(a1, v9);
    if (!v10)
      goto LABEL_50;
    goto LABEL_47;
  }
  v12 = a2;
  do
  {
    *((_DWORD *)v9 + 8) = *((_DWORD *)v12 + 8);
    v13 = *(_OWORD *)(v12 + 5);
    *(_OWORD *)(v9 + 7) = *(_OWORD *)(v12 + 7);
    *(_OWORD *)(v9 + 5) = v13;
    v14 = *(_OWORD *)(v12 + 9);
    v15 = *(_OWORD *)(v12 + 11);
    v16 = *(_OWORD *)(v12 + 13);
    *(_OWORD *)(v9 + 15) = *(_OWORD *)(v12 + 15);
    *(_OWORD *)(v9 + 13) = v16;
    *(_OWORD *)(v9 + 11) = v15;
    *(_OWORD *)(v9 + 9) = v14;
    *((_BYTE *)v9 + 136) = *((_BYTE *)v12 + 136);
    if (v9 != v12)
    {
      sub_20E86811C(v9 + 18, (char *)v12[18], (char *)v12[19], (v12[19] - v12[18]) >> 3);
      v9 = v37;
    }
    v17 = *v8;
    v18 = (uint64_t **)(a1 + 8);
    v19 = (uint64_t **)(a1 + 8);
    if (!*v8)
    {
LABEL_20:
      *v9 = 0;
      v9[1] = 0;
      v9[2] = (uint64_t)v18;
      *v19 = v9;
      v20 = **(_QWORD **)a1;
      if (!v20)
        goto LABEL_22;
LABEL_21:
      *(_QWORD *)a1 = v20;
      v9 = *v19;
      goto LABEL_22;
    }
    do
    {
      while (1)
      {
        v18 = (uint64_t **)v17;
        if (*((_DWORD *)v9 + 8) >= *((_DWORD *)v17 + 8))
          break;
        v17 = (uint64_t *)*v17;
        v19 = v18;
        if (!*v18)
          goto LABEL_20;
      }
      v17 = (uint64_t *)v17[1];
    }
    while (v17);
    v19 = v18 + 1;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v18;
    v18[1] = v9;
    v20 = **(_QWORD **)a1;
    if (v20)
      goto LABEL_21;
LABEL_22:
    sub_20E868578(*(uint64_t **)(a1 + 8), v9);
    ++*(_QWORD *)(a1 + 16);
    v9 = v36;
    v37 = v36;
    if (v36)
    {
      v10 = (uint64_t *)v36[2];
      if (v10)
      {
        v21 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v36)
        {
          *v10 = 0;
          while (1)
          {
            v24 = (uint64_t *)v10[1];
            if (!v24)
              break;
            do
            {
              v10 = v24;
              v24 = (uint64_t *)*v24;
            }
            while (v24);
          }
        }
        else
        {
          for (v10[1] = 0; v21; v21 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v21;
              v21 = (uint64_t *)*v21;
            }
            while (v21);
          }
        }
      }
      v36 = v10;
      v22 = (uint64_t *)v12[1];
      if (!v22)
      {
        do
        {
LABEL_33:
          a2 = (uint64_t *)v12[2];
          v23 = *a2 == (_QWORD)v12;
          v12 = a2;
        }
        while (!v23);
        goto LABEL_35;
      }
    }
    else
    {
      v10 = 0;
      v22 = (uint64_t *)v12[1];
      if (!v22)
        goto LABEL_33;
    }
    do
    {
      a2 = v22;
      v22 = (uint64_t *)*v22;
    }
    while (v22);
LABEL_35:
    if (!v9)
      break;
    v12 = a2;
  }
  while (a2 != a3);
  v25 = v35;
  sub_20E8FB1C0(v35, v9);
  if (!v10)
    goto LABEL_50;
LABEL_47:
  for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
    v10 = i;
  sub_20E8FB1C0(v25, v10);
LABEL_50:
  if (a2 != a3)
  {
    while (2)
    {
      sub_20E94E3B0(a1, (uint64_t)(a2 + 4), (uint64_t)&v35);
      v27 = (uint64_t *)v35;
      v28 = *(uint64_t ***)(a1 + 8);
      v29 = (uint64_t **)(a1 + 8);
      v30 = (uint64_t **)(a1 + 8);
      if (v28)
      {
        do
        {
          while (1)
          {
            v29 = v28;
            if (*(_DWORD *)(v35 + 32) >= *((_DWORD *)v28 + 8))
              break;
            v28 = (uint64_t **)*v28;
            v30 = v29;
            if (!*v29)
              goto LABEL_58;
          }
          v28 = (uint64_t **)v28[1];
        }
        while (v28);
        v30 = v29 + 1;
        *(_QWORD *)v35 = 0;
        v27[1] = 0;
        v27[2] = (uint64_t)v29;
        v29[1] = v27;
        v31 = **(_QWORD **)a1;
        if (!v31)
        {
LABEL_60:
          sub_20E868578(*(uint64_t **)(a1 + 8), v27);
          ++*(_QWORD *)(a1 + 16);
          v32 = (_QWORD *)a2[1];
          if (v32)
          {
            do
            {
              v33 = v32;
              v32 = (_QWORD *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              v33 = (uint64_t *)a2[2];
              v23 = *v33 == (_QWORD)a2;
              a2 = v33;
            }
            while (!v23);
          }
          a2 = v33;
          if (v33 == a3)
            return;
          continue;
        }
      }
      else
      {
LABEL_58:
        *(_QWORD *)v35 = 0;
        v27[1] = 0;
        v27[2] = (uint64_t)v29;
        *v30 = v27;
        v31 = **(_QWORD **)a1;
        if (!v31)
          goto LABEL_60;
      }
      break;
    }
    *(_QWORD *)a1 = v31;
    v27 = *v30;
    goto LABEL_60;
  }
}

void sub_20E9DF7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E9DF808((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9DF808(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_20E8FB1C0(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_20E8FB1C0(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_20E9DF85C(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *((_DWORD *)a2 + 4);
  v4 = *((_DWORD *)a2 + 2);
  v5 = v4 ^ __ROR4__(v3, 13);
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (*(_QWORD *)&v2 <= v5)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (v2.i32[0] - 1) & v5;
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = *v8;
  if (*v8)
  {
    v10 = *a2;
    if (v6.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v13 == v5)
        {
          if (*((_DWORD *)result + 8) == v3 && result[2] == v10 && *((_DWORD *)result + 6) == v4)
            return result;
        }
        else if ((v13 & v11) != v7)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v12 == v5)
      {
        if (*((_DWORD *)result + 8) == v3 && result[2] == v10 && *((_DWORD *)result + 6) == v4)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v7)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void sub_20E9DF978(int **a1@<X0>, uint64_t **a2@<X8>)
{
  int *v4;
  int *v5;
  uint64_t **v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  int *v10;
  int *v11;
  BOOL v12;
  int v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  std::logic_error *exception;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  unsigned int **v26;

  v4 = *a1;
  v5 = a1[1];
  if (0xF0F0F0F0F0F0F0F1 * (((char *)v5 - (char *)*a1) >> 6) - 1 >= 2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/internal/SensorCameraConversion.cpp", 32, (uint64_t)"num_cameras > 0 && num_cameras <= 2", 35, (uint64_t)&unk_21024DEE7, 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = *a1;
    v5 = a1[1];
  }
  a2[1] = 0;
  v6 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v26 = &v22;
  if (v4 != v5)
  {
    do
    {
      v25 = *v4;
      sub_20EA9AB98((uint64_t *)&v26, &v25);
      v4 += 272;
    }
    while (v4 != v5);
    v8 = v22;
    v7 = v23;
    if (v22 == v23)
    {
      if (!v23)
        return;
      goto LABEL_8;
    }
    do
    {
      while (1)
      {
        v9 = *v8;
        v11 = *a1;
        v10 = a1[1];
        if (*a1 != v10)
        {
          while (*v11 != v9)
          {
            v11 += 272;
            if (v11 == v10)
              goto LABEL_34;
          }
        }
        if (v11 == v10)
        {
LABEL_34:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Requested camera id not found.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
        }
        v12 = v11[1] != 1 || v11[4] == -1;
        if ((v12 || !*((_QWORD *)v11 + 1))
          && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/AppleCV3D_framework/src/internal/SensorCameraConversion.cpp", 37, (uint64_t)"IsVioCameraValid(vio_camera)", 28, (uint64_t)&unk_21024DEE7, 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        v13 = *((unsigned __int8 *)v11 + 408);
        v14 = *v6;
        v15 = a2 + 1;
        v16 = (uint64_t *)(a2 + 1);
        if (*v6)
          break;
LABEL_29:
        v18 = operator new(0x28uLL);
        v18[7] = v9;
        v18[8] = 0;
        *(_QWORD *)v18 = 0;
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = v16;
        *v15 = (uint64_t *)v18;
        v19 = (uint64_t *)**a2;
        v20 = (uint64_t *)v18;
        if (v19)
        {
          *a2 = v19;
          v20 = *v15;
        }
        sub_20E868578(a2[1], v20);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v18[8] = v13;
        if (++v8 == v7)
          goto LABEL_32;
      }
      while (1)
      {
        while (1)
        {
          v16 = v14;
          v17 = *((_DWORD *)v14 + 7);
          if (v9 >= v17)
            break;
          v14 = (uint64_t *)*v16;
          v15 = (uint64_t **)v16;
          if (!*v16)
            goto LABEL_29;
        }
        if (v17 >= v9)
          break;
        v14 = (uint64_t *)v16[1];
        if (!v14)
        {
          v15 = (uint64_t **)(v16 + 1);
          goto LABEL_29;
        }
      }
      *((_DWORD *)v16 + 8) = v13;
      ++v8;
    }
    while (v8 != v7);
LABEL_32:
    v7 = v22;
    if (v22)
    {
LABEL_8:
      v23 = v7;
      operator delete(v7);
    }
  }
}

void sub_20E9DFC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  sub_20E86872C(v11, *(_QWORD **)(v11 + 8));
  _Unwind_Resume(a1);
}

void sub_20E9DFC64(const void *a1, void *a2, unsigned int a3, unsigned int a4, const char *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__shared_weak_count *v26;
  void *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  const __CFDictionary *v31;
  std::__shared_weak_count *v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v41;
  CFDictionaryRef v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  const __CFDictionary *v46;
  std::__shared_weak_count_vtbl *Mutable;
  std::__shared_weak_count *v48;
  void *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count_vtbl *v79;
  std::__shared_weak_count *v80;
  void *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  void **v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  void *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  void **v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  void *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  void *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  void *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  void *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  void *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  __CFDictionary *theDict;
  std::__shared_weak_count *v152;
  const char *v153;
  void *value[2];
  uint64_t v155;
  void *v156[2];
  void *v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  uint64_t v160;
  double valuePtr;
  double v162;
  double v163;
  _QWORD v164[2];
  CGSize v165;
  CGPoint v166;
  CGPoint v167;

  v164[1] = *MEMORY[0x24BDAC8D0];
  valuePtr = a10;
  v162 = a11;
  v163 = a12;
  *(double *)v164 = a13;
  v159 = a17;
  v160 = a18;
  value[1] = 0;
  v155 = 0;
  v153 = a5;
  value[0] = &value[1];
  sub_20EA65D20(value, &v157);
  v27 = v157;
  v26 = v158;
  theDict = (__CFDictionary *)v157;
  v152 = v158;
  sub_20E866BE0((uint64_t)value, (char *)value[1]);
  if (!v26)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v29 = __ldxr(p_shared_owners);
  while (__stxr(v29 + 1, p_shared_owners));
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v31 = theDict;
    if (!v27)
      goto LABEL_22;
  }
  else
  {
LABEL_6:
    v31 = theDict;
    if (!v27)
      goto LABEL_22;
  }
  if (CFDictionaryContainsKey(v31, CFSTR("LensType")))
    goto LABEL_22;
  sub_20E9E0A20(&v153, (CFStringRef *)value);
  v33 = value[0];
  v32 = (std::__shared_weak_count *)value[1];
  if (!value[1])
    goto LABEL_13;
  v34 = (unint64_t *)((char *)value[1] + 8);
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  do
    v36 = __ldaxr(v34);
  while (__stlxr(v36 - 1, v34));
  if (v36)
  {
LABEL_13:
    if (!v33)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  if (v33)
LABEL_14:
    CFDictionaryAddValue(theDict, CFSTR("LensType"), value[0]);
LABEL_15:
  v37 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v38 = (unint64_t *)((char *)value[1] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v31 = theDict;
LABEL_22:
  v165.width = (double)a3;
  v165.height = (double)a4;
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v165);
  CFDictionaryAddValue(v31, CFSTR("Resolution"), DictionaryRepresentation);
  CFRelease(DictionaryRepresentation);
  v166.x = a8;
  v166.y = a9;
  v41 = CGPointCreateDictionaryRepresentation(v166);
  CFDictionaryAddValue(v31, CFSTR("PrincipalPoint"), v41);
  CFRelease(v41);
  v167.x = a6;
  v167.y = a7;
  v42 = CGPointCreateDictionaryRepresentation(v167);
  CFDictionaryAddValue(v31, CFSTR("EffectiveFocusLength"), v42);
  CFRelease(v42);
  if (!v152)
    goto LABEL_27;
  v43 = (unint64_t *)&v152->__shared_owners_;
  do
    v44 = __ldxr(v43);
  while (__stxr(v44 + 1, v43));
  do
    v45 = __ldaxr(v43);
  while (__stlxr(v45 - 1, v43));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
    v46 = theDict;
    if (!v31)
    {
LABEL_45:
      v59 = v152;
      if (!v152)
        goto LABEL_50;
      goto LABEL_46;
    }
  }
  else
  {
LABEL_27:
    v46 = theDict;
    if (!v31)
      goto LABEL_45;
  }
  if (CFDictionaryContainsKey(v46, CFSTR("DistortionCoefficients")))
    goto LABEL_45;
  Mutable = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)value, Mutable, 0);
  v49 = value[0];
  v48 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v50 = (unint64_t *)((char *)value[1] + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      if (v49)
        goto LABEL_35;
LABEL_101:
      v91 = v156;
LABEL_199:
      *v91 = 0;
      v91[1] = 0;
      goto LABEL_200;
    }
  }
  if (!v49)
    goto LABEL_101;
LABEL_35:
  sub_20EA5E260(&valuePtr, (CFNumberRef *)&v157);
  v54 = v157;
  v53 = v158;
  if (v158)
  {
    v55 = (unint64_t *)&v158->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
    do
      v57 = __ldaxr(v55);
    while (__stlxr(v57 - 1, v55));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (v54)
  {
    CFArrayAppendValue((CFMutableArrayRef)value[0], v157);
    v58 = v158;
    if (!v158)
      goto LABEL_107;
  }
  else
  {
    v156[0] = 0;
    v156[1] = 0;
    v58 = v158;
    if (!v158)
      goto LABEL_107;
  }
  v92 = (unint64_t *)&v58->__shared_owners_;
  do
    v93 = __ldaxr(v92);
  while (__stlxr(v93 - 1, v92));
  if (!v93)
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
LABEL_107:
  if (!v54)
    goto LABEL_200;
  sub_20EA5E260(&v162, (CFNumberRef *)&v157);
  v95 = v157;
  v94 = v158;
  if (v158)
  {
    v96 = (unint64_t *)&v158->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
    do
      v98 = __ldaxr(v96);
    while (__stlxr(v98 - 1, v96));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v95)
  {
    CFArrayAppendValue((CFMutableArrayRef)value[0], v157);
    v99 = v158;
    if (!v158)
      goto LABEL_139;
  }
  else
  {
    v156[0] = 0;
    v156[1] = 0;
    v99 = v158;
    if (!v158)
      goto LABEL_139;
  }
  v109 = (unint64_t *)&v99->__shared_owners_;
  do
    v110 = __ldaxr(v109);
  while (__stlxr(v110 - 1, v109));
  if (!v110)
  {
    ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
    std::__shared_weak_count::__release_weak(v99);
  }
LABEL_139:
  if (!v95)
    goto LABEL_200;
  sub_20EA5E260(&v163, (CFNumberRef *)&v157);
  v112 = v157;
  v111 = v158;
  if (v158)
  {
    v113 = (unint64_t *)&v158->__shared_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
    do
      v115 = __ldaxr(v113);
    while (__stlxr(v115 - 1, v113));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v112)
  {
    CFArrayAppendValue((CFMutableArrayRef)value[0], v157);
    v116 = v158;
    if (!v158)
      goto LABEL_182;
  }
  else
  {
    v156[0] = 0;
    v156[1] = 0;
    v116 = v158;
    if (!v158)
      goto LABEL_182;
  }
  v130 = (unint64_t *)&v116->__shared_owners_;
  do
    v131 = __ldaxr(v130);
  while (__stlxr(v131 - 1, v130));
  if (!v131)
  {
    ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
    std::__shared_weak_count::__release_weak(v116);
  }
LABEL_182:
  if (v112)
  {
    sub_20EA5E260(v164, (CFNumberRef *)&v157);
    v133 = v157;
    v132 = v158;
    if (v158)
    {
      v134 = (unint64_t *)&v158->__shared_owners_;
      do
        v135 = __ldxr(v134);
      while (__stxr(v135 + 1, v134));
      do
        v136 = __ldaxr(v134);
      while (__stlxr(v136 - 1, v134));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    if (v133)
    {
      CFArrayAppendValue((CFMutableArrayRef)value[0], v157);
    }
    else
    {
      v156[0] = 0;
      v156[1] = 0;
    }
    v137 = v158;
    if (v158)
    {
      v138 = (unint64_t *)&v158->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    if (v133)
    {
      *(_OWORD *)v156 = *(_OWORD *)value;
      v91 = value;
      goto LABEL_199;
    }
  }
LABEL_200:
  v140 = (std::__shared_weak_count *)value[1];
  if (!value[1])
    goto LABEL_204;
  v141 = (unint64_t *)((char *)value[1] + 8);
  do
    v142 = __ldaxr(v141);
  while (__stlxr(v142 - 1, v141));
  if (!v142)
  {
    ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
    std::__shared_weak_count::__release_weak(v140);
    v144 = v156[0];
    v143 = (std::__shared_weak_count *)v156[1];
    if (!v156[1])
      goto LABEL_209;
  }
  else
  {
LABEL_204:
    v144 = v156[0];
    v143 = (std::__shared_weak_count *)v156[1];
    if (!v156[1])
      goto LABEL_209;
  }
  v145 = (unint64_t *)&v143->__shared_owners_;
  do
    v146 = __ldxr(v145);
  while (__stxr(v146 + 1, v145));
  do
    v147 = __ldaxr(v145);
  while (__stlxr(v147 - 1, v145));
  if (!v147)
  {
    ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
    std::__shared_weak_count::__release_weak(v143);
    if (!v144)
      goto LABEL_211;
    goto LABEL_210;
  }
LABEL_209:
  if (v144)
LABEL_210:
    CFDictionaryAddValue(theDict, CFSTR("DistortionCoefficients"), v156[0]);
LABEL_211:
  v148 = (std::__shared_weak_count *)v156[1];
  if (!v156[1])
    goto LABEL_215;
  v149 = (unint64_t *)((char *)v156[1] + 8);
  do
    v150 = __ldaxr(v149);
  while (__stlxr(v150 - 1, v149));
  if (!v150)
  {
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
    v46 = theDict;
    v59 = v152;
    if (!v152)
      goto LABEL_50;
  }
  else
  {
LABEL_215:
    v46 = theDict;
    v59 = v152;
    if (!v152)
      goto LABEL_50;
  }
LABEL_46:
  v60 = (unint64_t *)&v59->__shared_owners_;
  do
    v61 = __ldxr(v60);
  while (__stxr(v61 + 1, v60));
  do
    v62 = __ldaxr(v60);
  while (__stlxr(v62 - 1, v60));
  if (v62)
  {
LABEL_50:
    if (!v46)
      goto LABEL_52;
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v59);
  if (!v46)
    goto LABEL_52;
LABEL_51:
  if (CFDictionaryContainsKey(theDict, CFSTR("TangentialDistortionCoefficients")))
    goto LABEL_52;
  v79 = (std::__shared_weak_count_vtbl *)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD690]);
  sub_20E8EACA0((std::__shared_weak_count_vtbl **)value, v79, 0);
  v81 = value[0];
  v80 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v82 = (unint64_t *)((char *)value[1] + 8);
    do
      v83 = __ldxr(v82);
    while (__stxr(v83 + 1, v82));
    do
      v84 = __ldaxr(v82);
    while (__stlxr(v84 - 1, v82));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
      if (v81)
        goto LABEL_89;
LABEL_118:
      v100 = v156;
LABEL_156:
      *v100 = 0;
      v100[1] = 0;
      goto LABEL_157;
    }
  }
  if (!v81)
    goto LABEL_118;
LABEL_89:
  sub_20EA5E260(&v159, (CFNumberRef *)&v157);
  v86 = v157;
  v85 = v158;
  if (v158)
  {
    v87 = (unint64_t *)&v158->__shared_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
    do
      v89 = __ldaxr(v87);
    while (__stlxr(v89 - 1, v87));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v86)
  {
    CFArrayAppendValue((CFMutableArrayRef)value[0], v157);
    v90 = v158;
    if (!v158)
      goto LABEL_124;
  }
  else
  {
    v156[0] = 0;
    v156[1] = 0;
    v90 = v158;
    if (!v158)
      goto LABEL_124;
  }
  v101 = (unint64_t *)&v90->__shared_owners_;
  do
    v102 = __ldaxr(v101);
  while (__stlxr(v102 - 1, v101));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
  }
LABEL_124:
  if (!v86)
    goto LABEL_157;
  sub_20EA5E260(&v160, (CFNumberRef *)&v157);
  v104 = v157;
  v103 = v158;
  if (v158)
  {
    v105 = (unint64_t *)&v158->__shared_owners_;
    do
      v106 = __ldxr(v105);
    while (__stxr(v106 + 1, v105));
    do
      v107 = __ldaxr(v105);
    while (__stlxr(v107 - 1, v105));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  if (v104)
  {
    CFArrayAppendValue((CFMutableArrayRef)value[0], v157);
    v108 = v158;
    if (!v158)
      goto LABEL_154;
  }
  else
  {
    v156[0] = 0;
    v156[1] = 0;
    v108 = v158;
    if (!v158)
      goto LABEL_154;
  }
  v117 = (unint64_t *)&v108->__shared_owners_;
  do
    v118 = __ldaxr(v117);
  while (__stlxr(v118 - 1, v117));
  if (!v118)
  {
    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
    std::__shared_weak_count::__release_weak(v108);
  }
LABEL_154:
  if (v104)
  {
    *(_OWORD *)v156 = *(_OWORD *)value;
    v100 = value;
    goto LABEL_156;
  }
LABEL_157:
  v119 = (std::__shared_weak_count *)value[1];
  if (!value[1])
    goto LABEL_161;
  v120 = (unint64_t *)((char *)value[1] + 8);
  do
    v121 = __ldaxr(v120);
  while (__stlxr(v121 - 1, v120));
  if (!v121)
  {
    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
    std::__shared_weak_count::__release_weak(v119);
    v123 = v156[0];
    v122 = (std::__shared_weak_count *)v156[1];
    if (!v156[1])
      goto LABEL_166;
  }
  else
  {
LABEL_161:
    v123 = v156[0];
    v122 = (std::__shared_weak_count *)v156[1];
    if (!v156[1])
      goto LABEL_166;
  }
  v124 = (unint64_t *)&v122->__shared_owners_;
  do
    v125 = __ldxr(v124);
  while (__stxr(v125 + 1, v124));
  do
    v126 = __ldaxr(v124);
  while (__stlxr(v126 - 1, v124));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
    if (!v123)
      goto LABEL_168;
    goto LABEL_167;
  }
LABEL_166:
  if (v123)
LABEL_167:
    CFDictionaryAddValue(theDict, CFSTR("TangentialDistortionCoefficients"), v156[0]);
LABEL_168:
  v127 = (std::__shared_weak_count *)v156[1];
  if (v156[1])
  {
    v128 = (unint64_t *)((char *)v156[1] + 8);
    do
      v129 = __ldaxr(v128);
    while (__stlxr(v129 - 1, v128));
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
LABEL_52:
  sub_20E9350E4(value, a1);
  v64 = value[0];
  v63 = (std::__shared_weak_count *)value[1];
  if (value[1])
  {
    v65 = (unint64_t *)((char *)value[1] + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
    v67 = (std::__shared_weak_count *)value[1];
    if (value[1])
    {
      v68 = (unint64_t *)((char *)value[1] + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    do
      v70 = __ldxr(v65);
    while (__stxr(v70 + 1, v65));
    v157 = v64;
    v158 = v63;
    do
      v71 = __ldxr(v65);
    while (__stxr(v71 + 1, v65));
    do
      v72 = __ldaxr(v65);
    while (__stlxr(v72 - 1, v65));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
    do
      v73 = __ldaxr(v65);
    while (__stlxr(v73 - 1, v65));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  else
  {
    v157 = value[0];
    v158 = 0;
  }
  value[0] = theDict;
  sub_20E934D64((uint64_t)&v157, a2, (CFTypeRef *)value);
  v74 = v158;
  if (v158)
  {
    v75 = (unint64_t *)&v158->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v152)
  {
    v77 = (unint64_t *)&v152->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
}

void sub_20E9E085C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va1);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9E087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  v22 = a21;
  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = a14;
  if (a14)
  {
    v26 = (unint64_t *)&a14->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_20E86665C((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
  }
  sub_20E86665C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20E9E0A20(const char **a1@<X0>, CFStringRef *a2@<X8>)
{
  const char *v3;
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__dst[2];
  unint64_t v10;

  v3 = *a1;
  v4 = strlen(*a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v10 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v10) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memmove(v6, v3, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  sub_20EA5E4B8((uint64_t)__dst, a2);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_20E9E0B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9E0B24(uint64_t a1, uint64_t a2, void *key)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  CFTypeID TypeID;
  unint64_t Count;
  unint64_t v14;
  CFIndex v15;
  uint64_t v16;
  const void *ValueAtIndex;
  CFTypeID v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  void *v41;
  void *value;
  void *__p;
  char *v44;
  char *v45;
  uint64_t valuePtr;

  v7 = *(CFDictionaryRef *)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (v7)
        goto LABEL_7;
LABEL_16:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      return;
    }
  }
  if (!v7)
    goto LABEL_16;
LABEL_7:
  value = 0;
  if (!key)
    goto LABEL_16;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a2, key, (const void **)&value))
    goto LABEL_16;
  v11 = value;
  if (!value)
    goto LABEL_16;
  TypeID = CFArrayGetTypeID();
  if (CFGetTypeID(v11) != TypeID)
    goto LABEL_16;
  Count = CFArrayGetCount((CFArrayRef)v11);
  if ((Count & 0x8000000000000000) != 0)
    goto LABEL_16;
  v14 = Count;
  __p = 0;
  v44 = 0;
  v45 = 0;
  if (Count)
  {
    if (Count >> 61)
      sub_20E867F44();
    v15 = 0;
    __p = operator new(8 * Count);
    v44 = (char *)__p;
    v45 = (char *)__p + 8 * v14;
    while (1)
    {
      if (CFArrayGetCount((CFArrayRef)v11) <= v15
        || (ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v11, v15)) == 0
        || (v18 = CFNumberGetTypeID(), CFGetTypeID(ValueAtIndex) != v18))
      {
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 24) = 0;
        if (__p)
        {
          v44 = (char *)__p;
          operator delete(__p);
        }
        return;
      }
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberDoubleType, &valuePtr);
      v19 = valuePtr;
      v20 = v44;
      if (v44 >= v45)
        break;
      *(_QWORD *)v44 = valuePtr;
      v16 = (uint64_t)(v20 + 8);
LABEL_19:
      v44 = (char *)v16;
      if (++v15 == v14)
      {
        v41 = __p;
        v40 = v45;
        goto LABEL_47;
      }
    }
    v21 = (char *)__p;
    v22 = v44 - (_BYTE *)__p;
    v23 = (v44 - (_BYTE *)__p) >> 3;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      sub_20E867F44();
    v25 = v45 - (_BYTE *)__p;
    if ((v45 - (_BYTE *)__p) >> 2 > v24)
      v24 = v25 >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 61)
        sub_20E877A38();
      v27 = v26;
      v28 = (char *)operator new(8 * v26);
      v26 = v27;
      v29 = &v28[8 * v23];
      *(_QWORD *)v29 = v19;
      v16 = (uint64_t)(v29 + 8);
      v30 = v20 - v21;
      if (v20 == v21)
        goto LABEL_41;
    }
    else
    {
      v28 = 0;
      v29 = (char *)(8 * v23);
      *(_QWORD *)(8 * v23) = valuePtr;
      v16 = 8 * v23 + 8;
      v30 = v20 - v21;
      if (v20 == v21)
      {
LABEL_41:
        __p = v29;
        v44 = (char *)v16;
        v45 = &v28[8 * v26];
        if (v21)
          operator delete(v21);
        goto LABEL_19;
      }
    }
    v31 = v30 - 8;
    if (v31 < 0x58)
      goto LABEL_53;
    if ((unint64_t)(v20 - v28 - v22) < 0x20)
      goto LABEL_53;
    v32 = (v31 >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v20[-v33];
    v29 -= v33;
    v35 = &v28[8 * v23 - 16];
    v36 = v20 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
      *(_OWORD *)v35 = v38;
      v35 -= 32;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v20 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_53:
      do
      {
        v39 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v29 - 1) = v39;
        v29 -= 8;
      }
      while (v20 != v21);
    }
    goto LABEL_41;
  }
  v40 = 0;
  v16 = 0;
  v41 = 0;
LABEL_47:
  *(_QWORD *)a1 = v41;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v40;
  *(_BYTE *)(a1 + 24) = 1;
}

void sub_20E9E0E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9E0E60(uint64_t a1, uint64_t a2, void *key)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  CFTypeID TypeID;
  const void *ValueAtIndex;
  const void *v14;
  CFTypeID v15;
  uint64_t v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  CFTypeID v19;
  uint64_t v20;
  char v21;
  const void *v22;
  uint64_t valuePtr;

  v7 = *(CFDictionaryRef *)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
LABEL_6:
    if (v7)
      goto LABEL_7;
LABEL_22:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    goto LABEL_22;
LABEL_7:
  v22 = 0;
  if (!key)
    goto LABEL_19;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a2, key, &v22))
    goto LABEL_19;
  v11 = v22;
  if (!v22)
    goto LABEL_19;
  TypeID = CFArrayGetTypeID();
  if (CFGetTypeID(v11) != TypeID)
    goto LABEL_19;
  if (CFArrayGetCount((CFArrayRef)v11) != 2)
    goto LABEL_19;
  if (CFArrayGetCount((CFArrayRef)v11) < 1)
    goto LABEL_19;
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v11, 0);
  if (!ValueAtIndex)
    goto LABEL_19;
  v14 = ValueAtIndex;
  v15 = CFNumberGetTypeID();
  if (CFGetTypeID(v14) != v15)
    goto LABEL_19;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v14, kCFNumberDoubleType, &valuePtr);
  v16 = valuePtr;
  if (CFArrayGetCount((CFArrayRef)v11) >= 2
    && (v17 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v11, 1)) != 0
    && (v18 = v17, v19 = CFNumberGetTypeID(), CFGetTypeID(v18) == v19))
  {
    valuePtr = 0;
    CFNumberGetValue(v18, kCFNumberDoubleType, &valuePtr);
    v20 = valuePtr;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v20;
    v21 = 1;
  }
  else
  {
LABEL_19:
    v21 = 0;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 16) = v21;
}

uint64_t sub_20E9E1018(uint64_t a1, void *key)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const __CFBoolean *v9;
  CFTypeID TypeID;
  void *value;

  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5)
      return 0;
  }
  else
  {
LABEL_6:
    if (!v5)
      return 0;
  }
  value = 0;
  if (key)
  {
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, key, (const void **)&value))
    {
      v9 = (const __CFBoolean *)value;
      if (value)
      {
        TypeID = CFBooleanGetTypeID();
        if (CFGetTypeID(v9) == TypeID)
          return (CFBooleanGetValue(v9) != 0) | 0x100u;
      }
    }
  }
  return 0;
}

void sub_20E9E110C(_BYTE *a1, uint64_t a2, void *key)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *value;

  v7 = *(CFDictionaryRef *)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      goto LABEL_11;
  }
  else
  {
LABEL_6:
    if (!v7)
      goto LABEL_11;
  }
  value = 0;
  if (key && CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a2, key, (const void **)&value))
  {
    sub_20E9E2D1C((uint64_t)a1, value);
    return;
  }
LABEL_11:
  *a1 = 0;
  a1[24] = 0;
}

void sub_20E9E11E0(_BYTE *a1, uint64_t a2, void *key)
{
  std::__shared_weak_count *v6;
  CFDictionaryRef v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *value;

  v7 = *(CFDictionaryRef *)a2;
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v6)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v7)
      goto LABEL_11;
  }
  else
  {
LABEL_6:
    if (!v7)
      goto LABEL_11;
  }
  value = 0;
  if (key && CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a2, key, (const void **)&value))
  {
    sub_20E9E2E98((uint64_t)a1, value);
    return;
  }
LABEL_11:
  *a1 = 0;
  a1[72] = 0;
}

uint64_t sub_20E9E12B4(uint64_t a1, void *key)
{
  std::__shared_weak_count *v4;
  CFDictionaryRef v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  CFTypeID TypeID;
  const void *v13;
  uint64_t valuePtr;

  v5 = *(CFDictionaryRef *)a1;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
        goto LABEL_7;
      return 0;
    }
  }
  if (!v5)
    return 0;
LABEL_7:
  v13 = 0;
  if (!key || !CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, key, &v13))
    return 0;
  v9 = v13;
  if (!v13)
    return 0;
  TypeID = CFNumberGetTypeID();
  if (CFGetTypeID(v9) != TypeID)
    return 0;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v9, kCFNumberDoubleType, &valuePtr);
  return valuePtr;
}

uint64_t sub_20E9E13C4(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count_vtbl *v22;
  _OWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *data;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  CFDictionaryRef v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  CFDictionaryRef v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  CFDictionaryRef v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  CFDictionaryRef v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  const __CFDictionary *v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  CFDictionaryRef v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  CFDictionaryRef v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  CFDictionaryRef v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  CFDictionaryRef v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  CFDictionaryRef v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  std::string::size_type v94;
  std::string::size_type v95;
  std::string::size_type v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count_vtbl *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v112;
  std::__shared_weak_count *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  CFDictionaryRef v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  CFDictionaryRef v127;
  const __CFArray *v128;
  CFTypeID TypeID;
  const __CFNumber *ValueAtIndex;
  CFTypeID v131;
  std::string::size_type v132;
  const __CFNumber *v133;
  CFTypeID v134;
  std::string::size_type v135;
  const __CFNumber *v136;
  CFTypeID v137;
  std::string::size_type v138;
  const __CFNumber *v139;
  CFTypeID v140;
  std::string::size_type v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  CFDictionaryRef v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  CFDictionaryRef v151;
  const __CFNumber *v152;
  char v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  CFDictionaryRef v157;
  __int128 v158;
  __int128 v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  __int128 v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t v173;
  CFDictionaryRef *v174;
  size_t v175;
  size_t v177;
  size_t v178;
  int v179;
  CGFloat y;
  CGFloat v181;
  void *v182;
  void *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  unsigned __int16 v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  char v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  size_t v198;
  size_t v199;
  size_t v200;
  size_t __n;
  size_t __na;
  std::__shared_weak_count_vtbl *v203;
  std::__shared_weak_count *v204;
  char v205;
  __int128 theDict;
  CFTypeRef cfa;
  std::__shared_weak_count *v208;
  char v209;
  CFDictionaryRef v210;
  std::__shared_weak_count *v211;
  CFDictionaryRef v212[2];
  char v213;
  CGPoint v214;
  CFTypeRef v215;
  std::__shared_weak_count *v216;
  char v217;
  CGPoint point;
  CGSize size;
  CFDictionaryRef v220;
  std::__shared_weak_count *v221;
  CFDictionaryRef dict[2];
  _OWORD v223[3];
  uint64_t v224;
  char v225;
  void *value[2];
  uint64_t v227;
  char v228;
  std::string valuePtr[12];
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  uint64_t v246;

  v246 = *MEMORY[0x24BDAC8D0];
  if (!cf)
    return 8;
  sub_20E9DA754(valuePtr, cf);
  v5 = *(_OWORD *)&valuePtr[0].__r_.__value_.__l.__data_;
  if (valuePtr[0].__r_.__value_.__l.__size_)
  {
    v6 = (unint64_t *)(valuePtr[0].__r_.__value_.__l.__size_ + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = (std::__shared_weak_count *)valuePtr[0].__r_.__value_.__l.__size_;
    if (valuePtr[0].__r_.__value_.__l.__size_)
    {
      v9 = (unint64_t *)(valuePtr[0].__r_.__value_.__l.__size_ + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    do
      v11 = __ldxr(v6);
    while (__stxr(v11 + 1, v6));
    theDict = v5;
    do
      v12 = __ldxr(v6);
    while (__stxr(v12 + 1, v6));
    do
      v13 = __ldaxr(v6);
    while (__stlxr(v13 - 1, v6));
    if (!v13)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
    do
      v14 = __ldaxr(v6);
    while (__stlxr(v14 - 1, v6));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
    }
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_24;
    v15 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&theDict + 1) + 16))(*((_QWORD *)&theDict + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theDict + 1));
      if (!(_QWORD)theDict)
        goto LABEL_158;
    }
    else
    {
LABEL_24:
      if (!(_QWORD)theDict)
        goto LABEL_158;
    }
  }
  else
  {
    theDict = valuePtr[0].__r_.__value_.__r.__words[0];
    if (!valuePtr[0].__r_.__value_.__r.__words[0])
      goto LABEL_158;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)theDict, CFSTR("CameraDescription")))
  {
    if (!*((_QWORD *)&theDict + 1))
      goto LABEL_36;
    v19 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&theDict + 1) + 16))(*((_QWORD *)&theDict + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&theDict + 1));
      if (!(_QWORD)theDict)
        goto LABEL_158;
    }
    else
    {
LABEL_36:
      if (!(_QWORD)theDict)
        goto LABEL_158;
    }
    if (CFDictionaryContainsKey((CFDictionaryRef)theDict, CFSTR("IMUDescription")))
    {
      sub_20E9D4D14(CFSTR("CameraDescription"), (uint64_t)&theDict, (uint64_t)&v203);
      v22 = v203;
      v243 = 0;
      v241 = 0u;
      v242 = 0u;
      v239 = 0u;
      v240 = 0u;
      v237 = 0u;
      v238 = 0u;
      v235 = 0u;
      v236 = 0u;
      v233 = 0u;
      v234 = 0u;
      v231 = 0u;
      v232 = 0u;
      v230 = 0u;
      memset(valuePtr, 0, sizeof(valuePtr));
      LODWORD(valuePtr[0].__r_.__value_.__r.__words[1]) = -1;
      v23 = operator new(0x20uLL);
      *v23 = 0u;
      v23[1] = 0u;
      valuePtr[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v23;
      valuePtr[1].__r_.__value_.__r.__words[0] = (std::string::size_type)(v23 + 2);
      memset(&valuePtr[1].__r_.__value_.__r.__words[2], 0, 176);
      *(_OWORD *)&valuePtr[11].__r_.__value_.__l.__data_ = unk_2102EF120;
      valuePtr[1].__r_.__value_.__l.__size_ = (std::string::size_type)(v23 + 2);
      valuePtr[11].__r_.__value_.__r.__words[2] = 0x3FF0000000000000;
      *(_OWORD *)&valuePtr[10].__r_.__value_.__r.__words[1] = xmmword_2102EF110;
      *(_OWORD *)&valuePtr[9].__r_.__value_.__r.__words[2] = unk_2102EF100;
      *(_OWORD *)&valuePtr[9].__r_.__value_.__l.__data_ = xmmword_2102EF0F0;
      v230 = 0u;
      v231 = 0u;
      v232 = 0u;
      v233 = 0u;
      v234 = 0u;
      v235 = 0u;
      *(_QWORD *)&v236 = 0;
      *((_QWORD *)&v236 + 1) = 0xBFF0000000000000;
      LOWORD(v237) = 0;
      BYTE8(v237) = 0;
      LOBYTE(v239) = 0;
      *((_QWORD *)&v239 + 1) = 0x3FF0000000000000;
      *(_QWORD *)&v240 = 0x3F847AE147AE147BLL;
      BYTE8(v240) = 0;
      LOBYTE(v241) = 0;
      BYTE8(v242) = 0;
      LODWORD(v243) = 0;
      v244 = 0;
      v245 = 0;
      sub_20E9DA564(a2, (uint64_t *)valuePtr);
      v24 = v245;
      if (v245)
      {
        p_shared_owners = (unint64_t *)&v245->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      data = (std::__shared_weak_count *)valuePtr[8].__r_.__value_.__l.__data_;
      if (valuePtr[8].__r_.__value_.__r.__words[0])
      {
        v28 = (unint64_t *)(valuePtr[8].__r_.__value_.__r.__words[0] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))data->__on_zero_shared)(data);
          std::__shared_weak_count::__release_weak(data);
        }
      }
      if (valuePtr[1].__r_.__value_.__r.__words[2])
      {
        valuePtr[2].__r_.__value_.__r.__words[0] = valuePtr[1].__r_.__value_.__r.__words[2];
        operator delete((void *)valuePtr[1].__r_.__value_.__r.__words[2]);
      }
      if (valuePtr[0].__r_.__value_.__r.__words[2])
      {
        valuePtr[1].__r_.__value_.__r.__words[0] = valuePtr[0].__r_.__value_.__r.__words[2];
        operator delete((void *)valuePtr[0].__r_.__value_.__r.__words[2]);
      }
      if (!v22)
      {
        v18 = 8;
LABEL_254:
        if (v205)
        {
          v165 = v204;
          if (v204)
          {
            v166 = (unint64_t *)&v204->__shared_owners_;
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
        }
        goto LABEL_159;
      }
      CFRetain(v22);
      v30 = (std::__shared_weak_count *)operator new();
      v31 = v30;
      v30->__shared_owners_ = 0;
      v32 = (unint64_t *)&v30->__shared_owners_;
      v30->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B4418;
      v30->__shared_weak_owners_ = 0;
      v30[1].__vftable = v22;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
      do
        v34 = __ldaxr(v32);
      while (__stlxr(v34 - 1, v32));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v31);
      }
      do
        v35 = __ldxr(v32);
      while (__stxr(v35 + 1, v32));
      v210 = (CFDictionaryRef)v22;
      v211 = v31;
      do
        v36 = __ldxr(v32);
      while (__stxr(v36 + 1, v32));
      do
        v37 = __ldaxr(v32);
      while (__stlxr(v37 - 1, v32));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      do
        v38 = __ldaxr(v32);
      while (__stlxr(v38 - 1, v32));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      v40 = v210;
      v39 = v211;
      if (v211)
      {
        v41 = (unint64_t *)&v211->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        do
          v43 = __ldaxr(v41);
        while (__stlxr(v43 - 1, v41));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (v40 && CFDictionaryContainsKey(v210, CFSTR("CameraIntrinsics")))
      {
        v45 = v210;
        v44 = v211;
        if (v211)
        {
          v46 = (unint64_t *)&v211->__shared_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
          do
            v48 = __ldaxr(v46);
          while (__stlxr(v48 - 1, v46));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        if (v45 && CFDictionaryContainsKey(v210, CFSTR("TranslationCameraToIMU")))
        {
          v50 = v210;
          v49 = v211;
          if (v211)
          {
            v51 = (unint64_t *)&v211->__shared_owners_;
            do
              v52 = __ldxr(v51);
            while (__stxr(v52 + 1, v51));
            do
              v53 = __ldaxr(v51);
            while (__stlxr(v53 - 1, v51));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          if (v50 && CFDictionaryContainsKey(v210, CFSTR("RotationIMUToCamera")))
          {
            v55 = v210;
            v54 = v211;
            if (v211)
            {
              v56 = (unint64_t *)&v211->__shared_owners_;
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
              do
                v58 = __ldaxr(v56);
              while (__stlxr(v58 - 1, v56));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            if (!v55)
            {
              v18 = 8;
LABEL_166:
              v101 = v211;
              if (v211)
              {
                v102 = (unint64_t *)&v211->__shared_owners_;
                do
                  v103 = __ldaxr(v102);
                while (__stlxr(v103 - 1, v102));
                if (!v103)
                {
                  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                  std::__shared_weak_count::__release_weak(v101);
                }
              }
              if ((_DWORD)v18)
                goto LABEL_254;
              sub_20E9D4D14(CFSTR("IMUDescription"), (uint64_t)&theDict, (uint64_t)&v215);
              v104 = (std::__shared_weak_count_vtbl *)v215;
              *(_DWORD *)(a3 + 84) = 0;
              *(_DWORD *)(a3 + 81) = 0;
              LODWORD(valuePtr[0].__r_.__value_.__l.__data_) = 0;
              *(_DWORD *)((char *)valuePtr[0].__r_.__value_.__r.__words + 3) = 0;
              *(std::string::size_type *)((char *)&valuePtr[2].__r_.__value_.__r.__words[2] + 7) = 0x3FF0000000000000;
              *(_OWORD *)((char *)valuePtr[0].__r_.__value_.__r.__words + 7) = xmmword_2102EF0F0;
              *(_OWORD *)((char *)&valuePtr[0].__r_.__value_.__r.__words[2] + 7) = unk_2102EF100;
              *(_OWORD *)((char *)&valuePtr[1].__r_.__value_.__r.__words[1] + 7) = xmmword_2102EF110;
              *(_OWORD *)((char *)valuePtr[2].__r_.__value_.__r.__words + 7) = unk_2102EF120;
              *(_OWORD *)(a3 + 184) = unk_2102EF100;
              *(_OWORD *)(a3 + 168) = xmmword_2102EF0F0;
              *(_OWORD *)(a3 + 200) = xmmword_2102EF110;
              *(_OWORD *)(a3 + 216) = unk_2102EF120;
              *(_QWORD *)(a3 + 232) = 0x3FF0000000000000;
              *(_QWORD *)(a3 + 304) = 0x3FF0000000000000;
              *(_OWORD *)(a3 + 240) = xmmword_2102EF0F0;
              *(_OWORD *)(a3 + 256) = unk_2102EF100;
              *(_OWORD *)(a3 + 272) = xmmword_2102EF110;
              *(_OWORD *)(a3 + 288) = unk_2102EF120;
              *(_QWORD *)(a3 + 376) = 0x3FF0000000000000;
              *(_OWORD *)(a3 + 312) = xmmword_2102EF0F0;
              *(_OWORD *)(a3 + 328) = unk_2102EF100;
              *(_OWORD *)(a3 + 344) = xmmword_2102EF110;
              *(_OWORD *)(a3 + 360) = unk_2102EF120;
              *(_QWORD *)(a3 + 448) = 0x3FF0000000000000;
              *(_OWORD *)(a3 + 384) = xmmword_2102EF0F0;
              *(_OWORD *)(a3 + 400) = unk_2102EF100;
              *(_OWORD *)(a3 + 416) = xmmword_2102EF110;
              *(_OWORD *)(a3 + 432) = unk_2102EF120;
              *(_QWORD *)(a3 + 520) = 0x3FF0000000000000;
              *(_OWORD *)(a3 + 488) = xmmword_2102EF110;
              *(_OWORD *)(a3 + 504) = unk_2102EF120;
              *(_OWORD *)(a3 + 456) = xmmword_2102EF0F0;
              *(_OWORD *)(a3 + 472) = unk_2102EF100;
              *(_OWORD *)dict = 0u;
              memset(v223, 0, 32);
              *(_OWORD *)(a3 + 32) = 0u;
              *(_OWORD *)(a3 + 48) = 0u;
              *(_OWORD *)a3 = 0u;
              *(_OWORD *)(a3 + 16) = 0u;
              *(_QWORD *)(a3 + 64) = 0;
              *(_QWORD *)(a3 + 72) = 0x7FEFFFFFFFFFFFFFLL;
              *(_BYTE *)(a3 + 80) = 0;
              *(_BYTE *)(a3 + 88) = 0;
              v105 = *(_OWORD *)&valuePtr[0].__r_.__value_.__r.__words[2];
              *(_OWORD *)(a3 + 89) = *(_OWORD *)&valuePtr[0].__r_.__value_.__l.__data_;
              v106 = *(_OWORD *)&valuePtr[1].__r_.__value_.__r.__words[1];
              v107 = *(_OWORD *)&valuePtr[2].__r_.__value_.__l.__data_;
              *(_OWORD *)(a3 + 152) = *(_OWORD *)((char *)&valuePtr[2].__r_.__value_.__r.__words[1] + 7);
              *(_OWORD *)(a3 + 137) = v107;
              *(_OWORD *)(a3 + 121) = v106;
              *(_OWORD *)(a3 + 105) = v105;
              *(_QWORD *)(a3 + 528) = 0x3FF0000000000000;
              *(_QWORD *)(a3 + 552) = 0;
              *(_OWORD *)(a3 + 536) = 0u;
              *(_QWORD *)(a3 + 560) = 0x3FF0000000000000;
              *(_QWORD *)(a3 + 584) = 0;
              *(_OWORD *)(a3 + 568) = 0u;
              __asm { FMOV            V1.2D, #1.0 }
              *(_OWORD *)(a3 + 592) = _Q1;
              *(_OWORD *)(a3 + 608) = _Q1;
              *(_OWORD *)(a3 + 624) = _Q1;
              *(_QWORD *)(a3 + 640) = 0x3FF0000000000000;
              *(_QWORD *)(a3 + 664) = 0;
              *(_OWORD *)(a3 + 648) = 0u;
              v112 = *(_OWORD *)((char *)v223 + 8);
              *(_QWORD *)(a3 + 688) = *((_QWORD *)&v223[1] + 1);
              *(_OWORD *)(a3 + 672) = v112;
              *(_WORD *)(a3 + 696) = 0;
              if (!v104)
              {
                v18 = 8;
                goto LABEL_266;
              }
              CFRetain(v104);
              v113 = (std::__shared_weak_count *)operator new();
              v114 = v113;
              v113->__shared_owners_ = 0;
              v115 = (unint64_t *)&v113->__shared_owners_;
              v113->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B4418;
              v113->__shared_weak_owners_ = 0;
              v113[1].__vftable = v104;
              do
                v116 = __ldxr(v115);
              while (__stxr(v116 + 1, v115));
              do
                v117 = __ldaxr(v115);
              while (__stlxr(v117 - 1, v115));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                std::__shared_weak_count::__release_weak(v114);
              }
              do
                v118 = __ldxr(v115);
              while (__stxr(v118 + 1, v115));
              v212[0] = (CFDictionaryRef)v104;
              v212[1] = (CFDictionaryRef)v114;
              do
                v119 = __ldxr(v115);
              while (__stxr(v119 + 1, v115));
              do
                v120 = __ldaxr(v115);
              while (__stlxr(v120 - 1, v115));
              if (!v120)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
              do
                v121 = __ldaxr(v115);
              while (__stlxr(v121 - 1, v115));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
                std::__shared_weak_count::__release_weak(v114);
              }
              v123 = v212[0];
              v122 = (std::__shared_weak_count *)v212[1];
              if (v212[1])
              {
                v124 = (unint64_t *)((char *)v212[1] + 8);
                do
                  v125 = __ldxr(v124);
                while (__stxr(v125 + 1, v124));
                do
                  v126 = __ldaxr(v124);
                while (__stlxr(v126 - 1, v124));
                if (!v126)
                {
                  ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                  std::__shared_weak_count::__release_weak(v122);
                }
              }
              if (v123)
              {
                dict[0] = 0;
                if (CFSTR("NoiseCharacteristics"))
                {
                  v127 = v212[0];
                  if (CFDictionaryGetValueIfPresent(v212[0], CFSTR("NoiseCharacteristics"), (const void **)dict))
                  {
                    v128 = dict[0];
                    if (dict[0])
                    {
                      TypeID = CFArrayGetTypeID();
                      if (CFGetTypeID(v128) == TypeID && CFArrayGetCount(v128) == 4 && CFArrayGetCount(v128) >= 1)
                      {
                        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v128, 0);
                        if (ValueAtIndex)
                        {
                          v131 = CFNumberGetTypeID();
                          if (CFGetTypeID(ValueAtIndex) == v131)
                          {
                            valuePtr[0].__r_.__value_.__r.__words[0] = 0;
                            CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, valuePtr);
                            v132 = valuePtr[0].__r_.__value_.__r.__words[0];
                            if (CFArrayGetCount(v128) >= 2)
                            {
                              v133 = (const __CFNumber *)CFArrayGetValueAtIndex(v128, 1);
                              if (v133)
                              {
                                v134 = CFNumberGetTypeID();
                                if (CFGetTypeID(v133) == v134)
                                {
                                  valuePtr[0].__r_.__value_.__r.__words[0] = 0;
                                  CFNumberGetValue(v133, kCFNumberDoubleType, valuePtr);
                                  v135 = valuePtr[0].__r_.__value_.__r.__words[0];
                                  if (CFArrayGetCount(v128) >= 3)
                                  {
                                    v136 = (const __CFNumber *)CFArrayGetValueAtIndex(v128, 2);
                                    if (v136)
                                    {
                                      v137 = CFNumberGetTypeID();
                                      if (CFGetTypeID(v136) == v137)
                                      {
                                        valuePtr[0].__r_.__value_.__r.__words[0] = 0;
                                        CFNumberGetValue(v136, kCFNumberDoubleType, valuePtr);
                                        v138 = valuePtr[0].__r_.__value_.__r.__words[0];
                                        if (CFArrayGetCount(v128) >= 4)
                                        {
                                          v139 = (const __CFNumber *)CFArrayGetValueAtIndex(v128, 3);
                                          if (v139)
                                          {
                                            v140 = CFNumberGetTypeID();
                                            if (CFGetTypeID(v139) == v140)
                                            {
                                              valuePtr[0].__r_.__value_.__r.__words[0] = 0;
                                              CFNumberGetValue(v139, kCFNumberDoubleType, valuePtr);
                                              v141 = valuePtr[0].__r_.__value_.__r.__words[0];
                                              v142 = (std::__shared_weak_count *)v212[1];
                                              *(_QWORD *)a3 = v132;
                                              *(_QWORD *)(a3 + 8) = v135;
                                              *(_QWORD *)(a3 + 16) = v138;
                                              *(_QWORD *)(a3 + 24) = v141;
                                              if (v142)
                                              {
                                                v143 = (unint64_t *)&v142->__shared_owners_;
                                                do
                                                  v144 = __ldxr(v143);
                                                while (__stxr(v144 + 1, v143));
                                                do
                                                  v145 = __ldaxr(v143);
                                                while (__stlxr(v145 - 1, v143));
                                                if (!v145)
                                                {
                                                  ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
                                                  std::__shared_weak_count::__release_weak(v142);
                                                }
                                              }
                                              if (v127)
                                              {
                                                valuePtr[0].__r_.__value_.__r.__words[0] = 0;
                                                if (CFSTR("Gravity"))
                                                {
                                                  v146 = v212[0];
                                                  if (CFDictionaryGetValueIfPresent(v212[0], CFSTR("Gravity"), (const void **)&valuePtr[0].__r_.__value_.__l.__data_))
                                                  {
                                                    sub_20E9E2D1C((uint64_t)value, valuePtr[0].__r_.__value_.__l.__data_);
                                                    v147 = (std::__shared_weak_count *)v212[1];
                                                    if (!v228)
                                                      goto LABEL_377;
                                                    *(_OWORD *)(a3 + 32) = *(_OWORD *)value;
                                                    *(_QWORD *)(a3 + 48) = v227;
                                                    if (v147)
                                                    {
                                                      v148 = (unint64_t *)&v147->__shared_owners_;
                                                      do
                                                        v149 = __ldxr(v148);
                                                      while (__stxr(v149 + 1, v148));
                                                      do
                                                        v150 = __ldaxr(v148);
                                                      while (__stlxr(v150 - 1, v148));
                                                      if (!v150)
                                                      {
                                                        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                                                        std::__shared_weak_count::__release_weak(v147);
                                                      }
                                                    }
                                                    if (v146)
                                                    {
                                                      valuePtr[0].__r_.__value_.__r.__words[0] = 0;
                                                      if (CFSTR("AccelerometerTimestampCorrection"))
                                                      {
                                                        v151 = v212[0];
                                                        if (CFDictionaryGetValueIfPresent(v212[0], CFSTR("AccelerometerTimestampCorrection"), (const void **)&valuePtr[0].__r_.__value_.__l.__data_))
                                                        {
                                                          v152 = sub_20EA5E34C((const __CFNumber *)valuePtr[0].__r_.__value_.__l.__data_);
                                                          v147 = (std::__shared_weak_count *)v212[1];
                                                          if (!v153)
                                                            goto LABEL_377;
                                                          *(_QWORD *)(a3 + 56) = v152;
                                                          if (v147)
                                                          {
                                                            v154 = (unint64_t *)&v147->__shared_owners_;
                                                            do
                                                              v155 = __ldxr(v154);
                                                            while (__stxr(v155 + 1, v154));
                                                            do
                                                              v156 = __ldaxr(v154);
                                                            while (__stlxr(v156 - 1, v154));
                                                            if (!v156)
                                                            {
                                                              ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                                                              std::__shared_weak_count::__release_weak(v147);
                                                            }
                                                          }
                                                          if (v151)
                                                          {
                                                            dict[0] = 0;
                                                            if (CFSTR("AccelerometerCoordCorrection"))
                                                            {
                                                              v157 = v212[0];
                                                              if (CFDictionaryGetValueIfPresent(v212[0], CFSTR("AccelerometerCoordCorrection"), (const void **)dict))
                                                              {
                                                                sub_20E9E2E98((uint64_t)valuePtr, dict[0]);
                                                                v147 = (std::__shared_weak_count *)v212[1];
                                                                if (valuePtr[3].__r_.__value_.__s.__data_[0])
                                                                {
                                                                  v158 = *(_OWORD *)&valuePtr[2].__r_.__value_.__l.__data_;
                                                                  *(_OWORD *)(a3 + 128) = *(_OWORD *)&valuePtr[1].__r_.__value_.__r.__words[1];
                                                                  *(_OWORD *)(a3 + 144) = v158;
                                                                  *(_QWORD *)(a3 + 160) = *((_QWORD *)&valuePtr[2].__r_.__value_.__l
                                                                                          + 2);
                                                                  v159 = *(_OWORD *)&valuePtr[0].__r_.__value_.__r.__words[2];
                                                                  *(_OWORD *)(a3 + 96) = *(_OWORD *)&valuePtr[0].__r_.__value_.__l.__data_;
                                                                  *(_OWORD *)(a3 + 112) = v159;
                                                                  if (v147)
                                                                  {
                                                                    v160 = (unint64_t *)&v147->__shared_owners_;
                                                                    do
                                                                      v161 = __ldxr(v160);
                                                                    while (__stxr(v161 + 1, v160));
                                                                    do
                                                                      v162 = __ldaxr(v160);
                                                                    while (__stlxr(v162 - 1, v160));
                                                                    if (!v162)
                                                                    {
                                                                      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                                                                      std::__shared_weak_count::__release_weak(v147);
                                                                    }
                                                                  }
                                                                  if (v157)
                                                                  {
                                                                    cfa = 0;
                                                                    if (CFSTR("GyroCoordCorrection"))
                                                                    {
                                                                      if (CFDictionaryGetValueIfPresent(v212[0], CFSTR("GyroCoordCorrection"), &cfa))
                                                                      {
                                                                        sub_20E9E2E98((uint64_t)dict, cfa);
                                                                        if (v225)
                                                                        {
                                                                          v18 = 0;
                                                                          v163 = v223[2];
                                                                          *(_OWORD *)(a3 + 200) = v223[1];
                                                                          *(_OWORD *)(a3 + 216) = v163;
                                                                          *(_QWORD *)(a3 + 232) = v224;
                                                                          v164 = v223[0];
                                                                          *(_OWORD *)(a3 + 168) = *(_OWORD *)dict;
                                                                          *(_OWORD *)(a3 + 184) = v164;
                                                                          v147 = (std::__shared_weak_count *)v212[1];
                                                                          if (!v212[1])
                                                                            goto LABEL_266;
LABEL_261:
                                                                          v168 = (unint64_t *)&v147->__shared_owners_;
                                                                          do
                                                                            v169 = __ldaxr(v168);
                                                                          while (__stlxr(v169 - 1, v168));
                                                                          if (!v169)
                                                                          {
                                                                            ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                                                                            std::__shared_weak_count::__release_weak(v147);
                                                                          }
                                                                          goto LABEL_266;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                  goto LABEL_260;
                                                                }
LABEL_377:
                                                                v18 = 8;
                                                                if (!v147)
                                                                  goto LABEL_266;
                                                                goto LABEL_261;
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_260:
              v18 = 8;
              v147 = (std::__shared_weak_count *)v212[1];
              if (v212[1])
                goto LABEL_261;
LABEL_266:
              if (v217)
              {
                v170 = v216;
                if (v216)
                {
                  v171 = (unint64_t *)&v216->__shared_owners_;
                  do
                    v172 = __ldaxr(v171);
                  while (__stlxr(v172 - 1, v171));
                  if (!v172)
                  {
                    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
                    std::__shared_weak_count::__release_weak(v170);
                  }
                }
              }
              goto LABEL_254;
            }
            if (CFDictionaryContainsKey(v210, CFSTR("TimeStampCorrectionForCamera")))
            {
              sub_20E9D4D14(CFSTR("CameraIntrinsics"), (uint64_t)&v210, (uint64_t)&cfa);
              v59 = (const __CFDictionary *)cfa;
              if (!cfa)
              {
                v18 = 8;
LABEL_325:
                if (v209)
                {
                  v192 = v208;
                  if (v208)
                  {
                    v193 = (unint64_t *)&v208->__shared_owners_;
                    do
                      v194 = __ldaxr(v193);
                    while (__stlxr(v194 - 1, v193));
                    if (!v194)
                    {
                      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                      std::__shared_weak_count::__release_weak(v192);
                    }
                  }
                }
                goto LABEL_166;
              }
              CFRetain(cfa);
              v60 = (std::__shared_weak_count *)operator new();
              v61 = v60;
              v60->__shared_owners_ = 0;
              v62 = (unint64_t *)&v60->__shared_owners_;
              v60->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B4418;
              v60->__shared_weak_owners_ = 0;
              v60[1].__vftable = (std::__shared_weak_count_vtbl *)v59;
              do
                v63 = __ldxr(v62);
              while (__stxr(v63 + 1, v62));
              do
                v64 = __ldaxr(v62);
              while (__stlxr(v64 - 1, v62));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                std::__shared_weak_count::__release_weak(v61);
              }
              do
                v65 = __ldxr(v62);
              while (__stxr(v65 + 1, v62));
              v220 = v59;
              v221 = v61;
              do
                v66 = __ldxr(v62);
              while (__stxr(v66 + 1, v62));
              do
                v67 = __ldaxr(v62);
              while (__stlxr(v67 - 1, v62));
              if (!v67)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
              do
                v68 = __ldaxr(v62);
              while (__stlxr(v68 - 1, v62));
              if (!v68)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
              v69 = v220;
              v70 = v221;
              if (v221)
              {
                v71 = (unint64_t *)&v221->__shared_owners_;
                do
                  v72 = __ldxr(v71);
                while (__stxr(v72 + 1, v71));
                do
                  v73 = __ldaxr(v71);
                while (__stlxr(v73 - 1, v71));
                if (!v73)
                {
                  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                  std::__shared_weak_count::__release_weak(v70);
                }
              }
              if (!v69 || !CFDictionaryContainsKey(v220, CFSTR("Resolution")))
                goto LABEL_311;
              v74 = v220;
              v75 = v221;
              if (v221)
              {
                v76 = (unint64_t *)&v221->__shared_owners_;
                do
                  v77 = __ldxr(v76);
                while (__stxr(v77 + 1, v76));
                do
                  v78 = __ldaxr(v76);
                while (__stlxr(v78 - 1, v76));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              if (!v74 || !CFDictionaryContainsKey(v220, CFSTR("EffectiveFocusLength")))
                goto LABEL_311;
              v79 = v220;
              v80 = v221;
              if (v221)
              {
                v81 = (unint64_t *)&v221->__shared_owners_;
                do
                  v82 = __ldxr(v81);
                while (__stxr(v82 + 1, v81));
                do
                  v83 = __ldaxr(v81);
                while (__stlxr(v83 - 1, v81));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                  std::__shared_weak_count::__release_weak(v80);
                }
              }
              if (!v79 || !CFDictionaryContainsKey(v220, CFSTR("PrincipalPoint")))
                goto LABEL_311;
              v84 = v220;
              v85 = v221;
              if (v221)
              {
                v86 = (unint64_t *)&v221->__shared_owners_;
                do
                  v87 = __ldxr(v86);
                while (__stxr(v87 + 1, v86));
                do
                  v88 = __ldaxr(v86);
                while (__stlxr(v88 - 1, v86));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
              if (!v84 || !CFDictionaryContainsKey(v220, CFSTR("DistortionCoefficients")))
                goto LABEL_311;
              v89 = v220;
              v90 = v221;
              if (v221)
              {
                v91 = (unint64_t *)&v221->__shared_owners_;
                do
                  v92 = __ldxr(v91);
                while (__stxr(v92 + 1, v91));
                do
                  v93 = __ldaxr(v91);
                while (__stlxr(v93 - 1, v91));
                if (!v93)
                {
                  ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                  std::__shared_weak_count::__release_weak(v90);
                }
              }
              if (v89
                && (value[0] = 0, CFSTR("LensType"))
                && CFDictionaryGetValueIfPresent(v220, CFSTR("LensType"), (const void **)value)
                && (sub_20EA5E5C4((CFIndex)value[0], valuePtr), valuePtr[1].__r_.__value_.__s.__data_[0]))
              {
                *(_QWORD *)&v223[0] = *((_QWORD *)&valuePtr[0].__r_.__value_.__l + 2);
                *(_OWORD *)dict = *(_OWORD *)&valuePtr[0].__r_.__value_.__l.__data_;
                v94 = HIBYTE(valuePtr[0].__r_.__value_.__r.__words[2]);
                v95 = valuePtr[0].__r_.__value_.__l.__size_;
                v96 = valuePtr[0].__r_.__value_.__r.__words[0];
              }
              else
              {
                v95 = 6649449;
                v96 = 0x7463657073726550;
                dict[0] = (CFDictionaryRef)0x7463657073726550;
                dict[1] = (CFDictionaryRef)6649449;
                LODWORD(v223[0]) = (_DWORD)v215;
                *(_DWORD *)((char *)v223 + 3) = *(_DWORD *)((char *)&v215 + 3);
                LODWORD(v94) = 11;
                BYTE7(v223[0]) = 11;
              }
              if ((v94 & 0x80u) == 0)
                v173 = v94;
              else
                v173 = v95;
              if ((v94 & 0x80u) == 0)
                v174 = dict;
              else
                v174 = (CFDictionaryRef *)v96;
              if (v173 >= 0xB)
                v175 = 11;
              else
                v175 = v173;
              if (!memcmp(v174, "Perspective", v175) && v173 == 11)
              {
                v179 = 0;
              }
              else
              {
                if (v173 >= 7)
                  v177 = 7;
                else
                  v177 = v173;
                if (!memcmp(v174, "Fisheye", v177) && v173 == 7
                  || (v173 >= 0xC ? (v178 = 12) : (v178 = v173),
                      (__n = v178, !memcmp(v174, "FisheyeFast1", v178)) && v173 == 12))
                {
                  v179 = 2;
                }
                else if (!memcmp(v174, "FisheyeFast2", __n) && v173 == 12)
                {
                  v179 = 3;
                }
                else if (!memcmp(v174, "NoDistortion", __n) && v173 == 12)
                {
                  v179 = 6;
                }
                else
                {
                  if (v173 >= 0x12)
                    v198 = 18;
                  else
                    v198 = v173;
                  if (!memcmp(v174, "FlyoverPerspective", v198) && v173 == 18)
                  {
                    v179 = 4;
                  }
                  else
                  {
                    if (v173 >= 0xA)
                      v199 = 10;
                    else
                      v199 = v173;
                    __na = v199;
                    if (!memcmp(v174, "Noncentric", v199) && v173 == 10)
                    {
                      v179 = 5;
                    }
                    else if (!memcmp(v174, "FisheyeKR7", __na) && v173 == 10)
                    {
                      v179 = 7;
                    }
                    else
                    {
                      if (v173 >= 0xD)
                        v200 = 13;
                      else
                        v200 = v173;
                      if (!memcmp(v174, "NoncentricKR7", v200) && v173 == 13)
                      {
                        v179 = 8;
                      }
                      else if (!std::string::compare((const std::string *)dict, "FisheyeKDR7"))
                      {
                        v179 = 9;
                      }
                      else if (!std::string::compare((const std::string *)dict, "NoncentricKDR7"))
                      {
                        v179 = 10;
                      }
                      else if (!std::string::compare((const std::string *)dict, "I15"))
                      {
                        v179 = 11;
                      }
                      else if (!std::string::compare((const std::string *)dict, "FisheyeKDRC7"))
                      {
                        v179 = 12;
                      }
                      else if (!std::string::compare((const std::string *)dict, "NoncentricKDRC7"))
                      {
                        v179 = 13;
                      }
                      else
                      {
                        v179 = -1;
                      }
                    }
                  }
                }
              }
              *(_DWORD *)(a2 + 8) = v179;
              if (SBYTE7(v223[0]) < 0)
                operator delete(dict[0]);
              sub_20E9D4D14(CFSTR("Resolution"), (uint64_t)&v220, (uint64_t)dict);
              if (!LOBYTE(v223[0]))
              {
LABEL_311:
                v18 = 8;
LABEL_312:
                v184 = v221;
                if (v221)
                {
                  v185 = (unint64_t *)&v221->__shared_owners_;
                  do
                    v186 = __ldaxr(v185);
                  while (__stlxr(v186 - 1, v185));
                  if (!v186)
                  {
                    ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
                    std::__shared_weak_count::__release_weak(v184);
                  }
                }
                if (!(_DWORD)v18)
                {
                  v187 = sub_20E9E1018((uint64_t)&v210, CFSTR("EnablePointCloudEnrichmentAndDisparityFractionAdjust"));
                  if (v187 >= 0x100u)
                    *(_BYTE *)(a2 + 400) = v187;
                  sub_20E9E110C(dict, (uint64_t)&v210, CFSTR("TranslationCameraToIMU"));
                  if (!BYTE8(v223[0]))
                    goto LABEL_324;
                  *(_OWORD *)(a2 + 288) = *(_OWORD *)dict;
                  *(_QWORD *)(a2 + 304) = *(_QWORD *)&v223[0];
                  sub_20E9E11E0(valuePtr, (uint64_t)&v210, CFSTR("RotationIMUToCamera"));
                  if (!valuePtr[3].__r_.__value_.__s.__data_[0])
                    goto LABEL_324;
                  *(_QWORD *)(a2 + 376) = *((_QWORD *)&valuePtr[2].__r_.__value_.__l + 2);
                  v188 = *(_OWORD *)&valuePtr[2].__r_.__value_.__l.__data_;
                  *(_OWORD *)(a2 + 344) = *(_OWORD *)&valuePtr[1].__r_.__value_.__r.__words[1];
                  *(_OWORD *)(a2 + 360) = v188;
                  v189 = *(_OWORD *)&valuePtr[0].__r_.__value_.__r.__words[2];
                  *(_OWORD *)(a2 + 312) = *(_OWORD *)&valuePtr[0].__r_.__value_.__l.__data_;
                  *(_OWORD *)(a2 + 328) = v189;
                  v190 = sub_20E9E12B4((uint64_t)&v210, CFSTR("TimeStampCorrectionForCamera"));
                  if (v191)
                  {
                    v18 = 0;
                    *(_QWORD *)(a2 + 384) = v190;
                  }
                  else
                  {
LABEL_324:
                    v18 = 8;
                  }
                }
                goto LABEL_325;
              }
              if (!CGSizeMakeWithDictionaryRepresentation(dict[0], &size))
              {
                v18 = 8;
LABEL_339:
                if (LOBYTE(v223[0]))
                {
                  v195 = (std::__shared_weak_count *)dict[1];
                  if (dict[1])
                  {
                    v196 = (unint64_t *)((char *)dict[1] + 8);
                    do
                      v197 = __ldaxr(v196);
                    while (__stlxr(v197 - 1, v196));
                    if (!v197)
                    {
                      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
                      std::__shared_weak_count::__release_weak(v195);
                    }
                  }
                }
                goto LABEL_312;
              }
              *(int32x2_t *)a2 = vmovn_s64((int64x2_t)vcvtq_u64_f64((float64x2_t)size));
              sub_20E9D4D14(CFSTR("EffectiveFocusLength"), (uint64_t)&v220, (uint64_t)value);
              if (!(_BYTE)v227 || !CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value[0], &point))
              {
                v18 = 8;
LABEL_338:
                sub_20E869AA8((uint64_t)value);
                goto LABEL_339;
              }
              y = point.y;
              *(CGFloat *)(a2 + 112) = point.x;
              *(CGFloat *)(a2 + 144) = y;
              sub_20E9D4D14(CFSTR("PrincipalPoint"), (uint64_t)&v220, (uint64_t)&v215);
              if (!v217
                || !CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)v215, &v214)
                || (v181 = v214.y,
                    *(CGFloat *)(a2 + 128) = v214.x,
                    *(CGFloat *)(a2 + 152) = v181,
                    *(_QWORD *)(a2 + 176) = 0x3FF0000000000000,
                    sub_20E9E0B24((uint64_t)valuePtr, (uint64_t)&v220, CFSTR("DistortionCoefficients")),
                    !valuePtr[1].__r_.__value_.__s.__data_[0]))
              {
                v18 = 8;
LABEL_337:
                sub_20E869AA8((uint64_t)&v215);
                goto LABEL_338;
              }
              v182 = (void *)valuePtr[0].__r_.__value_.__r.__words[0];
              v183 = *(void **)(a2 + 16);
              if (valuePtr[0].__r_.__value_.__l.__size_ - valuePtr[0].__r_.__value_.__r.__words[0] > *(_QWORD *)(a2 + 24) - (_QWORD)v183)
                goto LABEL_310;
              if (valuePtr[0].__r_.__value_.__l.__size_ != valuePtr[0].__r_.__value_.__r.__words[0])
                memmove(v183, valuePtr[0].__r_.__value_.__l.__data_, valuePtr[0].__r_.__value_.__l.__size_ - valuePtr[0].__r_.__value_.__r.__words[0]);
              if (sub_20EA61064((uint64_t)&v220, CFSTR("TangentialDistortionCoefficients")))
              {
                sub_20E9E0E60((uint64_t)v212, (uint64_t)&v220, CFSTR("TangentialDistortionCoefficients"));
                if (!v213)
                {
LABEL_310:
                  v18 = 8;
                  goto LABEL_369;
                }
                v18 = 0;
                *(_OWORD *)(a2 + 64) = *(_OWORD *)v212;
              }
              else
              {
                v18 = 0;
              }
LABEL_369:
              if (v182)
              {
                valuePtr[0].__r_.__value_.__l.__size_ = (std::string::size_type)v182;
                operator delete(v182);
              }
              goto LABEL_337;
            }
          }
        }
      }
      v18 = 8;
      goto LABEL_166;
    }
  }
LABEL_158:
  v18 = 8;
LABEL_159:
  v97 = (std::__shared_weak_count *)*((_QWORD *)&theDict + 1);
  if (*((_QWORD *)&theDict + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&theDict + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  return v18;
}

void sub_20E9E2B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  sub_20E86665C((uint64_t)&a33);
  sub_20E869AA8((uint64_t)&a38);
  sub_20E869AA8((uint64_t)&a23);
  sub_20E86665C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20E9E2C6C(_Unwind_Exception *a1, int a2)
{
  const void *v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    CFRelease(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_20E9E2C8C()
{
  __cxa_end_catch();
  JUMPOUT(0x20E9E2CE4);
}

void sub_20E9E2CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E86665C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20E9E2CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E869AA8((uint64_t)&a23);
  sub_20E86665C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20E9E2CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20E86665C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9E2D1C(uint64_t result, const void *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  CFTypeID v6;
  uint64_t v7;
  const void *v8;
  CFTypeID v9;
  uint64_t v10;
  const __CFNumber *v11;
  CFTypeID v12;
  uint64_t v13;
  char v14;
  uint64_t valuePtr;

  v2 = result;
  if (!a2)
    goto LABEL_14;
  TypeID = CFArrayGetTypeID();
  result = CFGetTypeID(a2);
  if (result != TypeID)
    goto LABEL_14;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result != 3)
    goto LABEL_14;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 1)
    goto LABEL_14;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
  if (!result)
    goto LABEL_14;
  v5 = (const void *)result;
  v6 = CFNumberGetTypeID();
  result = CFGetTypeID(v5);
  if (result != v6)
    goto LABEL_14;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v5, kCFNumberDoubleType, &valuePtr);
  v7 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 2)
    goto LABEL_14;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 1);
  if (!result)
    goto LABEL_14;
  v8 = (const void *)result;
  v9 = CFNumberGetTypeID();
  result = CFGetTypeID(v8);
  if (result != v9)
    goto LABEL_14;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v8, kCFNumberDoubleType, &valuePtr);
  v10 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 3)
    goto LABEL_14;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 2);
  if (result && (v11 = (const __CFNumber *)result, v12 = CFNumberGetTypeID(), result = CFGetTypeID(v11), result == v12))
  {
    valuePtr = 0;
    result = CFNumberGetValue(v11, kCFNumberDoubleType, &valuePtr);
    v13 = valuePtr;
    *(_QWORD *)v2 = v7;
    *(_QWORD *)(v2 + 8) = v10;
    *(_QWORD *)(v2 + 16) = v13;
    v14 = 1;
  }
  else
  {
LABEL_14:
    v14 = 0;
    *(_BYTE *)v2 = 0;
  }
  *(_BYTE *)(v2 + 24) = v14;
  return result;
}

uint64_t sub_20E9E2E98(uint64_t result, const void *a2)
{
  uint64_t v2;
  CFTypeID TypeID;
  const void *v5;
  CFTypeID v6;
  uint64_t v7;
  const void *v8;
  CFTypeID v9;
  uint64_t v10;
  const void *v11;
  CFTypeID v12;
  uint64_t v13;
  const void *v14;
  CFTypeID v15;
  uint64_t v16;
  const void *v17;
  CFTypeID v18;
  uint64_t v19;
  const void *v20;
  CFTypeID v21;
  uint64_t v22;
  const void *v23;
  CFTypeID v24;
  const void *v25;
  CFTypeID v26;
  uint64_t v27;
  const __CFNumber *v28;
  CFTypeID v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t valuePtr;

  v2 = result;
  if (!a2)
    goto LABEL_32;
  TypeID = CFArrayGetTypeID();
  result = CFGetTypeID(a2);
  if (result != TypeID)
    goto LABEL_32;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result != 9)
    goto LABEL_32;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 1)
    goto LABEL_32;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
  if (!result)
    goto LABEL_32;
  v5 = (const void *)result;
  v6 = CFNumberGetTypeID();
  result = CFGetTypeID(v5);
  if (result != v6)
    goto LABEL_32;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v5, kCFNumberDoubleType, &valuePtr);
  v7 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 2)
    goto LABEL_32;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 1);
  if (!result)
    goto LABEL_32;
  v8 = (const void *)result;
  v9 = CFNumberGetTypeID();
  result = CFGetTypeID(v8);
  if (result != v9)
    goto LABEL_32;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v8, kCFNumberDoubleType, &valuePtr);
  v10 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 3)
    goto LABEL_32;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 2);
  if (!result)
    goto LABEL_32;
  v11 = (const void *)result;
  v12 = CFNumberGetTypeID();
  result = CFGetTypeID(v11);
  if (result != v12)
    goto LABEL_32;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v11, kCFNumberDoubleType, &valuePtr);
  v13 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 4)
    goto LABEL_32;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 3);
  if (!result)
    goto LABEL_32;
  v14 = (const void *)result;
  v15 = CFNumberGetTypeID();
  result = CFGetTypeID(v14);
  if (result != v15)
    goto LABEL_32;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v14, kCFNumberDoubleType, &valuePtr);
  v16 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 5)
    goto LABEL_32;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 4);
  if (!result)
    goto LABEL_32;
  v17 = (const void *)result;
  v18 = CFNumberGetTypeID();
  result = CFGetTypeID(v17);
  if (result != v18)
    goto LABEL_32;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v17, kCFNumberDoubleType, &valuePtr);
  v19 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 6)
    goto LABEL_32;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 5);
  if (!result)
    goto LABEL_32;
  v20 = (const void *)result;
  v21 = CFNumberGetTypeID();
  result = CFGetTypeID(v20);
  if (result != v21)
    goto LABEL_32;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v20, kCFNumberDoubleType, &valuePtr);
  v22 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 7)
    goto LABEL_32;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 6);
  if (!result)
    goto LABEL_32;
  v23 = (const void *)result;
  v24 = CFNumberGetTypeID();
  result = CFGetTypeID(v23);
  if (result != v24)
    goto LABEL_32;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v23, kCFNumberDoubleType, &valuePtr);
  v32 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 8)
    goto LABEL_32;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 7);
  if (!result)
    goto LABEL_32;
  v25 = (const void *)result;
  v26 = CFNumberGetTypeID();
  result = CFGetTypeID(v25);
  if (result != v26)
    goto LABEL_32;
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)v25, kCFNumberDoubleType, &valuePtr);
  v27 = valuePtr;
  result = CFArrayGetCount((CFArrayRef)a2);
  if (result < 9)
    goto LABEL_32;
  result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)a2, 8);
  if (result && (v28 = (const __CFNumber *)result, v29 = CFNumberGetTypeID(), result = CFGetTypeID(v28), result == v29))
  {
    valuePtr = 0;
    result = CFNumberGetValue(v28, kCFNumberDoubleType, &valuePtr);
    v30 = valuePtr;
    *(_QWORD *)v2 = v7;
    *(_QWORD *)(v2 + 8) = v10;
    *(_QWORD *)(v2 + 16) = v13;
    *(_QWORD *)(v2 + 24) = v16;
    *(_QWORD *)(v2 + 32) = v19;
    *(_QWORD *)(v2 + 40) = v22;
    *(_QWORD *)(v2 + 48) = v32;
    *(_QWORD *)(v2 + 56) = v27;
    *(_QWORD *)(v2 + 64) = v30;
    v31 = 1;
  }
  else
  {
LABEL_32:
    v31 = 0;
    *(_BYTE *)v2 = 0;
  }
  *(_BYTE *)(v2 + 72) = v31;
  return result;
}

void sub_20E9E322C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6D790);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D790))
  {
    sub_20E9E333C(&sub_20E9E322C, (uint64_t)&xmmword_254A6D770);
    __cxa_atexit((void (*)(void *))sub_20E9E42D8, &xmmword_254A6D770, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D790);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (byte_254A6D788)
  {
    if (byte_254A6D787 < 0)
    {
      sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A6D770, *((unint64_t *)&xmmword_254A6D770 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_254A6D770;
      *(_QWORD *)(a1 + 16) = unk_254A6D780;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_20E9E3300(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D790);
  _Unwind_Resume(a1);
}

void sub_20E9E3318(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9E333C(const void *a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v3;
  int v4;
  std::__fs::filesystem::path::__string_view v5;
  char *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v7;
  std::basic_string_view<_CharT, _Traits>::size_type v8;
  std::__fs::filesystem::path::__string_view v9;
  char *v10;
  std::basic_string_view<_CharT, _Traits>::size_type v11;
  std::basic_string_view<_CharT, _Traits>::size_type v12;
  std::__fs::filesystem::path::__string_view v13;
  int v14;
  std::__fs::filesystem::path::__string_view v15;
  char *v16;
  std::basic_string_view<_CharT, _Traits>::size_type v17;
  std::basic_string_view<_CharT, _Traits>::size_type v18;
  std::__fs::filesystem::path::__string_view v19;
  char *v20;
  std::basic_string_view<_CharT, _Traits>::size_type v21;
  std::basic_string_view<_CharT, _Traits>::size_type v22;
  std::__fs::filesystem::path::__string_view v23;
  int v24;
  int v25;
  std::__fs::filesystem::path::__string_view v26;
  char *v27;
  std::basic_string_view<_CharT, _Traits>::size_type v28;
  std::basic_string_view<_CharT, _Traits>::size_type v29;
  std::__fs::filesystem::path::__string_view v30;
  char *v31;
  std::basic_string_view<_CharT, _Traits>::size_type v32;
  std::basic_string_view<_CharT, _Traits>::size_type v33;
  std::__fs::filesystem::path::__string_view v34;
  int v35;
  __int16 v36;
  size_t data_low;
  std::string *v38;
  std::string *v39;
  int v40;
  int v41;
  std::__fs::filesystem::path::__string_view v42;
  char *v43;
  std::basic_string_view<_CharT, _Traits>::size_type v44;
  std::basic_string_view<_CharT, _Traits>::size_type v45;
  char *dli_fname;
  int dli_sname_high;
  std::__fs::filesystem::path::__string_view v48;
  char data;
  _BYTE *v50;
  std::basic_string_view<_CharT, _Traits>::size_type v51;
  std::basic_string_view<_CharT, _Traits>::size_type v52;
  std::__fs::filesystem::path::__string_view v53;
  std::__fs::filesystem::path::__string_view v54;
  _BYTE *v55;
  _BOOL4 v56;
  int dli_saddr_low;
  int v58;
  char *v59;
  std::basic_string_view<_CharT, _Traits>::size_type v60;
  std::basic_string_view<_CharT, _Traits>::size_type v61;
  std::__fs::filesystem::path::__string_view v62;
  int v63;
  int v64;
  std::string *v65;
  int v66;
  std::__fs::filesystem::path::__string_view v67;
  char *v68;
  std::basic_string_view<_CharT, _Traits>::size_type v69;
  std::basic_string_view<_CharT, _Traits>::size_type v70;
  void *dli_fbase;
  uint64_t v72;
  __int16 v73;
  std::string __p;
  unsigned __int8 v75;
  std::__fs::filesystem::path v76;
  unsigned __int8 v77;
  std::__fs::filesystem::path v78;
  char v79;
  std::__fs::filesystem::path v80;
  std::__fs::filesystem::path v81;
  std::__fs::filesystem::path v82;
  _DWORD v83[2];
  std::__fs::filesystem::path v84;
  _BYTE v85[15];
  char v86;
  Dl_info __dst;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (!dladdr(a1, &__dst))
    goto LABEL_10;
  memset(&__p, 0, sizeof(__p));
  v3 = (std::string *)(__dst.dli_fname - 1);
  do
  {
    v4 = v3->__r_.__value_.__s.__data_[1];
    v3 = (std::string *)((char *)v3 + 1);
  }
  while (v4);
  sub_20E8A9678(&__p, (std::string *)__dst.dli_fname, v3);
  std::__fs::filesystem::__weakly_canonical(&v76, (const std::__fs::filesystem::path *)&__p, 0);
  v78 = v76;
  memset(&v76, 0, sizeof(v76));
  v79 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v79)
    {
LABEL_10:
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 24) = 0;
      return;
    }
  }
  v5 = std::__fs::filesystem::path::__parent_path(&v78);
  if (v5.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v5.__size_ >= 0x17)
  {
    v7 = (v5.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5.__size_ | 7) != 0x17)
      v7 = v5.__size_ | 7;
    v8 = v7 + 1;
    p_dst = (char *)operator new(v7 + 1);
    __dst.dli_fbase = (void *)v5.__size_;
    __dst.dli_sname = (const char *)(v8 | 0x8000000000000000);
    __dst.dli_fname = p_dst;
    goto LABEL_14;
  }
  HIBYTE(__dst.dli_sname) = v5.__size_;
  p_dst = (char *)&__dst;
  if (v5.__size_)
LABEL_14:
    memmove(p_dst, v5.__data_, v5.__size_);
  p_dst[v5.__size_] = 0;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v9 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__p);
  if (v9.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v9.__size_ >= 0x17)
  {
    v11 = (v9.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9.__size_ | 7) != 0x17)
      v11 = v9.__size_ | 7;
    v12 = v11 + 1;
    v10 = (char *)operator new(v11 + 1);
    __dst.dli_fbase = (void *)v9.__size_;
    __dst.dli_sname = (const char *)(v12 | 0x8000000000000000);
    __dst.dli_fname = v10;
    goto LABEL_22;
  }
  HIBYTE(__dst.dli_sname) = v9.__size_;
  v10 = (char *)&__dst;
  if (v9.__size_)
LABEL_22:
    memmove(v10, v9.__data_, v9.__size_);
  v10[v9.__size_] = 0;
  *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v84.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_20E8A9678((std::string *)&__dst, (std::string *)".framework", (std::string *)"");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v13.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v13.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v13.__size_ = HIBYTE(__dst.dli_sname);
  else
    v13.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v14 = std::__fs::filesystem::path::__compare(&v84, v13);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if (v14)
        goto LABEL_32;
LABEL_38:
      v76.__pn_ = __p;
      v77 = 1;
      goto LABEL_92;
    }
  }
  else if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if (!v14)
    goto LABEL_38;
LABEL_32:
  v15 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&__p);
  if (v15.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v15.__size_ >= 0x17)
  {
    v17 = (v15.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15.__size_ | 7) != 0x17)
      v17 = v15.__size_ | 7;
    v18 = v17 + 1;
    v16 = (char *)operator new(v17 + 1);
    __dst.dli_fbase = (void *)v15.__size_;
    __dst.dli_sname = (const char *)(v18 | 0x8000000000000000);
    __dst.dli_fname = v16;
    goto LABEL_42;
  }
  HIBYTE(__dst.dli_sname) = v15.__size_;
  v16 = (char *)&__dst;
  if (v15.__size_)
LABEL_42:
    memmove(v16, v15.__data_, v15.__size_);
  v16[v15.__size_] = 0;
  *(_OWORD *)&v84.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v84.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v19 = std::__fs::filesystem::path::__filename(&v84);
  if (v19.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v19.__size_ >= 0x17)
  {
    v21 = (v19.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19.__size_ | 7) != 0x17)
      v21 = v19.__size_ | 7;
    v22 = v21 + 1;
    v20 = (char *)operator new(v21 + 1);
    __dst.dli_fbase = (void *)v19.__size_;
    __dst.dli_sname = (const char *)(v22 | 0x8000000000000000);
    __dst.dli_fname = v20;
    goto LABEL_50;
  }
  HIBYTE(__dst.dli_sname) = v19.__size_;
  v20 = (char *)&__dst;
  if (v19.__size_)
LABEL_50:
    memmove(v20, v19.__data_, v19.__size_);
  v20[v19.__size_] = 0;
  *(_OWORD *)&v82.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v82.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_20E8A9678((std::string *)&__dst, (std::string *)"Versions", (std::string *)"");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v23.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v23.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v23.__size_ = HIBYTE(__dst.dli_sname);
  else
    v23.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v24 = std::__fs::filesystem::path::__compare(&v82, v23);
  v25 = v24;
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if (v25)
      goto LABEL_88;
  }
  else if (v24)
  {
    goto LABEL_88;
  }
  v26 = std::__fs::filesystem::path::__parent_path(&v84);
  if (v26.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v26.__size_ >= 0x17)
  {
    v28 = (v26.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26.__size_ | 7) != 0x17)
      v28 = v26.__size_ | 7;
    v29 = v28 + 1;
    v27 = (char *)operator new(v28 + 1);
    __dst.dli_fbase = (void *)v26.__size_;
    __dst.dli_sname = (const char *)(v29 | 0x8000000000000000);
    __dst.dli_fname = v27;
    goto LABEL_68;
  }
  HIBYTE(__dst.dli_sname) = v26.__size_;
  v27 = (char *)&__dst;
  if (v26.__size_)
LABEL_68:
    memmove(v27, v26.__data_, v26.__size_);
  v27[v26.__size_] = 0;
  *(_OWORD *)&v81.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v81.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  v30 = std::__fs::filesystem::path::__extension(&v81);
  if (v30.__size_ > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v30.__size_ >= 0x17)
  {
    v32 = (v30.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30.__size_ | 7) != 0x17)
      v32 = v30.__size_ | 7;
    v33 = v32 + 1;
    v31 = (char *)operator new(v32 + 1);
    __dst.dli_fbase = (void *)v30.__size_;
    __dst.dli_sname = (const char *)(v33 | 0x8000000000000000);
    __dst.dli_fname = v31;
    goto LABEL_76;
  }
  HIBYTE(__dst.dli_sname) = v30.__size_;
  v31 = (char *)&__dst;
  if (v30.__size_)
LABEL_76:
    memmove(v31, v30.__data_, v30.__size_);
  v31[v30.__size_] = 0;
  *(_OWORD *)&v80.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.dli_fname;
  v80.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)__dst.dli_sname;
  memset(&__dst, 0, 24);
  sub_20E8A9678((std::string *)&__dst, (std::string *)".framework", (std::string *)"");
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v34.__data_ = (const std::string_view::value_type *)&__dst;
  else
    v34.__data_ = __dst.dli_fname;
  if (SHIBYTE(__dst.dli_sname) >= 0)
    v34.__size_ = HIBYTE(__dst.dli_sname);
  else
    v34.__size_ = (std::basic_string_view<_CharT, _Traits>::size_type)__dst.dli_fbase;
  v35 = std::__fs::filesystem::path::__compare(&v80, v34);
  if (SHIBYTE(__dst.dli_sname) < 0)
  {
    operator delete((void *)__dst.dli_fname);
    if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_85:
      if (v35)
        goto LABEL_86;
      goto LABEL_100;
    }
  }
  else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_85;
  }
  operator delete(v80.__pn_.__r_.__value_.__l.__data_);
  if (v35)
  {
LABEL_86:
    if (SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__pn_.__r_.__value_.__l.__data_);
LABEL_88:
    v76.__pn_.__r_.__value_.__s.__data_[0] = 0;
    v77 = 0;
    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
    goto LABEL_101;
  }
LABEL_100:
  v76 = v81;
  v77 = 1;
  if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_90;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v82.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_90:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_103;
  }
LABEL_102:
  operator delete(v84.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_91:
    if (!v77)
      goto LABEL_104;
    goto LABEL_92;
  }
LABEL_103:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v77)
    goto LABEL_104;
LABEL_92:
  std::__fs::filesystem::__status(&v76, 0);
  if (!LOBYTE(__dst.dli_fname)
    || LOBYTE(__dst.dli_fname) == 255
    || (std::__fs::filesystem::__status(&v76, 0),
        v36 = WORD2(__dst.dli_fname),
        std::__fs::filesystem::__status(&v76, 0),
        LOBYTE(__dst.dli_fname) != 2)
    || (v36 & 0x100) == 0)
  {
LABEL_104:
    LODWORD(v82.__pn_.__r_.__value_.__l.__data_) = 1026;
    if (!_NSGetExecutablePath((char *)&__dst, (uint32_t *)&v82))
    {
      memset(&v84, 0, sizeof(v84));
      v39 = (std::string *)&v86;
      do
      {
        v40 = v39->__r_.__value_.__s.__data_[1];
        v39 = (std::string *)((char *)v39 + 1);
      }
      while (v40);
      sub_20E8A9678(&v84.__pn_, (std::string *)&__dst, v39);
      __p = v84.__pn_;
      v75 = 1;
      goto LABEL_115;
    }
    data_low = LODWORD(v82.__pn_.__r_.__value_.__l.__data_);
    if (LODWORD(v82.__pn_.__r_.__value_.__l.__data_))
    {
      v38 = (std::string *)operator new(LODWORD(v82.__pn_.__r_.__value_.__l.__data_));
      bzero(v38, data_low);
    }
    else
    {
      v38 = 0;
    }
    if (_NSGetExecutablePath((char *)v38, (uint32_t *)&v82))
    {
      v41 = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v75 = 0;
      if (!v38)
        goto LABEL_114;
    }
    else
    {
      memset(&v84, 0, sizeof(v84));
      v65 = (std::string *)((char *)v38 - 1);
      do
      {
        v66 = v65->__r_.__value_.__s.__data_[1];
        v65 = (std::string *)((char *)v65 + 1);
      }
      while (v66);
      sub_20E8A9678(&v84.__pn_, v38, v65);
      __p = v84.__pn_;
      v41 = 1;
      v75 = 1;
      if (!v38)
      {
LABEL_114:
        if (!v41)
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 24) = 0;
          goto LABEL_209;
        }
LABEL_115:
        v42 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&__p);
        if (v42.__size_ > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v42.__size_ >= 0x17)
        {
          v44 = (v42.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42.__size_ | 7) != 0x17)
            v44 = v42.__size_ | 7;
          v45 = v44 + 1;
          v43 = (char *)operator new(v44 + 1);
          __dst.dli_fbase = (void *)v42.__size_;
          __dst.dli_sname = (const char *)(v45 | 0x8000000000000000);
          __dst.dli_fname = v43;
        }
        else
        {
          HIBYTE(__dst.dli_sname) = v42.__size_;
          v43 = (char *)&__dst;
          if (!v42.__size_)
          {
LABEL_123:
            v43[v42.__size_] = 0;
            dli_fname = (char *)__dst.dli_fname;
            v83[0] = __dst.dli_sname;
            *(_DWORD *)((char *)v83 + 3) = *(_DWORD *)((char *)&__dst.dli_sname + 3);
            dli_sname_high = SHIBYTE(__dst.dli_sname);
            LOBYTE(__dst.dli_fname) = 0;
            LOBYTE(__dst.dli_saddr) = 0;
            if (SHIBYTE(__dst.dli_sname) < 0)
            {
              sub_20E860C04(&__dst, dli_fname, (unint64_t)__dst.dli_fbase);
            }
            else
            {
              __dst.dli_fname = dli_fname;
              LODWORD(__dst.dli_sname) = v83[0];
              *(_DWORD *)((char *)&__dst.dli_sname + 3) = *(_DWORD *)((char *)v83 + 3);
            }
            LOBYTE(__dst.dli_saddr) = 1;
            v48 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
            if (v48.__size_ > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            data = (char)v48.__data_;
            if (v48.__size_ >= 0x17)
            {
              v51 = (v48.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v48.__size_ | 7) != 0x17)
                v51 = v48.__size_ | 7;
              v52 = v51 + 1;
              v50 = operator new(v51 + 1);
              v84.__pn_.__r_.__value_.__l.__size_ = v48.__size_;
              v84.__pn_.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
              v84.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
            }
            else
            {
              *((_BYTE *)&v84.__pn_.__r_.__value_.__s + 23) = v48.__size_;
              v50 = &v84;
              if (!v48.__size_)
              {
LABEL_134:
                v50[v48.__size_] = 0;
                v82 = v84;
                memset(&v81, 0, sizeof(v81));
                sub_20E8A9678(&v81.__pn_, (std::string *)".app", (std::string *)"");
                if ((v81.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53.__data_ = (const std::string_view::value_type *)&v81;
                else
                  v53.__data_ = (const std::string_view::value_type *)v81.__pn_.__r_.__value_.__r.__words[0];
                if ((v81.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53.__size_ = HIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]);
                else
                  v53.__size_ = v81.__pn_.__r_.__value_.__l.__size_;
                if (!std::__fs::filesystem::path::__compare(&v82, v53))
                {
                  v56 = 1;
                  if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_164;
                  goto LABEL_146;
                }
                v54 = std::__fs::filesystem::path::__extension((const std::__fs::filesystem::path *)&__dst);
                if (v54.__size_ > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                data = (char)v54.__data_;
                if (v54.__size_ >= 0x17)
                {
                  v60 = (v54.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v54.__size_ | 7) != 0x17)
                    v60 = v54.__size_ | 7;
                  v61 = v60 + 1;
                  v55 = operator new(v60 + 1);
                  v84.__pn_.__r_.__value_.__l.__size_ = v54.__size_;
                  v84.__pn_.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
                  v84.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
                }
                else
                {
                  *((_BYTE *)&v84.__pn_.__r_.__value_.__s + 23) = v54.__size_;
                  v55 = &v84;
                  if (!v54.__size_)
                  {
LABEL_155:
                    v55[v54.__size_] = 0;
                    v80 = v84;
                    memset(&v84, 0, sizeof(v84));
                    sub_20E8A9678(&v84.__pn_, (std::string *)".bundle", (std::string *)"");
                    if ((v84.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v62.__data_ = (const std::string_view::value_type *)&v84;
                    else
                      v62.__data_ = (const std::string_view::value_type *)v84.__pn_.__r_.__value_.__r.__words[0];
                    if ((v84.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v62.__size_ = HIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]);
                    else
                      v62.__size_ = v84.__pn_.__r_.__value_.__l.__size_;
                    v56 = std::__fs::filesystem::path::__compare(&v80, v62) == 0;
                    if (SHIBYTE(v84.__pn_.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v84.__pn_.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_163:
                        if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_164;
                        goto LABEL_146;
                      }
                    }
                    else if ((SHIBYTE(v80.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_163;
                    }
                    operator delete(v80.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v81.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_164:
                      if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_165:
                        dli_saddr_low = LOBYTE(__dst.dli_saddr);
                        if (v56)
                        {
LABEL_166:
                          if (dli_saddr_low)
                          {
                            v59 = (char *)__dst.dli_fname;
                            *(_QWORD *)v85 = __dst.dli_fbase;
                            *(_QWORD *)&v85[7] = *(void **)((char *)&__dst.dli_fbase + 7);
                            v58 = 1;
                            data = HIBYTE(__dst.dli_sname);
LABEL_168:
                            if ((dli_sname_high & 0x80000000) == 0)
                              goto LABEL_169;
                            goto LABEL_176;
                          }
                          goto LABEL_174;
                        }
LABEL_148:
                        v58 = 0;
                        v59 = 0;
                        if (!dli_saddr_low)
                          goto LABEL_175;
                        if ((SHIBYTE(__dst.dli_sname) & 0x80000000) == 0)
                          goto LABEL_168;
                        operator delete((void *)__dst.dli_fname);
LABEL_174:
                        v59 = 0;
                        v58 = 0;
LABEL_175:
                        if ((dli_sname_high & 0x80000000) == 0)
                        {
LABEL_169:
                          v63 = v77;
                          if (v77 == v58)
                            goto LABEL_170;
                          goto LABEL_177;
                        }
LABEL_176:
                        operator delete(dli_fname);
                        v63 = v77;
                        if (v77 == v58)
                        {
LABEL_170:
                          if (v63)
                          {
                            if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                            v76.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                            v76.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)v85;
                            *(std::string::size_type *)((char *)&v76.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v85[7];
                            *((_BYTE *)&v76.__pn_.__r_.__value_.__s + 23) = data;
                            goto LABEL_186;
                          }
LABEL_181:
                          if (data < 0)
                            v64 = v58;
                          else
                            v64 = 0;
                          if (v64 == 1)
                            operator delete(v59);
LABEL_186:
                          if (!v77)
                            goto LABEL_199;
                          goto LABEL_197;
                        }
LABEL_177:
                        if (!v63)
                        {
                          v76.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
                          v76.__pn_.__r_.__value_.__l.__size_ = *(_QWORD *)v85;
                          *(std::string::size_type *)((char *)&v76.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)&v85[7];
                          *((_BYTE *)&v76.__pn_.__r_.__value_.__s + 23) = data;
                          v77 = 1;
LABEL_197:
                          std::__fs::filesystem::__status(&v76, 0);
                          if (LOBYTE(__dst.dli_fname))
                          {
                            if (LOBYTE(__dst.dli_fname) != 255)
                            {
                              std::__fs::filesystem::__status(&v76, 0);
                              v73 = WORD2(__dst.dli_fname);
                              std::__fs::filesystem::__status(&v76, 0);
                              if (LOBYTE(__dst.dli_fname) == 2 && (v73 & 0x100) != 0)
                              {
                                *(_BYTE *)a2 = 0;
                                *(_BYTE *)(a2 + 24) = 0;
                                if (!v77)
                                {
LABEL_209:
                                  if (v75 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(__p.__r_.__value_.__l.__data_);
                                  if (v77 && SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                                  goto LABEL_215;
                                }
                                *(std::__fs::filesystem::path *)a2 = v76;
                                memset(&v76, 0, sizeof(v76));
LABEL_208:
                                *(_BYTE *)(a2 + 24) = 1;
                                goto LABEL_209;
                              }
                            }
                          }
LABEL_199:
                          v67 = std::__fs::filesystem::path::__parent_path((const std::__fs::filesystem::path *)&__p);
                          if (v67.__size_ > 0x7FFFFFFFFFFFFFF7)
                            sub_20E860B7C();
                          if (v67.__size_ >= 0x17)
                          {
                            v69 = (v67.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v67.__size_ | 7) != 0x17)
                              v69 = v67.__size_ | 7;
                            v70 = v69 + 1;
                            v68 = (char *)operator new(v69 + 1);
                            __dst.dli_fbase = (void *)v67.__size_;
                            __dst.dli_sname = (const char *)(v70 | 0x8000000000000000);
                            __dst.dli_fname = v68;
                          }
                          else
                          {
                            HIBYTE(__dst.dli_sname) = v67.__size_;
                            v68 = (char *)&__dst;
                            if (!v67.__size_)
                              goto LABEL_207;
                          }
                          memmove(v68, v67.__data_, v67.__size_);
LABEL_207:
                          v68[v67.__size_] = 0;
                          dli_fbase = __dst.dli_fbase;
                          v72 = *(uint64_t *)((char *)&__dst.dli_fbase + 7);
                          *(_QWORD *)a2 = __dst.dli_fname;
                          *(_QWORD *)(a2 + 8) = dli_fbase;
                          *(_QWORD *)(a2 + 15) = v72;
                          *(_BYTE *)(a2 + 23) = HIBYTE(__dst.dli_sname);
                          goto LABEL_208;
                        }
                        if (SHIBYTE(v76.__pn_.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v76.__pn_.__r_.__value_.__l.__data_);
                        v77 = 0;
                        goto LABEL_181;
                      }
LABEL_147:
                      operator delete(v82.__pn_.__r_.__value_.__l.__data_);
                      dli_saddr_low = LOBYTE(__dst.dli_saddr);
                      if (v56)
                        goto LABEL_166;
                      goto LABEL_148;
                    }
LABEL_146:
                    operator delete(v81.__pn_.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v82.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_165;
                    goto LABEL_147;
                  }
                }
                memmove(v55, v54.__data_, v54.__size_);
                goto LABEL_155;
              }
            }
            memmove(v50, v48.__data_, v48.__size_);
            goto LABEL_134;
          }
        }
        memmove(v43, v42.__data_, v42.__size_);
        goto LABEL_123;
      }
    }
    operator delete(v38);
    v41 = v75;
    goto LABEL_114;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (v77)
  {
    *(std::__fs::filesystem::path *)a2 = v76;
    *(_BYTE *)(a2 + 24) = 1;
  }
LABEL_215:
  if (v79)
  {
    if (SHIBYTE(v78.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_20E9E4058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void *v44;

  if (a44 < 0)
    operator delete(__p);
  if (v44)
    operator delete(v44);
  if (a19 && a18 < 0)
    operator delete(exception_object);
  if (a26)
  {
    if (a25 < 0)
    {
      operator delete(a20);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20E9E42D8(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

void sub_20E9E4320(const void *a1@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v4;
  char v5;

  sub_20E9E333C(a1, (uint64_t)__p);
  if (v5)
  {
    sub_20E9E43B0(a2, (uint64_t)__p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20E9E4394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9E43B0(std::string *a1, uint64_t a2)
{
  void **v4;
  const __CFAllocator *v5;
  CFIndex v6;
  const __CFString *v7;
  CFURLRef v8;
  CFBundleRef v9;
  const __CFString *ValueForInfoDictionaryKey;
  const __CFString *v11;
  void *__p[2];
  uint64_t v13;
  void *__dst[2];
  uint64_t v15;
  const __CFString *v16;

  if (!*(_BYTE *)(a2 + 24))
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v15 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)__dst = *(_OWORD *)a2;
    if (v15 >= 0)
      v4 = __dst;
    else
      v4 = (void **)__dst[0];
LABEL_10:
    *(_OWORD *)__p = *(_OWORD *)a2;
    v13 = *(_QWORD *)(a2 + 16);
    goto LABEL_11;
  }
  v4 = __dst;
  sub_20E860C04(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  if (v15 < 0)
    v4 = (void **)__dst[0];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    goto LABEL_10;
  sub_20E860C04(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_11:
  v5 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  if (v13 >= 0)
    v6 = HIBYTE(v13);
  else
    v6 = (CFIndex)__p[1];
  v7 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v4, v6, 0x8000100u, 0);
  v16 = v7;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_19:
    operator delete(__dst[0]);
    if (!v7)
      goto LABEL_20;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_19;
LABEL_16:
  if (!v7)
  {
LABEL_20:
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Apple/src/BundlePath.cpp", 66, (uint64_t)"cf_path_str", 11, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
  }
LABEL_21:
  v8 = CFURLCreateWithFileSystemPath(v5, v7, kCFURLPOSIXPathStyle, 1u);
  __dst[0] = v8;
  if (!v8
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Apple/src/BundlePath.cpp", 70, (uint64_t)"cf_path_url", 11, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v9 = CFBundleCreate(v5, v8);
  __p[0] = v9;
  if (!v9
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Apple/src/BundlePath.cpp", 73, (uint64_t)"cf_current_bundle", 17, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v9, (CFStringRef)*MEMORY[0x24BDBD288]);
  v11 = ValueForInfoDictionaryKey;
  if (ValueForInfoDictionaryKey)
    CFRetain(ValueForInfoDictionaryKey);
  sub_20E9E6620(v11, a1);
  if (v11)
    CFRelease(v11);
  __p[0] = 0;
  if (v9)
    CFRelease(v9);
  __dst[0] = 0;
  if (v8)
    CFRelease(v8);
  v16 = 0;
  if (v7)
    CFRelease(v7);
}

void sub_20E9E465C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9E46F8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  char v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254A6D7B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254A6D7B8))
  {
    sub_20E9E322C((uint64_t)__p);
    sub_20E9E43B0((std::string *)&xmmword_254A6D798, (uint64_t)__p);
    if (v5 && v4 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))sub_20E9E485C, &xmmword_254A6D798, &dword_20E81F000);
    __cxa_guard_release(&qword_254A6D7B8);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (byte_254A6D7B0)
  {
    if (byte_254A6D7AF < 0)
    {
      sub_20E860C04((_BYTE *)a1, (void *)xmmword_254A6D798, *((unint64_t *)&xmmword_254A6D798 + 1));
    }
    else
    {
      *(_OWORD *)a1 = xmmword_254A6D798;
      *(_QWORD *)(a1 + 16) = unk_254A6D7A8;
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void sub_20E9E47F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      __cxa_guard_abort(&qword_254A6D7B8);
      _Unwind_Resume(a1);
    }
  }
  __cxa_guard_abort(&qword_254A6D7B8);
  _Unwind_Resume(a1);
}

void sub_20E9E4838(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9E485C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_BYTE *)(result + 24))
  {
    if (*(char *)(result + 23) < 0)
    {
      operator delete(*(void **)result);
      return v1;
    }
  }
  return result;
}

const void **sub_20E9E48A4(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_20E9E48D8(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_20E9E490C(const void **a1)
{
  const void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_20E9E4944()
{
  JUMPOUT(0x212BC6398);
}

void sub_20E9E4958(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20E9E6620(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20E9E49B0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20E9E49C8(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20E9E6620(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20E9E4A20(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20E9E4A38(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20E9E6620(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20E9E4A90(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20E9E4AA8(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20E9E6620(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20E9E4B00(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20E9E4B18(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20E9E6620(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20E9E4B70(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20E9E4B88(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20E9E6620(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20E9E4BE0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20E9E4BF8(uint64_t a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;
  std::string::value_type v4;
  std::string::size_type v5;
  __int16 v6;
  char v7;
  std::string v8;
  std::string::value_type v9;
  const __CFString *v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (const __CFString *)MGGetStringAnswer();
  v10 = v2;
  if (!v2)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v3 = v2;
  sub_20E9E6620(v2, &v8);
  CFRelease(v3);
  v4 = v9;
  if (!v9)
  {
LABEL_5:
    v7 = 10;
    v6 = 28271;
    v5 = 0x69746375646F7250;
    goto LABEL_6;
  }
  v5 = v8.__r_.__value_.__r.__words[0];
  v6 = v8.__r_.__value_.__r.__words[1];
  v4 = v8.__r_.__value_.__s.__data_[10];
  v10 = *(const __CFString **)((char *)&v8.__r_.__value_.__r.__words[1] + 3);
  v11 = *(_DWORD *)((char *)&v8.__r_.__value_.__r.__words[2] + 3);
  v7 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
LABEL_6:
  *(_QWORD *)a1 = v5;
  *(_WORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 10) = v4;
  *(_QWORD *)(a1 + 11) = v10;
  *(_DWORD *)(a1 + 19) = v11;
  *(_BYTE *)(a1 + 23) = v7;
  *(_BYTE *)(a1 + 24) = 1;
}

void sub_20E9E4CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9E4D04()
{
  return MGGetSInt64Answer();
}

uint64_t sub_20E9E4D28()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_20E9E4D94()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_20E9E4E00()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

uint64_t sub_20E9E4E6C()
{
  return MGGetSInt32Answer() | 0x100000000;
}

void sub_20E9E4E94(std::string *a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = (const __CFString *)MGGetStringAnswer();
  if (v2)
  {
    v3 = v2;
    sub_20E9E6620(v2, a1);
    CFRelease(v3);
  }
  else
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_20E9E4EEC(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20E9E4F04(uint64_t a1@<X8>)
{
  const __CFString *v2;
  const __CFString *v3;
  std::string *p_p;
  std::string::size_type size;
  __int128 v6;
  uint64_t v7;
  std::string __p;
  char v9;

  v2 = (const __CFString *)MGGetStringAnswer();
  *(_QWORD *)&v6 = v2;
  if (v2 && (v3 = v2, sub_20E9E6620(v2, &__p), CFRelease(v3), v9))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_20E9E507C((char *)p_p, size, ":", 1, 0, (uint64_t)&v6);
    *(_OWORD *)a1 = v6;
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
    if (v9)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void sub_20E9E4FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9E5010()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  CFRelease(v0);
  return (v1 == (const void *)*MEMORY[0x24BDBD270]) | 0x100u;
}

void sub_20E9E507C(char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  __int128 *v25;
  unint64_t v26;
  __int128 v27;
  char v28;
  char *v29;
  void *__p[2];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v10 = a1;
    v11 = 0;
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    v29 = a1;
    __p[0] = a1;
    v12 = &a1[a2];
    while (1)
    {
      v15 = v12;
      if (v10 != v12)
      {
        if (a4)
        {
          v15 = v10;
LABEL_10:
          v16 = a4;
          v17 = a3;
          while (*v17 != *v15)
          {
            ++v17;
            if (!--v16)
            {
              if (++v15 != v12)
                goto LABEL_10;
              goto LABEL_14;
            }
          }
        }
        else
        {
LABEL_14:
          v15 = v12;
        }
      }
      v29 = v15;
      if (a5 != 1 && v15 == v10)
        goto LABEL_6;
      if ((unint64_t)v11 >= *(_QWORD *)(a6 + 16))
      {
        v11 = sub_20E9E5318((void **)a6, (uint64_t *)__p, &v29);
        goto LABEL_5;
      }
      v18 = v15 - v10;
      if ((unint64_t)(v15 - v10) >= 0x7FFFFFFFFFFFFFF8)
        sub_20E860B7C();
      if (v18 > 0x16)
      {
        v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v21 = v18 | 7;
        v22 = v21 + 1;
        v19 = (char *)operator new(v21 + 1);
        *((_QWORD *)v11 + 1) = v18;
        *((_QWORD *)v11 + 2) = v22 | 0x8000000000000000;
        *(_QWORD *)v11 = v19;
        v20 = v15 - v10;
        if (v15 == v10)
        {
LABEL_3:
          v13 = v19;
          goto LABEL_4;
        }
      }
      else
      {
        v11[23] = v18;
        v19 = v11;
        v20 = v15 - v10;
        if (v15 == v10)
          goto LABEL_3;
      }
      if (v20 < 0x20 || (unint64_t)(v19 - v10) < 0x20)
      {
        v23 = v10;
        v13 = v19;
      }
      else
      {
        v23 = &v10[v20 & 0xFFFFFFFFFFFFFFE0];
        v13 = &v19[v20 & 0xFFFFFFFFFFFFFFE0];
        v24 = v19 + 16;
        v25 = (__int128 *)(v10 + 16);
        v26 = v20 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 += 2;
          v25 += 2;
          v26 -= 32;
        }
        while (v26);
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_4;
      }
      do
      {
        v28 = *v23++;
        *v13++ = v28;
      }
      while (v23 != v15);
LABEL_4:
      *v13 = 0;
      v11 += 24;
      *(_QWORD *)(a6 + 8) = v11;
LABEL_5:
      *(_QWORD *)(a6 + 8) = v11;
      v10 = v29;
LABEL_6:
      __p[0] = v10 + 1;
      if (v10++ == v12)
        return;
    }
  }
  if (a5)
  {
    v31 = 0;
    LOBYTE(__p[0]) = 0;
    sub_20E877C80((_QWORD *)a6, (uint64_t)__p, 1uLL);
    if (v31 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
  }
}

void sub_20E9E52D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20E9E5318(void **a1, uint64_t *a2, char **a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  _OWORD *v16;
  __int128 *v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  void *v25;
  void **v26;
  void **v27;
  __int128 v28;
  void **v29;
  char *v31;
  char *v32;
  char *v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  v31 = v10;
  v32 = v10;
  v33 = &v9[24 * v8];
  v11 = *a2;
  v12 = *a3;
  v13 = (unint64_t)&(*a3)[-v11];
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v13 <= 0x16)
  {
    v10[23] = v13;
    if ((char *)v11 != v12)
      goto LABEL_14;
LABEL_23:
    v15 = v10;
    goto LABEL_26;
  }
  v20 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v20 = v13 | 7;
  v21 = v20 + 1;
  v22 = (char *)operator new(v20 + 1);
  *((_QWORD *)v10 + 1) = v13;
  *((_QWORD *)v10 + 2) = v21 | 0x8000000000000000;
  *(_QWORD *)v10 = v22;
  v10 = v22;
  if ((char *)v11 == v12)
    goto LABEL_23;
LABEL_14:
  if (v13 < 0x20 || (unint64_t)&v10[-v11] < 0x20)
  {
    v14 = (char *)v11;
    v15 = v10;
    do
    {
LABEL_25:
      v23 = *v14++;
      *v15++ = v23;
    }
    while (v14 != v12);
    goto LABEL_26;
  }
  v14 = (char *)(v11 + (v13 & 0xFFFFFFFFFFFFFFE0));
  v15 = &v10[v13 & 0xFFFFFFFFFFFFFFE0];
  v16 = v10 + 16;
  v17 = (__int128 *)(v11 + 16);
  v18 = v13 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v19 = *v17;
    *(v16 - 1) = *(v17 - 1);
    *v16 = v19;
    v16 += 2;
    v17 += 2;
    v18 -= 32;
  }
  while (v18);
  if (v13 != (v13 & 0x7FFFFFFFFFFFFFE0))
    goto LABEL_25;
LABEL_26:
  *v15 = 0;
  v24 = v31;
  v25 = v32 + 24;
  v26 = (void **)*a1;
  v27 = (void **)a1[1];
  if (v27 == *a1)
  {
    *a1 = v31;
    a1[1] = v25;
    a1[2] = v33;
  }
  else
  {
    do
    {
      v28 = *(_OWORD *)(v27 - 3);
      *((_QWORD *)v24 - 1) = *(v27 - 1);
      *(_OWORD *)(v24 - 24) = v28;
      v24 -= 24;
      *(v27 - 2) = 0;
      *(v27 - 1) = 0;
      *(v27 - 3) = 0;
      v27 -= 3;
    }
    while (v27 != v26);
    v27 = (void **)*a1;
    v29 = (void **)a1[1];
    *a1 = v24;
    a1[1] = v25;
    a1[2] = v33;
    while (v29 != v27)
    {
      if (*((char *)v29 - 1) < 0)
        operator delete(*(v29 - 3));
      v29 -= 3;
    }
  }
  if (v27)
    operator delete(v27);
  return v32 + 24;
}

void sub_20E9E5568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9E557C(uint64_t a1@<X0>, char *a2@<X8>)
{
  void *v4[2];
  uint64_t v5;
  char v6;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  char v11;
  void *v12[2];
  uint64_t v13;
  __int128 v14;
  char v15;
  void *v16[2];
  uint64_t v17;
  char v18;
  void *v19[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  char v27;

  v27 = 13;
  strcpy((char *)&v26, "not_available");
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 24))(&v21);
  if (v23)
  {
    v24 = v21;
    v25 = v22;
    v22 = 0;
    v21 = 0uLL;
  }
  else
  {
    HIBYTE(v25) = 13;
    strcpy((char *)&v24, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(v16, a1);
  if (v18)
  {
    *(_OWORD *)v19 = *(_OWORD *)v16;
    v20 = v17;
    v16[1] = 0;
    v17 = 0;
    v16[0] = 0;
  }
  else
  {
    HIBYTE(v20) = 13;
    strcpy((char *)v19, "not_available");
  }
  v15 = 13;
  strcpy((char *)&v14, "not_available");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(v9, a1);
  if (v11)
  {
    *(_OWORD *)v12 = *(_OWORD *)v9;
    v13 = v10;
    v9[1] = 0;
    v10 = 0;
    v9[0] = 0;
  }
  else
  {
    HIBYTE(v13) = 13;
    strcpy((char *)v12, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(v4, a1);
  if (v6)
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v8 = v5;
    v4[1] = 0;
    v5 = 0;
    v4[0] = 0;
  }
  else
  {
    HIBYTE(v8) = 13;
    strcpy((char *)__p, "not_available");
  }
  sub_20E9E58A4(a2, &v26, &v24, (__int128 *)v19, &v14, (__int128 *)v12, (__int128 *)__p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (v6 && SHIBYTE(v5) < 0)
    operator delete(v4[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if (v18 && SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if (v23)
  {
    if (SHIBYTE(v22) < 0)
      operator delete((void *)v21);
  }
}

void sub_20E9E57E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  uint64_t v51;

  if (a21 < 0)
    operator delete(__p);
  if (a15 && a14 < 0)
    operator delete(a9);
  if (a35 < 0)
    operator delete(a30);
  if (a29 && a28 < 0)
    operator delete(a23);
  if (a51 < 0)
    operator delete(a46);
  if (a45 && a44 < 0)
    operator delete(a39);
  if (*(char *)(v51 - 89) < 0)
    operator delete(*(void **)(v51 - 112));
  if (*(_BYTE *)(v51 - 120))
  {
    if (*(char *)(v51 - 121) < 0)
      operator delete(*(void **)(v51 - 144));
  }
  _Unwind_Resume(exception_object);
}

char *sub_20E9E58A4(char *__dst, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  __int128 v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v14 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v13 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v13;
    v14 = __dst + 24;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v15 = *a3;
      *((_QWORD *)v14 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v14 = v15;
      goto LABEL_6;
    }
  }
  sub_20E860C04(v14, *(void **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    sub_20E860C04(__dst + 48, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v16 = *a4;
    *((_QWORD *)__dst + 8) = *((_QWORD *)a4 + 2);
    *((_OWORD *)__dst + 3) = v16;
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_20E860C04(__dst + 72, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v17 = *a5;
    *((_QWORD *)__dst + 11) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(__dst + 72) = v17;
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_20E860C04(__dst + 96, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v18 = *a6;
    *((_QWORD *)__dst + 14) = *((_QWORD *)a6 + 2);
    *((_OWORD *)__dst + 6) = v18;
  }
  v19 = __dst + 120;
  if (*((char *)a7 + 23) < 0)
  {
    sub_20E860C04(v19, *(void **)a7, *((_QWORD *)a7 + 1));
  }
  else
  {
    v20 = *a7;
    *((_QWORD *)__dst + 17) = *((_QWORD *)a7 + 2);
    *(_OWORD *)v19 = v20;
  }
  return __dst;
}

void sub_20E9E59FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;

  if (*(char *)(v1 + 119) < 0)
  {
    operator delete(*v5);
    if ((*(char *)(v1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 71) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_20E9E5AC0(char *a1, uint64_t a2)
{
  void *v5[2];
  uint64_t v6;
  char v7;
  void *__p[2];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  void *v13[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;

  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&v30, a2);
  if (v32)
  {
    v33 = v30;
    v34 = v31;
    v31 = 0;
    v30 = 0uLL;
  }
  else
  {
    HIBYTE(v34) = 13;
    strcpy((char *)&v33, "not_available");
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v25, a2);
  if (v27)
  {
    v28 = v25;
    v29 = v26;
    v26 = 0;
    v25 = 0uLL;
  }
  else
  {
    HIBYTE(v29) = 13;
    strcpy((char *)&v28, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 32))(v20, a2);
  if (v22)
  {
    v23 = *(_OWORD *)v20;
    v24 = v21;
    v20[1] = 0;
    v21 = 0;
    v20[0] = 0;
  }
  else
  {
    HIBYTE(v24) = 13;
    strcpy((char *)&v23, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(v15, a2);
  if (v17)
  {
    *(_OWORD *)v18 = *(_OWORD *)v15;
    v19 = v16;
    v15[1] = 0;
    v16 = 0;
    v15[0] = 0;
  }
  else
  {
    HIBYTE(v19) = 13;
    strcpy((char *)v18, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(v10, a2);
  if (v12)
  {
    *(_OWORD *)v13 = *(_OWORD *)v10;
    v14 = v11;
    v10[1] = 0;
    v11 = 0;
    v10[0] = 0;
  }
  else
  {
    HIBYTE(v14) = 13;
    strcpy((char *)v13, "not_available");
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(v5, a2);
  if (v7)
  {
    *(_OWORD *)__p = *(_OWORD *)v5;
    v9 = v6;
    v5[1] = 0;
    v6 = 0;
    v5[0] = 0;
  }
  else
  {
    HIBYTE(v9) = 13;
    strcpy((char *)__p, "not_available");
  }
  sub_20E9E58A4(a1, &v33, &v28, &v23, (__int128 *)v18, (__int128 *)v13, (__int128 *)__p);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  if (v7 && SHIBYTE(v6) < 0)
    operator delete(v5[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (v12 && SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  if (v22 && SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)v28);
  if (v27 && SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (v32 && SHIBYTE(v31) < 0)
    operator delete((void *)v30);
  return a1;
}

void sub_20E9E5E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  uint64_t v57;

  if (a21 < 0)
    operator delete(__p);
  if (a15 && a14 < 0)
    operator delete(a9);
  if (a35 < 0)
    operator delete(a30);
  if (a29 && a28 < 0)
    operator delete(a23);
  if (a49 < 0)
    operator delete(a44);
  if (a43 && a42 < 0)
    operator delete(a37);
  if (*(char *)(v57 - 169) < 0)
    operator delete(*(void **)(v57 - 192));
  if (a57 && a56 < 0)
    operator delete(a51);
  if (*(char *)(v57 - 105) < 0)
    operator delete(*(void **)(v57 - 128));
  if (*(_BYTE *)(v57 - 136) && *(char *)(v57 - 137) < 0)
    operator delete(*(void **)(v57 - 160));
  if (*(char *)(v57 - 41) < 0)
    operator delete(*(void **)(v57 - 64));
  if (*(_BYTE *)(v57 - 72))
  {
    if (*(char *)(v57 - 73) < 0)
      operator delete(*(void **)(v57 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9E5F54(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_12;
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)a1);
  return a1;
}

char *sub_20E9E600C()
{
  unsigned __int8 v0;
  uint64_t (**v2)();

  v0 = atomic_load((unsigned __int8 *)&qword_254A6D8F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254A6D8F8))
    return byte_254A6D868;
  v2 = &off_24C9B6C08;
  sub_20E9E557C((uint64_t)&v2, byte_254A6D868);
  __cxa_atexit((void (*)(void *))sub_20E9E5F54, byte_254A6D868, &dword_20E81F000);
  __cxa_guard_release(&qword_254A6D8F8);
  return byte_254A6D868;
}

void sub_20E9E60B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254A6D8F8);
  _Unwind_Resume(a1);
}

void sub_20E9E60C8(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  _BOOL4 v6;
  int v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *__p[2];
  unsigned __int8 v17;
  char v18;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 32))(__p);
  if (!v18)
  {
    a2[23] = 7;
    strcpy(a2, "Unknown");
    return;
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v6 = (v4 & 0xFF00000000) == 0 || (_DWORD)v4 != 1;
  v7 = (char)v17;
  if ((v17 & 0x80u) == 0)
    v8 = v17;
  else
    v8 = (size_t)__p[1];
  if (v6)
    v9 = 0;
  else
    v9 = 5;
  v10 = v8 + v9;
  if (v8 + v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  if (v10 > 0x16)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v15 = (char *)operator new(v13 + 1);
    *((_QWORD *)a2 + 1) = v10;
    *((_QWORD *)a2 + 2) = v14 | 0x8000000000000000;
    *(_QWORD *)a2 = v15;
    a2 = v15;
    if (!v8)
      goto LABEL_21;
    goto LABEL_17;
  }
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  a2[23] = v10;
  if (v8)
  {
LABEL_17:
    if (v7 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    memmove(a2, v11, v8);
  }
LABEL_21:
  v12 = &a2[v8];
  if (!v6)
  {
    v12[4] = 77;
    *(_DWORD *)v12 = 1230196831;
  }
  v12[v9] = 0;
  if (v7 < 0)
  {
    if (v18)
      operator delete(__p[0]);
  }
}

void sub_20E9E6240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20E9E6268(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(unsigned __int16 (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (v1 <= 0x100)
    LOBYTE(v1) = 0;
  return v1 != 0;
}

BOOL sub_20E9E629C(uint64_t a1)
{
  unsigned __int16 v1;
  BOOL v2;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((_BYTE)v1)
    v2 = 0;
  else
    v2 = v1 >= 0x100u;
  return !v2;
}

uint64_t sub_20E9E62CC(uint64_t a1, const void ***a2, unsigned __int8 **a3)
{
  const void **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  size_t v7;
  const void *v8;
  const void *v9;
  int v10;
  const void **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t result;
  uint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  unsigned __int8 *v20;
  const void **v21;
  unsigned __int8 **v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  const void **v28;
  unsigned __int8 **v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  const void **v35;
  unsigned __int8 **v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  unsigned __int8 *v41;
  const void **v42;
  unsigned __int8 **v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  BOOL v55;

  v4 = *a2;
  v5 = *a3;
  v6 = *((unsigned __int8 *)*a2 + 23);
  v7 = (size_t)(*a2)[1];
  if ((v6 & 0x80u) == 0)
    v8 = (const void *)*((unsigned __int8 *)*a2 + 23);
  else
    v8 = (*a2)[1];
  v9 = (const void *)v5[23];
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = (const void *)*((_QWORD *)v5 + 1);
  if (v8 != v9)
    return 0;
  v12 = a2[1];
  v13 = a3[1];
  if (v10 >= 0)
    v14 = v5;
  else
    v14 = *(unsigned __int8 **)v5;
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v4, v14, v7))
      return 0;
  }
  else if ((_DWORD)v6)
  {
    while (*(unsigned __int8 *)v4 == *v14)
    {
      v4 = (const void **)((char *)v4 + 1);
      ++v14;
      if (!--v6)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  v16 = *((unsigned __int8 *)v12 + 23);
  if ((v16 & 0x80u) == 0)
    v17 = (const void *)*((unsigned __int8 *)v12 + 23);
  else
    v17 = v12[1];
  v18 = (const void *)v13[23];
  v19 = (char)v18;
  if ((char)v18 < 0)
    v18 = (const void *)*((_QWORD *)v13 + 1);
  if (v17 != v18)
    return 0;
  if (v19 >= 0)
    v20 = v13;
  else
    v20 = *(unsigned __int8 **)v13;
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*v12, v20, (size_t)v12[1]))
      return 0;
  }
  else if (*((_BYTE *)v12 + 23))
  {
    while (*(unsigned __int8 *)v12 == *v20)
    {
      v12 = (const void **)((char *)v12 + 1);
      ++v20;
      if (!--v16)
        goto LABEL_33;
    }
    return 0;
  }
LABEL_33:
  v21 = a2[2];
  v22 = (unsigned __int8 **)a3[2];
  v23 = *((unsigned __int8 *)v21 + 23);
  if ((v23 & 0x80u) == 0)
    v24 = (unsigned __int8 *)*((unsigned __int8 *)v21 + 23);
  else
    v24 = (unsigned __int8 *)v21[1];
  v25 = (unsigned __int8 *)*((unsigned __int8 *)v22 + 23);
  v26 = (char)v25;
  if ((char)v25 < 0)
    v25 = v22[1];
  if (v24 != v25)
    return 0;
  if (v26 >= 0)
    v27 = a3[2];
  else
    v27 = *v22;
  if ((v23 & 0x80) != 0)
  {
    if (memcmp(*v21, v27, (size_t)v21[1]))
      return 0;
  }
  else if (*((_BYTE *)v21 + 23))
  {
    while (*(unsigned __int8 *)v21 == *v27)
    {
      v21 = (const void **)((char *)v21 + 1);
      ++v27;
      if (!--v23)
        goto LABEL_48;
    }
    return 0;
  }
LABEL_48:
  v28 = a2[3];
  v29 = (unsigned __int8 **)a3[3];
  v30 = *((unsigned __int8 *)v28 + 23);
  if ((v30 & 0x80u) == 0)
    v31 = (unsigned __int8 *)*((unsigned __int8 *)v28 + 23);
  else
    v31 = (unsigned __int8 *)v28[1];
  v32 = (unsigned __int8 *)*((unsigned __int8 *)v29 + 23);
  v33 = (char)v32;
  if ((char)v32 < 0)
    v32 = v29[1];
  if (v31 != v32)
    return 0;
  if (v33 >= 0)
    v34 = a3[3];
  else
    v34 = *v29;
  if ((v30 & 0x80) != 0)
  {
    if (memcmp(*v28, v34, (size_t)v28[1]))
      return 0;
  }
  else if (*((_BYTE *)v28 + 23))
  {
    while (*(unsigned __int8 *)v28 == *v34)
    {
      v28 = (const void **)((char *)v28 + 1);
      ++v34;
      if (!--v30)
        goto LABEL_63;
    }
    return 0;
  }
LABEL_63:
  v35 = a2[4];
  v36 = (unsigned __int8 **)a3[4];
  v37 = *((unsigned __int8 *)v35 + 23);
  if ((v37 & 0x80u) == 0)
    v38 = (unsigned __int8 *)*((unsigned __int8 *)v35 + 23);
  else
    v38 = (unsigned __int8 *)v35[1];
  v39 = (unsigned __int8 *)*((unsigned __int8 *)v36 + 23);
  v40 = (char)v39;
  if ((char)v39 < 0)
    v39 = v36[1];
  if (v38 != v39)
    return 0;
  if (v40 >= 0)
    v41 = a3[4];
  else
    v41 = *v36;
  if ((v37 & 0x80) != 0)
  {
    if (!memcmp(*v35, v41, (size_t)v35[1]))
      goto LABEL_78;
    return 0;
  }
  if (*((_BYTE *)v35 + 23))
  {
    while (*(unsigned __int8 *)v35 == *v41)
    {
      v35 = (const void **)((char *)v35 + 1);
      ++v41;
      if (!--v37)
        goto LABEL_78;
    }
    return 0;
  }
LABEL_78:
  v42 = a2[5];
  v43 = (unsigned __int8 **)a3[5];
  v44 = *((unsigned __int8 *)v42 + 23);
  if ((v44 & 0x80u) == 0)
    v45 = (unsigned __int8 *)*((unsigned __int8 *)v42 + 23);
  else
    v45 = (unsigned __int8 *)v42[1];
  v46 = (unsigned __int8 *)*((unsigned __int8 *)v43 + 23);
  v47 = (char)v46;
  if ((char)v46 < 0)
    v46 = v43[1];
  if (v45 != v46)
    return 0;
  if (v47 >= 0)
    v48 = a3[5];
  else
    v48 = *v43;
  if ((v44 & 0x80) != 0)
    return memcmp(*v42, v48, (size_t)v42[1]) == 0;
  if (!*((_BYTE *)v42 + 23))
    return 1;
  v49 = v44 - 1;
  do
  {
    v51 = *(unsigned __int8 *)v42;
    v42 = (const void **)((char *)v42 + 1);
    v50 = v51;
    v53 = *v48++;
    v52 = v53;
    v55 = v49-- != 0;
    result = v50 == v52;
  }
  while (v50 == v52 && v55);
  return result;
}

const __CFString *sub_20E9E6620@<X0>(const __CFString *result@<X0>, std::string *a2@<X8>)
{
  const __CFString *v3;
  CFIndex v4;
  CFIndex v5;
  std::string *v6;
  std::string v7;
  CFIndex usedBufLen;
  CFRange v9;
  CFRange v10;

  if (!result)
    goto LABEL_8;
  v3 = result;
  result = (const __CFString *)CFStringGetLength(result);
  if (result)
  {
    v4 = (CFIndex)result;
    usedBufLen = 0;
    v9.location = 0;
    v9.length = (CFIndex)result;
    result = (const __CFString *)CFStringGetBytes(v3, v9, 0x8000100u, 0, 0, 0, 0, &usedBufLen);
    if ((uint64_t)result > 0)
    {
      memset(&v7, 0, sizeof(v7));
      if (usedBufLen)
      {
        std::string::append(&v7, usedBufLen, 0);
        v5 = usedBufLen;
        if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v6 = &v7;
        else
          v6 = (std::string *)v7.__r_.__value_.__r.__words[0];
      }
      else
      {
        v5 = 0;
        v6 = &v7;
      }
      v10.location = 0;
      v10.length = v4;
      result = (const __CFString *)CFStringGetBytes(v3, v10, 0x8000100u, 0, 0, (UInt8 *)v6, v5, 0);
      *a2 = v7;
      goto LABEL_12;
    }
LABEL_8:
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    return result;
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
LABEL_12:
  a2[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void sub_20E9E6744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20E9E6768(_DWORD ***a1)
{
  return sub_20E9E6784(**a1, (char *)(*a1)[1]);
}

void sub_20E9E6774(uint64_t a1, uint64_t a2)
{
  sub_20E9E6874((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E9E6784(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B6D28[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E9E6874(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B6D28[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E9E6A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E9E6A6C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E9E6B64((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E9E6B5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E9E6B64(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E9E6D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9E6D74(uint64_t a1, char *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v9;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  sub_20E9E6E30(a2);
  if ((v9 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v7 = v9;
  else
    v7 = (uint64_t)__p[1];
  sub_20E86A980(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20E9E6E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9E6E30(char *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B6FA0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B6F40[v3])(v5, v2);
  return result;
}

void sub_20E9E6F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9E6F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20E9E6F58(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  unsigned __int8 v9;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  sub_20E9E7014(a2);
  if ((v9 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v7 = v9;
  else
    v7 = (uint64_t)__p[1];
  sub_20E86A980(v5, (uint64_t)v6, v7);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20E9E6FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9E7014(unsigned __int8 *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B6FA0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B6F40[v3])(v5, v2);
  return result;
}

void sub_20E9E7100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9E7118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20E9E713C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10[2];
  unsigned __int8 v11;
  std::string __p;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)&__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  v6 = sub_20E86A980(v5, (uint64_t)&__p, 1);
  if (*(char *)(a2 + 23) < 0)
    sub_20E860C04(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_210236E50(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v11 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (void **)v10[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (uint64_t)v10[1];
  v9 = sub_20E86A980(v6, (uint64_t)v7, v8);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_20E86A980(v9, (uint64_t)&__p, 1);
  if ((char)v11 < 0)
    operator delete(v10[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20E9E7260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9E7290(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p[2];
  char v9;

  v2 = *a2;
  if (*a2)
  {
    v4 = (unsigned __int8 *)a2[1];
    v5 = *(_QWORD *)(a1 + 40);
    do
    {
      if (v5)
      {
        v6 = *(_QWORD **)(a1 + 24);
        LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
        sub_20E86A980(v6, (uint64_t)__p, 1);
      }
      v7 = *(_QWORD **)(a1 + 24);
      __p[0] = (void *)*v4;
      v9 = 1;
      sub_20E86A980(v7, (uint64_t)__p, 1);
      if (v9 < 0)
        operator delete(__p[0]);
      v5 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 40) = v5;
      ++v4;
      --v2;
    }
    while (v2);
  }
}

void sub_20E9E7338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9E7354(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;

  if (*a2)
  {
    v2 = result;
    v3 = a2[1];
    v4 = *(_QWORD *)(result + 40);
    v5 = 2 * *a2;
    do
    {
      if (v4)
      {
        v6 = *(_QWORD **)(v2 + 24);
        v7 = *(_BYTE *)(v2 + 32);
        sub_20E86A980(v6, (uint64_t)&v7, 1);
      }
      v3 += 2;
      result = std::ostream::operator<<();
      v4 = *(_QWORD *)(v2 + 40) + 1;
      *(_QWORD *)(v2 + 40) = v4;
      v5 -= 2;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_20E9E73D8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;

  if (*a2)
  {
    v2 = result;
    v3 = a2[1];
    v4 = *(_QWORD *)(result + 40);
    v5 = 4 * *a2;
    do
    {
      if (v4)
      {
        v6 = *(_QWORD **)(v2 + 24);
        v7 = *(_BYTE *)(v2 + 32);
        sub_20E86A980(v6, (uint64_t)&v7, 1);
      }
      *(_QWORD *)(*(_QWORD *)(v2 + 24) + *(_QWORD *)(**(_QWORD **)(v2 + 24) - 24) + 16) = 9;
      v3 += 4;
      result = std::ostream::operator<<();
      v4 = *(_QWORD *)(v2 + 40) + 1;
      *(_QWORD *)(v2 + 40) = v4;
      v5 -= 4;
    }
    while (v5);
  }
  return result;
}

void sub_20E9E7470(uint64_t a1, std::string::size_type *a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16[2];
  unsigned __int8 v17;
  std::string __dst;
  std::string __p;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)&__p, 1);
  }
  v5 = *a2;
  if (*a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = (const void *)a2[1];
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_10:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  v11 = sub_20E86A980(v10, (uint64_t)&__p, 1);
  v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  sub_210236E50(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v17 & 0x80u) == 0)
    v13 = v16;
  else
    v13 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v14 = v17;
  else
    v14 = (uint64_t)v16[1];
  v15 = sub_20E86A980(v11, (uint64_t)v13, v14);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_20E86A980(v15, (uint64_t)&__p, 1);
  if ((char)v17 < 0)
  {
    operator delete(v16[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_26:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_24;
  }
  if (v12 < 0)
    goto LABEL_26;
LABEL_24:
  ++*(_QWORD *)(a1 + 40);
}

void sub_20E9E7628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  char v26;

  if (v26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9E7678(uint64_t a1, std::string::size_type *a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16[2];
  unsigned __int8 v17;
  std::string __dst;
  std::string __p;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)&__p, 1);
  }
  v5 = *a2;
  if (*a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = (const void *)a2[1];
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_10:
    memmove(p_dst, v6, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = 34;
  v11 = sub_20E86A980(v10, (uint64_t)&__p, 1);
  v12 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20E860C04(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  sub_210236E50(&__p, "\"", 1, "\"\"", 2uLL, 0, 0, (uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v17 & 0x80u) == 0)
    v13 = v16;
  else
    v13 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v14 = v17;
  else
    v14 = (uint64_t)v16[1];
  v15 = sub_20E86A980(v11, (uint64_t)v13, v14);
  __p.__r_.__value_.__s.__data_[0] = 34;
  sub_20E86A980(v15, (uint64_t)&__p, 1);
  if ((char)v17 < 0)
  {
    operator delete(v16[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_24;
LABEL_26:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_24;
  }
  if (v12 < 0)
    goto LABEL_26;
LABEL_24:
  ++*(_QWORD *)(a1 + 40);
}

void sub_20E9E7830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  char v26;

  if (v26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9E7880(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  const char *p_p;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&__p);
    if ((v23 & 0x80u) == 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v14 = strtol(p_p, 0, 10);
    v15 = 127;
    if (v14 < 127)
      v15 = v14;
    if (v15 <= -128)
      LODWORD(v15) = -128;
    *a2 = v15;
    if (!(_DWORD)v15)
    {
      v16 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
      v17 = (v23 & 0x80u) == 0 ? v23 : v22;
      if (v17)
      {
        v18 = MEMORY[0x24BDAC740];
        while (1)
        {
          v19 = *(char *)v16;
          if (!((v19 & 0x80000000) != 0 ? __maskrune(v19, 0x500uLL) : *(_DWORD *)(v18 + 4 * v19 + 60) & 0x500))
            break;
          v16 = (void **)((char *)v16 + 1);
          if (!--v17)
            goto LABEL_35;
        }
        *(_BYTE *)(a1 + 130) = 1;
      }
    }
LABEL_35:
    if ((char)v23 < 0)
      operator delete(__p);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(__p) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = __p;
    sub_20E9E9DB8(v5, (uint64_t)&__p);
    v7 = v23;
    if ((v23 & 0x80u) == 0)
      v8 = (unsigned __int8 *)&__p;
    else
      v8 = (unsigned __int8 *)__p;
    if ((v23 & 0x80u) != 0)
      v7 = v22;
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *v8++;
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if (((char)v23 & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(__p);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E7AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9E7AC8(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  const char *p_p;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  void *__p;
  uint64_t v22;
  unsigned __int8 v23;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&__p);
    if ((v23 & 0x80u) == 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v14 = strtol(p_p, 0, 10);
    v15 = 255;
    if (v14 < 255)
      v15 = v14;
    *a2 = v15 & ~(v15 >> 63);
    if (v15 <= 0)
    {
      v16 = (v23 & 0x80u) == 0 ? &__p : (void **)__p;
      v17 = (v23 & 0x80u) == 0 ? v23 : v22;
      if (v17)
      {
        v18 = MEMORY[0x24BDAC740];
        while (1)
        {
          v19 = *(char *)v16;
          if (!((v19 & 0x80000000) != 0 ? __maskrune(v19, 0x500uLL) : *(_DWORD *)(v18 + 4 * v19 + 60) & 0x500))
            break;
          v16 = (void **)((char *)v16 + 1);
          if (!--v17)
            goto LABEL_33;
        }
        *(_BYTE *)(a1 + 130) = 1;
      }
    }
LABEL_33:
    if ((char)v23 < 0)
      operator delete(__p);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(__p) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = __p;
    sub_20E9E9DB8(v5, (uint64_t)&__p);
    v7 = v23;
    if ((v23 & 0x80u) == 0)
      v8 = (unsigned __int8 *)&__p;
    else
      v8 = (unsigned __int8 *)__p;
    if ((v23 & 0x80u) != 0)
      v7 = v22;
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *v8++;
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if (((char)v23 & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if (((char)v23 & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(__p);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E7CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20E9E7D10(uint64_t a1, _WORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&v21);
    sub_20E8C2268((uint64_t)v14, &v21, 24);
    MEMORY[0x212BC5C18](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20E9E9DB8(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E7F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E863784((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20E9E7F64(uint64_t a1, _WORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&v21);
    sub_20E8C2268((uint64_t)v14, &v21, 24);
    MEMORY[0x212BC5C24](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20E9E9DB8(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E818C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E863784((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20E9E81B8(uint64_t a1, _DWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&v21);
    sub_20E8C2268((uint64_t)v14, &v21, 24);
    MEMORY[0x212BC5BF4](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20E9E9DB8(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E83E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E863784((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20E9E840C(uint64_t a1, _DWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&v21);
    sub_20E8C2268((uint64_t)v14, &v21, 24);
    MEMORY[0x212BC5C00](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20E9E9DB8(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E8634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E863784((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20E9E8660(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&v21);
    sub_20E8C2268((uint64_t)v14, &v21, 24);
    MEMORY[0x212BC5C30](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20E9E9DB8(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E8888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E863784((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20E9E88B4(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&v21);
    sub_20E8C2268((uint64_t)v14, &v21, 24);
    MEMORY[0x212BC5C3C](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20E9E9DB8(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E8ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E863784((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20E9E8B08(uint64_t a1, _WORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  _QWORD *v13;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[56];
  void *__p;
  char v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  double v28;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&v26);
    sub_20E8C2268((uint64_t)v19, &v26, 24);
    v28 = 0.0;
    v13 = (_QWORD *)MEMORY[0x212BC5BDC](v19, &v28);
    if ((*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) == 0)
    {
      _S0 = v28;
      __asm { FCVT            H0, S0 }
      *a2 = LOWORD(_S0);
    }
    if ((v22[*((_QWORD *)v19[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v19[0] = *(void **)MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v19 + *((_QWORD *)v19[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v20 = v18;
    v21 = MEMORY[0x24BEDB848] + 16;
    if (v24 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v25);
    if (v27 < 0)
      operator delete((void *)v26);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v19[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v19[0]);
    sub_20E9E9DB8(v5, (uint64_t)v19);
    v7 = (char *)HIBYTE(v20);
    if (v20 >= 0)
      v8 = v19;
    else
      v8 = (void **)v19[0];
    if (v20 < 0)
      v7 = (char *)v19[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v20) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v19[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E8D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_20E9E8D84(uint64_t a1, _DWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&v21);
    sub_20E8C2268((uint64_t)v14, &v21, 24);
    MEMORY[0x212BC5BE8](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20E9E9DB8(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E8FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E863784((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20E9E8FD8(uint64_t a1, _QWORD *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  void **v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[56];
  void *__p;
  char v19;
  uint64_t v20;
  __int128 v21;
  char v22;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    sub_20E9E9FEC(a1, (uint64_t)&v21);
    sub_20E8C2268((uint64_t)v14, &v21, 24);
    MEMORY[0x212BC5BDC](v14, a2);
    if ((v17[*((_QWORD *)v14[0] - 3)] & 5) != 0)
      *(_BYTE *)(a1 + 130) = 1;
    v14[0] = *(void **)MEMORY[0x24BEDB7F0];
    v13 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
    *(void **)((char *)v14 + *((_QWORD *)v14[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
    v15 = v13;
    v16 = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212BC6290](&v20);
    if (v22 < 0)
      operator delete((void *)v21);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    LOBYTE(v14[0]) = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = LOBYTE(v14[0]);
    sub_20E9E9DB8(v5, (uint64_t)v14);
    v7 = (char *)HIBYTE(v15);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 < 0)
      v7 = (char *)v14[1];
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = *(unsigned __int8 *)v8;
        v8 = (void **)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v14[0]);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E9200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20E863784((uint64_t)&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void sub_20E9E922C(uint64_t a1, _BYTE *a2)
{
  int v4;
  const char *v5;
  int v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  BOOL v11;
  std::string *p_p;
  int v14;
  std::string::size_type v15;
  std::string::size_type size;
  std::string::value_type v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::value_type v20;
  std::string::size_type v21;
  std::string *v22;
  unsigned int v23;
  int v24;
  _BOOL4 v25;
  std::string __p;
  std::string v27;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
  {
    *a2 = 0;
    *(_BYTE *)(a1 + 129) = 1;
    goto LABEL_26;
  }
  v4 = std::istream::peek();
  if (v4 != -1 && !sub_20E9E9EC8(a1, v4))
  {
    p_p = &__p;
    sub_20E9E9FEC(a1, (uint64_t)&__p);
    v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v15 = __p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    memset(&v27, 0, sizeof(v27));
    std::string::reserve(&v27, size);
    if (v14 < 0)
      p_p = (std::string *)v15;
    for (; size; --size)
    {
      v17 = __tolower(p_p->__r_.__value_.__s.__data_[0]);
      std::string::push_back(&v27, v17);
      p_p = (std::string *)((char *)p_p + 1);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    else
      v18 = v27.__r_.__value_.__l.__size_;
    if (v18)
    {
      if (v18 == 1)
      {
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v27;
        else
          v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
        if (v19->__r_.__value_.__s.__data_[0] == 48)
          goto LABEL_68;
      }
      else if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v19 = &v27;
      }
      else
      {
        v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      memset(&__p, 0, sizeof(__p));
      std::string::reserve(&__p, v18);
      do
      {
        v20 = __tolower(v19->__r_.__value_.__s.__data_[0]);
        std::string::push_back(&__p, v20);
        v19 = (std::string *)((char *)v19 + 1);
        --v18;
      }
      while (v18);
      v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = __p.__r_.__value_.__l.__size_;
      if (v21 == 5)
      {
        v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &__p;
        v23 = bswap32(v22->__r_.__value_.__l.__data_);
        if (v23 == 1717660787)
        {
          v24 = v22->__r_.__value_.__s.__data_[4] - 101;
        }
        else if (v23 < 0x66616C73)
        {
          v24 = -1;
        }
        else
        {
          v24 = 1;
        }
        v25 = v24 == 0;
      }
      else
      {
        v25 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v25)
      {
        *a2 = 1;
        if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_71;
      }
    }
LABEL_68:
    *a2 = 0;
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_26;
LABEL_71:
    operator delete(v27.__r_.__value_.__l.__data_);
    goto LABEL_26;
  }
  *a2 = 0;
  if (std::istream::peek() != -1)
  {
    v27.__r_.__value_.__s.__data_[0] = 0;
    std::istream::read();
    v5 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = *(const char **)v5;
    v6 = v27.__r_.__value_.__s.__data_[0];
    sub_20E9E9DB8(v5, (uint64_t)&v27);
    v7 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v27;
    else
      v8 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = v27.__r_.__value_.__l.__size_;
    if (v7)
    {
      v9 = v7 - 1;
      do
      {
        v10 = v8->__r_.__value_.__s.__data_[0];
        v8 = (std::string *)((char *)v8 + 1);
        v11 = v10 == v6;
      }
      while (v10 != v6 && v9-- != 0);
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else
    {
      v11 = 0;
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        *(_BYTE *)(a1 + 131) = v11;
        goto LABEL_24;
      }
    }
    operator delete(v27.__r_.__value_.__l.__data_);
    goto LABEL_23;
  }
LABEL_24:
  *(_BYTE *)(a1 + 130) = 1;
LABEL_26:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9E9530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9E9588(uint64_t a1, uint64_t *a2, uint64_t a3, __int16 a4, __int16 a5, __int16 a6)
{
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  char v10;
  void *__p;
  char v13;
  void *v14;
  char v15;

  *(_QWORD *)a1 = off_24C9B6CB8;
  v7 = *a2;
  *(_QWORD *)a1 = &off_24C9B6D50;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = &unk_24C9B6EA0;
  *(_QWORD *)(a1 + 24) = a3;
  if ((a4 & 0xFF00) != 0)
    v8 = a4;
  else
    v8 = 44;
  *(_BYTE *)(a1 + 32) = v8;
  if ((a5 & 0xFF00) != 0)
    v9 = a5;
  else
    v9 = 10;
  *(_BYTE *)(a1 + 33) = v9;
  if ((a6 & 0xFF00) != 0)
    v10 = a6;
  else
    v10 = 124;
  *(_BYTE *)(a1 + 34) = v10;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v15 = 1;
  LOWORD(v14) = v8;
  v13 = 1;
  LOWORD(__p) = v9;
  sub_20E9E96AC((char *)&v14, (char *)&__p, v10);
  if (v13 < 0)
  {
    operator delete(__p);
    if ((v15 & 0x80000000) == 0)
      return a1;
  }
  else if ((v15 & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v14);
  return a1;
}

void sub_20E9E9670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *sub_20E9E96AC(char *a1, char *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  void *v8;
  void **v9;
  char *v10;
  unint64_t v11;
  char v12;
  void *v13;
  void **v14;
  char *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  size_t v21;
  char v22;
  char *v23;
  char *v24;
  char *v25;
  size_t v26;
  char *v27;
  int v28;
  char *v29;
  size_t v30;
  char v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  size_t v36;
  size_t v37;
  char *result;
  char *v39;
  std::logic_error *v40;
  std::logic_error *v41;
  std::logic_error *exception;
  std::logic_error *v43;
  std::logic_error *v44;
  std::logic_error *v45;
  int __c;
  std::string v47;
  void *__dst[2];
  uint64_t v49;
  void *__p[2];
  uint64_t v51;
  unsigned __int8 v52;
  const char *v53;

  v52 = a3;
  if (a1[23] < 0)
  {
    sub_20E860C04(__p, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v51 = *((_QWORD *)a1 + 2);
  }
  v6 = HIBYTE(v51);
  v7 = HIBYTE(v51);
  v8 = __p[1];
  if (v51 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v51 >= 0)
    v10 = (char *)HIBYTE(v51);
  else
    v10 = (char *)__p[1];
  if (v10)
  {
    do
    {
      sub_20E9EB068(*(char *)v9, (uint64_t)"separator");
      v9 = (void **)((char *)v9 + 1);
      --v10;
    }
    while (v10);
    v6 = HIBYTE(v51);
    v8 = __p[1];
    v7 = HIBYTE(v51);
  }
  if (v7 < 0)
    v6 = (unint64_t)v8;
  if (!v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Must at least have one separator.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((a2[23] & 0x80000000) == 0)
  {
LABEL_18:
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v49 = *((_QWORD *)a2 + 2);
    goto LABEL_21;
  }
  sub_20E860C04(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
LABEL_21:
  v11 = HIBYTE(v49);
  v12 = HIBYTE(v49);
  v13 = __dst[1];
  if (v49 >= 0)
    v14 = __dst;
  else
    v14 = (void **)__dst[0];
  if (v49 >= 0)
    v15 = (char *)HIBYTE(v49);
  else
    v15 = (char *)__dst[1];
  if (v15)
  {
    do
    {
      sub_20E9EB068(*(char *)v14, (uint64_t)"separator");
      v14 = (void **)((char *)v14 + 1);
      --v15;
    }
    while (v15);
    v11 = HIBYTE(v49);
    v13 = __dst[1];
    v12 = HIBYTE(v49);
  }
  if (v12 < 0)
    v11 = (unint64_t)v13;
  if (!v11)
  {
    v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v43, "Must at least have one separator.");
    v43->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v43, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  if (v12 < 0)
    operator delete(__dst[0]);
  sub_20E9EB068(a3, (uint64_t)"field end marker");
  v16 = a1[23];
  __c = a3;
  if (a1[23] < 0)
  {
    v17 = *(char **)a1;
    v18 = *((_QWORD *)a1 + 1);
    v19 = a2[23];
    if (!v18)
      goto LABEL_50;
  }
  else
  {
    v17 = a1;
    v18 = a1[23];
    v19 = a2[23];
    if (!a1[23])
      goto LABEL_50;
  }
  if ((v19 & 0x80u) == 0)
    v20 = a2;
  else
    v20 = *(char **)a2;
  if ((v19 & 0x80u) == 0)
    v21 = v19;
  else
    v21 = *((_QWORD *)a2 + 1);
  do
  {
    v22 = *v17;
    v23 = (char *)memchr(v20, *v17, v21);
    if (v23)
      v24 = v23;
    else
      v24 = &v20[v21];
    if (v24 - v20 != v21)
    {
      v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      LOBYTE(v53) = v22;
      sub_20E9EB9F4((uint64_t)&v47, (unsigned __int8 *)&v53);
      std::logic_error::logic_error(v40, &v47);
      v40->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v40, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    ++v17;
    --v18;
  }
  while (v18);
LABEL_50:
  if ((v19 & 0x80) == 0)
  {
    v25 = a2;
    v26 = v19;
    v27 = *(char **)a1;
    v28 = (char)v16;
    if (v19)
      goto LABEL_52;
LABEL_65:
    if (v28 >= 0)
      v29 = a1;
    else
      v29 = v27;
    if (v28 >= 0)
      v30 = v16;
    else
      v30 = *((_QWORD *)a1 + 1);
    goto LABEL_71;
  }
  v25 = *(char **)a2;
  v26 = *((_QWORD *)a2 + 1);
  v27 = *(char **)a1;
  v28 = (char)v16;
  if (!v26)
    goto LABEL_65;
LABEL_52:
  if (v28 >= 0)
    v29 = a1;
  else
    v29 = v27;
  if (v28 >= 0)
    v30 = v16;
  else
    v30 = *((_QWORD *)a1 + 1);
  do
  {
    v31 = *v25;
    v32 = (char *)memchr(v29, *v25, v30);
    if (v32)
      v33 = v32;
    else
      v33 = &v29[v30];
    if (v33 - v29 != v30)
    {
      v41 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      LOBYTE(v53) = v31;
      sub_20E9EB9F4((uint64_t)&v47, (unsigned __int8 *)&v53);
      std::logic_error::logic_error(v41, &v47);
      v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(v41, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    ++v25;
    --v26;
  }
  while (v26);
LABEL_71:
  v34 = (char *)memchr(v29, __c, v30);
  if (v34)
    v35 = v34;
  else
    v35 = &v29[v30];
  if (v35 - v29 != v30)
  {
    v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v53 = "field";
    sub_20E9EC6B8((uint64_t)&v47, &v52, (const char *)&v53);
    std::logic_error::logic_error(v44, &v47);
    v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v44, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v36 = *((_QWORD *)a2 + 1);
  if ((v19 & 0x80u) == 0)
  {
    v37 = v19;
  }
  else
  {
    a2 = *(char **)a2;
    v37 = v36;
  }
  result = (char *)memchr(a2, __c, v37);
  if (result)
    v39 = result;
  else
    v39 = &a2[v37];
  if (v39 - a2 != v37)
  {
    v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v53 = "row";
    sub_20E9EC6B8((uint64_t)&v47, &v52, (const char *)&v53);
    std::logic_error::logic_error(v45, &v47);
    v45->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(v45, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_20E9E9BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  int v29;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v29)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v28);
  _Unwind_Resume(exception_object);
}

void sub_20E9E9CBC()
{
  JUMPOUT(0x212BC6398);
}

void sub_20E9E9CD0()
{
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9E9CE8(uint64_t a1)
{
  char v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  char v6;
  char v7;

  v2 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v6 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v3, (uint64_t)&v6, 1);
  }
  v4 = *(_QWORD **)(a1 + 24);
  v7 = v2;
  result = sub_20E86A980(v4, (uint64_t)&v7, 1);
  ++*(_QWORD *)(a1 + 40);
  return result;
}

_QWORD *sub_20E9E9D50(uint64_t a1)
{
  char v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  char v6;
  char v7;

  v2 = *(_BYTE *)(a1 + 18);
  if (*(_QWORD *)(a1 + 24))
  {
    v3 = *(_QWORD **)(a1 + 8);
    v6 = *(_BYTE *)(a1 + 16);
    sub_20E86A980(v3, (uint64_t)&v6, 1);
  }
  v4 = *(_QWORD **)(a1 + 8);
  v7 = v2;
  result = sub_20E86A980(v4, (uint64_t)&v7, 1);
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20E9E9DB8(const char *a1@<X0>, uint64_t a2@<X8>)
{
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 __dst;
  unint64_t v11;

  v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v11 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_9:
    memcpy(p_dst, a1, v5);
    *((_BYTE *)p_dst + v5) = 0;
    if ((SHIBYTE(v11) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
  HIBYTE(v11) = v4;
  p_dst = &__dst;
  if (v4)
    goto LABEL_9;
  LOBYTE(__dst) = 0;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(_QWORD *)(a2 + 16) = v11;
    return;
  }
LABEL_10:
  v9 = (void *)__dst;
  sub_20E860C04((_BYTE *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));
  operator delete(v9);
}

void sub_20E9E9EB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9E9EC8(uint64_t a1, unsigned __int8 a2)
{
  const char *v3;
  int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  _BOOL8 v11;
  const char *v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  int v17;
  void **v19;
  uint64_t v20;
  unsigned __int8 v21;

  v3 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v3 = *(const char **)v3;
  v4 = a2;
  sub_20E9E9DB8(v3, (uint64_t)&v19);
  v5 = v21;
  if ((v21 & 0x80u) == 0)
    v6 = (void **)&v19;
  else
    v6 = v19;
  if ((v21 & 0x80u) != 0)
    v5 = v20;
  if (!v5)
  {
    v9 = 0;
    if (((char)v21 & 0x80000000) == 0)
      goto LABEL_16;
LABEL_20:
    operator delete(v19);
    if (v9)
      return 1;
    goto LABEL_21;
  }
  v7 = v5 - 1;
  do
  {
    v8 = *(unsigned __int8 *)v6;
    v6 = (void **)((char *)v6 + 1);
    v9 = v8 == v4;
  }
  while (v8 != v4 && v7-- != 0);
  if ((char)v21 < 0)
    goto LABEL_20;
LABEL_16:
  if (v9)
    return 1;
LABEL_21:
  v13 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v13 = *(const char **)v13;
  sub_20E9E9DB8(v13, (uint64_t)&v19);
  v14 = v21;
  if ((v21 & 0x80u) == 0)
    v15 = (void **)&v19;
  else
    v15 = v19;
  if ((v21 & 0x80u) != 0)
    v14 = v20;
  if (v14)
  {
    v16 = v14 - 1;
    do
    {
      v17 = *(unsigned __int8 *)v15;
      v15 = (void **)((char *)v15 + 1);
      v11 = v17 == v4;
    }
    while (v17 != v4 && v16-- != 0);
    if (((char)v21 & 0x80000000) == 0)
      return v11;
  }
  else
  {
    v11 = 0;
    if (((char)v21 & 0x80000000) == 0)
      return v11;
  }
  operator delete(v19);
  return v11;
}

void sub_20E9E9FEC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  char v6;
  unsigned __int8 v7;
  const char *v8;
  unint64_t v9;
  void **v10;
  char *v11;
  int v12;
  BOOL v13;
  void *v15[2];
  unsigned __int8 v16;

  v4 = (std::string *)(a1 + 136);
  std::string::reserve((std::string *)(a1 + 136), 0x20uLL);
  if (*(char *)(a1 + 159) < 0)
  {
    v5 = *(std::string **)(a1 + 136);
    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 159) = 0;
    v5 = v4;
  }
  v5->__r_.__value_.__s.__data_[0] = 0;
  LOBYTE(v15[0]) = 0;
  std::istream::read();
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) == 0)
  {
    v6 = 0;
    v7 = v15[0];
    while (1)
    {
      if ((v6 & 1) != 0)
      {
        if (v7 == 34)
        {
          if (std::istream::peek() != 34)
          {
            v6 = 0;
            goto LABEL_8;
          }
          std::istream::seekg();
          v7 = 34;
        }
      }
      else
      {
        if (sub_20E9E9EC8(a1, v7))
        {
          v8 = (const char *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0)
            v8 = *(const char **)v8;
          sub_20E9E9DB8(v8, (uint64_t)v15);
          v9 = v16;
          if ((v16 & 0x80u) == 0)
            v10 = v15;
          else
            v10 = (void **)v15[0];
          if ((v16 & 0x80u) != 0)
            v9 = (unint64_t)v15[1];
          if (v9)
          {
            v11 = (char *)(v9 - 1);
            do
            {
              v12 = *(unsigned __int8 *)v10;
              v10 = (void **)((char *)v10 + 1);
              v13 = v12 == v7;
            }
            while (v12 != v7 && v11-- != 0);
            if (((char)v16 & 0x80000000) == 0)
              goto LABEL_35;
LABEL_38:
            operator delete(v15[0]);
            *(_BYTE *)(a1 + 131) = v13;
            if ((*(char *)(a1 + 159) & 0x80000000) == 0)
              goto LABEL_19;
          }
          else
          {
            v13 = 0;
            if ((char)v16 < 0)
              goto LABEL_38;
LABEL_35:
            *(_BYTE *)(a1 + 131) = v13;
            if ((*(char *)(a1 + 159) & 0x80000000) == 0)
              goto LABEL_19;
          }
LABEL_36:
          sub_20E860C04((_BYTE *)a2, *(void **)(a1 + 136), *(_QWORD *)(a1 + 144));
          return;
        }
        if (v7 == 34)
        {
          v6 = 1;
          goto LABEL_8;
        }
      }
      std::string::push_back(v4, v7);
LABEL_8:
      LOBYTE(v15[0]) = 0;
      std::istream::read();
      v7 = 0;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
      {
        if ((v6 & 1) != 0)
          *(_BYTE *)(a1 + 129) = 1;
        break;
      }
    }
  }
  if (*(char *)(a1 + 159) < 0)
    goto LABEL_36;
LABEL_19:
  *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
}

void sub_20E9EA1EC(uint64_t a1, uint64_t a2)
{
  size_t v4;
  const void *p_src;
  std::runtime_error *exception;
  void *__src;
  size_t v8;
  unsigned __int8 v9;

  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
  {
    *(_BYTE *)(a1 + 132) = 1;
    return;
  }
  sub_20E9E9FEC(a1, (uint64_t)&__src);
  if ((char)v9 < 0)
  {
    v4 = v8;
    if (v8 == *(_QWORD *)a2)
    {
      p_src = __src;
      if (!v8 || __src)
      {
        if (!v8)
        {
LABEL_15:
          operator delete(__src);
          goto LABEL_16;
        }
      }
      else
      {
        if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
        {
          abort();
        }
        p_src = 0;
      }
      goto LABEL_14;
    }
LABEL_17:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "loaded binary data size does not match given data blob size");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v4 = v9;
  if (*(_QWORD *)a2 != v9)
    goto LABEL_17;
  if (!v9)
    goto LABEL_16;
  p_src = &__src;
LABEL_14:
  memmove(*(void **)(a2 + 8), p_src, v4);
  if ((char)v9 < 0)
    goto LABEL_15;
LABEL_16:
  ++*(_QWORD *)(a1 + 104);
}

void sub_20E9EA344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E9EA378(uint64_t a1)
{
  char v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  char v6;
  char v7;

  v2 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v3 = *(_QWORD **)(a1 + 24);
    v6 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v3, (uint64_t)&v6, 1);
  }
  v4 = *(_QWORD **)(a1 + 24);
  v7 = v2;
  result = sub_20E86A980(v4, (uint64_t)&v7, 1);
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA3E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

void sub_20E9EA440(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *__p[2];
  char v7;

  if (*(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD **)(a1 + 24);
    LOBYTE(__p[0]) = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v4, (uint64_t)__p, 1);
  }
  v5 = *(_QWORD **)(a1 + 24);
  __p[0] = (void *)*a2;
  v7 = 1;
  sub_20E86A980(v5, (uint64_t)__p, 1);
  if (v7 < 0)
    operator delete(__p[0]);
  ++*(_QWORD *)(a1 + 40);
}

void sub_20E9EA4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9EA4E0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA540(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA5A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA600(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA668(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA6C8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA728(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA788(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA7E8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 9;
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA85C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD **)(a1 + 24);
    v4 = *(_BYTE *)(a1 + 32);
    sub_20E86A980(v2, (uint64_t)&v4, 1);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + *(_QWORD *)(**(_QWORD **)(a1 + 24) - 24) + 16) = 17;
  result = std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  return result;
}

uint64_t sub_20E9EA8D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    do
    {
      if (v6)
      {
        v7 = *(_QWORD **)(v5 + 24);
        v8 = *(_BYTE *)(v5 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      ++a3;
      result = std::ostream::operator<<();
      v6 = *(_QWORD *)(v5 + 40) + 1;
      *(_QWORD *)(v5 + 40) = v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_20E9EA954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3[2];

  v3[0] = a2;
  v3[1] = a3;
  sub_20E9E7290(a1, v3);
}

uint64_t sub_20E9EA978(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 2 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      a3 += 2;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E9EA9F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 4 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      a3 += 4;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E9EAA78(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E9EAAF8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_20E9EAB78(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_20E9E6F58(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

void sub_20E9EABC0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;

  if (a2)
  {
    v4 = a2;
    do
    {
      sub_20E9E6D74(a1, a3++);
      --v4;
    }
    while (v4);
  }
}

uint64_t sub_20E9EAC08(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 2 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      a3 += 2;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E9EAC88(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 4 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      a3 += 4;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E9EAD08(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E9EAD88(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E9EAE08(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 4 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 24) + *(_QWORD *)(**(_QWORD **)(v4 + 24) - 24) + 16) = 9;
      a3 += 4;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E9EAE9C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;

  if (a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v6 = 8 * a2;
    do
    {
      if (v5)
      {
        v7 = *(_QWORD **)(v4 + 24);
        v8 = *(_BYTE *)(v4 + 32);
        sub_20E86A980(v7, (uint64_t)&v8, 1);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 24) + *(_QWORD *)(**(_QWORD **)(v4 + 24) - 24) + 16) = 17;
      a3 += 8;
      result = std::ostream::operator<<();
      v5 = *(_QWORD *)(v4 + 40) + 1;
      *(_QWORD *)(v4 + 40) = v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

void sub_20E9EAF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    v5 = 24 * a2;
    do
    {
      sub_20E9E713C(a1, a3);
      a3 += 24;
      v5 -= 24;
    }
    while (v5);
  }
}

_QWORD *sub_20E9EAF84(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  char v3;

  v1 = result;
  if (result[5])
  {
    v2 = (_QWORD *)result[3];
    v3 = *((_BYTE *)v1 + 32);
    result = sub_20E86A980(v2, (uint64_t)&v3, 1);
    ++v1[5];
  }
  else
  {
    result[5] = 1;
  }
  return result;
}

_QWORD *sub_20E9EAFEC(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;

  v2 = *a2;
  if (*a2)
  {
    v3 = result;
    v4 = result[5];
    do
    {
      while (v4)
      {
        v5 = (_QWORD *)v3[3];
        v6 = *((_BYTE *)v3 + 32);
        result = sub_20E86A980(v5, (uint64_t)&v6, 1);
        v4 = v3[5] + 1;
        v3[5] = v4;
        if (!--v2)
          return result;
      }
      v4 = 1;
      v3[5] = 1;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_20E9EB068(uint64_t result, uint64_t a2)
{
  std::logic_error *exception;
  std::string v3;
  uint64_t v4;

  v4 = a2;
  if ((_DWORD)result == 34)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E9EB12C((uint64_t)&v3, (const char *)&v4);
    std::logic_error::logic_error(exception, &v3);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C9AAA18, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_20E9EB0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_20E9EB12C(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20E9EB2F8(v4, "Invalid .csv ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C9B6F70[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_11:
    sub_20E877AB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_11;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B6F58[v5])(&v11, v4);
LABEL_6:
  v6 = (_QWORD **)v4;
  v7 = "'\"'";
  v8 = v4;
  v9 = "'\"'";
  v10 = "'\"'";
  if (v5 == -1)
    sub_20E877AB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B6F88[v5])(&v11, v4);
  if (v5 == -1)
    sub_20E877AB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9B6FA0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9B6F40[v5])(&v6, v4);
  return result;
}

void sub_20E9EB2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EB2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EB2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EB2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E9EB2F8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B6F40[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20E9EB3E8(_DWORD ***a1)
{
  return sub_20E9EB404(**a1, (char *)(*a1)[1]);
}

void sub_20E9EB3F4(uint64_t a1, uint64_t a2)
{
  sub_20E9EB4F4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E9EB404(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B6F40[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E9EB4F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B6F40[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E9EB6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E9EB6EC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E9EB7E4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E9EB7DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E9EB7E4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E9EB9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9EB9F4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  uint64_t result;
  _DWORD v5[6];
  int v6;
  void *__p[2];
  char v8;
  void ***v9;
  void **v10;
  void **v11;
  _DWORD *v12;
  void **v13;
  void **v14;

  v6 = 0;
  sub_20E9EBBAC(v5, "Cannot use same separator '");
  v3 = *a2;
  v8 = 1;
  LOWORD(__p[0]) = v3;
  v10 = (void **)v5;
  v11 = __p;
  v12 = v5;
  v13 = __p;
  v14 = __p;
  if (v6 == -1)
    sub_20E877AB8();
  v9 = &v10;
  ((void (*)(void ****, _DWORD *))off_24C9B6FD0[v6])(&v9, v5);
  if (v8 < 0)
    operator delete(__p[0]);
  v10 = (void **)v5;
  v11 = (void **)"' for fields and rows";
  v12 = v5;
  v13 = (void **)"' for fields and rows";
  v14 = (void **)"' for fields and rows";
  if (v6 == -1)
    sub_20E877AB8();
  __p[0] = &v10;
  ((void (*)(void **, _DWORD *))off_24C9B6FE8[v6])(__p, v5);
  if (v6 == -1)
    sub_20E877AB8();
  v10 = __p;
  result = ((uint64_t (*)(void ***, _DWORD *))off_24C9B6FA0[v6])(&v10, v5);
  if (v6 != -1)
    return ((uint64_t (*)(void ***, _DWORD *))off_24C9B6F40[v6])(&v10, v5);
  return result;
}

void sub_20E9EBB50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9EBB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20E9EBB5CLL);
}

_DWORD *sub_20E9EBB90(_DWORD ***a1)
{
  return sub_20E9EBBAC(**a1, (char *)(*a1)[1]);
}

void sub_20E9EBB9C(uint64_t a1, uint64_t a2)
{
  sub_20E9EBC9C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E9EBBAC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B6F40[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E9EBC9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B6F40[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E9EBE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E9EBE94(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E9EBF8C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E9EBF84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E9EBF8C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E9EC188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E9EC19C(_DWORD ***a1)
{
  return sub_20E8F6670(**a1, (char *)(*a1)[1]);
}

void sub_20E9EC1A8(uint64_t a1, uint64_t a2)
{
  sub_20E9EC1B8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20E9EC1B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B6F40[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E9EC36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E9EC3B0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E9EC4A8((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E9EC4A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E9EC4A8(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E9EC6A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9EC6B8(uint64_t a1, unsigned __int8 *a2, const char *a3)
{
  unsigned __int8 v5;
  uint64_t result;
  _DWORD v7[6];
  int v8;
  void *__p[2];
  char v10;
  void ***v11;
  void **v12;
  const char *v13;
  _DWORD *v14;
  const char *v15;
  const char *v16;

  v8 = 0;
  sub_20E9EC940(v7, "Cannot use field end marker '");
  v5 = *a2;
  v10 = 1;
  LOWORD(__p[0]) = v5;
  v12 = (void **)v7;
  v13 = (const char *)__p;
  v14 = v7;
  v15 = (const char *)__p;
  v16 = (const char *)__p;
  if (v8 == -1)
    sub_20E877AB8();
  v11 = &v12;
  ((void (*)(void ****, _DWORD *))off_24C9B6FD0[v8])(&v11, v7);
  if (v10 < 0)
    operator delete(__p[0]);
  v12 = (void **)v7;
  v13 = "' since it is also used as ";
  v14 = v7;
  v15 = "' since it is also used as ";
  v16 = "' since it is also used as ";
  if (v8 == -1)
    sub_20E877AB8();
  __p[0] = &v12;
  ((void (*)(void **, _DWORD *))off_24C9B6FB8[v8])(__p, v7);
  if (*(_QWORD *)a3)
  {
    v12 = (void **)v7;
    v13 = a3;
    v14 = v7;
    v15 = a3;
    v16 = a3;
    if (v8 != -1)
    {
      __p[0] = &v12;
      ((void (*)(void **, _DWORD *))off_24C9B6F70[v8])(__p, v7);
      goto LABEL_10;
    }
LABEL_17:
    sub_20E877AB8();
  }
  v12 = (void **)v7;
  v13 = "nullptr";
  v14 = v7;
  v15 = "nullptr";
  v16 = "nullptr";
  if (v8 == -1)
    goto LABEL_17;
  __p[0] = &v12;
  ((void (*)(void **, _DWORD *))off_24C9B6F58[v8])(__p, v7);
LABEL_10:
  v12 = (void **)v7;
  v13 = " separator";
  v14 = v7;
  v15 = " separator";
  v16 = " separator";
  if (v8 == -1)
    sub_20E877AB8();
  __p[0] = &v12;
  ((void (*)(void **, _DWORD *))off_24C9B7000[v8])(__p, v7);
  if (v8 == -1)
    sub_20E877AB8();
  v12 = __p;
  result = ((uint64_t (*)(void ***, _DWORD *))off_24C9B6FA0[v8])(&v12, v7);
  if (v8 != -1)
    return ((uint64_t (*)(void ***, _DWORD *))off_24C9B6F40[v8])(&v12, v7);
  return result;
}

void sub_20E9EC8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9EC91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20E877A60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20E9EC90CLL);
}

_DWORD *sub_20E9EC940(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B6F40[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20E9ECA30(_DWORD ***a1)
{
  return sub_20E9ECA4C(**a1, (char *)(*a1)[1]);
}

void sub_20E9ECA3C(uint64_t a1, uint64_t a2)
{
  sub_20E9ECB3C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E9ECA4C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B6F40[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E9ECB3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B6F40[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E9ECCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E9ECD34(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E9ECE2C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E9ECE24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E9ECE2C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E9ED028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9ED03C(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  char v8;

  MEMORY[0x212BC5BB8](&v8, a1, 0);
  if (v8)
  {
    v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
      if ((_DWORD)v4 == -1)
      {
        v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_20E9ED0E8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20E9ED0B4);
  }
  __cxa_rethrow();
}

void sub_20E9ED128(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

char *sub_20E9ED13C(uint64_t a1, char *a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;
  char v6;
  char v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v5 = (uint64_t *)(v2 + 16);
    return sub_20E9F3164(&v5, *a2);
  }
  else
  {
    v4 = *a2;
    if (v4 < 0)
    {
      v6 = -52;
      v7 = v4;
    }
    else
    {
      v8 = *a2;
    }
    return (char *)std::ostream::write();
  }
}

_BYTE *sub_20E9ED1C4(uint64_t a1, _WORD *a2)
{
  unsigned int v3;
  uint64_t *v4;
  char v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;

  if (*(_BYTE *)(a1 + 40))
  {
    v4 = (uint64_t *)(a1 + 16);
    return sub_20E9F3668(&v4, (unsigned __int16)*a2);
  }
  else
  {
    v3 = (unsigned __int16)*a2;
    if (v3 > 0x7F)
    {
      if (v3 > 0xFF)
      {
        v5 = -51;
        v6 = __rev16(v3);
      }
      else
      {
        v7 = -52;
        v8 = v3;
      }
      return (_BYTE *)std::ostream::write();
    }
    else
    {
      v9 = *a2;
      return (_BYTE *)std::ostream::write();
    }
  }
}

_BYTE *sub_20E9ED280(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F3C50();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F3834(&v4, *a2);
}

_BYTE *sub_20E9ED2CC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F3FC0((uint64_t)&v5, v2 + 8);
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F3D4C(&v4, *a2);
}

_BYTE *sub_20E9ED324(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v2 + 40))
    return (_BYTE *)sub_20E9F4A34();
  v4 = (uint64_t *)(v2 + 16);
  return sub_20E9F472C(&v4, *a2);
}

uint64_t **sub_20E9ED370(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t *v4;
  _BYTE v5[3];

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v4 = (uint64_t *)(v2 + 16);
    return sub_20E9F4CE4((uint64_t)v5, &v4, a2);
  }
  else
  {
    if (*a2)
      v5[1] = -61;
    else
      v5[2] = -62;
    return (uint64_t **)std::ostream::write();
  }
}

uint64_t sub_20E9ED3FC(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t *v9;
  char v10;
  char v11;
  char v12;

  v2 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v9 = (uint64_t *)(v2 + 16);
    v3 = *a2;
    if (*a2)
    {
      v4 = (char *)a2[1];
      do
      {
        v5 = *v4++;
        result = (uint64_t)sub_20E9F3164(&v9, v5);
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = (char *)a2[1];
      do
      {
        while (1)
        {
          v8 = *v7;
          if ((v8 & 0x80000000) == 0)
            break;
          v10 = -52;
          v11 = v8;
          result = std::ostream::write();
          ++v7;
          if (!--v6)
            return result;
        }
        v12 = *v7;
        result = std::ostream::write();
        ++v7;
        --v6;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_20E9ED4BC(uint64_t result, _QWORD *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  unsigned int v4;
  _WORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  char v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;

  if (*(_BYTE *)(result + 40))
  {
    v8 = (uint64_t *)(result + 16);
    if (*a2)
    {
      v2 = (unsigned __int16 *)a2[1];
      v3 = 2 * *a2;
      do
      {
        v4 = *v2++;
        result = (uint64_t)sub_20E9F3668(&v8, v4);
        v3 -= 2;
      }
      while (v3);
    }
  }
  else if (*a2)
  {
    v5 = (_WORD *)a2[1];
    v6 = 2 * *a2;
    do
    {
      v7 = (unsigned __int16)*v5;
      if (v7 <= 0x7F)
      {
        v13 = *v5;
      }
      else if (v7 > 0xFF)
      {
        v9 = -51;
        v10 = __rev16(v7);
      }
      else
      {
        v11 = -52;
        v12 = v7;
      }
      result = std::ostream::write();
      ++v5;
      v6 -= 2;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20E9ED5AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  _BYTE v9[2];
  unsigned int v10;

  v2 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v2 + 40))
  {
    v8 = (uint64_t *)(v2 + 16);
    if (*a2)
    {
      v3 = (unsigned int *)a2[1];
      v4 = 4 * *a2;
      do
      {
        result = (uint64_t)sub_20E9F4B2C((uint64_t)v9, &v8, v3++);
        v4 -= 4;
      }
      while (v4);
    }
  }
  else if (*a2)
  {
    v5 = (unsigned int *)a2[1];
    v6 = 4 * *a2;
    do
    {
      v7 = *v5++;
      v9[1] = -54;
      v10 = bswap32(v7);
      result = std::ostream::write();
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

void sub_20E9ED654(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20E9EFAC4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_20E9F5398((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9ED6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9ED704(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20E9EFAC4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_20E9F5398((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9ED79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9ED7B4(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;

  sub_20E9EFAC4(a1, (uint64_t)&v11);
  if (v11 != 2 || v12 >= 0x100)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v10, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9ED880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9ED898(uint64_t a1, _WORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20E9EFAC4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_20E9F53FC((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9ED930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9ED948(uint64_t a1, _WORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;

  sub_20E9EFAC4(a1, (uint64_t)&v11);
  if (v11 != 2 || v12 >= 0x10000)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v10, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EDA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EDA2C(uint64_t a1, _DWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;

  sub_20E9EFAC4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  *a2 = sub_20E9F5464((uint64_t)&v12);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EDAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EDADC(uint64_t a1, _DWORD *a2)
{
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  int v12;
  unint64_t v13;
  _QWORD *v14;

  sub_20E9EFAC4(a1, (uint64_t)&v12);
  if (v12 != 2 || HIDWORD(v13) != 0)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v11, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v13;
  v4 = v14;
  v14 = 0;
  if (v4)
  {
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20E9EDBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EDBC0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20E9EFAC4(a1, (uint64_t)&v11);
  if (v11 != 3 && (v11 != 2 || v12 < 0))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v10, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EDC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EDCA8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20E9EFAC4(a1, (uint64_t)&v11);
  if (v11 != 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v10, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  v3 = v13;
  *a2 = v12;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EDD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EDD84(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20E9EFAC4(a1, (uint64_t)&v11);
  if (v11 != 3 && (v11 != 2 || v12 < 0))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v10, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EDE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EDE6C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20E9EFAC4(a1, (uint64_t)&v11);
  if (v11 != 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v10, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  v3 = v13;
  *a2 = v12;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EDF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EDF48(uint64_t a1, float *a2)
{
  float v3;
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;

  sub_20E9EFAC4(a1, (uint64_t)&v12);
  if (v12 == 2)
  {
    *a2 = (float)(unint64_t)v13;
    v4 = v14;
    v14 = 0;
    if (!v4)
      return;
    goto LABEL_9;
  }
  if (v12 == 3)
  {
    *a2 = (float)v13;
    v4 = v14;
    v14 = 0;
    if (!v4)
      return;
    goto LABEL_9;
  }
  if (v12 != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v11, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  v3 = *(double *)&v13;
  *a2 = v3;
  v4 = v14;
  v14 = 0;
  if (v4)
  {
LABEL_9:
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20E9EE060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EE078(uint64_t a1, double *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20E9EFAC4(a1, (uint64_t)&v11);
  if (v11 == 2)
  {
    *a2 = (double)(unint64_t)v12;
    v3 = v13;
    v13 = 0;
    if (!v3)
      return;
    goto LABEL_9;
  }
  if (v11 == 3)
  {
    *a2 = (double)v12;
    v3 = v13;
    v13 = 0;
    if (!v3)
      return;
    goto LABEL_9;
  }
  if (v11 != 4)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v10, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
LABEL_9:
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EE18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EE1A4(uint64_t a1, _BYTE *a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  std::bad_cast *exception;
  std::bad_cast *v10;
  int v11;
  char v12;
  _QWORD *v13;

  sub_20E9EFAC4(a1, (uint64_t)&v11);
  if (v11 != 1)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v10 = std::bad_cast::bad_cast(exception);
    v10->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v10, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v12;
  v3 = v13;
  v13 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EE268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EE280(uint64_t a1, std::string *a2)
{
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  int v12;
  size_t __len;
  void *__src;
  _QWORD *v15;

  sub_20E9EFAC4(a1, (uint64_t)&v12);
  if (v12 != 8 && v12 != 5)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v11, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  sub_20E8B43E8(a2, (const std::string::value_type *)__src, __len);
  v4 = v15;
  v15 = 0;
  if (v4)
  {
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20E9EE350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EE368(uint64_t a1, double **a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  sub_20E9EFAC4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  sub_20E9F54C8((uint64_t)&v14, (uint64_t)&v12, a2);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EE404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EE41C(uint64_t a1, float **a2)
{
  _QWORD *v3;
  char *i;
  uint64_t v5;
  void (*v6)(uint64_t);
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  char v14;

  sub_20E9EFAC4(a1, (uint64_t)&v9);
  v12 = v9;
  v13 = v10;
  sub_20E9F55AC((uint64_t)&v14, (uint64_t)&v12, a2);
  v3 = v11;
  v11 = 0;
  if (v3)
  {
    for (i = (char *)v3[4]; i != (char *)v3[6]; i -= 16)
    {
      v6 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v5 = *((_QWORD *)i - 1);
      v6(v5);
    }
    free(i);
    v7 = (_QWORD *)v3[3];
    if (v7)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        free(v7);
        v7 = v8;
      }
      while (v8);
    }
    free(v3);
  }
}

void sub_20E9EE4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_20E9EE4D0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  char *result;
  char *v10;
  std::bad_alloc *exception;
  std::bad_alloc *v12;

  v4 = a1[2];
  v5 = *a1;
  if ((unint64_t)(v4 - *a1) >= 9)
  {
    result = (char *)a1[1];
  }
  else
  {
    if (v4)
      v6 = 2 * v4;
    else
      v6 = 0x2000;
    v7 = v5 + 9;
    while (v6 < v7)
    {
      v8 = (uint64_t)v6 <= 0;
      v6 *= 2;
      if (v8)
      {
        v6 = v7;
        break;
      }
    }
    result = (char *)malloc_type_realloc((void *)a1[1], v6, 0xAD6A59EEuLL);
    if (!result)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v12 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v12, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    a1[1] = (uint64_t)result;
    a1[2] = v6;
    v5 = *a1;
  }
  v10 = &result[v5];
  *v10 = -49;
  *(_QWORD *)(v10 + 1) = bswap64(a2);
  *a1 += 9;
  return result;
}

void sub_20E9EE5A4(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  char *i;
  uint64_t v6;
  void (*v7)(uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  std::bad_cast *exception;
  std::bad_cast *v11;
  _DWORD v12[4];
  uint64_t v13;
  _QWORD *v14;

  sub_20E9EFAC4(a1, (uint64_t)v12);
  if (v12[0] != 8)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v11 = std::bad_cast::bad_cast(exception);
    v11->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
    __cxa_throw(v11, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  v3 = v12[2];
  v4 = v14;
  *(_QWORD *)(a2 + 8) = v13;
  *(_DWORD *)a2 = v3;
  v14 = 0;
  if (v4)
  {
    for (i = (char *)v4[4]; i != (char *)v4[6]; i -= 16)
    {
      v7 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v6 = *((_QWORD *)i - 1);
      v7(v6);
    }
    free(i);
    v8 = (_QWORD *)v4[3];
    if (v8)
    {
      do
      {
        v9 = (_QWORD *)*v8;
        free(v8);
        v8 = v9;
      }
      while (v9);
    }
    free(v4);
  }
}

void sub_20E9EE66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E9F1E54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::bad_cast *sub_20E9EE684(std::bad_cast *a1)
{
  std::bad_cast *result;

  result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)&off_24C9B7400;
  return result;
}

_QWORD *sub_20E9EE6A8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B7040;
  v2 = a1[3];
  a1[2] = &unk_24C9B7190;
  a1[3] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(_QWORD *)(v2 + 88) = v3;
      operator delete(v3);
    }
    if (*(_BYTE *)(v2 + 72))
      free(*(void **)(v2 + 56));
    if (*(_BYTE *)(v2 + 40))
      free(*(void **)(v2 + 24));
    MEMORY[0x212BC6398](v2, 0x1030C408C1A3048);
  }
  return a1;
}

_QWORD *sub_20E9EE72C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B7040;
  v2 = a1[3];
  a1[2] = &unk_24C9B7190;
  a1[3] = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 80);
    if (v3)
    {
      *(_QWORD *)(v2 + 88) = v3;
      operator delete(v3);
    }
    if (*(_BYTE *)(v2 + 72))
      free(*(void **)(v2 + 56));
    if (*(_BYTE *)(v2 + 40))
      free(*(void **)(v2 + 24));
    MEMORY[0x212BC6398](v2, 0x1030C408C1A3048);
  }
  return a1;
}

_QWORD *sub_20E9EE7B0(_QWORD *result)
{
  uint64_t v1;
  void *v2;

  *(result - 2) = &off_24C9B7040;
  v1 = result[1];
  *result = &unk_24C9B7190;
  result[1] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    return (_QWORD *)MEMORY[0x212BC6398](v1, 0x1030C408C1A3048);
  }
  return result;
}

void sub_20E9EE82C(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  *a1 = &off_24C9B7040;
  v1 = a1[3];
  a1[2] = &unk_24C9B7190;
  a1[3] = 0;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    MEMORY[0x212BC6398](v1, 0x1030C408C1A3048);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20E9EE8C0(_QWORD *a1)
{
  uint64_t v1;
  void *v2;

  v1 = a1[1];
  *a1 = &unk_24C9B7190;
  a1[1] = 0;
  *(a1 - 2) = &off_24C9B7040;
  if (v1)
  {
    v2 = *(void **)(v1 + 80);
    if (v2)
    {
      *(_QWORD *)(v1 + 88) = v2;
      operator delete(v2);
    }
    if (*(_BYTE *)(v1 + 72))
      free(*(void **)(v1 + 56));
    if (*(_BYTE *)(v1 + 40))
      free(*(void **)(v1 + 24));
    MEMORY[0x212BC6398](v1, 0x1030C408C1A3048);
  }
  JUMPOUT(0x212BC6398);
}

char *sub_20E9EE954(uint64_t a1)
{
  return sub_20E9EE95C(*(_QWORD *)(a1 + 24));
}

char *sub_20E9EE95C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  std::bad_alloc *exception;
  std::bad_alloc *v30;

  if (*(_BYTE *)(a1 + 40))
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 72))
      goto LABEL_6;
LABEL_11:
    v6 = *(_QWORD *)(a1 + 16);
    v8 = *(char **)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)v8 >= v7)
      goto LABEL_14;
    goto LABEL_12;
  }
  v2 = malloc_type_malloc(0x2000uLL, 0x3BE130FuLL);
  if (!v2)
    goto LABEL_34;
  v3 = v2;
  if (*(_BYTE *)(a1 + 40))
  {
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = 0x2000;
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = 0x2000;
  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_11;
LABEL_6:
  v4 = malloc_type_malloc(0x2000uLL, 0x3BE130FuLL);
  if (!v4)
  {
LABEL_34:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v30 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v30, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v5 = v4;
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v4;
    *(_QWORD *)(a1 + 64) = 0x2000;
    *(_BYTE *)(a1 + 72) = 1;
    v6 = *(_QWORD *)(a1 + 16);
    v8 = *(char **)(a1 + 88);
    v7 = *(_QWORD *)(a1 + 96);
    if ((unint64_t)v8 >= v7)
      goto LABEL_14;
LABEL_12:
    *(_QWORD *)v8 = v6;
    v9 = (uint64_t)(v8 + 8);
    goto LABEL_33;
  }
  free(*(void **)(a1 + 56));
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = 0x2000;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(char **)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  if ((unint64_t)v8 < v7)
    goto LABEL_12;
LABEL_14:
  v10 = *(char **)(a1 + 80);
  v11 = (v8 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    sub_20E867F44();
  v13 = v7 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_20E877A38();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v6;
    v9 = (uint64_t)(v16 + 1);
    v18 = v8 - v10;
    if (v8 == v10)
      goto LABEL_31;
    goto LABEL_25;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v6;
  v9 = 8 * v11 + 8;
  v18 = v8 - v10;
  if (v8 != v10)
  {
LABEL_25:
    v19 = v18 - 8;
    if (v19 < 0x58)
      goto LABEL_39;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_39;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v8[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v23 = &v15[8 * v11 - 16];
    v24 = v8 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v8 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        v27 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v16 = v27;
      }
      while (v8 != v10);
    }
  }
LABEL_31:
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v17;
  if (v10)
    operator delete(v10);
LABEL_33:
  *(_QWORD *)(a1 + 88) = v9;
  return sub_20E9EE4D0((uint64_t *)(a1 + 16), 0);
}

char *sub_20E9EEBBC(uint64_t a1)
{
  return sub_20E9EE95C(*(_QWORD *)(a1 + 8));
}

void sub_20E9EEBC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v1 + 48), *(_QWORD *)(v1 + 16) - v2 - 9);
  v3 = *(_QWORD *)(v1 + 48);
  if (v3)
    memmove((void *)(*(_QWORD *)(v1 + 24) + v2), *(const void **)(v1 + 56), v3);
  *(_QWORD *)(v1 + 48) = 0;
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88) - 8;
  *(_QWORD *)(v1 + 88) = v5;
  if (v4 == v5)
  {
    std::ostream::write();
    if (*(_BYTE *)(v1 + 40))
    {
      free(*(void **)(v1 + 24));
      *(_BYTE *)(v1 + 40) = 0;
    }
  }
}

void sub_20E9EEC58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 88) - 8);
  sub_20E9EE4D0((uint64_t *)(v1 + 48), *(_QWORD *)(v1 + 16) - v2 - 9);
  v3 = *(_QWORD *)(v1 + 48);
  if (v3)
    memmove((void *)(*(_QWORD *)(v1 + 24) + v2), *(const void **)(v1 + 56), v3);
  *(_QWORD *)(v1 + 48) = 0;
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88) - 8;
  *(_QWORD *)(v1 + 88) = v5;
  if (v4 == v5)
  {
    std::ostream::write();
    if (*(_BYTE *)(v1 + 40))
    {
      free(*(void **)(v1 + 24));
      *(_BYTE *)(v1 + 40) = 0;
    }
  }
}

_QWORD *sub_20E9EECEC(_QWORD *a1, uint64_t *a2, uint64_t a3, size_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t v10;
  __int128 v12[8];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *a1 = off_24C9B6CB8;
  v7 = *a2;
  a1[4] = 0;
  a1[5] = 0;
  *a1 = &off_24C9B71C0;
  a1[1] = v7;
  a1[2] = &unk_24C9B7308;
  a1[3] = 0;
  v8 = (_QWORD *)operator new();
  *v8 = a3;
  *(_QWORD *)&v9 = 0xFFFFFFFFLL;
  *((_QWORD *)&v9 + 1) = 0xFFFFFFFFLL;
  v12[0] = v9;
  v12[1] = v9;
  v12[2] = v9;
  sub_20E9EF234((uint64_t)(v8 + 1), (uint64_t)sub_20E9EF22C, 0, a4, v12);
  v8[34] = 0;
  v8[35] = 0;
  v8[33] = a4;
  std::istream::tellg();
  v8[34] = v13;
  if (a4 >= 0x400)
    v10 = 1024;
  else
    v10 = a4;
  if (v8[10] < v10)
    sub_20E9EF4BC((uint64_t)(v8 + 1), v10);
  a1[6] = v8;
  return a1;
}

void sub_20E9EEE0C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v5;

  sub_20E9EF740(v3);
  MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  v1[2] = off_24C9B7428;
  v5 = (void *)v1[3];
  if (v5)
  {
    v1[4] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9EEE68(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B71C0;
  a1[2] = &unk_24C9B7308;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C9B7428;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_20E9EEEE4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B71C0;
  a1[2] = &unk_24C9B7308;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C9B7428;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20E9EEF60(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C9B71C0;
  *a1 = &unk_24C9B7308;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C9B7428;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_20E9EEFD8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_24C9B71C0;
  a1[2] = &unk_24C9B7308;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  a1[2] = off_24C9B7428;
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x212BC6398);
}

void sub_20E9EF064(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *(a1 - 2) = &off_24C9B71C0;
  *a1 = &unk_24C9B7308;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
  {
    sub_20E9EF740((_QWORD *)(v2 + 8));
    MEMORY[0x212BC6398](v2, 0x10F2C40853B94B7);
  }
  *a1 = off_24C9B7428;
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9EF0FC(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 280);
}

uint64_t sub_20E9EF108(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 280);
}

uint64_t sub_20E9EF114(uint64_t result, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD **)(result + 48);
  v4 = v3[11];
  if (v3[9] - v4 < a2)
  {
    do
    {
      sub_20E9EF7FC(v3, (uint64_t)"RefillBuffer", (const char *)&unk_21024E22F);
      if (v3[33] >= 0x400uLL)
        v8 = 1024;
      else
        v8 = v3[33];
      if (v3[10] < v8)
        sub_20E9EF4BC((uint64_t)(v3 + 1), v8);
      result = std::istream::read();
      v5 = *(_QWORD *)(*v3 + 8);
      v6 = v3[10];
      v7 = v3[9] + v5;
      v3[9] = v7;
      v3[10] = v6 - v5;
      v4 = v3[11];
    }
    while (v7 - v4 < a2);
  }
  v3[11] = v4 + a2;
  v3[35] += a2;
  return result;
}

uint64_t sub_20E9EF1F8(uint64_t a1, unint64_t a2)
{
  return sub_20E9EF114(a1 - 16, a2);
}

void sub_20E9EF200(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9EF22C()
{
  return 1;
}

uint64_t sub_20E9EF234(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4, __int128 *a5)
{
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::bad_alloc *exception;
  std::bad_alloc *v23;
  std::bad_alloc *v24;
  std::bad_alloc *v25;
  std::bad_alloc *v26;
  std::bad_alloc *v27;

  *(_QWORD *)(a1 + 32) = 0;
  v10 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v11 = a1 + 248;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v12 = (char *)operator new(0x100uLL);
  *v10 = v12;
  v10[1] = v12;
  v10[2] = v12 + 256;
  v10[9] = v11;
  if (a4 <= 4)
    a4 = 4;
  v13 = malloc_type_malloc(a4, 0xFB9145DuLL);
  if (!v13)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v23 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v23, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = 4;
  *(_QWORD *)(a1 + 72) = a4 - 4;
  *(_OWORD *)(a1 + 80) = xmmword_2102EF2F0;
  *(_QWORD *)(a1 + 96) = a4;
  *v13 = 1;
  *(_QWORD *)(a1 + 112) = a2;
  *(_QWORD *)(a1 + 120) = a3;
  v14 = *a5;
  v15 = a5[1];
  v16 = a5[2];
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 160) = v16;
  *(_OWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v17 = operator new(0x100uLL);
  *(_QWORD *)(a1 + 200) = v17;
  *v17 = a1 + 176;
  *(_QWORD *)(a1 + 208) = v17 + 1;
  *(_QWORD *)(a1 + 216) = v17 + 32;
  v18 = malloc_type_malloc(0x38uLL, 0x2A498C84uLL);
  v19 = v18;
  if (!v18)
  {
    v24 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v25 = std::bad_alloc::bad_alloc(v24);
    __cxa_throw(v25, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *v18 = 0x2000;
  v20 = malloc_type_malloc(0x2008uLL, 0x1DB03DE0uLL);
  if (!v20)
  {
    v26 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v27 = std::bad_alloc::bad_alloc(v26);
    __cxa_throw(v27, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v19[3] = v20;
  *v20 = 0;
  v19[1] = 0x2000;
  v19[2] = v20 + 1;
  v19[4] = 0;
  v19[5] = 0;
  v19[6] = 0;
  *(_QWORD *)(a1 + 240) = v19;
  *(_QWORD *)(a1 + 248) = v19;
  *(_QWORD *)(a1 + 224) = v19;
  *(_BYTE *)(a1 + 232) = 0;
  return a1;
}

void sub_20E9EF3F8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20E9EF450(v1);
  _Unwind_Resume(a1);
}

void sub_20E9EF410(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[26] = v4;
    operator delete(v4);
  }
  sub_20E9EF450(v1);
  _Unwind_Resume(a1);
}

void sub_20E9EF434(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20E9EF450(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      free(v2);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_20E9EF4A0(void *a1)
{
  unsigned int v1;
  unsigned int v2;

  do
  {
    v1 = __ldaxr((unsigned int *)a1);
    v2 = v1 - 1;
  }
  while (__stlxr(v2, (unsigned int *)a1));
  if (!v2)
    free(a1);
}

void sub_20E9EF4BC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  void *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  BOOL v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  BOOL v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  std::bad_alloc *exception;
  std::bad_alloc *v29;
  std::bad_alloc *v30;
  std::bad_alloc *v31;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 80);
  if (v3 == v4)
  {
    v5 = atomic_load(*(unsigned int **)(a1 + 56));
    if (v5 == 1 && *(_BYTE *)(a1 + 232))
    {
      v6 = *(_QWORD *)(a1 + 64) + *(_QWORD *)(a1 + 72) - 4;
      v3 = 4;
      *(_QWORD *)(a1 + 64) = 4;
      *(_QWORD *)(a1 + 72) = v6;
      *(_QWORD *)(a1 + 80) = 4;
      if (v6 >= a2)
        return;
      goto LABEL_9;
    }
    v4 = *(_QWORD *)(a1 + 80);
    v3 = *(_QWORD *)(a1 + 64);
  }
  if (v4 == 4)
  {
    v6 = *(_QWORD *)(a1 + 72);
LABEL_9:
    v7 = v3 + v6;
    v8 = v3 + a2;
    while (1)
    {
      v7 *= 2;
      if (v7 >= v8)
        break;
      if (v7 <= 0)
      {
        v7 = v8;
        break;
      }
    }
    v9 = malloc_type_realloc(*(void **)(a1 + 56), v7, 0x6311493AuLL);
    if (v9)
    {
      *(_QWORD *)(a1 + 56) = v9;
      *(_QWORD *)(a1 + 72) = v7 - *(_QWORD *)(a1 + 64);
      return;
    }
LABEL_34:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v29 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v29, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v10 = *(_QWORD *)(a1 + 96);
  v11 = v3 - v4;
  v12 = a2 + v3 - v4 + 4;
  while (v10 < v12)
  {
    v13 = (uint64_t)v10 <= 0;
    v10 *= 2;
    if (v13)
    {
      v10 = v12;
      break;
    }
  }
  v14 = malloc_type_malloc(v10, 0x355C421CuLL);
  if (!v14)
    goto LABEL_34;
  v15 = v14;
  *v14 = 1;
  memcpy(v14 + 1, (const void *)(*(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 80)), v11);
  if (*(_BYTE *)(a1 + 232))
  {
    v16 = *(_QWORD *)(a1 + 56);
    v17 = **(_QWORD ***)(a1 + 104);
    v18 = (char *)v17[4];
    if (v18 == (char *)v17[5])
    {
      v19 = (char *)v17[6];
      v21 = v18 - v19;
      v20 = v18 == v19;
      v22 = (v18 - v19) >> 3;
      if (v20)
        v23 = 4;
      else
        v23 = v22;
      v24 = (char *)malloc_type_realloc(v19, 16 * v23, 0x80040803F642BuLL);
      if (!v24)
      {
        v30 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v31 = std::bad_alloc::bad_alloc(v30);
        __cxa_throw(v31, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      v17[5] = &v24[16 * v23];
      v17[6] = v24;
      v18 = &v24[v21];
    }
    *(_QWORD *)v18 = sub_20E9EF4A0;
    *((_QWORD *)v18 + 1) = v16;
    v17[4] = v18 + 16;
    *(_BYTE *)(a1 + 232) = 0;
  }
  else
  {
    v25 = *(unsigned int **)(a1 + 56);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
      free(v25);
  }
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v11 + 4;
  *(_QWORD *)(a1 + 72) = v10 - (v11 + 4);
  *(_QWORD *)(a1 + 80) = 4;
}

void sub_20E9EF714()
{
  __break(1u);
}

void sub_20E9EF72C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20E9EF740(_QWORD *a1)
{
  _QWORD *v2;
  char *i;
  uint64_t v4;
  void (*v5)(uint64_t);
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;

  v2 = (_QWORD *)a1[30];
  a1[30] = 0;
  if (v2)
  {
    for (i = (char *)v2[4]; i != (char *)v2[6]; i -= 16)
    {
      v5 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v4 = *((_QWORD *)i - 1);
      v5(v4);
    }
    free(i);
    v6 = (_QWORD *)v2[3];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        free(v6);
        v6 = v7;
      }
      while (v7);
    }
    free(v2);
  }
  v8 = (void *)a1[25];
  if (v8)
  {
    a1[26] = v8;
    operator delete(v8);
  }
  v9 = (unsigned int *)a1[7];
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      free(v9);
  }
  v12 = (void *)a1[4];
  if (v12)
  {
    a1[5] = v12;
    operator delete(v12);
  }
  return a1;
}

_QWORD *sub_20E9EF7FC(_QWORD *result, uint64_t a2, const char *a3)
{
  std::ios_base::failure *exception;
  std::error_code __ec;
  std::string __msg;
  const char *v6;
  uint64_t v7;

  v7 = a2;
  v6 = a3;
  if (*(_DWORD *)(*result + *(_QWORD *)(*(_QWORD *)*result - 24) + 32))
  {
    exception = (std::ios_base::failure *)__cxa_allocate_exception(0x20uLL);
    sub_20E9EF8DC(&v6, "Input stream not in good state, in ", (const char *)&v7);
    *(_QWORD *)&__ec.__val_ = 1;
    __ec.__cat_ = std::iostream_category();
    std::ios_base::failure::failure(exception, &__msg, &__ec);
    __cxa_throw(exception, MEMORY[0x24BEDB710], MEMORY[0x24BEDB570]);
  }
  return result;
}

void sub_20E9EF8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t sub_20E9EF8DC(const char **a1, const char *a2, const char *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  _QWORD **v8;
  const char *v9;
  _DWORD *v10;
  const char *v11;
  const char *v12;
  _QWORD *v13;

  v7 = 0;
  if (*a1)
    sub_20E9967C4(v6, a1);
  else
    sub_20E9737A0(v6, "nullptr");
  v8 = (_QWORD **)v6;
  v9 = a2;
  v10 = v6;
  v11 = a2;
  v12 = a2;
  if (v7 == -1)
    sub_20E877AB8();
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B74A0[v7])(&v13, v6);
  if (*(_QWORD *)a3)
  {
    v8 = (_QWORD **)v6;
    v9 = a3;
    v10 = v6;
    v11 = a3;
    v12 = a3;
    if (v7 != -1)
    {
      v13 = &v8;
      ((void (*)(_QWORD **, _DWORD *))off_24C9B7458[v7])(&v13, v6);
      goto LABEL_10;
    }
LABEL_15:
    sub_20E877AB8();
  }
  v8 = (_QWORD **)v6;
  v9 = "nullptr";
  v10 = v6;
  v11 = "nullptr";
  v12 = "nullptr";
  if (v7 == -1)
    goto LABEL_15;
  v13 = &v8;
  ((void (*)(_QWORD **, _DWORD *))off_24C9B7488[v7])(&v13, v6);
LABEL_10:
  if (v7 == -1)
    sub_20E877AB8();
  v8 = &v13;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9B74B8[v7])(&v8, v6);
  if (v7 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C9B7470[v7])(&v8, v6);
  return result;
}

void sub_20E9EFA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EFA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EFA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EFAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E877A60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20E9EFAC4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  void **v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  void *v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  void *v95;
  int v96;
  int v97;
  int v98;
  void *v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  void *v104;
  int v105;
  int v106;
  int v107;
  double v108;
  uint64_t v109;
  void *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  void *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  int v132;
  int v133;
  int v134;
  void *v135;
  int v136;
  int v137;
  int v138;
  void *v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  void *v145;
  int v146;
  int v147;
  int v148;
  void *v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  void *v155;
  int v156;
  int v157;
  int v158;
  void *v159;
  int v160;
  int v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  void *v167;
  int v168;
  int v169;
  int v170;
  void *v171;
  int v172;
  int v173;
  int v174;
  void *v175;
  int v176;
  int v177;
  int v178;
  void *v179;
  int v180;
  int v181;
  int v182;
  void *v183;
  int v184;
  int v185;
  int v186;
  void *v187;
  int v188;
  int v189;
  int v190;
  void *v191;
  int v192;
  int v193;
  int v194;
  uint64_t v195;
  void *v196;
  int v197;
  int v198;
  int v199;
  void *v200;
  int v201;
  int v202;
  int v203;
  void *v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  void *v209;
  int v210;
  int v211;
  int v212;
  void *v213;
  int v214;
  int v215;
  int v216;
  unint64_t v217;
  int v218;
  BOOL v219;
  unsigned __int8 *v220;
  unsigned __int8 *v221;
  unint64_t v222;
  unsigned __int8 *v223;
  _QWORD *v224;
  void (**v225)(void *);
  unsigned int *v226;
  void (**v227)(void *);
  unsigned int **v228;
  unsigned int *v229;
  _QWORD *v230;
  char *i;
  uint64_t v232;
  void (*v233)(uint64_t);
  _QWORD *v234;
  _QWORD *v235;
  unint64_t v236;
  BOOL v237;
  int64_t v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  unsigned int v242;
  _QWORD *v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  char *j;
  uint64_t v249;
  void (*v250)(uint64_t);
  _QWORD *v251;
  _QWORD *v252;
  _QWORD *v253;
  _BYTE *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char *v263;
  size_t v264;
  char *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  std::bad_alloc *exception;
  std::bad_alloc *v271;
  std::bad_alloc *v272;
  std::bad_alloc *v273;
  std::bad_alloc *v274;
  std::bad_alloc *v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  void **v279;
  _QWORD *v280;
  uint64_t v281;
  uint64_t *v282;

  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 96) - v4 + v5;
  v282 = (uint64_t *)(a1 + 16);
  v7 = (uint64_t *)(a1 + 216);
  v276 = (_QWORD *)(a1 + 120);
  v277 = a2;
  *(_DWORD *)a2 = 0;
  v8 = (void **)(a1 + 40);
  v9 = (uint64_t *)(a1 + 48);
  *(_QWORD *)(a2 + 24) = 0;
  v280 = (_QWORD *)(a1 + 8);
  v281 = a1 + 184;
  v278 = (uint64_t *)(a1 + 48);
  v279 = (void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = (unsigned __int8 *)(v10 + v4);
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v10 + v4;
  if (v4 == v5)
    goto LABEL_476;
LABEL_2:
  v12 = 0;
  v13 = 0;
  v14 = (unsigned __int8 *)(v10 + v5);
  v15 = *(_DWORD *)(a1 + 32);
  do
  {
LABEL_3:
    while (v15)
    {
      if ((v12 & 1) == 0)
      {
        v13 = v11;
        v16 = *(_QWORD *)(a1 + 24);
        if (v14 - v11 < v16)
        {
LABEL_467:
          v218 = 0;
          v221 = &v13[-*v280];
          a2 = v277;
          *(_QWORD *)(a1 + 88) = v221;
          v219 = (unint64_t)v221 > v4;
          v220 = &v221[-v4];
          if (!v219)
            goto LABEL_479;
          goto LABEL_478;
        }
        goto LABEL_20;
      }
LABEL_5:
      v13 = v11 + 1;
      *v282 = (uint64_t)(v11 + 1);
      v16 = *(_QWORD *)(a1 + 24);
      if (v14 - (v11 + 1) < v16)
        goto LABEL_467;
LABEL_20:
      v11 = &v13[v16 - 1];
      *v282 = (uint64_t)v11;
      switch(v15)
      {
        case 4:
          v26 = *v13;
          *(_QWORD *)(a1 + 24) = v26;
          if (v26)
            goto LABEL_159;
          sub_20E9F221C((uint64_t)v276, v13, 0);
          v20 = *v282 + 1;
          *v282 = v20;
          v27 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v34 = *(_DWORD *)(v22 - 8);
            if (v34)
            {
              if (v34 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v33 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v33;
                if (v33)
                  goto LABEL_388;
LABEL_39:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v27 = *v8;
LABEL_40:
                if (v27 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v34 != 1)
                goto LABEL_40;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v35 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v35;
          if (!v35)
            goto LABEL_39;
          goto LABEL_318;
        case 5:
          v93 = *(unsigned __int16 *)v13;
          v94 = __rev16(v93);
          *(_QWORD *)(a1 + 24) = v94;
          if (v93)
            goto LABEL_159;
          sub_20E9F221C((uint64_t)v276, v13, v94);
          v20 = *v282 + 1;
          *v282 = v20;
          v179 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v181 = *(_DWORD *)(v22 - 8);
            if (v181)
            {
              if (v181 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v180 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v180;
                if (v180)
                  goto LABEL_388;
LABEL_359:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v179 = *v8;
LABEL_360:
                if (v179 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v181 != 1)
                goto LABEL_360;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v182 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v182;
          if (!v182)
            goto LABEL_359;
          goto LABEL_318;
        case 6:
          v74 = *(_DWORD *)v13;
          v75 = bswap32(*(_DWORD *)v13);
          *(_QWORD *)(a1 + 24) = v75;
          if (!v74)
          {
            sub_20E9F221C((uint64_t)v276, v13, v75);
            v20 = *v282 + 1;
            *v282 = v20;
            v76 = *v8;
            v22 = *v9;
            if (*v8 == (void *)*v9)
              goto LABEL_464;
            while (1)
            {
              v78 = *(_DWORD *)(v22 - 8);
              if (!v78)
                break;
              if (v78 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v77 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v77;
                if (v77)
                  goto LABEL_388;
LABEL_124:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v76 = *v8;
                goto LABEL_125;
              }
              if (v78 == 1)
                goto LABEL_446;
LABEL_125:
              if (v76 == (void *)v22)
                goto LABEL_463;
            }
            *(_QWORD *)(*v7 - 8) += 24;
            v79 = *(_DWORD *)(v22 - 4) - 1;
            *(_DWORD *)(v22 - 4) = v79;
            if (v79)
              goto LABEL_318;
            goto LABEL_124;
          }
LABEL_159:
          v12 = 1;
          v15 = 33;
          *(_DWORD *)(a1 + 32) = 33;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          continue;
        case 7:
          v57 = *v13;
          goto LABEL_173;
        case 8:
          v57 = bswap32(*(unsigned __int16 *)v13) >> 16;
          goto LABEL_173;
        case 9:
          v57 = bswap32(*(_DWORD *)v13);
LABEL_173:
          *(_QWORD *)(a1 + 24) = v57 + 1;
          v12 = 1;
          v15 = 34;
          *(_DWORD *)(a1 + 32) = 34;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          continue;
        case 10:
          v108 = COERCE_FLOAT(bswap32(*(_DWORD *)v13));
          v109 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v109 = 4;
          *(double *)(v109 + 8) = v108;
          v20 = *v282 + 1;
          *v282 = v20;
          v110 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v112 = *(_DWORD *)(v22 - 8);
            if (v112)
            {
              if (v112 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v111 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v111;
                if (v111)
                  goto LABEL_388;
LABEL_201:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v110 = *v8;
              }
              else if (v112 == 1)
              {
                goto LABEL_446;
              }
              if (v110 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v113 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v113;
          if (!v113)
            goto LABEL_201;
          goto LABEL_318;
        case 11:
          v87 = bswap64(*(_QWORD *)v13);
          v88 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v88 = 4;
          *(_QWORD *)(v88 + 8) = v87;
          v20 = *v282 + 1;
          *v282 = v20;
          v89 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v91 = *(_DWORD *)(v22 - 8);
            if (v91)
            {
              if (v91 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v90 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v90;
                if (v90)
                  goto LABEL_388;
LABEL_150:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v89 = *v8;
              }
              else if (v91 == 1)
              {
                goto LABEL_446;
              }
              if (v89 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v92 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v92;
          if (!v92)
            goto LABEL_150;
          goto LABEL_318;
        case 12:
          v123 = *v13;
          v124 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v124 = 2;
          *(_QWORD *)(v124 + 8) = v123;
          v20 = *v282 + 1;
          *v282 = v20;
          v125 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v127 = *(_DWORD *)(v22 - 8);
            if (v127)
            {
              if (v127 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v126 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v126;
                if (v126)
                  goto LABEL_388;
LABEL_226:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v125 = *v8;
              }
              else if (v127 == 1)
              {
                goto LABEL_446;
              }
              if (v125 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v128 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v128;
          if (!v128)
            goto LABEL_226;
          goto LABEL_318;
        case 13:
          v65 = bswap32(*(unsigned __int16 *)v13);
          v66 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v66 = 2;
          *(_QWORD *)(v66 + 8) = HIWORD(v65);
          v20 = *v282 + 1;
          *v282 = v20;
          v67 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v69 = *(_DWORD *)(v22 - 8);
            if (v69)
            {
              if (v69 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v68 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v68;
                if (v68)
                  goto LABEL_388;
LABEL_107:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v67 = *v8;
LABEL_108:
                if (v67 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v69 != 1)
                goto LABEL_108;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v70 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v70;
          if (!v70)
            goto LABEL_107;
          goto LABEL_318;
        case 14:
          v129 = bswap32(*(_DWORD *)v13);
          v130 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v130 = 2;
          *(_QWORD *)(v130 + 8) = v129;
          v20 = *v282 + 1;
          *v282 = v20;
          v131 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v133 = *(_DWORD *)(v22 - 8);
            if (v133)
            {
              if (v133 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v132 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v132;
                if (v132)
                  goto LABEL_388;
LABEL_237:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v131 = *v8;
              }
              else if (v133 == 1)
              {
                goto LABEL_446;
              }
              if (v131 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v134 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v134;
          if (!v134)
            goto LABEL_237;
          goto LABEL_318;
        case 15:
          v51 = bswap64(*(_QWORD *)v13);
          v52 = *(_QWORD *)(*v7 - 8);
          *(_DWORD *)v52 = 2;
          *(_QWORD *)(v52 + 8) = v51;
          v20 = *v282 + 1;
          *v282 = v20;
          v53 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v55 = *(_DWORD *)(v22 - 8);
            if (v55)
            {
              if (v55 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v54 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v54;
                if (v54)
                  goto LABEL_388;
LABEL_81:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v53 = *v8;
LABEL_82:
                if (v53 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v55 != 1)
                goto LABEL_82;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v56 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v56;
          if (!v56)
            goto LABEL_81;
          goto LABEL_318;
        case 16:
          v58 = (char)*v13;
          v59 = *(_QWORD *)(*v7 - 8);
          if ((int)v58 >= 0)
            v60 = 2;
          else
            v60 = 3;
          *(_DWORD *)v59 = v60;
          *(_QWORD *)(v59 + 8) = v58;
          v20 = *v282 + 1;
          *v282 = v20;
          v61 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v63 = *(_DWORD *)(v22 - 8);
            if (v63)
            {
              if (v63 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v62 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v62;
                if (v62)
                  goto LABEL_388;
LABEL_96:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v61 = *v8;
LABEL_97:
                if (v61 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v63 != 1)
                goto LABEL_97;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v64 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v64;
          if (!v64)
            goto LABEL_96;
          goto LABEL_318;
        case 17:
          v114 = bswap32(*(unsigned __int16 *)v13);
          v115 = v114 >> 16;
          v116 = SHIWORD(v114);
          v117 = *(_QWORD *)(*v7 - 8);
          if (v115 >= 0)
            v118 = 2;
          else
            v118 = 3;
          *(_DWORD *)v117 = v118;
          *(_QWORD *)(v117 + 8) = v116;
          v20 = *v282 + 1;
          *v282 = v20;
          v119 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v121 = *(_DWORD *)(v22 - 8);
            if (v121)
            {
              if (v121 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v120 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v120;
                if (v120)
                  goto LABEL_388;
LABEL_215:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v119 = *v8;
              }
              else if (v121 == 1)
              {
                goto LABEL_446;
              }
              if (v119 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v122 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v122;
          if (!v122)
            goto LABEL_215;
          goto LABEL_318;
        case 18:
          v43 = bswap32(*(_DWORD *)v13);
          v44 = v43;
          v45 = *(_QWORD *)(*v7 - 8);
          if (v43 >= 0)
            v46 = 2;
          else
            v46 = 3;
          *(_DWORD *)v45 = v46;
          *(_QWORD *)(v45 + 8) = v44;
          v20 = *v282 + 1;
          *v282 = v20;
          v47 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v49 = *(_DWORD *)(v22 - 8);
            if (v49)
            {
              if (v49 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v48 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v48;
                if (v48)
                  goto LABEL_388;
LABEL_70:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v47 = *v8;
LABEL_71:
                if (v47 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v49 != 1)
                goto LABEL_71;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v50 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v50;
          if (!v50)
            goto LABEL_70;
          goto LABEL_318;
        case 19:
          v80 = bswap64(*(_QWORD *)v13);
          v81 = *(_QWORD *)(*v7 - 8);
          if (v80 >= 0)
            v82 = 2;
          else
            v82 = 3;
          *(_DWORD *)v81 = v82;
          *(_QWORD *)(v81 + 8) = v80;
          v20 = *v282 + 1;
          *v282 = v20;
          v83 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v85 = *(_DWORD *)(v22 - 8);
            if (v85)
            {
              if (v85 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v84 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v84;
                if (v84)
                  goto LABEL_388;
LABEL_138:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v83 = *v8;
              }
              else if (v85 == 1)
              {
LABEL_446:
                v15 = 0;
                v12 = 0;
                v166 = *v7;
                goto LABEL_447;
              }
              if (v83 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v86 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v86;
          if (!v86)
            goto LABEL_138;
          goto LABEL_318;
        case 20:
          sub_20E9F2098((uint64_t)v276, v13, 2u);
          v20 = *v282 + 1;
          *v282 = v20;
          v39 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v41 = *(_DWORD *)(v22 - 8);
            if (v41)
            {
              if (v41 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v40 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v40;
                if (v40)
                  goto LABEL_388;
LABEL_56:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v39 = *v8;
LABEL_57:
                if (v39 == (void *)v22)
                  goto LABEL_463;
                continue;
              }
              if (v41 != 1)
                goto LABEL_57;
              goto LABEL_446;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v42 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v42;
          if (!v42)
            goto LABEL_56;
          goto LABEL_318;
        case 21:
          sub_20E9F2098((uint64_t)v276, v13, 3u);
          v20 = *v282 + 1;
          *v282 = v20;
          v95 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v97 = *(_DWORD *)(v22 - 8);
            if (v97)
            {
              if (v97 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v96 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v96;
                if (v96)
                  goto LABEL_388;
LABEL_164:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v95 = *v8;
              }
              else if (v97 == 1)
              {
                goto LABEL_446;
              }
              if (v95 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v98 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v98;
          if (!v98)
            goto LABEL_164;
          goto LABEL_318;
        case 22:
          sub_20E9F2098((uint64_t)v276, v13, 5u);
          v20 = *v282 + 1;
          *v282 = v20;
          v135 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v137 = *(_DWORD *)(v22 - 8);
            if (v137)
            {
              if (v137 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v136 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v136;
                if (v136)
                  goto LABEL_388;
LABEL_248:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v135 = *v8;
              }
              else if (v137 == 1)
              {
                goto LABEL_446;
              }
              if (v135 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v138 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v138;
          if (!v138)
            goto LABEL_248;
          goto LABEL_318;
        case 23:
          sub_20E9F2098((uint64_t)v276, v13, 9u);
          v20 = *v282 + 1;
          *v282 = v20;
          v149 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v151 = *(_DWORD *)(v22 - 8);
            if (v151)
            {
              if (v151 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v150 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v150;
                if (v150)
                  goto LABEL_388;
LABEL_282:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v149 = *v8;
              }
              else if (v151 == 1)
              {
                goto LABEL_446;
              }
              if (v149 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v152 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v152;
          if (!v152)
            goto LABEL_282;
          goto LABEL_318;
        case 24:
          sub_20E9F2098((uint64_t)v276, v13, 0x11u);
          v20 = *v282 + 1;
          *v282 = v20;
          v99 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v101 = *(_DWORD *)(v22 - 8);
            if (v101)
            {
              if (v101 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v100 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v100;
                if (v100)
                  goto LABEL_388;
LABEL_178:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v99 = *v8;
              }
              else if (v101 == 1)
              {
                goto LABEL_446;
              }
              if (v99 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v102 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v102;
          if (!v102)
            goto LABEL_178;
          goto LABEL_318;
        case 25:
          v103 = *v13;
          *(_QWORD *)(a1 + 24) = v103;
          if (v103)
            goto LABEL_291;
          sub_20E9F1ED0((uint64_t)v276, v13, 0);
          v20 = *v282 + 1;
          *v282 = v20;
          v104 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v106 = *(_DWORD *)(v22 - 8);
            if (v106)
            {
              if (v106 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v105 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v105;
                if (v105)
                  goto LABEL_388;
LABEL_190:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v104 = *v8;
              }
              else if (v106 == 1)
              {
                goto LABEL_446;
              }
              if (v104 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v107 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v107;
          if (!v107)
            goto LABEL_190;
          goto LABEL_318;
        case 26:
          v143 = *(unsigned __int16 *)v13;
          v144 = __rev16(v143);
          *(_QWORD *)(a1 + 24) = v144;
          if (v143)
            goto LABEL_291;
          sub_20E9F1ED0((uint64_t)v276, v13, v144);
          v20 = *v282 + 1;
          *v282 = v20;
          v145 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v147 = *(_DWORD *)(v22 - 8);
            if (v147)
            {
              if (v147 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v146 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v146;
                if (v146)
                  goto LABEL_388;
LABEL_271:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v145 = *v8;
              }
              else if (v147 == 1)
              {
                goto LABEL_446;
              }
              if (v145 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v148 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v148;
          if (!v148)
            goto LABEL_271;
          goto LABEL_318;
        case 27:
          v153 = *(_DWORD *)v13;
          v154 = bswap32(*(_DWORD *)v13);
          *(_QWORD *)(a1 + 24) = v154;
          if (!v153)
          {
            sub_20E9F1ED0((uint64_t)v276, v13, v154);
            v20 = *v282 + 1;
            *v282 = v20;
            v183 = *v8;
            v22 = *v9;
            if (*v8 == (void *)*v9)
              goto LABEL_464;
            while (1)
            {
              v185 = *(_DWORD *)(v22 - 8);
              if (!v185)
                break;
              if (v185 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v184 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v184;
                if (v184)
                  goto LABEL_388;
LABEL_370:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v183 = *v8;
                goto LABEL_371;
              }
              if (v185 == 1)
                goto LABEL_446;
LABEL_371:
              if (v183 == (void *)v22)
                goto LABEL_463;
            }
            *(_QWORD *)(*v7 - 8) += 24;
            v186 = *(_DWORD *)(v22 - 4) - 1;
            *(_DWORD *)(v22 - 4) = v186;
            if (v186)
              goto LABEL_318;
            goto LABEL_370;
          }
LABEL_291:
          v12 = 1;
          v15 = 32;
          *(_DWORD *)(a1 + 32) = 32;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          continue;
        case 28:
          v73 = *(unsigned __int16 *)v13;
          *v282 = (uint64_t)&v13[v16];
          if (v73)
          {
            v72 = __rev16(v73);
            sub_20E9F23EC(v8, 0, v72);
            goto LABEL_119;
          }
          sub_20E9F2560(v276, 0);
          v166 = *v7 - 8;
          *v7 = v166;
          v175 = *v8;
          v22 = *v9;
          while (1)
          {
            while (1)
            {
              if (v175 == (void *)v22)
                goto LABEL_470;
              v177 = *(_DWORD *)(v22 - 8);
              if (v177)
                break;
              *(_QWORD *)(v166 - 8) += 24;
              v178 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v178;
              if (v178)
                goto LABEL_318;
LABEL_348:
              v22 = *v9 - 8;
              *v9 = v22;
              v166 = *v7 - 8;
              *v7 = v166;
              v175 = *v8;
            }
            if (v177 == 2)
            {
              *(_QWORD *)(v166 - 8) += 24;
              v176 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v176;
              if (v176)
                goto LABEL_388;
              goto LABEL_348;
            }
            if (v177 == 1)
              goto LABEL_462;
          }
        case 29:
          v71 = *(_DWORD *)v13;
          *v282 = (uint64_t)&v13[v16];
          if (!v71)
          {
            sub_20E9F2560(v276, 0);
            v166 = *v7 - 8;
            *v7 = v166;
            v171 = *v8;
            v22 = *v9;
            while (1)
            {
              while (1)
              {
                if (v171 == (void *)v22)
                  goto LABEL_470;
                v173 = *(_DWORD *)(v22 - 8);
                if (v173)
                  break;
                *(_QWORD *)(v166 - 8) += 24;
                v174 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v174;
                if (v174)
                  goto LABEL_318;
LABEL_338:
                v22 = *v9 - 8;
                *v9 = v22;
                v166 = *v7 - 8;
                *v7 = v166;
                v171 = *v8;
              }
              if (v173 == 2)
              {
                *(_QWORD *)(v166 - 8) += 24;
                v172 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v172;
                if (v172)
                  goto LABEL_388;
                goto LABEL_338;
              }
              if (v173 == 1)
                goto LABEL_462;
            }
          }
          v72 = bswap32(v71);
          sub_20E9F23EC(v8, 0, v72);
LABEL_119:
          sub_20E9F2560(v276, v72);
LABEL_318:
          v15 = 0;
          v12 = 0;
          *(_DWORD *)(a1 + 32) = 0;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          continue;
        case 30:
          v163 = *(unsigned __int16 *)v13;
          *v282 = (uint64_t)&v13[v16];
          if (v163)
          {
            v38 = __rev16(v163);
            sub_20E9F23EC(v8, 1u, v38);
            goto LABEL_317;
          }
          sub_20E9F28F0(v276, 0);
          v166 = *v7 - 8;
          *v7 = v166;
          v187 = *v8;
          v22 = *v9;
          while (1)
          {
            while (1)
            {
              if (v187 == (void *)v22)
                goto LABEL_470;
              v189 = *(_DWORD *)(v22 - 8);
              if (v189)
                break;
              *(_QWORD *)(v166 - 8) += 24;
              v190 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v190;
              if (v190)
                goto LABEL_318;
LABEL_380:
              v22 = *v9 - 8;
              *v9 = v22;
              v166 = *v7 - 8;
              *v7 = v166;
              v187 = *v8;
            }
            if (v189 == 2)
            {
              *(_QWORD *)(v166 - 8) += 24;
              v188 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v188;
              if (v188)
                goto LABEL_388;
              goto LABEL_380;
            }
            if (v189 == 1)
              goto LABEL_462;
          }
        case 31:
          v37 = *(_DWORD *)v13;
          *v282 = (uint64_t)&v13[v16];
          if (v37)
          {
            v38 = bswap32(v37);
            sub_20E9F23EC(v8, 1u, v38);
LABEL_317:
            sub_20E9F28F0(v276, v38);
            goto LABEL_318;
          }
          sub_20E9F28F0(v276, 0);
          v166 = *v7 - 8;
          *v7 = v166;
          v167 = *v8;
          v22 = *v9;
          while (1)
          {
            while (1)
            {
              if (v167 == (void *)v22)
                goto LABEL_470;
              v169 = *(_DWORD *)(v22 - 8);
              if (v169)
                break;
              *(_QWORD *)(v166 - 8) += 24;
              v170 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v170;
              if (v170)
                goto LABEL_318;
LABEL_328:
              v22 = *v9 - 8;
              *v9 = v22;
              v166 = *v7 - 8;
              *v7 = v166;
              v167 = *v8;
            }
            if (v169 == 2)
            {
              *(_QWORD *)(v166 - 8) += 24;
              v168 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v168;
              if (v168)
                goto LABEL_388;
              goto LABEL_328;
            }
            if (v169 == 1)
              goto LABEL_462;
          }
        case 32:
          sub_20E9F1ED0((uint64_t)v276, v13, v16);
          v20 = *v282 + 1;
          *v282 = v20;
          v155 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v157 = *(_DWORD *)(v22 - 8);
            if (v157)
            {
              if (v157 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v156 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v156;
                if (v156)
                  goto LABEL_388;
LABEL_296:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v155 = *v8;
              }
              else if (v157 == 1)
              {
                goto LABEL_446;
              }
              if (v155 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v158 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v158;
          if (!v158)
            goto LABEL_296;
          goto LABEL_318;
        case 33:
          sub_20E9F221C((uint64_t)v276, v13, v16);
          v20 = *v282 + 1;
          *v282 = v20;
          v159 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v161 = *(_DWORD *)(v22 - 8);
            if (v161)
            {
              if (v161 == 2)
              {
                *(_QWORD *)(*v7 - 8) += 24;
                v160 = *(_DWORD *)(v22 - 4) - 1;
                *(_DWORD *)(v22 - 4) = v160;
                if (v160)
                  goto LABEL_388;
LABEL_307:
                v22 = *v9 - 8;
                *v9 = v22;
                *v7 -= 8;
                v159 = *v8;
              }
              else if (v161 == 1)
              {
                goto LABEL_446;
              }
              if (v159 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v162 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v162;
          if (!v162)
            goto LABEL_307;
          goto LABEL_318;
        case 34:
          sub_20E9F2098((uint64_t)v276, v13, v16);
          v20 = *v282 + 1;
          *v282 = v20;
          v139 = *v8;
          v22 = *v9;
          if (*v8 == (void *)*v9)
            goto LABEL_464;
          while (2)
          {
            v141 = *(_DWORD *)(v22 - 8);
            if (!v141)
            {
              *(_QWORD *)(*v7 - 8) += 24;
              v142 = *(_DWORD *)(v22 - 4) - 1;
              *(_DWORD *)(v22 - 4) = v142;
              if (v142)
                goto LABEL_318;
LABEL_259:
              v22 = *v9 - 8;
              *v9 = v22;
              *v7 -= 8;
              v139 = *v8;
LABEL_260:
              if (v139 == (void *)v22)
                goto LABEL_463;
              continue;
            }
            break;
          }
          if (v141 != 2)
          {
            if (v141 == 1)
              goto LABEL_446;
            goto LABEL_260;
          }
          *(_QWORD *)(*v7 - 8) += 24;
          v140 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v140;
          if (!v140)
            goto LABEL_259;
LABEL_388:
          v15 = 0;
          v12 = 0;
          *(_DWORD *)(v22 - 8) = 1;
          *(_DWORD *)(a1 + 32) = 0;
          v11 = *(unsigned __int8 **)(a1 + 16);
          if (v11 == v14)
            goto LABEL_473;
          break;
        default:
          goto LABEL_537;
      }
    }
    v17 = (char)*v11;
    v18 = *v11;
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = *(_QWORD *)(*v7 - 8);
      *(_DWORD *)v19 = 2;
      *(_QWORD *)(v19 + 8) = v18;
      v20 = *v282 + 1;
      *v282 = v20;
      v21 = *v8;
      v22 = *v9;
      if (*v8 == (void *)*v9)
        goto LABEL_464;
      while (1)
      {
        v24 = *(_DWORD *)(v22 - 8);
        if (!v24)
          break;
        if (v24 == 2)
        {
          *(_QWORD *)(*v7 - 8) += 24;
          v23 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v23;
          if (v23)
            goto LABEL_460;
LABEL_11:
          v22 = *v9 - 8;
          *v9 = v22;
          *v7 -= 8;
          v21 = *v8;
          goto LABEL_12;
        }
        if (v24 == 1)
          goto LABEL_446;
LABEL_12:
        if (v21 == (void *)v22)
          goto LABEL_463;
      }
      *(_QWORD *)(*v7 - 8) += 24;
      v25 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v25;
      if (v25)
        goto LABEL_318;
      goto LABEL_11;
    }
    if (v17 >= 0xFFFFFFE0)
    {
      v28 = *(_QWORD *)(*v7 - 8);
      *(_DWORD *)v28 = 3;
      *(_QWORD *)(v28 + 8) = v17;
      v20 = *v282 + 1;
      *v282 = v20;
      v29 = *v8;
      v22 = *v9;
      if (*v8 == (void *)*v9)
        goto LABEL_464;
      while (1)
      {
        v31 = *(_DWORD *)(v22 - 8);
        if (!v31)
          break;
        if (v31 == 2)
        {
          *(_QWORD *)(*v7 - 8) += 24;
          v30 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v30;
          if (v30)
            goto LABEL_460;
LABEL_28:
          v22 = *v9 - 8;
          *v9 = v22;
          *v7 -= 8;
          v29 = *v8;
          goto LABEL_29;
        }
        if (v31 == 1)
          goto LABEL_446;
LABEL_29:
        if (v29 == (void *)v22)
          goto LABEL_463;
      }
      *(_QWORD *)(*v7 - 8) += 24;
      v32 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v32;
      if (v32)
        goto LABEL_318;
      goto LABEL_28;
    }
    if (v18 >= 0xC4)
    {
      *(_QWORD *)(a1 + 24) = dword_2102EF4B4[(v18 - 196)];
      v15 = *v11 & 0x1F;
LABEL_50:
      *(_DWORD *)(a1 + 32) = v15;
      goto LABEL_5;
    }
    if ((v18 & 0xE0) == 0xA0)
    {
      v36 = v18 & 0x1F;
      *(_QWORD *)(a1 + 24) = v36;
      if ((_DWORD)v36)
      {
        v15 = 32;
        goto LABEL_50;
      }
      sub_20E9F1ED0((uint64_t)v276, v13, 0);
      v20 = *v282 + 1;
      *v282 = v20;
      v191 = *v8;
      v22 = *v9;
      if (*v8 == (void *)*v9)
      {
LABEL_464:
        v217 = v20 - *v280;
        v218 = 1;
        a2 = v277;
        *(_QWORD *)(a1 + 88) = v217;
        v219 = v217 > v4;
        v220 = (unsigned __int8 *)(v217 - v4);
        if (!v219)
          goto LABEL_479;
        goto LABEL_478;
      }
      while (1)
      {
        v193 = *(_DWORD *)(v22 - 8);
        if (!v193)
          break;
        if (v193 == 2)
        {
          *(_QWORD *)(*v7 - 8) += 24;
          v192 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v192;
          if (v192)
            goto LABEL_460;
LABEL_393:
          v22 = *v9 - 8;
          *v9 = v22;
          *v7 -= 8;
          v191 = *v8;
          goto LABEL_394;
        }
        if (v193 == 1)
          goto LABEL_446;
LABEL_394:
        if (v191 == (void *)v22)
          goto LABEL_463;
      }
      *(_QWORD *)(*v7 - 8) += 24;
      v194 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v194;
      if (v194)
        goto LABEL_318;
      goto LABEL_393;
    }
    if ((v17 & 0xFFFFFFF0) == 0xFFFFFF90)
    {
      *v282 = (uint64_t)(v11 + 1);
      v164 = v18 & 0xF;
      if ((v18 & 0xF) != 0)
      {
        sub_20E9F23EC(v8, 0, v18 & 0xF);
        sub_20E9F2560(v276, v164);
        goto LABEL_318;
      }
      sub_20E9F2560(v276, 0);
      v166 = *v7 - 8;
      *v7 = v166;
      v200 = *v8;
      v22 = *v9;
      while (1)
      {
        while (1)
        {
          if (v200 == (void *)v22)
            goto LABEL_470;
          v202 = *(_DWORD *)(v22 - 8);
          if (v202)
            break;
          *(_QWORD *)(v166 - 8) += 24;
          v203 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v203;
          if (v203)
            goto LABEL_318;
LABEL_417:
          v22 = *v9 - 8;
          *v9 = v22;
          v166 = *v7 - 8;
          *v7 = v166;
          v200 = *v8;
        }
        if (v202 == 2)
        {
          *(_QWORD *)(v166 - 8) += 24;
          v201 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v201;
          if (v201)
            goto LABEL_460;
          goto LABEL_417;
        }
        if (v202 == 1)
          goto LABEL_462;
      }
    }
    if (v18 <= 0x8F)
    {
      *v282 = (uint64_t)(v11 + 1);
      v165 = v17 & 0xF;
      if ((v17 & 0xF) != 0)
      {
        sub_20E9F23EC(v8, 1u, v17 & 0xF);
        sub_20E9F28F0(v276, v165);
        goto LABEL_318;
      }
      sub_20E9F28F0(v276, 0);
      v166 = *v7 - 8;
      *v7 = v166;
      v204 = *v8;
      v22 = *v9;
      while (1)
      {
        while (1)
        {
          if (v204 == (void *)v22)
          {
LABEL_470:
            v222 = *v282 - *v280;
            v218 = 1;
            a2 = v277;
            *(_QWORD *)(a1 + 88) = v222;
            v219 = v222 > v4;
            v220 = (unsigned __int8 *)(v222 - v4);
            if (!v219)
              goto LABEL_479;
LABEL_478:
            *(_QWORD *)(a1 + 96) += v220;
            goto LABEL_479;
          }
          v206 = *(_DWORD *)(v22 - 8);
          if (v206)
            break;
          *(_QWORD *)(v166 - 8) += 24;
          v207 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v207;
          if (v207)
            goto LABEL_318;
LABEL_427:
          v22 = *v9 - 8;
          *v9 = v22;
          v166 = *v7 - 8;
          *v7 = v166;
          v204 = *v8;
        }
        if (v206 == 2)
        {
          *(_QWORD *)(v166 - 8) += 24;
          v205 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v205;
          if (v205)
            goto LABEL_460;
          goto LABEL_427;
        }
        if (v206 == 1)
          goto LABEL_462;
      }
    }
    if ((_DWORD)v18 != 192)
    {
      if ((_DWORD)v18 != 195)
      {
        if ((_DWORD)v18 != 194)
        {
LABEL_537:
          *(_QWORD *)(a1 + 88) = &v11[-*(_QWORD *)(a1 + 8)];
          sub_20E9F2050();
        }
        v195 = *(_QWORD *)(*v7 - 8);
        *(_DWORD *)v195 = 1;
        *(_BYTE *)(v195 + 8) = 0;
        v20 = *v282 + 1;
        *v282 = v20;
        v196 = *v8;
        v22 = *v9;
        if (*v8 == (void *)*v9)
          goto LABEL_464;
        while (1)
        {
          v198 = *(_DWORD *)(v22 - 8);
          if (!v198)
            break;
          if (v198 == 2)
          {
            *(_QWORD *)(*v7 - 8) += 24;
            v197 = *(_DWORD *)(v22 - 4) - 1;
            *(_DWORD *)(v22 - 4) = v197;
            if (v197)
              goto LABEL_460;
LABEL_407:
            v22 = *v9 - 8;
            *v9 = v22;
            *v7 -= 8;
            v196 = *v8;
            goto LABEL_408;
          }
          if (v198 == 1)
            goto LABEL_446;
LABEL_408:
          if (v196 == (void *)v22)
            goto LABEL_463;
        }
        *(_QWORD *)(*v7 - 8) += 24;
        v199 = *(_DWORD *)(v22 - 4) - 1;
        *(_DWORD *)(v22 - 4) = v199;
        if (v199)
          goto LABEL_318;
        goto LABEL_407;
      }
      v208 = *(_QWORD *)(*v7 - 8);
      *(_DWORD *)v208 = 1;
      *(_BYTE *)(v208 + 8) = 1;
      v20 = *v282 + 1;
      *v282 = v20;
      v209 = *v8;
      v22 = *v9;
      if (*v8 == (void *)*v9)
        goto LABEL_464;
      while (1)
      {
        v211 = *(_DWORD *)(v22 - 8);
        if (!v211)
          break;
        if (v211 == 2)
        {
          *(_QWORD *)(*v7 - 8) += 24;
          v210 = *(_DWORD *)(v22 - 4) - 1;
          *(_DWORD *)(v22 - 4) = v210;
          if (v210)
            goto LABEL_460;
LABEL_438:
          v22 = *v9 - 8;
          *v9 = v22;
          *v7 -= 8;
          v209 = *v8;
          goto LABEL_439;
        }
        if (v211 == 1)
          goto LABEL_446;
LABEL_439:
        if (v209 == (void *)v22)
          goto LABEL_463;
      }
      *(_QWORD *)(*v7 - 8) += 24;
      v212 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v212;
      if (v212)
        goto LABEL_318;
      goto LABEL_438;
    }
    v166 = *v7;
    **(_DWORD **)(*v7 - 8) = 0;
    v20 = (uint64_t)(v11 + 1);
    *v282 = (uint64_t)(v11 + 1);
    v213 = *v8;
    v22 = *v9;
    if (*v8 == (void *)*v9)
      goto LABEL_464;
    while (1)
    {
      v215 = *(_DWORD *)(v22 - 8);
      if (v215)
        break;
      *(_QWORD *)(v166 - 8) += 24;
      v216 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v216;
      if (v216)
        goto LABEL_318;
LABEL_452:
      v22 = *v9 - 8;
      *v9 = v22;
      v166 = *v7 - 8;
      *v7 = v166;
      v213 = *v8;
LABEL_453:
      if (v213 == (void *)v22)
      {
LABEL_463:
        v20 = *v282;
        goto LABEL_464;
      }
    }
    if (v215 == 2)
    {
      *(_QWORD *)(v166 - 8) += 24;
      v214 = *(_DWORD *)(v22 - 4) - 1;
      *(_DWORD *)(v22 - 4) = v214;
      if (v214)
      {
LABEL_460:
        v15 = 0;
        v12 = 0;
        *(_DWORD *)(v22 - 8) = 1;
        *(_DWORD *)(a1 + 32) = 0;
        v11 = *(unsigned __int8 **)(a1 + 16);
        if (v11 == v14)
          break;
        goto LABEL_3;
      }
      goto LABEL_452;
    }
    if (v215 != 1)
      goto LABEL_453;
LABEL_462:
    v15 = 0;
    v12 = 0;
LABEL_447:
    *(_QWORD *)(v166 - 8) += 24;
    *(_DWORD *)(v22 - 8) = 2;
    *(_DWORD *)(a1 + 32) = 0;
    v11 = *(unsigned __int8 **)(a1 + 16);
  }
  while (v11 != v14);
LABEL_473:
  v218 = 0;
  v223 = &v14[-*v280];
  a2 = v277;
  *(_QWORD *)(a1 + 88) = v223;
  v219 = (unint64_t)v223 > v4;
  v220 = &v223[-v4];
  if (v219)
    goto LABEL_478;
LABEL_479:
  while (!v218)
  {
    v230 = *(_QWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v230)
    {
      for (i = (char *)v230[4]; i != (char *)v230[6]; i -= 16)
      {
        v233 = (void (*)(uint64_t))*((_QWORD *)i - 2);
        v232 = *((_QWORD *)i - 1);
        v233(v232);
      }
      free(i);
      v234 = (_QWORD *)v230[3];
      if (v234)
      {
        do
        {
          v235 = (_QWORD *)*v234;
          free(v234);
          v234 = v235;
        }
        while (v235);
      }
      free(v230);
    }
    *(_DWORD *)a2 = 0;
    sub_20E9EF7FC((_QWORD *)a1, (uint64_t)"RefillBuffer", (const char *)&unk_21024E22F);
    if (*(_QWORD *)(a1 + 264) >= 0x400uLL)
      v266 = 1024;
    else
      v266 = *(_QWORD *)(a1 + 264);
    if (*(_QWORD *)(a1 + 80) < v266)
      sub_20E9EF4BC((uint64_t)v280, v266);
    std::istream::read();
    v267 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v5 = *(_QWORD *)(a1 + 72) + v267;
    v268 = *(_QWORD *)(a1 + 80) - v267;
    *(_QWORD *)(a1 + 72) = v5;
    *(_QWORD *)(a1 + 80) = v268;
    v4 = *(_QWORD *)(a1 + 88);
    v6 = *(_QWORD *)(a1 + 96) + v5 - v4;
    v9 = v278;
    v8 = v279;
    v10 = *(_QWORD *)(a1 + 64);
    v11 = (unsigned __int8 *)(v10 + v4);
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = v10 + v4;
    if (v4 != v5)
      goto LABEL_2;
LABEL_476:
    v218 = 0;
    *(_QWORD *)(a1 + 88) = v5;
    v219 = v5 > v4;
    v220 = (unsigned __int8 *)(v5 - v4);
    if (v219)
      goto LABEL_478;
  }
  v224 = *(_QWORD **)(a1 + 248);
  v225 = (void (**)(void *))v224[6];
  if (v225)
  {
    if (*(_BYTE *)(a1 + 240))
    {
      v226 = *(unsigned int **)(a1 + 64);
      v227 = (void (**)(void *))v224[4];
      if (v227 == (void (**)(void *))v224[5])
      {
        v236 = v6;
        v238 = (char *)v227 - (char *)v225;
        v237 = v227 == v225;
        v239 = v227 - v225;
        if (v237)
          v240 = 4;
        else
          v240 = v239;
        v241 = (char *)malloc_type_realloc(v225, 16 * v240, 0x80040803F642BuLL);
        if (!v241)
        {
          exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          v271 = std::bad_alloc::bad_alloc(exception);
          __cxa_throw(v271, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
        }
        v224[5] = &v241[16 * v240];
        v224[6] = v241;
        v227 = (void (**)(void *))&v241[v238];
        *(_QWORD *)&v241[v238] = sub_20E9EF4A0;
        v228 = (unsigned int **)&v241[v238 + 8];
        v229 = *(unsigned int **)(a1 + 64);
        a2 = v277;
        v6 = v236;
      }
      else
      {
        *v227 = sub_20E9EF4A0;
        v228 = (unsigned int **)(v227 + 1);
        v229 = v226;
      }
      *v228 = v226;
      v224[4] = v227 + 2;
      *(_BYTE *)(a1 + 240) = 0;
      do
        v242 = __ldaxr(v229);
      while (__stlxr(v242 + 1, v229));
    }
    v243 = malloc_type_malloc(0x38uLL, 0x2A498C84uLL);
    v244 = v243;
    if (!v243)
    {
      v274 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v275 = std::bad_alloc::bad_alloc(v274);
      __cxa_throw(v275, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    *v243 = 0x2000;
    v245 = malloc_type_malloc(0x2008uLL, 0x1DB03DE0uLL);
    if (!v245)
    {
      v272 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v273 = std::bad_alloc::bad_alloc(v272);
      __cxa_throw(v273, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v244[3] = v245;
    *v245 = 0;
    v244[1] = 0x2000;
    v244[2] = v245 + 1;
    v244[4] = 0;
    v244[5] = 0;
    v244[6] = 0;
    v246 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 232) = v244;
    *(_QWORD *)(a1 + 248) = v244;
    *(_QWORD *)(a1 + 256) = v244;
    v247 = *(_QWORD **)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v246;
    if (v247)
    {
      for (j = (char *)v247[4]; j != (char *)v247[6]; j -= 16)
      {
        v250 = (void (*)(uint64_t))*((_QWORD *)j - 2);
        v249 = *((_QWORD *)j - 1);
        v250(v249);
      }
      free(j);
      v251 = (_QWORD *)v247[3];
      if (v251)
      {
        do
        {
          v252 = (_QWORD *)*v251;
          free(v251);
          v251 = v252;
        }
        while (v252);
      }
      free(v247);
    }
  }
  *(_OWORD *)a2 = *(_OWORD *)v281;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v281 + 16);
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  v253 = *(_QWORD **)(a1 + 208);
  v254 = *(_BYTE **)(a1 + 216);
  v255 = v254 - (_BYTE *)v253;
  if (v254 != (_BYTE *)v253)
  {
    if ((unint64_t)v255 >= 9)
    {
      *v7 = (uint64_t)(v253 + 1);
      *(_DWORD *)(a1 + 184) = 0;
      *v253 = v281;
      *(_QWORD *)(a1 + 96) = 0;
      goto LABEL_533;
    }
LABEL_521:
    *(_DWORD *)(a1 + 184) = 0;
    *v253 = v281;
    *(_QWORD *)(a1 + 96) = 0;
    goto LABEL_533;
  }
  v256 = v255 >> 3;
  v257 = 1 - (v255 >> 3);
  v258 = *(_QWORD *)(a1 + 224);
  if (v257 > (v258 - (uint64_t)v254) >> 3)
  {
    v259 = v6;
    v260 = v258 - (_QWORD)v253;
    v261 = v260 >> 2;
    if ((unint64_t)(v260 >> 2) <= 1)
      v261 = 1;
    if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF8)
      v262 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v262 = v261;
    if (v262 >> 61)
      sub_20E877A38();
    v263 = (char *)operator new(8 * v262);
    v264 = 8 * v257;
    v265 = &v263[8 * v256];
    bzero(v265, v264);
    *(_QWORD *)(a1 + 208) = v265;
    *(_QWORD *)(a1 + 216) = &v265[v264];
    *(_QWORD *)(a1 + 224) = &v263[8 * v262];
    v6 = v259;
    if (v254)
      operator delete(v254);
    v253 = *(_QWORD **)(a1 + 208);
    goto LABEL_521;
  }
  if (v255 != 8)
  {
    bzero(*(void **)(a1 + 216), 8 * v257);
    v254 += 8 * v257;
  }
  *v7 = (uint64_t)v254;
  v269 = *(_QWORD **)(a1 + 208);
  *(_DWORD *)(a1 + 184) = 0;
  *v269 = v281;
  *(_QWORD *)(a1 + 96) = 0;
LABEL_533:
  *(_QWORD *)(a1 + 280) += v6 + *(_QWORD *)(a1 + 88) - (*(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 72));
}

void sub_20E9F1E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_20E9F1E54(a11);
  _Unwind_Resume(a1);
}

void sub_20E9F1E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_20E9F1E54(a11);
  _Unwind_Resume(a1);
}

void sub_20E9F1E38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20E9F1E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F1E54(uint64_t a1)
{
  _QWORD *v2;
  char *i;
  uint64_t v4;
  void (*v5)(uint64_t);
  _QWORD *v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    for (i = (char *)v2[4]; i != (char *)v2[6]; i -= 16)
    {
      v5 = (void (*)(uint64_t))*((_QWORD *)i - 2);
      v4 = *((_QWORD *)i - 1);
      v5(v4);
    }
    free(i);
    v6 = (_QWORD *)v2[3];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        free(v6);
        v6 = v7;
      }
      while (v7);
    }
    free(v2);
  }
  return a1;
}

void *sub_20E9F1ED0(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3;
  uint64_t v7;
  void *result;
  size_t *v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;

  v3 = a3;
  if (*(_QWORD *)(a1 + 32) < (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E9F239C(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C9B7500, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  *(_DWORD *)v7 = 5;
  if (*(_QWORD *)a1
    && (result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))a1)(5, a3, *(_QWORD *)(a1 + 8)),
        (_DWORD)result))
  {
    *(_QWORD *)(v7 + 16) = a2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    v9 = *(size_t **)(a1 + 112);
    v11 = v9[1];
    v10 = v9[2];
    v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = &v12[v3 - v10];
    v14 = v11 >= (unint64_t)v13;
    v15 = v11 - (_QWORD)v13;
    if (v14)
    {
      v9[1] = v15;
      v9[2] = (size_t)&v12[v3];
    }
    else
    {
      v16 = v3 + 7;
      v17 = *v9;
      while (v17 < v16)
      {
        v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          v17 = v3 + 7;
          break;
        }
      }
      v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *v19 = v9[3];
      v9[1] = v17 - v16;
      v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    result = memcpy(v12, a2, v3);
    *(_QWORD *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3;
  return result;
}

void sub_20E9F203C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E9F2050()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  sub_20E9F2C30(exception);
  __cxa_throw(exception, (struct type_info *)&unk_24C9B7600, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_20E9F2084(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_20E9F2098(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3;
  uint64_t v7;
  void *result;
  size_t *v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;

  v3 = a3;
  if (*(_QWORD *)(a1 + 48) < (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E9F2C80(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C9B7640, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  *(_DWORD *)v7 = 9;
  if (*(_QWORD *)a1
    && (result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))a1)(9, a3, *(_QWORD *)(a1 + 8)),
        (_DWORD)result))
  {
    *(_QWORD *)(v7 + 16) = a2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    v9 = *(size_t **)(a1 + 112);
    v11 = v9[1];
    v10 = v9[2];
    v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = &v12[v3 - v10];
    v14 = v11 >= (unint64_t)v13;
    v15 = v11 - (_QWORD)v13;
    if (v14)
    {
      v9[1] = v15;
      v9[2] = (size_t)&v12[v3];
    }
    else
    {
      v16 = v3 + 7;
      v17 = *v9;
      while (v17 < v16)
      {
        v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          v17 = v3 + 7;
          break;
        }
      }
      v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *v19 = v9[3];
      v9[1] = v17 - v16;
      v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    result = memcpy(v12, a2, v3);
    *(_QWORD *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3 - 1;
  return result;
}

void sub_20E9F2208(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_20E9F221C(uint64_t a1, const void *a2, unsigned int a3)
{
  size_t v3;
  uint64_t v7;
  void *result;
  size_t *v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  BOOL v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::bad_alloc *v21;
  std::bad_alloc *v22;

  v3 = a3;
  if (*(_QWORD *)(a1 + 40) < (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E9F2CD0(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C9B7680, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 96) - 8);
  *(_DWORD *)v7 = 8;
  if (*(_QWORD *)a1
    && (result = (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))a1)(8, a3, *(_QWORD *)(a1 + 8)),
        (_DWORD)result))
  {
    *(_QWORD *)(v7 + 16) = a2;
    *(_BYTE *)(a1 + 120) = 1;
  }
  else
  {
    v9 = *(size_t **)(a1 + 112);
    v11 = v9[1];
    v10 = v9[2];
    v12 = (char *)((v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    v13 = &v12[v3 - v10];
    v14 = v11 >= (unint64_t)v13;
    v15 = v11 - (_QWORD)v13;
    if (v14)
    {
      v9[1] = v15;
      v9[2] = (size_t)&v12[v3];
    }
    else
    {
      v16 = v3 + 7;
      v17 = *v9;
      while (v17 < v16)
      {
        v18 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v18)
        {
          v17 = v3 + 7;
          break;
        }
      }
      v19 = malloc_type_malloc(v17 + 8, 0xB5DF8709uLL);
      if (!v19)
      {
        v21 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v22 = std::bad_alloc::bad_alloc(v21);
        __cxa_throw(v22, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      *v19 = v9[3];
      v9[1] = v17 - v16;
      v9[2] = (size_t)v19 + v16 + 8;
      v9[3] = (size_t)v19;
      v12 = (char *)((unint64_t)(v19 + 1) & 0xFFFFFFFFFFFFFFF8);
    }
    result = memcpy(v12, a2, v3);
    *(_QWORD *)(v7 + 16) = v12;
  }
  *(_DWORD *)(v7 + 8) = a3;
  return result;
}

void sub_20E9F2388(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_20E9F239C(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "str size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9B7528;
  return result;
}

void sub_20E9F23C8(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9F23EC(void **a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;

  v7 = (unint64_t *)a1[1];
  v6 = (unint64_t)a1[2];
  v8 = (char *)v7;
  if ((unint64_t)v7 >= v6)
  {
    v10 = (char *)*a1;
    v11 = (char *)v7 - (_BYTE *)*a1;
    v12 = v11 >> 3;
    v13 = (v11 >> 3) + 1;
    if (v13 >> 61)
      sub_20E867F44();
    v14 = v6 - (_QWORD)v10;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        sub_20E877A38();
      v16 = operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (unint64_t *)&v16[8 * v12];
    *v17 = a2 | (unint64_t)(a3 << 32);
    v9 = v17 + 1;
    if (v7 != (unint64_t *)v10)
    {
      v18 = (char *)v7 - v10 - 8;
      if (v18 < 0x58)
        goto LABEL_28;
      if ((unint64_t)((char *)v7 - v16 - v11) < 0x20)
        goto LABEL_28;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (char *)&v7[v20 / 0xFFFFFFFFFFFFFFF8];
      v17 = (unint64_t *)((char *)v17 - v20);
      v21 = &v16[8 * v12 - 16];
      v22 = (__int128 *)(v7 - 2);
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v25 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *--v17 = v25;
        }
        while (v8 != v10);
      }
      v8 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v9;
    a1[2] = &v16[8 * v15];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v7 = a2 | (unint64_t)(a3 << 32);
    v9 = v7 + 1;
  }
  a1[1] = v9;
}

void sub_20E9F2560(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  std::runtime_error *exception;
  std::runtime_error *v39;
  std::bad_alloc *v40;
  std::bad_alloc *v41;

  if (a1[2] < (unint64_t)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E9F2850(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C9B7540, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v3 = a1[12];
  if (a1[7] < (unint64_t)((v3 - a1[11]) >> 3))
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E9F287C(v39);
    __cxa_throw(v39, (struct type_info *)&unk_24C9B7558, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v4 = *(_QWORD *)(v3 - 8);
  *(_DWORD *)v4 = 6;
  *(_DWORD *)(v4 + 8) = a2;
  if (!a2)
  {
    v9 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
    goto LABEL_14;
  }
  v5 = (uint64_t *)a1[14];
  v6 = 24 * a2;
  v8 = v5[1];
  v7 = v5[2];
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 - v7 + v6;
  v11 = v8 >= v10;
  v12 = v8 - v10;
  if (v11)
  {
    v5[1] = v12;
    v5[2] = v9 + v6;
    *(_QWORD *)(v4 + 16) = v9;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
LABEL_14:
    *v18 = v9;
    v19 = (uint64_t)(v18 + 1);
    goto LABEL_36;
  }
  v13 = v6 | 7;
  v14 = *v5;
  while (v14 < v13)
  {
    v15 = v14 <= 0;
    v14 *= 2;
    if (v15)
    {
      v14 = v6 | 7;
      break;
    }
  }
  v16 = malloc_type_malloc(v14 + 8, 0xB5DF8709uLL);
  if (!v16)
  {
    v40 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v41 = std::bad_alloc::bad_alloc(v40);
    __cxa_throw(v41, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *v16 = v5[3];
  v5[1] = v14 - v13;
  v5[2] = (uint64_t)v16 + v13 + 8;
  v5[3] = (uint64_t)v16;
  v9 = (unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 16) = v9;
  v18 = (unint64_t *)a1[12];
  v17 = a1[13];
  if ((unint64_t)v18 < v17)
    goto LABEL_14;
LABEL_16:
  v20 = (char *)a1[11];
  v21 = ((char *)v18 - v20) >> 3;
  v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 61)
    sub_20E867F44();
  v23 = v17 - (_QWORD)v20;
  if (v23 >> 2 > v22)
    v22 = v23 >> 2;
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
    v24 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v24 = v22;
  if (v24)
  {
    if (v24 >> 61)
      sub_20E877A38();
    v25 = (char *)operator new(8 * v24);
    v26 = (unint64_t *)&v25[8 * v21];
    v27 = &v25[8 * v24];
    *v26 = v9;
    v19 = (uint64_t)(v26 + 1);
    v28 = (char *)((char *)v18 - v20);
    if (v18 == (unint64_t *)v20)
      goto LABEL_34;
    goto LABEL_27;
  }
  v25 = 0;
  v26 = (unint64_t *)(8 * v21);
  v27 = 0;
  *(_QWORD *)(8 * v21) = v9;
  v19 = 8 * v21 + 8;
  v28 = (char *)((char *)v18 - v20);
  if (v18 != (unint64_t *)v20)
  {
LABEL_27:
    v29 = (unint64_t)(v28 - 8);
    if (v29 < 0x58)
      goto LABEL_44;
    if ((unint64_t)(v20 - v25) < 0x20)
      goto LABEL_44;
    v30 = (v29 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v18[v31 / 0xFFFFFFFFFFFFFFF8];
    v26 = (unint64_t *)((char *)v26 - v31);
    v33 = &v25[8 * v21 - 16];
    v34 = v18 - 2;
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 32;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    v18 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        v37 = *--v18;
        *--v26 = v37;
      }
      while (v18 != (unint64_t *)v20);
    }
    v18 = (unint64_t *)a1[11];
  }
LABEL_34:
  a1[11] = v26;
  a1[12] = v19;
  a1[13] = v27;
  if (v18)
    operator delete(v18);
LABEL_36:
  a1[12] = v19;
}

void sub_20E9F2828(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E9F283C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_20E9F2850(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "array size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9B7580;
  return result;
}

std::runtime_error *sub_20E9F287C(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "depth size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9B75A8;
  return result;
}

void sub_20E9F28A8(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9F28CC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20E9F28F0(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t *v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  std::runtime_error *exception;
  std::runtime_error *v39;
  std::bad_alloc *v40;
  std::bad_alloc *v41;

  if (a1[3] < (unint64_t)a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E9F2BE0(exception);
    __cxa_throw(exception, (struct type_info *)&unk_24C9B75C0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v3 = a1[12];
  if (a1[7] < (unint64_t)((v3 - a1[11]) >> 3))
  {
    v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_20E9F287C(v39);
    __cxa_throw(v39, (struct type_info *)&unk_24C9B7558, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v4 = *(_QWORD *)(v3 - 8);
  *(_DWORD *)v4 = 7;
  *(_DWORD *)(v4 + 8) = a2;
  if (!a2)
  {
    v9 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
    goto LABEL_14;
  }
  v5 = (uint64_t *)a1[14];
  v6 = 48 * a2;
  v8 = v5[1];
  v7 = v5[2];
  v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = v9 - v7 + v6;
  v11 = v8 >= v10;
  v12 = v8 - v10;
  if (v11)
  {
    v5[1] = v12;
    v5[2] = v9 + v6;
    *(_QWORD *)(v4 + 16) = v9;
    v18 = (unint64_t *)a1[12];
    v17 = a1[13];
    if ((unint64_t)v18 >= v17)
      goto LABEL_16;
LABEL_14:
    *v18 = v9;
    v19 = (uint64_t)(v18 + 1);
    goto LABEL_36;
  }
  v13 = v6 | 7;
  v14 = *v5;
  while (v14 < v13)
  {
    v15 = v14 <= 0;
    v14 *= 2;
    if (v15)
    {
      v14 = v6 | 7;
      break;
    }
  }
  v16 = malloc_type_malloc(v14 + 8, 0xB5DF8709uLL);
  if (!v16)
  {
    v40 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v41 = std::bad_alloc::bad_alloc(v40);
    __cxa_throw(v41, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  *v16 = v5[3];
  v5[1] = v14 - v13;
  v5[2] = (uint64_t)v16 + v13 + 8;
  v5[3] = (uint64_t)v16;
  v9 = (unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v4 + 16) = v9;
  v18 = (unint64_t *)a1[12];
  v17 = a1[13];
  if ((unint64_t)v18 < v17)
    goto LABEL_14;
LABEL_16:
  v20 = (char *)a1[11];
  v21 = ((char *)v18 - v20) >> 3;
  v22 = v21 + 1;
  if ((unint64_t)(v21 + 1) >> 61)
    sub_20E867F44();
  v23 = v17 - (_QWORD)v20;
  if (v23 >> 2 > v22)
    v22 = v23 >> 2;
  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
    v24 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v24 = v22;
  if (v24)
  {
    if (v24 >> 61)
      sub_20E877A38();
    v25 = (char *)operator new(8 * v24);
    v26 = (unint64_t *)&v25[8 * v21];
    v27 = &v25[8 * v24];
    *v26 = v9;
    v19 = (uint64_t)(v26 + 1);
    v28 = (char *)((char *)v18 - v20);
    if (v18 == (unint64_t *)v20)
      goto LABEL_34;
    goto LABEL_27;
  }
  v25 = 0;
  v26 = (unint64_t *)(8 * v21);
  v27 = 0;
  *(_QWORD *)(8 * v21) = v9;
  v19 = 8 * v21 + 8;
  v28 = (char *)((char *)v18 - v20);
  if (v18 != (unint64_t *)v20)
  {
LABEL_27:
    v29 = (unint64_t)(v28 - 8);
    if (v29 < 0x58)
      goto LABEL_44;
    if ((unint64_t)(v20 - v25) < 0x20)
      goto LABEL_44;
    v30 = (v29 >> 3) + 1;
    v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    v32 = &v18[v31 / 0xFFFFFFFFFFFFFFF8];
    v26 = (unint64_t *)((char *)v26 - v31);
    v33 = &v25[8 * v21 - 16];
    v34 = v18 - 2;
    v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *(_OWORD *)v34;
      *((_OWORD *)v33 - 1) = *((_OWORD *)v34 - 1);
      *(_OWORD *)v33 = v36;
      v33 -= 32;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    v18 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        v37 = *--v18;
        *--v26 = v37;
      }
      while (v18 != (unint64_t *)v20);
    }
    v18 = (unint64_t *)a1[11];
  }
LABEL_34:
  a1[11] = v26;
  a1[12] = v19;
  a1[13] = v27;
  if (v18)
    operator delete(v18);
LABEL_36:
  a1[12] = v19;
}

void sub_20E9F2BB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20E9F2BCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_20E9F2BE0(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "map size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9B75E8;
  return result;
}

void sub_20E9F2C0C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

std::runtime_error *sub_20E9F2C30(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "parse error");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9B7628;
  return result;
}

void sub_20E9F2C5C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

std::runtime_error *sub_20E9F2C80(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "ext size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9B7668;
  return result;
}

void sub_20E9F2CAC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

std::runtime_error *sub_20E9F2CD0(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "bin size overflow");
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9B76A8;
  return result;
}

void sub_20E9F2CFC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t **sub_20E9F2D20(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  const void *v5;
  size_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  BOOL v12;
  char *v13;
  std::bad_alloc *exception;
  std::bad_alloc *v16;

  sub_20E9F2E14(a2, *a3);
  v5 = (const void *)*((_QWORD *)a3 + 1);
  v6 = *a3;
  v7 = *a2;
  v8 = (*a2)[2];
  v9 = **a2;
  if (v8 - v9 >= v6)
  {
    v13 = (char *)v7[1];
  }
  else
  {
    if (v8)
      v10 = 2 * v8;
    else
      v10 = 0x2000;
    v11 = v9 + v6;
    while (v10 < v11)
    {
      v12 = (uint64_t)v10 <= 0;
      v10 *= 2;
      if (v12)
      {
        v10 = v11;
        break;
      }
    }
    v13 = (char *)malloc_type_realloc((void *)v7[1], v10, 0xAD6A59EEuLL);
    if (!v13)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v16 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v16, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v7[1] = (uint64_t)v13;
    v7[2] = v10;
    v9 = *v7;
  }
  memcpy(&v13[v9], v5, v6);
  *v7 += v6;
  return a2;
}

uint64_t **sub_20E9F2E14(uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  BOOL v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  std::bad_alloc *exception;
  std::bad_alloc *v27;

  if (a2 > 0xFF)
  {
    if (!HIWORD(a2))
    {
      v4 = *a1;
      v11 = (*a1)[2];
      v12 = **a1;
      if ((unint64_t)(v11 - v12) >= 3)
      {
        v15 = (char *)v4[1];
      }
      else
      {
        if (v11)
          v13 = 2 * v11;
        else
          v13 = 0x2000;
        v14 = v12 + 3;
        while (v13 < v14)
        {
          v9 = (uint64_t)v13 <= 0;
          v13 *= 2;
          if (v9)
          {
            v13 = v14;
            break;
          }
        }
        v15 = (char *)malloc_type_realloc((void *)v4[1], v13, 0xAD6A59EEuLL);
        if (!v15)
          goto LABEL_43;
        v4[1] = (uint64_t)v15;
        v4[2] = v13;
        v12 = *v4;
      }
      v23 = &v15[v12];
      *v23 = -59;
      *(_WORD *)(v23 + 1) = bswap32(a2) >> 16;
      v17 = 3;
      goto LABEL_42;
    }
    v4 = *a1;
    v18 = (*a1)[2];
    v19 = **a1;
    if ((unint64_t)(v18 - v19) >= 5)
    {
      v22 = (char *)v4[1];
    }
    else
    {
      if (v18)
        v20 = 2 * v18;
      else
        v20 = 0x2000;
      v21 = v19 + 5;
      while (v20 < v21)
      {
        v9 = (uint64_t)v20 <= 0;
        v20 *= 2;
        if (v9)
        {
          v20 = v21;
          break;
        }
      }
      v22 = (char *)malloc_type_realloc((void *)v4[1], v20, 0xAD6A59EEuLL);
      if (!v22)
        goto LABEL_43;
      v4[1] = (uint64_t)v22;
      v4[2] = v20;
      v19 = *v4;
    }
    v24 = &v22[v19];
    *v24 = -58;
    *(_DWORD *)(v24 + 1) = bswap32(a2);
    v17 = 5;
    goto LABEL_42;
  }
  v4 = *a1;
  v5 = (*a1)[2];
  v6 = **a1;
  if ((unint64_t)(v5 - v6) >= 2)
  {
    v10 = (char *)v4[1];
    goto LABEL_26;
  }
  if (v5)
    v7 = 2 * v5;
  else
    v7 = 0x2000;
  v8 = v6 + 2;
  while (v7 < v8)
  {
    v9 = (uint64_t)v7 <= 0;
    v7 *= 2;
    if (v9)
    {
      v7 = v8;
      break;
    }
  }
  v10 = (char *)malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
  if (!v10)
  {
LABEL_43:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v27 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v27, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v4[1] = (uint64_t)v10;
  v4[2] = v7;
  v6 = *v4;
LABEL_26:
  v16 = &v10[v6];
  *v16 = -60;
  v16[1] = a2;
  v17 = 2;
LABEL_42:
  *v4 += v17;
  return a1;
}

char *sub_20E9F301C(uint64_t **a1, int a2)
{
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  char *result;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v2 = a2;
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > -33)
  {
    if (v4 == v5)
    {
      if (v4)
        v10 = 2 * v4;
      else
        v10 = 0x2000;
      while (v10 < v4 + 1)
      {
        v8 = (uint64_t)v10 <= 0;
        v10 *= 2;
        if (v8)
        {
          v10 = v4 + 1;
          break;
        }
      }
      result = (char *)malloc_type_realloc((void *)v3[1], v10, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_28;
      v3[1] = (uint64_t)result;
      v3[2] = v10;
      v5 = *v3;
    }
    else
    {
      result = (char *)v3[1];
    }
    v12 = &result[v5];
    v13 = 1;
    goto LABEL_27;
  }
  if ((unint64_t)(v4 - v5) >= 2)
  {
    result = (char *)v3[1];
    goto LABEL_24;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  v7 = v5 + 2;
  while (v6 < v7)
  {
    v8 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v8)
    {
      v6 = v7;
      break;
    }
  }
  result = (char *)malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_28:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_24:
  v11 = &result[v5];
  *v11 = -48;
  v12 = v11 + 1;
  v13 = 2;
LABEL_27:
  *v12 = v2;
  *v3 += v13;
  return result;
}

char *sub_20E9F3164(uint64_t **a1, char a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  char *result;
  size_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 < 0)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      result = (char *)v3[1];
    }
    else
    {
      if (v4)
        v9 = 2 * v4;
      else
        v9 = 0x2000;
      v10 = v5 + 2;
      while (v9 < v10)
      {
        v7 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v7)
        {
          v9 = v10;
          break;
        }
      }
      result = (char *)malloc_type_realloc((void *)v3[1], v9, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_28;
      v3[1] = (uint64_t)result;
      v3[2] = v9;
      v5 = *v3;
    }
    v13 = &result[v5];
    *v13 = -52;
    v11 = v13 + 1;
    v12 = 2;
    goto LABEL_27;
  }
  if (v4 != v5)
  {
    result = (char *)v3[1];
    goto LABEL_24;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = (char *)malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_28:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v15 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_24:
  v11 = &result[v5];
  v12 = 1;
LABEL_27:
  *v11 = a2;
  *v3 += v12;
  return result;
}

_BYTE *sub_20E9F32A8(uint64_t **a1, signed int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  BOOL v9;
  _BYTE *result;
  size_t v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  unsigned int v17;
  char *v18;
  char v19;
  uint64_t v20;
  char *v21;
  char v22;
  size_t v23;
  size_t v24;
  std::bad_alloc *exception;
  std::bad_alloc *v26;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 <= -33)
  {
    v6 = v4 - v5;
    if (a2 <= 0xFFFFFF7F)
    {
      if (v6 >= 3)
      {
        result = (_BYTE *)v3[1];
        goto LABEL_49;
      }
      if (v4)
        v7 = 2 * v4;
      else
        v7 = 0x2000;
      v8 = v5 + 3;
      while (v7 < v8)
      {
        v9 = (uint64_t)v7 <= 0;
        v7 *= 2;
        if (v9)
        {
          v7 = v8;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v7, 0xAD6A59EEuLL);
      if (result)
      {
        v3[1] = (uint64_t)result;
        v3[2] = v7;
        v5 = *v3;
LABEL_49:
        v17 = bswap32(a2) >> 16;
        v18 = &result[v5];
        v19 = -47;
LABEL_70:
        *v18 = v19;
        *(_WORD *)(v18 + 1) = v17;
        v20 = 3;
        goto LABEL_71;
      }
LABEL_72:
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    if (v6 >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v12 = 2 * v4;
      else
        v12 = 0x2000;
      v13 = v5 + 2;
      while (v12 < v13)
      {
        v9 = (uint64_t)v12 <= 0;
        v12 *= 2;
        if (v9)
        {
          v12 = v13;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_72;
      v3[1] = (uint64_t)result;
      v3[2] = v12;
      v5 = *v3;
    }
    v21 = &result[v5];
    v22 = -48;
LABEL_67:
    *v21 = v22;
    v21[1] = a2;
    v20 = 2;
    goto LABEL_71;
  }
  if (a2 > 127)
  {
    v14 = v4 - v5;
    if (a2 > 0xFF)
    {
      if (v14 >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v4)
          v23 = 2 * v4;
        else
          v23 = 0x2000;
        v24 = v5 + 3;
        while (v23 < v24)
        {
          v9 = (uint64_t)v23 <= 0;
          v23 *= 2;
          if (v9)
          {
            v23 = v24;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v23, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_72;
        v3[1] = (uint64_t)result;
        v3[2] = v23;
        v5 = *v3;
      }
      v17 = bswap32(a2) >> 16;
      v18 = &result[v5];
      v19 = -51;
      goto LABEL_70;
    }
    if (v14 >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v15 = 2 * v4;
      else
        v15 = 0x2000;
      v16 = v5 + 2;
      while (v15 < v16)
      {
        v9 = (uint64_t)v15 <= 0;
        v15 *= 2;
        if (v9)
        {
          v15 = v16;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_72;
      v3[1] = (uint64_t)result;
      v3[2] = v15;
      v5 = *v3;
    }
    v21 = &result[v5];
    v22 = -52;
    goto LABEL_67;
  }
  if (v4 == v5)
  {
    if (v4)
      v11 = 2 * v4;
    else
      v11 = 0x2000;
    while (v11 < v4 + 1)
    {
      v9 = (uint64_t)v11 <= 0;
      v11 *= 2;
      if (v9)
      {
        v11 = v4 + 1;
        break;
      }
    }
    result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
    if (!result)
      goto LABEL_72;
    v3[1] = (uint64_t)result;
    v3[2] = v11;
    v5 = *v3;
  }
  else
  {
    result = (_BYTE *)v3[1];
  }
  result[v5] = a2;
  v20 = 1;
LABEL_71:
  *v3 += v20;
  return result;
}

uint64_t sub_20E9F356C()
{
  return std::ostream::write();
}

_BYTE *sub_20E9F3668(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BYTE *result;
  unint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  char *v16;
  std::bad_alloc *exception;
  std::bad_alloc *v18;

  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > 0x7F)
  {
    v9 = v4 - v5;
    if (a2 <= 0xFF)
    {
      if (v9 >= 2)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v4)
          v10 = 2 * v4;
        else
          v10 = 0x2000;
        v11 = v5 + 2;
        while (v10 < v11)
        {
          v7 = (uint64_t)v10 <= 0;
          v10 *= 2;
          if (v7)
          {
            v10 = v11;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v10, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_42;
        v3[1] = (uint64_t)result;
        v3[2] = v10;
        v5 = *v3;
      }
      v15 = &result[v5];
      *v15 = -52;
      v15[1] = a2;
      v12 = 2;
      goto LABEL_41;
    }
    if (v9 >= 3)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v13 = 2 * v4;
      else
        v13 = 0x2000;
      v14 = v5 + 3;
      while (v13 < v14)
      {
        v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          v13 = v14;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_42;
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      v5 = *v3;
    }
    v16 = &result[v5];
    *v16 = -51;
    *(_WORD *)(v16 + 1) = __rev16(a2);
    v12 = 3;
    goto LABEL_41;
  }
  if (v4 != v5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_25;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_42:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v18 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v18, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_25:
  result[v5] = a2;
  v12 = 1;
LABEL_41:
  *v3 += v12;
  return result;
}

_BYTE *sub_20E9F3834(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  _BYTE *result;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  unsigned int v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  unsigned int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  std::bad_alloc *exception;
  std::bad_alloc *v43;

  if ((int)a2 > -33)
  {
    if ((int)a2 <= 127)
    {
      v3 = *a1;
      v10 = (*a1)[2];
      v11 = **a1;
      if (v10 == v11)
      {
        if (v10)
          v12 = 2 * v10;
        else
          v12 = 0x2000;
        while (v12 < v10 + 1)
        {
          v8 = (uint64_t)v12 <= 0;
          v12 *= 2;
          if (v8)
          {
            v12 = v10 + 1;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_101;
        v3[1] = (uint64_t)result;
        v3[2] = v12;
        v11 = *v3;
      }
      else
      {
        result = (_BYTE *)v3[1];
      }
      result[v11] = a2;
      v24 = 1;
      goto LABEL_98;
    }
    if (a2 > 0xFF)
    {
      if (HIWORD(a2))
      {
        v3 = *a1;
        v38 = (*a1)[2];
        v39 = **a1;
        if ((unint64_t)(v38 - v39) >= 5)
        {
          result = (_BYTE *)v3[1];
        }
        else
        {
          if (v38)
            v40 = 2 * v38;
          else
            v40 = 0x2000;
          v41 = v39 + 5;
          while (v40 < v41)
          {
            v8 = (uint64_t)v40 <= 0;
            v40 *= 2;
            if (v8)
            {
              v40 = v41;
              break;
            }
          }
          result = malloc_type_realloc((void *)v3[1], v40, 0xAD6A59EEuLL);
          if (!result)
            goto LABEL_101;
          v3[1] = (uint64_t)result;
          v3[2] = v40;
          v39 = *v3;
        }
        v21 = bswap32(a2);
        v22 = &result[v39];
        v23 = -50;
        goto LABEL_51;
      }
      v3 = *a1;
      v29 = (*a1)[2];
      v30 = **a1;
      if ((unint64_t)(v29 - v30) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v29)
          v31 = 2 * v29;
        else
          v31 = 0x2000;
        v32 = v30 + 3;
        while (v31 < v32)
        {
          v8 = (uint64_t)v31 <= 0;
          v31 *= 2;
          if (v8)
          {
            v31 = v32;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v31, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_101;
        v3[1] = (uint64_t)result;
        v3[2] = v31;
        v30 = *v3;
      }
      v33 = bswap32(a2) >> 16;
      v34 = &result[v30];
      v35 = -51;
LABEL_97:
      *v34 = v35;
      *(_WORD *)(v34 + 1) = v33;
      v24 = 3;
      goto LABEL_98;
    }
    v3 = *a1;
    v17 = (*a1)[2];
    v18 = **a1;
    if ((unint64_t)(v17 - v18) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v17)
        v19 = 2 * v17;
      else
        v19 = 0x2000;
      v20 = v18 + 2;
      while (v19 < v20)
      {
        v8 = (uint64_t)v19 <= 0;
        v19 *= 2;
        if (v8)
        {
          v19 = v20;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v19, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_101;
      v3[1] = (uint64_t)result;
      v3[2] = v19;
      v18 = *v3;
    }
    v36 = &result[v18];
    v37 = -52;
LABEL_83:
    *v36 = v37;
    v36[1] = a2;
    v24 = 2;
    goto LABEL_98;
  }
  if (a2 > 0xFFFF7FFF)
  {
    if (a2 <= 0xFFFFFF7F)
    {
      v3 = *a1;
      v13 = (*a1)[2];
      v14 = **a1;
      if ((unint64_t)(v13 - v14) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v13)
          v15 = 2 * v13;
        else
          v15 = 0x2000;
        v16 = v14 + 3;
        while (v15 < v16)
        {
          v8 = (uint64_t)v15 <= 0;
          v15 *= 2;
          if (v8)
          {
            v15 = v16;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_101;
        v3[1] = (uint64_t)result;
        v3[2] = v15;
        v14 = *v3;
      }
      v33 = bswap32(a2) >> 16;
      v34 = &result[v14];
      v35 = -47;
      goto LABEL_97;
    }
    v3 = *a1;
    v25 = (*a1)[2];
    v26 = **a1;
    if ((unint64_t)(v25 - v26) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v25)
        v27 = 2 * v25;
      else
        v27 = 0x2000;
      v28 = v26 + 2;
      while (v27 < v28)
      {
        v8 = (uint64_t)v27 <= 0;
        v27 *= 2;
        if (v8)
        {
          v27 = v28;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v27, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_101;
      v3[1] = (uint64_t)result;
      v3[2] = v27;
      v26 = *v3;
    }
    v36 = &result[v26];
    v37 = -48;
    goto LABEL_83;
  }
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if ((unint64_t)(v4 - v5) >= 5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_50;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  v7 = v5 + 5;
  while (v6 < v7)
  {
    v8 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v8)
    {
      v6 = v7;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_101:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v43 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v43, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_50:
  v21 = bswap32(a2);
  v22 = &result[v5];
  v23 = -46;
LABEL_51:
  *v22 = v23;
  *(_DWORD *)(v22 + 1) = v21;
  v24 = 5;
LABEL_98:
  *v3 += v24;
  return result;
}

uint64_t sub_20E9F3C50()
{
  return std::ostream::write();
}

_BYTE *sub_20E9F3D4C(uint64_t **a1, unsigned int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BYTE *result;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  std::bad_alloc *exception;
  std::bad_alloc *v24;

  if (a2 > 0xFF)
  {
    if (!HIWORD(a2))
    {
      v3 = *a1;
      v9 = (*a1)[2];
      v10 = **a1;
      if ((unint64_t)(v9 - v10) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v9)
          v11 = 2 * v9;
        else
          v11 = 0x2000;
        v12 = v10 + 3;
        while (v11 < v12)
        {
          v7 = (uint64_t)v11 <= 0;
          v11 *= 2;
          if (v7)
          {
            v11 = v12;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_56;
        v3[1] = (uint64_t)result;
        v3[2] = v11;
        v10 = *v3;
      }
      v20 = &result[v10];
      *v20 = -51;
      *(_WORD *)(v20 + 1) = bswap32(a2) >> 16;
      v19 = 3;
      goto LABEL_55;
    }
    v3 = *a1;
    v15 = (*a1)[2];
    v16 = **a1;
    if ((unint64_t)(v15 - v16) >= 5)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v15)
        v17 = 2 * v15;
      else
        v17 = 0x2000;
      v18 = v16 + 5;
      while (v17 < v18)
      {
        v7 = (uint64_t)v17 <= 0;
        v17 *= 2;
        if (v7)
        {
          v17 = v18;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v17, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_56;
      v3[1] = (uint64_t)result;
      v3[2] = v17;
      v16 = *v3;
    }
    v22 = &result[v16];
    *v22 = -50;
    *(_DWORD *)(v22 + 1) = bswap32(a2);
    v19 = 5;
    goto LABEL_55;
  }
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > 0x7F)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v13 = 2 * v4;
      else
        v13 = 0x2000;
      v14 = v5 + 2;
      while (v13 < v14)
      {
        v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          v13 = v14;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_56;
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      v5 = *v3;
    }
    v21 = &result[v5];
    *v21 = -52;
    v21[1] = a2;
    v19 = 2;
    goto LABEL_55;
  }
  if (v4 != v5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_48;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_56:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v24 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v24, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_48:
  result[v5] = a2;
  v19 = 1;
LABEL_55:
  *v3 += v19;
  return result;
}

uint64_t sub_20E9F3FC0(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  return a2;
}

_BYTE *sub_20E9F40B0(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  BOOL v8;
  _BYTE *result;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  char v36;
  unsigned int v37;
  char *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  unsigned int v44;
  char *v45;
  char v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  size_t v51;
  size_t v52;
  std::bad_alloc *exception;
  std::bad_alloc *v54;

  if ((uint64_t)a2 <= -33)
  {
    if (a2 <= 0xFFFFFFFFFFFF7FFFLL)
    {
      if (a2 <= 0xFFFFFFFF7FFFFFFFLL)
      {
        v3 = *a1;
        v4 = (*a1)[2];
        v5 = **a1;
        if ((unint64_t)(v4 - v5) >= 9)
        {
          result = (_BYTE *)v3[1];
          goto LABEL_88;
        }
        if (v4)
          v6 = 2 * v4;
        else
          v6 = 0x2000;
        v7 = v5 + 9;
        while (v6 < v7)
        {
          v8 = (uint64_t)v6 <= 0;
          v6 *= 2;
          if (v8)
          {
            v6 = v7;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
        if (result)
        {
          v3[1] = (uint64_t)result;
          v3[2] = v6;
          v5 = *v3;
LABEL_88:
          v34 = bswap64(a2);
          v35 = &result[v5];
          v36 = -45;
LABEL_128:
          *v35 = v36;
          *(_QWORD *)(v35 + 1) = v34;
          v25 = 9;
          goto LABEL_129;
        }
LABEL_130:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v54 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v54, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
      }
      v3 = *a1;
      v21 = (*a1)[2];
      v22 = **a1;
      if ((unint64_t)(v21 - v22) >= 5)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v21)
          v23 = 2 * v21;
        else
          v23 = 0x2000;
        v24 = v22 + 5;
        while (v23 < v24)
        {
          v8 = (uint64_t)v23 <= 0;
          v23 *= 2;
          if (v8)
          {
            v23 = v24;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v23, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v23;
        v22 = *v3;
      }
      v44 = bswap32(a2);
      v45 = &result[v22];
      v46 = -46;
LABEL_122:
      *v45 = v46;
      *(_DWORD *)(v45 + 1) = v44;
      v25 = 5;
      goto LABEL_129;
    }
    if (a2 <= 0xFFFFFFFFFFFFFF7FLL)
    {
      v3 = *a1;
      v13 = (*a1)[2];
      v14 = **a1;
      if ((unint64_t)(v13 - v14) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v13)
          v15 = 2 * v13;
        else
          v15 = 0x2000;
        v16 = v14 + 3;
        while (v15 < v16)
        {
          v8 = (uint64_t)v15 <= 0;
          v15 *= 2;
          if (v8)
          {
            v15 = v16;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v15, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v15;
        v14 = *v3;
      }
      v37 = bswap32(a2) >> 16;
      v38 = &result[v14];
      v39 = -47;
LABEL_125:
      *v38 = v39;
      *(_WORD *)(v38 + 1) = v37;
      v25 = 3;
      goto LABEL_129;
    }
    v3 = *a1;
    v26 = (*a1)[2];
    v27 = **a1;
    if ((unint64_t)(v26 - v27) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v26)
        v28 = 2 * v26;
      else
        v28 = 0x2000;
      v29 = v27 + 2;
      while (v28 < v29)
      {
        v8 = (uint64_t)v28 <= 0;
        v28 *= 2;
        if (v8)
        {
          v28 = v29;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v28, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_130;
      v3[1] = (uint64_t)result;
      v3[2] = v28;
      v27 = *v3;
    }
    v47 = &result[v27];
    v48 = -48;
LABEL_119:
    *v47 = v48;
    v47[1] = a2;
    v25 = 2;
    goto LABEL_129;
  }
  if ((uint64_t)a2 > 127)
  {
    if (a2 >> 16)
    {
      if (HIDWORD(a2))
      {
        v3 = *a1;
        v49 = (*a1)[2];
        v50 = **a1;
        if ((unint64_t)(v49 - v50) >= 9)
        {
          result = (_BYTE *)v3[1];
        }
        else
        {
          if (v49)
            v51 = 2 * v49;
          else
            v51 = 0x2000;
          v52 = v50 + 9;
          while (v51 < v52)
          {
            v8 = (uint64_t)v51 <= 0;
            v51 *= 2;
            if (v8)
            {
              v51 = v52;
              break;
            }
          }
          result = malloc_type_realloc((void *)v3[1], v51, 0xAD6A59EEuLL);
          if (!result)
            goto LABEL_130;
          v3[1] = (uint64_t)result;
          v3[2] = v51;
          v50 = *v3;
        }
        v34 = bswap64(a2);
        v35 = &result[v50];
        v36 = -49;
        goto LABEL_128;
      }
      v3 = *a1;
      v30 = (*a1)[2];
      v31 = **a1;
      if ((unint64_t)(v30 - v31) >= 5)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v30)
          v32 = 2 * v30;
        else
          v32 = 0x2000;
        v33 = v31 + 5;
        while (v32 < v33)
        {
          v8 = (uint64_t)v32 <= 0;
          v32 *= 2;
          if (v8)
          {
            v32 = v33;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v32, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v32;
        v31 = *v3;
      }
      v44 = bswap32(a2);
      v45 = &result[v31];
      v46 = -50;
      goto LABEL_122;
    }
    if (a2 > 0xFF)
    {
      v3 = *a1;
      v40 = (*a1)[2];
      v41 = **a1;
      if ((unint64_t)(v40 - v41) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v40)
          v42 = 2 * v40;
        else
          v42 = 0x2000;
        v43 = v41 + 3;
        while (v42 < v43)
        {
          v8 = (uint64_t)v42 <= 0;
          v42 *= 2;
          if (v8)
          {
            v42 = v43;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v42, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_130;
        v3[1] = (uint64_t)result;
        v3[2] = v42;
        v41 = *v3;
      }
      v37 = bswap32(a2) >> 16;
      v38 = &result[v41];
      v39 = -51;
      goto LABEL_125;
    }
    v3 = *a1;
    v17 = (*a1)[2];
    v18 = **a1;
    if ((unint64_t)(v17 - v18) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v17)
        v19 = 2 * v17;
      else
        v19 = 0x2000;
      v20 = v18 + 2;
      while (v19 < v20)
      {
        v8 = (uint64_t)v19 <= 0;
        v19 *= 2;
        if (v8)
        {
          v19 = v20;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v19, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_130;
      v3[1] = (uint64_t)result;
      v3[2] = v19;
      v18 = *v3;
    }
    v47 = &result[v18];
    v48 = -52;
    goto LABEL_119;
  }
  v3 = *a1;
  v10 = (*a1)[2];
  v11 = **a1;
  if (v10 == v11)
  {
    if (v10)
      v12 = 2 * v10;
    else
      v12 = 0x2000;
    while (v12 < v10 + 1)
    {
      v8 = (uint64_t)v12 <= 0;
      v12 *= 2;
      if (v8)
      {
        v12 = v10 + 1;
        break;
      }
    }
    result = malloc_type_realloc((void *)v3[1], v12, 0xAD6A59EEuLL);
    if (!result)
      goto LABEL_130;
    v3[1] = (uint64_t)result;
    v3[2] = v12;
    v11 = *v3;
  }
  else
  {
    result = (_BYTE *)v3[1];
  }
  result[v11] = a2;
  v25 = 1;
LABEL_129:
  *v3 += v25;
  return result;
}

uint64_t sub_20E9F45EC()
{
  return std::ostream::write();
}

_BYTE *sub_20E9F472C(uint64_t **a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  BOOL v7;
  _BYTE *result;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  char *v27;
  std::bad_alloc *exception;
  std::bad_alloc *v29;

  if (a2 > 0xFF)
  {
    if (!(a2 >> 16))
    {
      v3 = *a1;
      v9 = (*a1)[2];
      v10 = **a1;
      if ((unint64_t)(v9 - v10) >= 3)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v9)
          v11 = 2 * v9;
        else
          v11 = 0x2000;
        v12 = v10 + 3;
        while (v11 < v12)
        {
          v7 = (uint64_t)v11 <= 0;
          v11 *= 2;
          if (v7)
          {
            v11 = v12;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v11, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_70;
        v3[1] = (uint64_t)result;
        v3[2] = v11;
        v10 = *v3;
      }
      v20 = &result[v10];
      *v20 = -51;
      *(_WORD *)(v20 + 1) = bswap32(a2) >> 16;
      v19 = 3;
      goto LABEL_69;
    }
    if (!HIDWORD(a2))
    {
      v3 = *a1;
      v15 = (*a1)[2];
      v16 = **a1;
      if ((unint64_t)(v15 - v16) >= 5)
      {
        result = (_BYTE *)v3[1];
      }
      else
      {
        if (v15)
          v17 = 2 * v15;
        else
          v17 = 0x2000;
        v18 = v16 + 5;
        while (v17 < v18)
        {
          v7 = (uint64_t)v17 <= 0;
          v17 *= 2;
          if (v7)
          {
            v17 = v18;
            break;
          }
        }
        result = malloc_type_realloc((void *)v3[1], v17, 0xAD6A59EEuLL);
        if (!result)
          goto LABEL_70;
        v3[1] = (uint64_t)result;
        v3[2] = v17;
        v16 = *v3;
      }
      v26 = &result[v16];
      *v26 = -50;
      *(_DWORD *)(v26 + 1) = bswap32(a2);
      v19 = 5;
      goto LABEL_69;
    }
    v3 = *a1;
    v22 = (*a1)[2];
    v23 = **a1;
    if ((unint64_t)(v22 - v23) >= 9)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v22)
        v24 = 2 * v22;
      else
        v24 = 0x2000;
      v25 = v23 + 9;
      while (v24 < v25)
      {
        v7 = (uint64_t)v24 <= 0;
        v24 *= 2;
        if (v7)
        {
          v24 = v25;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v24, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_70;
      v3[1] = (uint64_t)result;
      v3[2] = v24;
      v23 = *v3;
    }
    v27 = &result[v23];
    *v27 = -49;
    *(_QWORD *)(v27 + 1) = bswap64(a2);
    v19 = 9;
    goto LABEL_69;
  }
  v3 = *a1;
  v4 = (*a1)[2];
  v5 = **a1;
  if (a2 > 0x7F)
  {
    if ((unint64_t)(v4 - v5) >= 2)
    {
      result = (_BYTE *)v3[1];
    }
    else
    {
      if (v4)
        v13 = 2 * v4;
      else
        v13 = 0x2000;
      v14 = v5 + 2;
      while (v13 < v14)
      {
        v7 = (uint64_t)v13 <= 0;
        v13 *= 2;
        if (v7)
        {
          v13 = v14;
          break;
        }
      }
      result = malloc_type_realloc((void *)v3[1], v13, 0xAD6A59EEuLL);
      if (!result)
        goto LABEL_70;
      v3[1] = (uint64_t)result;
      v3[2] = v13;
      v5 = *v3;
    }
    v21 = &result[v5];
    *v21 = -52;
    v21[1] = a2;
    v19 = 2;
    goto LABEL_69;
  }
  if (v4 != v5)
  {
    result = (_BYTE *)v3[1];
    goto LABEL_49;
  }
  if (v4)
    v6 = 2 * v4;
  else
    v6 = 0x2000;
  while (v6 < v4 + 1)
  {
    v7 = (uint64_t)v6 <= 0;
    v6 *= 2;
    if (v7)
    {
      v6 = v4 + 1;
      break;
    }
  }
  result = malloc_type_realloc((void *)v3[1], v6, 0xAD6A59EEuLL);
  if (!result)
  {
LABEL_70:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v29 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v29, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v3[1] = (uint64_t)result;
  v3[2] = v6;
  v5 = *v3;
LABEL_49:
  result[v5] = a2;
  v19 = 1;
LABEL_69:
  *v3 += v19;
  return result;
}

uint64_t sub_20E9F4A34()
{
  return std::ostream::write();
}

uint64_t **sub_20E9F4B2C(uint64_t a1, uint64_t **a2, unsigned int *a3)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  BOOL v10;
  char *v11;
  char *v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v4 = *a3;
  v5 = *a2;
  v6 = (*a2)[2];
  v7 = **a2;
  if ((unint64_t)(v6 - v7) >= 5)
  {
    v11 = (char *)v5[1];
  }
  else
  {
    if (v6)
      v8 = 2 * v6;
    else
      v8 = 0x2000;
    v9 = v7 + 5;
    while (v8 < v9)
    {
      v10 = (uint64_t)v8 <= 0;
      v8 *= 2;
      if (v10)
      {
        v8 = v9;
        break;
      }
    }
    v11 = (char *)malloc_type_realloc((void *)v5[1], v8, 0xAD6A59EEuLL);
    if (!v11)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v5[1] = (uint64_t)v11;
    v5[2] = v8;
    v7 = *v5;
  }
  v12 = &v11[v7];
  *v12 = -54;
  *(_DWORD *)(v12 + 1) = bswap32(v4);
  *v5 += 5;
  return a2;
}

uint64_t **sub_20E9F4C08(uint64_t a1, uint64_t **a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  BOOL v10;
  char *v11;
  char *v12;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v4 = *a3;
  v5 = *a2;
  v6 = (*a2)[2];
  v7 = **a2;
  if ((unint64_t)(v6 - v7) >= 9)
  {
    v11 = (char *)v5[1];
  }
  else
  {
    if (v6)
      v8 = 2 * v6;
    else
      v8 = 0x2000;
    v9 = v7 + 9;
    while (v8 < v9)
    {
      v10 = (uint64_t)v8 <= 0;
      v8 *= 2;
      if (v10)
      {
        v8 = v9;
        break;
      }
    }
    v11 = (char *)malloc_type_realloc((void *)v5[1], v8, 0xAD6A59EEuLL);
    if (!v11)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v15 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v15, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v5[1] = (uint64_t)v11;
    v5[2] = v8;
    v7 = *v5;
  }
  v12 = &v11[v7];
  *v12 = -53;
  *(_QWORD *)(v12 + 1) = bswap64(v4);
  *v5 += 9;
  return a2;
}

uint64_t **sub_20E9F4CE4(uint64_t a1, uint64_t **a2, _BYTE *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  BOOL v8;
  size_t v9;
  _BYTE *v10;
  char v11;
  std::bad_alloc *exception;
  std::bad_alloc *v14;

  v4 = *a2;
  v5 = (*a2)[2];
  v6 = **a2;
  if (!*a3)
  {
    if (v5 == v6)
    {
      if (v5)
        v9 = 2 * v5;
      else
        v9 = 0x2000;
      while (v9 < v5 + 1)
      {
        v8 = (uint64_t)v9 <= 0;
        v9 *= 2;
        if (v8)
        {
          v9 = v5 + 1;
          break;
        }
      }
      v10 = malloc_type_realloc((void *)v4[1], v9, 0xAD6A59EEuLL);
      if (!v10)
        goto LABEL_26;
      v4[1] = (uint64_t)v10;
      v4[2] = v9;
      v6 = *v4;
    }
    else
    {
      v10 = (_BYTE *)v4[1];
    }
    v11 = -62;
    goto LABEL_25;
  }
  if (v5 == v6)
  {
    if (v5)
      v7 = 2 * v5;
    else
      v7 = 0x2000;
    while (v7 < v5 + 1)
    {
      v8 = (uint64_t)v7 <= 0;
      v7 *= 2;
      if (v8)
      {
        v7 = v5 + 1;
        break;
      }
    }
    v10 = malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
    if (v10)
    {
      v4[1] = (uint64_t)v10;
      v4[2] = v7;
      v6 = *v4;
      v11 = -61;
      goto LABEL_25;
    }
LABEL_26:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v14 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v14, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v10 = (_BYTE *)v4[1];
  v11 = -61;
LABEL_25:
  v10[v6] = v11;
  ++*v4;
  return a2;
}

uint64_t **sub_20E9F4E1C(uint64_t a1, uint64_t **a2, const void **a3)
{
  size_t v5;
  int v6;
  const void **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  BOOL v13;
  char *v14;
  const void **v15;
  std::bad_alloc *v17;
  std::bad_alloc *v18;
  std::runtime_error *exception;

  if (*((char *)a3 + 23) < 0)
  {
    v5 = (size_t)a3[1];
    if (HIDWORD(v5))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E9F520C(exception, "container size overflow");
      __cxa_throw(exception, (struct type_info *)&unk_24C9B76C0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {
    v5 = *((unsigned __int8 *)a3 + 23);
  }
  sub_20E9F4F7C(a2, v5);
  v6 = *((char *)a3 + 23);
  v7 = (const void **)*a3;
  v8 = *a2;
  v9 = (*a2)[2];
  v10 = **a2;
  if (v9 - v10 >= v5)
  {
    v14 = (char *)v8[1];
  }
  else
  {
    if (v9)
      v11 = 2 * v9;
    else
      v11 = 0x2000;
    v12 = v10 + v5;
    while (v11 < v12)
    {
      v13 = (uint64_t)v11 <= 0;
      v11 *= 2;
      if (v13)
      {
        v11 = v12;
        break;
      }
    }
    v14 = (char *)malloc_type_realloc((void *)v8[1], v11, 0xAD6A59EEuLL);
    if (!v14)
    {
      v17 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v18 = std::bad_alloc::bad_alloc(v17);
      __cxa_throw(v18, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
    }
    v8[1] = (uint64_t)v14;
    v8[2] = v11;
    v10 = *v8;
  }
  if (v6 >= 0)
    v15 = a3;
  else
    v15 = v7;
  memcpy(&v14[v10], v15, v5);
  *v8 += v5;
  return a2;
}

void sub_20E9F4F68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_20E9F4F7C(uint64_t **a1, unsigned int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  BOOL v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  char *v26;
  char *v27;
  char *v28;
  std::bad_alloc *exception;
  std::bad_alloc *v31;

  if (a2 > 0x1F)
  {
    if (a2 <= 0xFF)
    {
      v4 = *a1;
      v10 = (*a1)[2];
      v11 = **a1;
      if ((unint64_t)(v10 - v11) >= 2)
      {
        v14 = (char *)v4[1];
      }
      else
      {
        if (v10)
          v12 = 2 * v10;
        else
          v12 = 0x2000;
        v13 = v11 + 2;
        while (v12 < v13)
        {
          v8 = (uint64_t)v12 <= 0;
          v12 *= 2;
          if (v8)
          {
            v12 = v13;
            break;
          }
        }
        v14 = (char *)malloc_type_realloc((void *)v4[1], v12, 0xAD6A59EEuLL);
        if (!v14)
          goto LABEL_56;
        v4[1] = (uint64_t)v14;
        v4[2] = v12;
        v11 = *v4;
      }
      v21 = &v14[v11];
      *v21 = -39;
      v21[1] = a2;
      v15 = 2;
      goto LABEL_55;
    }
    if (!HIWORD(a2))
    {
      v4 = *a1;
      v16 = (*a1)[2];
      v17 = **a1;
      if ((unint64_t)(v16 - v17) >= 3)
      {
        v20 = (char *)v4[1];
      }
      else
      {
        if (v16)
          v18 = 2 * v16;
        else
          v18 = 0x2000;
        v19 = v17 + 3;
        while (v18 < v19)
        {
          v8 = (uint64_t)v18 <= 0;
          v18 *= 2;
          if (v8)
          {
            v18 = v19;
            break;
          }
        }
        v20 = (char *)malloc_type_realloc((void *)v4[1], v18, 0xAD6A59EEuLL);
        if (!v20)
          goto LABEL_56;
        v4[1] = (uint64_t)v20;
        v4[2] = v18;
        v17 = *v4;
      }
      v27 = &v20[v17];
      *v27 = -38;
      *(_WORD *)(v27 + 1) = bswap32(a2) >> 16;
      v15 = 3;
      goto LABEL_55;
    }
    v4 = *a1;
    v22 = (*a1)[2];
    v23 = **a1;
    if ((unint64_t)(v22 - v23) >= 5)
    {
      v26 = (char *)v4[1];
    }
    else
    {
      if (v22)
        v24 = 2 * v22;
      else
        v24 = 0x2000;
      v25 = v23 + 5;
      while (v24 < v25)
      {
        v8 = (uint64_t)v24 <= 0;
        v24 *= 2;
        if (v8)
        {
          v24 = v25;
          break;
        }
      }
      v26 = (char *)malloc_type_realloc((void *)v4[1], v24, 0xAD6A59EEuLL);
      if (!v26)
        goto LABEL_56;
      v4[1] = (uint64_t)v26;
      v4[2] = v24;
      v23 = *v4;
    }
    v28 = &v26[v23];
    *v28 = -37;
    *(_DWORD *)(v28 + 1) = bswap32(a2);
    v15 = 5;
    goto LABEL_55;
  }
  v4 = *a1;
  v5 = (*a1)[2];
  v6 = **a1;
  if (v5 != v6)
  {
    v9 = (_BYTE *)v4[1];
    goto LABEL_25;
  }
  if (v5)
    v7 = 2 * v5;
  else
    v7 = 0x2000;
  while (v7 < v5 + 1)
  {
    v8 = (uint64_t)v7 <= 0;
    v7 *= 2;
    if (v8)
    {
      v7 = v5 + 1;
      break;
    }
  }
  v9 = malloc_type_realloc((void *)v4[1], v7, 0xAD6A59EEuLL);
  if (!v9)
  {
LABEL_56:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v31 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v31, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  v4[1] = (uint64_t)v9;
  v4[2] = v7;
  v6 = *v4;
LABEL_25:
  v9[v6] = a2 | 0xA0;
  v15 = 1;
LABEL_55:
  *v4 += v15;
  return a1;
}

std::runtime_error *sub_20E9F520C(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_24C9B76E8;
  return result;
}

void sub_20E9F5230(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9F5254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  std::runtime_error *exception;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (HIDWORD(v4))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_20E9F520C(exception, "container size overflow");
      __cxa_throw(exception, (struct type_info *)&unk_24C9B76C0, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  std::ostream::write();
  std::ostream::write();
  return a2;
}

void sub_20E9F5384(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F5398(uint64_t a1)
{
  uint64_t v1;
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_DWORD *)a1 == 3)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1 <= -129)
      goto LABEL_4;
  }
  else if (*(_DWORD *)a1 != 2 || (v1 = *(_QWORD *)(a1 + 8), (unint64_t)v1 >= 0x80))
  {
LABEL_4:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20E9EE684(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  return (char)v1;
}

uint64_t sub_20E9F53FC(uint64_t a1)
{
  uint64_t v1;
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_DWORD *)a1 == 3)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (v1 <= -32769)
      goto LABEL_4;
  }
  else if (*(_DWORD *)a1 != 2 || (v1 = *(_QWORD *)(a1 + 8), (unint64_t)v1 >= 0x8000))
  {
LABEL_4:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20E9EE684(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  return (__int16)v1;
}

int64_t sub_20E9F5464(uint64_t a1)
{
  int64_t result;
  std::bad_cast *exception;
  std::bad_cast *v3;

  if (*(_DWORD *)a1 == 3)
  {
    result = *(_QWORD *)(a1 + 8);
    if (result <= (uint64_t)0xFFFFFFFF7FFFFFFFLL)
      goto LABEL_4;
  }
  else if (*(_DWORD *)a1 != 2 || (result = *(_QWORD *)(a1 + 8), (unint64_t)result >> 31))
  {
LABEL_4:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v3 = sub_20E9EE684(exception);
    __cxa_throw(v3, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_20E9F54C8(uint64_t a1, uint64_t a2, double **a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int *v8;
  unint64_t v9;
  double *v10;
  double v11;
  int v12;
  uint64_t v13;
  std::bad_cast *exception;
  std::bad_cast *v16;

  if (*(_DWORD *)a2 != 6)
  {
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v16 = sub_20E9EE684(exception);
    __cxa_throw(v16, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  v5 = *(unsigned int *)(a2 + 8);
  v6 = a3[1] - *a3;
  if (v5 <= v6)
  {
    if (v5 < v6)
      a3[1] = &(*a3)[v5];
  }
  else
  {
    sub_20E93D8FC((uint64_t)a3, v5 - v6);
  }
  v7 = *(_DWORD *)(a2 + 8);
  if (v7)
  {
    v8 = *(int **)(a2 + 16);
    v9 = (unint64_t)&v8[6 * v7];
    v10 = *a3;
    do
    {
      v12 = *v8;
      v13 = *((_QWORD *)v8 + 1);
      if (*v8 == 2)
      {
        v11 = (double)(unint64_t)v13;
      }
      else if (v12 == 3)
      {
        v11 = (double)v13;
      }
      else
      {
        if (v12 != 4)
          goto LABEL_16;
        v11 = *((double *)v8 + 1);
      }
      *v10++ = v11;
      v8 += 6;
    }
    while ((unint64_t)v8 < v9);
  }
  return a2;
}

uint64_t sub_20E9F55AC(uint64_t a1, uint64_t a2, float **a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  unint64_t v9;
  float *v10;
  float v11;
  int v12;
  uint64_t v13;
  std::bad_cast *exception;
  std::bad_cast *v16;

  if (*(_DWORD *)a2 != 6)
  {
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v16 = sub_20E9EE684(exception);
    __cxa_throw(v16, (struct type_info *)&unk_24C9B7018, (void (*)(void *))std::exception::~exception);
  }
  v5 = *(unsigned int *)(a2 + 8);
  v6 = a3[1] - *a3;
  if (v5 <= v6)
  {
    if (v5 < v6)
      a3[1] = &(*a3)[v5];
  }
  else
  {
    sub_20E9F5694((uint64_t)a3, v5 - v6);
  }
  v7 = *(_DWORD *)(a2 + 8);
  if (v7)
  {
    v8 = *(uint64_t **)(a2 + 16);
    v9 = (unint64_t)&v8[3 * v7];
    v10 = *a3;
    do
    {
      v12 = *(_DWORD *)v8;
      v13 = v8[1];
      if (*(_DWORD *)v8 == 2)
      {
        v11 = (float)(unint64_t)v13;
      }
      else if (v12 == 3)
      {
        v11 = (float)v13;
      }
      else
      {
        if (v12 != 4)
          goto LABEL_16;
        v11 = *(double *)&v13;
      }
      *v10++ = v11;
      v8 += 3;
    }
    while ((unint64_t)v8 < v9);
  }
  return a2;
}

void sub_20E9F5694(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_20E867F44();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_20E877A38();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_20E9F5830(std::string *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  void *v5[2];
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  unsigned int v16;
  unsigned int v17;

  v16 = a3;
  v17 = a2;
  sub_20E9F5984("Failed to load sample ", a1, (std::string *)". Minimum version required is ", &v17, (std::string *)" but current sample version is ", &v16, (std::string *)".");
  if (SHIBYTE(v6) < 0)
  {
    sub_20E860C04(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v5;
    v8 = v6;
  }
  v9 = 1;
  LOBYTE(v10) = 0;
  v14 = 0;
  v15 = 1;
  sub_20E89F600(a4, 5u, (__int128 *)__p);
  if (!v15)
    goto LABEL_11;
  if (v14)
  {
    if ((v13 & 0x80000000) == 0)
    {
      if ((v11 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v10);
      if (!v9)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v12);
    if (v11 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v9)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_20E9F5958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20E9F5984(char *__s, std::string *a2, std::string *a3, unsigned int *a4, std::string *a5, unsigned int *a6, std::string *a7)
{
  uint64_t result;
  _DWORD v14[6];
  int v15;
  std::string v16;
  std::string **v17;
  std::string *v18;
  std::string *v19;
  _DWORD *v20;
  std::string *v21;
  std::string *v22;

  v15 = 0;
  sub_20E9E6784(v14, __s);
  v18 = (std::string *)v14;
  v19 = a2;
  v20 = v14;
  v21 = a2;
  v22 = a2;
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C9B7718[v15])(&v16, v14);
  v18 = (std::string *)v14;
  v19 = a3;
  v20 = v14;
  v21 = a3;
  v22 = a3;
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C9B7730[v15])(&v16, v14);
  std::to_string(&v16, *a4);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20E877AB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C9B7748[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a5;
  v20 = v14;
  v21 = a5;
  v22 = a5;
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C9B7760[v15])(&v16, v14);
  std::to_string(&v16, *a6);
  v18 = (std::string *)v14;
  v19 = &v16;
  v20 = v14;
  v21 = &v16;
  v22 = &v16;
  if (v15 == -1)
    sub_20E877AB8();
  v17 = &v18;
  ((void (*)(std::string ***, _DWORD *))off_24C9B7748[v15])(&v17, v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v18 = (std::string *)v14;
  v19 = a7;
  v20 = v14;
  v21 = a7;
  v22 = a7;
  if (v15 == -1)
    sub_20E877AB8();
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  ((void (*)(std::string *, _DWORD *))off_24C9B7778[v15])(&v16, v14);
  if (v15 == -1)
    sub_20E877AB8();
  v18 = &v16;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C9B7790[v15])(&v18, v14);
  if (v15 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C9B7700[v15])(&v18, v14);
  return result;
}

void sub_20E9F5C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20E9F5C70(std::string *a1, unsigned int a2, unsigned int a3)
{
  _BYTE v3[120];

  sub_20E9F5830(a1, a2, a3, (uint64_t)v3);
  sub_20E9F5CE8((uint64_t)v3);
}

void sub_20E9F5C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if ((_BYTE)a34)
  {
    if (a32)
    {
      if (a31 < 0)
        operator delete(__p);
      if (a24 < 0)
        operator delete(a19);
    }
    if (a18)
    {
      if (a17 < 0)
        operator delete(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20E9F5CE8(uint64_t a1)
{
  sub_2102353F4(a1);
}

_DWORD *sub_20E9F5CF4(_DWORD ***a1)
{
  return sub_20E9F5D10(**a1, (char *)(*a1)[1]);
}

void sub_20E9F5D00(uint64_t a1, uint64_t a2)
{
  sub_20E9F5E00((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20E9F5D10(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C9B7700[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20E9F5E00(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B7700[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E9F5FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E9F5FF8(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E9F60F0((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E9F60E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E9F60F0(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E9F62EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20E9F6300(_DWORD ***a1)
{
  return sub_20E9966B8(**a1, (char *)(*a1)[1]);
}

void sub_20E9F630C(uint64_t a1, uint64_t a2)
{
  sub_20E9F631C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20E9F631C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C9B7700[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20E877C80((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20E9F64D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20E860DA4(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20E9F6514(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20E9F660C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20E9F6604(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20E9F660C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20E867F44();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20E877A38();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20E860B7C();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20E9F6808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877E3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F681C(uint64_t *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77E8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77D0[v3])(v5, v2);
  return result;
}

void sub_20E9F6908(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9F6920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F6944(unsigned __int16 *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77E8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77D0[v3])(v5, v2);
  return result;
}

void sub_20E9F6A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9F6A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F6A6C(unsigned int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77E8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77D0[v3])(v5, v2);
  return result;
}

void sub_20E9F6B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9F6B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F6B94(unint64_t *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77E8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77D0[v3])(v5, v2);
  return result;
}

void sub_20E9F6C80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9F6C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F6CBC(unint64_t *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20E877EA0)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20E877AB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77E8[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C9B77D0[v3])(v5, v2);
  return result;
}

void sub_20E9F6DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E877A60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9F6DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20E877A60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F6DE4@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[3];
  _QWORD v22[2];
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  void *__p;
  char v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE v31[9];

  sub_20E863438((uint64_t)v20);
  v4 = (char *)v21 + *(_QWORD *)(v21[0] - 24);
  v5 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 3);
  *((_QWORD *)v4 + 3) = 0;
  v31[0] = 91;
  sub_20E86A980(v21, (uint64_t)v31, 1);
  v7 = *a1;
  if (*a1)
  {
    v8 = 0;
    if (v6)
      v9 = (int)v6;
    else
      v9 = 4;
    do
    {
      if (a1[1])
      {
        v10 = 0;
        do
        {
          *(_QWORD *)((char *)v22 + *(_QWORD *)(v21[0] - 24)) = v9;
          std::ostream::operator<<();
          v11 = a1[1];
          if (v10 != v11 - 1)
          {
            v31[0] = 44;
            sub_20E86A980(v21, (uint64_t)v31, 1);
            v11 = a1[1];
          }
          ++v10;
        }
        while (v10 < v11);
        v7 = *a1;
      }
      if (v8 != v7 - 1)
      {
        sub_20E86A980(v21, (uint64_t)";\n ", 3);
        v7 = *a1;
      }
      ++v8;
    }
    while (v8 < v7);
  }
  sub_20E86A980(v21, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)&v21[1] + *(_QWORD *)(v21[0] - 24)) = v5;
  if ((v29 & 0x10) != 0)
  {
    v13 = v28;
    if (v28 < v25)
    {
      v28 = v25;
      v13 = v25;
    }
    v14 = v24;
    v12 = v13 - (_QWORD)v24;
    if (v13 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v12 = 0;
      a2[23] = 0;
      goto LABEL_27;
    }
    v14 = (const void *)v22[0];
    v12 = v23 - v22[0];
    if ((unint64_t)(v23 - v22[0]) >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_20E860B7C();
  }
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v17 = operator new(v15 + 1);
    *((_QWORD *)a2 + 1) = v12;
    *((_QWORD *)a2 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)a2 = v17;
    a2 = v17;
    goto LABEL_26;
  }
  a2[23] = v12;
  if (v12)
LABEL_26:
    memmove(a2, v14, v12);
LABEL_27:
  a2[v12] = 0;
  v20[0] = *MEMORY[0x24BEDB7F0];
  v18 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v21[0] = v18;
  v21[1] = MEMORY[0x24BEDB848] + 16;
  if (v27 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v30);
}

void sub_20E9F7090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9F70A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20E9F70B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F70CC@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  uint64_t v29;
  char *v30;
  __int128 *v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  char v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *__dst;
  int v45;
  _QWORD v46[2];
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t v50;
  const void *v51;
  unint64_t v52;
  void *__p;
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  void **v58;
  size_t v59;
  int64_t v60;
  std::string __b;
  std::string v62;
  __int128 v63;
  int64_t v64;

  sub_20E863438((uint64_t)v46);
  v4 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  v45 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v7 = v6 + 2;
    else
      v7 = v5;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 + ~v6;
    v10 = v9 - 1;
    if (v9 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v11 = v8;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v9 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v9 - 1;
      p_b = &__b;
      if (v9 == 1)
      {
        LODWORD(v9) = 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v6);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v9) = 4;
  }
  memset(p_b, 32, v10);
LABEL_14:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v18 = v6 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    v59 = v6;
    v60 = v19 | 0x8000000000000000;
    v58 = v17;
    goto LABEL_21;
  }
  HIBYTE(v60) = v6;
  v17 = (void **)&v58;
  if (v6)
LABEL_21:
    memset(v17, 32, v6);
  *((_BYTE *)v17 + v6) = 0;
  if (v60 >= 0)
    v20 = (const std::string::value_type *)&v58;
  else
    v20 = (const std::string::value_type *)v58;
  if (v60 >= 0)
    v21 = HIBYTE(v60);
  else
    v21 = v59;
  v22 = std::string::append(&v62, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v64 = v22->__r_.__value_.__r.__words[2];
  v63 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_59:
    operator delete(v62.__r_.__value_.__l.__data_);
    __dst = a2;
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_60:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v58);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
LABEL_30:
  __dst = a2;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_60;
LABEL_31:
  *(_QWORD *)((char *)v49 + *(_QWORD *)(v47 - 24)) = 0;
  v62.__r_.__value_.__s.__data_[0] = 91;
  sub_20E86A980(&v47, (uint64_t)&v62, 1);
  v24 = *a1;
  if (!*a1)
    goto LABEL_54;
  v25 = 0;
  v26 = (int)v9 + (int)v6 + 1;
  while (2)
  {
    if (!a1[1])
      goto LABEL_52;
    v27 = 0;
    do
    {
      v28 = *(float *)(*((_QWORD *)a1 + 2) + 4 * (v25 + a1[2] * v27));
      v29 = v47;
      v30 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
      if ((v30[9] & 1) != 0)
      {
        if (v28 != 0.0)
        {
          *((_QWORD *)v30 + 3) = v26;
          *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
          *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6 - 3;
          std::ostream::operator<<();
          goto LABEL_49;
        }
      }
      else if (fabs(v28) >= v11)
      {
        *((_QWORD *)v30 + 3) = v26;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) = *(_DWORD *)((_BYTE *)v48 + *(_QWORD *)(v29 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
        *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6;
        std::ostream::operator<<();
        goto LABEL_49;
      }
      if (v64 >= 0)
        v31 = &v63;
      else
        v31 = (__int128 *)v63;
      if (v64 >= 0)
        v32 = HIBYTE(v64);
      else
        v32 = *((_QWORD *)&v63 + 1);
      sub_20E86A980(&v47, (uint64_t)v31, v32);
LABEL_49:
      v33 = a1[1];
      if (v27 != v33 - 1)
      {
        v62.__r_.__value_.__s.__data_[0] = 44;
        sub_20E86A980(&v47, (uint64_t)&v62, 1);
        v33 = a1[1];
      }
      ++v27;
    }
    while (v27 < v33);
    v24 = *a1;
LABEL_52:
    if (v25 != v24 - 1)
    {
      sub_20E86A980(&v47, (uint64_t)";\n ", 3);
      v24 = *a1;
    }
    if (++v25 < v24)
      continue;
    break;
  }
LABEL_54:
  sub_20E86A980(&v47, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v48 + *(_QWORD *)(v47 - 24)) = v45;
  v34 = __dst;
  if (SHIBYTE(v64) < 0)
  {
    operator delete((void *)v63);
    v35 = v56;
    if ((v56 & 0x10) != 0)
      goto LABEL_62;
LABEL_56:
    if ((v35 & 8) == 0)
    {
      v36 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_72;
    }
    v38 = (const void *)v49[0];
    v36 = v50 - v49[0];
    if ((unint64_t)(v50 - v49[0]) <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_65;
LABEL_76:
    sub_20E860B7C();
  }
  v35 = v56;
  if ((v56 & 0x10) == 0)
    goto LABEL_56;
LABEL_62:
  v37 = v55;
  if (v55 < v52)
  {
    v55 = v52;
    v37 = v52;
  }
  v38 = v51;
  v36 = v37 - (_QWORD)v51;
  if (v37 - (unint64_t)v51 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_76;
LABEL_65:
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    __dst[1] = v36;
    __dst[2] = v40 | 0x8000000000000000;
    *__dst = v41;
    v34 = v41;
    goto LABEL_71;
  }
  *((_BYTE *)__dst + 23) = v36;
  if (v36)
LABEL_71:
    memmove(v34, v38, v36);
LABEL_72:
  *((_BYTE *)v34 + v36) = 0;
  v46[0] = *MEMORY[0x24BEDB7F0];
  v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47 = v42;
  v48[0] = MEMORY[0x24BEDB848] + 16;
  if (v54 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v57);
}

void sub_20E9F7654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 121) < 0)
    operator delete(*(void **)(v4 - 144));
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F7718@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  int64_t v5;
  size_t v6;
  size_t v7;
  double v8;
  size_t v9;
  size_t v10;
  double v11;
  std::string *p_b;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  double v28;
  uint64_t v29;
  char *v30;
  __int128 *v31;
  uint64_t v32;
  unsigned int v33;
  void *v34;
  char v35;
  size_t v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *__dst;
  int v45;
  _QWORD v46[2];
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[2];
  uint64_t v50;
  const void *v51;
  unint64_t v52;
  void *__p;
  char v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  void **v58;
  size_t v59;
  int64_t v60;
  std::string __b;
  std::string v62;
  __int128 v63;
  int64_t v64;

  sub_20E863438((uint64_t)v46);
  v4 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
  v45 = *((_DWORD *)v4 + 2);
  v6 = *((_QWORD *)v4 + 2);
  v5 = *((_QWORD *)v4 + 3);
  if (v5)
  {
    if (v5 <= (uint64_t)(v6 + 2))
      v7 = v6 + 2;
    else
      v7 = v5;
    v8 = __exp10((double)-(uint64_t)v6);
    v9 = v7 + ~v6;
    v10 = v9 - 1;
    if (v9 - 1 > 0x7FFFFFFFFFFFFFF7)
      sub_20E860B7C();
    v11 = v8;
    if (v10 >= 0x17)
    {
      v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v13 = v10 | 7;
      v14 = v13 + 1;
      p_b = (std::string *)operator new(v13 + 1);
      __b.__r_.__value_.__l.__size_ = v9 - 1;
      __b.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = v9 - 1;
      p_b = &__b;
      if (v9 == 1)
      {
        LODWORD(v9) = 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    v11 = __exp10((double)-(uint64_t)v6);
    v10 = 3;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 3;
    p_b = &__b;
    LODWORD(v9) = 4;
  }
  memset(p_b, 32, v10);
LABEL_14:
  p_b->__r_.__value_.__s.__data_[v10] = 0;
  v15 = std::string::append(&__b, "0 ", 2uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v6 >= 0x17)
  {
    v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v18 = v6 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    v59 = v6;
    v60 = v19 | 0x8000000000000000;
    v58 = v17;
    goto LABEL_21;
  }
  HIBYTE(v60) = v6;
  v17 = (void **)&v58;
  if (v6)
LABEL_21:
    memset(v17, 32, v6);
  *((_BYTE *)v17 + v6) = 0;
  if (v60 >= 0)
    v20 = (const std::string::value_type *)&v58;
  else
    v20 = (const std::string::value_type *)v58;
  if (v60 >= 0)
    v21 = HIBYTE(v60);
  else
    v21 = v59;
  v22 = std::string::append(&v62, v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v64 = v22->__r_.__value_.__r.__words[2];
  v63 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v60) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_59:
    operator delete(v62.__r_.__value_.__l.__data_);
    __dst = a2;
    if ((SHIBYTE(__b.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_60:
    operator delete(__b.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v58);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_59;
LABEL_30:
  __dst = a2;
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_60;
LABEL_31:
  *(_QWORD *)((char *)v49 + *(_QWORD *)(v47 - 24)) = 0;
  v62.__r_.__value_.__s.__data_[0] = 91;
  sub_20E86A980(&v47, (uint64_t)&v62, 1);
  v24 = *a1;
  if (!*a1)
    goto LABEL_54;
  v25 = 0;
  v26 = (int)v9 + (int)v6 + 1;
  while (2)
  {
    if (!a1[1])
      goto LABEL_52;
    v27 = 0;
    do
    {
      v28 = *(double *)(*((_QWORD *)a1 + 2) + 8 * (v25 + a1[2] * v27));
      v29 = v47;
      v30 = (char *)&v48[-1] + *(_QWORD *)(v47 - 24);
      if ((v30[9] & 1) != 0)
      {
        if (v28 != 0.0)
        {
          *((_QWORD *)v30 + 3) = v26;
          *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
          *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6 - 3;
          std::ostream::operator<<();
          goto LABEL_49;
        }
      }
      else if (fabs(v28) >= v11)
      {
        *((_QWORD *)v30 + 3) = v26;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) = *(_DWORD *)((_BYTE *)v48 + *(_QWORD *)(v29 - 24)) & 0xFFFFFEFB | 4;
        *(_DWORD *)((char *)v48 + *(_QWORD *)(v29 - 24)) |= 0x400u;
        *(_QWORD *)((char *)&v48[1] + *(_QWORD *)(v29 - 24)) = (int)v6;
        std::ostream::operator<<();
        goto LABEL_49;
      }
      if (v64 >= 0)
        v31 = &v63;
      else
        v31 = (__int128 *)v63;
      if (v64 >= 0)
        v32 = HIBYTE(v64);
      else
        v32 = *((_QWORD *)&v63 + 1);
      sub_20E86A980(&v47, (uint64_t)v31, v32);
LABEL_49:
      v33 = a1[1];
      if (v27 != v33 - 1)
      {
        v62.__r_.__value_.__s.__data_[0] = 44;
        sub_20E86A980(&v47, (uint64_t)&v62, 1);
        v33 = a1[1];
      }
      ++v27;
    }
    while (v27 < v33);
    v24 = *a1;
LABEL_52:
    if (v25 != v24 - 1)
    {
      sub_20E86A980(&v47, (uint64_t)";\n ", 3);
      v24 = *a1;
    }
    if (++v25 < v24)
      continue;
    break;
  }
LABEL_54:
  sub_20E86A980(&v47, (uint64_t)"   ]", 4);
  *(_DWORD *)((char *)v48 + *(_QWORD *)(v47 - 24)) = v45;
  v34 = __dst;
  if (SHIBYTE(v64) < 0)
  {
    operator delete((void *)v63);
    v35 = v56;
    if ((v56 & 0x10) != 0)
      goto LABEL_62;
LABEL_56:
    if ((v35 & 8) == 0)
    {
      v36 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_72;
    }
    v38 = (const void *)v49[0];
    v36 = v50 - v49[0];
    if ((unint64_t)(v50 - v49[0]) <= 0x7FFFFFFFFFFFFFF7)
      goto LABEL_65;
LABEL_76:
    sub_20E860B7C();
  }
  v35 = v56;
  if ((v56 & 0x10) == 0)
    goto LABEL_56;
LABEL_62:
  v37 = v55;
  if (v55 < v52)
  {
    v55 = v52;
    v37 = v52;
  }
  v38 = v51;
  v36 = v37 - (_QWORD)v51;
  if (v37 - (unint64_t)v51 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_76;
LABEL_65:
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v41 = operator new(v39 + 1);
    __dst[1] = v36;
    __dst[2] = v40 | 0x8000000000000000;
    *__dst = v41;
    v34 = v41;
    goto LABEL_71;
  }
  *((_BYTE *)__dst + 23) = v36;
  if (v36)
LABEL_71:
    memmove(v34, v38, v36);
LABEL_72:
  *((_BYTE *)v34 + v36) = 0;
  v46[0] = *MEMORY[0x24BEDB7F0];
  v42 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v47 = v42;
  v48[0] = MEMORY[0x24BEDB848] + 16;
  if (v54 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC6290](&v57);
}

void sub_20E9F7C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 121) < 0)
    operator delete(*(void **)(v4 - 144));
  sub_20E863784((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20E9F7D60(uint64_t a1)
{
  return *(double *)a1;
}

void sub_20E9F7D8C(uint64_t a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X2>, char a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  size_t v15;
  size_t v16;
  void **p_dst;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  unint64_t v29;
  std::string *v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  unsigned __int8 v34;
  int v35;
  unsigned __int8 v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  _QWORD *v43;
  size_t v44;
  void *v45;
  unint64_t v46;
  const void **v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  size_t v53;
  const char *v54;
  unsigned __int8 v55;
  const char *v56;
  size_t v57;
  std::string::size_type *p_size;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  size_t v65;
  void *v66;
  _QWORD *v67;
  size_t v68;
  size_t v69;
  _QWORD *v70;
  void *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char v76;
  _QWORD *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  void *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::string::size_type v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::string::size_type v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  void **v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::string::size_type v122;
  std::string::size_type v123;
  void **v124;
  uint64_t v125;
  std::string::size_type v126;
  std::string::size_type size;
  std::string *v128;
  unsigned __int8 v129;
  int v130;
  _QWORD *v131;
  std::string *v132;
  std::string::size_type v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _QWORD *v138;
  unint64_t v139;
  char *__s;
  void **__dst;
  size_t v142;
  int64_t v143;
  _QWORD v144[3];
  int v145;
  const char *v146;
  int v147;
  const char *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  void *__p[2];
  int64_t v152;
  uint64_t v153;
  std::string v154;
  char *v155;
  std::__shared_weak_count *v156;
  _QWORD *v157;
  __int128 v158;
  std::string v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD v162[3];
  uint64_t v163;
  unint64_t v164;
  void *v165;
  char v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  std::string v170;
  __int128 v171;
  void *v172[2];
  unint64_t v173;
  char v174;
  _QWORD v175[5];

  v175[2] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) >= 0)
    v10 = a1;
  else
    v10 = *(_QWORD *)a1;
  v11 = objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v10);
  v12 = (void *)objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", v11);
  if (!v12)
  {
    if (a4)
    {
      v18 = sub_20E86A980(a3, (uint64_t)"Could not find bundle '", 23);
      v19 = *(char *)(a1 + 23);
      if (v19 >= 0)
        v20 = a1;
      else
        v20 = *(_QWORD *)a1;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(a1 + 23);
      else
        v21 = *(_QWORD *)(a1 + 8);
      v22 = sub_20E86A980(v18, v20, v21);
      v23 = sub_20E86A980(v22, (uint64_t)"'.", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
      v24 = std::locale::use_facet((const std::locale *)&v159, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
      std::locale::~locale((std::locale *)&v159);
      std::ostream::put();
      std::ostream::flush();
    }
    a5->__r_.__value_.__s.__data_[0] = 0;
    a5[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v13 = (void *)objc_msgSend(v12, "resourcePath");
  if (!v13
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Essentials/Resource/src/Resource.cpp", 125, (uint64_t)"resources_path", 14, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v14 = (const char *)objc_msgSend(v13, "UTF8String");
  v15 = strlen(v14);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v25 = v15 | 7;
    v26 = v25 + 1;
    p_dst = (void **)operator new(v25 + 1);
    v142 = v16;
    v143 = v26 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_23;
  }
  HIBYTE(v143) = v15;
  p_dst = (void **)&__dst;
  if (v15)
LABEL_23:
    memmove(p_dst, v14, v16);
  *((_BYTE *)p_dst + v16) = 0;
  v27 = SHIBYTE(v143);
  if (v143 >= 0)
    v28 = HIBYTE(v143);
  else
    v28 = v142;
  v29 = v28 + 10;
  if (v28 + 10 > 0x7FFFFFFFFFFFFFF7)
    sub_20E860B7C();
  if (v29 >= 0x17)
  {
    v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v31 = v29 | 7;
    v32 = v31 + 1;
    v30 = (std::string *)operator new(v31 + 1);
    v170.__r_.__value_.__l.__size_ = v28 + 10;
    v170.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
    v170.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  }
  else
  {
    memset(&v170, 0, sizeof(v170));
    v30 = &v170;
    *((_BYTE *)&v170.__r_.__value_.__s + 23) = v28 + 10;
    if (!v28)
      goto LABEL_38;
  }
  if (v27 >= 0)
    v33 = (void **)&__dst;
  else
    v33 = __dst;
  memmove(v30, v33, v28);
LABEL_38:
  strcpy((char *)v30 + v28, "/.disabled");
  v159 = v170;
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v159, 0);
  v34 = v144[0];
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v159.__r_.__value_.__l.__data_);
    v35 = v34;
    if (!v34)
      goto LABEL_188;
  }
  else
  {
    v35 = LOBYTE(v144[0]);
    if (!LOBYTE(v144[0]))
      goto LABEL_188;
  }
  if (v35 != 255)
  {
    v36 = atomic_load((unsigned __int8 *)&qword_254A5ACB8);
    if ((v36 & 1) == 0 && __cxa_guard_acquire(&qword_254A5ACB8))
    {
      sub_21021D3D8(&v170);
      sub_20E8610C0(&v159, "cv3d.esn.resource");
      sub_20E8C4068((uint64_t **)&v170, (uint64_t)&v159, &qword_254A5ACB0);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      __cxa_guard_release(&qword_254A5ACB8);
    }
    v153 = qword_254A5ACB0;
    if (**(int **)(qword_254A5ACB0 + 56) <= 4)
    {
      v37 = *(unsigned __int8 *)(qword_254A5ACB0 + 72);
      v38 = sub_20E8C31DC(qword_254A5ACB0, "OSLogSurrogateAppender", 1, 0);
      v39 = v38;
      if (v37 || v38)
      {
        sub_20E863438((uint64_t)&v159);
        v40 = sub_20E86A980(&v159.__r_.__value_.__r.__words[2], (uint64_t)"Accessing resource path in:\n\t'", 30);
        if (v143 >= 0)
          v41 = (void **)&__dst;
        else
          v41 = __dst;
        if (v143 >= 0)
          v42 = HIBYTE(v143);
        else
          v42 = v142;
        v43 = sub_20E86A980(v40, (uint64_t)v41, v42);
        sub_20E86A980(v43, (uint64_t)"'\nResource access in this folder may fail, as the target has not been ENABLED for execution.", 92);
        v137 = v37;
        v139 = v39;
        if ((v168 & 0x10) != 0)
        {
          v46 = v167;
          if (v167 < v164)
          {
            v167 = v164;
            v46 = v164;
          }
          v47 = (const void **)&v163;
        }
        else
        {
          if ((v168 & 8) == 0)
          {
            v44 = 0;
            HIBYTE(v152) = 0;
            v45 = __p;
            goto LABEL_68;
          }
          v47 = (const void **)v162;
          v46 = v162[2];
        }
        v48 = *v47;
        v44 = v46 - (_QWORD)*v47;
        if (v44 > 0x7FFFFFFFFFFFFFF7)
          sub_20E860B7C();
        if (v44 >= 0x17)
        {
          v49 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v49 = v44 | 7;
          v50 = v49 + 1;
          v45 = operator new(v49 + 1);
          __p[1] = (void *)v44;
          v152 = v50 | 0x8000000000000000;
          __p[0] = v45;
        }
        else
        {
          HIBYTE(v152) = v46 - *(_BYTE *)v47;
          v45 = __p;
          if (!v44)
          {
LABEL_68:
            *((_BYTE *)v45 + v44) = 0;
            v144[0] = &v153;
            v144[1] = std::chrono::steady_clock::now().__d_.__rep_;
            v144[2] = std::chrono::system_clock::now().__d_.__rep_;
            v145 = 4;
            v146 = "unknown file";
            v147 = 60;
            v149 = 0;
            v150 = 0;
            v148 = "unknown function";
            v51 = __p;
            if (v152 < 0)
              v51 = (void **)__p[0];
            __s = (char *)v51;
            v52 = *(_QWORD *)v144[0];
            if (*(char *)(*(_QWORD *)v144[0] + 39) < 0)
            {
              v54 = *(const char **)(v52 + 16);
              v53 = *(_QWORD *)(v52 + 24);
            }
            else
            {
              v53 = *(unsigned __int8 *)(*(_QWORD *)v144[0] + 39);
              v54 = (const char *)(*(_QWORD *)v144[0] + 16);
            }
            v135 = *(_QWORD *)v144[0] + 16;
            v136 = *(_QWORD *)v144[0];
            v138 = a3;
            v55 = atomic_load((unsigned __int8 *)&qword_254A4A510);
            if ((v55 & 1) == 0 && __cxa_guard_acquire(&qword_254A4A510))
            {
              sub_20E9E46F8((uint64_t)&v170);
              sub_20E86E4C8((uint64_t *)&xmmword_254A4A4F8, "com.apple.cv3d", (unint64_t)&v170);
              if ((_BYTE)v171 && SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v170.__r_.__value_.__l.__data_);
              __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254A4A4F8, &dword_20E81F000);
              __cxa_guard_release(&qword_254A4A510);
            }
            if (byte_254A4A50F >= 0)
              v56 = (const char *)&xmmword_254A4A4F8;
            else
              v56 = (const char *)xmmword_254A4A4F8;
            if (byte_254A4A50F >= 0)
              v57 = byte_254A4A50F;
            else
              v57 = *((_QWORD *)&xmmword_254A4A4F8 + 1);
            v170.__r_.__value_.__r.__words[0] = (std::string::size_type)os_log_create(v56, v54);
            p_size = &v170.__r_.__value_.__l.__size_;
            if (v57 > 0x7FFFFFFFFFFFFFF7)
              sub_20E860B7C();
            if (v57 >= 0x17)
            {
              v59 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v57 | 7) != 0x17)
                v59 = v57 | 7;
              v60 = v59 + 1;
              p_size = (std::string::size_type *)operator new(v59 + 1);
              v170.__r_.__value_.__r.__words[2] = v57;
              *(_QWORD *)&v171 = v60 | 0x8000000000000000;
              v170.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
            }
            else
            {
              BYTE7(v171) = v57;
              if (!v57)
              {
LABEL_88:
                *((_BYTE *)p_size + v57) = 0;
                BYTE8(v171) = 1;
                v61 = v172;
                if (v53 > 0x7FFFFFFFFFFFFFF7)
                  sub_20E860B7C();
                a3 = v138;
                if (v53 >= 0x17)
                {
                  v62 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v53 | 7) != 0x17)
                    v62 = v53 | 7;
                  v63 = v62 + 1;
                  v61 = (void **)operator new(v62 + 1);
                  v172[1] = (void *)v53;
                  v173 = v63 | 0x8000000000000000;
                  v172[0] = v61;
                }
                else
                {
                  HIBYTE(v173) = v53;
                  if (!v53)
                  {
LABEL_96:
                    *((_BYTE *)v61 + v53) = 0;
                    v174 = 1;
                    v64 = v170.__r_.__value_.__r.__words[0];
                    if (SHIBYTE(v173) < 0)
                      operator delete(v172[0]);
                    if (BYTE8(v171) && SBYTE7(v171) < 0)
                      operator delete((void *)v170.__r_.__value_.__l.__size_);
                    if (v170.__r_.__value_.__r.__words[0])

                    if (!v139 || !*(_QWORD *)(v139 + 24))
                    {
                      os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
                      LODWORD(v170.__r_.__value_.__l.__data_) = 136315138;
                      *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = (std::string::size_type)__s;
                      v71 = (void *)_os_log_send_and_compose_impl();
                      v72 = v137;
                      if (v71)
                        free(v71);
                      goto LABEL_174;
                    }
                    v65 = _os_log_pack_size();
                    v66 = operator new(v65, (std::align_val_t)8uLL);
                    v67 = (_QWORD *)operator new();
                    *v67 = &off_24C9ABB80;
                    v67[1] = 0;
                    v67[2] = 0;
                    v67[3] = v66;
                    v154.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
                    v154.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
                    v155 = 0;
                    v156 = 0;
                    v154.__r_.__value_.__r.__words[2] = (std::string::size_type)v67;
                    v68 = strlen(__s);
                    if (v68 > 0x7FFFFFFFFFFFFFF7)
                      sub_20E860B7C();
                    v69 = v68;
                    if (v68 >= 0x17)
                    {
                      v73 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v68 | 7) != 0x17)
                        v73 = v68 | 7;
                      v74 = v73 + 1;
                      v70 = operator new(v73 + 1);
                      *(_QWORD *)&v158 = v69;
                      *((_QWORD *)&v158 + 1) = v74 | 0x8000000000000000;
                      v157 = v70;
                    }
                    else
                    {
                      HIBYTE(v158) = v68;
                      v70 = &v157;
                      if (!v68)
                      {
LABEL_115:
                        *((_BYTE *)v70 + v69) = 0;
                        v75 = v157;
                        v175[0] = v158;
                        *(_QWORD *)((char *)v175 + 7) = *(_QWORD *)((char *)&v158 + 7);
                        v76 = HIBYTE(v158);
                        v77 = operator new(0x38uLL);
                        v77[1] = 0;
                        v77[2] = 0;
                        v77[3] = off_24C9ABC20;
                        *v77 = &off_24C9ABBD0;
                        v78 = v175[0];
                        v77[4] = v75;
                        v77[5] = v78;
                        *(_QWORD *)((char *)v77 + 47) = *(_QWORD *)((char *)v175 + 7);
                        *((_BYTE *)v77 + 55) = v76;
                        v175[0] = 0;
                        *(_QWORD *)((char *)v175 + 7) = 0;
                        v79 = v156;
                        v155 = (char *)(v77 + 3);
                        v156 = (std::__shared_weak_count *)v77;
                        if (v79)
                        {
                          p_shared_owners = (unint64_t *)&v79->__shared_owners_;
                          do
                            v81 = __ldaxr(p_shared_owners);
                          while (__stlxr(v81 - 1, p_shared_owners));
                          if (!v81)
                          {
                            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                            std::__shared_weak_count::__release_weak(v79);
                          }
                        }
                        v170 = v154;
                        v82 = v155;
                        if (v154.__r_.__value_.__r.__words[2])
                        {
                          v83 = (unint64_t *)(v154.__r_.__value_.__r.__words[2] + 8);
                          do
                            v84 = __ldxr(v83);
                          while (__stxr(v84 + 1, v83));
                        }
                        v85 = v156;
                        *(_QWORD *)&v171 = v82;
                        *((_QWORD *)&v171 + 1) = v156;
                        if (v156)
                        {
                          v86 = (unint64_t *)&v156->__shared_owners_;
                          do
                            v87 = __ldxr(v86);
                          while (__stxr(v87 + 1, v86));
                          v172[0] = v82;
                          do
                            v88 = __ldaxr(v86);
                          while (__stlxr(v88 - 1, v86));
                          if (!v88)
                          {
                            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                            std::__shared_weak_count::__release_weak(v85);
                          }
                        }
                        else
                        {
                          v172[0] = v82;
                        }
                        v89 = (std::__shared_weak_count *)v154.__r_.__value_.__r.__words[2];
                        if (v154.__r_.__value_.__r.__words[2])
                        {
                          v90 = (unint64_t *)(v154.__r_.__value_.__r.__words[2] + 8);
                          do
                            v91 = __ldaxr(v90);
                          while (__stlxr(v91 - 1, v90));
                          if (!v91)
                          {
                            ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                            std::__shared_weak_count::__release_weak(v89);
                          }
                        }
                        v92 = v170.__r_.__value_.__r.__words[0];
                        if (*((char *)v172[0] + 31) >= 0)
                          v93 = (char *)v172[0] + 8;
                        else
                          v93 = (char *)*((_QWORD *)v172[0] + 1);
                        v94 = _os_log_pack_fill();
                        *(_DWORD *)v94 = 136315138;
                        *(_QWORD *)(v94 + 4) = v93;
                        v95 = operator new();
                        v96 = *(unsigned __int8 *)(v136 + 39);
                        v97 = v135;
                        if ((v96 & 0x80u) != 0)
                        {
                          v97 = *(_QWORD *)(v136 + 16);
                          v96 = *(_QWORD *)(v136 + 24);
                        }
                        *(_QWORD *)v95 = v92;
                        *(_OWORD *)(v95 + 8) = *(_OWORD *)&v170.__r_.__value_.__r.__words[1];
                        *(_OWORD *)&v170.__r_.__value_.__r.__words[1] = 0uLL;
                        *(_OWORD *)(v95 + 24) = v171;
                        v171 = 0uLL;
                        *(_QWORD *)(v95 + 40) = v97;
                        *(_QWORD *)(v95 + 48) = v96;
                        *(_BYTE *)(v95 + 56) = 16;
                        v157 = 0;
                        v154.__r_.__value_.__r.__words[0] = v95;
                        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(v139 + 24) + 40))(*(_QWORD *)(v139 + 24), &v154);
                        v72 = v137;
                        v98 = v154.__r_.__value_.__r.__words[0];
                        v154.__r_.__value_.__r.__words[0] = 0;
                        if (v98)
                        {
                          v99 = *(std::__shared_weak_count **)(v98 + 32);
                          if (v99)
                          {
                            v100 = (unint64_t *)&v99->__shared_owners_;
                            do
                              v101 = __ldaxr(v100);
                            while (__stlxr(v101 - 1, v100));
                            if (!v101)
                            {
                              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                              std::__shared_weak_count::__release_weak(v99);
                            }
                          }
                          v102 = *(std::__shared_weak_count **)(v98 + 16);
                          if (v102)
                          {
                            v103 = (unint64_t *)&v102->__shared_owners_;
                            do
                              v104 = __ldaxr(v103);
                            while (__stlxr(v104 - 1, v103));
                            if (!v104)
                            {
                              ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                              std::__shared_weak_count::__release_weak(v102);
                            }
                          }
                          MEMORY[0x212BC6398](v98, 0x10F0C40B62ED6C6);
                          v105 = v157;
                          v157 = 0;
                          if (v105)
                          {
                            v106 = (std::__shared_weak_count *)v105[4];
                            if (v106)
                            {
                              v107 = (unint64_t *)&v106->__shared_owners_;
                              do
                                v108 = __ldaxr(v107);
                              while (__stlxr(v108 - 1, v107));
                              if (!v108)
                              {
                                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                                std::__shared_weak_count::__release_weak(v106);
                              }
                            }
                            v109 = (std::__shared_weak_count *)v105[2];
                            if (v109)
                            {
                              v110 = (unint64_t *)&v109->__shared_owners_;
                              do
                                v111 = __ldaxr(v110);
                              while (__stlxr(v111 - 1, v110));
                              if (!v111)
                              {
                                ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                                std::__shared_weak_count::__release_weak(v109);
                              }
                            }
                            MEMORY[0x212BC6398](v105, 0x10F0C40B62ED6C6);
                          }
                        }
                        v112 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
                        if (*((_QWORD *)&v171 + 1))
                        {
                          v113 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
                          do
                            v114 = __ldaxr(v113);
                          while (__stlxr(v114 - 1, v113));
                          if (!v114)
                          {
                            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                            std::__shared_weak_count::__release_weak(v112);
                          }
                        }
                        v115 = (std::__shared_weak_count *)v170.__r_.__value_.__r.__words[2];
                        if (v170.__r_.__value_.__r.__words[2])
                        {
                          v116 = (unint64_t *)(v170.__r_.__value_.__r.__words[2] + 8);
                          do
                            v117 = __ldaxr(v116);
                          while (__stlxr(v117 - 1, v116));
                          if (!v117)
                          {
                            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                            std::__shared_weak_count::__release_weak(v115);
                          }
                        }
LABEL_174:
                        if (v72)
                        {
                          v118 = __p;
                          if (v152 < 0)
                            v118 = (void **)__p[0];
                          sub_20E8C003C((uint64_t)v144, "%s", (const char *)v118);
                          sub_20E863570((uint64_t)v144);
                        }
                        sub_20E863570((uint64_t)v144);
                        v119 = v150;
                        if (v150)
                        {
                          v120 = (unint64_t *)&v150->__shared_owners_;
                          do
                            v121 = __ldaxr(v120);
                          while (__stlxr(v121 - 1, v120));
                          if (!v121)
                          {
                            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                            std::__shared_weak_count::__release_weak(v119);
                          }
                        }
                        if (SHIBYTE(v152) < 0)
                          operator delete(__p[0]);
                        v159.__r_.__value_.__r.__words[0] = *MEMORY[0x24BEDB7F0];
                        v122 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                        *(std::string::size_type *)((char *)v159.__r_.__value_.__r.__words
                                                  + *(_QWORD *)(v159.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
                        v159.__r_.__value_.__r.__words[2] = v122;
                        v160 = MEMORY[0x24BEDB848] + 16;
                        if (v166 < 0)
                          operator delete(v165);
                        std::streambuf::~streambuf();
                        std::iostream::~basic_iostream();
                        MEMORY[0x212BC6290](&v169);
                        goto LABEL_188;
                      }
                    }
                    memcpy(v70, __s, v69);
                    goto LABEL_115;
                  }
                }
                memmove(v61, v54, v53);
                goto LABEL_96;
              }
            }
            memmove(p_size, v56, v57);
            goto LABEL_88;
          }
        }
        memmove(v45, v48, v44);
        goto LABEL_68;
      }
    }
  }
LABEL_188:
  v123 = HIBYTE(v143);
  v124 = (void **)&__dst;
  if (v143 < 0)
  {
    v124 = __dst;
    v123 = v142;
  }
  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v124;
  v159.__r_.__value_.__l.__size_ = v123;
  v125 = *(unsigned __int8 *)(a2 + 23);
  if ((v125 & 0x80u) == 0)
    v126 = a2;
  else
    v126 = *(_QWORD *)a2;
  if ((v125 & 0x80u) != 0)
    v125 = *(_QWORD *)(a2 + 8);
  v159.__r_.__value_.__r.__words[2] = v126;
  v160 = v125;
  sub_20E8778D4((uint64_t)&v159, (uint64_t)&v161, "/", 1uLL, &v170);
  memset(&v159, 0, sizeof(v159));
  size = HIBYTE(v170.__r_.__value_.__r.__words[2]);
  if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v128 = &v170;
  else
    v128 = (std::string *)v170.__r_.__value_.__r.__words[0];
  if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v170.__r_.__value_.__l.__size_;
  sub_20E8A9678(&v159, v128, (std::string *)((char *)v128 + size));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v159, 0);
  v129 = v144[0];
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v159.__r_.__value_.__l.__data_);
    v130 = v129;
    if (!v129)
      goto LABEL_205;
  }
  else
  {
    v130 = LOBYTE(v144[0]);
    if (!LOBYTE(v144[0]))
      goto LABEL_205;
  }
  if (v130 != 255)
  {
    *a5 = v170;
    a5[1].__r_.__value_.__s.__data_[0] = 1;
    if (SHIBYTE(v143) < 0)
      goto LABEL_217;
    return;
  }
LABEL_205:
  if (a4)
  {
    v131 = sub_20E86A980(a3, (uint64_t)"Resource at '", 13);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v132 = &v170;
    else
      v132 = (std::string *)v170.__r_.__value_.__r.__words[0];
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v133 = HIBYTE(v170.__r_.__value_.__r.__words[2]);
    else
      v133 = v170.__r_.__value_.__l.__size_;
    v134 = sub_20E86A980(v131, (uint64_t)v132, v133);
    sub_20E86A980(v134, (uint64_t)"' does not exist.", 17);
  }
  a5->__r_.__value_.__s.__data_[0] = 0;
  a5[1].__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v143) & 0x80000000) == 0)
      return;
LABEL_217:
    operator delete(__dst);
    return;
  }
  operator delete(v170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v143) < 0)
    goto LABEL_217;
}

void sub_20E9F8C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,std::locale a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (*(_BYTE *)(v52 - 168) && *(char *)(v52 - 169) < 0)
    operator delete(*(void **)(v52 - 192));
  __cxa_guard_abort(&qword_254A4A510);
  sub_20E863714((uint64_t)&a23);
  if (a37 < 0)
    operator delete(__p);
  sub_20E863784((uint64_t)&a47);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t *sub_20E9F8E74(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;

  *a1 = 0;
  v8 = operator new();
  sub_20EEF108C(v8, a2, a3, a4);
  v9 = *a1;
  *a1 = v8;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 136);
    *(_QWORD *)(v9 + 136) = 0;
    if (v10)
    {
      v11 = *(void **)v10;
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)(v10 + 8) = v11;
        operator delete(v11);
      }
      MEMORY[0x212BC6398](v10, 0x20C40960023A9);
    }
    v12 = *(_QWORD **)(v9 + 128);
    *(_QWORD *)(v9 + 128) = 0;
    if (v12)
      sub_20EEF2E84(v9 + 128, v12);
    *(_QWORD *)(v9 + 24) = &off_24C9F15F0;
    sub_20EEF2F9C(v9, *(_QWORD **)(v9 + 8));
    MEMORY[0x212BC6398](v9, 0x10A0C40EFEC9EB4);
  }
  return a1;
}

void sub_20E9F8F64(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  MEMORY[0x212BC6398](v2, 0x10A0C40EFEC9EB4);
  v4 = *v1;
  *v1 = 0;
  if (v4)
  {
    v5 = sub_20EEF100C(v4);
    MEMORY[0x212BC6398](v5, 0x10A0C40EFEC9EB4);
  }
  _Unwind_Resume(a1);
}

void sub_20E9F8FB4(uint64_t *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *a2;
      if (*a2)
      {
        v8 = *a1;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v11 = *(_QWORD **)(v8 + 128);
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = (std::__shared_weak_count *)v11[1];
        *v11 = v7;
        v11[1] = v5;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (unint64_t *)&v6->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20E9F90C8(uint64_t *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *a2;
      if (*a2)
      {
        v8 = *a1;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        v11 = *(_QWORD *)(v8 + 128);
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = *(std::__shared_weak_count **)(v11 + 24);
        *(_QWORD *)(v11 + 16) = v7;
        *(_QWORD *)(v11 + 24) = v5;
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (unint64_t *)&v6->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

uint64_t sub_20E9F91DC(uint64_t result)
{
  *(_QWORD *)(result + 8) = &off_24C9F15F0;
  return result;
}

void sub_20E9F91EC(uint64_t a1)
{
  *(_QWORD *)(a1 + 8) = &off_24C9F15F0;
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20E9F920C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  a1[4] = &off_24CA1A9A0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      a1[1] = &off_24CA1A9A0;
      v5 = (std::__shared_weak_count *)a1[3];
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  a1[1] = &off_24CA1A9A0;
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20E9F92D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  a1[4] = &off_24CA1A9A0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    a1[1] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    a1[1] = &off_24CA1A9A0;
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  JUMPOUT(0x212BC6398);
}

void sub_20E9F93A4()
{
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9F93B8(uint64_t a1, const __CFUUID *a2, CFTypeRef *a3)
{
  CFTypeID v6;
  uint64_t v7;
  uint64_t result;
  char *v9;
  CFTypeRef v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char __p[22];
  char v15;
  CFTypeRef cf;
  std::__shared_weak_count *v17;
  std::error_condition v18;

  if (a2 && (v6 = CFUUIDGetTypeID(), CFGetTypeID(a2) == v6))
  {
    *(CFUUIDBytes *)__p = CFUUIDGetUUIDBytes(a2);
    *(_QWORD *)(a1 + 52) = sub_20EA68D10((uint64_t)__p);
    *(_QWORD *)(a1 + 60) = v7;
    result = 1;
    *(_BYTE *)(a1 + 68) = 1;
  }
  else
  {
    v15 = 21;
    strcpy(__p, "Input UUID is invalid");
    v9 = (char *)operator new(0x78uLL);
    strcpy(v9, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/AppleCV3D/ConcurrentRayCasting/src/CV3DRaycastIntentContext.cpp");
    if (a3)
    {
      *(_QWORD *)&v18.__val_ = 22;
      v18.__cat_ = std::generic_category();
      sub_20EA67538(&v18, (uint64_t)__p, (CFErrorRef *)&cf);
      if (*a3)
        CFRelease(*a3);
      *a3 = 0;
      v10 = cf;
      if (cf)
        CFRetain(cf);
      *a3 = v10;
      v11 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    operator delete(v9);
    if (v15 < 0)
      operator delete(*(void **)__p);
    return 0;
  }
  return result;
}

void sub_20E9F9584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  void *v20;

  operator delete(v20);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20E9F95C0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20E9F95F0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20E9F9630(uint64_t a1)
{
  sub_20E96C574(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_20E9F965C(uint64_t a1)
{
  sub_20E96C574(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x212BC6398);
}

void sub_20E9F9698(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  std::__shared_weak_count *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  std::__shared_weak_count *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  std::__shared_weak_count *v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  std::__shared_weak_count *v211;
  unint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  unint64_t *v239;
  _OWORD *v240;
  uint64_t **v241;
  unint64_t v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  int v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  __int128 v253;
  int v254;
  _QWORD *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  std::__shared_weak_count *v258;
  unint64_t v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  __int128 v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t *v275;
  unint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  uint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  uint64_t **v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  __int128 v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  std::__shared_weak_count *v309;
  unint64_t v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t *v314;
  unint64_t v315;
  unint64_t v316;
  std::__shared_weak_count *v317;
  unint64_t *v318;
  unint64_t v319;
  std::__shared_weak_count *v320;
  unint64_t *v321;
  unint64_t v322;
  __int128 v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t *v326;
  unint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t *v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t *v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  uint64_t v353;
  std::__shared_weak_count *v354;
  unint64_t *v355;
  unint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  std::__shared_weak_count *v360;
  unint64_t *v361;
  unint64_t v362;
  std::__shared_weak_count *v363;
  unint64_t *v364;
  unint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  std::__shared_weak_count *v369;
  unint64_t *v370;
  unint64_t v371;
  std::__shared_weak_count *v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t **v386;
  uint64_t *v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  _QWORD *v391;
  unint64_t *v392;
  uint64_t **v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  unint64_t v400;
  std::__shared_weak_count *v401;
  unint64_t *v402;
  unint64_t v403;
  unint64_t *v404;
  unint64_t v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  std::__shared_weak_count *v412;
  unint64_t *v413;
  unint64_t v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  std::__shared_weak_count *v436;
  unint64_t *v437;
  unint64_t v438;
  std::__shared_weak_count *v439;
  unint64_t *v440;
  unint64_t v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  std::__shared_weak_count *v448;
  unint64_t *v449;
  unint64_t v450;
  uint64_t **v451;
  uint64_t *v452;
  uint64_t **v453;
  uint64_t *v454;
  std::__shared_weak_count *v455;
  unint64_t *v456;
  unint64_t v457;
  _QWORD *v458;
  unint64_t *v459;
  uint64_t **v460;
  unint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  unint64_t *v474;
  unint64_t v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  std::__shared_weak_count *v482;
  unint64_t *v483;
  unint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  std::__shared_weak_count *v491;
  unint64_t *v492;
  unint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  std::__shared_weak_count *v497;
  unint64_t *v498;
  unint64_t v499;
  std::__shared_weak_count *v500;
  unint64_t *v501;
  unint64_t v502;
  std::__shared_weak_count *v503;
  unint64_t *v504;
  unint64_t v505;
  std::__shared_weak_count *v506;
  unint64_t *v507;
  unint64_t v508;
  std::__shared_weak_count *v509;
  unint64_t *v510;
  unint64_t v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *v516;
  unint64_t v517;
  std::__shared_weak_count *v518;
  unint64_t *v519;
  unint64_t v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  uint64_t **v539;
  uint64_t *v540;
  uint64_t **v541;
  uint64_t *v542;
  std::__shared_weak_count *v543;
  unint64_t *v544;
  unint64_t v545;
  uint64_t **v546;
  std::__shared_weak_count *v547;
  unint64_t *v548;
  unint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t *v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  std::__shared_weak_count *v559;
  unint64_t v560;
  unint64_t *v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t *v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t *v567;
  unint64_t v568;
  _QWORD *v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t *v572;
  unint64_t v573;
  uint64_t v574;
  unint64_t v575;
  unint64_t *v576;
  unint64_t v577;
  uint64_t v578;
  unint64_t *v579;
  unint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t *v584;
  unint64_t v585;
  std::__shared_weak_count *v586;
  unint64_t *v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t *v590;
  uint64_t **v591;
  uint64_t *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  _QWORD **v617;
  uint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  _QWORD *v621;
  _QWORD *v622;
  _QWORD *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  uint64_t v630;
  __int128 v631;
  __int128 v632;
  uint64_t v633;
  __int128 v634;
  __int128 v635;
  uint64_t v636;
  __int128 v637;
  __int128 v638;
  uint64_t v639;
  __int128 v640;
  __int128 v641;
  _QWORD **v642;
  __int128 v643;
  __int128 v644;
  uint64_t v645;
  __int128 v646;
  __int128 v647;
  uint64_t v648;
  unint64_t *v649;
  unint64_t v650;
  unint64_t *v651;
  unint64_t v652;
  unint64_t *v653;
  unint64_t v654;
  unint64_t *v655;
  unint64_t v656;
  std::__shared_weak_count *v657;
  unint64_t *v658;
  unint64_t v659;
  uint64_t *v660;
  uint64_t v661;
  std::__shared_weak_count *v665;
  std::__shared_weak_count *v666;
  _QWORD *v667;
  std::__shared_weak_count *v668;
  __int16 v669;
  char v670;
  std::__shared_weak_count *v671;
  std::__shared_weak_count *v672;
  uint64_t (**v673)();
  _BYTE v674[24];
  __int128 v675;
  _QWORD v676[3];
  uint64_t v677;
  std::__shared_weak_count *v678;
  std::__shared_weak_count *v679;
  _QWORD *v680;
  std::__shared_weak_count *v681;
  _QWORD *v682;
  std::__shared_weak_count *v683;
  _QWORD *v684;
  std::__shared_weak_count *v685;
  _QWORD *v686;
  std::__shared_weak_count *v687;
  _QWORD *v688;
  std::__shared_weak_count *v689;
  uint64_t **v690;
  std::__shared_weak_count *v691;
  uint64_t **v692;
  std::__shared_weak_count *v693;
  _QWORD *v694;
  std::__shared_weak_count *v695;
  uint64_t **v696;
  std::__shared_weak_count *v697;
  uint64_t **v698;
  std::__shared_weak_count *v699;
  uint64_t **v700;
  uint64_t **v701;
  _QWORD *v702;
  std::__shared_weak_count *v703;
  uint64_t (**v704)();
  _BYTE v705[24];
  _BYTE v706[24];
  __int128 v707;
  __int128 v708;
  uint64_t (**v709)();
  __int128 v710;
  uint64_t v711;
  uint64_t (**v712)();
  __int128 v713;
  uint64_t (**v714)();
  __int128 v715;
  _QWORD *v716;
  std::__shared_weak_count *v717;
  _QWORD *v718;
  std::__shared_weak_count *v719;
  __int128 v720;
  _QWORD *v721;
  std::__shared_weak_count *v722;
  uint64_t **v723;
  std::__shared_weak_count *v724;
  uint64_t **v725;
  std::__shared_weak_count *v726;
  __int128 v727[2];
  __int128 v728;
  uint64_t v729;
  __int128 v730;
  uint64_t v731;
  _BYTE __p[32];
  __int128 v733;
  uint64_t v734;
  __int128 v735;
  _QWORD **v736;
  _BYTE v737[32];
  __int128 v738;
  uint64_t v739;
  __int128 v740;
  uint64_t v741;
  uint64_t v742;
  __int16 v743;
  _BYTE v744[32];
  __int128 v745;
  _QWORD v746[3];
  uint64_t v747;
  uint64_t v748;
  char v749;
  _BYTE v750[32];
  __int128 v751;
  _QWORD v752[3];
  uint64_t v753;
  _BYTE v754[32];
  __int128 v755;
  _QWORD v756[3];
  uint64_t v757;
  uint64_t v758;
  char v759;
  _BYTE v760[32];
  __int128 v761;
  _QWORD v762[3];
  uint64_t v763;
  _BYTE v764[32];
  _BYTE v765[24];
  __int128 v766;
  __int128 v767;
  uint64_t (**v768)();
  __int128 v769;
  uint64_t v770;
  uint64_t (**v771)();
  __int128 v772;
  uint64_t (**v773)();
  __int128 v774;
  __int128 v775;
  __int128 v776;
  __int128 v777;
  __int128 v778;
  __int128 v779;
  __int128 v780;
  uint64_t v781;

  v781 = *MEMORY[0x24BDAC8D0];
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BE7E8;
  v7[1].__shared_owners_ = 0;
  v678 = v7 + 1;
  v679 = v7;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v673 = &off_24C9B2F98;
  strcpy(v674, "SurfaceMapBuffering");
  v674[23] = 19;
  v675 = 0u;
  memset(v676, 0, sizeof(v676));
  v10 = (std::__shared_weak_count *)operator new(0x58uLL);
  v661 = a1;
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v10[1]);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new();
  *(_BYTE *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)v14 = &off_24C9BE838;
  *(_QWORD *)(v14 + 16) = &unk_24C9BE8B0;
  *(_QWORD *)(v14 + 24) = &unk_24C9BE8F0;
  *(_QWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 72) = v10 + 1;
  *(_QWORD *)(v14 + 80) = v10;
  v15 = (_QWORD *)operator new();
  *v15 = &off_24C9BE9E8;
  v15[1] = v7 + 1;
  v15[2] = v7;
  *(_QWORD *)(v14 + 88) = v15;
  *(_QWORD *)(v14 + 96) = v14 + 96;
  *(_QWORD *)(v14 + 104) = v14 + 96;
  *(_QWORD *)(v14 + 112) = 0;
  *(_QWORD *)(v14 + 120) = v14 + 120;
  *(_QWORD *)(v14 + 128) = v14 + 120;
  *(_QWORD *)(v14 + 136) = 0;
  v16 = (std::__shared_weak_count *)operator new();
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BEA38;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v18 = *(std::__shared_weak_count **)(v14 + 40);
  if (v18)
  {
    if (v18->__shared_owners_ != -1)
      goto LABEL_19;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    *(_QWORD *)(v14 + 32) = v14;
    *(_QWORD *)(v14 + 40) = v16;
    std::__shared_weak_count::__release_weak(v18);
  }
  else
  {
    do
      v22 = __ldxr(v17);
    while (__stxr(v22 + 1, v17));
    v23 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *(_QWORD *)(v14 + 32) = v14;
    *(_QWORD *)(v14 + 40) = v16;
  }
  do
    v25 = __ldaxr(v17);
  while (__stlxr(v25 - 1, v17));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_19:
  v660 = a5;
  v704 = &off_24C9B2FC8;
  strcpy(v705, "channel");
  *(_QWORD *)&v705[8] = *(_QWORD *)v764;
  *(_QWORD *)&v705[15] = *(_QWORD *)&v764[7];
  v705[23] = 7;
  *(_QWORD *)v764 = 0;
  *(_QWORD *)&v764[7] = 0;
  *(_QWORD *)v706 = 0x7974706D45;
  *(_QWORD *)&v706[8] = *(_QWORD *)v760;
  *(_QWORD *)&v706[15] = *(_QWORD *)&v760[7];
  v706[23] = 5;
  *(_QWORD *)v760 = 0;
  *(_QWORD *)&v760[7] = 0;
  v707 = 0uLL;
  v26 = (unint64_t *)&v16->__shared_weak_owners_;
  *(_QWORD *)&v708 = v14;
  *((_QWORD *)&v708 + 1) = v16;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
  v709 = &off_24C9B3030;
  v28 = (_QWORD *)operator new();
  *v28 = &off_24C9BEA88;
  v28[1] = v14;
  v28[2] = v16;
  *(_QWORD *)&v710 = v28;
  v30 = *((_QWORD *)&v708 + 1);
  v29 = v708;
  if (!*((_QWORD *)&v708 + 1))
  {
    *((_QWORD *)&v710 + 1) = v708;
    v711 = 0;
    if ((_QWORD)v708)
      v34 = v708 + 16;
    else
      v34 = 0;
    goto LABEL_38;
  }
  v31 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
  v33 = *((_QWORD *)&v708 + 1);
  *((_QWORD *)&v710 + 1) = v29;
  v711 = v30;
  if ((_QWORD)v708)
    v34 = v708 + 16;
  else
    v34 = 0;
  if (!*((_QWORD *)&v708 + 1))
  {
    v29 = v708;
LABEL_38:
    v37 = 0;
    v712 = &off_24C9B2FF8;
    v713 = v34;
    goto LABEL_39;
  }
  v35 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  v37 = *((_QWORD *)&v708 + 1);
  v29 = v708;
  v712 = &off_24C9B2FF8;
  *(_QWORD *)&v713 = v34;
  *((_QWORD *)&v713 + 1) = v33;
  if (*((_QWORD *)&v708 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
LABEL_39:
  if (v29)
    v40 = v29 + 24;
  else
    v40 = 0;
  v714 = &off_24C9B2310;
  *(_QWORD *)&v715 = v40;
  *((_QWORD *)&v715 + 1) = v37;
  v41 = operator new();
  *(_QWORD *)v41 = &off_24C9B2FC8;
  *(_OWORD *)(v41 + 8) = *(_OWORD *)v705;
  *(_QWORD *)(v41 + 24) = *(_QWORD *)&v705[16];
  memset(v705, 0, sizeof(v705));
  *(_OWORD *)(v41 + 32) = *(_OWORD *)v706;
  *(_QWORD *)(v41 + 48) = *(_QWORD *)&v706[16];
  memset(v706, 0, sizeof(v706));
  *(_OWORD *)(v41 + 56) = v707;
  v707 = 0uLL;
  *(_OWORD *)(v41 + 72) = v708;
  v708 = 0uLL;
  *(_QWORD *)(v41 + 88) = &off_24C9B3030;
  *(_OWORD *)(v41 + 96) = v710;
  v42 = v711;
  *((_QWORD *)&v710 + 1) = 0;
  v711 = 0;
  *(_QWORD *)(v41 + 112) = v42;
  *(_QWORD *)(v41 + 120) = &off_24C9B2FF8;
  *(_OWORD *)(v41 + 128) = v713;
  *(_QWORD *)&v710 = 0;
  v713 = 0uLL;
  *(_QWORD *)(v41 + 144) = &off_24C9B2310;
  *(_OWORD *)(v41 + 152) = v715;
  v715 = 0uLL;
  v677 = v41;
  sub_20E968C10((uint64_t)&v704);
  do
    v43 = __ldaxr(p_shared_owners);
  while (__stlxr(v43 - 1, p_shared_owners));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v44 = __ldaxr(v11);
  while (__stlxr(v44 - 1, v11));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  v45 = (std::__shared_weak_count *)operator new(0x20uLL);
  v45->__shared_owners_ = 0;
  v46 = (unint64_t *)&v45->__shared_owners_;
  v45->__shared_weak_owners_ = 0;
  v45->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BEB00;
  v45[1].__vftable = 0;
  v672 = v45;
  do
    v47 = __ldxr(v46);
  while (__stxr(v47 + 1, v46));
  *(_QWORD *)v760 = &off_24C9B2DF8;
  strcpy(&v760[8], "MeshBuffering");
  *(_QWORD *)&v760[22] = v758;
  v760[30] = v759;
  v760[31] = 13;
  v758 = 0;
  v759 = 0;
  v761 = 0u;
  memset(v762, 0, sizeof(v762));
  v48 = (std::__shared_weak_count *)operator new(0x58uLL);
  v48->__shared_owners_ = 0;
  v49 = (unint64_t *)&v48->__shared_owners_;
  v48->__shared_weak_owners_ = 0;
  v48->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v48[1]);
  do
    v50 = __ldxr(v49);
  while (__stxr(v50 + 1, v49));
  do
    v51 = __ldxr(v46);
  while (__stxr(v51 + 1, v46));
  v52 = operator new();
  *(_BYTE *)(v52 + 8) = 1;
  *(_QWORD *)(v52 + 48) = 0;
  *(_QWORD *)(v52 + 32) = 0;
  *(_QWORD *)(v52 + 40) = 0;
  *(_QWORD *)v52 = &off_24C9BEB50;
  *(_QWORD *)(v52 + 16) = &unk_24C9BEBC8;
  *(_QWORD *)(v52 + 24) = &unk_24C9BEC08;
  *(_QWORD *)(v52 + 56) = 0;
  *(_QWORD *)(v52 + 64) = 0;
  *(_QWORD *)(v52 + 72) = v48 + 1;
  *(_QWORD *)(v52 + 80) = v48;
  v53 = (_QWORD *)operator new();
  *v53 = &off_24C9BED00;
  v53[1] = v45 + 1;
  v53[2] = v45;
  *(_QWORD *)(v52 + 88) = v53;
  *(_QWORD *)(v52 + 96) = v52 + 96;
  *(_QWORD *)(v52 + 104) = v52 + 96;
  *(_QWORD *)(v52 + 112) = 0;
  *(_QWORD *)(v52 + 120) = v52 + 120;
  *(_QWORD *)(v52 + 128) = v52 + 120;
  *(_QWORD *)(v52 + 136) = 0;
  v54 = (std::__shared_weak_count *)operator new();
  v54->__shared_owners_ = 0;
  v55 = (unint64_t *)&v54->__shared_owners_;
  v54->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BED50;
  v54->__shared_weak_owners_ = 0;
  v54[1].__vftable = (std::__shared_weak_count_vtbl *)v52;
  v56 = *(std::__shared_weak_count **)(v52 + 40);
  if (v56)
  {
    if (v56->__shared_owners_ != -1)
      goto LABEL_67;
    do
      v57 = __ldxr(v55);
    while (__stxr(v57 + 1, v55));
    v58 = (unint64_t *)&v54->__shared_weak_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    *(_QWORD *)(v52 + 32) = v52;
    *(_QWORD *)(v52 + 40) = v54;
    std::__shared_weak_count::__release_weak(v56);
  }
  else
  {
    do
      v60 = __ldxr(v55);
    while (__stxr(v60 + 1, v55));
    v61 = (unint64_t *)&v54->__shared_weak_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    *(_QWORD *)(v52 + 32) = v52;
    *(_QWORD *)(v52 + 40) = v54;
  }
  do
    v63 = __ldaxr(v55);
  while (__stlxr(v63 - 1, v55));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
LABEL_67:
  v704 = &off_24C9B2E28;
  strcpy(v705, "channel");
  *(_QWORD *)&v705[8] = *(_QWORD *)v764;
  *(_QWORD *)&v705[15] = *(_QWORD *)&v764[7];
  v705[23] = 7;
  *(_QWORD *)v764 = 0;
  *(_QWORD *)&v764[7] = 0;
  *(_QWORD *)v706 = 0x7974706D45;
  *(_QWORD *)&v706[8] = *(_QWORD *)v754;
  *(_QWORD *)&v706[15] = *(_QWORD *)&v754[7];
  v706[23] = 5;
  *(_QWORD *)v754 = 0;
  *(_QWORD *)&v754[7] = 0;
  v707 = 0uLL;
  v64 = (unint64_t *)&v54->__shared_weak_owners_;
  *(_QWORD *)&v708 = v52;
  *((_QWORD *)&v708 + 1) = v54;
  do
    v65 = __ldxr(v64);
  while (__stxr(v65 + 1, v64));
  v709 = &off_24C9B2E90;
  v66 = (_QWORD *)operator new();
  *v66 = &off_24C9BEDA0;
  v66[1] = v52;
  v66[2] = v54;
  *(_QWORD *)&v710 = v66;
  v68 = *((_QWORD *)&v708 + 1);
  v67 = v708;
  if (!*((_QWORD *)&v708 + 1))
  {
    *((_QWORD *)&v710 + 1) = v708;
    v711 = 0;
    if ((_QWORD)v708)
      v72 = v708 + 16;
    else
      v72 = 0;
    goto LABEL_86;
  }
  v69 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v70 = __ldxr(v69);
  while (__stxr(v70 + 1, v69));
  v71 = *((_QWORD *)&v708 + 1);
  *((_QWORD *)&v710 + 1) = v67;
  v711 = v68;
  if ((_QWORD)v708)
    v72 = v708 + 16;
  else
    v72 = 0;
  if (!*((_QWORD *)&v708 + 1))
  {
    v67 = v708;
LABEL_86:
    v75 = 0;
    v712 = &off_24C9B2E58;
    v713 = v72;
    goto LABEL_87;
  }
  v73 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v74 = __ldxr(v73);
  while (__stxr(v74 + 1, v73));
  v75 = *((_QWORD *)&v708 + 1);
  v67 = v708;
  v712 = &off_24C9B2E58;
  *(_QWORD *)&v713 = v72;
  *((_QWORD *)&v713 + 1) = v71;
  if (*((_QWORD *)&v708 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
LABEL_87:
  if (v67)
    v78 = v67 + 24;
  else
    v78 = 0;
  v714 = &off_24C9B2310;
  *(_QWORD *)&v715 = v78;
  *((_QWORD *)&v715 + 1) = v75;
  v79 = operator new();
  *(_QWORD *)v79 = &off_24C9B2E28;
  *(_OWORD *)(v79 + 8) = *(_OWORD *)v705;
  *(_QWORD *)(v79 + 24) = *(_QWORD *)&v705[16];
  memset(v705, 0, sizeof(v705));
  *(_OWORD *)(v79 + 32) = *(_OWORD *)v706;
  *(_QWORD *)(v79 + 48) = *(_QWORD *)&v706[16];
  memset(v706, 0, sizeof(v706));
  *(_OWORD *)(v79 + 56) = v707;
  v707 = 0uLL;
  *(_OWORD *)(v79 + 72) = v708;
  v708 = 0uLL;
  *(_QWORD *)(v79 + 88) = &off_24C9B2E90;
  *(_OWORD *)(v79 + 96) = v710;
  v80 = v711;
  *((_QWORD *)&v710 + 1) = 0;
  v711 = 0;
  *(_QWORD *)(v79 + 112) = v80;
  *(_QWORD *)(v79 + 120) = &off_24C9B2E58;
  *(_OWORD *)(v79 + 128) = v713;
  *(_QWORD *)&v710 = 0;
  v713 = 0uLL;
  *(_QWORD *)(v79 + 144) = &off_24C9B2310;
  *(_OWORD *)(v79 + 152) = v715;
  v715 = 0uLL;
  v763 = v79;
  sub_20E9680F8((uint64_t)&v704);
  do
    v81 = __ldaxr(v46);
  while (__stlxr(v81 - 1, v46));
  if (!v81)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  do
    v82 = __ldaxr(v49);
  while (__stlxr(v82 - 1, v49));
  if (!v82)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  v83 = (std::__shared_weak_count *)operator new(0x28uLL);
  v84 = v83;
  v83->__shared_owners_ = 0;
  v85 = (unint64_t *)&v83->__shared_owners_;
  v83->__shared_weak_owners_ = 0;
  v83[1].__vftable = 0;
  v86 = &v83[1].__vftable;
  v83->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BEE18;
  v83[1].__shared_owners_ = 0;
  v671 = v83;
  do
    v87 = __ldxr(v85);
  while (__stxr(v87 + 1, v85));
  v667 = &v83[1].__vftable;
  v668 = v83;
  do
    v88 = __ldxr(v85);
  while (__stxr(v88 + 1, v85));
  *(_QWORD *)v754 = &off_24C9B2CC0;
  strcpy(&v754[8], "DenseCloudProcessor");
  *(_WORD *)&v754[28] = v669;
  v754[30] = v670;
  v754[31] = 19;
  v755 = 0u;
  memset(v756, 0, sizeof(v756));
  v89 = (std::__shared_weak_count *)operator new(0x58uLL);
  v89->__shared_owners_ = 0;
  v90 = (unint64_t *)&v89->__shared_owners_;
  v89->__shared_weak_owners_ = 0;
  v89->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  v91 = v89 + 1;
  MEMORY[0x212BC5E10](&v89[1]);
  do
    v92 = __ldxr(v90);
  while (__stxr(v92 + 1, v90));
  do
    v93 = __ldxr(v85);
  while (__stxr(v93 + 1, v85));
  v94 = operator new();
  *(_BYTE *)(v94 + 8) = 1;
  *(_QWORD *)(v94 + 48) = 0;
  *(_QWORD *)(v94 + 32) = 0;
  *(_QWORD *)(v94 + 40) = 0;
  *(_QWORD *)v94 = &off_24C9BEE68;
  *(_QWORD *)(v94 + 16) = &unk_24C9BEEE0;
  *(_QWORD *)(v94 + 24) = &unk_24C9BEF20;
  *(_QWORD *)(v94 + 56) = 0;
  *(_QWORD *)(v94 + 64) = 0;
  *(_QWORD *)(v94 + 72) = v91;
  *(_QWORD *)(v94 + 80) = v89;
  v95 = (_QWORD *)operator new();
  *v95 = &off_24C9BF018;
  v95[1] = v86;
  v95[2] = v84;
  *(_QWORD *)(v94 + 88) = v95;
  *(_QWORD *)(v94 + 96) = v94 + 96;
  *(_QWORD *)(v94 + 104) = v94 + 96;
  *(_QWORD *)(v94 + 112) = 0;
  *(_QWORD *)(v94 + 120) = v94 + 120;
  *(_QWORD *)(v94 + 128) = v94 + 120;
  *(_QWORD *)(v94 + 136) = 0;
  v96 = (std::__shared_weak_count *)operator new();
  v96->__shared_owners_ = 0;
  v97 = (unint64_t *)&v96->__shared_owners_;
  v96->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF0B8;
  v96->__shared_weak_owners_ = 0;
  v96[1].__vftable = (std::__shared_weak_count_vtbl *)v94;
  v98 = *(std::__shared_weak_count **)(v94 + 40);
  if (v98)
  {
    if (v98->__shared_owners_ != -1)
      goto LABEL_117;
    do
      v99 = __ldxr(v97);
    while (__stxr(v99 + 1, v97));
    v100 = (unint64_t *)&v96->__shared_weak_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
    *(_QWORD *)(v94 + 32) = v94;
    *(_QWORD *)(v94 + 40) = v96;
    std::__shared_weak_count::__release_weak(v98);
  }
  else
  {
    do
      v102 = __ldxr(v97);
    while (__stxr(v102 + 1, v97));
    v103 = (unint64_t *)&v96->__shared_weak_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
    *(_QWORD *)(v94 + 32) = v94;
    *(_QWORD *)(v94 + 40) = v96;
  }
  do
    v105 = __ldaxr(v97);
  while (__stlxr(v105 - 1, v97));
  if (!v105)
  {
    ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
    std::__shared_weak_count::__release_weak(v96);
  }
LABEL_117:
  v704 = &off_24C9B2D58;
  strcpy(v705, "channel");
  *(_QWORD *)&v705[8] = *(_QWORD *)v764;
  *(_QWORD *)&v705[15] = *(_QWORD *)&v764[7];
  v705[23] = 7;
  *(_QWORD *)v764 = 0;
  *(_QWORD *)&v764[7] = 0;
  *(_QWORD *)v706 = 0x7974706D45;
  *(_QWORD *)&v706[8] = *(_QWORD *)v750;
  *(_QWORD *)&v706[15] = *(_QWORD *)&v750[7];
  v706[23] = 5;
  *(_QWORD *)v750 = 0;
  *(_QWORD *)&v750[7] = 0;
  v707 = 0uLL;
  v106 = (unint64_t *)&v96->__shared_weak_owners_;
  *(_QWORD *)&v708 = v94;
  *((_QWORD *)&v708 + 1) = v96;
  do
    v107 = __ldxr(v106);
  while (__stxr(v107 + 1, v106));
  v709 = &off_24C9B2DC0;
  v108 = (_QWORD *)operator new();
  *v108 = &off_24C9BF108;
  v108[1] = v94;
  v108[2] = v96;
  *(_QWORD *)&v710 = v108;
  v110 = *((_QWORD *)&v708 + 1);
  v109 = v708;
  if (!*((_QWORD *)&v708 + 1))
  {
    *((_QWORD *)&v710 + 1) = v708;
    v711 = 0;
    if ((_QWORD)v708)
      v114 = v708 + 16;
    else
      v114 = 0;
    goto LABEL_136;
  }
  v111 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v112 = __ldxr(v111);
  while (__stxr(v112 + 1, v111));
  v113 = *((_QWORD *)&v708 + 1);
  *((_QWORD *)&v710 + 1) = v109;
  v711 = v110;
  if ((_QWORD)v708)
    v114 = v708 + 16;
  else
    v114 = 0;
  if (!*((_QWORD *)&v708 + 1))
  {
    v109 = v708;
LABEL_136:
    v117 = 0;
    v712 = &off_24C9B2D88;
    v713 = v114;
    goto LABEL_137;
  }
  v115 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v116 = __ldxr(v115);
  while (__stxr(v116 + 1, v115));
  v117 = *((_QWORD *)&v708 + 1);
  v109 = v708;
  v712 = &off_24C9B2D88;
  *(_QWORD *)&v713 = v114;
  *((_QWORD *)&v713 + 1) = v113;
  if (*((_QWORD *)&v708 + 1))
  {
    v118 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
LABEL_137:
  v120 = v109 + 24;
  if (!v109)
    v120 = 0;
  v714 = &off_24C9B2310;
  *(_QWORD *)&v715 = v120;
  *((_QWORD *)&v715 + 1) = v117;
  DWORD2(v727[0]) = v779;
  *(_DWORD *)((char *)v727 + 11) = *(_DWORD *)((char *)&v779 + 3);
  do
    v121 = __ldxr(v90);
  while (__stxr(v121 + 1, v90));
  *(_QWORD *)v737 = *(_QWORD *)&v727[0];
  *(_QWORD *)&v737[7] = *(_QWORD *)((char *)v727 + 7);
  *(_QWORD *)&v727[0] = 0;
  *(_QWORD *)((char *)v727 + 7) = 0;
  *(_QWORD *)__p = v780;
  *(_QWORD *)&__p[7] = *(_QWORD *)((char *)&v780 + 7);
  *(_QWORD *)&v780 = 0;
  *(_QWORD *)((char *)&v780 + 7) = 0;
  if (v668)
  {
    v122 = (unint64_t *)&v668->__shared_owners_;
    do
      v123 = __ldxr(v122);
    while (__stxr(v123 + 1, v122));
  }
  *(_QWORD *)v750 = *(_QWORD *)v737;
  *(_QWORD *)&v750[7] = *(_QWORD *)&v737[7];
  *(_QWORD *)v744 = *(_QWORD *)__p;
  *(_QWORD *)&v744[7] = *(_QWORD *)&__p[7];
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[7] = 0;
  *(_QWORD *)v737 = 0;
  *(_QWORD *)&v737[7] = 0;
  v124 = operator new();
  *(_BYTE *)(v124 + 8) = 1;
  *(_QWORD *)(v124 + 48) = 0;
  *(_QWORD *)(v124 + 32) = 0;
  *(_QWORD *)(v124 + 40) = 0;
  *(_QWORD *)v124 = &off_24C9BF180;
  *(_QWORD *)(v124 + 16) = &unk_24C9BF1F8;
  *(_QWORD *)(v124 + 24) = &unk_24C9BF238;
  *(_QWORD *)(v124 + 56) = 0;
  *(_QWORD *)(v124 + 64) = 0;
  *(_QWORD *)(v124 + 72) = v91;
  *(_QWORD *)(v124 + 80) = v89;
  v125 = (_QWORD *)operator new();
  *v125 = &off_24C9BF320;
  v125[1] = v667;
  v125[2] = v668;
  *(_QWORD *)(v124 + 88) = v125;
  *(_QWORD *)(v124 + 96) = v124 + 96;
  *(_QWORD *)(v124 + 104) = v124 + 96;
  *(_QWORD *)(v124 + 112) = 0;
  *(_QWORD *)(v124 + 120) = v124 + 120;
  *(_QWORD *)(v124 + 128) = v124 + 120;
  *(_QWORD *)(v124 + 136) = 0;
  v126 = (std::__shared_weak_count *)operator new();
  v126->__shared_owners_ = 0;
  v127 = (unint64_t *)&v126->__shared_owners_;
  v126->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF370;
  v126->__shared_weak_owners_ = 0;
  v126[1].__vftable = (std::__shared_weak_count_vtbl *)v124;
  v128 = *(std::__shared_weak_count **)(v124 + 40);
  if (v128)
  {
    if (v128->__shared_owners_ != -1)
      goto LABEL_157;
    do
      v129 = __ldxr(v127);
    while (__stxr(v129 + 1, v127));
    v130 = (unint64_t *)&v126->__shared_weak_owners_;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
    *(_QWORD *)(v124 + 32) = v124;
    *(_QWORD *)(v124 + 40) = v126;
    std::__shared_weak_count::__release_weak(v128);
  }
  else
  {
    do
      v132 = __ldxr(v127);
    while (__stxr(v132 + 1, v127));
    v133 = (unint64_t *)&v126->__shared_weak_owners_;
    do
      v134 = __ldxr(v133);
    while (__stxr(v134 + 1, v133));
    *(_QWORD *)(v124 + 32) = v124;
    *(_QWORD *)(v124 + 40) = v126;
  }
  do
    v135 = __ldaxr(v127);
  while (__stlxr(v135 - 1, v127));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
    std::__shared_weak_count::__release_weak(v126);
  }
LABEL_157:
  *(_QWORD *)v764 = &off_24C9B2CF0;
  strcpy(&v764[8], "channel");
  *(_QWORD *)&v764[16] = *(_QWORD *)v750;
  *(_QWORD *)&v764[23] = *(_QWORD *)&v750[7];
  v764[31] = 7;
  *(_QWORD *)v750 = 0;
  *(_QWORD *)&v750[7] = 0;
  *(_QWORD *)v765 = 0x7974706D45;
  *(_QWORD *)&v765[8] = *(_QWORD *)v744;
  *(_QWORD *)&v765[15] = *(_QWORD *)&v744[7];
  v765[23] = 5;
  *(_QWORD *)v744 = 0;
  *(_QWORD *)&v744[7] = 0;
  v766 = 0uLL;
  v136 = (unint64_t *)&v126->__shared_weak_owners_;
  *(_QWORD *)&v767 = v124;
  *((_QWORD *)&v767 + 1) = v126;
  do
    v137 = __ldxr(v136);
  while (__stxr(v137 + 1, v136));
  v768 = &off_24C9B2558;
  v138 = (_QWORD *)operator new();
  *v138 = &off_24C9BBBD8;
  v138[1] = v124;
  v138[2] = v126;
  *(_QWORD *)&v769 = v138;
  v140 = *((_QWORD *)&v767 + 1);
  v139 = v767;
  if (!*((_QWORD *)&v767 + 1))
  {
    *((_QWORD *)&v769 + 1) = v767;
    v770 = 0;
    if ((_QWORD)v767)
      v144 = v767 + 16;
    else
      v144 = 0;
    goto LABEL_176;
  }
  v141 = (unint64_t *)(*((_QWORD *)&v767 + 1) + 16);
  do
    v142 = __ldxr(v141);
  while (__stxr(v142 + 1, v141));
  v143 = *((_QWORD *)&v767 + 1);
  *((_QWORD *)&v769 + 1) = v139;
  v770 = v140;
  if ((_QWORD)v767)
    v144 = v767 + 16;
  else
    v144 = 0;
  if (!*((_QWORD *)&v767 + 1))
  {
    v139 = v767;
LABEL_176:
    v147 = 0;
    v771 = &off_24C9B2D20;
    v772 = v144;
    goto LABEL_177;
  }
  v145 = (unint64_t *)(*((_QWORD *)&v767 + 1) + 16);
  do
    v146 = __ldxr(v145);
  while (__stxr(v146 + 1, v145));
  v147 = *((_QWORD *)&v767 + 1);
  v139 = v767;
  v771 = &off_24C9B2D20;
  *(_QWORD *)&v772 = v144;
  *((_QWORD *)&v772 + 1) = v143;
  if (*((_QWORD *)&v767 + 1))
  {
    v148 = (unint64_t *)(*((_QWORD *)&v767 + 1) + 16);
    do
      v149 = __ldxr(v148);
    while (__stxr(v149 + 1, v148));
  }
LABEL_177:
  if (v139)
    v150 = v139 + 24;
  else
    v150 = 0;
  v773 = &off_24C9B2310;
  *(_QWORD *)&v774 = v150;
  *((_QWORD *)&v774 + 1) = v147;
  if (!v667
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 526, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v151 = operator new();
  *(_QWORD *)v151 = &off_24C9B2D58;
  *(_OWORD *)(v151 + 8) = *(_OWORD *)v705;
  *(_QWORD *)(v151 + 24) = *(_QWORD *)&v705[16];
  memset(v705, 0, sizeof(v705));
  *(_OWORD *)(v151 + 32) = *(_OWORD *)v706;
  *(_QWORD *)(v151 + 48) = *(_QWORD *)&v706[16];
  memset(v706, 0, sizeof(v706));
  *(_OWORD *)(v151 + 56) = v707;
  v707 = 0uLL;
  *(_OWORD *)(v151 + 72) = v708;
  v708 = 0uLL;
  *(_QWORD *)(v151 + 88) = &off_24C9B2DC0;
  *(_OWORD *)(v151 + 96) = v710;
  v152 = v711;
  *((_QWORD *)&v710 + 1) = 0;
  v711 = 0;
  *(_QWORD *)(v151 + 112) = v152;
  *(_QWORD *)(v151 + 120) = &off_24C9B2D88;
  *(_OWORD *)(v151 + 128) = v713;
  *(_QWORD *)&v710 = 0;
  v713 = 0uLL;
  *(_QWORD *)(v151 + 144) = &off_24C9B2310;
  *(_OWORD *)(v151 + 152) = v715;
  v715 = 0uLL;
  *(_QWORD *)(v151 + 168) = &off_24C9B2CF0;
  v153 = *(_OWORD *)&v764[8];
  *(_QWORD *)(v151 + 192) = *(_QWORD *)&v764[24];
  *(_OWORD *)(v151 + 176) = v153;
  memset(&v764[8], 0, 24);
  v154 = *(_OWORD *)v765;
  *(_QWORD *)(v151 + 216) = *(_QWORD *)&v765[16];
  *(_OWORD *)(v151 + 200) = v154;
  memset(v765, 0, sizeof(v765));
  v155 = v766;
  v766 = 0uLL;
  v156 = v767;
  *(_OWORD *)(v151 + 224) = v155;
  *(_OWORD *)(v151 + 240) = v156;
  v767 = 0uLL;
  *(_QWORD *)(v151 + 256) = &off_24C9B2558;
  *(_OWORD *)(v151 + 264) = v769;
  v157 = v770;
  *((_QWORD *)&v769 + 1) = 0;
  v770 = 0;
  *(_QWORD *)(v151 + 280) = v157;
  *(_QWORD *)(v151 + 288) = &off_24C9B2D20;
  *(_OWORD *)(v151 + 296) = v772;
  *(_QWORD *)&v769 = 0;
  v772 = 0uLL;
  *(_QWORD *)(v151 + 312) = &off_24C9B2310;
  *(_OWORD *)(v151 + 320) = v774;
  v774 = 0uLL;
  v757 = v151;
  sub_20E9677E0((uint64_t)v764);
  if (v668)
  {
    v158 = (unint64_t *)&v668->__shared_owners_;
    do
      v159 = __ldaxr(v158);
    while (__stlxr(v159 - 1, v158));
    if (!v159)
    {
      ((void (*)(std::__shared_weak_count *))v668->__on_zero_shared)(v668);
      std::__shared_weak_count::__release_weak(v668);
    }
  }
  sub_20E967B6C((uint64_t)&v704);
  do
    v160 = __ldaxr(v85);
  while (__stlxr(v160 - 1, v85));
  if (!v160)
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
  do
    v161 = __ldaxr(v90);
  while (__stlxr(v161 - 1, v90));
  if (!v161)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  v162 = (std::__shared_weak_count *)operator new(0x28uLL);
  v162->__shared_owners_ = 0;
  v163 = (unint64_t *)&v162->__shared_owners_;
  v162->__shared_weak_owners_ = 0;
  v162[1].__vftable = 0;
  v162->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF3C0;
  v162[1].__shared_owners_ = 0;
  v666 = v162;
  do
    v164 = __ldxr(v163);
  while (__stxr(v164 + 1, v163));
  *(_QWORD *)v750 = &off_24C9B23B8;
  strcpy(&v750[8], "PoseBuffering");
  *(_QWORD *)&v750[22] = v748;
  v750[30] = v749;
  v750[31] = 13;
  v748 = 0;
  v749 = 0;
  v751 = 0u;
  memset(v752, 0, sizeof(v752));
  v165 = (std::__shared_weak_count *)operator new(0x58uLL);
  v165->__shared_owners_ = 0;
  v166 = (unint64_t *)&v165->__shared_owners_;
  v165->__shared_weak_owners_ = 0;
  v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v165[1]);
  do
    v167 = __ldxr(v166);
  while (__stxr(v167 + 1, v166));
  do
    v168 = __ldxr(v163);
  while (__stxr(v168 + 1, v163));
  v169 = operator new();
  *(_BYTE *)(v169 + 8) = 1;
  *(_QWORD *)(v169 + 48) = 0;
  *(_QWORD *)(v169 + 32) = 0;
  *(_QWORD *)(v169 + 40) = 0;
  *(_QWORD *)v169 = &off_24C9BF410;
  *(_QWORD *)(v169 + 16) = &unk_24C9BF488;
  *(_QWORD *)(v169 + 24) = &unk_24C9BF4C8;
  *(_QWORD *)(v169 + 56) = 0;
  *(_QWORD *)(v169 + 64) = 0;
  *(_QWORD *)(v169 + 72) = v165 + 1;
  *(_QWORD *)(v169 + 80) = v165;
  v170 = (_QWORD *)operator new();
  *v170 = &off_24C9BF5C0;
  v170[1] = v162 + 1;
  v170[2] = v162;
  *(_QWORD *)(v169 + 88) = v170;
  *(_QWORD *)(v169 + 96) = v169 + 96;
  *(_QWORD *)(v169 + 104) = v169 + 96;
  *(_QWORD *)(v169 + 112) = 0;
  *(_QWORD *)(v169 + 120) = v169 + 120;
  *(_QWORD *)(v169 + 128) = v169 + 120;
  *(_QWORD *)(v169 + 136) = 0;
  v171 = (std::__shared_weak_count *)operator new();
  v171->__shared_owners_ = 0;
  v172 = (unint64_t *)&v171->__shared_owners_;
  v171->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF610;
  v171->__shared_weak_owners_ = 0;
  v171[1].__vftable = (std::__shared_weak_count_vtbl *)v169;
  v173 = *(std::__shared_weak_count **)(v169 + 40);
  if (v173)
  {
    if (v173->__shared_owners_ != -1)
      goto LABEL_212;
    do
      v174 = __ldxr(v172);
    while (__stxr(v174 + 1, v172));
    v175 = (unint64_t *)&v171->__shared_weak_owners_;
    do
      v176 = __ldxr(v175);
    while (__stxr(v176 + 1, v175));
    *(_QWORD *)(v169 + 32) = v169;
    *(_QWORD *)(v169 + 40) = v171;
    std::__shared_weak_count::__release_weak(v173);
  }
  else
  {
    do
      v177 = __ldxr(v172);
    while (__stxr(v177 + 1, v172));
    v178 = (unint64_t *)&v171->__shared_weak_owners_;
    do
      v179 = __ldxr(v178);
    while (__stxr(v179 + 1, v178));
    *(_QWORD *)(v169 + 32) = v169;
    *(_QWORD *)(v169 + 40) = v171;
  }
  do
    v180 = __ldaxr(v172);
  while (__stlxr(v180 - 1, v172));
  if (!v180)
  {
    ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
    std::__shared_weak_count::__release_weak(v171);
  }
LABEL_212:
  v704 = &off_24C9B23E8;
  strcpy(v705, "channel");
  *(_QWORD *)&v705[8] = *(_QWORD *)v764;
  *(_QWORD *)&v705[15] = *(_QWORD *)&v764[7];
  v705[23] = 7;
  *(_QWORD *)v764 = 0;
  *(_QWORD *)&v764[7] = 0;
  *(_QWORD *)v706 = 0x7974706D45;
  *(_QWORD *)&v706[8] = *(_QWORD *)v744;
  *(_QWORD *)&v706[15] = *(_QWORD *)&v744[7];
  v706[23] = 5;
  *(_QWORD *)v744 = 0;
  *(_QWORD *)&v744[7] = 0;
  v707 = 0uLL;
  v181 = (unint64_t *)&v171->__shared_weak_owners_;
  *(_QWORD *)&v708 = v169;
  *((_QWORD *)&v708 + 1) = v171;
  do
    v182 = __ldxr(v181);
  while (__stxr(v182 + 1, v181));
  v709 = &off_24C9B2488;
  v183 = (_QWORD *)operator new();
  *v183 = &off_24C9BF660;
  v183[1] = v169;
  v183[2] = v171;
  *(_QWORD *)&v710 = v183;
  v185 = *((_QWORD *)&v708 + 1);
  v184 = v708;
  if (!*((_QWORD *)&v708 + 1))
  {
    *((_QWORD *)&v710 + 1) = v708;
    v711 = 0;
    if ((_QWORD)v708)
      v189 = v708 + 16;
    else
      v189 = 0;
    goto LABEL_231;
  }
  v186 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v187 = __ldxr(v186);
  while (__stxr(v187 + 1, v186));
  v188 = *((_QWORD *)&v708 + 1);
  *((_QWORD *)&v710 + 1) = v184;
  v711 = v185;
  if ((_QWORD)v708)
    v189 = v708 + 16;
  else
    v189 = 0;
  if (!*((_QWORD *)&v708 + 1))
  {
    v184 = v708;
LABEL_231:
    v192 = 0;
    v712 = &off_24C9B2418;
    v713 = v189;
    goto LABEL_232;
  }
  v190 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v191 = __ldxr(v190);
  while (__stxr(v191 + 1, v190));
  v192 = *((_QWORD *)&v708 + 1);
  v184 = v708;
  v712 = &off_24C9B2418;
  *(_QWORD *)&v713 = v189;
  *((_QWORD *)&v713 + 1) = v188;
  if (*((_QWORD *)&v708 + 1))
  {
    v193 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
    do
      v194 = __ldxr(v193);
    while (__stxr(v194 + 1, v193));
  }
LABEL_232:
  if (v184)
    v195 = v184 + 24;
  else
    v195 = 0;
  v714 = &off_24C9B2310;
  *(_QWORD *)&v715 = v195;
  *((_QWORD *)&v715 + 1) = v192;
  v196 = operator new();
  *(_QWORD *)v196 = &off_24C9B23E8;
  *(_OWORD *)(v196 + 8) = *(_OWORD *)v705;
  *(_QWORD *)(v196 + 24) = *(_QWORD *)&v705[16];
  memset(v705, 0, sizeof(v705));
  *(_OWORD *)(v196 + 32) = *(_OWORD *)v706;
  *(_QWORD *)(v196 + 48) = *(_QWORD *)&v706[16];
  memset(v706, 0, sizeof(v706));
  *(_OWORD *)(v196 + 56) = v707;
  v707 = 0uLL;
  *(_OWORD *)(v196 + 72) = v708;
  v708 = 0uLL;
  *(_QWORD *)(v196 + 88) = &off_24C9B2488;
  *(_OWORD *)(v196 + 96) = v710;
  v197 = v711;
  *((_QWORD *)&v710 + 1) = 0;
  v711 = 0;
  *(_QWORD *)(v196 + 112) = v197;
  *(_QWORD *)(v196 + 120) = &off_24C9B2418;
  *(_OWORD *)(v196 + 128) = v713;
  *(_QWORD *)&v710 = 0;
  v713 = 0uLL;
  *(_QWORD *)(v196 + 144) = &off_24C9B2310;
  *(_OWORD *)(v196 + 152) = v715;
  v715 = 0uLL;
  v753 = v196;
  sub_20E963D50((uint64_t)&v704);
  do
    v198 = __ldaxr(v163);
  while (__stlxr(v198 - 1, v163));
  if (!v198)
  {
    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
    std::__shared_weak_count::__release_weak(v162);
  }
  do
    v199 = __ldaxr(v166);
  while (__stlxr(v199 - 1, v166));
  if (!v199)
  {
    ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
    std::__shared_weak_count::__release_weak(v165);
  }
  v200 = (std::__shared_weak_count *)operator new(0x28uLL);
  v200->__shared_owners_ = 0;
  v201 = (unint64_t *)&v200->__shared_owners_;
  v200->__shared_weak_owners_ = 0;
  v200[1].__vftable = 0;
  v200->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF6D8;
  v200[1].__shared_owners_ = 0;
  v665 = v200;
  do
    v202 = __ldxr(v201);
  while (__stxr(v202 + 1, v201));
  *(_QWORD *)v744 = &off_24C9B2EC8;
  strcpy(&v744[8], "VIOBuffering");
  *(_QWORD *)&v744[21] = v742;
  *(_WORD *)&v744[29] = v743;
  v744[31] = 12;
  v742 = 0;
  v743 = 0;
  v745 = 0u;
  memset(v746, 0, sizeof(v746));
  v203 = (std::__shared_weak_count *)operator new(0x58uLL);
  v203->__shared_owners_ = 0;
  v204 = (unint64_t *)&v203->__shared_owners_;
  v203->__shared_weak_owners_ = 0;
  v203->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B6A90;
  MEMORY[0x212BC5E10](&v203[1]);
  do
    v205 = __ldxr(v204);
  while (__stxr(v205 + 1, v204));
  do
    v206 = __ldxr(v201);
  while (__stxr(v206 + 1, v201));
  v207 = operator new();
  *(_BYTE *)(v207 + 8) = 1;
  *(_QWORD *)(v207 + 48) = 0;
  *(_QWORD *)(v207 + 32) = 0;
  *(_QWORD *)(v207 + 40) = 0;
  *(_QWORD *)v207 = &off_24C9BF728;
  *(_QWORD *)(v207 + 16) = &unk_24C9BF7A0;
  *(_QWORD *)(v207 + 24) = &unk_24C9BF7E0;
  *(_QWORD *)(v207 + 56) = 0;
  *(_QWORD *)(v207 + 64) = 0;
  *(_QWORD *)(v207 + 72) = v203 + 1;
  *(_QWORD *)(v207 + 80) = v203;
  v208 = (_QWORD *)operator new();
  *v208 = &off_24C9BF8D8;
  v208[1] = v200 + 1;
  v208[2] = v200;
  *(_QWORD *)(v207 + 88) = v208;
  *(_QWORD *)(v207 + 96) = v207 + 96;
  *(_QWORD *)(v207 + 104) = v207 + 96;
  *(_QWORD *)(v207 + 112) = 0;
  *(_QWORD *)(v207 + 120) = v207 + 120;
  *(_QWORD *)(v207 + 128) = v207 + 120;
  *(_QWORD *)(v207 + 136) = 0;
  v209 = (std::__shared_weak_count *)operator new();
  v209->__shared_owners_ = 0;
  v210 = (unint64_t *)&v209->__shared_owners_;
  v209->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BF928;
  v209->__shared_weak_owners_ = 0;
  v209[1].__vftable = (std::__shared_weak_count_vtbl *)v207;
  v211 = *(std::__shared_weak_count **)(v207 + 40);
  if (v211)
  {
    if (v211->__shared_owners_ != -1)
      goto LABEL_260;
    do
      v212 = __ldxr(v210);
    while (__stxr(v212 + 1, v210));
    v213 = (unint64_t *)&v209->__shared_weak_owners_;
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 1, v213));
    *(_QWORD *)(v207 + 32) = v207;
    *(_QWORD *)(v207 + 40) = v209;
    std::__shared_weak_count::__release_weak(v211);
  }
  else
  {
    do
      v215 = __ldxr(v210);
    while (__stxr(v215 + 1, v210));
    v216 = (unint64_t *)&v209->__shared_weak_owners_;
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
    *(_QWORD *)(v207 + 32) = v207;
    *(_QWORD *)(v207 + 40) = v209;
  }
  do
    v218 = __ldaxr(v210);
  while (__stlxr(v218 - 1, v210));
  if (!v218)
  {
    ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
    std::__shared_weak_count::__release_weak(v209);
  }
LABEL_260:
  v704 = &off_24C9B2EF8;
  strcpy(v705, "channel");
  *(_QWORD *)&v705[8] = *(_QWORD *)v764;
  *(_QWORD *)&v705[15] = *(_QWORD *)&v764[7];
  v705[23] = 7;
  *(_QWORD *)v764 = 0;
  *(_QWORD *)&v764[7] = 0;
  *(_QWORD *)v706 = 0x7974706D45;
  *(_QWORD *)&v706[8] = *(_QWORD *)v737;
  *(_QWORD *)&v706[15] = *(_QWORD *)&v737[7];
  v706[23] = 5;
  *(_QWORD *)v737 = 0;
  *(_QWORD *)&v737[7] = 0;
  v707 = 0uLL;
  v219 = (unint64_t *)&v209->__shared_weak_owners_;
  *(_QWORD *)&v708 = v207;
  *((_QWORD *)&v708 + 1) = v209;
  do
    v220 = __ldxr(v219);
  while (__stxr(v220 + 1, v219));
  v709 = &off_24C9B2F60;
  v221 = (_QWORD *)operator new();
  *v221 = &off_24C9BF978;
  v221[1] = v207;
  v221[2] = v209;
  *(_QWORD *)&v710 = v221;
  v223 = *((_QWORD *)&v708 + 1);
  v222 = v708;
  if (!*((_QWORD *)&v708 + 1))
  {
    *((_QWORD *)&v710 + 1) = v708;
    v711 = 0;
    if ((_QWORD)v708)
      v227 = v708 + 16;
    else
      v227 = 0;
    goto LABEL_279;
  }
  v224 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v225 = __ldxr(v224);
  while (__stxr(v225 + 1, v224));
  v226 = *((_QWORD *)&v708 + 1);
  *((_QWORD *)&v710 + 1) = v222;
  v711 = v223;
  if ((_QWORD)v708)
    v227 = v708 + 16;
  else
    v227 = 0;
  if (!*((_QWORD *)&v708 + 1))
  {
    v222 = v708;
LABEL_279:
    v230 = 0;
    v712 = &off_24C9B2F28;
    v713 = v227;
    goto LABEL_280;
  }
  v228 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v229 = __ldxr(v228);
  while (__stxr(v229 + 1, v228));
  v230 = *((_QWORD *)&v708 + 1);
  v222 = v708;
  v712 = &off_24C9B2F28;
  *(_QWORD *)&v713 = v227;
  *((_QWORD *)&v713 + 1) = v226;
  if (*((_QWORD *)&v708 + 1))
  {
    v231 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
  }
LABEL_280:
  if (v222)
    v233 = v222 + 24;
  else
    v233 = 0;
  v714 = &off_24C9B2310;
  *(_QWORD *)&v715 = v233;
  *((_QWORD *)&v715 + 1) = v230;
  v234 = operator new();
  *(_QWORD *)v234 = &off_24C9B2EF8;
  *(_OWORD *)(v234 + 8) = *(_OWORD *)v705;
  *(_QWORD *)(v234 + 24) = *(_QWORD *)&v705[16];
  memset(v705, 0, sizeof(v705));
  *(_OWORD *)(v234 + 32) = *(_OWORD *)v706;
  *(_QWORD *)(v234 + 48) = *(_QWORD *)&v706[16];
  memset(v706, 0, sizeof(v706));
  *(_OWORD *)(v234 + 56) = v707;
  v707 = 0uLL;
  *(_OWORD *)(v234 + 72) = v708;
  v708 = 0uLL;
  *(_QWORD *)(v234 + 88) = &off_24C9B2F60;
  *(_OWORD *)(v234 + 96) = v710;
  v235 = v711;
  *((_QWORD *)&v710 + 1) = 0;
  v711 = 0;
  *(_QWORD *)(v234 + 112) = v235;
  *(_QWORD *)(v234 + 120) = &off_24C9B2F28;
  *(_OWORD *)(v234 + 128) = v713;
  *(_QWORD *)&v710 = 0;
  v713 = 0uLL;
  *(_QWORD *)(v234 + 144) = &off_24C9B2310;
  *(_OWORD *)(v234 + 152) = v715;
  v715 = 0uLL;
  v747 = v234;
  sub_20E968684((uint64_t)&v704);
  do
    v236 = __ldaxr(v201);
  while (__stlxr(v236 - 1, v201));
  if (!v236)
  {
    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
    std::__shared_weak_count::__release_weak(v200);
  }
  do
    v237 = __ldaxr(v204);
  while (__stlxr(v237 - 1, v204));
  if (!v237)
  {
    ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
    std::__shared_weak_count::__release_weak(v203);
  }
  v238 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v238 + 1) = 0;
  v239 = (unint64_t *)(v238 + 8);
  *((_QWORD *)v238 + 2) = 0;
  *(_QWORD *)v238 = &off_24C9B7A50;
  *((_QWORD *)v238 + 3) = &off_24C9BFB20;
  *((_OWORD *)v238 + 2) = 0u;
  *((_OWORD *)v238 + 3) = 0u;
  *((_OWORD *)v238 + 4) = 0u;
  *((_DWORD *)v238 + 20) = 1065353216;
  *(_OWORD *)(v238 + 88) = 0u;
  *(_OWORD *)(v238 + 104) = 0u;
  *((_DWORD *)v238 + 30) = 1065353216;
  *((_OWORD *)v238 + 8) = xmmword_2102E6730;
  *((_QWORD *)v238 + 19) = 0;
  *((_QWORD *)v238 + 20) = 0;
  *((_QWORD *)v238 + 18) = 0;
  v240 = operator new(0xC0uLL);
  *v240 = 0u;
  v240[1] = 0u;
  v240[2] = 0u;
  v240[3] = 0u;
  v240[4] = 0u;
  v240[5] = 0u;
  v240[6] = 0u;
  v240[7] = 0u;
  v240[8] = 0u;
  v240[9] = 0u;
  v240[10] = 0u;
  v240[11] = 0u;
  *((_QWORD *)v238 + 18) = v240;
  *((_QWORD *)v238 + 19) = v240 + 12;
  *((_QWORD *)v238 + 20) = v240 + 12;
  *((_QWORD *)v238 + 21) = 0;
  *((_QWORD *)v238 + 22) = 0;
  *((_QWORD *)v238 + 23) = 0;
  v718 = v238 + 24;
  v719 = (std::__shared_weak_count *)v238;
  sub_210217C20(a2, "CV3DHitTestGeometry", 1, &v698);
  v241 = v698;
  v698 = 0;
  v696 = v241;
  v716 = v238 + 24;
  v717 = (std::__shared_weak_count *)v238;
  do
    v242 = __ldxr(v239);
  while (__stxr(v242 + 1, v239));
  v702 = v238 + 24;
  v703 = (std::__shared_weak_count *)v238;
  do
    v243 = __ldxr(v239);
  while (__stxr(v243 + 1, v239));
  v723 = v241;
  if (v241)
  {
    v244 = (std::__shared_weak_count *)operator new();
    v244->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7AA0;
    v244->__shared_owners_ = 0;
    v244->__shared_weak_owners_ = 0;
    v244[1].__vftable = (std::__shared_weak_count_vtbl *)v241;
  }
  else
  {
    v244 = 0;
  }
  v696 = 0;
  v721 = v238 + 24;
  v722 = (std::__shared_weak_count *)v238;
  v717 = 0;
  v716 = 0;
  *(_QWORD *)&v720 = v238 + 24;
  *((_QWORD *)&v720 + 1) = v238;
  v703 = 0;
  v702 = 0;
  *(_QWORD *)v737 = &off_24C9B2B18;
  strcpy(&v737[8], "CV3DHitTestGeometry");
  v737[31] = 19;
  v738 = 0uLL;
  v739 = 0;
  *(_QWORD *)&v740 = v241;
  *((_QWORD *)&v740 + 1) = v244;
  v724 = 0;
  v723 = 0;
  v725 = v241;
  v726 = v244;
  if (v244)
  {
    v245 = (unint64_t *)&v244->__shared_owners_;
    do
      v246 = __ldxr(v245);
    while (__stxr(v246 + 1, v245));
    do
      v247 = __ldxr(v245);
    while (__stxr(v247 + 1, v245));
  }
  *(_QWORD *)&v777 = v238 + 24;
  *((_QWORD *)&v777 + 1) = v238;
  v722 = 0;
  v721 = 0;
  LODWORD(v688) = (_DWORD)v686;
  *(_DWORD *)((char *)&v688 + 3) = *(_DWORD *)((char *)&v686 + 3);
  LODWORD(v686) = 0;
  *(_DWORD *)((char *)&v686 + 3) = 0;
  *(_QWORD *)&v727[0] = v241;
  *((_QWORD *)&v727[0] + 1) = v244;
  v778 = 0uLL;
  *(_QWORD *)&v780 = v238 + 24;
  *((_QWORD *)&v780 + 1) = v238;
  do
    v248 = __ldxr(v239);
  while (__stxr(v248 + 1, v239));
  v249 = (int)v688;
  LODWORD(v692) = (_DWORD)v688;
  *(_DWORD *)((char *)&v692 + 3) = *(_DWORD *)((char *)&v688 + 3);
  *(_DWORD *)((char *)&v690 + 3) = *(_DWORD *)((char *)&v688 + 3);
  BYTE3(v690) = BYTE3(v688);
  LODWORD(v688) = 0;
  *(_DWORD *)((char *)&v688 + 3) = 0;
  LODWORD(v694) = v249;
  *(_DWORD *)((char *)&v694 + 3) = *(_DWORD *)((char *)&v690 + 3);
  *(_DWORD *)((char *)&v690 + 3) = 0;
  LODWORD(v690) = 0;
  *(_QWORD *)__p = v241;
  *(_QWORD *)&__p[8] = v244;
  if (v244)
  {
    v250 = (unint64_t *)&v244->__shared_owners_;
    do
      v251 = __ldxr(v250);
    while (__stxr(v251 + 1, v250));
  }
  v252 = operator new();
  LODWORD(v779) = (_DWORD)v694;
  *(_DWORD *)((char *)&v779 + 3) = *(_DWORD *)((char *)&v694 + 3);
  LODWORD(v694) = 0;
  *(_DWORD *)((char *)&v694 + 3) = 0;
  v253 = *(_OWORD *)__p;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  *(_BYTE *)(v252 + 8) = 1;
  *(_QWORD *)(v252 + 32) = 0;
  *(_QWORD *)(v252 + 40) = 0;
  *(_QWORD *)v252 = &off_24C9B7AF0;
  *(_QWORD *)(v252 + 16) = &unk_24C9B7B68;
  *(_QWORD *)(v252 + 24) = &unk_24C9B7BA8;
  *(_QWORD *)(v252 + 48) = 0x6C656E6E616863;
  *(_QWORD *)(v252 + 56) = 0;
  v254 = v779;
  *(_DWORD *)(v252 + 67) = *(_DWORD *)((char *)&v779 + 3);
  *(_DWORD *)(v252 + 64) = v254;
  *(_BYTE *)(v252 + 71) = 7;
  LODWORD(v779) = 0;
  *(_DWORD *)((char *)&v779 + 3) = 0;
  *(_OWORD *)(v252 + 72) = v253;
  *(_QWORD *)&v764[8] = 0;
  *(_QWORD *)v764 = 0;
  v255 = (_QWORD *)operator new();
  *v255 = &off_24C9B7CB0;
  v255[1] = v238 + 24;
  v255[2] = v238;
  v780 = 0uLL;
  *(_QWORD *)(v252 + 144) = 0;
  *(_QWORD *)(v252 + 88) = v255;
  *(_QWORD *)(v252 + 96) = v252 + 96;
  *(_QWORD *)(v252 + 104) = v252 + 96;
  *(_QWORD *)(v252 + 112) = 0;
  *(_QWORD *)(v252 + 120) = v252 + 120;
  *(_QWORD *)(v252 + 128) = v252 + 120;
  *(_QWORD *)(v252 + 136) = 0;
  if (!*(_QWORD *)(v252 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v256 = (std::__shared_weak_count *)operator new();
  v256->__shared_owners_ = 0;
  v257 = (unint64_t *)&v256->__shared_owners_;
  v256->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B81E8;
  v256->__shared_weak_owners_ = 0;
  v256[1].__vftable = (std::__shared_weak_count_vtbl *)v252;
  v258 = *(std::__shared_weak_count **)(v252 + 40);
  if (v258)
  {
    if (v258->__shared_owners_ != -1)
      goto LABEL_321;
    do
      v259 = __ldxr(v257);
    while (__stxr(v259 + 1, v257));
    v260 = (unint64_t *)&v256->__shared_weak_owners_;
    do
      v261 = __ldxr(v260);
    while (__stxr(v261 + 1, v260));
    *(_QWORD *)(v252 + 32) = v252;
    *(_QWORD *)(v252 + 40) = v256;
    std::__shared_weak_count::__release_weak(v258);
  }
  else
  {
    do
      v262 = __ldxr(v257);
    while (__stxr(v262 + 1, v257));
    v263 = (unint64_t *)&v256->__shared_weak_owners_;
    do
      v264 = __ldxr(v263);
    while (__stxr(v264 + 1, v263));
    *(_QWORD *)(v252 + 32) = v252;
    *(_QWORD *)(v252 + 40) = v256;
  }
  do
    v265 = __ldaxr(v257);
  while (__stlxr(v265 - 1, v257));
  if (!v265)
  {
    ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
    std::__shared_weak_count::__release_weak(v256);
  }
LABEL_321:
  v266 = *(std::__shared_weak_count **)&v764[8];
  if (*(_QWORD *)&v764[8])
  {
    v267 = (unint64_t *)(*(_QWORD *)&v764[8] + 8);
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
  *(_QWORD *)v764 = v252;
  *(_QWORD *)&v764[8] = v256;
  v269 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v270 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v271 = __ldaxr(v270);
    while (__stlxr(v271 - 1, v270));
    if (!v271)
    {
      ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
      std::__shared_weak_count::__release_weak(v269);
    }
  }
  v272 = v727[0];
  v727[0] = 0uLL;
  v704 = &off_24C9B2BB0;
  strcpy(v705, "channel");
  *(_QWORD *)&v705[8] = 0;
  *(_DWORD *)&v705[16] = (_DWORD)v692;
  *(_DWORD *)&v705[19] = *(_DWORD *)((char *)&v692 + 3);
  v705[23] = 7;
  LODWORD(v692) = 0;
  *(_DWORD *)((char *)&v692 + 3) = 0;
  *(_QWORD *)v706 = 0x7974706D45;
  *(_QWORD *)&v706[8] = 0;
  *(_DWORD *)&v706[19] = *(_DWORD *)((char *)&v779 + 3);
  *(_DWORD *)&v706[16] = v779;
  v706[23] = 5;
  LODWORD(v779) = 0;
  *(_DWORD *)((char *)&v779 + 3) = 0;
  v707 = v272;
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)__p = 0;
  v273 = *(_QWORD *)v764;
  v274 = *(_QWORD *)&v764[8];
  v708 = *(_OWORD *)v764;
  *(_QWORD *)v764 = 0;
  *(_QWORD *)&v764[8] = 0;
  if (*((_QWORD *)&v708 + 1))
  {
    v275 = (unint64_t *)(v274 + 16);
    do
      v276 = __ldxr(v275);
    while (__stxr(v276 + 1, v275));
  }
  v709 = &off_24C9B2C88;
  v277 = (_QWORD *)operator new();
  *v277 = &off_24C9B8238;
  v277[1] = v273;
  v277[2] = v274;
  *(_QWORD *)&v710 = v277;
  v279 = *((_QWORD *)&v708 + 1);
  v278 = v708;
  if (!*((_QWORD *)&v708 + 1))
  {
    *((_QWORD *)&v710 + 1) = v708;
    v711 = 0;
    if ((_QWORD)v708)
      v283 = v708 + 16;
    else
      v283 = 0;
    goto LABEL_351;
  }
  v280 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v281 = __ldxr(v280);
  while (__stxr(v281 + 1, v280));
  v282 = *((_QWORD *)&v708 + 1);
  *((_QWORD *)&v710 + 1) = v278;
  v711 = v279;
  if ((_QWORD)v708)
    v283 = v708 + 16;
  else
    v283 = 0;
  if (!*((_QWORD *)&v708 + 1))
  {
    v278 = v708;
LABEL_351:
    v286 = 0;
    v712 = &off_24C9B2C50;
    v713 = v283;
    goto LABEL_352;
  }
  v284 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v285 = __ldxr(v284);
  while (__stxr(v285 + 1, v284));
  v286 = *((_QWORD *)&v708 + 1);
  v278 = v708;
  v712 = &off_24C9B2C50;
  *(_QWORD *)&v713 = v283;
  *((_QWORD *)&v713 + 1) = v282;
  if (*((_QWORD *)&v708 + 1))
  {
    v287 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
    do
      v288 = __ldxr(v287);
    while (__stxr(v288 + 1, v287));
  }
LABEL_352:
  if (v278)
    v289 = v278 + 24;
  else
    v289 = 0;
  v714 = &off_24C9B2BE0;
  *(_QWORD *)&v715 = v289;
  *((_QWORD *)&v715 + 1) = v286;
  v290 = (std::__shared_weak_count *)*((_QWORD *)&v780 + 1);
  if (!*((_QWORD *)&v780 + 1))
    goto LABEL_359;
  v291 = (unint64_t *)(*((_QWORD *)&v780 + 1) + 8);
  do
    v292 = __ldaxr(v291);
  while (__stlxr(v292 - 1, v291));
  if (!v292)
  {
    ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
    std::__shared_weak_count::__release_weak(v290);
    v293 = (std::__shared_weak_count *)*((_QWORD *)&v727[0] + 1);
    if (!*((_QWORD *)&v727[0] + 1))
      goto LABEL_363;
  }
  else
  {
LABEL_359:
    v293 = (std::__shared_weak_count *)*((_QWORD *)&v727[0] + 1);
    if (!*((_QWORD *)&v727[0] + 1))
      goto LABEL_363;
  }
  v294 = (unint64_t *)&v293->__shared_owners_;
  do
    v295 = __ldaxr(v294);
  while (__stlxr(v295 - 1, v294));
  if (!v295)
  {
    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
    std::__shared_weak_count::__release_weak(v293);
    if ((_QWORD)v777)
      goto LABEL_369;
    goto LABEL_364;
  }
LABEL_363:
  if ((_QWORD)v777)
    goto LABEL_369;
LABEL_364:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_369:
  v296 = v725;
  v297 = v726;
  if (v726)
  {
    v298 = (unint64_t *)&v726->__shared_owners_;
    do
      v299 = __ldxr(v298);
    while (__stxr(v299 + 1, v298));
  }
  v300 = v720;
  v775 = v720;
  v720 = 0uLL;
  LODWORD(v690) = (_DWORD)v684;
  *(_DWORD *)((char *)&v690 + 3) = *(_DWORD *)((char *)&v684 + 3);
  LODWORD(v684) = 0;
  *(_DWORD *)((char *)&v684 + 3) = 0;
  *(_QWORD *)&v780 = v296;
  *((_QWORD *)&v780 + 1) = v297;
  v776 = 0uLL;
  v779 = v775;
  if (*((_QWORD *)&v775 + 1))
  {
    v301 = (unint64_t *)(*((_QWORD *)&v300 + 1) + 8);
    do
      v302 = __ldxr(v301);
    while (__stxr(v302 + 1, v301));
  }
  LODWORD(v694) = (_DWORD)v682;
  *(_DWORD *)((char *)&v694 + 3) = *(_DWORD *)((char *)&v682 + 3);
  LODWORD(v692) = (_DWORD)v690;
  *(_DWORD *)((char *)&v692 + 3) = *(_DWORD *)((char *)&v690 + 3);
  *(_QWORD *)&v727[0] = v296;
  *((_QWORD *)&v727[0] + 1) = v297;
  if (v297)
  {
    v303 = (unint64_t *)&v297->__shared_owners_;
    do
      v304 = __ldxr(v303);
    while (__stxr(v304 + 1, v303));
  }
  v305 = operator new();
  *(_OWORD *)(v305 + 72) = v727[0];
  v727[0] = 0uLL;
  *(_BYTE *)(v305 + 8) = 1;
  *(_QWORD *)(v305 + 32) = 0;
  *(_QWORD *)(v305 + 40) = 0;
  *(_QWORD *)v305 = &off_24C9B82B0;
  *(_QWORD *)(v305 + 16) = &unk_24C9B8328;
  *(_QWORD *)(v305 + 24) = &unk_24C9B8368;
  *(_QWORD *)(v305 + 48) = 0x6C656E6E616863;
  *(_QWORD *)(v305 + 56) = 0;
  *(_DWORD *)(v305 + 64) = (_DWORD)v682;
  *(_DWORD *)(v305 + 67) = *(_DWORD *)((char *)&v682 + 3);
  *(_BYTE *)(v305 + 71) = 7;
  *(_QWORD *)&__p[8] = 0;
  *(_QWORD *)__p = 0;
  v306 = operator new();
  *(_QWORD *)v306 = &off_24C9B8450;
  *(_OWORD *)(v306 + 8) = v300;
  v779 = 0uLL;
  *(_QWORD *)(v305 + 144) = 0;
  *(_QWORD *)(v305 + 88) = v306;
  *(_QWORD *)(v305 + 96) = v305 + 96;
  *(_QWORD *)(v305 + 104) = v305 + 96;
  *(_QWORD *)(v305 + 112) = 0;
  *(_QWORD *)(v305 + 120) = v305 + 120;
  *(_QWORD *)(v305 + 128) = v305 + 120;
  *(_QWORD *)(v305 + 136) = 0;
  if (!*(_QWORD *)(v305 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v307 = (std::__shared_weak_count *)operator new();
  v307->__shared_owners_ = 0;
  v308 = (unint64_t *)&v307->__shared_owners_;
  v307->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B8940;
  v307->__shared_weak_owners_ = 0;
  v307[1].__vftable = (std::__shared_weak_count_vtbl *)v305;
  v309 = *(std::__shared_weak_count **)(v305 + 40);
  if (v309)
  {
    if (v309->__shared_owners_ != -1)
      goto LABEL_393;
    do
      v310 = __ldxr(v308);
    while (__stxr(v310 + 1, v308));
    v311 = (unint64_t *)&v307->__shared_weak_owners_;
    do
      v312 = __ldxr(v311);
    while (__stxr(v312 + 1, v311));
    *(_QWORD *)(v305 + 32) = v305;
    *(_QWORD *)(v305 + 40) = v307;
    std::__shared_weak_count::__release_weak(v309);
  }
  else
  {
    do
      v313 = __ldxr(v308);
    while (__stxr(v313 + 1, v308));
    v314 = (unint64_t *)&v307->__shared_weak_owners_;
    do
      v315 = __ldxr(v314);
    while (__stxr(v315 + 1, v314));
    *(_QWORD *)(v305 + 32) = v305;
    *(_QWORD *)(v305 + 40) = v307;
  }
  do
    v316 = __ldaxr(v308);
  while (__stlxr(v316 - 1, v308));
  if (!v316)
  {
    ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
    std::__shared_weak_count::__release_weak(v307);
  }
LABEL_393:
  v317 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v318 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v319 = __ldaxr(v318);
    while (__stlxr(v319 - 1, v318));
    if (!v319)
    {
      ((void (*)(std::__shared_weak_count *))v317->__on_zero_shared)(v317);
      std::__shared_weak_count::__release_weak(v317);
    }
  }
  *(_QWORD *)__p = v305;
  *(_QWORD *)&__p[8] = v307;
  v320 = (std::__shared_weak_count *)*((_QWORD *)&v727[0] + 1);
  if (*((_QWORD *)&v727[0] + 1))
  {
    v321 = (unint64_t *)(*((_QWORD *)&v727[0] + 1) + 8);
    do
      v322 = __ldaxr(v321);
    while (__stlxr(v322 - 1, v321));
    if (!v322)
    {
      ((void (*)(std::__shared_weak_count *))v320->__on_zero_shared)(v320);
      std::__shared_weak_count::__release_weak(v320);
    }
  }
  v323 = v780;
  v780 = 0uLL;
  *(_QWORD *)v764 = &off_24C9B2B48;
  strcpy(&v764[8], "channel");
  *(_QWORD *)&v764[16] = 0;
  *(_DWORD *)&v764[24] = (_DWORD)v694;
  *(_DWORD *)&v764[27] = *(_DWORD *)((char *)&v694 + 3);
  v764[31] = 7;
  LODWORD(v694) = 0;
  *(_DWORD *)((char *)&v694 + 3) = 0;
  *(_QWORD *)v765 = 0x7974706D45;
  *(_QWORD *)&v765[8] = 0;
  *(_DWORD *)&v765[19] = *(_DWORD *)((char *)&v692 + 3);
  *(_DWORD *)&v765[16] = (_DWORD)v692;
  v765[23] = 5;
  LODWORD(v692) = 0;
  *(_DWORD *)((char *)&v692 + 3) = 0;
  v766 = v323;
  v727[0] = 0uLL;
  v324 = *(_QWORD *)__p;
  v325 = *(_QWORD *)&__p[8];
  v767 = *(_OWORD *)__p;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  if (*((_QWORD *)&v767 + 1))
  {
    v326 = (unint64_t *)(v325 + 16);
    do
      v327 = __ldxr(v326);
    while (__stxr(v327 + 1, v326));
  }
  v768 = &off_24C9B2B78;
  v328 = (_QWORD *)operator new();
  *v328 = &off_24C9B8990;
  v328[1] = v324;
  v328[2] = v325;
  *(_QWORD *)&v769 = v328;
  v330 = *((_QWORD *)&v767 + 1);
  v329 = v767;
  if (!*((_QWORD *)&v767 + 1))
  {
    *((_QWORD *)&v769 + 1) = v767;
    v770 = 0;
    if ((_QWORD)v767)
      v334 = v767 + 16;
    else
      v334 = 0;
    goto LABEL_423;
  }
  v331 = (unint64_t *)(*((_QWORD *)&v767 + 1) + 16);
  do
    v332 = __ldxr(v331);
  while (__stxr(v332 + 1, v331));
  v333 = *((_QWORD *)&v767 + 1);
  *((_QWORD *)&v769 + 1) = v329;
  v770 = v330;
  if ((_QWORD)v767)
    v334 = v767 + 16;
  else
    v334 = 0;
  if (!*((_QWORD *)&v767 + 1))
  {
    v329 = v767;
LABEL_423:
    v337 = 0;
    v771 = &off_24C9B2520;
    v772 = v334;
    goto LABEL_424;
  }
  v335 = (unint64_t *)(*((_QWORD *)&v767 + 1) + 16);
  do
    v336 = __ldxr(v335);
  while (__stxr(v336 + 1, v335));
  v337 = *((_QWORD *)&v767 + 1);
  v329 = v767;
  v771 = &off_24C9B2520;
  *(_QWORD *)&v772 = v334;
  *((_QWORD *)&v772 + 1) = v333;
  if (*((_QWORD *)&v767 + 1))
  {
    v338 = (unint64_t *)(*((_QWORD *)&v767 + 1) + 16);
    do
      v339 = __ldxr(v338);
    while (__stxr(v339 + 1, v338));
  }
LABEL_424:
  if (v329)
    v340 = v329 + 24;
  else
    v340 = 0;
  v773 = &off_24C9B2310;
  *(_QWORD *)&v774 = v340;
  *((_QWORD *)&v774 + 1) = v337;
  v341 = (std::__shared_weak_count *)*((_QWORD *)&v779 + 1);
  if (!*((_QWORD *)&v779 + 1))
    goto LABEL_431;
  v342 = (unint64_t *)(*((_QWORD *)&v779 + 1) + 8);
  do
    v343 = __ldaxr(v342);
  while (__stlxr(v343 - 1, v342));
  if (!v343)
  {
    ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
    std::__shared_weak_count::__release_weak(v341);
    v344 = (std::__shared_weak_count *)*((_QWORD *)&v780 + 1);
    if (!*((_QWORD *)&v780 + 1))
      goto LABEL_435;
  }
  else
  {
LABEL_431:
    v344 = (std::__shared_weak_count *)*((_QWORD *)&v780 + 1);
    if (!*((_QWORD *)&v780 + 1))
      goto LABEL_435;
  }
  v345 = (unint64_t *)&v344->__shared_owners_;
  do
    v346 = __ldaxr(v345);
  while (__stlxr(v346 - 1, v345));
  if (v346)
  {
LABEL_435:
    if ((_QWORD)v775)
      goto LABEL_441;
    goto LABEL_436;
  }
  ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
  std::__shared_weak_count::__release_weak(v344);
  if ((_QWORD)v775)
    goto LABEL_441;
LABEL_436:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_441:
  v347 = operator new();
  *(_QWORD *)v347 = &off_24C9B2BB0;
  *(_OWORD *)(v347 + 8) = *(_OWORD *)v705;
  *(_QWORD *)(v347 + 24) = *(_QWORD *)&v705[16];
  memset(v705, 0, sizeof(v705));
  *(_OWORD *)(v347 + 32) = *(_OWORD *)v706;
  *(_QWORD *)(v347 + 48) = *(_QWORD *)&v706[16];
  memset(v706, 0, sizeof(v706));
  *(_OWORD *)(v347 + 56) = v707;
  v707 = 0uLL;
  *(_OWORD *)(v347 + 72) = v708;
  v708 = 0uLL;
  *(_QWORD *)(v347 + 88) = &off_24C9B2C88;
  *(_OWORD *)(v347 + 96) = v710;
  v348 = v711;
  *((_QWORD *)&v710 + 1) = 0;
  v711 = 0;
  *(_QWORD *)(v347 + 112) = v348;
  *(_QWORD *)(v347 + 120) = &off_24C9B2C50;
  *(_OWORD *)(v347 + 128) = v713;
  *(_QWORD *)&v710 = 0;
  v713 = 0uLL;
  *(_QWORD *)(v347 + 144) = &off_24C9B2BE0;
  *(_OWORD *)(v347 + 152) = v715;
  v715 = 0uLL;
  *(_QWORD *)(v347 + 168) = &off_24C9B2B48;
  v349 = *(_OWORD *)&v764[8];
  *(_QWORD *)(v347 + 192) = *(_QWORD *)&v764[24];
  *(_OWORD *)(v347 + 176) = v349;
  memset(&v764[8], 0, 24);
  v350 = *(_OWORD *)v765;
  *(_QWORD *)(v347 + 216) = *(_QWORD *)&v765[16];
  *(_OWORD *)(v347 + 200) = v350;
  memset(v765, 0, sizeof(v765));
  v351 = v766;
  v766 = 0uLL;
  v352 = v767;
  *(_OWORD *)(v347 + 224) = v351;
  *(_OWORD *)(v347 + 240) = v352;
  v767 = 0uLL;
  *(_QWORD *)(v347 + 256) = &off_24C9B2B78;
  *(_OWORD *)(v347 + 264) = v769;
  v353 = v770;
  *((_QWORD *)&v769 + 1) = 0;
  v770 = 0;
  *(_QWORD *)(v347 + 280) = v353;
  *(_QWORD *)(v347 + 288) = &off_24C9B2520;
  *(_OWORD *)(v347 + 296) = v772;
  *(_QWORD *)&v769 = 0;
  v772 = 0uLL;
  *(_QWORD *)(v347 + 312) = &off_24C9B2310;
  *(_OWORD *)(v347 + 320) = v774;
  v774 = 0uLL;
  v741 = v347;
  sub_20E966D70((uint64_t)v764);
  v354 = (std::__shared_weak_count *)*((_QWORD *)&v775 + 1);
  if (*((_QWORD *)&v775 + 1))
  {
    v355 = (unint64_t *)(*((_QWORD *)&v775 + 1) + 8);
    do
      v356 = __ldaxr(v355);
    while (__stlxr(v356 - 1, v355));
    if (!v356)
    {
      ((void (*)(std::__shared_weak_count *))v354->__on_zero_shared)(v354);
      std::__shared_weak_count::__release_weak(v354);
    }
  }
  v357 = (std::__shared_weak_count *)*((_QWORD *)&v776 + 1);
  if (*((_QWORD *)&v776 + 1))
  {
    v358 = (unint64_t *)(*((_QWORD *)&v776 + 1) + 8);
    do
      v359 = __ldaxr(v358);
    while (__stlxr(v359 - 1, v358));
    if (!v359)
    {
      ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
      std::__shared_weak_count::__release_weak(v357);
    }
  }
  sub_20E96701C((uint64_t)&v704);
  v360 = (std::__shared_weak_count *)*((_QWORD *)&v777 + 1);
  if (*((_QWORD *)&v777 + 1))
  {
    v361 = (unint64_t *)(*((_QWORD *)&v777 + 1) + 8);
    do
      v362 = __ldaxr(v361);
    while (__stlxr(v362 - 1, v361));
    if (!v362)
    {
      ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
      std::__shared_weak_count::__release_weak(v360);
    }
  }
  v363 = (std::__shared_weak_count *)*((_QWORD *)&v778 + 1);
  if (!*((_QWORD *)&v778 + 1))
    goto LABEL_460;
  v364 = (unint64_t *)(*((_QWORD *)&v778 + 1) + 8);
  do
    v365 = __ldaxr(v364);
  while (__stlxr(v365 - 1, v364));
  if (!v365)
  {
    ((void (*)(std::__shared_weak_count *))v363->__on_zero_shared)(v363);
    std::__shared_weak_count::__release_weak(v363);
    v366 = v726;
    if (!v726)
      goto LABEL_464;
  }
  else
  {
LABEL_460:
    v366 = v726;
    if (!v726)
      goto LABEL_464;
  }
  v367 = (unint64_t *)&v366->__shared_owners_;
  do
    v368 = __ldaxr(v367);
  while (__stlxr(v368 - 1, v367));
  if (v368)
  {
LABEL_464:
    if ((_QWORD)v740)
      goto LABEL_470;
    goto LABEL_465;
  }
  ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
  std::__shared_weak_count::__release_weak(v366);
  if ((_QWORD)v740)
    goto LABEL_470;
LABEL_465:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_470:
  v369 = (std::__shared_weak_count *)*((_QWORD *)&v720 + 1);
  if (*((_QWORD *)&v720 + 1))
  {
    v370 = (unint64_t *)(*((_QWORD *)&v720 + 1) + 8);
    do
      v371 = __ldaxr(v370);
    while (__stlxr(v371 - 1, v370));
    if (!v371)
    {
      ((void (*)(std::__shared_weak_count *))v369->__on_zero_shared)(v369);
      std::__shared_weak_count::__release_weak(v369);
    }
  }
  v372 = v722;
  if (v722)
  {
    v373 = (unint64_t *)&v722->__shared_owners_;
    do
      v374 = __ldaxr(v373);
    while (__stlxr(v374 - 1, v373));
    if (!v374)
    {
      ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
      std::__shared_weak_count::__release_weak(v372);
    }
  }
  v375 = v724;
  if (v724)
  {
    v376 = (unint64_t *)&v724->__shared_owners_;
    do
      v377 = __ldaxr(v376);
    while (__stlxr(v377 - 1, v376));
    if (!v377)
    {
      ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
      std::__shared_weak_count::__release_weak(v375);
    }
  }
  v378 = v703;
  if (v703)
  {
    v379 = (unint64_t *)&v703->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
    }
  }
  v381 = v717;
  if (v717)
  {
    v382 = (unint64_t *)&v717->__shared_owners_;
    do
      v383 = __ldaxr(v382);
    while (__stlxr(v383 - 1, v382));
    if (!v383)
    {
      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
      std::__shared_weak_count::__release_weak(v381);
    }
  }
  v384 = v696;
  v696 = 0;
  if (v384)
  {
    v385 = *v384;
    *v384 = 0;
    if (v385)
      sub_2102175D4((uint64_t)v384, v385);
    MEMORY[0x212BC6398](v384, 0x20C4093837F09);
  }
  v386 = v698;
  if (v698)
  {
    v387 = *v698;
    *v698 = 0;
    if (v387)
      sub_2102175D4((uint64_t)v386, v387);
    MEMORY[0x212BC6398](v386, 0x20C4093837F09);
  }
  v388 = v719;
  if (v719)
  {
    v389 = (unint64_t *)&v719->__shared_owners_;
    do
      v390 = __ldaxr(v389);
    while (__stlxr(v390 - 1, v389));
    if (!v390)
    {
      ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
      std::__shared_weak_count::__release_weak(v388);
    }
  }
  v391 = operator new(0x20uLL);
  v391[1] = 0;
  v392 = v391 + 1;
  v391[2] = 0;
  *v391 = &off_24C9B8A08;
  sub_20EA55BC8(v391 + 3, a3, a4);
  v721 = v391 + 3;
  v722 = (std::__shared_weak_count *)v391;
  sub_210217C20(a2, "CV3DFastHitTest", 1, &v692);
  v393 = v692;
  v692 = 0;
  v690 = v393;
  *(_QWORD *)&v720 = v391 + 3;
  *((_QWORD *)&v720 + 1) = v391;
  do
    v394 = __ldxr(v392);
  while (__stxr(v394 + 1, v392));
  v718 = v391 + 3;
  v719 = (std::__shared_weak_count *)v391;
  do
    v395 = __ldxr(v392);
  while (__stxr(v395 + 1, v392));
  v716 = v391 + 3;
  v717 = (std::__shared_weak_count *)v391;
  do
    v396 = __ldxr(v392);
  while (__stxr(v396 + 1, v392));
  v702 = v391 + 3;
  v703 = (std::__shared_weak_count *)v391;
  do
    v397 = __ldxr(v392);
  while (__stxr(v397 + 1, v392));
  v698 = (uint64_t **)(v391 + 3);
  v699 = (std::__shared_weak_count *)v391;
  do
    v398 = __ldxr(v392);
  while (__stxr(v398 + 1, v392));
  v696 = (uint64_t **)(v391 + 3);
  v697 = (std::__shared_weak_count *)v391;
  do
    v399 = __ldxr(v392);
  while (__stxr(v399 + 1, v392));
  v694 = v391 + 3;
  v695 = (std::__shared_weak_count *)v391;
  do
    v400 = __ldxr(v392);
  while (__stxr(v400 + 1, v392));
  *(_QWORD *)&v780 = v393;
  if (v393)
  {
    v401 = (std::__shared_weak_count *)operator new();
    v401->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7AA0;
    v401->__shared_owners_ = 0;
    v401->__shared_weak_owners_ = 0;
    v401[1].__vftable = (std::__shared_weak_count_vtbl *)v393;
  }
  else
  {
    v401 = 0;
  }
  v690 = 0;
  *(_QWORD *)&v779 = v391 + 3;
  *((_QWORD *)&v779 + 1) = v391;
  v720 = 0uLL;
  *(_QWORD *)&v778 = v391 + 3;
  *((_QWORD *)&v778 + 1) = v391;
  v719 = 0;
  v718 = 0;
  *(_QWORD *)&v777 = v391 + 3;
  *((_QWORD *)&v777 + 1) = v391;
  v717 = 0;
  v716 = 0;
  *(_QWORD *)&v776 = v391 + 3;
  *((_QWORD *)&v776 + 1) = v391;
  v703 = 0;
  v702 = 0;
  *(_QWORD *)&v775 = v391 + 3;
  *((_QWORD *)&v775 + 1) = v391;
  v699 = 0;
  v698 = 0;
  v725 = (uint64_t **)(v391 + 3);
  v726 = (std::__shared_weak_count *)v391;
  v696 = 0;
  v697 = 0;
  v723 = (uint64_t **)(v391 + 3);
  v724 = (std::__shared_weak_count *)v391;
  v694 = 0;
  v695 = 0;
  *(_QWORD *)v764 = &off_24C9B2970;
  strcpy(&v764[8], "CV3DFastHitTest");
  v764[31] = 15;
  memset(v765, 0, sizeof(v765));
  *(_QWORD *)&v766 = v393;
  *((_QWORD *)&v766 + 1) = v401;
  v780 = 0uLL;
  __p[23] = 7;
  strcpy(__p, "channel");
  *(_QWORD *)&v727[0] = v393;
  *((_QWORD *)&v727[0] + 1) = v401;
  if (v401)
  {
    v402 = (unint64_t *)&v401->__shared_owners_;
    do
      v403 = __ldxr(v402);
    while (__stxr(v403 + 1, v402));
  }
  v704 = (uint64_t (**)())&v779;
  *(_QWORD *)v705 = &v778;
  *(_QWORD *)&v705[8] = &v777;
  *(_QWORD *)&v705[16] = &v776;
  *(_QWORD *)v706 = &v775;
  *(_QWORD *)&v706[8] = &v725;
  *(_QWORD *)&v706[16] = &v723;
  sub_20EA0A24C((uint64_t *)&v767, (__int128 *)__p, (uint64_t)v727, (uint64_t)&v704);
  if (!v401)
    goto LABEL_532;
  v404 = (unint64_t *)&v401->__shared_owners_;
  do
    v405 = __ldaxr(v404);
  while (__stlxr(v405 - 1, v404));
  if (!v405)
  {
    ((void (*)(std::__shared_weak_count *))v401->__on_zero_shared)(v401);
    std::__shared_weak_count::__release_weak(v401);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_533:
      if ((_QWORD)v766)
        goto LABEL_538;
      goto LABEL_537;
    }
  }
  else
  {
LABEL_532:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_533;
  }
  operator delete(*(void **)__p);
  if ((_QWORD)v766)
    goto LABEL_538;
LABEL_537:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_538:
  v406 = v724;
  if (v724)
  {
    v407 = (unint64_t *)&v724->__shared_owners_;
    do
      v408 = __ldaxr(v407);
    while (__stlxr(v408 - 1, v407));
    if (!v408)
    {
      ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
      std::__shared_weak_count::__release_weak(v406);
    }
  }
  v409 = v726;
  if (v726)
  {
    v410 = (unint64_t *)&v726->__shared_owners_;
    do
      v411 = __ldaxr(v410);
    while (__stlxr(v411 - 1, v410));
    if (!v411)
    {
      ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
      std::__shared_weak_count::__release_weak(v409);
    }
  }
  v412 = (std::__shared_weak_count *)*((_QWORD *)&v775 + 1);
  if (*((_QWORD *)&v775 + 1))
  {
    v413 = (unint64_t *)(*((_QWORD *)&v775 + 1) + 8);
    do
      v414 = __ldaxr(v413);
    while (__stlxr(v414 - 1, v413));
    if (!v414)
    {
      ((void (*)(std::__shared_weak_count *))v412->__on_zero_shared)(v412);
      std::__shared_weak_count::__release_weak(v412);
    }
  }
  v415 = (std::__shared_weak_count *)*((_QWORD *)&v776 + 1);
  if (*((_QWORD *)&v776 + 1))
  {
    v416 = (unint64_t *)(*((_QWORD *)&v776 + 1) + 8);
    do
      v417 = __ldaxr(v416);
    while (__stlxr(v417 - 1, v416));
    if (!v417)
    {
      ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
      std::__shared_weak_count::__release_weak(v415);
    }
  }
  v418 = (std::__shared_weak_count *)*((_QWORD *)&v777 + 1);
  if (*((_QWORD *)&v777 + 1))
  {
    v419 = (unint64_t *)(*((_QWORD *)&v777 + 1) + 8);
    do
      v420 = __ldaxr(v419);
    while (__stlxr(v420 - 1, v419));
    if (!v420)
    {
      ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
      std::__shared_weak_count::__release_weak(v418);
    }
  }
  v421 = (std::__shared_weak_count *)*((_QWORD *)&v778 + 1);
  if (*((_QWORD *)&v778 + 1))
  {
    v422 = (unint64_t *)(*((_QWORD *)&v778 + 1) + 8);
    do
      v423 = __ldaxr(v422);
    while (__stlxr(v423 - 1, v422));
    if (!v423)
    {
      ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
      std::__shared_weak_count::__release_weak(v421);
    }
  }
  v424 = (std::__shared_weak_count *)*((_QWORD *)&v779 + 1);
  if (*((_QWORD *)&v779 + 1))
  {
    v425 = (unint64_t *)(*((_QWORD *)&v779 + 1) + 8);
    do
      v426 = __ldaxr(v425);
    while (__stlxr(v426 - 1, v425));
    if (!v426)
    {
      ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
      std::__shared_weak_count::__release_weak(v424);
    }
  }
  v427 = (std::__shared_weak_count *)*((_QWORD *)&v780 + 1);
  if (*((_QWORD *)&v780 + 1))
  {
    v428 = (unint64_t *)(*((_QWORD *)&v780 + 1) + 8);
    do
      v429 = __ldaxr(v428);
    while (__stlxr(v429 - 1, v428));
    if (!v429)
    {
      ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
      std::__shared_weak_count::__release_weak(v427);
    }
  }
  v430 = v695;
  if (v695)
  {
    v431 = (unint64_t *)&v695->__shared_owners_;
    do
      v432 = __ldaxr(v431);
    while (__stlxr(v432 - 1, v431));
    if (!v432)
    {
      ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
      std::__shared_weak_count::__release_weak(v430);
    }
  }
  v433 = v697;
  if (v697)
  {
    v434 = (unint64_t *)&v697->__shared_owners_;
    do
      v435 = __ldaxr(v434);
    while (__stlxr(v435 - 1, v434));
    if (!v435)
    {
      ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
      std::__shared_weak_count::__release_weak(v433);
    }
  }
  v436 = v699;
  if (v699)
  {
    v437 = (unint64_t *)&v699->__shared_owners_;
    do
      v438 = __ldaxr(v437);
    while (__stlxr(v438 - 1, v437));
    if (!v438)
    {
      ((void (*)(std::__shared_weak_count *))v436->__on_zero_shared)(v436);
      std::__shared_weak_count::__release_weak(v436);
    }
  }
  v439 = v703;
  if (v703)
  {
    v440 = (unint64_t *)&v703->__shared_owners_;
    do
      v441 = __ldaxr(v440);
    while (__stlxr(v441 - 1, v440));
    if (!v441)
    {
      ((void (*)(std::__shared_weak_count *))v439->__on_zero_shared)(v439);
      std::__shared_weak_count::__release_weak(v439);
    }
  }
  v442 = v717;
  if (v717)
  {
    v443 = (unint64_t *)&v717->__shared_owners_;
    do
      v444 = __ldaxr(v443);
    while (__stlxr(v444 - 1, v443));
    if (!v444)
    {
      ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
      std::__shared_weak_count::__release_weak(v442);
    }
  }
  v445 = v719;
  if (v719)
  {
    v446 = (unint64_t *)&v719->__shared_owners_;
    do
      v447 = __ldaxr(v446);
    while (__stlxr(v447 - 1, v446));
    if (!v447)
    {
      ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
      std::__shared_weak_count::__release_weak(v445);
    }
  }
  v448 = (std::__shared_weak_count *)*((_QWORD *)&v720 + 1);
  if (*((_QWORD *)&v720 + 1))
  {
    v449 = (unint64_t *)(*((_QWORD *)&v720 + 1) + 8);
    do
      v450 = __ldaxr(v449);
    while (__stlxr(v450 - 1, v449));
    if (!v450)
    {
      ((void (*)(std::__shared_weak_count *))v448->__on_zero_shared)(v448);
      std::__shared_weak_count::__release_weak(v448);
    }
  }
  v451 = v690;
  v690 = 0;
  if (v451)
  {
    v452 = *v451;
    *v451 = 0;
    if (v452)
      sub_2102175D4((uint64_t)v451, v452);
    MEMORY[0x212BC6398](v451, 0x20C4093837F09);
  }
  v453 = v692;
  if (v692)
  {
    v454 = *v692;
    *v692 = 0;
    if (v454)
      sub_2102175D4((uint64_t)v453, v454);
    MEMORY[0x212BC6398](v453, 0x20C4093837F09);
  }
  v455 = v722;
  if (v722)
  {
    v456 = (unint64_t *)&v722->__shared_owners_;
    do
      v457 = __ldaxr(v456);
    while (__stlxr(v457 - 1, v456));
    if (!v457)
    {
      ((void (*)(std::__shared_weak_count *))v455->__on_zero_shared)(v455);
      std::__shared_weak_count::__release_weak(v455);
    }
  }
  v458 = operator new(0x20uLL);
  v458[1] = 0;
  v459 = v458 + 1;
  v458[2] = 0;
  *v458 = &off_24C9BBC50;
  sub_20E9F8E74(v458 + 3, v661, a3, a4);
  v702 = v458 + 3;
  v703 = (std::__shared_weak_count *)v458;
  sub_210217C20(a2, "CV3DAsyncHitTest", 1, &v701);
  v460 = v701;
  v701 = 0;
  v700 = v460;
  v698 = (uint64_t **)(v458 + 3);
  v699 = (std::__shared_weak_count *)v458;
  do
    v461 = __ldxr(v459);
  while (__stxr(v461 + 1, v459));
  v696 = (uint64_t **)(v458 + 3);
  v697 = (std::__shared_weak_count *)v458;
  do
    v462 = __ldxr(v459);
  while (__stxr(v462 + 1, v459));
  v694 = v458 + 3;
  v695 = (std::__shared_weak_count *)v458;
  do
    v463 = __ldxr(v459);
  while (__stxr(v463 + 1, v459));
  v692 = (uint64_t **)(v458 + 3);
  v693 = (std::__shared_weak_count *)v458;
  do
    v464 = __ldxr(v459);
  while (__stxr(v464 + 1, v459));
  v690 = (uint64_t **)(v458 + 3);
  v691 = (std::__shared_weak_count *)v458;
  do
    v465 = __ldxr(v459);
  while (__stxr(v465 + 1, v459));
  v688 = v458 + 3;
  v689 = (std::__shared_weak_count *)v458;
  do
    v466 = __ldxr(v459);
  while (__stxr(v466 + 1, v459));
  v686 = v458 + 3;
  v687 = (std::__shared_weak_count *)v458;
  do
    v467 = __ldxr(v459);
  while (__stxr(v467 + 1, v459));
  v684 = v458 + 3;
  v685 = (std::__shared_weak_count *)v458;
  do
    v468 = __ldxr(v459);
  while (__stxr(v468 + 1, v459));
  v682 = v458 + 3;
  v683 = (std::__shared_weak_count *)v458;
  do
    v469 = __ldxr(v459);
  while (__stxr(v469 + 1, v459));
  v680 = v458 + 3;
  v681 = (std::__shared_weak_count *)v458;
  do
    v470 = __ldxr(v459);
  while (__stxr(v470 + 1, v459));
  *(_QWORD *)&v779 = v460;
  if (v460)
  {
    v471 = (std::__shared_weak_count *)operator new();
    v471->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7AA0;
    v471->__shared_owners_ = 0;
    v471->__shared_weak_owners_ = 0;
    v471[1].__vftable = (std::__shared_weak_count_vtbl *)v460;
  }
  else
  {
    v471 = 0;
  }
  v700 = 0;
  *(_QWORD *)&v778 = v458 + 3;
  *((_QWORD *)&v778 + 1) = v458;
  v699 = 0;
  v698 = 0;
  *(_QWORD *)&v777 = v458 + 3;
  *((_QWORD *)&v777 + 1) = v458;
  v697 = 0;
  v696 = 0;
  *(_QWORD *)&v776 = v458 + 3;
  *((_QWORD *)&v776 + 1) = v458;
  v695 = 0;
  v694 = 0;
  *(_QWORD *)&v775 = v458 + 3;
  *((_QWORD *)&v775 + 1) = v458;
  v693 = 0;
  v692 = 0;
  v725 = (uint64_t **)(v458 + 3);
  v726 = (std::__shared_weak_count *)v458;
  v691 = 0;
  v690 = 0;
  v723 = (uint64_t **)(v458 + 3);
  v724 = (std::__shared_weak_count *)v458;
  v688 = 0;
  v689 = 0;
  v721 = v458 + 3;
  v722 = (std::__shared_weak_count *)v458;
  v686 = 0;
  v687 = 0;
  *(_QWORD *)&v720 = v458 + 3;
  *((_QWORD *)&v720 + 1) = v458;
  v684 = 0;
  v685 = 0;
  v718 = v458 + 3;
  v719 = (std::__shared_weak_count *)v458;
  v682 = 0;
  v683 = 0;
  v716 = v458 + 3;
  v717 = (std::__shared_weak_count *)v458;
  v680 = 0;
  v681 = 0;
  *(_QWORD *)__p = &off_24C9B24C0;
  strcpy(&__p[8], "CV3DAsyncHitTest");
  __p[31] = 16;
  v733 = 0uLL;
  v734 = 0;
  *(_QWORD *)&v735 = v460;
  *((_QWORD *)&v735 + 1) = v471;
  v779 = 0uLL;
  BYTE7(v727[1]) = 7;
  strcpy((char *)v727, "channel");
  *(_QWORD *)&v780 = v460;
  *((_QWORD *)&v780 + 1) = v471;
  if (v471)
  {
    v472 = (unint64_t *)&v471->__shared_owners_;
    do
      v473 = __ldxr(v472);
    while (__stxr(v473 + 1, v472));
  }
  v704 = (uint64_t (**)())&v778;
  *(_QWORD *)v705 = &v777;
  *(_QWORD *)&v705[8] = &v776;
  *(_QWORD *)&v705[16] = &v775;
  *(_QWORD *)v706 = &v725;
  *(_QWORD *)&v706[8] = &v723;
  *(_QWORD *)&v706[16] = &v721;
  *(_QWORD *)&v707 = &v720;
  *((_QWORD *)&v707 + 1) = &v718;
  *(_QWORD *)&v708 = &v716;
  sub_20EA2C10C((uint64_t *)&v736, v727, (uint64_t)&v780, (uint64_t)&v704);
  if (!v471)
    goto LABEL_656;
  v474 = (unint64_t *)&v471->__shared_owners_;
  do
    v475 = __ldaxr(v474);
  while (__stlxr(v475 - 1, v474));
  if (!v475)
  {
    ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
    std::__shared_weak_count::__release_weak(v471);
    if ((SBYTE7(v727[1]) & 0x80000000) == 0)
    {
LABEL_657:
      if ((_QWORD)v735)
        goto LABEL_662;
      goto LABEL_661;
    }
  }
  else
  {
LABEL_656:
    if ((SBYTE7(v727[1]) & 0x80000000) == 0)
      goto LABEL_657;
  }
  operator delete(*(void **)&v727[0]);
  if ((_QWORD)v735)
    goto LABEL_662;
LABEL_661:
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_662:
  v476 = v717;
  if (v717)
  {
    v477 = (unint64_t *)&v717->__shared_owners_;
    do
      v478 = __ldaxr(v477);
    while (__stlxr(v478 - 1, v477));
    if (!v478)
    {
      ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
      std::__shared_weak_count::__release_weak(v476);
    }
  }
  v479 = v719;
  if (v719)
  {
    v480 = (unint64_t *)&v719->__shared_owners_;
    do
      v481 = __ldaxr(v480);
    while (__stlxr(v481 - 1, v480));
    if (!v481)
    {
      ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
      std::__shared_weak_count::__release_weak(v479);
    }
  }
  v482 = (std::__shared_weak_count *)*((_QWORD *)&v720 + 1);
  if (*((_QWORD *)&v720 + 1))
  {
    v483 = (unint64_t *)(*((_QWORD *)&v720 + 1) + 8);
    do
      v484 = __ldaxr(v483);
    while (__stlxr(v484 - 1, v483));
    if (!v484)
    {
      ((void (*)(std::__shared_weak_count *))v482->__on_zero_shared)(v482);
      std::__shared_weak_count::__release_weak(v482);
    }
  }
  v485 = v722;
  if (v722)
  {
    v486 = (unint64_t *)&v722->__shared_owners_;
    do
      v487 = __ldaxr(v486);
    while (__stlxr(v487 - 1, v486));
    if (!v487)
    {
      ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
      std::__shared_weak_count::__release_weak(v485);
    }
  }
  v488 = v724;
  if (v724)
  {
    v489 = (unint64_t *)&v724->__shared_owners_;
    do
      v490 = __ldaxr(v489);
    while (__stlxr(v490 - 1, v489));
    if (!v490)
    {
      ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
      std::__shared_weak_count::__release_weak(v488);
    }
  }
  v491 = v726;
  if (v726)
  {
    v492 = (unint64_t *)&v726->__shared_owners_;
    do
      v493 = __ldaxr(v492);
    while (__stlxr(v493 - 1, v492));
    if (!v493)
    {
      ((void (*)(std::__shared_weak_count *))v491->__on_zero_shared)(v491);
      std::__shared_weak_count::__release_weak(v491);
    }
  }
  v494 = (std::__shared_weak_count *)*((_QWORD *)&v775 + 1);
  if (*((_QWORD *)&v775 + 1))
  {
    v495 = (unint64_t *)(*((_QWORD *)&v775 + 1) + 8);
    do
      v496 = __ldaxr(v495);
    while (__stlxr(v496 - 1, v495));
    if (!v496)
    {
      ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
      std::__shared_weak_count::__release_weak(v494);
    }
  }
  v497 = (std::__shared_weak_count *)*((_QWORD *)&v776 + 1);
  if (*((_QWORD *)&v776 + 1))
  {
    v498 = (unint64_t *)(*((_QWORD *)&v776 + 1) + 8);
    do
      v499 = __ldaxr(v498);
    while (__stlxr(v499 - 1, v498));
    if (!v499)
    {
      ((void (*)(std::__shared_weak_count *))v497->__on_zero_shared)(v497);
      std::__shared_weak_count::__release_weak(v497);
    }
  }
  v500 = (std::__shared_weak_count *)*((_QWORD *)&v777 + 1);
  if (*((_QWORD *)&v777 + 1))
  {
    v501 = (unint64_t *)(*((_QWORD *)&v777 + 1) + 8);
    do
      v502 = __ldaxr(v501);
    while (__stlxr(v502 - 1, v501));
    if (!v502)
    {
      ((void (*)(std::__shared_weak_count *))v500->__on_zero_shared)(v500);
      std::__shared_weak_count::__release_weak(v500);
    }
  }
  v503 = (std::__shared_weak_count *)*((_QWORD *)&v778 + 1);
  if (*((_QWORD *)&v778 + 1))
  {
    v504 = (unint64_t *)(*((_QWORD *)&v778 + 1) + 8);
    do
      v505 = __ldaxr(v504);
    while (__stlxr(v505 - 1, v504));
    if (!v505)
    {
      ((void (*)(std::__shared_weak_count *))v503->__on_zero_shared)(v503);
      std::__shared_weak_count::__release_weak(v503);
    }
  }
  v506 = (std::__shared_weak_count *)*((_QWORD *)&v779 + 1);
  if (*((_QWORD *)&v779 + 1))
  {
    v507 = (unint64_t *)(*((_QWORD *)&v779 + 1) + 8);
    do
      v508 = __ldaxr(v507);
    while (__stlxr(v508 - 1, v507));
    if (!v508)
    {
      ((void (*)(std::__shared_weak_count *))v506->__on_zero_shared)(v506);
      std::__shared_weak_count::__release_weak(v506);
    }
  }
  v509 = v681;
  if (v681)
  {
    v510 = (unint64_t *)&v681->__shared_owners_;
    do
      v511 = __ldaxr(v510);
    while (__stlxr(v511 - 1, v510));
    if (!v511)
    {
      ((void (*)(std::__shared_weak_count *))v509->__on_zero_shared)(v509);
      std::__shared_weak_count::__release_weak(v509);
    }
  }
  v512 = v683;
  if (v683)
  {
    v513 = (unint64_t *)&v683->__shared_owners_;
    do
      v514 = __ldaxr(v513);
    while (__stlxr(v514 - 1, v513));
    if (!v514)
    {
      ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
      std::__shared_weak_count::__release_weak(v512);
    }
  }
  v515 = v685;
  if (v685)
  {
    v516 = (unint64_t *)&v685->__shared_owners_;
    do
      v517 = __ldaxr(v516);
    while (__stlxr(v517 - 1, v516));
    if (!v517)
    {
      ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
      std::__shared_weak_count::__release_weak(v515);
    }
  }
  v518 = v687;
  if (v687)
  {
    v519 = (unint64_t *)&v687->__shared_owners_;
    do
      v520 = __ldaxr(v519);
    while (__stlxr(v520 - 1, v519));
    if (!v520)
    {
      ((void (*)(std::__shared_weak_count *))v518->__on_zero_shared)(v518);
      std::__shared_weak_count::__release_weak(v518);
    }
  }
  v521 = v689;
  if (v689)
  {
    v522 = (unint64_t *)&v689->__shared_owners_;
    do
      v523 = __ldaxr(v522);
    while (__stlxr(v523 - 1, v522));
    if (!v523)
    {
      ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
      std::__shared_weak_count::__release_weak(v521);
    }
  }
  v524 = v691;
  if (v691)
  {
    v525 = (unint64_t *)&v691->__shared_owners_;
    do
      v526 = __ldaxr(v525);
    while (__stlxr(v526 - 1, v525));
    if (!v526)
    {
      ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
      std::__shared_weak_count::__release_weak(v524);
    }
  }
  v527 = v693;
  if (v693)
  {
    v528 = (unint64_t *)&v693->__shared_owners_;
    do
      v529 = __ldaxr(v528);
    while (__stlxr(v529 - 1, v528));
    if (!v529)
    {
      ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
      std::__shared_weak_count::__release_weak(v527);
    }
  }
  v530 = v695;
  if (v695)
  {
    v531 = (unint64_t *)&v695->__shared_owners_;
    do
      v532 = __ldaxr(v531);
    while (__stlxr(v532 - 1, v531));
    if (!v532)
    {
      ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
      std::__shared_weak_count::__release_weak(v530);
    }
  }
  v533 = v697;
  if (v697)
  {
    v534 = (unint64_t *)&v697->__shared_owners_;
    do
      v535 = __ldaxr(v534);
    while (__stlxr(v535 - 1, v534));
    if (!v535)
    {
      ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
      std::__shared_weak_count::__release_weak(v533);
    }
  }
  v536 = v699;
  if (v699)
  {
    v537 = (unint64_t *)&v699->__shared_owners_;
    do
      v538 = __ldaxr(v537);
    while (__stlxr(v538 - 1, v537));
    if (!v538)
    {
      ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
      std::__shared_weak_count::__release_weak(v536);
    }
  }
  v539 = v700;
  v700 = 0;
  if (v539)
  {
    v540 = *v539;
    *v539 = 0;
    if (v540)
      sub_2102175D4((uint64_t)v539, v540);
    MEMORY[0x212BC6398](v539, 0x20C4093837F09);
  }
  v541 = v701;
  if (v701)
  {
    v542 = *v701;
    *v701 = 0;
    if (v542)
      sub_2102175D4((uint64_t)v541, v542);
    MEMORY[0x212BC6398](v541, 0x20C4093837F09);
  }
  v543 = v703;
  if (v703)
  {
    v544 = (unint64_t *)&v703->__shared_owners_;
    do
      v545 = __ldaxr(v544);
    while (__stlxr(v545 - 1, v544));
    if (!v545)
    {
      ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
      std::__shared_weak_count::__release_weak(v543);
    }
  }
  sub_210217C20(a2, "CV3DAsyncHitTestFwd", 1, &v725);
  v546 = v725;
  v725 = 0;
  v723 = v546;
  *(_QWORD *)&v780 = v546;
  if (v546)
  {
    v547 = (std::__shared_weak_count *)operator new();
    v547->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7AA0;
    v547->__shared_owners_ = 0;
    v547->__shared_weak_owners_ = 0;
    v547[1].__vftable = (std::__shared_weak_count_vtbl *)v546;
  }
  else
  {
    v547 = 0;
  }
  v723 = 0;
  *(_QWORD *)&v727[0] = &off_24C9B22B0;
  strcpy((char *)v727 + 8, "CV3DAsyncHitTestFwd");
  HIBYTE(v727[1]) = 19;
  v728 = 0uLL;
  v729 = 0;
  *(_QWORD *)&v730 = v546;
  *((_QWORD *)&v730 + 1) = v547;
  v780 = 0uLL;
  if (v547)
  {
    v548 = (unint64_t *)&v547->__shared_owners_;
    do
      v549 = __ldxr(v548);
    while (__stxr(v549 + 1, v548));
    do
      v550 = __ldxr(v548);
    while (__stxr(v550 + 1, v548));
  }
  v551 = v775;
  *(_QWORD *)&v777 = v775;
  *(_QWORD *)((char *)&v777 + 7) = *(_QWORD *)((char *)&v775 + 7);
  *(_QWORD *)((char *)&v776 + 7) = *(_QWORD *)((char *)&v775 + 7);
  BYTE7(v776) = BYTE7(v775);
  *(_QWORD *)&v775 = 0;
  *(_QWORD *)((char *)&v775 + 7) = 0;
  *(_QWORD *)&v778 = v551;
  *(_QWORD *)((char *)&v778 + 7) = *(_QWORD *)((char *)&v776 + 7);
  *(_QWORD *)((char *)&v776 + 7) = 0;
  *(_QWORD *)&v776 = 0;
  if (v547)
  {
    v552 = (unint64_t *)&v547->__shared_owners_;
    do
      v553 = __ldxr(v552);
    while (__stxr(v553 + 1, v552));
  }
  v554 = operator new();
  *(_QWORD *)&v779 = v778;
  *(_QWORD *)((char *)&v779 + 7) = *(_QWORD *)((char *)&v778 + 7);
  *(_QWORD *)&v778 = 0;
  *(_QWORD *)((char *)&v778 + 7) = 0;
  *(_BYTE *)(v554 + 8) = 1;
  *(_QWORD *)(v554 + 32) = 0;
  *(_QWORD *)(v554 + 40) = 0;
  *(_QWORD *)v554 = &off_24C9BE0F0;
  *(_QWORD *)(v554 + 16) = &unk_24C9BE168;
  *(_QWORD *)(v554 + 24) = &unk_24C9BE1A8;
  *(_QWORD *)(v554 + 63) = *(_QWORD *)((char *)&v779 + 7);
  v555 = v779;
  *(_QWORD *)(v554 + 48) = 0x6C656E6E616863;
  *(_QWORD *)(v554 + 56) = v555;
  *(_BYTE *)(v554 + 71) = 7;
  *(_QWORD *)&v779 = 0;
  *(_QWORD *)((char *)&v779 + 7) = 0;
  *(_QWORD *)(v554 + 72) = v546;
  *(_QWORD *)(v554 + 80) = v547;
  v556 = (_QWORD *)operator new();
  *v556 = &off_24C9BE290;
  *(_QWORD *)(v554 + 136) = 0;
  *(_QWORD *)(v554 + 88) = v556;
  *(_QWORD *)(v554 + 96) = v554 + 96;
  *(_QWORD *)(v554 + 104) = v554 + 96;
  *(_QWORD *)(v554 + 112) = 0;
  *(_QWORD *)(v554 + 120) = v554 + 120;
  *(_QWORD *)(v554 + 128) = v554 + 120;
  *(_QWORD *)(v554 + 144) = 0;
  if (!*(_QWORD *)(v554 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v557 = (std::__shared_weak_count *)operator new();
  v557->__shared_owners_ = 0;
  v558 = (unint64_t *)&v557->__shared_owners_;
  v557->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BE730;
  v557->__shared_weak_owners_ = 0;
  v557[1].__vftable = (std::__shared_weak_count_vtbl *)v554;
  v559 = *(std::__shared_weak_count **)(v554 + 40);
  if (v559)
  {
    if (v559->__shared_owners_ != -1)
      goto LABEL_805;
    do
      v560 = __ldxr(v558);
    while (__stxr(v560 + 1, v558));
    v561 = (unint64_t *)&v557->__shared_weak_owners_;
    do
      v562 = __ldxr(v561);
    while (__stxr(v562 + 1, v561));
    *(_QWORD *)(v554 + 32) = v554;
    *(_QWORD *)(v554 + 40) = v557;
    std::__shared_weak_count::__release_weak(v559);
  }
  else
  {
    do
      v563 = __ldxr(v558);
    while (__stxr(v563 + 1, v558));
    v564 = (unint64_t *)&v557->__shared_weak_owners_;
    do
      v565 = __ldxr(v564);
    while (__stxr(v565 + 1, v564));
    *(_QWORD *)(v554 + 32) = v554;
    *(_QWORD *)(v554 + 40) = v557;
  }
  do
    v566 = __ldaxr(v558);
  while (__stlxr(v566 - 1, v558));
  if (!v566)
  {
    ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
    std::__shared_weak_count::__release_weak(v557);
  }
LABEL_805:
  v704 = &off_24C9B22E0;
  strcpy(v705, "channel");
  *(_QWORD *)&v705[8] = v777;
  *(_QWORD *)&v705[15] = *(_QWORD *)((char *)&v777 + 7);
  v705[23] = 7;
  *(_QWORD *)&v777 = 0;
  *(_QWORD *)((char *)&v777 + 7) = 0;
  *(_QWORD *)v706 = 0x7974706D45;
  *(_QWORD *)&v706[8] = v779;
  *(_QWORD *)&v706[15] = *(_QWORD *)((char *)&v779 + 7);
  v706[23] = 5;
  *(_QWORD *)&v779 = 0;
  *(_QWORD *)((char *)&v779 + 7) = 0;
  *(_QWORD *)&v707 = v546;
  *((_QWORD *)&v707 + 1) = v547;
  v567 = (unint64_t *)&v557->__shared_weak_owners_;
  *(_QWORD *)&v708 = v554;
  *((_QWORD *)&v708 + 1) = v557;
  do
    v568 = __ldxr(v567);
  while (__stxr(v568 + 1, v567));
  v709 = &off_24C9B2380;
  v569 = (_QWORD *)operator new();
  *v569 = &off_24C9BE780;
  v569[1] = v554;
  v569[2] = v557;
  *(_QWORD *)&v710 = v569;
  v571 = *((_QWORD *)&v708 + 1);
  v570 = v708;
  if (!*((_QWORD *)&v708 + 1))
  {
    *((_QWORD *)&v710 + 1) = v708;
    v711 = 0;
    if ((_QWORD)v708)
      v575 = v708 + 16;
    else
      v575 = 0;
    goto LABEL_824;
  }
  v572 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v573 = __ldxr(v572);
  while (__stxr(v573 + 1, v572));
  v574 = *((_QWORD *)&v708 + 1);
  *((_QWORD *)&v710 + 1) = v570;
  v711 = v571;
  if ((_QWORD)v708)
    v575 = v708 + 16;
  else
    v575 = 0;
  if (!*((_QWORD *)&v708 + 1))
  {
    v570 = v708;
LABEL_824:
    v578 = 0;
    v712 = &off_24C9B2348;
    v713 = v575;
    goto LABEL_825;
  }
  v576 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
  do
    v577 = __ldxr(v576);
  while (__stxr(v577 + 1, v576));
  v578 = *((_QWORD *)&v708 + 1);
  v570 = v708;
  v712 = &off_24C9B2348;
  *(_QWORD *)&v713 = v575;
  *((_QWORD *)&v713 + 1) = v574;
  if (*((_QWORD *)&v708 + 1))
  {
    v579 = (unint64_t *)(*((_QWORD *)&v708 + 1) + 16);
    do
      v580 = __ldxr(v579);
    while (__stxr(v580 + 1, v579));
  }
LABEL_825:
  if (v570)
    v581 = v570 + 24;
  else
    v581 = 0;
  v714 = &off_24C9B2310;
  *(_QWORD *)&v715 = v581;
  *((_QWORD *)&v715 + 1) = v578;
  v582 = operator new();
  *(_QWORD *)v582 = &off_24C9B22E0;
  *(_OWORD *)(v582 + 8) = *(_OWORD *)v705;
  *(_QWORD *)(v582 + 24) = *(_QWORD *)&v705[16];
  memset(v705, 0, sizeof(v705));
  *(_OWORD *)(v582 + 32) = *(_OWORD *)v706;
  *(_QWORD *)(v582 + 48) = *(_QWORD *)&v706[16];
  memset(v706, 0, sizeof(v706));
  *(_OWORD *)(v582 + 56) = v707;
  v707 = 0uLL;
  *(_OWORD *)(v582 + 72) = v708;
  v708 = 0uLL;
  *(_QWORD *)(v582 + 88) = &off_24C9B2380;
  *(_OWORD *)(v582 + 96) = v710;
  v583 = v711;
  *((_QWORD *)&v710 + 1) = 0;
  v711 = 0;
  *(_QWORD *)(v582 + 112) = v583;
  *(_QWORD *)(v582 + 120) = &off_24C9B2348;
  *(_OWORD *)(v582 + 128) = v713;
  *(_QWORD *)&v710 = 0;
  v713 = 0uLL;
  *(_QWORD *)(v582 + 144) = &off_24C9B2310;
  *(_OWORD *)(v582 + 152) = v715;
  v715 = 0uLL;
  v731 = v582;
  sub_20E9636E0((uint64_t)&v704);
  if (!v547)
    goto LABEL_832;
  v584 = (unint64_t *)&v547->__shared_owners_;
  do
    v585 = __ldaxr(v584);
  while (__stlxr(v585 - 1, v584));
  if (!v585)
  {
    ((void (*)(std::__shared_weak_count *))v547->__on_zero_shared)(v547);
    std::__shared_weak_count::__release_weak(v547);
    if ((_QWORD)v730)
      goto LABEL_836;
  }
  else
  {
LABEL_832:
    if ((_QWORD)v730)
      goto LABEL_836;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Node.h", 374, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_836:
  v586 = (std::__shared_weak_count *)*((_QWORD *)&v780 + 1);
  if (*((_QWORD *)&v780 + 1))
  {
    v587 = (unint64_t *)(*((_QWORD *)&v780 + 1) + 8);
    do
      v588 = __ldaxr(v587);
    while (__stlxr(v588 - 1, v587));
    if (!v588)
    {
      ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
      std::__shared_weak_count::__release_weak(v586);
    }
  }
  v589 = (uint64_t)v723;
  if (v723)
  {
    v590 = *v723;
    *v723 = 0;
    if (v590)
      sub_2102175D4(v589, v590);
    MEMORY[0x212BC6398](v589, 0x20C4093837F09);
  }
  v591 = v725;
  if (v725)
  {
    v592 = *v725;
    *v725 = 0;
    if (v592)
      sub_2102175D4((uint64_t)v591, v592);
    MEMORY[0x212BC6398](v591, 0x20C4093837F09);
  }
  v593 = v747;
  v704 = &off_24C9B2C88;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v741 + 96) + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v593 + 120) + 16))(v593 + 120, &v704);
  v594 = *(_QWORD *)v705;
  v704 = &off_24C9B2C88;
  *(_QWORD *)v705 = 0;
  if (v594)
    (*(void (**)(uint64_t))(*(_QWORD *)v594 + 8))(v594);
  v595 = v677;
  v704 = &off_24C9B2938;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v767 + 96) + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v595 + 120) + 16))(v595 + 120, &v704);
  v596 = *(_QWORD *)v705;
  v704 = &off_24C9B2938;
  *(_QWORD *)v705 = 0;
  if (v596)
    (*(void (**)(uint64_t))(*(_QWORD *)v596 + 8))(v596);
  v597 = v741;
  v704 = &off_24C9B28D0;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v767 + 264) + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v597 + 120) + 16))(v597 + 120, &v704);
  v598 = *(_QWORD *)v705;
  v704 = &off_24C9B28D0;
  *(_QWORD *)v705 = 0;
  if (v598)
    (*(void (**)(uint64_t))(*(_QWORD *)v598 + 8))(v598);
  v599 = v763;
  v704 = &off_24C9B2868;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v767 + 432) + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v599 + 120) + 16))(v599 + 120, &v704);
  v600 = *(_QWORD *)v705;
  v704 = &off_24C9B2868;
  *(_QWORD *)v705 = 0;
  if (v600)
    (*(void (**)(uint64_t))(*(_QWORD *)v600 + 8))(v600);
  v601 = v757;
  v704 = &off_24C9B2800;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v767 + 600) + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v601 + 120) + 16))(v601 + 120, &v704);
  v602 = *(_QWORD *)v705;
  v704 = &off_24C9B2800;
  *(_QWORD *)v705 = 0;
  if (v602)
    (*(void (**)(uint64_t))(*(_QWORD *)v602 + 8))(v602);
  v603 = v757;
  v704 = &off_24C9B2558;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v767 + 1104) + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v603 + 288) + 16))(v603 + 288, &v704);
  v604 = *(_QWORD *)v705;
  v704 = &off_24C9B2558;
  *(_QWORD *)v705 = 0;
  if (v604)
    (*(void (**)(uint64_t))(*(_QWORD *)v604 + 8))(v604);
  v605 = v677;
  v704 = &off_24C9B2938;
  (*(void (**)(_BYTE *__return_ptr))(*v736[12] + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v605 + 120) + 16))(v605 + 120, &v704);
  v606 = *(_QWORD *)v705;
  v704 = &off_24C9B2938;
  *(_QWORD *)v705 = 0;
  if (v606)
    (*(void (**)(uint64_t))(*(_QWORD *)v606 + 8))(v606);
  v607 = v741;
  v704 = &off_24C9B28D0;
  (*(void (**)(_BYTE *__return_ptr))(*v736[33] + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v607 + 120) + 16))(v607 + 120, &v704);
  v608 = *(_QWORD *)v705;
  v704 = &off_24C9B28D0;
  *(_QWORD *)v705 = 0;
  if (v608)
    (*(void (**)(uint64_t))(*(_QWORD *)v608 + 8))(v608);
  v609 = v763;
  v704 = &off_24C9B2868;
  (*(void (**)(_BYTE *__return_ptr))(*v736[54] + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v609 + 120) + 16))(v609 + 120, &v704);
  v610 = *(_QWORD *)v705;
  v704 = &off_24C9B2868;
  *(_QWORD *)v705 = 0;
  if (v610)
    (*(void (**)(uint64_t))(*(_QWORD *)v610 + 8))(v610);
  v611 = v757;
  v704 = &off_24C9B2800;
  (*(void (**)(_BYTE *__return_ptr))(*v736[75] + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v611 + 120) + 16))(v611 + 120, &v704);
  v612 = *(_QWORD *)v705;
  v704 = &off_24C9B2800;
  *(_QWORD *)v705 = 0;
  if (v612)
    (*(void (**)(uint64_t))(*(_QWORD *)v612 + 8))(v612);
  v613 = v757;
  v704 = &off_24C9B2558;
  (*(void (**)(_BYTE *__return_ptr))(*v736[201] + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v613 + 288) + 16))(v613 + 288, &v704);
  v614 = *(_QWORD *)v705;
  v704 = &off_24C9B2558;
  *(_QWORD *)v705 = 0;
  if (v614)
    (*(void (**)(uint64_t))(*(_QWORD *)v614 + 8))(v614);
  v615 = v753;
  v704 = &off_24C9B2450;
  (*(void (**)(_BYTE *__return_ptr))(*v736[138] + 16))(v705);
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v615 + 120) + 16))(v615 + 120, &v704);
  v616 = *(_QWORD *)v705;
  v704 = &off_24C9B2450;
  *(_QWORD *)v705 = 0;
  if (v616)
    (*(void (**)(uint64_t))(*(_QWORD *)v616 + 8))(v616);
  v617 = v736;
  v704 = &off_24C9B2380;
  (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v731 + 96) + 16))(v705);
  ((void (*)(_QWORD **, uint64_t (***)()))v617[141][2])(v617 + 141, &v704);
  v618 = *(_QWORD *)v705;
  v704 = &off_24C9B2380;
  *(_QWORD *)v705 = 0;
  if (v618)
    (*(void (**)(uint64_t))(*(_QWORD *)v618 + 8))(v618);
  v619 = v741;
  v620 = (_QWORD *)operator new();
  *v620 = &off_24C9BF9F0;
  v620[1] = &off_24C9BFA68;
  v621 = v620 + 1;
  v620[4] = v620 + 1;
  v704 = &off_24C9B2C18;
  v622 = (_QWORD *)operator new();
  *v622 = &off_24C9BF9F0;
  v623 = v622 + 1;
  v624 = v620[4];
  if (!v624)
    goto LABEL_878;
  if ((_QWORD *)v624 != v621)
  {
    v624 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v624 + 16))(v624, v623);
LABEL_878:
    v622[4] = v624;
    goto LABEL_880;
  }
  v622[4] = v623;
  (*(void (**)(_QWORD *))(*v621 + 24))(v621);
LABEL_880:
  *(_QWORD *)v705 = v622;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(v619 + 144) + 16))(v619 + 144, &v704);
  v625 = *(_QWORD *)v705;
  v704 = &off_24C9B2C18;
  *(_QWORD *)v705 = 0;
  if (v625)
    (*(void (**)(uint64_t))(*(_QWORD *)v625 + 8))(v625);
  (*(void (**)(_QWORD *))(*v620 + 8))(v620);
  v626 = operator new();
  v627 = *(_OWORD *)&v676[1];
  *(_QWORD *)(v626 + 584) = &off_24C9B23B8;
  *(_QWORD *)(v626 + 664) = &off_24C9B22B0;
  *v660 = v626;
  *(_QWORD *)(v626 + 96) = v677;
  *(_QWORD *)(v626 + 104) = &off_24C9B2EC8;
  *(_QWORD *)(v626 + 176) = v747;
  *(_QWORD *)(v626 + 184) = &off_24C9B2DF8;
  *(_BYTE *)(v626 + 23) = 15;
  strcpy((char *)v626, "CV3DHitTestNode");
  *(_QWORD *)(v626 + 24) = &off_24C9B2F98;
  *(_QWORD *)(v626 + 48) = *(_QWORD *)&v674[16];
  *(_OWORD *)(v626 + 32) = *(_OWORD *)v674;
  *(_OWORD *)(v626 + 56) = v675;
  memset(v674, 0, sizeof(v674));
  *(_QWORD *)(v626 + 72) = v676[0];
  v676[0] = 0;
  v675 = 0uLL;
  *(_OWORD *)(v626 + 80) = v627;
  v676[1] = 0;
  v676[2] = 0;
  v677 = 0;
  *(_OWORD *)(v626 + 112) = *(_OWORD *)&v744[8];
  *(_QWORD *)(v626 + 128) = *(_QWORD *)&v744[24];
  memset(&v744[8], 0, 24);
  *(_OWORD *)(v626 + 136) = v745;
  *(_QWORD *)(v626 + 152) = v746[0];
  v746[0] = 0;
  v745 = 0uLL;
  *(_OWORD *)(v626 + 160) = *(_OWORD *)&v746[1];
  v746[2] = 0;
  v746[1] = 0;
  v747 = 0;
  v628 = *(_OWORD *)&v760[8];
  *(_QWORD *)(v626 + 208) = *(_QWORD *)&v760[24];
  *(_OWORD *)(v626 + 192) = v628;
  memset(&v760[8], 0, 24);
  v629 = v761;
  *(_QWORD *)(v626 + 232) = v762[0];
  *(_OWORD *)(v626 + 216) = v629;
  v761 = 0uLL;
  v762[0] = 0;
  *(_OWORD *)(v626 + 240) = *(_OWORD *)&v762[1];
  v762[2] = 0;
  v762[1] = 0;
  v630 = v763;
  v763 = 0;
  *(_QWORD *)(v626 + 256) = v630;
  *(_QWORD *)(v626 + 264) = &off_24C9B2CC0;
  v631 = *(_OWORD *)&v754[8];
  *(_QWORD *)(v626 + 288) = *(_QWORD *)&v754[24];
  *(_OWORD *)(v626 + 272) = v631;
  memset(&v754[8], 0, 24);
  v632 = v755;
  *(_QWORD *)(v626 + 312) = v756[0];
  *(_OWORD *)(v626 + 296) = v632;
  v755 = 0uLL;
  v756[0] = 0;
  *(_OWORD *)(v626 + 320) = *(_OWORD *)&v756[1];
  v756[2] = 0;
  v756[1] = 0;
  v633 = v757;
  v757 = 0;
  *(_QWORD *)(v626 + 336) = v633;
  *(_QWORD *)(v626 + 344) = &off_24C9B2B18;
  v634 = *(_OWORD *)&v737[8];
  *(_QWORD *)(v626 + 368) = *(_QWORD *)&v737[24];
  *(_OWORD *)(v626 + 352) = v634;
  memset(&v737[8], 0, 24);
  v635 = v738;
  *(_QWORD *)(v626 + 392) = v739;
  *(_OWORD *)(v626 + 376) = v635;
  v738 = 0uLL;
  v739 = 0;
  *(_OWORD *)(v626 + 400) = v740;
  v740 = 0uLL;
  v636 = v741;
  v741 = 0;
  *(_QWORD *)(v626 + 416) = v636;
  *(_QWORD *)(v626 + 424) = &off_24C9B2970;
  v637 = *(_OWORD *)&v764[8];
  *(_QWORD *)(v626 + 448) = *(_QWORD *)&v764[24];
  *(_OWORD *)(v626 + 432) = v637;
  memset(&v764[8], 0, 24);
  v638 = *(_OWORD *)v765;
  *(_QWORD *)(v626 + 472) = *(_QWORD *)&v765[16];
  *(_OWORD *)(v626 + 456) = v638;
  memset(v765, 0, sizeof(v765));
  *(_OWORD *)(v626 + 480) = v766;
  v766 = 0uLL;
  v639 = v767;
  *(_QWORD *)&v767 = 0;
  *(_QWORD *)(v626 + 496) = v639;
  *(_QWORD *)(v626 + 504) = &off_24C9B24C0;
  v640 = *(_OWORD *)&__p[8];
  *(_QWORD *)(v626 + 528) = *(_QWORD *)&__p[24];
  *(_OWORD *)(v626 + 512) = v640;
  memset(&__p[8], 0, 24);
  v641 = v733;
  *(_QWORD *)(v626 + 552) = v734;
  *(_OWORD *)(v626 + 536) = v641;
  v733 = 0uLL;
  v734 = 0;
  *(_OWORD *)(v626 + 560) = v735;
  v735 = 0uLL;
  v642 = v736;
  v736 = 0;
  *(_QWORD *)(v626 + 576) = v642;
  v643 = *(_OWORD *)&v750[8];
  *(_QWORD *)(v626 + 608) = *(_QWORD *)&v750[24];
  *(_OWORD *)(v626 + 592) = v643;
  memset(&v750[8], 0, 24);
  v644 = v751;
  *(_QWORD *)(v626 + 632) = v752[0];
  *(_OWORD *)(v626 + 616) = v644;
  v751 = 0uLL;
  v752[0] = 0;
  *(_OWORD *)(v626 + 640) = *(_OWORD *)&v752[1];
  v752[2] = 0;
  v752[1] = 0;
  v645 = v753;
  v753 = 0;
  *(_QWORD *)(v626 + 656) = v645;
  v646 = *(__int128 *)((char *)v727 + 8);
  *(_QWORD *)(v626 + 688) = *((_QWORD *)&v727[1] + 1);
  *(_OWORD *)(v626 + 672) = v646;
  *((_QWORD *)&v727[0] + 1) = 0;
  v727[1] = 0uLL;
  v647 = v728;
  *(_QWORD *)(v626 + 712) = v729;
  *(_OWORD *)(v626 + 696) = v647;
  v728 = 0uLL;
  v729 = 0;
  *(_OWORD *)(v626 + 720) = v730;
  v730 = 0uLL;
  v648 = v731;
  v731 = 0;
  *(_QWORD *)(v626 + 736) = v648;
  sub_20E963580((uint64_t)v727);
  sub_20E96421C((uint64_t)__p);
  sub_20E966148((uint64_t)v764);
  sub_20E966BF8((uint64_t)v737);
  sub_20E968524((uint64_t)v744);
  if (v665)
  {
    v649 = (unint64_t *)&v665->__shared_owners_;
    do
      v650 = __ldaxr(v649);
    while (__stlxr(v650 - 1, v649));
    if (!v650)
    {
      ((void (*)(std::__shared_weak_count *))v665->__on_zero_shared)(v665);
      std::__shared_weak_count::__release_weak(v665);
    }
  }
  sub_20E963BF0((uint64_t)v750);
  if (v666)
  {
    v651 = (unint64_t *)&v666->__shared_owners_;
    do
      v652 = __ldaxr(v651);
    while (__stlxr(v652 - 1, v651));
    if (!v652)
    {
      ((void (*)(std::__shared_weak_count *))v666->__on_zero_shared)(v666);
      std::__shared_weak_count::__release_weak(v666);
    }
  }
  sub_20E967668((uint64_t)v754);
  if (v671)
  {
    v653 = (unint64_t *)&v671->__shared_owners_;
    do
      v654 = __ldaxr(v653);
    while (__stlxr(v654 - 1, v653));
    if (!v654)
    {
      ((void (*)(std::__shared_weak_count *))v671->__on_zero_shared)(v671);
      std::__shared_weak_count::__release_weak(v671);
    }
  }
  sub_20E967F98((uint64_t)v760);
  if (v672)
  {
    v655 = (unint64_t *)&v672->__shared_owners_;
    do
      v656 = __ldaxr(v655);
    while (__stlxr(v656 - 1, v655));
    if (!v656)
    {
      ((void (*)(std::__shared_weak_count *))v672->__on_zero_shared)(v672);
      std::__shared_weak_count::__release_weak(v672);
    }
  }
  sub_20E968AB0((uint64_t)&v673);
  v657 = v679;
  if (v679)
  {
    v658 = (unint64_t *)&v679->__shared_owners_;
    do
      v659 = __ldaxr(v658);
    while (__stlxr(v659 - 1, v658));
    if (!v659)
    {
      ((void (*)(std::__shared_weak_count *))v657->__on_zero_shared)(v657);
      std::__shared_weak_count::__release_weak(v657);
    }
  }
}

void sub_20E9FEC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_Unwind_Exception *exception_objecta,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  uint64_t v63;

  MEMORY[0x212BC6398](v63, 0x10A1C400AA0B987);
  (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  sub_20E963580((uint64_t)&STACK[0x380]);
  sub_20E96421C((uint64_t)&STACK[0x3D0]);
  sub_20E966148((uint64_t)&STACK[0x5E8]);
  sub_20E966BF8((uint64_t)&STACK[0x428]);
  sub_20E968524((uint64_t)&STACK[0x488]);
  sub_20E86665C((uint64_t)&a33);
  sub_20E963BF0((uint64_t)&STACK[0x4E8]);
  sub_20E86665C((uint64_t)&a37);
  sub_20E967668((uint64_t)&STACK[0x538]);
  sub_20E86665C((uint64_t)&a44);
  sub_20E967F98((uint64_t)&STACK[0x598]);
  sub_20E86665C((uint64_t)&a48);
  sub_20E968AB0((uint64_t)&a52);
  sub_20E86665C((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t ***sub_20EA0031C(uint64_t ***a1)
{
  uint64_t **v2;
  uint64_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      sub_2102175D4((uint64_t)v2, v3);
    MEMORY[0x212BC6398](v2, 0x20C4093837F09);
  }
  return a1;
}

void sub_20EA00374(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA00384(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA003B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20EA003C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA003EC(uint64_t result)
{
  uint64_t **v1;
  uint64_t *v2;

  v1 = *(uint64_t ***)(result + 24);
  if (v1)
  {
    v2 = *v1;
    *v1 = 0;
    if (v2)
      sub_2102175D4((uint64_t)v1, v2);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

uint64_t sub_20EA00440(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit11concurrency17NodeTaskSchedulerEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *sub_20EA004B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_20E966D70(v2 + 168);
    v3 = sub_20E96701C(v2);
    MEMORY[0x212BC6398](v3, 0x10B2C4059065CFELL);
  }
  return a1;
}

char ***sub_20EA00500(char ***a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  return a1;
}

uint64_t *sub_20EA005D4(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (a1[6])
  {
    v2 = a1 + 4;
    v3 = a1[4];
    v4 = (uint64_t *)a1[5];
    v5 = *v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    a1[6] = 0;
    if (v4 != a1 + 4)
    {
      do
      {
        v6 = (uint64_t *)v4[1];
        (*(void (**)(uint64_t *))v4[2])(v4 + 2);
        operator delete(v4);
        v4 = v6;
      }
      while (v6 != v2);
    }
  }
  if (a1[3])
  {
    v7 = a1[1];
    v8 = (uint64_t *)a1[2];
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    a1[3] = 0;
    if (v8 != a1 + 1)
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != a1 + 1);
    }
  }
  v11 = *a1;
  *a1 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_20EA006C8(uint64_t a1)
{
  sub_20EA02040(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA006EC(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *p_on_zero_shared;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7D00;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9B7D50;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    p_on_zero_shared = (unint64_t *)&v53->__on_zero_shared;
    do
      v55 = __ldxr(p_on_zero_shared);
    while (__stxr(v55 + 1, p_on_zero_shared));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9B7DD0;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EA00B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EA02254((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EA02254((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA00BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EA00BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA00C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA00C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA00C68(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA00C78(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA00C84(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA00C94(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *p_on_zero_shared;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 *v75;
  std::string *v76;
  std::runtime_error *exception;
  std::runtime_error *v78;
  __int128 v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::runtime_error v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  _QWORD *v87;
  __int128 *v88;
  _QWORD v89[3];
  std::string v90;
  std::string *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v86 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v86 + 1) = 45;
    v74 = (_QWORD *)a1[6];
    v73 = a1 + 6;
    v72 = v74;
    v75 = (__int128 *)*((unsigned __int8 *)v73 + 23);
    if ((char)v75 < 0)
      v75 = (__int128 *)v73[1];
    else
      v72 = v73;
    v87 = v72;
    v88 = v75;
    sub_20E8778D4((uint64_t)&v86, (uint64_t)v89, 0, 0, &v90);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v90;
    else
      v76 = (std::string *)v90.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v83, (const char *)v76);
    v83.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v78 = std::runtime_error::runtime_error(exception, &v83);
    v78->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v78, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7E50;
    v6[1].__vftable = *a3;
    v82 = v6;
    v80 = &v6[1].__vftable;
    v81 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7D00;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 16);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v84 = v9 + 1;
    v85 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v86 = v19;
    *((_QWORD *)&v86 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v86 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v86 = v47;
            *((_QWORD *)&v86 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v86 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9B7EA0;
        *(_OWORD *)(v52 + 8) = v86;
        v86 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v87 = 0;
        v88 = 0;
        *((_QWORD *)v52 + 5) = v80;
        *((_QWORD *)v52 + 6) = v81;
        v89[0] = 0;
        v89[1] = 0;
        v91 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v90);
        v53 = v91;
        if (v91 == &v90)
        {
          v54 = 4;
          v53 = &v90;
        }
        else
        {
          if (!v91)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v85)
        {
          v55 = &v85->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (v82)
        {
          v57 = (unint64_t *)&v82->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  v79 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v79 = v38;
      *((_QWORD *)&v79 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v79 = 0uLL;
    }
  }
  v60 = *a2;
  v59 = a2[1];
  if (v59)
  {
    p_on_zero_shared = (unint64_t *)&v59->__on_zero_shared;
    do
      v62 = __ldxr(p_on_zero_shared);
    while (__stxr(v62 + 1, p_on_zero_shared));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &off_24C9B7E50;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9B7F20;
  *(_OWORD *)(v64 + 8) = v79;
  *((_QWORD *)v64 + 3) = v60;
  *((_QWORD *)v64 + 4) = v59;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v88 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v86);
  v70 = v88;
  if (v88 == &v86)
  {
    v71 = 4;
    v70 = &v86;
  }
  else
  {
    if (!v88)
      return;
    v71 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 8 * v71))(v70, v65, v66, v67, v68, v69);
}

void sub_20EA012EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  std::__assoc_sub_state **v24;
  uint64_t v25;
  std::__assoc_sub_state *v26;
  std::exception_ptr v27;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v26 = *v24;
    if (*v24)
    {
      std::exception_ptr::exception_ptr(&a24, &a21);
      v27.__ptr_ = &a24;
      std::__assoc_sub_state::set_exception(v26, v27);
      std::exception_ptr::~exception_ptr(&a24);
      std::exception_ptr::~exception_ptr(&a21);
      std::runtime_error::~runtime_error(&a20);
      if (*(char *)(v25 - 81) < 0)
        operator delete(*(void **)(v25 - 104));
      JUMPOUT(0x20EA01200);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA01360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,std::exception_ptr a24)
{
  uint64_t v24;

  std::exception_ptr::~exception_ptr(&a21);
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v24 - 81) < 0)
  {
    operator delete(*(void **)(v24 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA013B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
    {
      sub_20EA031A8(&a9);
      _Unwind_Resume(a1);
    }
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
  sub_20EA031A8(&a9);
  _Unwind_Resume(a1);
}

void sub_20EA01408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;

  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA01438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA014D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA014F4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA01568(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9B7FA0;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B28D0;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EA01698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA0170C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9B8020;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B2C18;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EA0183C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA018B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B80E8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA01AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA01B90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B8168;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA01DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA01E70(uint64_t a1)
{
  return sub_20EA02040(a1 - 16);
}

void sub_20EA01E78(uint64_t a1)
{
  sub_20EA02040(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA01EA0(uint64_t a1, uint64_t a2)
{
  return sub_20EA01568((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA01EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA018B0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA01EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA01B90((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA01EB8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA01EC0(uint64_t a1)
{
  return sub_20EA02040(a1 - 24);
}

void sub_20EA01EC8(uint64_t a1)
{
  sub_20EA02040(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA01EF0(uint64_t a1, uint64_t a2)
{
  return sub_20EA0170C((_QWORD *)(a1 - 24), a2);
}

uint64_t sub_20EA01EF8(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA01F00(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA01F68(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA01FD0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  float32x2_t *v7;
  std::__shared_weak_count *v8;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v7 = *(float32x2_t **)a2;
  v8 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  sub_20EA55FAC(v3, &v7, a3);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

void sub_20EA02028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA02040(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9B7AF0;
  *(_QWORD *)(a1 + 16) = &unk_24C9B7B68;
  *(_QWORD *)(a1 + 24) = &unk_24C9B7BA8;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = *(uint64_t **)(a1 + 128);
    v11 = *v10;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v9 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v10 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        (*(void (**)(uint64_t *))v10[2])(v10 + 2);
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

uint64_t sub_20EA02254(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

std::mutex ***sub_20EA0228C(std::mutex ***a1)
{
  std::mutex **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::unlock(*v2);
    MEMORY[0x212BC6398](v2, 0x20C4093837F09);
  }
  return a1;
}

void sub_20EA022D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA022E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA02318(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *sub_20EA0232C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B7D50;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA02370(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B7D50;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA023C4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B7D50;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA02434(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B7D50;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA02484(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA024C0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA024F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EA0281C((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20EA02D48(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA026C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20EA02D48(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA027A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPos"
                     "eEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE25EnqueueMessageAndDispatch"
                     "IZNKSG_4SendERKSA_EUlT_T0_E_EEvSJ_SK_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStru"
                                "ctureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE25Enq"
                                "ueueMessageAndDispatchIZNKSG_4SendERKSA_EUlT_T0_E_EEvSJ_SK_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_4SendERKSA_EUlT_T0_E_EEvSJ_SK_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_4SendERKSA_EUlT_T0_E_EEvSJ_SK_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA02810()
{
  return &unk_24C9B7DB0;
}

void sub_20EA0281C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  uint64_t *j;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  std::exception_ptr v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&v19, v6, a2);
  for (j = (uint64_t *)a1[2]; j != a1 + 1; j = (uint64_t *)j[1])
    (*(void (**)(uint64_t *, uint64_t *))(j[2] + 16))(j + 2, &v19);
  if (*((_BYTE *)a3 + 8))
  {
    v13 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v13 + 24));
    if ((*(_BYTE *)(v13 + 136) & 1) != 0
      || (v18.__ptr_ = 0, v14 = *(_QWORD *)(v13 + 16), std::exception_ptr::~exception_ptr(&v18), v14))
    {
      sub_20E96CE78(2u);
    }
    v15 = v20;
    *(_QWORD *)(v13 + 144) = v19;
    *(_QWORD *)(v13 + 152) = v15;
    if (v15)
    {
      p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
      do
        v17 = __ldxr(p_shared_weak_owners);
      while (__stxr(v17 + 1, p_shared_weak_owners));
    }
    *(_DWORD *)(v13 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v13 + 88));
    std::mutex::unlock((std::mutex *)(v13 + 24));
  }
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
}

void sub_20EA02AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, std::exception_ptr a17, uint64_t a18, std::__shared_weak_count *a19)
{
  uint64_t v19;
  uint64_t v20;
  std::mutex *v21;
  void *v24;
  uint64_t v25;
  uint64_t i;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  std::mutex::unlock(v21);
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a2 == 2)
  {
    v24 = __cxa_begin_catch(a1);
    if (*(_QWORD *)(v20 + 48)
      || !sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 186, (uint64_t)"!error_downstream_.empty()", 26, (uint64_t)"It is mandated that all errors are handled and enforced by a processor. Add an error handler with AddErrorHandler()", 115, (void (*)(void **))sub_21023DDB0))
    {
      v25 = v20 + 32;
      for (i = *(_QWORD *)(v20 + 40); i != v25; i = *(_QWORD *)(i + 8))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)(i + 16) + 16))(i + 16, v24);
      if (*(_BYTE *)(v19 + 8))
      {
        std::current_exception();
        sub_20EA02CE8(*(std::__assoc_sub_state **)v19, &a17);
        std::exception_ptr::~exception_ptr(&a17);
      }
      __cxa_end_catch();
      JUMPOUT(0x20EA029F4);
    }
    abort();
  }
  if (a2 == 1)
  {
    v27 = (uint64_t *)__cxa_begin_catch(a1);
    v28 = *v27;
    a10 = *(_QWORD *)(*(_QWORD *)(*v27 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v28 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v29 = (uint64_t *)&a11;
    else
      v29 = a11;
    if ((a16 & 0x80u) == 0)
      v30 = a16;
    else
      v30 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v29, v30, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA02CBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA02CDCLL);
}

void sub_20EA02CE8(std::__assoc_sub_state *a1, const std::exception_ptr *a2)
{
  std::exception_ptr v3;
  std::exception_ptr v4;

  if (!a1)
    sub_20E96CE78(3u);
  std::exception_ptr::exception_ptr(&v4, a2);
  v3.__ptr_ = &v4;
  std::__assoc_sub_state::set_exception(a1, v3);
  std::exception_ptr::~exception_ptr(&v4);
}

void sub_20EA02D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA02D48(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EA02E34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EA02D90);
}

_QWORD *sub_20EA02E70(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B7DD0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA02EB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B7DD0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA02F08(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B7DD0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA02F78(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B7DD0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA02FC8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA03004(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA0303C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EA0281C((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20EA02D48(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA030E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20EA02D48(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA03130(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPos"
                     "eEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStru"
                                "ctureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA0319C()
{
  return &unk_24C9B7E30;
}

_QWORD *sub_20EA031A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[3];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[3];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA03224(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA03234(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B7E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EA03264(uint64_t a1)
{
  return sub_20EA02D48((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EA03270(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B7EA0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA032F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B7EA0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA03390(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B7EA0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA03420(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B7EA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA03490(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA03510(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA0358C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA0281C(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20EA02D48((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA03868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA03894(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EA036A0);
    JUMPOUT(0x20EA03670);
  }
  sub_20E96CE78(3u);
}

void sub_20EA038F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA0391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20EA02D48(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA03A08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPos"
                     "eEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE25EnqueueMessageAndDispatch"
                     "IZNKSG_7ProcessERKSA_NS4_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStru"
                                "ctureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE25Enq"
                                "ueueMessageAndDispatchIZNKSG_7ProcessERKSA_NS4_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_7ProcessERKSA_NS4_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE25EnqueueMessageAndDispatchIZNKSG_7ProcessERKSA_NS4_7promiseISF_EEEUlT_T0_E_EEvSJ_SM_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA03A74()
{
  return &unk_24C9B7F00;
}

_QWORD *sub_20EA03A80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B7F20;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA03B08(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B7F20;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA03BA0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B7F20;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA03C30(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B7F20;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA03CA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA03D20(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA03D9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA0281C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20EA02D48((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA03EAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EA03F24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EA03F58);
  JUMPOUT(0x20EA03F88);
}

uint64_t sub_20EA03F90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPos"
                     "eEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE7ProcessERKSA_NS4_7promiseISF_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStru"
                                "ctureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE7Proc"
                                "essERKSA_NS4_7promiseISF_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE7ProcessERKSA_NS4_7promiseISF_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE7ProcessERKSA_NS4_7promiseISF_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA03FFC()
{
  return &unk_24C9B7F80;
}

_QWORD *sub_20EA04008(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B7FA0;
  v2 = a1[4];
  a1[3] = &off_24C9B28D0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA04060(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B7FA0;
  v2 = a1[4];
  a1[3] = &off_24C9B28D0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA040C8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9B7FA0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B28D0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EA04140(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA04160(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9B7FA0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B28D0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EA041C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA041E0(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B28D0;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA04230(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B28D0;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA0427C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B28D0;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA04330(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA0436C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPose"
                     "EEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE9SubscribeENS1_12ChannelInputISF_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStruc"
                                "tureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE9Subsc"
                                "ribeENS1_12ChannelInputISF_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE9SubscribeENS1_12ChannelInputISF_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE9SubscribeENS1_12ChannelInputISF_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA043D8()
{
  return &unk_24C9B8000;
}

_QWORD *sub_20EA043E4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B8020;
  v2 = a1[4];
  a1[3] = &off_24C9B2C18;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA0443C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B8020;
  v2 = a1[4];
  a1[3] = &off_24C9B2C18;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA044A4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9B8020;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B2C18;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EA0451C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA0453C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9B8020;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B2C18;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EA045A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA045BC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B2C18;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA0460C(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B2C18;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA04658(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B2C18;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 120);
        v8 = (_QWORD *)(v5 + 120);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA0470C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA04748(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPose"
                     "EEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE15AddErrorHandlerENS1_12Chan"
                     "nelInputIiEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStruc"
                                "tureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE15AddE"
                                "rrorHandlerENS1_12ChannelInputIiEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE15AddErrorHandlerENS1_12ChannelInputIiEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE15AddErrorHandlerENS1_12ChannelInputIiEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA047B4()
{
  return &unk_24C9B8080;
}

void sub_20EA047C0(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_20EA0480C(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA0486C(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

_QWORD *sub_20EA048AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B80E8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA048E4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B80E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA0492C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B80E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA04984(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B80E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA049BC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA049CC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA049F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EA04B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA04BE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPos"
                     "eEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStru"
                                "ctureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE16Out"
                                "putHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA04C50()
{
  return &unk_24C9B8148;
}

void sub_20EA04C5C(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_20E96CE78(2u);
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_20EA04D00(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20EA04D14(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void sub_20EA04DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA04DE8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  std::logic_error *exception;
  std::logic_error *v9;
  std::logic_error v10;
  std::logic_error v11;
  std::exception_ptr v12;

  v2 = *a1;
  if (!v2)
    return a1;
  if ((*(_BYTE *)(v2 + 136) & 1) == 0)
  {
    v12.__ptr_ = 0;
    v3 = *(_QWORD *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v12);
    v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v7 = std::future_category();
      MEMORY[0x212BC5AF8](&v10, 4, v7);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      v9 = std::logic_error::logic_error(exception, &v10);
      v9->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB810] + 16);
      v9[1] = v11;
      __cxa_throw(v9, MEMORY[0x24BEDB6E0], (void (*)(void *))MEMORY[0x24BEDAD80]);
    }
  }
  v4 = (unint64_t *)(v2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 1, v4));
  if (v5)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return a1;
}

void sub_20EA04ED4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__assoc_sub_state *a10, std::logic_error a11)
{
  uint64_t v11;
  std::exception_ptr v12;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v12.__ptr_ = (void *)(v11 - 32);
  std::__assoc_sub_state::set_exception(a10, v12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 32));
  std::logic_error::~logic_error(&a11);
  JUMPOUT(0x20EA04E30);
}

_QWORD *sub_20EA04F10(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B8168;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA04F48(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B8168;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA04F90(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B8168;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA04FE8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B8168;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA05020(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA05030(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA0505C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 136);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 120;
        v11 = *(_QWORD *)(v5 + 128);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EA051D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA05248(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPos"
                     "eEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStru"
                                "ctureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE15Err"
                                "orHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3vio8metadata21VIO3DStructureAndPoseEEENS5_IKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEiSF_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA052B4()
{
  return &unk_24C9B81C8;
}

void sub_20EA052C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA052E8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA05300(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3vio8metadata21VIO3D"
                     "StructureAndPoseEEENS6_IKNS1_3acv16surfacedetection23WindowAndMap3DStructureEEEiSG_Lb0EEEE27__share"
                     "d_ptr_default_deleteISH_SH_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3vio8meta"
                                "data21VIO3DStructureAndPoseEEENS6_IKNS1_3acv16surfacedetection23WindowAndMap3DStructureE"
                                "EEiSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3vio8metadata21VIO3DStructureAndPoseEEENS6_IKNS1_3acv16surfacedetection23WindowAndMap3DStructureEEEiSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3vio8metadata21VIO3DStructureAndPoseEEENS6_IKNS1_3acv16surfacedetection23WindowAndMap3DStructureEEEiSG_Lb0EEEE27__shared_ptr_default_deleteISH_SH_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA05370(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA0539C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA053D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B8238;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA05440(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA054D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA054E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA05574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA05588(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA0564C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA05660(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA05724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA05738(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA057DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA057F0(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (a1[6])
  {
    v2 = a1 + 4;
    v4 = a1[4];
    v3 = (uint64_t *)a1[5];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    a1[6] = 0;
    if (v3 != a1 + 4)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (a1[3])
  {
    v8 = a1[1];
    v7 = (uint64_t *)a1[2];
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    a1[3] = 0;
    if (v7 != a1 + 1)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != a1 + 1);
    }
  }
  v11 = *a1;
  *a1 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_20EA058BC(uint64_t a1)
{
  sub_20EA0739C(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA058E0(_QWORD *a1, uint64_t *a2)
{
  char *v4;
  unint64_t *v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *p_shared_weak_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void *v67;
  char *v68;
  std::__shared_weak_count *v69[2];
  uint64_t v70;
  void *__p[2];
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  uint64_t v84;
  __int128 *v85;
  _BYTE v86[24];
  _BYTE *v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v4 = (char *)operator new(0xB8uLL);
    *((_QWORD *)v4 + 1) = 0;
    v5 = (unint64_t *)(v4 + 8);
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = &off_24C9B84A0;
    *((_QWORD *)v4 + 3) = *a2;
    v6 = v4 + 24;
    sub_20E969038((_QWORD *)v4 + 4, a2 + 1);
    v7 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(v4 + 120) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(v4 + 136) = v7;
    v8 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v4 + 152) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(v4 + 168) = v8;
    v9 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v4 + 56) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v4 + 72) = v9;
    v10 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v4 + 88) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v4 + 104) = v10;
    v11 = (unint64_t *)(v4 + 16);
    v81 = v4 + 24;
    v82 = (std::__shared_weak_count *)v4;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = (uint64_t *)a1[18];
    v14 = (_QWORD *)operator new();
    *v14 = v13 + 7;
    std::mutex::lock((std::mutex *)(v13 + 7));
    *(_QWORD *)&v83 = v14;
    *((_QWORD *)&v83 + 1) = v13;
    if (!*((_BYTE *)v13 + 48))
      sub_20E866B34();
    v15 = v13[4];
    v16 = *v13;
    v17 = (_QWORD *)(*v13 + 16 * v15);
    do
      v18 = __ldxr(v5);
    while (__stxr(v18 + 1, v5));
    *v17 = v6;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v4;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v13[1] - *v13) >> 4;
    v24 = v13[5];
    v25 = v13[4] + 1;
    if (v25 >= v23)
      v26 = (v13[1] - *v13) >> 4;
    else
      v26 = 0;
    v13[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v13[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v13[3] = v27 - v23;
      v28 = (std::mutex **)v83;
      if (!(_QWORD)v83)
      {
LABEL_33:
        v38 = (uint64_t **)a1[9];
        v83 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(p_shared_weak_owners);
            while (__stxr(v44 + 1, p_shared_weak_owners));
            *(_QWORD *)&v83 = v42;
            *((_QWORD *)&v83 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v83 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9B84F0;
        *(_OWORD *)(v47 + 8) = v83;
        v83 = 0uLL;
        *((_QWORD *)v47 + 3) = v6;
        *((_QWORD *)v47 + 4) = v4;
        v84 = 0;
        v85 = 0;
        v87 = v47;
        sub_210216F3C(*v38, (uint64_t)v86);
        v48 = v87;
        if (v87 == v86)
        {
          v49 = 4;
          v48 = v86;
        }
        else
        {
          if (!v87)
            goto LABEL_47;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_47:
        if (v82)
        {
          v50 = &v82->__shared_owners_;
          do
            v51 = __ldaxr((unint64_t *)v50);
          while (__stlxr(v51 - 1, (unint64_t *)v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        return;
      }
    }
    else
    {
      v13[5] = v24 + 1;
      v28 = (std::mutex **)v83;
      if (!(_QWORD)v83)
        goto LABEL_33;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_33;
  }
  v29 = (uint64_t **)a1[9];
  *(_OWORD *)v69 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = (std::__shared_weak_count *)a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v69[0] = v33;
      v69[1] = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      *(_OWORD *)v69 = 0uLL;
    }
  }
  v70 = *a2;
  sub_20E969038(__p, a2 + 1);
  v52 = *((_OWORD *)a2 + 7);
  v77 = *((_OWORD *)a2 + 6);
  v78 = v52;
  v53 = *((_OWORD *)a2 + 9);
  v79 = *((_OWORD *)a2 + 8);
  v80 = v53;
  v54 = *((_OWORD *)a2 + 3);
  v73 = *((_OWORD *)a2 + 2);
  v74 = v54;
  v55 = *((_OWORD *)a2 + 5);
  v75 = *((_OWORD *)a2 + 4);
  v76 = v55;
  v85 = 0;
  v56 = (char *)operator new(0xB8uLL);
  *(_QWORD *)v56 = &off_24C9B8570;
  *(_OWORD *)(v56 + 8) = *(_OWORD *)v69;
  *((_QWORD *)v56 + 3) = v70;
  *((_OWORD *)v56 + 2) = *(_OWORD *)__p;
  *((_QWORD *)v56 + 6) = v72;
  __p[1] = 0;
  v72 = 0;
  __p[0] = 0;
  v57 = *((_OWORD *)a2 + 2);
  v58 = *((_OWORD *)a2 + 3);
  v59 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v56 + 104) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v56 + 88) = v59;
  *(_OWORD *)(v56 + 72) = v58;
  *(_OWORD *)(v56 + 56) = v57;
  v60 = *((_OWORD *)a2 + 6);
  v61 = *((_OWORD *)a2 + 7);
  v62 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(v56 + 168) = *((_OWORD *)a2 + 9);
  *(_OWORD *)(v56 + 152) = v62;
  *(_OWORD *)(v56 + 136) = v61;
  *(_OWORD *)(v56 + 120) = v60;
  v85 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v83);
  v63 = v85;
  if (v85 == &v83)
  {
    v64 = 4;
    v63 = &v83;
  }
  else
  {
    if (!v85)
      goto LABEL_58;
    v64 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v63 + 8 * v64))(v63);
LABEL_58:
  v65 = (char *)__p[0];
  if (__p[0])
  {
    v66 = (char *)__p[1];
    v67 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((_QWORD *)v66 - 13))
        {
          v68 = (char *)*((_QWORD *)v66 - 15);
          if (v66 - 96 != v68)
            operator delete(v68);
        }
        v66 -= 120;
      }
      while (v66 != v65);
      v67 = __p[0];
    }
    __p[1] = v65;
    operator delete(v67);
  }
}

void sub_20EA05E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;

  v12 = *(_QWORD **)(v10 - 120);
  if (v12 == v9)
  {
    v13 = 4;
    v12 = (_QWORD *)(v10 - 144);
  }
  else
  {
    if (!v12)
    {
      sub_20EA07588(&a9);
      _Unwind_Resume(a1);
    }
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
  sub_20EA07588(&a9);
  _Unwind_Resume(a1);
}

void sub_20EA05E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA05F74(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA05F84(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA05F90(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA05FA0(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  char *v54;
  std::string *v55;
  uint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  char *v81;
  void *v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  __int128 *v87;
  std::string *v88;
  std::runtime_error *exception;
  std::runtime_error *v90;
  std::__shared_weak_count *v91[2];
  uint64_t v92;
  void *__p[2];
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _QWORD *v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  std::__shared_weak_count *v106;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;
  std::runtime_error v109;
  char *v110;
  std::__shared_weak_count *v111;
  __int128 v112;
  _QWORD *v113;
  __int128 *v114;
  _QWORD v115[3];
  std::string v116;
  std::string *v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v112 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v112 + 1) = 45;
    v86 = (_QWORD *)a1[6];
    v85 = a1 + 6;
    v84 = v86;
    v87 = (__int128 *)*((unsigned __int8 *)v85 + 23);
    if ((char)v87 < 0)
      v87 = (__int128 *)v85[1];
    else
      v84 = v85;
    v113 = v84;
    v114 = v87;
    sub_20E8778D4((uint64_t)&v112, (uint64_t)v115, 0, 0, &v116);
    if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v88 = &v116;
    else
      v88 = (std::string *)v116.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v109, (const char *)v88);
    v109.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v90 = std::runtime_error::runtime_error(exception, &v109);
    v90->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v90, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v107 = v6 + 1;
    v108 = v6;
    v105 = v6 + 1;
    v106 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (char *)operator new(0xB8uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_24C9B84A0;
    *((_QWORD *)v9 + 3) = *a2;
    v11 = v9 + 24;
    sub_20E969038((_QWORD *)v9 + 4, a2 + 1);
    v12 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(v9 + 120) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(v9 + 136) = v12;
    v13 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v9 + 152) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(v9 + 168) = v13;
    v14 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v9 + 56) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v9 + 72) = v14;
    v15 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v9 + 88) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v9 + 104) = v15;
    v16 = (unint64_t *)(v9 + 16);
    v110 = v9 + 24;
    v111 = (std::__shared_weak_count *)v9;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v112 = v19;
    *((_QWORD *)&v112 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (_QWORD *)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v10);
    while (__stxr(v23 + 1, v10));
    *v22 = v11;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v9;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v112;
      if (!(_QWORD)v112)
      {
LABEL_37:
        v43 = (uint64_t **)a1[9];
        v112 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(p_shared_weak_owners);
            while (__stxr(v49 + 1, p_shared_weak_owners));
            *(_QWORD *)&v112 = v47;
            *((_QWORD *)&v112 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v112 = 0uLL;
          }
        }
        v52 = v105;
        v53 = v106;
        v105 = 0;
        v106 = 0;
        v54 = (char *)operator new(0x38uLL);
        *(_QWORD *)v54 = &off_24C9B8640;
        *(_OWORD *)(v54 + 8) = v112;
        v112 = 0uLL;
        *((_QWORD *)v54 + 3) = v11;
        *((_QWORD *)v54 + 4) = v9;
        v113 = 0;
        v114 = 0;
        *((_QWORD *)v54 + 5) = v52;
        *((_QWORD *)v54 + 6) = v53;
        v115[0] = 0;
        v115[1] = 0;
        v117 = (std::string *)v54;
        sub_210216F3C(*v43, (uint64_t)&v116);
        v55 = v117;
        if (v117 == &v116)
        {
          v56 = 4;
          v55 = &v116;
        }
        else
        {
          if (!v117)
            goto LABEL_51;
          v56 = 5;
        }
        (*(void (**)(void))(v55->__r_.__value_.__r.__words[0] + 8 * v56))();
LABEL_51:
        if (v111)
        {
          v57 = &v111->__shared_owners_;
          do
            v58 = __ldaxr((unint64_t *)v57);
          while (__stlxr(v58 - 1, (unint64_t *)v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        if (v106)
        {
          v59 = &v106->__shared_owners_;
          do
            v60 = __ldaxr((unint64_t *)v59);
          while (__stlxr(v60 - 1, (unint64_t *)v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        if (v108)
        {
          v61 = &v108->__shared_owners_;
          do
            v62 = __ldaxr((unint64_t *)v61);
          while (__stlxr(v62 - 1, (unint64_t *)v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v112;
      if (!(_QWORD)v112)
        goto LABEL_37;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_37;
  }
  v34 = (uint64_t **)a1[9];
  *(_OWORD *)v91 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = (std::__shared_weak_count *)a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      v91[0] = v38;
      v91[1] = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      *(_OWORD *)v91 = 0uLL;
    }
  }
  v92 = *a2;
  sub_20E969038(__p, a2 + 1);
  v63 = *((_OWORD *)a2 + 7);
  v99 = *((_OWORD *)a2 + 6);
  v100 = v63;
  v64 = *((_OWORD *)a2 + 9);
  v101 = *((_OWORD *)a2 + 8);
  v102 = v64;
  v65 = *((_OWORD *)a2 + 3);
  v95 = *((_OWORD *)a2 + 2);
  v96 = v65;
  v66 = *((_OWORD *)a2 + 5);
  v97 = *((_OWORD *)a2 + 4);
  v98 = v66;
  v67 = (std::__shared_weak_count *)operator new(0x20uLL);
  v67->__shared_owners_ = 0;
  v67->__shared_weak_owners_ = 0;
  v67->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
  v67[1].__vftable = *a3;
  *a3 = 0;
  v103 = &v67[1].__vftable;
  v104 = v67;
  v114 = 0;
  v68 = (char *)operator new(0xC8uLL);
  *(_QWORD *)v68 = &off_24C9B86C0;
  *(_OWORD *)(v68 + 8) = *(_OWORD *)v91;
  *((_QWORD *)v68 + 3) = v92;
  *((_OWORD *)v68 + 2) = *(_OWORD *)__p;
  *((_QWORD *)v68 + 6) = v94;
  __p[1] = 0;
  v94 = 0;
  __p[0] = 0;
  v69 = v95;
  v70 = v96;
  v71 = v97;
  *(_OWORD *)(v68 + 104) = v98;
  *(_OWORD *)(v68 + 88) = v71;
  *(_OWORD *)(v68 + 72) = v70;
  *(_OWORD *)(v68 + 56) = v69;
  v72 = v99;
  v73 = v100;
  v74 = v101;
  *(_OWORD *)(v68 + 168) = v102;
  *(_OWORD *)(v68 + 152) = v74;
  *(_OWORD *)(v68 + 136) = v73;
  *(_OWORD *)(v68 + 120) = v72;
  *((_QWORD *)v68 + 23) = v67 + 1;
  *((_QWORD *)v68 + 24) = v67;
  v103 = 0;
  v104 = 0;
  v114 = (__int128 *)v68;
  sub_210216F3C(*v34, (uint64_t)&v112);
  v75 = v114;
  if (v114 == &v112)
  {
    v76 = 4;
    v75 = &v112;
  }
  else
  {
    if (!v114)
      goto LABEL_72;
    v76 = 5;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v75 + 8 * v76))(v75);
LABEL_72:
  v77 = v104;
  if (v104)
  {
    v78 = (unint64_t *)&v104->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = (char *)__p[0];
  if (__p[0])
  {
    v81 = (char *)__p[1];
    v82 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((_QWORD *)v81 - 13))
        {
          v83 = (char *)*((_QWORD *)v81 - 15);
          if (v81 - 96 != v83)
            operator delete(v83);
        }
        v81 -= 120;
      }
      while (v81 != v80);
      v82 = __p[0];
    }
    __p[1] = v80;
    operator delete(v82);
  }
}

void sub_20EA0671C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::promise<void> *v10;
  uint64_t v11;
  std::exception_ptr v12;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v12.__ptr_ = (void *)(v11 - 184);
    std::promise<void>::set_exception(v10, v12);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v11 - 184));
    std::runtime_error::~runtime_error((std::runtime_error *)(v11 - 200));
    if (*(char *)(v11 - 81) < 0)
      operator delete(*(void **)(v11 - 104));
    JUMPOUT(0x20EA06630);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA06834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v39;
  uint64_t v40;

  v39 = *(_QWORD **)(v37 - 80);
  if (v39 == v36)
  {
    v40 = 4;
    v39 = (_QWORD *)(v37 - 104);
  }
  else
  {
    if (!v39)
      goto LABEL_6;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_6:
  sub_20EA031A8((_QWORD *)(v37 - 160));
  sub_20E86665C(v37 - 176);
  sub_20E86665C((uint64_t)&a34);
  sub_20E86665C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20EA068D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  std::__shared_weak_count *v36;
  void *v38;

  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v38);
  sub_20E86665C((uint64_t)&a34);
  sub_20E86665C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20EA068FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  sub_20E86665C((uint64_t)&a34);
  sub_20E86665C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20EA06918(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA0698C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9B8740;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA06A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA06B00(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9B87C0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA06C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA06C74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B8840;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA06E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA06F54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B88C0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA0716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA07234(uint64_t a1)
{
  return sub_20EA0739C(a1 - 16);
}

void sub_20EA0723C(uint64_t a1)
{
  sub_20EA0739C(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA07264(uint64_t a1)
{
  return sub_20EA0698C((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EA0726C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA06C74((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA07274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA06F54((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA0727C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA07284(uint64_t a1)
{
  return sub_20EA0739C(a1 - 24);
}

void sub_20EA0728C(uint64_t a1)
{
  sub_20EA0739C(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA072B4(uint64_t a1)
{
  return sub_20EA06B00((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA072BC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA072C4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA0732C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA07394(uint64_t a1, uint64_t a2)
{
  sub_20EA58984(*(_QWORD **)(a1 + 8), a2);
}

uint64_t sub_20EA0739C(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9B82B0;
  *(_QWORD *)(a1 + 16) = &unk_24C9B8328;
  *(_QWORD *)(a1 + 24) = &unk_24C9B8368;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

_QWORD *sub_20EA07588(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = a1[3];
  if (v2)
  {
    v3 = a1[4];
    v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA07610(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B84A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA07620(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B84A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA07650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(void **)(a1 + 32);
    if (v3 == v1)
    {
      *(_QWORD *)(a1 + 40) = v1;
      operator delete(v4);
    }
    else
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v1);
      v6 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 40) = v1;
      operator delete(v6);
    }
  }
}

_QWORD *sub_20EA076E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B84F0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA0772C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B84F0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA07780(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B84F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA077F0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B84F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA07840(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA0787C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA078B4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EA07BD8((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA07A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA07B60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleE"
                     "vvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16Jasper"
                                "DataBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKS6_EUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA07BCC()
{
  return &unk_24C9B8550;
}

void sub_20EA07BD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EA07C70()
{
  __break(1u);
}

void sub_20EA07D1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA07D3CLL);
}

_QWORD *sub_20EA07D48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B8570;
  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA07DDC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B8570;
  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA07E80(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0xB8uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9B8570;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = *(_QWORD *)(a1 + 24);
  sub_20E969038(v2 + 4, (uint64_t *)(a1 + 32));
  *(_OWORD *)(v3 + 15) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v3 + 17) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v3 + 19) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v3 + 21) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v3 + 7) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v3 + 9) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v3 + 11) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v3 + 13) = *(_OWORD *)(a1 + 104);
  return v3;
}

void sub_20EA07F2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20EA07F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9B8570;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  sub_20E969038((_QWORD *)(a2 + 32), (uint64_t *)(a1 + 32));
  v8 = *(_OWORD *)(a1 + 56);
  v9 = *(_OWORD *)(a1 + 72);
  v10 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v10;
  *(_OWORD *)(a2 + 72) = v9;
  *(_OWORD *)(a2 + 56) = v8;
  result = *(__n128 *)(a1 + 120);
  v12 = *(_OWORD *)(a1 + 136);
  v13 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 152) = v13;
  *(_OWORD *)(a2 + 136) = v12;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

void sub_20EA07FEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA08004(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA08094(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v2 = __p[4];
  if (v2)
  {
    v3 = __p[5];
    v4 = (void *)__p[4];
    if (v3 != v2)
    {
      do
      {
        if (*(_QWORD *)(v3 - 104))
        {
          v5 = *(void **)(v3 - 120);
          if ((void *)(v3 - 96) != v5)
            operator delete(v5);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      v4 = (void *)__p[4];
    }
    __p[5] = v2;
    operator delete(v4);
  }
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA0811C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EA07BD8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA081C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA08210(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleE"
                     "vvvLb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16Jasper"
                                "DataBundleEvvvLb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA0827C()
{
  return &unk_24C9B85D0;
}

_QWORD *sub_20EA08288(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[23];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[3];
    if (!v5)
      goto LABEL_14;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[3];
    if (!v5)
      goto LABEL_14;
  }
  v6 = (char *)a1[4];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((_QWORD *)v6 - 13))
      {
        v8 = (char *)*((_QWORD *)v6 - 15);
        if (v6 - 96 != v8)
          operator delete(v8);
      }
      v6 -= 120;
    }
    while (v6 != v5);
    v7 = (char *)a1[3];
  }
  a1[4] = v5;
  operator delete(v7);
LABEL_14:
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA08354(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA08368(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA0839C()
{
  JUMPOUT(0x212BC623CLL);
}

_QWORD *sub_20EA083A8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B8640;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA08430(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B8640;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA084C8(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B8640;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA08558(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B8640;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA085C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA08648(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA086C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA07BD8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA08978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA08AD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleE"
                     "vvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16Jasper"
                                "DataBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEU"
                                "lT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKS6_NSt3__17promiseIvEEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA08B3C()
{
  return &unk_24C9B86A0;
}

_QWORD *sub_20EA08B48(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24C9B86C0;
  v2 = (std::__shared_weak_count *)a1[24];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[4];
    if (!v5)
      goto LABEL_14;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[4];
    if (!v5)
      goto LABEL_14;
  }
  v6 = (char *)a1[5];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((_QWORD *)v6 - 13))
      {
        v8 = (char *)*((_QWORD *)v6 - 15);
        if (v6 - 96 != v8)
          operator delete(v8);
      }
      v6 -= 120;
    }
    while (v6 != v5);
    v7 = (char *)a1[4];
  }
  a1[5] = v5;
  operator delete(v7);
LABEL_14:
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  return a1;
}

void sub_20EA08C20(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;

  *a1 = &off_24C9B86C0;
  v2 = (std::__shared_weak_count *)a1[24];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[4];
    if (!v5)
      goto LABEL_14;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[4];
    if (!v5)
      goto LABEL_14;
  }
  v6 = (char *)a1[5];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((_QWORD *)v6 - 13))
      {
        v8 = (char *)*((_QWORD *)v6 - 15);
        if (v6 - 96 != v8)
          operator delete(v8);
      }
      v6 -= 120;
    }
    while (v6 != v5);
    v7 = (char *)a1[4];
  }
  a1[5] = v5;
  operator delete(v7);
LABEL_14:
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA08D08(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = operator new(0xC8uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9B86C0;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = *(_QWORD *)(a1 + 24);
  sub_20E969038(v2 + 4, (uint64_t *)(a1 + 32));
  *(_OWORD *)(v3 + 15) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v3 + 17) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v3 + 19) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v3 + 21) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(v3 + 7) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v3 + 9) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v3 + 11) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v3 + 13) = *(_OWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 192);
  v3[23] = *(_QWORD *)(a1 + 184);
  v3[24] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return v3;
}

void sub_20EA08DD4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20EA08DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9B86C0;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  result = sub_20E969038((_QWORD *)(a2 + 32), (uint64_t *)(a1 + 32));
  v9 = *(_OWORD *)(a1 + 56);
  v10 = *(_OWORD *)(a1 + 72);
  v11 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v11;
  *(_OWORD *)(a2 + 72) = v10;
  *(_OWORD *)(a2 + 56) = v9;
  v12 = *(_OWORD *)(a1 + 120);
  v13 = *(_OWORD *)(a1 + 136);
  v14 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 152) = v14;
  *(_OWORD *)(a2 + 136) = v13;
  *(_OWORD *)(a2 + 120) = v12;
  v15 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 192) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  return result;
}

void sub_20EA08EB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA08ECC(uint64_t a1)
{
  sub_20EA09130((_QWORD *)(a1 + 8));
}

void sub_20EA08ED4(_QWORD *a1)
{
  sub_20EA09130(a1 + 1);
  operator delete(a1);
}

void sub_20EA08EFC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[23];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA07BD8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA09010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA090B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleE"
                     "vvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16Jasper"
                                "DataBundleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE7ProcessERKS6_NSt3__17promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA09124()
{
  return &unk_24C9B8720;
}

void sub_20EA09130(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[23];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (char *)a1[3];
    if (!v5)
      goto LABEL_14;
  }
  else
  {
LABEL_5:
    v5 = (char *)a1[3];
    if (!v5)
      goto LABEL_14;
  }
  v6 = (char *)a1[4];
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((_QWORD *)v6 - 13))
      {
        v8 = (char *)*((_QWORD *)v6 - 15);
        if (v6 - 96 != v8)
          operator delete(v8);
      }
      v6 -= 120;
    }
    while (v6 != v5);
    v7 = (char *)a1[3];
  }
  a1[4] = v5;
  operator delete(v7);
LABEL_14:
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

_QWORD *sub_20EA09204(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B8740;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA0923C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B8740;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA09284(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B8740;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA092D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B8740;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA09304(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA09314(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA09340(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA093D4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA09410(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEv"
                     "vvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperD"
                                "ataBundleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA0947C()
{
  return &unk_24C9B87A0;
}

_QWORD *sub_20EA09488(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B87C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA094C0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B87C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA09508(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B87C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA09558(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B87C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA09588(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA09598(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA095C4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA09658(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA09694(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEv"
                     "vvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperD"
                                "ataBundleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA09700()
{
  return &unk_24C9B8820;
}

_QWORD *sub_20EA0970C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B8840;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA09744(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B8840;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA0978C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B8840;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA097E4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B8840;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA0981C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA0982C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA09858(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA09910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA0995C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleE"
                     "vvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16Jasper"
                                "DataBundleEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA099C8()
{
  return &unk_24C9B88A0;
}

_QWORD *sub_20EA099D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B88C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA09A0C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B88C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA09A54(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B88C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA09AAC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B88C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA09AE4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA09AF4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA09B20(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA09BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA09C24(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleE"
                     "vvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16Jasper"
                                "DataBundleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA09C90()
{
  return &unk_24C9B8920;
}

void sub_20EA09CA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA09CC4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA09CDC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d22concurrent_ray_casting"
                     "16JasperDataBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d22concurrent_"
                                "ray_casting16JasperDataBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_9applecv3d22concurrent_ray_casting16JasperDataBundleEvvvLb0EEEE27__shared_ptr_default_deleteIS9_S9_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA09D4C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA09D78(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA09DB4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B8990;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA09E1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA09EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA09EC0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA09F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA09F64(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA0A028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA0A03C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA0A100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA0A114(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA0A1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA0A1CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B8A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA0A1DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B8A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA0A20C(uint64_t a1)
{
  _QWORD *result;

  result = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
  {
    sub_20EEF0DC0(result);
    JUMPOUT(0x212BC6398);
  }
  return result;
}

void sub_20EA0A24C(uint64_t *a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v5;
  void *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  unint64_t *v11;
  __int128 v12;
  int v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v25;
  unint64_t v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  int v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  __int128 v95;
  int v96;
  unint64_t *v97;
  unint64_t v98;
  int v99;
  unint64_t *v100;
  unint64_t v101;
  char *v102;
  __int128 v103;
  int v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  std::__shared_weak_count *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  int v141;
  unint64_t *v142;
  unint64_t v143;
  int v144;
  unint64_t *v145;
  unint64_t v146;
  char *v147;
  __int128 v148;
  int v149;
  _QWORD *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  std::__shared_weak_count *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  unint64_t v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  void *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  __int128 v186;
  int v187;
  unint64_t *v188;
  unint64_t v189;
  int v190;
  unint64_t *v191;
  unint64_t v192;
  char *v193;
  __int128 v194;
  int v195;
  _QWORD *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  std::__shared_weak_count *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  __int128 v213;
  void *v214;
  char *v215;
  unint64_t *v216;
  unint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t *v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t *v228;
  unint64_t v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  void *v238;
  unint64_t *v239;
  unint64_t v240;
  uint64_t *v241;
  std::__shared_weak_count *v242;
  uint64_t v243;
  __int128 v244;
  int v245;
  unint64_t *v246;
  unint64_t v247;
  unint64_t *v248;
  unint64_t v249;
  uint64_t v250;
  __int128 v251;
  int v252;
  _QWORD *v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  std::__shared_weak_count *v256;
  unint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  std::__shared_weak_count *v264;
  unint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  __int128 v270;
  void *v271;
  __int128 v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t *v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t *v285;
  unint64_t v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  uint64_t v294;
  void *v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t *v298;
  std::__shared_weak_count *v299;
  uint64_t v300;
  void *v301;
  void *v302;
  int v303;
  unint64_t *v304;
  unint64_t v305;
  int v306;
  unint64_t *v307;
  unint64_t v308;
  uint64_t v309;
  __int128 v310;
  int v311;
  _QWORD *v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  std::__shared_weak_count *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  std::__shared_weak_count *v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  uint64_t v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  uint64_t v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  unint64_t *v373;
  unint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  std::__shared_weak_count *v378;
  unint64_t *v379;
  unint64_t v380;
  std::__shared_weak_count *v381;
  unint64_t *v382;
  unint64_t v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  std::__shared_weak_count *v402;
  unint64_t *v403;
  unint64_t v404;
  std::__shared_weak_count *v405;
  unint64_t *v406;
  unint64_t v407;
  std::__shared_weak_count *v408;
  unint64_t *v409;
  unint64_t v410;
  uint64_t v414;
  _BYTE v415[7];
  void *v416[2];
  uint64_t v417;
  void *v418[3];
  uint64_t v419;
  __int128 v420;
  uint64_t v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  uint64_t v425;
  __int128 v426;
  __int128 v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  uint64_t v430;
  std::__shared_weak_count *v431;
  _DWORD v432[2];
  __int128 v433;
  uint64_t v434;
  void *v435[3];
  void *v436;
  __int128 v437;
  uint64_t v438;
  __int128 v439;
  __int128 v440;
  uint64_t (**v441)();
  __int128 v442;
  uint64_t v443;
  uint64_t (**v444)();
  __int128 v445;
  uint64_t (**v446)();
  __int128 v447;
  uint64_t v448;
  std::__shared_weak_count *v449;
  uint64_t v450;
  std::__shared_weak_count *v451;
  _DWORD v452[2];
  __int128 v453;
  uint64_t v454;
  _BYTE v455[24];
  void *v456;
  __int128 v457;
  uint64_t v458;
  __int128 v459;
  __int128 v460;
  uint64_t (**v461)();
  __int128 v462;
  uint64_t v463;
  uint64_t (**v464)();
  __int128 v465;
  uint64_t (**v466)();
  __int128 v467;
  uint64_t v468;
  std::__shared_weak_count *v469;
  uint64_t v470;
  std::__shared_weak_count *v471;
  _DWORD v472[2];
  __int128 v473;
  uint64_t v474;
  _BYTE v475[24];
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  uint64_t v482;
  __int128 v483;
  __int128 v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  uint64_t v487;
  std::__shared_weak_count *v488;
  _DWORD v489[2];
  __int128 v490;
  uint64_t v491;
  _BYTE __p[24];
  uint64_t v493;
  __int128 v494;
  uint64_t v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  uint64_t v499;
  __int128 v500;
  __int128 v501;
  uint64_t v502;
  std::__shared_weak_count *v503;
  uint64_t v504;
  std::__shared_weak_count *v505;
  _DWORD v506[2];
  __int128 __src;
  uint64_t v508;
  _BYTE v509[24];
  uint64_t v510;
  __int128 v511;
  uint64_t v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  uint64_t v516;
  __int128 v517;
  __int128 v518;
  void *v519;
  std::__shared_weak_count *v520;
  uint64_t v521;
  std::__shared_weak_count *v522;
  __int128 __dst;
  uint64_t v524;
  char v525[8];
  __int128 v526;
  uint64_t v527;
  __int128 v528;
  uint64_t v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  uint64_t v533;
  __int128 v534;
  __int128 v535;
  uint64_t v536;
  std::__shared_weak_count *v537;
  __int128 v538;
  _DWORD v539[2];
  _DWORD v540[2];
  _DWORD v541[2];
  __int128 v542;
  _BYTE v543[7];
  char v544;
  __int128 v545;
  _BYTE v546[7];
  char v547;
  __int128 v548;
  _DWORD v549[2];
  __int128 v550;
  _DWORD v551[6];

  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v6 = *(void **)a3;
    v5 = *(unint64_t **)(a3 + 8);
    if (!v5)
      goto LABEL_7;
  }
  else
  {
    __dst = *a2;
    v524 = *((_QWORD *)a2 + 2);
    v6 = *(void **)a3;
    v5 = *(unint64_t **)(a3 + 8);
    if (!v5)
      goto LABEL_7;
  }
  v7 = v5 + 1;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
LABEL_7:
  v9 = *(_QWORD **)a4;
  v11 = *(unint64_t **)(*(_QWORD *)a4 + 8);
  v519 = **(void ***)a4;
  v10 = v519;
  v520 = (std::__shared_weak_count *)v11;
  *v9 = 0;
  v9[1] = 0;
  v12 = __dst;
  LODWORD(v548) = v524;
  *(_DWORD *)((char *)&v548 + 3) = *(_DWORD *)((char *)&v524 + 3);
  v13 = SHIBYTE(v524);
  __dst = 0uLL;
  v524 = 0;
  v435[0] = v6;
  v435[1] = v5;
  v522 = 0;
  v521 = 0;
  v418[0] = v10;
  v418[1] = v11;
  if (v11)
  {
    v14 = v11 + 1;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v13 < 0)
  {
    sub_20E860C04(v509, (void *)v12, *((unint64_t *)&v12 + 1));
  }
  else
  {
    *(_OWORD *)v509 = v12;
    *(_DWORD *)&v509[16] = v548;
    *(_DWORD *)&v509[19] = *(_DWORD *)((char *)&v548 + 3);
    v509[23] = v13;
  }
  *(_QWORD *)__p = 0x7974706D45;
  *(_QWORD *)&__p[8] = 0;
  __p[23] = 5;
  *(_DWORD *)((char *)&v550 + 3) = *(_DWORD *)((char *)&v548 + 3);
  v16 = v548;
  BYTE3(v550) = BYTE3(v548);
  LODWORD(v548) = 0;
  *(_DWORD *)((char *)&v548 + 3) = 0;
  LODWORD(v542) = v16;
  *(_DWORD *)((char *)&v542 + 3) = *(_DWORD *)((char *)&v550 + 3);
  *(_DWORD *)((char *)&v550 + 3) = 0;
  LODWORD(v550) = 0;
  *(_QWORD *)v455 = v6;
  *(_QWORD *)&v455[8] = v5;
  if (v5)
  {
    v17 = v5 + 1;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = operator new();
  LODWORD(v545) = v542;
  *(_DWORD *)((char *)&v545 + 3) = *(_DWORD *)((char *)&v542 + 3);
  LODWORD(v542) = 0;
  *(_DWORD *)((char *)&v542 + 3) = 0;
  v20 = *(_OWORD *)v455;
  *(_QWORD *)v455 = 0;
  *(_QWORD *)&v455[8] = 0;
  *(_BYTE *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_QWORD *)v19 = &off_24C9B8A58;
  *(_QWORD *)(v19 + 16) = &unk_24C9B8AD0;
  *(_QWORD *)(v19 + 24) = &unk_24C9B8B10;
  *(_OWORD *)(v19 + 48) = v12;
  v21 = v545;
  *(_DWORD *)(v19 + 67) = *(_DWORD *)((char *)&v545 + 3);
  *(_DWORD *)(v19 + 64) = v21;
  *(_BYTE *)(v19 + 71) = v13;
  LODWORD(v545) = 0;
  *(_DWORD *)((char *)&v545 + 3) = 0;
  *(_OWORD *)(v19 + 72) = v20;
  *(_QWORD *)&v475[8] = 0;
  *(_QWORD *)v475 = 0;
  v22 = (_QWORD *)operator new();
  *v22 = &off_24C9B8BF8;
  v22[1] = v10;
  v22[2] = v11;
  v418[0] = 0;
  v418[1] = 0;
  *(_QWORD *)(v19 + 144) = 0;
  *(_QWORD *)(v19 + 88) = v22;
  *(_QWORD *)(v19 + 96) = v19 + 96;
  *(_QWORD *)(v19 + 104) = v19 + 96;
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 120) = v19 + 120;
  *(_QWORD *)(v19 + 128) = v19 + 120;
  *(_QWORD *)(v19 + 136) = 0;
  if (!*(_QWORD *)(v19 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v23 = (std::__shared_weak_count *)operator new();
  v23->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  v23->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9098;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)v19;
  v25 = *(std::__shared_weak_count **)(v19 + 40);
  if (v25)
  {
    if (v25->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v28 = __ldxr(p_shared_weak_owners);
    while (__stxr(v28 + 1, p_shared_weak_owners));
    *(_QWORD *)(v19 + 32) = v19;
    *(_QWORD *)(v19 + 40) = v23;
    std::__shared_weak_count::__release_weak(v25);
  }
  else
  {
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v30 = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    *(_QWORD *)(v19 + 32) = v19;
    *(_QWORD *)(v19 + 40) = v23;
  }
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_31:
  if (*(_QWORD *)&v475[8])
  {
    v33 = (unint64_t *)(*(_QWORD *)&v475[8] + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v475[8] + 16))(*(_QWORD *)&v475[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v475[8]);
    }
  }
  *(_QWORD *)v475 = v19;
  *(_QWORD *)&v475[8] = v23;
  if (*(_QWORD *)&v455[8])
  {
    v35 = (unint64_t *)(*(_QWORD *)&v455[8] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v455[8] + 16))(*(_QWORD *)&v455[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v455[8]);
    }
  }
  *(_OWORD *)v455 = *(_OWORD *)v435;
  v435[0] = 0;
  v435[1] = 0;
  sub_20EA119FC((uint64_t)v525, (__int128 *)v509, (__int128 *)__p, (uint64_t)v475, (uint64_t)v455);
  v37 = *(std::__shared_weak_count **)&v455[8];
  if (*(_QWORD *)&v455[8])
  {
    v38 = (unint64_t *)(*(_QWORD *)&v455[8] + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = *(std::__shared_weak_count **)&v475[8];
  if (!*(_QWORD *)&v475[8])
    goto LABEL_50;
  v41 = (unint64_t *)(*(_QWORD *)&v475[8] + 8);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if ((__p[23] & 0x80000000) == 0)
    {
LABEL_51:
      if ((v509[23] & 0x80000000) == 0)
        goto LABEL_52;
LABEL_56:
      operator delete(*(void **)v509);
      v43 = (std::__shared_weak_count *)v418[1];
      if (!v418[1])
        goto LABEL_61;
      goto LABEL_57;
    }
  }
  else
  {
LABEL_50:
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_51;
  }
  operator delete(*(void **)__p);
  if ((v509[23] & 0x80000000) != 0)
    goto LABEL_56;
LABEL_52:
  v43 = (std::__shared_weak_count *)v418[1];
  if (!v418[1])
    goto LABEL_61;
LABEL_57:
  v44 = (unint64_t *)&v43->__shared_owners_;
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 - 1, v44));
  if (!v45)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
LABEL_61:
  if (!v519
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&__src, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __src = *a2;
    v508 = *((_QWORD *)a2 + 2);
  }
  v46 = *(void **)a3;
  v47 = *(unint64_t **)(a3 + 8);
  if (v47)
  {
    v48 = v47 + 1;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  v50 = *(uint64_t **)(a4 + 8);
  v52 = (std::__shared_weak_count *)v50[1];
  v502 = *v50;
  v51 = v502;
  v503 = v52;
  *v50 = 0;
  v50[1] = 0;
  v53 = __src;
  LODWORD(v538) = v508;
  *(_DWORD *)((char *)&v538 + 3) = *(_DWORD *)((char *)&v508 + 3);
  v54 = SHIBYTE(v508);
  __src = 0uLL;
  v508 = 0;
  LODWORD(v536) = v506[0];
  *(_DWORD *)((char *)&v536 + 3) = *(_DWORD *)((char *)v506 + 3);
  v506[0] = 0;
  *(_DWORD *)((char *)v506 + 3) = 0;
  v418[0] = v46;
  v418[1] = v47;
  v505 = 0;
  v504 = 0;
  *(_QWORD *)&v545 = v51;
  *((_QWORD *)&v545 + 1) = v52;
  if (v52)
  {
    v55 = (unint64_t *)&v52->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  if (v54 < 0)
  {
    sub_20E860C04(__p, (void *)v53, *((unint64_t *)&v53 + 1));
  }
  else
  {
    *(_OWORD *)__p = v53;
    *(_DWORD *)&__p[16] = v538;
    *(_DWORD *)&__p[19] = *(_DWORD *)((char *)&v538 + 3);
    __p[23] = v54;
  }
  *(_QWORD *)v475 = 0x7974706D45;
  *(_QWORD *)&v475[8] = 0;
  *(_DWORD *)&v475[16] = v536;
  *(_DWORD *)&v475[19] = *(_DWORD *)((char *)&v536 + 3);
  v475[23] = 5;
  *(_DWORD *)((char *)&v548 + 3) = *(_DWORD *)((char *)&v538 + 3);
  v57 = v538;
  BYTE3(v548) = BYTE3(v538);
  LODWORD(v538) = 0;
  *(_DWORD *)((char *)&v538 + 3) = 0;
  LODWORD(v550) = v57;
  *(_DWORD *)((char *)&v550 + 3) = *(_DWORD *)((char *)&v548 + 3);
  *(_DWORD *)((char *)&v548 + 3) = 0;
  LODWORD(v548) = 0;
  v435[0] = v46;
  v435[1] = v47;
  if (v47)
  {
    v58 = v47 + 1;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
  }
  v60 = operator new();
  LODWORD(v542) = v550;
  *(_DWORD *)((char *)&v542 + 3) = *(_DWORD *)((char *)&v550 + 3);
  LODWORD(v550) = 0;
  *(_DWORD *)((char *)&v550 + 3) = 0;
  v61 = *(_OWORD *)v435;
  v435[0] = 0;
  v435[1] = 0;
  *(_BYTE *)(v60 + 8) = 1;
  *(_QWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 40) = 0;
  *(_QWORD *)v60 = &off_24C9B9160;
  *(_QWORD *)(v60 + 16) = &unk_24C9B91D8;
  *(_QWORD *)(v60 + 24) = &unk_24C9B9218;
  *(_OWORD *)(v60 + 48) = v53;
  v62 = v542;
  *(_DWORD *)(v60 + 67) = *(_DWORD *)((char *)&v542 + 3);
  *(_DWORD *)(v60 + 64) = v62;
  *(_BYTE *)(v60 + 71) = v54;
  LODWORD(v542) = 0;
  *(_DWORD *)((char *)&v542 + 3) = 0;
  *(_OWORD *)(v60 + 72) = v61;
  *(_QWORD *)&v455[8] = 0;
  *(_QWORD *)v455 = 0;
  v63 = (_QWORD *)operator new();
  *v63 = &off_24C9B9300;
  v63[1] = v51;
  v63[2] = v52;
  v545 = 0uLL;
  *(_QWORD *)(v60 + 144) = 0;
  *(_QWORD *)(v60 + 88) = v63;
  *(_QWORD *)(v60 + 96) = v60 + 96;
  *(_QWORD *)(v60 + 104) = v60 + 96;
  *(_QWORD *)(v60 + 112) = 0;
  *(_QWORD *)(v60 + 120) = v60 + 120;
  *(_QWORD *)(v60 + 128) = v60 + 120;
  *(_QWORD *)(v60 + 136) = 0;
  if (!*(_QWORD *)(v60 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v64 = (std::__shared_weak_count *)operator new();
  v64->__shared_owners_ = 0;
  v65 = (unint64_t *)&v64->__shared_owners_;
  v64->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B97A0;
  v64->__shared_weak_owners_ = 0;
  v64[1].__vftable = (std::__shared_weak_count_vtbl *)v60;
  v66 = *(std::__shared_weak_count **)(v60 + 40);
  if (v66)
  {
    if (v66->__shared_owners_ != -1)
      goto LABEL_94;
    do
      v67 = __ldxr(v65);
    while (__stxr(v67 + 1, v65));
    v68 = (unint64_t *)&v64->__shared_weak_owners_;
    do
      v69 = __ldxr(v68);
    while (__stxr(v69 + 1, v68));
    *(_QWORD *)(v60 + 32) = v60;
    *(_QWORD *)(v60 + 40) = v64;
    std::__shared_weak_count::__release_weak(v66);
  }
  else
  {
    do
      v70 = __ldxr(v65);
    while (__stxr(v70 + 1, v65));
    v71 = (unint64_t *)&v64->__shared_weak_owners_;
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
    *(_QWORD *)(v60 + 32) = v60;
    *(_QWORD *)(v60 + 40) = v64;
  }
  do
    v73 = __ldaxr(v65);
  while (__stlxr(v73 - 1, v65));
  if (!v73)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
LABEL_94:
  v74 = *(std::__shared_weak_count **)&v455[8];
  if (*(_QWORD *)&v455[8])
  {
    v75 = (unint64_t *)(*(_QWORD *)&v455[8] + 8);
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  *(_QWORD *)v455 = v60;
  *(_QWORD *)&v455[8] = v64;
  if (v435[1])
  {
    v77 = (unint64_t *)((char *)v435[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      (*(void (**)(void *))(*(_QWORD *)v435[1] + 16))(v435[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v435[1]);
    }
  }
  *(_OWORD *)v435 = *(_OWORD *)v418;
  v418[0] = 0;
  v418[1] = 0;
  sub_20EA15DA4((uint64_t)v509, (__int128 *)__p, (__int128 *)v475, (uint64_t)v455, (uint64_t)v435);
  v79 = (std::__shared_weak_count *)v435[1];
  if (v435[1])
  {
    v80 = (unint64_t *)((char *)v435[1] + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = *(std::__shared_weak_count **)&v455[8];
  if (!*(_QWORD *)&v455[8])
    goto LABEL_113;
  v83 = (unint64_t *)(*(_QWORD *)&v455[8] + 8);
  do
    v84 = __ldaxr(v83);
  while (__stlxr(v84 - 1, v83));
  if (!v84)
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
    if ((v475[23] & 0x80000000) == 0)
    {
LABEL_114:
      if ((__p[23] & 0x80000000) == 0)
        goto LABEL_115;
LABEL_119:
      operator delete(*(void **)__p);
      v85 = (std::__shared_weak_count *)*((_QWORD *)&v545 + 1);
      if (!*((_QWORD *)&v545 + 1))
        goto LABEL_124;
      goto LABEL_120;
    }
  }
  else
  {
LABEL_113:
    if ((v475[23] & 0x80000000) == 0)
      goto LABEL_114;
  }
  operator delete(*(void **)v475);
  if ((__p[23] & 0x80000000) != 0)
    goto LABEL_119;
LABEL_115:
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v545 + 1);
  if (!*((_QWORD *)&v545 + 1))
    goto LABEL_124;
LABEL_120:
  v86 = (unint64_t *)&v85->__shared_owners_;
  do
    v87 = __ldaxr(v86);
  while (__stlxr(v87 - 1, v86));
  if (!v87)
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
LABEL_124:
  if (!v502
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v490, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v490 = *a2;
    v491 = *((_QWORD *)a2 + 2);
  }
  v88 = *(void **)a3;
  v89 = *(unint64_t **)(a3 + 8);
  if (v89)
  {
    v90 = v89 + 1;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v92 = *(uint64_t **)(a4 + 16);
  v94 = (std::__shared_weak_count *)v92[1];
  v485 = *v92;
  v93 = v485;
  v486 = v94;
  *v92 = 0;
  v92[1] = 0;
  v95 = v490;
  LODWORD(v536) = v491;
  *(_DWORD *)((char *)&v536 + 3) = *(_DWORD *)((char *)&v491 + 3);
  v96 = SHIBYTE(v491);
  v490 = 0uLL;
  v491 = 0;
  v551[0] = v489[0];
  *(_DWORD *)((char *)v551 + 3) = *(_DWORD *)((char *)v489 + 3);
  v489[0] = 0;
  *(_DWORD *)((char *)v489 + 3) = 0;
  *(_QWORD *)&v545 = v88;
  *((_QWORD *)&v545 + 1) = v89;
  v488 = 0;
  v487 = 0;
  *(_QWORD *)&v542 = v93;
  *((_QWORD *)&v542 + 1) = v94;
  if (v94)
  {
    v97 = (unint64_t *)&v94->__shared_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  if (v96 < 0)
  {
    sub_20E860C04(v475, (void *)v95, *((unint64_t *)&v95 + 1));
  }
  else
  {
    *(_OWORD *)v475 = v95;
    *(_DWORD *)&v475[16] = v536;
    *(_DWORD *)&v475[19] = *(_DWORD *)((char *)&v536 + 3);
    v475[23] = v96;
  }
  *(_QWORD *)v455 = 0x7974706D45;
  *(_QWORD *)&v455[8] = 0;
  *(_DWORD *)&v455[16] = v551[0];
  *(_DWORD *)&v455[19] = *(_DWORD *)((char *)v551 + 3);
  v455[23] = 5;
  *(_DWORD *)((char *)&v538 + 3) = *(_DWORD *)((char *)&v536 + 3);
  v99 = v536;
  BYTE3(v538) = BYTE3(v536);
  LODWORD(v536) = 0;
  *(_DWORD *)((char *)&v536 + 3) = 0;
  LODWORD(v548) = v99;
  *(_DWORD *)((char *)&v548 + 3) = *(_DWORD *)((char *)&v538 + 3);
  *(_DWORD *)((char *)&v538 + 3) = 0;
  LODWORD(v538) = 0;
  v418[0] = v88;
  v418[1] = v89;
  if (v89)
  {
    v100 = v89 + 1;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = (char *)operator new();
  LODWORD(v550) = v548;
  *(_DWORD *)((char *)&v550 + 3) = *(_DWORD *)((char *)&v548 + 3);
  LODWORD(v548) = 0;
  *(_DWORD *)((char *)&v548 + 3) = 0;
  v103 = *(_OWORD *)v418;
  v418[0] = 0;
  v418[1] = 0;
  v102[8] = 1;
  *((_QWORD *)v102 + 4) = 0;
  *((_QWORD *)v102 + 5) = 0;
  *(_QWORD *)v102 = &off_24C9B9868;
  *((_QWORD *)v102 + 2) = &unk_24C9B98E0;
  *((_QWORD *)v102 + 3) = &unk_24C9B9920;
  *((_OWORD *)v102 + 3) = v95;
  v104 = v550;
  *(_DWORD *)(v102 + 67) = *(_DWORD *)((char *)&v550 + 3);
  *((_DWORD *)v102 + 16) = v104;
  v102[71] = v96;
  LODWORD(v550) = 0;
  *(_DWORD *)((char *)&v550 + 3) = 0;
  *(_OWORD *)(v102 + 72) = v103;
  v435[0] = 0;
  v435[1] = 0;
  v105 = (_QWORD *)operator new();
  *v105 = &off_24C9B9A08;
  v105[1] = v93;
  v105[2] = v94;
  v542 = 0uLL;
  *((_QWORD *)v102 + 18) = 0;
  *((_QWORD *)v102 + 11) = v105;
  *((_QWORD *)v102 + 12) = v102 + 96;
  *((_QWORD *)v102 + 13) = v102 + 96;
  *((_QWORD *)v102 + 14) = 0;
  *((_QWORD *)v102 + 15) = v102 + 120;
  *((_QWORD *)v102 + 16) = v102 + 120;
  *((_QWORD *)v102 + 17) = 0;
  if (!*((_QWORD *)v102 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v106 = (std::__shared_weak_count *)operator new();
  v106->__shared_owners_ = 0;
  v107 = (unint64_t *)&v106->__shared_owners_;
  v106->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9EA8;
  v106->__shared_weak_owners_ = 0;
  v106[1].__vftable = (std::__shared_weak_count_vtbl *)v102;
  v108 = (std::__shared_weak_count *)*((_QWORD *)v102 + 5);
  if (v108)
  {
    if (v108->__shared_owners_ != -1)
      goto LABEL_157;
    do
      v109 = __ldxr(v107);
    while (__stxr(v109 + 1, v107));
    v110 = (unint64_t *)&v106->__shared_weak_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
    *((_QWORD *)v102 + 4) = v102;
    *((_QWORD *)v102 + 5) = v106;
    std::__shared_weak_count::__release_weak(v108);
  }
  else
  {
    do
      v112 = __ldxr(v107);
    while (__stxr(v112 + 1, v107));
    v113 = (unint64_t *)&v106->__shared_weak_owners_;
    do
      v114 = __ldxr(v113);
    while (__stxr(v114 + 1, v113));
    *((_QWORD *)v102 + 4) = v102;
    *((_QWORD *)v102 + 5) = v106;
  }
  do
    v115 = __ldaxr(v107);
  while (__stlxr(v115 - 1, v107));
  if (!v115)
  {
    ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
    std::__shared_weak_count::__release_weak(v106);
  }
LABEL_157:
  v116 = (std::__shared_weak_count *)v435[1];
  if (v435[1])
  {
    v117 = (unint64_t *)((char *)v435[1] + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  v435[0] = v102;
  v435[1] = v106;
  if (v418[1])
  {
    v119 = (unint64_t *)((char *)v418[1] + 8);
    do
      v120 = __ldaxr(v119);
    while (__stlxr(v120 - 1, v119));
    if (!v120)
    {
      (*(void (**)(void *))(*(_QWORD *)v418[1] + 16))(v418[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v418[1]);
    }
  }
  *(_OWORD *)v418 = v545;
  v545 = 0uLL;
  sub_20EA1A1D8((uint64_t)__p, (__int128 *)v475, (__int128 *)v455, (uint64_t)v435, (uint64_t)v418);
  v121 = (std::__shared_weak_count *)v418[1];
  if (v418[1])
  {
    v122 = (unint64_t *)((char *)v418[1] + 8);
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
  }
  v124 = (std::__shared_weak_count *)v435[1];
  if (!v435[1])
    goto LABEL_176;
  v125 = (unint64_t *)((char *)v435[1] + 8);
  do
    v126 = __ldaxr(v125);
  while (__stlxr(v126 - 1, v125));
  if (!v126)
  {
    ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
    std::__shared_weak_count::__release_weak(v124);
    if ((v455[23] & 0x80000000) == 0)
    {
LABEL_177:
      if ((v475[23] & 0x80000000) == 0)
        goto LABEL_178;
LABEL_182:
      operator delete(*(void **)v475);
      v127 = (std::__shared_weak_count *)*((_QWORD *)&v542 + 1);
      if (!*((_QWORD *)&v542 + 1))
        goto LABEL_187;
      goto LABEL_183;
    }
  }
  else
  {
LABEL_176:
    if ((v455[23] & 0x80000000) == 0)
      goto LABEL_177;
  }
  operator delete(*(void **)v455);
  if ((v475[23] & 0x80000000) != 0)
    goto LABEL_182;
LABEL_178:
  v127 = (std::__shared_weak_count *)*((_QWORD *)&v542 + 1);
  if (!*((_QWORD *)&v542 + 1))
    goto LABEL_187;
LABEL_183:
  v128 = (unint64_t *)&v127->__shared_owners_;
  do
    v129 = __ldaxr(v128);
  while (__stlxr(v129 - 1, v128));
  if (!v129)
  {
    ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
    std::__shared_weak_count::__release_weak(v127);
  }
LABEL_187:
  v130 = (std::__shared_weak_count *)*((_QWORD *)&v545 + 1);
  if (!*((_QWORD *)&v545 + 1))
    goto LABEL_191;
  v131 = (unint64_t *)(*((_QWORD *)&v545 + 1) + 8);
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
    std::__shared_weak_count::__release_weak(v130);
    if (v485)
      goto LABEL_195;
  }
  else
  {
LABEL_191:
    if (v485)
      goto LABEL_195;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_195:
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v473, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v473 = *a2;
    v474 = *((_QWORD *)a2 + 2);
  }
  v133 = *(void **)a3;
  v134 = *(_QWORD *)(a3 + 8);
  if (v134)
  {
    v135 = (unint64_t *)(v134 + 8);
    do
      v136 = __ldxr(v135);
    while (__stxr(v136 + 1, v135));
  }
  v137 = *(uint64_t **)(a4 + 24);
  v139 = (std::__shared_weak_count *)v137[1];
  v468 = *v137;
  v138 = v468;
  v469 = v139;
  *v137 = 0;
  v137[1] = 0;
  v140 = v473;
  v551[0] = v474;
  *(_DWORD *)((char *)v551 + 3) = *(_DWORD *)((char *)&v474 + 3);
  v141 = SHIBYTE(v474);
  v473 = 0uLL;
  v474 = 0;
  v549[0] = v472[0];
  *(_DWORD *)((char *)v549 + 3) = *(_DWORD *)((char *)v472 + 3);
  v472[0] = 0;
  *(_DWORD *)((char *)v472 + 3) = 0;
  *(_QWORD *)&v542 = v133;
  *((_QWORD *)&v542 + 1) = v134;
  v471 = 0;
  v470 = 0;
  *(_QWORD *)&v550 = v138;
  *((_QWORD *)&v550 + 1) = v139;
  if (v139)
  {
    v142 = (unint64_t *)&v139->__shared_owners_;
    do
      v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
  }
  if (v141 < 0)
  {
    sub_20E860C04(v455, (void *)v140, *((unint64_t *)&v140 + 1));
  }
  else
  {
    *(_OWORD *)v455 = v140;
    *(_DWORD *)&v455[16] = v551[0];
    *(_DWORD *)&v455[19] = *(_DWORD *)((char *)v551 + 3);
    v455[23] = v141;
  }
  v435[0] = (void *)0x7974706D45;
  v435[1] = 0;
  LODWORD(v435[2]) = v549[0];
  *(_DWORD *)((char *)&v435[2] + 3) = *(_DWORD *)((char *)v549 + 3);
  HIBYTE(v435[2]) = 5;
  *(_DWORD *)((char *)&v536 + 3) = *(_DWORD *)((char *)v551 + 3);
  BYTE3(v536) = HIBYTE(v551[0]);
  v144 = v551[0];
  v551[0] = 0;
  *(_DWORD *)((char *)v551 + 3) = 0;
  LODWORD(v538) = v144;
  *(_DWORD *)((char *)&v538 + 3) = *(_DWORD *)((char *)&v536 + 3);
  *(_DWORD *)((char *)&v536 + 3) = 0;
  LODWORD(v536) = 0;
  *(_QWORD *)&v545 = v133;
  *((_QWORD *)&v545 + 1) = v134;
  if (v134)
  {
    v145 = (unint64_t *)(v134 + 8);
    do
      v146 = __ldxr(v145);
    while (__stxr(v146 + 1, v145));
  }
  v147 = (char *)operator new();
  LODWORD(v548) = v538;
  *(_DWORD *)((char *)&v548 + 3) = *(_DWORD *)((char *)&v538 + 3);
  LODWORD(v538) = 0;
  *(_DWORD *)((char *)&v538 + 3) = 0;
  v148 = v545;
  v545 = 0uLL;
  v147[8] = 1;
  *((_QWORD *)v147 + 4) = 0;
  *((_QWORD *)v147 + 5) = 0;
  *(_QWORD *)v147 = &off_24C9B9F70;
  *((_QWORD *)v147 + 2) = &unk_24C9B9FE8;
  *((_QWORD *)v147 + 3) = &unk_24C9BA028;
  *((_OWORD *)v147 + 3) = v140;
  v149 = v548;
  *(_DWORD *)(v147 + 67) = *(_DWORD *)((char *)&v548 + 3);
  *((_DWORD *)v147 + 16) = v149;
  v147[71] = v141;
  LODWORD(v548) = 0;
  *(_DWORD *)((char *)&v548 + 3) = 0;
  *(_OWORD *)(v147 + 72) = v148;
  v418[0] = 0;
  v418[1] = 0;
  v150 = (_QWORD *)operator new();
  *v150 = &off_24C9BA110;
  v150[1] = v138;
  v150[2] = v139;
  v550 = 0uLL;
  *((_QWORD *)v147 + 18) = 0;
  *((_QWORD *)v147 + 11) = v150;
  *((_QWORD *)v147 + 12) = v147 + 96;
  *((_QWORD *)v147 + 13) = v147 + 96;
  *((_QWORD *)v147 + 14) = 0;
  *((_QWORD *)v147 + 15) = v147 + 120;
  *((_QWORD *)v147 + 16) = v147 + 120;
  *((_QWORD *)v147 + 17) = 0;
  if (!*((_QWORD *)v147 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v151 = (std::__shared_weak_count *)operator new();
  v151->__shared_owners_ = 0;
  v152 = (unint64_t *)&v151->__shared_owners_;
  v151->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA5B0;
  v151->__shared_weak_owners_ = 0;
  v151[1].__vftable = (std::__shared_weak_count_vtbl *)v147;
  v153 = (std::__shared_weak_count *)*((_QWORD *)v147 + 5);
  if (v153)
  {
    if (v153->__shared_owners_ != -1)
      goto LABEL_225;
    do
      v154 = __ldxr(v152);
    while (__stxr(v154 + 1, v152));
    v155 = (unint64_t *)&v151->__shared_weak_owners_;
    do
      v156 = __ldxr(v155);
    while (__stxr(v156 + 1, v155));
    *((_QWORD *)v147 + 4) = v147;
    *((_QWORD *)v147 + 5) = v151;
    std::__shared_weak_count::__release_weak(v153);
  }
  else
  {
    do
      v157 = __ldxr(v152);
    while (__stxr(v157 + 1, v152));
    v158 = (unint64_t *)&v151->__shared_weak_owners_;
    do
      v159 = __ldxr(v158);
    while (__stxr(v159 + 1, v158));
    *((_QWORD *)v147 + 4) = v147;
    *((_QWORD *)v147 + 5) = v151;
  }
  do
    v160 = __ldaxr(v152);
  while (__stlxr(v160 - 1, v152));
  if (!v160)
  {
    ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
    std::__shared_weak_count::__release_weak(v151);
  }
LABEL_225:
  v161 = (std::__shared_weak_count *)v418[1];
  if (v418[1])
  {
    v162 = (unint64_t *)((char *)v418[1] + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v418[0] = v147;
  v418[1] = v151;
  v164 = (std::__shared_weak_count *)*((_QWORD *)&v545 + 1);
  if (*((_QWORD *)&v545 + 1))
  {
    v165 = (unint64_t *)(*((_QWORD *)&v545 + 1) + 8);
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v545 = v542;
  v542 = 0uLL;
  sub_20EA1E60C((uint64_t)v475, (__int128 *)v455, (__int128 *)v435, (uint64_t)v418, (uint64_t)&v545);
  v167 = (std::__shared_weak_count *)*((_QWORD *)&v545 + 1);
  if (*((_QWORD *)&v545 + 1))
  {
    v168 = (unint64_t *)(*((_QWORD *)&v545 + 1) + 8);
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
  v170 = (std::__shared_weak_count *)v418[1];
  if (!v418[1])
    goto LABEL_244;
  v171 = (unint64_t *)((char *)v418[1] + 8);
  do
    v172 = __ldaxr(v171);
  while (__stlxr(v172 - 1, v171));
  if (!v172)
  {
    ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
    std::__shared_weak_count::__release_weak(v170);
    if ((SHIBYTE(v435[2]) & 0x80000000) == 0)
    {
LABEL_245:
      if ((v455[23] & 0x80000000) == 0)
        goto LABEL_246;
LABEL_250:
      operator delete(*(void **)v455);
      v173 = (std::__shared_weak_count *)*((_QWORD *)&v550 + 1);
      if (!*((_QWORD *)&v550 + 1))
        goto LABEL_255;
      goto LABEL_251;
    }
  }
  else
  {
LABEL_244:
    if ((SHIBYTE(v435[2]) & 0x80000000) == 0)
      goto LABEL_245;
  }
  operator delete(v435[0]);
  if ((v455[23] & 0x80000000) != 0)
    goto LABEL_250;
LABEL_246:
  v173 = (std::__shared_weak_count *)*((_QWORD *)&v550 + 1);
  if (!*((_QWORD *)&v550 + 1))
    goto LABEL_255;
LABEL_251:
  v174 = (unint64_t *)&v173->__shared_owners_;
  do
    v175 = __ldaxr(v174);
  while (__stlxr(v175 - 1, v174));
  if (!v175)
  {
    ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
    std::__shared_weak_count::__release_weak(v173);
  }
LABEL_255:
  v176 = (std::__shared_weak_count *)*((_QWORD *)&v542 + 1);
  if (!*((_QWORD *)&v542 + 1))
    goto LABEL_259;
  v177 = (unint64_t *)(*((_QWORD *)&v542 + 1) + 8);
  do
    v178 = __ldaxr(v177);
  while (__stlxr(v178 - 1, v177));
  if (!v178)
  {
    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
    std::__shared_weak_count::__release_weak(v176);
    if (v468)
      goto LABEL_263;
  }
  else
  {
LABEL_259:
    if (v468)
      goto LABEL_263;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_263:
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v453, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v453 = *a2;
    v454 = *((_QWORD *)a2 + 2);
  }
  v180 = *(void **)a3;
  v179 = *(_QWORD *)(a3 + 8);
  if (v179)
  {
    v181 = (unint64_t *)(v179 + 8);
    do
      v182 = __ldxr(v181);
    while (__stxr(v182 + 1, v181));
  }
  v183 = *(uint64_t **)(a4 + 32);
  v185 = (std::__shared_weak_count *)v183[1];
  v448 = *v183;
  v184 = v448;
  v449 = v185;
  *v183 = 0;
  v183[1] = 0;
  v186 = v453;
  v549[0] = v454;
  *(_DWORD *)((char *)v549 + 3) = *(_DWORD *)((char *)&v454 + 3);
  v187 = SHIBYTE(v454);
  v453 = 0uLL;
  v454 = 0;
  v541[0] = v452[0];
  *(_DWORD *)((char *)v541 + 3) = *(_DWORD *)((char *)v452 + 3);
  v452[0] = 0;
  *(_DWORD *)((char *)v452 + 3) = 0;
  *(_QWORD *)&v542 = v180;
  *((_QWORD *)&v542 + 1) = v179;
  v451 = 0;
  v450 = 0;
  *(_QWORD *)&v550 = v184;
  *((_QWORD *)&v550 + 1) = v185;
  if (v185)
  {
    v188 = (unint64_t *)&v185->__shared_owners_;
    do
      v189 = __ldxr(v188);
    while (__stxr(v189 + 1, v188));
  }
  if (v187 < 0)
  {
    sub_20E860C04(v435, (void *)v186, *((unint64_t *)&v186 + 1));
  }
  else
  {
    *(_OWORD *)v435 = v186;
    LODWORD(v435[2]) = v549[0];
    *(_DWORD *)((char *)&v435[2] + 3) = *(_DWORD *)((char *)v549 + 3);
    HIBYTE(v435[2]) = v187;
  }
  LODWORD(v536) = v541[0];
  *(_DWORD *)((char *)&v536 + 3) = *(_DWORD *)((char *)v541 + 3);
  *(_DWORD *)((char *)v551 + 3) = *(_DWORD *)((char *)v549 + 3);
  v190 = v549[0];
  HIBYTE(v551[0]) = HIBYTE(v549[0]);
  v549[0] = 0;
  *(_DWORD *)((char *)v549 + 3) = 0;
  LODWORD(v538) = v190;
  *(_DWORD *)((char *)&v538 + 3) = *(_DWORD *)((char *)v551 + 3);
  *(_DWORD *)((char *)v551 + 3) = 0;
  v551[0] = 0;
  *(_QWORD *)&v545 = v180;
  *((_QWORD *)&v545 + 1) = v179;
  if (v179)
  {
    v191 = (unint64_t *)(v179 + 8);
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  v193 = (char *)operator new();
  LODWORD(v548) = v538;
  *(_DWORD *)((char *)&v548 + 3) = *(_DWORD *)((char *)&v538 + 3);
  LODWORD(v538) = 0;
  *(_DWORD *)((char *)&v538 + 3) = 0;
  v194 = v545;
  v545 = 0uLL;
  v193[8] = 1;
  *((_QWORD *)v193 + 4) = 0;
  *((_QWORD *)v193 + 5) = 0;
  *(_QWORD *)v193 = &off_24C9BA678;
  *((_QWORD *)v193 + 2) = &unk_24C9BA6F0;
  *((_QWORD *)v193 + 3) = &unk_24C9BA730;
  *((_OWORD *)v193 + 3) = v186;
  v195 = v548;
  *(_DWORD *)(v193 + 67) = *(_DWORD *)((char *)&v548 + 3);
  *((_DWORD *)v193 + 16) = v195;
  v193[71] = v187;
  LODWORD(v548) = 0;
  *(_DWORD *)((char *)&v548 + 3) = 0;
  *(_OWORD *)(v193 + 72) = v194;
  v418[0] = 0;
  v418[1] = 0;
  v196 = (_QWORD *)operator new();
  *v196 = &off_24C9BA828;
  v196[1] = v184;
  v196[2] = v185;
  v550 = 0uLL;
  *((_QWORD *)v193 + 18) = 0;
  *((_QWORD *)v193 + 11) = v196;
  *((_QWORD *)v193 + 12) = v193 + 96;
  *((_QWORD *)v193 + 13) = v193 + 96;
  *((_QWORD *)v193 + 14) = 0;
  *((_QWORD *)v193 + 15) = v193 + 120;
  *((_QWORD *)v193 + 16) = v193 + 120;
  *((_QWORD *)v193 + 17) = 0;
  if (!*((_QWORD *)v193 + 9)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v197 = (std::__shared_weak_count *)operator new();
  v197->__shared_owners_ = 0;
  v198 = (unint64_t *)&v197->__shared_owners_;
  v197->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BAD18;
  v197->__shared_weak_owners_ = 0;
  v197[1].__vftable = (std::__shared_weak_count_vtbl *)v193;
  v199 = (std::__shared_weak_count *)*((_QWORD *)v193 + 5);
  if (v199)
  {
    if (v199->__shared_owners_ != -1)
      goto LABEL_293;
    do
      v200 = __ldxr(v198);
    while (__stxr(v200 + 1, v198));
    v201 = (unint64_t *)&v197->__shared_weak_owners_;
    do
      v202 = __ldxr(v201);
    while (__stxr(v202 + 1, v201));
    *((_QWORD *)v193 + 4) = v193;
    *((_QWORD *)v193 + 5) = v197;
    std::__shared_weak_count::__release_weak(v199);
  }
  else
  {
    do
      v203 = __ldxr(v198);
    while (__stxr(v203 + 1, v198));
    v204 = (unint64_t *)&v197->__shared_weak_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
    *((_QWORD *)v193 + 4) = v193;
    *((_QWORD *)v193 + 5) = v197;
  }
  do
    v206 = __ldaxr(v198);
  while (__stlxr(v206 - 1, v198));
  if (!v206)
  {
    ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
    std::__shared_weak_count::__release_weak(v197);
  }
LABEL_293:
  v207 = (std::__shared_weak_count *)v418[1];
  if (v418[1])
  {
    v208 = (unint64_t *)((char *)v418[1] + 8);
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 - 1, v208));
    if (!v209)
    {
      ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
      std::__shared_weak_count::__release_weak(v207);
    }
  }
  v418[0] = v193;
  v418[1] = v197;
  v210 = (std::__shared_weak_count *)*((_QWORD *)&v545 + 1);
  if (*((_QWORD *)&v545 + 1))
  {
    v211 = (unint64_t *)(*((_QWORD *)&v545 + 1) + 8);
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v542;
  v542 = 0uLL;
  *(_OWORD *)&v455[8] = *(_OWORD *)v435;
  *(_QWORD *)v455 = &off_24C9B2A40;
  v456 = v435[2];
  memset(v435, 0, sizeof(v435));
  v457 = 0x7974706D45uLL;
  *(_DWORD *)((char *)&v458 + 3) = *(_DWORD *)((char *)&v536 + 3);
  LODWORD(v458) = v536;
  HIBYTE(v458) = 5;
  LODWORD(v536) = 0;
  *(_DWORD *)((char *)&v536 + 3) = 0;
  v459 = v213;
  v545 = 0uLL;
  v214 = v418[0];
  v215 = (char *)v418[1];
  v460 = *(_OWORD *)v418;
  v418[0] = 0;
  v418[1] = 0;
  if (*((_QWORD *)&v460 + 1))
  {
    v216 = (unint64_t *)(v215 + 16);
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
  }
  v461 = &off_24C9B2AE0;
  v218 = (_QWORD *)operator new();
  *v218 = &off_24C9BAD68;
  v218[1] = v214;
  v218[2] = v215;
  *(_QWORD *)&v462 = v218;
  v220 = *((_QWORD *)&v460 + 1);
  v219 = v460;
  if (!*((_QWORD *)&v460 + 1))
  {
    *((_QWORD *)&v462 + 1) = v460;
    v463 = 0;
    if ((_QWORD)v460)
      v224 = v460 + 16;
    else
      v224 = 0;
    goto LABEL_323;
  }
  v221 = (unint64_t *)(*((_QWORD *)&v460 + 1) + 16);
  do
    v222 = __ldxr(v221);
  while (__stxr(v222 + 1, v221));
  v223 = *((_QWORD *)&v460 + 1);
  *((_QWORD *)&v462 + 1) = v219;
  v463 = v220;
  if ((_QWORD)v460)
    v224 = v460 + 16;
  else
    v224 = 0;
  if (!*((_QWORD *)&v460 + 1))
  {
    v219 = v460;
LABEL_323:
    v227 = 0;
    v464 = &off_24C9B2A70;
    v465 = v224;
    goto LABEL_324;
  }
  v225 = (unint64_t *)(*((_QWORD *)&v460 + 1) + 16);
  do
    v226 = __ldxr(v225);
  while (__stxr(v226 + 1, v225));
  v227 = *((_QWORD *)&v460 + 1);
  v219 = v460;
  v464 = &off_24C9B2A70;
  *(_QWORD *)&v465 = v224;
  *((_QWORD *)&v465 + 1) = v223;
  if (*((_QWORD *)&v460 + 1))
  {
    v228 = (unint64_t *)(*((_QWORD *)&v460 + 1) + 16);
    do
      v229 = __ldxr(v228);
    while (__stxr(v229 + 1, v228));
  }
LABEL_324:
  if (v219)
    v230 = v219 + 24;
  else
    v230 = 0;
  v466 = &off_24C9B2310;
  *(_QWORD *)&v467 = v230;
  *((_QWORD *)&v467 + 1) = v227;
  if (SHIBYTE(v435[2]) < 0)
    operator delete(v435[0]);
  v231 = (std::__shared_weak_count *)*((_QWORD *)&v550 + 1);
  if (*((_QWORD *)&v550 + 1))
  {
    v232 = (unint64_t *)(*((_QWORD *)&v550 + 1) + 8);
    do
      v233 = __ldaxr(v232);
    while (__stlxr(v233 - 1, v232));
    if (!v233)
    {
      ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
      std::__shared_weak_count::__release_weak(v231);
    }
  }
  v234 = (std::__shared_weak_count *)*((_QWORD *)&v542 + 1);
  if (!*((_QWORD *)&v542 + 1))
    goto LABEL_338;
  v235 = (unint64_t *)(*((_QWORD *)&v542 + 1) + 8);
  do
    v236 = __ldaxr(v235);
  while (__stlxr(v236 - 1, v235));
  if (!v236)
  {
    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
    std::__shared_weak_count::__release_weak(v234);
    if (v448)
      goto LABEL_342;
  }
  else
  {
LABEL_338:
    if (v448)
      goto LABEL_342;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_342:
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(&v433, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v433 = *a2;
    v434 = *((_QWORD *)a2 + 2);
  }
  v238 = *(void **)a3;
  v237 = *(_QWORD *)(a3 + 8);
  if (v237)
  {
    v239 = (unint64_t *)(v237 + 8);
    do
      v240 = __ldxr(v239);
    while (__stxr(v240 + 1, v239));
  }
  v241 = *(uint64_t **)(a4 + 40);
  v242 = (std::__shared_weak_count *)v241[1];
  v428 = *v241;
  v243 = v428;
  v429 = v242;
  *v241 = 0;
  v241[1] = 0;
  v244 = v433;
  v541[0] = v434;
  *(_DWORD *)((char *)v541 + 3) = *(_DWORD *)((char *)&v434 + 3);
  v245 = SHIBYTE(v434);
  v433 = 0uLL;
  v434 = 0;
  v540[0] = v432[0];
  *(_DWORD *)((char *)v540 + 3) = *(_DWORD *)((char *)v432 + 3);
  v432[0] = 0;
  *(_DWORD *)((char *)v432 + 3) = 0;
  *(_QWORD *)&v550 = v238;
  *((_QWORD *)&v550 + 1) = v237;
  v430 = 0;
  v431 = 0;
  *(_QWORD *)&v548 = v243;
  *((_QWORD *)&v548 + 1) = v242;
  if (v242)
  {
    v246 = (unint64_t *)&v242->__shared_owners_;
    do
      v247 = __ldxr(v246);
    while (__stxr(v247 + 1, v246));
  }
  if (v245 < 0)
  {
    sub_20E860C04(v418, (void *)v244, *((unint64_t *)&v244 + 1));
  }
  else
  {
    *(_OWORD *)v418 = v244;
    LODWORD(v418[2]) = v541[0];
    *(_DWORD *)((char *)&v418[2] + 3) = *(_DWORD *)((char *)v541 + 3);
    HIBYTE(v418[2]) = v245;
  }
  v551[0] = v540[0];
  *(_DWORD *)((char *)v551 + 3) = *(_DWORD *)((char *)v540 + 3);
  *(_DWORD *)((char *)v549 + 3) = *(_DWORD *)((char *)v541 + 3);
  v549[0] = v541[0];
  v541[0] = 0;
  *(_DWORD *)((char *)v541 + 3) = 0;
  LODWORD(v536) = v549[0];
  *(_DWORD *)((char *)&v536 + 3) = *(_DWORD *)((char *)v549 + 3);
  *(_DWORD *)((char *)v549 + 3) = 0;
  v549[0] = 0;
  *(_QWORD *)&v542 = v238;
  *((_QWORD *)&v542 + 1) = v237;
  if (v237)
  {
    v248 = (unint64_t *)(v237 + 8);
    do
      v249 = __ldxr(v248);
    while (__stxr(v249 + 1, v248));
  }
  v250 = operator new();
  LODWORD(v538) = v536;
  *(_DWORD *)((char *)&v538 + 3) = *(_DWORD *)((char *)&v536 + 3);
  LODWORD(v536) = 0;
  *(_DWORD *)((char *)&v536 + 3) = 0;
  v251 = v542;
  v542 = 0uLL;
  *(_BYTE *)(v250 + 8) = 1;
  *(_QWORD *)(v250 + 32) = 0;
  *(_QWORD *)(v250 + 40) = 0;
  *(_QWORD *)v250 = &off_24C9BADE0;
  *(_QWORD *)(v250 + 16) = &unk_24C9BAE58;
  *(_QWORD *)(v250 + 24) = &unk_24C9BAE98;
  *(_OWORD *)(v250 + 48) = v244;
  v252 = v538;
  *(_DWORD *)(v250 + 67) = *(_DWORD *)((char *)&v538 + 3);
  *(_DWORD *)(v250 + 64) = v252;
  *(_BYTE *)(v250 + 71) = v245;
  LODWORD(v538) = 0;
  *(_DWORD *)((char *)&v538 + 3) = 0;
  *(_OWORD *)(v250 + 72) = v251;
  v545 = 0uLL;
  v253 = (_QWORD *)operator new();
  *v253 = &off_24C9BAF90;
  v253[1] = v243;
  v253[2] = v242;
  v548 = 0uLL;
  *(_QWORD *)(v250 + 144) = 0;
  *(_QWORD *)(v250 + 88) = v253;
  *(_QWORD *)(v250 + 96) = v250 + 96;
  *(_QWORD *)(v250 + 104) = v250 + 96;
  *(_QWORD *)(v250 + 112) = 0;
  *(_QWORD *)(v250 + 120) = v250 + 120;
  *(_QWORD *)(v250 + 128) = v250 + 120;
  *(_QWORD *)(v250 + 136) = 0;
  if (!*(_QWORD *)(v250 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v254 = (std::__shared_weak_count *)operator new();
  v254->__shared_owners_ = 0;
  v255 = (unint64_t *)&v254->__shared_owners_;
  v254->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BB480;
  v254->__shared_weak_owners_ = 0;
  v254[1].__vftable = (std::__shared_weak_count_vtbl *)v250;
  v256 = *(std::__shared_weak_count **)(v250 + 40);
  if (v256)
  {
    if (v256->__shared_owners_ != -1)
      goto LABEL_372;
    do
      v257 = __ldxr(v255);
    while (__stxr(v257 + 1, v255));
    v258 = (unint64_t *)&v254->__shared_weak_owners_;
    do
      v259 = __ldxr(v258);
    while (__stxr(v259 + 1, v258));
    *(_QWORD *)(v250 + 32) = v250;
    *(_QWORD *)(v250 + 40) = v254;
    std::__shared_weak_count::__release_weak(v256);
  }
  else
  {
    do
      v260 = __ldxr(v255);
    while (__stxr(v260 + 1, v255));
    v261 = (unint64_t *)&v254->__shared_weak_owners_;
    do
      v262 = __ldxr(v261);
    while (__stxr(v262 + 1, v261));
    *(_QWORD *)(v250 + 32) = v250;
    *(_QWORD *)(v250 + 40) = v254;
  }
  do
    v263 = __ldaxr(v255);
  while (__stlxr(v263 - 1, v255));
  if (!v263)
  {
    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
    std::__shared_weak_count::__release_weak(v254);
  }
LABEL_372:
  v264 = (std::__shared_weak_count *)*((_QWORD *)&v545 + 1);
  if (*((_QWORD *)&v545 + 1))
  {
    v265 = (unint64_t *)(*((_QWORD *)&v545 + 1) + 8);
    do
      v266 = __ldaxr(v265);
    while (__stlxr(v266 - 1, v265));
    if (!v266)
    {
      ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
      std::__shared_weak_count::__release_weak(v264);
    }
  }
  *(_QWORD *)&v545 = v250;
  *((_QWORD *)&v545 + 1) = v254;
  v267 = (std::__shared_weak_count *)*((_QWORD *)&v542 + 1);
  if (*((_QWORD *)&v542 + 1))
  {
    v268 = (unint64_t *)(*((_QWORD *)&v542 + 1) + 8);
    do
      v269 = __ldaxr(v268);
    while (__stlxr(v269 - 1, v268));
    if (!v269)
    {
      ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
      std::__shared_weak_count::__release_weak(v267);
    }
  }
  v270 = v550;
  v550 = 0uLL;
  *(_OWORD *)&v435[1] = *(_OWORD *)v418;
  v271 = v418[2];
  v435[0] = &off_24C9B29A0;
  memset(v418, 0, sizeof(v418));
  v436 = v271;
  v437 = 0x7974706D45uLL;
  *(_DWORD *)((char *)&v438 + 3) = *(_DWORD *)((char *)v551 + 3);
  LODWORD(v438) = v551[0];
  HIBYTE(v438) = 5;
  v551[0] = 0;
  *(_DWORD *)((char *)v551 + 3) = 0;
  v439 = v270;
  v542 = 0uLL;
  v272 = v545;
  v440 = v545;
  v545 = 0uLL;
  if (*((_QWORD *)&v440 + 1))
  {
    v273 = (unint64_t *)(*((_QWORD *)&v272 + 1) + 16);
    do
      v274 = __ldxr(v273);
    while (__stxr(v274 + 1, v273));
  }
  v441 = &off_24C9B2630;
  v275 = operator new();
  *(_QWORD *)v275 = &off_24C9BB4D0;
  *(_OWORD *)(v275 + 8) = v272;
  *(_QWORD *)&v442 = v275;
  v277 = *((_QWORD *)&v440 + 1);
  v276 = v440;
  if (!*((_QWORD *)&v440 + 1))
  {
    *((_QWORD *)&v442 + 1) = v440;
    v443 = 0;
    if ((_QWORD)v440)
      v281 = v440 + 16;
    else
      v281 = 0;
    goto LABEL_402;
  }
  v278 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 16);
  do
    v279 = __ldxr(v278);
  while (__stxr(v279 + 1, v278));
  v280 = *((_QWORD *)&v440 + 1);
  *((_QWORD *)&v442 + 1) = v276;
  v443 = v277;
  if ((_QWORD)v440)
    v281 = v440 + 16;
  else
    v281 = 0;
  if (!*((_QWORD *)&v440 + 1))
  {
    v276 = v440;
LABEL_402:
    v284 = 0;
    v444 = &off_24C9B29D0;
    v445 = v281;
    goto LABEL_403;
  }
  v282 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 16);
  do
    v283 = __ldxr(v282);
  while (__stxr(v283 + 1, v282));
  v284 = *((_QWORD *)&v440 + 1);
  v276 = v440;
  v444 = &off_24C9B29D0;
  *(_QWORD *)&v445 = v281;
  *((_QWORD *)&v445 + 1) = v280;
  if (*((_QWORD *)&v440 + 1))
  {
    v285 = (unint64_t *)(*((_QWORD *)&v440 + 1) + 16);
    do
      v286 = __ldxr(v285);
    while (__stxr(v286 + 1, v285));
  }
LABEL_403:
  if (v276)
    v287 = v276 + 24;
  else
    v287 = 0;
  v446 = &off_24C9B2310;
  *(_QWORD *)&v447 = v287;
  *((_QWORD *)&v447 + 1) = v284;
  if (SHIBYTE(v418[2]) < 0)
    operator delete(v418[0]);
  v288 = (std::__shared_weak_count *)*((_QWORD *)&v548 + 1);
  if (*((_QWORD *)&v548 + 1))
  {
    v289 = (unint64_t *)(*((_QWORD *)&v548 + 1) + 8);
    do
      v290 = __ldaxr(v289);
    while (__stlxr(v290 - 1, v289));
    if (!v290)
    {
      ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
      std::__shared_weak_count::__release_weak(v288);
    }
  }
  v291 = (std::__shared_weak_count *)*((_QWORD *)&v550 + 1);
  if (!*((_QWORD *)&v550 + 1))
    goto LABEL_417;
  v292 = (unint64_t *)(*((_QWORD *)&v550 + 1) + 8);
  do
    v293 = __ldaxr(v292);
  while (__stlxr(v293 - 1, v292));
  if (!v293)
  {
    ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
    std::__shared_weak_count::__release_weak(v291);
    if (v428)
      goto LABEL_421;
  }
  else
  {
LABEL_417:
    if (v428)
      goto LABEL_421;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_421:
  if (*((char *)a2 + 23) < 0)
  {
    sub_20E860C04(v416, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v416 = *a2;
    v417 = *((_QWORD *)a2 + 2);
  }
  v295 = *(void **)a3;
  v294 = *(_QWORD *)(a3 + 8);
  if (v294)
  {
    v296 = (unint64_t *)(v294 + 8);
    do
      v297 = __ldxr(v296);
    while (__stxr(v297 + 1, v296));
  }
  v298 = *(uint64_t **)(a4 + 48);
  v299 = (std::__shared_weak_count *)v298[1];
  v414 = *v298;
  v300 = *v298;
  *v298 = 0;
  v298[1] = 0;
  v301 = v416[0];
  v302 = v416[1];
  v540[0] = v417;
  *(_DWORD *)((char *)v540 + 3) = *(_DWORD *)((char *)&v417 + 3);
  v303 = SHIBYTE(v417);
  v416[0] = 0;
  v416[1] = 0;
  v417 = 0;
  v539[0] = *(_DWORD *)v415;
  *(_DWORD *)((char *)v539 + 3) = *(_DWORD *)&v415[3];
  *(_QWORD *)&v538 = v295;
  *((_QWORD *)&v538 + 1) = v294;
  v536 = v300;
  v537 = v299;
  if (v299)
  {
    v304 = (unint64_t *)&v299->__shared_owners_;
    do
      v305 = __ldxr(v304);
    while (__stxr(v305 + 1, v304));
  }
  if (v303 < 0)
  {
    sub_20E860C04(&v545, v301, (unint64_t)v302);
  }
  else
  {
    *(_QWORD *)&v545 = v301;
    *((_QWORD *)&v545 + 1) = v302;
    *(_DWORD *)v546 = v540[0];
    *(_DWORD *)&v546[3] = *(_DWORD *)((char *)v540 + 3);
    v547 = v303;
  }
  v542 = 0x7974706D45uLL;
  *(_DWORD *)v543 = v539[0];
  *(_DWORD *)&v543[3] = *(_DWORD *)((char *)v539 + 3);
  v544 = 5;
  *(_DWORD *)((char *)v541 + 3) = *(_DWORD *)((char *)v540 + 3);
  v306 = v540[0];
  HIBYTE(v541[0]) = HIBYTE(v540[0]);
  v540[0] = 0;
  *(_DWORD *)((char *)v540 + 3) = 0;
  v549[0] = v306;
  *(_DWORD *)((char *)v549 + 3) = *(_DWORD *)((char *)v541 + 3);
  *(_DWORD *)((char *)v541 + 3) = 0;
  v541[0] = 0;
  *(_QWORD *)&v548 = v295;
  *((_QWORD *)&v548 + 1) = v294;
  if (v294)
  {
    v307 = (unint64_t *)(v294 + 8);
    do
      v308 = __ldxr(v307);
    while (__stxr(v308 + 1, v307));
  }
  v309 = operator new();
  v551[0] = v549[0];
  *(_DWORD *)((char *)v551 + 3) = *(_DWORD *)((char *)v549 + 3);
  v549[0] = 0;
  *(_DWORD *)((char *)v549 + 3) = 0;
  v310 = v548;
  v548 = 0uLL;
  *(_BYTE *)(v309 + 8) = 1;
  *(_QWORD *)(v309 + 32) = 0;
  *(_QWORD *)(v309 + 40) = 0;
  *(_QWORD *)v309 = &off_24C9BB548;
  *(_QWORD *)(v309 + 16) = &unk_24C9BB5C0;
  *(_QWORD *)(v309 + 24) = &unk_24C9BB600;
  *(_QWORD *)(v309 + 48) = v301;
  *(_QWORD *)(v309 + 56) = v302;
  v311 = v551[0];
  *(_DWORD *)(v309 + 67) = *(_DWORD *)((char *)v551 + 3);
  *(_DWORD *)(v309 + 64) = v311;
  *(_BYTE *)(v309 + 71) = v303;
  v551[0] = 0;
  *(_DWORD *)((char *)v551 + 3) = 0;
  *(_OWORD *)(v309 + 72) = v310;
  v550 = 0uLL;
  v312 = (_QWORD *)operator new();
  *v312 = &off_24C9BB6E8;
  v312[1] = v300;
  v312[2] = v299;
  v537 = 0;
  v536 = 0;
  *(_QWORD *)(v309 + 144) = 0;
  *(_QWORD *)(v309 + 88) = v312;
  *(_QWORD *)(v309 + 96) = v309 + 96;
  *(_QWORD *)(v309 + 104) = v309 + 96;
  *(_QWORD *)(v309 + 112) = 0;
  *(_QWORD *)(v309 + 120) = v309 + 120;
  *(_QWORD *)(v309 + 128) = v309 + 120;
  *(_QWORD *)(v309 + 136) = 0;
  if (!*(_QWORD *)(v309 + 72)
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 109, (uint64_t)"scheduler_", 10, (uint64_t)"scheduler must be valid", 23, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v313 = (std::__shared_weak_count *)operator new();
  v313->__shared_owners_ = 0;
  v314 = (unint64_t *)&v313->__shared_owners_;
  v313->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BBB88;
  v313->__shared_weak_owners_ = 0;
  v313[1].__vftable = (std::__shared_weak_count_vtbl *)v309;
  v315 = *(std::__shared_weak_count **)(v309 + 40);
  if (v315)
  {
    if (v315->__shared_owners_ != -1)
      goto LABEL_451;
    do
      v316 = __ldxr(v314);
    while (__stxr(v316 + 1, v314));
    v317 = (unint64_t *)&v313->__shared_weak_owners_;
    do
      v318 = __ldxr(v317);
    while (__stxr(v318 + 1, v317));
    *(_QWORD *)(v309 + 32) = v309;
    *(_QWORD *)(v309 + 40) = v313;
    std::__shared_weak_count::__release_weak(v315);
  }
  else
  {
    do
      v319 = __ldxr(v314);
    while (__stxr(v319 + 1, v314));
    v320 = (unint64_t *)&v313->__shared_weak_owners_;
    do
      v321 = __ldxr(v320);
    while (__stxr(v321 + 1, v320));
    *(_QWORD *)(v309 + 32) = v309;
    *(_QWORD *)(v309 + 40) = v313;
  }
  do
    v322 = __ldaxr(v314);
  while (__stlxr(v322 - 1, v314));
  if (!v322)
  {
    ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
    std::__shared_weak_count::__release_weak(v313);
  }
LABEL_451:
  v323 = (std::__shared_weak_count *)*((_QWORD *)&v550 + 1);
  if (*((_QWORD *)&v550 + 1))
  {
    v324 = (unint64_t *)(*((_QWORD *)&v550 + 1) + 8);
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  *(_QWORD *)&v550 = v309;
  *((_QWORD *)&v550 + 1) = v313;
  v326 = (std::__shared_weak_count *)*((_QWORD *)&v548 + 1);
  if (*((_QWORD *)&v548 + 1))
  {
    v327 = (unint64_t *)(*((_QWORD *)&v548 + 1) + 8);
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
  v548 = v538;
  v538 = 0uLL;
  sub_20EA2B984((uint64_t)v418, &v545, &v542, (uint64_t)&v550, (uint64_t)&v548);
  v329 = (std::__shared_weak_count *)*((_QWORD *)&v548 + 1);
  if (*((_QWORD *)&v548 + 1))
  {
    v330 = (unint64_t *)(*((_QWORD *)&v548 + 1) + 8);
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = (std::__shared_weak_count *)*((_QWORD *)&v550 + 1);
  if (!*((_QWORD *)&v550 + 1))
    goto LABEL_470;
  v333 = (unint64_t *)(*((_QWORD *)&v550 + 1) + 8);
  do
    v334 = __ldaxr(v333);
  while (__stlxr(v334 - 1, v333));
  if (!v334)
  {
    ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
    std::__shared_weak_count::__release_weak(v332);
    if ((v544 & 0x80000000) == 0)
    {
LABEL_471:
      if ((v547 & 0x80000000) == 0)
        goto LABEL_472;
LABEL_476:
      operator delete((void *)v545);
      v335 = v537;
      if (!v537)
        goto LABEL_481;
      goto LABEL_477;
    }
  }
  else
  {
LABEL_470:
    if ((v544 & 0x80000000) == 0)
      goto LABEL_471;
  }
  operator delete((void *)v542);
  if (v547 < 0)
    goto LABEL_476;
LABEL_472:
  v335 = v537;
  if (!v537)
    goto LABEL_481;
LABEL_477:
  v336 = (unint64_t *)&v335->__shared_owners_;
  do
    v337 = __ldaxr(v336);
  while (__stlxr(v337 - 1, v336));
  if (!v337)
  {
    ((void (*)(std::__shared_weak_count *))v335->__on_zero_shared)(v335);
    std::__shared_weak_count::__release_weak(v335);
  }
LABEL_481:
  v338 = (std::__shared_weak_count *)*((_QWORD *)&v538 + 1);
  if (!*((_QWORD *)&v538 + 1))
    goto LABEL_485;
  v339 = (unint64_t *)(*((_QWORD *)&v538 + 1) + 8);
  do
    v340 = __ldaxr(v339);
  while (__stlxr(v340 - 1, v339));
  if (!v340)
  {
    ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
    std::__shared_weak_count::__release_weak(v338);
    if (v414)
      goto LABEL_489;
  }
  else
  {
LABEL_485:
    if (v414)
      goto LABEL_489;
  }
  if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/Channel.h", 492, (uint64_t)"callable != nullptr", 19, (uint64_t)"Callable must be valid", 22, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
LABEL_489:
  v341 = operator new();
  *(_QWORD *)v341 = &off_24C9B2908;
  *(_OWORD *)(v341 + 8) = v526;
  *(_QWORD *)(v341 + 24) = v527;
  v526 = 0uLL;
  *(_OWORD *)(v341 + 32) = v528;
  *(_QWORD *)(v341 + 48) = v529;
  v527 = 0;
  v528 = 0uLL;
  v529 = 0;
  *(_OWORD *)(v341 + 56) = v530;
  v530 = 0uLL;
  *(_OWORD *)(v341 + 72) = v531;
  v531 = 0uLL;
  *(_QWORD *)(v341 + 88) = &off_24C9B2938;
  v342 = v532;
  v532 = 0uLL;
  *(_OWORD *)(v341 + 96) = v342;
  *(_QWORD *)(v341 + 112) = v533;
  *(_QWORD *)(v341 + 120) = &off_24C9B2520;
  *(_OWORD *)(v341 + 128) = v534;
  v533 = 0;
  *(_QWORD *)&v534 = 0;
  *(_QWORD *)(v341 + 144) = &off_24C9B2310;
  *(_OWORD *)(v341 + 152) = v535;
  *((_QWORD *)&v534 + 1) = 0;
  v535 = 0uLL;
  *(_QWORD *)(v341 + 168) = &off_24C9B28A0;
  v343 = *(_OWORD *)&v509[8];
  *(_QWORD *)(v341 + 192) = v510;
  *(_OWORD *)(v341 + 176) = v343;
  *(_OWORD *)&v509[8] = 0uLL;
  v344 = v511;
  *(_QWORD *)(v341 + 216) = v512;
  *(_OWORD *)(v341 + 200) = v344;
  v510 = 0;
  v511 = 0uLL;
  v512 = 0;
  v345 = v513;
  v513 = 0uLL;
  v346 = v514;
  *(_OWORD *)(v341 + 224) = v345;
  *(_OWORD *)(v341 + 240) = v346;
  v514 = 0uLL;
  *(_QWORD *)(v341 + 256) = &off_24C9B28D0;
  v347 = v515;
  v515 = 0uLL;
  *(_OWORD *)(v341 + 264) = v347;
  *(_QWORD *)(v341 + 280) = v516;
  *(_QWORD *)(v341 + 288) = &off_24C9B2520;
  *(_OWORD *)(v341 + 296) = v517;
  v516 = 0;
  *(_QWORD *)&v517 = 0;
  *(_QWORD *)(v341 + 312) = &off_24C9B2310;
  *(_OWORD *)(v341 + 320) = v518;
  *((_QWORD *)&v517 + 1) = 0;
  v518 = 0uLL;
  *(_QWORD *)(v341 + 336) = &off_24C9B2838;
  v348 = v495;
  *(_QWORD *)(v341 + 360) = v493;
  *(_OWORD *)(v341 + 344) = *(_OWORD *)&__p[8];
  *(_OWORD *)&__p[8] = 0uLL;
  v349 = v494;
  *(_QWORD *)(v341 + 384) = v348;
  *(_OWORD *)(v341 + 368) = v349;
  v493 = 0;
  v494 = 0uLL;
  v495 = 0;
  v350 = v496;
  v496 = 0uLL;
  v351 = v497;
  *(_OWORD *)(v341 + 392) = v350;
  *(_OWORD *)(v341 + 408) = v351;
  v497 = 0uLL;
  *(_QWORD *)(v341 + 424) = &off_24C9B2868;
  v352 = v498;
  v498 = 0uLL;
  *(_OWORD *)(v341 + 432) = v352;
  *(_QWORD *)(v341 + 448) = v499;
  *(_QWORD *)(v341 + 456) = &off_24C9B2520;
  *(_OWORD *)(v341 + 464) = v500;
  v499 = 0;
  *(_QWORD *)&v500 = 0;
  *(_QWORD *)(v341 + 480) = &off_24C9B2310;
  *(_OWORD *)(v341 + 488) = v501;
  *((_QWORD *)&v500 + 1) = 0;
  v501 = 0uLL;
  *(_QWORD *)(v341 + 504) = &off_24C9B27D0;
  v353 = *(_OWORD *)&v475[8];
  v354 = v478;
  *(_QWORD *)(v341 + 528) = v476;
  *(_OWORD *)(v341 + 512) = v353;
  *(_OWORD *)&v475[8] = 0uLL;
  v355 = v477;
  *(_QWORD *)(v341 + 552) = v354;
  *(_OWORD *)(v341 + 536) = v355;
  v476 = 0;
  v477 = 0uLL;
  v478 = 0;
  v356 = v479;
  v479 = 0uLL;
  v357 = v480;
  *(_OWORD *)(v341 + 560) = v356;
  *(_OWORD *)(v341 + 576) = v357;
  v480 = 0uLL;
  *(_QWORD *)(v341 + 592) = &off_24C9B2800;
  v358 = v481;
  v481 = 0uLL;
  *(_OWORD *)(v341 + 600) = v358;
  *(_QWORD *)(v341 + 616) = v482;
  *(_QWORD *)(v341 + 624) = &off_24C9B2520;
  *(_OWORD *)(v341 + 632) = v483;
  v482 = 0;
  *(_QWORD *)&v483 = 0;
  *(_QWORD *)(v341 + 648) = &off_24C9B2310;
  *(_OWORD *)(v341 + 656) = v484;
  *((_QWORD *)&v483 + 1) = 0;
  v484 = 0uLL;
  *(_QWORD *)(v341 + 672) = &off_24C9B2A40;
  v359 = *(_OWORD *)&v455[8];
  *(_QWORD *)(v341 + 696) = v456;
  *(_OWORD *)(v341 + 680) = v359;
  *(_QWORD *)&v455[8] = 0;
  *(_QWORD *)&v455[16] = 0;
  v456 = 0;
  v360 = v457;
  *(_QWORD *)(v341 + 720) = v458;
  *(_OWORD *)(v341 + 704) = v360;
  v457 = 0uLL;
  v458 = 0;
  v361 = v459;
  v459 = 0uLL;
  v362 = v460;
  *(_OWORD *)(v341 + 728) = v361;
  *(_OWORD *)(v341 + 744) = v362;
  v460 = 0uLL;
  *(_QWORD *)(v341 + 760) = &off_24C9B2AE0;
  *(_OWORD *)(v341 + 768) = v462;
  *(_QWORD *)(v341 + 784) = v463;
  *((_QWORD *)&v462 + 1) = 0;
  v463 = 0;
  *(_QWORD *)(v341 + 792) = &off_24C9B2A70;
  *(_OWORD *)(v341 + 800) = v465;
  *(_QWORD *)&v462 = 0;
  v465 = 0uLL;
  *(_QWORD *)(v341 + 816) = &off_24C9B2310;
  *(_OWORD *)(v341 + 824) = v467;
  v467 = 0uLL;
  *(_QWORD *)(v341 + 840) = &off_24C9B29A0;
  v363 = *(_OWORD *)&v435[1];
  *(_QWORD *)(v341 + 864) = v436;
  *(_OWORD *)(v341 + 848) = v363;
  v435[1] = 0;
  v435[2] = 0;
  v436 = 0;
  v364 = v437;
  *(_QWORD *)(v341 + 888) = v438;
  *(_OWORD *)(v341 + 872) = v364;
  v437 = 0uLL;
  v438 = 0;
  v365 = v439;
  v439 = 0uLL;
  v366 = v440;
  *(_OWORD *)(v341 + 896) = v365;
  *(_OWORD *)(v341 + 912) = v366;
  v440 = 0uLL;
  *(_QWORD *)(v341 + 928) = &off_24C9B2630;
  *(_OWORD *)(v341 + 936) = v442;
  *(_QWORD *)(v341 + 952) = v443;
  *((_QWORD *)&v442 + 1) = 0;
  v443 = 0;
  *(_QWORD *)(v341 + 960) = &off_24C9B29D0;
  *(_OWORD *)(v341 + 968) = v445;
  v445 = 0uLL;
  *(_QWORD *)&v442 = 0;
  *(_QWORD *)(v341 + 984) = &off_24C9B2310;
  *(_OWORD *)(v341 + 992) = v447;
  v447 = 0uLL;
  *(_QWORD *)(v341 + 1008) = &off_24C9B24F0;
  v367 = *(_OWORD *)&v418[1];
  *(_QWORD *)(v341 + 1032) = v419;
  *(_OWORD *)(v341 + 1016) = v367;
  v418[1] = 0;
  v418[2] = 0;
  v368 = v420;
  v369 = v425;
  *(_QWORD *)(v341 + 1056) = v421;
  *(_OWORD *)(v341 + 1040) = v368;
  v419 = 0;
  v420 = 0uLL;
  v421 = 0;
  v370 = v422;
  v422 = 0uLL;
  v371 = v423;
  *(_OWORD *)(v341 + 1064) = v370;
  *(_OWORD *)(v341 + 1080) = v371;
  v423 = 0uLL;
  *(_QWORD *)(v341 + 1096) = &off_24C9B2558;
  v372 = v424;
  v424 = 0uLL;
  *(_OWORD *)(v341 + 1104) = v372;
  *(_QWORD *)(v341 + 1120) = v369;
  *(_QWORD *)(v341 + 1128) = &off_24C9B2520;
  *(_OWORD *)(v341 + 1136) = v426;
  v425 = 0;
  v426 = 0uLL;
  *(_QWORD *)(v341 + 1152) = &off_24C9B2310;
  *(_OWORD *)(v341 + 1160) = v427;
  v427 = 0uLL;
  *a1 = v341;
  sub_20E9643EC((uint64_t)v418);
  if (v299)
  {
    v373 = (unint64_t *)&v299->__shared_owners_;
    do
      v374 = __ldaxr(v373);
    while (__stlxr(v374 - 1, v373));
    if (!v374)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  if (SHIBYTE(v417) < 0)
    operator delete(v416[0]);
  sub_20E966300((uint64_t)v435);
  v375 = v429;
  if (v429)
  {
    v376 = (unint64_t *)&v429->__shared_owners_;
    do
      v377 = __ldaxr(v376);
    while (__stlxr(v377 - 1, v376));
    if (!v377)
    {
      ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
      std::__shared_weak_count::__release_weak(v375);
    }
  }
  v378 = v431;
  if (v431)
  {
    v379 = (unint64_t *)&v431->__shared_owners_;
    do
      v380 = __ldaxr(v379);
    while (__stlxr(v380 - 1, v379));
    if (!v380)
    {
      ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
      std::__shared_weak_count::__release_weak(v378);
      if ((SHIBYTE(v434) & 0x80000000) == 0)
        goto LABEL_507;
      goto LABEL_506;
    }
  }
  if (SHIBYTE(v434) < 0)
LABEL_506:
    operator delete((void *)v433);
LABEL_507:
  sub_20E96672C((uint64_t)v455);
  v381 = v449;
  if (v449)
  {
    v382 = (unint64_t *)&v449->__shared_owners_;
    do
      v383 = __ldaxr(v382);
    while (__stlxr(v383 - 1, v382));
    if (!v383)
    {
      ((void (*)(std::__shared_weak_count *))v381->__on_zero_shared)(v381);
      std::__shared_weak_count::__release_weak(v381);
    }
  }
  v384 = v451;
  if (v451)
  {
    v385 = (unint64_t *)&v451->__shared_owners_;
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
      if ((SHIBYTE(v454) & 0x80000000) == 0)
        goto LABEL_518;
      goto LABEL_517;
    }
  }
  if (SHIBYTE(v454) < 0)
LABEL_517:
    operator delete((void *)v453);
LABEL_518:
  sub_20E965698((uint64_t)v475);
  v387 = v469;
  if (v469)
  {
    v388 = (unint64_t *)&v469->__shared_owners_;
    do
      v389 = __ldaxr(v388);
    while (__stlxr(v389 - 1, v388));
    if (!v389)
    {
      ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
      std::__shared_weak_count::__release_weak(v387);
    }
  }
  v390 = v471;
  if (v471)
  {
    v391 = (unint64_t *)&v471->__shared_owners_;
    do
      v392 = __ldaxr(v391);
    while (__stlxr(v392 - 1, v391));
    if (!v392)
    {
      ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
      std::__shared_weak_count::__release_weak(v390);
      if ((SHIBYTE(v474) & 0x80000000) == 0)
        goto LABEL_529;
      goto LABEL_528;
    }
  }
  if (SHIBYTE(v474) < 0)
LABEL_528:
    operator delete((void *)v473);
LABEL_529:
  sub_20E965944((uint64_t)__p);
  v393 = v486;
  if (v486)
  {
    v394 = (unint64_t *)&v486->__shared_owners_;
    do
      v395 = __ldaxr(v394);
    while (__stlxr(v395 - 1, v394));
    if (!v395)
    {
      ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
      std::__shared_weak_count::__release_weak(v393);
    }
  }
  v396 = v488;
  if (v488)
  {
    v397 = (unint64_t *)&v488->__shared_owners_;
    do
      v398 = __ldaxr(v397);
    while (__stlxr(v398 - 1, v397));
    if (!v398)
    {
      ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
      std::__shared_weak_count::__release_weak(v396);
      if ((SHIBYTE(v491) & 0x80000000) == 0)
        goto LABEL_540;
      goto LABEL_539;
    }
  }
  if (SHIBYTE(v491) < 0)
LABEL_539:
    operator delete((void *)v490);
LABEL_540:
  sub_20E965BF0((uint64_t)v509);
  v399 = v503;
  if (v503)
  {
    v400 = (unint64_t *)&v503->__shared_owners_;
    do
      v401 = __ldaxr(v400);
    while (__stlxr(v401 - 1, v400));
    if (!v401)
    {
      ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
      std::__shared_weak_count::__release_weak(v399);
    }
  }
  v402 = v505;
  if (v505)
  {
    v403 = (unint64_t *)&v505->__shared_owners_;
    do
      v404 = __ldaxr(v403);
    while (__stlxr(v404 - 1, v403));
    if (!v404)
    {
      ((void (*)(std::__shared_weak_count *))v402->__on_zero_shared)(v402);
      std::__shared_weak_count::__release_weak(v402);
      if ((SHIBYTE(v508) & 0x80000000) == 0)
        goto LABEL_551;
      goto LABEL_550;
    }
  }
  if (SHIBYTE(v508) < 0)
LABEL_550:
    operator delete((void *)__src);
LABEL_551:
  sub_20E965E9C((uint64_t)v525);
  v405 = v520;
  if (v520)
  {
    v406 = (unint64_t *)&v520->__shared_owners_;
    do
      v407 = __ldaxr(v406);
    while (__stlxr(v407 - 1, v406));
    if (!v407)
    {
      ((void (*)(std::__shared_weak_count *))v405->__on_zero_shared)(v405);
      std::__shared_weak_count::__release_weak(v405);
    }
  }
  v408 = v522;
  if (!v522)
    goto LABEL_560;
  v409 = (unint64_t *)&v522->__shared_owners_;
  do
    v410 = __ldaxr(v409);
  while (__stlxr(v410 - 1, v409));
  if (v410)
  {
LABEL_560:
    if ((SHIBYTE(v524) & 0x80000000) == 0)
      return;
    goto LABEL_561;
  }
  ((void (*)(std::__shared_weak_count *))v408->__on_zero_shared)(v408);
  std::__shared_weak_count::__release_weak(v408);
  if (SHIBYTE(v524) < 0)
LABEL_561:
    operator delete((void *)__dst);
}

void sub_20EA0D360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61)
{
  void *v61;

  sub_20E86665C((uint64_t)&STACK[0x6B0]);
  sub_20E86665C((uint64_t)&STACK[0x6C0]);
  operator delete(v61);
  sub_20E86665C((uint64_t)&a16);
  sub_20E86665C((uint64_t)&a18);
  if (a26 < 0)
    operator delete(__p);
  sub_20E966300((uint64_t)&a61);
  sub_20E86665C((uint64_t)&a49);
  sub_20E86665C((uint64_t)&a51);
  if (a59 < 0)
    operator delete(a54);
  sub_20E96672C((uint64_t)&STACK[0x260]);
  sub_20E86665C((uint64_t)&STACK[0x218]);
  sub_20E86665C((uint64_t)&STACK[0x228]);
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  sub_20E965698((uint64_t)&STACK[0x350]);
  sub_20E86665C((uint64_t)&STACK[0x308]);
  sub_20E86665C((uint64_t)&STACK[0x318]);
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  sub_20E965944((uint64_t)&STACK[0x440]);
  sub_20E86665C((uint64_t)&STACK[0x3F8]);
  sub_20E86665C((uint64_t)&STACK[0x408]);
  if (SLOBYTE(STACK[0x437]) < 0)
    operator delete((void *)STACK[0x420]);
  sub_20E965BF0((uint64_t)&STACK[0x528]);
  sub_20E86665C((uint64_t)&STACK[0x4E8]);
  sub_20E86665C((uint64_t)&STACK[0x4F8]);
  if (SLOBYTE(STACK[0x527]) < 0)
    operator delete((void *)STACK[0x510]);
  sub_20E965E9C((uint64_t)&STACK[0x608]);
  sub_20E86665C((uint64_t)&STACK[0x5D0]);
  sub_20E86665C((uint64_t)&STACK[0x5E0]);
  if ((SLOBYTE(STACK[0x607]) & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete((void *)STACK[0x5F0]);
  _Unwind_Resume(a1);
}

void sub_20EA0D7F4()
{
  int v0;
  void *v1;
  uint64_t v2;

  sub_20E86665C(v2 - 224);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EA0D6C8);
}

void sub_20EA0D810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  va_list va;

  va_start(va, a16);
  if (v18)
  {
    std::__shared_weak_count::__release_weak(v18);
    sub_20E86665C(v17);
    sub_20E86665C(v16);
    if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x27F]) & 0x80000000) == 0)
      {
LABEL_5:
        sub_20E86665C(v19 - 192);
        sub_20E86665C((uint64_t)va);
        JUMPOUT(0x20EA0D900);
      }
LABEL_4:
      operator delete((void *)STACK[0x268]);
      goto LABEL_5;
    }
  }
  else
  {
    sub_20E86665C(v17);
    sub_20E86665C(v16);
    if ((SLOBYTE(STACK[0x297]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete((void *)STACK[0x280]);
  if ((SLOBYTE(STACK[0x27F]) & 0x80000000) == 0)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_20EA0D890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20EA0D8F8);
}

void sub_20EA0D938()
{
  int v0;
  void *v1;
  uint64_t v2;

  sub_20E86665C(v2 - 192);
  if (v0 < 0)
    operator delete(v1);
  JUMPOUT(0x20EA0D900);
}

void sub_20EA0D954(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  sub_20E86665C(v60 - 192);
  sub_20E86665C((uint64_t)&a25);
  if (a60 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  sub_20E86665C(v60 - 128);
  sub_20E86665C(v60 - 224);
  JUMPOUT(0x20EA0D74CLL);
}

void sub_20EA0D978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_20E86665C((uint64_t)va);
  JUMPOUT(0x20EA0D9E0);
}

void sub_20EA0D9EC()
{
  int v0;
  uint64_t v1;

  sub_20E86665C(v1 - 192);
  if (v0 < 0)
    JUMPOUT(0x20EA0DA00);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  sub_20E86665C(v1 - 128);
  sub_20E86665C(v1 - 224);
  JUMPOUT(0x20EA0D74CLL);
}

void sub_20EA0DA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  sub_20E86665C((uint64_t)&a25);
  sub_20E86665C((uint64_t)&a55);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  sub_20E86665C(v55 - 224);
  sub_20E86665C(v55 - 192);
  JUMPOUT(0x20EA0D774);
}

void sub_20EA0DA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  sub_20E86665C((uint64_t)&a55);
  JUMPOUT(0x20EA0DAC8);
}

void sub_20EA0DAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  int v16;
  uint64_t v17;
  va_list va;

  va_start(va, a16);
  sub_20E86665C((uint64_t)va);
  if (v16 < 0)
    JUMPOUT(0x20EA0DAE8);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  sub_20E86665C(v17 - 224);
  sub_20E86665C(v17 - 192);
  JUMPOUT(0x20EA0D774);
}

void sub_20EA0DB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  sub_20E86665C((uint64_t)&a55);
  sub_20E86665C((uint64_t)&STACK[0x260]);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  sub_20E86665C(v55 - 192);
  sub_20E86665C((uint64_t)&a25);
  JUMPOUT(0x20EA0D79CLL);
}

void sub_20EA0DB48()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x260]);
  JUMPOUT(0x20EA0DBB0);
}

void sub_20EA0DBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  int v55;
  uint64_t v56;

  sub_20E86665C((uint64_t)&a55);
  if (v55 < 0)
    JUMPOUT(0x20EA0DBD0);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  sub_20E86665C(v56 - 192);
  sub_20E86665C((uint64_t)&a25);
  JUMPOUT(0x20EA0D79CLL);
}

void sub_20EA0DC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  sub_20E86665C((uint64_t)&STACK[0x260]);
  sub_20E86665C((uint64_t)&STACK[0x350]);
  if (SLOBYTE(STACK[0x457]) < 0)
    operator delete((void *)STACK[0x440]);
  if (SLOBYTE(STACK[0x53F]) < 0)
    operator delete((void *)STACK[0x528]);
  sub_20E86665C((uint64_t)&a25);
  sub_20E86665C((uint64_t)&a55);
  JUMPOUT(0x20EA0D7C4);
}

void sub_20EA0DC30()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  sub_20E86665C((uint64_t)&STACK[0x350]);
  JUMPOUT(0x20EA0DC98);
}

void sub_20EA0DCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  int v55;

  sub_20E86665C((uint64_t)&STACK[0x260]);
  if (v55 < 0)
    JUMPOUT(0x20EA0DCB8);
  if (SLOBYTE(STACK[0x53F]) < 0)
    operator delete((void *)STACK[0x528]);
  sub_20E86665C((uint64_t)&a25);
  sub_20E86665C((uint64_t)&a55);
  JUMPOUT(0x20EA0D7C4);
}

void sub_20EA0DCF8(uint64_t a1)
{
  sub_20EA0F5EC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA0DD1C(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *p_on_zero_shared;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B8C48;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9B8C98;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    p_on_zero_shared = (unint64_t *)&v53->__on_zero_shared;
    do
      v55 = __ldxr(p_on_zero_shared);
    while (__stxr(v55 + 1, p_on_zero_shared));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9B8D18;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EA0E17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EA02254((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EA02254((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA0E1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EA0E220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA0E244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA0E278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA0E298(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA0E2A8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA0E2B4(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA0E2C4(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *p_on_zero_shared;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 *v75;
  std::string *v76;
  std::runtime_error *exception;
  std::runtime_error *v78;
  __int128 v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::runtime_error v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  _QWORD *v87;
  __int128 *v88;
  _QWORD v89[3];
  std::string v90;
  std::string *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v86 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v86 + 1) = 45;
    v74 = (_QWORD *)a1[6];
    v73 = a1 + 6;
    v72 = v74;
    v75 = (__int128 *)*((unsigned __int8 *)v73 + 23);
    if ((char)v75 < 0)
      v75 = (__int128 *)v73[1];
    else
      v72 = v73;
    v87 = v72;
    v88 = v75;
    sub_20E8778D4((uint64_t)&v86, (uint64_t)v89, 0, 0, &v90);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v90;
    else
      v76 = (std::string *)v90.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v83, (const char *)v76);
    v83.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v78 = std::runtime_error::runtime_error(exception, &v83);
    v78->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v78, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v82 = v6;
    v80 = &v6[1].__vftable;
    v81 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B8C48;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 16);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v84 = v9 + 1;
    v85 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v86 = v19;
    *((_QWORD *)&v86 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v86 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v86 = v47;
            *((_QWORD *)&v86 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v86 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9B8D98;
        *(_OWORD *)(v52 + 8) = v86;
        v86 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v87 = 0;
        v88 = 0;
        *((_QWORD *)v52 + 5) = v80;
        *((_QWORD *)v52 + 6) = v81;
        v89[0] = 0;
        v89[1] = 0;
        v91 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v90);
        v53 = v91;
        if (v91 == &v90)
        {
          v54 = 4;
          v53 = &v90;
        }
        else
        {
          if (!v91)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v85)
        {
          v55 = &v85->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (v82)
        {
          v57 = (unint64_t *)&v82->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  v79 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v79 = v38;
      *((_QWORD *)&v79 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v79 = 0uLL;
    }
  }
  v60 = *a2;
  v59 = a2[1];
  if (v59)
  {
    p_on_zero_shared = (unint64_t *)&v59->__on_zero_shared;
    do
      v62 = __ldxr(p_on_zero_shared);
    while (__stxr(v62 + 1, p_on_zero_shared));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &unk_24C9B85F0;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9B8E18;
  *(_OWORD *)(v64 + 8) = v79;
  *((_QWORD *)v64 + 3) = v60;
  *((_QWORD *)v64 + 4) = v59;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v88 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v86);
  v70 = v88;
  if (v88 == &v86)
  {
    v71 = 4;
    v70 = &v86;
  }
  else
  {
    if (!v88)
      return;
    v71 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 8 * v71))(v70, v65, v66, v67, v68, v69);
}

void sub_20EA0E924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 81) < 0)
      operator delete(*(void **)(v28 - 104));
    JUMPOUT(0x20EA0E838);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA0EA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA0EAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA0EAF4(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA0EB68(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9B8E98;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA0EC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA0ECDC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9B8F18;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA0EDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA0EE50@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B8F98;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA0F068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA0F130@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B9018;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA0F348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA0F410(uint64_t a1)
{
  return sub_20EA0F5EC(a1 - 16);
}

void sub_20EA0F418(uint64_t a1)
{
  sub_20EA0F5EC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA0F440(uint64_t a1)
{
  return sub_20EA0EB68((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EA0F448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA0EE50((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA0F450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA0F130((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA0F458(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA0F460(uint64_t a1)
{
  return sub_20EA0F5EC(a1 - 24);
}

void sub_20EA0F468(uint64_t a1)
{
  sub_20EA0F5EC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA0F490(uint64_t a1)
{
  return sub_20EA0ECDC((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA0F498(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA0F4A0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA0F508(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA0F570(uint64_t a1, uint64_t *a2)
{
  _QWORD ***v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD ****)(a1 + 8);
  v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  sub_20EA55C98(v2, v6);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA0F5D4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA0F5EC(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9B8A58;
  *(_QWORD *)(a1 + 16) = &unk_24C9B8AD0;
  *(_QWORD *)(a1 + 24) = &unk_24C9B8B10;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EA0F7D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B8C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA0F7E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B8C48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA0F818(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *sub_20EA0F82C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B8C98;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA0F870(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B8C98;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA0F8C4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B8C98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA0F934(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B8C98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA0F984(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA0F9C0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA0F9F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EA0FD1C((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA0FBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA0FCA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection2"
                     "4ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSF_4SendER"
                     "KSE_EUlT_T0_E_EEvSI_SJ_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfac"
                                "edetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE25EnqueueMessageAnd"
                                "DispatchIZNKSF_4SendERKSE_EUlT_T0_E_EEvSI_SJ_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSF_4SendERKSE_EUlT_T0_E_EEvSI_SJ_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSF_4SendERKSE_EUlT_T0_E_EEvSI_SJ_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA0FD10()
{
  return &unk_24C9B8CF8;
}

void sub_20EA0FD1C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EA0FDB4()
{
  __break(1u);
}

void sub_20EA0FE60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA0FE80);
}

_QWORD *sub_20EA0FE8C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B8D18;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA0FED0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B8D18;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA0FF24(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B8D18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA0FF94(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B8D18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA0FFE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA10020(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA10058(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EA0FD1C((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA10100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1014C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection2"
                     "4ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE4SendERKSE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfac"
                                "edetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE4SendERKSE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE4SendERKSE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE4SendERKSE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA101B8()
{
  return &unk_24C9B8D78;
}

_QWORD *sub_20EA101C4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B8D98;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA1024C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B8D98;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA102E4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B8D98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA10374(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B8D98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA103E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA10464(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA104E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA0FD1C(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA10794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA108EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection2"
                     "4ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSF_7Proces"
                     "sERKSE_NS4_7promiseIvEEEUlT_T0_E_EEvSI_SL_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfac"
                                "edetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE25EnqueueMessageAnd"
                                "DispatchIZNKSF_7ProcessERKSE_NS4_7promiseIvEEEUlT_T0_E_EEvSI_SL_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSF_7ProcessERKSE_NS4_7promiseIvEEEUlT_T0_E_EEvSI_SL_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSF_7ProcessERKSE_NS4_7promiseIvEEEUlT_T0_E_EEvSI_SL_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA10958()
{
  return &unk_24C9B8DF8;
}

_QWORD *sub_20EA10964(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B8E18;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA109EC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B8E18;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA10A84(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B8E18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA10B14(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B8E18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA10B84(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA10C04(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA10C80(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA0FD1C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA10D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA10E3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection2"
                     "4ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE7ProcessERKSE_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfac"
                                "edetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE7ProcessERKSE_NS4_7"
                                "promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE7ProcessERKSE_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE7ProcessERKSE_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA10EA8()
{
  return &unk_24C9B8E78;
}

_QWORD *sub_20EA10EB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B8E98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA10EEC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B8E98;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA10F34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B8E98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA10F84(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B8E98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA10FB4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA10FC4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA10FF0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA11084(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA110C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24"
                     "ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surface"
                                "detection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE9SubscribeENS1_12Cha"
                                "nnelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1112C()
{
  return &unk_24C9B8EF8;
}

_QWORD *sub_20EA11138(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B8F18;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA11170(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B8F18;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA111B8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B8F18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA11208(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B8F18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA11238(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA11248(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA11274(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA11308(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA11344(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24"
                     "ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surface"
                                "detection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE15AddErrorHandlerENS"
                                "1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA113B0()
{
  return &unk_24C9B8F78;
}

_QWORD *sub_20EA113BC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B8F98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA113F4(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B8F98;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1143C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B8F98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA11494(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B8F98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA114CC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA114DC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA11508(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA115C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1160C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection2"
                     "4ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfac"
                                "edetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA11678()
{
  return &unk_24C9B8FF8;
}

_QWORD *sub_20EA11684(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B9018;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA116BC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B9018;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA11704(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9018;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA1175C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9018;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA11794(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA117A4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA117D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA11888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA118D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection2"
                     "4ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfac"
                                "edetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_6vectorINS_3acv16surfacedetection24ContinuousTrackingResultENS4_9allocatorIS9_EEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA11940()
{
  return &unk_24C9B9078;
}

void sub_20EA11950(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA11974(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA1198C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS_6vectorINS1_3acv16sur"
                     "facedetection24ContinuousTrackingResultENS_9allocatorISA_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISG_SG_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS_6vectorINS"
                                "1_3acv16surfacedetection24ContinuousTrackingResultENS_9allocatorISA_EEEEEEvvvLb0EEEE27__"
                                "shared_ptr_default_deleteISG_SG_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS_6vectorINS1_3acv16surfacedetection24ContinuousTrackingResultENS_9allocatorISA_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISG_SG_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS_6vectorINS1_3acv16surfacedetection24ContinuousTrackingResultENS_9allocatorISA_EEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISG_SG_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA119FC(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B2908;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B2938;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9B90E8;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B2520;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20EA11BAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA11C1C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA11C48(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA11C84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B90E8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA11CEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA11D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA11D90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA11E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA11E34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA11EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA11F0C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA11FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA11FE4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA12088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA120A0(uint64_t a1)
{
  sub_20EA13994(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA120C4(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *p_on_zero_shared;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9350;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9B93A0;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    p_on_zero_shared = (unint64_t *)&v53->__on_zero_shared;
    do
      v55 = __ldxr(p_on_zero_shared);
    while (__stxr(v55 + 1, p_on_zero_shared));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9B9420;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EA12524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EA02254((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EA02254((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA12578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EA125C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA125EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA12620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA12640(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA12650(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA1265C(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA1266C(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *p_on_zero_shared;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 *v75;
  std::string *v76;
  std::runtime_error *exception;
  std::runtime_error *v78;
  __int128 v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::runtime_error v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  _QWORD *v87;
  __int128 *v88;
  _QWORD v89[3];
  std::string v90;
  std::string *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v86 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v86 + 1) = 45;
    v74 = (_QWORD *)a1[6];
    v73 = a1 + 6;
    v72 = v74;
    v75 = (__int128 *)*((unsigned __int8 *)v73 + 23);
    if ((char)v75 < 0)
      v75 = (__int128 *)v73[1];
    else
      v72 = v73;
    v87 = v72;
    v88 = v75;
    sub_20E8778D4((uint64_t)&v86, (uint64_t)v89, 0, 0, &v90);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v90;
    else
      v76 = (std::string *)v90.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v83, (const char *)v76);
    v83.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v78 = std::runtime_error::runtime_error(exception, &v83);
    v78->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v78, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v82 = v6;
    v80 = &v6[1].__vftable;
    v81 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9350;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 16);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v84 = v9 + 1;
    v85 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v86 = v19;
    *((_QWORD *)&v86 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v86 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v86 = v47;
            *((_QWORD *)&v86 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v86 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9B94A0;
        *(_OWORD *)(v52 + 8) = v86;
        v86 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v87 = 0;
        v88 = 0;
        *((_QWORD *)v52 + 5) = v80;
        *((_QWORD *)v52 + 6) = v81;
        v89[0] = 0;
        v89[1] = 0;
        v91 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v90);
        v53 = v91;
        if (v91 == &v90)
        {
          v54 = 4;
          v53 = &v90;
        }
        else
        {
          if (!v91)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v85)
        {
          v55 = &v85->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (v82)
        {
          v57 = (unint64_t *)&v82->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  v79 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v79 = v38;
      *((_QWORD *)&v79 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v79 = 0uLL;
    }
  }
  v60 = *a2;
  v59 = a2[1];
  if (v59)
  {
    p_on_zero_shared = (unint64_t *)&v59->__on_zero_shared;
    do
      v62 = __ldxr(p_on_zero_shared);
    while (__stxr(v62 + 1, p_on_zero_shared));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &unk_24C9B85F0;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9B9520;
  *(_OWORD *)(v64 + 8) = v79;
  *((_QWORD *)v64 + 3) = v60;
  *((_QWORD *)v64 + 4) = v59;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v88 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v86);
  v70 = v88;
  if (v88 == &v86)
  {
    v71 = 4;
    v70 = &v86;
  }
  else
  {
    if (!v88)
      return;
    v71 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 8 * v71))(v70, v65, v66, v67, v68, v69);
}

void sub_20EA12CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 81) < 0)
      operator delete(*(void **)(v28 - 104));
    JUMPOUT(0x20EA12BE0);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA12DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA12E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA12E9C(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA12F10(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9B95A0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA13020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA13084(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9B9620;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA13194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA131F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B96A0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA13410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA134D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B9720;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA136F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA137B8(uint64_t a1)
{
  return sub_20EA13994(a1 - 16);
}

void sub_20EA137C0(uint64_t a1)
{
  sub_20EA13994(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA137E8(uint64_t a1)
{
  return sub_20EA12F10((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EA137F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA131F8((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA137F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA134D8((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA13800(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA13808(uint64_t a1)
{
  return sub_20EA13994(a1 - 24);
}

void sub_20EA13810(uint64_t a1)
{
  sub_20EA13994(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA13838(uint64_t a1)
{
  return sub_20EA13084((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA13840(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA13848(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA138B0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA13918(uint64_t a1, uint64_t *a2)
{
  uint64_t **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t v6[2];

  v2 = *(uint64_t ***)(a1 + 8);
  v3 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  sub_20EA55DAC(v2, v6);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA1397C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA13994(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9B9160;
  *(_QWORD *)(a1 + 16) = &unk_24C9B91D8;
  *(_QWORD *)(a1 + 24) = &unk_24C9B9218;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EA13B80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA13B90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA13BC0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *sub_20EA13BD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B93A0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA13C18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B93A0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA13C6C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B93A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA13CDC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B93A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA13D2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA13D68(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA13DA0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EA140C4((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA13F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1404C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMa"
                     "p3DStructureEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23"
                                "WindowAndMap3DStructureEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E"
                                "_EEvSE_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA140B8()
{
  return &unk_24C9B9400;
}

void sub_20EA140C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EA1415C()
{
  __break(1u);
}

void sub_20EA14208(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA14228);
}

_QWORD *sub_20EA14234(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B9420;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA14278(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B9420;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA142CC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9420;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA1433C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9420;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA1438C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA143C8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA14400(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EA140C4((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA144A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA144F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMa"
                     "p3DStructureEEEvvvLb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23"
                                "WindowAndMap3DStructureEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA14560()
{
  return &unk_24C9B9480;
}

_QWORD *sub_20EA1456C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B94A0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA145F4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B94A0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA1468C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B94A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA1471C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B94A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA1478C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA1480C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA14888(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA140C4(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA14B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA14C94(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMa"
                     "p3DStructureEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23"
                                "WindowAndMap3DStructureEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7p"
                                "romiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA14D00()
{
  return &unk_24C9B9500;
}

_QWORD *sub_20EA14D0C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B9520;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA14D94(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B9520;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA14E2C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9520;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA14EBC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9520;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA14F2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA14FAC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA15028(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA140C4((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA1513C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA151E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMa"
                     "p3DStructureEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23"
                                "WindowAndMap3DStructureEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA15250()
{
  return &unk_24C9B9580;
}

_QWORD *sub_20EA1525C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B95A0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA15294(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B95A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA152DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B95A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA1532C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B95A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA1535C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA1536C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA15398(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1542C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA15468(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap"
                     "3DStructureEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23W"
                                "indowAndMap3DStructureEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA154D4()
{
  return &unk_24C9B9600;
}

_QWORD *sub_20EA154E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B9620;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA15518(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B9620;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA15560(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B9620;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA155B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B9620;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA155E0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA155F0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA1561C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA156B0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA156EC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap"
                     "3DStructureEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23W"
                                "indowAndMap3DStructureEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA15758()
{
  return &unk_24C9B9680;
}

_QWORD *sub_20EA15764(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B96A0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA1579C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B96A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA157E4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B96A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA1583C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B96A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA15874(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA15884(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA158B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA15968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA159B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMa"
                     "p3DStructureEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23"
                                "WindowAndMap3DStructureEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA15A20()
{
  return &unk_24C9B9700;
}

_QWORD *sub_20EA15A2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B9720;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA15A64(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B9720;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA15AAC(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9720;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA15B04(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9720;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA15B3C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA15B4C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA15B78(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA15C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA15C7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMa"
                     "p3DStructureEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23"
                                "WindowAndMap3DStructureEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA15CE8()
{
  return &unk_24C9B9780;
}

void sub_20EA15CF8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA15D1C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA15D34(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3acv16surfacedetecti"
                     "on23WindowAndMap3DStructureEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3acv16sur"
                                "facedetection23WindowAndMap3DStructureEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3acv16surfacedetection23WindowAndMap3DStructureEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA15DA4(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B28A0;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B28D0;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9B97F0;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B2520;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20EA15F54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA15FC4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA15FF0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1602C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B97F0;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA16094(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA16124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA16138(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA161C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA161DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA162A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA162B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA16378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA1638C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA16430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA16448(uint64_t a1)
{
  sub_20EA17DC8(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA1646C(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *p_on_zero_shared;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9A58;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9B9AA8;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    p_on_zero_shared = (unint64_t *)&v53->__on_zero_shared;
    do
      v55 = __ldxr(p_on_zero_shared);
    while (__stxr(v55 + 1, p_on_zero_shared));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9B9B28;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EA168CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EA02254((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EA02254((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA16920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EA16970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA16994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA169C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA169E8(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA169F8(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA16A04(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA16A14(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *p_on_zero_shared;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 *v75;
  std::string *v76;
  std::runtime_error *exception;
  std::runtime_error *v78;
  __int128 v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::runtime_error v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  _QWORD *v87;
  __int128 *v88;
  _QWORD v89[3];
  std::string v90;
  std::string *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v86 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v86 + 1) = 45;
    v74 = (_QWORD *)a1[6];
    v73 = a1 + 6;
    v72 = v74;
    v75 = (__int128 *)*((unsigned __int8 *)v73 + 23);
    if ((char)v75 < 0)
      v75 = (__int128 *)v73[1];
    else
      v72 = v73;
    v87 = v72;
    v88 = v75;
    sub_20E8778D4((uint64_t)&v86, (uint64_t)v89, 0, 0, &v90);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v90;
    else
      v76 = (std::string *)v90.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v83, (const char *)v76);
    v83.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v78 = std::runtime_error::runtime_error(exception, &v83);
    v78->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v78, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v82 = v6;
    v80 = &v6[1].__vftable;
    v81 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9A58;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 16);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v84 = v9 + 1;
    v85 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v86 = v19;
    *((_QWORD *)&v86 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v86 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v86 = v47;
            *((_QWORD *)&v86 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v86 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9B9BA8;
        *(_OWORD *)(v52 + 8) = v86;
        v86 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v87 = 0;
        v88 = 0;
        *((_QWORD *)v52 + 5) = v80;
        *((_QWORD *)v52 + 6) = v81;
        v89[0] = 0;
        v89[1] = 0;
        v91 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v90);
        v53 = v91;
        if (v91 == &v90)
        {
          v54 = 4;
          v53 = &v90;
        }
        else
        {
          if (!v91)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v85)
        {
          v55 = &v85->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (v82)
        {
          v57 = (unint64_t *)&v82->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  v79 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v79 = v38;
      *((_QWORD *)&v79 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v79 = 0uLL;
    }
  }
  v60 = *a2;
  v59 = a2[1];
  if (v59)
  {
    p_on_zero_shared = (unint64_t *)&v59->__on_zero_shared;
    do
      v62 = __ldxr(p_on_zero_shared);
    while (__stxr(v62 + 1, p_on_zero_shared));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &unk_24C9B85F0;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9B9C28;
  *(_OWORD *)(v64 + 8) = v79;
  *((_QWORD *)v64 + 3) = v60;
  *((_QWORD *)v64 + 4) = v59;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v88 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v86);
  v70 = v88;
  if (v88 == &v86)
  {
    v71 = 4;
    v70 = &v86;
  }
  else
  {
    if (!v88)
      return;
    v71 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 8 * v71))(v70, v65, v66, v67, v68, v69);
}

void sub_20EA17074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 81) < 0)
      operator delete(*(void **)(v28 - 104));
    JUMPOUT(0x20EA16F88);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA17188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA17228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA17244(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA172B8(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9B9CA8;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA173C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA1742C(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9B9D28;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA1753C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA175A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B9DA8;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA177B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA17880@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9B9E28;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA17A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA17B60(uint64_t a1)
{
  return sub_20EA17DC8(a1 - 16);
}

void sub_20EA17B68(uint64_t a1)
{
  sub_20EA17DC8(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA17B90(uint64_t a1)
{
  return sub_20EA172B8((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EA17B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA175A0((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA17BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA17880((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA17BA8(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA17BB0(uint64_t a1)
{
  return sub_20EA17DC8(a1 - 24);
}

void sub_20EA17BB8(uint64_t a1)
{
  sub_20EA17DC8(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA17BE0(uint64_t a1)
{
  return sub_20EA1742C((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA17BE8(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA17BF0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA17C58(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA17CC0(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t **v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)a2[1];
  if (v2)
  {
    v3 = *(uint64_t ***)(a1 + 8);
    v4 = *a2;
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v7 = std::__shared_weak_count::lock(v2);
    if (!v7)
      goto LABEL_16;
    v8 = v7;
    if (v4)
    {
      v9 = **v3;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = *(std::__shared_weak_count **)(v9 + 40);
      *(_QWORD *)(v9 + 32) = v4;
      *(_QWORD *)(v9 + 40) = v7;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      std::__shared_weak_count::__release_weak(v2);
    }
    else
    {
LABEL_16:
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20EA17DC8(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9B9868;
  *(_QWORD *)(a1 + 16) = &unk_24C9B98E0;
  *(_QWORD *)(a1 + 24) = &unk_24C9B9920;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EA17FB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9A58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA17FC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9B9A58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA17FF4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *sub_20EA18008(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B9AA8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA1804C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B9AA8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA180A0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9AA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA18110(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9AA8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA18160(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA1819C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA181D4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EA184F8((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA1839C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA18480(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUI"
                     "DENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9alloca"
                     "torINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSP_4SendERKSO_EUlT_T0_E_EEvSS_ST_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn"
                                "6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equ"
                                "al_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZ"
                                "NKSP_4SendERKSO_EUlT_T0_E_EEvSS_ST_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSP_4SendERKSO_EUlT_T0_E_EEvSS_ST_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSP_4SendERKSO_EUlT_T0_E_EEvSS_ST_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA184EC()
{
  return &unk_24C9B9B08;
}

void sub_20EA184F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EA18590()
{
  __break(1u);
}

void sub_20EA1863C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA1865CLL);
}

_QWORD *sub_20EA18668(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B9B28;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA186AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9B9B28;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA18700(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9B28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA18770(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9B28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA187C0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA187FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA18834(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EA184F8((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA188DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA18928(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUI"
                     "DENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9alloca"
                     "torINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE4SendERKSO_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn"
                                "6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equ"
                                "al_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE4SendERKSO_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE4SendERKSO_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE4SendERKSO_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA18994()
{
  return &unk_24C9B9B88;
}

_QWORD *sub_20EA189A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B9BA8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA18A28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B9BA8;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA18AC0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9BA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA18B50(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9BA8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA18BC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA18C40(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA18CBC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA184F8(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA18F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA190C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUI"
                     "DENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9alloca"
                     "torINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSP_7ProcessERKSO_NS4_7promiseIv"
                     "EEEUlT_T0_E_EEvSS_SV_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn"
                                "6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equ"
                                "al_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZ"
                                "NKSP_7ProcessERKSO_NS4_7promiseIvEEEUlT_T0_E_EEvSS_SV_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSP_7ProcessERKSO_NS4_7promiseIvEEEUlT_T0_E_EEvSS_SV_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSP_7ProcessERKSO_NS4_7promiseIvEEEUlT_T0_E_EEvSS_SV_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA19134()
{
  return &unk_24C9B9C08;
}

_QWORD *sub_20EA19140(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B9C28;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA191C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9B9C28;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA19260(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9C28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA192F0(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9C28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA19360(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA193E0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA1945C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA184F8((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA19570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA19618(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUI"
                     "DENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9alloca"
                     "torINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE7ProcessERKSO_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn"
                                "6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equ"
                                "al_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE7ProcessERKSO_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE7ProcessERKSO_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE7ProcessERKSO_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA19684()
{
  return &unk_24C9B9C88;
}

_QWORD *sub_20EA19690(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B9CA8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA196C8(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B9CA8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA19710(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B9CA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA19760(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B9CA8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA19790(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA197A0(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA197CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA19860(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1989C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUID"
                     "ENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocat"
                     "orINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6"
                                "random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equa"
                                "l_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA19908()
{
  return &unk_24C9B9D08;
}

_QWORD *sub_20EA19914(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B9D28;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA1994C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B9D28;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA19994(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B9D28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA199E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9B9D28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA19A14(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA19A24(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA19A50(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA19AE4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA19B20(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUID"
                     "ENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocat"
                     "orINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6"
                                "random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equa"
                                "l_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE15AddErrorHandlerENS1_12Channe"
                                "lInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA19B8C()
{
  return &unk_24C9B9D88;
}

_QWORD *sub_20EA19B98(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B9DA8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA19BD0(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B9DA8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA19C18(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9DA8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA19C70(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9DA8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA19CA8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA19CB8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA19CE4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA19D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA19DE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUI"
                     "DENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9alloca"
                     "torINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn"
                                "6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equ"
                                "al_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA19E54()
{
  return &unk_24C9B9E08;
}

_QWORD *sub_20EA19E60(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9B9E28;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA19E98(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9B9E28;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA19EE0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9B9E28;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA19F38(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9B9E28;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA19F70(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA19F80(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA19FAC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1A064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1A0B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUI"
                     "DENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9alloca"
                     "torINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn"
                                "6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equ"
                                "al_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS4_13unordered_mapINS_3esn6random4UUIDENS_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS4_4hashIS9_EENS4_8equal_toIS9_EENS4_9allocatorINS4_4pairIKS9_SC_EEEEEEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1A11C()
{
  return &unk_24C9B9E88;
}

void sub_20EA1A12C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA1A150(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA1A168(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS_13unordered_mapINS1_3"
                     "esn6random4UUIDENS1_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS_4hashISA_EENS_8equal_toISA_"
                     "EENS_9allocatorINS_4pairIKSA_SD_EEEEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISQ_SQ_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS_13unordere"
                                "d_mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS_4hash"
                                "ISA_EENS_8equal_toISA_EENS_9allocatorINS_4pairIKSA_SD_EEEEEEEEvvvLb0EEEE27__shared_ptr_d"
                                "efault_deleteISQ_SQ_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS_13unordered_mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS_4hashISA_EENS_8equal_toISA_EENS_9allocatorINS_4pairIKSA_SD_EEEEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISQ_SQ_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS_13unordered_mapINS1_3esn6random4UUIDENS1_3acv16surfacedetection24ChunkMeshWithBoundingBoxENS_4hashISA_EENS_8equal_toISA_EENS_9allocatorINS_4pairIKSA_SD_EEEEEEEEvvvLb0EEEE27__shared_ptr_default_deleteISQ_SQ_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA1A1D8(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B2838;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B2868;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9B9EF8;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B2520;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20EA1A388(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA1A3F8(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA1A424(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1A460@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9B9EF8;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA1A4C8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1A558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA1A56C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1A5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA1A610(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA1A6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA1A6E8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA1A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA1A7C0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA1A864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA1A87C(uint64_t a1)
{
  sub_20EA1C1FC(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA1A8A0(_QWORD *a1, std::__shared_weak_count_vtbl **a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::mutex **v28;
  uint64_t **v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  std::__shared_weak_count_vtbl *v53;
  unint64_t *p_on_zero_shared;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  uint64_t v65;
  __int128 *v66;
  _BYTE v67[24];
  _BYTE *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x28uLL);
    v6 = v5;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA160;
    v8 = (uint64_t)a2[1];
    v5[1].__vftable = *a2;
    v9 = &v5[1].__vftable;
    v5[1].__shared_owners_ = v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v4 = (uint64_t *)a1[18];
    }
    v63 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (_QWORD *)operator new();
    *v14 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v64 = v14;
    *((_QWORD *)&v64 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v15 = v4[4];
    v16 = *v4;
    v17 = (_QWORD *)(*v4 + 16 * v15);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *v17 = v9;
    v19 = v16 + 16 * v15;
    v20 = *(std::__shared_weak_count **)(v19 + 8);
    *(_QWORD *)(v19 + 8) = v6;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (v4[1] - *v4) >> 4;
    v24 = v4[5];
    v25 = v4[4] + 1;
    if (v25 >= v23)
      v26 = (v4[1] - *v4) >> 4;
    else
      v26 = 0;
    v4[4] = v25 - v26;
    if (v24 == v23)
    {
      v27 = v4[3] + 1;
      if (v27 < v23)
        v23 = 0;
      v4[3] = v27 - v23;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
      {
LABEL_37:
        v38 = (uint64_t **)a1[9];
        v64 = 0uLL;
        v39 = (std::__shared_weak_count *)a1[5];
        if (v39)
        {
          v40 = std::__shared_weak_count::lock(v39);
          if (v40)
          {
            v41 = v40;
            v42 = a1[4];
            v43 = (unint64_t *)&v40->__shared_weak_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
            *(_QWORD *)&v64 = v42;
            *((_QWORD *)&v64 + 1) = v40;
            v45 = (unint64_t *)&v40->__shared_owners_;
            do
              v46 = __ldaxr(v45);
            while (__stlxr(v46 - 1, v45));
            if (!v46)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v64 = 0uLL;
          }
        }
        v47 = (char *)operator new(0x30uLL);
        *(_QWORD *)v47 = &off_24C9BA1B0;
        *(_OWORD *)(v47 + 8) = v64;
        v64 = 0uLL;
        *((_QWORD *)v47 + 3) = v9;
        *((_QWORD *)v47 + 4) = v6;
        v65 = 0;
        v66 = 0;
        v68 = v47;
        sub_210216F3C(*v38, (uint64_t)v67);
        v48 = v68;
        if (v68 == v67)
        {
          v49 = 4;
          v48 = v67;
        }
        else
        {
          if (!v68)
            goto LABEL_51;
          v49 = 5;
        }
        (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_51:
        if (v63)
        {
          v50 = (unint64_t *)&v63->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v24 + 1;
      v28 = (std::mutex **)v64;
      if (!(_QWORD)v64)
        goto LABEL_37;
    }
    std::mutex::unlock(*v28);
    MEMORY[0x212BC6398](v28, 0x20C4093837F09);
    goto LABEL_37;
  }
  v29 = (uint64_t **)a1[9];
  v62 = 0uLL;
  v30 = (std::__shared_weak_count *)a1[5];
  if (v30)
  {
    v31 = std::__shared_weak_count::lock(v30);
    if (v31)
    {
      v32 = v31;
      v33 = a1[4];
      v34 = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      *(_QWORD *)&v62 = v33;
      *((_QWORD *)&v62 + 1) = v31;
      v36 = (unint64_t *)&v31->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    else
    {
      v62 = 0uLL;
    }
  }
  v52 = *a2;
  v53 = a2[1];
  if (v53)
  {
    p_on_zero_shared = (unint64_t *)&v53->__on_zero_shared;
    do
      v55 = __ldxr(p_on_zero_shared);
    while (__stxr(v55 + 1, p_on_zero_shared));
  }
  v56 = (char *)operator new(0x28uLL);
  *(_QWORD *)v56 = &off_24C9BA230;
  *(_OWORD *)(v56 + 8) = v62;
  *((_QWORD *)v56 + 3) = v52;
  *((_QWORD *)v56 + 4) = v53;
  v66 = (__int128 *)v56;
  sub_210216F3C(*v29, (uint64_t)&v64);
  v60 = v66;
  if (v66 == &v64)
  {
    v61 = 4;
    v60 = &v64;
  }
  else
  {
    if (!v66)
      return;
    v61 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v57, v58, v59);
}

void sub_20EA1AD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
    {
      sub_20EA02254((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  sub_20EA02254((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA1AD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  sub_20EA02254((uint64_t)&a15);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20EA1ADA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20EA0228C((std::mutex ***)va1);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA1ADC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  MEMORY[0x212BC6398](v6, 0x20C4093837F09);
  std::__shared_weak_count::__release_weak(v5);
  sub_20E86665C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA1ADFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__shared_weak_count *v13;

  std::__shared_weak_count::__release_weak(v13);
  sub_20E86665C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA1AE1C(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA1AE2C(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA1AE38(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA1AE48(_QWORD *a1, std::__shared_weak_count_vtbl **a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::mutex **v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t **v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  std::string *v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count_vtbl *v59;
  std::__shared_weak_count_vtbl *v60;
  unint64_t *p_on_zero_shared;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  __int128 *v75;
  std::string *v76;
  std::runtime_error *exception;
  std::runtime_error *v78;
  __int128 v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::runtime_error v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  _QWORD *v87;
  __int128 *v88;
  _QWORD v89[3];
  std::string v90;
  std::string *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v86 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v86 + 1) = 45;
    v74 = (_QWORD *)a1[6];
    v73 = a1 + 6;
    v72 = v74;
    v75 = (__int128 *)*((unsigned __int8 *)v73 + 23);
    if ((char)v75 < 0)
      v75 = (__int128 *)v73[1];
    else
      v72 = v73;
    v87 = v72;
    v88 = v75;
    sub_20E8778D4((uint64_t)&v86, (uint64_t)v89, 0, 0, &v90);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &v90;
    else
      v76 = (std::string *)v90.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v83, (const char *)v76);
    v83.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v78 = std::runtime_error::runtime_error(exception, &v83);
    v78->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v78, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9B85F0;
    v6[1].__vftable = *a3;
    v82 = v6;
    v80 = &v6[1].__vftable;
    v81 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x28uLL);
    v10 = v9;
    v9->__shared_owners_ = 0;
    v11 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA160;
    v12 = (uint64_t)a2[1];
    v9[1].__vftable = *a2;
    v13 = v9 + 1;
    v9[1].__shared_owners_ = v12;
    if (v12)
    {
      v14 = (unint64_t *)(v12 + 16);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v84 = v9 + 1;
    v85 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v18 = (uint64_t *)a1[18];
    v19 = (_QWORD *)operator new();
    *v19 = v18 + 7;
    std::mutex::lock((std::mutex *)(v18 + 7));
    *(_QWORD *)&v86 = v19;
    *((_QWORD *)&v86 + 1) = v18;
    if (!*((_BYTE *)v18 + 48))
      sub_20E866B34();
    v20 = v18[4];
    v21 = *v18;
    v22 = (std::__shared_weak_count **)(*v18 + 16 * v20);
    do
      v23 = __ldxr(v11);
    while (__stxr(v23 + 1, v11));
    *v22 = v13;
    v24 = v21 + 16 * v20;
    v25 = *(std::__shared_weak_count **)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v10;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (v18[1] - *v18) >> 4;
    v29 = v18[5];
    v30 = v18[4] + 1;
    if (v30 >= v28)
      v31 = (v18[1] - *v18) >> 4;
    else
      v31 = 0;
    v18[4] = v30 - v31;
    if (v29 == v28)
    {
      v32 = v18[3] + 1;
      if (v32 < v28)
        v28 = 0;
      v18[3] = v32 - v28;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
      {
LABEL_40:
        v43 = (uint64_t **)a1[9];
        v86 = 0uLL;
        v44 = (std::__shared_weak_count *)a1[5];
        if (v44)
        {
          v45 = std::__shared_weak_count::lock(v44);
          if (v45)
          {
            v46 = v45;
            v47 = a1[4];
            v48 = (unint64_t *)&v45->__shared_weak_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
            *(_QWORD *)&v86 = v47;
            *((_QWORD *)&v86 + 1) = v45;
            v50 = (unint64_t *)&v45->__shared_owners_;
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          else
          {
            v86 = 0uLL;
          }
        }
        v52 = (char *)operator new(0x38uLL);
        *(_QWORD *)v52 = &off_24C9BA2B0;
        *(_OWORD *)(v52 + 8) = v86;
        v86 = 0uLL;
        *((_QWORD *)v52 + 3) = v13;
        *((_QWORD *)v52 + 4) = v10;
        v87 = 0;
        v88 = 0;
        *((_QWORD *)v52 + 5) = v80;
        *((_QWORD *)v52 + 6) = v81;
        v89[0] = 0;
        v89[1] = 0;
        v91 = (std::string *)v52;
        sub_210216F3C(*v43, (uint64_t)&v90);
        v53 = v91;
        if (v91 == &v90)
        {
          v54 = 4;
          v53 = &v90;
        }
        else
        {
          if (!v91)
            goto LABEL_54;
          v54 = 5;
        }
        (*(void (**)(void))(v53->__r_.__value_.__r.__words[0] + 8 * v54))();
LABEL_54:
        if (v85)
        {
          v55 = &v85->__shared_owners_;
          do
            v56 = __ldaxr((unint64_t *)v55);
          while (__stlxr(v56 - 1, (unint64_t *)v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        if (v82)
        {
          v57 = (unint64_t *)&v82->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        return;
      }
    }
    else
    {
      v18[5] = v29 + 1;
      v33 = (std::mutex **)v86;
      if (!(_QWORD)v86)
        goto LABEL_40;
    }
    std::mutex::unlock(*v33);
    MEMORY[0x212BC6398](v33, 0x20C4093837F09);
    goto LABEL_40;
  }
  v34 = (uint64_t **)a1[9];
  v79 = 0uLL;
  v35 = (std::__shared_weak_count *)a1[5];
  if (v35)
  {
    v36 = std::__shared_weak_count::lock(v35);
    if (v36)
    {
      v37 = v36;
      v38 = a1[4];
      v39 = (unint64_t *)&v36->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *(_QWORD *)&v79 = v38;
      *((_QWORD *)&v79 + 1) = v36;
      v41 = (unint64_t *)&v36->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    else
    {
      v79 = 0uLL;
    }
  }
  v60 = *a2;
  v59 = a2[1];
  if (v59)
  {
    p_on_zero_shared = (unint64_t *)&v59->__on_zero_shared;
    do
      v62 = __ldxr(p_on_zero_shared);
    while (__stxr(v62 + 1, p_on_zero_shared));
  }
  v63 = operator new(0x20uLL);
  v63[1] = 0;
  v63[2] = 0;
  *v63 = &unk_24C9B85F0;
  v63[3] = *a3;
  *a3 = 0;
  v64 = (char *)operator new(0x38uLL);
  *(_QWORD *)v64 = &off_24C9BA330;
  *(_OWORD *)(v64 + 8) = v79;
  *((_QWORD *)v64 + 3) = v60;
  *((_QWORD *)v64 + 4) = v59;
  *((_QWORD *)v64 + 5) = v63 + 3;
  *((_QWORD *)v64 + 6) = v63;
  v88 = (__int128 *)v64;
  sub_210216F3C(*v34, (uint64_t)&v86);
  v70 = v88;
  if (v88 == &v86)
  {
    v71 = 4;
    v70 = &v86;
  }
  else
  {
    if (!v88)
      return;
    v71 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 8 * v71))(v70, v65, v66, v67, v68, v69);
}

void sub_20EA1B4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20,std::exception_ptr a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::promise<void> *v27;
  uint64_t v28;
  std::exception_ptr v29;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v29.__ptr_ = &a21;
    std::promise<void>::set_exception(v27, v29);
    std::exception_ptr::~exception_ptr(&a21);
    std::runtime_error::~runtime_error(&a20);
    if (*(char *)(v28 - 81) < 0)
      operator delete(*(void **)(v28 - 104));
    JUMPOUT(0x20EA1B3BCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA1B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  va_list va1;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va2;
  uint64_t v24;
  va_list va3;

  va_start(va3, a8);
  va_start(va2, a8);
  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v22 = va_arg(va3, _QWORD);
  v24 = va_arg(va3, _QWORD);
  v11 = *(_QWORD **)(v9 - 80);
  if (v11 == v8)
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 104);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA1B65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA1B678(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA1B6EC(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BA3B0;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA1B7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA1B860(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BA430;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA1B970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA1B9D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BA4B0;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA1BBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA1BCB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BA530;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA1BECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA1BF94(uint64_t a1)
{
  return sub_20EA1C1FC(a1 - 16);
}

void sub_20EA1BF9C(uint64_t a1)
{
  sub_20EA1C1FC(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1BFC4(uint64_t a1)
{
  return sub_20EA1B6EC((_QWORD *)(a1 - 16));
}

uint64_t *sub_20EA1BFCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA1B9D4((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA1BFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA1BCB4((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA1BFDC(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA1BFE4(uint64_t a1)
{
  return sub_20EA1C1FC(a1 - 24);
}

void sub_20EA1BFEC(uint64_t a1)
{
  sub_20EA1C1FC(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1C014(uint64_t a1)
{
  return sub_20EA1B860((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA1C01C(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA1C024(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA1C08C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

void sub_20EA1C0F4(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v2;
  uint64_t **v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = (std::__shared_weak_count *)a2[1];
  if (v2)
  {
    v3 = *(uint64_t ***)(a1 + 8);
    v4 = *a2;
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v7 = std::__shared_weak_count::lock(v2);
    if (!v7)
      goto LABEL_16;
    v8 = v7;
    if (v4)
    {
      v9 = **v3;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = *(std::__shared_weak_count **)(v9 + 56);
      *(_QWORD *)(v9 + 48) = v4;
      *(_QWORD *)(v9 + 56) = v7;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      std::__shared_weak_count::__release_weak(v2);
    }
    else
    {
LABEL_16:
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_20EA1C1FC(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9B9F70;
  *(_QWORD *)(a1 + 16) = &unk_24C9B9FE8;
  *(_QWORD *)(a1 + 24) = &unk_24C9BA028;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v14 = *(_QWORD *)(a1 + 96);
    v13 = *(uint64_t **)(a1 + 104);
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EA1C3E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA1C3F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA1C428(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

_QWORD *sub_20EA1C43C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BA1B0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA1C480(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BA1B0;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1C4D4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BA1B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA1C544(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BA1B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA1C594(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA1C5D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA1C608(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BYTE v20[8];
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      v20[0] = 0;
      v21 = 0;
      sub_20EA1C92C((uint64_t *)(v8 + 88), v5, (uint64_t)v20);
      if (v21)
        MEMORY[0x212BC623C](v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA1C7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1C8B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointC"
                     "loudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15"
                                "DensePointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_4SendERKSA_EUlT_T0_E_EEvSE_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1C920()
{
  return &unk_24C9BA210;
}

void sub_20EA1C92C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *a1;
  if (!v6)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 276, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v6 = *a1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  if (*(_BYTE *)(a3 + 8))
    std::promise<void>::set_value((std::promise<void> *)a3);
}

void sub_20EA1C9C4()
{
  __break(1u);
}

void sub_20EA1CA70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA1CA90);
}

_QWORD *sub_20EA1CA9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BA230;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA1CAE0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BA230;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1CB34(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x28uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BA230;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA1CBA4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BA230;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA1CBF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA1CC30(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA1CC68(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[8];
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v8[0] = 0;
        v9 = 0;
        sub_20EA1C92C((uint64_t *)(v5 + 88), a1 + 24, (uint64_t)v8);
        if (v9)
          MEMORY[0x212BC623C](v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1CD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    MEMORY[0x212BC623C](&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1CD5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointC"
                     "loudEEEvvvLb0EE4SendERKSA_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15"
                                "DensePointCloudEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE4SendERKSA_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE4SendERKSA_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1CDC8()
{
  return &unk_24C9BA290;
}

_QWORD *sub_20EA1CDD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BA2B0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA1CE5C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BA2B0;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA1CEF4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BA2B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA1CF84(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BA2B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA1CFF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA1D074(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA1D0F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA1C92C(v13, v5, (uint64_t)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    MEMORY[0x212BC623C](&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA1D3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11, std::exception_ptr a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA1D4FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointC"
                     "loudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15"
                                "DensePointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIv"
                                "EEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE25EnqueueMessageAndDispatchIZNKSB_7ProcessERKSA_NS4_7promiseIvEEEUlT_T0_E_EEvSE_SH_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1D568()
{
  return &unk_24C9BA310;
}

_QWORD *sub_20EA1D574(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BA330;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA1D5FC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BA330;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA1D694(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BA330;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA1D724(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BA330;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA1D794(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA1D814(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA1D890(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[5];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA1C92C((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    MEMORY[0x212BC623C](&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA1D9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::runtime_error a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (LOBYTE(a11.__imp_.__imp_))
    MEMORY[0x212BC623C](&a11);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1DA4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointC"
                     "loudEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15"
                                "DensePointCloudEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE7ProcessERKSA_NS4_7promiseIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1DAB8()
{
  return &unk_24C9BA390;
}

_QWORD *sub_20EA1DAC4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BA3B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA1DAFC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BA3B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1DB44(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BA3B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA1DB94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BA3B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA1DBC4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA1DBD4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA1DC00(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 96);
        v7 = (_QWORD *)(v5 + 96);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1DC94(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1DCD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCl"
                     "oudEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15D"
                                "ensePointCloudEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE9SubscribeENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1DD3C()
{
  return &unk_24C9BA410;
}

_QWORD *sub_20EA1DD48(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BA430;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA1DD80(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BA430;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1DDC8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BA430;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA1DE18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BA430;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA1DE48(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA1DE58(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA1DE84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1DF18(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1DF54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCl"
                     "oudEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15D"
                                "ensePointCloudEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1DFC0()
{
  return &unk_24C9BA490;
}

_QWORD *sub_20EA1DFCC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BA4B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA1E004(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BA4B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1E04C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BA4B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA1E0A4(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BA4B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA1E0DC(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA1E0EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA1E118(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1E1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1E21C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointC"
                     "loudEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15"
                                "DensePointCloudEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1E288()
{
  return &unk_24C9BA510;
}

_QWORD *sub_20EA1E294(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BA530;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA1E2CC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BA530;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1E314(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BA530;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA1E36C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BA530;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA1E3A4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA1E3B4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA1E3E0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1E498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1E4E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointC"
                     "loudEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15"
                                "DensePointCloudEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINSt3__18weak_ptrIKNS_3acv16surfacedetection15DensePointCloudEEEvvvLb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA1E550()
{
  return &unk_24C9BA590;
}

void sub_20EA1E560(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA1E584(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA1E59C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3acv16surfacedetecti"
                     "on15DensePointCloudEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3acv16sur"
                                "facedetection15DensePointCloudEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3acv16surfacedetection15DensePointCloudEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS_8weak_ptrIKNS1_3acv16surfacedetection15DensePointCloudEEEvvvLb0EEEE27__shared_ptr_default_deleteISC_SC_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA1E60C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = &off_24C9B27D0;
  v6 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v6;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v7 = *a3;
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 32) = v7;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 88) = &off_24C9B2800;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C9BA600;
  v12[1] = v9;
  v12[2] = v8;
  *(_QWORD *)(a1 + 96) = v12;
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  if (!v14)
  {
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = 0;
    if (v13)
      v19 = v13 + 16;
    else
      v19 = 0;
    goto LABEL_21;
  }
  v15 = (unint64_t *)(v14 + 16);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v18 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v14;
  if (v18)
    v19 = v18 + 16;
  else
    v19 = 0;
  if (!v17)
  {
    v13 = v18;
LABEL_21:
    v22 = 0;
    *(_QWORD *)(a1 + 120) = &off_24C9B2520;
    *(_QWORD *)(a1 + 128) = v19;
    *(_QWORD *)(a1 + 136) = 0;
    goto LABEL_22;
  }
  v20 = (unint64_t *)(v17 + 16);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v13 = *(_QWORD *)(a1 + 72);
  v22 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 120) = &off_24C9B2520;
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v17;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
LABEL_22:
  if (v13)
    v25 = v13 + 24;
  else
    v25 = 0;
  *(_QWORD *)(a1 + 144) = &off_24C9B2310;
  *(_QWORD *)(a1 + 152) = v25;
  *(_QWORD *)(a1 + 160) = v22;
  return a1;
}

void sub_20EA1E7BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void **v5;
  void **v6;

  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 31) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    sub_20E86665C(v3);
    sub_20E86665C(v2);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(*v6);
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(*v5);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA1E82C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA1E858(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA1E894@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BA600;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA1E8FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1E98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA1E9A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA1EA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA1EA44(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA1EB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA1EB1C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA1EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA1EBF4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA1EC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA1ECAC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (a1[6])
  {
    v2 = a1 + 4;
    v4 = a1[4];
    v3 = (uint64_t *)a1[5];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    a1[6] = 0;
    if (v3 != a1 + 4)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (a1[3])
  {
    v7 = a1[1];
    v8 = (uint64_t *)a1[2];
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
    **(_QWORD **)(v7 + 8) = v9;
    a1[3] = 0;
    if (v8 != a1 + 1)
    {
      do
      {
        v10 = (uint64_t *)v8[1];
        (*(void (**)(uint64_t *))v8[2])(v8 + 2);
        operator delete(v8);
        v8 = v10;
      }
      while (v10 != a1 + 1);
    }
  }
  v11 = *a1;
  *a1 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_20EA1ED8C(uint64_t a1)
{
  sub_20EA206E0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA1EDB0(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  __int128 v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count **v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::mutex **v25;
  uint64_t **v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t **v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  std::__shared_weak_count_vtbl *v50;
  __int128 *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 *v55;
  _BYTE v56[24];
  _BYTE *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x60uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA878;
    v5[1].__vftable = *(std::__shared_weak_count_vtbl **)a2;
    v8 = v5 + 1;
    LODWORD(v5[1].__shared_owners_) = *(_DWORD *)(a2 + 8);
    *(uint64_t *)((char *)&v5[1].__shared_owners_ + 4) = *(_QWORD *)(a2 + 12);
    HIDWORD(v5[1].__shared_weak_owners_) = *(_DWORD *)(a2 + 20);
    v5[2].std::__shared_count = *(std::__shared_count *)(a2 + 24);
    LODWORD(v5[2].__shared_weak_owners_) = *(_DWORD *)(a2 + 40);
    v9 = *(_OWORD *)(a2 + 44);
    *(_OWORD *)&v5[3].__shared_owners_ = *(_OWORD *)(a2 + 56);
    *(_OWORD *)((char *)&v5[2].__shared_weak_owners_ + 4) = v9;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v11 = (_QWORD *)operator new();
    *v11 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v53 = v11;
    *((_QWORD *)&v53 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v12 = v4[4];
    v13 = *v4;
    v14 = (std::__shared_weak_count **)(*v4 + 16 * v12);
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    *v14 = v8;
    v16 = v13 + 16 * v12;
    v17 = *(std::__shared_weak_count **)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v5;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (v4[1] - *v4) >> 4;
    v21 = v4[5];
    v22 = v4[4] + 1;
    if (v22 >= v20)
      v23 = (v4[1] - *v4) >> 4;
    else
      v23 = 0;
    v4[4] = v22 - v23;
    if (v21 == v20)
    {
      v24 = v4[3] + 1;
      if (v24 < v20)
        v20 = 0;
      v4[3] = v24 - v20;
      v25 = (std::mutex **)v53;
      if (!(_QWORD)v53)
      {
LABEL_33:
        v35 = (uint64_t **)a1[9];
        v53 = 0uLL;
        v36 = (std::__shared_weak_count *)a1[5];
        if (v36)
        {
          v37 = std::__shared_weak_count::lock(v36);
          if (v37)
          {
            v38 = v37;
            v39 = a1[4];
            v40 = (unint64_t *)&v37->__shared_weak_owners_;
            do
              v41 = __ldxr(v40);
            while (__stxr(v41 + 1, v40));
            *(_QWORD *)&v53 = v39;
            *((_QWORD *)&v53 + 1) = v37;
            v42 = (unint64_t *)&v37->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          else
          {
            v53 = 0uLL;
          }
        }
        v44 = (char *)operator new(0x30uLL);
        *(_QWORD *)v44 = &off_24C9BA8C8;
        *(_OWORD *)(v44 + 8) = v53;
        v53 = 0uLL;
        *((_QWORD *)v44 + 3) = v8;
        *((_QWORD *)v44 + 4) = v5;
        v54 = 0;
        v55 = 0;
        v57 = v44;
        sub_210216F3C(*v35, (uint64_t)v56);
        v45 = v57;
        if (v57 == v56)
        {
          v46 = 4;
          v45 = v56;
        }
        else
        {
          if (!v57)
            goto LABEL_47;
          v46 = 5;
        }
        (*(void (**)(_QWORD *))(*v45 + 8 * v46))(v45);
LABEL_47:
        if (v5)
        {
          v47 = (unint64_t *)&v5->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v21 + 1;
      v25 = (std::mutex **)v53;
      if (!(_QWORD)v53)
        goto LABEL_33;
    }
    std::mutex::unlock(*v25);
    MEMORY[0x212BC6398](v25, 0x20C4093837F09);
    goto LABEL_33;
  }
  v26 = (uint64_t **)a1[9];
  v27 = (std::__shared_weak_count *)a1[5];
  if (v27)
  {
    v28 = std::__shared_weak_count::lock(v27);
    v29 = v28;
    if (v28)
    {
      v30 = a1[4];
      v31 = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = (unint64_t *)&v28->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else
    {
      v30 = 0;
    }
  }
  else
  {
    v30 = 0;
    v29 = 0;
  }
  v49 = (char *)operator new(0x60uLL);
  *(_QWORD *)v49 = &off_24C9BA948;
  *((_QWORD *)v49 + 1) = v30;
  v50 = *(std::__shared_weak_count_vtbl **)a2;
  *((_QWORD *)v49 + 2) = v29;
  *((_QWORD *)v49 + 3) = v50;
  *((_DWORD *)v49 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v49 + 36) = *(_QWORD *)(a2 + 12);
  *((_DWORD *)v49 + 11) = *(_DWORD *)(a2 + 20);
  *((_OWORD *)v49 + 3) = *(_OWORD *)(a2 + 24);
  *((_DWORD *)v49 + 16) = *(_DWORD *)(a2 + 40);
  *((_OWORD *)v49 + 5) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v49 + 68) = *(_OWORD *)(a2 + 44);
  v55 = (__int128 *)v49;
  sub_210216F3C(*v26, (uint64_t)&v53);
  v51 = v55;
  if (v55 == &v53)
  {
    v52 = 4;
    v51 = &v53;
  }
  else
  {
    if (!v55)
      return;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
}

void sub_20EA1F230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA1F324(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA1F334(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA1F340(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA1F350(_QWORD *a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t *v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::mutex **v30;
  uint64_t **v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t **v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *p_shared_weak_owners;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  char *v49;
  std::string *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  __int128 v58;
  __int128 *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  __int128 *v64;
  std::string *v65;
  std::runtime_error *exception;
  std::runtime_error *v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::runtime_error v71;
  char *v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  int v80;
  _BYTE v81[28];
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  _QWORD *v85;
  __int128 *v86;
  _QWORD v87[3];
  std::string v88;
  std::string *v89;
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v84 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v84 + 1) = 45;
    v63 = (_QWORD *)a1[6];
    v62 = a1 + 6;
    v61 = v63;
    v64 = (__int128 *)*((unsigned __int8 *)v62 + 23);
    if ((char)v64 < 0)
      v64 = (__int128 *)v62[1];
    else
      v61 = v62;
    v85 = v61;
    v86 = v64;
    sub_20E8778D4((uint64_t)&v84, (uint64_t)v87, 0, 0, &v88);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v88;
    else
      v65 = (std::string *)v88.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v71, (const char *)v65);
    v71.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v67 = std::runtime_error::runtime_error(exception, &v71);
    v67->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v67, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA9C8;
    v6[1].__vftable = *a3;
    v70 = v6;
    v68 = &v6[1].__vftable;
    v69 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (char *)operator new(0x60uLL);
    *((_QWORD *)v9 + 1) = 0;
    v10 = (unint64_t *)(v9 + 8);
    *((_QWORD *)v9 + 2) = 0;
    v11 = (unint64_t *)(v9 + 16);
    *(_QWORD *)v9 = &off_24C9BA878;
    *((_QWORD *)v9 + 3) = *a2;
    v12 = v9 + 24;
    *((_DWORD *)v9 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(v9 + 36) = *(uint64_t *)((char *)a2 + 12);
    *((_DWORD *)v9 + 11) = *((_DWORD *)a2 + 5);
    *((_OWORD *)v9 + 3) = *(_OWORD *)(a2 + 3);
    *((_DWORD *)v9 + 16) = *((_DWORD *)a2 + 10);
    v13 = *(_OWORD *)((char *)a2 + 44);
    *((_OWORD *)v9 + 5) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(v9 + 68) = v13;
    v72 = v9 + 24;
    v73 = (std::__shared_weak_count *)v9;
    do
      v14 = __ldxr(v11);
    while (__stxr(v14 + 1, v11));
    v15 = (uint64_t *)a1[18];
    v16 = (_QWORD *)operator new();
    *v16 = v15 + 7;
    std::mutex::lock((std::mutex *)(v15 + 7));
    *(_QWORD *)&v84 = v16;
    *((_QWORD *)&v84 + 1) = v15;
    if (!*((_BYTE *)v15 + 48))
      sub_20E866B34();
    v17 = v15[4];
    v18 = *v15;
    v19 = (_QWORD *)(*v15 + 16 * v17);
    do
      v20 = __ldxr(v10);
    while (__stxr(v20 + 1, v10));
    *v19 = v12;
    v21 = v18 + 16 * v17;
    v22 = *(std::__shared_weak_count **)(v21 + 8);
    *(_QWORD *)(v21 + 8) = v9;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (v15[1] - *v15) >> 4;
    v26 = v15[5];
    v27 = v15[4] + 1;
    if (v27 >= v25)
      v28 = (v15[1] - *v15) >> 4;
    else
      v28 = 0;
    v15[4] = v27 - v28;
    if (v26 == v25)
    {
      v29 = v15[3] + 1;
      if (v29 < v25)
        v25 = 0;
      v15[3] = v29 - v25;
      v30 = (std::mutex **)v84;
      if (!(_QWORD)v84)
      {
LABEL_37:
        v40 = (uint64_t **)a1[9];
        v84 = 0uLL;
        v41 = (std::__shared_weak_count *)a1[5];
        if (v41)
        {
          v42 = std::__shared_weak_count::lock(v41);
          if (v42)
          {
            v43 = v42;
            v44 = a1[4];
            p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
            do
              v46 = __ldxr(p_shared_weak_owners);
            while (__stxr(v46 + 1, p_shared_weak_owners));
            *(_QWORD *)&v84 = v44;
            *((_QWORD *)&v84 + 1) = v42;
            v47 = (unint64_t *)&v42->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          else
          {
            v84 = 0uLL;
          }
        }
        v49 = (char *)operator new(0x38uLL);
        *(_QWORD *)v49 = &off_24C9BAA18;
        *(_OWORD *)(v49 + 8) = v84;
        v84 = 0uLL;
        *((_QWORD *)v49 + 3) = v12;
        *((_QWORD *)v49 + 4) = v9;
        v85 = 0;
        v86 = 0;
        *((_QWORD *)v49 + 5) = v68;
        *((_QWORD *)v49 + 6) = v69;
        v87[0] = 0;
        v87[1] = 0;
        v89 = (std::string *)v49;
        sub_210216F3C(*v40, (uint64_t)&v88);
        v50 = v89;
        if (v89 == &v88)
        {
          v51 = 4;
          v50 = &v88;
        }
        else
        {
          if (!v89)
            goto LABEL_51;
          v51 = 5;
        }
        (*(void (**)(void))(v50->__r_.__value_.__r.__words[0] + 8 * v51))();
LABEL_51:
        if (v73)
        {
          v52 = &v73->__shared_owners_;
          do
            v53 = __ldaxr((unint64_t *)v52);
          while (__stlxr(v53 - 1, (unint64_t *)v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        if (v70)
        {
          v54 = (unint64_t *)&v70->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        return;
      }
    }
    else
    {
      v15[5] = v26 + 1;
      v30 = (std::mutex **)v84;
      if (!(_QWORD)v84)
        goto LABEL_37;
    }
    std::mutex::unlock(*v30);
    MEMORY[0x212BC6398](v30, 0x20C4093837F09);
    goto LABEL_37;
  }
  v31 = (uint64_t **)a1[9];
  v74 = 0uLL;
  v32 = (std::__shared_weak_count *)a1[5];
  if (v32)
  {
    v33 = std::__shared_weak_count::lock(v32);
    if (v33)
    {
      v34 = v33;
      v35 = a1[4];
      v36 = (unint64_t *)&v33->__shared_weak_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      *(_QWORD *)&v74 = v35;
      *((_QWORD *)&v74 + 1) = v33;
      v38 = (unint64_t *)&v33->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      v74 = 0uLL;
    }
  }
  v75 = *a2;
  v76 = *((_DWORD *)a2 + 2);
  v77 = *(uint64_t *)((char *)a2 + 12);
  v78 = *((_DWORD *)a2 + 5);
  v79 = *(_OWORD *)(a2 + 3);
  v80 = *((_DWORD *)a2 + 10);
  *(_OWORD *)&v81[12] = *(_OWORD *)(a2 + 7);
  *(_OWORD *)v81 = *(_OWORD *)((char *)a2 + 44);
  v56 = operator new(0x20uLL);
  v56[1] = 0;
  v56[2] = 0;
  *v56 = &off_24C9BA9C8;
  v56[3] = *a3;
  *a3 = 0;
  v57 = (char *)operator new(0x70uLL);
  *(_QWORD *)v57 = &off_24C9BAA98;
  *(_OWORD *)(v57 + 8) = v74;
  v74 = 0uLL;
  *((_QWORD *)v57 + 3) = v75;
  *((_DWORD *)v57 + 8) = v76;
  *(_QWORD *)(v57 + 36) = v77;
  *((_DWORD *)v57 + 11) = v78;
  *((_DWORD *)v57 + 16) = v80;
  *((_OWORD *)v57 + 3) = v79;
  v58 = *(_OWORD *)v81;
  *((_OWORD *)v57 + 5) = *(_OWORD *)&v81[12];
  *(_OWORD *)(v57 + 68) = v58;
  *((_QWORD *)v57 + 12) = v56 + 3;
  *((_QWORD *)v57 + 13) = v56;
  v82 = 0;
  v83 = 0;
  v86 = (__int128 *)v57;
  sub_210216F3C(*v31, (uint64_t)&v84);
  v59 = v86;
  if (v86 == &v84)
  {
    v60 = 4;
    v59 = &v84;
  }
  else
  {
    if (!v86)
      return;
    v60 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v59 + 8 * v60))();
}

void sub_20EA1FA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, std::exception_ptr a15)
{
  std::__assoc_sub_state **v15;
  uint64_t v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v17 = *v15;
    if (*v15)
    {
      std::exception_ptr::exception_ptr((std::exception_ptr *)(v16 - 160), &a15);
      v18.__ptr_ = (void *)(v16 - 160);
      std::__assoc_sub_state::set_exception(v17, v18);
      std::exception_ptr::~exception_ptr((std::exception_ptr *)(v16 - 160));
      std::exception_ptr::~exception_ptr(&a15);
      std::runtime_error::~runtime_error(&a14);
      if (*(char *)(v16 - 81) < 0)
        operator delete(*(void **)(v16 - 104));
      JUMPOUT(0x20EA1F940);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA1FAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::runtime_error a14, std::exception_ptr a15)
{
  uint64_t v15;

  std::exception_ptr::~exception_ptr(&a15);
  std::runtime_error::~runtime_error(&a14);
  if (*(char *)(v15 - 81) < 0)
  {
    operator delete(*(void **)(v15 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA1FAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  va_list va;

  va_start(va, a11);
  v14 = *(_QWORD **)(v12 - 136);
  if (v14 == v11)
  {
    v15 = 4;
    v14 = (_QWORD *)(v12 - 160);
  }
  else
  {
    if (!v14)
    {
      sub_20EA215F4((uint64_t)va);
      _Unwind_Resume(a1);
    }
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
  sub_20EA215F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20EA1FB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20)
  {
    std::__shared_weak_count::__release_weak(a20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA1FB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  v5 = *(_QWORD **)(v3 - 80);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 104);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  sub_20EA031A8((_QWORD *)(v3 - 160));
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA1FC0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA1FC28(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA1FC9C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9BAB18;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B2AA8;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EA1FDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA1FE40(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BAB98;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA1FF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA1FFB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BAC18;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA201CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA20294@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BAC98;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA204AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA20574(uint64_t a1)
{
  return sub_20EA206E0(a1 - 16);
}

void sub_20EA2057C(uint64_t a1)
{
  sub_20EA206E0(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA205A4(uint64_t a1, uint64_t a2)
{
  return sub_20EA1FC9C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA205AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA1FFB4((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA205B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA20294((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA205BC(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA205C4(uint64_t a1)
{
  return sub_20EA206E0(a1 - 24);
}

void sub_20EA205CC(uint64_t a1)
{
  sub_20EA206E0(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA205F4(uint64_t a1)
{
  return sub_20EA1FE40((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA205FC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA20604(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA2066C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

double sub_20EA206D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, simd_float3x3 a4@<0:Q0, 16:Q1, 32:Q2>, __n128 a5@<Q3>, float32x4_t a6@<Q5>, float32x4_t a7@<Q6>, int32x4_t a8@<Q7>)
{
  return sub_20EEF0E48(**(uint64_t ***)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20EA206E0(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9BA678;
  *(_QWORD *)(a1 + 16) = &unk_24C9BA6F0;
  *(_QWORD *)(a1 + 24) = &unk_24C9BA730;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EA208E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA208F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA20928(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BA8C8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA2096C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BA8C8;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA209C0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BA8C8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA20A30(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BA8C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA20A80(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA20ABC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA20AF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EA20E18((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20E96CED4(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA20CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20E96CED4(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA20DA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestRe"
                     "sultCollectionEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_"
                                "23HitTestResultCollectionEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_"
                                "E_EEvSB_SC_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_4SendERKS6_EUlT_T0_E_EEvSB_SC_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA20E0C()
{
  return &unk_24C9BA928;
}

void sub_20EA20E18(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::exception_ptr v30;
  void *__p;
  char *v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(&__p, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, &__p);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!*a3)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v30.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v30), v15))
    {
      sub_20E96CE78(2u);
    }
    *(_QWORD *)(v14 + 144) = 0;
    *(_QWORD *)(v14 + 152) = 0;
    *(_QWORD *)(v14 + 160) = 0;
    v16 = (char *)__p;
    v17 = v32;
    v18 = v32 - (_BYTE *)__p;
    if (v32 != __p)
    {
      v19 = 0x8E38E38E38E38E39 * (v18 >> 4);
      if (v19 >= 0x1C71C71C71C71C8)
        sub_20E969238();
      v20 = (char *)operator new(v18);
      v21 = 0;
      *(_QWORD *)(v14 + 144) = v20;
      *(_QWORD *)(v14 + 152) = v20;
      *(_QWORD *)(v14 + 160) = &v20[144 * v19];
      do
      {
        v22 = &v16[v21];
        v23 = &v20[v21];
        v24 = *(_OWORD *)&v16[v21];
        v25 = *(_OWORD *)&v16[v21 + 16];
        v26 = *(_OWORD *)&v16[v21 + 48];
        *((_OWORD *)v23 + 2) = *(_OWORD *)&v16[v21 + 32];
        *((_OWORD *)v23 + 3) = v26;
        *(_OWORD *)v23 = v24;
        *((_OWORD *)v23 + 1) = v25;
        v28 = *(_OWORD *)&v16[v21 + 96];
        v27 = *(_OWORD *)&v16[v21 + 112];
        v29 = *(_OWORD *)&v16[v21 + 80];
        *(_OWORD *)(v23 + 121) = *(_OWORD *)&v16[v21 + 121];
        *((_OWORD *)v23 + 6) = v28;
        *((_OWORD *)v23 + 7) = v27;
        *((_OWORD *)v23 + 5) = v29;
        *((_OWORD *)v23 + 4) = *(_OWORD *)&v16[v21 + 64];
        v21 += 144;
      }
      while (v22 + 144 != v17);
      *(_QWORD *)(v14 + 152) = &v20[v21];
    }
    *(_OWORD *)(v14 + 168) = v33;
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20EA2117C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, int a14, __int16 a15, char a16, unsigned __int8 a17, void *__p, uint64_t a19)
{
  std::mutex *v19;
  void **v20;
  uint64_t v21;
  void **v22;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v22 = v20;
  v25 = *v22;
  if (*v22)
  {
    *(_QWORD *)(v21 + 152) = v25;
    operator delete(v25);
  }
  std::mutex::unlock(v19);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a2 == 1)
  {
    v26 = (uint64_t *)__cxa_begin_catch(a1);
    v27 = *v26;
    a11 = *(_QWORD *)(*(_QWORD *)(*v26 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a10 = (*(uint64_t (**)(void))(v27 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a11, "\n", "message: ", (const char *)&a10, "\n");
    if ((a17 & 0x80u) == 0)
      v28 = (uint64_t *)&a12;
    else
      v28 = a12;
    if ((a17 & 0x80u) == 0)
      v29 = a17;
    else
      v29 = a13;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v28, v29, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA21290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20EA212B4(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20EA212BCLL);
  sub_20E860DA4(a1);
}

_QWORD *sub_20EA212CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BA948;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA21304(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BA948;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

__n128 sub_20EA2134C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v2 = &off_24C9BA948;
  *((_QWORD *)v2 + 1) = v4;
  *((_QWORD *)v2 + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 36) = *(_QWORD *)(a1 + 36);
  *((_DWORD *)v2 + 11) = *(_DWORD *)(a1 + 44);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  *((_OWORD *)v2 + 5) = *(_OWORD *)(a1 + 80);
  result = *(__n128 *)(a1 + 68);
  *(__n128 *)(v2 + 68) = result;
  return result;
}

__n128 sub_20EA213DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24C9BA948;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 24) = v6;
  v7 = *(_QWORD *)(a1 + 36);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(a1 + 44);
  *(_QWORD *)(a2 + 36) = v7;
  v8 = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v8;
  result = *(__n128 *)(a1 + 68);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(__n128 *)(a2 + 68) = result;
  return result;
}

void sub_20EA2144C(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA2145C(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA21488(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EA20E18((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20E96CED4(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA21530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20E96CED4(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA2157C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestRe"
                     "sultCollectionEvS7_Lb0EE4SendERKS6_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_"
                                "23HitTestResultCollectionEvS7_Lb0EE4SendERKS6_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE4SendERKS6_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE4SendERKS6_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA215E8()
{
  return &unk_24C9BA9A8;
}

uint64_t sub_20EA215F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA21664(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA21674(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BA9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EA216A4(uint64_t a1)
{
  return sub_20E96CED4((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EA216B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BAA18;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA21738(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BAA18;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA217D0(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BAA18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA21860(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BAA18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA218D0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA21950(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA219CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA20E18(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20E96CED4((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA21CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA21CD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EA21AE0);
    JUMPOUT(0x20EA21AB0);
  }
  sub_20E96CE78(3u);
}

void sub_20EA21D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA21D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20E96CED4(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA21E48(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestRe"
                     "sultCollectionEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T"
                     "0_E_EEvSB_SF_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_"
                                "23HitTestResultCollectionEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3_"
                                "_17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE25EnqueueMessageAndDispatchIZNKS8_7ProcessERKS6_NSt3__17promiseIS7_EEEUlT_T0_E_EEvSB_SF_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA21EB4()
{
  return &unk_24C9BAA78;
}

_QWORD *sub_20EA21EC0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BAA98;
  v2 = (std::__shared_weak_count *)a1[13];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA21F3C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BAA98;
  v2 = (std::__shared_weak_count *)a1[13];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

char *sub_20EA21FC8(uint64_t a1)
{
  char *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = (char *)operator new(0x70uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)result = &off_24C9BAA98;
  *((_QWORD *)result + 1) = v4;
  *((_QWORD *)result + 2) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)result + 3) = *(_QWORD *)(a1 + 24);
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(result + 36) = *(_QWORD *)(a1 + 36);
  *((_DWORD *)result + 11) = *(_DWORD *)(a1 + 44);
  *((_OWORD *)result + 3) = *(_OWORD *)(a1 + 48);
  *((_DWORD *)result + 16) = *(_DWORD *)(a1 + 64);
  *((_OWORD *)result + 5) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(result + 68) = *(_OWORD *)(a1 + 68);
  v7 = *(_QWORD *)(a1 + 104);
  *((_QWORD *)result + 12) = *(_QWORD *)(a1 + 96);
  *((_QWORD *)result + 13) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20EA22078(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9BAA98;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  *(_QWORD *)(a2 + 24) = v6;
  v7 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 44) = *(_DWORD *)(result + 44);
  *(_QWORD *)(a2 + 36) = v7;
  v8 = *(_OWORD *)(result + 48);
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(result + 64);
  *(_OWORD *)(a2 + 48) = v8;
  v9 = *(_OWORD *)(result + 68);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(result + 80);
  *(_OWORD *)(a2 + 68) = v9;
  v10 = *(_QWORD *)(result + 104);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(result + 96);
  *(_QWORD *)(a2 + 104) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

void sub_20EA22108(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EA22178(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[13];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EA221E8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[12];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA20E18((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20E96CED4((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA222F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EA22370(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EA223A4);
  JUMPOUT(0x20EA223D4);
}

uint64_t sub_20EA223DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestRe"
                     "sultCollectionEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_"
                                "23HitTestResultCollectionEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE7ProcessERKS6_NSt3__17promiseIS7_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA22448()
{
  return &unk_24C9BAAF8;
}

_QWORD *sub_20EA22454(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BAB18;
  v2 = a1[4];
  a1[3] = &off_24C9B2AA8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA224AC(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BAB18;
  v2 = a1[4];
  a1[3] = &off_24C9B2AA8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA22514(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9BAB18;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B2AA8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EA2258C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA225AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9BAB18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B2AA8;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EA22614(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA2262C(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B2AA8;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA2267C(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B2AA8;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA226C8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B2AA8;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2277C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA227B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestRes"
                     "ultCollectionEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_2"
                                "3HitTestResultCollectionEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE9SubscribeENS1_12ChannelInputIS7_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA22824()
{
  return &unk_24C9BAB78;
}

_QWORD *sub_20EA22830(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BAB98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA22868(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BAB98;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA228B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BAB98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20EA22900(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C9BAB98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20EA22930(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA22940(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA2296C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        v6 = operator new(0x18uLL);
        v8 = *(_QWORD *)(v5 + 120);
        v7 = (_QWORD *)(v5 + 120);
        *v6 = v8;
        v6[1] = v7;
        *(_QWORD *)(v8 + 8) = v6;
        *v7 = v6;
        ++v7[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA22A00(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA22A3C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestRes"
                     "ultCollectionEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_2"
                                "3HitTestResultCollectionEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE15AddErrorHandlerENS1_12ChannelInputIvEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA22AA8()
{
  return &unk_24C9BABF8;
}

_QWORD *sub_20EA22AB4(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BAC18;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA22AEC(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BAC18;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA22B34(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BAC18;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA22B8C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BAC18;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA22BC4(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA22BD4(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA22C00(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (!v5)
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      v6 = (uint64_t *)a1[3];
      v7 = *(_QWORD *)(v5 + 112);
      v18 = 0;
      v17 = 0uLL;
      if (v7)
      {
        if (v7 >> 61)
          sub_20E92CED8();
        v8 = (char *)operator new(8 * v7);
        v9 = &v8[8 * v7];
        *(_QWORD *)&v17 = v8;
        *((_QWORD *)&v17 + 1) = v8;
        v18 = v9;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
        {
          do
          {
LABEL_7:
            v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 24) + 48))(*(_QWORD *)(v11 + 24));
            sub_20E9B2D04((uint64_t *)&v20, &v19);
            v11 = *(_QWORD *)(v11 + 8);
          }
          while (v11 != v10);
          *(_OWORD *)__p = v17;
          v16 = v18;
          v12 = *v6;
          if (*v6)
            goto LABEL_9;
          goto LABEL_18;
        }
      }
      else
      {
        v9 = 0;
        v8 = 0;
        v10 = v5 + 96;
        v11 = *(_QWORD *)(v5 + 104);
        v20 = &v17;
        if (v11 != v10)
          goto LABEL_7;
      }
      *(int64x2_t *)__p = vdupq_n_s64((unint64_t)v8);
      v16 = v9;
      v12 = *v6;
      if (*v6)
      {
LABEL_9:
        sub_20EA04C5C(v12, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_11;
      }
LABEL_18:
      sub_20E96CE78(3u);
    }
  }
}

void sub_20EA22D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA22DEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestRe"
                     "sultCollectionEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_"
                                "23HitTestResultCollectionEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE16OutputHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA22E58()
{
  return &unk_24C9BAC78;
}

_QWORD *sub_20EA22E64(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BAC98;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA22E9C(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BAC98;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA22EE4(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BAC98;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *sub_20EA22F3C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BAC98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void sub_20EA22F74(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA22F84(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA22FB0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      if (a1[1])
      {
        v5 = (uint64_t *)a1[3];
        __p = 0;
        v9 = 0;
        v10 = 0;
        if (!*v5)
          sub_20E96CE78(3u);
        sub_20EA04C5C(*v5, (uint64_t)&__p);
        if (__p)
        {
          v9 = __p;
          operator delete(__p);
        }
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA23068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (__p)
    operator delete(__p);
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA230B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestRe"
                     "sultCollectionEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_"
                                "23HitTestResultCollectionEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorINS_3acv16surfacedetection13HitTestIntentENS5_23HitTestResultCollectionEvS7_Lb0EE15ErrorHandlerIDsEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA23120()
{
  return &unk_24C9BACF8;
}

void sub_20EA23130(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t sub_20EA23154(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20EA2316C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3acv16surfacedetection13HitTestInt"
                     "entENS7_23HitTestResultCollectionEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3acv16surfacedetection1"
                                "3HitTestIntentENS7_23HitTestResultCollectionEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3acv16surfacedetection13HitTestIntentENS7_23HitTestResultCollectionEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3kit11concurrency6detail9ProcessorINS1_3acv16surfacedetection13HitTestIntentENS7_23HitTestResultCollectionEvS9_Lb0EEEE27__shared_ptr_default_deleteISA_SA_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20EA231DC(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA23208(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA23244@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (_QWORD *)operator new();
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BAD68;
  result[1] = v6;
  result[2] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = result;
  return result;
}

void sub_20EA232AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA2333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA23350(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA233E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA233F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA234B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA234CC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_20EA23590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA235A4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_20EA23648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20E86665C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA23660(uint64_t a1)
{
  sub_20EA24EB0(a1);
  JUMPOUT(0x212BC6398);
}

void sub_20EA23684(_QWORD *a1, _BYTE *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count **v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::mutex **v24;
  uint64_t **v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 *v54;
  _BYTE v55[24];
  _BYTE *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
    return;
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 234, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  v4 = (uint64_t *)a1[18];
  if (v4)
  {
    v5 = (std::__shared_weak_count *)operator new(0x20uLL);
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9BAFE0;
    LOBYTE(v5[1].__vftable) = *a2;
    v8 = v5 + 1;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    v10 = (_QWORD *)operator new();
    *v10 = v4 + 7;
    std::mutex::lock((std::mutex *)(v4 + 7));
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v4;
    if (!*((_BYTE *)v4 + 48))
      sub_20E866B34();
    v11 = v4[4];
    v12 = *v4;
    v13 = (std::__shared_weak_count **)(*v4 + 16 * v11);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *v13 = v8;
    v15 = v12 + 16 * v11;
    v16 = *(std::__shared_weak_count **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v5;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (v4[1] - *v4) >> 4;
    v20 = v4[5];
    v21 = v4[4] + 1;
    if (v21 >= v19)
      v22 = (v4[1] - *v4) >> 4;
    else
      v22 = 0;
    v4[4] = v21 - v22;
    if (v20 == v19)
    {
      v23 = v4[3] + 1;
      if (v23 < v19)
        v19 = 0;
      v4[3] = v23 - v19;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
      {
LABEL_33:
        v34 = (uint64_t **)a1[9];
        v52 = 0uLL;
        v35 = (std::__shared_weak_count *)a1[5];
        if (v35)
        {
          v36 = std::__shared_weak_count::lock(v35);
          if (v36)
          {
            v37 = v36;
            v38 = a1[4];
            v39 = (unint64_t *)&v36->__shared_weak_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
            *(_QWORD *)&v52 = v38;
            *((_QWORD *)&v52 + 1) = v36;
            v41 = (unint64_t *)&v36->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          else
          {
            v52 = 0uLL;
          }
        }
        v43 = (char *)operator new(0x30uLL);
        *(_QWORD *)v43 = &off_24C9BB030;
        *(_OWORD *)(v43 + 8) = v52;
        v52 = 0uLL;
        *((_QWORD *)v43 + 3) = v8;
        *((_QWORD *)v43 + 4) = v5;
        v53 = 0;
        v54 = 0;
        v56 = v43;
        sub_210216F3C(*v34, (uint64_t)v55);
        v44 = v56;
        if (v56 == v55)
        {
          v45 = 4;
          v44 = v55;
        }
        else
        {
          if (!v56)
            goto LABEL_47;
          v45 = 5;
        }
        (*(void (**)(_QWORD *))(*v44 + 8 * v45))(v44);
LABEL_47:
        if (v5)
        {
          v46 = (unint64_t *)&v5->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        return;
      }
    }
    else
    {
      v4[5] = v20 + 1;
      v24 = (std::mutex **)v52;
      if (!(_QWORD)v52)
        goto LABEL_33;
    }
    std::mutex::unlock(*v24);
    MEMORY[0x212BC6398](v24, 0x20C4093837F09);
    goto LABEL_33;
  }
  v25 = (uint64_t **)a1[9];
  v26 = (std::__shared_weak_count *)a1[5];
  if (v26)
  {
    v27 = std::__shared_weak_count::lock(v26);
    v28 = v27;
    if (v27)
    {
      v29 = a1[4];
      v30 = (unint64_t *)&v27->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v32 = (unint64_t *)&v27->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v48 = *a2;
  v49 = operator new(0x20uLL);
  *v49 = &off_24C9BB0B0;
  v49[1] = v29;
  v49[2] = v28;
  *((_BYTE *)v49 + 24) = v48;
  v54 = (__int128 *)v49;
  sub_210216F3C(*v25, (uint64_t)&v52);
  v50 = v54;
  if (v54 == &v52)
  {
    v51 = 4;
    v50 = &v52;
  }
  else
  {
    if (!v54)
      return;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
}

void sub_20EA23A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;

  if (a14 == v19)
  {
    (*(void (**)(void))(a11 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a14)
  {
    (*(void (**)(void))(*(_QWORD *)a14 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA23B90(uint64_t result)
{
  atomic_store(1u, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA23BA0(uint64_t result)
{
  atomic_store(0, (unsigned __int8 *)(result + 8));
  return result;
}

uint64_t sub_20EA23BAC(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 8));
  return v1 & 1;
}

void sub_20EA23BBC(_QWORD *a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  std::mutex **v29;
  uint64_t **v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  std::string *v67;
  std::runtime_error *exception;
  std::runtime_error *v69;
  __int128 v70;
  char v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::runtime_error v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  _QWORD *v79;
  __int128 *v80;
  _QWORD v81[3];
  std::string v82;
  std::string *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    *(_QWORD *)&v78 = "Invalid operation. Interface is disabled for ";
    *((_QWORD *)&v78 + 1) = 45;
    v65 = (_QWORD *)a1[6];
    v64 = a1 + 6;
    v63 = v65;
    v66 = (__int128 *)*((unsigned __int8 *)v64 + 23);
    if ((char)v66 < 0)
      v66 = (__int128 *)v64[1];
    else
      v63 = v64;
    v79 = v63;
    v80 = v66;
    sub_20E8778D4((uint64_t)&v78, (uint64_t)v81, 0, 0, &v82);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v82;
    else
      v67 = (std::string *)v82.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(&v75, (const char *)v67);
    v75.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v69 = std::runtime_error::runtime_error(exception, &v75);
    v69->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v69, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a1[9]
    && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 294, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
  {
    abort();
  }
  if (a1[18])
  {
    v6 = (std::__shared_weak_count *)operator new(0x20uLL);
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BB130;
    v6[1].__vftable = *a3;
    v74 = v6;
    v72 = &v6[1].__vftable;
    v73 = v6;
    v6->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    *a3 = 0;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    if (!a1[18]
      && sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 414, (uint64_t)"limiting_buffer_", 16, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v9 = (std::__shared_weak_count *)operator new(0x20uLL);
    v9->__shared_owners_ = 0;
    v10 = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9BAFE0;
    LOBYTE(v9[1].__vftable) = *a2;
    v12 = v9 + 1;
    v76 = v9 + 1;
    v77 = v9;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = (uint64_t *)a1[18];
    v15 = (_QWORD *)operator new();
    *v15 = v14 + 7;
    std::mutex::lock((std::mutex *)(v14 + 7));
    *(_QWORD *)&v78 = v15;
    *((_QWORD *)&v78 + 1) = v14;
    if (!*((_BYTE *)v14 + 48))
      sub_20E866B34();
    v16 = v14[4];
    v17 = *v14;
    v18 = (std::__shared_weak_count **)(*v14 + 16 * v16);
    do
      v19 = __ldxr(v10);
    while (__stxr(v19 + 1, v10));
    *v18 = v12;
    v20 = v17 + 16 * v16;
    v21 = *(std::__shared_weak_count **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v9;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = (v14[1] - *v14) >> 4;
    v25 = v14[5];
    v26 = v14[4] + 1;
    if (v26 >= v24)
      v27 = (v14[1] - *v14) >> 4;
    else
      v27 = 0;
    v14[4] = v26 - v27;
    if (v25 == v24)
    {
      v28 = v14[3] + 1;
      if (v28 < v24)
        v24 = 0;
      v14[3] = v28 - v24;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
      {
LABEL_37:
        v39 = (uint64_t **)a1[9];
        v78 = 0uLL;
        v40 = (std::__shared_weak_count *)a1[5];
        if (v40)
        {
          v41 = std::__shared_weak_count::lock(v40);
          if (v41)
          {
            v42 = v41;
            v43 = a1[4];
            v44 = (unint64_t *)&v41->__shared_weak_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
            *(_QWORD *)&v78 = v43;
            *((_QWORD *)&v78 + 1) = v41;
            v46 = (unint64_t *)&v41->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          else
          {
            v78 = 0uLL;
          }
        }
        v48 = (char *)operator new(0x38uLL);
        *(_QWORD *)v48 = &off_24C9BB180;
        *(_OWORD *)(v48 + 8) = v78;
        v78 = 0uLL;
        *((_QWORD *)v48 + 3) = v12;
        *((_QWORD *)v48 + 4) = v9;
        v79 = 0;
        v80 = 0;
        *((_QWORD *)v48 + 5) = v72;
        *((_QWORD *)v48 + 6) = v73;
        v81[0] = 0;
        v81[1] = 0;
        v83 = (std::string *)v48;
        sub_210216F3C(*v39, (uint64_t)&v82);
        v49 = v83;
        if (v83 == &v82)
        {
          v50 = 4;
          v49 = &v82;
        }
        else
        {
          if (!v83)
            goto LABEL_51;
          v50 = 5;
        }
        (*(void (**)(void))(v49->__r_.__value_.__r.__words[0] + 8 * v50))();
LABEL_51:
        if (v77)
        {
          v51 = &v77->__shared_owners_;
          do
            v52 = __ldaxr((unint64_t *)v51);
          while (__stlxr(v52 - 1, (unint64_t *)v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        if (v74)
        {
          v53 = (unint64_t *)&v74->__shared_owners_;
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        return;
      }
    }
    else
    {
      v14[5] = v25 + 1;
      v29 = (std::mutex **)v78;
      if (!(_QWORD)v78)
        goto LABEL_37;
    }
    std::mutex::unlock(*v29);
    MEMORY[0x212BC6398](v29, 0x20C4093837F09);
    goto LABEL_37;
  }
  v30 = (uint64_t **)a1[9];
  v70 = 0uLL;
  v31 = (std::__shared_weak_count *)a1[5];
  if (v31)
  {
    v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      v33 = v32;
      v34 = a1[4];
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      *(_QWORD *)&v70 = v34;
      *((_QWORD *)&v70 + 1) = v32;
      v37 = (unint64_t *)&v32->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v70 = 0uLL;
    }
  }
  v71 = *a2;
  v55 = operator new(0x20uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_24C9BB130;
  v55[3] = *a3;
  *a3 = 0;
  v56 = (char *)operator new(0x30uLL);
  *(_QWORD *)v56 = &off_24C9BB200;
  *(_OWORD *)(v56 + 8) = v70;
  v56[24] = v71;
  *((_QWORD *)v56 + 4) = v55 + 3;
  *((_QWORD *)v56 + 5) = v55;
  v80 = (__int128 *)v56;
  sub_210216F3C(*v30, (uint64_t)&v78);
  v61 = v80;
  if (v80 == &v78)
  {
    v62 = 4;
    v61 = &v78;
  }
  else
  {
    if (!v80)
      return;
    v62 = 5;
  }
  (*(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v61 + 8 * v62))(v61, v57, v58, v59, v60);
}

void sub_20EA241DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  std::__assoc_sub_state **v22;
  uint64_t v23;
  std::__assoc_sub_state *v24;
  std::exception_ptr v25;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    std::current_exception();
    __cxa_end_catch();
    v24 = *v22;
    if (*v22)
    {
      std::exception_ptr::exception_ptr(&a22, &a19);
      v25.__ptr_ = &a22;
      std::__assoc_sub_state::set_exception(v24, v25);
      std::exception_ptr::~exception_ptr(&a22);
      std::exception_ptr::~exception_ptr(&a19);
      std::runtime_error::~runtime_error(&a18);
      if (*(char *)(v23 - 81) < 0)
        operator delete(*(void **)(v23 - 104));
      JUMPOUT(0x20EA240F0);
    }
    sub_20E96CE78(3u);
  }
  _Unwind_Resume(exception_object);
}

void sub_20EA24250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::runtime_error a18, std::exception_ptr a19, uint64_t a20,uint64_t a21,std::exception_ptr a22)
{
  uint64_t v22;

  std::exception_ptr::~exception_ptr(&a19);
  std::runtime_error::~runtime_error(&a18);
  if (*(char *)(v22 - 81) < 0)
  {
    operator delete(*(void **)(v22 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA242A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26)
{
  char *v26;
  char *v28;
  uint64_t v29;

  v28 = a26;
  if (a26 == v26)
  {
    v29 = 4;
    v28 = &a23;
  }
  else
  {
    if (!a26)
    {
      sub_20EA25E90((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
  sub_20EA25E90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20EA242F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    std::__shared_weak_count::__release_weak(a10);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20EA2431C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va2;
  uint64_t v22;
  va_list va3;

  va_start(va3, a6);
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v20 = va_arg(va3, _QWORD);
  v22 = va_arg(va3, _QWORD);
  v9 = *(_QWORD **)(v7 - 80);
  if (v9 == v6)
  {
    v10 = 4;
    v9 = (_QWORD *)(v7 - 104);
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  sub_20EA031A8((uint64_t *)va3);
  sub_20E86665C((uint64_t)va2);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA243BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20E86665C((uint64_t)va);
  sub_20E86665C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20EA243D8(uint64_t a1)
{
  uint64_t *v1;

  v1 = *(uint64_t **)(a1 + 72);
  if (v1)
  {
    sub_210217048(*v1);
  }
  else
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 167, (uint64_t)"scheduler_ != nullptr", 21, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    sub_210217048(**(_QWORD **)(a1 + 72));
  }
}

_QWORD *sub_20EA2444C(_QWORD *a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t **)a1[9];
  if (!v4)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 181, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v4 = (uint64_t **)a1[9];
  }
  v6 = a1[4];
  v5 = a1[5];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = operator new(0x28uLL);
  *v10 = &off_24C9BB280;
  v10[1] = v6;
  v10[2] = v5;
  v10[3] = &off_24C9B2A08;
  v10[4] = v9;
  v14 = v10;
  sub_210216F3C(*v4, (uint64_t)v13);
  result = v14;
  if (v14 == v13)
  {
    v12 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_20EA2457C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20EA245F0(_QWORD *a1)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (uint64_t **)a1[9];
  if (!v2)
  {
    if (sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/Processor.h", 202, (uint64_t)"scheduler_", 10, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0))
    {
      abort();
    }
    v2 = (uint64_t **)a1[9];
  }
  v4 = a1[4];
  v3 = a1[5];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x20uLL);
  *v7 = &off_24C9BB300;
  v7[1] = v4;
  v7[2] = v3;
  v11 = v7;
  sub_210216F3C(*v2, (uint64_t)v10);
  result = v11;
  if (v11 == v10)
  {
    v9 = 4;
    result = v10;
  }
  else
  {
    if (!v11)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_20EA24700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13 == v13)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*(_QWORD *)a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20EA24764@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BB380;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA2497C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20EA24A44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_QWORD *)(v4 + 16) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_24C9B80A0;
  v22 = v4;
  std::mutex::lock((std::mutex *)(v4 + 24));
  v6 = *(_DWORD *)(v4 + 136);
  if ((v6 & 2) != 0)
    sub_20E96CE78(1u);
  do
    v7 = __ldxr(v5);
  while (__stxr(v7 + 1, v5));
  *(_DWORD *)(v4 + 136) = v6 | 2;
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v8 = (uint64_t **)a1[9];
  v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v11 = v10;
    if (v10)
    {
      v12 = a1[4];
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  v17 = operator new(0x20uLL);
  *v17 = &off_24C9BB400;
  v17[1] = v12;
  v17[2] = v11;
  v17[3] = &v22;
  v24 = v17;
  sub_210216F3C(*v8, (uint64_t)v23);
  v18 = v24;
  if (v24 == v23)
  {
    v19 = 4;
    v18 = v23;
    goto LABEL_17;
  }
  if (v24)
  {
    v19 = 5;
LABEL_17:
    (*(void (**)(_QWORD *))(*v18 + 8 * v19))(v18);
  }
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)v4);
  sub_20EA04D14(v4, a2);
  do
    v20 = __ldaxr(v5);
  while (__stlxr(v20 - 1, v5));
  if (!v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return sub_20EA04DE8(&v22);
}

void sub_20EA24C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    sub_20EA04DE8(&a9);
    _Unwind_Resume(a1);
  }
  sub_20EA04DE8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA24D24(uint64_t a1)
{
  return sub_20EA24EB0(a1 - 16);
}

void sub_20EA24D2C(uint64_t a1)
{
  sub_20EA24EB0(a1 - 16);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA24D54(uint64_t a1, uint64_t a2)
{
  return sub_20EA2444C((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA24D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA24764((_QWORD *)(a1 - 16), a2);
}

uint64_t *sub_20EA24D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20EA24A44((_QWORD *)(a1 - 16), a2);
}

uint64_t sub_20EA24D6C(uint64_t a1)
{
  return a1 - 16;
}

uint64_t sub_20EA24D74(uint64_t a1)
{
  return sub_20EA24EB0(a1 - 24);
}

void sub_20EA24D7C(uint64_t a1)
{
  sub_20EA24EB0(a1 - 24);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA24DA4(uint64_t a1)
{
  return sub_20EA245F0((_QWORD *)(a1 - 24));
}

uint64_t sub_20EA24DAC(uint64_t a1)
{
  return a1 - 24;
}

uint64_t sub_20EA24DB4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20EA24E1C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212BC6398);
}

double sub_20EA24E84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 8);
  if (v2)
  {
    sub_20EA25998((_QWORD *)a2, v2);
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_20EA24EB0(uint64_t a1)
{
  char **v2;
  char *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_24C9BADE0;
  *(_QWORD *)(a1 + 16) = &unk_24C9BAE58;
  *(_QWORD *)(a1 + 24) = &unk_24C9BAE98;
  v2 = *(char ***)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 7));
    if (*((_BYTE *)v2 + 48))
    {
      v3 = *v2;
      if (*v2)
      {
        v4 = v2[1];
        v5 = *v2;
        if (v4 != v3)
        {
          do
          {
            v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v8 = __ldaxr(p_shared_owners);
              while (__stlxr(v8 - 1, p_shared_owners));
              if (!v8)
              {
                ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
                std::__shared_weak_count::__release_weak(v6);
              }
            }
            v4 -= 16;
          }
          while (v4 != v3);
          v5 = *v2;
        }
        v2[1] = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x212BC6398](v2, 0x1022C400958DFA3);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    v10 = *(_QWORD *)(a1 + 120);
    v9 = *(uint64_t **)(a1 + 128);
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *(_QWORD *)(a1 + 136) = 0;
    if (v9 != (uint64_t *)(a1 + 120))
    {
      do
      {
        v12 = (uint64_t *)v9[1];
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (uint64_t *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 112))
  {
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(uint64_t **)(a1 + 104);
    v15 = *v14;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v15;
    *(_QWORD *)(a1 + 112) = 0;
    if (v14 != (uint64_t *)(a1 + 96))
    {
      do
      {
        v16 = (uint64_t *)v14[1];
        (*(void (**)(uint64_t *))v14[2])(v14 + 2);
        operator delete(v14);
        v14 = v16;
      }
      while (v16 != (uint64_t *)(a1 + 96));
    }
  }
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v18)
    goto LABEL_27;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (v20)
  {
LABEL_27:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  if (*(char *)(a1 + 71) < 0)
LABEL_28:
    operator delete(*(void **)(a1 + 48));
LABEL_29:
  v21 = *(std::__shared_weak_count **)(a1 + 40);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20EA250B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9BAFE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA250C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C9BAFE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA25100(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BB030;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA25144(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BB030;
  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA25198(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BB030;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

_QWORD *sub_20EA25208(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BB030;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA25258(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA25294(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = (std::__shared_weak_count *)__p[4];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA252CC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (v6)
  {
    v8 = a1[1];
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = 0;
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (v8)
  {
    if (v5)
    {
      LOBYTE(v20) = 0;
      v21 = 0;
      sub_20EA255F0((uint64_t *)(v8 + 88), v5, &v20);
      if (v21)
        sub_20E96D150(&v20);
    }
  }
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA25494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  if (a10)
    sub_20E96D150(&a9);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v10)
  {
    v18 = (unint64_t *)&v10->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA25578(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE25"
                     "EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoE"
                                "vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_4SendERKbEUlT_T0_E_EEvSA_SB_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA255E4()
{
  return &unk_24C9BB090;
}

void sub_20EA255F0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t i;
  unsigned __int8 v11;
  _QWORD *v12;
  _QWORD *j;
  uint64_t v14;
  uint64_t v15;
  std::exception_ptr v16;
  void *v17[3];
  void *v18;
  void *v19;
  void *__p;
  void *v21;

  v6 = *a1;
  if (!v6)
  {
    sub_21023D70C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 228, (uint64_t)"callable_", 9, (uint64_t)"", 0, (void (*)(void **))sub_21023DDB0);
    v7 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (byte_254A6DE68)
      v8 = byte_254A6DE70 == 0;
    else
      v8 = 0;
    if (!v8)
    {
      v9 = qword_254A6DE40;
      for (i = qword_254A6DE48; v9 != i; v9 += 16)
        (*(void (**)(_QWORD, const char *, uint64_t, const char *, _QWORD))v9)(*(_QWORD *)(v9 + 8), "callable_", 9, "", 0);
    }
    v11 = atomic_load((unsigned __int8 *)&qword_254A6DE78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254A6DE78))
    {
      __cxa_atexit((void (*)(void *))sub_21023DF30, &qword_254A6DE40, &dword_20E81F000);
      __cxa_guard_release(&qword_254A6DE78);
    }
    if (!byte_254A6DE68)
      abort();
    qword_254A6DE58(unk_254A6DE60, "callable_", 9, "", 0);
    v6 = *a1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v17, v6, a2);
  v12 = a1 + 1;
  for (j = (_QWORD *)a1[2]; j != v12; j = (_QWORD *)j[1])
    (*(void (**)(_QWORD *, void **))(j[2] + 16))(j + 2, v17);
  if (*((_BYTE *)a3 + 8))
  {
    v14 = *a3;
    if (!v14)
      sub_20E96CE78(3u);
    std::mutex::lock((std::mutex *)(v14 + 24));
    if ((*(_BYTE *)(v14 + 136) & 1) != 0
      || (v16.__ptr_ = 0, v15 = *(_QWORD *)(v14 + 16), std::exception_ptr::~exception_ptr(&v16), v15))
    {
      sub_20E96CE78(2u);
    }
    sub_20EA25998((_QWORD *)(v14 + 144), (uint64_t)v17);
    *(_DWORD *)(v14 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(v14 + 88));
    std::mutex::unlock((std::mutex *)(v14 + 24));
  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
}

void sub_20EA25890(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, int a13, __int16 a14, char a15, unsigned __int8 a16, char a17)
{
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  sub_20E95BF50((uint64_t)&a17);
  if (a2 == 1)
  {
    v19 = (uint64_t *)__cxa_begin_catch(a1);
    v20 = *v19;
    a10 = *(_QWORD *)(*(_QWORD *)(*v19 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL;
    a9 = (*(uint64_t (**)(void))(v20 + 16))();
    sub_20E9B0CC4("Caught unexpected exception of type: ", (const char *)&a10, "\n", "message: ", (const char *)&a9, "\n");
    if ((a16 & 0x80u) == 0)
      v21 = &a11;
    else
      v21 = a11;
    if ((a16 & 0x80u) == 0)
      v22 = a16;
    else
      v22 = a12;
    sub_21023D5B4("/Library/Caches/com.apple.xbs/Sources/AppleCV3D/library/Kit/Concurrency/include/Kit/Concurrency/Channel/detail/ProcessorInputMessageHandlingStrategy.h", 140, (uint64_t)"", 0, (uint64_t)v21, v22, (void (*)(void **))sub_21023DDB0);
    abort();
  }
  _Unwind_Resume(a1);
}

void sub_20EA2596C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x20EA2598CLL);
}

_QWORD *sub_20EA25998(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  size_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  size_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) > 0x1555555555555555)
      sub_20E867F44();
    v7 = (char *)operator new(v6);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[4 * (v6 >> 2)];
    v8 = 12 * ((v6 - 12) / 0xCuLL) + 12;
    memcpy(v7, v5, v8);
    a1[1] = &v7[v8];
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) > 0x1555555555555555)
      sub_20E867F44();
    v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    a1[5] = &v12[4 * (v11 >> 2)];
    v13 = 12 * ((v11 - 12) / 0xCuLL) + 12;
    memcpy(v12, v10, v13);
    a1[4] = &v12[v13];
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v15 = *(_BYTE **)(a2 + 48);
  v14 = *(_BYTE **)(a2 + 56);
  v16 = v14 - v15;
  if (v14 != v15)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v16 >> 2) > 0x1555555555555555)
      sub_20E867F44();
    v17 = (char *)operator new(v16);
    a1[6] = v17;
    a1[7] = v17;
    a1[8] = &v17[4 * (v16 >> 2)];
    memcpy(v17, v15, 12 * ((v16 - 12) / 0xCuLL) + 12);
    a1[7] = &v17[12 * ((v16 - 12) / 0xCuLL) + 12];
  }
  return a1;
}

void sub_20EA25B68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *(void **)v1;
      if (!*(_QWORD *)v1)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 32) = v6;
  operator delete(v6);
  v7 = *(void **)v1;
  if (!*(_QWORD *)v1)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  *(_QWORD *)(v1 + 8) = v7;
  operator delete(v7);
  goto LABEL_5;
}

void sub_20EA25BC8()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x20EA25B8CLL);
  JUMPOUT(0x20EA25B84);
}

_QWORD *sub_20EA25BD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_24C9BB0B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20EA25C10(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_24C9BB0B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA25C58(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BB0B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  return result;
}

uint64_t sub_20EA25CB0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9BB0B0;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  return result;
}

void sub_20EA25CE8(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_20EA25CF8(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void sub_20EA25D24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        LOBYTE(v8) = 0;
        v9 = 0;
        sub_20EA255F0((uint64_t *)(v5 + 88), a1 + 24, &v8);
        if (v9)
          sub_20E96D150(&v8);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_20EA25DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
    sub_20E96D150(&a9);
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20EA25E18(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE4SendERKbEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoE"
                                "vS6_Lb0EE4SendERKbEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE4SendERKbEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE4SendERKbEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA25E84()
{
  return &unk_24C9BB110;
}

uint64_t sub_20EA25E90(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA25F00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BB130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20EA25F10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C9BB130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC6398);
}

uint64_t *sub_20EA25F40(uint64_t a1)
{
  return sub_20E96D150((uint64_t *)(a1 + 24));
}

_QWORD *sub_20EA25F4C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BB180;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20EA25FD4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  *a1 = &off_24C9BB180;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[2];
      if (v6)
        std::__shared_weak_count::__release_weak(v6);
      JUMPOUT(0x212BC6398);
    }
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v5);
  goto LABEL_7;
}

_QWORD *sub_20EA2606C(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  result = operator new(0x38uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24C9BB180;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a1[4];
  result[3] = a1[3];
  result[4] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = a1[6];
  result[5] = a1[5];
  result[6] = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return result;
}

_QWORD *sub_20EA260FC(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24C9BB180;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = result[4];
  a2[3] = result[3];
  a2[4] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = result[6];
  a2[5] = result[5];
  a2[6] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return result;
}

void sub_20EA2616C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_20EA261EC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = (std::__shared_weak_count *)__p[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)__p[4];
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = (std::__shared_weak_count *)__p[4];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = (std::__shared_weak_count *)__p[2];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(__p);
}

void sub_20EA26268(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  std::runtime_error_vtbl **v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *v25;
  std::runtime_error v26;
  std::runtime_error v27;

  v2 = (std::__shared_weak_count *)a1[4];
  if (!v2)
  {
    v3 = 0;
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
LABEL_11:
    v7 = 0;
    v8 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    v5 = 0;
    v4 = (std::__shared_weak_count *)a1[2];
    if (v4)
      goto LABEL_6;
    goto LABEL_11;
  }
  v4 = (std::__shared_weak_count *)a1[2];
  v5 = a1[3];
  if (!v4)
    goto LABEL_11;
LABEL_6:
  v6 = std::__shared_weak_count::lock(v4);
  v7 = v6;
  if (!v6)
  {
    v8 = 0;
    if (!v3)
      goto LABEL_15;
    goto LABEL_13;
  }
  v8 = a1[1];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_12:
  if (!v3)
    goto LABEL_15;
LABEL_13:
  v11 = (unint64_t *)&v3->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
LABEL_15:
  if (!v8)
  {
    std::runtime_error::runtime_error(&v27, "Processor is no longer available.");
    v27.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v23 = std::runtime_error::runtime_error(exception, &v27);
    v23->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v23, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!v5)
  {
    std::runtime_error::runtime_error(&v26, "Message was dropped.");
    v26.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = std::runtime_error::runtime_error(v24, &v26);
    v25->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v25, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v13 = (uint64_t *)(v8 + 88);
  v14 = (std::runtime_error_vtbl **)a1[5];
  v26.__vftable = *v14;
  *v14 = 0;
  LOBYTE(v26.__imp_.__imp_) = 1;
  sub_20EA255F0(v13, v5, (uint64_t *)&v26);
  if (LOBYTE(v26.__imp_.__imp_))
    sub_20E96D150((uint64_t *)&v26);
  if (v3)
  {
    v15 = (unint64_t *)&v3->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v7)
  {
    v17 = (unint64_t *)&v7->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v3)
  {
    v20 = (unint64_t *)&v3->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20EA26544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::exception_ptr a14)
{
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  std::exception_ptr::~exception_ptr(&a14);
  std::runtime_error::~runtime_error(&a13);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v14)
  {
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA26570(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  uint64_t v15;
  std::__assoc_sub_state **v16;
  std::__assoc_sub_state *v17;
  std::exception_ptr v18;

  __cxa_begin_catch(a1);
  std::current_exception();
  __cxa_end_catch();
  v17 = *v16;
  if (v17)
  {
    std::exception_ptr::exception_ptr(&a15, &a11);
    v18.__ptr_ = &a15;
    std::__assoc_sub_state::set_exception(v17, v18);
    std::exception_ptr::~exception_ptr(&a15);
    std::exception_ptr::~exception_ptr(&a11);
    std::runtime_error::~runtime_error(&a10);
    if (!v15)
      JUMPOUT(0x20EA2637CLL);
    JUMPOUT(0x20EA2634CLL);
  }
  sub_20E96CE78(3u);
}

void sub_20EA265CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, std::exception_ptr a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  std::exception_ptr::~exception_ptr(&a11);
  std::runtime_error::~runtime_error(&a10);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v15)
  {
    v23 = (unint64_t *)&v15->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20EA265F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
    sub_20E96D150(&a10);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v11)
  {
    v19 = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20EA266E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE25"
                     "EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoE"
                                "vS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE25EnqueueMessageAndDispatchIZNKS7_7ProcessERKbNSt3__17promiseIS6_EEEUlT_T0_E_EEvSA_SE_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA26750()
{
  return &unk_24C9BB1E0;
}

_QWORD *sub_20EA2675C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BB200;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20EA267D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  *a1 = &off_24C9BB200;
  v2 = (std::__shared_weak_count *)a1[5];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  std::__shared_weak_count::__release_weak(v5);
LABEL_9:
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA26864(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = operator new(0x30uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C9BB200;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 40);
  result[4] = *(_QWORD *)(a1 + 32);
  result[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

uint64_t sub_20EA268DC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)a2 = &off_24C9BB200;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(result + 24);
  v6 = *(_QWORD *)(result + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 40) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void sub_20EA26934(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void sub_20EA269A4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)__p[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (std::__shared_weak_count *)__p[2];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (std::__shared_weak_count *)__p[2];
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  operator delete(__p);
}

void sub_20EA26A14(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::runtime_error_vtbl **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error v10;

  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = a1[1]) == 0)
  {
    std::runtime_error::runtime_error(&v10, "Invalid operation. Processor is released.");
    v10.__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v9 = std::runtime_error::runtime_error(exception, &v10);
    v9->__vftable = (std::runtime_error_vtbl *)&off_24CA1E2B8;
    __cxa_throw(v9, (struct type_info *)&unk_24CA1E2D0, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v5 = (std::runtime_error_vtbl **)a1[4];
  v10.__vftable = *v5;
  *v5 = 0;
  LOBYTE(v10.__imp_.__imp_) = 1;
  sub_20EA255F0((uint64_t *)(v4 + 88), (uint64_t)(a1 + 3), (uint64_t *)&v10);
  if (LOBYTE(v10.__imp_.__imp_))
    sub_20E96D150((uint64_t *)&v10);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_20EA26B24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  __break(1u);
}

void sub_20EA26B9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, std::exception_ptr a11)
{
  uint64_t v11;

  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::runtime_error::~runtime_error(&a10);
  if (v11)
    JUMPOUT(0x20EA26BD0);
  JUMPOUT(0x20EA26C00);
}

uint64_t sub_20EA26C08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE7P"
                     "rocessERKbNSt3__17promiseIS6_EEEUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoE"
                                "vS6_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK4cv3d3kit11concurrency6detail9ProcessorIbNS_3acv16surfacedetection16HitTestDebugInfoEvS6_Lb0EE7ProcessERKbNSt3__17promiseIS6_EEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20EA26C74()
{
  return &unk_24C9BB260;
}

_QWORD *sub_20EA26C80(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BB280;
  v2 = a1[4];
  a1[3] = &off_24C9B2A08;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_20EA26CD8(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  *a1 = &off_24C9BB280;
  v2 = a1[4];
  a1[3] = &off_24C9B2A08;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x212BC6398);
}

_QWORD *sub_20EA26D40(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = operator new(0x28uLL);
  v3 = v2;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24C9BB280;
  v2[1] = v5;
  v2[2] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v2[3] = &off_24C9B2A08;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  return v3;
}

void sub_20EA26DB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;

  v3 = (std::__shared_weak_count *)v1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20EA26DD8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  *a2 = &off_24C9BB280;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = &off_24C9B2A08;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_20EA26E40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void sub_20EA26E58(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = a1[4];
  a1[3] = &off_24C9B2A08;
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void sub_20EA26EA8(_QWORD *__p)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = __p[4];
  __p[3] = &off_24C9B2A08;
  __p[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  operator delete(__p);
}

void sub_20EA26EF4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = a1[1];
      if (v5)
      {
        v6 = operator new(0x20uLL);
        v7 = a1[4];
        a1[4] = 0;
        v6[2] = &off_24C9B2A08;
        v6[3] = v7;
        v9 = *(_QWORD *)(v5 + 96);
        v8 = (_QWORD *)(v5 + 96);
        *v6 = v9;
        v6[1] = v8;
        *(_QWORD *)(v9 + 8) = v6;
        *v8 = v6;
        ++v8[2];
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

